/**
 * NASCAR v2
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Driver from '../model/Driver';
import DriverRaceProjection from '../model/DriverRaceProjection';
import Race from '../model/Race';
import RaceResult from '../model/RaceResult';
import Series from '../model/Series';

/**
* Default service.
* @module api/DefaultApi
* @version 1.0
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the driverDetails operation.
     * @callback module:api/DefaultApi~driverDetailsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Driver} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Driver Details
     * @param {module:model/String} format Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
     * @param {String} driverid Unique FantasyData Driver ID. Example:<code>80000268</code>.
     * @param {module:api/DefaultApi~driverDetailsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Driver}
     */
    driverDetails(format, driverid, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling driverDetails");
      }
      // verify the required parameter 'driverid' is set
      if (driverid === undefined || driverid === null) {
        throw new Error("Missing the required parameter 'driverid' when calling driverDetails");
      }

      let pathParams = {
        'format': format,
        'driverid': driverid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Driver;
      return this.apiClient.callApi(
        '/{format}/driver/{driverid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the driverRaceProjectionsEntryList operation.
     * @callback module:api/DefaultApi~driverRaceProjectionsEntryListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/DriverRaceProjection>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Driver Race Projections (Entry List)
     * @param {module:model/String} format Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
     * @param {String} raceid Unique FantasyData Race ID. Example:<code>1</code>, <code>2</code>, etc.
     * @param {module:api/DefaultApi~driverRaceProjectionsEntryListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/DriverRaceProjection>}
     */
    driverRaceProjectionsEntryList(format, raceid, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling driverRaceProjectionsEntryList");
      }
      // verify the required parameter 'raceid' is set
      if (raceid === undefined || raceid === null) {
        throw new Error("Missing the required parameter 'raceid' when calling driverRaceProjectionsEntryList");
      }

      let pathParams = {
        'format': format,
        'raceid': raceid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [DriverRaceProjection];
      return this.apiClient.callApi(
        '/{format}/DriverRaceProjections/{raceid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the drivers operation.
     * @callback module:api/DefaultApi~driversCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Driver>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Drivers
     * @param {module:model/String} format Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
     * @param {module:api/DefaultApi~driversCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Driver>}
     */
    drivers(format, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling drivers");
      }

      let pathParams = {
        'format': format
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Driver];
      return this.apiClient.callApi(
        '/{format}/drivers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the raceResults operation.
     * @callback module:api/DefaultApi~raceResultsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RaceResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Race Results
     * @param {module:model/String} format Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
     * @param {String} raceid Unique FantasyData Race ID. Example:<code>1</code>, <code>2</code>, etc.
     * @param {module:api/DefaultApi~raceResultsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RaceResult}
     */
    raceResults(format, raceid, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling raceResults");
      }
      // verify the required parameter 'raceid' is set
      if (raceid === undefined || raceid === null) {
        throw new Error("Missing the required parameter 'raceid' when calling raceResults");
      }

      let pathParams = {
        'format': format,
        'raceid': raceid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RaceResult;
      return this.apiClient.callApi(
        '/{format}/raceresult/{raceid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the racesSchedule operation.
     * @callback module:api/DefaultApi~racesScheduleCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Race>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Races / Schedule
     * @param {module:model/String} format Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
     * @param {String} season Year of the season. <br>Examples: <code>2015</code>, <code>2016</code>.
     * @param {module:api/DefaultApi~racesScheduleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Race>}
     */
    racesSchedule(format, season, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling racesSchedule");
      }
      // verify the required parameter 'season' is set
      if (season === undefined || season === null) {
        throw new Error("Missing the required parameter 'season' when calling racesSchedule");
      }

      let pathParams = {
        'format': format,
        'season': season
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Race];
      return this.apiClient.callApi(
        '/{format}/races/{season}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the series operation.
     * @callback module:api/DefaultApi~seriesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Series>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Series
     * @param {module:model/String} format Desired response format. Valid entries are <code>XML</code> or <code>JSON</code>.
     * @param {module:api/DefaultApi~seriesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Series>}
     */
    series(format, callback) {
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling series");
      }

      let pathParams = {
        'format': format
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyQuery', 'apiKeyHeader'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Series];
      return this.apiClient.callApi(
        '/{format}/series', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
