/**
 * NASCAR v2
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Race model module.
 * @module model/Race
 * @version 1.0
 */
class Race {
    /**
     * Constructs a new <code>Race</code>.
     * @alias module:model/Race
     */
    constructor() { 
        
        Race.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Race</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Race} obj Optional instance to populate.
     * @return {module:model/Race} The populated <code>Race</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Race();

            if (data.hasOwnProperty('ActualLaps')) {
                obj['ActualLaps'] = ApiClient.convertToType(data['ActualLaps'], 'Number');
            }
            if (data.hasOwnProperty('Broadcast')) {
                obj['Broadcast'] = ApiClient.convertToType(data['Broadcast'], 'String');
            }
            if (data.hasOwnProperty('Canceled')) {
                obj['Canceled'] = ApiClient.convertToType(data['Canceled'], 'Boolean');
            }
            if (data.hasOwnProperty('Created')) {
                obj['Created'] = ApiClient.convertToType(data['Created'], 'String');
            }
            if (data.hasOwnProperty('DateTime')) {
                obj['DateTime'] = ApiClient.convertToType(data['DateTime'], 'String');
            }
            if (data.hasOwnProperty('Day')) {
                obj['Day'] = ApiClient.convertToType(data['Day'], 'String');
            }
            if (data.hasOwnProperty('IsInProgress')) {
                obj['IsInProgress'] = ApiClient.convertToType(data['IsInProgress'], 'Boolean');
            }
            if (data.hasOwnProperty('IsOver')) {
                obj['IsOver'] = ApiClient.convertToType(data['IsOver'], 'Boolean');
            }
            if (data.hasOwnProperty('Name')) {
                obj['Name'] = ApiClient.convertToType(data['Name'], 'String');
            }
            if (data.hasOwnProperty('PoleWinnerID')) {
                obj['PoleWinnerID'] = ApiClient.convertToType(data['PoleWinnerID'], 'Number');
            }
            if (data.hasOwnProperty('RaceID')) {
                obj['RaceID'] = ApiClient.convertToType(data['RaceID'], 'Number');
            }
            if (data.hasOwnProperty('RescheduledDateTime')) {
                obj['RescheduledDateTime'] = ApiClient.convertToType(data['RescheduledDateTime'], 'String');
            }
            if (data.hasOwnProperty('RescheduledDay')) {
                obj['RescheduledDay'] = ApiClient.convertToType(data['RescheduledDay'], 'String');
            }
            if (data.hasOwnProperty('ScheduledLaps')) {
                obj['ScheduledLaps'] = ApiClient.convertToType(data['ScheduledLaps'], 'Number');
            }
            if (data.hasOwnProperty('Season')) {
                obj['Season'] = ApiClient.convertToType(data['Season'], 'Number');
            }
            if (data.hasOwnProperty('SeriesID')) {
                obj['SeriesID'] = ApiClient.convertToType(data['SeriesID'], 'Number');
            }
            if (data.hasOwnProperty('SeriesName')) {
                obj['SeriesName'] = ApiClient.convertToType(data['SeriesName'], 'String');
            }
            if (data.hasOwnProperty('Track')) {
                obj['Track'] = ApiClient.convertToType(data['Track'], 'String');
            }
            if (data.hasOwnProperty('Updated')) {
                obj['Updated'] = ApiClient.convertToType(data['Updated'], 'String');
            }
            if (data.hasOwnProperty('WinnerID')) {
                obj['WinnerID'] = ApiClient.convertToType(data['WinnerID'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Race</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Race</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['Broadcast'] && !(typeof data['Broadcast'] === 'string' || data['Broadcast'] instanceof String)) {
            throw new Error("Expected the field `Broadcast` to be a primitive type in the JSON string but got " + data['Broadcast']);
        }
        // ensure the json data is a string
        if (data['Created'] && !(typeof data['Created'] === 'string' || data['Created'] instanceof String)) {
            throw new Error("Expected the field `Created` to be a primitive type in the JSON string but got " + data['Created']);
        }
        // ensure the json data is a string
        if (data['DateTime'] && !(typeof data['DateTime'] === 'string' || data['DateTime'] instanceof String)) {
            throw new Error("Expected the field `DateTime` to be a primitive type in the JSON string but got " + data['DateTime']);
        }
        // ensure the json data is a string
        if (data['Day'] && !(typeof data['Day'] === 'string' || data['Day'] instanceof String)) {
            throw new Error("Expected the field `Day` to be a primitive type in the JSON string but got " + data['Day']);
        }
        // ensure the json data is a string
        if (data['Name'] && !(typeof data['Name'] === 'string' || data['Name'] instanceof String)) {
            throw new Error("Expected the field `Name` to be a primitive type in the JSON string but got " + data['Name']);
        }
        // ensure the json data is a string
        if (data['RescheduledDateTime'] && !(typeof data['RescheduledDateTime'] === 'string' || data['RescheduledDateTime'] instanceof String)) {
            throw new Error("Expected the field `RescheduledDateTime` to be a primitive type in the JSON string but got " + data['RescheduledDateTime']);
        }
        // ensure the json data is a string
        if (data['RescheduledDay'] && !(typeof data['RescheduledDay'] === 'string' || data['RescheduledDay'] instanceof String)) {
            throw new Error("Expected the field `RescheduledDay` to be a primitive type in the JSON string but got " + data['RescheduledDay']);
        }
        // ensure the json data is a string
        if (data['SeriesName'] && !(typeof data['SeriesName'] === 'string' || data['SeriesName'] instanceof String)) {
            throw new Error("Expected the field `SeriesName` to be a primitive type in the JSON string but got " + data['SeriesName']);
        }
        // ensure the json data is a string
        if (data['Track'] && !(typeof data['Track'] === 'string' || data['Track'] instanceof String)) {
            throw new Error("Expected the field `Track` to be a primitive type in the JSON string but got " + data['Track']);
        }
        // ensure the json data is a string
        if (data['Updated'] && !(typeof data['Updated'] === 'string' || data['Updated'] instanceof String)) {
            throw new Error("Expected the field `Updated` to be a primitive type in the JSON string but got " + data['Updated']);
        }

        return true;
    }


}



/**
 * @member {Number} ActualLaps
 */
Race.prototype['ActualLaps'] = undefined;

/**
 * @member {String} Broadcast
 */
Race.prototype['Broadcast'] = undefined;

/**
 * @member {Boolean} Canceled
 */
Race.prototype['Canceled'] = undefined;

/**
 * @member {String} Created
 */
Race.prototype['Created'] = undefined;

/**
 * @member {String} DateTime
 */
Race.prototype['DateTime'] = undefined;

/**
 * @member {String} Day
 */
Race.prototype['Day'] = undefined;

/**
 * @member {Boolean} IsInProgress
 */
Race.prototype['IsInProgress'] = undefined;

/**
 * @member {Boolean} IsOver
 */
Race.prototype['IsOver'] = undefined;

/**
 * @member {String} Name
 */
Race.prototype['Name'] = undefined;

/**
 * @member {Number} PoleWinnerID
 */
Race.prototype['PoleWinnerID'] = undefined;

/**
 * @member {Number} RaceID
 */
Race.prototype['RaceID'] = undefined;

/**
 * @member {String} RescheduledDateTime
 */
Race.prototype['RescheduledDateTime'] = undefined;

/**
 * @member {String} RescheduledDay
 */
Race.prototype['RescheduledDay'] = undefined;

/**
 * @member {Number} ScheduledLaps
 */
Race.prototype['ScheduledLaps'] = undefined;

/**
 * @member {Number} Season
 */
Race.prototype['Season'] = undefined;

/**
 * @member {Number} SeriesID
 */
Race.prototype['SeriesID'] = undefined;

/**
 * @member {String} SeriesName
 */
Race.prototype['SeriesName'] = undefined;

/**
 * @member {String} Track
 */
Race.prototype['Track'] = undefined;

/**
 * @member {String} Updated
 */
Race.prototype['Updated'] = undefined;

/**
 * @member {Number} WinnerID
 */
Race.prototype['WinnerID'] = undefined;






export default Race;

