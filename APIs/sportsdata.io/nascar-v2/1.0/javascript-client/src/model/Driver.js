/**
 * NASCAR v2
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Driver model module.
 * @module model/Driver
 * @version 1.0
 */
class Driver {
    /**
     * Constructs a new <code>Driver</code>.
     * @alias module:model/Driver
     */
    constructor() { 
        
        Driver.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Driver</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Driver} obj Optional instance to populate.
     * @return {module:model/Driver} The populated <code>Driver</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Driver();

            if (data.hasOwnProperty('BirthDate')) {
                obj['BirthDate'] = ApiClient.convertToType(data['BirthDate'], 'String');
            }
            if (data.hasOwnProperty('BirthPlace')) {
                obj['BirthPlace'] = ApiClient.convertToType(data['BirthPlace'], 'String');
            }
            if (data.hasOwnProperty('Chassis')) {
                obj['Chassis'] = ApiClient.convertToType(data['Chassis'], 'String');
            }
            if (data.hasOwnProperty('Created')) {
                obj['Created'] = ApiClient.convertToType(data['Created'], 'String');
            }
            if (data.hasOwnProperty('CrewChief')) {
                obj['CrewChief'] = ApiClient.convertToType(data['CrewChief'], 'String');
            }
            if (data.hasOwnProperty('DriverID')) {
                obj['DriverID'] = ApiClient.convertToType(data['DriverID'], 'Number');
            }
            if (data.hasOwnProperty('Engine')) {
                obj['Engine'] = ApiClient.convertToType(data['Engine'], 'String');
            }
            if (data.hasOwnProperty('FirstName')) {
                obj['FirstName'] = ApiClient.convertToType(data['FirstName'], 'String');
            }
            if (data.hasOwnProperty('Gender')) {
                obj['Gender'] = ApiClient.convertToType(data['Gender'], 'String');
            }
            if (data.hasOwnProperty('Height')) {
                obj['Height'] = ApiClient.convertToType(data['Height'], 'Number');
            }
            if (data.hasOwnProperty('LastName')) {
                obj['LastName'] = ApiClient.convertToType(data['LastName'], 'String');
            }
            if (data.hasOwnProperty('Manufacturer')) {
                obj['Manufacturer'] = ApiClient.convertToType(data['Manufacturer'], 'String');
            }
            if (data.hasOwnProperty('Number')) {
                obj['Number'] = ApiClient.convertToType(data['Number'], 'Number');
            }
            if (data.hasOwnProperty('NumberDisplay')) {
                obj['NumberDisplay'] = ApiClient.convertToType(data['NumberDisplay'], 'String');
            }
            if (data.hasOwnProperty('PhotoUrl')) {
                obj['PhotoUrl'] = ApiClient.convertToType(data['PhotoUrl'], 'String');
            }
            if (data.hasOwnProperty('Sponsors')) {
                obj['Sponsors'] = ApiClient.convertToType(data['Sponsors'], 'String');
            }
            if (data.hasOwnProperty('Team')) {
                obj['Team'] = ApiClient.convertToType(data['Team'], 'String');
            }
            if (data.hasOwnProperty('Updated')) {
                obj['Updated'] = ApiClient.convertToType(data['Updated'], 'String');
            }
            if (data.hasOwnProperty('Weight')) {
                obj['Weight'] = ApiClient.convertToType(data['Weight'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Driver</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Driver</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['BirthDate'] && !(typeof data['BirthDate'] === 'string' || data['BirthDate'] instanceof String)) {
            throw new Error("Expected the field `BirthDate` to be a primitive type in the JSON string but got " + data['BirthDate']);
        }
        // ensure the json data is a string
        if (data['BirthPlace'] && !(typeof data['BirthPlace'] === 'string' || data['BirthPlace'] instanceof String)) {
            throw new Error("Expected the field `BirthPlace` to be a primitive type in the JSON string but got " + data['BirthPlace']);
        }
        // ensure the json data is a string
        if (data['Chassis'] && !(typeof data['Chassis'] === 'string' || data['Chassis'] instanceof String)) {
            throw new Error("Expected the field `Chassis` to be a primitive type in the JSON string but got " + data['Chassis']);
        }
        // ensure the json data is a string
        if (data['Created'] && !(typeof data['Created'] === 'string' || data['Created'] instanceof String)) {
            throw new Error("Expected the field `Created` to be a primitive type in the JSON string but got " + data['Created']);
        }
        // ensure the json data is a string
        if (data['CrewChief'] && !(typeof data['CrewChief'] === 'string' || data['CrewChief'] instanceof String)) {
            throw new Error("Expected the field `CrewChief` to be a primitive type in the JSON string but got " + data['CrewChief']);
        }
        // ensure the json data is a string
        if (data['Engine'] && !(typeof data['Engine'] === 'string' || data['Engine'] instanceof String)) {
            throw new Error("Expected the field `Engine` to be a primitive type in the JSON string but got " + data['Engine']);
        }
        // ensure the json data is a string
        if (data['FirstName'] && !(typeof data['FirstName'] === 'string' || data['FirstName'] instanceof String)) {
            throw new Error("Expected the field `FirstName` to be a primitive type in the JSON string but got " + data['FirstName']);
        }
        // ensure the json data is a string
        if (data['Gender'] && !(typeof data['Gender'] === 'string' || data['Gender'] instanceof String)) {
            throw new Error("Expected the field `Gender` to be a primitive type in the JSON string but got " + data['Gender']);
        }
        // ensure the json data is a string
        if (data['LastName'] && !(typeof data['LastName'] === 'string' || data['LastName'] instanceof String)) {
            throw new Error("Expected the field `LastName` to be a primitive type in the JSON string but got " + data['LastName']);
        }
        // ensure the json data is a string
        if (data['Manufacturer'] && !(typeof data['Manufacturer'] === 'string' || data['Manufacturer'] instanceof String)) {
            throw new Error("Expected the field `Manufacturer` to be a primitive type in the JSON string but got " + data['Manufacturer']);
        }
        // ensure the json data is a string
        if (data['NumberDisplay'] && !(typeof data['NumberDisplay'] === 'string' || data['NumberDisplay'] instanceof String)) {
            throw new Error("Expected the field `NumberDisplay` to be a primitive type in the JSON string but got " + data['NumberDisplay']);
        }
        // ensure the json data is a string
        if (data['PhotoUrl'] && !(typeof data['PhotoUrl'] === 'string' || data['PhotoUrl'] instanceof String)) {
            throw new Error("Expected the field `PhotoUrl` to be a primitive type in the JSON string but got " + data['PhotoUrl']);
        }
        // ensure the json data is a string
        if (data['Sponsors'] && !(typeof data['Sponsors'] === 'string' || data['Sponsors'] instanceof String)) {
            throw new Error("Expected the field `Sponsors` to be a primitive type in the JSON string but got " + data['Sponsors']);
        }
        // ensure the json data is a string
        if (data['Team'] && !(typeof data['Team'] === 'string' || data['Team'] instanceof String)) {
            throw new Error("Expected the field `Team` to be a primitive type in the JSON string but got " + data['Team']);
        }
        // ensure the json data is a string
        if (data['Updated'] && !(typeof data['Updated'] === 'string' || data['Updated'] instanceof String)) {
            throw new Error("Expected the field `Updated` to be a primitive type in the JSON string but got " + data['Updated']);
        }

        return true;
    }


}



/**
 * @member {String} BirthDate
 */
Driver.prototype['BirthDate'] = undefined;

/**
 * @member {String} BirthPlace
 */
Driver.prototype['BirthPlace'] = undefined;

/**
 * @member {String} Chassis
 */
Driver.prototype['Chassis'] = undefined;

/**
 * @member {String} Created
 */
Driver.prototype['Created'] = undefined;

/**
 * @member {String} CrewChief
 */
Driver.prototype['CrewChief'] = undefined;

/**
 * @member {Number} DriverID
 */
Driver.prototype['DriverID'] = undefined;

/**
 * @member {String} Engine
 */
Driver.prototype['Engine'] = undefined;

/**
 * @member {String} FirstName
 */
Driver.prototype['FirstName'] = undefined;

/**
 * @member {String} Gender
 */
Driver.prototype['Gender'] = undefined;

/**
 * @member {Number} Height
 */
Driver.prototype['Height'] = undefined;

/**
 * @member {String} LastName
 */
Driver.prototype['LastName'] = undefined;

/**
 * @member {String} Manufacturer
 */
Driver.prototype['Manufacturer'] = undefined;

/**
 * @member {Number} Number
 */
Driver.prototype['Number'] = undefined;

/**
 * @member {String} NumberDisplay
 */
Driver.prototype['NumberDisplay'] = undefined;

/**
 * @member {String} PhotoUrl
 */
Driver.prototype['PhotoUrl'] = undefined;

/**
 * @member {String} Sponsors
 */
Driver.prototype['Sponsors'] = undefined;

/**
 * @member {String} Team
 */
Driver.prototype['Team'] = undefined;

/**
 * @member {String} Updated
 */
Driver.prototype['Updated'] = undefined;

/**
 * @member {Number} Weight
 */
Driver.prototype['Weight'] = undefined;






export default Driver;

