# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Driver(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, birth_date: str=None, birth_place: str=None, chassis: str=None, created: str=None, crew_chief: str=None, driver_id: int=None, engine: str=None, first_name: str=None, gender: str=None, height: int=None, last_name: str=None, manufacturer: str=None, number: int=None, number_display: str=None, photo_url: str=None, sponsors: str=None, team: str=None, updated: str=None, weight: int=None):
        """Driver - a model defined in OpenAPI

        :param birth_date: The birth_date of this Driver.
        :param birth_place: The birth_place of this Driver.
        :param chassis: The chassis of this Driver.
        :param created: The created of this Driver.
        :param crew_chief: The crew_chief of this Driver.
        :param driver_id: The driver_id of this Driver.
        :param engine: The engine of this Driver.
        :param first_name: The first_name of this Driver.
        :param gender: The gender of this Driver.
        :param height: The height of this Driver.
        :param last_name: The last_name of this Driver.
        :param manufacturer: The manufacturer of this Driver.
        :param number: The number of this Driver.
        :param number_display: The number_display of this Driver.
        :param photo_url: The photo_url of this Driver.
        :param sponsors: The sponsors of this Driver.
        :param team: The team of this Driver.
        :param updated: The updated of this Driver.
        :param weight: The weight of this Driver.
        """
        self.openapi_types = {
            'birth_date': str,
            'birth_place': str,
            'chassis': str,
            'created': str,
            'crew_chief': str,
            'driver_id': int,
            'engine': str,
            'first_name': str,
            'gender': str,
            'height': int,
            'last_name': str,
            'manufacturer': str,
            'number': int,
            'number_display': str,
            'photo_url': str,
            'sponsors': str,
            'team': str,
            'updated': str,
            'weight': int
        }

        self.attribute_map = {
            'birth_date': 'BirthDate',
            'birth_place': 'BirthPlace',
            'chassis': 'Chassis',
            'created': 'Created',
            'crew_chief': 'CrewChief',
            'driver_id': 'DriverID',
            'engine': 'Engine',
            'first_name': 'FirstName',
            'gender': 'Gender',
            'height': 'Height',
            'last_name': 'LastName',
            'manufacturer': 'Manufacturer',
            'number': 'Number',
            'number_display': 'NumberDisplay',
            'photo_url': 'PhotoUrl',
            'sponsors': 'Sponsors',
            'team': 'Team',
            'updated': 'Updated',
            'weight': 'Weight'
        }

        self._birth_date = birth_date
        self._birth_place = birth_place
        self._chassis = chassis
        self._created = created
        self._crew_chief = crew_chief
        self._driver_id = driver_id
        self._engine = engine
        self._first_name = first_name
        self._gender = gender
        self._height = height
        self._last_name = last_name
        self._manufacturer = manufacturer
        self._number = number
        self._number_display = number_display
        self._photo_url = photo_url
        self._sponsors = sponsors
        self._team = team
        self._updated = updated
        self._weight = weight

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Driver':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Driver of this Driver.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def birth_date(self):
        """Gets the birth_date of this Driver.


        :return: The birth_date of this Driver.
        :rtype: str
        """
        return self._birth_date

    @birth_date.setter
    def birth_date(self, birth_date):
        """Sets the birth_date of this Driver.


        :param birth_date: The birth_date of this Driver.
        :type birth_date: str
        """

        self._birth_date = birth_date

    @property
    def birth_place(self):
        """Gets the birth_place of this Driver.


        :return: The birth_place of this Driver.
        :rtype: str
        """
        return self._birth_place

    @birth_place.setter
    def birth_place(self, birth_place):
        """Sets the birth_place of this Driver.


        :param birth_place: The birth_place of this Driver.
        :type birth_place: str
        """

        self._birth_place = birth_place

    @property
    def chassis(self):
        """Gets the chassis of this Driver.


        :return: The chassis of this Driver.
        :rtype: str
        """
        return self._chassis

    @chassis.setter
    def chassis(self, chassis):
        """Sets the chassis of this Driver.


        :param chassis: The chassis of this Driver.
        :type chassis: str
        """

        self._chassis = chassis

    @property
    def created(self):
        """Gets the created of this Driver.


        :return: The created of this Driver.
        :rtype: str
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this Driver.


        :param created: The created of this Driver.
        :type created: str
        """

        self._created = created

    @property
    def crew_chief(self):
        """Gets the crew_chief of this Driver.


        :return: The crew_chief of this Driver.
        :rtype: str
        """
        return self._crew_chief

    @crew_chief.setter
    def crew_chief(self, crew_chief):
        """Sets the crew_chief of this Driver.


        :param crew_chief: The crew_chief of this Driver.
        :type crew_chief: str
        """

        self._crew_chief = crew_chief

    @property
    def driver_id(self):
        """Gets the driver_id of this Driver.


        :return: The driver_id of this Driver.
        :rtype: int
        """
        return self._driver_id

    @driver_id.setter
    def driver_id(self, driver_id):
        """Sets the driver_id of this Driver.


        :param driver_id: The driver_id of this Driver.
        :type driver_id: int
        """

        self._driver_id = driver_id

    @property
    def engine(self):
        """Gets the engine of this Driver.


        :return: The engine of this Driver.
        :rtype: str
        """
        return self._engine

    @engine.setter
    def engine(self, engine):
        """Sets the engine of this Driver.


        :param engine: The engine of this Driver.
        :type engine: str
        """

        self._engine = engine

    @property
    def first_name(self):
        """Gets the first_name of this Driver.


        :return: The first_name of this Driver.
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this Driver.


        :param first_name: The first_name of this Driver.
        :type first_name: str
        """

        self._first_name = first_name

    @property
    def gender(self):
        """Gets the gender of this Driver.


        :return: The gender of this Driver.
        :rtype: str
        """
        return self._gender

    @gender.setter
    def gender(self, gender):
        """Sets the gender of this Driver.


        :param gender: The gender of this Driver.
        :type gender: str
        """

        self._gender = gender

    @property
    def height(self):
        """Gets the height of this Driver.


        :return: The height of this Driver.
        :rtype: int
        """
        return self._height

    @height.setter
    def height(self, height):
        """Sets the height of this Driver.


        :param height: The height of this Driver.
        :type height: int
        """

        self._height = height

    @property
    def last_name(self):
        """Gets the last_name of this Driver.


        :return: The last_name of this Driver.
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this Driver.


        :param last_name: The last_name of this Driver.
        :type last_name: str
        """

        self._last_name = last_name

    @property
    def manufacturer(self):
        """Gets the manufacturer of this Driver.


        :return: The manufacturer of this Driver.
        :rtype: str
        """
        return self._manufacturer

    @manufacturer.setter
    def manufacturer(self, manufacturer):
        """Sets the manufacturer of this Driver.


        :param manufacturer: The manufacturer of this Driver.
        :type manufacturer: str
        """

        self._manufacturer = manufacturer

    @property
    def number(self):
        """Gets the number of this Driver.


        :return: The number of this Driver.
        :rtype: int
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this Driver.


        :param number: The number of this Driver.
        :type number: int
        """

        self._number = number

    @property
    def number_display(self):
        """Gets the number_display of this Driver.


        :return: The number_display of this Driver.
        :rtype: str
        """
        return self._number_display

    @number_display.setter
    def number_display(self, number_display):
        """Sets the number_display of this Driver.


        :param number_display: The number_display of this Driver.
        :type number_display: str
        """

        self._number_display = number_display

    @property
    def photo_url(self):
        """Gets the photo_url of this Driver.


        :return: The photo_url of this Driver.
        :rtype: str
        """
        return self._photo_url

    @photo_url.setter
    def photo_url(self, photo_url):
        """Sets the photo_url of this Driver.


        :param photo_url: The photo_url of this Driver.
        :type photo_url: str
        """

        self._photo_url = photo_url

    @property
    def sponsors(self):
        """Gets the sponsors of this Driver.


        :return: The sponsors of this Driver.
        :rtype: str
        """
        return self._sponsors

    @sponsors.setter
    def sponsors(self, sponsors):
        """Sets the sponsors of this Driver.


        :param sponsors: The sponsors of this Driver.
        :type sponsors: str
        """

        self._sponsors = sponsors

    @property
    def team(self):
        """Gets the team of this Driver.


        :return: The team of this Driver.
        :rtype: str
        """
        return self._team

    @team.setter
    def team(self, team):
        """Sets the team of this Driver.


        :param team: The team of this Driver.
        :type team: str
        """

        self._team = team

    @property
    def updated(self):
        """Gets the updated of this Driver.


        :return: The updated of this Driver.
        :rtype: str
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """Sets the updated of this Driver.


        :param updated: The updated of this Driver.
        :type updated: str
        """

        self._updated = updated

    @property
    def weight(self):
        """Gets the weight of this Driver.


        :return: The weight of this Driver.
        :rtype: int
        """
        return self._weight

    @weight.setter
    def weight(self, weight):
        """Sets the weight of this Driver.


        :param weight: The weight of this Driver.
        :type weight: int
        """

        self._weight = weight
