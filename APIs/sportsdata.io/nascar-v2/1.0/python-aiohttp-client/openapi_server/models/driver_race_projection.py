# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DriverRaceProjection(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bonus: float=None, created: str=None, current_position: float=None, date_time: str=None, day: str=None, draft_kings_salary: int=None, driver_id: int=None, fantasy_points: float=None, fantasy_points_draft_kings: float=None, fastest_laps: float=None, final_position: float=None, laps: float=None, laps_led: float=None, manufacturer: str=None, name: str=None, number: int=None, number_display: str=None, penalty: float=None, points: float=None, pole_final_position: float=None, poles: float=None, position_differential: float=None, qualifying_speed: float=None, race_id: int=None, season: int=None, start_position: float=None, stat_id: int=None, updated: str=None, wins: float=None):
        """DriverRaceProjection - a model defined in OpenAPI

        :param bonus: The bonus of this DriverRaceProjection.
        :param created: The created of this DriverRaceProjection.
        :param current_position: The current_position of this DriverRaceProjection.
        :param date_time: The date_time of this DriverRaceProjection.
        :param day: The day of this DriverRaceProjection.
        :param draft_kings_salary: The draft_kings_salary of this DriverRaceProjection.
        :param driver_id: The driver_id of this DriverRaceProjection.
        :param fantasy_points: The fantasy_points of this DriverRaceProjection.
        :param fantasy_points_draft_kings: The fantasy_points_draft_kings of this DriverRaceProjection.
        :param fastest_laps: The fastest_laps of this DriverRaceProjection.
        :param final_position: The final_position of this DriverRaceProjection.
        :param laps: The laps of this DriverRaceProjection.
        :param laps_led: The laps_led of this DriverRaceProjection.
        :param manufacturer: The manufacturer of this DriverRaceProjection.
        :param name: The name of this DriverRaceProjection.
        :param number: The number of this DriverRaceProjection.
        :param number_display: The number_display of this DriverRaceProjection.
        :param penalty: The penalty of this DriverRaceProjection.
        :param points: The points of this DriverRaceProjection.
        :param pole_final_position: The pole_final_position of this DriverRaceProjection.
        :param poles: The poles of this DriverRaceProjection.
        :param position_differential: The position_differential of this DriverRaceProjection.
        :param qualifying_speed: The qualifying_speed of this DriverRaceProjection.
        :param race_id: The race_id of this DriverRaceProjection.
        :param season: The season of this DriverRaceProjection.
        :param start_position: The start_position of this DriverRaceProjection.
        :param stat_id: The stat_id of this DriverRaceProjection.
        :param updated: The updated of this DriverRaceProjection.
        :param wins: The wins of this DriverRaceProjection.
        """
        self.openapi_types = {
            'bonus': float,
            'created': str,
            'current_position': float,
            'date_time': str,
            'day': str,
            'draft_kings_salary': int,
            'driver_id': int,
            'fantasy_points': float,
            'fantasy_points_draft_kings': float,
            'fastest_laps': float,
            'final_position': float,
            'laps': float,
            'laps_led': float,
            'manufacturer': str,
            'name': str,
            'number': int,
            'number_display': str,
            'penalty': float,
            'points': float,
            'pole_final_position': float,
            'poles': float,
            'position_differential': float,
            'qualifying_speed': float,
            'race_id': int,
            'season': int,
            'start_position': float,
            'stat_id': int,
            'updated': str,
            'wins': float
        }

        self.attribute_map = {
            'bonus': 'Bonus',
            'created': 'Created',
            'current_position': 'CurrentPosition',
            'date_time': 'DateTime',
            'day': 'Day',
            'draft_kings_salary': 'DraftKingsSalary',
            'driver_id': 'DriverID',
            'fantasy_points': 'FantasyPoints',
            'fantasy_points_draft_kings': 'FantasyPointsDraftKings',
            'fastest_laps': 'FastestLaps',
            'final_position': 'FinalPosition',
            'laps': 'Laps',
            'laps_led': 'LapsLed',
            'manufacturer': 'Manufacturer',
            'name': 'Name',
            'number': 'Number',
            'number_display': 'NumberDisplay',
            'penalty': 'Penalty',
            'points': 'Points',
            'pole_final_position': 'PoleFinalPosition',
            'poles': 'Poles',
            'position_differential': 'PositionDifferential',
            'qualifying_speed': 'QualifyingSpeed',
            'race_id': 'RaceID',
            'season': 'Season',
            'start_position': 'StartPosition',
            'stat_id': 'StatID',
            'updated': 'Updated',
            'wins': 'Wins'
        }

        self._bonus = bonus
        self._created = created
        self._current_position = current_position
        self._date_time = date_time
        self._day = day
        self._draft_kings_salary = draft_kings_salary
        self._driver_id = driver_id
        self._fantasy_points = fantasy_points
        self._fantasy_points_draft_kings = fantasy_points_draft_kings
        self._fastest_laps = fastest_laps
        self._final_position = final_position
        self._laps = laps
        self._laps_led = laps_led
        self._manufacturer = manufacturer
        self._name = name
        self._number = number
        self._number_display = number_display
        self._penalty = penalty
        self._points = points
        self._pole_final_position = pole_final_position
        self._poles = poles
        self._position_differential = position_differential
        self._qualifying_speed = qualifying_speed
        self._race_id = race_id
        self._season = season
        self._start_position = start_position
        self._stat_id = stat_id
        self._updated = updated
        self._wins = wins

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DriverRaceProjection':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DriverRaceProjection of this DriverRaceProjection.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bonus(self):
        """Gets the bonus of this DriverRaceProjection.


        :return: The bonus of this DriverRaceProjection.
        :rtype: float
        """
        return self._bonus

    @bonus.setter
    def bonus(self, bonus):
        """Sets the bonus of this DriverRaceProjection.


        :param bonus: The bonus of this DriverRaceProjection.
        :type bonus: float
        """

        self._bonus = bonus

    @property
    def created(self):
        """Gets the created of this DriverRaceProjection.


        :return: The created of this DriverRaceProjection.
        :rtype: str
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this DriverRaceProjection.


        :param created: The created of this DriverRaceProjection.
        :type created: str
        """

        self._created = created

    @property
    def current_position(self):
        """Gets the current_position of this DriverRaceProjection.


        :return: The current_position of this DriverRaceProjection.
        :rtype: float
        """
        return self._current_position

    @current_position.setter
    def current_position(self, current_position):
        """Sets the current_position of this DriverRaceProjection.


        :param current_position: The current_position of this DriverRaceProjection.
        :type current_position: float
        """

        self._current_position = current_position

    @property
    def date_time(self):
        """Gets the date_time of this DriverRaceProjection.


        :return: The date_time of this DriverRaceProjection.
        :rtype: str
        """
        return self._date_time

    @date_time.setter
    def date_time(self, date_time):
        """Sets the date_time of this DriverRaceProjection.


        :param date_time: The date_time of this DriverRaceProjection.
        :type date_time: str
        """

        self._date_time = date_time

    @property
    def day(self):
        """Gets the day of this DriverRaceProjection.


        :return: The day of this DriverRaceProjection.
        :rtype: str
        """
        return self._day

    @day.setter
    def day(self, day):
        """Sets the day of this DriverRaceProjection.


        :param day: The day of this DriverRaceProjection.
        :type day: str
        """

        self._day = day

    @property
    def draft_kings_salary(self):
        """Gets the draft_kings_salary of this DriverRaceProjection.


        :return: The draft_kings_salary of this DriverRaceProjection.
        :rtype: int
        """
        return self._draft_kings_salary

    @draft_kings_salary.setter
    def draft_kings_salary(self, draft_kings_salary):
        """Sets the draft_kings_salary of this DriverRaceProjection.


        :param draft_kings_salary: The draft_kings_salary of this DriverRaceProjection.
        :type draft_kings_salary: int
        """

        self._draft_kings_salary = draft_kings_salary

    @property
    def driver_id(self):
        """Gets the driver_id of this DriverRaceProjection.


        :return: The driver_id of this DriverRaceProjection.
        :rtype: int
        """
        return self._driver_id

    @driver_id.setter
    def driver_id(self, driver_id):
        """Sets the driver_id of this DriverRaceProjection.


        :param driver_id: The driver_id of this DriverRaceProjection.
        :type driver_id: int
        """

        self._driver_id = driver_id

    @property
    def fantasy_points(self):
        """Gets the fantasy_points of this DriverRaceProjection.


        :return: The fantasy_points of this DriverRaceProjection.
        :rtype: float
        """
        return self._fantasy_points

    @fantasy_points.setter
    def fantasy_points(self, fantasy_points):
        """Sets the fantasy_points of this DriverRaceProjection.


        :param fantasy_points: The fantasy_points of this DriverRaceProjection.
        :type fantasy_points: float
        """

        self._fantasy_points = fantasy_points

    @property
    def fantasy_points_draft_kings(self):
        """Gets the fantasy_points_draft_kings of this DriverRaceProjection.


        :return: The fantasy_points_draft_kings of this DriverRaceProjection.
        :rtype: float
        """
        return self._fantasy_points_draft_kings

    @fantasy_points_draft_kings.setter
    def fantasy_points_draft_kings(self, fantasy_points_draft_kings):
        """Sets the fantasy_points_draft_kings of this DriverRaceProjection.


        :param fantasy_points_draft_kings: The fantasy_points_draft_kings of this DriverRaceProjection.
        :type fantasy_points_draft_kings: float
        """

        self._fantasy_points_draft_kings = fantasy_points_draft_kings

    @property
    def fastest_laps(self):
        """Gets the fastest_laps of this DriverRaceProjection.


        :return: The fastest_laps of this DriverRaceProjection.
        :rtype: float
        """
        return self._fastest_laps

    @fastest_laps.setter
    def fastest_laps(self, fastest_laps):
        """Sets the fastest_laps of this DriverRaceProjection.


        :param fastest_laps: The fastest_laps of this DriverRaceProjection.
        :type fastest_laps: float
        """

        self._fastest_laps = fastest_laps

    @property
    def final_position(self):
        """Gets the final_position of this DriverRaceProjection.


        :return: The final_position of this DriverRaceProjection.
        :rtype: float
        """
        return self._final_position

    @final_position.setter
    def final_position(self, final_position):
        """Sets the final_position of this DriverRaceProjection.


        :param final_position: The final_position of this DriverRaceProjection.
        :type final_position: float
        """

        self._final_position = final_position

    @property
    def laps(self):
        """Gets the laps of this DriverRaceProjection.


        :return: The laps of this DriverRaceProjection.
        :rtype: float
        """
        return self._laps

    @laps.setter
    def laps(self, laps):
        """Sets the laps of this DriverRaceProjection.


        :param laps: The laps of this DriverRaceProjection.
        :type laps: float
        """

        self._laps = laps

    @property
    def laps_led(self):
        """Gets the laps_led of this DriverRaceProjection.


        :return: The laps_led of this DriverRaceProjection.
        :rtype: float
        """
        return self._laps_led

    @laps_led.setter
    def laps_led(self, laps_led):
        """Sets the laps_led of this DriverRaceProjection.


        :param laps_led: The laps_led of this DriverRaceProjection.
        :type laps_led: float
        """

        self._laps_led = laps_led

    @property
    def manufacturer(self):
        """Gets the manufacturer of this DriverRaceProjection.


        :return: The manufacturer of this DriverRaceProjection.
        :rtype: str
        """
        return self._manufacturer

    @manufacturer.setter
    def manufacturer(self, manufacturer):
        """Sets the manufacturer of this DriverRaceProjection.


        :param manufacturer: The manufacturer of this DriverRaceProjection.
        :type manufacturer: str
        """

        self._manufacturer = manufacturer

    @property
    def name(self):
        """Gets the name of this DriverRaceProjection.


        :return: The name of this DriverRaceProjection.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DriverRaceProjection.


        :param name: The name of this DriverRaceProjection.
        :type name: str
        """

        self._name = name

    @property
    def number(self):
        """Gets the number of this DriverRaceProjection.


        :return: The number of this DriverRaceProjection.
        :rtype: int
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this DriverRaceProjection.


        :param number: The number of this DriverRaceProjection.
        :type number: int
        """

        self._number = number

    @property
    def number_display(self):
        """Gets the number_display of this DriverRaceProjection.


        :return: The number_display of this DriverRaceProjection.
        :rtype: str
        """
        return self._number_display

    @number_display.setter
    def number_display(self, number_display):
        """Sets the number_display of this DriverRaceProjection.


        :param number_display: The number_display of this DriverRaceProjection.
        :type number_display: str
        """

        self._number_display = number_display

    @property
    def penalty(self):
        """Gets the penalty of this DriverRaceProjection.


        :return: The penalty of this DriverRaceProjection.
        :rtype: float
        """
        return self._penalty

    @penalty.setter
    def penalty(self, penalty):
        """Sets the penalty of this DriverRaceProjection.


        :param penalty: The penalty of this DriverRaceProjection.
        :type penalty: float
        """

        self._penalty = penalty

    @property
    def points(self):
        """Gets the points of this DriverRaceProjection.


        :return: The points of this DriverRaceProjection.
        :rtype: float
        """
        return self._points

    @points.setter
    def points(self, points):
        """Sets the points of this DriverRaceProjection.


        :param points: The points of this DriverRaceProjection.
        :type points: float
        """

        self._points = points

    @property
    def pole_final_position(self):
        """Gets the pole_final_position of this DriverRaceProjection.


        :return: The pole_final_position of this DriverRaceProjection.
        :rtype: float
        """
        return self._pole_final_position

    @pole_final_position.setter
    def pole_final_position(self, pole_final_position):
        """Sets the pole_final_position of this DriverRaceProjection.


        :param pole_final_position: The pole_final_position of this DriverRaceProjection.
        :type pole_final_position: float
        """

        self._pole_final_position = pole_final_position

    @property
    def poles(self):
        """Gets the poles of this DriverRaceProjection.


        :return: The poles of this DriverRaceProjection.
        :rtype: float
        """
        return self._poles

    @poles.setter
    def poles(self, poles):
        """Sets the poles of this DriverRaceProjection.


        :param poles: The poles of this DriverRaceProjection.
        :type poles: float
        """

        self._poles = poles

    @property
    def position_differential(self):
        """Gets the position_differential of this DriverRaceProjection.


        :return: The position_differential of this DriverRaceProjection.
        :rtype: float
        """
        return self._position_differential

    @position_differential.setter
    def position_differential(self, position_differential):
        """Sets the position_differential of this DriverRaceProjection.


        :param position_differential: The position_differential of this DriverRaceProjection.
        :type position_differential: float
        """

        self._position_differential = position_differential

    @property
    def qualifying_speed(self):
        """Gets the qualifying_speed of this DriverRaceProjection.


        :return: The qualifying_speed of this DriverRaceProjection.
        :rtype: float
        """
        return self._qualifying_speed

    @qualifying_speed.setter
    def qualifying_speed(self, qualifying_speed):
        """Sets the qualifying_speed of this DriverRaceProjection.


        :param qualifying_speed: The qualifying_speed of this DriverRaceProjection.
        :type qualifying_speed: float
        """

        self._qualifying_speed = qualifying_speed

    @property
    def race_id(self):
        """Gets the race_id of this DriverRaceProjection.


        :return: The race_id of this DriverRaceProjection.
        :rtype: int
        """
        return self._race_id

    @race_id.setter
    def race_id(self, race_id):
        """Sets the race_id of this DriverRaceProjection.


        :param race_id: The race_id of this DriverRaceProjection.
        :type race_id: int
        """

        self._race_id = race_id

    @property
    def season(self):
        """Gets the season of this DriverRaceProjection.


        :return: The season of this DriverRaceProjection.
        :rtype: int
        """
        return self._season

    @season.setter
    def season(self, season):
        """Sets the season of this DriverRaceProjection.


        :param season: The season of this DriverRaceProjection.
        :type season: int
        """

        self._season = season

    @property
    def start_position(self):
        """Gets the start_position of this DriverRaceProjection.


        :return: The start_position of this DriverRaceProjection.
        :rtype: float
        """
        return self._start_position

    @start_position.setter
    def start_position(self, start_position):
        """Sets the start_position of this DriverRaceProjection.


        :param start_position: The start_position of this DriverRaceProjection.
        :type start_position: float
        """

        self._start_position = start_position

    @property
    def stat_id(self):
        """Gets the stat_id of this DriverRaceProjection.


        :return: The stat_id of this DriverRaceProjection.
        :rtype: int
        """
        return self._stat_id

    @stat_id.setter
    def stat_id(self, stat_id):
        """Sets the stat_id of this DriverRaceProjection.


        :param stat_id: The stat_id of this DriverRaceProjection.
        :type stat_id: int
        """

        self._stat_id = stat_id

    @property
    def updated(self):
        """Gets the updated of this DriverRaceProjection.


        :return: The updated of this DriverRaceProjection.
        :rtype: str
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """Sets the updated of this DriverRaceProjection.


        :param updated: The updated of this DriverRaceProjection.
        :type updated: str
        """

        self._updated = updated

    @property
    def wins(self):
        """Gets the wins of this DriverRaceProjection.


        :return: The wins of this DriverRaceProjection.
        :rtype: float
        """
        return self._wins

    @wins.setter
    def wins(self, wins):
        """Sets the wins of this DriverRaceProjection.


        :param wins: The wins of this DriverRaceProjection.
        :type wins: float
        """

        self._wins = wins
