/**
 * NASCAR v2
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDriver.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDriver::OAIDriver(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDriver::OAIDriver() {
    this->initializeModel();
}

OAIDriver::~OAIDriver() {}

void OAIDriver::initializeModel() {

    m_birth_date_isSet = false;
    m_birth_date_isValid = false;

    m_birth_place_isSet = false;
    m_birth_place_isValid = false;

    m_chassis_isSet = false;
    m_chassis_isValid = false;

    m_created_isSet = false;
    m_created_isValid = false;

    m_crew_chief_isSet = false;
    m_crew_chief_isValid = false;

    m_driver_id_isSet = false;
    m_driver_id_isValid = false;

    m_engine_isSet = false;
    m_engine_isValid = false;

    m_first_name_isSet = false;
    m_first_name_isValid = false;

    m_gender_isSet = false;
    m_gender_isValid = false;

    m_height_isSet = false;
    m_height_isValid = false;

    m_last_name_isSet = false;
    m_last_name_isValid = false;

    m_manufacturer_isSet = false;
    m_manufacturer_isValid = false;

    m_number_isSet = false;
    m_number_isValid = false;

    m_number_display_isSet = false;
    m_number_display_isValid = false;

    m_photo_url_isSet = false;
    m_photo_url_isValid = false;

    m_sponsors_isSet = false;
    m_sponsors_isValid = false;

    m_team_isSet = false;
    m_team_isValid = false;

    m_updated_isSet = false;
    m_updated_isValid = false;

    m_weight_isSet = false;
    m_weight_isValid = false;
}

void OAIDriver::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDriver::fromJsonObject(QJsonObject json) {

    m_birth_date_isValid = ::OpenAPI::fromJsonValue(m_birth_date, json[QString("BirthDate")]);
    m_birth_date_isSet = !json[QString("BirthDate")].isNull() && m_birth_date_isValid;

    m_birth_place_isValid = ::OpenAPI::fromJsonValue(m_birth_place, json[QString("BirthPlace")]);
    m_birth_place_isSet = !json[QString("BirthPlace")].isNull() && m_birth_place_isValid;

    m_chassis_isValid = ::OpenAPI::fromJsonValue(m_chassis, json[QString("Chassis")]);
    m_chassis_isSet = !json[QString("Chassis")].isNull() && m_chassis_isValid;

    m_created_isValid = ::OpenAPI::fromJsonValue(m_created, json[QString("Created")]);
    m_created_isSet = !json[QString("Created")].isNull() && m_created_isValid;

    m_crew_chief_isValid = ::OpenAPI::fromJsonValue(m_crew_chief, json[QString("CrewChief")]);
    m_crew_chief_isSet = !json[QString("CrewChief")].isNull() && m_crew_chief_isValid;

    m_driver_id_isValid = ::OpenAPI::fromJsonValue(m_driver_id, json[QString("DriverID")]);
    m_driver_id_isSet = !json[QString("DriverID")].isNull() && m_driver_id_isValid;

    m_engine_isValid = ::OpenAPI::fromJsonValue(m_engine, json[QString("Engine")]);
    m_engine_isSet = !json[QString("Engine")].isNull() && m_engine_isValid;

    m_first_name_isValid = ::OpenAPI::fromJsonValue(m_first_name, json[QString("FirstName")]);
    m_first_name_isSet = !json[QString("FirstName")].isNull() && m_first_name_isValid;

    m_gender_isValid = ::OpenAPI::fromJsonValue(m_gender, json[QString("Gender")]);
    m_gender_isSet = !json[QString("Gender")].isNull() && m_gender_isValid;

    m_height_isValid = ::OpenAPI::fromJsonValue(m_height, json[QString("Height")]);
    m_height_isSet = !json[QString("Height")].isNull() && m_height_isValid;

    m_last_name_isValid = ::OpenAPI::fromJsonValue(m_last_name, json[QString("LastName")]);
    m_last_name_isSet = !json[QString("LastName")].isNull() && m_last_name_isValid;

    m_manufacturer_isValid = ::OpenAPI::fromJsonValue(m_manufacturer, json[QString("Manufacturer")]);
    m_manufacturer_isSet = !json[QString("Manufacturer")].isNull() && m_manufacturer_isValid;

    m_number_isValid = ::OpenAPI::fromJsonValue(m_number, json[QString("Number")]);
    m_number_isSet = !json[QString("Number")].isNull() && m_number_isValid;

    m_number_display_isValid = ::OpenAPI::fromJsonValue(m_number_display, json[QString("NumberDisplay")]);
    m_number_display_isSet = !json[QString("NumberDisplay")].isNull() && m_number_display_isValid;

    m_photo_url_isValid = ::OpenAPI::fromJsonValue(m_photo_url, json[QString("PhotoUrl")]);
    m_photo_url_isSet = !json[QString("PhotoUrl")].isNull() && m_photo_url_isValid;

    m_sponsors_isValid = ::OpenAPI::fromJsonValue(m_sponsors, json[QString("Sponsors")]);
    m_sponsors_isSet = !json[QString("Sponsors")].isNull() && m_sponsors_isValid;

    m_team_isValid = ::OpenAPI::fromJsonValue(m_team, json[QString("Team")]);
    m_team_isSet = !json[QString("Team")].isNull() && m_team_isValid;

    m_updated_isValid = ::OpenAPI::fromJsonValue(m_updated, json[QString("Updated")]);
    m_updated_isSet = !json[QString("Updated")].isNull() && m_updated_isValid;

    m_weight_isValid = ::OpenAPI::fromJsonValue(m_weight, json[QString("Weight")]);
    m_weight_isSet = !json[QString("Weight")].isNull() && m_weight_isValid;
}

QString OAIDriver::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDriver::asJsonObject() const {
    QJsonObject obj;
    if (m_birth_date_isSet) {
        obj.insert(QString("BirthDate"), ::OpenAPI::toJsonValue(m_birth_date));
    }
    if (m_birth_place_isSet) {
        obj.insert(QString("BirthPlace"), ::OpenAPI::toJsonValue(m_birth_place));
    }
    if (m_chassis_isSet) {
        obj.insert(QString("Chassis"), ::OpenAPI::toJsonValue(m_chassis));
    }
    if (m_created_isSet) {
        obj.insert(QString("Created"), ::OpenAPI::toJsonValue(m_created));
    }
    if (m_crew_chief_isSet) {
        obj.insert(QString("CrewChief"), ::OpenAPI::toJsonValue(m_crew_chief));
    }
    if (m_driver_id_isSet) {
        obj.insert(QString("DriverID"), ::OpenAPI::toJsonValue(m_driver_id));
    }
    if (m_engine_isSet) {
        obj.insert(QString("Engine"), ::OpenAPI::toJsonValue(m_engine));
    }
    if (m_first_name_isSet) {
        obj.insert(QString("FirstName"), ::OpenAPI::toJsonValue(m_first_name));
    }
    if (m_gender_isSet) {
        obj.insert(QString("Gender"), ::OpenAPI::toJsonValue(m_gender));
    }
    if (m_height_isSet) {
        obj.insert(QString("Height"), ::OpenAPI::toJsonValue(m_height));
    }
    if (m_last_name_isSet) {
        obj.insert(QString("LastName"), ::OpenAPI::toJsonValue(m_last_name));
    }
    if (m_manufacturer_isSet) {
        obj.insert(QString("Manufacturer"), ::OpenAPI::toJsonValue(m_manufacturer));
    }
    if (m_number_isSet) {
        obj.insert(QString("Number"), ::OpenAPI::toJsonValue(m_number));
    }
    if (m_number_display_isSet) {
        obj.insert(QString("NumberDisplay"), ::OpenAPI::toJsonValue(m_number_display));
    }
    if (m_photo_url_isSet) {
        obj.insert(QString("PhotoUrl"), ::OpenAPI::toJsonValue(m_photo_url));
    }
    if (m_sponsors_isSet) {
        obj.insert(QString("Sponsors"), ::OpenAPI::toJsonValue(m_sponsors));
    }
    if (m_team_isSet) {
        obj.insert(QString("Team"), ::OpenAPI::toJsonValue(m_team));
    }
    if (m_updated_isSet) {
        obj.insert(QString("Updated"), ::OpenAPI::toJsonValue(m_updated));
    }
    if (m_weight_isSet) {
        obj.insert(QString("Weight"), ::OpenAPI::toJsonValue(m_weight));
    }
    return obj;
}

QString OAIDriver::getBirthDate() const {
    return m_birth_date;
}
void OAIDriver::setBirthDate(const QString &birth_date) {
    m_birth_date = birth_date;
    m_birth_date_isSet = true;
}

bool OAIDriver::is_birth_date_Set() const{
    return m_birth_date_isSet;
}

bool OAIDriver::is_birth_date_Valid() const{
    return m_birth_date_isValid;
}

QString OAIDriver::getBirthPlace() const {
    return m_birth_place;
}
void OAIDriver::setBirthPlace(const QString &birth_place) {
    m_birth_place = birth_place;
    m_birth_place_isSet = true;
}

bool OAIDriver::is_birth_place_Set() const{
    return m_birth_place_isSet;
}

bool OAIDriver::is_birth_place_Valid() const{
    return m_birth_place_isValid;
}

QString OAIDriver::getChassis() const {
    return m_chassis;
}
void OAIDriver::setChassis(const QString &chassis) {
    m_chassis = chassis;
    m_chassis_isSet = true;
}

bool OAIDriver::is_chassis_Set() const{
    return m_chassis_isSet;
}

bool OAIDriver::is_chassis_Valid() const{
    return m_chassis_isValid;
}

QString OAIDriver::getCreated() const {
    return m_created;
}
void OAIDriver::setCreated(const QString &created) {
    m_created = created;
    m_created_isSet = true;
}

bool OAIDriver::is_created_Set() const{
    return m_created_isSet;
}

bool OAIDriver::is_created_Valid() const{
    return m_created_isValid;
}

QString OAIDriver::getCrewChief() const {
    return m_crew_chief;
}
void OAIDriver::setCrewChief(const QString &crew_chief) {
    m_crew_chief = crew_chief;
    m_crew_chief_isSet = true;
}

bool OAIDriver::is_crew_chief_Set() const{
    return m_crew_chief_isSet;
}

bool OAIDriver::is_crew_chief_Valid() const{
    return m_crew_chief_isValid;
}

qint32 OAIDriver::getDriverId() const {
    return m_driver_id;
}
void OAIDriver::setDriverId(const qint32 &driver_id) {
    m_driver_id = driver_id;
    m_driver_id_isSet = true;
}

bool OAIDriver::is_driver_id_Set() const{
    return m_driver_id_isSet;
}

bool OAIDriver::is_driver_id_Valid() const{
    return m_driver_id_isValid;
}

QString OAIDriver::getEngine() const {
    return m_engine;
}
void OAIDriver::setEngine(const QString &engine) {
    m_engine = engine;
    m_engine_isSet = true;
}

bool OAIDriver::is_engine_Set() const{
    return m_engine_isSet;
}

bool OAIDriver::is_engine_Valid() const{
    return m_engine_isValid;
}

QString OAIDriver::getFirstName() const {
    return m_first_name;
}
void OAIDriver::setFirstName(const QString &first_name) {
    m_first_name = first_name;
    m_first_name_isSet = true;
}

bool OAIDriver::is_first_name_Set() const{
    return m_first_name_isSet;
}

bool OAIDriver::is_first_name_Valid() const{
    return m_first_name_isValid;
}

QString OAIDriver::getGender() const {
    return m_gender;
}
void OAIDriver::setGender(const QString &gender) {
    m_gender = gender;
    m_gender_isSet = true;
}

bool OAIDriver::is_gender_Set() const{
    return m_gender_isSet;
}

bool OAIDriver::is_gender_Valid() const{
    return m_gender_isValid;
}

qint32 OAIDriver::getHeight() const {
    return m_height;
}
void OAIDriver::setHeight(const qint32 &height) {
    m_height = height;
    m_height_isSet = true;
}

bool OAIDriver::is_height_Set() const{
    return m_height_isSet;
}

bool OAIDriver::is_height_Valid() const{
    return m_height_isValid;
}

QString OAIDriver::getLastName() const {
    return m_last_name;
}
void OAIDriver::setLastName(const QString &last_name) {
    m_last_name = last_name;
    m_last_name_isSet = true;
}

bool OAIDriver::is_last_name_Set() const{
    return m_last_name_isSet;
}

bool OAIDriver::is_last_name_Valid() const{
    return m_last_name_isValid;
}

QString OAIDriver::getManufacturer() const {
    return m_manufacturer;
}
void OAIDriver::setManufacturer(const QString &manufacturer) {
    m_manufacturer = manufacturer;
    m_manufacturer_isSet = true;
}

bool OAIDriver::is_manufacturer_Set() const{
    return m_manufacturer_isSet;
}

bool OAIDriver::is_manufacturer_Valid() const{
    return m_manufacturer_isValid;
}

qint32 OAIDriver::getNumber() const {
    return m_number;
}
void OAIDriver::setNumber(const qint32 &number) {
    m_number = number;
    m_number_isSet = true;
}

bool OAIDriver::is_number_Set() const{
    return m_number_isSet;
}

bool OAIDriver::is_number_Valid() const{
    return m_number_isValid;
}

QString OAIDriver::getNumberDisplay() const {
    return m_number_display;
}
void OAIDriver::setNumberDisplay(const QString &number_display) {
    m_number_display = number_display;
    m_number_display_isSet = true;
}

bool OAIDriver::is_number_display_Set() const{
    return m_number_display_isSet;
}

bool OAIDriver::is_number_display_Valid() const{
    return m_number_display_isValid;
}

QString OAIDriver::getPhotoUrl() const {
    return m_photo_url;
}
void OAIDriver::setPhotoUrl(const QString &photo_url) {
    m_photo_url = photo_url;
    m_photo_url_isSet = true;
}

bool OAIDriver::is_photo_url_Set() const{
    return m_photo_url_isSet;
}

bool OAIDriver::is_photo_url_Valid() const{
    return m_photo_url_isValid;
}

QString OAIDriver::getSponsors() const {
    return m_sponsors;
}
void OAIDriver::setSponsors(const QString &sponsors) {
    m_sponsors = sponsors;
    m_sponsors_isSet = true;
}

bool OAIDriver::is_sponsors_Set() const{
    return m_sponsors_isSet;
}

bool OAIDriver::is_sponsors_Valid() const{
    return m_sponsors_isValid;
}

QString OAIDriver::getTeam() const {
    return m_team;
}
void OAIDriver::setTeam(const QString &team) {
    m_team = team;
    m_team_isSet = true;
}

bool OAIDriver::is_team_Set() const{
    return m_team_isSet;
}

bool OAIDriver::is_team_Valid() const{
    return m_team_isValid;
}

QString OAIDriver::getUpdated() const {
    return m_updated;
}
void OAIDriver::setUpdated(const QString &updated) {
    m_updated = updated;
    m_updated_isSet = true;
}

bool OAIDriver::is_updated_Set() const{
    return m_updated_isSet;
}

bool OAIDriver::is_updated_Valid() const{
    return m_updated_isValid;
}

qint32 OAIDriver::getWeight() const {
    return m_weight;
}
void OAIDriver::setWeight(const qint32 &weight) {
    m_weight = weight;
    m_weight_isSet = true;
}

bool OAIDriver::is_weight_Set() const{
    return m_weight_isSet;
}

bool OAIDriver::is_weight_Valid() const{
    return m_weight_isValid;
}

bool OAIDriver::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_birth_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_birth_place_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_chassis_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_crew_chief_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_driver_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_engine_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_first_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gender_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_height_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_manufacturer_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_display_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_photo_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sponsors_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_team_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_weight_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDriver::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
