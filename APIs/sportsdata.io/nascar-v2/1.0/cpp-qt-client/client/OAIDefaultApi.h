/**
 * NASCAR v2
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDefaultApi_H
#define OAI_OAIDefaultApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIDriver.h"
#include "OAIDriverRaceProjection.h"
#include "OAIRace.h"
#include "OAIRaceResult.h"
#include "OAISeries.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDefaultApi : public QObject {
    Q_OBJECT

public:
    OAIDefaultApi(const int timeOut = 0);
    ~OAIDefaultApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  format QString [required]
    * @param[in]  driverid QString [required]
    */
    virtual void driverDetails(const QString &format, const QString &driverid);

    /**
    * @param[in]  format QString [required]
    * @param[in]  raceid QString [required]
    */
    virtual void driverRaceProjectionsEntryList(const QString &format, const QString &raceid);

    /**
    * @param[in]  format QString [required]
    */
    virtual void drivers(const QString &format);

    /**
    * @param[in]  format QString [required]
    * @param[in]  raceid QString [required]
    */
    virtual void raceResults(const QString &format, const QString &raceid);

    /**
    * @param[in]  format QString [required]
    * @param[in]  season QString [required]
    */
    virtual void racesSchedule(const QString &format, const QString &season);

    /**
    * @param[in]  format QString [required]
    */
    virtual void series(const QString &format);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void driverDetailsCallback(OAIHttpRequestWorker *worker);
    void driverRaceProjectionsEntryListCallback(OAIHttpRequestWorker *worker);
    void driversCallback(OAIHttpRequestWorker *worker);
    void raceResultsCallback(OAIHttpRequestWorker *worker);
    void racesScheduleCallback(OAIHttpRequestWorker *worker);
    void seriesCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void driverDetailsSignal(OAIDriver summary);
    void driverRaceProjectionsEntryListSignal(QList<OAIDriverRaceProjection> summary);
    void driversSignal(QList<OAIDriver> summary);
    void raceResultsSignal(OAIRaceResult summary);
    void racesScheduleSignal(QList<OAIRace> summary);
    void seriesSignal(QList<OAISeries> summary);


    void driverDetailsSignalFull(OAIHttpRequestWorker *worker, OAIDriver summary);
    void driverRaceProjectionsEntryListSignalFull(OAIHttpRequestWorker *worker, QList<OAIDriverRaceProjection> summary);
    void driversSignalFull(OAIHttpRequestWorker *worker, QList<OAIDriver> summary);
    void raceResultsSignalFull(OAIHttpRequestWorker *worker, OAIRaceResult summary);
    void racesScheduleSignalFull(OAIHttpRequestWorker *worker, QList<OAIRace> summary);
    void seriesSignalFull(OAIHttpRequestWorker *worker, QList<OAISeries> summary);

    Q_DECL_DEPRECATED_X("Use driverDetailsSignalError() instead")
    void driverDetailsSignalE(OAIDriver summary, QNetworkReply::NetworkError error_type, QString error_str);
    void driverDetailsSignalError(OAIDriver summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use driverRaceProjectionsEntryListSignalError() instead")
    void driverRaceProjectionsEntryListSignalE(QList<OAIDriverRaceProjection> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void driverRaceProjectionsEntryListSignalError(QList<OAIDriverRaceProjection> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use driversSignalError() instead")
    void driversSignalE(QList<OAIDriver> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void driversSignalError(QList<OAIDriver> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use raceResultsSignalError() instead")
    void raceResultsSignalE(OAIRaceResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void raceResultsSignalError(OAIRaceResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use racesScheduleSignalError() instead")
    void racesScheduleSignalE(QList<OAIRace> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void racesScheduleSignalError(QList<OAIRace> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use seriesSignalError() instead")
    void seriesSignalE(QList<OAISeries> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void seriesSignalError(QList<OAISeries> summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use driverDetailsSignalErrorFull() instead")
    void driverDetailsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void driverDetailsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use driverRaceProjectionsEntryListSignalErrorFull() instead")
    void driverRaceProjectionsEntryListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void driverRaceProjectionsEntryListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use driversSignalErrorFull() instead")
    void driversSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void driversSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use raceResultsSignalErrorFull() instead")
    void raceResultsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void raceResultsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use racesScheduleSignalErrorFull() instead")
    void racesScheduleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void racesScheduleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use seriesSignalErrorFull() instead")
    void seriesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void seriesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
