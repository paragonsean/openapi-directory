/**
 * NASCAR v2
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRace.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRace::OAIRace(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRace::OAIRace() {
    this->initializeModel();
}

OAIRace::~OAIRace() {}

void OAIRace::initializeModel() {

    m_actual_laps_isSet = false;
    m_actual_laps_isValid = false;

    m_broadcast_isSet = false;
    m_broadcast_isValid = false;

    m_canceled_isSet = false;
    m_canceled_isValid = false;

    m_created_isSet = false;
    m_created_isValid = false;

    m_date_time_isSet = false;
    m_date_time_isValid = false;

    m_day_isSet = false;
    m_day_isValid = false;

    m_is_in_progress_isSet = false;
    m_is_in_progress_isValid = false;

    m_is_over_isSet = false;
    m_is_over_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_pole_winner_id_isSet = false;
    m_pole_winner_id_isValid = false;

    m_race_id_isSet = false;
    m_race_id_isValid = false;

    m_rescheduled_date_time_isSet = false;
    m_rescheduled_date_time_isValid = false;

    m_rescheduled_day_isSet = false;
    m_rescheduled_day_isValid = false;

    m_scheduled_laps_isSet = false;
    m_scheduled_laps_isValid = false;

    m_season_isSet = false;
    m_season_isValid = false;

    m_series_id_isSet = false;
    m_series_id_isValid = false;

    m_series_name_isSet = false;
    m_series_name_isValid = false;

    m_track_isSet = false;
    m_track_isValid = false;

    m_updated_isSet = false;
    m_updated_isValid = false;

    m_winner_id_isSet = false;
    m_winner_id_isValid = false;
}

void OAIRace::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRace::fromJsonObject(QJsonObject json) {

    m_actual_laps_isValid = ::OpenAPI::fromJsonValue(m_actual_laps, json[QString("ActualLaps")]);
    m_actual_laps_isSet = !json[QString("ActualLaps")].isNull() && m_actual_laps_isValid;

    m_broadcast_isValid = ::OpenAPI::fromJsonValue(m_broadcast, json[QString("Broadcast")]);
    m_broadcast_isSet = !json[QString("Broadcast")].isNull() && m_broadcast_isValid;

    m_canceled_isValid = ::OpenAPI::fromJsonValue(m_canceled, json[QString("Canceled")]);
    m_canceled_isSet = !json[QString("Canceled")].isNull() && m_canceled_isValid;

    m_created_isValid = ::OpenAPI::fromJsonValue(m_created, json[QString("Created")]);
    m_created_isSet = !json[QString("Created")].isNull() && m_created_isValid;

    m_date_time_isValid = ::OpenAPI::fromJsonValue(m_date_time, json[QString("DateTime")]);
    m_date_time_isSet = !json[QString("DateTime")].isNull() && m_date_time_isValid;

    m_day_isValid = ::OpenAPI::fromJsonValue(m_day, json[QString("Day")]);
    m_day_isSet = !json[QString("Day")].isNull() && m_day_isValid;

    m_is_in_progress_isValid = ::OpenAPI::fromJsonValue(m_is_in_progress, json[QString("IsInProgress")]);
    m_is_in_progress_isSet = !json[QString("IsInProgress")].isNull() && m_is_in_progress_isValid;

    m_is_over_isValid = ::OpenAPI::fromJsonValue(m_is_over, json[QString("IsOver")]);
    m_is_over_isSet = !json[QString("IsOver")].isNull() && m_is_over_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;

    m_pole_winner_id_isValid = ::OpenAPI::fromJsonValue(m_pole_winner_id, json[QString("PoleWinnerID")]);
    m_pole_winner_id_isSet = !json[QString("PoleWinnerID")].isNull() && m_pole_winner_id_isValid;

    m_race_id_isValid = ::OpenAPI::fromJsonValue(m_race_id, json[QString("RaceID")]);
    m_race_id_isSet = !json[QString("RaceID")].isNull() && m_race_id_isValid;

    m_rescheduled_date_time_isValid = ::OpenAPI::fromJsonValue(m_rescheduled_date_time, json[QString("RescheduledDateTime")]);
    m_rescheduled_date_time_isSet = !json[QString("RescheduledDateTime")].isNull() && m_rescheduled_date_time_isValid;

    m_rescheduled_day_isValid = ::OpenAPI::fromJsonValue(m_rescheduled_day, json[QString("RescheduledDay")]);
    m_rescheduled_day_isSet = !json[QString("RescheduledDay")].isNull() && m_rescheduled_day_isValid;

    m_scheduled_laps_isValid = ::OpenAPI::fromJsonValue(m_scheduled_laps, json[QString("ScheduledLaps")]);
    m_scheduled_laps_isSet = !json[QString("ScheduledLaps")].isNull() && m_scheduled_laps_isValid;

    m_season_isValid = ::OpenAPI::fromJsonValue(m_season, json[QString("Season")]);
    m_season_isSet = !json[QString("Season")].isNull() && m_season_isValid;

    m_series_id_isValid = ::OpenAPI::fromJsonValue(m_series_id, json[QString("SeriesID")]);
    m_series_id_isSet = !json[QString("SeriesID")].isNull() && m_series_id_isValid;

    m_series_name_isValid = ::OpenAPI::fromJsonValue(m_series_name, json[QString("SeriesName")]);
    m_series_name_isSet = !json[QString("SeriesName")].isNull() && m_series_name_isValid;

    m_track_isValid = ::OpenAPI::fromJsonValue(m_track, json[QString("Track")]);
    m_track_isSet = !json[QString("Track")].isNull() && m_track_isValid;

    m_updated_isValid = ::OpenAPI::fromJsonValue(m_updated, json[QString("Updated")]);
    m_updated_isSet = !json[QString("Updated")].isNull() && m_updated_isValid;

    m_winner_id_isValid = ::OpenAPI::fromJsonValue(m_winner_id, json[QString("WinnerID")]);
    m_winner_id_isSet = !json[QString("WinnerID")].isNull() && m_winner_id_isValid;
}

QString OAIRace::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRace::asJsonObject() const {
    QJsonObject obj;
    if (m_actual_laps_isSet) {
        obj.insert(QString("ActualLaps"), ::OpenAPI::toJsonValue(m_actual_laps));
    }
    if (m_broadcast_isSet) {
        obj.insert(QString("Broadcast"), ::OpenAPI::toJsonValue(m_broadcast));
    }
    if (m_canceled_isSet) {
        obj.insert(QString("Canceled"), ::OpenAPI::toJsonValue(m_canceled));
    }
    if (m_created_isSet) {
        obj.insert(QString("Created"), ::OpenAPI::toJsonValue(m_created));
    }
    if (m_date_time_isSet) {
        obj.insert(QString("DateTime"), ::OpenAPI::toJsonValue(m_date_time));
    }
    if (m_day_isSet) {
        obj.insert(QString("Day"), ::OpenAPI::toJsonValue(m_day));
    }
    if (m_is_in_progress_isSet) {
        obj.insert(QString("IsInProgress"), ::OpenAPI::toJsonValue(m_is_in_progress));
    }
    if (m_is_over_isSet) {
        obj.insert(QString("IsOver"), ::OpenAPI::toJsonValue(m_is_over));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_pole_winner_id_isSet) {
        obj.insert(QString("PoleWinnerID"), ::OpenAPI::toJsonValue(m_pole_winner_id));
    }
    if (m_race_id_isSet) {
        obj.insert(QString("RaceID"), ::OpenAPI::toJsonValue(m_race_id));
    }
    if (m_rescheduled_date_time_isSet) {
        obj.insert(QString("RescheduledDateTime"), ::OpenAPI::toJsonValue(m_rescheduled_date_time));
    }
    if (m_rescheduled_day_isSet) {
        obj.insert(QString("RescheduledDay"), ::OpenAPI::toJsonValue(m_rescheduled_day));
    }
    if (m_scheduled_laps_isSet) {
        obj.insert(QString("ScheduledLaps"), ::OpenAPI::toJsonValue(m_scheduled_laps));
    }
    if (m_season_isSet) {
        obj.insert(QString("Season"), ::OpenAPI::toJsonValue(m_season));
    }
    if (m_series_id_isSet) {
        obj.insert(QString("SeriesID"), ::OpenAPI::toJsonValue(m_series_id));
    }
    if (m_series_name_isSet) {
        obj.insert(QString("SeriesName"), ::OpenAPI::toJsonValue(m_series_name));
    }
    if (m_track_isSet) {
        obj.insert(QString("Track"), ::OpenAPI::toJsonValue(m_track));
    }
    if (m_updated_isSet) {
        obj.insert(QString("Updated"), ::OpenAPI::toJsonValue(m_updated));
    }
    if (m_winner_id_isSet) {
        obj.insert(QString("WinnerID"), ::OpenAPI::toJsonValue(m_winner_id));
    }
    return obj;
}

qint32 OAIRace::getActualLaps() const {
    return m_actual_laps;
}
void OAIRace::setActualLaps(const qint32 &actual_laps) {
    m_actual_laps = actual_laps;
    m_actual_laps_isSet = true;
}

bool OAIRace::is_actual_laps_Set() const{
    return m_actual_laps_isSet;
}

bool OAIRace::is_actual_laps_Valid() const{
    return m_actual_laps_isValid;
}

QString OAIRace::getBroadcast() const {
    return m_broadcast;
}
void OAIRace::setBroadcast(const QString &broadcast) {
    m_broadcast = broadcast;
    m_broadcast_isSet = true;
}

bool OAIRace::is_broadcast_Set() const{
    return m_broadcast_isSet;
}

bool OAIRace::is_broadcast_Valid() const{
    return m_broadcast_isValid;
}

bool OAIRace::isCanceled() const {
    return m_canceled;
}
void OAIRace::setCanceled(const bool &canceled) {
    m_canceled = canceled;
    m_canceled_isSet = true;
}

bool OAIRace::is_canceled_Set() const{
    return m_canceled_isSet;
}

bool OAIRace::is_canceled_Valid() const{
    return m_canceled_isValid;
}

QString OAIRace::getCreated() const {
    return m_created;
}
void OAIRace::setCreated(const QString &created) {
    m_created = created;
    m_created_isSet = true;
}

bool OAIRace::is_created_Set() const{
    return m_created_isSet;
}

bool OAIRace::is_created_Valid() const{
    return m_created_isValid;
}

QString OAIRace::getDateTime() const {
    return m_date_time;
}
void OAIRace::setDateTime(const QString &date_time) {
    m_date_time = date_time;
    m_date_time_isSet = true;
}

bool OAIRace::is_date_time_Set() const{
    return m_date_time_isSet;
}

bool OAIRace::is_date_time_Valid() const{
    return m_date_time_isValid;
}

QString OAIRace::getDay() const {
    return m_day;
}
void OAIRace::setDay(const QString &day) {
    m_day = day;
    m_day_isSet = true;
}

bool OAIRace::is_day_Set() const{
    return m_day_isSet;
}

bool OAIRace::is_day_Valid() const{
    return m_day_isValid;
}

bool OAIRace::isIsInProgress() const {
    return m_is_in_progress;
}
void OAIRace::setIsInProgress(const bool &is_in_progress) {
    m_is_in_progress = is_in_progress;
    m_is_in_progress_isSet = true;
}

bool OAIRace::is_is_in_progress_Set() const{
    return m_is_in_progress_isSet;
}

bool OAIRace::is_is_in_progress_Valid() const{
    return m_is_in_progress_isValid;
}

bool OAIRace::isIsOver() const {
    return m_is_over;
}
void OAIRace::setIsOver(const bool &is_over) {
    m_is_over = is_over;
    m_is_over_isSet = true;
}

bool OAIRace::is_is_over_Set() const{
    return m_is_over_isSet;
}

bool OAIRace::is_is_over_Valid() const{
    return m_is_over_isValid;
}

QString OAIRace::getName() const {
    return m_name;
}
void OAIRace::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIRace::is_name_Set() const{
    return m_name_isSet;
}

bool OAIRace::is_name_Valid() const{
    return m_name_isValid;
}

qint32 OAIRace::getPoleWinnerId() const {
    return m_pole_winner_id;
}
void OAIRace::setPoleWinnerId(const qint32 &pole_winner_id) {
    m_pole_winner_id = pole_winner_id;
    m_pole_winner_id_isSet = true;
}

bool OAIRace::is_pole_winner_id_Set() const{
    return m_pole_winner_id_isSet;
}

bool OAIRace::is_pole_winner_id_Valid() const{
    return m_pole_winner_id_isValid;
}

qint32 OAIRace::getRaceId() const {
    return m_race_id;
}
void OAIRace::setRaceId(const qint32 &race_id) {
    m_race_id = race_id;
    m_race_id_isSet = true;
}

bool OAIRace::is_race_id_Set() const{
    return m_race_id_isSet;
}

bool OAIRace::is_race_id_Valid() const{
    return m_race_id_isValid;
}

QString OAIRace::getRescheduledDateTime() const {
    return m_rescheduled_date_time;
}
void OAIRace::setRescheduledDateTime(const QString &rescheduled_date_time) {
    m_rescheduled_date_time = rescheduled_date_time;
    m_rescheduled_date_time_isSet = true;
}

bool OAIRace::is_rescheduled_date_time_Set() const{
    return m_rescheduled_date_time_isSet;
}

bool OAIRace::is_rescheduled_date_time_Valid() const{
    return m_rescheduled_date_time_isValid;
}

QString OAIRace::getRescheduledDay() const {
    return m_rescheduled_day;
}
void OAIRace::setRescheduledDay(const QString &rescheduled_day) {
    m_rescheduled_day = rescheduled_day;
    m_rescheduled_day_isSet = true;
}

bool OAIRace::is_rescheduled_day_Set() const{
    return m_rescheduled_day_isSet;
}

bool OAIRace::is_rescheduled_day_Valid() const{
    return m_rescheduled_day_isValid;
}

qint32 OAIRace::getScheduledLaps() const {
    return m_scheduled_laps;
}
void OAIRace::setScheduledLaps(const qint32 &scheduled_laps) {
    m_scheduled_laps = scheduled_laps;
    m_scheduled_laps_isSet = true;
}

bool OAIRace::is_scheduled_laps_Set() const{
    return m_scheduled_laps_isSet;
}

bool OAIRace::is_scheduled_laps_Valid() const{
    return m_scheduled_laps_isValid;
}

qint32 OAIRace::getSeason() const {
    return m_season;
}
void OAIRace::setSeason(const qint32 &season) {
    m_season = season;
    m_season_isSet = true;
}

bool OAIRace::is_season_Set() const{
    return m_season_isSet;
}

bool OAIRace::is_season_Valid() const{
    return m_season_isValid;
}

qint32 OAIRace::getSeriesId() const {
    return m_series_id;
}
void OAIRace::setSeriesId(const qint32 &series_id) {
    m_series_id = series_id;
    m_series_id_isSet = true;
}

bool OAIRace::is_series_id_Set() const{
    return m_series_id_isSet;
}

bool OAIRace::is_series_id_Valid() const{
    return m_series_id_isValid;
}

QString OAIRace::getSeriesName() const {
    return m_series_name;
}
void OAIRace::setSeriesName(const QString &series_name) {
    m_series_name = series_name;
    m_series_name_isSet = true;
}

bool OAIRace::is_series_name_Set() const{
    return m_series_name_isSet;
}

bool OAIRace::is_series_name_Valid() const{
    return m_series_name_isValid;
}

QString OAIRace::getTrack() const {
    return m_track;
}
void OAIRace::setTrack(const QString &track) {
    m_track = track;
    m_track_isSet = true;
}

bool OAIRace::is_track_Set() const{
    return m_track_isSet;
}

bool OAIRace::is_track_Valid() const{
    return m_track_isValid;
}

QString OAIRace::getUpdated() const {
    return m_updated;
}
void OAIRace::setUpdated(const QString &updated) {
    m_updated = updated;
    m_updated_isSet = true;
}

bool OAIRace::is_updated_Set() const{
    return m_updated_isSet;
}

bool OAIRace::is_updated_Valid() const{
    return m_updated_isValid;
}

qint32 OAIRace::getWinnerId() const {
    return m_winner_id;
}
void OAIRace::setWinnerId(const qint32 &winner_id) {
    m_winner_id = winner_id;
    m_winner_id_isSet = true;
}

bool OAIRace::is_winner_id_Set() const{
    return m_winner_id_isSet;
}

bool OAIRace::is_winner_id_Valid() const{
    return m_winner_id_isValid;
}

bool OAIRace::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_actual_laps_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_broadcast_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_canceled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_day_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_in_progress_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_over_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pole_winner_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_race_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rescheduled_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rescheduled_day_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scheduled_laps_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_season_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_series_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_series_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_track_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_winner_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRace::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
