# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class News(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, author: str=None, categories: str=None, content: str=None, news_id: int=None, original_source: str=None, original_source_url: str=None, player_id: int=None, player_id2: int=None, source: str=None, team: str=None, team2: str=None, team_id: int=None, team_id2: int=None, terms_of_use: str=None, time_ago: str=None, title: str=None, updated: str=None, url: str=None):
        """News - a model defined in OpenAPI

        :param author: The author of this News.
        :param categories: The categories of this News.
        :param content: The content of this News.
        :param news_id: The news_id of this News.
        :param original_source: The original_source of this News.
        :param original_source_url: The original_source_url of this News.
        :param player_id: The player_id of this News.
        :param player_id2: The player_id2 of this News.
        :param source: The source of this News.
        :param team: The team of this News.
        :param team2: The team2 of this News.
        :param team_id: The team_id of this News.
        :param team_id2: The team_id2 of this News.
        :param terms_of_use: The terms_of_use of this News.
        :param time_ago: The time_ago of this News.
        :param title: The title of this News.
        :param updated: The updated of this News.
        :param url: The url of this News.
        """
        self.openapi_types = {
            'author': str,
            'categories': str,
            'content': str,
            'news_id': int,
            'original_source': str,
            'original_source_url': str,
            'player_id': int,
            'player_id2': int,
            'source': str,
            'team': str,
            'team2': str,
            'team_id': int,
            'team_id2': int,
            'terms_of_use': str,
            'time_ago': str,
            'title': str,
            'updated': str,
            'url': str
        }

        self.attribute_map = {
            'author': 'Author',
            'categories': 'Categories',
            'content': 'Content',
            'news_id': 'NewsID',
            'original_source': 'OriginalSource',
            'original_source_url': 'OriginalSourceUrl',
            'player_id': 'PlayerID',
            'player_id2': 'PlayerID2',
            'source': 'Source',
            'team': 'Team',
            'team2': 'Team2',
            'team_id': 'TeamID',
            'team_id2': 'TeamID2',
            'terms_of_use': 'TermsOfUse',
            'time_ago': 'TimeAgo',
            'title': 'Title',
            'updated': 'Updated',
            'url': 'Url'
        }

        self._author = author
        self._categories = categories
        self._content = content
        self._news_id = news_id
        self._original_source = original_source
        self._original_source_url = original_source_url
        self._player_id = player_id
        self._player_id2 = player_id2
        self._source = source
        self._team = team
        self._team2 = team2
        self._team_id = team_id
        self._team_id2 = team_id2
        self._terms_of_use = terms_of_use
        self._time_ago = time_ago
        self._title = title
        self._updated = updated
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'News':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The News of this News.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def author(self):
        """Gets the author of this News.


        :return: The author of this News.
        :rtype: str
        """
        return self._author

    @author.setter
    def author(self, author):
        """Sets the author of this News.


        :param author: The author of this News.
        :type author: str
        """

        self._author = author

    @property
    def categories(self):
        """Gets the categories of this News.


        :return: The categories of this News.
        :rtype: str
        """
        return self._categories

    @categories.setter
    def categories(self, categories):
        """Sets the categories of this News.


        :param categories: The categories of this News.
        :type categories: str
        """

        self._categories = categories

    @property
    def content(self):
        """Gets the content of this News.


        :return: The content of this News.
        :rtype: str
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this News.


        :param content: The content of this News.
        :type content: str
        """

        self._content = content

    @property
    def news_id(self):
        """Gets the news_id of this News.


        :return: The news_id of this News.
        :rtype: int
        """
        return self._news_id

    @news_id.setter
    def news_id(self, news_id):
        """Sets the news_id of this News.


        :param news_id: The news_id of this News.
        :type news_id: int
        """

        self._news_id = news_id

    @property
    def original_source(self):
        """Gets the original_source of this News.


        :return: The original_source of this News.
        :rtype: str
        """
        return self._original_source

    @original_source.setter
    def original_source(self, original_source):
        """Sets the original_source of this News.


        :param original_source: The original_source of this News.
        :type original_source: str
        """

        self._original_source = original_source

    @property
    def original_source_url(self):
        """Gets the original_source_url of this News.


        :return: The original_source_url of this News.
        :rtype: str
        """
        return self._original_source_url

    @original_source_url.setter
    def original_source_url(self, original_source_url):
        """Sets the original_source_url of this News.


        :param original_source_url: The original_source_url of this News.
        :type original_source_url: str
        """

        self._original_source_url = original_source_url

    @property
    def player_id(self):
        """Gets the player_id of this News.


        :return: The player_id of this News.
        :rtype: int
        """
        return self._player_id

    @player_id.setter
    def player_id(self, player_id):
        """Sets the player_id of this News.


        :param player_id: The player_id of this News.
        :type player_id: int
        """

        self._player_id = player_id

    @property
    def player_id2(self):
        """Gets the player_id2 of this News.


        :return: The player_id2 of this News.
        :rtype: int
        """
        return self._player_id2

    @player_id2.setter
    def player_id2(self, player_id2):
        """Sets the player_id2 of this News.


        :param player_id2: The player_id2 of this News.
        :type player_id2: int
        """

        self._player_id2 = player_id2

    @property
    def source(self):
        """Gets the source of this News.


        :return: The source of this News.
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this News.


        :param source: The source of this News.
        :type source: str
        """

        self._source = source

    @property
    def team(self):
        """Gets the team of this News.


        :return: The team of this News.
        :rtype: str
        """
        return self._team

    @team.setter
    def team(self, team):
        """Sets the team of this News.


        :param team: The team of this News.
        :type team: str
        """

        self._team = team

    @property
    def team2(self):
        """Gets the team2 of this News.


        :return: The team2 of this News.
        :rtype: str
        """
        return self._team2

    @team2.setter
    def team2(self, team2):
        """Sets the team2 of this News.


        :param team2: The team2 of this News.
        :type team2: str
        """

        self._team2 = team2

    @property
    def team_id(self):
        """Gets the team_id of this News.


        :return: The team_id of this News.
        :rtype: int
        """
        return self._team_id

    @team_id.setter
    def team_id(self, team_id):
        """Sets the team_id of this News.


        :param team_id: The team_id of this News.
        :type team_id: int
        """

        self._team_id = team_id

    @property
    def team_id2(self):
        """Gets the team_id2 of this News.


        :return: The team_id2 of this News.
        :rtype: int
        """
        return self._team_id2

    @team_id2.setter
    def team_id2(self, team_id2):
        """Sets the team_id2 of this News.


        :param team_id2: The team_id2 of this News.
        :type team_id2: int
        """

        self._team_id2 = team_id2

    @property
    def terms_of_use(self):
        """Gets the terms_of_use of this News.


        :return: The terms_of_use of this News.
        :rtype: str
        """
        return self._terms_of_use

    @terms_of_use.setter
    def terms_of_use(self, terms_of_use):
        """Sets the terms_of_use of this News.


        :param terms_of_use: The terms_of_use of this News.
        :type terms_of_use: str
        """

        self._terms_of_use = terms_of_use

    @property
    def time_ago(self):
        """Gets the time_ago of this News.


        :return: The time_ago of this News.
        :rtype: str
        """
        return self._time_ago

    @time_ago.setter
    def time_ago(self, time_ago):
        """Sets the time_ago of this News.


        :param time_ago: The time_ago of this News.
        :type time_ago: str
        """

        self._time_ago = time_ago

    @property
    def title(self):
        """Gets the title of this News.


        :return: The title of this News.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this News.


        :param title: The title of this News.
        :type title: str
        """

        self._title = title

    @property
    def updated(self):
        """Gets the updated of this News.


        :return: The updated of this News.
        :rtype: str
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """Sets the updated of this News.


        :param updated: The updated of this News.
        :type updated: str
        """

        self._updated = updated

    @property
    def url(self):
        """Gets the url of this News.


        :return: The url of this News.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this News.


        :param url: The url of this News.
        :type url: str
        """

        self._url = url
