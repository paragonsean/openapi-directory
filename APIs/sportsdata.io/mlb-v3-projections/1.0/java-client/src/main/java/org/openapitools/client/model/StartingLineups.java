/*
 * MLB v3 Projections
 * MLB projections API.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Lineup;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * StartingLineups
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:05:08.756122-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class StartingLineups {
  public static final String SERIALIZED_NAME_AWAY_BATTING_LINEUP = "AwayBattingLineup";
  @SerializedName(SERIALIZED_NAME_AWAY_BATTING_LINEUP)
  private List<Lineup> awayBattingLineup = new ArrayList<>();

  public static final String SERIALIZED_NAME_AWAY_STARTING_PITCHER = "AwayStartingPitcher";
  @SerializedName(SERIALIZED_NAME_AWAY_STARTING_PITCHER)
  private Lineup awayStartingPitcher;

  public static final String SERIALIZED_NAME_AWAY_TEAM = "AwayTeam";
  @SerializedName(SERIALIZED_NAME_AWAY_TEAM)
  private String awayTeam;

  public static final String SERIALIZED_NAME_AWAY_TEAM_I_D = "AwayTeamID";
  @SerializedName(SERIALIZED_NAME_AWAY_TEAM_I_D)
  private Integer awayTeamID;

  public static final String SERIALIZED_NAME_DATE_TIME = "DateTime";
  @SerializedName(SERIALIZED_NAME_DATE_TIME)
  private String dateTime;

  public static final String SERIALIZED_NAME_DAY = "Day";
  @SerializedName(SERIALIZED_NAME_DAY)
  private String day;

  public static final String SERIALIZED_NAME_GAME_I_D = "GameID";
  @SerializedName(SERIALIZED_NAME_GAME_I_D)
  private Integer gameID;

  public static final String SERIALIZED_NAME_HOME_BATTING_LINEUP = "HomeBattingLineup";
  @SerializedName(SERIALIZED_NAME_HOME_BATTING_LINEUP)
  private List<Lineup> homeBattingLineup = new ArrayList<>();

  public static final String SERIALIZED_NAME_HOME_STARTING_PITCHER = "HomeStartingPitcher";
  @SerializedName(SERIALIZED_NAME_HOME_STARTING_PITCHER)
  private Lineup homeStartingPitcher;

  public static final String SERIALIZED_NAME_HOME_TEAM = "HomeTeam";
  @SerializedName(SERIALIZED_NAME_HOME_TEAM)
  private String homeTeam;

  public static final String SERIALIZED_NAME_HOME_TEAM_I_D = "HomeTeamID";
  @SerializedName(SERIALIZED_NAME_HOME_TEAM_I_D)
  private Integer homeTeamID;

  public static final String SERIALIZED_NAME_SEASON = "Season";
  @SerializedName(SERIALIZED_NAME_SEASON)
  private Integer season;

  public static final String SERIALIZED_NAME_SEASON_TYPE = "SeasonType";
  @SerializedName(SERIALIZED_NAME_SEASON_TYPE)
  private Integer seasonType;

  public static final String SERIALIZED_NAME_STATUS = "Status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public StartingLineups() {
  }

  public StartingLineups awayBattingLineup(List<Lineup> awayBattingLineup) {
    this.awayBattingLineup = awayBattingLineup;
    return this;
  }

  public StartingLineups addAwayBattingLineupItem(Lineup awayBattingLineupItem) {
    if (this.awayBattingLineup == null) {
      this.awayBattingLineup = new ArrayList<>();
    }
    this.awayBattingLineup.add(awayBattingLineupItem);
    return this;
  }

  /**
   * Get awayBattingLineup
   * @return awayBattingLineup
   */
  @javax.annotation.Nullable
  public List<Lineup> getAwayBattingLineup() {
    return awayBattingLineup;
  }

  public void setAwayBattingLineup(List<Lineup> awayBattingLineup) {
    this.awayBattingLineup = awayBattingLineup;
  }


  public StartingLineups awayStartingPitcher(Lineup awayStartingPitcher) {
    this.awayStartingPitcher = awayStartingPitcher;
    return this;
  }

  /**
   * Get awayStartingPitcher
   * @return awayStartingPitcher
   */
  @javax.annotation.Nullable
  public Lineup getAwayStartingPitcher() {
    return awayStartingPitcher;
  }

  public void setAwayStartingPitcher(Lineup awayStartingPitcher) {
    this.awayStartingPitcher = awayStartingPitcher;
  }


  public StartingLineups awayTeam(String awayTeam) {
    this.awayTeam = awayTeam;
    return this;
  }

  /**
   * Get awayTeam
   * @return awayTeam
   */
  @javax.annotation.Nullable
  public String getAwayTeam() {
    return awayTeam;
  }

  public void setAwayTeam(String awayTeam) {
    this.awayTeam = awayTeam;
  }


  public StartingLineups awayTeamID(Integer awayTeamID) {
    this.awayTeamID = awayTeamID;
    return this;
  }

  /**
   * Get awayTeamID
   * @return awayTeamID
   */
  @javax.annotation.Nullable
  public Integer getAwayTeamID() {
    return awayTeamID;
  }

  public void setAwayTeamID(Integer awayTeamID) {
    this.awayTeamID = awayTeamID;
  }


  public StartingLineups dateTime(String dateTime) {
    this.dateTime = dateTime;
    return this;
  }

  /**
   * Get dateTime
   * @return dateTime
   */
  @javax.annotation.Nullable
  public String getDateTime() {
    return dateTime;
  }

  public void setDateTime(String dateTime) {
    this.dateTime = dateTime;
  }


  public StartingLineups day(String day) {
    this.day = day;
    return this;
  }

  /**
   * Get day
   * @return day
   */
  @javax.annotation.Nullable
  public String getDay() {
    return day;
  }

  public void setDay(String day) {
    this.day = day;
  }


  public StartingLineups gameID(Integer gameID) {
    this.gameID = gameID;
    return this;
  }

  /**
   * Get gameID
   * @return gameID
   */
  @javax.annotation.Nullable
  public Integer getGameID() {
    return gameID;
  }

  public void setGameID(Integer gameID) {
    this.gameID = gameID;
  }


  public StartingLineups homeBattingLineup(List<Lineup> homeBattingLineup) {
    this.homeBattingLineup = homeBattingLineup;
    return this;
  }

  public StartingLineups addHomeBattingLineupItem(Lineup homeBattingLineupItem) {
    if (this.homeBattingLineup == null) {
      this.homeBattingLineup = new ArrayList<>();
    }
    this.homeBattingLineup.add(homeBattingLineupItem);
    return this;
  }

  /**
   * Get homeBattingLineup
   * @return homeBattingLineup
   */
  @javax.annotation.Nullable
  public List<Lineup> getHomeBattingLineup() {
    return homeBattingLineup;
  }

  public void setHomeBattingLineup(List<Lineup> homeBattingLineup) {
    this.homeBattingLineup = homeBattingLineup;
  }


  public StartingLineups homeStartingPitcher(Lineup homeStartingPitcher) {
    this.homeStartingPitcher = homeStartingPitcher;
    return this;
  }

  /**
   * Get homeStartingPitcher
   * @return homeStartingPitcher
   */
  @javax.annotation.Nullable
  public Lineup getHomeStartingPitcher() {
    return homeStartingPitcher;
  }

  public void setHomeStartingPitcher(Lineup homeStartingPitcher) {
    this.homeStartingPitcher = homeStartingPitcher;
  }


  public StartingLineups homeTeam(String homeTeam) {
    this.homeTeam = homeTeam;
    return this;
  }

  /**
   * Get homeTeam
   * @return homeTeam
   */
  @javax.annotation.Nullable
  public String getHomeTeam() {
    return homeTeam;
  }

  public void setHomeTeam(String homeTeam) {
    this.homeTeam = homeTeam;
  }


  public StartingLineups homeTeamID(Integer homeTeamID) {
    this.homeTeamID = homeTeamID;
    return this;
  }

  /**
   * Get homeTeamID
   * @return homeTeamID
   */
  @javax.annotation.Nullable
  public Integer getHomeTeamID() {
    return homeTeamID;
  }

  public void setHomeTeamID(Integer homeTeamID) {
    this.homeTeamID = homeTeamID;
  }


  public StartingLineups season(Integer season) {
    this.season = season;
    return this;
  }

  /**
   * Get season
   * @return season
   */
  @javax.annotation.Nullable
  public Integer getSeason() {
    return season;
  }

  public void setSeason(Integer season) {
    this.season = season;
  }


  public StartingLineups seasonType(Integer seasonType) {
    this.seasonType = seasonType;
    return this;
  }

  /**
   * Get seasonType
   * @return seasonType
   */
  @javax.annotation.Nullable
  public Integer getSeasonType() {
    return seasonType;
  }

  public void setSeasonType(Integer seasonType) {
    this.seasonType = seasonType;
  }


  public StartingLineups status(String status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StartingLineups startingLineups = (StartingLineups) o;
    return Objects.equals(this.awayBattingLineup, startingLineups.awayBattingLineup) &&
        Objects.equals(this.awayStartingPitcher, startingLineups.awayStartingPitcher) &&
        Objects.equals(this.awayTeam, startingLineups.awayTeam) &&
        Objects.equals(this.awayTeamID, startingLineups.awayTeamID) &&
        Objects.equals(this.dateTime, startingLineups.dateTime) &&
        Objects.equals(this.day, startingLineups.day) &&
        Objects.equals(this.gameID, startingLineups.gameID) &&
        Objects.equals(this.homeBattingLineup, startingLineups.homeBattingLineup) &&
        Objects.equals(this.homeStartingPitcher, startingLineups.homeStartingPitcher) &&
        Objects.equals(this.homeTeam, startingLineups.homeTeam) &&
        Objects.equals(this.homeTeamID, startingLineups.homeTeamID) &&
        Objects.equals(this.season, startingLineups.season) &&
        Objects.equals(this.seasonType, startingLineups.seasonType) &&
        Objects.equals(this.status, startingLineups.status);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(awayBattingLineup, awayStartingPitcher, awayTeam, awayTeamID, dateTime, day, gameID, homeBattingLineup, homeStartingPitcher, homeTeam, homeTeamID, season, seasonType, status);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StartingLineups {\n");
    sb.append("    awayBattingLineup: ").append(toIndentedString(awayBattingLineup)).append("\n");
    sb.append("    awayStartingPitcher: ").append(toIndentedString(awayStartingPitcher)).append("\n");
    sb.append("    awayTeam: ").append(toIndentedString(awayTeam)).append("\n");
    sb.append("    awayTeamID: ").append(toIndentedString(awayTeamID)).append("\n");
    sb.append("    dateTime: ").append(toIndentedString(dateTime)).append("\n");
    sb.append("    day: ").append(toIndentedString(day)).append("\n");
    sb.append("    gameID: ").append(toIndentedString(gameID)).append("\n");
    sb.append("    homeBattingLineup: ").append(toIndentedString(homeBattingLineup)).append("\n");
    sb.append("    homeStartingPitcher: ").append(toIndentedString(homeStartingPitcher)).append("\n");
    sb.append("    homeTeam: ").append(toIndentedString(homeTeam)).append("\n");
    sb.append("    homeTeamID: ").append(toIndentedString(homeTeamID)).append("\n");
    sb.append("    season: ").append(toIndentedString(season)).append("\n");
    sb.append("    seasonType: ").append(toIndentedString(seasonType)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AwayBattingLineup");
    openapiFields.add("AwayStartingPitcher");
    openapiFields.add("AwayTeam");
    openapiFields.add("AwayTeamID");
    openapiFields.add("DateTime");
    openapiFields.add("Day");
    openapiFields.add("GameID");
    openapiFields.add("HomeBattingLineup");
    openapiFields.add("HomeStartingPitcher");
    openapiFields.add("HomeTeam");
    openapiFields.add("HomeTeamID");
    openapiFields.add("Season");
    openapiFields.add("SeasonType");
    openapiFields.add("Status");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to StartingLineups
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!StartingLineups.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in StartingLineups is not found in the empty JSON string", StartingLineups.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!StartingLineups.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `StartingLineups` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("AwayBattingLineup") != null && !jsonObj.get("AwayBattingLineup").isJsonNull()) {
        JsonArray jsonArrayawayBattingLineup = jsonObj.getAsJsonArray("AwayBattingLineup");
        if (jsonArrayawayBattingLineup != null) {
          // ensure the json data is an array
          if (!jsonObj.get("AwayBattingLineup").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `AwayBattingLineup` to be an array in the JSON string but got `%s`", jsonObj.get("AwayBattingLineup").toString()));
          }

          // validate the optional field `AwayBattingLineup` (array)
          for (int i = 0; i < jsonArrayawayBattingLineup.size(); i++) {
            Lineup.validateJsonElement(jsonArrayawayBattingLineup.get(i));
          };
        }
      }
      // validate the optional field `AwayStartingPitcher`
      if (jsonObj.get("AwayStartingPitcher") != null && !jsonObj.get("AwayStartingPitcher").isJsonNull()) {
        Lineup.validateJsonElement(jsonObj.get("AwayStartingPitcher"));
      }
      if ((jsonObj.get("AwayTeam") != null && !jsonObj.get("AwayTeam").isJsonNull()) && !jsonObj.get("AwayTeam").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AwayTeam` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AwayTeam").toString()));
      }
      if ((jsonObj.get("DateTime") != null && !jsonObj.get("DateTime").isJsonNull()) && !jsonObj.get("DateTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DateTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DateTime").toString()));
      }
      if ((jsonObj.get("Day") != null && !jsonObj.get("Day").isJsonNull()) && !jsonObj.get("Day").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Day` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Day").toString()));
      }
      if (jsonObj.get("HomeBattingLineup") != null && !jsonObj.get("HomeBattingLineup").isJsonNull()) {
        JsonArray jsonArrayhomeBattingLineup = jsonObj.getAsJsonArray("HomeBattingLineup");
        if (jsonArrayhomeBattingLineup != null) {
          // ensure the json data is an array
          if (!jsonObj.get("HomeBattingLineup").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `HomeBattingLineup` to be an array in the JSON string but got `%s`", jsonObj.get("HomeBattingLineup").toString()));
          }

          // validate the optional field `HomeBattingLineup` (array)
          for (int i = 0; i < jsonArrayhomeBattingLineup.size(); i++) {
            Lineup.validateJsonElement(jsonArrayhomeBattingLineup.get(i));
          };
        }
      }
      // validate the optional field `HomeStartingPitcher`
      if (jsonObj.get("HomeStartingPitcher") != null && !jsonObj.get("HomeStartingPitcher").isJsonNull()) {
        Lineup.validateJsonElement(jsonObj.get("HomeStartingPitcher"));
      }
      if ((jsonObj.get("HomeTeam") != null && !jsonObj.get("HomeTeam").isJsonNull()) && !jsonObj.get("HomeTeam").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `HomeTeam` to be a primitive type in the JSON string but got `%s`", jsonObj.get("HomeTeam").toString()));
      }
      if ((jsonObj.get("Status") != null && !jsonObj.get("Status").isJsonNull()) && !jsonObj.get("Status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Status").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!StartingLineups.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'StartingLineups' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<StartingLineups> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(StartingLineups.class));

       return (TypeAdapter<T>) new TypeAdapter<StartingLineups>() {
           @Override
           public void write(JsonWriter out, StartingLineups value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public StartingLineups read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of StartingLineups given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of StartingLineups
   * @throws IOException if the JSON string is invalid with respect to StartingLineups
   */
  public static StartingLineups fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, StartingLineups.class);
  }

  /**
   * Convert an instance of StartingLineups to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

