/*
 * MLB v3 Projections
 * MLB projections API.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Player
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:05:08.756122-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Player {
  public static final String SERIALIZED_NAME_BAT_HAND = "BatHand";
  @SerializedName(SERIALIZED_NAME_BAT_HAND)
  private String batHand;

  public static final String SERIALIZED_NAME_BIRTH_CITY = "BirthCity";
  @SerializedName(SERIALIZED_NAME_BIRTH_CITY)
  private String birthCity;

  public static final String SERIALIZED_NAME_BIRTH_COUNTRY = "BirthCountry";
  @SerializedName(SERIALIZED_NAME_BIRTH_COUNTRY)
  private String birthCountry;

  public static final String SERIALIZED_NAME_BIRTH_DATE = "BirthDate";
  @SerializedName(SERIALIZED_NAME_BIRTH_DATE)
  private String birthDate;

  public static final String SERIALIZED_NAME_BIRTH_STATE = "BirthState";
  @SerializedName(SERIALIZED_NAME_BIRTH_STATE)
  private String birthState;

  public static final String SERIALIZED_NAME_COLLEGE = "College";
  @SerializedName(SERIALIZED_NAME_COLLEGE)
  private String college;

  public static final String SERIALIZED_NAME_DRAFT_KINGS_NAME = "DraftKingsName";
  @SerializedName(SERIALIZED_NAME_DRAFT_KINGS_NAME)
  private String draftKingsName;

  public static final String SERIALIZED_NAME_DRAFT_KINGS_PLAYER_I_D = "DraftKingsPlayerID";
  @SerializedName(SERIALIZED_NAME_DRAFT_KINGS_PLAYER_I_D)
  private Integer draftKingsPlayerID;

  public static final String SERIALIZED_NAME_EXPERIENCE = "Experience";
  @SerializedName(SERIALIZED_NAME_EXPERIENCE)
  private String experience;

  public static final String SERIALIZED_NAME_FAN_DUEL_NAME = "FanDuelName";
  @SerializedName(SERIALIZED_NAME_FAN_DUEL_NAME)
  private String fanDuelName;

  public static final String SERIALIZED_NAME_FAN_DUEL_PLAYER_I_D = "FanDuelPlayerID";
  @SerializedName(SERIALIZED_NAME_FAN_DUEL_PLAYER_I_D)
  private Integer fanDuelPlayerID;

  public static final String SERIALIZED_NAME_FANTASY_ALARM_PLAYER_I_D = "FantasyAlarmPlayerID";
  @SerializedName(SERIALIZED_NAME_FANTASY_ALARM_PLAYER_I_D)
  private Integer fantasyAlarmPlayerID;

  public static final String SERIALIZED_NAME_FANTASY_DRAFT_NAME = "FantasyDraftName";
  @SerializedName(SERIALIZED_NAME_FANTASY_DRAFT_NAME)
  private String fantasyDraftName;

  public static final String SERIALIZED_NAME_FANTASY_DRAFT_PLAYER_I_D = "FantasyDraftPlayerID";
  @SerializedName(SERIALIZED_NAME_FANTASY_DRAFT_PLAYER_I_D)
  private Integer fantasyDraftPlayerID;

  public static final String SERIALIZED_NAME_FIRST_NAME = "FirstName";
  @SerializedName(SERIALIZED_NAME_FIRST_NAME)
  private String firstName;

  public static final String SERIALIZED_NAME_GLOBAL_TEAM_I_D = "GlobalTeamID";
  @SerializedName(SERIALIZED_NAME_GLOBAL_TEAM_I_D)
  private Integer globalTeamID;

  public static final String SERIALIZED_NAME_HEIGHT = "Height";
  @SerializedName(SERIALIZED_NAME_HEIGHT)
  private Integer height;

  public static final String SERIALIZED_NAME_HIGH_SCHOOL = "HighSchool";
  @SerializedName(SERIALIZED_NAME_HIGH_SCHOOL)
  private String highSchool;

  public static final String SERIALIZED_NAME_INJURY_BODY_PART = "InjuryBodyPart";
  @SerializedName(SERIALIZED_NAME_INJURY_BODY_PART)
  private String injuryBodyPart;

  public static final String SERIALIZED_NAME_INJURY_NOTES = "InjuryNotes";
  @SerializedName(SERIALIZED_NAME_INJURY_NOTES)
  private String injuryNotes;

  public static final String SERIALIZED_NAME_INJURY_START_DATE = "InjuryStartDate";
  @SerializedName(SERIALIZED_NAME_INJURY_START_DATE)
  private String injuryStartDate;

  public static final String SERIALIZED_NAME_INJURY_STATUS = "InjuryStatus";
  @SerializedName(SERIALIZED_NAME_INJURY_STATUS)
  private String injuryStatus;

  public static final String SERIALIZED_NAME_JERSEY = "Jersey";
  @SerializedName(SERIALIZED_NAME_JERSEY)
  private Integer jersey;

  public static final String SERIALIZED_NAME_LAST_NAME = "LastName";
  @SerializedName(SERIALIZED_NAME_LAST_NAME)
  private String lastName;

  public static final String SERIALIZED_NAME_M_L_B_A_M_I_D = "MLBAMID";
  @SerializedName(SERIALIZED_NAME_M_L_B_A_M_I_D)
  private Integer MLBAMID;

  public static final String SERIALIZED_NAME_PHOTO_URL = "PhotoUrl";
  @SerializedName(SERIALIZED_NAME_PHOTO_URL)
  private String photoUrl;

  public static final String SERIALIZED_NAME_PLAYER_I_D = "PlayerID";
  @SerializedName(SERIALIZED_NAME_PLAYER_I_D)
  private Integer playerID;

  public static final String SERIALIZED_NAME_POSITION = "Position";
  @SerializedName(SERIALIZED_NAME_POSITION)
  private String position;

  public static final String SERIALIZED_NAME_POSITION_CATEGORY = "PositionCategory";
  @SerializedName(SERIALIZED_NAME_POSITION_CATEGORY)
  private String positionCategory;

  public static final String SERIALIZED_NAME_PRO_DEBUT = "ProDebut";
  @SerializedName(SERIALIZED_NAME_PRO_DEBUT)
  private String proDebut;

  public static final String SERIALIZED_NAME_ROTO_WIRE_PLAYER_I_D = "RotoWirePlayerID";
  @SerializedName(SERIALIZED_NAME_ROTO_WIRE_PLAYER_I_D)
  private Integer rotoWirePlayerID;

  public static final String SERIALIZED_NAME_ROTOWORLD_PLAYER_I_D = "RotoworldPlayerID";
  @SerializedName(SERIALIZED_NAME_ROTOWORLD_PLAYER_I_D)
  private Integer rotoworldPlayerID;

  public static final String SERIALIZED_NAME_SALARY = "Salary";
  @SerializedName(SERIALIZED_NAME_SALARY)
  private Integer salary;

  public static final String SERIALIZED_NAME_SPORT_RADAR_PLAYER_I_D = "SportRadarPlayerID";
  @SerializedName(SERIALIZED_NAME_SPORT_RADAR_PLAYER_I_D)
  private String sportRadarPlayerID;

  public static final String SERIALIZED_NAME_SPORTS_DATA_I_D = "SportsDataID";
  @SerializedName(SERIALIZED_NAME_SPORTS_DATA_I_D)
  private String sportsDataID;

  public static final String SERIALIZED_NAME_SPORTS_DIRECT_PLAYER_I_D = "SportsDirectPlayerID";
  @SerializedName(SERIALIZED_NAME_SPORTS_DIRECT_PLAYER_I_D)
  private Integer sportsDirectPlayerID;

  public static final String SERIALIZED_NAME_STATS_PLAYER_I_D = "StatsPlayerID";
  @SerializedName(SERIALIZED_NAME_STATS_PLAYER_I_D)
  private Integer statsPlayerID;

  public static final String SERIALIZED_NAME_STATUS = "Status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_TEAM = "Team";
  @SerializedName(SERIALIZED_NAME_TEAM)
  private String team;

  public static final String SERIALIZED_NAME_TEAM_I_D = "TeamID";
  @SerializedName(SERIALIZED_NAME_TEAM_I_D)
  private Integer teamID;

  public static final String SERIALIZED_NAME_THROW_HAND = "ThrowHand";
  @SerializedName(SERIALIZED_NAME_THROW_HAND)
  private String throwHand;

  public static final String SERIALIZED_NAME_UPCOMING_GAME_I_D = "UpcomingGameID";
  @SerializedName(SERIALIZED_NAME_UPCOMING_GAME_I_D)
  private Integer upcomingGameID;

  public static final String SERIALIZED_NAME_USA_TODAY_HEADSHOT_NO_BACKGROUND_UPDATED = "UsaTodayHeadshotNoBackgroundUpdated";
  @SerializedName(SERIALIZED_NAME_USA_TODAY_HEADSHOT_NO_BACKGROUND_UPDATED)
  private String usaTodayHeadshotNoBackgroundUpdated;

  public static final String SERIALIZED_NAME_USA_TODAY_HEADSHOT_NO_BACKGROUND_URL = "UsaTodayHeadshotNoBackgroundUrl";
  @SerializedName(SERIALIZED_NAME_USA_TODAY_HEADSHOT_NO_BACKGROUND_URL)
  private String usaTodayHeadshotNoBackgroundUrl;

  public static final String SERIALIZED_NAME_USA_TODAY_HEADSHOT_UPDATED = "UsaTodayHeadshotUpdated";
  @SerializedName(SERIALIZED_NAME_USA_TODAY_HEADSHOT_UPDATED)
  private String usaTodayHeadshotUpdated;

  public static final String SERIALIZED_NAME_USA_TODAY_HEADSHOT_URL = "UsaTodayHeadshotUrl";
  @SerializedName(SERIALIZED_NAME_USA_TODAY_HEADSHOT_URL)
  private String usaTodayHeadshotUrl;

  public static final String SERIALIZED_NAME_USA_TODAY_PLAYER_I_D = "UsaTodayPlayerID";
  @SerializedName(SERIALIZED_NAME_USA_TODAY_PLAYER_I_D)
  private Integer usaTodayPlayerID;

  public static final String SERIALIZED_NAME_WEIGHT = "Weight";
  @SerializedName(SERIALIZED_NAME_WEIGHT)
  private Integer weight;

  public static final String SERIALIZED_NAME_XML_TEAM_PLAYER_I_D = "XmlTeamPlayerID";
  @SerializedName(SERIALIZED_NAME_XML_TEAM_PLAYER_I_D)
  private Integer xmlTeamPlayerID;

  public static final String SERIALIZED_NAME_YAHOO_NAME = "YahooName";
  @SerializedName(SERIALIZED_NAME_YAHOO_NAME)
  private String yahooName;

  public static final String SERIALIZED_NAME_YAHOO_PLAYER_I_D = "YahooPlayerID";
  @SerializedName(SERIALIZED_NAME_YAHOO_PLAYER_I_D)
  private Integer yahooPlayerID;

  public Player() {
  }

  public Player batHand(String batHand) {
    this.batHand = batHand;
    return this;
  }

  /**
   * Get batHand
   * @return batHand
   */
  @javax.annotation.Nullable
  public String getBatHand() {
    return batHand;
  }

  public void setBatHand(String batHand) {
    this.batHand = batHand;
  }


  public Player birthCity(String birthCity) {
    this.birthCity = birthCity;
    return this;
  }

  /**
   * Get birthCity
   * @return birthCity
   */
  @javax.annotation.Nullable
  public String getBirthCity() {
    return birthCity;
  }

  public void setBirthCity(String birthCity) {
    this.birthCity = birthCity;
  }


  public Player birthCountry(String birthCountry) {
    this.birthCountry = birthCountry;
    return this;
  }

  /**
   * Get birthCountry
   * @return birthCountry
   */
  @javax.annotation.Nullable
  public String getBirthCountry() {
    return birthCountry;
  }

  public void setBirthCountry(String birthCountry) {
    this.birthCountry = birthCountry;
  }


  public Player birthDate(String birthDate) {
    this.birthDate = birthDate;
    return this;
  }

  /**
   * Get birthDate
   * @return birthDate
   */
  @javax.annotation.Nullable
  public String getBirthDate() {
    return birthDate;
  }

  public void setBirthDate(String birthDate) {
    this.birthDate = birthDate;
  }


  public Player birthState(String birthState) {
    this.birthState = birthState;
    return this;
  }

  /**
   * Get birthState
   * @return birthState
   */
  @javax.annotation.Nullable
  public String getBirthState() {
    return birthState;
  }

  public void setBirthState(String birthState) {
    this.birthState = birthState;
  }


  public Player college(String college) {
    this.college = college;
    return this;
  }

  /**
   * Get college
   * @return college
   */
  @javax.annotation.Nullable
  public String getCollege() {
    return college;
  }

  public void setCollege(String college) {
    this.college = college;
  }


  public Player draftKingsName(String draftKingsName) {
    this.draftKingsName = draftKingsName;
    return this;
  }

  /**
   * Get draftKingsName
   * @return draftKingsName
   */
  @javax.annotation.Nullable
  public String getDraftKingsName() {
    return draftKingsName;
  }

  public void setDraftKingsName(String draftKingsName) {
    this.draftKingsName = draftKingsName;
  }


  public Player draftKingsPlayerID(Integer draftKingsPlayerID) {
    this.draftKingsPlayerID = draftKingsPlayerID;
    return this;
  }

  /**
   * Get draftKingsPlayerID
   * @return draftKingsPlayerID
   */
  @javax.annotation.Nullable
  public Integer getDraftKingsPlayerID() {
    return draftKingsPlayerID;
  }

  public void setDraftKingsPlayerID(Integer draftKingsPlayerID) {
    this.draftKingsPlayerID = draftKingsPlayerID;
  }


  public Player experience(String experience) {
    this.experience = experience;
    return this;
  }

  /**
   * Get experience
   * @return experience
   */
  @javax.annotation.Nullable
  public String getExperience() {
    return experience;
  }

  public void setExperience(String experience) {
    this.experience = experience;
  }


  public Player fanDuelName(String fanDuelName) {
    this.fanDuelName = fanDuelName;
    return this;
  }

  /**
   * Get fanDuelName
   * @return fanDuelName
   */
  @javax.annotation.Nullable
  public String getFanDuelName() {
    return fanDuelName;
  }

  public void setFanDuelName(String fanDuelName) {
    this.fanDuelName = fanDuelName;
  }


  public Player fanDuelPlayerID(Integer fanDuelPlayerID) {
    this.fanDuelPlayerID = fanDuelPlayerID;
    return this;
  }

  /**
   * Get fanDuelPlayerID
   * @return fanDuelPlayerID
   */
  @javax.annotation.Nullable
  public Integer getFanDuelPlayerID() {
    return fanDuelPlayerID;
  }

  public void setFanDuelPlayerID(Integer fanDuelPlayerID) {
    this.fanDuelPlayerID = fanDuelPlayerID;
  }


  public Player fantasyAlarmPlayerID(Integer fantasyAlarmPlayerID) {
    this.fantasyAlarmPlayerID = fantasyAlarmPlayerID;
    return this;
  }

  /**
   * Get fantasyAlarmPlayerID
   * @return fantasyAlarmPlayerID
   */
  @javax.annotation.Nullable
  public Integer getFantasyAlarmPlayerID() {
    return fantasyAlarmPlayerID;
  }

  public void setFantasyAlarmPlayerID(Integer fantasyAlarmPlayerID) {
    this.fantasyAlarmPlayerID = fantasyAlarmPlayerID;
  }


  public Player fantasyDraftName(String fantasyDraftName) {
    this.fantasyDraftName = fantasyDraftName;
    return this;
  }

  /**
   * Get fantasyDraftName
   * @return fantasyDraftName
   */
  @javax.annotation.Nullable
  public String getFantasyDraftName() {
    return fantasyDraftName;
  }

  public void setFantasyDraftName(String fantasyDraftName) {
    this.fantasyDraftName = fantasyDraftName;
  }


  public Player fantasyDraftPlayerID(Integer fantasyDraftPlayerID) {
    this.fantasyDraftPlayerID = fantasyDraftPlayerID;
    return this;
  }

  /**
   * Get fantasyDraftPlayerID
   * @return fantasyDraftPlayerID
   */
  @javax.annotation.Nullable
  public Integer getFantasyDraftPlayerID() {
    return fantasyDraftPlayerID;
  }

  public void setFantasyDraftPlayerID(Integer fantasyDraftPlayerID) {
    this.fantasyDraftPlayerID = fantasyDraftPlayerID;
  }


  public Player firstName(String firstName) {
    this.firstName = firstName;
    return this;
  }

  /**
   * Get firstName
   * @return firstName
   */
  @javax.annotation.Nullable
  public String getFirstName() {
    return firstName;
  }

  public void setFirstName(String firstName) {
    this.firstName = firstName;
  }


  public Player globalTeamID(Integer globalTeamID) {
    this.globalTeamID = globalTeamID;
    return this;
  }

  /**
   * Get globalTeamID
   * @return globalTeamID
   */
  @javax.annotation.Nullable
  public Integer getGlobalTeamID() {
    return globalTeamID;
  }

  public void setGlobalTeamID(Integer globalTeamID) {
    this.globalTeamID = globalTeamID;
  }


  public Player height(Integer height) {
    this.height = height;
    return this;
  }

  /**
   * Get height
   * @return height
   */
  @javax.annotation.Nullable
  public Integer getHeight() {
    return height;
  }

  public void setHeight(Integer height) {
    this.height = height;
  }


  public Player highSchool(String highSchool) {
    this.highSchool = highSchool;
    return this;
  }

  /**
   * Get highSchool
   * @return highSchool
   */
  @javax.annotation.Nullable
  public String getHighSchool() {
    return highSchool;
  }

  public void setHighSchool(String highSchool) {
    this.highSchool = highSchool;
  }


  public Player injuryBodyPart(String injuryBodyPart) {
    this.injuryBodyPart = injuryBodyPart;
    return this;
  }

  /**
   * Get injuryBodyPart
   * @return injuryBodyPart
   */
  @javax.annotation.Nullable
  public String getInjuryBodyPart() {
    return injuryBodyPart;
  }

  public void setInjuryBodyPart(String injuryBodyPart) {
    this.injuryBodyPart = injuryBodyPart;
  }


  public Player injuryNotes(String injuryNotes) {
    this.injuryNotes = injuryNotes;
    return this;
  }

  /**
   * Get injuryNotes
   * @return injuryNotes
   */
  @javax.annotation.Nullable
  public String getInjuryNotes() {
    return injuryNotes;
  }

  public void setInjuryNotes(String injuryNotes) {
    this.injuryNotes = injuryNotes;
  }


  public Player injuryStartDate(String injuryStartDate) {
    this.injuryStartDate = injuryStartDate;
    return this;
  }

  /**
   * Get injuryStartDate
   * @return injuryStartDate
   */
  @javax.annotation.Nullable
  public String getInjuryStartDate() {
    return injuryStartDate;
  }

  public void setInjuryStartDate(String injuryStartDate) {
    this.injuryStartDate = injuryStartDate;
  }


  public Player injuryStatus(String injuryStatus) {
    this.injuryStatus = injuryStatus;
    return this;
  }

  /**
   * Get injuryStatus
   * @return injuryStatus
   */
  @javax.annotation.Nullable
  public String getInjuryStatus() {
    return injuryStatus;
  }

  public void setInjuryStatus(String injuryStatus) {
    this.injuryStatus = injuryStatus;
  }


  public Player jersey(Integer jersey) {
    this.jersey = jersey;
    return this;
  }

  /**
   * Get jersey
   * @return jersey
   */
  @javax.annotation.Nullable
  public Integer getJersey() {
    return jersey;
  }

  public void setJersey(Integer jersey) {
    this.jersey = jersey;
  }


  public Player lastName(String lastName) {
    this.lastName = lastName;
    return this;
  }

  /**
   * Get lastName
   * @return lastName
   */
  @javax.annotation.Nullable
  public String getLastName() {
    return lastName;
  }

  public void setLastName(String lastName) {
    this.lastName = lastName;
  }


  public Player MLBAMID(Integer MLBAMID) {
    this.MLBAMID = MLBAMID;
    return this;
  }

  /**
   * Get MLBAMID
   * @return MLBAMID
   */
  @javax.annotation.Nullable
  public Integer getMLBAMID() {
    return MLBAMID;
  }

  public void setMLBAMID(Integer MLBAMID) {
    this.MLBAMID = MLBAMID;
  }


  public Player photoUrl(String photoUrl) {
    this.photoUrl = photoUrl;
    return this;
  }

  /**
   * Get photoUrl
   * @return photoUrl
   */
  @javax.annotation.Nullable
  public String getPhotoUrl() {
    return photoUrl;
  }

  public void setPhotoUrl(String photoUrl) {
    this.photoUrl = photoUrl;
  }


  public Player playerID(Integer playerID) {
    this.playerID = playerID;
    return this;
  }

  /**
   * Get playerID
   * @return playerID
   */
  @javax.annotation.Nullable
  public Integer getPlayerID() {
    return playerID;
  }

  public void setPlayerID(Integer playerID) {
    this.playerID = playerID;
  }


  public Player position(String position) {
    this.position = position;
    return this;
  }

  /**
   * Get position
   * @return position
   */
  @javax.annotation.Nullable
  public String getPosition() {
    return position;
  }

  public void setPosition(String position) {
    this.position = position;
  }


  public Player positionCategory(String positionCategory) {
    this.positionCategory = positionCategory;
    return this;
  }

  /**
   * Get positionCategory
   * @return positionCategory
   */
  @javax.annotation.Nullable
  public String getPositionCategory() {
    return positionCategory;
  }

  public void setPositionCategory(String positionCategory) {
    this.positionCategory = positionCategory;
  }


  public Player proDebut(String proDebut) {
    this.proDebut = proDebut;
    return this;
  }

  /**
   * Get proDebut
   * @return proDebut
   */
  @javax.annotation.Nullable
  public String getProDebut() {
    return proDebut;
  }

  public void setProDebut(String proDebut) {
    this.proDebut = proDebut;
  }


  public Player rotoWirePlayerID(Integer rotoWirePlayerID) {
    this.rotoWirePlayerID = rotoWirePlayerID;
    return this;
  }

  /**
   * Get rotoWirePlayerID
   * @return rotoWirePlayerID
   */
  @javax.annotation.Nullable
  public Integer getRotoWirePlayerID() {
    return rotoWirePlayerID;
  }

  public void setRotoWirePlayerID(Integer rotoWirePlayerID) {
    this.rotoWirePlayerID = rotoWirePlayerID;
  }


  public Player rotoworldPlayerID(Integer rotoworldPlayerID) {
    this.rotoworldPlayerID = rotoworldPlayerID;
    return this;
  }

  /**
   * Get rotoworldPlayerID
   * @return rotoworldPlayerID
   */
  @javax.annotation.Nullable
  public Integer getRotoworldPlayerID() {
    return rotoworldPlayerID;
  }

  public void setRotoworldPlayerID(Integer rotoworldPlayerID) {
    this.rotoworldPlayerID = rotoworldPlayerID;
  }


  public Player salary(Integer salary) {
    this.salary = salary;
    return this;
  }

  /**
   * Get salary
   * @return salary
   */
  @javax.annotation.Nullable
  public Integer getSalary() {
    return salary;
  }

  public void setSalary(Integer salary) {
    this.salary = salary;
  }


  public Player sportRadarPlayerID(String sportRadarPlayerID) {
    this.sportRadarPlayerID = sportRadarPlayerID;
    return this;
  }

  /**
   * Get sportRadarPlayerID
   * @return sportRadarPlayerID
   */
  @javax.annotation.Nullable
  public String getSportRadarPlayerID() {
    return sportRadarPlayerID;
  }

  public void setSportRadarPlayerID(String sportRadarPlayerID) {
    this.sportRadarPlayerID = sportRadarPlayerID;
  }


  public Player sportsDataID(String sportsDataID) {
    this.sportsDataID = sportsDataID;
    return this;
  }

  /**
   * Get sportsDataID
   * @return sportsDataID
   */
  @javax.annotation.Nullable
  public String getSportsDataID() {
    return sportsDataID;
  }

  public void setSportsDataID(String sportsDataID) {
    this.sportsDataID = sportsDataID;
  }


  public Player sportsDirectPlayerID(Integer sportsDirectPlayerID) {
    this.sportsDirectPlayerID = sportsDirectPlayerID;
    return this;
  }

  /**
   * Get sportsDirectPlayerID
   * @return sportsDirectPlayerID
   */
  @javax.annotation.Nullable
  public Integer getSportsDirectPlayerID() {
    return sportsDirectPlayerID;
  }

  public void setSportsDirectPlayerID(Integer sportsDirectPlayerID) {
    this.sportsDirectPlayerID = sportsDirectPlayerID;
  }


  public Player statsPlayerID(Integer statsPlayerID) {
    this.statsPlayerID = statsPlayerID;
    return this;
  }

  /**
   * Get statsPlayerID
   * @return statsPlayerID
   */
  @javax.annotation.Nullable
  public Integer getStatsPlayerID() {
    return statsPlayerID;
  }

  public void setStatsPlayerID(Integer statsPlayerID) {
    this.statsPlayerID = statsPlayerID;
  }


  public Player status(String status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }


  public Player team(String team) {
    this.team = team;
    return this;
  }

  /**
   * Get team
   * @return team
   */
  @javax.annotation.Nullable
  public String getTeam() {
    return team;
  }

  public void setTeam(String team) {
    this.team = team;
  }


  public Player teamID(Integer teamID) {
    this.teamID = teamID;
    return this;
  }

  /**
   * Get teamID
   * @return teamID
   */
  @javax.annotation.Nullable
  public Integer getTeamID() {
    return teamID;
  }

  public void setTeamID(Integer teamID) {
    this.teamID = teamID;
  }


  public Player throwHand(String throwHand) {
    this.throwHand = throwHand;
    return this;
  }

  /**
   * Get throwHand
   * @return throwHand
   */
  @javax.annotation.Nullable
  public String getThrowHand() {
    return throwHand;
  }

  public void setThrowHand(String throwHand) {
    this.throwHand = throwHand;
  }


  public Player upcomingGameID(Integer upcomingGameID) {
    this.upcomingGameID = upcomingGameID;
    return this;
  }

  /**
   * Get upcomingGameID
   * @return upcomingGameID
   */
  @javax.annotation.Nullable
  public Integer getUpcomingGameID() {
    return upcomingGameID;
  }

  public void setUpcomingGameID(Integer upcomingGameID) {
    this.upcomingGameID = upcomingGameID;
  }


  public Player usaTodayHeadshotNoBackgroundUpdated(String usaTodayHeadshotNoBackgroundUpdated) {
    this.usaTodayHeadshotNoBackgroundUpdated = usaTodayHeadshotNoBackgroundUpdated;
    return this;
  }

  /**
   * Get usaTodayHeadshotNoBackgroundUpdated
   * @return usaTodayHeadshotNoBackgroundUpdated
   */
  @javax.annotation.Nullable
  public String getUsaTodayHeadshotNoBackgroundUpdated() {
    return usaTodayHeadshotNoBackgroundUpdated;
  }

  public void setUsaTodayHeadshotNoBackgroundUpdated(String usaTodayHeadshotNoBackgroundUpdated) {
    this.usaTodayHeadshotNoBackgroundUpdated = usaTodayHeadshotNoBackgroundUpdated;
  }


  public Player usaTodayHeadshotNoBackgroundUrl(String usaTodayHeadshotNoBackgroundUrl) {
    this.usaTodayHeadshotNoBackgroundUrl = usaTodayHeadshotNoBackgroundUrl;
    return this;
  }

  /**
   * Get usaTodayHeadshotNoBackgroundUrl
   * @return usaTodayHeadshotNoBackgroundUrl
   */
  @javax.annotation.Nullable
  public String getUsaTodayHeadshotNoBackgroundUrl() {
    return usaTodayHeadshotNoBackgroundUrl;
  }

  public void setUsaTodayHeadshotNoBackgroundUrl(String usaTodayHeadshotNoBackgroundUrl) {
    this.usaTodayHeadshotNoBackgroundUrl = usaTodayHeadshotNoBackgroundUrl;
  }


  public Player usaTodayHeadshotUpdated(String usaTodayHeadshotUpdated) {
    this.usaTodayHeadshotUpdated = usaTodayHeadshotUpdated;
    return this;
  }

  /**
   * Get usaTodayHeadshotUpdated
   * @return usaTodayHeadshotUpdated
   */
  @javax.annotation.Nullable
  public String getUsaTodayHeadshotUpdated() {
    return usaTodayHeadshotUpdated;
  }

  public void setUsaTodayHeadshotUpdated(String usaTodayHeadshotUpdated) {
    this.usaTodayHeadshotUpdated = usaTodayHeadshotUpdated;
  }


  public Player usaTodayHeadshotUrl(String usaTodayHeadshotUrl) {
    this.usaTodayHeadshotUrl = usaTodayHeadshotUrl;
    return this;
  }

  /**
   * Get usaTodayHeadshotUrl
   * @return usaTodayHeadshotUrl
   */
  @javax.annotation.Nullable
  public String getUsaTodayHeadshotUrl() {
    return usaTodayHeadshotUrl;
  }

  public void setUsaTodayHeadshotUrl(String usaTodayHeadshotUrl) {
    this.usaTodayHeadshotUrl = usaTodayHeadshotUrl;
  }


  public Player usaTodayPlayerID(Integer usaTodayPlayerID) {
    this.usaTodayPlayerID = usaTodayPlayerID;
    return this;
  }

  /**
   * Get usaTodayPlayerID
   * @return usaTodayPlayerID
   */
  @javax.annotation.Nullable
  public Integer getUsaTodayPlayerID() {
    return usaTodayPlayerID;
  }

  public void setUsaTodayPlayerID(Integer usaTodayPlayerID) {
    this.usaTodayPlayerID = usaTodayPlayerID;
  }


  public Player weight(Integer weight) {
    this.weight = weight;
    return this;
  }

  /**
   * Get weight
   * @return weight
   */
  @javax.annotation.Nullable
  public Integer getWeight() {
    return weight;
  }

  public void setWeight(Integer weight) {
    this.weight = weight;
  }


  public Player xmlTeamPlayerID(Integer xmlTeamPlayerID) {
    this.xmlTeamPlayerID = xmlTeamPlayerID;
    return this;
  }

  /**
   * Get xmlTeamPlayerID
   * @return xmlTeamPlayerID
   */
  @javax.annotation.Nullable
  public Integer getXmlTeamPlayerID() {
    return xmlTeamPlayerID;
  }

  public void setXmlTeamPlayerID(Integer xmlTeamPlayerID) {
    this.xmlTeamPlayerID = xmlTeamPlayerID;
  }


  public Player yahooName(String yahooName) {
    this.yahooName = yahooName;
    return this;
  }

  /**
   * Get yahooName
   * @return yahooName
   */
  @javax.annotation.Nullable
  public String getYahooName() {
    return yahooName;
  }

  public void setYahooName(String yahooName) {
    this.yahooName = yahooName;
  }


  public Player yahooPlayerID(Integer yahooPlayerID) {
    this.yahooPlayerID = yahooPlayerID;
    return this;
  }

  /**
   * Get yahooPlayerID
   * @return yahooPlayerID
   */
  @javax.annotation.Nullable
  public Integer getYahooPlayerID() {
    return yahooPlayerID;
  }

  public void setYahooPlayerID(Integer yahooPlayerID) {
    this.yahooPlayerID = yahooPlayerID;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Player player = (Player) o;
    return Objects.equals(this.batHand, player.batHand) &&
        Objects.equals(this.birthCity, player.birthCity) &&
        Objects.equals(this.birthCountry, player.birthCountry) &&
        Objects.equals(this.birthDate, player.birthDate) &&
        Objects.equals(this.birthState, player.birthState) &&
        Objects.equals(this.college, player.college) &&
        Objects.equals(this.draftKingsName, player.draftKingsName) &&
        Objects.equals(this.draftKingsPlayerID, player.draftKingsPlayerID) &&
        Objects.equals(this.experience, player.experience) &&
        Objects.equals(this.fanDuelName, player.fanDuelName) &&
        Objects.equals(this.fanDuelPlayerID, player.fanDuelPlayerID) &&
        Objects.equals(this.fantasyAlarmPlayerID, player.fantasyAlarmPlayerID) &&
        Objects.equals(this.fantasyDraftName, player.fantasyDraftName) &&
        Objects.equals(this.fantasyDraftPlayerID, player.fantasyDraftPlayerID) &&
        Objects.equals(this.firstName, player.firstName) &&
        Objects.equals(this.globalTeamID, player.globalTeamID) &&
        Objects.equals(this.height, player.height) &&
        Objects.equals(this.highSchool, player.highSchool) &&
        Objects.equals(this.injuryBodyPart, player.injuryBodyPart) &&
        Objects.equals(this.injuryNotes, player.injuryNotes) &&
        Objects.equals(this.injuryStartDate, player.injuryStartDate) &&
        Objects.equals(this.injuryStatus, player.injuryStatus) &&
        Objects.equals(this.jersey, player.jersey) &&
        Objects.equals(this.lastName, player.lastName) &&
        Objects.equals(this.MLBAMID, player.MLBAMID) &&
        Objects.equals(this.photoUrl, player.photoUrl) &&
        Objects.equals(this.playerID, player.playerID) &&
        Objects.equals(this.position, player.position) &&
        Objects.equals(this.positionCategory, player.positionCategory) &&
        Objects.equals(this.proDebut, player.proDebut) &&
        Objects.equals(this.rotoWirePlayerID, player.rotoWirePlayerID) &&
        Objects.equals(this.rotoworldPlayerID, player.rotoworldPlayerID) &&
        Objects.equals(this.salary, player.salary) &&
        Objects.equals(this.sportRadarPlayerID, player.sportRadarPlayerID) &&
        Objects.equals(this.sportsDataID, player.sportsDataID) &&
        Objects.equals(this.sportsDirectPlayerID, player.sportsDirectPlayerID) &&
        Objects.equals(this.statsPlayerID, player.statsPlayerID) &&
        Objects.equals(this.status, player.status) &&
        Objects.equals(this.team, player.team) &&
        Objects.equals(this.teamID, player.teamID) &&
        Objects.equals(this.throwHand, player.throwHand) &&
        Objects.equals(this.upcomingGameID, player.upcomingGameID) &&
        Objects.equals(this.usaTodayHeadshotNoBackgroundUpdated, player.usaTodayHeadshotNoBackgroundUpdated) &&
        Objects.equals(this.usaTodayHeadshotNoBackgroundUrl, player.usaTodayHeadshotNoBackgroundUrl) &&
        Objects.equals(this.usaTodayHeadshotUpdated, player.usaTodayHeadshotUpdated) &&
        Objects.equals(this.usaTodayHeadshotUrl, player.usaTodayHeadshotUrl) &&
        Objects.equals(this.usaTodayPlayerID, player.usaTodayPlayerID) &&
        Objects.equals(this.weight, player.weight) &&
        Objects.equals(this.xmlTeamPlayerID, player.xmlTeamPlayerID) &&
        Objects.equals(this.yahooName, player.yahooName) &&
        Objects.equals(this.yahooPlayerID, player.yahooPlayerID);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(batHand, birthCity, birthCountry, birthDate, birthState, college, draftKingsName, draftKingsPlayerID, experience, fanDuelName, fanDuelPlayerID, fantasyAlarmPlayerID, fantasyDraftName, fantasyDraftPlayerID, firstName, globalTeamID, height, highSchool, injuryBodyPart, injuryNotes, injuryStartDate, injuryStatus, jersey, lastName, MLBAMID, photoUrl, playerID, position, positionCategory, proDebut, rotoWirePlayerID, rotoworldPlayerID, salary, sportRadarPlayerID, sportsDataID, sportsDirectPlayerID, statsPlayerID, status, team, teamID, throwHand, upcomingGameID, usaTodayHeadshotNoBackgroundUpdated, usaTodayHeadshotNoBackgroundUrl, usaTodayHeadshotUpdated, usaTodayHeadshotUrl, usaTodayPlayerID, weight, xmlTeamPlayerID, yahooName, yahooPlayerID);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Player {\n");
    sb.append("    batHand: ").append(toIndentedString(batHand)).append("\n");
    sb.append("    birthCity: ").append(toIndentedString(birthCity)).append("\n");
    sb.append("    birthCountry: ").append(toIndentedString(birthCountry)).append("\n");
    sb.append("    birthDate: ").append(toIndentedString(birthDate)).append("\n");
    sb.append("    birthState: ").append(toIndentedString(birthState)).append("\n");
    sb.append("    college: ").append(toIndentedString(college)).append("\n");
    sb.append("    draftKingsName: ").append(toIndentedString(draftKingsName)).append("\n");
    sb.append("    draftKingsPlayerID: ").append(toIndentedString(draftKingsPlayerID)).append("\n");
    sb.append("    experience: ").append(toIndentedString(experience)).append("\n");
    sb.append("    fanDuelName: ").append(toIndentedString(fanDuelName)).append("\n");
    sb.append("    fanDuelPlayerID: ").append(toIndentedString(fanDuelPlayerID)).append("\n");
    sb.append("    fantasyAlarmPlayerID: ").append(toIndentedString(fantasyAlarmPlayerID)).append("\n");
    sb.append("    fantasyDraftName: ").append(toIndentedString(fantasyDraftName)).append("\n");
    sb.append("    fantasyDraftPlayerID: ").append(toIndentedString(fantasyDraftPlayerID)).append("\n");
    sb.append("    firstName: ").append(toIndentedString(firstName)).append("\n");
    sb.append("    globalTeamID: ").append(toIndentedString(globalTeamID)).append("\n");
    sb.append("    height: ").append(toIndentedString(height)).append("\n");
    sb.append("    highSchool: ").append(toIndentedString(highSchool)).append("\n");
    sb.append("    injuryBodyPart: ").append(toIndentedString(injuryBodyPart)).append("\n");
    sb.append("    injuryNotes: ").append(toIndentedString(injuryNotes)).append("\n");
    sb.append("    injuryStartDate: ").append(toIndentedString(injuryStartDate)).append("\n");
    sb.append("    injuryStatus: ").append(toIndentedString(injuryStatus)).append("\n");
    sb.append("    jersey: ").append(toIndentedString(jersey)).append("\n");
    sb.append("    lastName: ").append(toIndentedString(lastName)).append("\n");
    sb.append("    MLBAMID: ").append(toIndentedString(MLBAMID)).append("\n");
    sb.append("    photoUrl: ").append(toIndentedString(photoUrl)).append("\n");
    sb.append("    playerID: ").append(toIndentedString(playerID)).append("\n");
    sb.append("    position: ").append(toIndentedString(position)).append("\n");
    sb.append("    positionCategory: ").append(toIndentedString(positionCategory)).append("\n");
    sb.append("    proDebut: ").append(toIndentedString(proDebut)).append("\n");
    sb.append("    rotoWirePlayerID: ").append(toIndentedString(rotoWirePlayerID)).append("\n");
    sb.append("    rotoworldPlayerID: ").append(toIndentedString(rotoworldPlayerID)).append("\n");
    sb.append("    salary: ").append(toIndentedString(salary)).append("\n");
    sb.append("    sportRadarPlayerID: ").append(toIndentedString(sportRadarPlayerID)).append("\n");
    sb.append("    sportsDataID: ").append(toIndentedString(sportsDataID)).append("\n");
    sb.append("    sportsDirectPlayerID: ").append(toIndentedString(sportsDirectPlayerID)).append("\n");
    sb.append("    statsPlayerID: ").append(toIndentedString(statsPlayerID)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    team: ").append(toIndentedString(team)).append("\n");
    sb.append("    teamID: ").append(toIndentedString(teamID)).append("\n");
    sb.append("    throwHand: ").append(toIndentedString(throwHand)).append("\n");
    sb.append("    upcomingGameID: ").append(toIndentedString(upcomingGameID)).append("\n");
    sb.append("    usaTodayHeadshotNoBackgroundUpdated: ").append(toIndentedString(usaTodayHeadshotNoBackgroundUpdated)).append("\n");
    sb.append("    usaTodayHeadshotNoBackgroundUrl: ").append(toIndentedString(usaTodayHeadshotNoBackgroundUrl)).append("\n");
    sb.append("    usaTodayHeadshotUpdated: ").append(toIndentedString(usaTodayHeadshotUpdated)).append("\n");
    sb.append("    usaTodayHeadshotUrl: ").append(toIndentedString(usaTodayHeadshotUrl)).append("\n");
    sb.append("    usaTodayPlayerID: ").append(toIndentedString(usaTodayPlayerID)).append("\n");
    sb.append("    weight: ").append(toIndentedString(weight)).append("\n");
    sb.append("    xmlTeamPlayerID: ").append(toIndentedString(xmlTeamPlayerID)).append("\n");
    sb.append("    yahooName: ").append(toIndentedString(yahooName)).append("\n");
    sb.append("    yahooPlayerID: ").append(toIndentedString(yahooPlayerID)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("BatHand");
    openapiFields.add("BirthCity");
    openapiFields.add("BirthCountry");
    openapiFields.add("BirthDate");
    openapiFields.add("BirthState");
    openapiFields.add("College");
    openapiFields.add("DraftKingsName");
    openapiFields.add("DraftKingsPlayerID");
    openapiFields.add("Experience");
    openapiFields.add("FanDuelName");
    openapiFields.add("FanDuelPlayerID");
    openapiFields.add("FantasyAlarmPlayerID");
    openapiFields.add("FantasyDraftName");
    openapiFields.add("FantasyDraftPlayerID");
    openapiFields.add("FirstName");
    openapiFields.add("GlobalTeamID");
    openapiFields.add("Height");
    openapiFields.add("HighSchool");
    openapiFields.add("InjuryBodyPart");
    openapiFields.add("InjuryNotes");
    openapiFields.add("InjuryStartDate");
    openapiFields.add("InjuryStatus");
    openapiFields.add("Jersey");
    openapiFields.add("LastName");
    openapiFields.add("MLBAMID");
    openapiFields.add("PhotoUrl");
    openapiFields.add("PlayerID");
    openapiFields.add("Position");
    openapiFields.add("PositionCategory");
    openapiFields.add("ProDebut");
    openapiFields.add("RotoWirePlayerID");
    openapiFields.add("RotoworldPlayerID");
    openapiFields.add("Salary");
    openapiFields.add("SportRadarPlayerID");
    openapiFields.add("SportsDataID");
    openapiFields.add("SportsDirectPlayerID");
    openapiFields.add("StatsPlayerID");
    openapiFields.add("Status");
    openapiFields.add("Team");
    openapiFields.add("TeamID");
    openapiFields.add("ThrowHand");
    openapiFields.add("UpcomingGameID");
    openapiFields.add("UsaTodayHeadshotNoBackgroundUpdated");
    openapiFields.add("UsaTodayHeadshotNoBackgroundUrl");
    openapiFields.add("UsaTodayHeadshotUpdated");
    openapiFields.add("UsaTodayHeadshotUrl");
    openapiFields.add("UsaTodayPlayerID");
    openapiFields.add("Weight");
    openapiFields.add("XmlTeamPlayerID");
    openapiFields.add("YahooName");
    openapiFields.add("YahooPlayerID");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Player
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Player.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Player is not found in the empty JSON string", Player.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Player.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Player` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("BatHand") != null && !jsonObj.get("BatHand").isJsonNull()) && !jsonObj.get("BatHand").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `BatHand` to be a primitive type in the JSON string but got `%s`", jsonObj.get("BatHand").toString()));
      }
      if ((jsonObj.get("BirthCity") != null && !jsonObj.get("BirthCity").isJsonNull()) && !jsonObj.get("BirthCity").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `BirthCity` to be a primitive type in the JSON string but got `%s`", jsonObj.get("BirthCity").toString()));
      }
      if ((jsonObj.get("BirthCountry") != null && !jsonObj.get("BirthCountry").isJsonNull()) && !jsonObj.get("BirthCountry").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `BirthCountry` to be a primitive type in the JSON string but got `%s`", jsonObj.get("BirthCountry").toString()));
      }
      if ((jsonObj.get("BirthDate") != null && !jsonObj.get("BirthDate").isJsonNull()) && !jsonObj.get("BirthDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `BirthDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("BirthDate").toString()));
      }
      if ((jsonObj.get("BirthState") != null && !jsonObj.get("BirthState").isJsonNull()) && !jsonObj.get("BirthState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `BirthState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("BirthState").toString()));
      }
      if ((jsonObj.get("College") != null && !jsonObj.get("College").isJsonNull()) && !jsonObj.get("College").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `College` to be a primitive type in the JSON string but got `%s`", jsonObj.get("College").toString()));
      }
      if ((jsonObj.get("DraftKingsName") != null && !jsonObj.get("DraftKingsName").isJsonNull()) && !jsonObj.get("DraftKingsName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DraftKingsName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DraftKingsName").toString()));
      }
      if ((jsonObj.get("Experience") != null && !jsonObj.get("Experience").isJsonNull()) && !jsonObj.get("Experience").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Experience` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Experience").toString()));
      }
      if ((jsonObj.get("FanDuelName") != null && !jsonObj.get("FanDuelName").isJsonNull()) && !jsonObj.get("FanDuelName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FanDuelName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FanDuelName").toString()));
      }
      if ((jsonObj.get("FantasyDraftName") != null && !jsonObj.get("FantasyDraftName").isJsonNull()) && !jsonObj.get("FantasyDraftName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FantasyDraftName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FantasyDraftName").toString()));
      }
      if ((jsonObj.get("FirstName") != null && !jsonObj.get("FirstName").isJsonNull()) && !jsonObj.get("FirstName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FirstName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FirstName").toString()));
      }
      if ((jsonObj.get("HighSchool") != null && !jsonObj.get("HighSchool").isJsonNull()) && !jsonObj.get("HighSchool").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `HighSchool` to be a primitive type in the JSON string but got `%s`", jsonObj.get("HighSchool").toString()));
      }
      if ((jsonObj.get("InjuryBodyPart") != null && !jsonObj.get("InjuryBodyPart").isJsonNull()) && !jsonObj.get("InjuryBodyPart").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `InjuryBodyPart` to be a primitive type in the JSON string but got `%s`", jsonObj.get("InjuryBodyPart").toString()));
      }
      if ((jsonObj.get("InjuryNotes") != null && !jsonObj.get("InjuryNotes").isJsonNull()) && !jsonObj.get("InjuryNotes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `InjuryNotes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("InjuryNotes").toString()));
      }
      if ((jsonObj.get("InjuryStartDate") != null && !jsonObj.get("InjuryStartDate").isJsonNull()) && !jsonObj.get("InjuryStartDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `InjuryStartDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("InjuryStartDate").toString()));
      }
      if ((jsonObj.get("InjuryStatus") != null && !jsonObj.get("InjuryStatus").isJsonNull()) && !jsonObj.get("InjuryStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `InjuryStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("InjuryStatus").toString()));
      }
      if ((jsonObj.get("LastName") != null && !jsonObj.get("LastName").isJsonNull()) && !jsonObj.get("LastName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `LastName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("LastName").toString()));
      }
      if ((jsonObj.get("PhotoUrl") != null && !jsonObj.get("PhotoUrl").isJsonNull()) && !jsonObj.get("PhotoUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PhotoUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PhotoUrl").toString()));
      }
      if ((jsonObj.get("Position") != null && !jsonObj.get("Position").isJsonNull()) && !jsonObj.get("Position").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Position` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Position").toString()));
      }
      if ((jsonObj.get("PositionCategory") != null && !jsonObj.get("PositionCategory").isJsonNull()) && !jsonObj.get("PositionCategory").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PositionCategory` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PositionCategory").toString()));
      }
      if ((jsonObj.get("ProDebut") != null && !jsonObj.get("ProDebut").isJsonNull()) && !jsonObj.get("ProDebut").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ProDebut` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ProDebut").toString()));
      }
      if ((jsonObj.get("SportRadarPlayerID") != null && !jsonObj.get("SportRadarPlayerID").isJsonNull()) && !jsonObj.get("SportRadarPlayerID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SportRadarPlayerID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SportRadarPlayerID").toString()));
      }
      if ((jsonObj.get("SportsDataID") != null && !jsonObj.get("SportsDataID").isJsonNull()) && !jsonObj.get("SportsDataID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SportsDataID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SportsDataID").toString()));
      }
      if ((jsonObj.get("Status") != null && !jsonObj.get("Status").isJsonNull()) && !jsonObj.get("Status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Status").toString()));
      }
      if ((jsonObj.get("Team") != null && !jsonObj.get("Team").isJsonNull()) && !jsonObj.get("Team").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Team` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Team").toString()));
      }
      if ((jsonObj.get("ThrowHand") != null && !jsonObj.get("ThrowHand").isJsonNull()) && !jsonObj.get("ThrowHand").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ThrowHand` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ThrowHand").toString()));
      }
      if ((jsonObj.get("UsaTodayHeadshotNoBackgroundUpdated") != null && !jsonObj.get("UsaTodayHeadshotNoBackgroundUpdated").isJsonNull()) && !jsonObj.get("UsaTodayHeadshotNoBackgroundUpdated").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `UsaTodayHeadshotNoBackgroundUpdated` to be a primitive type in the JSON string but got `%s`", jsonObj.get("UsaTodayHeadshotNoBackgroundUpdated").toString()));
      }
      if ((jsonObj.get("UsaTodayHeadshotNoBackgroundUrl") != null && !jsonObj.get("UsaTodayHeadshotNoBackgroundUrl").isJsonNull()) && !jsonObj.get("UsaTodayHeadshotNoBackgroundUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `UsaTodayHeadshotNoBackgroundUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("UsaTodayHeadshotNoBackgroundUrl").toString()));
      }
      if ((jsonObj.get("UsaTodayHeadshotUpdated") != null && !jsonObj.get("UsaTodayHeadshotUpdated").isJsonNull()) && !jsonObj.get("UsaTodayHeadshotUpdated").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `UsaTodayHeadshotUpdated` to be a primitive type in the JSON string but got `%s`", jsonObj.get("UsaTodayHeadshotUpdated").toString()));
      }
      if ((jsonObj.get("UsaTodayHeadshotUrl") != null && !jsonObj.get("UsaTodayHeadshotUrl").isJsonNull()) && !jsonObj.get("UsaTodayHeadshotUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `UsaTodayHeadshotUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("UsaTodayHeadshotUrl").toString()));
      }
      if ((jsonObj.get("YahooName") != null && !jsonObj.get("YahooName").isJsonNull()) && !jsonObj.get("YahooName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `YahooName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("YahooName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Player.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Player' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Player> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Player.class));

       return (TypeAdapter<T>) new TypeAdapter<Player>() {
           @Override
           public void write(JsonWriter out, Player value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Player read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Player given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Player
   * @throws IOException if the JSON string is invalid with respect to Player
   */
  public static Player fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Player.class);
  }

  /**
   * Convert an instance of Player to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

