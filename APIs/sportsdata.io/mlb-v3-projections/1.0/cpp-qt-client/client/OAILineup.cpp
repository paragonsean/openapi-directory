/**
 * MLB v3 Projections
 * MLB projections API.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILineup.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILineup::OAILineup(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILineup::OAILineup() {
    this->initializeModel();
}

OAILineup::~OAILineup() {}

void OAILineup::initializeModel() {

    m_batting_order_isSet = false;
    m_batting_order_isValid = false;

    m_confirmed_isSet = false;
    m_confirmed_isValid = false;

    m_first_name_isSet = false;
    m_first_name_isValid = false;

    m_last_name_isSet = false;
    m_last_name_isValid = false;

    m_player_id_isSet = false;
    m_player_id_isValid = false;

    m_position_isSet = false;
    m_position_isValid = false;

    m_starting_isSet = false;
    m_starting_isValid = false;

    m_team_isSet = false;
    m_team_isValid = false;

    m_team_id_isSet = false;
    m_team_id_isValid = false;
}

void OAILineup::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILineup::fromJsonObject(QJsonObject json) {

    m_batting_order_isValid = ::OpenAPI::fromJsonValue(m_batting_order, json[QString("BattingOrder")]);
    m_batting_order_isSet = !json[QString("BattingOrder")].isNull() && m_batting_order_isValid;

    m_confirmed_isValid = ::OpenAPI::fromJsonValue(m_confirmed, json[QString("Confirmed")]);
    m_confirmed_isSet = !json[QString("Confirmed")].isNull() && m_confirmed_isValid;

    m_first_name_isValid = ::OpenAPI::fromJsonValue(m_first_name, json[QString("FirstName")]);
    m_first_name_isSet = !json[QString("FirstName")].isNull() && m_first_name_isValid;

    m_last_name_isValid = ::OpenAPI::fromJsonValue(m_last_name, json[QString("LastName")]);
    m_last_name_isSet = !json[QString("LastName")].isNull() && m_last_name_isValid;

    m_player_id_isValid = ::OpenAPI::fromJsonValue(m_player_id, json[QString("PlayerID")]);
    m_player_id_isSet = !json[QString("PlayerID")].isNull() && m_player_id_isValid;

    m_position_isValid = ::OpenAPI::fromJsonValue(m_position, json[QString("Position")]);
    m_position_isSet = !json[QString("Position")].isNull() && m_position_isValid;

    m_starting_isValid = ::OpenAPI::fromJsonValue(m_starting, json[QString("Starting")]);
    m_starting_isSet = !json[QString("Starting")].isNull() && m_starting_isValid;

    m_team_isValid = ::OpenAPI::fromJsonValue(m_team, json[QString("Team")]);
    m_team_isSet = !json[QString("Team")].isNull() && m_team_isValid;

    m_team_id_isValid = ::OpenAPI::fromJsonValue(m_team_id, json[QString("TeamID")]);
    m_team_id_isSet = !json[QString("TeamID")].isNull() && m_team_id_isValid;
}

QString OAILineup::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILineup::asJsonObject() const {
    QJsonObject obj;
    if (m_batting_order_isSet) {
        obj.insert(QString("BattingOrder"), ::OpenAPI::toJsonValue(m_batting_order));
    }
    if (m_confirmed_isSet) {
        obj.insert(QString("Confirmed"), ::OpenAPI::toJsonValue(m_confirmed));
    }
    if (m_first_name_isSet) {
        obj.insert(QString("FirstName"), ::OpenAPI::toJsonValue(m_first_name));
    }
    if (m_last_name_isSet) {
        obj.insert(QString("LastName"), ::OpenAPI::toJsonValue(m_last_name));
    }
    if (m_player_id_isSet) {
        obj.insert(QString("PlayerID"), ::OpenAPI::toJsonValue(m_player_id));
    }
    if (m_position_isSet) {
        obj.insert(QString("Position"), ::OpenAPI::toJsonValue(m_position));
    }
    if (m_starting_isSet) {
        obj.insert(QString("Starting"), ::OpenAPI::toJsonValue(m_starting));
    }
    if (m_team_isSet) {
        obj.insert(QString("Team"), ::OpenAPI::toJsonValue(m_team));
    }
    if (m_team_id_isSet) {
        obj.insert(QString("TeamID"), ::OpenAPI::toJsonValue(m_team_id));
    }
    return obj;
}

qint32 OAILineup::getBattingOrder() const {
    return m_batting_order;
}
void OAILineup::setBattingOrder(const qint32 &batting_order) {
    m_batting_order = batting_order;
    m_batting_order_isSet = true;
}

bool OAILineup::is_batting_order_Set() const{
    return m_batting_order_isSet;
}

bool OAILineup::is_batting_order_Valid() const{
    return m_batting_order_isValid;
}

bool OAILineup::isConfirmed() const {
    return m_confirmed;
}
void OAILineup::setConfirmed(const bool &confirmed) {
    m_confirmed = confirmed;
    m_confirmed_isSet = true;
}

bool OAILineup::is_confirmed_Set() const{
    return m_confirmed_isSet;
}

bool OAILineup::is_confirmed_Valid() const{
    return m_confirmed_isValid;
}

QString OAILineup::getFirstName() const {
    return m_first_name;
}
void OAILineup::setFirstName(const QString &first_name) {
    m_first_name = first_name;
    m_first_name_isSet = true;
}

bool OAILineup::is_first_name_Set() const{
    return m_first_name_isSet;
}

bool OAILineup::is_first_name_Valid() const{
    return m_first_name_isValid;
}

QString OAILineup::getLastName() const {
    return m_last_name;
}
void OAILineup::setLastName(const QString &last_name) {
    m_last_name = last_name;
    m_last_name_isSet = true;
}

bool OAILineup::is_last_name_Set() const{
    return m_last_name_isSet;
}

bool OAILineup::is_last_name_Valid() const{
    return m_last_name_isValid;
}

qint32 OAILineup::getPlayerId() const {
    return m_player_id;
}
void OAILineup::setPlayerId(const qint32 &player_id) {
    m_player_id = player_id;
    m_player_id_isSet = true;
}

bool OAILineup::is_player_id_Set() const{
    return m_player_id_isSet;
}

bool OAILineup::is_player_id_Valid() const{
    return m_player_id_isValid;
}

QString OAILineup::getPosition() const {
    return m_position;
}
void OAILineup::setPosition(const QString &position) {
    m_position = position;
    m_position_isSet = true;
}

bool OAILineup::is_position_Set() const{
    return m_position_isSet;
}

bool OAILineup::is_position_Valid() const{
    return m_position_isValid;
}

bool OAILineup::isStarting() const {
    return m_starting;
}
void OAILineup::setStarting(const bool &starting) {
    m_starting = starting;
    m_starting_isSet = true;
}

bool OAILineup::is_starting_Set() const{
    return m_starting_isSet;
}

bool OAILineup::is_starting_Valid() const{
    return m_starting_isValid;
}

QString OAILineup::getTeam() const {
    return m_team;
}
void OAILineup::setTeam(const QString &team) {
    m_team = team;
    m_team_isSet = true;
}

bool OAILineup::is_team_Set() const{
    return m_team_isSet;
}

bool OAILineup::is_team_Valid() const{
    return m_team_isValid;
}

qint32 OAILineup::getTeamId() const {
    return m_team_id;
}
void OAILineup::setTeamId(const qint32 &team_id) {
    m_team_id = team_id;
    m_team_id_isSet = true;
}

bool OAILineup::is_team_id_Set() const{
    return m_team_id_isSet;
}

bool OAILineup::is_team_id_Valid() const{
    return m_team_id_isValid;
}

bool OAILineup::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_batting_order_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_confirmed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_first_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_player_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_position_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_starting_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_team_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_team_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILineup::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
