# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.route_response_path_instructions_inner import RouteResponsePathInstructionsInner
from openapi_server.models.route_response_path_points import RouteResponsePathPoints
from openapi_server.models.route_response_path_snapped_waypoints import RouteResponsePathSnappedWaypoints
from openapi_server import util


class RouteResponsePath(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ascend: float=None, bbox: List[float]=None, descend: float=None, details: object=None, distance: float=None, instructions: List[RouteResponsePathInstructionsInner]=None, points: RouteResponsePathPoints=None, points_encoded: bool=None, points_order: List[int]=None, snapped_waypoints: RouteResponsePathSnappedWaypoints=None, time: int=None):
        """RouteResponsePath - a model defined in OpenAPI

        :param ascend: The ascend of this RouteResponsePath.
        :param bbox: The bbox of this RouteResponsePath.
        :param descend: The descend of this RouteResponsePath.
        :param details: The details of this RouteResponsePath.
        :param distance: The distance of this RouteResponsePath.
        :param instructions: The instructions of this RouteResponsePath.
        :param points: The points of this RouteResponsePath.
        :param points_encoded: The points_encoded of this RouteResponsePath.
        :param points_order: The points_order of this RouteResponsePath.
        :param snapped_waypoints: The snapped_waypoints of this RouteResponsePath.
        :param time: The time of this RouteResponsePath.
        """
        self.openapi_types = {
            'ascend': float,
            'bbox': List[float],
            'descend': float,
            'details': object,
            'distance': float,
            'instructions': List[RouteResponsePathInstructionsInner],
            'points': RouteResponsePathPoints,
            'points_encoded': bool,
            'points_order': List[int],
            'snapped_waypoints': RouteResponsePathSnappedWaypoints,
            'time': int
        }

        self.attribute_map = {
            'ascend': 'ascend',
            'bbox': 'bbox',
            'descend': 'descend',
            'details': 'details',
            'distance': 'distance',
            'instructions': 'instructions',
            'points': 'points',
            'points_encoded': 'points_encoded',
            'points_order': 'points_order',
            'snapped_waypoints': 'snapped_waypoints',
            'time': 'time'
        }

        self._ascend = ascend
        self._bbox = bbox
        self._descend = descend
        self._details = details
        self._distance = distance
        self._instructions = instructions
        self._points = points
        self._points_encoded = points_encoded
        self._points_order = points_order
        self._snapped_waypoints = snapped_waypoints
        self._time = time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RouteResponsePath':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RouteResponsePath of this RouteResponsePath.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ascend(self):
        """Gets the ascend of this RouteResponsePath.

        The total ascent, in meters. 

        :return: The ascend of this RouteResponsePath.
        :rtype: float
        """
        return self._ascend

    @ascend.setter
    def ascend(self, ascend):
        """Sets the ascend of this RouteResponsePath.

        The total ascent, in meters. 

        :param ascend: The ascend of this RouteResponsePath.
        :type ascend: float
        """

        self._ascend = ascend

    @property
    def bbox(self):
        """Gets the bbox of this RouteResponsePath.

        The bounding box of the route geometry. Format: `[minLon, minLat, maxLon, maxLat]`. 

        :return: The bbox of this RouteResponsePath.
        :rtype: List[float]
        """
        return self._bbox

    @bbox.setter
    def bbox(self, bbox):
        """Sets the bbox of this RouteResponsePath.

        The bounding box of the route geometry. Format: `[minLon, minLat, maxLon, maxLat]`. 

        :param bbox: The bbox of this RouteResponsePath.
        :type bbox: List[float]
        """

        self._bbox = bbox

    @property
    def descend(self):
        """Gets the descend of this RouteResponsePath.

        The total descent, in meters. 

        :return: The descend of this RouteResponsePath.
        :rtype: float
        """
        return self._descend

    @descend.setter
    def descend(self, descend):
        """Sets the descend of this RouteResponsePath.

        The total descent, in meters. 

        :param descend: The descend of this RouteResponsePath.
        :type descend: float
        """

        self._descend = descend

    @property
    def details(self):
        """Gets the details of this RouteResponsePath.

        Details, as requested with the `details` parameter. Consider the value `{\"street_name\": [[0,2,\"Frankfurter Straße\"],[2,6,\"Zollweg\"]]}`. In this example, the route uses two streets: The first, Frankfurter Straße, is used between `points[0]` and `points[2]`, and the second, Zollweg, between `points[2]` and `points[6]`. See [here](https://discuss.graphhopper.com/t/2539) for discussion. 

        :return: The details of this RouteResponsePath.
        :rtype: object
        """
        return self._details

    @details.setter
    def details(self, details):
        """Sets the details of this RouteResponsePath.

        Details, as requested with the `details` parameter. Consider the value `{\"street_name\": [[0,2,\"Frankfurter Straße\"],[2,6,\"Zollweg\"]]}`. In this example, the route uses two streets: The first, Frankfurter Straße, is used between `points[0]` and `points[2]`, and the second, Zollweg, between `points[2]` and `points[6]`. See [here](https://discuss.graphhopper.com/t/2539) for discussion. 

        :param details: The details of this RouteResponsePath.
        :type details: object
        """

        self._details = details

    @property
    def distance(self):
        """Gets the distance of this RouteResponsePath.

        The total distance, in meters. To get this information for one 'leg' please read [this blog post](https://www.graphhopper.com/blog/2019/11/28/routing-api-using-path-details/). 

        :return: The distance of this RouteResponsePath.
        :rtype: float
        """
        return self._distance

    @distance.setter
    def distance(self, distance):
        """Sets the distance of this RouteResponsePath.

        The total distance, in meters. To get this information for one 'leg' please read [this blog post](https://www.graphhopper.com/blog/2019/11/28/routing-api-using-path-details/). 

        :param distance: The distance of this RouteResponsePath.
        :type distance: float
        """

        self._distance = distance

    @property
    def instructions(self):
        """Gets the instructions of this RouteResponsePath.

        The instructions for this route. This feature is under active development, and our instructions can sometimes be misleading, so be mindful when using them for navigation. 

        :return: The instructions of this RouteResponsePath.
        :rtype: List[RouteResponsePathInstructionsInner]
        """
        return self._instructions

    @instructions.setter
    def instructions(self, instructions):
        """Sets the instructions of this RouteResponsePath.

        The instructions for this route. This feature is under active development, and our instructions can sometimes be misleading, so be mindful when using them for navigation. 

        :param instructions: The instructions of this RouteResponsePath.
        :type instructions: List[RouteResponsePathInstructionsInner]
        """

        self._instructions = instructions

    @property
    def points(self):
        """Gets the points of this RouteResponsePath.


        :return: The points of this RouteResponsePath.
        :rtype: RouteResponsePathPoints
        """
        return self._points

    @points.setter
    def points(self, points):
        """Sets the points of this RouteResponsePath.


        :param points: The points of this RouteResponsePath.
        :type points: RouteResponsePathPoints
        """

        self._points = points

    @property
    def points_encoded(self):
        """Gets the points_encoded of this RouteResponsePath.

        Whether the `points` and `snapped_waypoints` fields are polyline-encoded strings rather than JSON arrays of coordinates. See the field description for more information on the two formats. 

        :return: The points_encoded of this RouteResponsePath.
        :rtype: bool
        """
        return self._points_encoded

    @points_encoded.setter
    def points_encoded(self, points_encoded):
        """Sets the points_encoded of this RouteResponsePath.

        Whether the `points` and `snapped_waypoints` fields are polyline-encoded strings rather than JSON arrays of coordinates. See the field description for more information on the two formats. 

        :param points_encoded: The points_encoded of this RouteResponsePath.
        :type points_encoded: bool
        """

        self._points_encoded = points_encoded

    @property
    def points_order(self):
        """Gets the points_order of this RouteResponsePath.

        An array of indices (zero-based), specifiying the order in which the input points are visited. Only present if the `optimize` parameter was used. 

        :return: The points_order of this RouteResponsePath.
        :rtype: List[int]
        """
        return self._points_order

    @points_order.setter
    def points_order(self, points_order):
        """Sets the points_order of this RouteResponsePath.

        An array of indices (zero-based), specifiying the order in which the input points are visited. Only present if the `optimize` parameter was used. 

        :param points_order: The points_order of this RouteResponsePath.
        :type points_order: List[int]
        """

        self._points_order = points_order

    @property
    def snapped_waypoints(self):
        """Gets the snapped_waypoints of this RouteResponsePath.


        :return: The snapped_waypoints of this RouteResponsePath.
        :rtype: RouteResponsePathSnappedWaypoints
        """
        return self._snapped_waypoints

    @snapped_waypoints.setter
    def snapped_waypoints(self, snapped_waypoints):
        """Sets the snapped_waypoints of this RouteResponsePath.


        :param snapped_waypoints: The snapped_waypoints of this RouteResponsePath.
        :type snapped_waypoints: RouteResponsePathSnappedWaypoints
        """

        self._snapped_waypoints = snapped_waypoints

    @property
    def time(self):
        """Gets the time of this RouteResponsePath.

        The total travel time, in milliseconds. To get this information for one 'leg' please read [this blog post](https://www.graphhopper.com/blog/2019/11/28/routing-api-using-path-details/). 

        :return: The time of this RouteResponsePath.
        :rtype: int
        """
        return self._time

    @time.setter
    def time(self, time):
        """Sets the time of this RouteResponsePath.

        The total travel time, in milliseconds. To get this information for one 'leg' please read [this blog post](https://www.graphhopper.com/blog/2019/11/28/routing-api-using-path-details/). 

        :param time: The time of this RouteResponsePath.
        :type time: int
        """

        self._time = time
