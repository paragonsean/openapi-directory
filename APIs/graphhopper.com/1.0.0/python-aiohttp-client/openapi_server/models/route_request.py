# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.vehicle_profile_id import VehicleProfileId
from openapi_server import util


class RouteRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, algorithm: str=None, alternative_route_max_paths: int=2, alternative_route_max_share_factor: float=0.6, alternative_route_max_weight_factor: float=1.4, avoid: str=None, block_area: str=None, calc_points: bool=True, ch_disable: bool=False, curbsides: List[str]=None, debug: bool=False, details: List[str]=None, elevation: bool=False, heading_penalty: int=120, headings: List[int]=None, instructions: bool=True, locale: str='en', optimize: str='false', pass_through: bool=False, point_hints: List[str]=None, points: List[List[float]]=None, points_encoded: bool=True, round_trip_distance: int=10000, round_trip_seed: int=None, snap_preventions: List[str]=None, vehicle: VehicleProfileId=None, weighting: str='fastest'):
        """RouteRequest - a model defined in OpenAPI

        :param algorithm: The algorithm of this RouteRequest.
        :param alternative_route_max_paths: The alternative_route_max_paths of this RouteRequest.
        :param alternative_route_max_share_factor: The alternative_route_max_share_factor of this RouteRequest.
        :param alternative_route_max_weight_factor: The alternative_route_max_weight_factor of this RouteRequest.
        :param avoid: The avoid of this RouteRequest.
        :param block_area: The block_area of this RouteRequest.
        :param calc_points: The calc_points of this RouteRequest.
        :param ch_disable: The ch_disable of this RouteRequest.
        :param curbsides: The curbsides of this RouteRequest.
        :param debug: The debug of this RouteRequest.
        :param details: The details of this RouteRequest.
        :param elevation: The elevation of this RouteRequest.
        :param heading_penalty: The heading_penalty of this RouteRequest.
        :param headings: The headings of this RouteRequest.
        :param instructions: The instructions of this RouteRequest.
        :param locale: The locale of this RouteRequest.
        :param optimize: The optimize of this RouteRequest.
        :param pass_through: The pass_through of this RouteRequest.
        :param point_hints: The point_hints of this RouteRequest.
        :param points: The points of this RouteRequest.
        :param points_encoded: The points_encoded of this RouteRequest.
        :param round_trip_distance: The round_trip_distance of this RouteRequest.
        :param round_trip_seed: The round_trip_seed of this RouteRequest.
        :param snap_preventions: The snap_preventions of this RouteRequest.
        :param vehicle: The vehicle of this RouteRequest.
        :param weighting: The weighting of this RouteRequest.
        """
        self.openapi_types = {
            'algorithm': str,
            'alternative_route_max_paths': int,
            'alternative_route_max_share_factor': float,
            'alternative_route_max_weight_factor': float,
            'avoid': str,
            'block_area': str,
            'calc_points': bool,
            'ch_disable': bool,
            'curbsides': List[str],
            'debug': bool,
            'details': List[str],
            'elevation': bool,
            'heading_penalty': int,
            'headings': List[int],
            'instructions': bool,
            'locale': str,
            'optimize': str,
            'pass_through': bool,
            'point_hints': List[str],
            'points': List[List[float]],
            'points_encoded': bool,
            'round_trip_distance': int,
            'round_trip_seed': int,
            'snap_preventions': List[str],
            'vehicle': VehicleProfileId,
            'weighting': str
        }

        self.attribute_map = {
            'algorithm': 'algorithm',
            'alternative_route_max_paths': 'alternative_route.max_paths',
            'alternative_route_max_share_factor': 'alternative_route.max_share_factor',
            'alternative_route_max_weight_factor': 'alternative_route.max_weight_factor',
            'avoid': 'avoid',
            'block_area': 'block_area',
            'calc_points': 'calc_points',
            'ch_disable': 'ch.disable',
            'curbsides': 'curbsides',
            'debug': 'debug',
            'details': 'details',
            'elevation': 'elevation',
            'heading_penalty': 'heading_penalty',
            'headings': 'headings',
            'instructions': 'instructions',
            'locale': 'locale',
            'optimize': 'optimize',
            'pass_through': 'pass_through',
            'point_hints': 'point_hints',
            'points': 'points',
            'points_encoded': 'points_encoded',
            'round_trip_distance': 'round_trip.distance',
            'round_trip_seed': 'round_trip.seed',
            'snap_preventions': 'snap_preventions',
            'vehicle': 'vehicle',
            'weighting': 'weighting'
        }

        self._algorithm = algorithm
        self._alternative_route_max_paths = alternative_route_max_paths
        self._alternative_route_max_share_factor = alternative_route_max_share_factor
        self._alternative_route_max_weight_factor = alternative_route_max_weight_factor
        self._avoid = avoid
        self._block_area = block_area
        self._calc_points = calc_points
        self._ch_disable = ch_disable
        self._curbsides = curbsides
        self._debug = debug
        self._details = details
        self._elevation = elevation
        self._heading_penalty = heading_penalty
        self._headings = headings
        self._instructions = instructions
        self._locale = locale
        self._optimize = optimize
        self._pass_through = pass_through
        self._point_hints = point_hints
        self._points = points
        self._points_encoded = points_encoded
        self._round_trip_distance = round_trip_distance
        self._round_trip_seed = round_trip_seed
        self._snap_preventions = snap_preventions
        self._vehicle = vehicle
        self._weighting = weighting

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RouteRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RouteRequest of this RouteRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def algorithm(self):
        """Gets the algorithm of this RouteRequest.

        Rather than looking for the shortest or fastest path, this lets you solve two different problems related to routing: With `round_trip`, the route will get you back to where you started. This is meant for fun (think of a bike trip), so we will add some randomness. This requires `ch.disable=true`. With `alternative_route`, we give you not one but several routes that are close to optimal, but not too similar to each other. You can control both of these features with additional parameters, see below. 

        :return: The algorithm of this RouteRequest.
        :rtype: str
        """
        return self._algorithm

    @algorithm.setter
    def algorithm(self, algorithm):
        """Sets the algorithm of this RouteRequest.

        Rather than looking for the shortest or fastest path, this lets you solve two different problems related to routing: With `round_trip`, the route will get you back to where you started. This is meant for fun (think of a bike trip), so we will add some randomness. This requires `ch.disable=true`. With `alternative_route`, we give you not one but several routes that are close to optimal, but not too similar to each other. You can control both of these features with additional parameters, see below. 

        :param algorithm: The algorithm of this RouteRequest.
        :type algorithm: str
        """
        allowed_values = ["round_trip", "alternative_route"]  # noqa: E501
        if algorithm not in allowed_values:
            raise ValueError(
                "Invalid value for `algorithm` ({0}), must be one of {1}"
                .format(algorithm, allowed_values)
            )

        self._algorithm = algorithm

    @property
    def alternative_route_max_paths(self):
        """Gets the alternative_route_max_paths of this RouteRequest.

        If `algorithm=alternative_route`, this parameter sets the number of maximum paths which should be calculated. Increasing can lead to worse alternatives. 

        :return: The alternative_route_max_paths of this RouteRequest.
        :rtype: int
        """
        return self._alternative_route_max_paths

    @alternative_route_max_paths.setter
    def alternative_route_max_paths(self, alternative_route_max_paths):
        """Sets the alternative_route_max_paths of this RouteRequest.

        If `algorithm=alternative_route`, this parameter sets the number of maximum paths which should be calculated. Increasing can lead to worse alternatives. 

        :param alternative_route_max_paths: The alternative_route_max_paths of this RouteRequest.
        :type alternative_route_max_paths: int
        """

        self._alternative_route_max_paths = alternative_route_max_paths

    @property
    def alternative_route_max_share_factor(self):
        """Gets the alternative_route_max_share_factor of this RouteRequest.

        If `algorithm=alternative_route`, this parameter specifies how similar an alternative route can be to the optimal route. Increasing can lead to worse alternatives. 

        :return: The alternative_route_max_share_factor of this RouteRequest.
        :rtype: float
        """
        return self._alternative_route_max_share_factor

    @alternative_route_max_share_factor.setter
    def alternative_route_max_share_factor(self, alternative_route_max_share_factor):
        """Sets the alternative_route_max_share_factor of this RouteRequest.

        If `algorithm=alternative_route`, this parameter specifies how similar an alternative route can be to the optimal route. Increasing can lead to worse alternatives. 

        :param alternative_route_max_share_factor: The alternative_route_max_share_factor of this RouteRequest.
        :type alternative_route_max_share_factor: float
        """

        self._alternative_route_max_share_factor = alternative_route_max_share_factor

    @property
    def alternative_route_max_weight_factor(self):
        """Gets the alternative_route_max_weight_factor of this RouteRequest.

        If `algorithm=alternative_route`, this parameter sets the factor by which the alternatives routes can be longer than the optimal route. Increasing can lead to worse alternatives. 

        :return: The alternative_route_max_weight_factor of this RouteRequest.
        :rtype: float
        """
        return self._alternative_route_max_weight_factor

    @alternative_route_max_weight_factor.setter
    def alternative_route_max_weight_factor(self, alternative_route_max_weight_factor):
        """Sets the alternative_route_max_weight_factor of this RouteRequest.

        If `algorithm=alternative_route`, this parameter sets the factor by which the alternatives routes can be longer than the optimal route. Increasing can lead to worse alternatives. 

        :param alternative_route_max_weight_factor: The alternative_route_max_weight_factor of this RouteRequest.
        :type alternative_route_max_weight_factor: float
        """

        self._alternative_route_max_weight_factor = alternative_route_max_weight_factor

    @property
    def avoid(self):
        """Gets the avoid of this RouteRequest.

        Specify which road classes and environments you would like to avoid. Possible values are `motorway`, `steps`, `track`, `toll`, `ferry`, `tunnel` and `bridge`. Separate several values with `;`. Obviously not all the values make sense for all vehicle profiles e.g. `bike` is already forbidden on a `motorway`. Requires `ch.disable=true`. 

        :return: The avoid of this RouteRequest.
        :rtype: str
        """
        return self._avoid

    @avoid.setter
    def avoid(self, avoid):
        """Sets the avoid of this RouteRequest.

        Specify which road classes and environments you would like to avoid. Possible values are `motorway`, `steps`, `track`, `toll`, `ferry`, `tunnel` and `bridge`. Separate several values with `;`. Obviously not all the values make sense for all vehicle profiles e.g. `bike` is already forbidden on a `motorway`. Requires `ch.disable=true`. 

        :param avoid: The avoid of this RouteRequest.
        :type avoid: str
        """

        self._avoid = avoid

    @property
    def block_area(self):
        """Gets the block_area of this RouteRequest.

        Block road access via a point with the format `latitude,longitude` or an area defined by a circle `lat,lon,radius` or a rectangle `lat1,lon1,lat2,lon2`. Separate several values with `;`. Requires `ch.disable=true`. 

        :return: The block_area of this RouteRequest.
        :rtype: str
        """
        return self._block_area

    @block_area.setter
    def block_area(self, block_area):
        """Sets the block_area of this RouteRequest.

        Block road access via a point with the format `latitude,longitude` or an area defined by a circle `lat,lon,radius` or a rectangle `lat1,lon1,lat2,lon2`. Separate several values with `;`. Requires `ch.disable=true`. 

        :param block_area: The block_area of this RouteRequest.
        :type block_area: str
        """

        self._block_area = block_area

    @property
    def calc_points(self):
        """Gets the calc_points of this RouteRequest.

        If the points for the route should be calculated at all. 

        :return: The calc_points of this RouteRequest.
        :rtype: bool
        """
        return self._calc_points

    @calc_points.setter
    def calc_points(self, calc_points):
        """Sets the calc_points of this RouteRequest.

        If the points for the route should be calculated at all. 

        :param calc_points: The calc_points of this RouteRequest.
        :type calc_points: bool
        """

        self._calc_points = calc_points

    @property
    def ch_disable(self):
        """Gets the ch_disable of this RouteRequest.

        Use this parameter in combination with one or more parameters from below. 

        :return: The ch_disable of this RouteRequest.
        :rtype: bool
        """
        return self._ch_disable

    @ch_disable.setter
    def ch_disable(self, ch_disable):
        """Sets the ch_disable of this RouteRequest.

        Use this parameter in combination with one or more parameters from below. 

        :param ch_disable: The ch_disable of this RouteRequest.
        :type ch_disable: bool
        """

        self._ch_disable = ch_disable

    @property
    def curbsides(self):
        """Gets the curbsides of this RouteRequest.

        Optional parameter. It specifies on which side a point should be relative to the driver when she leaves/arrives at a start/target/via point. You need to specify this parameter for either none or all points. Only supported for motor vehicles and OpenStreetMap.

        :return: The curbsides of this RouteRequest.
        :rtype: List[str]
        """
        return self._curbsides

    @curbsides.setter
    def curbsides(self, curbsides):
        """Sets the curbsides of this RouteRequest.

        Optional parameter. It specifies on which side a point should be relative to the driver when she leaves/arrives at a start/target/via point. You need to specify this parameter for either none or all points. Only supported for motor vehicles and OpenStreetMap.

        :param curbsides: The curbsides of this RouteRequest.
        :type curbsides: List[str]
        """
        allowed_values = ["any", "right", "left"]  # noqa: E501
        if not set(curbsides).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `curbsides` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(curbsides) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._curbsides = curbsides

    @property
    def debug(self):
        """Gets the debug of this RouteRequest.

        If `true`, the output will be formatted. 

        :return: The debug of this RouteRequest.
        :rtype: bool
        """
        return self._debug

    @debug.setter
    def debug(self, debug):
        """Sets the debug of this RouteRequest.

        If `true`, the output will be formatted. 

        :param debug: The debug of this RouteRequest.
        :type debug: bool
        """

        self._debug = debug

    @property
    def details(self):
        """Gets the details of this RouteRequest.

        Optional parameter to retrieve path details. You can request additional details for the route: `street_name`, `time`, `distance`, `max_speed`, `toll`, `road_class`, `road_class_link`, `road_access`, `road_environment`, `lanes`, and `surface`. Read more about the usage of path details [here](https://discuss.graphhopper.com/t/2539). 

        :return: The details of this RouteRequest.
        :rtype: List[str]
        """
        return self._details

    @details.setter
    def details(self, details):
        """Sets the details of this RouteRequest.

        Optional parameter to retrieve path details. You can request additional details for the route: `street_name`, `time`, `distance`, `max_speed`, `toll`, `road_class`, `road_class_link`, `road_access`, `road_environment`, `lanes`, and `surface`. Read more about the usage of path details [here](https://discuss.graphhopper.com/t/2539). 

        :param details: The details of this RouteRequest.
        :type details: List[str]
        """

        self._details = details

    @property
    def elevation(self):
        """Gets the elevation of this RouteRequest.

        If `true`, a third coordinate, the altitude, is included with all positions in the response. This changes the format of the `points` and `snapped_waypoints` fields of the response, in both their encodings. Unless you switch off the `points_encoded` parameter, you need special code on the client side that can handle three-dimensional coordinates. A request can fail if the vehicle profile does not support elevation. See the features object for every vehicle profile. 

        :return: The elevation of this RouteRequest.
        :rtype: bool
        """
        return self._elevation

    @elevation.setter
    def elevation(self, elevation):
        """Sets the elevation of this RouteRequest.

        If `true`, a third coordinate, the altitude, is included with all positions in the response. This changes the format of the `points` and `snapped_waypoints` fields of the response, in both their encodings. Unless you switch off the `points_encoded` parameter, you need special code on the client side that can handle three-dimensional coordinates. A request can fail if the vehicle profile does not support elevation. See the features object for every vehicle profile. 

        :param elevation: The elevation of this RouteRequest.
        :type elevation: bool
        """

        self._elevation = elevation

    @property
    def heading_penalty(self):
        """Gets the heading_penalty of this RouteRequest.

        Time penalty in seconds for not obeying a specified heading. Requires `ch.disable=true`. 

        :return: The heading_penalty of this RouteRequest.
        :rtype: int
        """
        return self._heading_penalty

    @heading_penalty.setter
    def heading_penalty(self, heading_penalty):
        """Sets the heading_penalty of this RouteRequest.

        Time penalty in seconds for not obeying a specified heading. Requires `ch.disable=true`. 

        :param heading_penalty: The heading_penalty of this RouteRequest.
        :type heading_penalty: int
        """

        self._heading_penalty = heading_penalty

    @property
    def headings(self):
        """Gets the headings of this RouteRequest.

        Favour a heading direction for a certain point. Specify either one heading for the start point or as many as there are points. In this case headings are associated by their order to the specific points. Headings are given as north based clockwise angle between 0 and 360 degree. This parameter also influences the tour generated with `algorithm=round_trip` and forces the initial direction.  Requires `ch.disable=true`. 

        :return: The headings of this RouteRequest.
        :rtype: List[int]
        """
        return self._headings

    @headings.setter
    def headings(self, headings):
        """Sets the headings of this RouteRequest.

        Favour a heading direction for a certain point. Specify either one heading for the start point or as many as there are points. In this case headings are associated by their order to the specific points. Headings are given as north based clockwise angle between 0 and 360 degree. This parameter also influences the tour generated with `algorithm=round_trip` and forces the initial direction.  Requires `ch.disable=true`. 

        :param headings: The headings of this RouteRequest.
        :type headings: List[int]
        """

        self._headings = headings

    @property
    def instructions(self):
        """Gets the instructions of this RouteRequest.

        If instructions should be calculated and returned 

        :return: The instructions of this RouteRequest.
        :rtype: bool
        """
        return self._instructions

    @instructions.setter
    def instructions(self, instructions):
        """Sets the instructions of this RouteRequest.

        If instructions should be calculated and returned 

        :param instructions: The instructions of this RouteRequest.
        :type instructions: bool
        """

        self._instructions = instructions

    @property
    def locale(self):
        """Gets the locale of this RouteRequest.

        The locale of the resulting turn instructions. E.g. `pt_PT` for Portuguese or `de` for German. 

        :return: The locale of this RouteRequest.
        :rtype: str
        """
        return self._locale

    @locale.setter
    def locale(self, locale):
        """Sets the locale of this RouteRequest.

        The locale of the resulting turn instructions. E.g. `pt_PT` for Portuguese or `de` for German. 

        :param locale: The locale of this RouteRequest.
        :type locale: str
        """

        self._locale = locale

    @property
    def optimize(self):
        """Gets the optimize of this RouteRequest.

        Normally, the calculated route will visit the points in the order you specified them. If you have more than two points, you can set this parameter to `\"true\"` and the points may be re-ordered to minimize the total travel time. Keep in mind that the limits on the number of locations of the Route Optimization API applies, and the request costs more credits. 

        :return: The optimize of this RouteRequest.
        :rtype: str
        """
        return self._optimize

    @optimize.setter
    def optimize(self, optimize):
        """Sets the optimize of this RouteRequest.

        Normally, the calculated route will visit the points in the order you specified them. If you have more than two points, you can set this parameter to `\"true\"` and the points may be re-ordered to minimize the total travel time. Keep in mind that the limits on the number of locations of the Route Optimization API applies, and the request costs more credits. 

        :param optimize: The optimize of this RouteRequest.
        :type optimize: str
        """

        self._optimize = optimize

    @property
    def pass_through(self):
        """Gets the pass_through of this RouteRequest.

        If `true`, u-turns are avoided at via-points with regard to the `heading_penalty`. Requires `ch.disable=true`. 

        :return: The pass_through of this RouteRequest.
        :rtype: bool
        """
        return self._pass_through

    @pass_through.setter
    def pass_through(self, pass_through):
        """Sets the pass_through of this RouteRequest.

        If `true`, u-turns are avoided at via-points with regard to the `heading_penalty`. Requires `ch.disable=true`. 

        :param pass_through: The pass_through of this RouteRequest.
        :type pass_through: bool
        """

        self._pass_through = pass_through

    @property
    def point_hints(self):
        """Gets the point_hints of this RouteRequest.

        Optional parameter. Specifies a hint for each point in the `points` array to prefer a certain street for the closest location lookup. E.g. if there is an address or house with two or more neighboring streets you can control for which street the closest location is looked up.

        :return: The point_hints of this RouteRequest.
        :rtype: List[str]
        """
        return self._point_hints

    @point_hints.setter
    def point_hints(self, point_hints):
        """Sets the point_hints of this RouteRequest.

        Optional parameter. Specifies a hint for each point in the `points` array to prefer a certain street for the closest location lookup. E.g. if there is an address or house with two or more neighboring streets you can control for which street the closest location is looked up.

        :param point_hints: The point_hints of this RouteRequest.
        :type point_hints: List[str]
        """

        self._point_hints = point_hints

    @property
    def points(self):
        """Gets the points of this RouteRequest.

        The points for the route in an array of `[longitude,latitude]`. For instance, if you want to calculate a route from point A to B to C then you specify `points: [ [A_longitude, A_latitude], [B_longitude, B_latitude], [C_longitude, C_latitude]] 

        :return: The points of this RouteRequest.
        :rtype: List[List[float]]
        """
        return self._points

    @points.setter
    def points(self, points):
        """Sets the points of this RouteRequest.

        The points for the route in an array of `[longitude,latitude]`. For instance, if you want to calculate a route from point A to B to C then you specify `points: [ [A_longitude, A_latitude], [B_longitude, B_latitude], [C_longitude, C_latitude]] 

        :param points: The points of this RouteRequest.
        :type points: List[List[float]]
        """

        self._points = points

    @property
    def points_encoded(self):
        """Gets the points_encoded of this RouteRequest.

        Allows changing the encoding of location data in the response. The default is polyline encoding, which is compact but requires special client code to unpack. (We provide it in our JavaScript client library!) Set this parameter to `false` to switch the encoding to simple coordinate pairs like `[lon,lat]`, or `[lon,lat,elevation]`. See the description of the response format for more information. 

        :return: The points_encoded of this RouteRequest.
        :rtype: bool
        """
        return self._points_encoded

    @points_encoded.setter
    def points_encoded(self, points_encoded):
        """Sets the points_encoded of this RouteRequest.

        Allows changing the encoding of location data in the response. The default is polyline encoding, which is compact but requires special client code to unpack. (We provide it in our JavaScript client library!) Set this parameter to `false` to switch the encoding to simple coordinate pairs like `[lon,lat]`, or `[lon,lat,elevation]`. See the description of the response format for more information. 

        :param points_encoded: The points_encoded of this RouteRequest.
        :type points_encoded: bool
        """

        self._points_encoded = points_encoded

    @property
    def round_trip_distance(self):
        """Gets the round_trip_distance of this RouteRequest.

        If `algorithm=round_trip`, this parameter configures approximative length of the resulting round trip. Requires `ch.disable=true`. 

        :return: The round_trip_distance of this RouteRequest.
        :rtype: int
        """
        return self._round_trip_distance

    @round_trip_distance.setter
    def round_trip_distance(self, round_trip_distance):
        """Sets the round_trip_distance of this RouteRequest.

        If `algorithm=round_trip`, this parameter configures approximative length of the resulting round trip. Requires `ch.disable=true`. 

        :param round_trip_distance: The round_trip_distance of this RouteRequest.
        :type round_trip_distance: int
        """

        self._round_trip_distance = round_trip_distance

    @property
    def round_trip_seed(self):
        """Gets the round_trip_seed of this RouteRequest.

        If `algorithm=round_trip`, this sets the random seed. Change this to get a different tour for each value. 

        :return: The round_trip_seed of this RouteRequest.
        :rtype: int
        """
        return self._round_trip_seed

    @round_trip_seed.setter
    def round_trip_seed(self, round_trip_seed):
        """Sets the round_trip_seed of this RouteRequest.

        If `algorithm=round_trip`, this sets the random seed. Change this to get a different tour for each value. 

        :param round_trip_seed: The round_trip_seed of this RouteRequest.
        :type round_trip_seed: int
        """

        self._round_trip_seed = round_trip_seed

    @property
    def snap_preventions(self):
        """Gets the snap_preventions of this RouteRequest.

        Optional parameter to avoid snapping to a certain road class or road environment. Current supported values `motorway`, `trunk`, `ferry`, `tunnel`, `bridge` and `ford`

        :return: The snap_preventions of this RouteRequest.
        :rtype: List[str]
        """
        return self._snap_preventions

    @snap_preventions.setter
    def snap_preventions(self, snap_preventions):
        """Sets the snap_preventions of this RouteRequest.

        Optional parameter to avoid snapping to a certain road class or road environment. Current supported values `motorway`, `trunk`, `ferry`, `tunnel`, `bridge` and `ford`

        :param snap_preventions: The snap_preventions of this RouteRequest.
        :type snap_preventions: List[str]
        """

        self._snap_preventions = snap_preventions

    @property
    def vehicle(self):
        """Gets the vehicle of this RouteRequest.


        :return: The vehicle of this RouteRequest.
        :rtype: VehicleProfileId
        """
        return self._vehicle

    @vehicle.setter
    def vehicle(self, vehicle):
        """Sets the vehicle of this RouteRequest.


        :param vehicle: The vehicle of this RouteRequest.
        :type vehicle: VehicleProfileId
        """

        self._vehicle = vehicle

    @property
    def weighting(self):
        """Gets the weighting of this RouteRequest.

        Determines the way the ''best'' route is calculated. Default is `fastest`. Other options are `shortest` (e.g. for `vehicle=foot` or `bike`) and `short_fastest` which finds a reasonable balance between `shortest` and `fastest`. Requires `ch.disable=true`. 

        :return: The weighting of this RouteRequest.
        :rtype: str
        """
        return self._weighting

    @weighting.setter
    def weighting(self, weighting):
        """Sets the weighting of this RouteRequest.

        Determines the way the ''best'' route is calculated. Default is `fastest`. Other options are `shortest` (e.g. for `vehicle=foot` or `bike`) and `short_fastest` which finds a reasonable balance between `shortest` and `fastest`. Requires `ch.disable=true`. 

        :param weighting: The weighting of this RouteRequest.
        :type weighting: str
        """

        self._weighting = weighting
