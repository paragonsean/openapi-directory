# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class MatrixResponseHintsInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, details: str=None, invalid_from_points: List[float]=None, invalid_to_points: List[float]=None, message: str=None, point_pairs: List[List[float]]=None):
        """MatrixResponseHintsInner - a model defined in OpenAPI

        :param details: The details of this MatrixResponseHintsInner.
        :param invalid_from_points: The invalid_from_points of this MatrixResponseHintsInner.
        :param invalid_to_points: The invalid_to_points of this MatrixResponseHintsInner.
        :param message: The message of this MatrixResponseHintsInner.
        :param point_pairs: The point_pairs of this MatrixResponseHintsInner.
        """
        self.openapi_types = {
            'details': str,
            'invalid_from_points': List[float],
            'invalid_to_points': List[float],
            'message': str,
            'point_pairs': List[List[float]]
        }

        self.attribute_map = {
            'details': 'details',
            'invalid_from_points': 'invalid_from_points',
            'invalid_to_points': 'invalid_to_points',
            'message': 'message',
            'point_pairs': 'point_pairs'
        }

        self._details = details
        self._invalid_from_points = invalid_from_points
        self._invalid_to_points = invalid_to_points
        self._message = message
        self._point_pairs = point_pairs

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MatrixResponseHintsInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MatrixResponse_hints_inner of this MatrixResponseHintsInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def details(self):
        """Gets the details of this MatrixResponseHintsInner.

        Details of this hint

        :return: The details of this MatrixResponseHintsInner.
        :rtype: str
        """
        return self._details

    @details.setter
    def details(self, details):
        """Sets the details of this MatrixResponseHintsInner.

        Details of this hint

        :param details: The details of this MatrixResponseHintsInner.
        :type details: str
        """

        self._details = details

    @property
    def invalid_from_points(self):
        """Gets the invalid_from_points of this MatrixResponseHintsInner.

        Optional. An array of from_point indices of points that could not be found. Will only be added if `fail_fast=false` and some `from_point`s were not found.`

        :return: The invalid_from_points of this MatrixResponseHintsInner.
        :rtype: List[float]
        """
        return self._invalid_from_points

    @invalid_from_points.setter
    def invalid_from_points(self, invalid_from_points):
        """Sets the invalid_from_points of this MatrixResponseHintsInner.

        Optional. An array of from_point indices of points that could not be found. Will only be added if `fail_fast=false` and some `from_point`s were not found.`

        :param invalid_from_points: The invalid_from_points of this MatrixResponseHintsInner.
        :type invalid_from_points: List[float]
        """

        self._invalid_from_points = invalid_from_points

    @property
    def invalid_to_points(self):
        """Gets the invalid_to_points of this MatrixResponseHintsInner.

        Optional. An array of to_point indices of points that could not be found. Will only be added if `fail_fast=false` and some `to_point`s were not found.`

        :return: The invalid_to_points of this MatrixResponseHintsInner.
        :rtype: List[float]
        """
        return self._invalid_to_points

    @invalid_to_points.setter
    def invalid_to_points(self, invalid_to_points):
        """Sets the invalid_to_points of this MatrixResponseHintsInner.

        Optional. An array of to_point indices of points that could not be found. Will only be added if `fail_fast=false` and some `to_point`s were not found.`

        :param invalid_to_points: The invalid_to_points of this MatrixResponseHintsInner.
        :type invalid_to_points: List[float]
        """

        self._invalid_to_points = invalid_to_points

    @property
    def message(self):
        """Gets the message of this MatrixResponseHintsInner.

        Short description of this hint

        :return: The message of this MatrixResponseHintsInner.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this MatrixResponseHintsInner.

        Short description of this hint

        :param message: The message of this MatrixResponseHintsInner.
        :type message: str
        """

        self._message = message

    @property
    def point_pairs(self):
        """Gets the point_pairs of this MatrixResponseHintsInner.

        Optional. An array of two-element arrays representing the from/to_point indices of points for which no connection could be found. Will only be added if `fail_fast=false` and some connections were not found.

        :return: The point_pairs of this MatrixResponseHintsInner.
        :rtype: List[List[float]]
        """
        return self._point_pairs

    @point_pairs.setter
    def point_pairs(self, point_pairs):
        """Sets the point_pairs of this MatrixResponseHintsInner.

        Optional. An array of two-element arrays representing the from/to_point indices of points for which no connection could be found. Will only be added if `fail_fast=false` and some connections were not found.

        :param point_pairs: The point_pairs of this MatrixResponseHintsInner.
        :type point_pairs: List[List[float]]
        """

        self._point_pairs = point_pairs
