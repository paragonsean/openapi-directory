# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.route import Route
from openapi_server.models.solution_unassigned import SolutionUnassigned
from openapi_server import util


class Solution(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, completion_time: int=None, costs: int=None, distance: int=None, max_operation_time: int=None, no_unassigned: int=None, no_vehicles: int=None, preparation_time: int=None, routes: List[Route]=None, service_duration: int=None, time: int=None, transport_time: int=None, unassigned: SolutionUnassigned=None, waiting_time: int=None):
        """Solution - a model defined in OpenAPI

        :param completion_time: The completion_time of this Solution.
        :param costs: The costs of this Solution.
        :param distance: The distance of this Solution.
        :param max_operation_time: The max_operation_time of this Solution.
        :param no_unassigned: The no_unassigned of this Solution.
        :param no_vehicles: The no_vehicles of this Solution.
        :param preparation_time: The preparation_time of this Solution.
        :param routes: The routes of this Solution.
        :param service_duration: The service_duration of this Solution.
        :param time: The time of this Solution.
        :param transport_time: The transport_time of this Solution.
        :param unassigned: The unassigned of this Solution.
        :param waiting_time: The waiting_time of this Solution.
        """
        self.openapi_types = {
            'completion_time': int,
            'costs': int,
            'distance': int,
            'max_operation_time': int,
            'no_unassigned': int,
            'no_vehicles': int,
            'preparation_time': int,
            'routes': List[Route],
            'service_duration': int,
            'time': int,
            'transport_time': int,
            'unassigned': SolutionUnassigned,
            'waiting_time': int
        }

        self.attribute_map = {
            'completion_time': 'completion_time',
            'costs': 'costs',
            'distance': 'distance',
            'max_operation_time': 'max_operation_time',
            'no_unassigned': 'no_unassigned',
            'no_vehicles': 'no_vehicles',
            'preparation_time': 'preparation_time',
            'routes': 'routes',
            'service_duration': 'service_duration',
            'time': 'time',
            'transport_time': 'transport_time',
            'unassigned': 'unassigned',
            'waiting_time': 'waiting_time'
        }

        self._completion_time = completion_time
        self._costs = costs
        self._distance = distance
        self._max_operation_time = max_operation_time
        self._no_unassigned = no_unassigned
        self._no_vehicles = no_vehicles
        self._preparation_time = preparation_time
        self._routes = routes
        self._service_duration = service_duration
        self._time = time
        self._transport_time = transport_time
        self._unassigned = unassigned
        self._waiting_time = waiting_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Solution':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Solution of this Solution.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def completion_time(self):
        """Gets the completion_time of this Solution.

        Overall completion time in seconds, i.e. the sum of each routes/drivers operation time.

        :return: The completion_time of this Solution.
        :rtype: int
        """
        return self._completion_time

    @completion_time.setter
    def completion_time(self, completion_time):
        """Sets the completion_time of this Solution.

        Overall completion time in seconds, i.e. the sum of each routes/drivers operation time.

        :param completion_time: The completion_time of this Solution.
        :type completion_time: int
        """

        self._completion_time = completion_time

    @property
    def costs(self):
        """Gets the costs of this Solution.


        :return: The costs of this Solution.
        :rtype: int
        """
        return self._costs

    @costs.setter
    def costs(self, costs):
        """Sets the costs of this Solution.


        :param costs: The costs of this Solution.
        :type costs: int
        """

        self._costs = costs

    @property
    def distance(self):
        """Gets the distance of this Solution.

        Overall distance travelled in meter, i.e. the sum of each route's transport distance

        :return: The distance of this Solution.
        :rtype: int
        """
        return self._distance

    @distance.setter
    def distance(self, distance):
        """Sets the distance of this Solution.

        Overall distance travelled in meter, i.e. the sum of each route's transport distance

        :param distance: The distance of this Solution.
        :type distance: int
        """

        self._distance = distance

    @property
    def max_operation_time(self):
        """Gets the max_operation_time of this Solution.

        Operation time of longest route in seconds.

        :return: The max_operation_time of this Solution.
        :rtype: int
        """
        return self._max_operation_time

    @max_operation_time.setter
    def max_operation_time(self, max_operation_time):
        """Sets the max_operation_time of this Solution.

        Operation time of longest route in seconds.

        :param max_operation_time: The max_operation_time of this Solution.
        :type max_operation_time: int
        """

        self._max_operation_time = max_operation_time

    @property
    def no_unassigned(self):
        """Gets the no_unassigned of this Solution.

        Number of jobs that could not be assigned to final solution.

        :return: The no_unassigned of this Solution.
        :rtype: int
        """
        return self._no_unassigned

    @no_unassigned.setter
    def no_unassigned(self, no_unassigned):
        """Sets the no_unassigned of this Solution.

        Number of jobs that could not be assigned to final solution.

        :param no_unassigned: The no_unassigned of this Solution.
        :type no_unassigned: int
        """

        self._no_unassigned = no_unassigned

    @property
    def no_vehicles(self):
        """Gets the no_vehicles of this Solution.

        Number of employed vehicles.

        :return: The no_vehicles of this Solution.
        :rtype: int
        """
        return self._no_vehicles

    @no_vehicles.setter
    def no_vehicles(self, no_vehicles):
        """Sets the no_vehicles of this Solution.

        Number of employed vehicles.

        :param no_vehicles: The no_vehicles of this Solution.
        :type no_vehicles: int
        """

        self._no_vehicles = no_vehicles

    @property
    def preparation_time(self):
        """Gets the preparation_time of this Solution.

        Overall preparation time in seconds.

        :return: The preparation_time of this Solution.
        :rtype: int
        """
        return self._preparation_time

    @preparation_time.setter
    def preparation_time(self, preparation_time):
        """Sets the preparation_time of this Solution.

        Overall preparation time in seconds.

        :param preparation_time: The preparation_time of this Solution.
        :type preparation_time: int
        """

        self._preparation_time = preparation_time

    @property
    def routes(self):
        """Gets the routes of this Solution.

        An array of routes

        :return: The routes of this Solution.
        :rtype: List[Route]
        """
        return self._routes

    @routes.setter
    def routes(self, routes):
        """Sets the routes of this Solution.

        An array of routes

        :param routes: The routes of this Solution.
        :type routes: List[Route]
        """

        self._routes = routes

    @property
    def service_duration(self):
        """Gets the service_duration of this Solution.

        Overall service time in seconds.

        :return: The service_duration of this Solution.
        :rtype: int
        """
        return self._service_duration

    @service_duration.setter
    def service_duration(self, service_duration):
        """Sets the service_duration of this Solution.

        Overall service time in seconds.

        :param service_duration: The service_duration of this Solution.
        :type service_duration: int
        """

        self._service_duration = service_duration

    @property
    def time(self):
        """Gets the time of this Solution.

        Use `transport_time` instead.

        :return: The time of this Solution.
        :rtype: int
        """
        return self._time

    @time.setter
    def time(self, time):
        """Sets the time of this Solution.

        Use `transport_time` instead.

        :param time: The time of this Solution.
        :type time: int
        """

        self._time = time

    @property
    def transport_time(self):
        """Gets the transport_time of this Solution.

        Overall time travelled in seconds, i.e. the sum of each route's transport time.

        :return: The transport_time of this Solution.
        :rtype: int
        """
        return self._transport_time

    @transport_time.setter
    def transport_time(self, transport_time):
        """Sets the transport_time of this Solution.

        Overall time travelled in seconds, i.e. the sum of each route's transport time.

        :param transport_time: The transport_time of this Solution.
        :type transport_time: int
        """

        self._transport_time = transport_time

    @property
    def unassigned(self):
        """Gets the unassigned of this Solution.


        :return: The unassigned of this Solution.
        :rtype: SolutionUnassigned
        """
        return self._unassigned

    @unassigned.setter
    def unassigned(self, unassigned):
        """Sets the unassigned of this Solution.


        :param unassigned: The unassigned of this Solution.
        :type unassigned: SolutionUnassigned
        """

        self._unassigned = unassigned

    @property
    def waiting_time(self):
        """Gets the waiting_time of this Solution.

        Overall waiting time in seconds.

        :return: The waiting_time of this Solution.
        :rtype: int
        """
        return self._waiting_time

    @waiting_time.setter
    def waiting_time(self, waiting_time):
        """Sets the waiting_time of this Solution.

        Overall waiting time in seconds.

        :param waiting_time: The waiting_time of this Solution.
        :type waiting_time: int
        """

        self._waiting_time = waiting_time
