# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.activity import Activity
from openapi_server.models.route_point import RoutePoint
from openapi_server import util


class Route(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, activities: List[Activity]=None, completion_time: int=None, distance: int=None, points: List[RoutePoint]=None, preparation_time: int=None, service_duration: int=None, transport_time: int=None, vehicle_id: str=None, waiting_time: int=None):
        """Route - a model defined in OpenAPI

        :param activities: The activities of this Route.
        :param completion_time: The completion_time of this Route.
        :param distance: The distance of this Route.
        :param points: The points of this Route.
        :param preparation_time: The preparation_time of this Route.
        :param service_duration: The service_duration of this Route.
        :param transport_time: The transport_time of this Route.
        :param vehicle_id: The vehicle_id of this Route.
        :param waiting_time: The waiting_time of this Route.
        """
        self.openapi_types = {
            'activities': List[Activity],
            'completion_time': int,
            'distance': int,
            'points': List[RoutePoint],
            'preparation_time': int,
            'service_duration': int,
            'transport_time': int,
            'vehicle_id': str,
            'waiting_time': int
        }

        self.attribute_map = {
            'activities': 'activities',
            'completion_time': 'completion_time',
            'distance': 'distance',
            'points': 'points',
            'preparation_time': 'preparation_time',
            'service_duration': 'service_duration',
            'transport_time': 'transport_time',
            'vehicle_id': 'vehicle_id',
            'waiting_time': 'waiting_time'
        }

        self._activities = activities
        self._completion_time = completion_time
        self._distance = distance
        self._points = points
        self._preparation_time = preparation_time
        self._service_duration = service_duration
        self._transport_time = transport_time
        self._vehicle_id = vehicle_id
        self._waiting_time = waiting_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Route':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Route of this Route.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def activities(self):
        """Gets the activities of this Route.

        Array of activities

        :return: The activities of this Route.
        :rtype: List[Activity]
        """
        return self._activities

    @activities.setter
    def activities(self, activities):
        """Sets the activities of this Route.

        Array of activities

        :param activities: The activities of this Route.
        :type activities: List[Activity]
        """

        self._activities = activities

    @property
    def completion_time(self):
        """Gets the completion_time of this Route.

        Completion time of route in seconds

        :return: The completion_time of this Route.
        :rtype: int
        """
        return self._completion_time

    @completion_time.setter
    def completion_time(self, completion_time):
        """Sets the completion_time of this Route.

        Completion time of route in seconds

        :param completion_time: The completion_time of this Route.
        :type completion_time: int
        """

        self._completion_time = completion_time

    @property
    def distance(self):
        """Gets the distance of this Route.

        Distance of route in meter

        :return: The distance of this Route.
        :rtype: int
        """
        return self._distance

    @distance.setter
    def distance(self, distance):
        """Sets the distance of this Route.

        Distance of route in meter

        :param distance: The distance of this Route.
        :type distance: int
        """

        self._distance = distance

    @property
    def points(self):
        """Gets the points of this Route.

        Array of route planning points

        :return: The points of this Route.
        :rtype: List[RoutePoint]
        """
        return self._points

    @points.setter
    def points(self, points):
        """Sets the points of this Route.

        Array of route planning points

        :param points: The points of this Route.
        :type points: List[RoutePoint]
        """

        self._points = points

    @property
    def preparation_time(self):
        """Gets the preparation_time of this Route.

        Preparation time of route in seconds

        :return: The preparation_time of this Route.
        :rtype: int
        """
        return self._preparation_time

    @preparation_time.setter
    def preparation_time(self, preparation_time):
        """Sets the preparation_time of this Route.

        Preparation time of route in seconds

        :param preparation_time: The preparation_time of this Route.
        :type preparation_time: int
        """

        self._preparation_time = preparation_time

    @property
    def service_duration(self):
        """Gets the service_duration of this Route.

        Service duration of route in seconds

        :return: The service_duration of this Route.
        :rtype: int
        """
        return self._service_duration

    @service_duration.setter
    def service_duration(self, service_duration):
        """Sets the service_duration of this Route.

        Service duration of route in seconds

        :param service_duration: The service_duration of this Route.
        :type service_duration: int
        """

        self._service_duration = service_duration

    @property
    def transport_time(self):
        """Gets the transport_time of this Route.

        Transport time of route in seconds

        :return: The transport_time of this Route.
        :rtype: int
        """
        return self._transport_time

    @transport_time.setter
    def transport_time(self, transport_time):
        """Sets the transport_time of this Route.

        Transport time of route in seconds

        :param transport_time: The transport_time of this Route.
        :type transport_time: int
        """

        self._transport_time = transport_time

    @property
    def vehicle_id(self):
        """Gets the vehicle_id of this Route.

        Id of vehicle that operates route

        :return: The vehicle_id of this Route.
        :rtype: str
        """
        return self._vehicle_id

    @vehicle_id.setter
    def vehicle_id(self, vehicle_id):
        """Sets the vehicle_id of this Route.

        Id of vehicle that operates route

        :param vehicle_id: The vehicle_id of this Route.
        :type vehicle_id: str
        """

        self._vehicle_id = vehicle_id

    @property
    def waiting_time(self):
        """Gets the waiting_time of this Route.

        Waiting time of route in seconds

        :return: The waiting_time of this Route.
        :rtype: int
        """
        return self._waiting_time

    @waiting_time.setter
    def waiting_time(self, waiting_time):
        """Sets the waiting_time of this Route.

        Waiting time of route in seconds

        :param waiting_time: The waiting_time of this Route.
        :type waiting_time: int
        """

        self._waiting_time = waiting_time
