# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.snapped_waypoint import SnappedWaypoint
from openapi_server import util


class ResponseAddress(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, lat: float=None, location_id: str=None, lon: float=None, name: str=None, snapped_waypoint: SnappedWaypoint=None, street_hint: str=None):
        """ResponseAddress - a model defined in OpenAPI

        :param lat: The lat of this ResponseAddress.
        :param location_id: The location_id of this ResponseAddress.
        :param lon: The lon of this ResponseAddress.
        :param name: The name of this ResponseAddress.
        :param snapped_waypoint: The snapped_waypoint of this ResponseAddress.
        :param street_hint: The street_hint of this ResponseAddress.
        """
        self.openapi_types = {
            'lat': float,
            'location_id': str,
            'lon': float,
            'name': str,
            'snapped_waypoint': SnappedWaypoint,
            'street_hint': str
        }

        self.attribute_map = {
            'lat': 'lat',
            'location_id': 'location_id',
            'lon': 'lon',
            'name': 'name',
            'snapped_waypoint': 'snapped_waypoint',
            'street_hint': 'street_hint'
        }

        self._lat = lat
        self._location_id = location_id
        self._lon = lon
        self._name = name
        self._snapped_waypoint = snapped_waypoint
        self._street_hint = street_hint

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ResponseAddress':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ResponseAddress of this ResponseAddress.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def lat(self):
        """Gets the lat of this ResponseAddress.

        Latitude of location.

        :return: The lat of this ResponseAddress.
        :rtype: float
        """
        return self._lat

    @lat.setter
    def lat(self, lat):
        """Sets the lat of this ResponseAddress.

        Latitude of location.

        :param lat: The lat of this ResponseAddress.
        :type lat: float
        """

        self._lat = lat

    @property
    def location_id(self):
        """Gets the location_id of this ResponseAddress.

        Specifies the id of the location.

        :return: The location_id of this ResponseAddress.
        :rtype: str
        """
        return self._location_id

    @location_id.setter
    def location_id(self, location_id):
        """Sets the location_id of this ResponseAddress.

        Specifies the id of the location.

        :param location_id: The location_id of this ResponseAddress.
        :type location_id: str
        """

        self._location_id = location_id

    @property
    def lon(self):
        """Gets the lon of this ResponseAddress.

        Longitude of location.

        :return: The lon of this ResponseAddress.
        :rtype: float
        """
        return self._lon

    @lon.setter
    def lon(self, lon):
        """Sets the lon of this ResponseAddress.

        Longitude of location.

        :param lon: The lon of this ResponseAddress.
        :type lon: float
        """

        self._lon = lon

    @property
    def name(self):
        """Gets the name of this ResponseAddress.

        Name of location.

        :return: The name of this ResponseAddress.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ResponseAddress.

        Name of location.

        :param name: The name of this ResponseAddress.
        :type name: str
        """

        self._name = name

    @property
    def snapped_waypoint(self):
        """Gets the snapped_waypoint of this ResponseAddress.


        :return: The snapped_waypoint of this ResponseAddress.
        :rtype: SnappedWaypoint
        """
        return self._snapped_waypoint

    @snapped_waypoint.setter
    def snapped_waypoint(self, snapped_waypoint):
        """Sets the snapped_waypoint of this ResponseAddress.


        :param snapped_waypoint: The snapped_waypoint of this ResponseAddress.
        :type snapped_waypoint: SnappedWaypoint
        """

        self._snapped_waypoint = snapped_waypoint

    @property
    def street_hint(self):
        """Gets the street_hint of this ResponseAddress.

        Optional parameter. Specifies a hint for each address to better snap the coordinates (lon,lat) to road network. E.g. if there is an address or house with two or more neighboring streets you can control for which street the closest location is looked up.

        :return: The street_hint of this ResponseAddress.
        :rtype: str
        """
        return self._street_hint

    @street_hint.setter
    def street_hint(self, street_hint):
        """Sets the street_hint of this ResponseAddress.

        Optional parameter. Specifies a hint for each address to better snap the coordinates (lon,lat) to road network. E.g. if there is an address or house with two or more neighboring streets you can control for which street the closest location is looked up.

        :param street_hint: The street_hint of this ResponseAddress.
        :type street_hint: str
        """

        self._street_hint = street_hint
