# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.isochrone_response_polygon import IsochroneResponsePolygon
from openapi_server import util


class IsochroneResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, copyrights: List[str]=None, polygons: List[IsochroneResponsePolygon]=None):
        """IsochroneResponse - a model defined in OpenAPI

        :param copyrights: The copyrights of this IsochroneResponse.
        :param polygons: The polygons of this IsochroneResponse.
        """
        self.openapi_types = {
            'copyrights': List[str],
            'polygons': List[IsochroneResponsePolygon]
        }

        self.attribute_map = {
            'copyrights': 'copyrights',
            'polygons': 'polygons'
        }

        self._copyrights = copyrights
        self._polygons = polygons

    @classmethod
    def from_dict(cls, dikt: dict) -> 'IsochroneResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The IsochroneResponse of this IsochroneResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def copyrights(self):
        """Gets the copyrights of this IsochroneResponse.


        :return: The copyrights of this IsochroneResponse.
        :rtype: List[str]
        """
        return self._copyrights

    @copyrights.setter
    def copyrights(self, copyrights):
        """Sets the copyrights of this IsochroneResponse.


        :param copyrights: The copyrights of this IsochroneResponse.
        :type copyrights: List[str]
        """

        self._copyrights = copyrights

    @property
    def polygons(self):
        """Gets the polygons of this IsochroneResponse.

        The list of polygons in GeoJson format. It can be used e.g. in the Leaflet framework:  ``` L.geoJson(json.polygons).addTo(map) ```  The number of polygon is identical to the specified buckets in the query. Every polygon contains the bucket number in the properties section of the GeoJson. 

        :return: The polygons of this IsochroneResponse.
        :rtype: List[IsochroneResponsePolygon]
        """
        return self._polygons

    @polygons.setter
    def polygons(self, polygons):
        """Sets the polygons of this IsochroneResponse.

        The list of polygons in GeoJson format. It can be used e.g. in the Leaflet framework:  ``` L.geoJson(json.polygons).addTo(map) ```  The number of polygon is identical to the specified buckets in the query. Every polygon contains the bucket number in the properties section of the GeoJson. 

        :param polygons: The polygons of this IsochroneResponse.
        :type polygons: List[IsochroneResponsePolygon]
        """

        self._polygons = polygons
