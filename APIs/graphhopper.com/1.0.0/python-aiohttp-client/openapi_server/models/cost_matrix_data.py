# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.cost_matrix_data_info import CostMatrixDataInfo
from openapi_server import util


class CostMatrixData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, distances: List[List[float]]=None, info: CostMatrixDataInfo=None, times: List[List[int]]=None):
        """CostMatrixData - a model defined in OpenAPI

        :param distances: The distances of this CostMatrixData.
        :param info: The info of this CostMatrixData.
        :param times: The times of this CostMatrixData.
        """
        self.openapi_types = {
            'distances': List[List[float]],
            'info': CostMatrixDataInfo,
            'times': List[List[int]]
        }

        self.attribute_map = {
            'distances': 'distances',
            'info': 'info',
            'times': 'times'
        }

        self._distances = distances
        self._info = info
        self._times = times

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CostMatrixData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CostMatrix_data of this CostMatrixData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def distances(self):
        """Gets the distances of this CostMatrixData.


        :return: The distances of this CostMatrixData.
        :rtype: List[List[float]]
        """
        return self._distances

    @distances.setter
    def distances(self, distances):
        """Sets the distances of this CostMatrixData.


        :param distances: The distances of this CostMatrixData.
        :type distances: List[List[float]]
        """
        if distances is not None and len(distances) < 1:
            raise ValueError("Invalid value for `distances`, number of items must be greater than or equal to `1`")

        self._distances = distances

    @property
    def info(self):
        """Gets the info of this CostMatrixData.


        :return: The info of this CostMatrixData.
        :rtype: CostMatrixDataInfo
        """
        return self._info

    @info.setter
    def info(self, info):
        """Sets the info of this CostMatrixData.


        :param info: The info of this CostMatrixData.
        :type info: CostMatrixDataInfo
        """

        self._info = info

    @property
    def times(self):
        """Gets the times of this CostMatrixData.


        :return: The times of this CostMatrixData.
        :rtype: List[List[int]]
        """
        return self._times

    @times.setter
    def times(self, times):
        """Sets the times of this CostMatrixData.


        :param times: The times of this CostMatrixData.
        :type times: List[List[int]]
        """
        if times is not None and len(times) < 1:
            raise ValueError("Invalid value for `times`, number of items must be greater than or equal to `1`")

        self._times = times
