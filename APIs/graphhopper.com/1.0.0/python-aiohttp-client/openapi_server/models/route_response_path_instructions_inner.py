# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RouteResponsePathInstructionsInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, distance: float=None, exit_number: int=None, interval: List[int]=None, sign: int=None, street_name: str=None, text: str=None, time: int=None, turn_angle: float=None):
        """RouteResponsePathInstructionsInner - a model defined in OpenAPI

        :param distance: The distance of this RouteResponsePathInstructionsInner.
        :param exit_number: The exit_number of this RouteResponsePathInstructionsInner.
        :param interval: The interval of this RouteResponsePathInstructionsInner.
        :param sign: The sign of this RouteResponsePathInstructionsInner.
        :param street_name: The street_name of this RouteResponsePathInstructionsInner.
        :param text: The text of this RouteResponsePathInstructionsInner.
        :param time: The time of this RouteResponsePathInstructionsInner.
        :param turn_angle: The turn_angle of this RouteResponsePathInstructionsInner.
        """
        self.openapi_types = {
            'distance': float,
            'exit_number': int,
            'interval': List[int],
            'sign': int,
            'street_name': str,
            'text': str,
            'time': int,
            'turn_angle': float
        }

        self.attribute_map = {
            'distance': 'distance',
            'exit_number': 'exit_number',
            'interval': 'interval',
            'sign': 'sign',
            'street_name': 'street_name',
            'text': 'text',
            'time': 'time',
            'turn_angle': 'turn_angle'
        }

        self._distance = distance
        self._exit_number = exit_number
        self._interval = interval
        self._sign = sign
        self._street_name = street_name
        self._text = text
        self._time = time
        self._turn_angle = turn_angle

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RouteResponsePathInstructionsInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RouteResponsePath_instructions_inner of this RouteResponsePathInstructionsInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def distance(self):
        """Gets the distance of this RouteResponsePathInstructionsInner.

        The distance for this instruction, in meters. 

        :return: The distance of this RouteResponsePathInstructionsInner.
        :rtype: float
        """
        return self._distance

    @distance.setter
    def distance(self, distance):
        """Sets the distance of this RouteResponsePathInstructionsInner.

        The distance for this instruction, in meters. 

        :param distance: The distance of this RouteResponsePathInstructionsInner.
        :type distance: float
        """

        self._distance = distance

    @property
    def exit_number(self):
        """Gets the exit_number of this RouteResponsePathInstructionsInner.

        Only available for roundabout instructions (sign is 6). The count of exits at which the route leaves the roundabout. 

        :return: The exit_number of this RouteResponsePathInstructionsInner.
        :rtype: int
        """
        return self._exit_number

    @exit_number.setter
    def exit_number(self, exit_number):
        """Sets the exit_number of this RouteResponsePathInstructionsInner.

        Only available for roundabout instructions (sign is 6). The count of exits at which the route leaves the roundabout. 

        :param exit_number: The exit_number of this RouteResponsePathInstructionsInner.
        :type exit_number: int
        """

        self._exit_number = exit_number

    @property
    def interval(self):
        """Gets the interval of this RouteResponsePathInstructionsInner.

        Two indices into `points`, referring to the beginning and the end of the segment of the route this instruction refers to. 

        :return: The interval of this RouteResponsePathInstructionsInner.
        :rtype: List[int]
        """
        return self._interval

    @interval.setter
    def interval(self, interval):
        """Sets the interval of this RouteResponsePathInstructionsInner.

        Two indices into `points`, referring to the beginning and the end of the segment of the route this instruction refers to. 

        :param interval: The interval of this RouteResponsePathInstructionsInner.
        :type interval: List[int]
        """

        self._interval = interval

    @property
    def sign(self):
        """Gets the sign of this RouteResponsePathInstructionsInner.

        A number which specifies the sign to show:  | sign | description  | |---|---| |-98| an U-turn without the knowledge if it is a right or left U-turn | | -8| a left U-turn | | -7| keep left | | -6| **not yet used**: leave roundabout | | -3| turn sharp left | | -2| turn left | | -1| turn slight left | |  0| continue on street | |  1| turn slight right | |  2| turn right | |  3| turn sharp right | |  4| the finish instruction before the last point | |  5| the instruction before a via point | |  6| the instruction before entering a roundabout | |  7| keep right | |  8| a right U-turn | |  *| **For future compatibility** it is important that all clients are able to handle also unknown instruction sign numbers 

        :return: The sign of this RouteResponsePathInstructionsInner.
        :rtype: int
        """
        return self._sign

    @sign.setter
    def sign(self, sign):
        """Sets the sign of this RouteResponsePathInstructionsInner.

        A number which specifies the sign to show:  | sign | description  | |---|---| |-98| an U-turn without the knowledge if it is a right or left U-turn | | -8| a left U-turn | | -7| keep left | | -6| **not yet used**: leave roundabout | | -3| turn sharp left | | -2| turn left | | -1| turn slight left | |  0| continue on street | |  1| turn slight right | |  2| turn right | |  3| turn sharp right | |  4| the finish instruction before the last point | |  5| the instruction before a via point | |  6| the instruction before entering a roundabout | |  7| keep right | |  8| a right U-turn | |  *| **For future compatibility** it is important that all clients are able to handle also unknown instruction sign numbers 

        :param sign: The sign of this RouteResponsePathInstructionsInner.
        :type sign: int
        """

        self._sign = sign

    @property
    def street_name(self):
        """Gets the street_name of this RouteResponsePathInstructionsInner.

        The name of the street to turn onto in order to follow the route. 

        :return: The street_name of this RouteResponsePathInstructionsInner.
        :rtype: str
        """
        return self._street_name

    @street_name.setter
    def street_name(self, street_name):
        """Sets the street_name of this RouteResponsePathInstructionsInner.

        The name of the street to turn onto in order to follow the route. 

        :param street_name: The street_name of this RouteResponsePathInstructionsInner.
        :type street_name: str
        """

        self._street_name = street_name

    @property
    def text(self):
        """Gets the text of this RouteResponsePathInstructionsInner.

        A description what the user has to do in order to follow the route. The language depends on the locale parameter. 

        :return: The text of this RouteResponsePathInstructionsInner.
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this RouteResponsePathInstructionsInner.

        A description what the user has to do in order to follow the route. The language depends on the locale parameter. 

        :param text: The text of this RouteResponsePathInstructionsInner.
        :type text: str
        """

        self._text = text

    @property
    def time(self):
        """Gets the time of this RouteResponsePathInstructionsInner.

        The duration for this instruction, in milliseconds. 

        :return: The time of this RouteResponsePathInstructionsInner.
        :rtype: int
        """
        return self._time

    @time.setter
    def time(self, time):
        """Sets the time of this RouteResponsePathInstructionsInner.

        The duration for this instruction, in milliseconds. 

        :param time: The time of this RouteResponsePathInstructionsInner.
        :type time: int
        """

        self._time = time

    @property
    def turn_angle(self):
        """Gets the turn_angle of this RouteResponsePathInstructionsInner.

        Only available for roundabout instructions (sign is 6). The radian of the route within the roundabout `0 < r < 2*PI` for clockwise and `-2*PI < r < 0` for counterclockwise turns. 

        :return: The turn_angle of this RouteResponsePathInstructionsInner.
        :rtype: float
        """
        return self._turn_angle

    @turn_angle.setter
    def turn_angle(self, turn_angle):
        """Sets the turn_angle of this RouteResponsePathInstructionsInner.

        Only available for roundabout instructions (sign is 6). The radian of the route within the roundabout `0 < r < 2*PI` for clockwise and `-2*PI < r < 0` for counterclockwise turns. 

        :param turn_angle: The turn_angle of this RouteResponsePathInstructionsInner.
        :type turn_angle: float
        """

        self._turn_angle = turn_angle
