# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ClusterConfigurationClustering(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, max_quantity: float=None, min_quantity: float=None, num_clusters: float=None):
        """ClusterConfigurationClustering - a model defined in OpenAPI

        :param max_quantity: The max_quantity of this ClusterConfigurationClustering.
        :param min_quantity: The min_quantity of this ClusterConfigurationClustering.
        :param num_clusters: The num_clusters of this ClusterConfigurationClustering.
        """
        self.openapi_types = {
            'max_quantity': float,
            'min_quantity': float,
            'num_clusters': float
        }

        self.attribute_map = {
            'max_quantity': 'max_quantity',
            'min_quantity': 'min_quantity',
            'num_clusters': 'num_clusters'
        }

        self._max_quantity = max_quantity
        self._min_quantity = min_quantity
        self._num_clusters = num_clusters

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ClusterConfigurationClustering':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ClusterConfigurationClustering of this ClusterConfigurationClustering.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def max_quantity(self):
        """Gets the max_quantity of this ClusterConfigurationClustering.

        Specifies max. quantity in a cluster

        :return: The max_quantity of this ClusterConfigurationClustering.
        :rtype: float
        """
        return self._max_quantity

    @max_quantity.setter
    def max_quantity(self, max_quantity):
        """Sets the max_quantity of this ClusterConfigurationClustering.

        Specifies max. quantity in a cluster

        :param max_quantity: The max_quantity of this ClusterConfigurationClustering.
        :type max_quantity: float
        """

        self._max_quantity = max_quantity

    @property
    def min_quantity(self):
        """Gets the min_quantity of this ClusterConfigurationClustering.

        Specifies min. quantity in a cluster

        :return: The min_quantity of this ClusterConfigurationClustering.
        :rtype: float
        """
        return self._min_quantity

    @min_quantity.setter
    def min_quantity(self, min_quantity):
        """Sets the min_quantity of this ClusterConfigurationClustering.

        Specifies min. quantity in a cluster

        :param min_quantity: The min_quantity of this ClusterConfigurationClustering.
        :type min_quantity: float
        """

        self._min_quantity = min_quantity

    @property
    def num_clusters(self):
        """Gets the num_clusters of this ClusterConfigurationClustering.

        Specifies the number of clusters

        :return: The num_clusters of this ClusterConfigurationClustering.
        :rtype: float
        """
        return self._num_clusters

    @num_clusters.setter
    def num_clusters(self, num_clusters):
        """Sets the num_clusters of this ClusterConfigurationClustering.

        Specifies the number of clusters

        :param num_clusters: The num_clusters of this ClusterConfigurationClustering.
        :type num_clusters: float
        """

        self._num_clusters = num_clusters
