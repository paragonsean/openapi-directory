# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.algorithm import Algorithm
from openapi_server.models.configuration import Configuration
from openapi_server.models.cost_matrix import CostMatrix
from openapi_server.models.objective import Objective
from openapi_server.models.request_relations_inner import RequestRelationsInner
from openapi_server.models.service import Service
from openapi_server.models.shipment import Shipment
from openapi_server.models.vehicle import Vehicle
from openapi_server.models.vehicle_type import VehicleType
from openapi_server import util


class Request(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, algorithm: Algorithm=None, configuration: Configuration=None, cost_matrices: List[CostMatrix]=None, objectives: List[Objective]=None, relations: List[RequestRelationsInner]=None, services: List[Service]=None, shipments: List[Shipment]=None, vehicle_types: List[VehicleType]=None, vehicles: List[Vehicle]=None):
        """Request - a model defined in OpenAPI

        :param algorithm: The algorithm of this Request.
        :param configuration: The configuration of this Request.
        :param cost_matrices: The cost_matrices of this Request.
        :param objectives: The objectives of this Request.
        :param relations: The relations of this Request.
        :param services: The services of this Request.
        :param shipments: The shipments of this Request.
        :param vehicle_types: The vehicle_types of this Request.
        :param vehicles: The vehicles of this Request.
        """
        self.openapi_types = {
            'algorithm': Algorithm,
            'configuration': Configuration,
            'cost_matrices': List[CostMatrix],
            'objectives': List[Objective],
            'relations': List[RequestRelationsInner],
            'services': List[Service],
            'shipments': List[Shipment],
            'vehicle_types': List[VehicleType],
            'vehicles': List[Vehicle]
        }

        self.attribute_map = {
            'algorithm': 'algorithm',
            'configuration': 'configuration',
            'cost_matrices': 'cost_matrices',
            'objectives': 'objectives',
            'relations': 'relations',
            'services': 'services',
            'shipments': 'shipments',
            'vehicle_types': 'vehicle_types',
            'vehicles': 'vehicles'
        }

        self._algorithm = algorithm
        self._configuration = configuration
        self._cost_matrices = cost_matrices
        self._objectives = objectives
        self._relations = relations
        self._services = services
        self._shipments = shipments
        self._vehicle_types = vehicle_types
        self._vehicles = vehicles

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Request':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Request of this Request.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def algorithm(self):
        """Gets the algorithm of this Request.


        :return: The algorithm of this Request.
        :rtype: Algorithm
        """
        return self._algorithm

    @algorithm.setter
    def algorithm(self, algorithm):
        """Sets the algorithm of this Request.


        :param algorithm: The algorithm of this Request.
        :type algorithm: Algorithm
        """

        self._algorithm = algorithm

    @property
    def configuration(self):
        """Gets the configuration of this Request.


        :return: The configuration of this Request.
        :rtype: Configuration
        """
        return self._configuration

    @configuration.setter
    def configuration(self, configuration):
        """Sets the configuration of this Request.


        :param configuration: The configuration of this Request.
        :type configuration: Configuration
        """

        self._configuration = configuration

    @property
    def cost_matrices(self):
        """Gets the cost_matrices of this Request.

        Specifies your own tranport time and distance matrices.

        :return: The cost_matrices of this Request.
        :rtype: List[CostMatrix]
        """
        return self._cost_matrices

    @cost_matrices.setter
    def cost_matrices(self, cost_matrices):
        """Sets the cost_matrices of this Request.

        Specifies your own tranport time and distance matrices.

        :param cost_matrices: The cost_matrices of this Request.
        :type cost_matrices: List[CostMatrix]
        """

        self._cost_matrices = cost_matrices

    @property
    def objectives(self):
        """Gets the objectives of this Request.

        Specifies an objective function. The vehicle routing problem is solved in such a way that this objective function is minimized.

        :return: The objectives of this Request.
        :rtype: List[Objective]
        """
        return self._objectives

    @objectives.setter
    def objectives(self, objectives):
        """Sets the objectives of this Request.

        Specifies an objective function. The vehicle routing problem is solved in such a way that this objective function is minimized.

        :param objectives: The objectives of this Request.
        :type objectives: List[Objective]
        """

        self._objectives = objectives

    @property
    def relations(self):
        """Gets the relations of this Request.

        Defines additional relationships between orders.

        :return: The relations of this Request.
        :rtype: List[RequestRelationsInner]
        """
        return self._relations

    @relations.setter
    def relations(self, relations):
        """Sets the relations of this Request.

        Defines additional relationships between orders.

        :param relations: The relations of this Request.
        :type relations: List[RequestRelationsInner]
        """

        self._relations = relations

    @property
    def services(self):
        """Gets the services of this Request.

        Specifies the orders of the type \"service\". These are, for example, pick-ups, deliveries or other stops that are to be approached by the specified vehicles. Each of these orders contains only one location.

        :return: The services of this Request.
        :rtype: List[Service]
        """
        return self._services

    @services.setter
    def services(self, services):
        """Sets the services of this Request.

        Specifies the orders of the type \"service\". These are, for example, pick-ups, deliveries or other stops that are to be approached by the specified vehicles. Each of these orders contains only one location.

        :param services: The services of this Request.
        :type services: List[Service]
        """

        self._services = services

    @property
    def shipments(self):
        """Gets the shipments of this Request.

        Specifies the available shipments. Each shipment contains a pickup and a delivery stop, which must be processed one after the other.

        :return: The shipments of this Request.
        :rtype: List[Shipment]
        """
        return self._shipments

    @shipments.setter
    def shipments(self, shipments):
        """Sets the shipments of this Request.

        Specifies the available shipments. Each shipment contains a pickup and a delivery stop, which must be processed one after the other.

        :param shipments: The shipments of this Request.
        :type shipments: List[Shipment]
        """

        self._shipments = shipments

    @property
    def vehicle_types(self):
        """Gets the vehicle_types of this Request.

        Specifies the available vehicle types. These types can be assigned to vehicles.

        :return: The vehicle_types of this Request.
        :rtype: List[VehicleType]
        """
        return self._vehicle_types

    @vehicle_types.setter
    def vehicle_types(self, vehicle_types):
        """Sets the vehicle_types of this Request.

        Specifies the available vehicle types. These types can be assigned to vehicles.

        :param vehicle_types: The vehicle_types of this Request.
        :type vehicle_types: List[VehicleType]
        """

        self._vehicle_types = vehicle_types

    @property
    def vehicles(self):
        """Gets the vehicles of this Request.

        Specifies the available vehicles.

        :return: The vehicles of this Request.
        :rtype: List[Vehicle]
        """
        return self._vehicles

    @vehicles.setter
    def vehicles(self, vehicles):
        """Sets the vehicles of this Request.

        Specifies the available vehicles.

        :param vehicles: The vehicles of this Request.
        :type vehicles: List[Vehicle]
        """
        if vehicles is not None and len(vehicles) < 1:
            raise ValueError("Invalid value for `vehicles`, number of items must be greater than or equal to `1`")

        self._vehicles = vehicles
