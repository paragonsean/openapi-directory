# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.cluster import Cluster
from openapi_server import util


class ClusterResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, clusters: List[Cluster]=None, copyrights: List[str]=None, processing_time: float=None, status: str=None, waiting_time_in_queue: float=None):
        """ClusterResponse - a model defined in OpenAPI

        :param clusters: The clusters of this ClusterResponse.
        :param copyrights: The copyrights of this ClusterResponse.
        :param processing_time: The processing_time of this ClusterResponse.
        :param status: The status of this ClusterResponse.
        :param waiting_time_in_queue: The waiting_time_in_queue of this ClusterResponse.
        """
        self.openapi_types = {
            'clusters': List[Cluster],
            'copyrights': List[str],
            'processing_time': float,
            'status': str,
            'waiting_time_in_queue': float
        }

        self.attribute_map = {
            'clusters': 'clusters',
            'copyrights': 'copyrights',
            'processing_time': 'processing_time',
            'status': 'status',
            'waiting_time_in_queue': 'waiting_time_in_queue'
        }

        self._clusters = clusters
        self._copyrights = copyrights
        self._processing_time = processing_time
        self._status = status
        self._waiting_time_in_queue = waiting_time_in_queue

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ClusterResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ClusterResponse of this ClusterResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def clusters(self):
        """Gets the clusters of this ClusterResponse.


        :return: The clusters of this ClusterResponse.
        :rtype: List[Cluster]
        """
        return self._clusters

    @clusters.setter
    def clusters(self, clusters):
        """Sets the clusters of this ClusterResponse.


        :param clusters: The clusters of this ClusterResponse.
        :type clusters: List[Cluster]
        """

        self._clusters = clusters

    @property
    def copyrights(self):
        """Gets the copyrights of this ClusterResponse.


        :return: The copyrights of this ClusterResponse.
        :rtype: List[str]
        """
        return self._copyrights

    @copyrights.setter
    def copyrights(self, copyrights):
        """Sets the copyrights of this ClusterResponse.


        :param copyrights: The copyrights of this ClusterResponse.
        :type copyrights: List[str]
        """

        self._copyrights = copyrights

    @property
    def processing_time(self):
        """Gets the processing_time of this ClusterResponse.


        :return: The processing_time of this ClusterResponse.
        :rtype: float
        """
        return self._processing_time

    @processing_time.setter
    def processing_time(self, processing_time):
        """Sets the processing_time of this ClusterResponse.


        :param processing_time: The processing_time of this ClusterResponse.
        :type processing_time: float
        """

        self._processing_time = processing_time

    @property
    def status(self):
        """Gets the status of this ClusterResponse.

        Indicates the current status of the job

        :return: The status of this ClusterResponse.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ClusterResponse.

        Indicates the current status of the job

        :param status: The status of this ClusterResponse.
        :type status: str
        """
        allowed_values = ["waiting_in_queue", "processing", "finished"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def waiting_time_in_queue(self):
        """Gets the waiting_time_in_queue of this ClusterResponse.


        :return: The waiting_time_in_queue of this ClusterResponse.
        :rtype: float
        """
        return self._waiting_time_in_queue

    @waiting_time_in_queue.setter
    def waiting_time_in_queue(self, waiting_time_in_queue):
        """Sets the waiting_time_in_queue of this ClusterResponse.


        :param waiting_time_in_queue: The waiting_time_in_queue of this ClusterResponse.
        :type waiting_time_in_queue: float
        """

        self._waiting_time_in_queue = waiting_time_in_queue
