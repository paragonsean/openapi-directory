# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.vehicle_profile_id import VehicleProfileId
from openapi_server import util


class MatrixRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, fail_fast: bool=True, from_curbsides: List[str]=None, from_point_hints: List[str]=None, from_points: List[List[float]]=None, out_arrays: List[str]=None, snap_preventions: List[str]=None, to_curbsides: List[str]=None, to_point_hints: List[str]=None, to_points: List[List[float]]=None, turn_costs: bool=False, vehicle: VehicleProfileId=None):
        """MatrixRequest - a model defined in OpenAPI

        :param fail_fast: The fail_fast of this MatrixRequest.
        :param from_curbsides: The from_curbsides of this MatrixRequest.
        :param from_point_hints: The from_point_hints of this MatrixRequest.
        :param from_points: The from_points of this MatrixRequest.
        :param out_arrays: The out_arrays of this MatrixRequest.
        :param snap_preventions: The snap_preventions of this MatrixRequest.
        :param to_curbsides: The to_curbsides of this MatrixRequest.
        :param to_point_hints: The to_point_hints of this MatrixRequest.
        :param to_points: The to_points of this MatrixRequest.
        :param turn_costs: The turn_costs of this MatrixRequest.
        :param vehicle: The vehicle of this MatrixRequest.
        """
        self.openapi_types = {
            'fail_fast': bool,
            'from_curbsides': List[str],
            'from_point_hints': List[str],
            'from_points': List[List[float]],
            'out_arrays': List[str],
            'snap_preventions': List[str],
            'to_curbsides': List[str],
            'to_point_hints': List[str],
            'to_points': List[List[float]],
            'turn_costs': bool,
            'vehicle': VehicleProfileId
        }

        self.attribute_map = {
            'fail_fast': 'fail_fast',
            'from_curbsides': 'from_curbsides',
            'from_point_hints': 'from_point_hints',
            'from_points': 'from_points',
            'out_arrays': 'out_arrays',
            'snap_preventions': 'snap_preventions',
            'to_curbsides': 'to_curbsides',
            'to_point_hints': 'to_point_hints',
            'to_points': 'to_points',
            'turn_costs': 'turn_costs',
            'vehicle': 'vehicle'
        }

        self._fail_fast = fail_fast
        self._from_curbsides = from_curbsides
        self._from_point_hints = from_point_hints
        self._from_points = from_points
        self._out_arrays = out_arrays
        self._snap_preventions = snap_preventions
        self._to_curbsides = to_curbsides
        self._to_point_hints = to_point_hints
        self._to_points = to_points
        self._turn_costs = turn_costs
        self._vehicle = vehicle

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MatrixRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MatrixRequest of this MatrixRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def fail_fast(self):
        """Gets the fail_fast of this MatrixRequest.

        Specifies whether or not the matrix calculation should return with an error as soon as possible in case some points cannot be found or some points are not connected. If set to `false` the time/weight/distance matrix will be calculated for all valid points and contain the `null` value for all entries that could not be calculated. The `hint` field of the response will also contain additional information about what went wrong (see its documentation).

        :return: The fail_fast of this MatrixRequest.
        :rtype: bool
        """
        return self._fail_fast

    @fail_fast.setter
    def fail_fast(self, fail_fast):
        """Sets the fail_fast of this MatrixRequest.

        Specifies whether or not the matrix calculation should return with an error as soon as possible in case some points cannot be found or some points are not connected. If set to `false` the time/weight/distance matrix will be calculated for all valid points and contain the `null` value for all entries that could not be calculated. The `hint` field of the response will also contain additional information about what went wrong (see its documentation).

        :param fail_fast: The fail_fast of this MatrixRequest.
        :type fail_fast: bool
        """

        self._fail_fast = fail_fast

    @property
    def from_curbsides(self):
        """Gets the from_curbsides of this MatrixRequest.

        See `curbsides`of symmetrical matrix

        :return: The from_curbsides of this MatrixRequest.
        :rtype: List[str]
        """
        return self._from_curbsides

    @from_curbsides.setter
    def from_curbsides(self, from_curbsides):
        """Sets the from_curbsides of this MatrixRequest.

        See `curbsides`of symmetrical matrix

        :param from_curbsides: The from_curbsides of this MatrixRequest.
        :type from_curbsides: List[str]
        """

        self._from_curbsides = from_curbsides

    @property
    def from_point_hints(self):
        """Gets the from_point_hints of this MatrixRequest.

        See `point_hints`of symmetrical matrix

        :return: The from_point_hints of this MatrixRequest.
        :rtype: List[str]
        """
        return self._from_point_hints

    @from_point_hints.setter
    def from_point_hints(self, from_point_hints):
        """Sets the from_point_hints of this MatrixRequest.

        See `point_hints`of symmetrical matrix

        :param from_point_hints: The from_point_hints of this MatrixRequest.
        :type from_point_hints: List[str]
        """

        self._from_point_hints = from_point_hints

    @property
    def from_points(self):
        """Gets the from_points of this MatrixRequest.

        The starting points for the routes in an array of `[longitude,latitude]`. For instance, if you want to calculate three routes from point A such as A->1, A->2, A->3 then you have one `from_point` parameter and three `to_point` parameters.

        :return: The from_points of this MatrixRequest.
        :rtype: List[List[float]]
        """
        return self._from_points

    @from_points.setter
    def from_points(self, from_points):
        """Sets the from_points of this MatrixRequest.

        The starting points for the routes in an array of `[longitude,latitude]`. For instance, if you want to calculate three routes from point A such as A->1, A->2, A->3 then you have one `from_point` parameter and three `to_point` parameters.

        :param from_points: The from_points of this MatrixRequest.
        :type from_points: List[List[float]]
        """

        self._from_points = from_points

    @property
    def out_arrays(self):
        """Gets the out_arrays of this MatrixRequest.

        Specifies which matrices should be included in the response. Specify one or more of the following options `weights`, `times`, `distances`. The units of the entries of `distances` are meters, of `times` are seconds and of `weights` is arbitrary and it can differ for different vehicles or versions of this API.

        :return: The out_arrays of this MatrixRequest.
        :rtype: List[str]
        """
        return self._out_arrays

    @out_arrays.setter
    def out_arrays(self, out_arrays):
        """Sets the out_arrays of this MatrixRequest.

        Specifies which matrices should be included in the response. Specify one or more of the following options `weights`, `times`, `distances`. The units of the entries of `distances` are meters, of `times` are seconds and of `weights` is arbitrary and it can differ for different vehicles or versions of this API.

        :param out_arrays: The out_arrays of this MatrixRequest.
        :type out_arrays: List[str]
        """

        self._out_arrays = out_arrays

    @property
    def snap_preventions(self):
        """Gets the snap_preventions of this MatrixRequest.

        See `snap_preventions` of symmetrical matrix

        :return: The snap_preventions of this MatrixRequest.
        :rtype: List[str]
        """
        return self._snap_preventions

    @snap_preventions.setter
    def snap_preventions(self, snap_preventions):
        """Sets the snap_preventions of this MatrixRequest.

        See `snap_preventions` of symmetrical matrix

        :param snap_preventions: The snap_preventions of this MatrixRequest.
        :type snap_preventions: List[str]
        """

        self._snap_preventions = snap_preventions

    @property
    def to_curbsides(self):
        """Gets the to_curbsides of this MatrixRequest.

        See `curbsides`of symmetrical matrix

        :return: The to_curbsides of this MatrixRequest.
        :rtype: List[str]
        """
        return self._to_curbsides

    @to_curbsides.setter
    def to_curbsides(self, to_curbsides):
        """Sets the to_curbsides of this MatrixRequest.

        See `curbsides`of symmetrical matrix

        :param to_curbsides: The to_curbsides of this MatrixRequest.
        :type to_curbsides: List[str]
        """

        self._to_curbsides = to_curbsides

    @property
    def to_point_hints(self):
        """Gets the to_point_hints of this MatrixRequest.

        See `point_hints`of symmetrical matrix

        :return: The to_point_hints of this MatrixRequest.
        :rtype: List[str]
        """
        return self._to_point_hints

    @to_point_hints.setter
    def to_point_hints(self, to_point_hints):
        """Sets the to_point_hints of this MatrixRequest.

        See `point_hints`of symmetrical matrix

        :param to_point_hints: The to_point_hints of this MatrixRequest.
        :type to_point_hints: List[str]
        """

        self._to_point_hints = to_point_hints

    @property
    def to_points(self):
        """Gets the to_points of this MatrixRequest.

        The destination points for the routes in an array of `[longitude,latitude]`.

        :return: The to_points of this MatrixRequest.
        :rtype: List[List[float]]
        """
        return self._to_points

    @to_points.setter
    def to_points(self, to_points):
        """Sets the to_points of this MatrixRequest.

        The destination points for the routes in an array of `[longitude,latitude]`.

        :param to_points: The to_points of this MatrixRequest.
        :type to_points: List[List[float]]
        """

        self._to_points = to_points

    @property
    def turn_costs(self):
        """Gets the turn_costs of this MatrixRequest.

        Specifies if turn restrictions should be considered. Enabling this option increases the matrix computation time. Only supported for motor vehicles and OpenStreetMap.

        :return: The turn_costs of this MatrixRequest.
        :rtype: bool
        """
        return self._turn_costs

    @turn_costs.setter
    def turn_costs(self, turn_costs):
        """Sets the turn_costs of this MatrixRequest.

        Specifies if turn restrictions should be considered. Enabling this option increases the matrix computation time. Only supported for motor vehicles and OpenStreetMap.

        :param turn_costs: The turn_costs of this MatrixRequest.
        :type turn_costs: bool
        """

        self._turn_costs = turn_costs

    @property
    def vehicle(self):
        """Gets the vehicle of this MatrixRequest.


        :return: The vehicle of this MatrixRequest.
        :rtype: VehicleProfileId
        """
        return self._vehicle

    @vehicle.setter
    def vehicle(self, vehicle):
        """Sets the vehicle of this MatrixRequest.


        :param vehicle: The vehicle of this MatrixRequest.
        :type vehicle: VehicleProfileId
        """

        self._vehicle = vehicle
