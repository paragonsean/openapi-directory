# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TimeWindowBreak(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, duration: int=None, earliest: int=None, latest: int=None):
        """TimeWindowBreak - a model defined in OpenAPI

        :param duration: The duration of this TimeWindowBreak.
        :param earliest: The earliest of this TimeWindowBreak.
        :param latest: The latest of this TimeWindowBreak.
        """
        self.openapi_types = {
            'duration': int,
            'earliest': int,
            'latest': int
        }

        self.attribute_map = {
            'duration': 'duration',
            'earliest': 'earliest',
            'latest': 'latest'
        }

        self._duration = duration
        self._earliest = earliest
        self._latest = latest

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TimeWindowBreak':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TimeWindowBreak of this TimeWindowBreak.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def duration(self):
        """Gets the duration of this TimeWindowBreak.

        Specifies the duration of the break in seconds.

        :return: The duration of this TimeWindowBreak.
        :rtype: int
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this TimeWindowBreak.

        Specifies the duration of the break in seconds.

        :param duration: The duration of this TimeWindowBreak.
        :type duration: int
        """
        if duration is None:
            raise ValueError("Invalid value for `duration`, must not be `None`")

        self._duration = duration

    @property
    def earliest(self):
        """Gets the earliest of this TimeWindowBreak.

        Specifies the earliest start time of the break in seconds.

        :return: The earliest of this TimeWindowBreak.
        :rtype: int
        """
        return self._earliest

    @earliest.setter
    def earliest(self, earliest):
        """Sets the earliest of this TimeWindowBreak.

        Specifies the earliest start time of the break in seconds.

        :param earliest: The earliest of this TimeWindowBreak.
        :type earliest: int
        """
        if earliest is None:
            raise ValueError("Invalid value for `earliest`, must not be `None`")

        self._earliest = earliest

    @property
    def latest(self):
        """Gets the latest of this TimeWindowBreak.

        Specifies the latest start time of break in seconds.

        :return: The latest of this TimeWindowBreak.
        :rtype: int
        """
        return self._latest

    @latest.setter
    def latest(self, latest):
        """Sets the latest of this TimeWindowBreak.

        Specifies the latest start time of break in seconds.

        :param latest: The latest of this TimeWindowBreak.
        :type latest: int
        """
        if latest is None:
            raise ValueError("Invalid value for `latest`, must not be `None`")

        self._latest = latest
