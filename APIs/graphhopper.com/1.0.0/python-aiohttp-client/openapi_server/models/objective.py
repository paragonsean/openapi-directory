# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Objective(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, type: str='min', value: str='transport_time'):
        """Objective - a model defined in OpenAPI

        :param type: The type of this Objective.
        :param value: The value of this Objective.
        """
        self.openapi_types = {
            'type': str,
            'value': str
        }

        self.attribute_map = {
            'type': 'type',
            'value': 'value'
        }

        self._type = type
        self._value = value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Objective':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Objective of this Objective.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def type(self):
        """Gets the type of this Objective.

        Type of objective function, i.e. `min` or `min-max`.   * `min`: Minimizes the objective value.  * `min-max`: Minimizes the maximum objective value.  For instance, `min` -> `vehicles` minimizes the number of employed vehicles. `min` -> `completion_time` minimizes the sum of your vehicle routes' completion time.  If you use, for example, `min-max` -> `completion_time`, it minimizes the maximum of your vehicle routes' completion time, i.e. it minimizes the overall makespan. This only makes sense if you have more than one vehicle. In case of one vehicle, switching from `min` to `min-max` should not have any impact. If you have more than one vehicle, then the algorithm tries to constantly move stops from one vehicle to another such that the completion time of longest vehicle route can be further reduced. For example, if you have one vehicle that takes 8 hours to serve all customers, adding another vehicle (and using `min-max`) might halve the time to serve all customers to 4 hours. However, this usually comes with higher transport costs.  If you want to minimize `vehicles` first and, second, `completion_time`, you can also combine different objectives like this:  ```json \"objectives\" : [    {       \"type\": \"min\",       \"value\": \"vehicles\"    },    {       \"type\": \"min\",       \"value\": \"completion_time\"    } ] ```  If you want to balance activities or the number of stops among all employed drivers, you need to specify it as follows:  ```json \"objectives\" : [    {       \"type\": \"min-max\",       \"value\": \"completion_time\"    },    {       \"type\": \"min-max\",       \"value\": \"activities\"    } ] ``` 

        :return: The type of this Objective.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Objective.

        Type of objective function, i.e. `min` or `min-max`.   * `min`: Minimizes the objective value.  * `min-max`: Minimizes the maximum objective value.  For instance, `min` -> `vehicles` minimizes the number of employed vehicles. `min` -> `completion_time` minimizes the sum of your vehicle routes' completion time.  If you use, for example, `min-max` -> `completion_time`, it minimizes the maximum of your vehicle routes' completion time, i.e. it minimizes the overall makespan. This only makes sense if you have more than one vehicle. In case of one vehicle, switching from `min` to `min-max` should not have any impact. If you have more than one vehicle, then the algorithm tries to constantly move stops from one vehicle to another such that the completion time of longest vehicle route can be further reduced. For example, if you have one vehicle that takes 8 hours to serve all customers, adding another vehicle (and using `min-max`) might halve the time to serve all customers to 4 hours. However, this usually comes with higher transport costs.  If you want to minimize `vehicles` first and, second, `completion_time`, you can also combine different objectives like this:  ```json \"objectives\" : [    {       \"type\": \"min\",       \"value\": \"vehicles\"    },    {       \"type\": \"min\",       \"value\": \"completion_time\"    } ] ```  If you want to balance activities or the number of stops among all employed drivers, you need to specify it as follows:  ```json \"objectives\" : [    {       \"type\": \"min-max\",       \"value\": \"completion_time\"    },    {       \"type\": \"min-max\",       \"value\": \"activities\"    } ] ``` 

        :param type: The type of this Objective.
        :type type: str
        """
        allowed_values = ["min", "min-max"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def value(self):
        """Gets the value of this Objective.

        The value of the objective function. The objective value `transport_time` solely considers the time your drivers spend on the road, i.e. transport time. In contrary to `transport_time`, `completion_time` also takes waiting times at customer sites into account. The `completion_time` of a route is defined as the time from starting to ending the route, i.e. the route's transport time, the sum of waiting times plus the sum of activity durations. Note that choosing `transport_time` or `completion_time` only makes a difference if you specified time windows for your services/shipments since only in scenarios with time windows waiting times can occur. The objective value `vehicles` can only be used along with `min` and minimizes vehicles. 

        :return: The value of this Objective.
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this Objective.

        The value of the objective function. The objective value `transport_time` solely considers the time your drivers spend on the road, i.e. transport time. In contrary to `transport_time`, `completion_time` also takes waiting times at customer sites into account. The `completion_time` of a route is defined as the time from starting to ending the route, i.e. the route's transport time, the sum of waiting times plus the sum of activity durations. Note that choosing `transport_time` or `completion_time` only makes a difference if you specified time windows for your services/shipments since only in scenarios with time windows waiting times can occur. The objective value `vehicles` can only be used along with `min` and minimizes vehicles. 

        :param value: The value of this Objective.
        :type value: str
        """
        allowed_values = ["completion_time", "transport_time", "vehicles", "activities"]  # noqa: E501
        if value not in allowed_values:
            raise ValueError(
                "Invalid value for `value` ({0}), must be one of {1}"
                .format(value, allowed_values)
            )

        self._value = value
