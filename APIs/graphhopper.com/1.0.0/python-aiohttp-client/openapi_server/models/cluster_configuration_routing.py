# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ClusterConfigurationRouting(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cost_per_meter: float=None, cost_per_second: float=None, profile: str=None):
        """ClusterConfigurationRouting - a model defined in OpenAPI

        :param cost_per_meter: The cost_per_meter of this ClusterConfigurationRouting.
        :param cost_per_second: The cost_per_second of this ClusterConfigurationRouting.
        :param profile: The profile of this ClusterConfigurationRouting.
        """
        self.openapi_types = {
            'cost_per_meter': float,
            'cost_per_second': float,
            'profile': str
        }

        self.attribute_map = {
            'cost_per_meter': 'cost_per_meter',
            'cost_per_second': 'cost_per_second',
            'profile': 'profile'
        }

        self._cost_per_meter = cost_per_meter
        self._cost_per_second = cost_per_second
        self._profile = profile

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ClusterConfigurationRouting':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ClusterConfigurationRouting of this ClusterConfigurationRouting.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cost_per_meter(self):
        """Gets the cost_per_meter of this ClusterConfigurationRouting.

        Cost per meter (travel distance)

        :return: The cost_per_meter of this ClusterConfigurationRouting.
        :rtype: float
        """
        return self._cost_per_meter

    @cost_per_meter.setter
    def cost_per_meter(self, cost_per_meter):
        """Sets the cost_per_meter of this ClusterConfigurationRouting.

        Cost per meter (travel distance)

        :param cost_per_meter: The cost_per_meter of this ClusterConfigurationRouting.
        :type cost_per_meter: float
        """

        self._cost_per_meter = cost_per_meter

    @property
    def cost_per_second(self):
        """Gets the cost_per_second of this ClusterConfigurationRouting.

        Cost per second (travel time)

        :return: The cost_per_second of this ClusterConfigurationRouting.
        :rtype: float
        """
        return self._cost_per_second

    @cost_per_second.setter
    def cost_per_second(self, cost_per_second):
        """Sets the cost_per_second of this ClusterConfigurationRouting.

        Cost per second (travel time)

        :param cost_per_second: The cost_per_second of this ClusterConfigurationRouting.
        :type cost_per_second: float
        """

        self._cost_per_second = cost_per_second

    @property
    def profile(self):
        """Gets the profile of this ClusterConfigurationRouting.

        The routing profile for which the travel times and distances should be calculated. Other profiles are listed [here](#section/Map-Data-and-Routing-Profiles/OpenStreetMap)

        :return: The profile of this ClusterConfigurationRouting.
        :rtype: str
        """
        return self._profile

    @profile.setter
    def profile(self, profile):
        """Sets the profile of this ClusterConfigurationRouting.

        The routing profile for which the travel times and distances should be calculated. Other profiles are listed [here](#section/Map-Data-and-Routing-Profiles/OpenStreetMap)

        :param profile: The profile of this ClusterConfigurationRouting.
        :type profile: str
        """

        self._profile = profile
