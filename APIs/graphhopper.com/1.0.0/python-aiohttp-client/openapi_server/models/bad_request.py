# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.error_message import ErrorMessage
from openapi_server import util


class BadRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, hints: List[ErrorMessage]=None, message: str=None, status: str='finished'):
        """BadRequest - a model defined in OpenAPI

        :param hints: The hints of this BadRequest.
        :param message: The message of this BadRequest.
        :param status: The status of this BadRequest.
        """
        self.openapi_types = {
            'hints': List[ErrorMessage],
            'message': str,
            'status': str
        }

        self.attribute_map = {
            'hints': 'hints',
            'message': 'message',
            'status': 'status'
        }

        self._hints = hints
        self._message = message
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BadRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BadRequest of this BadRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def hints(self):
        """Gets the hints of this BadRequest.

        Optional error information.

        :return: The hints of this BadRequest.
        :rtype: List[ErrorMessage]
        """
        return self._hints

    @hints.setter
    def hints(self, hints):
        """Sets the hints of this BadRequest.

        Optional error information.

        :param hints: The hints of this BadRequest.
        :type hints: List[ErrorMessage]
        """

        self._hints = hints

    @property
    def message(self):
        """Gets the message of this BadRequest.

        Short error message

        :return: The message of this BadRequest.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this BadRequest.

        Short error message

        :param message: The message of this BadRequest.
        :type message: str
        """

        self._message = message

    @property
    def status(self):
        """Gets the status of this BadRequest.

        status

        :return: The status of this BadRequest.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this BadRequest.

        status

        :param status: The status of this BadRequest.
        :type status: str
        """

        self._status = status
