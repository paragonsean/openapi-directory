# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Algorithm(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, objective: str=None, problem_type: str=None):
        """Algorithm - a model defined in OpenAPI

        :param objective: The objective of this Algorithm.
        :param problem_type: The problem_type of this Algorithm.
        """
        self.openapi_types = {
            'objective': str,
            'problem_type': str
        }

        self.attribute_map = {
            'objective': 'objective',
            'problem_type': 'problem_type'
        }

        self._objective = objective
        self._problem_type = problem_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Algorithm':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Algorithm of this Algorithm.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def objective(self):
        """Gets the objective of this Algorithm.


        :return: The objective of this Algorithm.
        :rtype: str
        """
        return self._objective

    @objective.setter
    def objective(self, objective):
        """Sets the objective of this Algorithm.


        :param objective: The objective of this Algorithm.
        :type objective: str
        """
        allowed_values = ["transport_time", "completion_time"]  # noqa: E501
        if objective not in allowed_values:
            raise ValueError(
                "Invalid value for `objective` ({0}), must be one of {1}"
                .format(objective, allowed_values)
            )

        self._objective = objective

    @property
    def problem_type(self):
        """Gets the problem_type of this Algorithm.


        :return: The problem_type of this Algorithm.
        :rtype: str
        """
        return self._problem_type

    @problem_type.setter
    def problem_type(self, problem_type):
        """Sets the problem_type of this Algorithm.


        :param problem_type: The problem_type of this Algorithm.
        :type problem_type: str
        """
        allowed_values = ["min", "min-max"]  # noqa: E501
        if problem_type not in allowed_values:
            raise ValueError(
                "Invalid value for `problem_type` ({0}), must be one of {1}"
                .format(problem_type, allowed_values)
            )

        self._problem_type = problem_type
