# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.cluster_customer_address import ClusterCustomerAddress
from openapi_server import util


class ClusterCustomer(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, address: ClusterCustomerAddress=None, id: str=None, quantity: float=None):
        """ClusterCustomer - a model defined in OpenAPI

        :param address: The address of this ClusterCustomer.
        :param id: The id of this ClusterCustomer.
        :param quantity: The quantity of this ClusterCustomer.
        """
        self.openapi_types = {
            'address': ClusterCustomerAddress,
            'id': str,
            'quantity': float
        }

        self.attribute_map = {
            'address': 'address',
            'id': 'id',
            'quantity': 'quantity'
        }

        self._address = address
        self._id = id
        self._quantity = quantity

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ClusterCustomer':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ClusterCustomer of this ClusterCustomer.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def address(self):
        """Gets the address of this ClusterCustomer.


        :return: The address of this ClusterCustomer.
        :rtype: ClusterCustomerAddress
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this ClusterCustomer.


        :param address: The address of this ClusterCustomer.
        :type address: ClusterCustomerAddress
        """

        self._address = address

    @property
    def id(self):
        """Gets the id of this ClusterCustomer.

        id of customer

        :return: The id of this ClusterCustomer.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ClusterCustomer.

        id of customer

        :param id: The id of this ClusterCustomer.
        :type id: str
        """

        self._id = id

    @property
    def quantity(self):
        """Gets the quantity of this ClusterCustomer.

        demand of customer

        :return: The quantity of this ClusterCustomer.
        :rtype: float
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this ClusterCustomer.

        demand of customer

        :param quantity: The quantity of this ClusterCustomer.
        :type quantity: float
        """

        self._quantity = quantity
