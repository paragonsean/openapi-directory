# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.address import Address
from openapi_server.models.vehicle_break import VehicleBreak
from openapi_server import util


class Vehicle(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, _break: VehicleBreak=None, earliest_start: int=0, end_address: Address=None, latest_end: int=None, max_activities: int=None, max_distance: int=None, max_driving_time: int=None, max_jobs: int=None, min_jobs: int=None, move_to_end_address: bool=None, return_to_depot: bool=True, skills: List[str]=None, start_address: Address=None, type_id: str='default-type', vehicle_id: str=None):
        """Vehicle - a model defined in OpenAPI

        :param _break: The _break of this Vehicle.
        :param earliest_start: The earliest_start of this Vehicle.
        :param end_address: The end_address of this Vehicle.
        :param latest_end: The latest_end of this Vehicle.
        :param max_activities: The max_activities of this Vehicle.
        :param max_distance: The max_distance of this Vehicle.
        :param max_driving_time: The max_driving_time of this Vehicle.
        :param max_jobs: The max_jobs of this Vehicle.
        :param min_jobs: The min_jobs of this Vehicle.
        :param move_to_end_address: The move_to_end_address of this Vehicle.
        :param return_to_depot: The return_to_depot of this Vehicle.
        :param skills: The skills of this Vehicle.
        :param start_address: The start_address of this Vehicle.
        :param type_id: The type_id of this Vehicle.
        :param vehicle_id: The vehicle_id of this Vehicle.
        """
        self.openapi_types = {
            '_break': VehicleBreak,
            'earliest_start': int,
            'end_address': Address,
            'latest_end': int,
            'max_activities': int,
            'max_distance': int,
            'max_driving_time': int,
            'max_jobs': int,
            'min_jobs': int,
            'move_to_end_address': bool,
            'return_to_depot': bool,
            'skills': List[str],
            'start_address': Address,
            'type_id': str,
            'vehicle_id': str
        }

        self.attribute_map = {
            '_break': 'break',
            'earliest_start': 'earliest_start',
            'end_address': 'end_address',
            'latest_end': 'latest_end',
            'max_activities': 'max_activities',
            'max_distance': 'max_distance',
            'max_driving_time': 'max_driving_time',
            'max_jobs': 'max_jobs',
            'min_jobs': 'min_jobs',
            'move_to_end_address': 'move_to_end_address',
            'return_to_depot': 'return_to_depot',
            'skills': 'skills',
            'start_address': 'start_address',
            'type_id': 'type_id',
            'vehicle_id': 'vehicle_id'
        }

        self.__break = _break
        self._earliest_start = earliest_start
        self._end_address = end_address
        self._latest_end = latest_end
        self._max_activities = max_activities
        self._max_distance = max_distance
        self._max_driving_time = max_driving_time
        self._max_jobs = max_jobs
        self._min_jobs = min_jobs
        self._move_to_end_address = move_to_end_address
        self._return_to_depot = return_to_depot
        self._skills = skills
        self._start_address = start_address
        self._type_id = type_id
        self._vehicle_id = vehicle_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Vehicle':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Vehicle of this Vehicle.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def _break(self):
        """Gets the _break of this Vehicle.


        :return: The _break of this Vehicle.
        :rtype: VehicleBreak
        """
        return self.__break

    @_break.setter
    def _break(self, _break):
        """Sets the _break of this Vehicle.


        :param _break: The _break of this Vehicle.
        :type _break: VehicleBreak
        """

        self.__break = _break

    @property
    def earliest_start(self):
        """Gets the earliest_start of this Vehicle.

        Earliest start of vehicle in seconds. It is recommended to use the unix timestamp.

        :return: The earliest_start of this Vehicle.
        :rtype: int
        """
        return self._earliest_start

    @earliest_start.setter
    def earliest_start(self, earliest_start):
        """Sets the earliest_start of this Vehicle.

        Earliest start of vehicle in seconds. It is recommended to use the unix timestamp.

        :param earliest_start: The earliest_start of this Vehicle.
        :type earliest_start: int
        """

        self._earliest_start = earliest_start

    @property
    def end_address(self):
        """Gets the end_address of this Vehicle.


        :return: The end_address of this Vehicle.
        :rtype: Address
        """
        return self._end_address

    @end_address.setter
    def end_address(self, end_address):
        """Sets the end_address of this Vehicle.


        :param end_address: The end_address of this Vehicle.
        :type end_address: Address
        """

        self._end_address = end_address

    @property
    def latest_end(self):
        """Gets the latest_end of this Vehicle.

        Latest end of vehicle in seconds, i.e. the time the vehicle needs to be at its end location at latest.

        :return: The latest_end of this Vehicle.
        :rtype: int
        """
        return self._latest_end

    @latest_end.setter
    def latest_end(self, latest_end):
        """Sets the latest_end of this Vehicle.

        Latest end of vehicle in seconds, i.e. the time the vehicle needs to be at its end location at latest.

        :param latest_end: The latest_end of this Vehicle.
        :type latest_end: int
        """

        self._latest_end = latest_end

    @property
    def max_activities(self):
        """Gets the max_activities of this Vehicle.

        Specifies the maximum number of activities a vehicle can conduct.

        :return: The max_activities of this Vehicle.
        :rtype: int
        """
        return self._max_activities

    @max_activities.setter
    def max_activities(self, max_activities):
        """Sets the max_activities of this Vehicle.

        Specifies the maximum number of activities a vehicle can conduct.

        :param max_activities: The max_activities of this Vehicle.
        :type max_activities: int
        """

        self._max_activities = max_activities

    @property
    def max_distance(self):
        """Gets the max_distance of this Vehicle.

        Specifies the maximum distance (in meters) a vehicle can go.

        :return: The max_distance of this Vehicle.
        :rtype: int
        """
        return self._max_distance

    @max_distance.setter
    def max_distance(self, max_distance):
        """Sets the max_distance of this Vehicle.

        Specifies the maximum distance (in meters) a vehicle can go.

        :param max_distance: The max_distance of this Vehicle.
        :type max_distance: int
        """

        self._max_distance = max_distance

    @property
    def max_driving_time(self):
        """Gets the max_driving_time of this Vehicle.

        Specifies the maximum drive time (in seconds) a vehicle/driver can go, i.e. the maximum time on the road (service and waiting times are not included here)

        :return: The max_driving_time of this Vehicle.
        :rtype: int
        """
        return self._max_driving_time

    @max_driving_time.setter
    def max_driving_time(self, max_driving_time):
        """Sets the max_driving_time of this Vehicle.

        Specifies the maximum drive time (in seconds) a vehicle/driver can go, i.e. the maximum time on the road (service and waiting times are not included here)

        :param max_driving_time: The max_driving_time of this Vehicle.
        :type max_driving_time: int
        """

        self._max_driving_time = max_driving_time

    @property
    def max_jobs(self):
        """Gets the max_jobs of this Vehicle.

        Specifies the maximum number of jobs a vehicle can load.

        :return: The max_jobs of this Vehicle.
        :rtype: int
        """
        return self._max_jobs

    @max_jobs.setter
    def max_jobs(self, max_jobs):
        """Sets the max_jobs of this Vehicle.

        Specifies the maximum number of jobs a vehicle can load.

        :param max_jobs: The max_jobs of this Vehicle.
        :type max_jobs: int
        """

        self._max_jobs = max_jobs

    @property
    def min_jobs(self):
        """Gets the min_jobs of this Vehicle.

        Specifies the minimum number of jobs a vehicle should load. This is a soft constraint, i.e. if it is not possible to fulfill “min_jobs”, we will still try to get as close as possible to this constraint.

        :return: The min_jobs of this Vehicle.
        :rtype: int
        """
        return self._min_jobs

    @min_jobs.setter
    def min_jobs(self, min_jobs):
        """Sets the min_jobs of this Vehicle.

        Specifies the minimum number of jobs a vehicle should load. This is a soft constraint, i.e. if it is not possible to fulfill “min_jobs”, we will still try to get as close as possible to this constraint.

        :param min_jobs: The min_jobs of this Vehicle.
        :type min_jobs: int
        """

        self._min_jobs = min_jobs

    @property
    def move_to_end_address(self):
        """Gets the move_to_end_address of this Vehicle.

        Indicates whether a vehicle should be moved even though it has not been assigned any jobs.

        :return: The move_to_end_address of this Vehicle.
        :rtype: bool
        """
        return self._move_to_end_address

    @move_to_end_address.setter
    def move_to_end_address(self, move_to_end_address):
        """Sets the move_to_end_address of this Vehicle.

        Indicates whether a vehicle should be moved even though it has not been assigned any jobs.

        :param move_to_end_address: The move_to_end_address of this Vehicle.
        :type move_to_end_address: bool
        """

        self._move_to_end_address = move_to_end_address

    @property
    def return_to_depot(self):
        """Gets the return_to_depot of this Vehicle.

        If it is false, the algorithm decides where to end the vehicle route. It ends in one of your customers' locations. The end is chosen such that it contributes to the overall objective function, e.g. min transport_time. If it is true, you can either specify a specific end location (which is then regarded as end depot) or you can leave it and the driver returns to its start location.

        :return: The return_to_depot of this Vehicle.
        :rtype: bool
        """
        return self._return_to_depot

    @return_to_depot.setter
    def return_to_depot(self, return_to_depot):
        """Sets the return_to_depot of this Vehicle.

        If it is false, the algorithm decides where to end the vehicle route. It ends in one of your customers' locations. The end is chosen such that it contributes to the overall objective function, e.g. min transport_time. If it is true, you can either specify a specific end location (which is then regarded as end depot) or you can leave it and the driver returns to its start location.

        :param return_to_depot: The return_to_depot of this Vehicle.
        :type return_to_depot: bool
        """

        self._return_to_depot = return_to_depot

    @property
    def skills(self):
        """Gets the skills of this Vehicle.

        Array of skills, i.e. array of string (not case sensitive).

        :return: The skills of this Vehicle.
        :rtype: List[str]
        """
        return self._skills

    @skills.setter
    def skills(self, skills):
        """Sets the skills of this Vehicle.

        Array of skills, i.e. array of string (not case sensitive).

        :param skills: The skills of this Vehicle.
        :type skills: List[str]
        """

        self._skills = skills

    @property
    def start_address(self):
        """Gets the start_address of this Vehicle.


        :return: The start_address of this Vehicle.
        :rtype: Address
        """
        return self._start_address

    @start_address.setter
    def start_address(self, start_address):
        """Sets the start_address of this Vehicle.


        :param start_address: The start_address of this Vehicle.
        :type start_address: Address
        """
        if start_address is None:
            raise ValueError("Invalid value for `start_address`, must not be `None`")

        self._start_address = start_address

    @property
    def type_id(self):
        """Gets the type_id of this Vehicle.

        The type ID assigns a vehicle type to this vehicle. You can specify types in the array of vehicle types. If you omit the type ID, the default type is used. The default type is a `car` with a capacity of 0.

        :return: The type_id of this Vehicle.
        :rtype: str
        """
        return self._type_id

    @type_id.setter
    def type_id(self, type_id):
        """Sets the type_id of this Vehicle.

        The type ID assigns a vehicle type to this vehicle. You can specify types in the array of vehicle types. If you omit the type ID, the default type is used. The default type is a `car` with a capacity of 0.

        :param type_id: The type_id of this Vehicle.
        :type type_id: str
        """

        self._type_id = type_id

    @property
    def vehicle_id(self):
        """Gets the vehicle_id of this Vehicle.

        Specifies the ID of the vehicle. Ids must be unique, i.e. if there are two vehicles with the same ID, an error is returned.

        :return: The vehicle_id of this Vehicle.
        :rtype: str
        """
        return self._vehicle_id

    @vehicle_id.setter
    def vehicle_id(self, vehicle_id):
        """Sets the vehicle_id of this Vehicle.

        Specifies the ID of the vehicle. Ids must be unique, i.e. if there are two vehicles with the same ID, an error is returned.

        :param vehicle_id: The vehicle_id of this Vehicle.
        :type vehicle_id: str
        """
        if vehicle_id is None:
            raise ValueError("Invalid value for `vehicle_id`, must not be `None`")

        self._vehicle_id = vehicle_id
