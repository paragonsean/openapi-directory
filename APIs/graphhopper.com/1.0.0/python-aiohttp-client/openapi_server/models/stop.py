# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.address import Address
from openapi_server.models.time_window import TimeWindow
from openapi_server import util


class Stop(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, address: Address=None, duration: int=0, group: str=None, preparation_time: int=0, time_windows: List[TimeWindow]=None):
        """Stop - a model defined in OpenAPI

        :param address: The address of this Stop.
        :param duration: The duration of this Stop.
        :param group: The group of this Stop.
        :param preparation_time: The preparation_time of this Stop.
        :param time_windows: The time_windows of this Stop.
        """
        self.openapi_types = {
            'address': Address,
            'duration': int,
            'group': str,
            'preparation_time': int,
            'time_windows': List[TimeWindow]
        }

        self.attribute_map = {
            'address': 'address',
            'duration': 'duration',
            'group': 'group',
            'preparation_time': 'preparation_time',
            'time_windows': 'time_windows'
        }

        self._address = address
        self._duration = duration
        self._group = group
        self._preparation_time = preparation_time
        self._time_windows = time_windows

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Stop':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Stop of this Stop.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def address(self):
        """Gets the address of this Stop.


        :return: The address of this Stop.
        :rtype: Address
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this Stop.


        :param address: The address of this Stop.
        :type address: Address
        """

        self._address = address

    @property
    def duration(self):
        """Gets the duration of this Stop.

        Specifies the duration of the pickup or delivery in seconds, e.g. how long it takes unload items at the customer site.

        :return: The duration of this Stop.
        :rtype: int
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this Stop.

        Specifies the duration of the pickup or delivery in seconds, e.g. how long it takes unload items at the customer site.

        :param duration: The duration of this Stop.
        :type duration: int
        """
        if duration is not None and duration > 604800:
            raise ValueError("Invalid value for `duration`, must be a value less than or equal to `604800`")
        if duration is not None and duration < 0:
            raise ValueError("Invalid value for `duration`, must be a value greater than or equal to `0`")

        self._duration = duration

    @property
    def group(self):
        """Gets the group of this Stop.

        Group this stop belongs to. See the group relation and [this post](https://discuss.graphhopper.com/t/4040) on how to utilize this.

        :return: The group of this Stop.
        :rtype: str
        """
        return self._group

    @group.setter
    def group(self, group):
        """Sets the group of this Stop.

        Group this stop belongs to. See the group relation and [this post](https://discuss.graphhopper.com/t/4040) on how to utilize this.

        :param group: The group of this Stop.
        :type group: str
        """

        self._group = group

    @property
    def preparation_time(self):
        """Gets the preparation_time of this Stop.

        Specifies the preparation time in seconds. It can be used to model parking lot search time since if you have 3 identical locations in a row, it only falls due once.

        :return: The preparation_time of this Stop.
        :rtype: int
        """
        return self._preparation_time

    @preparation_time.setter
    def preparation_time(self, preparation_time):
        """Sets the preparation_time of this Stop.

        Specifies the preparation time in seconds. It can be used to model parking lot search time since if you have 3 identical locations in a row, it only falls due once.

        :param preparation_time: The preparation_time of this Stop.
        :type preparation_time: int
        """
        if preparation_time is not None and preparation_time > 604800:
            raise ValueError("Invalid value for `preparation_time`, must be a value less than or equal to `604800`")
        if preparation_time is not None and preparation_time < 0:
            raise ValueError("Invalid value for `preparation_time`, must be a value greater than or equal to `0`")

        self._preparation_time = preparation_time

    @property
    def time_windows(self):
        """Gets the time_windows of this Stop.

        Specifies an array of time window objects (see time window object below). For example, if an item needs to be delivered between 7am and 10am then specify the array as follows: [ { \"earliest\": 25200, \"latest\" : 32400 } ] (starting the day from 0 in seconds).

        :return: The time_windows of this Stop.
        :rtype: List[TimeWindow]
        """
        return self._time_windows

    @time_windows.setter
    def time_windows(self, time_windows):
        """Sets the time_windows of this Stop.

        Specifies an array of time window objects (see time window object below). For example, if an item needs to be delivered between 7am and 10am then specify the array as follows: [ { \"earliest\": 25200, \"latest\" : 32400 } ] (starting the day from 0 in seconds).

        :param time_windows: The time_windows of this Stop.
        :type time_windows: List[TimeWindow]
        """

        self._time_windows = time_windows
