# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DriveTimeBreak(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, duration: int=None, initial_driving_time: int=None, max_driving_time: int=None, possible_split: List[int]=None):
        """DriveTimeBreak - a model defined in OpenAPI

        :param duration: The duration of this DriveTimeBreak.
        :param initial_driving_time: The initial_driving_time of this DriveTimeBreak.
        :param max_driving_time: The max_driving_time of this DriveTimeBreak.
        :param possible_split: The possible_split of this DriveTimeBreak.
        """
        self.openapi_types = {
            'duration': int,
            'initial_driving_time': int,
            'max_driving_time': int,
            'possible_split': List[int]
        }

        self.attribute_map = {
            'duration': 'duration',
            'initial_driving_time': 'initial_driving_time',
            'max_driving_time': 'max_driving_time',
            'possible_split': 'possible_split'
        }

        self._duration = duration
        self._initial_driving_time = initial_driving_time
        self._max_driving_time = max_driving_time
        self._possible_split = possible_split

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DriveTimeBreak':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DriveTimeBreak of this DriveTimeBreak.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def duration(self):
        """Gets the duration of this DriveTimeBreak.

        Specifies the duration of the break in seconds.

        :return: The duration of this DriveTimeBreak.
        :rtype: int
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this DriveTimeBreak.

        Specifies the duration of the break in seconds.

        :param duration: The duration of this DriveTimeBreak.
        :type duration: int
        """
        if duration is None:
            raise ValueError("Invalid value for `duration`, must not be `None`")

        self._duration = duration

    @property
    def initial_driving_time(self):
        """Gets the initial_driving_time of this DriveTimeBreak.

        Specifies the initial (current) driving time of a driver to allow dynamic adaptations in seconds.

        :return: The initial_driving_time of this DriveTimeBreak.
        :rtype: int
        """
        return self._initial_driving_time

    @initial_driving_time.setter
    def initial_driving_time(self, initial_driving_time):
        """Sets the initial_driving_time of this DriveTimeBreak.

        Specifies the initial (current) driving time of a driver to allow dynamic adaptations in seconds.

        :param initial_driving_time: The initial_driving_time of this DriveTimeBreak.
        :type initial_driving_time: int
        """

        self._initial_driving_time = initial_driving_time

    @property
    def max_driving_time(self):
        """Gets the max_driving_time of this DriveTimeBreak.

        Specifies the max driving time (in a row) without break in seconds.

        :return: The max_driving_time of this DriveTimeBreak.
        :rtype: int
        """
        return self._max_driving_time

    @max_driving_time.setter
    def max_driving_time(self, max_driving_time):
        """Sets the max_driving_time of this DriveTimeBreak.

        Specifies the max driving time (in a row) without break in seconds.

        :param max_driving_time: The max_driving_time of this DriveTimeBreak.
        :type max_driving_time: int
        """
        if max_driving_time is None:
            raise ValueError("Invalid value for `max_driving_time`, must not be `None`")

        self._max_driving_time = max_driving_time

    @property
    def possible_split(self):
        """Gets the possible_split of this DriveTimeBreak.

        Array specifying how a break duration (in seconds) can be split into several smaller breaks

        :return: The possible_split of this DriveTimeBreak.
        :rtype: List[int]
        """
        return self._possible_split

    @possible_split.setter
    def possible_split(self, possible_split):
        """Sets the possible_split of this DriveTimeBreak.

        Array specifying how a break duration (in seconds) can be split into several smaller breaks

        :param possible_split: The possible_split of this DriveTimeBreak.
        :type possible_split: List[int]
        """

        self._possible_split = possible_split
