# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.stop import Stop
from openapi_server import util


class Shipment(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, allowed_vehicles: List[str]=None, delivery: Stop=None, disallowed_vehicles: List[str]=None, id: str=None, max_time_in_vehicle: int=None, name: str=None, pickup: Stop=None, priority: int=2, required_skills: List[str]=None, size: List[int]=[0]):
        """Shipment - a model defined in OpenAPI

        :param allowed_vehicles: The allowed_vehicles of this Shipment.
        :param delivery: The delivery of this Shipment.
        :param disallowed_vehicles: The disallowed_vehicles of this Shipment.
        :param id: The id of this Shipment.
        :param max_time_in_vehicle: The max_time_in_vehicle of this Shipment.
        :param name: The name of this Shipment.
        :param pickup: The pickup of this Shipment.
        :param priority: The priority of this Shipment.
        :param required_skills: The required_skills of this Shipment.
        :param size: The size of this Shipment.
        """
        self.openapi_types = {
            'allowed_vehicles': List[str],
            'delivery': Stop,
            'disallowed_vehicles': List[str],
            'id': str,
            'max_time_in_vehicle': int,
            'name': str,
            'pickup': Stop,
            'priority': int,
            'required_skills': List[str],
            'size': List[int]
        }

        self.attribute_map = {
            'allowed_vehicles': 'allowed_vehicles',
            'delivery': 'delivery',
            'disallowed_vehicles': 'disallowed_vehicles',
            'id': 'id',
            'max_time_in_vehicle': 'max_time_in_vehicle',
            'name': 'name',
            'pickup': 'pickup',
            'priority': 'priority',
            'required_skills': 'required_skills',
            'size': 'size'
        }

        self._allowed_vehicles = allowed_vehicles
        self._delivery = delivery
        self._disallowed_vehicles = disallowed_vehicles
        self._id = id
        self._max_time_in_vehicle = max_time_in_vehicle
        self._name = name
        self._pickup = pickup
        self._priority = priority
        self._required_skills = required_skills
        self._size = size

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Shipment':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Shipment of this Shipment.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def allowed_vehicles(self):
        """Gets the allowed_vehicles of this Shipment.

        Specifies an array of allowed vehicles, i.e. array of vehicle ids. For example, if this shipment can only be conducted EITHER by \"technician_peter\" OR \"technician_stefan\" specify this as follows: [\"technician_peter\",\"technician_stefan\"].

        :return: The allowed_vehicles of this Shipment.
        :rtype: List[str]
        """
        return self._allowed_vehicles

    @allowed_vehicles.setter
    def allowed_vehicles(self, allowed_vehicles):
        """Sets the allowed_vehicles of this Shipment.

        Specifies an array of allowed vehicles, i.e. array of vehicle ids. For example, if this shipment can only be conducted EITHER by \"technician_peter\" OR \"technician_stefan\" specify this as follows: [\"technician_peter\",\"technician_stefan\"].

        :param allowed_vehicles: The allowed_vehicles of this Shipment.
        :type allowed_vehicles: List[str]
        """

        self._allowed_vehicles = allowed_vehicles

    @property
    def delivery(self):
        """Gets the delivery of this Shipment.


        :return: The delivery of this Shipment.
        :rtype: Stop
        """
        return self._delivery

    @delivery.setter
    def delivery(self, delivery):
        """Sets the delivery of this Shipment.


        :param delivery: The delivery of this Shipment.
        :type delivery: Stop
        """
        if delivery is None:
            raise ValueError("Invalid value for `delivery`, must not be `None`")

        self._delivery = delivery

    @property
    def disallowed_vehicles(self):
        """Gets the disallowed_vehicles of this Shipment.

        Specifies an array of disallowed vehicles, i.e. array of vehicle ids.

        :return: The disallowed_vehicles of this Shipment.
        :rtype: List[str]
        """
        return self._disallowed_vehicles

    @disallowed_vehicles.setter
    def disallowed_vehicles(self, disallowed_vehicles):
        """Sets the disallowed_vehicles of this Shipment.

        Specifies an array of disallowed vehicles, i.e. array of vehicle ids.

        :param disallowed_vehicles: The disallowed_vehicles of this Shipment.
        :type disallowed_vehicles: List[str]
        """

        self._disallowed_vehicles = disallowed_vehicles

    @property
    def id(self):
        """Gets the id of this Shipment.

        Specifies the id of the shipment. Ids need to be unique so there must not be two services/shipments with the same id.

        :return: The id of this Shipment.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Shipment.

        Specifies the id of the shipment. Ids need to be unique so there must not be two services/shipments with the same id.

        :param id: The id of this Shipment.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def max_time_in_vehicle(self):
        """Gets the max_time_in_vehicle of this Shipment.

        Specifies the maximum time in seconds a shipment can stay in the vehicle.

        :return: The max_time_in_vehicle of this Shipment.
        :rtype: int
        """
        return self._max_time_in_vehicle

    @max_time_in_vehicle.setter
    def max_time_in_vehicle(self, max_time_in_vehicle):
        """Sets the max_time_in_vehicle of this Shipment.

        Specifies the maximum time in seconds a shipment can stay in the vehicle.

        :param max_time_in_vehicle: The max_time_in_vehicle of this Shipment.
        :type max_time_in_vehicle: int
        """

        self._max_time_in_vehicle = max_time_in_vehicle

    @property
    def name(self):
        """Gets the name of this Shipment.

        Meaningful name for shipment, e.g. \"pickup and deliver pizza to Peter\".

        :return: The name of this Shipment.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Shipment.

        Meaningful name for shipment, e.g. \"pickup and deliver pizza to Peter\".

        :param name: The name of this Shipment.
        :type name: str
        """

        self._name = name

    @property
    def pickup(self):
        """Gets the pickup of this Shipment.


        :return: The pickup of this Shipment.
        :rtype: Stop
        """
        return self._pickup

    @pickup.setter
    def pickup(self, pickup):
        """Sets the pickup of this Shipment.


        :param pickup: The pickup of this Shipment.
        :type pickup: Stop
        """
        if pickup is None:
            raise ValueError("Invalid value for `pickup`, must not be `None`")

        self._pickup = pickup

    @property
    def priority(self):
        """Gets the priority of this Shipment.

        Specifies the priority. Can be 1 = high priority to 10 = low priority. Often there are more services/shipments than the available vehicle fleet can handle. Then you can set priorities to differentiate high priority tasks from those that could be left unassigned. I.e. the lower the priority the earlier these tasks are omitted in the solution.

        :return: The priority of this Shipment.
        :rtype: int
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this Shipment.

        Specifies the priority. Can be 1 = high priority to 10 = low priority. Often there are more services/shipments than the available vehicle fleet can handle. Then you can set priorities to differentiate high priority tasks from those that could be left unassigned. I.e. the lower the priority the earlier these tasks are omitted in the solution.

        :param priority: The priority of this Shipment.
        :type priority: int
        """

        self._priority = priority

    @property
    def required_skills(self):
        """Gets the required_skills of this Shipment.

        Specifies an array of required skills, i.e. array of string (not case sensitive). For example, if this shipment needs to be conducted by a technician having a `drilling_machine` and a `screw_driver` then specify the array as follows: `[\"drilling_machine\",\"screw_driver\"]`. This means that the service can only be done by a vehicle (technician) that has the skills `drilling_machine` AND `screw_driver` in its skill array. Otherwise it remains unassigned.

        :return: The required_skills of this Shipment.
        :rtype: List[str]
        """
        return self._required_skills

    @required_skills.setter
    def required_skills(self, required_skills):
        """Sets the required_skills of this Shipment.

        Specifies an array of required skills, i.e. array of string (not case sensitive). For example, if this shipment needs to be conducted by a technician having a `drilling_machine` and a `screw_driver` then specify the array as follows: `[\"drilling_machine\",\"screw_driver\"]`. This means that the service can only be done by a vehicle (technician) that has the skills `drilling_machine` AND `screw_driver` in its skill array. Otherwise it remains unassigned.

        :param required_skills: The required_skills of this Shipment.
        :type required_skills: List[str]
        """

        self._required_skills = required_skills

    @property
    def size(self):
        """Gets the size of this Shipment.

        Size can have multiple dimensions and should be in line with the capacity dimension array of the vehicle type. For example, if the item that needs to be delivered has two size dimension, volume and weight, then specify it as follow [ 20, 5 ] assuming a volume of 20 and a weight of 5.

        :return: The size of this Shipment.
        :rtype: List[int]
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this Shipment.

        Size can have multiple dimensions and should be in line with the capacity dimension array of the vehicle type. For example, if the item that needs to be delivered has two size dimension, volume and weight, then specify it as follow [ 20, 5 ] assuming a volume of 20 and a weight of 5.

        :param size: The size of this Shipment.
        :type size: List[int]
        """

        self._size = size
