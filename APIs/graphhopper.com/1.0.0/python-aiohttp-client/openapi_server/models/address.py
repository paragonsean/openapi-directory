# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Address(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, curbside: str='any', lat: float=None, location_id: str=None, lon: float=None, name: str=None, street_hint: str=None):
        """Address - a model defined in OpenAPI

        :param curbside: The curbside of this Address.
        :param lat: The lat of this Address.
        :param location_id: The location_id of this Address.
        :param lon: The lon of this Address.
        :param name: The name of this Address.
        :param street_hint: The street_hint of this Address.
        """
        self.openapi_types = {
            'curbside': str,
            'lat': float,
            'location_id': str,
            'lon': float,
            'name': str,
            'street_hint': str
        }

        self.attribute_map = {
            'curbside': 'curbside',
            'lat': 'lat',
            'location_id': 'location_id',
            'lon': 'lon',
            'name': 'name',
            'street_hint': 'street_hint'
        }

        self._curbside = curbside
        self._lat = lat
        self._location_id = location_id
        self._lon = lon
        self._name = name
        self._street_hint = street_hint

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Address':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Address of this Address.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def curbside(self):
        """Gets the curbside of this Address.

        Optional parameter. Specifies on which side a point should be relative to the driver when she leaves/arrives at a start/target/via point. Only supported for motor vehicles and OpenStreetMap.

        :return: The curbside of this Address.
        :rtype: str
        """
        return self._curbside

    @curbside.setter
    def curbside(self, curbside):
        """Sets the curbside of this Address.

        Optional parameter. Specifies on which side a point should be relative to the driver when she leaves/arrives at a start/target/via point. Only supported for motor vehicles and OpenStreetMap.

        :param curbside: The curbside of this Address.
        :type curbside: str
        """
        allowed_values = ["right", "left", "any"]  # noqa: E501
        if curbside not in allowed_values:
            raise ValueError(
                "Invalid value for `curbside` ({0}), must be one of {1}"
                .format(curbside, allowed_values)
            )

        self._curbside = curbside

    @property
    def lat(self):
        """Gets the lat of this Address.

        Latitude of location.

        :return: The lat of this Address.
        :rtype: float
        """
        return self._lat

    @lat.setter
    def lat(self, lat):
        """Sets the lat of this Address.

        Latitude of location.

        :param lat: The lat of this Address.
        :type lat: float
        """
        if lat is None:
            raise ValueError("Invalid value for `lat`, must not be `None`")

        self._lat = lat

    @property
    def location_id(self):
        """Gets the location_id of this Address.

        Specifies the id of the location.

        :return: The location_id of this Address.
        :rtype: str
        """
        return self._location_id

    @location_id.setter
    def location_id(self, location_id):
        """Sets the location_id of this Address.

        Specifies the id of the location.

        :param location_id: The location_id of this Address.
        :type location_id: str
        """
        if location_id is None:
            raise ValueError("Invalid value for `location_id`, must not be `None`")

        self._location_id = location_id

    @property
    def lon(self):
        """Gets the lon of this Address.

        Longitude of location.

        :return: The lon of this Address.
        :rtype: float
        """
        return self._lon

    @lon.setter
    def lon(self, lon):
        """Sets the lon of this Address.

        Longitude of location.

        :param lon: The lon of this Address.
        :type lon: float
        """
        if lon is None:
            raise ValueError("Invalid value for `lon`, must not be `None`")

        self._lon = lon

    @property
    def name(self):
        """Gets the name of this Address.

        Name of location.

        :return: The name of this Address.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Address.

        Name of location.

        :param name: The name of this Address.
        :type name: str
        """

        self._name = name

    @property
    def street_hint(self):
        """Gets the street_hint of this Address.

        Optional parameter. Specifies a hint for each address to better snap the coordinates (lon,lat) to road network. E.g. if there is an address or house with two or more neighboring streets you can control for which street the closest location is looked up.

        :return: The street_hint of this Address.
        :rtype: str
        """
        return self._street_hint

    @street_hint.setter
    def street_hint(self, street_hint):
        """Sets the street_hint of this Address.

        Optional parameter. Specifies a hint for each address to better snap the coordinates (lon,lat) to road network. E.g. if there is an address or house with two or more neighboring streets you can control for which street the closest location is looked up.

        :param street_hint: The street_hint of this Address.
        :type street_hint: str
        """

        self._street_hint = street_hint
