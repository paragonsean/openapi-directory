# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.cost_matrix_data import CostMatrixData
from openapi_server import util


class CostMatrix(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, data: CostMatrixData=None, location_ids: List[str]=None, profile: str=None, type: str=None):
        """CostMatrix - a model defined in OpenAPI

        :param data: The data of this CostMatrix.
        :param location_ids: The location_ids of this CostMatrix.
        :param profile: The profile of this CostMatrix.
        :param type: The type of this CostMatrix.
        """
        self.openapi_types = {
            'data': CostMatrixData,
            'location_ids': List[str],
            'profile': str,
            'type': str
        }

        self.attribute_map = {
            'data': 'data',
            'location_ids': 'location_ids',
            'profile': 'profile',
            'type': 'type'
        }

        self._data = data
        self._location_ids = location_ids
        self._profile = profile
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CostMatrix':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CostMatrix of this CostMatrix.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def data(self):
        """Gets the data of this CostMatrix.


        :return: The data of this CostMatrix.
        :rtype: CostMatrixData
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this CostMatrix.


        :param data: The data of this CostMatrix.
        :type data: CostMatrixData
        """

        self._data = data

    @property
    def location_ids(self):
        """Gets the location_ids of this CostMatrix.


        :return: The location_ids of this CostMatrix.
        :rtype: List[str]
        """
        return self._location_ids

    @location_ids.setter
    def location_ids(self, location_ids):
        """Sets the location_ids of this CostMatrix.


        :param location_ids: The location_ids of this CostMatrix.
        :type location_ids: List[str]
        """

        self._location_ids = location_ids

    @property
    def profile(self):
        """Gets the profile of this CostMatrix.

        vehicle profile or empty if catch all fallback

        :return: The profile of this CostMatrix.
        :rtype: str
        """
        return self._profile

    @profile.setter
    def profile(self, profile):
        """Sets the profile of this CostMatrix.

        vehicle profile or empty if catch all fallback

        :param profile: The profile of this CostMatrix.
        :type profile: str
        """

        self._profile = profile

    @property
    def type(self):
        """Gets the type of this CostMatrix.

        type of cost matrix, currently default or google are supported

        :return: The type of this CostMatrix.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CostMatrix.

        type of cost matrix, currently default or google are supported

        :param type: The type of this CostMatrix.
        :type type: str
        """
        allowed_values = ["default", "google"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
