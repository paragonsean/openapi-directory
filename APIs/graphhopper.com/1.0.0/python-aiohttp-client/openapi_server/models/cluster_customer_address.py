# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ClusterCustomerAddress(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, lat: float=None, lon: float=None, street_hint: str=None):
        """ClusterCustomerAddress - a model defined in OpenAPI

        :param lat: The lat of this ClusterCustomerAddress.
        :param lon: The lon of this ClusterCustomerAddress.
        :param street_hint: The street_hint of this ClusterCustomerAddress.
        """
        self.openapi_types = {
            'lat': float,
            'lon': float,
            'street_hint': str
        }

        self.attribute_map = {
            'lat': 'lat',
            'lon': 'lon',
            'street_hint': 'street_hint'
        }

        self._lat = lat
        self._lon = lon
        self._street_hint = street_hint

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ClusterCustomerAddress':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ClusterCustomerAddress of this ClusterCustomerAddress.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def lat(self):
        """Gets the lat of this ClusterCustomerAddress.

        Latitude

        :return: The lat of this ClusterCustomerAddress.
        :rtype: float
        """
        return self._lat

    @lat.setter
    def lat(self, lat):
        """Sets the lat of this ClusterCustomerAddress.

        Latitude

        :param lat: The lat of this ClusterCustomerAddress.
        :type lat: float
        """

        self._lat = lat

    @property
    def lon(self):
        """Gets the lon of this ClusterCustomerAddress.

        Longitude

        :return: The lon of this ClusterCustomerAddress.
        :rtype: float
        """
        return self._lon

    @lon.setter
    def lon(self, lon):
        """Sets the lon of this ClusterCustomerAddress.

        Longitude

        :param lon: The lon of this ClusterCustomerAddress.
        :type lon: float
        """

        self._lon = lon

    @property
    def street_hint(self):
        """Gets the street_hint of this ClusterCustomerAddress.

        Optional parameter. Specifies a hint for each address to better snap the coordinates (lon,lat) to road network. E.g. if there is an address or house with two or more neighboring streets you can control for which street the closest location is looked up.

        :return: The street_hint of this ClusterCustomerAddress.
        :rtype: str
        """
        return self._street_hint

    @street_hint.setter
    def street_hint(self, street_hint):
        """Sets the street_hint of this ClusterCustomerAddress.

        Optional parameter. Specifies a hint for each address to better snap the coordinates (lon,lat) to road network. E.g. if there is an address or house with two or more neighboring streets you can control for which street the closest location is looked up.

        :param street_hint: The street_hint of this ClusterCustomerAddress.
        :type street_hint: str
        """

        self._street_hint = street_hint
