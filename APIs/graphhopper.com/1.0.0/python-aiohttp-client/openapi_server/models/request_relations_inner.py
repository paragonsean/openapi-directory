# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.group_relation import GroupRelation
from openapi_server.models.job_relation import JobRelation
from openapi_server import util


class RequestRelationsInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ids: List[str]=None, type: str=None, vehicle_id: str=None, groups: List[str]=None):
        """RequestRelationsInner - a model defined in OpenAPI

        :param ids: The ids of this RequestRelationsInner.
        :param type: The type of this RequestRelationsInner.
        :param vehicle_id: The vehicle_id of this RequestRelationsInner.
        :param groups: The groups of this RequestRelationsInner.
        """
        self.openapi_types = {
            'ids': List[str],
            'type': str,
            'vehicle_id': str,
            'groups': List[str]
        }

        self.attribute_map = {
            'ids': 'ids',
            'type': 'type',
            'vehicle_id': 'vehicle_id',
            'groups': 'groups'
        }

        self._ids = ids
        self._type = type
        self._vehicle_id = vehicle_id
        self._groups = groups

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RequestRelationsInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Request_relations_inner of this RequestRelationsInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ids(self):
        """Gets the ids of this RequestRelationsInner.

        Specifies an array of shipment and/or service ids that are in relation. If you deal with services then you need to use the id of your services in ids. To also consider sequences of the pickups and deliveries of your shipments, you need to use a special ID, i.e. use your shipment id plus the keyword `_pickup` or `_delivery`. If you want to place a service or shipment activity at the beginning of your route, use the special ID `start`. In turn, use `end` to place it at the end of the route.

        :return: The ids of this RequestRelationsInner.
        :rtype: List[str]
        """
        return self._ids

    @ids.setter
    def ids(self, ids):
        """Sets the ids of this RequestRelationsInner.

        Specifies an array of shipment and/or service ids that are in relation. If you deal with services then you need to use the id of your services in ids. To also consider sequences of the pickups and deliveries of your shipments, you need to use a special ID, i.e. use your shipment id plus the keyword `_pickup` or `_delivery`. If you want to place a service or shipment activity at the beginning of your route, use the special ID `start`. In turn, use `end` to place it at the end of the route.

        :param ids: The ids of this RequestRelationsInner.
        :type ids: List[str]
        """
        if ids is None:
            raise ValueError("Invalid value for `ids`, must not be `None`")

        self._ids = ids

    @property
    def type(self):
        """Gets the type of this RequestRelationsInner.

        Specifies the type of relation. It must be either of type `in_sequence` or `in_direct_sequence`. 

        :return: The type of this RequestRelationsInner.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this RequestRelationsInner.

        Specifies the type of relation. It must be either of type `in_sequence` or `in_direct_sequence`. 

        :param type: The type of this RequestRelationsInner.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type

    @property
    def vehicle_id(self):
        """Gets the vehicle_id of this RequestRelationsInner.

        Id of pre-assigned vehicle, i.e. the vehicle id that is determined to conduct the services and shipments in this relation.

        :return: The vehicle_id of this RequestRelationsInner.
        :rtype: str
        """
        return self._vehicle_id

    @vehicle_id.setter
    def vehicle_id(self, vehicle_id):
        """Sets the vehicle_id of this RequestRelationsInner.

        Id of pre-assigned vehicle, i.e. the vehicle id that is determined to conduct the services and shipments in this relation.

        :param vehicle_id: The vehicle_id of this RequestRelationsInner.
        :type vehicle_id: str
        """

        self._vehicle_id = vehicle_id

    @property
    def groups(self):
        """Gets the groups of this RequestRelationsInner.

        An array of groups that should be related

        :return: The groups of this RequestRelationsInner.
        :rtype: List[str]
        """
        return self._groups

    @groups.setter
    def groups(self, groups):
        """Sets the groups of this RequestRelationsInner.

        An array of groups that should be related

        :param groups: The groups of this RequestRelationsInner.
        :type groups: List[str]
        """
        if groups is None:
            raise ValueError("Invalid value for `groups`, must not be `None`")

        self._groups = groups
