# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.matrix_request import MatrixRequest
from openapi_server.models.symmetrical_matrix_request import SymmetricalMatrixRequest
from openapi_server.models.vehicle_profile_id import VehicleProfileId
from openapi_server import util


class PostMatrixRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, fail_fast: bool=True, from_curbsides: List[str]=None, from_point_hints: List[str]=None, from_points: List[List[float]]=None, out_arrays: List[str]=None, snap_preventions: List[str]=None, to_curbsides: List[str]=None, to_point_hints: List[str]=None, to_points: List[List[float]]=None, turn_costs: bool=False, vehicle: VehicleProfileId=None, curbsides: List[str]=None, point_hints: List[str]=None, points: List[List[float]]=None):
        """PostMatrixRequest - a model defined in OpenAPI

        :param fail_fast: The fail_fast of this PostMatrixRequest.
        :param from_curbsides: The from_curbsides of this PostMatrixRequest.
        :param from_point_hints: The from_point_hints of this PostMatrixRequest.
        :param from_points: The from_points of this PostMatrixRequest.
        :param out_arrays: The out_arrays of this PostMatrixRequest.
        :param snap_preventions: The snap_preventions of this PostMatrixRequest.
        :param to_curbsides: The to_curbsides of this PostMatrixRequest.
        :param to_point_hints: The to_point_hints of this PostMatrixRequest.
        :param to_points: The to_points of this PostMatrixRequest.
        :param turn_costs: The turn_costs of this PostMatrixRequest.
        :param vehicle: The vehicle of this PostMatrixRequest.
        :param curbsides: The curbsides of this PostMatrixRequest.
        :param point_hints: The point_hints of this PostMatrixRequest.
        :param points: The points of this PostMatrixRequest.
        """
        self.openapi_types = {
            'fail_fast': bool,
            'from_curbsides': List[str],
            'from_point_hints': List[str],
            'from_points': List[List[float]],
            'out_arrays': List[str],
            'snap_preventions': List[str],
            'to_curbsides': List[str],
            'to_point_hints': List[str],
            'to_points': List[List[float]],
            'turn_costs': bool,
            'vehicle': VehicleProfileId,
            'curbsides': List[str],
            'point_hints': List[str],
            'points': List[List[float]]
        }

        self.attribute_map = {
            'fail_fast': 'fail_fast',
            'from_curbsides': 'from_curbsides',
            'from_point_hints': 'from_point_hints',
            'from_points': 'from_points',
            'out_arrays': 'out_arrays',
            'snap_preventions': 'snap_preventions',
            'to_curbsides': 'to_curbsides',
            'to_point_hints': 'to_point_hints',
            'to_points': 'to_points',
            'turn_costs': 'turn_costs',
            'vehicle': 'vehicle',
            'curbsides': 'curbsides',
            'point_hints': 'point_hints',
            'points': 'points'
        }

        self._fail_fast = fail_fast
        self._from_curbsides = from_curbsides
        self._from_point_hints = from_point_hints
        self._from_points = from_points
        self._out_arrays = out_arrays
        self._snap_preventions = snap_preventions
        self._to_curbsides = to_curbsides
        self._to_point_hints = to_point_hints
        self._to_points = to_points
        self._turn_costs = turn_costs
        self._vehicle = vehicle
        self._curbsides = curbsides
        self._point_hints = point_hints
        self._points = points

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PostMatrixRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The postMatrix_request of this PostMatrixRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def fail_fast(self):
        """Gets the fail_fast of this PostMatrixRequest.

        Specifies whether or not the matrix calculation should return with an error as soon as possible in case some points cannot be found or some points are not connected. If set to `false` the time/weight/distance matrix will be calculated for all valid points and contain the `null` value for all entries that could not be calculated. The `hint` field of the response will also contain additional information about what went wrong (see its documentation).

        :return: The fail_fast of this PostMatrixRequest.
        :rtype: bool
        """
        return self._fail_fast

    @fail_fast.setter
    def fail_fast(self, fail_fast):
        """Sets the fail_fast of this PostMatrixRequest.

        Specifies whether or not the matrix calculation should return with an error as soon as possible in case some points cannot be found or some points are not connected. If set to `false` the time/weight/distance matrix will be calculated for all valid points and contain the `null` value for all entries that could not be calculated. The `hint` field of the response will also contain additional information about what went wrong (see its documentation).

        :param fail_fast: The fail_fast of this PostMatrixRequest.
        :type fail_fast: bool
        """

        self._fail_fast = fail_fast

    @property
    def from_curbsides(self):
        """Gets the from_curbsides of this PostMatrixRequest.

        See `curbsides`of symmetrical matrix

        :return: The from_curbsides of this PostMatrixRequest.
        :rtype: List[str]
        """
        return self._from_curbsides

    @from_curbsides.setter
    def from_curbsides(self, from_curbsides):
        """Sets the from_curbsides of this PostMatrixRequest.

        See `curbsides`of symmetrical matrix

        :param from_curbsides: The from_curbsides of this PostMatrixRequest.
        :type from_curbsides: List[str]
        """

        self._from_curbsides = from_curbsides

    @property
    def from_point_hints(self):
        """Gets the from_point_hints of this PostMatrixRequest.

        See `point_hints`of symmetrical matrix

        :return: The from_point_hints of this PostMatrixRequest.
        :rtype: List[str]
        """
        return self._from_point_hints

    @from_point_hints.setter
    def from_point_hints(self, from_point_hints):
        """Sets the from_point_hints of this PostMatrixRequest.

        See `point_hints`of symmetrical matrix

        :param from_point_hints: The from_point_hints of this PostMatrixRequest.
        :type from_point_hints: List[str]
        """

        self._from_point_hints = from_point_hints

    @property
    def from_points(self):
        """Gets the from_points of this PostMatrixRequest.

        The starting points for the routes in an array of `[longitude,latitude]`. For instance, if you want to calculate three routes from point A such as A->1, A->2, A->3 then you have one `from_point` parameter and three `to_point` parameters.

        :return: The from_points of this PostMatrixRequest.
        :rtype: List[List[float]]
        """
        return self._from_points

    @from_points.setter
    def from_points(self, from_points):
        """Sets the from_points of this PostMatrixRequest.

        The starting points for the routes in an array of `[longitude,latitude]`. For instance, if you want to calculate three routes from point A such as A->1, A->2, A->3 then you have one `from_point` parameter and three `to_point` parameters.

        :param from_points: The from_points of this PostMatrixRequest.
        :type from_points: List[List[float]]
        """

        self._from_points = from_points

    @property
    def out_arrays(self):
        """Gets the out_arrays of this PostMatrixRequest.

        Specifies which matrices should be included in the response. Specify one or more of the following options `weights`, `times`, `distances`. The units of the entries of `distances` are meters, of `times` are seconds and of `weights` is arbitrary and it can differ for different vehicles or versions of this API.

        :return: The out_arrays of this PostMatrixRequest.
        :rtype: List[str]
        """
        return self._out_arrays

    @out_arrays.setter
    def out_arrays(self, out_arrays):
        """Sets the out_arrays of this PostMatrixRequest.

        Specifies which matrices should be included in the response. Specify one or more of the following options `weights`, `times`, `distances`. The units of the entries of `distances` are meters, of `times` are seconds and of `weights` is arbitrary and it can differ for different vehicles or versions of this API.

        :param out_arrays: The out_arrays of this PostMatrixRequest.
        :type out_arrays: List[str]
        """

        self._out_arrays = out_arrays

    @property
    def snap_preventions(self):
        """Gets the snap_preventions of this PostMatrixRequest.

        Optional parameter to avoid snapping to a certain road class or road environment. Current supported values `motorway`, `trunk`, `ferry`, `tunnel`, `bridge` and `ford`

        :return: The snap_preventions of this PostMatrixRequest.
        :rtype: List[str]
        """
        return self._snap_preventions

    @snap_preventions.setter
    def snap_preventions(self, snap_preventions):
        """Sets the snap_preventions of this PostMatrixRequest.

        Optional parameter to avoid snapping to a certain road class or road environment. Current supported values `motorway`, `trunk`, `ferry`, `tunnel`, `bridge` and `ford`

        :param snap_preventions: The snap_preventions of this PostMatrixRequest.
        :type snap_preventions: List[str]
        """

        self._snap_preventions = snap_preventions

    @property
    def to_curbsides(self):
        """Gets the to_curbsides of this PostMatrixRequest.

        See `curbsides`of symmetrical matrix

        :return: The to_curbsides of this PostMatrixRequest.
        :rtype: List[str]
        """
        return self._to_curbsides

    @to_curbsides.setter
    def to_curbsides(self, to_curbsides):
        """Sets the to_curbsides of this PostMatrixRequest.

        See `curbsides`of symmetrical matrix

        :param to_curbsides: The to_curbsides of this PostMatrixRequest.
        :type to_curbsides: List[str]
        """

        self._to_curbsides = to_curbsides

    @property
    def to_point_hints(self):
        """Gets the to_point_hints of this PostMatrixRequest.

        See `point_hints`of symmetrical matrix

        :return: The to_point_hints of this PostMatrixRequest.
        :rtype: List[str]
        """
        return self._to_point_hints

    @to_point_hints.setter
    def to_point_hints(self, to_point_hints):
        """Sets the to_point_hints of this PostMatrixRequest.

        See `point_hints`of symmetrical matrix

        :param to_point_hints: The to_point_hints of this PostMatrixRequest.
        :type to_point_hints: List[str]
        """

        self._to_point_hints = to_point_hints

    @property
    def to_points(self):
        """Gets the to_points of this PostMatrixRequest.

        The destination points for the routes in an array of `[longitude,latitude]`.

        :return: The to_points of this PostMatrixRequest.
        :rtype: List[List[float]]
        """
        return self._to_points

    @to_points.setter
    def to_points(self, to_points):
        """Sets the to_points of this PostMatrixRequest.

        The destination points for the routes in an array of `[longitude,latitude]`.

        :param to_points: The to_points of this PostMatrixRequest.
        :type to_points: List[List[float]]
        """

        self._to_points = to_points

    @property
    def turn_costs(self):
        """Gets the turn_costs of this PostMatrixRequest.

        Specifies if turn restrictions should be considered. Enabling this option increases the matrix computation time. Only supported for motor vehicles and OpenStreetMap.

        :return: The turn_costs of this PostMatrixRequest.
        :rtype: bool
        """
        return self._turn_costs

    @turn_costs.setter
    def turn_costs(self, turn_costs):
        """Sets the turn_costs of this PostMatrixRequest.

        Specifies if turn restrictions should be considered. Enabling this option increases the matrix computation time. Only supported for motor vehicles and OpenStreetMap.

        :param turn_costs: The turn_costs of this PostMatrixRequest.
        :type turn_costs: bool
        """

        self._turn_costs = turn_costs

    @property
    def vehicle(self):
        """Gets the vehicle of this PostMatrixRequest.


        :return: The vehicle of this PostMatrixRequest.
        :rtype: VehicleProfileId
        """
        return self._vehicle

    @vehicle.setter
    def vehicle(self, vehicle):
        """Sets the vehicle of this PostMatrixRequest.


        :param vehicle: The vehicle of this PostMatrixRequest.
        :type vehicle: VehicleProfileId
        """

        self._vehicle = vehicle

    @property
    def curbsides(self):
        """Gets the curbsides of this PostMatrixRequest.

        Optional parameter. It specifies on which side a point should be relative to the driver when she leaves/arrives at a start/target/via point. You need to specify this parameter for either none or all points. Only supported for motor vehicles and OpenStreetMap.

        :return: The curbsides of this PostMatrixRequest.
        :rtype: List[str]
        """
        return self._curbsides

    @curbsides.setter
    def curbsides(self, curbsides):
        """Sets the curbsides of this PostMatrixRequest.

        Optional parameter. It specifies on which side a point should be relative to the driver when she leaves/arrives at a start/target/via point. You need to specify this parameter for either none or all points. Only supported for motor vehicles and OpenStreetMap.

        :param curbsides: The curbsides of this PostMatrixRequest.
        :type curbsides: List[str]
        """

        self._curbsides = curbsides

    @property
    def point_hints(self):
        """Gets the point_hints of this PostMatrixRequest.

        Optional parameter. Specifies a hint for each point in the `points` array to prefer a certain street for the closest location lookup. E.g. if there is an address or house with two or more neighboring streets you can control for which street the closest location is looked up.

        :return: The point_hints of this PostMatrixRequest.
        :rtype: List[str]
        """
        return self._point_hints

    @point_hints.setter
    def point_hints(self, point_hints):
        """Sets the point_hints of this PostMatrixRequest.

        Optional parameter. Specifies a hint for each point in the `points` array to prefer a certain street for the closest location lookup. E.g. if there is an address or house with two or more neighboring streets you can control for which street the closest location is looked up.

        :param point_hints: The point_hints of this PostMatrixRequest.
        :type point_hints: List[str]
        """

        self._point_hints = point_hints

    @property
    def points(self):
        """Gets the points of this PostMatrixRequest.

        Specify multiple points for which the weight-, route-, time- or distance-matrix should be calculated as follows: `[longitude,latitude]`. In this case the origins are identical to the destinations. Thus, if there are N points, NxN entries are calculated. The order of the point parameter is important. Specify at least three points. Cannot be used together with `from_point` or `to_point.`.

        :return: The points of this PostMatrixRequest.
        :rtype: List[List[float]]
        """
        return self._points

    @points.setter
    def points(self, points):
        """Sets the points of this PostMatrixRequest.

        Specify multiple points for which the weight-, route-, time- or distance-matrix should be calculated as follows: `[longitude,latitude]`. In this case the origins are identical to the destinations. Thus, if there are N points, NxN entries are calculated. The order of the point parameter is important. Specify at least three points. Cannot be used together with `from_point` or `to_point.`.

        :param points: The points of this PostMatrixRequest.
        :type points: List[List[float]]
        """

        self._points = points
