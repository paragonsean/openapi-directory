# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.address import Address
from openapi_server.models.time_window import TimeWindow
from openapi_server import util


class Service(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, address: Address=None, allowed_vehicles: List[str]=None, disallowed_vehicles: List[str]=None, duration: int=0, group: str=None, id: str=None, max_time_in_vehicle: int=None, name: str=None, preparation_time: int=0, priority: int=2, required_skills: List[str]=None, size: List[int]=[0], time_windows: List[TimeWindow]=None, type: str='service'):
        """Service - a model defined in OpenAPI

        :param address: The address of this Service.
        :param allowed_vehicles: The allowed_vehicles of this Service.
        :param disallowed_vehicles: The disallowed_vehicles of this Service.
        :param duration: The duration of this Service.
        :param group: The group of this Service.
        :param id: The id of this Service.
        :param max_time_in_vehicle: The max_time_in_vehicle of this Service.
        :param name: The name of this Service.
        :param preparation_time: The preparation_time of this Service.
        :param priority: The priority of this Service.
        :param required_skills: The required_skills of this Service.
        :param size: The size of this Service.
        :param time_windows: The time_windows of this Service.
        :param type: The type of this Service.
        """
        self.openapi_types = {
            'address': Address,
            'allowed_vehicles': List[str],
            'disallowed_vehicles': List[str],
            'duration': int,
            'group': str,
            'id': str,
            'max_time_in_vehicle': int,
            'name': str,
            'preparation_time': int,
            'priority': int,
            'required_skills': List[str],
            'size': List[int],
            'time_windows': List[TimeWindow],
            'type': str
        }

        self.attribute_map = {
            'address': 'address',
            'allowed_vehicles': 'allowed_vehicles',
            'disallowed_vehicles': 'disallowed_vehicles',
            'duration': 'duration',
            'group': 'group',
            'id': 'id',
            'max_time_in_vehicle': 'max_time_in_vehicle',
            'name': 'name',
            'preparation_time': 'preparation_time',
            'priority': 'priority',
            'required_skills': 'required_skills',
            'size': 'size',
            'time_windows': 'time_windows',
            'type': 'type'
        }

        self._address = address
        self._allowed_vehicles = allowed_vehicles
        self._disallowed_vehicles = disallowed_vehicles
        self._duration = duration
        self._group = group
        self._id = id
        self._max_time_in_vehicle = max_time_in_vehicle
        self._name = name
        self._preparation_time = preparation_time
        self._priority = priority
        self._required_skills = required_skills
        self._size = size
        self._time_windows = time_windows
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Service':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Service of this Service.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def address(self):
        """Gets the address of this Service.


        :return: The address of this Service.
        :rtype: Address
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this Service.


        :param address: The address of this Service.
        :type address: Address
        """

        self._address = address

    @property
    def allowed_vehicles(self):
        """Gets the allowed_vehicles of this Service.

        Specifies an array of allowed vehicles, i.e. array of vehicle ids. For example, if this service can only be conducted EITHER by `technician_peter` OR `technician_stefan` specify this as follows: `[\"technician_peter\",\"technician_stefan\"]`.

        :return: The allowed_vehicles of this Service.
        :rtype: List[str]
        """
        return self._allowed_vehicles

    @allowed_vehicles.setter
    def allowed_vehicles(self, allowed_vehicles):
        """Sets the allowed_vehicles of this Service.

        Specifies an array of allowed vehicles, i.e. array of vehicle ids. For example, if this service can only be conducted EITHER by `technician_peter` OR `technician_stefan` specify this as follows: `[\"technician_peter\",\"technician_stefan\"]`.

        :param allowed_vehicles: The allowed_vehicles of this Service.
        :type allowed_vehicles: List[str]
        """

        self._allowed_vehicles = allowed_vehicles

    @property
    def disallowed_vehicles(self):
        """Gets the disallowed_vehicles of this Service.

        Specifies an array of disallowed vehicles, i.e. array of vehicle ids.

        :return: The disallowed_vehicles of this Service.
        :rtype: List[str]
        """
        return self._disallowed_vehicles

    @disallowed_vehicles.setter
    def disallowed_vehicles(self, disallowed_vehicles):
        """Sets the disallowed_vehicles of this Service.

        Specifies an array of disallowed vehicles, i.e. array of vehicle ids.

        :param disallowed_vehicles: The disallowed_vehicles of this Service.
        :type disallowed_vehicles: List[str]
        """

        self._disallowed_vehicles = disallowed_vehicles

    @property
    def duration(self):
        """Gets the duration of this Service.

        Specifies the duration of the service in seconds, i.e. how long it takes at the customer site.

        :return: The duration of this Service.
        :rtype: int
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this Service.

        Specifies the duration of the service in seconds, i.e. how long it takes at the customer site.

        :param duration: The duration of this Service.
        :type duration: int
        """
        if duration is not None and duration > 604800:
            raise ValueError("Invalid value for `duration`, must be a value less than or equal to `604800`")
        if duration is not None and duration < 0:
            raise ValueError("Invalid value for `duration`, must be a value greater than or equal to `0`")

        self._duration = duration

    @property
    def group(self):
        """Gets the group of this Service.

        Group this service belongs to. See the group relation and [this post](https://discuss.graphhopper.com/t/4040) on how to utilize this.

        :return: The group of this Service.
        :rtype: str
        """
        return self._group

    @group.setter
    def group(self, group):
        """Sets the group of this Service.

        Group this service belongs to. See the group relation and [this post](https://discuss.graphhopper.com/t/4040) on how to utilize this.

        :param group: The group of this Service.
        :type group: str
        """

        self._group = group

    @property
    def id(self):
        """Gets the id of this Service.

        Specifies the id of the service. Ids need to be unique so there must not be two services/shipments with the same id.

        :return: The id of this Service.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Service.

        Specifies the id of the service. Ids need to be unique so there must not be two services/shipments with the same id.

        :param id: The id of this Service.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def max_time_in_vehicle(self):
        """Gets the max_time_in_vehicle of this Service.

        Specifies the maximum time in seconds a delivery can stay in the vehicle. Currently, it only works with services of \"type\":\"delivery\".

        :return: The max_time_in_vehicle of this Service.
        :rtype: int
        """
        return self._max_time_in_vehicle

    @max_time_in_vehicle.setter
    def max_time_in_vehicle(self, max_time_in_vehicle):
        """Sets the max_time_in_vehicle of this Service.

        Specifies the maximum time in seconds a delivery can stay in the vehicle. Currently, it only works with services of \"type\":\"delivery\".

        :param max_time_in_vehicle: The max_time_in_vehicle of this Service.
        :type max_time_in_vehicle: int
        """

        self._max_time_in_vehicle = max_time_in_vehicle

    @property
    def name(self):
        """Gets the name of this Service.

        Meaningful name for service, e.g. `\"deliver pizza\"`.

        :return: The name of this Service.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Service.

        Meaningful name for service, e.g. `\"deliver pizza\"`.

        :param name: The name of this Service.
        :type name: str
        """

        self._name = name

    @property
    def preparation_time(self):
        """Gets the preparation_time of this Service.

        Specifies the preparation time in seconds. It can be used to model parking lot search time since if you have 3 identical locations in a row, it only falls due once.

        :return: The preparation_time of this Service.
        :rtype: int
        """
        return self._preparation_time

    @preparation_time.setter
    def preparation_time(self, preparation_time):
        """Sets the preparation_time of this Service.

        Specifies the preparation time in seconds. It can be used to model parking lot search time since if you have 3 identical locations in a row, it only falls due once.

        :param preparation_time: The preparation_time of this Service.
        :type preparation_time: int
        """
        if preparation_time is not None and preparation_time > 604800:
            raise ValueError("Invalid value for `preparation_time`, must be a value less than or equal to `604800`")
        if preparation_time is not None and preparation_time < 0:
            raise ValueError("Invalid value for `preparation_time`, must be a value greater than or equal to `0`")

        self._preparation_time = preparation_time

    @property
    def priority(self):
        """Gets the priority of this Service.

        Specifies the priority. Can be 1 = high priority to 10 = low priority. Often there are more services/shipments than the available vehicle fleet can handle. Then you can set priorities to differentiate high priority tasks from those that could be left unassigned. I.e. the lower the priority the earlier these tasks are omitted in the solution.

        :return: The priority of this Service.
        :rtype: int
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this Service.

        Specifies the priority. Can be 1 = high priority to 10 = low priority. Often there are more services/shipments than the available vehicle fleet can handle. Then you can set priorities to differentiate high priority tasks from those that could be left unassigned. I.e. the lower the priority the earlier these tasks are omitted in the solution.

        :param priority: The priority of this Service.
        :type priority: int
        """

        self._priority = priority

    @property
    def required_skills(self):
        """Gets the required_skills of this Service.

        Specifies an array of required skills, i.e. array of string (not case sensitive). For example, if this service needs to be conducted by a technician having a `drilling_machine` and a `screw_driver` then specify the array as follows: `[\"drilling_machine\",\"screw_driver\"]`. This means that the service can only be done by a vehicle (technician) that has the skills `drilling_machine` AND `screw_driver` in its skill array. Otherwise it remains unassigned.

        :return: The required_skills of this Service.
        :rtype: List[str]
        """
        return self._required_skills

    @required_skills.setter
    def required_skills(self, required_skills):
        """Sets the required_skills of this Service.

        Specifies an array of required skills, i.e. array of string (not case sensitive). For example, if this service needs to be conducted by a technician having a `drilling_machine` and a `screw_driver` then specify the array as follows: `[\"drilling_machine\",\"screw_driver\"]`. This means that the service can only be done by a vehicle (technician) that has the skills `drilling_machine` AND `screw_driver` in its skill array. Otherwise it remains unassigned.

        :param required_skills: The required_skills of this Service.
        :type required_skills: List[str]
        """

        self._required_skills = required_skills

    @property
    def size(self):
        """Gets the size of this Service.

        Size can have multiple dimensions and should be in line with the capacity dimension array of the vehicle type. For example, if the item that needs to be delivered has two size dimension, volume and weight, then specify it as follow [ 20, 5 ] assuming a volume of 20 and a weight of 5.

        :return: The size of this Service.
        :rtype: List[int]
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this Service.

        Size can have multiple dimensions and should be in line with the capacity dimension array of the vehicle type. For example, if the item that needs to be delivered has two size dimension, volume and weight, then specify it as follow [ 20, 5 ] assuming a volume of 20 and a weight of 5.

        :param size: The size of this Service.
        :type size: List[int]
        """

        self._size = size

    @property
    def time_windows(self):
        """Gets the time_windows of this Service.

        Specifies an array of time window objects (see time_window object below). Specify the time either with the recommended Unix time stamp (the number of seconds since 1970-01-01) or you can also count the seconds relative to Monday morning 00:00 and define the whole week in seconds. For example, Monday 9am is then represented by 9hour * 3600sec/hour = 32400. In turn, Wednesday 1pm corresponds to 2day * 24hour/day * 3600sec/hour + 1day * 13hour/day * 3600sec/hour = 219600. See this tutorial for more information.

        :return: The time_windows of this Service.
        :rtype: List[TimeWindow]
        """
        return self._time_windows

    @time_windows.setter
    def time_windows(self, time_windows):
        """Sets the time_windows of this Service.

        Specifies an array of time window objects (see time_window object below). Specify the time either with the recommended Unix time stamp (the number of seconds since 1970-01-01) or you can also count the seconds relative to Monday morning 00:00 and define the whole week in seconds. For example, Monday 9am is then represented by 9hour * 3600sec/hour = 32400. In turn, Wednesday 1pm corresponds to 2day * 24hour/day * 3600sec/hour + 1day * 13hour/day * 3600sec/hour = 219600. See this tutorial for more information.

        :param time_windows: The time_windows of this Service.
        :type time_windows: List[TimeWindow]
        """

        self._time_windows = time_windows

    @property
    def type(self):
        """Gets the type of this Service.

        Specifies type of service. This makes a difference if items are loaded or unloaded, i.e. if one of the size dimensions > 0. If it is specified as `service` or `pickup`, items are loaded and will stay in the vehicle for the rest of the route (and thus consumes capacity for the rest of the route). If it is a `delivery`, items are implicitly loaded at the beginning of the route and will stay in the route until delivery (and thus releases capacity for the rest of the route).

        :return: The type of this Service.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Service.

        Specifies type of service. This makes a difference if items are loaded or unloaded, i.e. if one of the size dimensions > 0. If it is specified as `service` or `pickup`, items are loaded and will stay in the vehicle for the rest of the route (and thus consumes capacity for the rest of the route). If it is a `delivery`, items are implicitly loaded at the beginning of the route and will stay in the route until delivery (and thus releases capacity for the rest of the route).

        :param type: The type of this Service.
        :type type: str
        """
        allowed_values = ["service", "pickup", "delivery"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
