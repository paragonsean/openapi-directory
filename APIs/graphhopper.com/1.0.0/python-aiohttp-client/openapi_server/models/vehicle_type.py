# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class VehicleType(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, capacity: List[int]=[0], consider_traffic: bool=False, cost_per_activation: float=None, cost_per_meter: float=None, cost_per_second: float=None, network_data_provider: str='openstreetmap', profile: object=None, service_time_factor: float=1, speed_factor: float=1, type_id: str=None):
        """VehicleType - a model defined in OpenAPI

        :param capacity: The capacity of this VehicleType.
        :param consider_traffic: The consider_traffic of this VehicleType.
        :param cost_per_activation: The cost_per_activation of this VehicleType.
        :param cost_per_meter: The cost_per_meter of this VehicleType.
        :param cost_per_second: The cost_per_second of this VehicleType.
        :param network_data_provider: The network_data_provider of this VehicleType.
        :param profile: The profile of this VehicleType.
        :param service_time_factor: The service_time_factor of this VehicleType.
        :param speed_factor: The speed_factor of this VehicleType.
        :param type_id: The type_id of this VehicleType.
        """
        self.openapi_types = {
            'capacity': List[int],
            'consider_traffic': bool,
            'cost_per_activation': float,
            'cost_per_meter': float,
            'cost_per_second': float,
            'network_data_provider': str,
            'profile': object,
            'service_time_factor': float,
            'speed_factor': float,
            'type_id': str
        }

        self.attribute_map = {
            'capacity': 'capacity',
            'consider_traffic': 'consider_traffic',
            'cost_per_activation': 'cost_per_activation',
            'cost_per_meter': 'cost_per_meter',
            'cost_per_second': 'cost_per_second',
            'network_data_provider': 'network_data_provider',
            'profile': 'profile',
            'service_time_factor': 'service_time_factor',
            'speed_factor': 'speed_factor',
            'type_id': 'type_id'
        }

        self._capacity = capacity
        self._consider_traffic = consider_traffic
        self._cost_per_activation = cost_per_activation
        self._cost_per_meter = cost_per_meter
        self._cost_per_second = cost_per_second
        self._network_data_provider = network_data_provider
        self._profile = profile
        self._service_time_factor = service_time_factor
        self._speed_factor = speed_factor
        self._type_id = type_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VehicleType':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VehicleType of this VehicleType.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def capacity(self):
        """Gets the capacity of this VehicleType.

        Specifies an array of capacity dimension values which need to be int values. For example, if there are two dimensions such as volume and weight then it needs to be defined as [ 1000, 300 ] assuming a maximum volume of 1000 and a maximum weight of 300.

        :return: The capacity of this VehicleType.
        :rtype: List[int]
        """
        return self._capacity

    @capacity.setter
    def capacity(self, capacity):
        """Sets the capacity of this VehicleType.

        Specifies an array of capacity dimension values which need to be int values. For example, if there are two dimensions such as volume and weight then it needs to be defined as [ 1000, 300 ] assuming a maximum volume of 1000 and a maximum weight of 300.

        :param capacity: The capacity of this VehicleType.
        :type capacity: List[int]
        """

        self._capacity = capacity

    @property
    def consider_traffic(self):
        """Gets the consider_traffic of this VehicleType.

        Specifies whether traffic should be considered. if \"tomtom\" is used and this is false, free flow travel times from \"tomtom\" are calculated. If this is true, historical traffic info are used. We do not yet have traffic data for \"openstreetmap\", thus, setting this true has no effect at all.

        :return: The consider_traffic of this VehicleType.
        :rtype: bool
        """
        return self._consider_traffic

    @consider_traffic.setter
    def consider_traffic(self, consider_traffic):
        """Sets the consider_traffic of this VehicleType.

        Specifies whether traffic should be considered. if \"tomtom\" is used and this is false, free flow travel times from \"tomtom\" are calculated. If this is true, historical traffic info are used. We do not yet have traffic data for \"openstreetmap\", thus, setting this true has no effect at all.

        :param consider_traffic: The consider_traffic of this VehicleType.
        :type consider_traffic: bool
        """

        self._consider_traffic = consider_traffic

    @property
    def cost_per_activation(self):
        """Gets the cost_per_activation of this VehicleType.

        **_BETA feature_**! Cost parameter vehicle activation, i.e. fixed costs per vehicle

        :return: The cost_per_activation of this VehicleType.
        :rtype: float
        """
        return self._cost_per_activation

    @cost_per_activation.setter
    def cost_per_activation(self, cost_per_activation):
        """Sets the cost_per_activation of this VehicleType.

        **_BETA feature_**! Cost parameter vehicle activation, i.e. fixed costs per vehicle

        :param cost_per_activation: The cost_per_activation of this VehicleType.
        :type cost_per_activation: float
        """

        self._cost_per_activation = cost_per_activation

    @property
    def cost_per_meter(self):
        """Gets the cost_per_meter of this VehicleType.

        **_BETA feature_**! Cost parameter per distance unit, here meter is used

        :return: The cost_per_meter of this VehicleType.
        :rtype: float
        """
        return self._cost_per_meter

    @cost_per_meter.setter
    def cost_per_meter(self, cost_per_meter):
        """Sets the cost_per_meter of this VehicleType.

        **_BETA feature_**! Cost parameter per distance unit, here meter is used

        :param cost_per_meter: The cost_per_meter of this VehicleType.
        :type cost_per_meter: float
        """

        self._cost_per_meter = cost_per_meter

    @property
    def cost_per_second(self):
        """Gets the cost_per_second of this VehicleType.

        **_BETA feature_**! Cost parameter per time unit, here second is used

        :return: The cost_per_second of this VehicleType.
        :rtype: float
        """
        return self._cost_per_second

    @cost_per_second.setter
    def cost_per_second(self, cost_per_second):
        """Sets the cost_per_second of this VehicleType.

        **_BETA feature_**! Cost parameter per time unit, here second is used

        :param cost_per_second: The cost_per_second of this VehicleType.
        :type cost_per_second: float
        """

        self._cost_per_second = cost_per_second

    @property
    def network_data_provider(self):
        """Gets the network_data_provider of this VehicleType.

        Specifies the network data provider. Either use [`openstreetmap`](#section/Map-Data-and-Routing-Profiles/OpenStreetMap) (default) or [`tomtom`](#section/Map-Data-and-Routing-Profiles/TomTom) (add-on required).

        :return: The network_data_provider of this VehicleType.
        :rtype: str
        """
        return self._network_data_provider

    @network_data_provider.setter
    def network_data_provider(self, network_data_provider):
        """Sets the network_data_provider of this VehicleType.

        Specifies the network data provider. Either use [`openstreetmap`](#section/Map-Data-and-Routing-Profiles/OpenStreetMap) (default) or [`tomtom`](#section/Map-Data-and-Routing-Profiles/TomTom) (add-on required).

        :param network_data_provider: The network_data_provider of this VehicleType.
        :type network_data_provider: str
        """
        allowed_values = ["openstreetmap", "tomtom"]  # noqa: E501
        if network_data_provider not in allowed_values:
            raise ValueError(
                "Invalid value for `network_data_provider` ({0}), must be one of {1}"
                .format(network_data_provider, allowed_values)
            )

        self._network_data_provider = network_data_provider

    @property
    def profile(self):
        """Gets the profile of this VehicleType.


        :return: The profile of this VehicleType.
        :rtype: object
        """
        return self._profile

    @profile.setter
    def profile(self, profile):
        """Sets the profile of this VehicleType.


        :param profile: The profile of this VehicleType.
        :type profile: object
        """

        self._profile = profile

    @property
    def service_time_factor(self):
        """Gets the service_time_factor of this VehicleType.

        Specifies a service time factor for this vehicle type. If the vehicle/driver that uses this type is able to conduct the service as double as fast as it is determined in the corresponding service or shipment then set it to 0.5.

        :return: The service_time_factor of this VehicleType.
        :rtype: float
        """
        return self._service_time_factor

    @service_time_factor.setter
    def service_time_factor(self, service_time_factor):
        """Sets the service_time_factor of this VehicleType.

        Specifies a service time factor for this vehicle type. If the vehicle/driver that uses this type is able to conduct the service as double as fast as it is determined in the corresponding service or shipment then set it to 0.5.

        :param service_time_factor: The service_time_factor of this VehicleType.
        :type service_time_factor: float
        """

        self._service_time_factor = service_time_factor

    @property
    def speed_factor(self):
        """Gets the speed_factor of this VehicleType.

        Specifies a speed factor for this vehicle type. If the vehicle that uses this type needs to be only half as fast as what is actually calculated with our routing engine then set the speed factor to 0.5.

        :return: The speed_factor of this VehicleType.
        :rtype: float
        """
        return self._speed_factor

    @speed_factor.setter
    def speed_factor(self, speed_factor):
        """Sets the speed_factor of this VehicleType.

        Specifies a speed factor for this vehicle type. If the vehicle that uses this type needs to be only half as fast as what is actually calculated with our routing engine then set the speed factor to 0.5.

        :param speed_factor: The speed_factor of this VehicleType.
        :type speed_factor: float
        """

        self._speed_factor = speed_factor

    @property
    def type_id(self):
        """Gets the type_id of this VehicleType.

        Specifies the id of the vehicle type. If a vehicle needs to be of this type, it should refer to this with its type_id attribute.

        :return: The type_id of this VehicleType.
        :rtype: str
        """
        return self._type_id

    @type_id.setter
    def type_id(self, type_id):
        """Sets the type_id of this VehicleType.

        Specifies the id of the vehicle type. If a vehicle needs to be of this type, it should refer to this with its type_id attribute.

        :param type_id: The type_id of this VehicleType.
        :type type_id: str
        """
        if type_id is None:
            raise ValueError("Invalid value for `type_id`, must not be `None`")

        self._type_id = type_id
