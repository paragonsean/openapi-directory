/*
 * NSIDC Web Service Documentation Index
 * This API allows programmers to build National Snow and Ice Data Center data and metadata services into their applications.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@aoncadis.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.time.LocalDate;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SwaggerDocsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public SwaggerDocsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SwaggerDocsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for facets
     * @param searchTerms URL-encoded keyword or keywords desired by the client; OpenSearch 1.1 (optional)
     * @param count The number of search results per page desired by the client; OpenSearch 1.1 (optional, default to 25)
     * @param startIndex First search result desired by the search client; OpenSearch 1.1 (optional, default to 1)
     * @param spatial 4 comma separated values - W, S, E, N; OpenSearch-Geo 1.0, \&quot;box\&quot; parameter (optional, default to -180.0,-90.0,180.0,90.0)
     * @param sortKeys Sort the results by most relevant (default), smallest or largest spatial area, shortest or longest temporal duration, or most recently updated; partial implementation of OpenSearch SRU 1.0 (optional, default to score,,desc)
     * @param startDate The start date in yyyy-mm-dd format (optional)
     * @param endDate The end date in yyyy-mm-dd format (optional)
     * @param facetFilters Describes faceted restrictions on the search. A URL-encoded JSON object where the keys are the names of the facet, and the values are arrays of the selected facet values (optional)
     * @param source Custom parameter for selecting which source to use; the Arctic Data Explorer (ADE) uses data aggregated from many sources, including, but not limited to, NSIDC (optional, default to NSIDC)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call facetsCall(String searchTerms, Integer count, Integer startIndex, String spatial, String sortKeys, LocalDate startDate, LocalDate endDate, String facetFilters, String source, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/Facets";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (searchTerms != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("searchTerms", searchTerms));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        if (startIndex != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startIndex", startIndex));
        }

        if (spatial != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("spatial", spatial));
        }

        if (sortKeys != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sortKeys", sortKeys));
        }

        if (startDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startDate", startDate));
        }

        if (endDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endDate", endDate));
        }

        if (facetFilters != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("facetFilters", facetFilters));
        }

        if (source != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("source", source));
        }

        final String[] localVarAccepts = {
            "application/nsidcfacets+xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call facetsValidateBeforeCall(String searchTerms, Integer count, Integer startIndex, String spatial, String sortKeys, LocalDate startDate, LocalDate endDate, String facetFilters, String source, final ApiCallback _callback) throws ApiException {
        return facetsCall(searchTerms, count, startIndex, spatial, sortKeys, startDate, endDate, facetFilters, source, _callback);

    }

    /**
     * View the facet information corresponding to a search
     * In the NSIDC Search and Arctic Data Explorer interfaces, this endpoint is used in conjunction with /OpenSearch whenever a user submits a new search. Consequently, it has the same parameters as /OpenSearch.
     * @param searchTerms URL-encoded keyword or keywords desired by the client; OpenSearch 1.1 (optional)
     * @param count The number of search results per page desired by the client; OpenSearch 1.1 (optional, default to 25)
     * @param startIndex First search result desired by the search client; OpenSearch 1.1 (optional, default to 1)
     * @param spatial 4 comma separated values - W, S, E, N; OpenSearch-Geo 1.0, \&quot;box\&quot; parameter (optional, default to -180.0,-90.0,180.0,90.0)
     * @param sortKeys Sort the results by most relevant (default), smallest or largest spatial area, shortest or longest temporal duration, or most recently updated; partial implementation of OpenSearch SRU 1.0 (optional, default to score,,desc)
     * @param startDate The start date in yyyy-mm-dd format (optional)
     * @param endDate The end date in yyyy-mm-dd format (optional)
     * @param facetFilters Describes faceted restrictions on the search. A URL-encoded JSON object where the keys are the names of the facet, and the values are arrays of the selected facet values (optional)
     * @param source Custom parameter for selecting which source to use; the Arctic Data Explorer (ADE) uses data aggregated from many sources, including, but not limited to, NSIDC (optional, default to NSIDC)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public String facets(String searchTerms, Integer count, Integer startIndex, String spatial, String sortKeys, LocalDate startDate, LocalDate endDate, String facetFilters, String source) throws ApiException {
        ApiResponse<String> localVarResp = facetsWithHttpInfo(searchTerms, count, startIndex, spatial, sortKeys, startDate, endDate, facetFilters, source);
        return localVarResp.getData();
    }

    /**
     * View the facet information corresponding to a search
     * In the NSIDC Search and Arctic Data Explorer interfaces, this endpoint is used in conjunction with /OpenSearch whenever a user submits a new search. Consequently, it has the same parameters as /OpenSearch.
     * @param searchTerms URL-encoded keyword or keywords desired by the client; OpenSearch 1.1 (optional)
     * @param count The number of search results per page desired by the client; OpenSearch 1.1 (optional, default to 25)
     * @param startIndex First search result desired by the search client; OpenSearch 1.1 (optional, default to 1)
     * @param spatial 4 comma separated values - W, S, E, N; OpenSearch-Geo 1.0, \&quot;box\&quot; parameter (optional, default to -180.0,-90.0,180.0,90.0)
     * @param sortKeys Sort the results by most relevant (default), smallest or largest spatial area, shortest or longest temporal duration, or most recently updated; partial implementation of OpenSearch SRU 1.0 (optional, default to score,,desc)
     * @param startDate The start date in yyyy-mm-dd format (optional)
     * @param endDate The end date in yyyy-mm-dd format (optional)
     * @param facetFilters Describes faceted restrictions on the search. A URL-encoded JSON object where the keys are the names of the facet, and the values are arrays of the selected facet values (optional)
     * @param source Custom parameter for selecting which source to use; the Arctic Data Explorer (ADE) uses data aggregated from many sources, including, but not limited to, NSIDC (optional, default to NSIDC)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> facetsWithHttpInfo(String searchTerms, Integer count, Integer startIndex, String spatial, String sortKeys, LocalDate startDate, LocalDate endDate, String facetFilters, String source) throws ApiException {
        okhttp3.Call localVarCall = facetsValidateBeforeCall(searchTerms, count, startIndex, spatial, sortKeys, startDate, endDate, facetFilters, source, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * View the facet information corresponding to a search (asynchronously)
     * In the NSIDC Search and Arctic Data Explorer interfaces, this endpoint is used in conjunction with /OpenSearch whenever a user submits a new search. Consequently, it has the same parameters as /OpenSearch.
     * @param searchTerms URL-encoded keyword or keywords desired by the client; OpenSearch 1.1 (optional)
     * @param count The number of search results per page desired by the client; OpenSearch 1.1 (optional, default to 25)
     * @param startIndex First search result desired by the search client; OpenSearch 1.1 (optional, default to 1)
     * @param spatial 4 comma separated values - W, S, E, N; OpenSearch-Geo 1.0, \&quot;box\&quot; parameter (optional, default to -180.0,-90.0,180.0,90.0)
     * @param sortKeys Sort the results by most relevant (default), smallest or largest spatial area, shortest or longest temporal duration, or most recently updated; partial implementation of OpenSearch SRU 1.0 (optional, default to score,,desc)
     * @param startDate The start date in yyyy-mm-dd format (optional)
     * @param endDate The end date in yyyy-mm-dd format (optional)
     * @param facetFilters Describes faceted restrictions on the search. A URL-encoded JSON object where the keys are the names of the facet, and the values are arrays of the selected facet values (optional)
     * @param source Custom parameter for selecting which source to use; the Arctic Data Explorer (ADE) uses data aggregated from many sources, including, but not limited to, NSIDC (optional, default to NSIDC)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call facetsAsync(String searchTerms, Integer count, Integer startIndex, String spatial, String sortKeys, LocalDate startDate, LocalDate endDate, String facetFilters, String source, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = facetsValidateBeforeCall(searchTerms, count, startIndex, spatial, sortKeys, startDate, endDate, facetFilters, source, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for id
     * @param q Search terms typed into the interface (minimum two characters) (required)
     * @param source Custom parameter for selecting which source to use; the Arctic Data Explorer (ADE) uses data aggregated from many sources, including, but not limited to, NSIDC (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call idCall(String q, String source, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/suggest";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (source != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("source", source));
        }

        final String[] localVarAccepts = {
            "application/x-suggestions+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call idValidateBeforeCall(String q, String source, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'q' is set
        if (q == null) {
            throw new ApiException("Missing the required parameter 'q' when calling id(Async)");
        }

        // verify the required parameter 'source' is set
        if (source == null) {
            throw new ApiException("Missing the required parameter 'source' when calling id(Async)");
        }

        return idCall(q, source, _callback);

    }

    /**
     * Suggest search terms based on a partial query
     * In NSIDC Search and the Arctic Data Explorer, this endpoint is queried whenever the user types into the search terms box, and the returned suggestions are displayed in a dropdown beneath the search terms box. The q parameter and returned JSON follow the specifications of the OpenSearch Suggestions 1.0 extension.
     * @param q Search terms typed into the interface (minimum two characters) (required)
     * @param source Custom parameter for selecting which source to use; the Arctic Data Explorer (ADE) uses data aggregated from many sources, including, but not limited to, NSIDC (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public String id(String q, String source) throws ApiException {
        ApiResponse<String> localVarResp = idWithHttpInfo(q, source);
        return localVarResp.getData();
    }

    /**
     * Suggest search terms based on a partial query
     * In NSIDC Search and the Arctic Data Explorer, this endpoint is queried whenever the user types into the search terms box, and the returned suggestions are displayed in a dropdown beneath the search terms box. The q parameter and returned JSON follow the specifications of the OpenSearch Suggestions 1.0 extension.
     * @param q Search terms typed into the interface (minimum two characters) (required)
     * @param source Custom parameter for selecting which source to use; the Arctic Data Explorer (ADE) uses data aggregated from many sources, including, but not limited to, NSIDC (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> idWithHttpInfo(String q, String source) throws ApiException {
        okhttp3.Call localVarCall = idValidateBeforeCall(q, source, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Suggest search terms based on a partial query (asynchronously)
     * In NSIDC Search and the Arctic Data Explorer, this endpoint is queried whenever the user types into the search terms box, and the returned suggestions are displayed in a dropdown beneath the search terms box. The q parameter and returned JSON follow the specifications of the OpenSearch Suggestions 1.0 extension.
     * @param q Search terms typed into the interface (minimum two characters) (required)
     * @param source Custom parameter for selecting which source to use; the Arctic Data Explorer (ADE) uses data aggregated from many sources, including, but not limited to, NSIDC (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call idAsync(String q, String source, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = idValidateBeforeCall(q, source, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for openSearch
     * @param searchTerms URL-encoded keyword or keywords desired by the client; OpenSearch 1.1 (optional)
     * @param count The number of search results per page desired by the client; OpenSearch 1.1 (optional, default to 25)
     * @param startIndex First search result desired by the search client; OpenSearch 1.1 (optional, default to 1)
     * @param spatial 4 comma separated values - W, S, E, N; OpenSearch-Geo 1.0, \&quot;box\&quot; parameter (optional, default to -180.0,-90.0,180.0,90.0)
     * @param sortKeys Sort the results by most relevant (default), smallest or largest spatial area, shortest or longest temporal duration, or most recently updated; partial implementation of OpenSearch SRU 1.0 (optional, default to score,,desc)
     * @param startDate The start date in yyyy-mm-dd format (optional)
     * @param endDate The end date in yyyy-mm-dd format (optional)
     * @param facetFilters Describes faceted restrictions on the search. A URL-encoded JSON object where the keys are the names of the facet, and the values are arrays of the selected facet values (optional)
     * @param source Custom parameter for selecting which source to use; the Arctic Data Explorer (ADE) uses data aggregated from many sources, including, but not limited to, NSIDC (optional, default to NSIDC)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call openSearchCall(String searchTerms, Integer count, Integer startIndex, String spatial, String sortKeys, LocalDate startDate, LocalDate endDate, String facetFilters, String source, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/OpenSearch";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (searchTerms != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("searchTerms", searchTerms));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        if (startIndex != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startIndex", startIndex));
        }

        if (spatial != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("spatial", spatial));
        }

        if (sortKeys != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sortKeys", sortKeys));
        }

        if (startDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startDate", startDate));
        }

        if (endDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endDate", endDate));
        }

        if (facetFilters != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("facetFilters", facetFilters));
        }

        if (source != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("source", source));
        }

        final String[] localVarAccepts = {
            "application/atom+xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call openSearchValidateBeforeCall(String searchTerms, Integer count, Integer startIndex, String spatial, String sortKeys, LocalDate startDate, LocalDate endDate, String facetFilters, String source, final ApiCallback _callback) throws ApiException {
        return openSearchCall(searchTerms, count, startIndex, spatial, sortKeys, startDate, endDate, facetFilters, source, _callback);

    }

    /**
     * Search documents using the OpenSearch 1.1 Specification
     * This endpoint uses parameters from the OpenSearch 1.1 specification, as well as parameters from the OpenSearch Geo (1.0) and SRU (1.0) extensions.
     * @param searchTerms URL-encoded keyword or keywords desired by the client; OpenSearch 1.1 (optional)
     * @param count The number of search results per page desired by the client; OpenSearch 1.1 (optional, default to 25)
     * @param startIndex First search result desired by the search client; OpenSearch 1.1 (optional, default to 1)
     * @param spatial 4 comma separated values - W, S, E, N; OpenSearch-Geo 1.0, \&quot;box\&quot; parameter (optional, default to -180.0,-90.0,180.0,90.0)
     * @param sortKeys Sort the results by most relevant (default), smallest or largest spatial area, shortest or longest temporal duration, or most recently updated; partial implementation of OpenSearch SRU 1.0 (optional, default to score,,desc)
     * @param startDate The start date in yyyy-mm-dd format (optional)
     * @param endDate The end date in yyyy-mm-dd format (optional)
     * @param facetFilters Describes faceted restrictions on the search. A URL-encoded JSON object where the keys are the names of the facet, and the values are arrays of the selected facet values (optional)
     * @param source Custom parameter for selecting which source to use; the Arctic Data Explorer (ADE) uses data aggregated from many sources, including, but not limited to, NSIDC (optional, default to NSIDC)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public String openSearch(String searchTerms, Integer count, Integer startIndex, String spatial, String sortKeys, LocalDate startDate, LocalDate endDate, String facetFilters, String source) throws ApiException {
        ApiResponse<String> localVarResp = openSearchWithHttpInfo(searchTerms, count, startIndex, spatial, sortKeys, startDate, endDate, facetFilters, source);
        return localVarResp.getData();
    }

    /**
     * Search documents using the OpenSearch 1.1 Specification
     * This endpoint uses parameters from the OpenSearch 1.1 specification, as well as parameters from the OpenSearch Geo (1.0) and SRU (1.0) extensions.
     * @param searchTerms URL-encoded keyword or keywords desired by the client; OpenSearch 1.1 (optional)
     * @param count The number of search results per page desired by the client; OpenSearch 1.1 (optional, default to 25)
     * @param startIndex First search result desired by the search client; OpenSearch 1.1 (optional, default to 1)
     * @param spatial 4 comma separated values - W, S, E, N; OpenSearch-Geo 1.0, \&quot;box\&quot; parameter (optional, default to -180.0,-90.0,180.0,90.0)
     * @param sortKeys Sort the results by most relevant (default), smallest or largest spatial area, shortest or longest temporal duration, or most recently updated; partial implementation of OpenSearch SRU 1.0 (optional, default to score,,desc)
     * @param startDate The start date in yyyy-mm-dd format (optional)
     * @param endDate The end date in yyyy-mm-dd format (optional)
     * @param facetFilters Describes faceted restrictions on the search. A URL-encoded JSON object where the keys are the names of the facet, and the values are arrays of the selected facet values (optional)
     * @param source Custom parameter for selecting which source to use; the Arctic Data Explorer (ADE) uses data aggregated from many sources, including, but not limited to, NSIDC (optional, default to NSIDC)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> openSearchWithHttpInfo(String searchTerms, Integer count, Integer startIndex, String spatial, String sortKeys, LocalDate startDate, LocalDate endDate, String facetFilters, String source) throws ApiException {
        okhttp3.Call localVarCall = openSearchValidateBeforeCall(searchTerms, count, startIndex, spatial, sortKeys, startDate, endDate, facetFilters, source, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Search documents using the OpenSearch 1.1 Specification (asynchronously)
     * This endpoint uses parameters from the OpenSearch 1.1 specification, as well as parameters from the OpenSearch Geo (1.0) and SRU (1.0) extensions.
     * @param searchTerms URL-encoded keyword or keywords desired by the client; OpenSearch 1.1 (optional)
     * @param count The number of search results per page desired by the client; OpenSearch 1.1 (optional, default to 25)
     * @param startIndex First search result desired by the search client; OpenSearch 1.1 (optional, default to 1)
     * @param spatial 4 comma separated values - W, S, E, N; OpenSearch-Geo 1.0, \&quot;box\&quot; parameter (optional, default to -180.0,-90.0,180.0,90.0)
     * @param sortKeys Sort the results by most relevant (default), smallest or largest spatial area, shortest or longest temporal duration, or most recently updated; partial implementation of OpenSearch SRU 1.0 (optional, default to score,,desc)
     * @param startDate The start date in yyyy-mm-dd format (optional)
     * @param endDate The end date in yyyy-mm-dd format (optional)
     * @param facetFilters Describes faceted restrictions on the search. A URL-encoded JSON object where the keys are the names of the facet, and the values are arrays of the selected facet values (optional)
     * @param source Custom parameter for selecting which source to use; the Arctic Data Explorer (ADE) uses data aggregated from many sources, including, but not limited to, NSIDC (optional, default to NSIDC)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call openSearchAsync(String searchTerms, Integer count, Integer startIndex, String spatial, String sortKeys, LocalDate startDate, LocalDate endDate, String facetFilters, String source, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = openSearchValidateBeforeCall(searchTerms, count, startIndex, spatial, sortKeys, startDate, endDate, facetFilters, source, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for opensearchDescription
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call opensearchDescriptionCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/OpenSearchDescription";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/opensearchdescription+xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call opensearchDescriptionValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return opensearchDescriptionCall(_callback);

    }

    /**
     * Describes the web interface of NSIDC&#39;s data search engine
     * 
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public String opensearchDescription() throws ApiException {
        ApiResponse<String> localVarResp = opensearchDescriptionWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Describes the web interface of NSIDC&#39;s data search engine
     * 
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> opensearchDescriptionWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = opensearchDescriptionValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Describes the web interface of NSIDC&#39;s data search engine (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call opensearchDescriptionAsync(final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = opensearchDescriptionValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
