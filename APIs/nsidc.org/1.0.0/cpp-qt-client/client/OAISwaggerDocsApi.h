/**
 * NSIDC Web Service Documentation Index
 * This API allows programmers to build National Snow and Ice Data Center data and metadata services into their applications.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@aoncadis.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAISwaggerDocsApi_H
#define OAI_OAISwaggerDocsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAISwaggerDocsApi : public QObject {
    Q_OBJECT

public:
    OAISwaggerDocsApi(const int timeOut = 0);
    ~OAISwaggerDocsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  search_terms QString [optional]
    * @param[in]  count qint32 [optional]
    * @param[in]  start_index qint32 [optional]
    * @param[in]  spatial QString [optional]
    * @param[in]  sort_keys QString [optional]
    * @param[in]  start_date QDate [optional]
    * @param[in]  end_date QDate [optional]
    * @param[in]  facet_filters QString [optional]
    * @param[in]  source QString [optional]
    */
    virtual void facets(const ::OpenAPI::OptionalParam<QString> &search_terms = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &start_index = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &spatial = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort_keys = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QDate> &start_date = ::OpenAPI::OptionalParam<QDate>(), const ::OpenAPI::OptionalParam<QDate> &end_date = ::OpenAPI::OptionalParam<QDate>(), const ::OpenAPI::OptionalParam<QString> &facet_filters = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &source = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  q QString [required]
    * @param[in]  source QString [required]
    */
    virtual void id(const QString &q, const QString &source);

    /**
    * @param[in]  search_terms QString [optional]
    * @param[in]  count qint32 [optional]
    * @param[in]  start_index qint32 [optional]
    * @param[in]  spatial QString [optional]
    * @param[in]  sort_keys QString [optional]
    * @param[in]  start_date QDate [optional]
    * @param[in]  end_date QDate [optional]
    * @param[in]  facet_filters QString [optional]
    * @param[in]  source QString [optional]
    */
    virtual void open_search(const ::OpenAPI::OptionalParam<QString> &search_terms = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &start_index = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &spatial = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort_keys = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QDate> &start_date = ::OpenAPI::OptionalParam<QDate>(), const ::OpenAPI::OptionalParam<QDate> &end_date = ::OpenAPI::OptionalParam<QDate>(), const ::OpenAPI::OptionalParam<QString> &facet_filters = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &source = ::OpenAPI::OptionalParam<QString>());


    virtual void opensearch_description();


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void facetsCallback(OAIHttpRequestWorker *worker);
    void idCallback(OAIHttpRequestWorker *worker);
    void open_searchCallback(OAIHttpRequestWorker *worker);
    void opensearch_descriptionCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void facetsSignal(QString summary);
    void idSignal(QString summary);
    void open_searchSignal(QString summary);
    void opensearch_descriptionSignal(QString summary);


    void facetsSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void idSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void open_searchSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void opensearch_descriptionSignalFull(OAIHttpRequestWorker *worker, QString summary);

    Q_DECL_DEPRECATED_X("Use facetsSignalError() instead")
    void facetsSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void facetsSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use idSignalError() instead")
    void idSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void idSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use open_searchSignalError() instead")
    void open_searchSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void open_searchSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use opensearch_descriptionSignalError() instead")
    void opensearch_descriptionSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void opensearch_descriptionSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use facetsSignalErrorFull() instead")
    void facetsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void facetsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use idSignalErrorFull() instead")
    void idSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void idSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use open_searchSignalErrorFull() instead")
    void open_searchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void open_searchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use opensearch_descriptionSignalErrorFull() instead")
    void opensearch_descriptionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void opensearch_descriptionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
