/**
 * NSIDC Web Service Documentation Index
 * This API allows programmers to build National Snow and Ice Data Center data and metadata services into their applications.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@aoncadis.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";

/**
* SwaggerDocs service.
* @module api/SwaggerDocsApi
* @version 1.0.0
*/
export default class SwaggerDocsApi {

    /**
    * Constructs a new SwaggerDocsApi. 
    * @alias module:api/SwaggerDocsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the facets operation.
     * @callback module:api/SwaggerDocsApi~facetsCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * View the facet information corresponding to a search
     * In the NSIDC Search and Arctic Data Explorer interfaces, this endpoint is used in conjunction with /OpenSearch whenever a user submits a new search. Consequently, it has the same parameters as /OpenSearch.
     * @param {Object} opts Optional parameters
     * @param {String} [searchTerms] URL-encoded keyword or keywords desired by the client; OpenSearch 1.1
     * @param {Number} [count = 25)] The number of search results per page desired by the client; OpenSearch 1.1
     * @param {Number} [startIndex = 1)] First search result desired by the search client; OpenSearch 1.1
     * @param {String} [spatial = '-180.0,-90.0,180.0,90.0')] 4 comma separated values - W, S, E, N; OpenSearch-Geo 1.0, \"box\" parameter
     * @param {module:model/String} [sortKeys = 'score,,desc')] Sort the results by most relevant (default), smallest or largest spatial area, shortest or longest temporal duration, or most recently updated; partial implementation of OpenSearch SRU 1.0
     * @param {Date} [startDate] The start date in yyyy-mm-dd format
     * @param {Date} [endDate] The end date in yyyy-mm-dd format
     * @param {String} [facetFilters] Describes faceted restrictions on the search. A URL-encoded JSON object where the keys are the names of the facet, and the values are arrays of the selected facet values
     * @param {module:model/String} [source = 'NSIDC')] Custom parameter for selecting which source to use; the Arctic Data Explorer (ADE) uses data aggregated from many sources, including, but not limited to, NSIDC
     * @param {module:api/SwaggerDocsApi~facetsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    facets(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'searchTerms': opts['searchTerms'],
        'count': opts['count'],
        'startIndex': opts['startIndex'],
        'spatial': opts['spatial'],
        'sortKeys': opts['sortKeys'],
        'startDate': opts['startDate'],
        'endDate': opts['endDate'],
        'facetFilters': opts['facetFilters'],
        'source': opts['source']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/nsidcfacets+xml'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/Facets', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the id operation.
     * @callback module:api/SwaggerDocsApi~idCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Suggest search terms based on a partial query
     * In NSIDC Search and the Arctic Data Explorer, this endpoint is queried whenever the user types into the search terms box, and the returned suggestions are displayed in a dropdown beneath the search terms box. The q parameter and returned JSON follow the specifications of the OpenSearch Suggestions 1.0 extension.
     * @param {String} q Search terms typed into the interface (minimum two characters)
     * @param {module:model/String} source Custom parameter for selecting which source to use; the Arctic Data Explorer (ADE) uses data aggregated from many sources, including, but not limited to, NSIDC
     * @param {module:api/SwaggerDocsApi~idCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    id(q, source, callback) {
      let postBody = null;
      // verify the required parameter 'q' is set
      if (q === undefined || q === null) {
        throw new Error("Missing the required parameter 'q' when calling id");
      }
      // verify the required parameter 'source' is set
      if (source === undefined || source === null) {
        throw new Error("Missing the required parameter 'source' when calling id");
      }

      let pathParams = {
      };
      let queryParams = {
        'q': q,
        'source': source
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/x-suggestions+json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/suggest', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the openSearch operation.
     * @callback module:api/SwaggerDocsApi~openSearchCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search documents using the OpenSearch 1.1 Specification
     * This endpoint uses parameters from the OpenSearch 1.1 specification, as well as parameters from the OpenSearch Geo (1.0) and SRU (1.0) extensions.
     * @param {Object} opts Optional parameters
     * @param {String} [searchTerms] URL-encoded keyword or keywords desired by the client; OpenSearch 1.1
     * @param {Number} [count = 25)] The number of search results per page desired by the client; OpenSearch 1.1
     * @param {Number} [startIndex = 1)] First search result desired by the search client; OpenSearch 1.1
     * @param {String} [spatial = '-180.0,-90.0,180.0,90.0')] 4 comma separated values - W, S, E, N; OpenSearch-Geo 1.0, \"box\" parameter
     * @param {module:model/String} [sortKeys = 'score,,desc')] Sort the results by most relevant (default), smallest or largest spatial area, shortest or longest temporal duration, or most recently updated; partial implementation of OpenSearch SRU 1.0
     * @param {Date} [startDate] The start date in yyyy-mm-dd format
     * @param {Date} [endDate] The end date in yyyy-mm-dd format
     * @param {String} [facetFilters] Describes faceted restrictions on the search. A URL-encoded JSON object where the keys are the names of the facet, and the values are arrays of the selected facet values
     * @param {module:model/String} [source = 'NSIDC')] Custom parameter for selecting which source to use; the Arctic Data Explorer (ADE) uses data aggregated from many sources, including, but not limited to, NSIDC
     * @param {module:api/SwaggerDocsApi~openSearchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    openSearch(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'searchTerms': opts['searchTerms'],
        'count': opts['count'],
        'startIndex': opts['startIndex'],
        'spatial': opts['spatial'],
        'sortKeys': opts['sortKeys'],
        'startDate': opts['startDate'],
        'endDate': opts['endDate'],
        'facetFilters': opts['facetFilters'],
        'source': opts['source']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/atom+xml'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/OpenSearch', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the opensearchDescription operation.
     * @callback module:api/SwaggerDocsApi~opensearchDescriptionCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Describes the web interface of NSIDC's data search engine
     * @param {module:api/SwaggerDocsApi~opensearchDescriptionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    opensearchDescription(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/opensearchdescription+xml'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/OpenSearchDescription', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
