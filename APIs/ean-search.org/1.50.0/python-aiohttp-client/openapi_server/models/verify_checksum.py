# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class VerifyChecksum(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ean: str=None, valid: str=None):
        """VerifyChecksum - a model defined in OpenAPI

        :param ean: The ean of this VerifyChecksum.
        :param valid: The valid of this VerifyChecksum.
        """
        self.openapi_types = {
            'ean': str,
            'valid': str
        }

        self.attribute_map = {
            'ean': 'ean',
            'valid': 'valid'
        }

        self._ean = ean
        self._valid = valid

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VerifyChecksum':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VerifyChecksum of this VerifyChecksum.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ean(self):
        """Gets the ean of this VerifyChecksum.


        :return: The ean of this VerifyChecksum.
        :rtype: str
        """
        return self._ean

    @ean.setter
    def ean(self, ean):
        """Sets the ean of this VerifyChecksum.


        :param ean: The ean of this VerifyChecksum.
        :type ean: str
        """
        if ean is None:
            raise ValueError("Invalid value for `ean`, must not be `None`")

        self._ean = ean

    @property
    def valid(self):
        """Gets the valid of this VerifyChecksum.


        :return: The valid of this VerifyChecksum.
        :rtype: str
        """
        return self._valid

    @valid.setter
    def valid(self, valid):
        """Sets the valid of this VerifyChecksum.


        :param valid: The valid of this VerifyChecksum.
        :type valid: str
        """
        allowed_values = ["0", "1"]  # noqa: E501
        if valid not in allowed_values:
            raise ValueError(
                "Invalid value for `valid` ({0}), must be one of {1}"
                .format(valid, allowed_values)
            )

        self._valid = valid
