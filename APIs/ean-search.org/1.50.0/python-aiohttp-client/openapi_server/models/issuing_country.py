# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class IssuingCountry(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ean: str=None, issuing_country: str=None):
        """IssuingCountry - a model defined in OpenAPI

        :param ean: The ean of this IssuingCountry.
        :param issuing_country: The issuing_country of this IssuingCountry.
        """
        self.openapi_types = {
            'ean': str,
            'issuing_country': str
        }

        self.attribute_map = {
            'ean': 'ean',
            'issuing_country': 'issuingCountry'
        }

        self._ean = ean
        self._issuing_country = issuing_country

    @classmethod
    def from_dict(cls, dikt: dict) -> 'IssuingCountry':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The IssuingCountry of this IssuingCountry.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ean(self):
        """Gets the ean of this IssuingCountry.


        :return: The ean of this IssuingCountry.
        :rtype: str
        """
        return self._ean

    @ean.setter
    def ean(self, ean):
        """Sets the ean of this IssuingCountry.


        :param ean: The ean of this IssuingCountry.
        :type ean: str
        """
        if ean is None:
            raise ValueError("Invalid value for `ean`, must not be `None`")

        self._ean = ean

    @property
    def issuing_country(self):
        """Gets the issuing_country of this IssuingCountry.


        :return: The issuing_country of this IssuingCountry.
        :rtype: str
        """
        return self._issuing_country

    @issuing_country.setter
    def issuing_country(self, issuing_country):
        """Sets the issuing_country of this IssuingCountry.


        :param issuing_country: The issuing_country of this IssuingCountry.
        :type issuing_country: str
        """
        if issuing_country is None:
            raise ValueError("Invalid value for `issuing_country`, must not be `None`")

        self._issuing_country = issuing_country
