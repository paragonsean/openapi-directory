# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Barcode(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, barcode: str=None, ean: str=None):
        """Barcode - a model defined in OpenAPI

        :param barcode: The barcode of this Barcode.
        :param ean: The ean of this Barcode.
        """
        self.openapi_types = {
            'barcode': str,
            'ean': str
        }

        self.attribute_map = {
            'barcode': 'barcode',
            'ean': 'ean'
        }

        self._barcode = barcode
        self._ean = ean

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Barcode':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Barcode of this Barcode.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def barcode(self):
        """Gets the barcode of this Barcode.

        base64 encoded PNG image

        :return: The barcode of this Barcode.
        :rtype: str
        """
        return self._barcode

    @barcode.setter
    def barcode(self, barcode):
        """Sets the barcode of this Barcode.

        base64 encoded PNG image

        :param barcode: The barcode of this Barcode.
        :type barcode: str
        """
        if barcode is None:
            raise ValueError("Invalid value for `barcode`, must not be `None`")

        self._barcode = barcode

    @property
    def ean(self):
        """Gets the ean of this Barcode.


        :return: The ean of this Barcode.
        :rtype: str
        """
        return self._ean

    @ean.setter
    def ean(self, ean):
        """Sets the ean of this Barcode.


        :param ean: The ean of this Barcode.
        :type ean: str
        """
        if ean is None:
            raise ValueError("Invalid value for `ean`, must not be `None`")

        self._ean = ean
