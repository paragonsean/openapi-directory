/**
 * EAN-Search.org API
 * Documentation of the EAN-Search.org API, see [https://www.ean-search.org/ean-database-api.html](https://www.ean-search.org/ean-database-api.html). Please consult the PDF manual in your account for more details.
 *
 * The version of the OpenAPI document: 1.50.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProduct.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProduct::OAIProduct(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProduct::OAIProduct() {
    this->initializeModel();
}

OAIProduct::~OAIProduct() {}

void OAIProduct::initializeModel() {

    m_category_id_isSet = false;
    m_category_id_isValid = false;

    m_category_name_isSet = false;
    m_category_name_isValid = false;

    m_ean_isSet = false;
    m_ean_isValid = false;

    m_issuing_country_isSet = false;
    m_issuing_country_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;
}

void OAIProduct::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProduct::fromJsonObject(QJsonObject json) {

    m_category_id_isValid = ::OpenAPI::fromJsonValue(m_category_id, json[QString("categoryId")]);
    m_category_id_isSet = !json[QString("categoryId")].isNull() && m_category_id_isValid;

    m_category_name_isValid = ::OpenAPI::fromJsonValue(m_category_name, json[QString("categoryName")]);
    m_category_name_isSet = !json[QString("categoryName")].isNull() && m_category_name_isValid;

    m_ean_isValid = ::OpenAPI::fromJsonValue(m_ean, json[QString("ean")]);
    m_ean_isSet = !json[QString("ean")].isNull() && m_ean_isValid;

    m_issuing_country_isValid = ::OpenAPI::fromJsonValue(m_issuing_country, json[QString("issuingCountry")]);
    m_issuing_country_isSet = !json[QString("issuingCountry")].isNull() && m_issuing_country_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;
}

QString OAIProduct::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProduct::asJsonObject() const {
    QJsonObject obj;
    if (m_category_id_isSet) {
        obj.insert(QString("categoryId"), ::OpenAPI::toJsonValue(m_category_id));
    }
    if (m_category_name_isSet) {
        obj.insert(QString("categoryName"), ::OpenAPI::toJsonValue(m_category_name));
    }
    if (m_ean_isSet) {
        obj.insert(QString("ean"), ::OpenAPI::toJsonValue(m_ean));
    }
    if (m_issuing_country_isSet) {
        obj.insert(QString("issuingCountry"), ::OpenAPI::toJsonValue(m_issuing_country));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    return obj;
}

QString OAIProduct::getCategoryId() const {
    return m_category_id;
}
void OAIProduct::setCategoryId(const QString &category_id) {
    m_category_id = category_id;
    m_category_id_isSet = true;
}

bool OAIProduct::is_category_id_Set() const{
    return m_category_id_isSet;
}

bool OAIProduct::is_category_id_Valid() const{
    return m_category_id_isValid;
}

QString OAIProduct::getCategoryName() const {
    return m_category_name;
}
void OAIProduct::setCategoryName(const QString &category_name) {
    m_category_name = category_name;
    m_category_name_isSet = true;
}

bool OAIProduct::is_category_name_Set() const{
    return m_category_name_isSet;
}

bool OAIProduct::is_category_name_Valid() const{
    return m_category_name_isValid;
}

QString OAIProduct::getEan() const {
    return m_ean;
}
void OAIProduct::setEan(const QString &ean) {
    m_ean = ean;
    m_ean_isSet = true;
}

bool OAIProduct::is_ean_Set() const{
    return m_ean_isSet;
}

bool OAIProduct::is_ean_Valid() const{
    return m_ean_isValid;
}

QString OAIProduct::getIssuingCountry() const {
    return m_issuing_country;
}
void OAIProduct::setIssuingCountry(const QString &issuing_country) {
    m_issuing_country = issuing_country;
    m_issuing_country_isSet = true;
}

bool OAIProduct::is_issuing_country_Set() const{
    return m_issuing_country_isSet;
}

bool OAIProduct::is_issuing_country_Valid() const{
    return m_issuing_country_isValid;
}

QString OAIProduct::getName() const {
    return m_name;
}
void OAIProduct::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIProduct::is_name_Set() const{
    return m_name_isSet;
}

bool OAIProduct::is_name_Valid() const{
    return m_name_isValid;
}

bool OAIProduct::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_category_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_category_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ean_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_issuing_country_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProduct::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_ean_isValid && m_issuing_country_isValid && m_name_isValid && true;
}

} // namespace OpenAPI
