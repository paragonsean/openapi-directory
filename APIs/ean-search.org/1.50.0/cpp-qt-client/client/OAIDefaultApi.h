/**
 * EAN-Search.org API
 * Documentation of the EAN-Search.org API, see [https://www.ean-search.org/ean-database-api.html](https://www.ean-search.org/ean-database-api.html). Please consult the PDF manual in your account for more details.
 *
 * The version of the OpenAPI document: 1.50.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDefaultApi_H
#define OAI_OAIDefaultApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIBarcode.h"
#include "OAIIssuingCountry.h"
#include "OAIProduct.h"
#include "OAIVerifyChecksum.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDefaultApi : public QObject {
    Q_OBJECT

public:
    OAIDefaultApi(const int timeOut = 0);
    ~OAIDefaultApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  op QString [required]
    * @param[in]  ean qint32 [required]
    * @param[in]  width qint32 [optional]
    * @param[in]  height qint32 [optional]
    * @param[in]  format QString [optional]
    */
    virtual void barcodeImage(const QString &op, const qint32 &ean, const ::OpenAPI::OptionalParam<qint32> &width = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &height = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &format = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  op QString [required]
    * @param[in]  ean qint32 [required]
    * @param[in]  language qint32 [optional]
    * @param[in]  format QString [optional]
    */
    virtual void barcodeLookup(const QString &op, const qint32 &ean, const ::OpenAPI::OptionalParam<qint32> &language = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &format = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  op QString [required]
    * @param[in]  prefix QString [required]
    * @param[in]  language qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  format QString [optional]
    */
    virtual void barcodePrefixSearch(const QString &op, const QString &prefix, const ::OpenAPI::OptionalParam<qint32> &language = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &format = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  op QString [required]
    * @param[in]  category qint32 [required]
    * @param[in]  name QString [optional]
    * @param[in]  language qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  format QString [optional]
    */
    virtual void categorySearch(const QString &op, const qint32 &category, const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &language = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &format = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  op QString [required]
    * @param[in]  ean qint32 [required]
    * @param[in]  format QString [optional]
    */
    virtual void issuingCountry(const QString &op, const qint32 &ean, const ::OpenAPI::OptionalParam<QString> &format = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  op QString [required]
    * @param[in]  name QString [required]
    * @param[in]  language qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  format QString [optional]
    */
    virtual void productSearch(const QString &op, const QString &name, const ::OpenAPI::OptionalParam<qint32> &language = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &format = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  op QString [required]
    * @param[in]  ean qint32 [required]
    * @param[in]  format QString [optional]
    */
    virtual void verifyChecksum(const QString &op, const qint32 &ean, const ::OpenAPI::OptionalParam<QString> &format = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void barcodeImageCallback(OAIHttpRequestWorker *worker);
    void barcodeLookupCallback(OAIHttpRequestWorker *worker);
    void barcodePrefixSearchCallback(OAIHttpRequestWorker *worker);
    void categorySearchCallback(OAIHttpRequestWorker *worker);
    void issuingCountryCallback(OAIHttpRequestWorker *worker);
    void productSearchCallback(OAIHttpRequestWorker *worker);
    void verifyChecksumCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void barcodeImageSignal(QList<OAIBarcode> summary);
    void barcodeLookupSignal(QList<OAIProduct> summary);
    void barcodePrefixSearchSignal(QList<OAIProduct> summary);
    void categorySearchSignal(QList<OAIProduct> summary);
    void issuingCountrySignal(QList<OAIIssuingCountry> summary);
    void productSearchSignal(QList<OAIProduct> summary);
    void verifyChecksumSignal(QList<OAIVerifyChecksum> summary);


    void barcodeImageSignalFull(OAIHttpRequestWorker *worker, QList<OAIBarcode> summary);
    void barcodeLookupSignalFull(OAIHttpRequestWorker *worker, QList<OAIProduct> summary);
    void barcodePrefixSearchSignalFull(OAIHttpRequestWorker *worker, QList<OAIProduct> summary);
    void categorySearchSignalFull(OAIHttpRequestWorker *worker, QList<OAIProduct> summary);
    void issuingCountrySignalFull(OAIHttpRequestWorker *worker, QList<OAIIssuingCountry> summary);
    void productSearchSignalFull(OAIHttpRequestWorker *worker, QList<OAIProduct> summary);
    void verifyChecksumSignalFull(OAIHttpRequestWorker *worker, QList<OAIVerifyChecksum> summary);

    Q_DECL_DEPRECATED_X("Use barcodeImageSignalError() instead")
    void barcodeImageSignalE(QList<OAIBarcode> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void barcodeImageSignalError(QList<OAIBarcode> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use barcodeLookupSignalError() instead")
    void barcodeLookupSignalE(QList<OAIProduct> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void barcodeLookupSignalError(QList<OAIProduct> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use barcodePrefixSearchSignalError() instead")
    void barcodePrefixSearchSignalE(QList<OAIProduct> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void barcodePrefixSearchSignalError(QList<OAIProduct> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use categorySearchSignalError() instead")
    void categorySearchSignalE(QList<OAIProduct> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void categorySearchSignalError(QList<OAIProduct> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use issuingCountrySignalError() instead")
    void issuingCountrySignalE(QList<OAIIssuingCountry> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void issuingCountrySignalError(QList<OAIIssuingCountry> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productSearchSignalError() instead")
    void productSearchSignalE(QList<OAIProduct> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void productSearchSignalError(QList<OAIProduct> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use verifyChecksumSignalError() instead")
    void verifyChecksumSignalE(QList<OAIVerifyChecksum> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void verifyChecksumSignalError(QList<OAIVerifyChecksum> summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use barcodeImageSignalErrorFull() instead")
    void barcodeImageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void barcodeImageSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use barcodeLookupSignalErrorFull() instead")
    void barcodeLookupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void barcodeLookupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use barcodePrefixSearchSignalErrorFull() instead")
    void barcodePrefixSearchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void barcodePrefixSearchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use categorySearchSignalErrorFull() instead")
    void categorySearchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void categorySearchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use issuingCountrySignalErrorFull() instead")
    void issuingCountrySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void issuingCountrySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productSearchSignalErrorFull() instead")
    void productSearchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void productSearchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use verifyChecksumSignalErrorFull() instead")
    void verifyChecksumSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void verifyChecksumSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
