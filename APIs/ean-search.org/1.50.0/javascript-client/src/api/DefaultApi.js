/**
 * EAN-Search.org API
 * Documentation of the EAN-Search.org API, see [https://www.ean-search.org/ean-database-api.html](https://www.ean-search.org/ean-database-api.html). Please consult the PDF manual in your account for more details.
 *
 * The version of the OpenAPI document: 1.50.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Barcode from '../model/Barcode';
import IssuingCountry from '../model/IssuingCountry';
import Product from '../model/Product';
import VerifyChecksum from '../model/VerifyChecksum';

/**
* Default service.
* @module api/DefaultApi
* @version 1.50.0
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the barcodeImage operation.
     * @callback module:api/DefaultApi~barcodeImageCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Barcode>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Generate a PNG barcode image
     * @param {module:model/String} op API operation
     * @param {Number} ean EAN code to search for
     * @param {Object} opts Optional parameters
     * @param {Number} [width = 102)] 
     * @param {Number} [height = 50)] 
     * @param {module:model/String} [format] output format
     * @param {module:api/DefaultApi~barcodeImageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Barcode>}
     */
    barcodeImage(op, ean, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'op' is set
      if (op === undefined || op === null) {
        throw new Error("Missing the required parameter 'op' when calling barcodeImage");
      }
      // verify the required parameter 'ean' is set
      if (ean === undefined || ean === null) {
        throw new Error("Missing the required parameter 'ean' when calling barcodeImage");
      }

      let pathParams = {
      };
      let queryParams = {
        'op': op,
        'ean': ean,
        'width': opts['width'],
        'height': opts['height'],
        'format': opts['format']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = [Barcode];
      return this.apiClient.callApi(
        '/barcode-image', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the barcodeLookup operation.
     * @callback module:api/DefaultApi~barcodeLookupCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Product>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Look up an EAN
     * Search by EAN code
     * @param {module:model/String} op API operation
     * @param {Number} ean EAN code to search for
     * @param {Object} opts Optional parameters
     * @param {Number} [language = 1)] preferred language for the product name
     * @param {module:model/String} [format] output format
     * @param {module:api/DefaultApi~barcodeLookupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Product>}
     */
    barcodeLookup(op, ean, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'op' is set
      if (op === undefined || op === null) {
        throw new Error("Missing the required parameter 'op' when calling barcodeLookup");
      }
      // verify the required parameter 'ean' is set
      if (ean === undefined || ean === null) {
        throw new Error("Missing the required parameter 'ean' when calling barcodeLookup");
      }

      let pathParams = {
      };
      let queryParams = {
        'op': op,
        'ean': ean,
        'language': opts['language'],
        'format': opts['format']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = [Product];
      return this.apiClient.callApi(
        '/barcode-lookup', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the barcodePrefixSearch operation.
     * @callback module:api/DefaultApi~barcodePrefixSearchCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Product>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Query the database for all barcodes with the same beginning
     * @param {module:model/String} op API operation
     * @param {String} prefix barcode prefix to search for, at least 4 digits
     * @param {Object} opts Optional parameters
     * @param {Number} [language = 1)] preferred language for the product name
     * @param {Number} [page = 0)] result page
     * @param {module:model/String} [format] output format
     * @param {module:api/DefaultApi~barcodePrefixSearchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Product>}
     */
    barcodePrefixSearch(op, prefix, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'op' is set
      if (op === undefined || op === null) {
        throw new Error("Missing the required parameter 'op' when calling barcodePrefixSearch");
      }
      // verify the required parameter 'prefix' is set
      if (prefix === undefined || prefix === null) {
        throw new Error("Missing the required parameter 'prefix' when calling barcodePrefixSearch");
      }

      let pathParams = {
      };
      let queryParams = {
        'op': op,
        'prefix': prefix,
        'language': opts['language'],
        'page': opts['page'],
        'format': opts['format']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = [Product];
      return this.apiClient.callApi(
        '/barcode-prefix-search', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the categorySearch operation.
     * @callback module:api/DefaultApi~categorySearchCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Product>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search for products form a certain category
     * @param {module:model/String} op API operation
     * @param {Number} category category number
     * @param {Object} opts Optional parameters
     * @param {String} [name] name or keyords to search for
     * @param {Number} [language = 99)] preferred language for the product name (default any language)
     * @param {Number} [page = 0)] result page
     * @param {module:model/String} [format] output format
     * @param {module:api/DefaultApi~categorySearchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Product>}
     */
    categorySearch(op, category, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'op' is set
      if (op === undefined || op === null) {
        throw new Error("Missing the required parameter 'op' when calling categorySearch");
      }
      // verify the required parameter 'category' is set
      if (category === undefined || category === null) {
        throw new Error("Missing the required parameter 'category' when calling categorySearch");
      }

      let pathParams = {
      };
      let queryParams = {
        'op': op,
        'category': category,
        'name': opts['name'],
        'language': opts['language'],
        'page': opts['page'],
        'format': opts['format']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = [Product];
      return this.apiClient.callApi(
        '/category-search', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the issuingCountry operation.
     * @callback module:api/DefaultApi~issuingCountryCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/IssuingCountry>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search for a issuing country of a barcode
     * Search for a issuing country of a barcode. In contrast to barcode-lookup, this will always give a result, even if we don't know the product name.
     * @param {module:model/String} op API operation
     * @param {Number} ean EAN code to search for
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [format] output format
     * @param {module:api/DefaultApi~issuingCountryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/IssuingCountry>}
     */
    issuingCountry(op, ean, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'op' is set
      if (op === undefined || op === null) {
        throw new Error("Missing the required parameter 'op' when calling issuingCountry");
      }
      // verify the required parameter 'ean' is set
      if (ean === undefined || ean === null) {
        throw new Error("Missing the required parameter 'ean' when calling issuingCountry");
      }

      let pathParams = {
      };
      let queryParams = {
        'op': op,
        'ean': ean,
        'format': opts['format']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = [IssuingCountry];
      return this.apiClient.callApi(
        '/issuing-country', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the productSearch operation.
     * @callback module:api/DefaultApi~productSearchCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Product>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search by product name
     * @param {module:model/String} op API operation
     * @param {String} name name or keyords to search for
     * @param {Object} opts Optional parameters
     * @param {Number} [language = 99)] preferred language for the product name (default any language)
     * @param {Number} [page = 0)] result page
     * @param {module:model/String} [format] output format
     * @param {module:api/DefaultApi~productSearchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Product>}
     */
    productSearch(op, name, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'op' is set
      if (op === undefined || op === null) {
        throw new Error("Missing the required parameter 'op' when calling productSearch");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling productSearch");
      }

      let pathParams = {
      };
      let queryParams = {
        'op': op,
        'name': name,
        'language': opts['language'],
        'page': opts['page'],
        'format': opts['format']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = [Product];
      return this.apiClient.callApi(
        '/product-search', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the verifyChecksum operation.
     * @callback module:api/DefaultApi~verifyChecksumCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/VerifyChecksum>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Verify the checksum of an EAN code
     * @param {module:model/String} op API operation
     * @param {Number} ean EAN code to search for
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [format] output format
     * @param {module:api/DefaultApi~verifyChecksumCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/VerifyChecksum>}
     */
    verifyChecksum(op, ean, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'op' is set
      if (op === undefined || op === null) {
        throw new Error("Missing the required parameter 'op' when calling verifyChecksum");
      }
      // verify the required parameter 'ean' is set
      if (ean === undefined || ean === null) {
        throw new Error("Missing the required parameter 'ean' when calling verifyChecksum");
      }

      let pathParams = {
      };
      let queryParams = {
        'op': op,
        'ean': ean,
        'format': opts['format']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['ApiKeyAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = [VerifyChecksum];
      return this.apiClient.callApi(
        '/verify-checksum', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
