/*
 * EAN-Search.org API
 * Documentation of the EAN-Search.org API, see [https://www.ean-search.org/ean-database-api.html](https://www.ean-search.org/ean-database-api.html). Please consult the PDF manual in your account for more details.
 *
 * The version of the OpenAPI document: 1.50.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Barcode;
import org.openapitools.client.model.IssuingCountry;
import org.openapitools.client.model.Product;
import org.openapitools.client.model.VerifyChecksum;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for barcodeImage
     * @param op API operation (required)
     * @param ean EAN code to search for (required)
     * @param width  (optional, default to 102)
     * @param height  (optional, default to 50)
     * @param format output format (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid operation requested </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid access token </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Request limit reached </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Must use HTTP GET to access the API </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests (eg. rate limit exeeded) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call barcodeImageCall(String op, Integer ean, Integer width, Integer height, String format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/barcode-image";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (op != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("op", op));
        }

        if (ean != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ean", ean));
        }

        if (width != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("width", width));
        }

        if (height != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("height", height));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call barcodeImageValidateBeforeCall(String op, Integer ean, Integer width, Integer height, String format, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'op' is set
        if (op == null) {
            throw new ApiException("Missing the required parameter 'op' when calling barcodeImage(Async)");
        }

        // verify the required parameter 'ean' is set
        if (ean == null) {
            throw new ApiException("Missing the required parameter 'ean' when calling barcodeImage(Async)");
        }

        return barcodeImageCall(op, ean, width, height, format, _callback);

    }

    /**
     * Generate a PNG barcode image
     * 
     * @param op API operation (required)
     * @param ean EAN code to search for (required)
     * @param width  (optional, default to 102)
     * @param height  (optional, default to 50)
     * @param format output format (optional)
     * @return List&lt;Barcode&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid operation requested </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid access token </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Request limit reached </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Must use HTTP GET to access the API </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests (eg. rate limit exeeded) </td><td>  -  </td></tr>
     </table>
     */
    public List<Barcode> barcodeImage(String op, Integer ean, Integer width, Integer height, String format) throws ApiException {
        ApiResponse<List<Barcode>> localVarResp = barcodeImageWithHttpInfo(op, ean, width, height, format);
        return localVarResp.getData();
    }

    /**
     * Generate a PNG barcode image
     * 
     * @param op API operation (required)
     * @param ean EAN code to search for (required)
     * @param width  (optional, default to 102)
     * @param height  (optional, default to 50)
     * @param format output format (optional)
     * @return ApiResponse&lt;List&lt;Barcode&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid operation requested </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid access token </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Request limit reached </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Must use HTTP GET to access the API </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests (eg. rate limit exeeded) </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Barcode>> barcodeImageWithHttpInfo(String op, Integer ean, Integer width, Integer height, String format) throws ApiException {
        okhttp3.Call localVarCall = barcodeImageValidateBeforeCall(op, ean, width, height, format, null);
        Type localVarReturnType = new TypeToken<List<Barcode>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Generate a PNG barcode image (asynchronously)
     * 
     * @param op API operation (required)
     * @param ean EAN code to search for (required)
     * @param width  (optional, default to 102)
     * @param height  (optional, default to 50)
     * @param format output format (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid operation requested </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid access token </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Request limit reached </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Must use HTTP GET to access the API </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests (eg. rate limit exeeded) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call barcodeImageAsync(String op, Integer ean, Integer width, Integer height, String format, final ApiCallback<List<Barcode>> _callback) throws ApiException {

        okhttp3.Call localVarCall = barcodeImageValidateBeforeCall(op, ean, width, height, format, _callback);
        Type localVarReturnType = new TypeToken<List<Barcode>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for barcodeLookup
     * @param op API operation (required)
     * @param ean EAN code to search for (required)
     * @param language preferred language for the product name (optional, default to 1)
     * @param format output format (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid operation requested </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid access token </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Request limit reached </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Must use HTTP GET to access the API </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests (eg. rate limit exeeded) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call barcodeLookupCall(String op, Integer ean, Integer language, String format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/barcode-lookup";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (op != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("op", op));
        }

        if (ean != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ean", ean));
        }

        if (language != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("language", language));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call barcodeLookupValidateBeforeCall(String op, Integer ean, Integer language, String format, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'op' is set
        if (op == null) {
            throw new ApiException("Missing the required parameter 'op' when calling barcodeLookup(Async)");
        }

        // verify the required parameter 'ean' is set
        if (ean == null) {
            throw new ApiException("Missing the required parameter 'ean' when calling barcodeLookup(Async)");
        }

        return barcodeLookupCall(op, ean, language, format, _callback);

    }

    /**
     * Look up an EAN
     * Search by EAN code
     * @param op API operation (required)
     * @param ean EAN code to search for (required)
     * @param language preferred language for the product name (optional, default to 1)
     * @param format output format (optional)
     * @return List&lt;Product&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid operation requested </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid access token </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Request limit reached </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Must use HTTP GET to access the API </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests (eg. rate limit exeeded) </td><td>  -  </td></tr>
     </table>
     */
    public List<Product> barcodeLookup(String op, Integer ean, Integer language, String format) throws ApiException {
        ApiResponse<List<Product>> localVarResp = barcodeLookupWithHttpInfo(op, ean, language, format);
        return localVarResp.getData();
    }

    /**
     * Look up an EAN
     * Search by EAN code
     * @param op API operation (required)
     * @param ean EAN code to search for (required)
     * @param language preferred language for the product name (optional, default to 1)
     * @param format output format (optional)
     * @return ApiResponse&lt;List&lt;Product&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid operation requested </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid access token </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Request limit reached </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Must use HTTP GET to access the API </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests (eg. rate limit exeeded) </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Product>> barcodeLookupWithHttpInfo(String op, Integer ean, Integer language, String format) throws ApiException {
        okhttp3.Call localVarCall = barcodeLookupValidateBeforeCall(op, ean, language, format, null);
        Type localVarReturnType = new TypeToken<List<Product>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Look up an EAN (asynchronously)
     * Search by EAN code
     * @param op API operation (required)
     * @param ean EAN code to search for (required)
     * @param language preferred language for the product name (optional, default to 1)
     * @param format output format (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid operation requested </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid access token </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Request limit reached </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Must use HTTP GET to access the API </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests (eg. rate limit exeeded) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call barcodeLookupAsync(String op, Integer ean, Integer language, String format, final ApiCallback<List<Product>> _callback) throws ApiException {

        okhttp3.Call localVarCall = barcodeLookupValidateBeforeCall(op, ean, language, format, _callback);
        Type localVarReturnType = new TypeToken<List<Product>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for barcodePrefixSearch
     * @param op API operation (required)
     * @param prefix barcode prefix to search for, at least 4 digits (required)
     * @param language preferred language for the product name (optional, default to 1)
     * @param page result page (optional, default to 0)
     * @param format output format (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid operation requested </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid access token </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Request limit reached </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Must use HTTP GET to access the API </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests (eg. rate limit exeeded) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call barcodePrefixSearchCall(String op, String prefix, Integer language, Integer page, String format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/barcode-prefix-search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (op != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("op", op));
        }

        if (prefix != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("prefix", prefix));
        }

        if (language != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("language", language));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call barcodePrefixSearchValidateBeforeCall(String op, String prefix, Integer language, Integer page, String format, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'op' is set
        if (op == null) {
            throw new ApiException("Missing the required parameter 'op' when calling barcodePrefixSearch(Async)");
        }

        // verify the required parameter 'prefix' is set
        if (prefix == null) {
            throw new ApiException("Missing the required parameter 'prefix' when calling barcodePrefixSearch(Async)");
        }

        return barcodePrefixSearchCall(op, prefix, language, page, format, _callback);

    }

    /**
     * Query the database for all barcodes with the same beginning
     * 
     * @param op API operation (required)
     * @param prefix barcode prefix to search for, at least 4 digits (required)
     * @param language preferred language for the product name (optional, default to 1)
     * @param page result page (optional, default to 0)
     * @param format output format (optional)
     * @return List&lt;Product&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid operation requested </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid access token </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Request limit reached </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Must use HTTP GET to access the API </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests (eg. rate limit exeeded) </td><td>  -  </td></tr>
     </table>
     */
    public List<Product> barcodePrefixSearch(String op, String prefix, Integer language, Integer page, String format) throws ApiException {
        ApiResponse<List<Product>> localVarResp = barcodePrefixSearchWithHttpInfo(op, prefix, language, page, format);
        return localVarResp.getData();
    }

    /**
     * Query the database for all barcodes with the same beginning
     * 
     * @param op API operation (required)
     * @param prefix barcode prefix to search for, at least 4 digits (required)
     * @param language preferred language for the product name (optional, default to 1)
     * @param page result page (optional, default to 0)
     * @param format output format (optional)
     * @return ApiResponse&lt;List&lt;Product&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid operation requested </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid access token </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Request limit reached </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Must use HTTP GET to access the API </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests (eg. rate limit exeeded) </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Product>> barcodePrefixSearchWithHttpInfo(String op, String prefix, Integer language, Integer page, String format) throws ApiException {
        okhttp3.Call localVarCall = barcodePrefixSearchValidateBeforeCall(op, prefix, language, page, format, null);
        Type localVarReturnType = new TypeToken<List<Product>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Query the database for all barcodes with the same beginning (asynchronously)
     * 
     * @param op API operation (required)
     * @param prefix barcode prefix to search for, at least 4 digits (required)
     * @param language preferred language for the product name (optional, default to 1)
     * @param page result page (optional, default to 0)
     * @param format output format (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid operation requested </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid access token </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Request limit reached </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Must use HTTP GET to access the API </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests (eg. rate limit exeeded) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call barcodePrefixSearchAsync(String op, String prefix, Integer language, Integer page, String format, final ApiCallback<List<Product>> _callback) throws ApiException {

        okhttp3.Call localVarCall = barcodePrefixSearchValidateBeforeCall(op, prefix, language, page, format, _callback);
        Type localVarReturnType = new TypeToken<List<Product>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for categorySearch
     * @param op API operation (required)
     * @param category category number (required)
     * @param name name or keyords to search for (optional)
     * @param language preferred language for the product name (default any language) (optional, default to 99)
     * @param page result page (optional, default to 0)
     * @param format output format (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid operation requested </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid access token </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Request limit reached </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Must use HTTP GET to access the API </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests (eg. rate limit exeeded) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call categorySearchCall(String op, Integer category, String name, Integer language, Integer page, String format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/category-search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (op != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("op", op));
        }

        if (category != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("category", category));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (language != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("language", language));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call categorySearchValidateBeforeCall(String op, Integer category, String name, Integer language, Integer page, String format, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'op' is set
        if (op == null) {
            throw new ApiException("Missing the required parameter 'op' when calling categorySearch(Async)");
        }

        // verify the required parameter 'category' is set
        if (category == null) {
            throw new ApiException("Missing the required parameter 'category' when calling categorySearch(Async)");
        }

        return categorySearchCall(op, category, name, language, page, format, _callback);

    }

    /**
     * Search for products form a certain category
     * 
     * @param op API operation (required)
     * @param category category number (required)
     * @param name name or keyords to search for (optional)
     * @param language preferred language for the product name (default any language) (optional, default to 99)
     * @param page result page (optional, default to 0)
     * @param format output format (optional)
     * @return List&lt;Product&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid operation requested </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid access token </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Request limit reached </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Must use HTTP GET to access the API </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests (eg. rate limit exeeded) </td><td>  -  </td></tr>
     </table>
     */
    public List<Product> categorySearch(String op, Integer category, String name, Integer language, Integer page, String format) throws ApiException {
        ApiResponse<List<Product>> localVarResp = categorySearchWithHttpInfo(op, category, name, language, page, format);
        return localVarResp.getData();
    }

    /**
     * Search for products form a certain category
     * 
     * @param op API operation (required)
     * @param category category number (required)
     * @param name name or keyords to search for (optional)
     * @param language preferred language for the product name (default any language) (optional, default to 99)
     * @param page result page (optional, default to 0)
     * @param format output format (optional)
     * @return ApiResponse&lt;List&lt;Product&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid operation requested </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid access token </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Request limit reached </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Must use HTTP GET to access the API </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests (eg. rate limit exeeded) </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Product>> categorySearchWithHttpInfo(String op, Integer category, String name, Integer language, Integer page, String format) throws ApiException {
        okhttp3.Call localVarCall = categorySearchValidateBeforeCall(op, category, name, language, page, format, null);
        Type localVarReturnType = new TypeToken<List<Product>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Search for products form a certain category (asynchronously)
     * 
     * @param op API operation (required)
     * @param category category number (required)
     * @param name name or keyords to search for (optional)
     * @param language preferred language for the product name (default any language) (optional, default to 99)
     * @param page result page (optional, default to 0)
     * @param format output format (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid operation requested </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid access token </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Request limit reached </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Must use HTTP GET to access the API </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests (eg. rate limit exeeded) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call categorySearchAsync(String op, Integer category, String name, Integer language, Integer page, String format, final ApiCallback<List<Product>> _callback) throws ApiException {

        okhttp3.Call localVarCall = categorySearchValidateBeforeCall(op, category, name, language, page, format, _callback);
        Type localVarReturnType = new TypeToken<List<Product>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for issuingCountry
     * @param op API operation (required)
     * @param ean EAN code to search for (required)
     * @param format output format (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid operation requested </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid access token </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Request limit reached </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Must use HTTP GET to access the API </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests (eg. rate limit exeeded) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call issuingCountryCall(String op, Integer ean, String format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/issuing-country";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (op != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("op", op));
        }

        if (ean != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ean", ean));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call issuingCountryValidateBeforeCall(String op, Integer ean, String format, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'op' is set
        if (op == null) {
            throw new ApiException("Missing the required parameter 'op' when calling issuingCountry(Async)");
        }

        // verify the required parameter 'ean' is set
        if (ean == null) {
            throw new ApiException("Missing the required parameter 'ean' when calling issuingCountry(Async)");
        }

        return issuingCountryCall(op, ean, format, _callback);

    }

    /**
     * Search for a issuing country of a barcode
     * Search for a issuing country of a barcode. In contrast to barcode-lookup, this will always give a result, even if we don&#39;t know the product name.
     * @param op API operation (required)
     * @param ean EAN code to search for (required)
     * @param format output format (optional)
     * @return List&lt;IssuingCountry&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid operation requested </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid access token </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Request limit reached </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Must use HTTP GET to access the API </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests (eg. rate limit exeeded) </td><td>  -  </td></tr>
     </table>
     */
    public List<IssuingCountry> issuingCountry(String op, Integer ean, String format) throws ApiException {
        ApiResponse<List<IssuingCountry>> localVarResp = issuingCountryWithHttpInfo(op, ean, format);
        return localVarResp.getData();
    }

    /**
     * Search for a issuing country of a barcode
     * Search for a issuing country of a barcode. In contrast to barcode-lookup, this will always give a result, even if we don&#39;t know the product name.
     * @param op API operation (required)
     * @param ean EAN code to search for (required)
     * @param format output format (optional)
     * @return ApiResponse&lt;List&lt;IssuingCountry&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid operation requested </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid access token </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Request limit reached </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Must use HTTP GET to access the API </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests (eg. rate limit exeeded) </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<IssuingCountry>> issuingCountryWithHttpInfo(String op, Integer ean, String format) throws ApiException {
        okhttp3.Call localVarCall = issuingCountryValidateBeforeCall(op, ean, format, null);
        Type localVarReturnType = new TypeToken<List<IssuingCountry>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Search for a issuing country of a barcode (asynchronously)
     * Search for a issuing country of a barcode. In contrast to barcode-lookup, this will always give a result, even if we don&#39;t know the product name.
     * @param op API operation (required)
     * @param ean EAN code to search for (required)
     * @param format output format (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid operation requested </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid access token </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Request limit reached </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Must use HTTP GET to access the API </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests (eg. rate limit exeeded) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call issuingCountryAsync(String op, Integer ean, String format, final ApiCallback<List<IssuingCountry>> _callback) throws ApiException {

        okhttp3.Call localVarCall = issuingCountryValidateBeforeCall(op, ean, format, _callback);
        Type localVarReturnType = new TypeToken<List<IssuingCountry>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for productSearch
     * @param op API operation (required)
     * @param name name or keyords to search for (required)
     * @param language preferred language for the product name (default any language) (optional, default to 99)
     * @param page result page (optional, default to 0)
     * @param format output format (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid operation requested </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid access token </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Request limit reached </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Must use HTTP GET to access the API </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests (eg. rate limit exeeded) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productSearchCall(String op, String name, Integer language, Integer page, String format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/product-search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (op != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("op", op));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (language != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("language", language));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call productSearchValidateBeforeCall(String op, String name, Integer language, Integer page, String format, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'op' is set
        if (op == null) {
            throw new ApiException("Missing the required parameter 'op' when calling productSearch(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling productSearch(Async)");
        }

        return productSearchCall(op, name, language, page, format, _callback);

    }

    /**
     * Search by product name
     * 
     * @param op API operation (required)
     * @param name name or keyords to search for (required)
     * @param language preferred language for the product name (default any language) (optional, default to 99)
     * @param page result page (optional, default to 0)
     * @param format output format (optional)
     * @return List&lt;Product&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid operation requested </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid access token </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Request limit reached </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Must use HTTP GET to access the API </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests (eg. rate limit exeeded) </td><td>  -  </td></tr>
     </table>
     */
    public List<Product> productSearch(String op, String name, Integer language, Integer page, String format) throws ApiException {
        ApiResponse<List<Product>> localVarResp = productSearchWithHttpInfo(op, name, language, page, format);
        return localVarResp.getData();
    }

    /**
     * Search by product name
     * 
     * @param op API operation (required)
     * @param name name or keyords to search for (required)
     * @param language preferred language for the product name (default any language) (optional, default to 99)
     * @param page result page (optional, default to 0)
     * @param format output format (optional)
     * @return ApiResponse&lt;List&lt;Product&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid operation requested </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid access token </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Request limit reached </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Must use HTTP GET to access the API </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests (eg. rate limit exeeded) </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Product>> productSearchWithHttpInfo(String op, String name, Integer language, Integer page, String format) throws ApiException {
        okhttp3.Call localVarCall = productSearchValidateBeforeCall(op, name, language, page, format, null);
        Type localVarReturnType = new TypeToken<List<Product>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Search by product name (asynchronously)
     * 
     * @param op API operation (required)
     * @param name name or keyords to search for (required)
     * @param language preferred language for the product name (default any language) (optional, default to 99)
     * @param page result page (optional, default to 0)
     * @param format output format (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid operation requested </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid access token </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Request limit reached </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Must use HTTP GET to access the API </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests (eg. rate limit exeeded) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productSearchAsync(String op, String name, Integer language, Integer page, String format, final ApiCallback<List<Product>> _callback) throws ApiException {

        okhttp3.Call localVarCall = productSearchValidateBeforeCall(op, name, language, page, format, _callback);
        Type localVarReturnType = new TypeToken<List<Product>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for verifyChecksum
     * @param op API operation (required)
     * @param ean EAN code to search for (required)
     * @param format output format (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid operation requested </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid access token </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Request limit reached </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Must use HTTP GET to access the API </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests (eg. rate limit exeeded) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call verifyChecksumCall(String op, Integer ean, String format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/verify-checksum";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (op != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("op", op));
        }

        if (ean != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ean", ean));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call verifyChecksumValidateBeforeCall(String op, Integer ean, String format, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'op' is set
        if (op == null) {
            throw new ApiException("Missing the required parameter 'op' when calling verifyChecksum(Async)");
        }

        // verify the required parameter 'ean' is set
        if (ean == null) {
            throw new ApiException("Missing the required parameter 'ean' when calling verifyChecksum(Async)");
        }

        return verifyChecksumCall(op, ean, format, _callback);

    }

    /**
     * Verify the checksum of an EAN code
     * 
     * @param op API operation (required)
     * @param ean EAN code to search for (required)
     * @param format output format (optional)
     * @return List&lt;VerifyChecksum&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid operation requested </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid access token </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Request limit reached </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Must use HTTP GET to access the API </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests (eg. rate limit exeeded) </td><td>  -  </td></tr>
     </table>
     */
    public List<VerifyChecksum> verifyChecksum(String op, Integer ean, String format) throws ApiException {
        ApiResponse<List<VerifyChecksum>> localVarResp = verifyChecksumWithHttpInfo(op, ean, format);
        return localVarResp.getData();
    }

    /**
     * Verify the checksum of an EAN code
     * 
     * @param op API operation (required)
     * @param ean EAN code to search for (required)
     * @param format output format (optional)
     * @return ApiResponse&lt;List&lt;VerifyChecksum&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid operation requested </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid access token </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Request limit reached </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Must use HTTP GET to access the API </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests (eg. rate limit exeeded) </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<VerifyChecksum>> verifyChecksumWithHttpInfo(String op, Integer ean, String format) throws ApiException {
        okhttp3.Call localVarCall = verifyChecksumValidateBeforeCall(op, ean, format, null);
        Type localVarReturnType = new TypeToken<List<VerifyChecksum>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Verify the checksum of an EAN code (asynchronously)
     * 
     * @param op API operation (required)
     * @param ean EAN code to search for (required)
     * @param format output format (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid operation requested </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid access token </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> Request limit reached </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Must use HTTP GET to access the API </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests (eg. rate limit exeeded) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call verifyChecksumAsync(String op, Integer ean, String format, final ApiCallback<List<VerifyChecksum>> _callback) throws ApiException {

        okhttp3.Call localVarCall = verifyChecksumValidateBeforeCall(op, ean, format, _callback);
        Type localVarReturnType = new TypeToken<List<VerifyChecksum>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
