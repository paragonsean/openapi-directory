# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PandaGatewayAllOfCredentials(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, api_code: str=None, merchant_code: str=None, sign_key: str=None):
        """PandaGatewayAllOfCredentials - a model defined in OpenAPI

        :param api_code: The api_code of this PandaGatewayAllOfCredentials.
        :param merchant_code: The merchant_code of this PandaGatewayAllOfCredentials.
        :param sign_key: The sign_key of this PandaGatewayAllOfCredentials.
        """
        self.openapi_types = {
            'api_code': str,
            'merchant_code': str,
            'sign_key': str
        }

        self.attribute_map = {
            'api_code': 'apiCode',
            'merchant_code': 'merchantCode',
            'sign_key': 'signKey'
        }

        self._api_code = api_code
        self._merchant_code = merchant_code
        self._sign_key = sign_key

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PandaGatewayAllOfCredentials':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PandaGateway_allOf_credentials of this PandaGatewayAllOfCredentials.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def api_code(self):
        """Gets the api_code of this PandaGatewayAllOfCredentials.

        Panda Gateway api code.

        :return: The api_code of this PandaGatewayAllOfCredentials.
        :rtype: str
        """
        return self._api_code

    @api_code.setter
    def api_code(self, api_code):
        """Sets the api_code of this PandaGatewayAllOfCredentials.

        Panda Gateway api code.

        :param api_code: The api_code of this PandaGatewayAllOfCredentials.
        :type api_code: str
        """
        if api_code is None:
            raise ValueError("Invalid value for `api_code`, must not be `None`")

        self._api_code = api_code

    @property
    def merchant_code(self):
        """Gets the merchant_code of this PandaGatewayAllOfCredentials.

        Panda Gateway merchant code.

        :return: The merchant_code of this PandaGatewayAllOfCredentials.
        :rtype: str
        """
        return self._merchant_code

    @merchant_code.setter
    def merchant_code(self, merchant_code):
        """Sets the merchant_code of this PandaGatewayAllOfCredentials.

        Panda Gateway merchant code.

        :param merchant_code: The merchant_code of this PandaGatewayAllOfCredentials.
        :type merchant_code: str
        """
        if merchant_code is None:
            raise ValueError("Invalid value for `merchant_code`, must not be `None`")

        self._merchant_code = merchant_code

    @property
    def sign_key(self):
        """Gets the sign_key of this PandaGatewayAllOfCredentials.

        Panda Gateway sign key.

        :return: The sign_key of this PandaGatewayAllOfCredentials.
        :rtype: str
        """
        return self._sign_key

    @sign_key.setter
    def sign_key(self, sign_key):
        """Sets the sign_key of this PandaGatewayAllOfCredentials.

        Panda Gateway sign key.

        :param sign_key: The sign_key of this PandaGatewayAllOfCredentials.
        :type sign_key: str
        """
        if sign_key is None:
            raise ValueError("Invalid value for `sign_key`, must not be `None`")

        self._sign_key = sign_key
