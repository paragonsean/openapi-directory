# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AsiaPaymentGatewayAllOfCredentials(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, merchant_number: str=None, secret_key: str=None):
        """AsiaPaymentGatewayAllOfCredentials - a model defined in OpenAPI

        :param merchant_number: The merchant_number of this AsiaPaymentGatewayAllOfCredentials.
        :param secret_key: The secret_key of this AsiaPaymentGatewayAllOfCredentials.
        """
        self.openapi_types = {
            'merchant_number': str,
            'secret_key': str
        }

        self.attribute_map = {
            'merchant_number': 'merchantNumber',
            'secret_key': 'secretKey'
        }

        self._merchant_number = merchant_number
        self._secret_key = secret_key

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AsiaPaymentGatewayAllOfCredentials':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AsiaPaymentGateway_allOf_credentials of this AsiaPaymentGatewayAllOfCredentials.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def merchant_number(self):
        """Gets the merchant_number of this AsiaPaymentGatewayAllOfCredentials.

        AsiaPaymentGateway merchant number.

        :return: The merchant_number of this AsiaPaymentGatewayAllOfCredentials.
        :rtype: str
        """
        return self._merchant_number

    @merchant_number.setter
    def merchant_number(self, merchant_number):
        """Sets the merchant_number of this AsiaPaymentGatewayAllOfCredentials.

        AsiaPaymentGateway merchant number.

        :param merchant_number: The merchant_number of this AsiaPaymentGatewayAllOfCredentials.
        :type merchant_number: str
        """
        if merchant_number is None:
            raise ValueError("Invalid value for `merchant_number`, must not be `None`")

        self._merchant_number = merchant_number

    @property
    def secret_key(self):
        """Gets the secret_key of this AsiaPaymentGatewayAllOfCredentials.

        AsiaPaymentGateway secret key for hash.

        :return: The secret_key of this AsiaPaymentGatewayAllOfCredentials.
        :rtype: str
        """
        return self._secret_key

    @secret_key.setter
    def secret_key(self, secret_key):
        """Sets the secret_key of this AsiaPaymentGatewayAllOfCredentials.

        AsiaPaymentGateway secret key for hash.

        :param secret_key: The secret_key of this AsiaPaymentGatewayAllOfCredentials.
        :type secret_key: str
        """
        if secret_key is None:
            raise ValueError("Invalid value for `secret_key`, must not be `None`")

        self._secret_key = secret_key
