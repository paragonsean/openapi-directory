# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.coupon_restriction import CouponRestriction
from openapi_server.models.discount import Discount
from openapi_server.models.self_link import SelfLink
from openapi_server import util


class Coupon(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, links: List[SelfLink]=None, created_time: datetime=None, description: str=None, discount: Discount=None, expired_time: datetime=None, id: str=None, issued_time: datetime=None, redemptions_count: int=None, restrictions: List[CouponRestriction]=None, status: str=None, updated_time: datetime=None):
        """Coupon - a model defined in OpenAPI

        :param links: The links of this Coupon.
        :param created_time: The created_time of this Coupon.
        :param description: The description of this Coupon.
        :param discount: The discount of this Coupon.
        :param expired_time: The expired_time of this Coupon.
        :param id: The id of this Coupon.
        :param issued_time: The issued_time of this Coupon.
        :param redemptions_count: The redemptions_count of this Coupon.
        :param restrictions: The restrictions of this Coupon.
        :param status: The status of this Coupon.
        :param updated_time: The updated_time of this Coupon.
        """
        self.openapi_types = {
            'links': List[SelfLink],
            'created_time': datetime,
            'description': str,
            'discount': Discount,
            'expired_time': datetime,
            'id': str,
            'issued_time': datetime,
            'redemptions_count': int,
            'restrictions': List[CouponRestriction],
            'status': str,
            'updated_time': datetime
        }

        self.attribute_map = {
            'links': '_links',
            'created_time': 'createdTime',
            'description': 'description',
            'discount': 'discount',
            'expired_time': 'expiredTime',
            'id': 'id',
            'issued_time': 'issuedTime',
            'redemptions_count': 'redemptionsCount',
            'restrictions': 'restrictions',
            'status': 'status',
            'updated_time': 'updatedTime'
        }

        self._links = links
        self._created_time = created_time
        self._description = description
        self._discount = discount
        self._expired_time = expired_time
        self._id = id
        self._issued_time = issued_time
        self._redemptions_count = redemptions_count
        self._restrictions = restrictions
        self._status = status
        self._updated_time = updated_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Coupon':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Coupon of this Coupon.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def links(self):
        """Gets the links of this Coupon.

        The links related to resource.

        :return: The links of this Coupon.
        :rtype: List[SelfLink]
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this Coupon.

        The links related to resource.

        :param links: The links of this Coupon.
        :type links: List[SelfLink]
        """
        if links is not None and len(links) < 1:
            raise ValueError("Invalid value for `links`, number of items must be greater than or equal to `1`")

        self._links = links

    @property
    def created_time(self):
        """Gets the created_time of this Coupon.

        Coupon created time.

        :return: The created_time of this Coupon.
        :rtype: datetime
        """
        return self._created_time

    @created_time.setter
    def created_time(self, created_time):
        """Sets the created_time of this Coupon.

        Coupon created time.

        :param created_time: The created_time of this Coupon.
        :type created_time: datetime
        """

        self._created_time = created_time

    @property
    def description(self):
        """Gets the description of this Coupon.

        Your coupon description. When it is not empty this is used for invoice discount item description, otherwise the item's description uses coupon's ID like 'Coupon \"COUPON-ID\"'. 

        :return: The description of this Coupon.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Coupon.

        Your coupon description. When it is not empty this is used for invoice discount item description, otherwise the item's description uses coupon's ID like 'Coupon \"COUPON-ID\"'. 

        :param description: The description of this Coupon.
        :type description: str
        """

        self._description = description

    @property
    def discount(self):
        """Gets the discount of this Coupon.


        :return: The discount of this Coupon.
        :rtype: Discount
        """
        return self._discount

    @discount.setter
    def discount(self, discount):
        """Sets the discount of this Coupon.


        :param discount: The discount of this Coupon.
        :type discount: Discount
        """
        if discount is None:
            raise ValueError("Invalid value for `discount`, must not be `None`")

        self._discount = discount

    @property
    def expired_time(self):
        """Gets the expired_time of this Coupon.

        Coupon's expire time (end time).

        :return: The expired_time of this Coupon.
        :rtype: datetime
        """
        return self._expired_time

    @expired_time.setter
    def expired_time(self, expired_time):
        """Sets the expired_time of this Coupon.

        Coupon's expire time (end time).

        :param expired_time: The expired_time of this Coupon.
        :type expired_time: datetime
        """

        self._expired_time = expired_time

    @property
    def id(self):
        """Gets the id of this Coupon.

        Coupon's ID a.k.a redemption code.

        :return: The id of this Coupon.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Coupon.

        Coupon's ID a.k.a redemption code.

        :param id: The id of this Coupon.
        :type id: str
        """
        if id is not None and len(id) > 50:
            raise ValueError("Invalid value for `id`, length must be less than or equal to `50`")

        self._id = id

    @property
    def issued_time(self):
        """Gets the issued_time of this Coupon.

        Coupon's issued time (start time).

        :return: The issued_time of this Coupon.
        :rtype: datetime
        """
        return self._issued_time

    @issued_time.setter
    def issued_time(self, issued_time):
        """Sets the issued_time of this Coupon.

        Coupon's issued time (start time).

        :param issued_time: The issued_time of this Coupon.
        :type issued_time: datetime
        """
        if issued_time is None:
            raise ValueError("Invalid value for `issued_time`, must not be `None`")

        self._issued_time = issued_time

    @property
    def redemptions_count(self):
        """Gets the redemptions_count of this Coupon.

        Coupon's redemptions count.

        :return: The redemptions_count of this Coupon.
        :rtype: int
        """
        return self._redemptions_count

    @redemptions_count.setter
    def redemptions_count(self, redemptions_count):
        """Sets the redemptions_count of this Coupon.

        Coupon's redemptions count.

        :param redemptions_count: The redemptions_count of this Coupon.
        :type redemptions_count: int
        """
        if redemptions_count is not None and redemptions_count < 0:
            raise ValueError("Invalid value for `redemptions_count`, must be a value greater than or equal to `0`")

        self._redemptions_count = redemptions_count

    @property
    def restrictions(self):
        """Gets the restrictions of this Coupon.

        Coupon restrictions.

        :return: The restrictions of this Coupon.
        :rtype: List[CouponRestriction]
        """
        return self._restrictions

    @restrictions.setter
    def restrictions(self, restrictions):
        """Sets the restrictions of this Coupon.

        Coupon restrictions.

        :param restrictions: The restrictions of this Coupon.
        :type restrictions: List[CouponRestriction]
        """

        self._restrictions = restrictions

    @property
    def status(self):
        """Gets the status of this Coupon.

        If coupon enabled.

        :return: The status of this Coupon.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Coupon.

        If coupon enabled.

        :param status: The status of this Coupon.
        :type status: str
        """
        allowed_values = ["draft", "issued", "expired"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def updated_time(self):
        """Gets the updated_time of this Coupon.

        Coupon updated time.

        :return: The updated_time of this Coupon.
        :rtype: datetime
        """
        return self._updated_time

    @updated_time.setter
    def updated_time(self, updated_time):
        """Sets the updated_time of this Coupon.

        Coupon updated time.

        :param updated_time: The updated_time of this Coupon.
        :type updated_time: datetime
        """

        self._updated_time = updated_time
