# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class StairstepAllOfBrackets(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, max_quantity: int=None, price: float=None):
        """StairstepAllOfBrackets - a model defined in OpenAPI

        :param max_quantity: The max_quantity of this StairstepAllOfBrackets.
        :param price: The price of this StairstepAllOfBrackets.
        """
        self.openapi_types = {
            'max_quantity': int,
            'price': float
        }

        self.attribute_map = {
            'max_quantity': 'maxQuantity',
            'price': 'price'
        }

        self._max_quantity = max_quantity
        self._price = price

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StairstepAllOfBrackets':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The stairstep_allOf_brackets of this StairstepAllOfBrackets.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def max_quantity(self):
        """Gets the max_quantity of this StairstepAllOfBrackets.

        If the value is `null`, it's assumed to be infinite.  It starts at the end of the previous bracket. If there is no previous bracket, it starts at 1. 

        :return: The max_quantity of this StairstepAllOfBrackets.
        :rtype: int
        """
        return self._max_quantity

    @max_quantity.setter
    def max_quantity(self, max_quantity):
        """Sets the max_quantity of this StairstepAllOfBrackets.

        If the value is `null`, it's assumed to be infinite.  It starts at the end of the previous bracket. If there is no previous bracket, it starts at 1. 

        :param max_quantity: The max_quantity of this StairstepAllOfBrackets.
        :type max_quantity: int
        """

        self._max_quantity = max_quantity

    @property
    def price(self):
        """Gets the price of this StairstepAllOfBrackets.

        If the price is 0, it is free.

        :return: The price of this StairstepAllOfBrackets.
        :rtype: float
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this StairstepAllOfBrackets.

        If the price is 0, it is free.

        :param price: The price of this StairstepAllOfBrackets.
        :type price: float
        """

        self._price = price
