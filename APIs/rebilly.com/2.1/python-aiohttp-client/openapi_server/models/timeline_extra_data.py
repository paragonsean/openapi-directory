# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.timeline_action import TimelineAction
from openapi_server.models.timeline_extra_data_author import TimelineExtraDataAuthor
from openapi_server.models.timeline_extra_data_links_inner import TimelineExtraDataLinksInner
from openapi_server.models.timeline_table import TimelineTable
from openapi_server import util


class TimelineExtraData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, actions: List[TimelineAction]=None, author: TimelineExtraDataAuthor=None, links: List[TimelineExtraDataLinksInner]=None, mentions: Dict[str, str]=None, tables: List[TimelineTable]=None):
        """TimelineExtraData - a model defined in OpenAPI

        :param actions: The actions of this TimelineExtraData.
        :param author: The author of this TimelineExtraData.
        :param links: The links of this TimelineExtraData.
        :param mentions: The mentions of this TimelineExtraData.
        :param tables: The tables of this TimelineExtraData.
        """
        self.openapi_types = {
            'actions': List[TimelineAction],
            'author': TimelineExtraDataAuthor,
            'links': List[TimelineExtraDataLinksInner],
            'mentions': Dict[str, str],
            'tables': List[TimelineTable]
        }

        self.attribute_map = {
            'actions': 'actions',
            'author': 'author',
            'links': 'links',
            'mentions': 'mentions',
            'tables': 'tables'
        }

        self._actions = actions
        self._author = author
        self._links = links
        self._mentions = mentions
        self._tables = tables

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TimelineExtraData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TimelineExtraData of this TimelineExtraData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def actions(self):
        """Gets the actions of this TimelineExtraData.

        Actions available to a Timeline message. Can be empty in case no actions are available for a message.

        :return: The actions of this TimelineExtraData.
        :rtype: List[TimelineAction]
        """
        return self._actions

    @actions.setter
    def actions(self, actions):
        """Sets the actions of this TimelineExtraData.

        Actions available to a Timeline message. Can be empty in case no actions are available for a message.

        :param actions: The actions of this TimelineExtraData.
        :type actions: List[TimelineAction]
        """
        if actions is not None and len(actions) < 0:
            raise ValueError("Invalid value for `actions`, number of items must be greater than or equal to `0`")

        self._actions = actions

    @property
    def author(self):
        """Gets the author of this TimelineExtraData.


        :return: The author of this TimelineExtraData.
        :rtype: TimelineExtraDataAuthor
        """
        return self._author

    @author.setter
    def author(self, author):
        """Sets the author of this TimelineExtraData.


        :param author: The author of this TimelineExtraData.
        :type author: TimelineExtraDataAuthor
        """

        self._author = author

    @property
    def links(self):
        """Gets the links of this TimelineExtraData.


        :return: The links of this TimelineExtraData.
        :rtype: List[TimelineExtraDataLinksInner]
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this TimelineExtraData.


        :param links: The links of this TimelineExtraData.
        :type links: List[TimelineExtraDataLinksInner]
        """

        self._links = links

    @property
    def mentions(self):
        """Gets the mentions of this TimelineExtraData.


        :return: The mentions of this TimelineExtraData.
        :rtype: Dict[str, str]
        """
        return self._mentions

    @mentions.setter
    def mentions(self, mentions):
        """Sets the mentions of this TimelineExtraData.


        :param mentions: The mentions of this TimelineExtraData.
        :type mentions: Dict[str, str]
        """

        self._mentions = mentions

    @property
    def tables(self):
        """Gets the tables of this TimelineExtraData.


        :return: The tables of this TimelineExtraData.
        :rtype: List[TimelineTable]
        """
        return self._tables

    @tables.setter
    def tables(self, tables):
        """Sets the tables of this TimelineExtraData.


        :param tables: The tables of this TimelineExtraData.
        :type tables: List[TimelineTable]
        """
        if tables is not None and len(tables) < 0:
            raise ValueError("Invalid value for `tables`, number of items must be greater than or equal to `0`")

        self._tables = tables
