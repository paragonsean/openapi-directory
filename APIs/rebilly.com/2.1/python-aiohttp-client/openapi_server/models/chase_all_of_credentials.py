# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ChaseAllOfCredentials(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, co_number: str=None, division_id: str=None, partial_auth: bool=False, password: str=None, username: str=None):
        """ChaseAllOfCredentials - a model defined in OpenAPI

        :param co_number: The co_number of this ChaseAllOfCredentials.
        :param division_id: The division_id of this ChaseAllOfCredentials.
        :param partial_auth: The partial_auth of this ChaseAllOfCredentials.
        :param password: The password of this ChaseAllOfCredentials.
        :param username: The username of this ChaseAllOfCredentials.
        """
        self.openapi_types = {
            'co_number': str,
            'division_id': str,
            'partial_auth': bool,
            'password': str,
            'username': str
        }

        self.attribute_map = {
            'co_number': 'coNumber',
            'division_id': 'divisionId',
            'partial_auth': 'partialAuth',
            'password': 'password',
            'username': 'username'
        }

        self._co_number = co_number
        self._division_id = division_id
        self._partial_auth = partial_auth
        self._password = password
        self._username = username

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ChaseAllOfCredentials':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Chase_allOf_credentials of this ChaseAllOfCredentials.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def co_number(self):
        """Gets the co_number of this ChaseAllOfCredentials.

        Chase Gateway CO Number used for delimited file reports.

        :return: The co_number of this ChaseAllOfCredentials.
        :rtype: str
        """
        return self._co_number

    @co_number.setter
    def co_number(self, co_number):
        """Sets the co_number of this ChaseAllOfCredentials.

        Chase Gateway CO Number used for delimited file reports.

        :param co_number: The co_number of this ChaseAllOfCredentials.
        :type co_number: str
        """
        if co_number is None:
            raise ValueError("Invalid value for `co_number`, must not be `None`")

        self._co_number = co_number

    @property
    def division_id(self):
        """Gets the division_id of this ChaseAllOfCredentials.

        Chase Gateway division ID.

        :return: The division_id of this ChaseAllOfCredentials.
        :rtype: str
        """
        return self._division_id

    @division_id.setter
    def division_id(self, division_id):
        """Sets the division_id of this ChaseAllOfCredentials.

        Chase Gateway division ID.

        :param division_id: The division_id of this ChaseAllOfCredentials.
        :type division_id: str
        """
        if division_id is None:
            raise ValueError("Invalid value for `division_id`, must not be `None`")

        self._division_id = division_id

    @property
    def partial_auth(self):
        """Gets the partial_auth of this ChaseAllOfCredentials.

        Support for Partial Auths.

        :return: The partial_auth of this ChaseAllOfCredentials.
        :rtype: bool
        """
        return self._partial_auth

    @partial_auth.setter
    def partial_auth(self, partial_auth):
        """Sets the partial_auth of this ChaseAllOfCredentials.

        Support for Partial Auths.

        :param partial_auth: The partial_auth of this ChaseAllOfCredentials.
        :type partial_auth: bool
        """
        if partial_auth is None:
            raise ValueError("Invalid value for `partial_auth`, must not be `None`")

        self._partial_auth = partial_auth

    @property
    def password(self):
        """Gets the password of this ChaseAllOfCredentials.

        Chase Gateway Net Connect password.

        :return: The password of this ChaseAllOfCredentials.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this ChaseAllOfCredentials.

        Chase Gateway Net Connect password.

        :param password: The password of this ChaseAllOfCredentials.
        :type password: str
        """
        if password is None:
            raise ValueError("Invalid value for `password`, must not be `None`")

        self._password = password

    @property
    def username(self):
        """Gets the username of this ChaseAllOfCredentials.

        Chase Gateway Net Connect username.

        :return: The username of this ChaseAllOfCredentials.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this ChaseAllOfCredentials.

        Chase Gateway Net Connect username.

        :param username: The username of this ChaseAllOfCredentials.
        :type username: str
        """
        if username is None:
            raise ValueError("Invalid value for `username`, must not be `None`")

        self._username = username
