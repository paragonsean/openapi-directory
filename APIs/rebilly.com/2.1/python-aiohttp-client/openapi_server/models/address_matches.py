# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AddressMatches(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, city: str=None, _date: date=None, first_name: str=None, last_name: str=None, line1: str=None, phone: str=None, postal_code: str=None, region: str=None, unique_words: int=None, unique_words_result: bool=None, word_count: int=None, word_count_result: bool=None):
        """AddressMatches - a model defined in OpenAPI

        :param city: The city of this AddressMatches.
        :param _date: The _date of this AddressMatches.
        :param first_name: The first_name of this AddressMatches.
        :param last_name: The last_name of this AddressMatches.
        :param line1: The line1 of this AddressMatches.
        :param phone: The phone of this AddressMatches.
        :param postal_code: The postal_code of this AddressMatches.
        :param region: The region of this AddressMatches.
        :param unique_words: The unique_words of this AddressMatches.
        :param unique_words_result: The unique_words_result of this AddressMatches.
        :param word_count: The word_count of this AddressMatches.
        :param word_count_result: The word_count_result of this AddressMatches.
        """
        self.openapi_types = {
            'city': str,
            '_date': date,
            'first_name': str,
            'last_name': str,
            'line1': str,
            'phone': str,
            'postal_code': str,
            'region': str,
            'unique_words': int,
            'unique_words_result': bool,
            'word_count': int,
            'word_count_result': bool
        }

        self.attribute_map = {
            'city': 'city',
            '_date': 'date',
            'first_name': 'firstName',
            'last_name': 'lastName',
            'line1': 'line1',
            'phone': 'phone',
            'postal_code': 'postalCode',
            'region': 'region',
            'unique_words': 'uniqueWords',
            'unique_words_result': 'uniqueWordsResult',
            'word_count': 'wordCount',
            'word_count_result': 'wordCountResult'
        }

        self._city = city
        self.__date = _date
        self._first_name = first_name
        self._last_name = last_name
        self._line1 = line1
        self._phone = phone
        self._postal_code = postal_code
        self._region = region
        self._unique_words = unique_words
        self._unique_words_result = unique_words_result
        self._word_count = word_count
        self._word_count_result = word_count_result

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AddressMatches':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AddressMatches of this AddressMatches.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def city(self):
        """Gets the city of this AddressMatches.

        The customer city if it was matched, null otherwise.

        :return: The city of this AddressMatches.
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this AddressMatches.

        The customer city if it was matched, null otherwise.

        :param city: The city of this AddressMatches.
        :type city: str
        """

        self._city = city

    @property
    def _date(self):
        """Gets the _date of this AddressMatches.

        The date on the document proving the document is recent.

        :return: The _date of this AddressMatches.
        :rtype: date
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this AddressMatches.

        The date on the document proving the document is recent.

        :param _date: The _date of this AddressMatches.
        :type _date: date
        """

        self.__date = _date

    @property
    def first_name(self):
        """Gets the first_name of this AddressMatches.

        The customer first name if it was matched, null otherwise.

        :return: The first_name of this AddressMatches.
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this AddressMatches.

        The customer first name if it was matched, null otherwise.

        :param first_name: The first_name of this AddressMatches.
        :type first_name: str
        """

        self._first_name = first_name

    @property
    def last_name(self):
        """Gets the last_name of this AddressMatches.

        The customer last name if it was matched, null otherwise.

        :return: The last_name of this AddressMatches.
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this AddressMatches.

        The customer last name if it was matched, null otherwise.

        :param last_name: The last_name of this AddressMatches.
        :type last_name: str
        """

        self._last_name = last_name

    @property
    def line1(self):
        """Gets the line1 of this AddressMatches.

        The customer address if it was matched, null otherwise.

        :return: The line1 of this AddressMatches.
        :rtype: str
        """
        return self._line1

    @line1.setter
    def line1(self, line1):
        """Sets the line1 of this AddressMatches.

        The customer address if it was matched, null otherwise.

        :param line1: The line1 of this AddressMatches.
        :type line1: str
        """

        self._line1 = line1

    @property
    def phone(self):
        """Gets the phone of this AddressMatches.

        The phone of the company or agency that sent the document.

        :return: The phone of this AddressMatches.
        :rtype: str
        """
        return self._phone

    @phone.setter
    def phone(self, phone):
        """Sets the phone of this AddressMatches.

        The phone of the company or agency that sent the document.

        :param phone: The phone of this AddressMatches.
        :type phone: str
        """

        self._phone = phone

    @property
    def postal_code(self):
        """Gets the postal_code of this AddressMatches.

        The customer postal code if it was matched, null otherwise.

        :return: The postal_code of this AddressMatches.
        :rtype: str
        """
        return self._postal_code

    @postal_code.setter
    def postal_code(self, postal_code):
        """Sets the postal_code of this AddressMatches.

        The customer postal code if it was matched, null otherwise.

        :param postal_code: The postal_code of this AddressMatches.
        :type postal_code: str
        """

        self._postal_code = postal_code

    @property
    def region(self):
        """Gets the region of this AddressMatches.

        The customer region if it was matched, null otherwise.

        :return: The region of this AddressMatches.
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this AddressMatches.

        The customer region if it was matched, null otherwise.

        :param region: The region of this AddressMatches.
        :type region: str
        """

        self._region = region

    @property
    def unique_words(self):
        """Gets the unique_words of this AddressMatches.

        The number of unique words in the document.

        :return: The unique_words of this AddressMatches.
        :rtype: int
        """
        return self._unique_words

    @unique_words.setter
    def unique_words(self, unique_words):
        """Sets the unique_words of this AddressMatches.

        The number of unique words in the document.

        :param unique_words: The unique_words of this AddressMatches.
        :type unique_words: int
        """

        self._unique_words = unique_words

    @property
    def unique_words_result(self):
        """Gets the unique_words_result of this AddressMatches.

        Flag that indicates if the unique words passed the threshold.

        :return: The unique_words_result of this AddressMatches.
        :rtype: bool
        """
        return self._unique_words_result

    @unique_words_result.setter
    def unique_words_result(self, unique_words_result):
        """Sets the unique_words_result of this AddressMatches.

        Flag that indicates if the unique words passed the threshold.

        :param unique_words_result: The unique_words_result of this AddressMatches.
        :type unique_words_result: bool
        """

        self._unique_words_result = unique_words_result

    @property
    def word_count(self):
        """Gets the word_count of this AddressMatches.

        The number of words in the document.

        :return: The word_count of this AddressMatches.
        :rtype: int
        """
        return self._word_count

    @word_count.setter
    def word_count(self, word_count):
        """Sets the word_count of this AddressMatches.

        The number of words in the document.

        :param word_count: The word_count of this AddressMatches.
        :type word_count: int
        """

        self._word_count = word_count

    @property
    def word_count_result(self):
        """Gets the word_count_result of this AddressMatches.

        Flag that indicates if the word count passed the threshold.

        :return: The word_count_result of this AddressMatches.
        :rtype: bool
        """
        return self._word_count_result

    @word_count_result.setter
    def word_count_result(self, word_count_result):
        """Sets the word_count_result of this AddressMatches.

        Flag that indicates if the word count passed the threshold.

        :param word_count_result: The word_count_result of this AddressMatches.
        :type word_count_result: bool
        """

        self._word_count_result = word_count_result
