# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class EMSAllOfCredentials(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, client_certificate: str=None, client_certificate_password: str=None, merchant_name: str=None, password: str=None, private_key: str=None, private_key_password: str=None, server_certificate: str=None, sftp_private_key: str=None, store_id: str=None, user_id: str=None):
        """EMSAllOfCredentials - a model defined in OpenAPI

        :param client_certificate: The client_certificate of this EMSAllOfCredentials.
        :param client_certificate_password: The client_certificate_password of this EMSAllOfCredentials.
        :param merchant_name: The merchant_name of this EMSAllOfCredentials.
        :param password: The password of this EMSAllOfCredentials.
        :param private_key: The private_key of this EMSAllOfCredentials.
        :param private_key_password: The private_key_password of this EMSAllOfCredentials.
        :param server_certificate: The server_certificate of this EMSAllOfCredentials.
        :param sftp_private_key: The sftp_private_key of this EMSAllOfCredentials.
        :param store_id: The store_id of this EMSAllOfCredentials.
        :param user_id: The user_id of this EMSAllOfCredentials.
        """
        self.openapi_types = {
            'client_certificate': str,
            'client_certificate_password': str,
            'merchant_name': str,
            'password': str,
            'private_key': str,
            'private_key_password': str,
            'server_certificate': str,
            'sftp_private_key': str,
            'store_id': str,
            'user_id': str
        }

        self.attribute_map = {
            'client_certificate': 'clientCertificate',
            'client_certificate_password': 'clientCertificatePassword',
            'merchant_name': 'merchantName',
            'password': 'password',
            'private_key': 'privateKey',
            'private_key_password': 'privateKeyPassword',
            'server_certificate': 'serverCertificate',
            'sftp_private_key': 'sftpPrivateKey',
            'store_id': 'storeId',
            'user_id': 'userId'
        }

        self._client_certificate = client_certificate
        self._client_certificate_password = client_certificate_password
        self._merchant_name = merchant_name
        self._password = password
        self._private_key = private_key
        self._private_key_password = private_key_password
        self._server_certificate = server_certificate
        self._sftp_private_key = sftp_private_key
        self._store_id = store_id
        self._user_id = user_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EMSAllOfCredentials':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EMS_allOf_credentials of this EMSAllOfCredentials.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def client_certificate(self):
        """Gets the client_certificate of this EMSAllOfCredentials.

        Client Certificate.

        :return: The client_certificate of this EMSAllOfCredentials.
        :rtype: str
        """
        return self._client_certificate

    @client_certificate.setter
    def client_certificate(self, client_certificate):
        """Sets the client_certificate of this EMSAllOfCredentials.

        Client Certificate.

        :param client_certificate: The client_certificate of this EMSAllOfCredentials.
        :type client_certificate: str
        """
        if client_certificate is None:
            raise ValueError("Invalid value for `client_certificate`, must not be `None`")

        self._client_certificate = client_certificate

    @property
    def client_certificate_password(self):
        """Gets the client_certificate_password of this EMSAllOfCredentials.

        Client Certificate password.

        :return: The client_certificate_password of this EMSAllOfCredentials.
        :rtype: str
        """
        return self._client_certificate_password

    @client_certificate_password.setter
    def client_certificate_password(self, client_certificate_password):
        """Sets the client_certificate_password of this EMSAllOfCredentials.

        Client Certificate password.

        :param client_certificate_password: The client_certificate_password of this EMSAllOfCredentials.
        :type client_certificate_password: str
        """
        if client_certificate_password is None:
            raise ValueError("Invalid value for `client_certificate_password`, must not be `None`")

        self._client_certificate_password = client_certificate_password

    @property
    def merchant_name(self):
        """Gets the merchant_name of this EMSAllOfCredentials.

        Merchant Name for SFTP reconciliation.

        :return: The merchant_name of this EMSAllOfCredentials.
        :rtype: str
        """
        return self._merchant_name

    @merchant_name.setter
    def merchant_name(self, merchant_name):
        """Sets the merchant_name of this EMSAllOfCredentials.

        Merchant Name for SFTP reconciliation.

        :param merchant_name: The merchant_name of this EMSAllOfCredentials.
        :type merchant_name: str
        """

        self._merchant_name = merchant_name

    @property
    def password(self):
        """Gets the password of this EMSAllOfCredentials.

        EMS password.

        :return: The password of this EMSAllOfCredentials.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this EMSAllOfCredentials.

        EMS password.

        :param password: The password of this EMSAllOfCredentials.
        :type password: str
        """
        if password is None:
            raise ValueError("Invalid value for `password`, must not be `None`")

        self._password = password

    @property
    def private_key(self):
        """Gets the private_key of this EMSAllOfCredentials.

        Private Key.

        :return: The private_key of this EMSAllOfCredentials.
        :rtype: str
        """
        return self._private_key

    @private_key.setter
    def private_key(self, private_key):
        """Sets the private_key of this EMSAllOfCredentials.

        Private Key.

        :param private_key: The private_key of this EMSAllOfCredentials.
        :type private_key: str
        """
        if private_key is None:
            raise ValueError("Invalid value for `private_key`, must not be `None`")

        self._private_key = private_key

    @property
    def private_key_password(self):
        """Gets the private_key_password of this EMSAllOfCredentials.

        Private key password.

        :return: The private_key_password of this EMSAllOfCredentials.
        :rtype: str
        """
        return self._private_key_password

    @private_key_password.setter
    def private_key_password(self, private_key_password):
        """Sets the private_key_password of this EMSAllOfCredentials.

        Private key password.

        :param private_key_password: The private_key_password of this EMSAllOfCredentials.
        :type private_key_password: str
        """
        if private_key_password is None:
            raise ValueError("Invalid value for `private_key_password`, must not be `None`")

        self._private_key_password = private_key_password

    @property
    def server_certificate(self):
        """Gets the server_certificate of this EMSAllOfCredentials.

        Server Certificate.

        :return: The server_certificate of this EMSAllOfCredentials.
        :rtype: str
        """
        return self._server_certificate

    @server_certificate.setter
    def server_certificate(self, server_certificate):
        """Sets the server_certificate of this EMSAllOfCredentials.

        Server Certificate.

        :param server_certificate: The server_certificate of this EMSAllOfCredentials.
        :type server_certificate: str
        """
        if server_certificate is None:
            raise ValueError("Invalid value for `server_certificate`, must not be `None`")

        self._server_certificate = server_certificate

    @property
    def sftp_private_key(self):
        """Gets the sftp_private_key of this EMSAllOfCredentials.

        SFTP reconciliation private key.

        :return: The sftp_private_key of this EMSAllOfCredentials.
        :rtype: str
        """
        return self._sftp_private_key

    @sftp_private_key.setter
    def sftp_private_key(self, sftp_private_key):
        """Sets the sftp_private_key of this EMSAllOfCredentials.

        SFTP reconciliation private key.

        :param sftp_private_key: The sftp_private_key of this EMSAllOfCredentials.
        :type sftp_private_key: str
        """

        self._sftp_private_key = sftp_private_key

    @property
    def store_id(self):
        """Gets the store_id of this EMSAllOfCredentials.

        EMS store id.

        :return: The store_id of this EMSAllOfCredentials.
        :rtype: str
        """
        return self._store_id

    @store_id.setter
    def store_id(self, store_id):
        """Sets the store_id of this EMSAllOfCredentials.

        EMS store id.

        :param store_id: The store_id of this EMSAllOfCredentials.
        :type store_id: str
        """
        if store_id is None:
            raise ValueError("Invalid value for `store_id`, must not be `None`")

        self._store_id = store_id

    @property
    def user_id(self):
        """Gets the user_id of this EMSAllOfCredentials.

        EMS account id.

        :return: The user_id of this EMSAllOfCredentials.
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this EMSAllOfCredentials.

        EMS account id.

        :param user_id: The user_id of this EMSAllOfCredentials.
        :type user_id: str
        """
        if user_id is None:
            raise ValueError("Invalid value for `user_id`, must not be `None`")

        self._user_id = user_id
