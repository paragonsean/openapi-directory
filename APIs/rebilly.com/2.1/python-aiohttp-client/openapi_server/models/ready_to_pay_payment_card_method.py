# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.payment_card_brand import PaymentCardBrand
from openapi_server.models.ready_to_pay_payment_card_method_feature import ReadyToPayPaymentCardMethodFeature
from openapi_server import util


class ReadyToPayPaymentCardMethod(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, brands: List[PaymentCardBrand]=None, feature: ReadyToPayPaymentCardMethodFeature=None, filters: List[str]=None, method: str=None):
        """ReadyToPayPaymentCardMethod - a model defined in OpenAPI

        :param brands: The brands of this ReadyToPayPaymentCardMethod.
        :param feature: The feature of this ReadyToPayPaymentCardMethod.
        :param filters: The filters of this ReadyToPayPaymentCardMethod.
        :param method: The method of this ReadyToPayPaymentCardMethod.
        """
        self.openapi_types = {
            'brands': List[PaymentCardBrand],
            'feature': ReadyToPayPaymentCardMethodFeature,
            'filters': List[str],
            'method': str
        }

        self.attribute_map = {
            'brands': 'brands',
            'feature': 'feature',
            'filters': 'filters',
            'method': 'method'
        }

        self._brands = brands
        self._feature = feature
        self._filters = filters
        self._method = method

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ReadyToPayPaymentCardMethod':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ReadyToPayPaymentCardMethod of this ReadyToPayPaymentCardMethod.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def brands(self):
        """Gets the brands of this ReadyToPayPaymentCardMethod.

        The list of supported brands.

        :return: The brands of this ReadyToPayPaymentCardMethod.
        :rtype: List[PaymentCardBrand]
        """
        return self._brands

    @brands.setter
    def brands(self, brands):
        """Sets the brands of this ReadyToPayPaymentCardMethod.

        The list of supported brands.

        :param brands: The brands of this ReadyToPayPaymentCardMethod.
        :type brands: List[PaymentCardBrand]
        """
        if brands is not None and len(brands) < 1:
            raise ValueError("Invalid value for `brands`, number of items must be greater than or equal to `1`")

        self._brands = brands

    @property
    def feature(self):
        """Gets the feature of this ReadyToPayPaymentCardMethod.


        :return: The feature of this ReadyToPayPaymentCardMethod.
        :rtype: ReadyToPayPaymentCardMethodFeature
        """
        return self._feature

    @feature.setter
    def feature(self, feature):
        """Sets the feature of this ReadyToPayPaymentCardMethod.


        :param feature: The feature of this ReadyToPayPaymentCardMethod.
        :type feature: ReadyToPayPaymentCardMethodFeature
        """

        self._feature = feature

    @property
    def filters(self):
        """Gets the filters of this ReadyToPayPaymentCardMethod.

        For the method to be applicable any of the following filters should match. If no filters sent – no restrictions applied. This follows our standard filter format. 

        :return: The filters of this ReadyToPayPaymentCardMethod.
        :rtype: List[str]
        """
        return self._filters

    @filters.setter
    def filters(self, filters):
        """Sets the filters of this ReadyToPayPaymentCardMethod.

        For the method to be applicable any of the following filters should match. If no filters sent – no restrictions applied. This follows our standard filter format. 

        :param filters: The filters of this ReadyToPayPaymentCardMethod.
        :type filters: List[str]
        """

        self._filters = filters

    @property
    def method(self):
        """Gets the method of this ReadyToPayPaymentCardMethod.

        The payment method.

        :return: The method of this ReadyToPayPaymentCardMethod.
        :rtype: str
        """
        return self._method

    @method.setter
    def method(self, method):
        """Sets the method of this ReadyToPayPaymentCardMethod.

        The payment method.

        :param method: The method of this ReadyToPayPaymentCardMethod.
        :type method: str
        """
        allowed_values = ["payment-card"]  # noqa: E501
        if method not in allowed_values:
            raise ValueError(
                "Invalid value for `method` ({0}), must be one of {1}"
                .format(method, allowed_values)
            )

        self._method = method
