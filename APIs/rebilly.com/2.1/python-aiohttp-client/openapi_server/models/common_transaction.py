# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.contact_object import ContactObject
from openapi_server.models.gateway_name import GatewayName
from openapi_server.models.instrument_reference import InstrumentReference
from openapi_server.models.three_d_secure_result import ThreeDSecureResult
from openapi_server import util


class CommonTransaction(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, _3ds: ThreeDSecureResult=None, amount: float=None, billing_address: ContactObject=None, billing_descriptor: str=None, child_transactions: List[str]=None, created_time: datetime=None, currency: str=None, custom_fields: object=None, customer_id: str=None, description: str=None, gateway_name: GatewayName=None, has3ds: bool=None, has_amount_adjustment: bool=None, id: str=None, invoice_ids: List[str]=None, is_rebill: bool=None, is_retry: bool=None, parent_transaction_id: str=None, payment_instrument: InstrumentReference=None, plan_ids: List[str]=None, processed_time: datetime=None, purchase_amount: float=None, purchase_currency: str=None, rebill_number: int=None, redirect_url: str=None, request_amount: float=None, request_currency: str=None, request_id: str=None, result: str=None, retry_number: int=None, status: str=None, subscription_ids: List[str]=None, type: str=None, updated_time: datetime=None, website_id: str=None):
        """CommonTransaction - a model defined in OpenAPI

        :param _3ds: The _3ds of this CommonTransaction.
        :param amount: The amount of this CommonTransaction.
        :param billing_address: The billing_address of this CommonTransaction.
        :param billing_descriptor: The billing_descriptor of this CommonTransaction.
        :param child_transactions: The child_transactions of this CommonTransaction.
        :param created_time: The created_time of this CommonTransaction.
        :param currency: The currency of this CommonTransaction.
        :param custom_fields: The custom_fields of this CommonTransaction.
        :param customer_id: The customer_id of this CommonTransaction.
        :param description: The description of this CommonTransaction.
        :param gateway_name: The gateway_name of this CommonTransaction.
        :param has3ds: The has3ds of this CommonTransaction.
        :param has_amount_adjustment: The has_amount_adjustment of this CommonTransaction.
        :param id: The id of this CommonTransaction.
        :param invoice_ids: The invoice_ids of this CommonTransaction.
        :param is_rebill: The is_rebill of this CommonTransaction.
        :param is_retry: The is_retry of this CommonTransaction.
        :param parent_transaction_id: The parent_transaction_id of this CommonTransaction.
        :param payment_instrument: The payment_instrument of this CommonTransaction.
        :param plan_ids: The plan_ids of this CommonTransaction.
        :param processed_time: The processed_time of this CommonTransaction.
        :param purchase_amount: The purchase_amount of this CommonTransaction.
        :param purchase_currency: The purchase_currency of this CommonTransaction.
        :param rebill_number: The rebill_number of this CommonTransaction.
        :param redirect_url: The redirect_url of this CommonTransaction.
        :param request_amount: The request_amount of this CommonTransaction.
        :param request_currency: The request_currency of this CommonTransaction.
        :param request_id: The request_id of this CommonTransaction.
        :param result: The result of this CommonTransaction.
        :param retry_number: The retry_number of this CommonTransaction.
        :param status: The status of this CommonTransaction.
        :param subscription_ids: The subscription_ids of this CommonTransaction.
        :param type: The type of this CommonTransaction.
        :param updated_time: The updated_time of this CommonTransaction.
        :param website_id: The website_id of this CommonTransaction.
        """
        self.openapi_types = {
            '_3ds': ThreeDSecureResult,
            'amount': float,
            'billing_address': ContactObject,
            'billing_descriptor': str,
            'child_transactions': List[str],
            'created_time': datetime,
            'currency': str,
            'custom_fields': object,
            'customer_id': str,
            'description': str,
            'gateway_name': GatewayName,
            'has3ds': bool,
            'has_amount_adjustment': bool,
            'id': str,
            'invoice_ids': List[str],
            'is_rebill': bool,
            'is_retry': bool,
            'parent_transaction_id': str,
            'payment_instrument': InstrumentReference,
            'plan_ids': List[str],
            'processed_time': datetime,
            'purchase_amount': float,
            'purchase_currency': str,
            'rebill_number': int,
            'redirect_url': str,
            'request_amount': float,
            'request_currency': str,
            'request_id': str,
            'result': str,
            'retry_number': int,
            'status': str,
            'subscription_ids': List[str],
            'type': str,
            'updated_time': datetime,
            'website_id': str
        }

        self.attribute_map = {
            '_3ds': '3ds',
            'amount': 'amount',
            'billing_address': 'billingAddress',
            'billing_descriptor': 'billingDescriptor',
            'child_transactions': 'childTransactions',
            'created_time': 'createdTime',
            'currency': 'currency',
            'custom_fields': 'customFields',
            'customer_id': 'customerId',
            'description': 'description',
            'gateway_name': 'gatewayName',
            'has3ds': 'has3ds',
            'has_amount_adjustment': 'hasAmountAdjustment',
            'id': 'id',
            'invoice_ids': 'invoiceIds',
            'is_rebill': 'isRebill',
            'is_retry': 'isRetry',
            'parent_transaction_id': 'parentTransactionId',
            'payment_instrument': 'paymentInstrument',
            'plan_ids': 'planIds',
            'processed_time': 'processedTime',
            'purchase_amount': 'purchaseAmount',
            'purchase_currency': 'purchaseCurrency',
            'rebill_number': 'rebillNumber',
            'redirect_url': 'redirectUrl',
            'request_amount': 'requestAmount',
            'request_currency': 'requestCurrency',
            'request_id': 'requestId',
            'result': 'result',
            'retry_number': 'retryNumber',
            'status': 'status',
            'subscription_ids': 'subscriptionIds',
            'type': 'type',
            'updated_time': 'updatedTime',
            'website_id': 'websiteId'
        }

        self.__3ds = _3ds
        self._amount = amount
        self._billing_address = billing_address
        self._billing_descriptor = billing_descriptor
        self._child_transactions = child_transactions
        self._created_time = created_time
        self._currency = currency
        self._custom_fields = custom_fields
        self._customer_id = customer_id
        self._description = description
        self._gateway_name = gateway_name
        self._has3ds = has3ds
        self._has_amount_adjustment = has_amount_adjustment
        self._id = id
        self._invoice_ids = invoice_ids
        self._is_rebill = is_rebill
        self._is_retry = is_retry
        self._parent_transaction_id = parent_transaction_id
        self._payment_instrument = payment_instrument
        self._plan_ids = plan_ids
        self._processed_time = processed_time
        self._purchase_amount = purchase_amount
        self._purchase_currency = purchase_currency
        self._rebill_number = rebill_number
        self._redirect_url = redirect_url
        self._request_amount = request_amount
        self._request_currency = request_currency
        self._request_id = request_id
        self._result = result
        self._retry_number = retry_number
        self._status = status
        self._subscription_ids = subscription_ids
        self._type = type
        self._updated_time = updated_time
        self._website_id = website_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CommonTransaction':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CommonTransaction of this CommonTransaction.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def _3ds(self):
        """Gets the _3ds of this CommonTransaction.


        :return: The _3ds of this CommonTransaction.
        :rtype: ThreeDSecureResult
        """
        return self.__3ds

    @_3ds.setter
    def _3ds(self, _3ds):
        """Sets the _3ds of this CommonTransaction.


        :param _3ds: The _3ds of this CommonTransaction.
        :type _3ds: ThreeDSecureResult
        """

        self.__3ds = _3ds

    @property
    def amount(self):
        """Gets the amount of this CommonTransaction.

        The transaction's amount.

        :return: The amount of this CommonTransaction.
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this CommonTransaction.

        The transaction's amount.

        :param amount: The amount of this CommonTransaction.
        :type amount: float
        """

        self._amount = amount

    @property
    def billing_address(self):
        """Gets the billing_address of this CommonTransaction.

        Billing address.

        :return: The billing_address of this CommonTransaction.
        :rtype: ContactObject
        """
        return self._billing_address

    @billing_address.setter
    def billing_address(self, billing_address):
        """Sets the billing_address of this CommonTransaction.

        Billing address.

        :param billing_address: The billing_address of this CommonTransaction.
        :type billing_address: ContactObject
        """

        self._billing_address = billing_address

    @property
    def billing_descriptor(self):
        """Gets the billing_descriptor of this CommonTransaction.

        The billing descriptor that appears on the periodic billing statement. Commonly 12 or fewer characters for a credit card statement. 

        :return: The billing_descriptor of this CommonTransaction.
        :rtype: str
        """
        return self._billing_descriptor

    @billing_descriptor.setter
    def billing_descriptor(self, billing_descriptor):
        """Sets the billing_descriptor of this CommonTransaction.

        The billing descriptor that appears on the periodic billing statement. Commonly 12 or fewer characters for a credit card statement. 

        :param billing_descriptor: The billing_descriptor of this CommonTransaction.
        :type billing_descriptor: str
        """

        self._billing_descriptor = billing_descriptor

    @property
    def child_transactions(self):
        """Gets the child_transactions of this CommonTransaction.

        The child transaction IDs.

        :return: The child_transactions of this CommonTransaction.
        :rtype: List[str]
        """
        return self._child_transactions

    @child_transactions.setter
    def child_transactions(self, child_transactions):
        """Sets the child_transactions of this CommonTransaction.

        The child transaction IDs.

        :param child_transactions: The child_transactions of this CommonTransaction.
        :type child_transactions: List[str]
        """

        self._child_transactions = child_transactions

    @property
    def created_time(self):
        """Gets the created_time of this CommonTransaction.

        Transaction created time.

        :return: The created_time of this CommonTransaction.
        :rtype: datetime
        """
        return self._created_time

    @created_time.setter
    def created_time(self, created_time):
        """Sets the created_time of this CommonTransaction.

        Transaction created time.

        :param created_time: The created_time of this CommonTransaction.
        :type created_time: datetime
        """

        self._created_time = created_time

    @property
    def currency(self):
        """Gets the currency of this CommonTransaction.

        ISO 4217 alphabetic currency code.

        :return: The currency of this CommonTransaction.
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this CommonTransaction.

        ISO 4217 alphabetic currency code.

        :param currency: The currency of this CommonTransaction.
        :type currency: str
        """
        if currency is not None and len(currency) > 3:
            raise ValueError("Invalid value for `currency`, length must be less than or equal to `3`")
        if currency is not None and len(currency) < 3:
            raise ValueError("Invalid value for `currency`, length must be greater than or equal to `3`")

        self._currency = currency

    @property
    def custom_fields(self):
        """Gets the custom_fields of this CommonTransaction.

        Custom Fields list as a map `{\"custom field name\": \"custom field value\", ...}`. The format must follow the saved format (see Custom Fields section for the formats). 

        :return: The custom_fields of this CommonTransaction.
        :rtype: object
        """
        return self._custom_fields

    @custom_fields.setter
    def custom_fields(self, custom_fields):
        """Sets the custom_fields of this CommonTransaction.

        Custom Fields list as a map `{\"custom field name\": \"custom field value\", ...}`. The format must follow the saved format (see Custom Fields section for the formats). 

        :param custom_fields: The custom_fields of this CommonTransaction.
        :type custom_fields: object
        """

        self._custom_fields = custom_fields

    @property
    def customer_id(self):
        """Gets the customer_id of this CommonTransaction.

        The сustomer's ID.

        :return: The customer_id of this CommonTransaction.
        :rtype: str
        """
        return self._customer_id

    @customer_id.setter
    def customer_id(self, customer_id):
        """Sets the customer_id of this CommonTransaction.

        The сustomer's ID.

        :param customer_id: The customer_id of this CommonTransaction.
        :type customer_id: str
        """
        if customer_id is not None and len(customer_id) > 50:
            raise ValueError("Invalid value for `customer_id`, length must be less than or equal to `50`")

        self._customer_id = customer_id

    @property
    def description(self):
        """Gets the description of this CommonTransaction.

        The payment description.

        :return: The description of this CommonTransaction.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CommonTransaction.

        The payment description.

        :param description: The description of this CommonTransaction.
        :type description: str
        """
        if description is not None and len(description) > 255:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `255`")

        self._description = description

    @property
    def gateway_name(self):
        """Gets the gateway_name of this CommonTransaction.

        Payment Gateway name, available only after the gateway is selected for the transaction. 

        :return: The gateway_name of this CommonTransaction.
        :rtype: GatewayName
        """
        return self._gateway_name

    @gateway_name.setter
    def gateway_name(self, gateway_name):
        """Sets the gateway_name of this CommonTransaction.

        Payment Gateway name, available only after the gateway is selected for the transaction. 

        :param gateway_name: The gateway_name of this CommonTransaction.
        :type gateway_name: GatewayName
        """

        self._gateway_name = gateway_name

    @property
    def has3ds(self):
        """Gets the has3ds of this CommonTransaction.


        :return: The has3ds of this CommonTransaction.
        :rtype: bool
        """
        return self._has3ds

    @has3ds.setter
    def has3ds(self, has3ds):
        """Sets the has3ds of this CommonTransaction.


        :param has3ds: The has3ds of this CommonTransaction.
        :type has3ds: bool
        """

        self._has3ds = has3ds

    @property
    def has_amount_adjustment(self):
        """Gets the has_amount_adjustment of this CommonTransaction.

        True if transaction has amount adjustment.

        :return: The has_amount_adjustment of this CommonTransaction.
        :rtype: bool
        """
        return self._has_amount_adjustment

    @has_amount_adjustment.setter
    def has_amount_adjustment(self, has_amount_adjustment):
        """Sets the has_amount_adjustment of this CommonTransaction.

        True if transaction has amount adjustment.

        :param has_amount_adjustment: The has_amount_adjustment of this CommonTransaction.
        :type has_amount_adjustment: bool
        """

        self._has_amount_adjustment = has_amount_adjustment

    @property
    def id(self):
        """Gets the id of this CommonTransaction.

        The transaction ID.

        :return: The id of this CommonTransaction.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CommonTransaction.

        The transaction ID.

        :param id: The id of this CommonTransaction.
        :type id: str
        """
        if id is not None and len(id) > 50:
            raise ValueError("Invalid value for `id`, length must be less than or equal to `50`")

        self._id = id

    @property
    def invoice_ids(self):
        """Gets the invoice_ids of this CommonTransaction.

        The invoice IDs related to transaction.

        :return: The invoice_ids of this CommonTransaction.
        :rtype: List[str]
        """
        return self._invoice_ids

    @invoice_ids.setter
    def invoice_ids(self, invoice_ids):
        """Sets the invoice_ids of this CommonTransaction.

        The invoice IDs related to transaction.

        :param invoice_ids: The invoice_ids of this CommonTransaction.
        :type invoice_ids: List[str]
        """

        self._invoice_ids = invoice_ids

    @property
    def is_rebill(self):
        """Gets the is_rebill of this CommonTransaction.


        :return: The is_rebill of this CommonTransaction.
        :rtype: bool
        """
        return self._is_rebill

    @is_rebill.setter
    def is_rebill(self, is_rebill):
        """Sets the is_rebill of this CommonTransaction.


        :param is_rebill: The is_rebill of this CommonTransaction.
        :type is_rebill: bool
        """

        self._is_rebill = is_rebill

    @property
    def is_retry(self):
        """Gets the is_retry of this CommonTransaction.

        True if this transaction is retry.

        :return: The is_retry of this CommonTransaction.
        :rtype: bool
        """
        return self._is_retry

    @is_retry.setter
    def is_retry(self, is_retry):
        """Sets the is_retry of this CommonTransaction.

        True if this transaction is retry.

        :param is_retry: The is_retry of this CommonTransaction.
        :type is_retry: bool
        """

        self._is_retry = is_retry

    @property
    def parent_transaction_id(self):
        """Gets the parent_transaction_id of this CommonTransaction.

        The parent's transaction ID.

        :return: The parent_transaction_id of this CommonTransaction.
        :rtype: str
        """
        return self._parent_transaction_id

    @parent_transaction_id.setter
    def parent_transaction_id(self, parent_transaction_id):
        """Sets the parent_transaction_id of this CommonTransaction.

        The parent's transaction ID.

        :param parent_transaction_id: The parent_transaction_id of this CommonTransaction.
        :type parent_transaction_id: str
        """
        if parent_transaction_id is not None and len(parent_transaction_id) > 50:
            raise ValueError("Invalid value for `parent_transaction_id`, length must be less than or equal to `50`")

        self._parent_transaction_id = parent_transaction_id

    @property
    def payment_instrument(self):
        """Gets the payment_instrument of this CommonTransaction.


        :return: The payment_instrument of this CommonTransaction.
        :rtype: InstrumentReference
        """
        return self._payment_instrument

    @payment_instrument.setter
    def payment_instrument(self, payment_instrument):
        """Sets the payment_instrument of this CommonTransaction.


        :param payment_instrument: The payment_instrument of this CommonTransaction.
        :type payment_instrument: InstrumentReference
        """

        self._payment_instrument = payment_instrument

    @property
    def plan_ids(self):
        """Gets the plan_ids of this CommonTransaction.

        The plan IDs related to transaction's order(s).

        :return: The plan_ids of this CommonTransaction.
        :rtype: List[str]
        """
        return self._plan_ids

    @plan_ids.setter
    def plan_ids(self, plan_ids):
        """Sets the plan_ids of this CommonTransaction.

        The plan IDs related to transaction's order(s).

        :param plan_ids: The plan_ids of this CommonTransaction.
        :type plan_ids: List[str]
        """

        self._plan_ids = plan_ids

    @property
    def processed_time(self):
        """Gets the processed_time of this CommonTransaction.

        Transaction processed time.

        :return: The processed_time of this CommonTransaction.
        :rtype: datetime
        """
        return self._processed_time

    @processed_time.setter
    def processed_time(self, processed_time):
        """Sets the processed_time of this CommonTransaction.

        Transaction processed time.

        :param processed_time: The processed_time of this CommonTransaction.
        :type processed_time: datetime
        """

        self._processed_time = processed_time

    @property
    def purchase_amount(self):
        """Gets the purchase_amount of this CommonTransaction.

        The amount actually purchased which may have differed from the originally requested amount in case of an adjustment.

        :return: The purchase_amount of this CommonTransaction.
        :rtype: float
        """
        return self._purchase_amount

    @purchase_amount.setter
    def purchase_amount(self, purchase_amount):
        """Sets the purchase_amount of this CommonTransaction.

        The amount actually purchased which may have differed from the originally requested amount in case of an adjustment.

        :param purchase_amount: The purchase_amount of this CommonTransaction.
        :type purchase_amount: float
        """

        self._purchase_amount = purchase_amount

    @property
    def purchase_currency(self):
        """Gets the purchase_currency of this CommonTransaction.

        ISO 4217 alphabetic currency code.

        :return: The purchase_currency of this CommonTransaction.
        :rtype: str
        """
        return self._purchase_currency

    @purchase_currency.setter
    def purchase_currency(self, purchase_currency):
        """Sets the purchase_currency of this CommonTransaction.

        ISO 4217 alphabetic currency code.

        :param purchase_currency: The purchase_currency of this CommonTransaction.
        :type purchase_currency: str
        """
        if purchase_currency is not None and len(purchase_currency) > 3:
            raise ValueError("Invalid value for `purchase_currency`, length must be less than or equal to `3`")
        if purchase_currency is not None and len(purchase_currency) < 3:
            raise ValueError("Invalid value for `purchase_currency`, length must be greater than or equal to `3`")

        self._purchase_currency = purchase_currency

    @property
    def rebill_number(self):
        """Gets the rebill_number of this CommonTransaction.

        The transaction's rebill number.

        :return: The rebill_number of this CommonTransaction.
        :rtype: int
        """
        return self._rebill_number

    @rebill_number.setter
    def rebill_number(self, rebill_number):
        """Sets the rebill_number of this CommonTransaction.

        The transaction's rebill number.

        :param rebill_number: The rebill_number of this CommonTransaction.
        :type rebill_number: int
        """

        self._rebill_number = rebill_number

    @property
    def redirect_url(self):
        """Gets the redirect_url of this CommonTransaction.

        The URL to redirect the end-user when an offsite transaction is completed. Defaults to the website's configured URL.

        :return: The redirect_url of this CommonTransaction.
        :rtype: str
        """
        return self._redirect_url

    @redirect_url.setter
    def redirect_url(self, redirect_url):
        """Sets the redirect_url of this CommonTransaction.

        The URL to redirect the end-user when an offsite transaction is completed. Defaults to the website's configured URL.

        :param redirect_url: The redirect_url of this CommonTransaction.
        :type redirect_url: str
        """

        self._redirect_url = redirect_url

    @property
    def request_amount(self):
        """Gets the request_amount of this CommonTransaction.

        The amount in the payment request. If adjusted, the purchase amount and billing amount may vary from it.

        :return: The request_amount of this CommonTransaction.
        :rtype: float
        """
        return self._request_amount

    @request_amount.setter
    def request_amount(self, request_amount):
        """Sets the request_amount of this CommonTransaction.

        The amount in the payment request. If adjusted, the purchase amount and billing amount may vary from it.

        :param request_amount: The request_amount of this CommonTransaction.
        :type request_amount: float
        """

        self._request_amount = request_amount

    @property
    def request_currency(self):
        """Gets the request_currency of this CommonTransaction.

        ISO 4217 alphabetic currency code.

        :return: The request_currency of this CommonTransaction.
        :rtype: str
        """
        return self._request_currency

    @request_currency.setter
    def request_currency(self, request_currency):
        """Sets the request_currency of this CommonTransaction.

        ISO 4217 alphabetic currency code.

        :param request_currency: The request_currency of this CommonTransaction.
        :type request_currency: str
        """
        if request_currency is not None and len(request_currency) > 3:
            raise ValueError("Invalid value for `request_currency`, length must be less than or equal to `3`")
        if request_currency is not None and len(request_currency) < 3:
            raise ValueError("Invalid value for `request_currency`, length must be greater than or equal to `3`")

        self._request_currency = request_currency

    @property
    def request_id(self):
        """Gets the request_id of this CommonTransaction.

        The transaction's request ID.  This ID must be unique within a 24 hour period. Use this field to prevent duplicated transactions.

        :return: The request_id of this CommonTransaction.
        :rtype: str
        """
        return self._request_id

    @request_id.setter
    def request_id(self, request_id):
        """Sets the request_id of this CommonTransaction.

        The transaction's request ID.  This ID must be unique within a 24 hour period. Use this field to prevent duplicated transactions.

        :param request_id: The request_id of this CommonTransaction.
        :type request_id: str
        """

        self._request_id = request_id

    @property
    def result(self):
        """Gets the result of this CommonTransaction.

        Transaction result.

        :return: The result of this CommonTransaction.
        :rtype: str
        """
        return self._result

    @result.setter
    def result(self, result):
        """Sets the result of this CommonTransaction.

        Transaction result.

        :param result: The result of this CommonTransaction.
        :type result: str
        """
        allowed_values = ["abandoned", "approved", "canceled", "declined", "unknown"]  # noqa: E501
        if result not in allowed_values:
            raise ValueError(
                "Invalid value for `result` ({0}), must be one of {1}"
                .format(result, allowed_values)
            )

        self._result = result

    @property
    def retry_number(self):
        """Gets the retry_number of this CommonTransaction.

        The position in the sequence of retries.

        :return: The retry_number of this CommonTransaction.
        :rtype: int
        """
        return self._retry_number

    @retry_number.setter
    def retry_number(self, retry_number):
        """Sets the retry_number of this CommonTransaction.

        The position in the sequence of retries.

        :param retry_number: The retry_number of this CommonTransaction.
        :type retry_number: int
        """

        self._retry_number = retry_number

    @property
    def status(self):
        """Gets the status of this CommonTransaction.

        Transaction status.

        :return: The status of this CommonTransaction.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this CommonTransaction.

        Transaction status.

        :param status: The status of this CommonTransaction.
        :type status: str
        """
        allowed_values = ["completed", "conn-error", "disputed", "never-sent", "offsite", "partially-refunded", "pending", "refunded", "sending", "suspended", "timeout", "voided", "waiting-approval", "waiting-capture", "waiting-gateway", "waiting-refund"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def subscription_ids(self):
        """Gets the subscription_ids of this CommonTransaction.

        The orders IDs related to transaction's invoice(s).

        :return: The subscription_ids of this CommonTransaction.
        :rtype: List[str]
        """
        return self._subscription_ids

    @subscription_ids.setter
    def subscription_ids(self, subscription_ids):
        """Sets the subscription_ids of this CommonTransaction.

        The orders IDs related to transaction's invoice(s).

        :param subscription_ids: The subscription_ids of this CommonTransaction.
        :type subscription_ids: List[str]
        """

        self._subscription_ids = subscription_ids

    @property
    def type(self):
        """Gets the type of this CommonTransaction.

        Transaction type.

        :return: The type of this CommonTransaction.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CommonTransaction.

        Transaction type.

        :param type: The type of this CommonTransaction.
        :type type: str
        """
        allowed_values = ["3ds-authentication", "authorize", "capture", "credit", "refund", "sale", "void"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def updated_time(self):
        """Gets the updated_time of this CommonTransaction.

        Transaction updated time.

        :return: The updated_time of this CommonTransaction.
        :rtype: datetime
        """
        return self._updated_time

    @updated_time.setter
    def updated_time(self, updated_time):
        """Sets the updated_time of this CommonTransaction.

        Transaction updated time.

        :param updated_time: The updated_time of this CommonTransaction.
        :type updated_time: datetime
        """

        self._updated_time = updated_time

    @property
    def website_id(self):
        """Gets the website_id of this CommonTransaction.

        The website ID.

        :return: The website_id of this CommonTransaction.
        :rtype: str
        """
        return self._website_id

    @website_id.setter
    def website_id(self, website_id):
        """Sets the website_id of this CommonTransaction.

        The website ID.

        :param website_id: The website_id of this CommonTransaction.
        :type website_id: str
        """
        if website_id is not None and len(website_id) > 50:
            raise ValueError("Invalid value for `website_id`, length must be less than or equal to `50`")

        self._website_id = website_id
