# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Problem(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, type: str=None, status: int=None, title: str=None, detail: str=None):
        """Problem - a model defined in OpenAPI

        :param type: The type of this Problem.
        :param status: The status of this Problem.
        :param title: The title of this Problem.
        :param detail: The detail of this Problem.
        """
        self.openapi_types = {
            'type': str,
            'status': int,
            'title': str,
            'detail': str
        }

        self.attribute_map = {
            'type': 'type',
            'status': 'status',
            'title': 'title',
            'detail': 'detail'
        }

        self._type = type
        self._status = status
        self._title = title
        self._detail = detail

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Problem':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Problem of this Problem.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def type(self):
        """Gets the type of this Problem.

        A URI reference [[RFC3986](https://tools.ietf.org/html/rfc3986)] that identifies the problem type. It should provide human-readable documentation for the problem type. When this member is not present, its value is assumed to be \"about:blank\".

        :return: The type of this Problem.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Problem.

        A URI reference [[RFC3986](https://tools.ietf.org/html/rfc3986)] that identifies the problem type. It should provide human-readable documentation for the problem type. When this member is not present, its value is assumed to be \"about:blank\".

        :param type: The type of this Problem.
        :type type: str
        """

        self._type = type

    @property
    def status(self):
        """Gets the status of this Problem.

        The HTTP status code.

        :return: The status of this Problem.
        :rtype: int
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Problem.

        The HTTP status code.

        :param status: The status of this Problem.
        :type status: int
        """
        if status is not None and status > 599:
            raise ValueError("Invalid value for `status`, must be a value less than or equal to `599`")
        if status is not None and status < 400:
            raise ValueError("Invalid value for `status`, must be a value greater than or equal to `400`")

        self._status = status

    @property
    def title(self):
        """Gets the title of this Problem.

        A short, human-readable summary of the problem type. It SHOULD NOT change from occurrence to occurrence of the problem, except for purposes of localization.

        :return: The title of this Problem.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Problem.

        A short, human-readable summary of the problem type. It SHOULD NOT change from occurrence to occurrence of the problem, except for purposes of localization.

        :param title: The title of this Problem.
        :type title: str
        """

        self._title = title

    @property
    def detail(self):
        """Gets the detail of this Problem.

        A human-readable explanation specific to this occurrence of the problem.

        :return: The detail of this Problem.
        :rtype: str
        """
        return self._detail

    @detail.setter
    def detail(self, detail):
        """Sets the detail of this Problem.

        A human-readable explanation specific to this occurrence of the problem.

        :param detail: The detail of this Problem.
        :type detail: str
        """

        self._detail = detail
