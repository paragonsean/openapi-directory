# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DataCashAllOfSettings(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, delay: int=0, policy: int=2):
        """DataCashAllOfSettings - a model defined in OpenAPI

        :param delay: The delay of this DataCashAllOfSettings.
        :param policy: The policy of this DataCashAllOfSettings.
        """
        self.openapi_types = {
            'delay': int,
            'policy': int
        }

        self.attribute_map = {
            'delay': 'delay',
            'policy': 'policy'
        }

        self._delay = delay
        self._policy = policy

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DataCashAllOfSettings':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DataCash_allOf_settings of this DataCashAllOfSettings.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def delay(self):
        """Gets the delay of this DataCashAllOfSettings.

        Auto Capture delay (in hours).

        :return: The delay of this DataCashAllOfSettings.
        :rtype: int
        """
        return self._delay

    @delay.setter
    def delay(self, delay):
        """Sets the delay of this DataCashAllOfSettings.

        Auto Capture delay (in hours).

        :param delay: The delay of this DataCashAllOfSettings.
        :type delay: int
        """
        if delay is not None and delay < 0:
            raise ValueError("Invalid value for `delay`, must be a value greater than or equal to `0`")

        self._delay = delay

    @property
    def policy(self):
        """Gets the policy of this DataCashAllOfSettings.

        Policy.

        :return: The policy of this DataCashAllOfSettings.
        :rtype: int
        """
        return self._policy

    @policy.setter
    def policy(self, policy):
        """Sets the policy of this DataCashAllOfSettings.

        Policy.

        :param policy: The policy of this DataCashAllOfSettings.
        :type policy: int
        """
        if policy is not None and policy > 7:
            raise ValueError("Invalid value for `policy`, must be a value less than or equal to `7`")
        if policy is not None and policy < 0:
            raise ValueError("Invalid value for `policy`, must be a value greater than or equal to `0`")

        self._policy = policy
