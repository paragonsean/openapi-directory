# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.coupon_restriction import CouponRestriction
from openapi_server.models.redemption_restriction import RedemptionRestriction
from openapi_server import util


class RedemptionsPerCustomer(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, type: str=None, quantity: int=None):
        """RedemptionsPerCustomer - a model defined in OpenAPI

        :param type: The type of this RedemptionsPerCustomer.
        :param quantity: The quantity of this RedemptionsPerCustomer.
        """
        self.openapi_types = {
            'type': str,
            'quantity': int
        }

        self.attribute_map = {
            'type': 'type',
            'quantity': 'quantity'
        }

        self._type = type
        self._quantity = quantity

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RedemptionsPerCustomer':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The redemptions-per-customer of this RedemptionsPerCustomer.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def type(self):
        """Gets the type of this RedemptionsPerCustomer.

        Coupon's restriction type.

        :return: The type of this RedemptionsPerCustomer.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this RedemptionsPerCustomer.

        Coupon's restriction type.

        :param type: The type of this RedemptionsPerCustomer.
        :type type: str
        """
        allowed_values = ["discounts-per-redemption", "minimum-order-amount", "redemptions-per-customer", "restrict-to-invoices", "restrict-to-plans", "restrict-to-subscriptions", "restrict-to-products", "total-redemptions", "paid-by-time"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def quantity(self):
        """Gets the quantity of this RedemptionsPerCustomer.

        Restriction value.

        :return: The quantity of this RedemptionsPerCustomer.
        :rtype: int
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this RedemptionsPerCustomer.

        Restriction value.

        :param quantity: The quantity of this RedemptionsPerCustomer.
        :type quantity: int
        """
        if quantity is None:
            raise ValueError("Invalid value for `quantity`, must not be `None`")

        self._quantity = quantity
