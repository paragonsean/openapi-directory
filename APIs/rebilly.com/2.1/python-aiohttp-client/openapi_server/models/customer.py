# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.contact_object import ContactObject
from openapi_server.models.customer_average_value import CustomerAverageValue
from openapi_server.models.customer_embedded_inner import CustomerEmbeddedInner
from openapi_server.models.customer_lifetime_revenue import CustomerLifetimeRevenue
from openapi_server.models.customer_links_inner import CustomerLinksInner
from openapi_server.models.payment_instrument import PaymentInstrument
from openapi_server.models.tag import Tag
from openapi_server import util


class Customer(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, embedded: List[CustomerEmbeddedInner]=None, links: List[CustomerLinksInner]=None, average_value: CustomerAverageValue=None, created_time: datetime=None, custom_fields: object=None, default_payment_instrument: PaymentInstrument=None, email: str=None, first_name: str=None, id: str=None, invoice_count: int=None, last_name: str=None, last_payment_time: datetime=None, lifetime_revenue: CustomerLifetimeRevenue=None, payment_count: int=None, payment_token: str=None, primary_address: ContactObject=None, revision: int=None, tags: List[Tag]=None, updated_time: datetime=None, website_id: str=None):
        """Customer - a model defined in OpenAPI

        :param embedded: The embedded of this Customer.
        :param links: The links of this Customer.
        :param average_value: The average_value of this Customer.
        :param created_time: The created_time of this Customer.
        :param custom_fields: The custom_fields of this Customer.
        :param default_payment_instrument: The default_payment_instrument of this Customer.
        :param email: The email of this Customer.
        :param first_name: The first_name of this Customer.
        :param id: The id of this Customer.
        :param invoice_count: The invoice_count of this Customer.
        :param last_name: The last_name of this Customer.
        :param last_payment_time: The last_payment_time of this Customer.
        :param lifetime_revenue: The lifetime_revenue of this Customer.
        :param payment_count: The payment_count of this Customer.
        :param payment_token: The payment_token of this Customer.
        :param primary_address: The primary_address of this Customer.
        :param revision: The revision of this Customer.
        :param tags: The tags of this Customer.
        :param updated_time: The updated_time of this Customer.
        :param website_id: The website_id of this Customer.
        """
        self.openapi_types = {
            'embedded': List[CustomerEmbeddedInner],
            'links': List[CustomerLinksInner],
            'average_value': CustomerAverageValue,
            'created_time': datetime,
            'custom_fields': object,
            'default_payment_instrument': PaymentInstrument,
            'email': str,
            'first_name': str,
            'id': str,
            'invoice_count': int,
            'last_name': str,
            'last_payment_time': datetime,
            'lifetime_revenue': CustomerLifetimeRevenue,
            'payment_count': int,
            'payment_token': str,
            'primary_address': ContactObject,
            'revision': int,
            'tags': List[Tag],
            'updated_time': datetime,
            'website_id': str
        }

        self.attribute_map = {
            'embedded': '_embedded',
            'links': '_links',
            'average_value': 'averageValue',
            'created_time': 'createdTime',
            'custom_fields': 'customFields',
            'default_payment_instrument': 'defaultPaymentInstrument',
            'email': 'email',
            'first_name': 'firstName',
            'id': 'id',
            'invoice_count': 'invoiceCount',
            'last_name': 'lastName',
            'last_payment_time': 'lastPaymentTime',
            'lifetime_revenue': 'lifetimeRevenue',
            'payment_count': 'paymentCount',
            'payment_token': 'paymentToken',
            'primary_address': 'primaryAddress',
            'revision': 'revision',
            'tags': 'tags',
            'updated_time': 'updatedTime',
            'website_id': 'websiteId'
        }

        self._embedded = embedded
        self._links = links
        self._average_value = average_value
        self._created_time = created_time
        self._custom_fields = custom_fields
        self._default_payment_instrument = default_payment_instrument
        self._email = email
        self._first_name = first_name
        self._id = id
        self._invoice_count = invoice_count
        self._last_name = last_name
        self._last_payment_time = last_payment_time
        self._lifetime_revenue = lifetime_revenue
        self._payment_count = payment_count
        self._payment_token = payment_token
        self._primary_address = primary_address
        self._revision = revision
        self._tags = tags
        self._updated_time = updated_time
        self._website_id = website_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Customer':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Customer of this Customer.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def embedded(self):
        """Gets the embedded of this Customer.

        Any embedded objects available that are requested by the `expand` querystring parameter.

        :return: The embedded of this Customer.
        :rtype: List[CustomerEmbeddedInner]
        """
        return self._embedded

    @embedded.setter
    def embedded(self, embedded):
        """Sets the embedded of this Customer.

        Any embedded objects available that are requested by the `expand` querystring parameter.

        :param embedded: The embedded of this Customer.
        :type embedded: List[CustomerEmbeddedInner]
        """
        if embedded is not None and len(embedded) < 1:
            raise ValueError("Invalid value for `embedded`, number of items must be greater than or equal to `1`")

        self._embedded = embedded

    @property
    def links(self):
        """Gets the links of this Customer.

        The links related to resource.

        :return: The links of this Customer.
        :rtype: List[CustomerLinksInner]
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this Customer.

        The links related to resource.

        :param links: The links of this Customer.
        :type links: List[CustomerLinksInner]
        """
        if links is not None and len(links) < 3:
            raise ValueError("Invalid value for `links`, number of items must be greater than or equal to `3`")

        self._links = links

    @property
    def average_value(self):
        """Gets the average_value of this Customer.


        :return: The average_value of this Customer.
        :rtype: CustomerAverageValue
        """
        return self._average_value

    @average_value.setter
    def average_value(self, average_value):
        """Sets the average_value of this Customer.


        :param average_value: The average_value of this Customer.
        :type average_value: CustomerAverageValue
        """

        self._average_value = average_value

    @property
    def created_time(self):
        """Gets the created_time of this Customer.

        The customer created time.

        :return: The created_time of this Customer.
        :rtype: datetime
        """
        return self._created_time

    @created_time.setter
    def created_time(self, created_time):
        """Sets the created_time of this Customer.

        The customer created time.

        :param created_time: The created_time of this Customer.
        :type created_time: datetime
        """

        self._created_time = created_time

    @property
    def custom_fields(self):
        """Gets the custom_fields of this Customer.

        Custom Fields list as a map `{\"custom field name\": \"custom field value\", ...}`. The format must follow the saved format (see Custom Fields section for the formats). 

        :return: The custom_fields of this Customer.
        :rtype: object
        """
        return self._custom_fields

    @custom_fields.setter
    def custom_fields(self, custom_fields):
        """Sets the custom_fields of this Customer.

        Custom Fields list as a map `{\"custom field name\": \"custom field value\", ...}`. The format must follow the saved format (see Custom Fields section for the formats). 

        :param custom_fields: The custom_fields of this Customer.
        :type custom_fields: object
        """

        self._custom_fields = custom_fields

    @property
    def default_payment_instrument(self):
        """Gets the default_payment_instrument of this Customer.


        :return: The default_payment_instrument of this Customer.
        :rtype: PaymentInstrument
        """
        return self._default_payment_instrument

    @default_payment_instrument.setter
    def default_payment_instrument(self, default_payment_instrument):
        """Sets the default_payment_instrument of this Customer.


        :param default_payment_instrument: The default_payment_instrument of this Customer.
        :type default_payment_instrument: PaymentInstrument
        """

        self._default_payment_instrument = default_payment_instrument

    @property
    def email(self):
        """Gets the email of this Customer.

        The customer's email.

        :return: The email of this Customer.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this Customer.

        The customer's email.

        :param email: The email of this Customer.
        :type email: str
        """

        self._email = email

    @property
    def first_name(self):
        """Gets the first_name of this Customer.

        The customer's first name.

        :return: The first_name of this Customer.
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this Customer.

        The customer's first name.

        :param first_name: The first_name of this Customer.
        :type first_name: str
        """

        self._first_name = first_name

    @property
    def id(self):
        """Gets the id of this Customer.

        The customer identifier string.

        :return: The id of this Customer.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Customer.

        The customer identifier string.

        :param id: The id of this Customer.
        :type id: str
        """
        if id is not None and len(id) > 50:
            raise ValueError("Invalid value for `id`, length must be less than or equal to `50`")

        self._id = id

    @property
    def invoice_count(self):
        """Gets the invoice_count of this Customer.

        An auto-incrementing number based on the sequence of invoices. If set to 0, then this record is a Lead, otherwise is a Customer.

        :return: The invoice_count of this Customer.
        :rtype: int
        """
        return self._invoice_count

    @invoice_count.setter
    def invoice_count(self, invoice_count):
        """Sets the invoice_count of this Customer.

        An auto-incrementing number based on the sequence of invoices. If set to 0, then this record is a Lead, otherwise is a Customer.

        :param invoice_count: The invoice_count of this Customer.
        :type invoice_count: int
        """

        self._invoice_count = invoice_count

    @property
    def last_name(self):
        """Gets the last_name of this Customer.

        The customer's last name.

        :return: The last_name of this Customer.
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this Customer.

        The customer's last name.

        :param last_name: The last_name of this Customer.
        :type last_name: str
        """

        self._last_name = last_name

    @property
    def last_payment_time(self):
        """Gets the last_payment_time of this Customer.

        The most recent time of an approved payment for the customer.

        :return: The last_payment_time of this Customer.
        :rtype: datetime
        """
        return self._last_payment_time

    @last_payment_time.setter
    def last_payment_time(self, last_payment_time):
        """Sets the last_payment_time of this Customer.

        The most recent time of an approved payment for the customer.

        :param last_payment_time: The last_payment_time of this Customer.
        :type last_payment_time: datetime
        """

        self._last_payment_time = last_payment_time

    @property
    def lifetime_revenue(self):
        """Gets the lifetime_revenue of this Customer.


        :return: The lifetime_revenue of this Customer.
        :rtype: CustomerLifetimeRevenue
        """
        return self._lifetime_revenue

    @lifetime_revenue.setter
    def lifetime_revenue(self, lifetime_revenue):
        """Sets the lifetime_revenue of this Customer.


        :param lifetime_revenue: The lifetime_revenue of this Customer.
        :type lifetime_revenue: CustomerLifetimeRevenue
        """

        self._lifetime_revenue = lifetime_revenue

    @property
    def payment_count(self):
        """Gets the payment_count of this Customer.

        The number of approved payments for the customer.

        :return: The payment_count of this Customer.
        :rtype: int
        """
        return self._payment_count

    @payment_count.setter
    def payment_count(self, payment_count):
        """Sets the payment_count of this Customer.

        The number of approved payments for the customer.

        :param payment_count: The payment_count of this Customer.
        :type payment_count: int
        """

        self._payment_count = payment_count

    @property
    def payment_token(self):
        """Gets the payment_token of this Customer.

        A write-only payment token; if supplied, it will be converted into a payment instrument and be set as the `defaultPaymentInstrument`. The value of this property will override the `defaultPaymentInstrument` in the case that both are supplied. The token may only be used once before it is expired. 

        :return: The payment_token of this Customer.
        :rtype: str
        """
        return self._payment_token

    @payment_token.setter
    def payment_token(self, payment_token):
        """Sets the payment_token of this Customer.

        A write-only payment token; if supplied, it will be converted into a payment instrument and be set as the `defaultPaymentInstrument`. The value of this property will override the `defaultPaymentInstrument` in the case that both are supplied. The token may only be used once before it is expired. 

        :param payment_token: The payment_token of this Customer.
        :type payment_token: str
        """

        self._payment_token = payment_token

    @property
    def primary_address(self):
        """Gets the primary_address of this Customer.


        :return: The primary_address of this Customer.
        :rtype: ContactObject
        """
        return self._primary_address

    @primary_address.setter
    def primary_address(self, primary_address):
        """Sets the primary_address of this Customer.


        :param primary_address: The primary_address of this Customer.
        :type primary_address: ContactObject
        """

        self._primary_address = primary_address

    @property
    def revision(self):
        """Gets the revision of this Customer.

        The number of times the customer data has been modified. The revision is useful when analyzing webhook data to determine if the change takes precedence over the current representation. 

        :return: The revision of this Customer.
        :rtype: int
        """
        return self._revision

    @revision.setter
    def revision(self, revision):
        """Sets the revision of this Customer.

        The number of times the customer data has been modified. The revision is useful when analyzing webhook data to determine if the change takes precedence over the current representation. 

        :param revision: The revision of this Customer.
        :type revision: int
        """

        self._revision = revision

    @property
    def tags(self):
        """Gets the tags of this Customer.

        A list of customer's tags.

        :return: The tags of this Customer.
        :rtype: List[Tag]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this Customer.

        A list of customer's tags.

        :param tags: The tags of this Customer.
        :type tags: List[Tag]
        """

        self._tags = tags

    @property
    def updated_time(self):
        """Gets the updated_time of this Customer.

        The customer updated time.

        :return: The updated_time of this Customer.
        :rtype: datetime
        """
        return self._updated_time

    @updated_time.setter
    def updated_time(self, updated_time):
        """Sets the updated_time of this Customer.

        The customer updated time.

        :param updated_time: The updated_time of this Customer.
        :type updated_time: datetime
        """

        self._updated_time = updated_time

    @property
    def website_id(self):
        """Gets the website_id of this Customer.

        The website's ID.

        :return: The website_id of this Customer.
        :rtype: str
        """
        return self._website_id

    @website_id.setter
    def website_id(self, website_id):
        """Sets the website_id of this Customer.

        The website's ID.

        :param website_id: The website_id of this Customer.
        :type website_id: str
        """
        if website_id is not None and len(website_id) > 50:
            raise ValueError("Invalid value for `website_id`, length must be less than or equal to `50`")

        self._website_id = website_id
