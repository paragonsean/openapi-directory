# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.self_link import SelfLink
from openapi_server import util


class Blocklist(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, links: List[SelfLink]=None, created_time: datetime=None, expiration_time: datetime=None, id: str=None, type: str=None, updated_time: datetime=None, value: str=None):
        """Blocklist - a model defined in OpenAPI

        :param links: The links of this Blocklist.
        :param created_time: The created_time of this Blocklist.
        :param expiration_time: The expiration_time of this Blocklist.
        :param id: The id of this Blocklist.
        :param type: The type of this Blocklist.
        :param updated_time: The updated_time of this Blocklist.
        :param value: The value of this Blocklist.
        """
        self.openapi_types = {
            'links': List[SelfLink],
            'created_time': datetime,
            'expiration_time': datetime,
            'id': str,
            'type': str,
            'updated_time': datetime,
            'value': str
        }

        self.attribute_map = {
            'links': '_links',
            'created_time': 'createdTime',
            'expiration_time': 'expirationTime',
            'id': 'id',
            'type': 'type',
            'updated_time': 'updatedTime',
            'value': 'value'
        }

        self._links = links
        self._created_time = created_time
        self._expiration_time = expiration_time
        self._id = id
        self._type = type
        self._updated_time = updated_time
        self._value = value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Blocklist':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Blocklist of this Blocklist.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def links(self):
        """Gets the links of this Blocklist.

        The links related to resource.

        :return: The links of this Blocklist.
        :rtype: List[SelfLink]
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this Blocklist.

        The links related to resource.

        :param links: The links of this Blocklist.
        :type links: List[SelfLink]
        """
        if links is not None and len(links) < 1:
            raise ValueError("Invalid value for `links`, number of items must be greater than or equal to `1`")

        self._links = links

    @property
    def created_time(self):
        """Gets the created_time of this Blocklist.

        The blocklist created time.

        :return: The created_time of this Blocklist.
        :rtype: datetime
        """
        return self._created_time

    @created_time.setter
    def created_time(self, created_time):
        """Sets the created_time of this Blocklist.

        The blocklist created time.

        :param created_time: The created_time of this Blocklist.
        :type created_time: datetime
        """

        self._created_time = created_time

    @property
    def expiration_time(self):
        """Gets the expiration_time of this Blocklist.

        The blocklist expiration time.

        :return: The expiration_time of this Blocklist.
        :rtype: datetime
        """
        return self._expiration_time

    @expiration_time.setter
    def expiration_time(self, expiration_time):
        """Sets the expiration_time of this Blocklist.

        The blocklist expiration time.

        :param expiration_time: The expiration_time of this Blocklist.
        :type expiration_time: datetime
        """

        self._expiration_time = expiration_time

    @property
    def id(self):
        """Gets the id of this Blocklist.

        The blocklist identifier string.

        :return: The id of this Blocklist.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Blocklist.

        The blocklist identifier string.

        :param id: The id of this Blocklist.
        :type id: str
        """
        if id is not None and len(id) > 50:
            raise ValueError("Invalid value for `id`, length must be less than or equal to `50`")

        self._id = id

    @property
    def type(self):
        """Gets the type of this Blocklist.

        The blocklist type.

        :return: The type of this Blocklist.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Blocklist.

        The blocklist type.

        :param type: The type of this Blocklist.
        :type type: str
        """
        allowed_values = ["payment-card", "bank-account", "customer-id", "email", "email-domain", "ip-address", "country", "fingerprint", "bin", "address"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def updated_time(self):
        """Gets the updated_time of this Blocklist.

        The blocklist updated time.

        :return: The updated_time of this Blocklist.
        :rtype: datetime
        """
        return self._updated_time

    @updated_time.setter
    def updated_time(self, updated_time):
        """Sets the updated_time of this Blocklist.

        The blocklist updated time.

        :param updated_time: The updated_time of this Blocklist.
        :type updated_time: datetime
        """

        self._updated_time = updated_time

    @property
    def value(self):
        """Gets the value of this Blocklist.

        The blocklist value.

        :return: The value of this Blocklist.
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this Blocklist.

        The blocklist value.

        :param value: The value of this Blocklist.
        :type value: str
        """
        if value is None:
            raise ValueError("Invalid value for `value`, must not be `None`")

        self._value = value
