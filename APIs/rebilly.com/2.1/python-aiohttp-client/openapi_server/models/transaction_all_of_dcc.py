# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.money import Money
from openapi_server import util


class TransactionAllOfDcc(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, base: Money=None, outcome: str=None, quote: Money=None, usd_markup: float=None):
        """TransactionAllOfDcc - a model defined in OpenAPI

        :param base: The base of this TransactionAllOfDcc.
        :param outcome: The outcome of this TransactionAllOfDcc.
        :param quote: The quote of this TransactionAllOfDcc.
        :param usd_markup: The usd_markup of this TransactionAllOfDcc.
        """
        self.openapi_types = {
            'base': Money,
            'outcome': str,
            'quote': Money,
            'usd_markup': float
        }

        self.attribute_map = {
            'base': 'base',
            'outcome': 'outcome',
            'quote': 'quote',
            'usd_markup': 'usdMarkup'
        }

        self._base = base
        self._outcome = outcome
        self._quote = quote
        self._usd_markup = usd_markup

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TransactionAllOfDcc':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Transaction_allOf_dcc of this TransactionAllOfDcc.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def base(self):
        """Gets the base of this TransactionAllOfDcc.

        Initial amount and currency to convert from.

        :return: The base of this TransactionAllOfDcc.
        :rtype: Money
        """
        return self._base

    @base.setter
    def base(self, base):
        """Sets the base of this TransactionAllOfDcc.

        Initial amount and currency to convert from.

        :param base: The base of this TransactionAllOfDcc.
        :type base: Money
        """

        self._base = base

    @property
    def outcome(self):
        """Gets the outcome of this TransactionAllOfDcc.

        Dynamic Currency Conversion outcome.

        :return: The outcome of this TransactionAllOfDcc.
        :rtype: str
        """
        return self._outcome

    @outcome.setter
    def outcome(self, outcome):
        """Sets the outcome of this TransactionAllOfDcc.

        Dynamic Currency Conversion outcome.

        :param outcome: The outcome of this TransactionAllOfDcc.
        :type outcome: str
        """
        allowed_values = ["rejected", "selected", "unknown"]  # noqa: E501
        if outcome not in allowed_values:
            raise ValueError(
                "Invalid value for `outcome` ({0}), must be one of {1}"
                .format(outcome, allowed_values)
            )

        self._outcome = outcome

    @property
    def quote(self):
        """Gets the quote of this TransactionAllOfDcc.

        Suggested amount and currency to convert to.

        :return: The quote of this TransactionAllOfDcc.
        :rtype: Money
        """
        return self._quote

    @quote.setter
    def quote(self, quote):
        """Sets the quote of this TransactionAllOfDcc.

        Suggested amount and currency to convert to.

        :param quote: The quote of this TransactionAllOfDcc.
        :type quote: Money
        """

        self._quote = quote

    @property
    def usd_markup(self):
        """Gets the usd_markup of this TransactionAllOfDcc.

        The amount of markup translated to USD.

        :return: The usd_markup of this TransactionAllOfDcc.
        :rtype: float
        """
        return self._usd_markup

    @usd_markup.setter
    def usd_markup(self, usd_markup):
        """Sets the usd_markup of this TransactionAllOfDcc.

        The amount of markup translated to USD.

        :param usd_markup: The usd_markup of this TransactionAllOfDcc.
        :type usd_markup: float
        """

        self._usd_markup = usd_markup
