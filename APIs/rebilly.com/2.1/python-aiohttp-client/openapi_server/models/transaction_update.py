# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TransactionUpdate(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, amount: float=None, currency: str=None, result: str=None):
        """TransactionUpdate - a model defined in OpenAPI

        :param amount: The amount of this TransactionUpdate.
        :param currency: The currency of this TransactionUpdate.
        :param result: The result of this TransactionUpdate.
        """
        self.openapi_types = {
            'amount': float,
            'currency': str,
            'result': str
        }

        self.attribute_map = {
            'amount': 'amount',
            'currency': 'currency',
            'result': 'result'
        }

        self._amount = amount
        self._currency = currency
        self._result = result

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TransactionUpdate':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TransactionUpdate of this TransactionUpdate.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def amount(self):
        """Gets the amount of this TransactionUpdate.

        The transaction amount.

        :return: The amount of this TransactionUpdate.
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this TransactionUpdate.

        The transaction amount.

        :param amount: The amount of this TransactionUpdate.
        :type amount: float
        """

        self._amount = amount

    @property
    def currency(self):
        """Gets the currency of this TransactionUpdate.

        The transaction currency.

        :return: The currency of this TransactionUpdate.
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this TransactionUpdate.

        The transaction currency.

        :param currency: The currency of this TransactionUpdate.
        :type currency: str
        """
        if currency is not None and len(currency) > 3:
            raise ValueError("Invalid value for `currency`, length must be less than or equal to `3`")
        if currency is not None and len(currency) < 3:
            raise ValueError("Invalid value for `currency`, length must be greater than or equal to `3`")

        self._currency = currency

    @property
    def result(self):
        """Gets the result of this TransactionUpdate.

        Transaction result.

        :return: The result of this TransactionUpdate.
        :rtype: str
        """
        return self._result

    @result.setter
    def result(self, result):
        """Sets the result of this TransactionUpdate.

        Transaction result.

        :param result: The result of this TransactionUpdate.
        :type result: str
        """
        allowed_values = ["abandoned", "approved", "canceled", "declined"]  # noqa: E501
        if result not in allowed_values:
            raise ValueError(
                "Invalid value for `result` ({0}), must be one of {1}"
                .format(result, allowed_values)
            )

        self._result = result
