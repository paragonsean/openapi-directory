# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.alternative_payment_instrument import AlternativePaymentInstrument
from openapi_server.models.cash_instrument import CashInstrument
from openapi_server.models.check_instrument import CheckInstrument
from openapi_server.models.vaulted_instrument import VaultedInstrument
from openapi_server import util


class PaymentInstrument(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, method: str=None, payment_instrument_id: object=None, received_by: str=None, reference: str=None):
        """PaymentInstrument - a model defined in OpenAPI

        :param method: The method of this PaymentInstrument.
        :param payment_instrument_id: The payment_instrument_id of this PaymentInstrument.
        :param received_by: The received_by of this PaymentInstrument.
        :param reference: The reference of this PaymentInstrument.
        """
        self.openapi_types = {
            'method': str,
            'payment_instrument_id': object,
            'received_by': str,
            'reference': str
        }

        self.attribute_map = {
            'method': 'method',
            'payment_instrument_id': 'paymentInstrumentId',
            'received_by': 'receivedBy',
            'reference': 'reference'
        }

        self._method = method
        self._payment_instrument_id = payment_instrument_id
        self._received_by = received_by
        self._reference = reference

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PaymentInstrument':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PaymentInstrument of this PaymentInstrument.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def method(self):
        """Gets the method of this PaymentInstrument.


        :return: The method of this PaymentInstrument.
        :rtype: str
        """
        return self._method

    @method.setter
    def method(self, method):
        """Sets the method of this PaymentInstrument.


        :param method: The method of this PaymentInstrument.
        :type method: str
        """
        allowed_values = ["cash"]  # noqa: E501
        if method not in allowed_values:
            raise ValueError(
                "Invalid value for `method` ({0}), must be one of {1}"
                .format(method, allowed_values)
            )

        self._method = method

    @property
    def payment_instrument_id(self):
        """Gets the payment_instrument_id of this PaymentInstrument.

        The payment instrument ID.

        :return: The payment_instrument_id of this PaymentInstrument.
        :rtype: object
        """
        return self._payment_instrument_id

    @payment_instrument_id.setter
    def payment_instrument_id(self, payment_instrument_id):
        """Sets the payment_instrument_id of this PaymentInstrument.

        The payment instrument ID.

        :param payment_instrument_id: The payment_instrument_id of this PaymentInstrument.
        :type payment_instrument_id: object
        """
        if payment_instrument_id is None:
            raise ValueError("Invalid value for `payment_instrument_id`, must not be `None`")

        self._payment_instrument_id = payment_instrument_id

    @property
    def received_by(self):
        """Gets the received_by of this PaymentInstrument.

        The receiver's name.

        :return: The received_by of this PaymentInstrument.
        :rtype: str
        """
        return self._received_by

    @received_by.setter
    def received_by(self, received_by):
        """Sets the received_by of this PaymentInstrument.

        The receiver's name.

        :param received_by: The received_by of this PaymentInstrument.
        :type received_by: str
        """

        self._received_by = received_by

    @property
    def reference(self):
        """Gets the reference of this PaymentInstrument.

        Reference data.

        :return: The reference of this PaymentInstrument.
        :rtype: str
        """
        return self._reference

    @reference.setter
    def reference(self, reference):
        """Sets the reference of this PaymentInstrument.

        Reference data.

        :param reference: The reference of this PaymentInstrument.
        :type reference: str
        """

        self._reference = reference
