# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.ems3ds_servers import EMS3dsServers
from openapi_server.models.test_processor3ds_servers import TestProcessor3dsServers
from openapi_server.models.three_d_secure_server_name import ThreeDSecureServerName
from openapi_server.models.worldline_atos_frankfurt3ds_servers import WorldlineAtosFrankfurt3dsServers
from openapi_server import util


class ThreeDSecureIO3dsServer(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: ThreeDSecureServerName=None, merchant_acquirer_bin_mastercard: str=None, merchant_acquirer_bin_visa: str=None, merchant_country: str=None, merchant_id: str=None, merchant_name: str=None, merchant_url: str=None, transaction_type: str=None, v1: bool=None, v2: bool=None):
        """ThreeDSecureIO3dsServer - a model defined in OpenAPI

        :param name: The name of this ThreeDSecureIO3dsServer.
        :param merchant_acquirer_bin_mastercard: The merchant_acquirer_bin_mastercard of this ThreeDSecureIO3dsServer.
        :param merchant_acquirer_bin_visa: The merchant_acquirer_bin_visa of this ThreeDSecureIO3dsServer.
        :param merchant_country: The merchant_country of this ThreeDSecureIO3dsServer.
        :param merchant_id: The merchant_id of this ThreeDSecureIO3dsServer.
        :param merchant_name: The merchant_name of this ThreeDSecureIO3dsServer.
        :param merchant_url: The merchant_url of this ThreeDSecureIO3dsServer.
        :param transaction_type: The transaction_type of this ThreeDSecureIO3dsServer.
        :param v1: The v1 of this ThreeDSecureIO3dsServer.
        :param v2: The v2 of this ThreeDSecureIO3dsServer.
        """
        self.openapi_types = {
            'name': ThreeDSecureServerName,
            'merchant_acquirer_bin_mastercard': str,
            'merchant_acquirer_bin_visa': str,
            'merchant_country': str,
            'merchant_id': str,
            'merchant_name': str,
            'merchant_url': str,
            'transaction_type': str,
            'v1': bool,
            'v2': bool
        }

        self.attribute_map = {
            'name': 'name',
            'merchant_acquirer_bin_mastercard': 'merchantAcquirerBinMastercard',
            'merchant_acquirer_bin_visa': 'merchantAcquirerBinVisa',
            'merchant_country': 'merchantCountry',
            'merchant_id': 'merchantId',
            'merchant_name': 'merchantName',
            'merchant_url': 'merchantUrl',
            'transaction_type': 'transactionType',
            'v1': 'v1',
            'v2': 'v2'
        }

        self._name = name
        self._merchant_acquirer_bin_mastercard = merchant_acquirer_bin_mastercard
        self._merchant_acquirer_bin_visa = merchant_acquirer_bin_visa
        self._merchant_country = merchant_country
        self._merchant_id = merchant_id
        self._merchant_name = merchant_name
        self._merchant_url = merchant_url
        self._transaction_type = transaction_type
        self._v1 = v1
        self._v2 = v2

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ThreeDSecureIO3dsServer':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ThreeDSecureIO3dsServer of this ThreeDSecureIO3dsServer.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this ThreeDSecureIO3dsServer.


        :return: The name of this ThreeDSecureIO3dsServer.
        :rtype: ThreeDSecureServerName
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ThreeDSecureIO3dsServer.


        :param name: The name of this ThreeDSecureIO3dsServer.
        :type name: ThreeDSecureServerName
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def merchant_acquirer_bin_mastercard(self):
        """Gets the merchant_acquirer_bin_mastercard of this ThreeDSecureIO3dsServer.

        Mastercard Acquirer BIN.

        :return: The merchant_acquirer_bin_mastercard of this ThreeDSecureIO3dsServer.
        :rtype: str
        """
        return self._merchant_acquirer_bin_mastercard

    @merchant_acquirer_bin_mastercard.setter
    def merchant_acquirer_bin_mastercard(self, merchant_acquirer_bin_mastercard):
        """Sets the merchant_acquirer_bin_mastercard of this ThreeDSecureIO3dsServer.

        Mastercard Acquirer BIN.

        :param merchant_acquirer_bin_mastercard: The merchant_acquirer_bin_mastercard of this ThreeDSecureIO3dsServer.
        :type merchant_acquirer_bin_mastercard: str
        """
        if merchant_acquirer_bin_mastercard is None:
            raise ValueError("Invalid value for `merchant_acquirer_bin_mastercard`, must not be `None`")
        if merchant_acquirer_bin_mastercard is not None and len(merchant_acquirer_bin_mastercard) > 11:
            raise ValueError("Invalid value for `merchant_acquirer_bin_mastercard`, length must be less than or equal to `11`")
        if merchant_acquirer_bin_mastercard is not None and len(merchant_acquirer_bin_mastercard) < 6:
            raise ValueError("Invalid value for `merchant_acquirer_bin_mastercard`, length must be greater than or equal to `6`")

        self._merchant_acquirer_bin_mastercard = merchant_acquirer_bin_mastercard

    @property
    def merchant_acquirer_bin_visa(self):
        """Gets the merchant_acquirer_bin_visa of this ThreeDSecureIO3dsServer.

        Visa Acquirer BIN.

        :return: The merchant_acquirer_bin_visa of this ThreeDSecureIO3dsServer.
        :rtype: str
        """
        return self._merchant_acquirer_bin_visa

    @merchant_acquirer_bin_visa.setter
    def merchant_acquirer_bin_visa(self, merchant_acquirer_bin_visa):
        """Sets the merchant_acquirer_bin_visa of this ThreeDSecureIO3dsServer.

        Visa Acquirer BIN.

        :param merchant_acquirer_bin_visa: The merchant_acquirer_bin_visa of this ThreeDSecureIO3dsServer.
        :type merchant_acquirer_bin_visa: str
        """
        if merchant_acquirer_bin_visa is None:
            raise ValueError("Invalid value for `merchant_acquirer_bin_visa`, must not be `None`")
        if merchant_acquirer_bin_visa is not None and len(merchant_acquirer_bin_visa) > 11:
            raise ValueError("Invalid value for `merchant_acquirer_bin_visa`, length must be less than or equal to `11`")
        if merchant_acquirer_bin_visa is not None and len(merchant_acquirer_bin_visa) < 6:
            raise ValueError("Invalid value for `merchant_acquirer_bin_visa`, length must be greater than or equal to `6`")

        self._merchant_acquirer_bin_visa = merchant_acquirer_bin_visa

    @property
    def merchant_country(self):
        """Gets the merchant_country of this ThreeDSecureIO3dsServer.

        Merchant Country ISO Alpha-2 Code.

        :return: The merchant_country of this ThreeDSecureIO3dsServer.
        :rtype: str
        """
        return self._merchant_country

    @merchant_country.setter
    def merchant_country(self, merchant_country):
        """Sets the merchant_country of this ThreeDSecureIO3dsServer.

        Merchant Country ISO Alpha-2 Code.

        :param merchant_country: The merchant_country of this ThreeDSecureIO3dsServer.
        :type merchant_country: str
        """
        if merchant_country is None:
            raise ValueError("Invalid value for `merchant_country`, must not be `None`")
        if merchant_country is not None and len(merchant_country) > 2:
            raise ValueError("Invalid value for `merchant_country`, length must be less than or equal to `2`")

        self._merchant_country = merchant_country

    @property
    def merchant_id(self):
        """Gets the merchant_id of this ThreeDSecureIO3dsServer.

        Merchant Id.

        :return: The merchant_id of this ThreeDSecureIO3dsServer.
        :rtype: str
        """
        return self._merchant_id

    @merchant_id.setter
    def merchant_id(self, merchant_id):
        """Sets the merchant_id of this ThreeDSecureIO3dsServer.

        Merchant Id.

        :param merchant_id: The merchant_id of this ThreeDSecureIO3dsServer.
        :type merchant_id: str
        """
        if merchant_id is None:
            raise ValueError("Invalid value for `merchant_id`, must not be `None`")
        if merchant_id is not None and len(merchant_id) > 35:
            raise ValueError("Invalid value for `merchant_id`, length must be less than or equal to `35`")

        self._merchant_id = merchant_id

    @property
    def merchant_name(self):
        """Gets the merchant_name of this ThreeDSecureIO3dsServer.

        Merchant Name.

        :return: The merchant_name of this ThreeDSecureIO3dsServer.
        :rtype: str
        """
        return self._merchant_name

    @merchant_name.setter
    def merchant_name(self, merchant_name):
        """Sets the merchant_name of this ThreeDSecureIO3dsServer.

        Merchant Name.

        :param merchant_name: The merchant_name of this ThreeDSecureIO3dsServer.
        :type merchant_name: str
        """
        if merchant_name is None:
            raise ValueError("Invalid value for `merchant_name`, must not be `None`")
        if merchant_name is not None and len(merchant_name) > 40:
            raise ValueError("Invalid value for `merchant_name`, length must be less than or equal to `40`")

        self._merchant_name = merchant_name

    @property
    def merchant_url(self):
        """Gets the merchant_url of this ThreeDSecureIO3dsServer.

        Merchant URL.

        :return: The merchant_url of this ThreeDSecureIO3dsServer.
        :rtype: str
        """
        return self._merchant_url

    @merchant_url.setter
    def merchant_url(self, merchant_url):
        """Sets the merchant_url of this ThreeDSecureIO3dsServer.

        Merchant URL.

        :param merchant_url: The merchant_url of this ThreeDSecureIO3dsServer.
        :type merchant_url: str
        """
        if merchant_url is None:
            raise ValueError("Invalid value for `merchant_url`, must not be `None`")
        if merchant_url is not None and len(merchant_url) > 2048:
            raise ValueError("Invalid value for `merchant_url`, length must be less than or equal to `2048`")

        self._merchant_url = merchant_url

    @property
    def transaction_type(self):
        """Gets the transaction_type of this ThreeDSecureIO3dsServer.

        01 - Goods/Service Purchase 03 - Check Acceptance 10 - Account Funding 11 - Quasi-Cash Transaction 28 - Prepaid Activation and Load  Identifies the type of transaction being authenticated. 

        :return: The transaction_type of this ThreeDSecureIO3dsServer.
        :rtype: str
        """
        return self._transaction_type

    @transaction_type.setter
    def transaction_type(self, transaction_type):
        """Sets the transaction_type of this ThreeDSecureIO3dsServer.

        01 - Goods/Service Purchase 03 - Check Acceptance 10 - Account Funding 11 - Quasi-Cash Transaction 28 - Prepaid Activation and Load  Identifies the type of transaction being authenticated. 

        :param transaction_type: The transaction_type of this ThreeDSecureIO3dsServer.
        :type transaction_type: str
        """
        allowed_values = ["01", "03", "10", "11", "28"]  # noqa: E501
        if transaction_type not in allowed_values:
            raise ValueError(
                "Invalid value for `transaction_type` ({0}), must be one of {1}"
                .format(transaction_type, allowed_values)
            )

        self._transaction_type = transaction_type

    @property
    def v1(self):
        """Gets the v1 of this ThreeDSecureIO3dsServer.

        Value determines if requests can use version 1 of 3DS. In case both v1 and v2 are enabled it will prefer v2. If v2 is not supported for the issuer, it will coalesce to v1. 

        :return: The v1 of this ThreeDSecureIO3dsServer.
        :rtype: bool
        """
        return self._v1

    @v1.setter
    def v1(self, v1):
        """Sets the v1 of this ThreeDSecureIO3dsServer.

        Value determines if requests can use version 1 of 3DS. In case both v1 and v2 are enabled it will prefer v2. If v2 is not supported for the issuer, it will coalesce to v1. 

        :param v1: The v1 of this ThreeDSecureIO3dsServer.
        :type v1: bool
        """

        self._v1 = v1

    @property
    def v2(self):
        """Gets the v2 of this ThreeDSecureIO3dsServer.

        Value determines if requests will attempt version 2 of 3DS. In case both v1 and v2 are enabled it will prefer v2. If v2 is not supported for the issuer, it will coalesce to v1. 

        :return: The v2 of this ThreeDSecureIO3dsServer.
        :rtype: bool
        """
        return self._v2

    @v2.setter
    def v2(self, v2):
        """Sets the v2 of this ThreeDSecureIO3dsServer.

        Value determines if requests will attempt version 2 of 3DS. In case both v1 and v2 are enabled it will prefer v2. If v2 is not supported for the issuer, it will coalesce to v1. 

        :param v2: The v2 of this ThreeDSecureIO3dsServer.
        :type v2: bool
        """

        self._v2 = v2
