# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TWINTAllOfCredentials(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cash_register_id: str=None, key_passphrase: str=None, private_key: str=None, public_key: str=None, store_uuid: str=None):
        """TWINTAllOfCredentials - a model defined in OpenAPI

        :param cash_register_id: The cash_register_id of this TWINTAllOfCredentials.
        :param key_passphrase: The key_passphrase of this TWINTAllOfCredentials.
        :param private_key: The private_key of this TWINTAllOfCredentials.
        :param public_key: The public_key of this TWINTAllOfCredentials.
        :param store_uuid: The store_uuid of this TWINTAllOfCredentials.
        """
        self.openapi_types = {
            'cash_register_id': str,
            'key_passphrase': str,
            'private_key': str,
            'public_key': str,
            'store_uuid': str
        }

        self.attribute_map = {
            'cash_register_id': 'cashRegisterId',
            'key_passphrase': 'keyPassphrase',
            'private_key': 'privateKey',
            'public_key': 'publicKey',
            'store_uuid': 'storeUuid'
        }

        self._cash_register_id = cash_register_id
        self._key_passphrase = key_passphrase
        self._private_key = private_key
        self._public_key = public_key
        self._store_uuid = store_uuid

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TWINTAllOfCredentials':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TWINT_allOf_credentials of this TWINTAllOfCredentials.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cash_register_id(self):
        """Gets the cash_register_id of this TWINTAllOfCredentials.

        Cash register ID.

        :return: The cash_register_id of this TWINTAllOfCredentials.
        :rtype: str
        """
        return self._cash_register_id

    @cash_register_id.setter
    def cash_register_id(self, cash_register_id):
        """Sets the cash_register_id of this TWINTAllOfCredentials.

        Cash register ID.

        :param cash_register_id: The cash_register_id of this TWINTAllOfCredentials.
        :type cash_register_id: str
        """
        if cash_register_id is None:
            raise ValueError("Invalid value for `cash_register_id`, must not be `None`")

        self._cash_register_id = cash_register_id

    @property
    def key_passphrase(self):
        """Gets the key_passphrase of this TWINTAllOfCredentials.

        TWINT key's passphrase.

        :return: The key_passphrase of this TWINTAllOfCredentials.
        :rtype: str
        """
        return self._key_passphrase

    @key_passphrase.setter
    def key_passphrase(self, key_passphrase):
        """Sets the key_passphrase of this TWINTAllOfCredentials.

        TWINT key's passphrase.

        :param key_passphrase: The key_passphrase of this TWINTAllOfCredentials.
        :type key_passphrase: str
        """
        if key_passphrase is None:
            raise ValueError("Invalid value for `key_passphrase`, must not be `None`")

        self._key_passphrase = key_passphrase

    @property
    def private_key(self):
        """Gets the private_key of this TWINTAllOfCredentials.

        TWINT private key.

        :return: The private_key of this TWINTAllOfCredentials.
        :rtype: str
        """
        return self._private_key

    @private_key.setter
    def private_key(self, private_key):
        """Sets the private_key of this TWINTAllOfCredentials.

        TWINT private key.

        :param private_key: The private_key of this TWINTAllOfCredentials.
        :type private_key: str
        """
        if private_key is None:
            raise ValueError("Invalid value for `private_key`, must not be `None`")

        self._private_key = private_key

    @property
    def public_key(self):
        """Gets the public_key of this TWINTAllOfCredentials.

        TWINT public key.

        :return: The public_key of this TWINTAllOfCredentials.
        :rtype: str
        """
        return self._public_key

    @public_key.setter
    def public_key(self, public_key):
        """Sets the public_key of this TWINTAllOfCredentials.

        TWINT public key.

        :param public_key: The public_key of this TWINTAllOfCredentials.
        :type public_key: str
        """
        if public_key is None:
            raise ValueError("Invalid value for `public_key`, must not be `None`")

        self._public_key = public_key

    @property
    def store_uuid(self):
        """Gets the store_uuid of this TWINTAllOfCredentials.

        TWINT store UUID.

        :return: The store_uuid of this TWINTAllOfCredentials.
        :rtype: str
        """
        return self._store_uuid

    @store_uuid.setter
    def store_uuid(self, store_uuid):
        """Sets the store_uuid of this TWINTAllOfCredentials.

        TWINT store UUID.

        :param store_uuid: The store_uuid of this TWINTAllOfCredentials.
        :type store_uuid: str
        """
        if store_uuid is None:
            raise ValueError("Invalid value for `store_uuid`, must not be `None`")

        self._store_uuid = store_uuid
