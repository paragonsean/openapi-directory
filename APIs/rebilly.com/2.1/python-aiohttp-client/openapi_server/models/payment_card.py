# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.contact_object import ContactObject
from openapi_server.models.payment_card_all_of_embedded import PaymentCardAllOfEmbedded
from openapi_server.models.payment_card_all_of_links import PaymentCardAllOfLinks
from openapi_server.models.payment_card_brand import PaymentCardBrand
from openapi_server.models.risk_metadata import RiskMetadata
from openapi_server import util


class PaymentCard(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bank_country: str=None, bank_name: str=None, billing_address: ContactObject=None, bin: str=None, brand: PaymentCardBrand=None, created_time: datetime=None, custom_fields: object=None, customer_id: str=None, cvv: str=None, exp_month: int=None, exp_year: int=None, fingerprint: str=None, id: str=None, last4: str=None, method: str=None, pan: str=None, risk_metadata: RiskMetadata=None, status: str=None, updated_time: datetime=None, embedded: List[PaymentCardAllOfEmbedded]=None, links: List[PaymentCardAllOfLinks]=None, expiration_reminder_number: int=None, expiration_reminder_time: datetime=None, sticky_gateway_account_id: str=None):
        """PaymentCard - a model defined in OpenAPI

        :param bank_country: The bank_country of this PaymentCard.
        :param bank_name: The bank_name of this PaymentCard.
        :param billing_address: The billing_address of this PaymentCard.
        :param bin: The bin of this PaymentCard.
        :param brand: The brand of this PaymentCard.
        :param created_time: The created_time of this PaymentCard.
        :param custom_fields: The custom_fields of this PaymentCard.
        :param customer_id: The customer_id of this PaymentCard.
        :param cvv: The cvv of this PaymentCard.
        :param exp_month: The exp_month of this PaymentCard.
        :param exp_year: The exp_year of this PaymentCard.
        :param fingerprint: The fingerprint of this PaymentCard.
        :param id: The id of this PaymentCard.
        :param last4: The last4 of this PaymentCard.
        :param method: The method of this PaymentCard.
        :param pan: The pan of this PaymentCard.
        :param risk_metadata: The risk_metadata of this PaymentCard.
        :param status: The status of this PaymentCard.
        :param updated_time: The updated_time of this PaymentCard.
        :param embedded: The embedded of this PaymentCard.
        :param links: The links of this PaymentCard.
        :param expiration_reminder_number: The expiration_reminder_number of this PaymentCard.
        :param expiration_reminder_time: The expiration_reminder_time of this PaymentCard.
        :param sticky_gateway_account_id: The sticky_gateway_account_id of this PaymentCard.
        """
        self.openapi_types = {
            'bank_country': str,
            'bank_name': str,
            'billing_address': ContactObject,
            'bin': str,
            'brand': PaymentCardBrand,
            'created_time': datetime,
            'custom_fields': object,
            'customer_id': str,
            'cvv': str,
            'exp_month': int,
            'exp_year': int,
            'fingerprint': str,
            'id': str,
            'last4': str,
            'method': str,
            'pan': str,
            'risk_metadata': RiskMetadata,
            'status': str,
            'updated_time': datetime,
            'embedded': List[PaymentCardAllOfEmbedded],
            'links': List[PaymentCardAllOfLinks],
            'expiration_reminder_number': int,
            'expiration_reminder_time': datetime,
            'sticky_gateway_account_id': str
        }

        self.attribute_map = {
            'bank_country': 'bankCountry',
            'bank_name': 'bankName',
            'billing_address': 'billingAddress',
            'bin': 'bin',
            'brand': 'brand',
            'created_time': 'createdTime',
            'custom_fields': 'customFields',
            'customer_id': 'customerId',
            'cvv': 'cvv',
            'exp_month': 'expMonth',
            'exp_year': 'expYear',
            'fingerprint': 'fingerprint',
            'id': 'id',
            'last4': 'last4',
            'method': 'method',
            'pan': 'pan',
            'risk_metadata': 'riskMetadata',
            'status': 'status',
            'updated_time': 'updatedTime',
            'embedded': '_embedded',
            'links': '_links',
            'expiration_reminder_number': 'expirationReminderNumber',
            'expiration_reminder_time': 'expirationReminderTime',
            'sticky_gateway_account_id': 'stickyGatewayAccountId'
        }

        self._bank_country = bank_country
        self._bank_name = bank_name
        self._billing_address = billing_address
        self._bin = bin
        self._brand = brand
        self._created_time = created_time
        self._custom_fields = custom_fields
        self._customer_id = customer_id
        self._cvv = cvv
        self._exp_month = exp_month
        self._exp_year = exp_year
        self._fingerprint = fingerprint
        self._id = id
        self._last4 = last4
        self._method = method
        self._pan = pan
        self._risk_metadata = risk_metadata
        self._status = status
        self._updated_time = updated_time
        self._embedded = embedded
        self._links = links
        self._expiration_reminder_number = expiration_reminder_number
        self._expiration_reminder_time = expiration_reminder_time
        self._sticky_gateway_account_id = sticky_gateway_account_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PaymentCard':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PaymentCard of this PaymentCard.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bank_country(self):
        """Gets the bank_country of this PaymentCard.

        Payment instrument bank country.

        :return: The bank_country of this PaymentCard.
        :rtype: str
        """
        return self._bank_country

    @bank_country.setter
    def bank_country(self, bank_country):
        """Sets the bank_country of this PaymentCard.

        Payment instrument bank country.

        :param bank_country: The bank_country of this PaymentCard.
        :type bank_country: str
        """

        self._bank_country = bank_country

    @property
    def bank_name(self):
        """Gets the bank_name of this PaymentCard.

        Payment instrument bank name.

        :return: The bank_name of this PaymentCard.
        :rtype: str
        """
        return self._bank_name

    @bank_name.setter
    def bank_name(self, bank_name):
        """Sets the bank_name of this PaymentCard.

        Payment instrument bank name.

        :param bank_name: The bank_name of this PaymentCard.
        :type bank_name: str
        """

        self._bank_name = bank_name

    @property
    def billing_address(self):
        """Gets the billing_address of this PaymentCard.

        The billing address.

        :return: The billing_address of this PaymentCard.
        :rtype: ContactObject
        """
        return self._billing_address

    @billing_address.setter
    def billing_address(self, billing_address):
        """Sets the billing_address of this PaymentCard.

        The billing address.

        :param billing_address: The billing_address of this PaymentCard.
        :type billing_address: ContactObject
        """

        self._billing_address = billing_address

    @property
    def bin(self):
        """Gets the bin of this PaymentCard.

        The card's bin (the PAN's first 6 digits).

        :return: The bin of this PaymentCard.
        :rtype: str
        """
        return self._bin

    @bin.setter
    def bin(self, bin):
        """Sets the bin of this PaymentCard.

        The card's bin (the PAN's first 6 digits).

        :param bin: The bin of this PaymentCard.
        :type bin: str
        """

        self._bin = bin

    @property
    def brand(self):
        """Gets the brand of this PaymentCard.


        :return: The brand of this PaymentCard.
        :rtype: PaymentCardBrand
        """
        return self._brand

    @brand.setter
    def brand(self, brand):
        """Sets the brand of this PaymentCard.


        :param brand: The brand of this PaymentCard.
        :type brand: PaymentCardBrand
        """

        self._brand = brand

    @property
    def created_time(self):
        """Gets the created_time of this PaymentCard.

        Payment instrument created time.

        :return: The created_time of this PaymentCard.
        :rtype: datetime
        """
        return self._created_time

    @created_time.setter
    def created_time(self, created_time):
        """Sets the created_time of this PaymentCard.

        Payment instrument created time.

        :param created_time: The created_time of this PaymentCard.
        :type created_time: datetime
        """

        self._created_time = created_time

    @property
    def custom_fields(self):
        """Gets the custom_fields of this PaymentCard.

        Custom Fields list as a map `{\"custom field name\": \"custom field value\", ...}`. The format must follow the saved format (see Custom Fields section for the formats). 

        :return: The custom_fields of this PaymentCard.
        :rtype: object
        """
        return self._custom_fields

    @custom_fields.setter
    def custom_fields(self, custom_fields):
        """Sets the custom_fields of this PaymentCard.

        Custom Fields list as a map `{\"custom field name\": \"custom field value\", ...}`. The format must follow the saved format (see Custom Fields section for the formats). 

        :param custom_fields: The custom_fields of this PaymentCard.
        :type custom_fields: object
        """

        self._custom_fields = custom_fields

    @property
    def customer_id(self):
        """Gets the customer_id of this PaymentCard.

        The сustomer's ID.

        :return: The customer_id of this PaymentCard.
        :rtype: str
        """
        return self._customer_id

    @customer_id.setter
    def customer_id(self, customer_id):
        """Sets the customer_id of this PaymentCard.

        The сustomer's ID.

        :param customer_id: The customer_id of this PaymentCard.
        :type customer_id: str
        """
        if customer_id is not None and len(customer_id) > 50:
            raise ValueError("Invalid value for `customer_id`, length must be less than or equal to `50`")

        self._customer_id = customer_id

    @property
    def cvv(self):
        """Gets the cvv of this PaymentCard.

        Card's cvv (card verification value).

        :return: The cvv of this PaymentCard.
        :rtype: str
        """
        return self._cvv

    @cvv.setter
    def cvv(self, cvv):
        """Sets the cvv of this PaymentCard.

        Card's cvv (card verification value).

        :param cvv: The cvv of this PaymentCard.
        :type cvv: str
        """

        self._cvv = cvv

    @property
    def exp_month(self):
        """Gets the exp_month of this PaymentCard.

        Card's expiration month.

        :return: The exp_month of this PaymentCard.
        :rtype: int
        """
        return self._exp_month

    @exp_month.setter
    def exp_month(self, exp_month):
        """Sets the exp_month of this PaymentCard.

        Card's expiration month.

        :param exp_month: The exp_month of this PaymentCard.
        :type exp_month: int
        """

        self._exp_month = exp_month

    @property
    def exp_year(self):
        """Gets the exp_year of this PaymentCard.

        Card's expiration year.

        :return: The exp_year of this PaymentCard.
        :rtype: int
        """
        return self._exp_year

    @exp_year.setter
    def exp_year(self, exp_year):
        """Sets the exp_year of this PaymentCard.

        Card's expiration year.

        :param exp_year: The exp_year of this PaymentCard.
        :type exp_year: int
        """

        self._exp_year = exp_year

    @property
    def fingerprint(self):
        """Gets the fingerprint of this PaymentCard.

        A unique value to identify the payment instrument regardless of variable values. It contains alphanumeric values.

        :return: The fingerprint of this PaymentCard.
        :rtype: str
        """
        return self._fingerprint

    @fingerprint.setter
    def fingerprint(self, fingerprint):
        """Sets the fingerprint of this PaymentCard.

        A unique value to identify the payment instrument regardless of variable values. It contains alphanumeric values.

        :param fingerprint: The fingerprint of this PaymentCard.
        :type fingerprint: str
        """

        self._fingerprint = fingerprint

    @property
    def id(self):
        """Gets the id of this PaymentCard.

        The payment instrument ID.

        :return: The id of this PaymentCard.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PaymentCard.

        The payment instrument ID.

        :param id: The id of this PaymentCard.
        :type id: str
        """
        if id is not None and len(id) > 50:
            raise ValueError("Invalid value for `id`, length must be less than or equal to `50`")

        self._id = id

    @property
    def last4(self):
        """Gets the last4 of this PaymentCard.

        The PAN's last 4 digits.

        :return: The last4 of this PaymentCard.
        :rtype: str
        """
        return self._last4

    @last4.setter
    def last4(self, last4):
        """Sets the last4 of this PaymentCard.

        The PAN's last 4 digits.

        :param last4: The last4 of this PaymentCard.
        :type last4: str
        """

        self._last4 = last4

    @property
    def method(self):
        """Gets the method of this PaymentCard.

        The method of payment instrument.

        :return: The method of this PaymentCard.
        :rtype: str
        """
        return self._method

    @method.setter
    def method(self, method):
        """Sets the method of this PaymentCard.

        The method of payment instrument.

        :param method: The method of this PaymentCard.
        :type method: str
        """
        allowed_values = ["payment-card"]  # noqa: E501
        if method not in allowed_values:
            raise ValueError(
                "Invalid value for `method` ({0}), must be one of {1}"
                .format(method, allowed_values)
            )

        self._method = method

    @property
    def pan(self):
        """Gets the pan of this PaymentCard.

        The card PAN (primary account number).

        :return: The pan of this PaymentCard.
        :rtype: str
        """
        return self._pan

    @pan.setter
    def pan(self, pan):
        """Sets the pan of this PaymentCard.

        The card PAN (primary account number).

        :param pan: The pan of this PaymentCard.
        :type pan: str
        """

        self._pan = pan

    @property
    def risk_metadata(self):
        """Gets the risk_metadata of this PaymentCard.


        :return: The risk_metadata of this PaymentCard.
        :rtype: RiskMetadata
        """
        return self._risk_metadata

    @risk_metadata.setter
    def risk_metadata(self, risk_metadata):
        """Sets the risk_metadata of this PaymentCard.


        :param risk_metadata: The risk_metadata of this PaymentCard.
        :type risk_metadata: RiskMetadata
        """

        self._risk_metadata = risk_metadata

    @property
    def status(self):
        """Gets the status of this PaymentCard.

        Payment instrument status. When an instrument is `active` it means it has been used at least once for an approved transaction. To remove an instrument from being in use, set it as `deactivated` (see the deactivation endpoint). 

        :return: The status of this PaymentCard.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this PaymentCard.

        Payment instrument status. When an instrument is `active` it means it has been used at least once for an approved transaction. To remove an instrument from being in use, set it as `deactivated` (see the deactivation endpoint). 

        :param status: The status of this PaymentCard.
        :type status: str
        """
        allowed_values = ["active", "inactive", "expired", "deactivated", "verification-needed"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def updated_time(self):
        """Gets the updated_time of this PaymentCard.

        Payment instrument updated time.

        :return: The updated_time of this PaymentCard.
        :rtype: datetime
        """
        return self._updated_time

    @updated_time.setter
    def updated_time(self, updated_time):
        """Sets the updated_time of this PaymentCard.

        Payment instrument updated time.

        :param updated_time: The updated_time of this PaymentCard.
        :type updated_time: datetime
        """

        self._updated_time = updated_time

    @property
    def embedded(self):
        """Gets the embedded of this PaymentCard.

        Any embedded objects available that are requested by the `expand` querystring parameter.

        :return: The embedded of this PaymentCard.
        :rtype: List[PaymentCardAllOfEmbedded]
        """
        return self._embedded

    @embedded.setter
    def embedded(self, embedded):
        """Sets the embedded of this PaymentCard.

        Any embedded objects available that are requested by the `expand` querystring parameter.

        :param embedded: The embedded of this PaymentCard.
        :type embedded: List[PaymentCardAllOfEmbedded]
        """
        if embedded is not None and len(embedded) < 1:
            raise ValueError("Invalid value for `embedded`, number of items must be greater than or equal to `1`")

        self._embedded = embedded

    @property
    def links(self):
        """Gets the links of this PaymentCard.

        The links related to resource.

        :return: The links of this PaymentCard.
        :rtype: List[PaymentCardAllOfLinks]
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this PaymentCard.

        The links related to resource.

        :param links: The links of this PaymentCard.
        :type links: List[PaymentCardAllOfLinks]
        """
        if links is not None and len(links) < 1:
            raise ValueError("Invalid value for `links`, number of items must be greater than or equal to `1`")

        self._links = links

    @property
    def expiration_reminder_number(self):
        """Gets the expiration_reminder_number of this PaymentCard.

        Number of expiration reminder events triggered.

        :return: The expiration_reminder_number of this PaymentCard.
        :rtype: int
        """
        return self._expiration_reminder_number

    @expiration_reminder_number.setter
    def expiration_reminder_number(self, expiration_reminder_number):
        """Sets the expiration_reminder_number of this PaymentCard.

        Number of expiration reminder events triggered.

        :param expiration_reminder_number: The expiration_reminder_number of this PaymentCard.
        :type expiration_reminder_number: int
        """

        self._expiration_reminder_number = expiration_reminder_number

    @property
    def expiration_reminder_time(self):
        """Gets the expiration_reminder_time of this PaymentCard.

        Time expiration reminder event will be triggered.

        :return: The expiration_reminder_time of this PaymentCard.
        :rtype: datetime
        """
        return self._expiration_reminder_time

    @expiration_reminder_time.setter
    def expiration_reminder_time(self, expiration_reminder_time):
        """Sets the expiration_reminder_time of this PaymentCard.

        Time expiration reminder event will be triggered.

        :param expiration_reminder_time: The expiration_reminder_time of this PaymentCard.
        :type expiration_reminder_time: datetime
        """

        self._expiration_reminder_time = expiration_reminder_time

    @property
    def sticky_gateway_account_id(self):
        """Gets the sticky_gateway_account_id of this PaymentCard.

        Default gateway account ID used for transactions.

        :return: The sticky_gateway_account_id of this PaymentCard.
        :rtype: str
        """
        return self._sticky_gateway_account_id

    @sticky_gateway_account_id.setter
    def sticky_gateway_account_id(self, sticky_gateway_account_id):
        """Sets the sticky_gateway_account_id of this PaymentCard.

        Default gateway account ID used for transactions.

        :param sticky_gateway_account_id: The sticky_gateway_account_id of this PaymentCard.
        :type sticky_gateway_account_id: str
        """

        self._sticky_gateway_account_id = sticky_gateway_account_id
