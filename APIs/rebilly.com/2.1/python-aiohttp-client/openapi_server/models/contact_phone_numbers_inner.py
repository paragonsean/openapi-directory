# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ContactPhoneNumbersInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, label: str=None, primary: bool=None, value: str=None):
        """ContactPhoneNumbersInner - a model defined in OpenAPI

        :param label: The label of this ContactPhoneNumbersInner.
        :param primary: The primary of this ContactPhoneNumbersInner.
        :param value: The value of this ContactPhoneNumbersInner.
        """
        self.openapi_types = {
            'label': str,
            'primary': bool,
            'value': str
        }

        self.attribute_map = {
            'label': 'label',
            'primary': 'primary',
            'value': 'value'
        }

        self._label = label
        self._primary = primary
        self._value = value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ContactPhoneNumbersInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ContactPhoneNumbers_inner of this ContactPhoneNumbersInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def label(self):
        """Gets the label of this ContactPhoneNumbersInner.

        The phone label.

        :return: The label of this ContactPhoneNumbersInner.
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this ContactPhoneNumbersInner.

        The phone label.

        :param label: The label of this ContactPhoneNumbersInner.
        :type label: str
        """
        if label is None:
            raise ValueError("Invalid value for `label`, must not be `None`")
        if label is not None and len(label) > 45:
            raise ValueError("Invalid value for `label`, length must be less than or equal to `45`")

        self._label = label

    @property
    def primary(self):
        """Gets the primary of this ContactPhoneNumbersInner.

        True if phone is primary.

        :return: The primary of this ContactPhoneNumbersInner.
        :rtype: bool
        """
        return self._primary

    @primary.setter
    def primary(self, primary):
        """Sets the primary of this ContactPhoneNumbersInner.

        True if phone is primary.

        :param primary: The primary of this ContactPhoneNumbersInner.
        :type primary: bool
        """

        self._primary = primary

    @property
    def value(self):
        """Gets the value of this ContactPhoneNumbersInner.

        The phone value.

        :return: The value of this ContactPhoneNumbersInner.
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this ContactPhoneNumbersInner.

        The phone value.

        :param value: The value of this ContactPhoneNumbersInner.
        :type value: str
        """
        if value is None:
            raise ValueError("Invalid value for `value`, must not be `None`")
        if value is not None and len(value) > 50:
            raise ValueError("Invalid value for `value`, length must be less than or equal to `50`")

        self._value = value
