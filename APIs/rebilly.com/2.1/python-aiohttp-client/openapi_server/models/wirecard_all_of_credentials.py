# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class WirecardAllOfCredentials(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, business_signature: str=None, delay: int=None, merchant_password: str=None, merchant_username: str=None, sftp_private_key: str=None, sftp_username: str=None):
        """WirecardAllOfCredentials - a model defined in OpenAPI

        :param business_signature: The business_signature of this WirecardAllOfCredentials.
        :param delay: The delay of this WirecardAllOfCredentials.
        :param merchant_password: The merchant_password of this WirecardAllOfCredentials.
        :param merchant_username: The merchant_username of this WirecardAllOfCredentials.
        :param sftp_private_key: The sftp_private_key of this WirecardAllOfCredentials.
        :param sftp_username: The sftp_username of this WirecardAllOfCredentials.
        """
        self.openapi_types = {
            'business_signature': str,
            'delay': int,
            'merchant_password': str,
            'merchant_username': str,
            'sftp_private_key': str,
            'sftp_username': str
        }

        self.attribute_map = {
            'business_signature': 'businessSignature',
            'delay': 'delay',
            'merchant_password': 'merchantPassword',
            'merchant_username': 'merchantUsername',
            'sftp_private_key': 'sftpPrivateKey',
            'sftp_username': 'sftpUsername'
        }

        self._business_signature = business_signature
        self._delay = delay
        self._merchant_password = merchant_password
        self._merchant_username = merchant_username
        self._sftp_private_key = sftp_private_key
        self._sftp_username = sftp_username

    @classmethod
    def from_dict(cls, dikt: dict) -> 'WirecardAllOfCredentials':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Wirecard_allOf_credentials of this WirecardAllOfCredentials.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def business_signature(self):
        """Gets the business_signature of this WirecardAllOfCredentials.

        Wirecard Gateway merchant business case signature.

        :return: The business_signature of this WirecardAllOfCredentials.
        :rtype: str
        """
        return self._business_signature

    @business_signature.setter
    def business_signature(self, business_signature):
        """Sets the business_signature of this WirecardAllOfCredentials.

        Wirecard Gateway merchant business case signature.

        :param business_signature: The business_signature of this WirecardAllOfCredentials.
        :type business_signature: str
        """
        if business_signature is None:
            raise ValueError("Invalid value for `business_signature`, must not be `None`")

        self._business_signature = business_signature

    @property
    def delay(self):
        """Gets the delay of this WirecardAllOfCredentials.

        Wirecard Gateway delay.

        :return: The delay of this WirecardAllOfCredentials.
        :rtype: int
        """
        return self._delay

    @delay.setter
    def delay(self, delay):
        """Sets the delay of this WirecardAllOfCredentials.

        Wirecard Gateway delay.

        :param delay: The delay of this WirecardAllOfCredentials.
        :type delay: int
        """
        if delay is None:
            raise ValueError("Invalid value for `delay`, must not be `None`")

        self._delay = delay

    @property
    def merchant_password(self):
        """Gets the merchant_password of this WirecardAllOfCredentials.

        Wirecard Gateway merchant password.

        :return: The merchant_password of this WirecardAllOfCredentials.
        :rtype: str
        """
        return self._merchant_password

    @merchant_password.setter
    def merchant_password(self, merchant_password):
        """Sets the merchant_password of this WirecardAllOfCredentials.

        Wirecard Gateway merchant password.

        :param merchant_password: The merchant_password of this WirecardAllOfCredentials.
        :type merchant_password: str
        """
        if merchant_password is None:
            raise ValueError("Invalid value for `merchant_password`, must not be `None`")

        self._merchant_password = merchant_password

    @property
    def merchant_username(self):
        """Gets the merchant_username of this WirecardAllOfCredentials.

        Wirecard Gateway merchant username.

        :return: The merchant_username of this WirecardAllOfCredentials.
        :rtype: str
        """
        return self._merchant_username

    @merchant_username.setter
    def merchant_username(self, merchant_username):
        """Sets the merchant_username of this WirecardAllOfCredentials.

        Wirecard Gateway merchant username.

        :param merchant_username: The merchant_username of this WirecardAllOfCredentials.
        :type merchant_username: str
        """
        if merchant_username is None:
            raise ValueError("Invalid value for `merchant_username`, must not be `None`")

        self._merchant_username = merchant_username

    @property
    def sftp_private_key(self):
        """Gets the sftp_private_key of this WirecardAllOfCredentials.

        Wirecard sftp private key.

        :return: The sftp_private_key of this WirecardAllOfCredentials.
        :rtype: str
        """
        return self._sftp_private_key

    @sftp_private_key.setter
    def sftp_private_key(self, sftp_private_key):
        """Sets the sftp_private_key of this WirecardAllOfCredentials.

        Wirecard sftp private key.

        :param sftp_private_key: The sftp_private_key of this WirecardAllOfCredentials.
        :type sftp_private_key: str
        """

        self._sftp_private_key = sftp_private_key

    @property
    def sftp_username(self):
        """Gets the sftp_username of this WirecardAllOfCredentials.

        Wirecard sftp username.

        :return: The sftp_username of this WirecardAllOfCredentials.
        :rtype: str
        """
        return self._sftp_username

    @sftp_username.setter
    def sftp_username(self, sftp_username):
        """Sets the sftp_username of this WirecardAllOfCredentials.

        Wirecard sftp username.

        :param sftp_username: The sftp_username of this WirecardAllOfCredentials.
        :type sftp_username: str
        """

        self._sftp_username = sftp_username
