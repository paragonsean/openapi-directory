# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.common_kyc_document_links_inner import CommonKycDocumentLinksInner
from openapi_server.models.kyc_document_rejection import KycDocumentRejection
from openapi_server.models.kyc_document_subtypes import KycDocumentSubtypes
from openapi_server.models.kyc_document_types import KycDocumentTypes
from openapi_server.models.proof_of_address import ProofOfAddress
from openapi_server.models.proof_of_address_all_of_document_matches import ProofOfAddressAllOfDocumentMatches
from openapi_server.models.proof_of_funds import ProofOfFunds
from openapi_server.models.proof_of_identity import ProofOfIdentity
from openapi_server.models.proof_of_purchase import ProofOfPurchase
from openapi_server import util


class KycDocument2(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, links: List[CommonKycDocumentLinksInner]=None, created_time: datetime=None, document_subtype: KycDocumentSubtypes=None, document_type: KycDocumentTypes=None, file_id: str=None, file_ids: List[str]=None, id: str=None, processed_time: datetime=None, rejection_reason: KycDocumentRejection=None, request_id: str=None, status: str=None, updated_time: datetime=None, customer_id: str=None, match_level: int=None, notes: str=None, reason: str=None, review_time: datetime=None, reviewer_id: str=None, reviewer_name: str=None, document_matches: ProofOfAddressAllOfDocumentMatches=None, parsed_data: ProofOfAddressAllOfDocumentMatches=None):
        """KycDocument2 - a model defined in OpenAPI

        :param links: The links of this KycDocument2.
        :param created_time: The created_time of this KycDocument2.
        :param document_subtype: The document_subtype of this KycDocument2.
        :param document_type: The document_type of this KycDocument2.
        :param file_id: The file_id of this KycDocument2.
        :param file_ids: The file_ids of this KycDocument2.
        :param id: The id of this KycDocument2.
        :param processed_time: The processed_time of this KycDocument2.
        :param rejection_reason: The rejection_reason of this KycDocument2.
        :param request_id: The request_id of this KycDocument2.
        :param status: The status of this KycDocument2.
        :param updated_time: The updated_time of this KycDocument2.
        :param customer_id: The customer_id of this KycDocument2.
        :param match_level: The match_level of this KycDocument2.
        :param notes: The notes of this KycDocument2.
        :param reason: The reason of this KycDocument2.
        :param review_time: The review_time of this KycDocument2.
        :param reviewer_id: The reviewer_id of this KycDocument2.
        :param reviewer_name: The reviewer_name of this KycDocument2.
        :param document_matches: The document_matches of this KycDocument2.
        :param parsed_data: The parsed_data of this KycDocument2.
        """
        self.openapi_types = {
            'links': List[CommonKycDocumentLinksInner],
            'created_time': datetime,
            'document_subtype': KycDocumentSubtypes,
            'document_type': KycDocumentTypes,
            'file_id': str,
            'file_ids': List[str],
            'id': str,
            'processed_time': datetime,
            'rejection_reason': KycDocumentRejection,
            'request_id': str,
            'status': str,
            'updated_time': datetime,
            'customer_id': str,
            'match_level': int,
            'notes': str,
            'reason': str,
            'review_time': datetime,
            'reviewer_id': str,
            'reviewer_name': str,
            'document_matches': ProofOfAddressAllOfDocumentMatches,
            'parsed_data': ProofOfAddressAllOfDocumentMatches
        }

        self.attribute_map = {
            'links': '_links',
            'created_time': 'createdTime',
            'document_subtype': 'documentSubtype',
            'document_type': 'documentType',
            'file_id': 'fileId',
            'file_ids': 'fileIds',
            'id': 'id',
            'processed_time': 'processedTime',
            'rejection_reason': 'rejectionReason',
            'request_id': 'requestId',
            'status': 'status',
            'updated_time': 'updatedTime',
            'customer_id': 'customerId',
            'match_level': 'matchLevel',
            'notes': 'notes',
            'reason': 'reason',
            'review_time': 'reviewTime',
            'reviewer_id': 'reviewerId',
            'reviewer_name': 'reviewerName',
            'document_matches': 'documentMatches',
            'parsed_data': 'parsedData'
        }

        self._links = links
        self._created_time = created_time
        self._document_subtype = document_subtype
        self._document_type = document_type
        self._file_id = file_id
        self._file_ids = file_ids
        self._id = id
        self._processed_time = processed_time
        self._rejection_reason = rejection_reason
        self._request_id = request_id
        self._status = status
        self._updated_time = updated_time
        self._customer_id = customer_id
        self._match_level = match_level
        self._notes = notes
        self._reason = reason
        self._review_time = review_time
        self._reviewer_id = reviewer_id
        self._reviewer_name = reviewer_name
        self._document_matches = document_matches
        self._parsed_data = parsed_data

    @classmethod
    def from_dict(cls, dikt: dict) -> 'KycDocument2':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The KycDocument-2 of this KycDocument2.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def links(self):
        """Gets the links of this KycDocument2.

        The links related to resource.

        :return: The links of this KycDocument2.
        :rtype: List[CommonKycDocumentLinksInner]
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this KycDocument2.

        The links related to resource.

        :param links: The links of this KycDocument2.
        :type links: List[CommonKycDocumentLinksInner]
        """
        if links is not None and len(links) < 1:
            raise ValueError("Invalid value for `links`, number of items must be greater than or equal to `1`")

        self._links = links

    @property
    def created_time(self):
        """Gets the created_time of this KycDocument2.

        Creation date/time.

        :return: The created_time of this KycDocument2.
        :rtype: datetime
        """
        return self._created_time

    @created_time.setter
    def created_time(self, created_time):
        """Sets the created_time of this KycDocument2.

        Creation date/time.

        :param created_time: The created_time of this KycDocument2.
        :type created_time: datetime
        """

        self._created_time = created_time

    @property
    def document_subtype(self):
        """Gets the document_subtype of this KycDocument2.

        Document subtype submitted for validation.

        :return: The document_subtype of this KycDocument2.
        :rtype: KycDocumentSubtypes
        """
        return self._document_subtype

    @document_subtype.setter
    def document_subtype(self, document_subtype):
        """Sets the document_subtype of this KycDocument2.

        Document subtype submitted for validation.

        :param document_subtype: The document_subtype of this KycDocument2.
        :type document_subtype: KycDocumentSubtypes
        """

        self._document_subtype = document_subtype

    @property
    def document_type(self):
        """Gets the document_type of this KycDocument2.

        Document type submitted for validation, only identity-proof type is analyzed in an automated manner.

        :return: The document_type of this KycDocument2.
        :rtype: KycDocumentTypes
        """
        return self._document_type

    @document_type.setter
    def document_type(self, document_type):
        """Sets the document_type of this KycDocument2.

        Document type submitted for validation, only identity-proof type is analyzed in an automated manner.

        :param document_type: The document_type of this KycDocument2.
        :type document_type: KycDocumentTypes
        """
        if document_type is None:
            raise ValueError("Invalid value for `document_type`, must not be `None`")

        self._document_type = document_type

    @property
    def file_id(self):
        """Gets the file_id of this KycDocument2.

        Linked file object id.

        :return: The file_id of this KycDocument2.
        :rtype: str
        """
        return self._file_id

    @file_id.setter
    def file_id(self, file_id):
        """Sets the file_id of this KycDocument2.

        Linked file object id.

        :param file_id: The file_id of this KycDocument2.
        :type file_id: str
        """
        if file_id is not None and len(file_id) > 50:
            raise ValueError("Invalid value for `file_id`, length must be less than or equal to `50`")

        self._file_id = file_id

    @property
    def file_ids(self):
        """Gets the file_ids of this KycDocument2.

        Linked file object id's.

        :return: The file_ids of this KycDocument2.
        :rtype: List[str]
        """
        return self._file_ids

    @file_ids.setter
    def file_ids(self, file_ids):
        """Sets the file_ids of this KycDocument2.

        Linked file object id's.

        :param file_ids: The file_ids of this KycDocument2.
        :type file_ids: List[str]
        """

        self._file_ids = file_ids

    @property
    def id(self):
        """Gets the id of this KycDocument2.

        The resource ID. Defaults to UUID v4.

        :return: The id of this KycDocument2.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this KycDocument2.

        The resource ID. Defaults to UUID v4.

        :param id: The id of this KycDocument2.
        :type id: str
        """
        if id is not None and len(id) > 50:
            raise ValueError("Invalid value for `id`, length must be less than or equal to `50`")

        self._id = id

    @property
    def processed_time(self):
        """Gets the processed_time of this KycDocument2.

        Processing date/time.

        :return: The processed_time of this KycDocument2.
        :rtype: datetime
        """
        return self._processed_time

    @processed_time.setter
    def processed_time(self, processed_time):
        """Sets the processed_time of this KycDocument2.

        Processing date/time.

        :param processed_time: The processed_time of this KycDocument2.
        :type processed_time: datetime
        """

        self._processed_time = processed_time

    @property
    def rejection_reason(self):
        """Gets the rejection_reason of this KycDocument2.


        :return: The rejection_reason of this KycDocument2.
        :rtype: KycDocumentRejection
        """
        return self._rejection_reason

    @rejection_reason.setter
    def rejection_reason(self, rejection_reason):
        """Sets the rejection_reason of this KycDocument2.


        :param rejection_reason: The rejection_reason of this KycDocument2.
        :type rejection_reason: KycDocumentRejection
        """

        self._rejection_reason = rejection_reason

    @property
    def request_id(self):
        """Gets the request_id of this KycDocument2.

        KYC request identifier string.

        :return: The request_id of this KycDocument2.
        :rtype: str
        """
        return self._request_id

    @request_id.setter
    def request_id(self, request_id):
        """Sets the request_id of this KycDocument2.

        KYC request identifier string.

        :param request_id: The request_id of this KycDocument2.
        :type request_id: str
        """
        if request_id is not None and len(request_id) > 50:
            raise ValueError("Invalid value for `request_id`, length must be less than or equal to `50`")

        self._request_id = request_id

    @property
    def status(self):
        """Gets the status of this KycDocument2.

        Status of the validation.

        :return: The status of this KycDocument2.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this KycDocument2.

        Status of the validation.

        :param status: The status of this KycDocument2.
        :type status: str
        """
        allowed_values = ["pending", "in-progress", "accepted", "rejected"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def updated_time(self):
        """Gets the updated_time of this KycDocument2.

        Latest update date/time.

        :return: The updated_time of this KycDocument2.
        :rtype: datetime
        """
        return self._updated_time

    @updated_time.setter
    def updated_time(self, updated_time):
        """Sets the updated_time of this KycDocument2.

        Latest update date/time.

        :param updated_time: The updated_time of this KycDocument2.
        :type updated_time: datetime
        """

        self._updated_time = updated_time

    @property
    def customer_id(self):
        """Gets the customer_id of this KycDocument2.

        The сustomer's ID.

        :return: The customer_id of this KycDocument2.
        :rtype: str
        """
        return self._customer_id

    @customer_id.setter
    def customer_id(self, customer_id):
        """Sets the customer_id of this KycDocument2.

        The сustomer's ID.

        :param customer_id: The customer_id of this KycDocument2.
        :type customer_id: str
        """
        if customer_id is None:
            raise ValueError("Invalid value for `customer_id`, must not be `None`")
        if customer_id is not None and len(customer_id) > 50:
            raise ValueError("Invalid value for `customer_id`, length must be less than or equal to `50`")

        self._customer_id = customer_id

    @property
    def match_level(self):
        """Gets the match_level of this KycDocument2.

        The level of strictness for the document matches.

        :return: The match_level of this KycDocument2.
        :rtype: int
        """
        return self._match_level

    @match_level.setter
    def match_level(self, match_level):
        """Sets the match_level of this KycDocument2.

        The level of strictness for the document matches.

        :param match_level: The match_level of this KycDocument2.
        :type match_level: int
        """
        if match_level is not None and match_level > 2:
            raise ValueError("Invalid value for `match_level`, must be a value less than or equal to `2`")
        if match_level is not None and match_level < 1:
            raise ValueError("Invalid value for `match_level`, must be a value greater than or equal to `1`")

        self._match_level = match_level

    @property
    def notes(self):
        """Gets the notes of this KycDocument2.

        Reviewer notes.

        :return: The notes of this KycDocument2.
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this KycDocument2.

        Reviewer notes.

        :param notes: The notes of this KycDocument2.
        :type notes: str
        """

        self._notes = notes

    @property
    def reason(self):
        """Gets the reason of this KycDocument2.

        Reason for uploading.

        :return: The reason of this KycDocument2.
        :rtype: str
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """Sets the reason of this KycDocument2.

        Reason for uploading.

        :param reason: The reason of this KycDocument2.
        :type reason: str
        """

        self._reason = reason

    @property
    def review_time(self):
        """Gets the review_time of this KycDocument2.

        Date and time of manual review.

        :return: The review_time of this KycDocument2.
        :rtype: datetime
        """
        return self._review_time

    @review_time.setter
    def review_time(self, review_time):
        """Sets the review_time of this KycDocument2.

        Date and time of manual review.

        :param review_time: The review_time of this KycDocument2.
        :type review_time: datetime
        """

        self._review_time = review_time

    @property
    def reviewer_id(self):
        """Gets the reviewer_id of this KycDocument2.

        Reviewer's user ID.

        :return: The reviewer_id of this KycDocument2.
        :rtype: str
        """
        return self._reviewer_id

    @reviewer_id.setter
    def reviewer_id(self, reviewer_id):
        """Sets the reviewer_id of this KycDocument2.

        Reviewer's user ID.

        :param reviewer_id: The reviewer_id of this KycDocument2.
        :type reviewer_id: str
        """
        if reviewer_id is not None and len(reviewer_id) > 50:
            raise ValueError("Invalid value for `reviewer_id`, length must be less than or equal to `50`")

        self._reviewer_id = reviewer_id

    @property
    def reviewer_name(self):
        """Gets the reviewer_name of this KycDocument2.

        Reviewer's first and last name.

        :return: The reviewer_name of this KycDocument2.
        :rtype: str
        """
        return self._reviewer_name

    @reviewer_name.setter
    def reviewer_name(self, reviewer_name):
        """Sets the reviewer_name of this KycDocument2.

        Reviewer's first and last name.

        :param reviewer_name: The reviewer_name of this KycDocument2.
        :type reviewer_name: str
        """

        self._reviewer_name = reviewer_name

    @property
    def document_matches(self):
        """Gets the document_matches of this KycDocument2.


        :return: The document_matches of this KycDocument2.
        :rtype: ProofOfAddressAllOfDocumentMatches
        """
        return self._document_matches

    @document_matches.setter
    def document_matches(self, document_matches):
        """Sets the document_matches of this KycDocument2.


        :param document_matches: The document_matches of this KycDocument2.
        :type document_matches: ProofOfAddressAllOfDocumentMatches
        """

        self._document_matches = document_matches

    @property
    def parsed_data(self):
        """Gets the parsed_data of this KycDocument2.


        :return: The parsed_data of this KycDocument2.
        :rtype: ProofOfAddressAllOfDocumentMatches
        """
        return self._parsed_data

    @parsed_data.setter
    def parsed_data(self, parsed_data):
        """Sets the parsed_data of this KycDocument2.


        :param parsed_data: The parsed_data of this KycDocument2.
        :type parsed_data: ProofOfAddressAllOfDocumentMatches
        """

        self._parsed_data = parsed_data
