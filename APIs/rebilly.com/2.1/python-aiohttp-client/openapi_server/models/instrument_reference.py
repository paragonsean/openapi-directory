# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.payment_method import PaymentMethod
from openapi_server import util


class InstrumentReference(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, method: PaymentMethod=None, payment_instrument_id: str=None):
        """InstrumentReference - a model defined in OpenAPI

        :param method: The method of this InstrumentReference.
        :param payment_instrument_id: The payment_instrument_id of this InstrumentReference.
        """
        self.openapi_types = {
            'method': PaymentMethod,
            'payment_instrument_id': str
        }

        self.attribute_map = {
            'method': 'method',
            'payment_instrument_id': 'paymentInstrumentId'
        }

        self._method = method
        self._payment_instrument_id = payment_instrument_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'InstrumentReference':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The InstrumentReference of this InstrumentReference.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def method(self):
        """Gets the method of this InstrumentReference.


        :return: The method of this InstrumentReference.
        :rtype: PaymentMethod
        """
        return self._method

    @method.setter
    def method(self, method):
        """Sets the method of this InstrumentReference.


        :param method: The method of this InstrumentReference.
        :type method: PaymentMethod
        """
        if method is None:
            raise ValueError("Invalid value for `method`, must not be `None`")

        self._method = method

    @property
    def payment_instrument_id(self):
        """Gets the payment_instrument_id of this InstrumentReference.

        The payment instrument ID.

        :return: The payment_instrument_id of this InstrumentReference.
        :rtype: str
        """
        return self._payment_instrument_id

    @payment_instrument_id.setter
    def payment_instrument_id(self, payment_instrument_id):
        """Sets the payment_instrument_id of this InstrumentReference.

        The payment instrument ID.

        :param payment_instrument_id: The payment_instrument_id of this InstrumentReference.
        :type payment_instrument_id: str
        """
        if payment_instrument_id is not None and len(payment_instrument_id) > 50:
            raise ValueError("Invalid value for `payment_instrument_id`, length must be less than or equal to `50`")

        self._payment_instrument_id = payment_instrument_id
