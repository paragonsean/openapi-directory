# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PlanPriceFormula(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, formula: str=None):
        """PlanPriceFormula - a model defined in OpenAPI

        :param formula: The formula of this PlanPriceFormula.
        """
        self.openapi_types = {
            'formula': str
        }

        self.attribute_map = {
            'formula': 'formula'
        }

        self._formula = formula

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PlanPriceFormula':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PlanPriceFormula of this PlanPriceFormula.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def formula(self):
        """Gets the formula of this PlanPriceFormula.

        The price formula determines what algorithm is used to calculate the invoice price based on a few factors, - the quantity in the order (which may be variable if usage pricing, otherwise determined when creating the order) - the price brackets data  To determine which formula is correct, please see the price formula documentation. 

        :return: The formula of this PlanPriceFormula.
        :rtype: str
        """
        return self._formula

    @formula.setter
    def formula(self, formula):
        """Sets the formula of this PlanPriceFormula.

        The price formula determines what algorithm is used to calculate the invoice price based on a few factors, - the quantity in the order (which may be variable if usage pricing, otherwise determined when creating the order) - the price brackets data  To determine which formula is correct, please see the price formula documentation. 

        :param formula: The formula of this PlanPriceFormula.
        :type formula: str
        """
        allowed_values = ["fixed-fee", "flat-rate", "stairstep", "tiered", "volume"]  # noqa: E501
        if formula not in allowed_values:
            raise ValueError(
                "Invalid value for `formula` ({0}), must be one of {1}"
                .format(formula, allowed_values)
            )

        self._formula = formula
