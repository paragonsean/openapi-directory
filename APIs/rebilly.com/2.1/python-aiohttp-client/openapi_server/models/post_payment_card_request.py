# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.contact_object import ContactObject
from openapi_server.models.payment_card_create_plain import PaymentCardCreatePlain
from openapi_server.models.payment_card_create_token import PaymentCardCreateToken
from openapi_server.models.risk_metadata import RiskMetadata
from openapi_server import util


class PostPaymentCardRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, custom_fields: object=None, customer_id: str=None, token: str=None, billing_address: ContactObject=None, cvv: str=None, exp_month: int=None, exp_year: int=None, method: str=None, pan: str=None, risk_metadata: RiskMetadata=None):
        """PostPaymentCardRequest - a model defined in OpenAPI

        :param custom_fields: The custom_fields of this PostPaymentCardRequest.
        :param customer_id: The customer_id of this PostPaymentCardRequest.
        :param token: The token of this PostPaymentCardRequest.
        :param billing_address: The billing_address of this PostPaymentCardRequest.
        :param cvv: The cvv of this PostPaymentCardRequest.
        :param exp_month: The exp_month of this PostPaymentCardRequest.
        :param exp_year: The exp_year of this PostPaymentCardRequest.
        :param method: The method of this PostPaymentCardRequest.
        :param pan: The pan of this PostPaymentCardRequest.
        :param risk_metadata: The risk_metadata of this PostPaymentCardRequest.
        """
        self.openapi_types = {
            'custom_fields': object,
            'customer_id': str,
            'token': str,
            'billing_address': ContactObject,
            'cvv': str,
            'exp_month': int,
            'exp_year': int,
            'method': str,
            'pan': str,
            'risk_metadata': RiskMetadata
        }

        self.attribute_map = {
            'custom_fields': 'customFields',
            'customer_id': 'customerId',
            'token': 'token',
            'billing_address': 'billingAddress',
            'cvv': 'cvv',
            'exp_month': 'expMonth',
            'exp_year': 'expYear',
            'method': 'method',
            'pan': 'pan',
            'risk_metadata': 'riskMetadata'
        }

        self._custom_fields = custom_fields
        self._customer_id = customer_id
        self._token = token
        self._billing_address = billing_address
        self._cvv = cvv
        self._exp_month = exp_month
        self._exp_year = exp_year
        self._method = method
        self._pan = pan
        self._risk_metadata = risk_metadata

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PostPaymentCardRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PostPaymentCard_request of this PostPaymentCardRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def custom_fields(self):
        """Gets the custom_fields of this PostPaymentCardRequest.

        Custom Fields list as a map `{\"custom field name\": \"custom field value\", ...}`. The format must follow the saved format (see Custom Fields section for the formats). 

        :return: The custom_fields of this PostPaymentCardRequest.
        :rtype: object
        """
        return self._custom_fields

    @custom_fields.setter
    def custom_fields(self, custom_fields):
        """Sets the custom_fields of this PostPaymentCardRequest.

        Custom Fields list as a map `{\"custom field name\": \"custom field value\", ...}`. The format must follow the saved format (see Custom Fields section for the formats). 

        :param custom_fields: The custom_fields of this PostPaymentCardRequest.
        :type custom_fields: object
        """

        self._custom_fields = custom_fields

    @property
    def customer_id(self):
        """Gets the customer_id of this PostPaymentCardRequest.

        The Customer's ID.

        :return: The customer_id of this PostPaymentCardRequest.
        :rtype: str
        """
        return self._customer_id

    @customer_id.setter
    def customer_id(self, customer_id):
        """Sets the customer_id of this PostPaymentCardRequest.

        The Customer's ID.

        :param customer_id: The customer_id of this PostPaymentCardRequest.
        :type customer_id: str
        """
        if customer_id is None:
            raise ValueError("Invalid value for `customer_id`, must not be `None`")
        if customer_id is not None and len(customer_id) > 50:
            raise ValueError("Invalid value for `customer_id`, length must be less than or equal to `50`")

        self._customer_id = customer_id

    @property
    def token(self):
        """Gets the token of this PostPaymentCardRequest.

        PaymentCardToken ID.

        :return: The token of this PostPaymentCardRequest.
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token):
        """Sets the token of this PostPaymentCardRequest.

        PaymentCardToken ID.

        :param token: The token of this PostPaymentCardRequest.
        :type token: str
        """
        if token is None:
            raise ValueError("Invalid value for `token`, must not be `None`")

        self._token = token

    @property
    def billing_address(self):
        """Gets the billing_address of this PostPaymentCardRequest.

        The billing address.

        :return: The billing_address of this PostPaymentCardRequest.
        :rtype: ContactObject
        """
        return self._billing_address

    @billing_address.setter
    def billing_address(self, billing_address):
        """Sets the billing_address of this PostPaymentCardRequest.

        The billing address.

        :param billing_address: The billing_address of this PostPaymentCardRequest.
        :type billing_address: ContactObject
        """
        if billing_address is None:
            raise ValueError("Invalid value for `billing_address`, must not be `None`")

        self._billing_address = billing_address

    @property
    def cvv(self):
        """Gets the cvv of this PostPaymentCardRequest.

        Card's cvv (card verification value).

        :return: The cvv of this PostPaymentCardRequest.
        :rtype: str
        """
        return self._cvv

    @cvv.setter
    def cvv(self, cvv):
        """Sets the cvv of this PostPaymentCardRequest.

        Card's cvv (card verification value).

        :param cvv: The cvv of this PostPaymentCardRequest.
        :type cvv: str
        """

        self._cvv = cvv

    @property
    def exp_month(self):
        """Gets the exp_month of this PostPaymentCardRequest.

        Card's expiration month.

        :return: The exp_month of this PostPaymentCardRequest.
        :rtype: int
        """
        return self._exp_month

    @exp_month.setter
    def exp_month(self, exp_month):
        """Sets the exp_month of this PostPaymentCardRequest.

        Card's expiration month.

        :param exp_month: The exp_month of this PostPaymentCardRequest.
        :type exp_month: int
        """
        if exp_month is None:
            raise ValueError("Invalid value for `exp_month`, must not be `None`")

        self._exp_month = exp_month

    @property
    def exp_year(self):
        """Gets the exp_year of this PostPaymentCardRequest.

        Card's expiration year.

        :return: The exp_year of this PostPaymentCardRequest.
        :rtype: int
        """
        return self._exp_year

    @exp_year.setter
    def exp_year(self, exp_year):
        """Sets the exp_year of this PostPaymentCardRequest.

        Card's expiration year.

        :param exp_year: The exp_year of this PostPaymentCardRequest.
        :type exp_year: int
        """
        if exp_year is None:
            raise ValueError("Invalid value for `exp_year`, must not be `None`")

        self._exp_year = exp_year

    @property
    def method(self):
        """Gets the method of this PostPaymentCardRequest.

        The method of payment instrument.

        :return: The method of this PostPaymentCardRequest.
        :rtype: str
        """
        return self._method

    @method.setter
    def method(self, method):
        """Sets the method of this PostPaymentCardRequest.

        The method of payment instrument.

        :param method: The method of this PostPaymentCardRequest.
        :type method: str
        """
        allowed_values = ["payment-card"]  # noqa: E501
        if method not in allowed_values:
            raise ValueError(
                "Invalid value for `method` ({0}), must be one of {1}"
                .format(method, allowed_values)
            )

        self._method = method

    @property
    def pan(self):
        """Gets the pan of this PostPaymentCardRequest.

        The card PAN (Primary Account Number).

        :return: The pan of this PostPaymentCardRequest.
        :rtype: str
        """
        return self._pan

    @pan.setter
    def pan(self, pan):
        """Sets the pan of this PostPaymentCardRequest.

        The card PAN (Primary Account Number).

        :param pan: The pan of this PostPaymentCardRequest.
        :type pan: str
        """
        if pan is None:
            raise ValueError("Invalid value for `pan`, must not be `None`")

        self._pan = pan

    @property
    def risk_metadata(self):
        """Gets the risk_metadata of this PostPaymentCardRequest.


        :return: The risk_metadata of this PostPaymentCardRequest.
        :rtype: RiskMetadata
        """
        return self._risk_metadata

    @risk_metadata.setter
    def risk_metadata(self, risk_metadata):
        """Sets the risk_metadata of this PostPaymentCardRequest.


        :param risk_metadata: The risk_metadata of this PostPaymentCardRequest.
        :type risk_metadata: RiskMetadata
        """

        self._risk_metadata = risk_metadata
