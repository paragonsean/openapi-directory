# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.self_link import SelfLink
from openapi_server.models.timeline_extra_data import TimelineExtraData
from openapi_server import util


class TransactionTimeline(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, links: List[SelfLink]=None, extra_data: TimelineExtraData=None, id: str=None, message: str=None, occurred_time: datetime=None, triggered_by: str=None, type: str=None):
        """TransactionTimeline - a model defined in OpenAPI

        :param links: The links of this TransactionTimeline.
        :param extra_data: The extra_data of this TransactionTimeline.
        :param id: The id of this TransactionTimeline.
        :param message: The message of this TransactionTimeline.
        :param occurred_time: The occurred_time of this TransactionTimeline.
        :param triggered_by: The triggered_by of this TransactionTimeline.
        :param type: The type of this TransactionTimeline.
        """
        self.openapi_types = {
            'links': List[SelfLink],
            'extra_data': TimelineExtraData,
            'id': str,
            'message': str,
            'occurred_time': datetime,
            'triggered_by': str,
            'type': str
        }

        self.attribute_map = {
            'links': '_links',
            'extra_data': 'extraData',
            'id': 'id',
            'message': 'message',
            'occurred_time': 'occurredTime',
            'triggered_by': 'triggeredBy',
            'type': 'type'
        }

        self._links = links
        self._extra_data = extra_data
        self._id = id
        self._message = message
        self._occurred_time = occurred_time
        self._triggered_by = triggered_by
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TransactionTimeline':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TransactionTimeline of this TransactionTimeline.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def links(self):
        """Gets the links of this TransactionTimeline.

        The links related to resource.

        :return: The links of this TransactionTimeline.
        :rtype: List[SelfLink]
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this TransactionTimeline.

        The links related to resource.

        :param links: The links of this TransactionTimeline.
        :type links: List[SelfLink]
        """
        if links is not None and len(links) < 1:
            raise ValueError("Invalid value for `links`, number of items must be greater than or equal to `1`")

        self._links = links

    @property
    def extra_data(self):
        """Gets the extra_data of this TransactionTimeline.


        :return: The extra_data of this TransactionTimeline.
        :rtype: TimelineExtraData
        """
        return self._extra_data

    @extra_data.setter
    def extra_data(self, extra_data):
        """Sets the extra_data of this TransactionTimeline.


        :param extra_data: The extra_data of this TransactionTimeline.
        :type extra_data: TimelineExtraData
        """

        self._extra_data = extra_data

    @property
    def id(self):
        """Gets the id of this TransactionTimeline.

        The Timeline message identifier string.

        :return: The id of this TransactionTimeline.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TransactionTimeline.

        The Timeline message identifier string.

        :param id: The id of this TransactionTimeline.
        :type id: str
        """
        if id is not None and len(id) > 50:
            raise ValueError("Invalid value for `id`, length must be less than or equal to `50`")

        self._id = id

    @property
    def message(self):
        """Gets the message of this TransactionTimeline.

        The message that describes the message details.

        :return: The message of this TransactionTimeline.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this TransactionTimeline.

        The message that describes the message details.

        :param message: The message of this TransactionTimeline.
        :type message: str
        """

        self._message = message

    @property
    def occurred_time(self):
        """Gets the occurred_time of this TransactionTimeline.

        Timeline message time.

        :return: The occurred_time of this TransactionTimeline.
        :rtype: datetime
        """
        return self._occurred_time

    @occurred_time.setter
    def occurred_time(self, occurred_time):
        """Sets the occurred_time of this TransactionTimeline.

        Timeline message time.

        :param occurred_time: The occurred_time of this TransactionTimeline.
        :type occurred_time: datetime
        """

        self._occurred_time = occurred_time

    @property
    def triggered_by(self):
        """Gets the triggered_by of this TransactionTimeline.

        Shows who or what triggered the Timeline message.

        :return: The triggered_by of this TransactionTimeline.
        :rtype: str
        """
        return self._triggered_by

    @triggered_by.setter
    def triggered_by(self, triggered_by):
        """Sets the triggered_by of this TransactionTimeline.

        Shows who or what triggered the Timeline message.

        :param triggered_by: The triggered_by of this TransactionTimeline.
        :type triggered_by: str
        """
        allowed_values = ["rebilly", "app", "direct-api"]  # noqa: E501
        if triggered_by not in allowed_values:
            raise ValueError(
                "Invalid value for `triggered_by` ({0}), must be one of {1}"
                .format(triggered_by, allowed_values)
            )

        self._triggered_by = triggered_by

    @property
    def type(self):
        """Gets the type of this TransactionTimeline.

        Timeline message type.

        :return: The type of this TransactionTimeline.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this TransactionTimeline.

        Timeline message type.

        :param type: The type of this TransactionTimeline.
        :type type: str
        """
        allowed_values = ["amount-adjusted", "blocklist-matched", "bump-offer-accepted", "bump-offer-presented", "bump-offer-rejected", "customer-redirected-offsite", "customer-returned", "dcc-offer-accepted", "dcc-offer-forced", "dcc-offer-presented", "dcc-offer-rejected", "dispute-changed", "dispute-created", "dispute-forfeited", "dispute-lost", "dispute-responded", "dispute-won", "gateway-connection-failed", "gateway-connection-timed-out", "gateway-response-received", "risk-score-changed", "timeline-comment-created", "transaction-abandoned", "transaction-amount-discrepancy-found", "transaction-approved", "transaction-canceled", "transaction-capture-delayed", "transaction-captured", "transaction-declined", "transaction-discrepancy-found", "transaction-initiated", "transaction-reconciled", "transaction-refunded", "transaction-retried", "transaction-rules-processed", "transaction-scheduled-time-changed", "transaction-timeout-resolved", "transaction-voided", "transaction-waiting-gateway", "transaction-queried", "transaction-updated"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
