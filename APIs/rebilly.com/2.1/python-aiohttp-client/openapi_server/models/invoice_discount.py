# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class InvoiceDiscount(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, amount: float=None, coupon_id: str=None, description: str=None, redemption_id: str=None):
        """InvoiceDiscount - a model defined in OpenAPI

        :param amount: The amount of this InvoiceDiscount.
        :param coupon_id: The coupon_id of this InvoiceDiscount.
        :param description: The description of this InvoiceDiscount.
        :param redemption_id: The redemption_id of this InvoiceDiscount.
        """
        self.openapi_types = {
            'amount': float,
            'coupon_id': str,
            'description': str,
            'redemption_id': str
        }

        self.attribute_map = {
            'amount': 'amount',
            'coupon_id': 'couponId',
            'description': 'description',
            'redemption_id': 'redemptionId'
        }

        self._amount = amount
        self._coupon_id = coupon_id
        self._description = description
        self._redemption_id = redemption_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'InvoiceDiscount':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The InvoiceDiscount of this InvoiceDiscount.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def amount(self):
        """Gets the amount of this InvoiceDiscount.

        Total amount that was discounted by this Coupon.

        :return: The amount of this InvoiceDiscount.
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this InvoiceDiscount.

        Total amount that was discounted by this Coupon.

        :param amount: The amount of this InvoiceDiscount.
        :type amount: float
        """

        self._amount = amount

    @property
    def coupon_id(self):
        """Gets the coupon_id of this InvoiceDiscount.

        Coupon's ID.

        :return: The coupon_id of this InvoiceDiscount.
        :rtype: str
        """
        return self._coupon_id

    @coupon_id.setter
    def coupon_id(self, coupon_id):
        """Sets the coupon_id of this InvoiceDiscount.

        Coupon's ID.

        :param coupon_id: The coupon_id of this InvoiceDiscount.
        :type coupon_id: str
        """
        if coupon_id is not None and len(coupon_id) > 50:
            raise ValueError("Invalid value for `coupon_id`, length must be less than or equal to `50`")

        self._coupon_id = coupon_id

    @property
    def description(self):
        """Gets the description of this InvoiceDiscount.

        Discount description.

        :return: The description of this InvoiceDiscount.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this InvoiceDiscount.

        Discount description.

        :param description: The description of this InvoiceDiscount.
        :type description: str
        """

        self._description = description

    @property
    def redemption_id(self):
        """Gets the redemption_id of this InvoiceDiscount.

        Redemption ID.

        :return: The redemption_id of this InvoiceDiscount.
        :rtype: str
        """
        return self._redemption_id

    @redemption_id.setter
    def redemption_id(self, redemption_id):
        """Sets the redemption_id of this InvoiceDiscount.

        Redemption ID.

        :param redemption_id: The redemption_id of this InvoiceDiscount.
        :type redemption_id: str
        """
        if redemption_id is not None and len(redemption_id) > 50:
            raise ValueError("Invalid value for `redemption_id`, length must be less than or equal to `50`")

        self._redemption_id = redemption_id
