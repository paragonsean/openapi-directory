# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.invoice_item_embedded_inner import InvoiceItemEmbeddedInner
from openapi_server.models.invoice_item_links_inner import InvoiceItemLinksInner
from openapi_server import util


class InvoiceItem(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, embedded: List[InvoiceItemEmbeddedInner]=None, links: List[InvoiceItemLinksInner]=None, created_time: datetime=None, description: str=None, discount_amount: float=None, id: str=None, period_end_time: datetime=None, period_number: int=None, period_start_time: datetime=None, price: float=None, product_id: str=None, quantity: int=None, type: str=None, unit_price: float=None, updated_time: datetime=None):
        """InvoiceItem - a model defined in OpenAPI

        :param embedded: The embedded of this InvoiceItem.
        :param links: The links of this InvoiceItem.
        :param created_time: The created_time of this InvoiceItem.
        :param description: The description of this InvoiceItem.
        :param discount_amount: The discount_amount of this InvoiceItem.
        :param id: The id of this InvoiceItem.
        :param period_end_time: The period_end_time of this InvoiceItem.
        :param period_number: The period_number of this InvoiceItem.
        :param period_start_time: The period_start_time of this InvoiceItem.
        :param price: The price of this InvoiceItem.
        :param product_id: The product_id of this InvoiceItem.
        :param quantity: The quantity of this InvoiceItem.
        :param type: The type of this InvoiceItem.
        :param unit_price: The unit_price of this InvoiceItem.
        :param updated_time: The updated_time of this InvoiceItem.
        """
        self.openapi_types = {
            'embedded': List[InvoiceItemEmbeddedInner],
            'links': List[InvoiceItemLinksInner],
            'created_time': datetime,
            'description': str,
            'discount_amount': float,
            'id': str,
            'period_end_time': datetime,
            'period_number': int,
            'period_start_time': datetime,
            'price': float,
            'product_id': str,
            'quantity': int,
            'type': str,
            'unit_price': float,
            'updated_time': datetime
        }

        self.attribute_map = {
            'embedded': '_embedded',
            'links': '_links',
            'created_time': 'createdTime',
            'description': 'description',
            'discount_amount': 'discountAmount',
            'id': 'id',
            'period_end_time': 'periodEndTime',
            'period_number': 'periodNumber',
            'period_start_time': 'periodStartTime',
            'price': 'price',
            'product_id': 'productId',
            'quantity': 'quantity',
            'type': 'type',
            'unit_price': 'unitPrice',
            'updated_time': 'updatedTime'
        }

        self._embedded = embedded
        self._links = links
        self._created_time = created_time
        self._description = description
        self._discount_amount = discount_amount
        self._id = id
        self._period_end_time = period_end_time
        self._period_number = period_number
        self._period_start_time = period_start_time
        self._price = price
        self._product_id = product_id
        self._quantity = quantity
        self._type = type
        self._unit_price = unit_price
        self._updated_time = updated_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'InvoiceItem':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The InvoiceItem of this InvoiceItem.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def embedded(self):
        """Gets the embedded of this InvoiceItem.

        Any embedded objects available that are requested by the `expand` querystring parameter.

        :return: The embedded of this InvoiceItem.
        :rtype: List[InvoiceItemEmbeddedInner]
        """
        return self._embedded

    @embedded.setter
    def embedded(self, embedded):
        """Sets the embedded of this InvoiceItem.

        Any embedded objects available that are requested by the `expand` querystring parameter.

        :param embedded: The embedded of this InvoiceItem.
        :type embedded: List[InvoiceItemEmbeddedInner]
        """
        if embedded is not None and len(embedded) < 1:
            raise ValueError("Invalid value for `embedded`, number of items must be greater than or equal to `1`")

        self._embedded = embedded

    @property
    def links(self):
        """Gets the links of this InvoiceItem.

        The links related to resource.

        :return: The links of this InvoiceItem.
        :rtype: List[InvoiceItemLinksInner]
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this InvoiceItem.

        The links related to resource.

        :param links: The links of this InvoiceItem.
        :type links: List[InvoiceItemLinksInner]
        """
        if links is not None and len(links) < 1:
            raise ValueError("Invalid value for `links`, number of items must be greater than or equal to `1`")

        self._links = links

    @property
    def created_time(self):
        """Gets the created_time of this InvoiceItem.

        Invoice item created time.

        :return: The created_time of this InvoiceItem.
        :rtype: datetime
        """
        return self._created_time

    @created_time.setter
    def created_time(self, created_time):
        """Sets the created_time of this InvoiceItem.

        Invoice item created time.

        :param created_time: The created_time of this InvoiceItem.
        :type created_time: datetime
        """

        self._created_time = created_time

    @property
    def description(self):
        """Gets the description of this InvoiceItem.

        Invoice item's description.

        :return: The description of this InvoiceItem.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this InvoiceItem.

        Invoice item's description.

        :param description: The description of this InvoiceItem.
        :type description: str
        """

        self._description = description

    @property
    def discount_amount(self):
        """Gets the discount_amount of this InvoiceItem.

        Invoice item discount amount.

        :return: The discount_amount of this InvoiceItem.
        :rtype: float
        """
        return self._discount_amount

    @discount_amount.setter
    def discount_amount(self, discount_amount):
        """Sets the discount_amount of this InvoiceItem.

        Invoice item discount amount.

        :param discount_amount: The discount_amount of this InvoiceItem.
        :type discount_amount: float
        """

        self._discount_amount = discount_amount

    @property
    def id(self):
        """Gets the id of this InvoiceItem.

        The website identifier string.

        :return: The id of this InvoiceItem.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this InvoiceItem.

        The website identifier string.

        :param id: The id of this InvoiceItem.
        :type id: str
        """
        if id is not None and len(id) > 50:
            raise ValueError("Invalid value for `id`, length must be less than or equal to `50`")

        self._id = id

    @property
    def period_end_time(self):
        """Gets the period_end_time of this InvoiceItem.

        End time.

        :return: The period_end_time of this InvoiceItem.
        :rtype: datetime
        """
        return self._period_end_time

    @period_end_time.setter
    def period_end_time(self, period_end_time):
        """Sets the period_end_time of this InvoiceItem.

        End time.

        :param period_end_time: The period_end_time of this InvoiceItem.
        :type period_end_time: datetime
        """

        self._period_end_time = period_end_time

    @property
    def period_number(self):
        """Gets the period_number of this InvoiceItem.

        Invoice item subscription order period number.

        :return: The period_number of this InvoiceItem.
        :rtype: int
        """
        return self._period_number

    @period_number.setter
    def period_number(self, period_number):
        """Sets the period_number of this InvoiceItem.

        Invoice item subscription order period number.

        :param period_number: The period_number of this InvoiceItem.
        :type period_number: int
        """

        self._period_number = period_number

    @property
    def period_start_time(self):
        """Gets the period_start_time of this InvoiceItem.

        Start time.

        :return: The period_start_time of this InvoiceItem.
        :rtype: datetime
        """
        return self._period_start_time

    @period_start_time.setter
    def period_start_time(self, period_start_time):
        """Sets the period_start_time of this InvoiceItem.

        Start time.

        :param period_start_time: The period_start_time of this InvoiceItem.
        :type period_start_time: datetime
        """

        self._period_start_time = period_start_time

    @property
    def price(self):
        """Gets the price of this InvoiceItem.

        Invoice item's total price.

        :return: The price of this InvoiceItem.
        :rtype: float
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this InvoiceItem.

        Invoice item's total price.

        :param price: The price of this InvoiceItem.
        :type price: float
        """

        self._price = price

    @property
    def product_id(self):
        """Gets the product_id of this InvoiceItem.

        The product's ID.

        :return: The product_id of this InvoiceItem.
        :rtype: str
        """
        return self._product_id

    @product_id.setter
    def product_id(self, product_id):
        """Sets the product_id of this InvoiceItem.

        The product's ID.

        :param product_id: The product_id of this InvoiceItem.
        :type product_id: str
        """
        if product_id is not None and len(product_id) > 50:
            raise ValueError("Invalid value for `product_id`, length must be less than or equal to `50`")

        self._product_id = product_id

    @property
    def quantity(self):
        """Gets the quantity of this InvoiceItem.

        Invoice item's quantity.

        :return: The quantity of this InvoiceItem.
        :rtype: int
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this InvoiceItem.

        Invoice item's quantity.

        :param quantity: The quantity of this InvoiceItem.
        :type quantity: int
        """

        self._quantity = quantity

    @property
    def type(self):
        """Gets the type of this InvoiceItem.

        Invoice item's type.

        :return: The type of this InvoiceItem.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this InvoiceItem.

        Invoice item's type.

        :param type: The type of this InvoiceItem.
        :type type: str
        """
        allowed_values = ["debit", "credit"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def unit_price(self):
        """Gets the unit_price of this InvoiceItem.

        Invoice item's price.

        :return: The unit_price of this InvoiceItem.
        :rtype: float
        """
        return self._unit_price

    @unit_price.setter
    def unit_price(self, unit_price):
        """Sets the unit_price of this InvoiceItem.

        Invoice item's price.

        :param unit_price: The unit_price of this InvoiceItem.
        :type unit_price: float
        """
        if unit_price is None:
            raise ValueError("Invalid value for `unit_price`, must not be `None`")

        self._unit_price = unit_price

    @property
    def updated_time(self):
        """Gets the updated_time of this InvoiceItem.

        Invoice item updated time.

        :return: The updated_time of this InvoiceItem.
        :rtype: datetime
        """
        return self._updated_time

    @updated_time.setter
    def updated_time(self, updated_time):
        """Sets the updated_time of this InvoiceItem.

        Invoice item updated time.

        :param updated_time: The updated_time of this InvoiceItem.
        :type updated_time: datetime
        """

        self._updated_time = updated_time
