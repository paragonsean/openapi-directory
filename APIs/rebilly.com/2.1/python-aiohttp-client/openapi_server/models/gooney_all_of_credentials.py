# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GooneyAllOfCredentials(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, api_key: str=None, api_password: str=None, api_secret: str=None, api_user: str=None):
        """GooneyAllOfCredentials - a model defined in OpenAPI

        :param api_key: The api_key of this GooneyAllOfCredentials.
        :param api_password: The api_password of this GooneyAllOfCredentials.
        :param api_secret: The api_secret of this GooneyAllOfCredentials.
        :param api_user: The api_user of this GooneyAllOfCredentials.
        """
        self.openapi_types = {
            'api_key': str,
            'api_password': str,
            'api_secret': str,
            'api_user': str
        }

        self.attribute_map = {
            'api_key': 'apiKey',
            'api_password': 'apiPassword',
            'api_secret': 'apiSecret',
            'api_user': 'apiUser'
        }

        self._api_key = api_key
        self._api_password = api_password
        self._api_secret = api_secret
        self._api_user = api_user

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GooneyAllOfCredentials':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Gooney_allOf_credentials of this GooneyAllOfCredentials.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def api_key(self):
        """Gets the api_key of this GooneyAllOfCredentials.

        Gooney API key.

        :return: The api_key of this GooneyAllOfCredentials.
        :rtype: str
        """
        return self._api_key

    @api_key.setter
    def api_key(self, api_key):
        """Sets the api_key of this GooneyAllOfCredentials.

        Gooney API key.

        :param api_key: The api_key of this GooneyAllOfCredentials.
        :type api_key: str
        """
        if api_key is None:
            raise ValueError("Invalid value for `api_key`, must not be `None`")

        self._api_key = api_key

    @property
    def api_password(self):
        """Gets the api_password of this GooneyAllOfCredentials.

        Gooney API password.

        :return: The api_password of this GooneyAllOfCredentials.
        :rtype: str
        """
        return self._api_password

    @api_password.setter
    def api_password(self, api_password):
        """Sets the api_password of this GooneyAllOfCredentials.

        Gooney API password.

        :param api_password: The api_password of this GooneyAllOfCredentials.
        :type api_password: str
        """

        self._api_password = api_password

    @property
    def api_secret(self):
        """Gets the api_secret of this GooneyAllOfCredentials.

        Gooney API secret.

        :return: The api_secret of this GooneyAllOfCredentials.
        :rtype: str
        """
        return self._api_secret

    @api_secret.setter
    def api_secret(self, api_secret):
        """Sets the api_secret of this GooneyAllOfCredentials.

        Gooney API secret.

        :param api_secret: The api_secret of this GooneyAllOfCredentials.
        :type api_secret: str
        """
        if api_secret is None:
            raise ValueError("Invalid value for `api_secret`, must not be `None`")

        self._api_secret = api_secret

    @property
    def api_user(self):
        """Gets the api_user of this GooneyAllOfCredentials.

        Gooney API user.

        :return: The api_user of this GooneyAllOfCredentials.
        :rtype: str
        """
        return self._api_user

    @api_user.setter
    def api_user(self, api_user):
        """Sets the api_user of this GooneyAllOfCredentials.

        Gooney API user.

        :param api_user: The api_user of this GooneyAllOfCredentials.
        :type api_user: str
        """

        self._api_user = api_user
