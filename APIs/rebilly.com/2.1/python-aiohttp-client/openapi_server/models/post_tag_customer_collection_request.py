# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PostTagCustomerCollectionRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, customer_ids: List[str]=None):
        """PostTagCustomerCollectionRequest - a model defined in OpenAPI

        :param customer_ids: The customer_ids of this PostTagCustomerCollectionRequest.
        """
        self.openapi_types = {
            'customer_ids': List[str]
        }

        self.attribute_map = {
            'customer_ids': 'customerIds'
        }

        self._customer_ids = customer_ids

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PostTagCustomerCollectionRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PostTagCustomerCollection_request of this PostTagCustomerCollectionRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def customer_ids(self):
        """Gets the customer_ids of this PostTagCustomerCollectionRequest.

        The list of customer IDs.

        :return: The customer_ids of this PostTagCustomerCollectionRequest.
        :rtype: List[str]
        """
        return self._customer_ids

    @customer_ids.setter
    def customer_ids(self, customer_ids):
        """Sets the customer_ids of this PostTagCustomerCollectionRequest.

        The list of customer IDs.

        :param customer_ids: The customer_ids of this PostTagCustomerCollectionRequest.
        :type customer_ids: List[str]
        """
        if customer_ids is None:
            raise ValueError("Invalid value for `customer_ids`, must not be `None`")
        if customer_ids is not None and len(customer_ids) > 1000:
            raise ValueError("Invalid value for `customer_ids`, number of items must be less than or equal to `1000`")
        if customer_ids is not None and len(customer_ids) < 1:
            raise ValueError("Invalid value for `customer_ids`, number of items must be greater than or equal to `1`")

        self._customer_ids = customer_ids
