# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PagsmileAllOfCredentials(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, app_id: str=None, merchant_id: str=None, secret_key: str=None):
        """PagsmileAllOfCredentials - a model defined in OpenAPI

        :param app_id: The app_id of this PagsmileAllOfCredentials.
        :param merchant_id: The merchant_id of this PagsmileAllOfCredentials.
        :param secret_key: The secret_key of this PagsmileAllOfCredentials.
        """
        self.openapi_types = {
            'app_id': str,
            'merchant_id': str,
            'secret_key': str
        }

        self.attribute_map = {
            'app_id': 'appId',
            'merchant_id': 'merchantId',
            'secret_key': 'secretKey'
        }

        self._app_id = app_id
        self._merchant_id = merchant_id
        self._secret_key = secret_key

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PagsmileAllOfCredentials':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Pagsmile_allOf_credentials of this PagsmileAllOfCredentials.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def app_id(self):
        """Gets the app_id of this PagsmileAllOfCredentials.

        Pagsmile app ID.

        :return: The app_id of this PagsmileAllOfCredentials.
        :rtype: str
        """
        return self._app_id

    @app_id.setter
    def app_id(self, app_id):
        """Sets the app_id of this PagsmileAllOfCredentials.

        Pagsmile app ID.

        :param app_id: The app_id of this PagsmileAllOfCredentials.
        :type app_id: str
        """
        if app_id is None:
            raise ValueError("Invalid value for `app_id`, must not be `None`")

        self._app_id = app_id

    @property
    def merchant_id(self):
        """Gets the merchant_id of this PagsmileAllOfCredentials.

        Pagsmile merchant ID.

        :return: The merchant_id of this PagsmileAllOfCredentials.
        :rtype: str
        """
        return self._merchant_id

    @merchant_id.setter
    def merchant_id(self, merchant_id):
        """Sets the merchant_id of this PagsmileAllOfCredentials.

        Pagsmile merchant ID.

        :param merchant_id: The merchant_id of this PagsmileAllOfCredentials.
        :type merchant_id: str
        """
        if merchant_id is None:
            raise ValueError("Invalid value for `merchant_id`, must not be `None`")

        self._merchant_id = merchant_id

    @property
    def secret_key(self):
        """Gets the secret_key of this PagsmileAllOfCredentials.

        Pagsmile secret key.

        :return: The secret_key of this PagsmileAllOfCredentials.
        :rtype: str
        """
        return self._secret_key

    @secret_key.setter
    def secret_key(self, secret_key):
        """Sets the secret_key of this PagsmileAllOfCredentials.

        Pagsmile secret key.

        :param secret_key: The secret_key of this PagsmileAllOfCredentials.
        :type secret_key: str
        """
        if secret_key is None:
            raise ValueError("Invalid value for `secret_key`, must not be `None`")

        self._secret_key = secret_key
