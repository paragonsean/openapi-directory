# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PaymentsOSAllOfCredentials(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, app_id: str=None, private_key: str=None):
        """PaymentsOSAllOfCredentials - a model defined in OpenAPI

        :param app_id: The app_id of this PaymentsOSAllOfCredentials.
        :param private_key: The private_key of this PaymentsOSAllOfCredentials.
        """
        self.openapi_types = {
            'app_id': str,
            'private_key': str
        }

        self.attribute_map = {
            'app_id': 'appId',
            'private_key': 'privateKey'
        }

        self._app_id = app_id
        self._private_key = private_key

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PaymentsOSAllOfCredentials':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PaymentsOS_allOf_credentials of this PaymentsOSAllOfCredentials.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def app_id(self):
        """Gets the app_id of this PaymentsOSAllOfCredentials.


        :return: The app_id of this PaymentsOSAllOfCredentials.
        :rtype: str
        """
        return self._app_id

    @app_id.setter
    def app_id(self, app_id):
        """Sets the app_id of this PaymentsOSAllOfCredentials.


        :param app_id: The app_id of this PaymentsOSAllOfCredentials.
        :type app_id: str
        """
        if app_id is None:
            raise ValueError("Invalid value for `app_id`, must not be `None`")

        self._app_id = app_id

    @property
    def private_key(self):
        """Gets the private_key of this PaymentsOSAllOfCredentials.


        :return: The private_key of this PaymentsOSAllOfCredentials.
        :rtype: str
        """
        return self._private_key

    @private_key.setter
    def private_key(self, private_key):
        """Sets the private_key of this PaymentsOSAllOfCredentials.


        :param private_key: The private_key of this PaymentsOSAllOfCredentials.
        :type private_key: str
        """
        if private_key is None:
            raise ValueError("Invalid value for `private_key`, must not be `None`")

        self._private_key = private_key
