# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class BrowserData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, color_depth: int=None, is_java_enabled: bool=None, language: str=None, screen_height: int=None, screen_width: int=None, time_zone_offset: int=None):
        """BrowserData - a model defined in OpenAPI

        :param color_depth: The color_depth of this BrowserData.
        :param is_java_enabled: The is_java_enabled of this BrowserData.
        :param language: The language of this BrowserData.
        :param screen_height: The screen_height of this BrowserData.
        :param screen_width: The screen_width of this BrowserData.
        :param time_zone_offset: The time_zone_offset of this BrowserData.
        """
        self.openapi_types = {
            'color_depth': int,
            'is_java_enabled': bool,
            'language': str,
            'screen_height': int,
            'screen_width': int,
            'time_zone_offset': int
        }

        self.attribute_map = {
            'color_depth': 'colorDepth',
            'is_java_enabled': 'isJavaEnabled',
            'language': 'language',
            'screen_height': 'screenHeight',
            'screen_width': 'screenWidth',
            'time_zone_offset': 'timeZoneOffset'
        }

        self._color_depth = color_depth
        self._is_java_enabled = is_java_enabled
        self._language = language
        self._screen_height = screen_height
        self._screen_width = screen_width
        self._time_zone_offset = time_zone_offset

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BrowserData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BrowserData of this BrowserData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def color_depth(self):
        """Gets the color_depth of this BrowserData.

        The browser's color depth in bits per pixel obtained using the `screen.colorDepth` property.

        :return: The color_depth of this BrowserData.
        :rtype: int
        """
        return self._color_depth

    @color_depth.setter
    def color_depth(self, color_depth):
        """Sets the color_depth of this BrowserData.

        The browser's color depth in bits per pixel obtained using the `screen.colorDepth` property.

        :param color_depth: The color_depth of this BrowserData.
        :type color_depth: int
        """
        if color_depth is None:
            raise ValueError("Invalid value for `color_depth`, must not be `None`")
        if color_depth is not None and color_depth > 48:
            raise ValueError("Invalid value for `color_depth`, must be a value less than or equal to `48`")
        if color_depth is not None and color_depth < 1:
            raise ValueError("Invalid value for `color_depth`, must be a value greater than or equal to `1`")

        self._color_depth = color_depth

    @property
    def is_java_enabled(self):
        """Gets the is_java_enabled of this BrowserData.

        Whether Java is enabled in a browser or not. Value is returned from the `navigator.javaEnabled` property.

        :return: The is_java_enabled of this BrowserData.
        :rtype: bool
        """
        return self._is_java_enabled

    @is_java_enabled.setter
    def is_java_enabled(self, is_java_enabled):
        """Sets the is_java_enabled of this BrowserData.

        Whether Java is enabled in a browser or not. Value is returned from the `navigator.javaEnabled` property.

        :param is_java_enabled: The is_java_enabled of this BrowserData.
        :type is_java_enabled: bool
        """
        if is_java_enabled is None:
            raise ValueError("Invalid value for `is_java_enabled`, must not be `None`")

        self._is_java_enabled = is_java_enabled

    @property
    def language(self):
        """Gets the language of this BrowserData.

        The browser's language settings returned from the `navigator.language` property.

        :return: The language of this BrowserData.
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this BrowserData.

        The browser's language settings returned from the `navigator.language` property.

        :param language: The language of this BrowserData.
        :type language: str
        """
        if language is None:
            raise ValueError("Invalid value for `language`, must not be `None`")
        if language is not None and len(language) > 8:
            raise ValueError("Invalid value for `language`, length must be less than or equal to `8`")

        self._language = language

    @property
    def screen_height(self):
        """Gets the screen_height of this BrowserData.

        The browser's screen height returned from the `screen.height` property.

        :return: The screen_height of this BrowserData.
        :rtype: int
        """
        return self._screen_height

    @screen_height.setter
    def screen_height(self, screen_height):
        """Sets the screen_height of this BrowserData.

        The browser's screen height returned from the `screen.height` property.

        :param screen_height: The screen_height of this BrowserData.
        :type screen_height: int
        """
        if screen_height is None:
            raise ValueError("Invalid value for `screen_height`, must not be `None`")
        if screen_height is not None and screen_height > 65535:
            raise ValueError("Invalid value for `screen_height`, must be a value less than or equal to `65535`")
        if screen_height is not None and screen_height < 0:
            raise ValueError("Invalid value for `screen_height`, must be a value greater than or equal to `0`")

        self._screen_height = screen_height

    @property
    def screen_width(self):
        """Gets the screen_width of this BrowserData.

        The browser's screen width returned from the `screen.width` property.

        :return: The screen_width of this BrowserData.
        :rtype: int
        """
        return self._screen_width

    @screen_width.setter
    def screen_width(self, screen_width):
        """Sets the screen_width of this BrowserData.

        The browser's screen width returned from the `screen.width` property.

        :param screen_width: The screen_width of this BrowserData.
        :type screen_width: int
        """
        if screen_width is None:
            raise ValueError("Invalid value for `screen_width`, must not be `None`")
        if screen_width is not None and screen_width > 65535:
            raise ValueError("Invalid value for `screen_width`, must be a value less than or equal to `65535`")
        if screen_width is not None and screen_width < 0:
            raise ValueError("Invalid value for `screen_width`, must be a value greater than or equal to `0`")

        self._screen_width = screen_width

    @property
    def time_zone_offset(self):
        """Gets the time_zone_offset of this BrowserData.

        The browser's time zone offset in minutes from UTC. A positive offset indicates the local time is behind UTC, and negative is ahead. Can find it with `(new Date()).getTimezoneOffset()` property. 

        :return: The time_zone_offset of this BrowserData.
        :rtype: int
        """
        return self._time_zone_offset

    @time_zone_offset.setter
    def time_zone_offset(self, time_zone_offset):
        """Sets the time_zone_offset of this BrowserData.

        The browser's time zone offset in minutes from UTC. A positive offset indicates the local time is behind UTC, and negative is ahead. Can find it with `(new Date()).getTimezoneOffset()` property. 

        :param time_zone_offset: The time_zone_offset of this BrowserData.
        :type time_zone_offset: int
        """
        if time_zone_offset is None:
            raise ValueError("Invalid value for `time_zone_offset`, must not be `None`")
        if time_zone_offset is not None and time_zone_offset > 1410:
            raise ValueError("Invalid value for `time_zone_offset`, must be a value less than or equal to `1410`")
        if time_zone_offset is not None and time_zone_offset < -1410:
            raise ValueError("Invalid value for `time_zone_offset`, must be a value greater than or equal to `-1410`")

        self._time_zone_offset = time_zone_offset
