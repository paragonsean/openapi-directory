# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class NetbankingAllOfCredentials(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, midcode: str=None, midsecret: str=None):
        """NetbankingAllOfCredentials - a model defined in OpenAPI

        :param midcode: The midcode of this NetbankingAllOfCredentials.
        :param midsecret: The midsecret of this NetbankingAllOfCredentials.
        """
        self.openapi_types = {
            'midcode': str,
            'midsecret': str
        }

        self.attribute_map = {
            'midcode': 'midcode',
            'midsecret': 'midsecret'
        }

        self._midcode = midcode
        self._midsecret = midsecret

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NetbankingAllOfCredentials':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Netbanking_allOf_credentials of this NetbankingAllOfCredentials.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def midcode(self):
        """Gets the midcode of this NetbankingAllOfCredentials.

        Netbanking MID code.

        :return: The midcode of this NetbankingAllOfCredentials.
        :rtype: str
        """
        return self._midcode

    @midcode.setter
    def midcode(self, midcode):
        """Sets the midcode of this NetbankingAllOfCredentials.

        Netbanking MID code.

        :param midcode: The midcode of this NetbankingAllOfCredentials.
        :type midcode: str
        """
        if midcode is None:
            raise ValueError("Invalid value for `midcode`, must not be `None`")

        self._midcode = midcode

    @property
    def midsecret(self):
        """Gets the midsecret of this NetbankingAllOfCredentials.

        Netbanking MID secret key.

        :return: The midsecret of this NetbankingAllOfCredentials.
        :rtype: str
        """
        return self._midsecret

    @midsecret.setter
    def midsecret(self, midsecret):
        """Sets the midsecret of this NetbankingAllOfCredentials.

        Netbanking MID secret key.

        :param midsecret: The midsecret of this NetbankingAllOfCredentials.
        :type midsecret: str
        """
        if midsecret is None:
            raise ValueError("Invalid value for `midsecret`, must not be `None`")

        self._midsecret = midsecret
