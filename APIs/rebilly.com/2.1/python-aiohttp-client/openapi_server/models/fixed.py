# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.discount import Discount
from openapi_server import util


class Fixed(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, type: str=None, amount: float=None, currency: str=None):
        """Fixed - a model defined in OpenAPI

        :param type: The type of this Fixed.
        :param amount: The amount of this Fixed.
        :param currency: The currency of this Fixed.
        """
        self.openapi_types = {
            'type': str,
            'amount': float,
            'currency': str
        }

        self.attribute_map = {
            'type': 'type',
            'amount': 'amount',
            'currency': 'currency'
        }

        self._type = type
        self._amount = amount
        self._currency = currency

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Fixed':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The fixed of this Fixed.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def type(self):
        """Gets the type of this Fixed.

        Discount type.

        :return: The type of this Fixed.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Fixed.

        Discount type.

        :param type: The type of this Fixed.
        :type type: str
        """
        allowed_values = ["fixed", "percent"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def amount(self):
        """Gets the amount of this Fixed.

        Discount amount.

        :return: The amount of this Fixed.
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this Fixed.

        Discount amount.

        :param amount: The amount of this Fixed.
        :type amount: float
        """
        if amount is None:
            raise ValueError("Invalid value for `amount`, must not be `None`")
        if amount is not None and amount <= 0:
            raise ValueError("Invalid value for `amount`, must be a value greater than `0`")

        self._amount = amount

    @property
    def currency(self):
        """Gets the currency of this Fixed.

        ISO 4217 alphabetic currency code.

        :return: The currency of this Fixed.
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this Fixed.

        ISO 4217 alphabetic currency code.

        :param currency: The currency of this Fixed.
        :type currency: str
        """
        if currency is None:
            raise ValueError("Invalid value for `currency`, must not be `None`")
        if currency is not None and len(currency) > 3:
            raise ValueError("Invalid value for `currency`, length must be less than or equal to `3`")
        if currency is not None and len(currency) < 3:
            raise ValueError("Invalid value for `currency`, length must be greater than or equal to `3`")

        self._currency = currency
