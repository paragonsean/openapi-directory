# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RedsysAllOfCredentials(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, merchant_code: str=None, secret_code: str=None):
        """RedsysAllOfCredentials - a model defined in OpenAPI

        :param merchant_code: The merchant_code of this RedsysAllOfCredentials.
        :param secret_code: The secret_code of this RedsysAllOfCredentials.
        """
        self.openapi_types = {
            'merchant_code': str,
            'secret_code': str
        }

        self.attribute_map = {
            'merchant_code': 'merchantCode',
            'secret_code': 'secretCode'
        }

        self._merchant_code = merchant_code
        self._secret_code = secret_code

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RedsysAllOfCredentials':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Redsys_allOf_credentials of this RedsysAllOfCredentials.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def merchant_code(self):
        """Gets the merchant_code of this RedsysAllOfCredentials.

        Redsys Gateway merchant code.

        :return: The merchant_code of this RedsysAllOfCredentials.
        :rtype: str
        """
        return self._merchant_code

    @merchant_code.setter
    def merchant_code(self, merchant_code):
        """Sets the merchant_code of this RedsysAllOfCredentials.

        Redsys Gateway merchant code.

        :param merchant_code: The merchant_code of this RedsysAllOfCredentials.
        :type merchant_code: str
        """
        if merchant_code is None:
            raise ValueError("Invalid value for `merchant_code`, must not be `None`")

        self._merchant_code = merchant_code

    @property
    def secret_code(self):
        """Gets the secret_code of this RedsysAllOfCredentials.

        Redsys Gateway secret code.

        :return: The secret_code of this RedsysAllOfCredentials.
        :rtype: str
        """
        return self._secret_code

    @secret_code.setter
    def secret_code(self, secret_code):
        """Sets the secret_code of this RedsysAllOfCredentials.

        Redsys Gateway secret code.

        :param secret_code: The secret_code of this RedsysAllOfCredentials.
        :type secret_code: str
        """
        if secret_code is None:
            raise ValueError("Invalid value for `secret_code`, must not be `None`")

        self._secret_code = secret_code
