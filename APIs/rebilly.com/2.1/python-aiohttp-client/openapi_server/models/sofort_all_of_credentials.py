# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SofortAllOfCredentials(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, config_key: str=None, nua_pay_account_id: str=None, nua_pay_api_key: str=None):
        """SofortAllOfCredentials - a model defined in OpenAPI

        :param config_key: The config_key of this SofortAllOfCredentials.
        :param nua_pay_account_id: The nua_pay_account_id of this SofortAllOfCredentials.
        :param nua_pay_api_key: The nua_pay_api_key of this SofortAllOfCredentials.
        """
        self.openapi_types = {
            'config_key': str,
            'nua_pay_account_id': str,
            'nua_pay_api_key': str
        }

        self.attribute_map = {
            'config_key': 'configKey',
            'nua_pay_account_id': 'nuaPayAccountId',
            'nua_pay_api_key': 'nuaPayApiKey'
        }

        self._config_key = config_key
        self._nua_pay_account_id = nua_pay_account_id
        self._nua_pay_api_key = nua_pay_api_key

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SofortAllOfCredentials':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Sofort_allOf_credentials of this SofortAllOfCredentials.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def config_key(self):
        """Gets the config_key of this SofortAllOfCredentials.

        Sofort configuration key.

        :return: The config_key of this SofortAllOfCredentials.
        :rtype: str
        """
        return self._config_key

    @config_key.setter
    def config_key(self, config_key):
        """Sets the config_key of this SofortAllOfCredentials.

        Sofort configuration key.

        :param config_key: The config_key of this SofortAllOfCredentials.
        :type config_key: str
        """
        if config_key is None:
            raise ValueError("Invalid value for `config_key`, must not be `None`")

        self._config_key = config_key

    @property
    def nua_pay_account_id(self):
        """Gets the nua_pay_account_id of this SofortAllOfCredentials.

        NuaPay account ID for reconciliation.

        :return: The nua_pay_account_id of this SofortAllOfCredentials.
        :rtype: str
        """
        return self._nua_pay_account_id

    @nua_pay_account_id.setter
    def nua_pay_account_id(self, nua_pay_account_id):
        """Sets the nua_pay_account_id of this SofortAllOfCredentials.

        NuaPay account ID for reconciliation.

        :param nua_pay_account_id: The nua_pay_account_id of this SofortAllOfCredentials.
        :type nua_pay_account_id: str
        """

        self._nua_pay_account_id = nua_pay_account_id

    @property
    def nua_pay_api_key(self):
        """Gets the nua_pay_api_key of this SofortAllOfCredentials.

        NuaPay API Key for reconciliation.

        :return: The nua_pay_api_key of this SofortAllOfCredentials.
        :rtype: str
        """
        return self._nua_pay_api_key

    @nua_pay_api_key.setter
    def nua_pay_api_key(self, nua_pay_api_key):
        """Sets the nua_pay_api_key of this SofortAllOfCredentials.

        NuaPay API Key for reconciliation.

        :param nua_pay_api_key: The nua_pay_api_key of this SofortAllOfCredentials.
        :type nua_pay_api_key: str
        """

        self._nua_pay_api_key = nua_pay_api_key
