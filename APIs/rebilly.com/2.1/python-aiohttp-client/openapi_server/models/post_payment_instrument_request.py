# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.bank_account_create_plain import BankAccountCreatePlain
from openapi_server.models.contact_object import ContactObject
from openapi_server.models.pay_pal_account import PayPalAccount
from openapi_server.models.pay_pal_account_all_of_embedded import PayPalAccountAllOfEmbedded
from openapi_server.models.pay_pal_account_all_of_links import PayPalAccountAllOfLinks
from openapi_server.models.payment_card_create_plain import PaymentCardCreatePlain
from openapi_server.models.payment_instrument_create_token import PaymentInstrumentCreateToken
from openapi_server.models.risk_metadata import RiskMetadata
import re
from openapi_server import util


class PostPaymentInstrumentRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, custom_fields: object=None, customer_id: str=None, token: str=None, billing_address: ContactObject=None, cvv: str=None, exp_month: int=None, exp_year: int=None, method: str=None, pan: str=None, risk_metadata: RiskMetadata=None, account_number: str=None, account_number_type: str='BBAN', account_type: str=None, bank_name: str=None, bic: str=None, routing_number: str=None, created_time: datetime=None, id: str=None, status: str=None, updated_time: datetime=None, username: str=None, embedded: List[PayPalAccountAllOfEmbedded]=None, links: List[PayPalAccountAllOfLinks]=None):
        """PostPaymentInstrumentRequest - a model defined in OpenAPI

        :param custom_fields: The custom_fields of this PostPaymentInstrumentRequest.
        :param customer_id: The customer_id of this PostPaymentInstrumentRequest.
        :param token: The token of this PostPaymentInstrumentRequest.
        :param billing_address: The billing_address of this PostPaymentInstrumentRequest.
        :param cvv: The cvv of this PostPaymentInstrumentRequest.
        :param exp_month: The exp_month of this PostPaymentInstrumentRequest.
        :param exp_year: The exp_year of this PostPaymentInstrumentRequest.
        :param method: The method of this PostPaymentInstrumentRequest.
        :param pan: The pan of this PostPaymentInstrumentRequest.
        :param risk_metadata: The risk_metadata of this PostPaymentInstrumentRequest.
        :param account_number: The account_number of this PostPaymentInstrumentRequest.
        :param account_number_type: The account_number_type of this PostPaymentInstrumentRequest.
        :param account_type: The account_type of this PostPaymentInstrumentRequest.
        :param bank_name: The bank_name of this PostPaymentInstrumentRequest.
        :param bic: The bic of this PostPaymentInstrumentRequest.
        :param routing_number: The routing_number of this PostPaymentInstrumentRequest.
        :param created_time: The created_time of this PostPaymentInstrumentRequest.
        :param id: The id of this PostPaymentInstrumentRequest.
        :param status: The status of this PostPaymentInstrumentRequest.
        :param updated_time: The updated_time of this PostPaymentInstrumentRequest.
        :param username: The username of this PostPaymentInstrumentRequest.
        :param embedded: The embedded of this PostPaymentInstrumentRequest.
        :param links: The links of this PostPaymentInstrumentRequest.
        """
        self.openapi_types = {
            'custom_fields': object,
            'customer_id': str,
            'token': str,
            'billing_address': ContactObject,
            'cvv': str,
            'exp_month': int,
            'exp_year': int,
            'method': str,
            'pan': str,
            'risk_metadata': RiskMetadata,
            'account_number': str,
            'account_number_type': str,
            'account_type': str,
            'bank_name': str,
            'bic': str,
            'routing_number': str,
            'created_time': datetime,
            'id': str,
            'status': str,
            'updated_time': datetime,
            'username': str,
            'embedded': List[PayPalAccountAllOfEmbedded],
            'links': List[PayPalAccountAllOfLinks]
        }

        self.attribute_map = {
            'custom_fields': 'customFields',
            'customer_id': 'customerId',
            'token': 'token',
            'billing_address': 'billingAddress',
            'cvv': 'cvv',
            'exp_month': 'expMonth',
            'exp_year': 'expYear',
            'method': 'method',
            'pan': 'pan',
            'risk_metadata': 'riskMetadata',
            'account_number': 'accountNumber',
            'account_number_type': 'accountNumberType',
            'account_type': 'accountType',
            'bank_name': 'bankName',
            'bic': 'bic',
            'routing_number': 'routingNumber',
            'created_time': 'createdTime',
            'id': 'id',
            'status': 'status',
            'updated_time': 'updatedTime',
            'username': 'username',
            'embedded': '_embedded',
            'links': '_links'
        }

        self._custom_fields = custom_fields
        self._customer_id = customer_id
        self._token = token
        self._billing_address = billing_address
        self._cvv = cvv
        self._exp_month = exp_month
        self._exp_year = exp_year
        self._method = method
        self._pan = pan
        self._risk_metadata = risk_metadata
        self._account_number = account_number
        self._account_number_type = account_number_type
        self._account_type = account_type
        self._bank_name = bank_name
        self._bic = bic
        self._routing_number = routing_number
        self._created_time = created_time
        self._id = id
        self._status = status
        self._updated_time = updated_time
        self._username = username
        self._embedded = embedded
        self._links = links

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PostPaymentInstrumentRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PostPaymentInstrument_request of this PostPaymentInstrumentRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def custom_fields(self):
        """Gets the custom_fields of this PostPaymentInstrumentRequest.

        Custom Fields list as a map `{\"custom field name\": \"custom field value\", ...}`. The format must follow the saved format (see Custom Fields section for the formats). 

        :return: The custom_fields of this PostPaymentInstrumentRequest.
        :rtype: object
        """
        return self._custom_fields

    @custom_fields.setter
    def custom_fields(self, custom_fields):
        """Sets the custom_fields of this PostPaymentInstrumentRequest.

        Custom Fields list as a map `{\"custom field name\": \"custom field value\", ...}`. The format must follow the saved format (see Custom Fields section for the formats). 

        :param custom_fields: The custom_fields of this PostPaymentInstrumentRequest.
        :type custom_fields: object
        """

        self._custom_fields = custom_fields

    @property
    def customer_id(self):
        """Gets the customer_id of this PostPaymentInstrumentRequest.

        The customer's ID.

        :return: The customer_id of this PostPaymentInstrumentRequest.
        :rtype: str
        """
        return self._customer_id

    @customer_id.setter
    def customer_id(self, customer_id):
        """Sets the customer_id of this PostPaymentInstrumentRequest.

        The customer's ID.

        :param customer_id: The customer_id of this PostPaymentInstrumentRequest.
        :type customer_id: str
        """
        if customer_id is None:
            raise ValueError("Invalid value for `customer_id`, must not be `None`")
        if customer_id is not None and len(customer_id) > 50:
            raise ValueError("Invalid value for `customer_id`, length must be less than or equal to `50`")

        self._customer_id = customer_id

    @property
    def token(self):
        """Gets the token of this PostPaymentInstrumentRequest.

        Payment token ID.

        :return: The token of this PostPaymentInstrumentRequest.
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token):
        """Sets the token of this PostPaymentInstrumentRequest.

        Payment token ID.

        :param token: The token of this PostPaymentInstrumentRequest.
        :type token: str
        """
        if token is None:
            raise ValueError("Invalid value for `token`, must not be `None`")

        self._token = token

    @property
    def billing_address(self):
        """Gets the billing_address of this PostPaymentInstrumentRequest.

        The billing address.

        :return: The billing_address of this PostPaymentInstrumentRequest.
        :rtype: ContactObject
        """
        return self._billing_address

    @billing_address.setter
    def billing_address(self, billing_address):
        """Sets the billing_address of this PostPaymentInstrumentRequest.

        The billing address.

        :param billing_address: The billing_address of this PostPaymentInstrumentRequest.
        :type billing_address: ContactObject
        """
        if billing_address is None:
            raise ValueError("Invalid value for `billing_address`, must not be `None`")

        self._billing_address = billing_address

    @property
    def cvv(self):
        """Gets the cvv of this PostPaymentInstrumentRequest.

        Card's cvv (card verification value).

        :return: The cvv of this PostPaymentInstrumentRequest.
        :rtype: str
        """
        return self._cvv

    @cvv.setter
    def cvv(self, cvv):
        """Sets the cvv of this PostPaymentInstrumentRequest.

        Card's cvv (card verification value).

        :param cvv: The cvv of this PostPaymentInstrumentRequest.
        :type cvv: str
        """

        self._cvv = cvv

    @property
    def exp_month(self):
        """Gets the exp_month of this PostPaymentInstrumentRequest.

        Card's expiration month.

        :return: The exp_month of this PostPaymentInstrumentRequest.
        :rtype: int
        """
        return self._exp_month

    @exp_month.setter
    def exp_month(self, exp_month):
        """Sets the exp_month of this PostPaymentInstrumentRequest.

        Card's expiration month.

        :param exp_month: The exp_month of this PostPaymentInstrumentRequest.
        :type exp_month: int
        """
        if exp_month is None:
            raise ValueError("Invalid value for `exp_month`, must not be `None`")

        self._exp_month = exp_month

    @property
    def exp_year(self):
        """Gets the exp_year of this PostPaymentInstrumentRequest.

        Card's expiration year.

        :return: The exp_year of this PostPaymentInstrumentRequest.
        :rtype: int
        """
        return self._exp_year

    @exp_year.setter
    def exp_year(self, exp_year):
        """Sets the exp_year of this PostPaymentInstrumentRequest.

        Card's expiration year.

        :param exp_year: The exp_year of this PostPaymentInstrumentRequest.
        :type exp_year: int
        """
        if exp_year is None:
            raise ValueError("Invalid value for `exp_year`, must not be `None`")

        self._exp_year = exp_year

    @property
    def method(self):
        """Gets the method of this PostPaymentInstrumentRequest.

        The method of payment instrument.

        :return: The method of this PostPaymentInstrumentRequest.
        :rtype: str
        """
        return self._method

    @method.setter
    def method(self, method):
        """Sets the method of this PostPaymentInstrumentRequest.

        The method of payment instrument.

        :param method: The method of this PostPaymentInstrumentRequest.
        :type method: str
        """
        allowed_values = ["paypal"]  # noqa: E501
        if method not in allowed_values:
            raise ValueError(
                "Invalid value for `method` ({0}), must be one of {1}"
                .format(method, allowed_values)
            )

        self._method = method

    @property
    def pan(self):
        """Gets the pan of this PostPaymentInstrumentRequest.

        The card PAN (Primary Account Number).

        :return: The pan of this PostPaymentInstrumentRequest.
        :rtype: str
        """
        return self._pan

    @pan.setter
    def pan(self, pan):
        """Sets the pan of this PostPaymentInstrumentRequest.

        The card PAN (Primary Account Number).

        :param pan: The pan of this PostPaymentInstrumentRequest.
        :type pan: str
        """
        if pan is None:
            raise ValueError("Invalid value for `pan`, must not be `None`")

        self._pan = pan

    @property
    def risk_metadata(self):
        """Gets the risk_metadata of this PostPaymentInstrumentRequest.


        :return: The risk_metadata of this PostPaymentInstrumentRequest.
        :rtype: RiskMetadata
        """
        return self._risk_metadata

    @risk_metadata.setter
    def risk_metadata(self, risk_metadata):
        """Sets the risk_metadata of this PostPaymentInstrumentRequest.


        :param risk_metadata: The risk_metadata of this PostPaymentInstrumentRequest.
        :type risk_metadata: RiskMetadata
        """

        self._risk_metadata = risk_metadata

    @property
    def account_number(self):
        """Gets the account_number of this PostPaymentInstrumentRequest.

        Bank's account number. Detailed information about all ISO 13616-compliant national IBAN formats is available in the [SWIFT IBAN Registry](https://www.swift.com/standards/data-standards/iban). 

        :return: The account_number of this PostPaymentInstrumentRequest.
        :rtype: str
        """
        return self._account_number

    @account_number.setter
    def account_number(self, account_number):
        """Sets the account_number of this PostPaymentInstrumentRequest.

        Bank's account number. Detailed information about all ISO 13616-compliant national IBAN formats is available in the [SWIFT IBAN Registry](https://www.swift.com/standards/data-standards/iban). 

        :param account_number: The account_number of this PostPaymentInstrumentRequest.
        :type account_number: str
        """
        if account_number is None:
            raise ValueError("Invalid value for `account_number`, must not be `None`")

        self._account_number = account_number

    @property
    def account_number_type(self):
        """Gets the account_number_type of this PostPaymentInstrumentRequest.

        Bank's Account Number type. A valid value is basic bank account number (BBAN) or international bank account number (IBAN). This is the object for the IBAN.

        :return: The account_number_type of this PostPaymentInstrumentRequest.
        :rtype: str
        """
        return self._account_number_type

    @account_number_type.setter
    def account_number_type(self, account_number_type):
        """Sets the account_number_type of this PostPaymentInstrumentRequest.

        Bank's Account Number type. A valid value is basic bank account number (BBAN) or international bank account number (IBAN). This is the object for the IBAN.

        :param account_number_type: The account_number_type of this PostPaymentInstrumentRequest.
        :type account_number_type: str
        """
        allowed_values = ["IBAN", "BBAN"]  # noqa: E501
        if account_number_type not in allowed_values:
            raise ValueError(
                "Invalid value for `account_number_type` ({0}), must be one of {1}"
                .format(account_number_type, allowed_values)
            )

        self._account_number_type = account_number_type

    @property
    def account_type(self):
        """Gets the account_type of this PostPaymentInstrumentRequest.

        Bank's account type.

        :return: The account_type of this PostPaymentInstrumentRequest.
        :rtype: str
        """
        return self._account_type

    @account_type.setter
    def account_type(self, account_type):
        """Sets the account_type of this PostPaymentInstrumentRequest.

        Bank's account type.

        :param account_type: The account_type of this PostPaymentInstrumentRequest.
        :type account_type: str
        """
        allowed_values = ["checking", "savings", "other"]  # noqa: E501
        if account_type not in allowed_values:
            raise ValueError(
                "Invalid value for `account_type` ({0}), must be one of {1}"
                .format(account_type, allowed_values)
            )

        self._account_type = account_type

    @property
    def bank_name(self):
        """Gets the bank_name of this PostPaymentInstrumentRequest.

        Bank's name.

        :return: The bank_name of this PostPaymentInstrumentRequest.
        :rtype: str
        """
        return self._bank_name

    @bank_name.setter
    def bank_name(self, bank_name):
        """Sets the bank_name of this PostPaymentInstrumentRequest.

        Bank's name.

        :param bank_name: The bank_name of this PostPaymentInstrumentRequest.
        :type bank_name: str
        """

        self._bank_name = bank_name

    @property
    def bic(self):
        """Gets the bic of this PostPaymentInstrumentRequest.

        Bank Identifier Code.

        :return: The bic of this PostPaymentInstrumentRequest.
        :rtype: str
        """
        return self._bic

    @bic.setter
    def bic(self, bic):
        """Sets the bic of this PostPaymentInstrumentRequest.

        Bank Identifier Code.

        :param bic: The bic of this PostPaymentInstrumentRequest.
        :type bic: str
        """

        self._bic = bic

    @property
    def routing_number(self):
        """Gets the routing_number of this PostPaymentInstrumentRequest.

        Bank's routing number.

        :return: The routing_number of this PostPaymentInstrumentRequest.
        :rtype: str
        """
        return self._routing_number

    @routing_number.setter
    def routing_number(self, routing_number):
        """Sets the routing_number of this PostPaymentInstrumentRequest.

        Bank's routing number.

        :param routing_number: The routing_number of this PostPaymentInstrumentRequest.
        :type routing_number: str
        """
        if routing_number is None:
            raise ValueError("Invalid value for `routing_number`, must not be `None`")
        if routing_number is not None and not re.search(r'^[0-9]+$', routing_number):
            raise ValueError("Invalid value for `routing_number`, must be a follow pattern or equal to `/^[0-9]+$/`")

        self._routing_number = routing_number

    @property
    def created_time(self):
        """Gets the created_time of this PostPaymentInstrumentRequest.

        PayPal account created time.

        :return: The created_time of this PostPaymentInstrumentRequest.
        :rtype: datetime
        """
        return self._created_time

    @created_time.setter
    def created_time(self, created_time):
        """Sets the created_time of this PostPaymentInstrumentRequest.

        PayPal account created time.

        :param created_time: The created_time of this PostPaymentInstrumentRequest.
        :type created_time: datetime
        """

        self._created_time = created_time

    @property
    def id(self):
        """Gets the id of this PostPaymentInstrumentRequest.

        The payment instrument ID.

        :return: The id of this PostPaymentInstrumentRequest.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PostPaymentInstrumentRequest.

        The payment instrument ID.

        :param id: The id of this PostPaymentInstrumentRequest.
        :type id: str
        """
        if id is not None and len(id) > 50:
            raise ValueError("Invalid value for `id`, length must be less than or equal to `50`")

        self._id = id

    @property
    def status(self):
        """Gets the status of this PostPaymentInstrumentRequest.

        PayPal account status.

        :return: The status of this PostPaymentInstrumentRequest.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this PostPaymentInstrumentRequest.

        PayPal account status.

        :param status: The status of this PostPaymentInstrumentRequest.
        :type status: str
        """
        allowed_values = ["inactive", "active", "deactivated"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def updated_time(self):
        """Gets the updated_time of this PostPaymentInstrumentRequest.

        PayPal account updated time.

        :return: The updated_time of this PostPaymentInstrumentRequest.
        :rtype: datetime
        """
        return self._updated_time

    @updated_time.setter
    def updated_time(self, updated_time):
        """Sets the updated_time of this PostPaymentInstrumentRequest.

        PayPal account updated time.

        :param updated_time: The updated_time of this PostPaymentInstrumentRequest.
        :type updated_time: datetime
        """

        self._updated_time = updated_time

    @property
    def username(self):
        """Gets the username of this PostPaymentInstrumentRequest.

        PayPal username.

        :return: The username of this PostPaymentInstrumentRequest.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this PostPaymentInstrumentRequest.

        PayPal username.

        :param username: The username of this PostPaymentInstrumentRequest.
        :type username: str
        """

        self._username = username

    @property
    def embedded(self):
        """Gets the embedded of this PostPaymentInstrumentRequest.

        Any embedded objects available that are requested by the `expand` querystring parameter.

        :return: The embedded of this PostPaymentInstrumentRequest.
        :rtype: List[PayPalAccountAllOfEmbedded]
        """
        return self._embedded

    @embedded.setter
    def embedded(self, embedded):
        """Sets the embedded of this PostPaymentInstrumentRequest.

        Any embedded objects available that are requested by the `expand` querystring parameter.

        :param embedded: The embedded of this PostPaymentInstrumentRequest.
        :type embedded: List[PayPalAccountAllOfEmbedded]
        """
        if embedded is not None and len(embedded) < 1:
            raise ValueError("Invalid value for `embedded`, number of items must be greater than or equal to `1`")

        self._embedded = embedded

    @property
    def links(self):
        """Gets the links of this PostPaymentInstrumentRequest.

        The links related to resource.

        :return: The links of this PostPaymentInstrumentRequest.
        :rtype: List[PayPalAccountAllOfLinks]
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this PostPaymentInstrumentRequest.

        The links related to resource.

        :param links: The links of this PostPaymentInstrumentRequest.
        :type links: List[PayPalAccountAllOfLinks]
        """
        if links is not None and len(links) < 1:
            raise ValueError("Invalid value for `links`, number of items must be greater than or equal to `1`")

        self._links = links
