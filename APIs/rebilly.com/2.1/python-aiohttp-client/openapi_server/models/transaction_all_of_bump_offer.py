# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.money import Money
from openapi_server.models.purchase_bump_offer import PurchaseBumpOffer
from openapi_server.models.purchase_bump_status import PurchaseBumpStatus
import re
from openapi_server import util


class TransactionAllOfBumpOffer(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, language: str=None, order: Money=None, outcome: PurchaseBumpStatus=None, presented_offers: List[PurchaseBumpOffer]=None, selected_offer: PurchaseBumpOffer=None, version: str=None):
        """TransactionAllOfBumpOffer - a model defined in OpenAPI

        :param language: The language of this TransactionAllOfBumpOffer.
        :param order: The order of this TransactionAllOfBumpOffer.
        :param outcome: The outcome of this TransactionAllOfBumpOffer.
        :param presented_offers: The presented_offers of this TransactionAllOfBumpOffer.
        :param selected_offer: The selected_offer of this TransactionAllOfBumpOffer.
        :param version: The version of this TransactionAllOfBumpOffer.
        """
        self.openapi_types = {
            'language': str,
            'order': Money,
            'outcome': PurchaseBumpStatus,
            'presented_offers': List[PurchaseBumpOffer],
            'selected_offer': PurchaseBumpOffer,
            'version': str
        }

        self.attribute_map = {
            'language': 'language',
            'order': 'order',
            'outcome': 'outcome',
            'presented_offers': 'presentedOffers',
            'selected_offer': 'selectedOffer',
            'version': 'version'
        }

        self._language = language
        self._order = order
        self._outcome = outcome
        self._presented_offers = presented_offers
        self._selected_offer = selected_offer
        self._version = version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TransactionAllOfBumpOffer':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Transaction_allOf_bumpOffer of this TransactionAllOfBumpOffer.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def language(self):
        """Gets the language of this TransactionAllOfBumpOffer.

        The language of the bump offer that was displayed to user (useful for finding any translation problems).

        :return: The language of this TransactionAllOfBumpOffer.
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this TransactionAllOfBumpOffer.

        The language of the bump offer that was displayed to user (useful for finding any translation problems).

        :param language: The language of this TransactionAllOfBumpOffer.
        :type language: str
        """
        if language is not None and not re.search(r'[a-zA-Z]{2}', language):
            raise ValueError("Invalid value for `language`, must be a follow pattern or equal to `/[a-zA-Z]{2}/`")

        self._language = language

    @property
    def order(self):
        """Gets the order of this TransactionAllOfBumpOffer.

        Initial amount and currency.

        :return: The order of this TransactionAllOfBumpOffer.
        :rtype: Money
        """
        return self._order

    @order.setter
    def order(self, order):
        """Sets the order of this TransactionAllOfBumpOffer.

        Initial amount and currency.

        :param order: The order of this TransactionAllOfBumpOffer.
        :type order: Money
        """

        self._order = order

    @property
    def outcome(self):
        """Gets the outcome of this TransactionAllOfBumpOffer.


        :return: The outcome of this TransactionAllOfBumpOffer.
        :rtype: PurchaseBumpStatus
        """
        return self._outcome

    @outcome.setter
    def outcome(self, outcome):
        """Sets the outcome of this TransactionAllOfBumpOffer.


        :param outcome: The outcome of this TransactionAllOfBumpOffer.
        :type outcome: PurchaseBumpStatus
        """

        self._outcome = outcome

    @property
    def presented_offers(self):
        """Gets the presented_offers of this TransactionAllOfBumpOffer.

        Offers presented to a customer.

        :return: The presented_offers of this TransactionAllOfBumpOffer.
        :rtype: List[PurchaseBumpOffer]
        """
        return self._presented_offers

    @presented_offers.setter
    def presented_offers(self, presented_offers):
        """Sets the presented_offers of this TransactionAllOfBumpOffer.

        Offers presented to a customer.

        :param presented_offers: The presented_offers of this TransactionAllOfBumpOffer.
        :type presented_offers: List[PurchaseBumpOffer]
        """
        if presented_offers is not None and len(presented_offers) < 1:
            raise ValueError("Invalid value for `presented_offers`, number of items must be greater than or equal to `1`")

        self._presented_offers = presented_offers

    @property
    def selected_offer(self):
        """Gets the selected_offer of this TransactionAllOfBumpOffer.

        Offer selected by a customer. Null if bump offer outcome is not `selected`.

        :return: The selected_offer of this TransactionAllOfBumpOffer.
        :rtype: PurchaseBumpOffer
        """
        return self._selected_offer

    @selected_offer.setter
    def selected_offer(self, selected_offer):
        """Sets the selected_offer of this TransactionAllOfBumpOffer.

        Offer selected by a customer. Null if bump offer outcome is not `selected`.

        :param selected_offer: The selected_offer of this TransactionAllOfBumpOffer.
        :type selected_offer: PurchaseBumpOffer
        """

        self._selected_offer = selected_offer

    @property
    def version(self):
        """Gets the version of this TransactionAllOfBumpOffer.

        The name of the version that was picked (useful for measuring split tests).

        :return: The version of this TransactionAllOfBumpOffer.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this TransactionAllOfBumpOffer.

        The name of the version that was picked (useful for measuring split tests).

        :param version: The version of this TransactionAllOfBumpOffer.
        :type version: str
        """

        self._version = version
