# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PayTabsAllOfCredentials(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, client_key: str=None, profile_id: str=None, server_key: str=None):
        """PayTabsAllOfCredentials - a model defined in OpenAPI

        :param client_key: The client_key of this PayTabsAllOfCredentials.
        :param profile_id: The profile_id of this PayTabsAllOfCredentials.
        :param server_key: The server_key of this PayTabsAllOfCredentials.
        """
        self.openapi_types = {
            'client_key': str,
            'profile_id': str,
            'server_key': str
        }

        self.attribute_map = {
            'client_key': 'clientKey',
            'profile_id': 'profileId',
            'server_key': 'serverKey'
        }

        self._client_key = client_key
        self._profile_id = profile_id
        self._server_key = server_key

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PayTabsAllOfCredentials':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PayTabs_allOf_credentials of this PayTabsAllOfCredentials.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def client_key(self):
        """Gets the client_key of this PayTabsAllOfCredentials.


        :return: The client_key of this PayTabsAllOfCredentials.
        :rtype: str
        """
        return self._client_key

    @client_key.setter
    def client_key(self, client_key):
        """Sets the client_key of this PayTabsAllOfCredentials.


        :param client_key: The client_key of this PayTabsAllOfCredentials.
        :type client_key: str
        """
        if client_key is None:
            raise ValueError("Invalid value for `client_key`, must not be `None`")

        self._client_key = client_key

    @property
    def profile_id(self):
        """Gets the profile_id of this PayTabsAllOfCredentials.


        :return: The profile_id of this PayTabsAllOfCredentials.
        :rtype: str
        """
        return self._profile_id

    @profile_id.setter
    def profile_id(self, profile_id):
        """Sets the profile_id of this PayTabsAllOfCredentials.


        :param profile_id: The profile_id of this PayTabsAllOfCredentials.
        :type profile_id: str
        """
        if profile_id is None:
            raise ValueError("Invalid value for `profile_id`, must not be `None`")

        self._profile_id = profile_id

    @property
    def server_key(self):
        """Gets the server_key of this PayTabsAllOfCredentials.


        :return: The server_key of this PayTabsAllOfCredentials.
        :rtype: str
        """
        return self._server_key

    @server_key.setter
    def server_key(self, server_key):
        """Sets the server_key of this PayTabsAllOfCredentials.


        :param server_key: The server_key of this PayTabsAllOfCredentials.
        :type server_key: str
        """
        if server_key is None:
            raise ValueError("Invalid value for `server_key`, must not be `None`")

        self._server_key = server_key
