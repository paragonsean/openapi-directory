# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.redemption_restriction import RedemptionRestriction
from openapi_server.models.self_link import SelfLink
from openapi_server import util


class CouponRedemption(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, links: List[SelfLink]=None, additional_restrictions: List[RedemptionRestriction]=None, canceled_time: datetime=None, coupon_id: str=None, created_time: datetime=None, customer_id: str=None, id: str=None):
        """CouponRedemption - a model defined in OpenAPI

        :param links: The links of this CouponRedemption.
        :param additional_restrictions: The additional_restrictions of this CouponRedemption.
        :param canceled_time: The canceled_time of this CouponRedemption.
        :param coupon_id: The coupon_id of this CouponRedemption.
        :param created_time: The created_time of this CouponRedemption.
        :param customer_id: The customer_id of this CouponRedemption.
        :param id: The id of this CouponRedemption.
        """
        self.openapi_types = {
            'links': List[SelfLink],
            'additional_restrictions': List[RedemptionRestriction],
            'canceled_time': datetime,
            'coupon_id': str,
            'created_time': datetime,
            'customer_id': str,
            'id': str
        }

        self.attribute_map = {
            'links': '_links',
            'additional_restrictions': 'additionalRestrictions',
            'canceled_time': 'canceledTime',
            'coupon_id': 'couponId',
            'created_time': 'createdTime',
            'customer_id': 'customerId',
            'id': 'id'
        }

        self._links = links
        self._additional_restrictions = additional_restrictions
        self._canceled_time = canceled_time
        self._coupon_id = coupon_id
        self._created_time = created_time
        self._customer_id = customer_id
        self._id = id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CouponRedemption':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CouponRedemption of this CouponRedemption.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def links(self):
        """Gets the links of this CouponRedemption.

        The links related to resource.

        :return: The links of this CouponRedemption.
        :rtype: List[SelfLink]
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this CouponRedemption.

        The links related to resource.

        :param links: The links of this CouponRedemption.
        :type links: List[SelfLink]
        """
        if links is not None and len(links) < 1:
            raise ValueError("Invalid value for `links`, number of items must be greater than or equal to `1`")

        self._links = links

    @property
    def additional_restrictions(self):
        """Gets the additional_restrictions of this CouponRedemption.

        Additional restrictions for coupon's redemptions.

        :return: The additional_restrictions of this CouponRedemption.
        :rtype: List[RedemptionRestriction]
        """
        return self._additional_restrictions

    @additional_restrictions.setter
    def additional_restrictions(self, additional_restrictions):
        """Sets the additional_restrictions of this CouponRedemption.

        Additional restrictions for coupon's redemptions.

        :param additional_restrictions: The additional_restrictions of this CouponRedemption.
        :type additional_restrictions: List[RedemptionRestriction]
        """

        self._additional_restrictions = additional_restrictions

    @property
    def canceled_time(self):
        """Gets the canceled_time of this CouponRedemption.

        Coupon redemption canceled time.

        :return: The canceled_time of this CouponRedemption.
        :rtype: datetime
        """
        return self._canceled_time

    @canceled_time.setter
    def canceled_time(self, canceled_time):
        """Sets the canceled_time of this CouponRedemption.

        Coupon redemption canceled time.

        :param canceled_time: The canceled_time of this CouponRedemption.
        :type canceled_time: datetime
        """

        self._canceled_time = canceled_time

    @property
    def coupon_id(self):
        """Gets the coupon_id of this CouponRedemption.

        Coupon's ID.

        :return: The coupon_id of this CouponRedemption.
        :rtype: str
        """
        return self._coupon_id

    @coupon_id.setter
    def coupon_id(self, coupon_id):
        """Sets the coupon_id of this CouponRedemption.

        Coupon's ID.

        :param coupon_id: The coupon_id of this CouponRedemption.
        :type coupon_id: str
        """
        if coupon_id is not None and len(coupon_id) > 50:
            raise ValueError("Invalid value for `coupon_id`, length must be less than or equal to `50`")

        self._coupon_id = coupon_id

    @property
    def created_time(self):
        """Gets the created_time of this CouponRedemption.

        Coupon redeem time.

        :return: The created_time of this CouponRedemption.
        :rtype: datetime
        """
        return self._created_time

    @created_time.setter
    def created_time(self, created_time):
        """Sets the created_time of this CouponRedemption.

        Coupon redeem time.

        :param created_time: The created_time of this CouponRedemption.
        :type created_time: datetime
        """

        self._created_time = created_time

    @property
    def customer_id(self):
        """Gets the customer_id of this CouponRedemption.

        Customer's ID.

        :return: The customer_id of this CouponRedemption.
        :rtype: str
        """
        return self._customer_id

    @customer_id.setter
    def customer_id(self, customer_id):
        """Sets the customer_id of this CouponRedemption.

        Customer's ID.

        :param customer_id: The customer_id of this CouponRedemption.
        :type customer_id: str
        """
        if customer_id is not None and len(customer_id) > 50:
            raise ValueError("Invalid value for `customer_id`, length must be less than or equal to `50`")

        self._customer_id = customer_id

    @property
    def id(self):
        """Gets the id of this CouponRedemption.

        The resource ID. Defaults to UUID v4.

        :return: The id of this CouponRedemption.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CouponRedemption.

        The resource ID. Defaults to UUID v4.

        :param id: The id of this CouponRedemption.
        :type id: str
        """
        if id is not None and len(id) > 50:
            raise ValueError("Invalid value for `id`, length must be less than or equal to `50`")

        self._id = id
