# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.common_kyc_request_documents_inner import CommonKycRequestDocumentsInner
from openapi_server.models.kyc_request_all_of_links import KycRequestAllOfLinks
from openapi_server import util


class PatchKycRequestRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, created_time: datetime=None, documents: List[CommonKycRequestDocumentsInner]=None, expiration_time: datetime=None, id: str=None, redirect_url: str=None, updated_time: datetime=None, links: List[KycRequestAllOfLinks]=None, customer_id: object=None, match_level: int=None, reason: str=None):
        """PatchKycRequestRequest - a model defined in OpenAPI

        :param created_time: The created_time of this PatchKycRequestRequest.
        :param documents: The documents of this PatchKycRequestRequest.
        :param expiration_time: The expiration_time of this PatchKycRequestRequest.
        :param id: The id of this PatchKycRequestRequest.
        :param redirect_url: The redirect_url of this PatchKycRequestRequest.
        :param updated_time: The updated_time of this PatchKycRequestRequest.
        :param links: The links of this PatchKycRequestRequest.
        :param customer_id: The customer_id of this PatchKycRequestRequest.
        :param match_level: The match_level of this PatchKycRequestRequest.
        :param reason: The reason of this PatchKycRequestRequest.
        """
        self.openapi_types = {
            'created_time': datetime,
            'documents': List[CommonKycRequestDocumentsInner],
            'expiration_time': datetime,
            'id': str,
            'redirect_url': str,
            'updated_time': datetime,
            'links': List[KycRequestAllOfLinks],
            'customer_id': object,
            'match_level': int,
            'reason': str
        }

        self.attribute_map = {
            'created_time': 'createdTime',
            'documents': 'documents',
            'expiration_time': 'expirationTime',
            'id': 'id',
            'redirect_url': 'redirectUrl',
            'updated_time': 'updatedTime',
            'links': '_links',
            'customer_id': 'customerId',
            'match_level': 'matchLevel',
            'reason': 'reason'
        }

        self._created_time = created_time
        self._documents = documents
        self._expiration_time = expiration_time
        self._id = id
        self._redirect_url = redirect_url
        self._updated_time = updated_time
        self._links = links
        self._customer_id = customer_id
        self._match_level = match_level
        self._reason = reason

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PatchKycRequestRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PatchKycRequest_request of this PatchKycRequestRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def created_time(self):
        """Gets the created_time of this PatchKycRequestRequest.

        Creation date/time.

        :return: The created_time of this PatchKycRequestRequest.
        :rtype: datetime
        """
        return self._created_time

    @created_time.setter
    def created_time(self, created_time):
        """Sets the created_time of this PatchKycRequestRequest.

        Creation date/time.

        :param created_time: The created_time of this PatchKycRequestRequest.
        :type created_time: datetime
        """

        self._created_time = created_time

    @property
    def documents(self):
        """Gets the documents of this PatchKycRequestRequest.

        Documents to be requested from customer.

        :return: The documents of this PatchKycRequestRequest.
        :rtype: List[CommonKycRequestDocumentsInner]
        """
        return self._documents

    @documents.setter
    def documents(self, documents):
        """Sets the documents of this PatchKycRequestRequest.

        Documents to be requested from customer.

        :param documents: The documents of this PatchKycRequestRequest.
        :type documents: List[CommonKycRequestDocumentsInner]
        """
        if documents is None:
            raise ValueError("Invalid value for `documents`, must not be `None`")

        self._documents = documents

    @property
    def expiration_time(self):
        """Gets the expiration_time of this PatchKycRequestRequest.

        Expiration date/time.

        :return: The expiration_time of this PatchKycRequestRequest.
        :rtype: datetime
        """
        return self._expiration_time

    @expiration_time.setter
    def expiration_time(self, expiration_time):
        """Sets the expiration_time of this PatchKycRequestRequest.

        Expiration date/time.

        :param expiration_time: The expiration_time of this PatchKycRequestRequest.
        :type expiration_time: datetime
        """

        self._expiration_time = expiration_time

    @property
    def id(self):
        """Gets the id of this PatchKycRequestRequest.

        The resource ID. Defaults to UUID v4.

        :return: The id of this PatchKycRequestRequest.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PatchKycRequestRequest.

        The resource ID. Defaults to UUID v4.

        :param id: The id of this PatchKycRequestRequest.
        :type id: str
        """
        if id is not None and len(id) > 50:
            raise ValueError("Invalid value for `id`, length must be less than or equal to `50`")

        self._id = id

    @property
    def redirect_url(self):
        """Gets the redirect_url of this PatchKycRequestRequest.

        The URL to redirect the customer when an upload is completed.

        :return: The redirect_url of this PatchKycRequestRequest.
        :rtype: str
        """
        return self._redirect_url

    @redirect_url.setter
    def redirect_url(self, redirect_url):
        """Sets the redirect_url of this PatchKycRequestRequest.

        The URL to redirect the customer when an upload is completed.

        :param redirect_url: The redirect_url of this PatchKycRequestRequest.
        :type redirect_url: str
        """

        self._redirect_url = redirect_url

    @property
    def updated_time(self):
        """Gets the updated_time of this PatchKycRequestRequest.

        Latest update date/time.

        :return: The updated_time of this PatchKycRequestRequest.
        :rtype: datetime
        """
        return self._updated_time

    @updated_time.setter
    def updated_time(self, updated_time):
        """Sets the updated_time of this PatchKycRequestRequest.

        Latest update date/time.

        :param updated_time: The updated_time of this PatchKycRequestRequest.
        :type updated_time: datetime
        """

        self._updated_time = updated_time

    @property
    def links(self):
        """Gets the links of this PatchKycRequestRequest.

        The links related to resource.

        :return: The links of this PatchKycRequestRequest.
        :rtype: List[KycRequestAllOfLinks]
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this PatchKycRequestRequest.

        The links related to resource.

        :param links: The links of this PatchKycRequestRequest.
        :type links: List[KycRequestAllOfLinks]
        """
        if links is not None and len(links) < 1:
            raise ValueError("Invalid value for `links`, number of items must be greater than or equal to `1`")

        self._links = links

    @property
    def customer_id(self):
        """Gets the customer_id of this PatchKycRequestRequest.


        :return: The customer_id of this PatchKycRequestRequest.
        :rtype: object
        """
        return self._customer_id

    @customer_id.setter
    def customer_id(self, customer_id):
        """Sets the customer_id of this PatchKycRequestRequest.


        :param customer_id: The customer_id of this PatchKycRequestRequest.
        :type customer_id: object
        """
        if customer_id is None:
            raise ValueError("Invalid value for `customer_id`, must not be `None`")

        self._customer_id = customer_id

    @property
    def match_level(self):
        """Gets the match_level of this PatchKycRequestRequest.

        The level of strictness for the document matches.

        :return: The match_level of this PatchKycRequestRequest.
        :rtype: int
        """
        return self._match_level

    @match_level.setter
    def match_level(self, match_level):
        """Sets the match_level of this PatchKycRequestRequest.

        The level of strictness for the document matches.

        :param match_level: The match_level of this PatchKycRequestRequest.
        :type match_level: int
        """
        if match_level is not None and match_level > 2:
            raise ValueError("Invalid value for `match_level`, must be a value less than or equal to `2`")
        if match_level is not None and match_level < 1:
            raise ValueError("Invalid value for `match_level`, must be a value greater than or equal to `1`")

        self._match_level = match_level

    @property
    def reason(self):
        """Gets the reason of this PatchKycRequestRequest.

        Reason for uploading.

        :return: The reason of this PatchKycRequestRequest.
        :rtype: str
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """Sets the reason of this PatchKycRequestRequest.

        Reason for uploading.

        :param reason: The reason of this PatchKycRequestRequest.
        :type reason: str
        """

        self._reason = reason
