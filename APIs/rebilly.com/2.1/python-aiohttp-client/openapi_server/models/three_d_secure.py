# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.self_link import SelfLink
from openapi_server import util


class ThreeDSecure(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, links: List[SelfLink]=None, amount: float=None, cavv: str=None, created_time: datetime=None, currency: str=None, customer_id: str=None, eci: int=None, enrolled: str=None, enrollment_eci: str=None, gateway_account_id: str=None, id: str=None, payer_auth_response_status: str=None, payment_card_id: str=None, signature_verification: str=None, website_id: str=None, xid: str=None):
        """ThreeDSecure - a model defined in OpenAPI

        :param links: The links of this ThreeDSecure.
        :param amount: The amount of this ThreeDSecure.
        :param cavv: The cavv of this ThreeDSecure.
        :param created_time: The created_time of this ThreeDSecure.
        :param currency: The currency of this ThreeDSecure.
        :param customer_id: The customer_id of this ThreeDSecure.
        :param eci: The eci of this ThreeDSecure.
        :param enrolled: The enrolled of this ThreeDSecure.
        :param enrollment_eci: The enrollment_eci of this ThreeDSecure.
        :param gateway_account_id: The gateway_account_id of this ThreeDSecure.
        :param id: The id of this ThreeDSecure.
        :param payer_auth_response_status: The payer_auth_response_status of this ThreeDSecure.
        :param payment_card_id: The payment_card_id of this ThreeDSecure.
        :param signature_verification: The signature_verification of this ThreeDSecure.
        :param website_id: The website_id of this ThreeDSecure.
        :param xid: The xid of this ThreeDSecure.
        """
        self.openapi_types = {
            'links': List[SelfLink],
            'amount': float,
            'cavv': str,
            'created_time': datetime,
            'currency': str,
            'customer_id': str,
            'eci': int,
            'enrolled': str,
            'enrollment_eci': str,
            'gateway_account_id': str,
            'id': str,
            'payer_auth_response_status': str,
            'payment_card_id': str,
            'signature_verification': str,
            'website_id': str,
            'xid': str
        }

        self.attribute_map = {
            'links': '_links',
            'amount': 'amount',
            'cavv': 'cavv',
            'created_time': 'createdTime',
            'currency': 'currency',
            'customer_id': 'customerId',
            'eci': 'eci',
            'enrolled': 'enrolled',
            'enrollment_eci': 'enrollmentEci',
            'gateway_account_id': 'gatewayAccountId',
            'id': 'id',
            'payer_auth_response_status': 'payerAuthResponseStatus',
            'payment_card_id': 'paymentCardId',
            'signature_verification': 'signatureVerification',
            'website_id': 'websiteId',
            'xid': 'xid'
        }

        self._links = links
        self._amount = amount
        self._cavv = cavv
        self._created_time = created_time
        self._currency = currency
        self._customer_id = customer_id
        self._eci = eci
        self._enrolled = enrolled
        self._enrollment_eci = enrollment_eci
        self._gateway_account_id = gateway_account_id
        self._id = id
        self._payer_auth_response_status = payer_auth_response_status
        self._payment_card_id = payment_card_id
        self._signature_verification = signature_verification
        self._website_id = website_id
        self._xid = xid

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ThreeDSecure':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ThreeDSecure of this ThreeDSecure.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def links(self):
        """Gets the links of this ThreeDSecure.

        The links related to resource.

        :return: The links of this ThreeDSecure.
        :rtype: List[SelfLink]
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this ThreeDSecure.

        The links related to resource.

        :param links: The links of this ThreeDSecure.
        :type links: List[SelfLink]
        """
        if links is not None and len(links) < 1:
            raise ValueError("Invalid value for `links`, number of items must be greater than or equal to `1`")

        self._links = links

    @property
    def amount(self):
        """Gets the amount of this ThreeDSecure.

        Transaction amount.

        :return: The amount of this ThreeDSecure.
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this ThreeDSecure.

        Transaction amount.

        :param amount: The amount of this ThreeDSecure.
        :type amount: float
        """
        if amount is None:
            raise ValueError("Invalid value for `amount`, must not be `None`")

        self._amount = amount

    @property
    def cavv(self):
        """Gets the cavv of this ThreeDSecure.

        The 3D Secure entry cardholder authentication verification value.

        :return: The cavv of this ThreeDSecure.
        :rtype: str
        """
        return self._cavv

    @cavv.setter
    def cavv(self, cavv):
        """Sets the cavv of this ThreeDSecure.

        The 3D Secure entry cardholder authentication verification value.

        :param cavv: The cavv of this ThreeDSecure.
        :type cavv: str
        """

        self._cavv = cavv

    @property
    def created_time(self):
        """Gets the created_time of this ThreeDSecure.

        The 3D Secure entry created time.

        :return: The created_time of this ThreeDSecure.
        :rtype: datetime
        """
        return self._created_time

    @created_time.setter
    def created_time(self, created_time):
        """Sets the created_time of this ThreeDSecure.

        The 3D Secure entry created time.

        :param created_time: The created_time of this ThreeDSecure.
        :type created_time: datetime
        """

        self._created_time = created_time

    @property
    def currency(self):
        """Gets the currency of this ThreeDSecure.

        ISO 4217 alphabetic currency code.

        :return: The currency of this ThreeDSecure.
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this ThreeDSecure.

        ISO 4217 alphabetic currency code.

        :param currency: The currency of this ThreeDSecure.
        :type currency: str
        """
        if currency is None:
            raise ValueError("Invalid value for `currency`, must not be `None`")
        if currency is not None and len(currency) > 3:
            raise ValueError("Invalid value for `currency`, length must be less than or equal to `3`")
        if currency is not None and len(currency) < 3:
            raise ValueError("Invalid value for `currency`, length must be greater than or equal to `3`")

        self._currency = currency

    @property
    def customer_id(self):
        """Gets the customer_id of this ThreeDSecure.

        Related customer ID.

        :return: The customer_id of this ThreeDSecure.
        :rtype: str
        """
        return self._customer_id

    @customer_id.setter
    def customer_id(self, customer_id):
        """Sets the customer_id of this ThreeDSecure.

        Related customer ID.

        :param customer_id: The customer_id of this ThreeDSecure.
        :type customer_id: str
        """
        if customer_id is None:
            raise ValueError("Invalid value for `customer_id`, must not be `None`")
        if customer_id is not None and len(customer_id) > 50:
            raise ValueError("Invalid value for `customer_id`, length must be less than or equal to `50`")

        self._customer_id = customer_id

    @property
    def eci(self):
        """Gets the eci of this ThreeDSecure.

        The 3D Secure entry electronic commerce indicator.

        :return: The eci of this ThreeDSecure.
        :rtype: int
        """
        return self._eci

    @eci.setter
    def eci(self, eci):
        """Sets the eci of this ThreeDSecure.

        The 3D Secure entry electronic commerce indicator.

        :param eci: The eci of this ThreeDSecure.
        :type eci: int
        """

        self._eci = eci

    @property
    def enrolled(self):
        """Gets the enrolled of this ThreeDSecure.

        Is the cardholder enrolled in 3DSecure.

        :return: The enrolled of this ThreeDSecure.
        :rtype: str
        """
        return self._enrolled

    @enrolled.setter
    def enrolled(self, enrolled):
        """Sets the enrolled of this ThreeDSecure.

        Is the cardholder enrolled in 3DSecure.

        :param enrolled: The enrolled of this ThreeDSecure.
        :type enrolled: str
        """
        allowed_values = ["Y", "N", "U"]  # noqa: E501
        if enrolled not in allowed_values:
            raise ValueError(
                "Invalid value for `enrolled` ({0}), must be one of {1}"
                .format(enrolled, allowed_values)
            )

        self._enrolled = enrolled

    @property
    def enrollment_eci(self):
        """Gets the enrollment_eci of this ThreeDSecure.

        The 3D Secure entry enrollment eci.

        :return: The enrollment_eci of this ThreeDSecure.
        :rtype: str
        """
        return self._enrollment_eci

    @enrollment_eci.setter
    def enrollment_eci(self, enrollment_eci):
        """Sets the enrollment_eci of this ThreeDSecure.

        The 3D Secure entry enrollment eci.

        :param enrollment_eci: The enrollment_eci of this ThreeDSecure.
        :type enrollment_eci: str
        """
        if enrollment_eci is None:
            raise ValueError("Invalid value for `enrollment_eci`, must not be `None`")

        self._enrollment_eci = enrollment_eci

    @property
    def gateway_account_id(self):
        """Gets the gateway_account_id of this ThreeDSecure.

        Related gateway account ID.

        :return: The gateway_account_id of this ThreeDSecure.
        :rtype: str
        """
        return self._gateway_account_id

    @gateway_account_id.setter
    def gateway_account_id(self, gateway_account_id):
        """Sets the gateway_account_id of this ThreeDSecure.

        Related gateway account ID.

        :param gateway_account_id: The gateway_account_id of this ThreeDSecure.
        :type gateway_account_id: str
        """
        if gateway_account_id is None:
            raise ValueError("Invalid value for `gateway_account_id`, must not be `None`")
        if gateway_account_id is not None and len(gateway_account_id) > 50:
            raise ValueError("Invalid value for `gateway_account_id`, length must be less than or equal to `50`")

        self._gateway_account_id = gateway_account_id

    @property
    def id(self):
        """Gets the id of this ThreeDSecure.

        The 3D Secure entry identifier string.

        :return: The id of this ThreeDSecure.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ThreeDSecure.

        The 3D Secure entry identifier string.

        :param id: The id of this ThreeDSecure.
        :type id: str
        """
        if id is not None and len(id) > 50:
            raise ValueError("Invalid value for `id`, length must be less than or equal to `50`")

        self._id = id

    @property
    def payer_auth_response_status(self):
        """Gets the payer_auth_response_status of this ThreeDSecure.

        The 3D Secure entry Auth Response Status.

        :return: The payer_auth_response_status of this ThreeDSecure.
        :rtype: str
        """
        return self._payer_auth_response_status

    @payer_auth_response_status.setter
    def payer_auth_response_status(self, payer_auth_response_status):
        """Sets the payer_auth_response_status of this ThreeDSecure.

        The 3D Secure entry Auth Response Status.

        :param payer_auth_response_status: The payer_auth_response_status of this ThreeDSecure.
        :type payer_auth_response_status: str
        """
        allowed_values = ["Y", "N", "U", "A"]  # noqa: E501
        if payer_auth_response_status not in allowed_values:
            raise ValueError(
                "Invalid value for `payer_auth_response_status` ({0}), must be one of {1}"
                .format(payer_auth_response_status, allowed_values)
            )

        self._payer_auth_response_status = payer_auth_response_status

    @property
    def payment_card_id(self):
        """Gets the payment_card_id of this ThreeDSecure.

        Related payment card ID.

        :return: The payment_card_id of this ThreeDSecure.
        :rtype: str
        """
        return self._payment_card_id

    @payment_card_id.setter
    def payment_card_id(self, payment_card_id):
        """Sets the payment_card_id of this ThreeDSecure.

        Related payment card ID.

        :param payment_card_id: The payment_card_id of this ThreeDSecure.
        :type payment_card_id: str
        """
        if payment_card_id is None:
            raise ValueError("Invalid value for `payment_card_id`, must not be `None`")
        if payment_card_id is not None and len(payment_card_id) > 50:
            raise ValueError("Invalid value for `payment_card_id`, length must be less than or equal to `50`")

        self._payment_card_id = payment_card_id

    @property
    def signature_verification(self):
        """Gets the signature_verification of this ThreeDSecure.

        If signature was verified.

        :return: The signature_verification of this ThreeDSecure.
        :rtype: str
        """
        return self._signature_verification

    @signature_verification.setter
    def signature_verification(self, signature_verification):
        """Sets the signature_verification of this ThreeDSecure.

        If signature was verified.

        :param signature_verification: The signature_verification of this ThreeDSecure.
        :type signature_verification: str
        """
        allowed_values = ["Y", "N"]  # noqa: E501
        if signature_verification not in allowed_values:
            raise ValueError(
                "Invalid value for `signature_verification` ({0}), must be one of {1}"
                .format(signature_verification, allowed_values)
            )

        self._signature_verification = signature_verification

    @property
    def website_id(self):
        """Gets the website_id of this ThreeDSecure.

        Related Website ID.

        :return: The website_id of this ThreeDSecure.
        :rtype: str
        """
        return self._website_id

    @website_id.setter
    def website_id(self, website_id):
        """Sets the website_id of this ThreeDSecure.

        Related Website ID.

        :param website_id: The website_id of this ThreeDSecure.
        :type website_id: str
        """
        if website_id is None:
            raise ValueError("Invalid value for `website_id`, must not be `None`")
        if website_id is not None and len(website_id) > 50:
            raise ValueError("Invalid value for `website_id`, length must be less than or equal to `50`")

        self._website_id = website_id

    @property
    def xid(self):
        """Gets the xid of this ThreeDSecure.

        The 3D Secure entry transaction Id.

        :return: The xid of this ThreeDSecure.
        :rtype: str
        """
        return self._xid

    @xid.setter
    def xid(self, xid):
        """Sets the xid of this ThreeDSecure.

        The 3D Secure entry transaction Id.

        :param xid: The xid of this ThreeDSecure.
        :type xid: str
        """

        self._xid = xid
