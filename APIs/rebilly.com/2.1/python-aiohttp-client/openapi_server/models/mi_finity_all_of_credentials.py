# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class MiFinityAllOfCredentials(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_holder_id: str=None, api_key: str=None, mifinity_account_number: str=None):
        """MiFinityAllOfCredentials - a model defined in OpenAPI

        :param account_holder_id: The account_holder_id of this MiFinityAllOfCredentials.
        :param api_key: The api_key of this MiFinityAllOfCredentials.
        :param mifinity_account_number: The mifinity_account_number of this MiFinityAllOfCredentials.
        """
        self.openapi_types = {
            'account_holder_id': str,
            'api_key': str,
            'mifinity_account_number': str
        }

        self.attribute_map = {
            'account_holder_id': 'accountHolderId',
            'api_key': 'apiKey',
            'mifinity_account_number': 'mifinityAccountNumber'
        }

        self._account_holder_id = account_holder_id
        self._api_key = api_key
        self._mifinity_account_number = mifinity_account_number

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MiFinityAllOfCredentials':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MiFinity_allOf_credentials of this MiFinityAllOfCredentials.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_holder_id(self):
        """Gets the account_holder_id of this MiFinityAllOfCredentials.


        :return: The account_holder_id of this MiFinityAllOfCredentials.
        :rtype: str
        """
        return self._account_holder_id

    @account_holder_id.setter
    def account_holder_id(self, account_holder_id):
        """Sets the account_holder_id of this MiFinityAllOfCredentials.


        :param account_holder_id: The account_holder_id of this MiFinityAllOfCredentials.
        :type account_holder_id: str
        """
        if account_holder_id is None:
            raise ValueError("Invalid value for `account_holder_id`, must not be `None`")

        self._account_holder_id = account_holder_id

    @property
    def api_key(self):
        """Gets the api_key of this MiFinityAllOfCredentials.


        :return: The api_key of this MiFinityAllOfCredentials.
        :rtype: str
        """
        return self._api_key

    @api_key.setter
    def api_key(self, api_key):
        """Sets the api_key of this MiFinityAllOfCredentials.


        :param api_key: The api_key of this MiFinityAllOfCredentials.
        :type api_key: str
        """
        if api_key is None:
            raise ValueError("Invalid value for `api_key`, must not be `None`")

        self._api_key = api_key

    @property
    def mifinity_account_number(self):
        """Gets the mifinity_account_number of this MiFinityAllOfCredentials.


        :return: The mifinity_account_number of this MiFinityAllOfCredentials.
        :rtype: str
        """
        return self._mifinity_account_number

    @mifinity_account_number.setter
    def mifinity_account_number(self, mifinity_account_number):
        """Sets the mifinity_account_number of this MiFinityAllOfCredentials.


        :param mifinity_account_number: The mifinity_account_number of this MiFinityAllOfCredentials.
        :type mifinity_account_number: str
        """
        if mifinity_account_number is None:
            raise ValueError("Invalid value for `mifinity_account_number`, must not be `None`")

        self._mifinity_account_number = mifinity_account_number
