# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.attachment_embedded_inner import AttachmentEmbeddedInner
from openapi_server.models.attachment_links_inner import AttachmentLinksInner
from openapi_server import util


class Attachment(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, embedded: List[AttachmentEmbeddedInner]=None, links: List[AttachmentLinksInner]=None, created_time: datetime=None, description: str=None, file_id: str=None, id: str=None, name: str=None, related_id: str=None, related_type: str=None, updated_time: datetime=None):
        """Attachment - a model defined in OpenAPI

        :param embedded: The embedded of this Attachment.
        :param links: The links of this Attachment.
        :param created_time: The created_time of this Attachment.
        :param description: The description of this Attachment.
        :param file_id: The file_id of this Attachment.
        :param id: The id of this Attachment.
        :param name: The name of this Attachment.
        :param related_id: The related_id of this Attachment.
        :param related_type: The related_type of this Attachment.
        :param updated_time: The updated_time of this Attachment.
        """
        self.openapi_types = {
            'embedded': List[AttachmentEmbeddedInner],
            'links': List[AttachmentLinksInner],
            'created_time': datetime,
            'description': str,
            'file_id': str,
            'id': str,
            'name': str,
            'related_id': str,
            'related_type': str,
            'updated_time': datetime
        }

        self.attribute_map = {
            'embedded': '_embedded',
            'links': '_links',
            'created_time': 'createdTime',
            'description': 'description',
            'file_id': 'fileId',
            'id': 'id',
            'name': 'name',
            'related_id': 'relatedId',
            'related_type': 'relatedType',
            'updated_time': 'updatedTime'
        }

        self._embedded = embedded
        self._links = links
        self._created_time = created_time
        self._description = description
        self._file_id = file_id
        self._id = id
        self._name = name
        self._related_id = related_id
        self._related_type = related_type
        self._updated_time = updated_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Attachment':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Attachment of this Attachment.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def embedded(self):
        """Gets the embedded of this Attachment.

        Any embedded objects available that are requested by the `expand` querystring parameter.

        :return: The embedded of this Attachment.
        :rtype: List[AttachmentEmbeddedInner]
        """
        return self._embedded

    @embedded.setter
    def embedded(self, embedded):
        """Sets the embedded of this Attachment.

        Any embedded objects available that are requested by the `expand` querystring parameter.

        :param embedded: The embedded of this Attachment.
        :type embedded: List[AttachmentEmbeddedInner]
        """
        if embedded is not None and len(embedded) < 1:
            raise ValueError("Invalid value for `embedded`, number of items must be greater than or equal to `1`")

        self._embedded = embedded

    @property
    def links(self):
        """Gets the links of this Attachment.

        The links related to resource.

        :return: The links of this Attachment.
        :rtype: List[AttachmentLinksInner]
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this Attachment.

        The links related to resource.

        :param links: The links of this Attachment.
        :type links: List[AttachmentLinksInner]
        """
        if links is not None and len(links) < 3:
            raise ValueError("Invalid value for `links`, number of items must be greater than or equal to `3`")

        self._links = links

    @property
    def created_time(self):
        """Gets the created_time of this Attachment.

        Creation date/time.

        :return: The created_time of this Attachment.
        :rtype: datetime
        """
        return self._created_time

    @created_time.setter
    def created_time(self, created_time):
        """Sets the created_time of this Attachment.

        Creation date/time.

        :param created_time: The created_time of this Attachment.
        :type created_time: datetime
        """

        self._created_time = created_time

    @property
    def description(self):
        """Gets the description of this Attachment.

        The Attachment description.

        :return: The description of this Attachment.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Attachment.

        The Attachment description.

        :param description: The description of this Attachment.
        :type description: str
        """

        self._description = description

    @property
    def file_id(self):
        """Gets the file_id of this Attachment.

        Linked File object id.

        :return: The file_id of this Attachment.
        :rtype: str
        """
        return self._file_id

    @file_id.setter
    def file_id(self, file_id):
        """Sets the file_id of this Attachment.

        Linked File object id.

        :param file_id: The file_id of this Attachment.
        :type file_id: str
        """
        if file_id is None:
            raise ValueError("Invalid value for `file_id`, must not be `None`")

        self._file_id = file_id

    @property
    def id(self):
        """Gets the id of this Attachment.

        The resource ID. Defaults to UUID v4.

        :return: The id of this Attachment.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Attachment.

        The resource ID. Defaults to UUID v4.

        :param id: The id of this Attachment.
        :type id: str
        """
        if id is not None and len(id) > 50:
            raise ValueError("Invalid value for `id`, length must be less than or equal to `50`")

        self._id = id

    @property
    def name(self):
        """Gets the name of this Attachment.

        The Original Attachment name.

        :return: The name of this Attachment.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Attachment.

        The Original Attachment name.

        :param name: The name of this Attachment.
        :type name: str
        """

        self._name = name

    @property
    def related_id(self):
        """Gets the related_id of this Attachment.

        Linked object Id.

        :return: The related_id of this Attachment.
        :rtype: str
        """
        return self._related_id

    @related_id.setter
    def related_id(self, related_id):
        """Sets the related_id of this Attachment.

        Linked object Id.

        :param related_id: The related_id of this Attachment.
        :type related_id: str
        """
        if related_id is None:
            raise ValueError("Invalid value for `related_id`, must not be `None`")

        self._related_id = related_id

    @property
    def related_type(self):
        """Gets the related_type of this Attachment.

        Linked object type.

        :return: The related_type of this Attachment.
        :rtype: str
        """
        return self._related_type

    @related_type.setter
    def related_type(self, related_type):
        """Sets the related_type of this Attachment.

        Linked object type.

        :param related_type: The related_type of this Attachment.
        :type related_type: str
        """
        allowed_values = ["customer", "dispute", "gateway-timeline-comment", "invoice", "organization", "payment", "plan", "product", "subscription", "transaction", "customer-timeline-comment", "transaction-timeline-comment", "order-timeline-comment"]  # noqa: E501
        if related_type not in allowed_values:
            raise ValueError(
                "Invalid value for `related_type` ({0}), must be one of {1}"
                .format(related_type, allowed_values)
            )

        self._related_type = related_type

    @property
    def updated_time(self):
        """Gets the updated_time of this Attachment.

        Latest update date/time.

        :return: The updated_time of this Attachment.
        :rtype: datetime
        """
        return self._updated_time

    @updated_time.setter
    def updated_time(self, updated_time):
        """Sets the updated_time of this Attachment.

        Latest update date/time.

        :param updated_time: The updated_time of this Attachment.
        :type updated_time: datetime
        """

        self._updated_time = updated_time
