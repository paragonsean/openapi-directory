# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PanamericanAllOfSettings(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, convert_to_ascii: bool=None, extra_step: bool=None):
        """PanamericanAllOfSettings - a model defined in OpenAPI

        :param convert_to_ascii: The convert_to_ascii of this PanamericanAllOfSettings.
        :param extra_step: The extra_step of this PanamericanAllOfSettings.
        """
        self.openapi_types = {
            'convert_to_ascii': bool,
            'extra_step': bool
        }

        self.attribute_map = {
            'convert_to_ascii': 'convertToAscii',
            'extra_step': 'extraStep'
        }

        self._convert_to_ascii = convert_to_ascii
        self._extra_step = extra_step

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PanamericanAllOfSettings':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Panamerican_allOf_settings of this PanamericanAllOfSettings.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def convert_to_ascii(self):
        """Gets the convert_to_ascii of this PanamericanAllOfSettings.

        Will convert all chars to ascii.

        :return: The convert_to_ascii of this PanamericanAllOfSettings.
        :rtype: bool
        """
        return self._convert_to_ascii

    @convert_to_ascii.setter
    def convert_to_ascii(self, convert_to_ascii):
        """Sets the convert_to_ascii of this PanamericanAllOfSettings.

        Will convert all chars to ascii.

        :param convert_to_ascii: The convert_to_ascii of this PanamericanAllOfSettings.
        :type convert_to_ascii: bool
        """

        self._convert_to_ascii = convert_to_ascii

    @property
    def extra_step(self):
        """Gets the extra_step of this PanamericanAllOfSettings.

        Show extra step for user to enter their ID number.

        :return: The extra_step of this PanamericanAllOfSettings.
        :rtype: bool
        """
        return self._extra_step

    @extra_step.setter
    def extra_step(self, extra_step):
        """Sets the extra_step of this PanamericanAllOfSettings.

        Show extra step for user to enter their ID number.

        :param extra_step: The extra_step of this PanamericanAllOfSettings.
        :type extra_step: bool
        """
        if extra_step is None:
            raise ValueError("Invalid value for `extra_step`, must not be `None`")

        self._extra_step = extra_step
