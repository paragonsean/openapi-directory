# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.timeline_action import TimelineAction
from openapi_server import util


class ResendEmail(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, action: str=None, message_id: str=None):
        """ResendEmail - a model defined in OpenAPI

        :param action: The action of this ResendEmail.
        :param message_id: The message_id of this ResendEmail.
        """
        self.openapi_types = {
            'action': str,
            'message_id': str
        }

        self.attribute_map = {
            'action': 'action',
            'message_id': 'messageId'
        }

        self._action = action
        self._message_id = message_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ResendEmail':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The resend-email of this ResendEmail.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def action(self):
        """Gets the action of this ResendEmail.


        :return: The action of this ResendEmail.
        :rtype: str
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this ResendEmail.


        :param action: The action of this ResendEmail.
        :type action: str
        """
        allowed_values = ["resend-email", "redemption-cancel", "ruleset-restore"]  # noqa: E501
        if action not in allowed_values:
            raise ValueError(
                "Invalid value for `action` ({0}), must be one of {1}"
                .format(action, allowed_values)
            )

        self._action = action

    @property
    def message_id(self):
        """Gets the message_id of this ResendEmail.

        The resource ID. Defaults to UUID v4.

        :return: The message_id of this ResendEmail.
        :rtype: str
        """
        return self._message_id

    @message_id.setter
    def message_id(self, message_id):
        """Sets the message_id of this ResendEmail.

        The resource ID. Defaults to UUID v4.

        :param message_id: The message_id of this ResendEmail.
        :type message_id: str
        """
        if message_id is not None and len(message_id) > 50:
            raise ValueError("Invalid value for `message_id`, length must be less than or equal to `50`")

        self._message_id = message_id
