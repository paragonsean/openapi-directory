# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.plan_price_formula import PlanPriceFormula
from openapi_server.models.stairstep_all_of_brackets import StairstepAllOfBrackets
from openapi_server import util


class Stairstep(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, formula: str=None, brackets: List[StairstepAllOfBrackets]=None):
        """Stairstep - a model defined in OpenAPI

        :param formula: The formula of this Stairstep.
        :param brackets: The brackets of this Stairstep.
        """
        self.openapi_types = {
            'formula': str,
            'brackets': List[StairstepAllOfBrackets]
        }

        self.attribute_map = {
            'formula': 'formula',
            'brackets': 'brackets'
        }

        self._formula = formula
        self._brackets = brackets

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Stairstep':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The stairstep of this Stairstep.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def formula(self):
        """Gets the formula of this Stairstep.

        The price formula determines what algorithm is used to calculate the invoice price based on a few factors, - the quantity in the order (which may be variable if usage pricing, otherwise determined when creating the order) - the price brackets data  To determine which formula is correct, please see the price formula documentation. 

        :return: The formula of this Stairstep.
        :rtype: str
        """
        return self._formula

    @formula.setter
    def formula(self, formula):
        """Sets the formula of this Stairstep.

        The price formula determines what algorithm is used to calculate the invoice price based on a few factors, - the quantity in the order (which may be variable if usage pricing, otherwise determined when creating the order) - the price brackets data  To determine which formula is correct, please see the price formula documentation. 

        :param formula: The formula of this Stairstep.
        :type formula: str
        """
        allowed_values = ["fixed-fee", "flat-rate", "stairstep", "tiered", "volume"]  # noqa: E501
        if formula not in allowed_values:
            raise ValueError(
                "Invalid value for `formula` ({0}), must be one of {1}"
                .format(formula, allowed_values)
            )

        self._formula = formula

    @property
    def brackets(self):
        """Gets the brackets of this Stairstep.

        The price brackets, along with the price formula, is used to calculate the amount to charge for the product on this plan on the invoice.  The \"stairstep\" example:  Price total | Max quantity | Description ------------|--------------|------------ $5          | 1            | 1 $13         | 5            | 2 to 5 $30         | null         | 6 or more  If someone bought 1 apple, it would be $5.  If someone bought 2 apples, it would be $13. For 2 to 5 apples, the price is $13 in any case. 

        :return: The brackets of this Stairstep.
        :rtype: List[StairstepAllOfBrackets]
        """
        return self._brackets

    @brackets.setter
    def brackets(self, brackets):
        """Sets the brackets of this Stairstep.

        The price brackets, along with the price formula, is used to calculate the amount to charge for the product on this plan on the invoice.  The \"stairstep\" example:  Price total | Max quantity | Description ------------|--------------|------------ $5          | 1            | 1 $13         | 5            | 2 to 5 $30         | null         | 6 or more  If someone bought 1 apple, it would be $5.  If someone bought 2 apples, it would be $13. For 2 to 5 apples, the price is $13 in any case. 

        :param brackets: The brackets of this Stairstep.
        :type brackets: List[StairstepAllOfBrackets]
        """
        if brackets is None:
            raise ValueError("Invalid value for `brackets`, must not be `None`")
        if brackets is not None and len(brackets) < 1:
            raise ValueError("Invalid value for `brackets`, number of items must be greater than or equal to `1`")

        self._brackets = brackets
