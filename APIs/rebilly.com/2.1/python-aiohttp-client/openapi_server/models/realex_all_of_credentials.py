# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RealexAllOfCredentials(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account: str=None, merchant_id: str=None, rebate_password: str=None, secret_key: str=None):
        """RealexAllOfCredentials - a model defined in OpenAPI

        :param account: The account of this RealexAllOfCredentials.
        :param merchant_id: The merchant_id of this RealexAllOfCredentials.
        :param rebate_password: The rebate_password of this RealexAllOfCredentials.
        :param secret_key: The secret_key of this RealexAllOfCredentials.
        """
        self.openapi_types = {
            'account': str,
            'merchant_id': str,
            'rebate_password': str,
            'secret_key': str
        }

        self.attribute_map = {
            'account': 'account',
            'merchant_id': 'merchantId',
            'rebate_password': 'rebatePassword',
            'secret_key': 'secretKey'
        }

        self._account = account
        self._merchant_id = merchant_id
        self._rebate_password = rebate_password
        self._secret_key = secret_key

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RealexAllOfCredentials':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Realex_allOf_credentials of this RealexAllOfCredentials.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account(self):
        """Gets the account of this RealexAllOfCredentials.

        Realex Gateway account.

        :return: The account of this RealexAllOfCredentials.
        :rtype: str
        """
        return self._account

    @account.setter
    def account(self, account):
        """Sets the account of this RealexAllOfCredentials.

        Realex Gateway account.

        :param account: The account of this RealexAllOfCredentials.
        :type account: str
        """
        if account is None:
            raise ValueError("Invalid value for `account`, must not be `None`")

        self._account = account

    @property
    def merchant_id(self):
        """Gets the merchant_id of this RealexAllOfCredentials.

        Realex Gateway merchant id.

        :return: The merchant_id of this RealexAllOfCredentials.
        :rtype: str
        """
        return self._merchant_id

    @merchant_id.setter
    def merchant_id(self, merchant_id):
        """Sets the merchant_id of this RealexAllOfCredentials.

        Realex Gateway merchant id.

        :param merchant_id: The merchant_id of this RealexAllOfCredentials.
        :type merchant_id: str
        """
        if merchant_id is None:
            raise ValueError("Invalid value for `merchant_id`, must not be `None`")

        self._merchant_id = merchant_id

    @property
    def rebate_password(self):
        """Gets the rebate_password of this RealexAllOfCredentials.

        Realex Gateway rebate password.

        :return: The rebate_password of this RealexAllOfCredentials.
        :rtype: str
        """
        return self._rebate_password

    @rebate_password.setter
    def rebate_password(self, rebate_password):
        """Sets the rebate_password of this RealexAllOfCredentials.

        Realex Gateway rebate password.

        :param rebate_password: The rebate_password of this RealexAllOfCredentials.
        :type rebate_password: str
        """
        if rebate_password is None:
            raise ValueError("Invalid value for `rebate_password`, must not be `None`")

        self._rebate_password = rebate_password

    @property
    def secret_key(self):
        """Gets the secret_key of this RealexAllOfCredentials.

        Realex Gateway secret key.

        :return: The secret_key of this RealexAllOfCredentials.
        :rtype: str
        """
        return self._secret_key

    @secret_key.setter
    def secret_key(self, secret_key):
        """Sets the secret_key of this RealexAllOfCredentials.

        Realex Gateway secret key.

        :param secret_key: The secret_key of this RealexAllOfCredentials.
        :type secret_key: str
        """
        if secret_key is None:
            raise ValueError("Invalid value for `secret_key`, must not be `None`")

        self._secret_key = secret_key
