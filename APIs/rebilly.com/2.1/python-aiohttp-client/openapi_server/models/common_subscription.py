# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.common_subscription_items_inner import CommonSubscriptionItemsInner
from openapi_server.models.contact_object import ContactObject
from openapi_server import util


class CommonSubscription(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, activation_time: datetime=None, billing_address: ContactObject=None, billing_status: str=None, coupon_ids: List[str]=None, delivery_address: ContactObject=None, id: str=None, initial_invoice_id: str=None, items: List[CommonSubscriptionItemsInner]=None, order_type: str='subscription-order', po_number: str=None, recent_invoice_id: str=None, void_time: datetime=None, website_id: str=None):
        """CommonSubscription - a model defined in OpenAPI

        :param activation_time: The activation_time of this CommonSubscription.
        :param billing_address: The billing_address of this CommonSubscription.
        :param billing_status: The billing_status of this CommonSubscription.
        :param coupon_ids: The coupon_ids of this CommonSubscription.
        :param delivery_address: The delivery_address of this CommonSubscription.
        :param id: The id of this CommonSubscription.
        :param initial_invoice_id: The initial_invoice_id of this CommonSubscription.
        :param items: The items of this CommonSubscription.
        :param order_type: The order_type of this CommonSubscription.
        :param po_number: The po_number of this CommonSubscription.
        :param recent_invoice_id: The recent_invoice_id of this CommonSubscription.
        :param void_time: The void_time of this CommonSubscription.
        :param website_id: The website_id of this CommonSubscription.
        """
        self.openapi_types = {
            'activation_time': datetime,
            'billing_address': ContactObject,
            'billing_status': str,
            'coupon_ids': List[str],
            'delivery_address': ContactObject,
            'id': str,
            'initial_invoice_id': str,
            'items': List[CommonSubscriptionItemsInner],
            'order_type': str,
            'po_number': str,
            'recent_invoice_id': str,
            'void_time': datetime,
            'website_id': str
        }

        self.attribute_map = {
            'activation_time': 'activationTime',
            'billing_address': 'billingAddress',
            'billing_status': 'billingStatus',
            'coupon_ids': 'couponIds',
            'delivery_address': 'deliveryAddress',
            'id': 'id',
            'initial_invoice_id': 'initialInvoiceId',
            'items': 'items',
            'order_type': 'orderType',
            'po_number': 'poNumber',
            'recent_invoice_id': 'recentInvoiceId',
            'void_time': 'voidTime',
            'website_id': 'websiteId'
        }

        self._activation_time = activation_time
        self._billing_address = billing_address
        self._billing_status = billing_status
        self._coupon_ids = coupon_ids
        self._delivery_address = delivery_address
        self._id = id
        self._initial_invoice_id = initial_invoice_id
        self._items = items
        self._order_type = order_type
        self._po_number = po_number
        self._recent_invoice_id = recent_invoice_id
        self._void_time = void_time
        self._website_id = website_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CommonSubscription':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CommonSubscription of this CommonSubscription.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def activation_time(self):
        """Gets the activation_time of this CommonSubscription.

        Order activation time.

        :return: The activation_time of this CommonSubscription.
        :rtype: datetime
        """
        return self._activation_time

    @activation_time.setter
    def activation_time(self, activation_time):
        """Sets the activation_time of this CommonSubscription.

        Order activation time.

        :param activation_time: The activation_time of this CommonSubscription.
        :type activation_time: datetime
        """

        self._activation_time = activation_time

    @property
    def billing_address(self):
        """Gets the billing_address of this CommonSubscription.

        Order billing address.

        :return: The billing_address of this CommonSubscription.
        :rtype: ContactObject
        """
        return self._billing_address

    @billing_address.setter
    def billing_address(self, billing_address):
        """Sets the billing_address of this CommonSubscription.

        Order billing address.

        :param billing_address: The billing_address of this CommonSubscription.
        :type billing_address: ContactObject
        """

        self._billing_address = billing_address

    @property
    def billing_status(self):
        """Gets the billing_status of this CommonSubscription.

        The billing status of the most recent invoice.  It may help you determine if you should change the service status such as suspending the service. 

        :return: The billing_status of this CommonSubscription.
        :rtype: str
        """
        return self._billing_status

    @billing_status.setter
    def billing_status(self, billing_status):
        """Sets the billing_status of this CommonSubscription.

        The billing status of the most recent invoice.  It may help you determine if you should change the service status such as suspending the service. 

        :param billing_status: The billing_status of this CommonSubscription.
        :type billing_status: str
        """
        allowed_values = ["unpaid", "past-due", "delinquent", "paid", "voided", "refunded", "disputed", "voided"]  # noqa: E501
        if billing_status not in allowed_values:
            raise ValueError(
                "Invalid value for `billing_status` ({0}), must be one of {1}"
                .format(billing_status, allowed_values)
            )

        self._billing_status = billing_status

    @property
    def coupon_ids(self):
        """Gets the coupon_ids of this CommonSubscription.

        A list of coupons to redeem on the customer and restrict to this subscription. Read more about [coupons here](https://docs.rebilly.com/docs/dashboard/marketing/coupons-and-discounts/).  This parameter respects the following logic:  - When not passed then applied coupons will not be changed.  - When empty array passed then all applied coupon redemptions will be canceled.  - When list of coupons is passed then not applied yet coupons will be applied, already applied coupons will not change their state, applied coupons that are not presented in passed list will be canceled.  If list of applied coupons on pending order will be changed due to this param during update order,  Invoice for the order will be reissued. 

        :return: The coupon_ids of this CommonSubscription.
        :rtype: List[str]
        """
        return self._coupon_ids

    @coupon_ids.setter
    def coupon_ids(self, coupon_ids):
        """Sets the coupon_ids of this CommonSubscription.

        A list of coupons to redeem on the customer and restrict to this subscription. Read more about [coupons here](https://docs.rebilly.com/docs/dashboard/marketing/coupons-and-discounts/).  This parameter respects the following logic:  - When not passed then applied coupons will not be changed.  - When empty array passed then all applied coupon redemptions will be canceled.  - When list of coupons is passed then not applied yet coupons will be applied, already applied coupons will not change their state, applied coupons that are not presented in passed list will be canceled.  If list of applied coupons on pending order will be changed due to this param during update order,  Invoice for the order will be reissued. 

        :param coupon_ids: The coupon_ids of this CommonSubscription.
        :type coupon_ids: List[str]
        """

        self._coupon_ids = coupon_ids

    @property
    def delivery_address(self):
        """Gets the delivery_address of this CommonSubscription.

        Order delivery address.

        :return: The delivery_address of this CommonSubscription.
        :rtype: ContactObject
        """
        return self._delivery_address

    @delivery_address.setter
    def delivery_address(self, delivery_address):
        """Sets the delivery_address of this CommonSubscription.

        Order delivery address.

        :param delivery_address: The delivery_address of this CommonSubscription.
        :type delivery_address: ContactObject
        """

        self._delivery_address = delivery_address

    @property
    def id(self):
        """Gets the id of this CommonSubscription.

        The order identifier string.

        :return: The id of this CommonSubscription.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CommonSubscription.

        The order identifier string.

        :param id: The id of this CommonSubscription.
        :type id: str
        """
        if id is not None and len(id) > 50:
            raise ValueError("Invalid value for `id`, length must be less than or equal to `50`")

        self._id = id

    @property
    def initial_invoice_id(self):
        """Gets the initial_invoice_id of this CommonSubscription.

        The initial invoice identifier string.

        :return: The initial_invoice_id of this CommonSubscription.
        :rtype: str
        """
        return self._initial_invoice_id

    @initial_invoice_id.setter
    def initial_invoice_id(self, initial_invoice_id):
        """Sets the initial_invoice_id of this CommonSubscription.

        The initial invoice identifier string.

        :param initial_invoice_id: The initial_invoice_id of this CommonSubscription.
        :type initial_invoice_id: str
        """
        if initial_invoice_id is not None and len(initial_invoice_id) > 50:
            raise ValueError("Invalid value for `initial_invoice_id`, length must be less than or equal to `50`")

        self._initial_invoice_id = initial_invoice_id

    @property
    def items(self):
        """Gets the items of this CommonSubscription.


        :return: The items of this CommonSubscription.
        :rtype: List[CommonSubscriptionItemsInner]
        """
        return self._items

    @items.setter
    def items(self, items):
        """Sets the items of this CommonSubscription.


        :param items: The items of this CommonSubscription.
        :type items: List[CommonSubscriptionItemsInner]
        """
        if items is not None and len(items) < 1:
            raise ValueError("Invalid value for `items`, number of items must be greater than or equal to `1`")

        self._items = items

    @property
    def order_type(self):
        """Gets the order_type of this CommonSubscription.

        Specifies the type of order, a subscription or a one-time purchase. 

        :return: The order_type of this CommonSubscription.
        :rtype: str
        """
        return self._order_type

    @order_type.setter
    def order_type(self, order_type):
        """Sets the order_type of this CommonSubscription.

        Specifies the type of order, a subscription or a one-time purchase. 

        :param order_type: The order_type of this CommonSubscription.
        :type order_type: str
        """
        allowed_values = ["subscription-order", "one-time-order"]  # noqa: E501
        if order_type not in allowed_values:
            raise ValueError(
                "Invalid value for `order_type` ({0}), must be one of {1}"
                .format(order_type, allowed_values)
            )

        self._order_type = order_type

    @property
    def po_number(self):
        """Gets the po_number of this CommonSubscription.

        Purchase order number, will be displayed on the issued invoices.

        :return: The po_number of this CommonSubscription.
        :rtype: str
        """
        return self._po_number

    @po_number.setter
    def po_number(self, po_number):
        """Sets the po_number of this CommonSubscription.

        Purchase order number, will be displayed on the issued invoices.

        :param po_number: The po_number of this CommonSubscription.
        :type po_number: str
        """

        self._po_number = po_number

    @property
    def recent_invoice_id(self):
        """Gets the recent_invoice_id of this CommonSubscription.

        Most recently issued invoice identifier string. It might not be `paid` yet.

        :return: The recent_invoice_id of this CommonSubscription.
        :rtype: str
        """
        return self._recent_invoice_id

    @recent_invoice_id.setter
    def recent_invoice_id(self, recent_invoice_id):
        """Sets the recent_invoice_id of this CommonSubscription.

        Most recently issued invoice identifier string. It might not be `paid` yet.

        :param recent_invoice_id: The recent_invoice_id of this CommonSubscription.
        :type recent_invoice_id: str
        """
        if recent_invoice_id is not None and len(recent_invoice_id) > 50:
            raise ValueError("Invalid value for `recent_invoice_id`, length must be less than or equal to `50`")

        self._recent_invoice_id = recent_invoice_id

    @property
    def void_time(self):
        """Gets the void_time of this CommonSubscription.

        Order void time.

        :return: The void_time of this CommonSubscription.
        :rtype: datetime
        """
        return self._void_time

    @void_time.setter
    def void_time(self, void_time):
        """Sets the void_time of this CommonSubscription.

        Order void time.

        :param void_time: The void_time of this CommonSubscription.
        :type void_time: datetime
        """

        self._void_time = void_time

    @property
    def website_id(self):
        """Gets the website_id of this CommonSubscription.

        The website identifier string.

        :return: The website_id of this CommonSubscription.
        :rtype: str
        """
        return self._website_id

    @website_id.setter
    def website_id(self, website_id):
        """Sets the website_id of this CommonSubscription.

        The website identifier string.

        :param website_id: The website_id of this CommonSubscription.
        :type website_id: str
        """
        if website_id is not None and len(website_id) > 50:
            raise ValueError("Invalid value for `website_id`, length must be less than or equal to `50`")

        self._website_id = website_id
