# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class EcoPayzAllOfSettings(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, valid_currency: str=None):
        """EcoPayzAllOfSettings - a model defined in OpenAPI

        :param valid_currency: The valid_currency of this EcoPayzAllOfSettings.
        """
        self.openapi_types = {
            'valid_currency': str
        }

        self.attribute_map = {
            'valid_currency': 'validCurrency'
        }

        self._valid_currency = valid_currency

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EcoPayzAllOfSettings':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ecoPayz_allOf_settings of this EcoPayzAllOfSettings.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def valid_currency(self):
        """Gets the valid_currency of this EcoPayzAllOfSettings.

        Three letter currency code.

        :return: The valid_currency of this EcoPayzAllOfSettings.
        :rtype: str
        """
        return self._valid_currency

    @valid_currency.setter
    def valid_currency(self, valid_currency):
        """Sets the valid_currency of this EcoPayzAllOfSettings.

        Three letter currency code.

        :param valid_currency: The valid_currency of this EcoPayzAllOfSettings.
        :type valid_currency: str
        """
        allowed_values = ["CAD", "EUR", "GBP", "USD"]  # noqa: E501
        if valid_currency not in allowed_values:
            raise ValueError(
                "Invalid value for `valid_currency` ({0}), must be one of {1}"
                .format(valid_currency, allowed_values)
            )

        self._valid_currency = valid_currency
