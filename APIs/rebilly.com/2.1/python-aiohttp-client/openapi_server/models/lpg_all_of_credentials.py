# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class LPGAllOfCredentials(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, payout_password: str=None, payout_username: str=None, public_key: str=None, secure_key: str=None):
        """LPGAllOfCredentials - a model defined in OpenAPI

        :param payout_password: The payout_password of this LPGAllOfCredentials.
        :param payout_username: The payout_username of this LPGAllOfCredentials.
        :param public_key: The public_key of this LPGAllOfCredentials.
        :param secure_key: The secure_key of this LPGAllOfCredentials.
        """
        self.openapi_types = {
            'payout_password': str,
            'payout_username': str,
            'public_key': str,
            'secure_key': str
        }

        self.attribute_map = {
            'payout_password': 'payoutPassword',
            'payout_username': 'payoutUsername',
            'public_key': 'publicKey',
            'secure_key': 'secureKey'
        }

        self._payout_password = payout_password
        self._payout_username = payout_username
        self._public_key = public_key
        self._secure_key = secure_key

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LPGAllOfCredentials':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LPG_allOf_credentials of this LPGAllOfCredentials.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def payout_password(self):
        """Gets the payout_password of this LPGAllOfCredentials.

        LPG payout account password.

        :return: The payout_password of this LPGAllOfCredentials.
        :rtype: str
        """
        return self._payout_password

    @payout_password.setter
    def payout_password(self, payout_password):
        """Sets the payout_password of this LPGAllOfCredentials.

        LPG payout account password.

        :param payout_password: The payout_password of this LPGAllOfCredentials.
        :type payout_password: str
        """

        self._payout_password = payout_password

    @property
    def payout_username(self):
        """Gets the payout_username of this LPGAllOfCredentials.

        LPG payout account username.

        :return: The payout_username of this LPGAllOfCredentials.
        :rtype: str
        """
        return self._payout_username

    @payout_username.setter
    def payout_username(self, payout_username):
        """Sets the payout_username of this LPGAllOfCredentials.

        LPG payout account username.

        :param payout_username: The payout_username of this LPGAllOfCredentials.
        :type payout_username: str
        """

        self._payout_username = payout_username

    @property
    def public_key(self):
        """Gets the public_key of this LPGAllOfCredentials.

        LPG public API key.

        :return: The public_key of this LPGAllOfCredentials.
        :rtype: str
        """
        return self._public_key

    @public_key.setter
    def public_key(self, public_key):
        """Sets the public_key of this LPGAllOfCredentials.

        LPG public API key.

        :param public_key: The public_key of this LPGAllOfCredentials.
        :type public_key: str
        """
        if public_key is None:
            raise ValueError("Invalid value for `public_key`, must not be `None`")

        self._public_key = public_key

    @property
    def secure_key(self):
        """Gets the secure_key of this LPGAllOfCredentials.

        LPG secure API key.

        :return: The secure_key of this LPGAllOfCredentials.
        :rtype: str
        """
        return self._secure_key

    @secure_key.setter
    def secure_key(self, secure_key):
        """Sets the secure_key of this LPGAllOfCredentials.

        LPG secure API key.

        :param secure_key: The secure_key of this LPGAllOfCredentials.
        :type secure_key: str
        """
        if secure_key is None:
            raise ValueError("Invalid value for `secure_key`, must not be `None`")

        self._secure_key = secure_key
