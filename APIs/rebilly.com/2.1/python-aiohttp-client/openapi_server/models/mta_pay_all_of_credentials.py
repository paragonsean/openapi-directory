# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class MtaPayAllOfCredentials(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_id: str=None, md5key: str=None, party_id: str=None):
        """MtaPayAllOfCredentials - a model defined in OpenAPI

        :param account_id: The account_id of this MtaPayAllOfCredentials.
        :param md5key: The md5key of this MtaPayAllOfCredentials.
        :param party_id: The party_id of this MtaPayAllOfCredentials.
        """
        self.openapi_types = {
            'account_id': str,
            'md5key': str,
            'party_id': str
        }

        self.attribute_map = {
            'account_id': 'accountId',
            'md5key': 'md5key',
            'party_id': 'partyId'
        }

        self._account_id = account_id
        self._md5key = md5key
        self._party_id = party_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MtaPayAllOfCredentials':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MtaPay_allOf_credentials of this MtaPayAllOfCredentials.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_id(self):
        """Gets the account_id of this MtaPayAllOfCredentials.

        MTA Pay Gateway account ID.

        :return: The account_id of this MtaPayAllOfCredentials.
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id):
        """Sets the account_id of this MtaPayAllOfCredentials.

        MTA Pay Gateway account ID.

        :param account_id: The account_id of this MtaPayAllOfCredentials.
        :type account_id: str
        """
        if account_id is None:
            raise ValueError("Invalid value for `account_id`, must not be `None`")

        self._account_id = account_id

    @property
    def md5key(self):
        """Gets the md5key of this MtaPayAllOfCredentials.

        MTA Pay Gateway md5key.

        :return: The md5key of this MtaPayAllOfCredentials.
        :rtype: str
        """
        return self._md5key

    @md5key.setter
    def md5key(self, md5key):
        """Sets the md5key of this MtaPayAllOfCredentials.

        MTA Pay Gateway md5key.

        :param md5key: The md5key of this MtaPayAllOfCredentials.
        :type md5key: str
        """
        if md5key is None:
            raise ValueError("Invalid value for `md5key`, must not be `None`")

        self._md5key = md5key

    @property
    def party_id(self):
        """Gets the party_id of this MtaPayAllOfCredentials.

        MTA Pay Gateway party ID.

        :return: The party_id of this MtaPayAllOfCredentials.
        :rtype: str
        """
        return self._party_id

    @party_id.setter
    def party_id(self, party_id):
        """Sets the party_id of this MtaPayAllOfCredentials.

        MTA Pay Gateway party ID.

        :param party_id: The party_id of this MtaPayAllOfCredentials.
        :type party_id: str
        """
        if party_id is None:
            raise ValueError("Invalid value for `party_id`, must not be `None`")

        self._party_id = party_id
