# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.acquirer_name import AcquirerName
from openapi_server.models.conekta_all_of_credentials import ConektaAllOfCredentials
from openapi_server.models.digital_wallets import DigitalWallets
from openapi_server.models.gateway_account import GatewayAccount
from openapi_server.models.gateway_account_links_inner import GatewayAccountLinksInner
from openapi_server.models.gateway_name import GatewayName
from openapi_server.models.payment_card_brand import PaymentCardBrand
from openapi_server.models.payment_method import PaymentMethod
import re
from openapi_server import util


class Conekta(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, links: List[GatewayAccountLinksInner]=None, accepted_currencies: List[str]=None, acquirer_name: AcquirerName=None, additional_filters: str=None, approval_window_ttl: int=3600, city_field: str=None, created_time: datetime=None, dcc_force_currency: str=None, dcc_markup: int=None, descriptor: str=None, digital_wallets: DigitalWallets=None, dynamic_descriptor: bool=False, excluded_dcc_quote_currencies: List[str]=None, gateway_name: GatewayName=None, id: str=None, is_down: bool=None, merchant_category_code: str='0000', method: PaymentMethod=None, monthly_limit: float=None, organization_id: str=None, payment_card_schemes: List[PaymentCardBrand]=None, reconciliation_window_enabled: bool=False, reconciliation_window_ttl: int=None, status: str=None, sticky: bool=True, three_d_secure: bool=False, timeout: int=None, token: str=None, updated_time: datetime=None, credentials: ConektaAllOfCredentials=None):
        """Conekta - a model defined in OpenAPI

        :param links: The links of this Conekta.
        :param accepted_currencies: The accepted_currencies of this Conekta.
        :param acquirer_name: The acquirer_name of this Conekta.
        :param additional_filters: The additional_filters of this Conekta.
        :param approval_window_ttl: The approval_window_ttl of this Conekta.
        :param city_field: The city_field of this Conekta.
        :param created_time: The created_time of this Conekta.
        :param dcc_force_currency: The dcc_force_currency of this Conekta.
        :param dcc_markup: The dcc_markup of this Conekta.
        :param descriptor: The descriptor of this Conekta.
        :param digital_wallets: The digital_wallets of this Conekta.
        :param dynamic_descriptor: The dynamic_descriptor of this Conekta.
        :param excluded_dcc_quote_currencies: The excluded_dcc_quote_currencies of this Conekta.
        :param gateway_name: The gateway_name of this Conekta.
        :param id: The id of this Conekta.
        :param is_down: The is_down of this Conekta.
        :param merchant_category_code: The merchant_category_code of this Conekta.
        :param method: The method of this Conekta.
        :param monthly_limit: The monthly_limit of this Conekta.
        :param organization_id: The organization_id of this Conekta.
        :param payment_card_schemes: The payment_card_schemes of this Conekta.
        :param reconciliation_window_enabled: The reconciliation_window_enabled of this Conekta.
        :param reconciliation_window_ttl: The reconciliation_window_ttl of this Conekta.
        :param status: The status of this Conekta.
        :param sticky: The sticky of this Conekta.
        :param three_d_secure: The three_d_secure of this Conekta.
        :param timeout: The timeout of this Conekta.
        :param token: The token of this Conekta.
        :param updated_time: The updated_time of this Conekta.
        :param credentials: The credentials of this Conekta.
        """
        self.openapi_types = {
            'links': List[GatewayAccountLinksInner],
            'accepted_currencies': List[str],
            'acquirer_name': AcquirerName,
            'additional_filters': str,
            'approval_window_ttl': int,
            'city_field': str,
            'created_time': datetime,
            'dcc_force_currency': str,
            'dcc_markup': int,
            'descriptor': str,
            'digital_wallets': DigitalWallets,
            'dynamic_descriptor': bool,
            'excluded_dcc_quote_currencies': List[str],
            'gateway_name': GatewayName,
            'id': str,
            'is_down': bool,
            'merchant_category_code': str,
            'method': PaymentMethod,
            'monthly_limit': float,
            'organization_id': str,
            'payment_card_schemes': List[PaymentCardBrand],
            'reconciliation_window_enabled': bool,
            'reconciliation_window_ttl': int,
            'status': str,
            'sticky': bool,
            'three_d_secure': bool,
            'timeout': int,
            'token': str,
            'updated_time': datetime,
            'credentials': ConektaAllOfCredentials
        }

        self.attribute_map = {
            'links': '_links',
            'accepted_currencies': 'acceptedCurrencies',
            'acquirer_name': 'acquirerName',
            'additional_filters': 'additionalFilters',
            'approval_window_ttl': 'approvalWindowTtl',
            'city_field': 'cityField',
            'created_time': 'createdTime',
            'dcc_force_currency': 'dccForceCurrency',
            'dcc_markup': 'dccMarkup',
            'descriptor': 'descriptor',
            'digital_wallets': 'digitalWallets',
            'dynamic_descriptor': 'dynamicDescriptor',
            'excluded_dcc_quote_currencies': 'excludedDccQuoteCurrencies',
            'gateway_name': 'gatewayName',
            'id': 'id',
            'is_down': 'isDown',
            'merchant_category_code': 'merchantCategoryCode',
            'method': 'method',
            'monthly_limit': 'monthlyLimit',
            'organization_id': 'organizationId',
            'payment_card_schemes': 'paymentCardSchemes',
            'reconciliation_window_enabled': 'reconciliationWindowEnabled',
            'reconciliation_window_ttl': 'reconciliationWindowTtl',
            'status': 'status',
            'sticky': 'sticky',
            'three_d_secure': 'threeDSecure',
            'timeout': 'timeout',
            'token': 'token',
            'updated_time': 'updatedTime',
            'credentials': 'credentials'
        }

        self._links = links
        self._accepted_currencies = accepted_currencies
        self._acquirer_name = acquirer_name
        self._additional_filters = additional_filters
        self._approval_window_ttl = approval_window_ttl
        self._city_field = city_field
        self._created_time = created_time
        self._dcc_force_currency = dcc_force_currency
        self._dcc_markup = dcc_markup
        self._descriptor = descriptor
        self._digital_wallets = digital_wallets
        self._dynamic_descriptor = dynamic_descriptor
        self._excluded_dcc_quote_currencies = excluded_dcc_quote_currencies
        self._gateway_name = gateway_name
        self._id = id
        self._is_down = is_down
        self._merchant_category_code = merchant_category_code
        self._method = method
        self._monthly_limit = monthly_limit
        self._organization_id = organization_id
        self._payment_card_schemes = payment_card_schemes
        self._reconciliation_window_enabled = reconciliation_window_enabled
        self._reconciliation_window_ttl = reconciliation_window_ttl
        self._status = status
        self._sticky = sticky
        self._three_d_secure = three_d_secure
        self._timeout = timeout
        self._token = token
        self._updated_time = updated_time
        self._credentials = credentials

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Conekta':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Conekta of this Conekta.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def links(self):
        """Gets the links of this Conekta.

        The links related to resource.

        :return: The links of this Conekta.
        :rtype: List[GatewayAccountLinksInner]
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this Conekta.

        The links related to resource.

        :param links: The links of this Conekta.
        :type links: List[GatewayAccountLinksInner]
        """
        if links is not None and len(links) < 1:
            raise ValueError("Invalid value for `links`, number of items must be greater than or equal to `1`")

        self._links = links

    @property
    def accepted_currencies(self):
        """Gets the accepted_currencies of this Conekta.

        Accepted currencies (array of the currency three letter codes).

        :return: The accepted_currencies of this Conekta.
        :rtype: List[str]
        """
        return self._accepted_currencies

    @accepted_currencies.setter
    def accepted_currencies(self, accepted_currencies):
        """Sets the accepted_currencies of this Conekta.

        Accepted currencies (array of the currency three letter codes).

        :param accepted_currencies: The accepted_currencies of this Conekta.
        :type accepted_currencies: List[str]
        """
        if accepted_currencies is None:
            raise ValueError("Invalid value for `accepted_currencies`, must not be `None`")

        self._accepted_currencies = accepted_currencies

    @property
    def acquirer_name(self):
        """Gets the acquirer_name of this Conekta.


        :return: The acquirer_name of this Conekta.
        :rtype: AcquirerName
        """
        return self._acquirer_name

    @acquirer_name.setter
    def acquirer_name(self, acquirer_name):
        """Sets the acquirer_name of this Conekta.


        :param acquirer_name: The acquirer_name of this Conekta.
        :type acquirer_name: AcquirerName
        """

        self._acquirer_name = acquirer_name

    @property
    def additional_filters(self):
        """Gets the additional_filters of this Conekta.

        The additional filters are used to determine whether the gateway account can be selected for the transaction to be processed. For example, the filter may put a maximum amount value. If the transaction is above that amount, this gateway account wouldn't be used. This follows our standard filter format. 

        :return: The additional_filters of this Conekta.
        :rtype: str
        """
        return self._additional_filters

    @additional_filters.setter
    def additional_filters(self, additional_filters):
        """Sets the additional_filters of this Conekta.

        The additional filters are used to determine whether the gateway account can be selected for the transaction to be processed. For example, the filter may put a maximum amount value. If the transaction is above that amount, this gateway account wouldn't be used. This follows our standard filter format. 

        :param additional_filters: The additional_filters of this Conekta.
        :type additional_filters: str
        """

        self._additional_filters = additional_filters

    @property
    def approval_window_ttl(self):
        """Gets the approval_window_ttl of this Conekta.

        The time window (in seconds) allotted for approving an offsite transaction before it is automatically `abandoned`.

        :return: The approval_window_ttl of this Conekta.
        :rtype: int
        """
        return self._approval_window_ttl

    @approval_window_ttl.setter
    def approval_window_ttl(self, approval_window_ttl):
        """Sets the approval_window_ttl of this Conekta.

        The time window (in seconds) allotted for approving an offsite transaction before it is automatically `abandoned`.

        :param approval_window_ttl: The approval_window_ttl of this Conekta.
        :type approval_window_ttl: int
        """
        if approval_window_ttl is not None and approval_window_ttl > 16777215:
            raise ValueError("Invalid value for `approval_window_ttl`, must be a value less than or equal to `16777215`")
        if approval_window_ttl is not None and approval_window_ttl < 300:
            raise ValueError("Invalid value for `approval_window_ttl`, must be a value greater than or equal to `300`")

        self._approval_window_ttl = approval_window_ttl

    @property
    def city_field(self):
        """Gets the city_field of this Conekta.

        The gateway account's city field (also known as line 2 descriptor).

        :return: The city_field of this Conekta.
        :rtype: str
        """
        return self._city_field

    @city_field.setter
    def city_field(self, city_field):
        """Sets the city_field of this Conekta.

        The gateway account's city field (also known as line 2 descriptor).

        :param city_field: The city_field of this Conekta.
        :type city_field: str
        """

        self._city_field = city_field

    @property
    def created_time(self):
        """Gets the created_time of this Conekta.

        Gateway Account created time.

        :return: The created_time of this Conekta.
        :rtype: datetime
        """
        return self._created_time

    @created_time.setter
    def created_time(self, created_time):
        """Sets the created_time of this Conekta.

        Gateway Account created time.

        :param created_time: The created_time of this Conekta.
        :type created_time: datetime
        """

        self._created_time = created_time

    @property
    def dcc_force_currency(self):
        """Gets the dcc_force_currency of this Conekta.

        Force dynamic currency conversion to the specified currency on each sale. Leave it empty to disable force DCC. 

        :return: The dcc_force_currency of this Conekta.
        :rtype: str
        """
        return self._dcc_force_currency

    @dcc_force_currency.setter
    def dcc_force_currency(self, dcc_force_currency):
        """Sets the dcc_force_currency of this Conekta.

        Force dynamic currency conversion to the specified currency on each sale. Leave it empty to disable force DCC. 

        :param dcc_force_currency: The dcc_force_currency of this Conekta.
        :type dcc_force_currency: str
        """

        self._dcc_force_currency = dcc_force_currency

    @property
    def dcc_markup(self):
        """Gets the dcc_markup of this Conekta.

        Dynamic currency conversion markup in basis points.

        :return: The dcc_markup of this Conekta.
        :rtype: int
        """
        return self._dcc_markup

    @dcc_markup.setter
    def dcc_markup(self, dcc_markup):
        """Sets the dcc_markup of this Conekta.

        Dynamic currency conversion markup in basis points.

        :param dcc_markup: The dcc_markup of this Conekta.
        :type dcc_markup: int
        """
        if dcc_markup is not None and dcc_markup > 10000:
            raise ValueError("Invalid value for `dcc_markup`, must be a value less than or equal to `10000`")
        if dcc_markup is not None and dcc_markup < -10000:
            raise ValueError("Invalid value for `dcc_markup`, must be a value greater than or equal to `-10000`")

        self._dcc_markup = dcc_markup

    @property
    def descriptor(self):
        """Gets the descriptor of this Conekta.

        The gateway account's descriptor.

        :return: The descriptor of this Conekta.
        :rtype: str
        """
        return self._descriptor

    @descriptor.setter
    def descriptor(self, descriptor):
        """Sets the descriptor of this Conekta.

        The gateway account's descriptor.

        :param descriptor: The descriptor of this Conekta.
        :type descriptor: str
        """

        self._descriptor = descriptor

    @property
    def digital_wallets(self):
        """Gets the digital_wallets of this Conekta.


        :return: The digital_wallets of this Conekta.
        :rtype: DigitalWallets
        """
        return self._digital_wallets

    @digital_wallets.setter
    def digital_wallets(self, digital_wallets):
        """Sets the digital_wallets of this Conekta.


        :param digital_wallets: The digital_wallets of this Conekta.
        :type digital_wallets: DigitalWallets
        """

        self._digital_wallets = digital_wallets

    @property
    def dynamic_descriptor(self):
        """Gets the dynamic_descriptor of this Conekta.

        True, if Gateway Account allows dynamic descriptor.

        :return: The dynamic_descriptor of this Conekta.
        :rtype: bool
        """
        return self._dynamic_descriptor

    @dynamic_descriptor.setter
    def dynamic_descriptor(self, dynamic_descriptor):
        """Sets the dynamic_descriptor of this Conekta.

        True, if Gateway Account allows dynamic descriptor.

        :param dynamic_descriptor: The dynamic_descriptor of this Conekta.
        :type dynamic_descriptor: bool
        """

        self._dynamic_descriptor = dynamic_descriptor

    @property
    def excluded_dcc_quote_currencies(self):
        """Gets the excluded_dcc_quote_currencies of this Conekta.

        Excluded Dynamic Currency Conversion Quote Currencies.

        :return: The excluded_dcc_quote_currencies of this Conekta.
        :rtype: List[str]
        """
        return self._excluded_dcc_quote_currencies

    @excluded_dcc_quote_currencies.setter
    def excluded_dcc_quote_currencies(self, excluded_dcc_quote_currencies):
        """Sets the excluded_dcc_quote_currencies of this Conekta.

        Excluded Dynamic Currency Conversion Quote Currencies.

        :param excluded_dcc_quote_currencies: The excluded_dcc_quote_currencies of this Conekta.
        :type excluded_dcc_quote_currencies: List[str]
        """

        self._excluded_dcc_quote_currencies = excluded_dcc_quote_currencies

    @property
    def gateway_name(self):
        """Gets the gateway_name of this Conekta.


        :return: The gateway_name of this Conekta.
        :rtype: GatewayName
        """
        return self._gateway_name

    @gateway_name.setter
    def gateway_name(self, gateway_name):
        """Sets the gateway_name of this Conekta.


        :param gateway_name: The gateway_name of this Conekta.
        :type gateway_name: GatewayName
        """
        if gateway_name is None:
            raise ValueError("Invalid value for `gateway_name`, must not be `None`")

        self._gateway_name = gateway_name

    @property
    def id(self):
        """Gets the id of this Conekta.

        The gateway identifier string.

        :return: The id of this Conekta.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Conekta.

        The gateway identifier string.

        :param id: The id of this Conekta.
        :type id: str
        """
        if id is not None and len(id) > 50:
            raise ValueError("Invalid value for `id`, length must be less than or equal to `50`")

        self._id = id

    @property
    def is_down(self):
        """Gets the is_down of this Conekta.

        True if gateway is currently in downtime period.

        :return: The is_down of this Conekta.
        :rtype: bool
        """
        return self._is_down

    @is_down.setter
    def is_down(self, is_down):
        """Sets the is_down of this Conekta.

        True if gateway is currently in downtime period.

        :param is_down: The is_down of this Conekta.
        :type is_down: bool
        """

        self._is_down = is_down

    @property
    def merchant_category_code(self):
        """Gets the merchant_category_code of this Conekta.

        The gateway account's merchant category code.

        :return: The merchant_category_code of this Conekta.
        :rtype: str
        """
        return self._merchant_category_code

    @merchant_category_code.setter
    def merchant_category_code(self, merchant_category_code):
        """Sets the merchant_category_code of this Conekta.

        The gateway account's merchant category code.

        :param merchant_category_code: The merchant_category_code of this Conekta.
        :type merchant_category_code: str
        """
        if merchant_category_code is not None and not re.search(r'^[0-9]{4}$', merchant_category_code):
            raise ValueError("Invalid value for `merchant_category_code`, must be a follow pattern or equal to `/^[0-9]{4}$/`")

        self._merchant_category_code = merchant_category_code

    @property
    def method(self):
        """Gets the method of this Conekta.


        :return: The method of this Conekta.
        :rtype: PaymentMethod
        """
        return self._method

    @method.setter
    def method(self, method):
        """Sets the method of this Conekta.


        :param method: The method of this Conekta.
        :type method: PaymentMethod
        """
        if method is None:
            raise ValueError("Invalid value for `method`, must not be `None`")

        self._method = method

    @property
    def monthly_limit(self):
        """Gets the monthly_limit of this Conekta.

        Monthly Limit.

        :return: The monthly_limit of this Conekta.
        :rtype: float
        """
        return self._monthly_limit

    @monthly_limit.setter
    def monthly_limit(self, monthly_limit):
        """Sets the monthly_limit of this Conekta.

        Monthly Limit.

        :param monthly_limit: The monthly_limit of this Conekta.
        :type monthly_limit: float
        """
        if monthly_limit is not None and monthly_limit < 0:
            raise ValueError("Invalid value for `monthly_limit`, must be a value greater than or equal to `0`")

        self._monthly_limit = monthly_limit

    @property
    def organization_id(self):
        """Gets the organization_id of this Conekta.

        Organization ID.

        :return: The organization_id of this Conekta.
        :rtype: str
        """
        return self._organization_id

    @organization_id.setter
    def organization_id(self, organization_id):
        """Sets the organization_id of this Conekta.

        Organization ID.

        :param organization_id: The organization_id of this Conekta.
        :type organization_id: str
        """
        if organization_id is not None and len(organization_id) > 50:
            raise ValueError("Invalid value for `organization_id`, length must be less than or equal to `50`")

        self._organization_id = organization_id

    @property
    def payment_card_schemes(self):
        """Gets the payment_card_schemes of this Conekta.

        Accepted payment card brands.

        :return: The payment_card_schemes of this Conekta.
        :rtype: List[PaymentCardBrand]
        """
        return self._payment_card_schemes

    @payment_card_schemes.setter
    def payment_card_schemes(self, payment_card_schemes):
        """Sets the payment_card_schemes of this Conekta.

        Accepted payment card brands.

        :param payment_card_schemes: The payment_card_schemes of this Conekta.
        :type payment_card_schemes: List[PaymentCardBrand]
        """

        self._payment_card_schemes = payment_card_schemes

    @property
    def reconciliation_window_enabled(self):
        """Gets the reconciliation_window_enabled of this Conekta.

        If a transaction is not reconciled within the `reconciliationWindowTtl` time, then the transaction is marked as `abandoned`.

        :return: The reconciliation_window_enabled of this Conekta.
        :rtype: bool
        """
        return self._reconciliation_window_enabled

    @reconciliation_window_enabled.setter
    def reconciliation_window_enabled(self, reconciliation_window_enabled):
        """Sets the reconciliation_window_enabled of this Conekta.

        If a transaction is not reconciled within the `reconciliationWindowTtl` time, then the transaction is marked as `abandoned`.

        :param reconciliation_window_enabled: The reconciliation_window_enabled of this Conekta.
        :type reconciliation_window_enabled: bool
        """

        self._reconciliation_window_enabled = reconciliation_window_enabled

    @property
    def reconciliation_window_ttl(self):
        """Gets the reconciliation_window_ttl of this Conekta.

        The time window (in seconds) allotted for a reconciliation to occur. If it is not reconciled in that time, then the transaction is marked as `abandoned`.

        :return: The reconciliation_window_ttl of this Conekta.
        :rtype: int
        """
        return self._reconciliation_window_ttl

    @reconciliation_window_ttl.setter
    def reconciliation_window_ttl(self, reconciliation_window_ttl):
        """Sets the reconciliation_window_ttl of this Conekta.

        The time window (in seconds) allotted for a reconciliation to occur. If it is not reconciled in that time, then the transaction is marked as `abandoned`.

        :param reconciliation_window_ttl: The reconciliation_window_ttl of this Conekta.
        :type reconciliation_window_ttl: int
        """
        if reconciliation_window_ttl is not None and reconciliation_window_ttl > 16777215:
            raise ValueError("Invalid value for `reconciliation_window_ttl`, must be a value less than or equal to `16777215`")
        if reconciliation_window_ttl is not None and reconciliation_window_ttl < 300:
            raise ValueError("Invalid value for `reconciliation_window_ttl`, must be a value greater than or equal to `300`")

        self._reconciliation_window_ttl = reconciliation_window_ttl

    @property
    def status(self):
        """Gets the status of this Conekta.

        The gateway account's status.

        :return: The status of this Conekta.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Conekta.

        The gateway account's status.

        :param status: The status of this Conekta.
        :type status: str
        """
        allowed_values = ["active", "inactive", "pending", "closed"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def sticky(self):
        """Gets the sticky of this Conekta.

        Customer's payment instrument will \"stick\" to the gateway account for future transactions when enabled.

        :return: The sticky of this Conekta.
        :rtype: bool
        """
        return self._sticky

    @sticky.setter
    def sticky(self, sticky):
        """Sets the sticky of this Conekta.

        Customer's payment instrument will \"stick\" to the gateway account for future transactions when enabled.

        :param sticky: The sticky of this Conekta.
        :type sticky: bool
        """

        self._sticky = sticky

    @property
    def three_d_secure(self):
        """Gets the three_d_secure of this Conekta.

        True, if Gateway Account allows 3DSecure.

        :return: The three_d_secure of this Conekta.
        :rtype: bool
        """
        return self._three_d_secure

    @three_d_secure.setter
    def three_d_secure(self, three_d_secure):
        """Sets the three_d_secure of this Conekta.

        True, if Gateway Account allows 3DSecure.

        :param three_d_secure: The three_d_secure of this Conekta.
        :type three_d_secure: bool
        """

        self._three_d_secure = three_d_secure

    @property
    def timeout(self):
        """Gets the timeout of this Conekta.

        Gateway Account request timeout in seconds.

        :return: The timeout of this Conekta.
        :rtype: int
        """
        return self._timeout

    @timeout.setter
    def timeout(self, timeout):
        """Sets the timeout of this Conekta.

        Gateway Account request timeout in seconds.

        :param timeout: The timeout of this Conekta.
        :type timeout: int
        """
        if timeout is not None and timeout > 120:
            raise ValueError("Invalid value for `timeout`, must be a value less than or equal to `120`")
        if timeout is not None and timeout < 10:
            raise ValueError("Invalid value for `timeout`, must be a value greater than or equal to `10`")

        self._timeout = timeout

    @property
    def token(self):
        """Gets the token of this Conekta.

        Gateway Account token.

        :return: The token of this Conekta.
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token):
        """Sets the token of this Conekta.

        Gateway Account token.

        :param token: The token of this Conekta.
        :type token: str
        """

        self._token = token

    @property
    def updated_time(self):
        """Gets the updated_time of this Conekta.

        Gateway Account updated time.

        :return: The updated_time of this Conekta.
        :rtype: datetime
        """
        return self._updated_time

    @updated_time.setter
    def updated_time(self, updated_time):
        """Sets the updated_time of this Conekta.

        Gateway Account updated time.

        :param updated_time: The updated_time of this Conekta.
        :type updated_time: datetime
        """

        self._updated_time = updated_time

    @property
    def credentials(self):
        """Gets the credentials of this Conekta.


        :return: The credentials of this Conekta.
        :rtype: ConektaAllOfCredentials
        """
        return self._credentials

    @credentials.setter
    def credentials(self, credentials):
        """Sets the credentials of this Conekta.


        :param credentials: The credentials of this Conekta.
        :type credentials: ConektaAllOfCredentials
        """
        if credentials is None:
            raise ValueError("Invalid value for `credentials`, must not be `None`")

        self._credentials = credentials
