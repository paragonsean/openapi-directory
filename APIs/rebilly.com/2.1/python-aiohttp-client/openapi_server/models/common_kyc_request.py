# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.common_kyc_request_documents_inner import CommonKycRequestDocumentsInner
from openapi_server import util


class CommonKycRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, created_time: datetime=None, documents: List[CommonKycRequestDocumentsInner]=None, expiration_time: datetime=None, id: str=None, redirect_url: str=None, updated_time: datetime=None):
        """CommonKycRequest - a model defined in OpenAPI

        :param created_time: The created_time of this CommonKycRequest.
        :param documents: The documents of this CommonKycRequest.
        :param expiration_time: The expiration_time of this CommonKycRequest.
        :param id: The id of this CommonKycRequest.
        :param redirect_url: The redirect_url of this CommonKycRequest.
        :param updated_time: The updated_time of this CommonKycRequest.
        """
        self.openapi_types = {
            'created_time': datetime,
            'documents': List[CommonKycRequestDocumentsInner],
            'expiration_time': datetime,
            'id': str,
            'redirect_url': str,
            'updated_time': datetime
        }

        self.attribute_map = {
            'created_time': 'createdTime',
            'documents': 'documents',
            'expiration_time': 'expirationTime',
            'id': 'id',
            'redirect_url': 'redirectUrl',
            'updated_time': 'updatedTime'
        }

        self._created_time = created_time
        self._documents = documents
        self._expiration_time = expiration_time
        self._id = id
        self._redirect_url = redirect_url
        self._updated_time = updated_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CommonKycRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CommonKycRequest of this CommonKycRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def created_time(self):
        """Gets the created_time of this CommonKycRequest.

        Creation date/time.

        :return: The created_time of this CommonKycRequest.
        :rtype: datetime
        """
        return self._created_time

    @created_time.setter
    def created_time(self, created_time):
        """Sets the created_time of this CommonKycRequest.

        Creation date/time.

        :param created_time: The created_time of this CommonKycRequest.
        :type created_time: datetime
        """

        self._created_time = created_time

    @property
    def documents(self):
        """Gets the documents of this CommonKycRequest.

        Documents to be requested from customer.

        :return: The documents of this CommonKycRequest.
        :rtype: List[CommonKycRequestDocumentsInner]
        """
        return self._documents

    @documents.setter
    def documents(self, documents):
        """Sets the documents of this CommonKycRequest.

        Documents to be requested from customer.

        :param documents: The documents of this CommonKycRequest.
        :type documents: List[CommonKycRequestDocumentsInner]
        """
        if documents is None:
            raise ValueError("Invalid value for `documents`, must not be `None`")

        self._documents = documents

    @property
    def expiration_time(self):
        """Gets the expiration_time of this CommonKycRequest.

        Expiration date/time.

        :return: The expiration_time of this CommonKycRequest.
        :rtype: datetime
        """
        return self._expiration_time

    @expiration_time.setter
    def expiration_time(self, expiration_time):
        """Sets the expiration_time of this CommonKycRequest.

        Expiration date/time.

        :param expiration_time: The expiration_time of this CommonKycRequest.
        :type expiration_time: datetime
        """

        self._expiration_time = expiration_time

    @property
    def id(self):
        """Gets the id of this CommonKycRequest.

        The resource ID. Defaults to UUID v4.

        :return: The id of this CommonKycRequest.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CommonKycRequest.

        The resource ID. Defaults to UUID v4.

        :param id: The id of this CommonKycRequest.
        :type id: str
        """
        if id is not None and len(id) > 50:
            raise ValueError("Invalid value for `id`, length must be less than or equal to `50`")

        self._id = id

    @property
    def redirect_url(self):
        """Gets the redirect_url of this CommonKycRequest.

        The URL to redirect the customer when an upload is completed.

        :return: The redirect_url of this CommonKycRequest.
        :rtype: str
        """
        return self._redirect_url

    @redirect_url.setter
    def redirect_url(self, redirect_url):
        """Sets the redirect_url of this CommonKycRequest.

        The URL to redirect the customer when an upload is completed.

        :param redirect_url: The redirect_url of this CommonKycRequest.
        :type redirect_url: str
        """

        self._redirect_url = redirect_url

    @property
    def updated_time(self):
        """Gets the updated_time of this CommonKycRequest.

        Latest update date/time.

        :return: The updated_time of this CommonKycRequest.
        :rtype: datetime
        """
        return self._updated_time

    @updated_time.setter
    def updated_time(self, updated_time):
        """Sets the updated_time of this CommonKycRequest.

        Latest update date/time.

        :param updated_time: The updated_time of this CommonKycRequest.
        :type updated_time: datetime
        """

        self._updated_time = updated_time
