# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PostFinanceAllOfCredentials(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, key_passphrase: str=None, merchant_id: str=None, private_key: str=None, psp_id: str=None, public_key: str=None, sftp_key_passphrase: str=None, sftp_private_key: str=None, sftp_username: str=None):
        """PostFinanceAllOfCredentials - a model defined in OpenAPI

        :param key_passphrase: The key_passphrase of this PostFinanceAllOfCredentials.
        :param merchant_id: The merchant_id of this PostFinanceAllOfCredentials.
        :param private_key: The private_key of this PostFinanceAllOfCredentials.
        :param psp_id: The psp_id of this PostFinanceAllOfCredentials.
        :param public_key: The public_key of this PostFinanceAllOfCredentials.
        :param sftp_key_passphrase: The sftp_key_passphrase of this PostFinanceAllOfCredentials.
        :param sftp_private_key: The sftp_private_key of this PostFinanceAllOfCredentials.
        :param sftp_username: The sftp_username of this PostFinanceAllOfCredentials.
        """
        self.openapi_types = {
            'key_passphrase': str,
            'merchant_id': str,
            'private_key': str,
            'psp_id': str,
            'public_key': str,
            'sftp_key_passphrase': str,
            'sftp_private_key': str,
            'sftp_username': str
        }

        self.attribute_map = {
            'key_passphrase': 'keyPassphrase',
            'merchant_id': 'merchantId',
            'private_key': 'privateKey',
            'psp_id': 'pspId',
            'public_key': 'publicKey',
            'sftp_key_passphrase': 'sftpKeyPassphrase',
            'sftp_private_key': 'sftpPrivateKey',
            'sftp_username': 'sftpUsername'
        }

        self._key_passphrase = key_passphrase
        self._merchant_id = merchant_id
        self._private_key = private_key
        self._psp_id = psp_id
        self._public_key = public_key
        self._sftp_key_passphrase = sftp_key_passphrase
        self._sftp_private_key = sftp_private_key
        self._sftp_username = sftp_username

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PostFinanceAllOfCredentials':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PostFinance_allOf_credentials of this PostFinanceAllOfCredentials.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def key_passphrase(self):
        """Gets the key_passphrase of this PostFinanceAllOfCredentials.


        :return: The key_passphrase of this PostFinanceAllOfCredentials.
        :rtype: str
        """
        return self._key_passphrase

    @key_passphrase.setter
    def key_passphrase(self, key_passphrase):
        """Sets the key_passphrase of this PostFinanceAllOfCredentials.


        :param key_passphrase: The key_passphrase of this PostFinanceAllOfCredentials.
        :type key_passphrase: str
        """
        if key_passphrase is None:
            raise ValueError("Invalid value for `key_passphrase`, must not be `None`")

        self._key_passphrase = key_passphrase

    @property
    def merchant_id(self):
        """Gets the merchant_id of this PostFinanceAllOfCredentials.


        :return: The merchant_id of this PostFinanceAllOfCredentials.
        :rtype: str
        """
        return self._merchant_id

    @merchant_id.setter
    def merchant_id(self, merchant_id):
        """Sets the merchant_id of this PostFinanceAllOfCredentials.


        :param merchant_id: The merchant_id of this PostFinanceAllOfCredentials.
        :type merchant_id: str
        """
        if merchant_id is None:
            raise ValueError("Invalid value for `merchant_id`, must not be `None`")

        self._merchant_id = merchant_id

    @property
    def private_key(self):
        """Gets the private_key of this PostFinanceAllOfCredentials.


        :return: The private_key of this PostFinanceAllOfCredentials.
        :rtype: str
        """
        return self._private_key

    @private_key.setter
    def private_key(self, private_key):
        """Sets the private_key of this PostFinanceAllOfCredentials.


        :param private_key: The private_key of this PostFinanceAllOfCredentials.
        :type private_key: str
        """
        if private_key is None:
            raise ValueError("Invalid value for `private_key`, must not be `None`")

        self._private_key = private_key

    @property
    def psp_id(self):
        """Gets the psp_id of this PostFinanceAllOfCredentials.


        :return: The psp_id of this PostFinanceAllOfCredentials.
        :rtype: str
        """
        return self._psp_id

    @psp_id.setter
    def psp_id(self, psp_id):
        """Sets the psp_id of this PostFinanceAllOfCredentials.


        :param psp_id: The psp_id of this PostFinanceAllOfCredentials.
        :type psp_id: str
        """
        if psp_id is None:
            raise ValueError("Invalid value for `psp_id`, must not be `None`")

        self._psp_id = psp_id

    @property
    def public_key(self):
        """Gets the public_key of this PostFinanceAllOfCredentials.


        :return: The public_key of this PostFinanceAllOfCredentials.
        :rtype: str
        """
        return self._public_key

    @public_key.setter
    def public_key(self, public_key):
        """Sets the public_key of this PostFinanceAllOfCredentials.


        :param public_key: The public_key of this PostFinanceAllOfCredentials.
        :type public_key: str
        """
        if public_key is None:
            raise ValueError("Invalid value for `public_key`, must not be `None`")

        self._public_key = public_key

    @property
    def sftp_key_passphrase(self):
        """Gets the sftp_key_passphrase of this PostFinanceAllOfCredentials.


        :return: The sftp_key_passphrase of this PostFinanceAllOfCredentials.
        :rtype: str
        """
        return self._sftp_key_passphrase

    @sftp_key_passphrase.setter
    def sftp_key_passphrase(self, sftp_key_passphrase):
        """Sets the sftp_key_passphrase of this PostFinanceAllOfCredentials.


        :param sftp_key_passphrase: The sftp_key_passphrase of this PostFinanceAllOfCredentials.
        :type sftp_key_passphrase: str
        """
        if sftp_key_passphrase is None:
            raise ValueError("Invalid value for `sftp_key_passphrase`, must not be `None`")

        self._sftp_key_passphrase = sftp_key_passphrase

    @property
    def sftp_private_key(self):
        """Gets the sftp_private_key of this PostFinanceAllOfCredentials.


        :return: The sftp_private_key of this PostFinanceAllOfCredentials.
        :rtype: str
        """
        return self._sftp_private_key

    @sftp_private_key.setter
    def sftp_private_key(self, sftp_private_key):
        """Sets the sftp_private_key of this PostFinanceAllOfCredentials.


        :param sftp_private_key: The sftp_private_key of this PostFinanceAllOfCredentials.
        :type sftp_private_key: str
        """
        if sftp_private_key is None:
            raise ValueError("Invalid value for `sftp_private_key`, must not be `None`")

        self._sftp_private_key = sftp_private_key

    @property
    def sftp_username(self):
        """Gets the sftp_username of this PostFinanceAllOfCredentials.


        :return: The sftp_username of this PostFinanceAllOfCredentials.
        :rtype: str
        """
        return self._sftp_username

    @sftp_username.setter
    def sftp_username(self, sftp_username):
        """Sets the sftp_username of this PostFinanceAllOfCredentials.


        :param sftp_username: The sftp_username of this PostFinanceAllOfCredentials.
        :type sftp_username: str
        """
        if sftp_username is None:
            raise ValueError("Invalid value for `sftp_username`, must not be `None`")

        self._sftp_username = sftp_username
