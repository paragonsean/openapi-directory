# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.self_link import SelfLink
from openapi_server import util


class AuthenticationTokenMetadata(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, links: List[SelfLink]=None, expired_time: datetime=None):
        """AuthenticationTokenMetadata - a model defined in OpenAPI

        :param links: The links of this AuthenticationTokenMetadata.
        :param expired_time: The expired_time of this AuthenticationTokenMetadata.
        """
        self.openapi_types = {
            'links': List[SelfLink],
            'expired_time': datetime
        }

        self.attribute_map = {
            'links': '_links',
            'expired_time': 'expiredTime'
        }

        self._links = links
        self._expired_time = expired_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AuthenticationTokenMetadata':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AuthenticationTokenMetadata of this AuthenticationTokenMetadata.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def links(self):
        """Gets the links of this AuthenticationTokenMetadata.

        The links related to resource.

        :return: The links of this AuthenticationTokenMetadata.
        :rtype: List[SelfLink]
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this AuthenticationTokenMetadata.

        The links related to resource.

        :param links: The links of this AuthenticationTokenMetadata.
        :type links: List[SelfLink]
        """
        if links is not None and len(links) < 1:
            raise ValueError("Invalid value for `links`, number of items must be greater than or equal to `1`")

        self._links = links

    @property
    def expired_time(self):
        """Gets the expired_time of this AuthenticationTokenMetadata.

        Token's expired time.

        :return: The expired_time of this AuthenticationTokenMetadata.
        :rtype: datetime
        """
        return self._expired_time

    @expired_time.setter
    def expired_time(self, expired_time):
        """Sets the expired_time of this AuthenticationTokenMetadata.

        Token's expired time.

        :param expired_time: The expired_time of this AuthenticationTokenMetadata.
        :type expired_time: datetime
        """

        self._expired_time = expired_time
