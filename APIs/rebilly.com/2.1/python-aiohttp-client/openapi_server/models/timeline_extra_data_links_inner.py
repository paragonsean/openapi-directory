# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TimelineExtraDataLinksInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, placeholder: str=None, resource_id: str=None, resource_type: str=None):
        """TimelineExtraDataLinksInner - a model defined in OpenAPI

        :param placeholder: The placeholder of this TimelineExtraDataLinksInner.
        :param resource_id: The resource_id of this TimelineExtraDataLinksInner.
        :param resource_type: The resource_type of this TimelineExtraDataLinksInner.
        """
        self.openapi_types = {
            'placeholder': str,
            'resource_id': str,
            'resource_type': str
        }

        self.attribute_map = {
            'placeholder': 'placeholder',
            'resource_id': 'resourceId',
            'resource_type': 'resourceType'
        }

        self._placeholder = placeholder
        self._resource_id = resource_id
        self._resource_type = resource_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TimelineExtraDataLinksInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TimelineExtraData_links_inner of this TimelineExtraDataLinksInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def placeholder(self):
        """Gets the placeholder of this TimelineExtraDataLinksInner.


        :return: The placeholder of this TimelineExtraDataLinksInner.
        :rtype: str
        """
        return self._placeholder

    @placeholder.setter
    def placeholder(self, placeholder):
        """Sets the placeholder of this TimelineExtraDataLinksInner.


        :param placeholder: The placeholder of this TimelineExtraDataLinksInner.
        :type placeholder: str
        """

        self._placeholder = placeholder

    @property
    def resource_id(self):
        """Gets the resource_id of this TimelineExtraDataLinksInner.

        The resource ID. Defaults to UUID v4.

        :return: The resource_id of this TimelineExtraDataLinksInner.
        :rtype: str
        """
        return self._resource_id

    @resource_id.setter
    def resource_id(self, resource_id):
        """Sets the resource_id of this TimelineExtraDataLinksInner.

        The resource ID. Defaults to UUID v4.

        :param resource_id: The resource_id of this TimelineExtraDataLinksInner.
        :type resource_id: str
        """
        if resource_id is not None and len(resource_id) > 50:
            raise ValueError("Invalid value for `resource_id`, length must be less than or equal to `50`")

        self._resource_id = resource_id

    @property
    def resource_type(self):
        """Gets the resource_type of this TimelineExtraDataLinksInner.


        :return: The resource_type of this TimelineExtraDataLinksInner.
        :rtype: str
        """
        return self._resource_type

    @resource_type.setter
    def resource_type(self, resource_type):
        """Sets the resource_type of this TimelineExtraDataLinksInner.


        :param resource_type: The resource_type of this TimelineExtraDataLinksInner.
        :type resource_type: str
        """
        allowed_values = ["kyc-document", "invoice", "subscription", "transaction", "email-message", "dispute", "coupon"]  # noqa: E501
        if resource_type not in allowed_values:
            raise ValueError(
                "Invalid value for `resource_type` ({0}), must be one of {1}"
                .format(resource_type, allowed_values)
            )

        self._resource_type = resource_type
