# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class WorldpayAllOfCredentials(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, merchant_code: str=None, merchant_password: str=None, payout_merchant_code: str=None, payout_merchant_password: str=None):
        """WorldpayAllOfCredentials - a model defined in OpenAPI

        :param merchant_code: The merchant_code of this WorldpayAllOfCredentials.
        :param merchant_password: The merchant_password of this WorldpayAllOfCredentials.
        :param payout_merchant_code: The payout_merchant_code of this WorldpayAllOfCredentials.
        :param payout_merchant_password: The payout_merchant_password of this WorldpayAllOfCredentials.
        """
        self.openapi_types = {
            'merchant_code': str,
            'merchant_password': str,
            'payout_merchant_code': str,
            'payout_merchant_password': str
        }

        self.attribute_map = {
            'merchant_code': 'merchantCode',
            'merchant_password': 'merchantPassword',
            'payout_merchant_code': 'payoutMerchantCode',
            'payout_merchant_password': 'payoutMerchantPassword'
        }

        self._merchant_code = merchant_code
        self._merchant_password = merchant_password
        self._payout_merchant_code = payout_merchant_code
        self._payout_merchant_password = payout_merchant_password

    @classmethod
    def from_dict(cls, dikt: dict) -> 'WorldpayAllOfCredentials':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Worldpay_allOf_credentials of this WorldpayAllOfCredentials.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def merchant_code(self):
        """Gets the merchant_code of this WorldpayAllOfCredentials.

        Worldpay Gateway merchant code.

        :return: The merchant_code of this WorldpayAllOfCredentials.
        :rtype: str
        """
        return self._merchant_code

    @merchant_code.setter
    def merchant_code(self, merchant_code):
        """Sets the merchant_code of this WorldpayAllOfCredentials.

        Worldpay Gateway merchant code.

        :param merchant_code: The merchant_code of this WorldpayAllOfCredentials.
        :type merchant_code: str
        """
        if merchant_code is None:
            raise ValueError("Invalid value for `merchant_code`, must not be `None`")

        self._merchant_code = merchant_code

    @property
    def merchant_password(self):
        """Gets the merchant_password of this WorldpayAllOfCredentials.

        Worldpay Gateway merchant password.

        :return: The merchant_password of this WorldpayAllOfCredentials.
        :rtype: str
        """
        return self._merchant_password

    @merchant_password.setter
    def merchant_password(self, merchant_password):
        """Sets the merchant_password of this WorldpayAllOfCredentials.

        Worldpay Gateway merchant password.

        :param merchant_password: The merchant_password of this WorldpayAllOfCredentials.
        :type merchant_password: str
        """
        if merchant_password is None:
            raise ValueError("Invalid value for `merchant_password`, must not be `None`")

        self._merchant_password = merchant_password

    @property
    def payout_merchant_code(self):
        """Gets the payout_merchant_code of this WorldpayAllOfCredentials.

        Optional alternate merchant code for payouts.

        :return: The payout_merchant_code of this WorldpayAllOfCredentials.
        :rtype: str
        """
        return self._payout_merchant_code

    @payout_merchant_code.setter
    def payout_merchant_code(self, payout_merchant_code):
        """Sets the payout_merchant_code of this WorldpayAllOfCredentials.

        Optional alternate merchant code for payouts.

        :param payout_merchant_code: The payout_merchant_code of this WorldpayAllOfCredentials.
        :type payout_merchant_code: str
        """

        self._payout_merchant_code = payout_merchant_code

    @property
    def payout_merchant_password(self):
        """Gets the payout_merchant_password of this WorldpayAllOfCredentials.

        Optional alternate merchant password for payouts.

        :return: The payout_merchant_password of this WorldpayAllOfCredentials.
        :rtype: str
        """
        return self._payout_merchant_password

    @payout_merchant_password.setter
    def payout_merchant_password(self, payout_merchant_password):
        """Sets the payout_merchant_password of this WorldpayAllOfCredentials.

        Optional alternate merchant password for payouts.

        :param payout_merchant_password: The payout_merchant_password of this WorldpayAllOfCredentials.
        :type payout_merchant_password: str
        """

        self._payout_merchant_password = payout_merchant_password
