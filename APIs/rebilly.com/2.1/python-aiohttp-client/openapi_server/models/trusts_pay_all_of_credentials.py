# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TrustsPayAllOfCredentials(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, gateway_no: str=None, merchant_no: str=None, signkey: str=None):
        """TrustsPayAllOfCredentials - a model defined in OpenAPI

        :param gateway_no: The gateway_no of this TrustsPayAllOfCredentials.
        :param merchant_no: The merchant_no of this TrustsPayAllOfCredentials.
        :param signkey: The signkey of this TrustsPayAllOfCredentials.
        """
        self.openapi_types = {
            'gateway_no': str,
            'merchant_no': str,
            'signkey': str
        }

        self.attribute_map = {
            'gateway_no': 'gatewayNo',
            'merchant_no': 'merchantNo',
            'signkey': 'signkey'
        }

        self._gateway_no = gateway_no
        self._merchant_no = merchant_no
        self._signkey = signkey

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TrustsPayAllOfCredentials':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TrustsPay_allOf_credentials of this TrustsPayAllOfCredentials.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def gateway_no(self):
        """Gets the gateway_no of this TrustsPayAllOfCredentials.


        :return: The gateway_no of this TrustsPayAllOfCredentials.
        :rtype: str
        """
        return self._gateway_no

    @gateway_no.setter
    def gateway_no(self, gateway_no):
        """Sets the gateway_no of this TrustsPayAllOfCredentials.


        :param gateway_no: The gateway_no of this TrustsPayAllOfCredentials.
        :type gateway_no: str
        """
        if gateway_no is None:
            raise ValueError("Invalid value for `gateway_no`, must not be `None`")

        self._gateway_no = gateway_no

    @property
    def merchant_no(self):
        """Gets the merchant_no of this TrustsPayAllOfCredentials.


        :return: The merchant_no of this TrustsPayAllOfCredentials.
        :rtype: str
        """
        return self._merchant_no

    @merchant_no.setter
    def merchant_no(self, merchant_no):
        """Sets the merchant_no of this TrustsPayAllOfCredentials.


        :param merchant_no: The merchant_no of this TrustsPayAllOfCredentials.
        :type merchant_no: str
        """
        if merchant_no is None:
            raise ValueError("Invalid value for `merchant_no`, must not be `None`")

        self._merchant_no = merchant_no

    @property
    def signkey(self):
        """Gets the signkey of this TrustsPayAllOfCredentials.


        :return: The signkey of this TrustsPayAllOfCredentials.
        :rtype: str
        """
        return self._signkey

    @signkey.setter
    def signkey(self, signkey):
        """Sets the signkey of this TrustsPayAllOfCredentials.


        :param signkey: The signkey of this TrustsPayAllOfCredentials.
        :type signkey: str
        """
        if signkey is None:
            raise ValueError("Invalid value for `signkey`, must not be `None`")

        self._signkey = signkey
