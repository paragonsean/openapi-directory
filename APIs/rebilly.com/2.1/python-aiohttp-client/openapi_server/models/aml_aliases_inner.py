# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AMLAliasesInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, authenticity: str=None, first_name: str=None, last_name: str=None):
        """AMLAliasesInner - a model defined in OpenAPI

        :param authenticity: The authenticity of this AMLAliasesInner.
        :param first_name: The first_name of this AMLAliasesInner.
        :param last_name: The last_name of this AMLAliasesInner.
        """
        self.openapi_types = {
            'authenticity': str,
            'first_name': str,
            'last_name': str
        }

        self.attribute_map = {
            'authenticity': 'authenticity',
            'first_name': 'firstName',
            'last_name': 'lastName'
        }

        self._authenticity = authenticity
        self._first_name = first_name
        self._last_name = last_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AMLAliasesInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AML_aliases_inner of this AMLAliasesInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def authenticity(self):
        """Gets the authenticity of this AMLAliasesInner.

        The level of confidence in the alias.

        :return: The authenticity of this AMLAliasesInner.
        :rtype: str
        """
        return self._authenticity

    @authenticity.setter
    def authenticity(self, authenticity):
        """Sets the authenticity of this AMLAliasesInner.

        The level of confidence in the alias.

        :param authenticity: The authenticity of this AMLAliasesInner.
        :type authenticity: str
        """
        allowed_values = ["strong", "weak", "unknown"]  # noqa: E501
        if authenticity not in allowed_values:
            raise ValueError(
                "Invalid value for `authenticity` ({0}), must be one of {1}"
                .format(authenticity, allowed_values)
            )

        self._authenticity = authenticity

    @property
    def first_name(self):
        """Gets the first_name of this AMLAliasesInner.

        First name of alias.

        :return: The first_name of this AMLAliasesInner.
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this AMLAliasesInner.

        First name of alias.

        :param first_name: The first_name of this AMLAliasesInner.
        :type first_name: str
        """

        self._first_name = first_name

    @property
    def last_name(self):
        """Gets the last_name of this AMLAliasesInner.

        Last name of alias.

        :return: The last_name of this AMLAliasesInner.
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this AMLAliasesInner.

        Last name of alias.

        :param last_name: The last_name of this AMLAliasesInner.
        :type last_name: str
        """

        self._last_name = last_name
