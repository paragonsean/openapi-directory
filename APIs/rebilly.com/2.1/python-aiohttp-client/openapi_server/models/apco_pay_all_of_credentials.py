# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ApcoPayAllOfCredentials(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, merchant_id: str=None, merchant_password: str=None, profile_id: str=None, secret_word: str=None):
        """ApcoPayAllOfCredentials - a model defined in OpenAPI

        :param merchant_id: The merchant_id of this ApcoPayAllOfCredentials.
        :param merchant_password: The merchant_password of this ApcoPayAllOfCredentials.
        :param profile_id: The profile_id of this ApcoPayAllOfCredentials.
        :param secret_word: The secret_word of this ApcoPayAllOfCredentials.
        """
        self.openapi_types = {
            'merchant_id': str,
            'merchant_password': str,
            'profile_id': str,
            'secret_word': str
        }

        self.attribute_map = {
            'merchant_id': 'MerchantID',
            'merchant_password': 'MerchantPassword',
            'profile_id': 'profileID',
            'secret_word': 'secretWord'
        }

        self._merchant_id = merchant_id
        self._merchant_password = merchant_password
        self._profile_id = profile_id
        self._secret_word = secret_word

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ApcoPayAllOfCredentials':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ApcoPay_allOf_credentials of this ApcoPayAllOfCredentials.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def merchant_id(self):
        """Gets the merchant_id of this ApcoPayAllOfCredentials.

        ApcoPay merchant ID.

        :return: The merchant_id of this ApcoPayAllOfCredentials.
        :rtype: str
        """
        return self._merchant_id

    @merchant_id.setter
    def merchant_id(self, merchant_id):
        """Sets the merchant_id of this ApcoPayAllOfCredentials.

        ApcoPay merchant ID.

        :param merchant_id: The merchant_id of this ApcoPayAllOfCredentials.
        :type merchant_id: str
        """
        if merchant_id is None:
            raise ValueError("Invalid value for `merchant_id`, must not be `None`")

        self._merchant_id = merchant_id

    @property
    def merchant_password(self):
        """Gets the merchant_password of this ApcoPayAllOfCredentials.

        ApcoPay merchant password.

        :return: The merchant_password of this ApcoPayAllOfCredentials.
        :rtype: str
        """
        return self._merchant_password

    @merchant_password.setter
    def merchant_password(self, merchant_password):
        """Sets the merchant_password of this ApcoPayAllOfCredentials.

        ApcoPay merchant password.

        :param merchant_password: The merchant_password of this ApcoPayAllOfCredentials.
        :type merchant_password: str
        """
        if merchant_password is None:
            raise ValueError("Invalid value for `merchant_password`, must not be `None`")

        self._merchant_password = merchant_password

    @property
    def profile_id(self):
        """Gets the profile_id of this ApcoPayAllOfCredentials.

        ApcoPay profile ID.

        :return: The profile_id of this ApcoPayAllOfCredentials.
        :rtype: str
        """
        return self._profile_id

    @profile_id.setter
    def profile_id(self, profile_id):
        """Sets the profile_id of this ApcoPayAllOfCredentials.

        ApcoPay profile ID.

        :param profile_id: The profile_id of this ApcoPayAllOfCredentials.
        :type profile_id: str
        """
        if profile_id is None:
            raise ValueError("Invalid value for `profile_id`, must not be `None`")

        self._profile_id = profile_id

    @property
    def secret_word(self):
        """Gets the secret_word of this ApcoPayAllOfCredentials.

        ApcoPay secret word.

        :return: The secret_word of this ApcoPayAllOfCredentials.
        :rtype: str
        """
        return self._secret_word

    @secret_word.setter
    def secret_word(self, secret_word):
        """Sets the secret_word of this ApcoPayAllOfCredentials.

        ApcoPay secret word.

        :param secret_word: The secret_word of this ApcoPayAllOfCredentials.
        :type secret_word: str
        """
        if secret_word is None:
            raise ValueError("Invalid value for `secret_word`, must not be `None`")

        self._secret_word = secret_word
