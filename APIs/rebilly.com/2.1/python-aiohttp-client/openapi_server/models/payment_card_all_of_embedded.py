# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.auth_transaction_embed import AuthTransactionEmbed
from openapi_server.models.customer import Customer
from openapi_server.models.customer_embed import CustomerEmbed
from openapi_server.models.transaction import Transaction
from openapi_server import util


class PaymentCardAllOfEmbedded(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, auth_transaction: Transaction=None, customer: Customer=None):
        """PaymentCardAllOfEmbedded - a model defined in OpenAPI

        :param auth_transaction: The auth_transaction of this PaymentCardAllOfEmbedded.
        :param customer: The customer of this PaymentCardAllOfEmbedded.
        """
        self.openapi_types = {
            'auth_transaction': Transaction,
            'customer': Customer
        }

        self.attribute_map = {
            'auth_transaction': 'authTransaction',
            'customer': 'customer'
        }

        self._auth_transaction = auth_transaction
        self._customer = customer

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PaymentCardAllOfEmbedded':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PaymentCard_allOf__embedded of this PaymentCardAllOfEmbedded.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def auth_transaction(self):
        """Gets the auth_transaction of this PaymentCardAllOfEmbedded.


        :return: The auth_transaction of this PaymentCardAllOfEmbedded.
        :rtype: Transaction
        """
        return self._auth_transaction

    @auth_transaction.setter
    def auth_transaction(self, auth_transaction):
        """Sets the auth_transaction of this PaymentCardAllOfEmbedded.


        :param auth_transaction: The auth_transaction of this PaymentCardAllOfEmbedded.
        :type auth_transaction: Transaction
        """

        self._auth_transaction = auth_transaction

    @property
    def customer(self):
        """Gets the customer of this PaymentCardAllOfEmbedded.


        :return: The customer of this PaymentCardAllOfEmbedded.
        :rtype: Customer
        """
        return self._customer

    @customer.setter
    def customer(self, customer):
        """Sets the customer of this PaymentCardAllOfEmbedded.


        :param customer: The customer of this PaymentCardAllOfEmbedded.
        :type customer: Customer
        """

        self._customer = customer
