# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ReadyToPayItemsItemsInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, plan_id: str=None, quantity: int=None):
        """ReadyToPayItemsItemsInner - a model defined in OpenAPI

        :param plan_id: The plan_id of this ReadyToPayItemsItemsInner.
        :param quantity: The quantity of this ReadyToPayItemsItemsInner.
        """
        self.openapi_types = {
            'plan_id': str,
            'quantity': int
        }

        self.attribute_map = {
            'plan_id': 'planId',
            'quantity': 'quantity'
        }

        self._plan_id = plan_id
        self._quantity = quantity

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ReadyToPayItemsItemsInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ReadyToPayItems_items_inner of this ReadyToPayItemsItemsInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def plan_id(self):
        """Gets the plan_id of this ReadyToPayItemsItemsInner.

        The plan identifier string.

        :return: The plan_id of this ReadyToPayItemsItemsInner.
        :rtype: str
        """
        return self._plan_id

    @plan_id.setter
    def plan_id(self, plan_id):
        """Sets the plan_id of this ReadyToPayItemsItemsInner.

        The plan identifier string.

        :param plan_id: The plan_id of this ReadyToPayItemsItemsInner.
        :type plan_id: str
        """
        if plan_id is None:
            raise ValueError("Invalid value for `plan_id`, must not be `None`")
        if plan_id is not None and len(plan_id) > 50:
            raise ValueError("Invalid value for `plan_id`, length must be less than or equal to `50`")

        self._plan_id = plan_id

    @property
    def quantity(self):
        """Gets the quantity of this ReadyToPayItemsItemsInner.

        Number of units of the product on the given plan.

        :return: The quantity of this ReadyToPayItemsItemsInner.
        :rtype: int
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this ReadyToPayItemsItemsInner.

        Number of units of the product on the given plan.

        :param quantity: The quantity of this ReadyToPayItemsItemsInner.
        :type quantity: int
        """
        if quantity is None:
            raise ValueError("Invalid value for `quantity`, must not be `None`")

        self._quantity = quantity
