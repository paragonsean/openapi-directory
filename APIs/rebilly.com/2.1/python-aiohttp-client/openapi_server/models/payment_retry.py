# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.payment_retry_attempts_inner import PaymentRetryAttemptsInner
from openapi_server import util


class PaymentRetry(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, after_attempt_policy: str=None, after_retry_end_policy: str=None, attempts: List[PaymentRetryAttemptsInner]=None):
        """PaymentRetry - a model defined in OpenAPI

        :param after_attempt_policy: The after_attempt_policy of this PaymentRetry.
        :param after_retry_end_policy: The after_retry_end_policy of this PaymentRetry.
        :param attempts: The attempts of this PaymentRetry.
        """
        self.openapi_types = {
            'after_attempt_policy': str,
            'after_retry_end_policy': str,
            'attempts': List[PaymentRetryAttemptsInner]
        }

        self.attribute_map = {
            'after_attempt_policy': 'afterAttemptPolicy',
            'after_retry_end_policy': 'afterRetryEndPolicy',
            'attempts': 'attempts'
        }

        self._after_attempt_policy = after_attempt_policy
        self._after_retry_end_policy = after_retry_end_policy
        self._attempts = attempts

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PaymentRetry':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PaymentRetry of this PaymentRetry.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def after_attempt_policy(self):
        """Gets the after_attempt_policy of this PaymentRetry.

        The policy on the attempt finishes.

        :return: The after_attempt_policy of this PaymentRetry.
        :rtype: str
        """
        return self._after_attempt_policy

    @after_attempt_policy.setter
    def after_attempt_policy(self, after_attempt_policy):
        """Sets the after_attempt_policy of this PaymentRetry.

        The policy on the attempt finishes.

        :param after_attempt_policy: The after_attempt_policy of this PaymentRetry.
        :type after_attempt_policy: str
        """
        allowed_values = ["none", "change-subscription-renewal-time"]  # noqa: E501
        if after_attempt_policy not in allowed_values:
            raise ValueError(
                "Invalid value for `after_attempt_policy` ({0}), must be one of {1}"
                .format(after_attempt_policy, allowed_values)
            )

        self._after_attempt_policy = after_attempt_policy

    @property
    def after_retry_end_policy(self):
        """Gets the after_retry_end_policy of this PaymentRetry.

        The policy on the retry ends.

        :return: The after_retry_end_policy of this PaymentRetry.
        :rtype: str
        """
        return self._after_retry_end_policy

    @after_retry_end_policy.setter
    def after_retry_end_policy(self, after_retry_end_policy):
        """Sets the after_retry_end_policy of this PaymentRetry.

        The policy on the retry ends.

        :param after_retry_end_policy: The after_retry_end_policy of this PaymentRetry.
        :type after_retry_end_policy: str
        """
        allowed_values = ["none", "cancel-subscription"]  # noqa: E501
        if after_retry_end_policy not in allowed_values:
            raise ValueError(
                "Invalid value for `after_retry_end_policy` ({0}), must be one of {1}"
                .format(after_retry_end_policy, allowed_values)
            )

        self._after_retry_end_policy = after_retry_end_policy

    @property
    def attempts(self):
        """Gets the attempts of this PaymentRetry.


        :return: The attempts of this PaymentRetry.
        :rtype: List[PaymentRetryAttemptsInner]
        """
        return self._attempts

    @attempts.setter
    def attempts(self, attempts):
        """Sets the attempts of this PaymentRetry.


        :param attempts: The attempts of this PaymentRetry.
        :type attempts: List[PaymentRetryAttemptsInner]
        """
        if attempts is None:
            raise ValueError("Invalid value for `attempts`, must not be `None`")
        if attempts is not None and len(attempts) < 1:
            raise ValueError("Invalid value for `attempts`, number of items must be greater than or equal to `1`")

        self._attempts = attempts
