# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CitadelAllOfCredentials(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, password: str=None, store_id: str=None, store_name: str=None, username: str=None):
        """CitadelAllOfCredentials - a model defined in OpenAPI

        :param password: The password of this CitadelAllOfCredentials.
        :param store_id: The store_id of this CitadelAllOfCredentials.
        :param store_name: The store_name of this CitadelAllOfCredentials.
        :param username: The username of this CitadelAllOfCredentials.
        """
        self.openapi_types = {
            'password': str,
            'store_id': str,
            'store_name': str,
            'username': str
        }

        self.attribute_map = {
            'password': 'password',
            'store_id': 'storeId',
            'store_name': 'storeName',
            'username': 'username'
        }

        self._password = password
        self._store_id = store_id
        self._store_name = store_name
        self._username = username

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CitadelAllOfCredentials':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Citadel_allOf_credentials of this CitadelAllOfCredentials.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def password(self):
        """Gets the password of this CitadelAllOfCredentials.

        Password.

        :return: The password of this CitadelAllOfCredentials.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this CitadelAllOfCredentials.

        Password.

        :param password: The password of this CitadelAllOfCredentials.
        :type password: str
        """
        if password is None:
            raise ValueError("Invalid value for `password`, must not be `None`")

        self._password = password

    @property
    def store_id(self):
        """Gets the store_id of this CitadelAllOfCredentials.

        Store ID.

        :return: The store_id of this CitadelAllOfCredentials.
        :rtype: str
        """
        return self._store_id

    @store_id.setter
    def store_id(self, store_id):
        """Sets the store_id of this CitadelAllOfCredentials.

        Store ID.

        :param store_id: The store_id of this CitadelAllOfCredentials.
        :type store_id: str
        """
        if store_id is None:
            raise ValueError("Invalid value for `store_id`, must not be `None`")

        self._store_id = store_id

    @property
    def store_name(self):
        """Gets the store_name of this CitadelAllOfCredentials.

        Store name.

        :return: The store_name of this CitadelAllOfCredentials.
        :rtype: str
        """
        return self._store_name

    @store_name.setter
    def store_name(self, store_name):
        """Sets the store_name of this CitadelAllOfCredentials.

        Store name.

        :param store_name: The store_name of this CitadelAllOfCredentials.
        :type store_name: str
        """
        if store_name is None:
            raise ValueError("Invalid value for `store_name`, must not be `None`")

        self._store_name = store_name

    @property
    def username(self):
        """Gets the username of this CitadelAllOfCredentials.

        Username.

        :return: The username of this CitadelAllOfCredentials.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this CitadelAllOfCredentials.

        Username.

        :param username: The username of this CitadelAllOfCredentials.
        :type username: str
        """
        if username is None:
            raise ValueError("Invalid value for `username`, must not be `None`")

        self._username = username
