# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ParamountEftAllOfCredentials(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, merchant_id: str=None, merchant_pass: str=None, payee: str=None):
        """ParamountEftAllOfCredentials - a model defined in OpenAPI

        :param merchant_id: The merchant_id of this ParamountEftAllOfCredentials.
        :param merchant_pass: The merchant_pass of this ParamountEftAllOfCredentials.
        :param payee: The payee of this ParamountEftAllOfCredentials.
        """
        self.openapi_types = {
            'merchant_id': str,
            'merchant_pass': str,
            'payee': str
        }

        self.attribute_map = {
            'merchant_id': 'merchant_id',
            'merchant_pass': 'merchant_pass',
            'payee': 'payee'
        }

        self._merchant_id = merchant_id
        self._merchant_pass = merchant_pass
        self._payee = payee

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ParamountEftAllOfCredentials':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ParamountEft_allOf_credentials of this ParamountEftAllOfCredentials.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def merchant_id(self):
        """Gets the merchant_id of this ParamountEftAllOfCredentials.

        Merchant account ID.

        :return: The merchant_id of this ParamountEftAllOfCredentials.
        :rtype: str
        """
        return self._merchant_id

    @merchant_id.setter
    def merchant_id(self, merchant_id):
        """Sets the merchant_id of this ParamountEftAllOfCredentials.

        Merchant account ID.

        :param merchant_id: The merchant_id of this ParamountEftAllOfCredentials.
        :type merchant_id: str
        """
        if merchant_id is None:
            raise ValueError("Invalid value for `merchant_id`, must not be `None`")

        self._merchant_id = merchant_id

    @property
    def merchant_pass(self):
        """Gets the merchant_pass of this ParamountEftAllOfCredentials.

        Merchant account password.

        :return: The merchant_pass of this ParamountEftAllOfCredentials.
        :rtype: str
        """
        return self._merchant_pass

    @merchant_pass.setter
    def merchant_pass(self, merchant_pass):
        """Sets the merchant_pass of this ParamountEftAllOfCredentials.

        Merchant account password.

        :param merchant_pass: The merchant_pass of this ParamountEftAllOfCredentials.
        :type merchant_pass: str
        """
        if merchant_pass is None:
            raise ValueError("Invalid value for `merchant_pass`, must not be `None`")

        self._merchant_pass = merchant_pass

    @property
    def payee(self):
        """Gets the payee of this ParamountEftAllOfCredentials.

        Merchant name/descriptor.

        :return: The payee of this ParamountEftAllOfCredentials.
        :rtype: str
        """
        return self._payee

    @payee.setter
    def payee(self, payee):
        """Sets the payee of this ParamountEftAllOfCredentials.

        Merchant name/descriptor.

        :param payee: The payee of this ParamountEftAllOfCredentials.
        :type payee: str
        """
        if payee is None:
            raise ValueError("Invalid value for `payee`, must not be `None`")

        self._payee = payee
