# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class UpcomingInvoiceItem(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, created_time: datetime=None, description: str=None, period_end_time: datetime=None, period_start_time: datetime=None, quantity: int=None, type: str=None, unit_price_amount: float=None, unit_price_currency: str=None):
        """UpcomingInvoiceItem - a model defined in OpenAPI

        :param created_time: The created_time of this UpcomingInvoiceItem.
        :param description: The description of this UpcomingInvoiceItem.
        :param period_end_time: The period_end_time of this UpcomingInvoiceItem.
        :param period_start_time: The period_start_time of this UpcomingInvoiceItem.
        :param quantity: The quantity of this UpcomingInvoiceItem.
        :param type: The type of this UpcomingInvoiceItem.
        :param unit_price_amount: The unit_price_amount of this UpcomingInvoiceItem.
        :param unit_price_currency: The unit_price_currency of this UpcomingInvoiceItem.
        """
        self.openapi_types = {
            'created_time': datetime,
            'description': str,
            'period_end_time': datetime,
            'period_start_time': datetime,
            'quantity': int,
            'type': str,
            'unit_price_amount': float,
            'unit_price_currency': str
        }

        self.attribute_map = {
            'created_time': 'createdTime',
            'description': 'description',
            'period_end_time': 'periodEndTime',
            'period_start_time': 'periodStartTime',
            'quantity': 'quantity',
            'type': 'type',
            'unit_price_amount': 'unitPriceAmount',
            'unit_price_currency': 'unitPriceCurrency'
        }

        self._created_time = created_time
        self._description = description
        self._period_end_time = period_end_time
        self._period_start_time = period_start_time
        self._quantity = quantity
        self._type = type
        self._unit_price_amount = unit_price_amount
        self._unit_price_currency = unit_price_currency

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpcomingInvoiceItem':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpcomingInvoiceItem of this UpcomingInvoiceItem.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def created_time(self):
        """Gets the created_time of this UpcomingInvoiceItem.

        Date-time when the item was added to the subscription.

        :return: The created_time of this UpcomingInvoiceItem.
        :rtype: datetime
        """
        return self._created_time

    @created_time.setter
    def created_time(self, created_time):
        """Sets the created_time of this UpcomingInvoiceItem.

        Date-time when the item was added to the subscription.

        :param created_time: The created_time of this UpcomingInvoiceItem.
        :type created_time: datetime
        """

        self._created_time = created_time

    @property
    def description(self):
        """Gets the description of this UpcomingInvoiceItem.

        Description of line item.

        :return: The description of this UpcomingInvoiceItem.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this UpcomingInvoiceItem.

        Description of line item.

        :param description: The description of this UpcomingInvoiceItem.
        :type description: str
        """

        self._description = description

    @property
    def period_end_time(self):
        """Gets the period_end_time of this UpcomingInvoiceItem.

        Date-time when the period ends for this item.

        :return: The period_end_time of this UpcomingInvoiceItem.
        :rtype: datetime
        """
        return self._period_end_time

    @period_end_time.setter
    def period_end_time(self, period_end_time):
        """Sets the period_end_time of this UpcomingInvoiceItem.

        Date-time when the period ends for this item.

        :param period_end_time: The period_end_time of this UpcomingInvoiceItem.
        :type period_end_time: datetime
        """

        self._period_end_time = period_end_time

    @property
    def period_start_time(self):
        """Gets the period_start_time of this UpcomingInvoiceItem.

        Date-time when the period begins for this item.

        :return: The period_start_time of this UpcomingInvoiceItem.
        :rtype: datetime
        """
        return self._period_start_time

    @period_start_time.setter
    def period_start_time(self, period_start_time):
        """Sets the period_start_time of this UpcomingInvoiceItem.

        Date-time when the period begins for this item.

        :param period_start_time: The period_start_time of this UpcomingInvoiceItem.
        :type period_start_time: datetime
        """

        self._period_start_time = period_start_time

    @property
    def quantity(self):
        """Gets the quantity of this UpcomingInvoiceItem.

        Quantity of line item.

        :return: The quantity of this UpcomingInvoiceItem.
        :rtype: int
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this UpcomingInvoiceItem.

        Quantity of line item.

        :param quantity: The quantity of this UpcomingInvoiceItem.
        :type quantity: int
        """
        if quantity is None:
            raise ValueError("Invalid value for `quantity`, must not be `None`")

        self._quantity = quantity

    @property
    def type(self):
        """Gets the type of this UpcomingInvoiceItem.

        Type of line item.

        :return: The type of this UpcomingInvoiceItem.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this UpcomingInvoiceItem.

        Type of line item.

        :param type: The type of this UpcomingInvoiceItem.
        :type type: str
        """
        allowed_values = ["debit", "credit"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def unit_price_amount(self):
        """Gets the unit_price_amount of this UpcomingInvoiceItem.

        Unit price of the line item.

        :return: The unit_price_amount of this UpcomingInvoiceItem.
        :rtype: float
        """
        return self._unit_price_amount

    @unit_price_amount.setter
    def unit_price_amount(self, unit_price_amount):
        """Sets the unit_price_amount of this UpcomingInvoiceItem.

        Unit price of the line item.

        :param unit_price_amount: The unit_price_amount of this UpcomingInvoiceItem.
        :type unit_price_amount: float
        """
        if unit_price_amount is None:
            raise ValueError("Invalid value for `unit_price_amount`, must not be `None`")

        self._unit_price_amount = unit_price_amount

    @property
    def unit_price_currency(self):
        """Gets the unit_price_currency of this UpcomingInvoiceItem.

        ISO 4217 alphabetic currency code.

        :return: The unit_price_currency of this UpcomingInvoiceItem.
        :rtype: str
        """
        return self._unit_price_currency

    @unit_price_currency.setter
    def unit_price_currency(self, unit_price_currency):
        """Sets the unit_price_currency of this UpcomingInvoiceItem.

        ISO 4217 alphabetic currency code.

        :param unit_price_currency: The unit_price_currency of this UpcomingInvoiceItem.
        :type unit_price_currency: str
        """
        if unit_price_currency is None:
            raise ValueError("Invalid value for `unit_price_currency`, must not be `None`")
        if unit_price_currency is not None and len(unit_price_currency) > 3:
            raise ValueError("Invalid value for `unit_price_currency`, length must be less than or equal to `3`")
        if unit_price_currency is not None and len(unit_price_currency) < 3:
            raise ValueError("Invalid value for `unit_price_currency`, length must be greater than or equal to `3`")

        self._unit_price_currency = unit_price_currency
