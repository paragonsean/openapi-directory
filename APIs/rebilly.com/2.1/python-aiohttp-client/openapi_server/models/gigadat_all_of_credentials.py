# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GigadatAllOfCredentials(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, access_token: str=None, campaign_id: str=None, security_token: str=None):
        """GigadatAllOfCredentials - a model defined in OpenAPI

        :param access_token: The access_token of this GigadatAllOfCredentials.
        :param campaign_id: The campaign_id of this GigadatAllOfCredentials.
        :param security_token: The security_token of this GigadatAllOfCredentials.
        """
        self.openapi_types = {
            'access_token': str,
            'campaign_id': str,
            'security_token': str
        }

        self.attribute_map = {
            'access_token': 'accessToken',
            'campaign_id': 'campaignId',
            'security_token': 'securityToken'
        }

        self._access_token = access_token
        self._campaign_id = campaign_id
        self._security_token = security_token

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GigadatAllOfCredentials':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Gigadat_allOf_credentials of this GigadatAllOfCredentials.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def access_token(self):
        """Gets the access_token of this GigadatAllOfCredentials.

        Gigadat access token.

        :return: The access_token of this GigadatAllOfCredentials.
        :rtype: str
        """
        return self._access_token

    @access_token.setter
    def access_token(self, access_token):
        """Sets the access_token of this GigadatAllOfCredentials.

        Gigadat access token.

        :param access_token: The access_token of this GigadatAllOfCredentials.
        :type access_token: str
        """
        if access_token is None:
            raise ValueError("Invalid value for `access_token`, must not be `None`")

        self._access_token = access_token

    @property
    def campaign_id(self):
        """Gets the campaign_id of this GigadatAllOfCredentials.

        Gigadat campaign ID.

        :return: The campaign_id of this GigadatAllOfCredentials.
        :rtype: str
        """
        return self._campaign_id

    @campaign_id.setter
    def campaign_id(self, campaign_id):
        """Sets the campaign_id of this GigadatAllOfCredentials.

        Gigadat campaign ID.

        :param campaign_id: The campaign_id of this GigadatAllOfCredentials.
        :type campaign_id: str
        """
        if campaign_id is None:
            raise ValueError("Invalid value for `campaign_id`, must not be `None`")

        self._campaign_id = campaign_id

    @property
    def security_token(self):
        """Gets the security_token of this GigadatAllOfCredentials.

        Gigadat security token.

        :return: The security_token of this GigadatAllOfCredentials.
        :rtype: str
        """
        return self._security_token

    @security_token.setter
    def security_token(self, security_token):
        """Sets the security_token of this GigadatAllOfCredentials.

        Gigadat security token.

        :param security_token: The security_token of this GigadatAllOfCredentials.
        :type security_token: str
        """
        if security_token is None:
            raise ValueError("Invalid value for `security_token`, must not be `None`")

        self._security_token = security_token
