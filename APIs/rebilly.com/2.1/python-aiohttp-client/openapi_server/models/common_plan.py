# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.common_plan_recurring_interval import CommonPlanRecurringInterval
from openapi_server.models.common_plan_setup import CommonPlanSetup
from openapi_server.models.common_plan_trial import CommonPlanTrial
from openapi_server.models.plan_price_formula import PlanPriceFormula
from openapi_server import util


class CommonPlan(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, created_time: datetime=None, currency: str=None, currency_sign: str=None, custom_fields: object=None, id: str=None, is_trial_only: bool=None, name: str=None, pricing: PlanPriceFormula=None, product_id: str=None, product_options: Dict[str, str]=None, recurring_interval: CommonPlanRecurringInterval=None, revision: int=None, setup: CommonPlanSetup=None, trial: CommonPlanTrial=None, updated_time: datetime=None):
        """CommonPlan - a model defined in OpenAPI

        :param created_time: The created_time of this CommonPlan.
        :param currency: The currency of this CommonPlan.
        :param currency_sign: The currency_sign of this CommonPlan.
        :param custom_fields: The custom_fields of this CommonPlan.
        :param id: The id of this CommonPlan.
        :param is_trial_only: The is_trial_only of this CommonPlan.
        :param name: The name of this CommonPlan.
        :param pricing: The pricing of this CommonPlan.
        :param product_id: The product_id of this CommonPlan.
        :param product_options: The product_options of this CommonPlan.
        :param recurring_interval: The recurring_interval of this CommonPlan.
        :param revision: The revision of this CommonPlan.
        :param setup: The setup of this CommonPlan.
        :param trial: The trial of this CommonPlan.
        :param updated_time: The updated_time of this CommonPlan.
        """
        self.openapi_types = {
            'created_time': datetime,
            'currency': str,
            'currency_sign': str,
            'custom_fields': object,
            'id': str,
            'is_trial_only': bool,
            'name': str,
            'pricing': PlanPriceFormula,
            'product_id': str,
            'product_options': Dict[str, str],
            'recurring_interval': CommonPlanRecurringInterval,
            'revision': int,
            'setup': CommonPlanSetup,
            'trial': CommonPlanTrial,
            'updated_time': datetime
        }

        self.attribute_map = {
            'created_time': 'createdTime',
            'currency': 'currency',
            'currency_sign': 'currencySign',
            'custom_fields': 'customFields',
            'id': 'id',
            'is_trial_only': 'isTrialOnly',
            'name': 'name',
            'pricing': 'pricing',
            'product_id': 'productId',
            'product_options': 'productOptions',
            'recurring_interval': 'recurringInterval',
            'revision': 'revision',
            'setup': 'setup',
            'trial': 'trial',
            'updated_time': 'updatedTime'
        }

        self._created_time = created_time
        self._currency = currency
        self._currency_sign = currency_sign
        self._custom_fields = custom_fields
        self._id = id
        self._is_trial_only = is_trial_only
        self._name = name
        self._pricing = pricing
        self._product_id = product_id
        self._product_options = product_options
        self._recurring_interval = recurring_interval
        self._revision = revision
        self._setup = setup
        self._trial = trial
        self._updated_time = updated_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CommonPlan':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CommonPlan of this CommonPlan.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def created_time(self):
        """Gets the created_time of this CommonPlan.

        Plan created time.

        :return: The created_time of this CommonPlan.
        :rtype: datetime
        """
        return self._created_time

    @created_time.setter
    def created_time(self, created_time):
        """Sets the created_time of this CommonPlan.

        Plan created time.

        :param created_time: The created_time of this CommonPlan.
        :type created_time: datetime
        """

        self._created_time = created_time

    @property
    def currency(self):
        """Gets the currency of this CommonPlan.

        ISO 4217 alphabetic currency code.

        :return: The currency of this CommonPlan.
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this CommonPlan.

        ISO 4217 alphabetic currency code.

        :param currency: The currency of this CommonPlan.
        :type currency: str
        """
        if currency is None:
            raise ValueError("Invalid value for `currency`, must not be `None`")
        if currency is not None and len(currency) > 3:
            raise ValueError("Invalid value for `currency`, length must be less than or equal to `3`")
        if currency is not None and len(currency) < 3:
            raise ValueError("Invalid value for `currency`, length must be greater than or equal to `3`")

        self._currency = currency

    @property
    def currency_sign(self):
        """Gets the currency_sign of this CommonPlan.

        Currency sign.

        :return: The currency_sign of this CommonPlan.
        :rtype: str
        """
        return self._currency_sign

    @currency_sign.setter
    def currency_sign(self, currency_sign):
        """Sets the currency_sign of this CommonPlan.

        Currency sign.

        :param currency_sign: The currency_sign of this CommonPlan.
        :type currency_sign: str
        """

        self._currency_sign = currency_sign

    @property
    def custom_fields(self):
        """Gets the custom_fields of this CommonPlan.

        Custom Fields list as a map `{\"custom field name\": \"custom field value\", ...}`. The format must follow the saved format (see Custom Fields section for the formats). 

        :return: The custom_fields of this CommonPlan.
        :rtype: object
        """
        return self._custom_fields

    @custom_fields.setter
    def custom_fields(self, custom_fields):
        """Sets the custom_fields of this CommonPlan.

        Custom Fields list as a map `{\"custom field name\": \"custom field value\", ...}`. The format must follow the saved format (see Custom Fields section for the formats). 

        :param custom_fields: The custom_fields of this CommonPlan.
        :type custom_fields: object
        """

        self._custom_fields = custom_fields

    @property
    def id(self):
        """Gets the id of this CommonPlan.

        The plan ID.

        :return: The id of this CommonPlan.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CommonPlan.

        The plan ID.

        :param id: The id of this CommonPlan.
        :type id: str
        """
        if id is not None and len(id) > 50:
            raise ValueError("Invalid value for `id`, length must be less than or equal to `50`")

        self._id = id

    @property
    def is_trial_only(self):
        """Gets the is_trial_only of this CommonPlan.

        Whether a plan has a trial without recurring instructions.

        :return: The is_trial_only of this CommonPlan.
        :rtype: bool
        """
        return self._is_trial_only

    @is_trial_only.setter
    def is_trial_only(self, is_trial_only):
        """Sets the is_trial_only of this CommonPlan.

        Whether a plan has a trial without recurring instructions.

        :param is_trial_only: The is_trial_only of this CommonPlan.
        :type is_trial_only: bool
        """

        self._is_trial_only = is_trial_only

    @property
    def name(self):
        """Gets the name of this CommonPlan.

        The plan name, displayed on invoices and receipts.

        :return: The name of this CommonPlan.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CommonPlan.

        The plan name, displayed on invoices and receipts.

        :param name: The name of this CommonPlan.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def pricing(self):
        """Gets the pricing of this CommonPlan.


        :return: The pricing of this CommonPlan.
        :rtype: PlanPriceFormula
        """
        return self._pricing

    @pricing.setter
    def pricing(self, pricing):
        """Sets the pricing of this CommonPlan.


        :param pricing: The pricing of this CommonPlan.
        :type pricing: PlanPriceFormula
        """
        if pricing is None:
            raise ValueError("Invalid value for `pricing`, must not be `None`")

        self._pricing = pricing

    @property
    def product_id(self):
        """Gets the product_id of this CommonPlan.

        The related product ID.

        :return: The product_id of this CommonPlan.
        :rtype: str
        """
        return self._product_id

    @product_id.setter
    def product_id(self, product_id):
        """Sets the product_id of this CommonPlan.

        The related product ID.

        :param product_id: The product_id of this CommonPlan.
        :type product_id: str
        """
        if product_id is None:
            raise ValueError("Invalid value for `product_id`, must not be `None`")
        if product_id is not None and len(product_id) > 50:
            raise ValueError("Invalid value for `product_id`, length must be less than or equal to `50`")

        self._product_id = product_id

    @property
    def product_options(self):
        """Gets the product_options of this CommonPlan.

        Name-value pairs to specify the product options.

        :return: The product_options of this CommonPlan.
        :rtype: Dict[str, str]
        """
        return self._product_options

    @product_options.setter
    def product_options(self, product_options):
        """Sets the product_options of this CommonPlan.

        Name-value pairs to specify the product options.

        :param product_options: The product_options of this CommonPlan.
        :type product_options: Dict[str, str]
        """

        self._product_options = product_options

    @property
    def recurring_interval(self):
        """Gets the recurring_interval of this CommonPlan.


        :return: The recurring_interval of this CommonPlan.
        :rtype: CommonPlanRecurringInterval
        """
        return self._recurring_interval

    @recurring_interval.setter
    def recurring_interval(self, recurring_interval):
        """Sets the recurring_interval of this CommonPlan.


        :param recurring_interval: The recurring_interval of this CommonPlan.
        :type recurring_interval: CommonPlanRecurringInterval
        """

        self._recurring_interval = recurring_interval

    @property
    def revision(self):
        """Gets the revision of this CommonPlan.

        Increments when the plan is modified.  Compare to materialized subscription items revision. 

        :return: The revision of this CommonPlan.
        :rtype: int
        """
        return self._revision

    @revision.setter
    def revision(self, revision):
        """Sets the revision of this CommonPlan.

        Increments when the plan is modified.  Compare to materialized subscription items revision. 

        :param revision: The revision of this CommonPlan.
        :type revision: int
        """

        self._revision = revision

    @property
    def setup(self):
        """Gets the setup of this CommonPlan.


        :return: The setup of this CommonPlan.
        :rtype: CommonPlanSetup
        """
        return self._setup

    @setup.setter
    def setup(self, setup):
        """Sets the setup of this CommonPlan.


        :param setup: The setup of this CommonPlan.
        :type setup: CommonPlanSetup
        """

        self._setup = setup

    @property
    def trial(self):
        """Gets the trial of this CommonPlan.


        :return: The trial of this CommonPlan.
        :rtype: CommonPlanTrial
        """
        return self._trial

    @trial.setter
    def trial(self, trial):
        """Sets the trial of this CommonPlan.


        :param trial: The trial of this CommonPlan.
        :type trial: CommonPlanTrial
        """

        self._trial = trial

    @property
    def updated_time(self):
        """Gets the updated_time of this CommonPlan.

        Plan updated time.

        :return: The updated_time of this CommonPlan.
        :rtype: datetime
        """
        return self._updated_time

    @updated_time.setter
    def updated_time(self, updated_time):
        """Sets the updated_time of this CommonPlan.

        Plan updated time.

        :param updated_time: The updated_time of this CommonPlan.
        :type updated_time: datetime
        """

        self._updated_time = updated_time
