# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DengiAllOfCredentials(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, project_id: str=None, public_key: str=None, refund_key: str=None):
        """DengiAllOfCredentials - a model defined in OpenAPI

        :param project_id: The project_id of this DengiAllOfCredentials.
        :param public_key: The public_key of this DengiAllOfCredentials.
        :param refund_key: The refund_key of this DengiAllOfCredentials.
        """
        self.openapi_types = {
            'project_id': str,
            'public_key': str,
            'refund_key': str
        }

        self.attribute_map = {
            'project_id': 'projectId',
            'public_key': 'publicKey',
            'refund_key': 'refundKey'
        }

        self._project_id = project_id
        self._public_key = public_key
        self._refund_key = refund_key

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DengiAllOfCredentials':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Dengi_allOf_credentials of this DengiAllOfCredentials.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def project_id(self):
        """Gets the project_id of this DengiAllOfCredentials.

        Dengi Gateway project ID.

        :return: The project_id of this DengiAllOfCredentials.
        :rtype: str
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this DengiAllOfCredentials.

        Dengi Gateway project ID.

        :param project_id: The project_id of this DengiAllOfCredentials.
        :type project_id: str
        """
        if project_id is None:
            raise ValueError("Invalid value for `project_id`, must not be `None`")

        self._project_id = project_id

    @property
    def public_key(self):
        """Gets the public_key of this DengiAllOfCredentials.

        Dengi Gateway public key.

        :return: The public_key of this DengiAllOfCredentials.
        :rtype: str
        """
        return self._public_key

    @public_key.setter
    def public_key(self, public_key):
        """Sets the public_key of this DengiAllOfCredentials.

        Dengi Gateway public key.

        :param public_key: The public_key of this DengiAllOfCredentials.
        :type public_key: str
        """
        if public_key is None:
            raise ValueError("Invalid value for `public_key`, must not be `None`")

        self._public_key = public_key

    @property
    def refund_key(self):
        """Gets the refund_key of this DengiAllOfCredentials.

        Dengi Gateway refund key.

        :return: The refund_key of this DengiAllOfCredentials.
        :rtype: str
        """
        return self._refund_key

    @refund_key.setter
    def refund_key(self, refund_key):
        """Sets the refund_key of this DengiAllOfCredentials.

        Dengi Gateway refund key.

        :param refund_key: The refund_key of this DengiAllOfCredentials.
        :type refund_key: str
        """
        if refund_key is None:
            raise ValueError("Invalid value for `refund_key`, must not be `None`")

        self._refund_key = refund_key
