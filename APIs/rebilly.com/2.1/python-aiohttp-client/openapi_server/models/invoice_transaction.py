# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class InvoiceTransaction(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, amount: float=None, transaction_id: str=None):
        """InvoiceTransaction - a model defined in OpenAPI

        :param amount: The amount of this InvoiceTransaction.
        :param transaction_id: The transaction_id of this InvoiceTransaction.
        """
        self.openapi_types = {
            'amount': float,
            'transaction_id': str
        }

        self.attribute_map = {
            'amount': 'amount',
            'transaction_id': 'transactionId'
        }

        self._amount = amount
        self._transaction_id = transaction_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'InvoiceTransaction':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The InvoiceTransaction of this InvoiceTransaction.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def amount(self):
        """Gets the amount of this InvoiceTransaction.

        Amount which needs to be applied to the invoice. Can't be more than the transaction's amount. If omitted, the lesser of the transaction's unused amount or the invoice's amount due will be used. 

        :return: The amount of this InvoiceTransaction.
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this InvoiceTransaction.

        Amount which needs to be applied to the invoice. Can't be more than the transaction's amount. If omitted, the lesser of the transaction's unused amount or the invoice's amount due will be used. 

        :param amount: The amount of this InvoiceTransaction.
        :type amount: float
        """

        self._amount = amount

    @property
    def transaction_id(self):
        """Gets the transaction_id of this InvoiceTransaction.

        Transaction to be applied to the invoice.

        :return: The transaction_id of this InvoiceTransaction.
        :rtype: str
        """
        return self._transaction_id

    @transaction_id.setter
    def transaction_id(self, transaction_id):
        """Sets the transaction_id of this InvoiceTransaction.

        Transaction to be applied to the invoice.

        :param transaction_id: The transaction_id of this InvoiceTransaction.
        :type transaction_id: str
        """
        if transaction_id is None:
            raise ValueError("Invalid value for `transaction_id`, must not be `None`")

        self._transaction_id = transaction_id
