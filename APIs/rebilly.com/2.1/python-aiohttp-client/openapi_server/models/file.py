# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.file_links_inner import FileLinksInner
from openapi_server import util


class File(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, links: List[FileLinksInner]=None, created_time: datetime=None, description: str=None, extension: str=None, height: int=None, id: str=None, is_public: bool=None, mime: str=None, name: str=None, sha1: str=None, size: int=None, tags: List[str]=None, updated_time: datetime=None, width: int=None):
        """File - a model defined in OpenAPI

        :param links: The links of this File.
        :param created_time: The created_time of this File.
        :param description: The description of this File.
        :param extension: The extension of this File.
        :param height: The height of this File.
        :param id: The id of this File.
        :param is_public: The is_public of this File.
        :param mime: The mime of this File.
        :param name: The name of this File.
        :param sha1: The sha1 of this File.
        :param size: The size of this File.
        :param tags: The tags of this File.
        :param updated_time: The updated_time of this File.
        :param width: The width of this File.
        """
        self.openapi_types = {
            'links': List[FileLinksInner],
            'created_time': datetime,
            'description': str,
            'extension': str,
            'height': int,
            'id': str,
            'is_public': bool,
            'mime': str,
            'name': str,
            'sha1': str,
            'size': int,
            'tags': List[str],
            'updated_time': datetime,
            'width': int
        }

        self.attribute_map = {
            'links': '_links',
            'created_time': 'createdTime',
            'description': 'description',
            'extension': 'extension',
            'height': 'height',
            'id': 'id',
            'is_public': 'isPublic',
            'mime': 'mime',
            'name': 'name',
            'sha1': 'sha1',
            'size': 'size',
            'tags': 'tags',
            'updated_time': 'updatedTime',
            'width': 'width'
        }

        self._links = links
        self._created_time = created_time
        self._description = description
        self._extension = extension
        self._height = height
        self._id = id
        self._is_public = is_public
        self._mime = mime
        self._name = name
        self._sha1 = sha1
        self._size = size
        self._tags = tags
        self._updated_time = updated_time
        self._width = width

    @classmethod
    def from_dict(cls, dikt: dict) -> 'File':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The File of this File.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def links(self):
        """Gets the links of this File.

        The links related to resource.

        :return: The links of this File.
        :rtype: List[FileLinksInner]
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this File.

        The links related to resource.

        :param links: The links of this File.
        :type links: List[FileLinksInner]
        """
        if links is not None and len(links) < 3:
            raise ValueError("Invalid value for `links`, number of items must be greater than or equal to `3`")

        self._links = links

    @property
    def created_time(self):
        """Gets the created_time of this File.

        The upload date/time.

        :return: The created_time of this File.
        :rtype: datetime
        """
        return self._created_time

    @created_time.setter
    def created_time(self, created_time):
        """Sets the created_time of this File.

        The upload date/time.

        :param created_time: The created_time of this File.
        :type created_time: datetime
        """

        self._created_time = created_time

    @property
    def description(self):
        """Gets the description of this File.

        The File description.

        :return: The description of this File.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this File.

        The File description.

        :param description: The description of this File.
        :type description: str
        """

        self._description = description

    @property
    def extension(self):
        """Gets the extension of this File.

        The File extension.

        :return: The extension of this File.
        :rtype: str
        """
        return self._extension

    @extension.setter
    def extension(self, extension):
        """Sets the extension of this File.

        The File extension.

        :param extension: The extension of this File.
        :type extension: str
        """

        self._extension = extension

    @property
    def height(self):
        """Gets the height of this File.

        Image height, applicable to images only.

        :return: The height of this File.
        :rtype: int
        """
        return self._height

    @height.setter
    def height(self, height):
        """Sets the height of this File.

        Image height, applicable to images only.

        :param height: The height of this File.
        :type height: int
        """

        self._height = height

    @property
    def id(self):
        """Gets the id of this File.

        The resource ID. Defaults to UUID v4.

        :return: The id of this File.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this File.

        The resource ID. Defaults to UUID v4.

        :param id: The id of this File.
        :type id: str
        """
        if id is not None and len(id) > 50:
            raise ValueError("Invalid value for `id`, length must be less than or equal to `50`")

        self._id = id

    @property
    def is_public(self):
        """Gets the is_public of this File.

        Is the file available publicly (without authentication). If true, the permalink in the _links section contains the public URL.

        :return: The is_public of this File.
        :rtype: bool
        """
        return self._is_public

    @is_public.setter
    def is_public(self, is_public):
        """Sets the is_public of this File.

        Is the file available publicly (without authentication). If true, the permalink in the _links section contains the public URL.

        :param is_public: The is_public of this File.
        :type is_public: bool
        """

        self._is_public = is_public

    @property
    def mime(self):
        """Gets the mime of this File.

        The mime type.

        :return: The mime of this File.
        :rtype: str
        """
        return self._mime

    @mime.setter
    def mime(self, mime):
        """Sets the mime of this File.

        The mime type.

        :param mime: The mime of this File.
        :type mime: str
        """
        allowed_values = ["image/png", "image/jpeg", "image/gif", "application/pdf", "audio/mpeg"]  # noqa: E501
        if mime not in allowed_values:
            raise ValueError(
                "Invalid value for `mime` ({0}), must be one of {1}"
                .format(mime, allowed_values)
            )

        self._mime = mime

    @property
    def name(self):
        """Gets the name of this File.

        Original File name.

        :return: The name of this File.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this File.

        Original File name.

        :param name: The name of this File.
        :type name: str
        """

        self._name = name

    @property
    def sha1(self):
        """Gets the sha1 of this File.

        Hash sum of the file.

        :return: The sha1 of this File.
        :rtype: str
        """
        return self._sha1

    @sha1.setter
    def sha1(self, sha1):
        """Sets the sha1 of this File.

        Hash sum of the file.

        :param sha1: The sha1 of this File.
        :type sha1: str
        """

        self._sha1 = sha1

    @property
    def size(self):
        """Gets the size of this File.

        The File size in bytes.

        :return: The size of this File.
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this File.

        The File size in bytes.

        :param size: The size of this File.
        :type size: int
        """

        self._size = size

    @property
    def tags(self):
        """Gets the tags of this File.

        The tags list.

        :return: The tags of this File.
        :rtype: List[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this File.

        The tags list.

        :param tags: The tags of this File.
        :type tags: List[str]
        """

        self._tags = tags

    @property
    def updated_time(self):
        """Gets the updated_time of this File.

        The latest update date/time.

        :return: The updated_time of this File.
        :rtype: datetime
        """
        return self._updated_time

    @updated_time.setter
    def updated_time(self, updated_time):
        """Sets the updated_time of this File.

        The latest update date/time.

        :param updated_time: The updated_time of this File.
        :type updated_time: datetime
        """

        self._updated_time = updated_time

    @property
    def width(self):
        """Gets the width of this File.

        Image width, applicable to images only.

        :return: The width of this File.
        :rtype: int
        """
        return self._width

    @width.setter
    def width(self, width):
        """Sets the width of this File.

        Image width, applicable to images only.

        :param width: The width of this File.
        :type width: int
        """

        self._width = width
