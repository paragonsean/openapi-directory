# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.common_schedule_instruction import CommonScheduleInstruction
from openapi_server.models.custom_event_schedule_instruction import CustomEventScheduleInstruction
from openapi_server.models.day_of_week_long import DayOfWeekLong
from openapi_server.models.invoice_retry_schedule_instruction import InvoiceRetryScheduleInstruction
from openapi_server.models.service_period_anchor_instruction import ServicePeriodAnchorInstruction
import re
from openapi_server import util


class DayOfWeek(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, method: str=None, day: DayOfWeekLong=None, time: str=None, week: str='next'):
        """DayOfWeek - a model defined in OpenAPI

        :param method: The method of this DayOfWeek.
        :param day: The day of this DayOfWeek.
        :param time: The time of this DayOfWeek.
        :param week: The week of this DayOfWeek.
        """
        self.openapi_types = {
            'method': str,
            'day': DayOfWeekLong,
            'time': str,
            'week': str
        }

        self.attribute_map = {
            'method': 'method',
            'day': 'day',
            'time': 'time',
            'week': 'week'
        }

        self._method = method
        self._day = day
        self._time = time
        self._week = week

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DayOfWeek':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The day-of-week of this DayOfWeek.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def method(self):
        """Gets the method of this DayOfWeek.


        :return: The method of this DayOfWeek.
        :rtype: str
        """
        return self._method

    @method.setter
    def method(self, method):
        """Sets the method of this DayOfWeek.


        :param method: The method of this DayOfWeek.
        :type method: str
        """
        allowed_values = ["intelligent", "immediately", "date-interval", "day-of-month", "day-of-week"]  # noqa: E501
        if method not in allowed_values:
            raise ValueError(
                "Invalid value for `method` ({0}), must be one of {1}"
                .format(method, allowed_values)
            )

        self._method = method

    @property
    def day(self):
        """Gets the day of this DayOfWeek.


        :return: The day of this DayOfWeek.
        :rtype: DayOfWeekLong
        """
        return self._day

    @day.setter
    def day(self, day):
        """Sets the day of this DayOfWeek.


        :param day: The day of this DayOfWeek.
        :type day: DayOfWeekLong
        """
        if day is None:
            raise ValueError("Invalid value for `day`, must not be `None`")

        self._day = day

    @property
    def time(self):
        """Gets the time of this DayOfWeek.

        Extended ISO-8601 format of time.

        :return: The time of this DayOfWeek.
        :rtype: str
        """
        return self._time

    @time.setter
    def time(self, time):
        """Sets the time of this DayOfWeek.

        Extended ISO-8601 format of time.

        :param time: The time of this DayOfWeek.
        :type time: str
        """
        if time is not None and not re.search(r'^(([01][0-9]|2[0-3]):([0-5][0-9])(?::([0-5][0-9]))?)((?:[+-](?:0[0-9]|1[12])(?::?[0-5][0-9])?)|Z)?$', time):
            raise ValueError("Invalid value for `time`, must be a follow pattern or equal to `/^(([01][0-9]|2[0-3]):([0-5][0-9])(?::([0-5][0-9]))?)((?:[+-](?:0[0-9]|1[12])(?::?[0-5][0-9])?)|Z)?$/`")

        self._time = time

    @property
    def week(self):
        """Gets the week of this DayOfWeek.


        :return: The week of this DayOfWeek.
        :rtype: str
        """
        return self._week

    @week.setter
    def week(self, week):
        """Sets the week of this DayOfWeek.


        :param week: The week of this DayOfWeek.
        :type week: str
        """
        allowed_values = ["next", "first-in-month", "last-in-month"]  # noqa: E501
        if week not in allowed_values:
            raise ValueError(
                "Invalid value for `week` ({0}), must be one of {1}"
                .format(week, allowed_values)
            )

        self._week = week
