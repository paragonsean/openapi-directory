# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AuthorizeNetAllOfCredentials(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, api_login_id: str=None, transaction_key: str=None):
        """AuthorizeNetAllOfCredentials - a model defined in OpenAPI

        :param api_login_id: The api_login_id of this AuthorizeNetAllOfCredentials.
        :param transaction_key: The transaction_key of this AuthorizeNetAllOfCredentials.
        """
        self.openapi_types = {
            'api_login_id': str,
            'transaction_key': str
        }

        self.attribute_map = {
            'api_login_id': 'apiLoginId',
            'transaction_key': 'transactionKey'
        }

        self._api_login_id = api_login_id
        self._transaction_key = transaction_key

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AuthorizeNetAllOfCredentials':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AuthorizeNet_allOf_credentials of this AuthorizeNetAllOfCredentials.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def api_login_id(self):
        """Gets the api_login_id of this AuthorizeNetAllOfCredentials.

        AuthorizeNet Gateway api login ID.

        :return: The api_login_id of this AuthorizeNetAllOfCredentials.
        :rtype: str
        """
        return self._api_login_id

    @api_login_id.setter
    def api_login_id(self, api_login_id):
        """Sets the api_login_id of this AuthorizeNetAllOfCredentials.

        AuthorizeNet Gateway api login ID.

        :param api_login_id: The api_login_id of this AuthorizeNetAllOfCredentials.
        :type api_login_id: str
        """
        if api_login_id is None:
            raise ValueError("Invalid value for `api_login_id`, must not be `None`")

        self._api_login_id = api_login_id

    @property
    def transaction_key(self):
        """Gets the transaction_key of this AuthorizeNetAllOfCredentials.

        AuthorizeNet Gateway Transaction Key.

        :return: The transaction_key of this AuthorizeNetAllOfCredentials.
        :rtype: str
        """
        return self._transaction_key

    @transaction_key.setter
    def transaction_key(self, transaction_key):
        """Sets the transaction_key of this AuthorizeNetAllOfCredentials.

        AuthorizeNet Gateway Transaction Key.

        :param transaction_key: The transaction_key of this AuthorizeNetAllOfCredentials.
        :type transaction_key: str
        """
        if transaction_key is None:
            raise ValueError("Invalid value for `transaction_key`, must not be `None`")

        self._transaction_key = transaction_key
