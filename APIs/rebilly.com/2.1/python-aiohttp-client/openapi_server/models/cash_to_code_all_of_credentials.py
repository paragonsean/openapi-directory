# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CashToCodeAllOfCredentials(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cash_to_code_password: str=None, cash_to_code_username: str=None, merchant_password: str=None, merchant_username: str=None):
        """CashToCodeAllOfCredentials - a model defined in OpenAPI

        :param cash_to_code_password: The cash_to_code_password of this CashToCodeAllOfCredentials.
        :param cash_to_code_username: The cash_to_code_username of this CashToCodeAllOfCredentials.
        :param merchant_password: The merchant_password of this CashToCodeAllOfCredentials.
        :param merchant_username: The merchant_username of this CashToCodeAllOfCredentials.
        """
        self.openapi_types = {
            'cash_to_code_password': str,
            'cash_to_code_username': str,
            'merchant_password': str,
            'merchant_username': str
        }

        self.attribute_map = {
            'cash_to_code_password': 'cashToCodePassword',
            'cash_to_code_username': 'cashToCodeUsername',
            'merchant_password': 'merchantPassword',
            'merchant_username': 'merchantUsername'
        }

        self._cash_to_code_password = cash_to_code_password
        self._cash_to_code_username = cash_to_code_username
        self._merchant_password = merchant_password
        self._merchant_username = merchant_username

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CashToCodeAllOfCredentials':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CashToCode_allOf_credentials of this CashToCodeAllOfCredentials.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cash_to_code_password(self):
        """Gets the cash_to_code_password of this CashToCodeAllOfCredentials.

        CashToCode credentials password.

        :return: The cash_to_code_password of this CashToCodeAllOfCredentials.
        :rtype: str
        """
        return self._cash_to_code_password

    @cash_to_code_password.setter
    def cash_to_code_password(self, cash_to_code_password):
        """Sets the cash_to_code_password of this CashToCodeAllOfCredentials.

        CashToCode credentials password.

        :param cash_to_code_password: The cash_to_code_password of this CashToCodeAllOfCredentials.
        :type cash_to_code_password: str
        """
        if cash_to_code_password is None:
            raise ValueError("Invalid value for `cash_to_code_password`, must not be `None`")

        self._cash_to_code_password = cash_to_code_password

    @property
    def cash_to_code_username(self):
        """Gets the cash_to_code_username of this CashToCodeAllOfCredentials.

        CashToCode credentials Username.

        :return: The cash_to_code_username of this CashToCodeAllOfCredentials.
        :rtype: str
        """
        return self._cash_to_code_username

    @cash_to_code_username.setter
    def cash_to_code_username(self, cash_to_code_username):
        """Sets the cash_to_code_username of this CashToCodeAllOfCredentials.

        CashToCode credentials Username.

        :param cash_to_code_username: The cash_to_code_username of this CashToCodeAllOfCredentials.
        :type cash_to_code_username: str
        """
        if cash_to_code_username is None:
            raise ValueError("Invalid value for `cash_to_code_username`, must not be `None`")

        self._cash_to_code_username = cash_to_code_username

    @property
    def merchant_password(self):
        """Gets the merchant_password of this CashToCodeAllOfCredentials.

        Merchant credentials password.

        :return: The merchant_password of this CashToCodeAllOfCredentials.
        :rtype: str
        """
        return self._merchant_password

    @merchant_password.setter
    def merchant_password(self, merchant_password):
        """Sets the merchant_password of this CashToCodeAllOfCredentials.

        Merchant credentials password.

        :param merchant_password: The merchant_password of this CashToCodeAllOfCredentials.
        :type merchant_password: str
        """
        if merchant_password is None:
            raise ValueError("Invalid value for `merchant_password`, must not be `None`")

        self._merchant_password = merchant_password

    @property
    def merchant_username(self):
        """Gets the merchant_username of this CashToCodeAllOfCredentials.

        Merchant credentials Username.

        :return: The merchant_username of this CashToCodeAllOfCredentials.
        :rtype: str
        """
        return self._merchant_username

    @merchant_username.setter
    def merchant_username(self, merchant_username):
        """Sets the merchant_username of this CashToCodeAllOfCredentials.

        Merchant credentials Username.

        :param merchant_username: The merchant_username of this CashToCodeAllOfCredentials.
        :type merchant_username: str
        """
        if merchant_username is None:
            raise ValueError("Invalid value for `merchant_username`, must not be `None`")

        self._merchant_username = merchant_username
