# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.kyc_document_subtypes import KycDocumentSubtypes
from openapi_server.models.kyc_document_types import KycDocumentTypes
from openapi_server import util


class CommonKycRequestDocumentsInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, max_attempts: int=3, subtypes: List[KycDocumentSubtypes]=None, type: KycDocumentTypes=None):
        """CommonKycRequestDocumentsInner - a model defined in OpenAPI

        :param max_attempts: The max_attempts of this CommonKycRequestDocumentsInner.
        :param subtypes: The subtypes of this CommonKycRequestDocumentsInner.
        :param type: The type of this CommonKycRequestDocumentsInner.
        """
        self.openapi_types = {
            'max_attempts': int,
            'subtypes': List[KycDocumentSubtypes],
            'type': KycDocumentTypes
        }

        self.attribute_map = {
            'max_attempts': 'maxAttempts',
            'subtypes': 'subtypes',
            'type': 'type'
        }

        self._max_attempts = max_attempts
        self._subtypes = subtypes
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CommonKycRequestDocumentsInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CommonKycRequest_documents_inner of this CommonKycRequestDocumentsInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def max_attempts(self):
        """Gets the max_attempts of this CommonKycRequestDocumentsInner.

        The number of document upload attempts. `0` treated as unlimited.

        :return: The max_attempts of this CommonKycRequestDocumentsInner.
        :rtype: int
        """
        return self._max_attempts

    @max_attempts.setter
    def max_attempts(self, max_attempts):
        """Sets the max_attempts of this CommonKycRequestDocumentsInner.

        The number of document upload attempts. `0` treated as unlimited.

        :param max_attempts: The max_attempts of this CommonKycRequestDocumentsInner.
        :type max_attempts: int
        """
        if max_attempts is not None and max_attempts > 100:
            raise ValueError("Invalid value for `max_attempts`, must be a value less than or equal to `100`")
        if max_attempts is not None and max_attempts < 0:
            raise ValueError("Invalid value for `max_attempts`, must be a value greater than or equal to `0`")

        self._max_attempts = max_attempts

    @property
    def subtypes(self):
        """Gets the subtypes of this CommonKycRequestDocumentsInner.

        Document subtype allowed for customer.

        :return: The subtypes of this CommonKycRequestDocumentsInner.
        :rtype: List[KycDocumentSubtypes]
        """
        return self._subtypes

    @subtypes.setter
    def subtypes(self, subtypes):
        """Sets the subtypes of this CommonKycRequestDocumentsInner.

        Document subtype allowed for customer.

        :param subtypes: The subtypes of this CommonKycRequestDocumentsInner.
        :type subtypes: List[KycDocumentSubtypes]
        """

        self._subtypes = subtypes

    @property
    def type(self):
        """Gets the type of this CommonKycRequestDocumentsInner.

        Document type to be requested from customer.

        :return: The type of this CommonKycRequestDocumentsInner.
        :rtype: KycDocumentTypes
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CommonKycRequestDocumentsInner.

        Document type to be requested from customer.

        :param type: The type of this CommonKycRequestDocumentsInner.
        :type type: KycDocumentTypes
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type
