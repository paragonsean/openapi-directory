# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AmexVPCAllOfCredentials(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, access_code: str=None, merchant_id: str=None, password: str=None, user: str=None):
        """AmexVPCAllOfCredentials - a model defined in OpenAPI

        :param access_code: The access_code of this AmexVPCAllOfCredentials.
        :param merchant_id: The merchant_id of this AmexVPCAllOfCredentials.
        :param password: The password of this AmexVPCAllOfCredentials.
        :param user: The user of this AmexVPCAllOfCredentials.
        """
        self.openapi_types = {
            'access_code': str,
            'merchant_id': str,
            'password': str,
            'user': str
        }

        self.attribute_map = {
            'access_code': 'accessCode',
            'merchant_id': 'merchantId',
            'password': 'password',
            'user': 'user'
        }

        self._access_code = access_code
        self._merchant_id = merchant_id
        self._password = password
        self._user = user

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AmexVPCAllOfCredentials':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AmexVPC_allOf_credentials of this AmexVPCAllOfCredentials.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def access_code(self):
        """Gets the access_code of this AmexVPCAllOfCredentials.

        Access Code.

        :return: The access_code of this AmexVPCAllOfCredentials.
        :rtype: str
        """
        return self._access_code

    @access_code.setter
    def access_code(self, access_code):
        """Sets the access_code of this AmexVPCAllOfCredentials.

        Access Code.

        :param access_code: The access_code of this AmexVPCAllOfCredentials.
        :type access_code: str
        """
        if access_code is None:
            raise ValueError("Invalid value for `access_code`, must not be `None`")

        self._access_code = access_code

    @property
    def merchant_id(self):
        """Gets the merchant_id of this AmexVPCAllOfCredentials.

        Merchant ID.

        :return: The merchant_id of this AmexVPCAllOfCredentials.
        :rtype: str
        """
        return self._merchant_id

    @merchant_id.setter
    def merchant_id(self, merchant_id):
        """Sets the merchant_id of this AmexVPCAllOfCredentials.

        Merchant ID.

        :param merchant_id: The merchant_id of this AmexVPCAllOfCredentials.
        :type merchant_id: str
        """
        if merchant_id is None:
            raise ValueError("Invalid value for `merchant_id`, must not be `None`")

        self._merchant_id = merchant_id

    @property
    def password(self):
        """Gets the password of this AmexVPCAllOfCredentials.

        Password (used for refund, void and capture).

        :return: The password of this AmexVPCAllOfCredentials.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this AmexVPCAllOfCredentials.

        Password (used for refund, void and capture).

        :param password: The password of this AmexVPCAllOfCredentials.
        :type password: str
        """
        if password is None:
            raise ValueError("Invalid value for `password`, must not be `None`")

        self._password = password

    @property
    def user(self):
        """Gets the user of this AmexVPCAllOfCredentials.

        User (used for refund, void and capture).

        :return: The user of this AmexVPCAllOfCredentials.
        :rtype: str
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this AmexVPCAllOfCredentials.

        User (used for refund, void and capture).

        :param user: The user of this AmexVPCAllOfCredentials.
        :type user: str
        """
        if user is None:
            raise ValueError("Invalid value for `user`, must not be `None`")

        self._user = user
