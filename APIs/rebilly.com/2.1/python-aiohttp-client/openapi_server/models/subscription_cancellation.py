# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.self_link import SelfLink
from openapi_server.models.upcoming_invoice_item import UpcomingInvoiceItem
from openapi_server import util


class SubscriptionCancellation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, links: List[SelfLink]=None, applied_invoice_id: str=None, canceled_by: str='customer', canceled_time: datetime=None, churn_time: datetime=None, created_time: datetime=None, description: str=None, id: str=None, line_item_subtotal: float=None, line_items: List[UpcomingInvoiceItem]=None, prorated: bool=False, prorated_invoice_id: str=None, reason: str='other', status: str='confirmed', subscription_id: str=None):
        """SubscriptionCancellation - a model defined in OpenAPI

        :param links: The links of this SubscriptionCancellation.
        :param applied_invoice_id: The applied_invoice_id of this SubscriptionCancellation.
        :param canceled_by: The canceled_by of this SubscriptionCancellation.
        :param canceled_time: The canceled_time of this SubscriptionCancellation.
        :param churn_time: The churn_time of this SubscriptionCancellation.
        :param created_time: The created_time of this SubscriptionCancellation.
        :param description: The description of this SubscriptionCancellation.
        :param id: The id of this SubscriptionCancellation.
        :param line_item_subtotal: The line_item_subtotal of this SubscriptionCancellation.
        :param line_items: The line_items of this SubscriptionCancellation.
        :param prorated: The prorated of this SubscriptionCancellation.
        :param prorated_invoice_id: The prorated_invoice_id of this SubscriptionCancellation.
        :param reason: The reason of this SubscriptionCancellation.
        :param status: The status of this SubscriptionCancellation.
        :param subscription_id: The subscription_id of this SubscriptionCancellation.
        """
        self.openapi_types = {
            'links': List[SelfLink],
            'applied_invoice_id': str,
            'canceled_by': str,
            'canceled_time': datetime,
            'churn_time': datetime,
            'created_time': datetime,
            'description': str,
            'id': str,
            'line_item_subtotal': float,
            'line_items': List[UpcomingInvoiceItem],
            'prorated': bool,
            'prorated_invoice_id': str,
            'reason': str,
            'status': str,
            'subscription_id': str
        }

        self.attribute_map = {
            'links': '_links',
            'applied_invoice_id': 'appliedInvoiceId',
            'canceled_by': 'canceledBy',
            'canceled_time': 'canceledTime',
            'churn_time': 'churnTime',
            'created_time': 'createdTime',
            'description': 'description',
            'id': 'id',
            'line_item_subtotal': 'lineItemSubtotal',
            'line_items': 'lineItems',
            'prorated': 'prorated',
            'prorated_invoice_id': 'proratedInvoiceId',
            'reason': 'reason',
            'status': 'status',
            'subscription_id': 'subscriptionId'
        }

        self._links = links
        self._applied_invoice_id = applied_invoice_id
        self._canceled_by = canceled_by
        self._canceled_time = canceled_time
        self._churn_time = churn_time
        self._created_time = created_time
        self._description = description
        self._id = id
        self._line_item_subtotal = line_item_subtotal
        self._line_items = line_items
        self._prorated = prorated
        self._prorated_invoice_id = prorated_invoice_id
        self._reason = reason
        self._status = status
        self._subscription_id = subscription_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SubscriptionCancellation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SubscriptionCancellation of this SubscriptionCancellation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def links(self):
        """Gets the links of this SubscriptionCancellation.

        The links related to resource.

        :return: The links of this SubscriptionCancellation.
        :rtype: List[SelfLink]
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this SubscriptionCancellation.

        The links related to resource.

        :param links: The links of this SubscriptionCancellation.
        :type links: List[SelfLink]
        """
        if links is not None and len(links) < 1:
            raise ValueError("Invalid value for `links`, number of items must be greater than or equal to `1`")

        self._links = links

    @property
    def applied_invoice_id(self):
        """Gets the applied_invoice_id of this SubscriptionCancellation.

        The identifier of the invoice where the cancellation fees or credits are applied.

        :return: The applied_invoice_id of this SubscriptionCancellation.
        :rtype: str
        """
        return self._applied_invoice_id

    @applied_invoice_id.setter
    def applied_invoice_id(self, applied_invoice_id):
        """Sets the applied_invoice_id of this SubscriptionCancellation.

        The identifier of the invoice where the cancellation fees or credits are applied.

        :param applied_invoice_id: The applied_invoice_id of this SubscriptionCancellation.
        :type applied_invoice_id: str
        """
        if applied_invoice_id is not None and len(applied_invoice_id) > 50:
            raise ValueError("Invalid value for `applied_invoice_id`, length must be less than or equal to `50`")

        self._applied_invoice_id = applied_invoice_id

    @property
    def canceled_by(self):
        """Gets the canceled_by of this SubscriptionCancellation.

        Who did the cancellation.

        :return: The canceled_by of this SubscriptionCancellation.
        :rtype: str
        """
        return self._canceled_by

    @canceled_by.setter
    def canceled_by(self, canceled_by):
        """Sets the canceled_by of this SubscriptionCancellation.

        Who did the cancellation.

        :param canceled_by: The canceled_by of this SubscriptionCancellation.
        :type canceled_by: str
        """
        allowed_values = ["merchant", "customer"]  # noqa: E501
        if canceled_by not in allowed_values:
            raise ValueError(
                "Invalid value for `canceled_by` ({0}), must be one of {1}"
                .format(canceled_by, allowed_values)
            )

        self._canceled_by = canceled_by

    @property
    def canceled_time(self):
        """Gets the canceled_time of this SubscriptionCancellation.

        The cancellation time (when the status is confirmed which is by default unless specified \"draft\").

        :return: The canceled_time of this SubscriptionCancellation.
        :rtype: datetime
        """
        return self._canceled_time

    @canceled_time.setter
    def canceled_time(self, canceled_time):
        """Sets the canceled_time of this SubscriptionCancellation.

        The cancellation time (when the status is confirmed which is by default unless specified \"draft\").

        :param canceled_time: The canceled_time of this SubscriptionCancellation.
        :type canceled_time: datetime
        """

        self._canceled_time = canceled_time

    @property
    def churn_time(self):
        """Gets the churn_time of this SubscriptionCancellation.

        The time when the subscription will be deactivated.

        :return: The churn_time of this SubscriptionCancellation.
        :rtype: datetime
        """
        return self._churn_time

    @churn_time.setter
    def churn_time(self, churn_time):
        """Sets the churn_time of this SubscriptionCancellation.

        The time when the subscription will be deactivated.

        :param churn_time: The churn_time of this SubscriptionCancellation.
        :type churn_time: datetime
        """
        if churn_time is None:
            raise ValueError("Invalid value for `churn_time`, must not be `None`")

        self._churn_time = churn_time

    @property
    def created_time(self):
        """Gets the created_time of this SubscriptionCancellation.

        The time of resource creation (when it is posted).

        :return: The created_time of this SubscriptionCancellation.
        :rtype: datetime
        """
        return self._created_time

    @created_time.setter
    def created_time(self, created_time):
        """Sets the created_time of this SubscriptionCancellation.

        The time of resource creation (when it is posted).

        :param created_time: The created_time of this SubscriptionCancellation.
        :type created_time: datetime
        """

        self._created_time = created_time

    @property
    def description(self):
        """Gets the description of this SubscriptionCancellation.

        Cancel reason description in free form.

        :return: The description of this SubscriptionCancellation.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this SubscriptionCancellation.

        Cancel reason description in free form.

        :param description: The description of this SubscriptionCancellation.
        :type description: str
        """
        if description is not None and len(description) > 255:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `255`")

        self._description = description

    @property
    def id(self):
        """Gets the id of this SubscriptionCancellation.

        Cancellation identifier.

        :return: The id of this SubscriptionCancellation.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SubscriptionCancellation.

        Cancellation identifier.

        :param id: The id of this SubscriptionCancellation.
        :type id: str
        """
        if id is not None and len(id) > 50:
            raise ValueError("Invalid value for `id`, length must be less than or equal to `50`")

        self._id = id

    @property
    def line_item_subtotal(self):
        """Gets the line_item_subtotal of this SubscriptionCancellation.

        Subtotal of the line items which will be added after the subscription's cancellation.

        :return: The line_item_subtotal of this SubscriptionCancellation.
        :rtype: float
        """
        return self._line_item_subtotal

    @line_item_subtotal.setter
    def line_item_subtotal(self, line_item_subtotal):
        """Sets the line_item_subtotal of this SubscriptionCancellation.

        Subtotal of the line items which will be added after the subscription's cancellation.

        :param line_item_subtotal: The line_item_subtotal of this SubscriptionCancellation.
        :type line_item_subtotal: float
        """

        self._line_item_subtotal = line_item_subtotal

    @property
    def line_items(self):
        """Gets the line_items of this SubscriptionCancellation.

        Items to be added to the new invoice. Proration item is generated and added automatically.

        :return: The line_items of this SubscriptionCancellation.
        :rtype: List[UpcomingInvoiceItem]
        """
        return self._line_items

    @line_items.setter
    def line_items(self, line_items):
        """Sets the line_items of this SubscriptionCancellation.

        Items to be added to the new invoice. Proration item is generated and added automatically.

        :param line_items: The line_items of this SubscriptionCancellation.
        :type line_items: List[UpcomingInvoiceItem]
        """

        self._line_items = line_items

    @property
    def prorated(self):
        """Gets the prorated of this SubscriptionCancellation.

        Defines if the customer gets a pro-rata credit for the time remaining between `churnTime` and subscription's next renewal time. 

        :return: The prorated of this SubscriptionCancellation.
        :rtype: bool
        """
        return self._prorated

    @prorated.setter
    def prorated(self, prorated):
        """Sets the prorated of this SubscriptionCancellation.

        Defines if the customer gets a pro-rata credit for the time remaining between `churnTime` and subscription's next renewal time. 

        :param prorated: The prorated of this SubscriptionCancellation.
        :type prorated: bool
        """

        self._prorated = prorated

    @property
    def prorated_invoice_id(self):
        """Gets the prorated_invoice_id of this SubscriptionCancellation.

        Identifier of the invoice on which the cancellation proration is calculated.

        :return: The prorated_invoice_id of this SubscriptionCancellation.
        :rtype: str
        """
        return self._prorated_invoice_id

    @prorated_invoice_id.setter
    def prorated_invoice_id(self, prorated_invoice_id):
        """Sets the prorated_invoice_id of this SubscriptionCancellation.

        Identifier of the invoice on which the cancellation proration is calculated.

        :param prorated_invoice_id: The prorated_invoice_id of this SubscriptionCancellation.
        :type prorated_invoice_id: str
        """
        if prorated_invoice_id is not None and len(prorated_invoice_id) > 50:
            raise ValueError("Invalid value for `prorated_invoice_id`, length must be less than or equal to `50`")

        self._prorated_invoice_id = prorated_invoice_id

    @property
    def reason(self):
        """Gets the reason of this SubscriptionCancellation.

        Cancellation reason.

        :return: The reason of this SubscriptionCancellation.
        :rtype: str
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """Sets the reason of this SubscriptionCancellation.

        Cancellation reason.

        :param reason: The reason of this SubscriptionCancellation.
        :type reason: str
        """
        allowed_values = ["did-not-use", "did-not-want", "missing-features", "bugs-or-problems", "do-not-remember", "risk-warning", "contract-expired", "too-expensive", "other", "billing-failure"]  # noqa: E501
        if reason not in allowed_values:
            raise ValueError(
                "Invalid value for `reason` ({0}), must be one of {1}"
                .format(reason, allowed_values)
            )

        self._reason = reason

    @property
    def status(self):
        """Gets the status of this SubscriptionCancellation.

        \"draft\" defines that the cancellation isn't applied on an invoice and subscription but can be inspected to see the charge. \"confirmed\" will set a subscription to be canceled when the `churnTime` is reached. \"completed\" is a read-only status which is set by the system when the churnTime is reached. The cancellation may not be changed or deleted when the status is \"completed\". 

        :return: The status of this SubscriptionCancellation.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this SubscriptionCancellation.

        \"draft\" defines that the cancellation isn't applied on an invoice and subscription but can be inspected to see the charge. \"confirmed\" will set a subscription to be canceled when the `churnTime` is reached. \"completed\" is a read-only status which is set by the system when the churnTime is reached. The cancellation may not be changed or deleted when the status is \"completed\". 

        :param status: The status of this SubscriptionCancellation.
        :type status: str
        """
        allowed_values = ["draft", "confirmed", "completed", "revoked"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def subscription_id(self):
        """Gets the subscription_id of this SubscriptionCancellation.

        Identifier of the canceled subscription order.

        :return: The subscription_id of this SubscriptionCancellation.
        :rtype: str
        """
        return self._subscription_id

    @subscription_id.setter
    def subscription_id(self, subscription_id):
        """Sets the subscription_id of this SubscriptionCancellation.

        Identifier of the canceled subscription order.

        :param subscription_id: The subscription_id of this SubscriptionCancellation.
        :type subscription_id: str
        """
        if subscription_id is None:
            raise ValueError("Invalid value for `subscription_id`, must not be `None`")
        if subscription_id is not None and len(subscription_id) > 50:
            raise ValueError("Invalid value for `subscription_id`, length must be less than or equal to `50`")

        self._subscription_id = subscription_id
