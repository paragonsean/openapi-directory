# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.price_based_shipping_rate import PriceBasedShippingRate
from openapi_server.models.self_link import SelfLink
from openapi_server import util


class ShippingZone(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, links: List[SelfLink]=None, countries: List[str]=None, created_time: datetime=None, id: str=None, is_default: object=None, name: str=None, rates: List[PriceBasedShippingRate]=None, updated_time: datetime=None):
        """ShippingZone - a model defined in OpenAPI

        :param links: The links of this ShippingZone.
        :param countries: The countries of this ShippingZone.
        :param created_time: The created_time of this ShippingZone.
        :param id: The id of this ShippingZone.
        :param is_default: The is_default of this ShippingZone.
        :param name: The name of this ShippingZone.
        :param rates: The rates of this ShippingZone.
        :param updated_time: The updated_time of this ShippingZone.
        """
        self.openapi_types = {
            'links': List[SelfLink],
            'countries': List[str],
            'created_time': datetime,
            'id': str,
            'is_default': object,
            'name': str,
            'rates': List[PriceBasedShippingRate],
            'updated_time': datetime
        }

        self.attribute_map = {
            'links': '_links',
            'countries': 'countries',
            'created_time': 'createdTime',
            'id': 'id',
            'is_default': 'isDefault',
            'name': 'name',
            'rates': 'rates',
            'updated_time': 'updatedTime'
        }

        self._links = links
        self._countries = countries
        self._created_time = created_time
        self._id = id
        self._is_default = is_default
        self._name = name
        self._rates = rates
        self._updated_time = updated_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ShippingZone':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ShippingZone of this ShippingZone.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def links(self):
        """Gets the links of this ShippingZone.

        The links related to resource.

        :return: The links of this ShippingZone.
        :rtype: List[SelfLink]
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this ShippingZone.

        The links related to resource.

        :param links: The links of this ShippingZone.
        :type links: List[SelfLink]
        """
        if links is not None and len(links) < 1:
            raise ValueError("Invalid value for `links`, number of items must be greater than or equal to `1`")

        self._links = links

    @property
    def countries(self):
        """Gets the countries of this ShippingZone.

        Countries covered by the shipping zone. A country can only belong to one shipping zone (no overlapping). This property can be empty or null to create a default shipping zone for countries that were not specified in other zones. 

        :return: The countries of this ShippingZone.
        :rtype: List[str]
        """
        return self._countries

    @countries.setter
    def countries(self, countries):
        """Sets the countries of this ShippingZone.

        Countries covered by the shipping zone. A country can only belong to one shipping zone (no overlapping). This property can be empty or null to create a default shipping zone for countries that were not specified in other zones. 

        :param countries: The countries of this ShippingZone.
        :type countries: List[str]
        """

        self._countries = countries

    @property
    def created_time(self):
        """Gets the created_time of this ShippingZone.

        The shipping zone created time.

        :return: The created_time of this ShippingZone.
        :rtype: datetime
        """
        return self._created_time

    @created_time.setter
    def created_time(self, created_time):
        """Sets the created_time of this ShippingZone.

        The shipping zone created time.

        :param created_time: The created_time of this ShippingZone.
        :type created_time: datetime
        """

        self._created_time = created_time

    @property
    def id(self):
        """Gets the id of this ShippingZone.

        The shipping zone identifier string.

        :return: The id of this ShippingZone.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ShippingZone.

        The shipping zone identifier string.

        :param id: The id of this ShippingZone.
        :type id: str
        """
        if id is not None and len(id) > 50:
            raise ValueError("Invalid value for `id`, length must be less than or equal to `50`")

        self._id = id

    @property
    def is_default(self):
        """Gets the is_default of this ShippingZone.

        Is this Shipping Zone default.

        :return: The is_default of this ShippingZone.
        :rtype: object
        """
        return self._is_default

    @is_default.setter
    def is_default(self, is_default):
        """Sets the is_default of this ShippingZone.

        Is this Shipping Zone default.

        :param is_default: The is_default of this ShippingZone.
        :type is_default: object
        """

        self._is_default = is_default

    @property
    def name(self):
        """Gets the name of this ShippingZone.

        The shipping zone name.

        :return: The name of this ShippingZone.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ShippingZone.

        The shipping zone name.

        :param name: The name of this ShippingZone.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) > 255:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `255`")

        self._name = name

    @property
    def rates(self):
        """Gets the rates of this ShippingZone.

        Price-based shipping rate instructions.

        :return: The rates of this ShippingZone.
        :rtype: List[PriceBasedShippingRate]
        """
        return self._rates

    @rates.setter
    def rates(self, rates):
        """Sets the rates of this ShippingZone.

        Price-based shipping rate instructions.

        :param rates: The rates of this ShippingZone.
        :type rates: List[PriceBasedShippingRate]
        """

        self._rates = rates

    @property
    def updated_time(self):
        """Gets the updated_time of this ShippingZone.

        The shipping zone updated time.

        :return: The updated_time of this ShippingZone.
        :rtype: datetime
        """
        return self._updated_time

    @updated_time.setter
    def updated_time(self, updated_time):
        """Sets the updated_time of this ShippingZone.

        The shipping zone updated time.

        :param updated_time: The updated_time of this ShippingZone.
        :type updated_time: datetime
        """

        self._updated_time = updated_time
