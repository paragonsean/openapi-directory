# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.alternative_payment_instrument2_embedded_inner import AlternativePaymentInstrument2EmbeddedInner
from openapi_server.models.alternative_payment_instrument2_links_inner import AlternativePaymentInstrument2LinksInner
from openapi_server.models.alternative_payment_methods import AlternativePaymentMethods
from openapi_server.models.contact_object import ContactObject
from openapi_server.models.risk_metadata import RiskMetadata
from openapi_server import util


class AlternativePaymentInstrument2(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, embedded: List[AlternativePaymentInstrument2EmbeddedInner]=None, links: List[AlternativePaymentInstrument2LinksInner]=None, billing_address: ContactObject=None, created_time: datetime=None, custom_fields: object=None, customer_id: str=None, id: str=None, method: AlternativePaymentMethods=None, risk_metadata: RiskMetadata=None, status: str=None, updated_time: datetime=None):
        """AlternativePaymentInstrument2 - a model defined in OpenAPI

        :param embedded: The embedded of this AlternativePaymentInstrument2.
        :param links: The links of this AlternativePaymentInstrument2.
        :param billing_address: The billing_address of this AlternativePaymentInstrument2.
        :param created_time: The created_time of this AlternativePaymentInstrument2.
        :param custom_fields: The custom_fields of this AlternativePaymentInstrument2.
        :param customer_id: The customer_id of this AlternativePaymentInstrument2.
        :param id: The id of this AlternativePaymentInstrument2.
        :param method: The method of this AlternativePaymentInstrument2.
        :param risk_metadata: The risk_metadata of this AlternativePaymentInstrument2.
        :param status: The status of this AlternativePaymentInstrument2.
        :param updated_time: The updated_time of this AlternativePaymentInstrument2.
        """
        self.openapi_types = {
            'embedded': List[AlternativePaymentInstrument2EmbeddedInner],
            'links': List[AlternativePaymentInstrument2LinksInner],
            'billing_address': ContactObject,
            'created_time': datetime,
            'custom_fields': object,
            'customer_id': str,
            'id': str,
            'method': AlternativePaymentMethods,
            'risk_metadata': RiskMetadata,
            'status': str,
            'updated_time': datetime
        }

        self.attribute_map = {
            'embedded': '_embedded',
            'links': '_links',
            'billing_address': 'billingAddress',
            'created_time': 'createdTime',
            'custom_fields': 'customFields',
            'customer_id': 'customerId',
            'id': 'id',
            'method': 'method',
            'risk_metadata': 'riskMetadata',
            'status': 'status',
            'updated_time': 'updatedTime'
        }

        self._embedded = embedded
        self._links = links
        self._billing_address = billing_address
        self._created_time = created_time
        self._custom_fields = custom_fields
        self._customer_id = customer_id
        self._id = id
        self._method = method
        self._risk_metadata = risk_metadata
        self._status = status
        self._updated_time = updated_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AlternativePaymentInstrument2':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AlternativePaymentInstrument-2 of this AlternativePaymentInstrument2.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def embedded(self):
        """Gets the embedded of this AlternativePaymentInstrument2.

        Any embedded objects available that are requested by the `expand` querystring parameter.

        :return: The embedded of this AlternativePaymentInstrument2.
        :rtype: List[AlternativePaymentInstrument2EmbeddedInner]
        """
        return self._embedded

    @embedded.setter
    def embedded(self, embedded):
        """Sets the embedded of this AlternativePaymentInstrument2.

        Any embedded objects available that are requested by the `expand` querystring parameter.

        :param embedded: The embedded of this AlternativePaymentInstrument2.
        :type embedded: List[AlternativePaymentInstrument2EmbeddedInner]
        """
        if embedded is not None and len(embedded) < 1:
            raise ValueError("Invalid value for `embedded`, number of items must be greater than or equal to `1`")

        self._embedded = embedded

    @property
    def links(self):
        """Gets the links of this AlternativePaymentInstrument2.

        Links related to the resource.

        :return: The links of this AlternativePaymentInstrument2.
        :rtype: List[AlternativePaymentInstrument2LinksInner]
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this AlternativePaymentInstrument2.

        Links related to the resource.

        :param links: The links of this AlternativePaymentInstrument2.
        :type links: List[AlternativePaymentInstrument2LinksInner]
        """
        if links is not None and len(links) < 1:
            raise ValueError("Invalid value for `links`, number of items must be greater than or equal to `1`")

        self._links = links

    @property
    def billing_address(self):
        """Gets the billing_address of this AlternativePaymentInstrument2.

        The billing address.

        :return: The billing_address of this AlternativePaymentInstrument2.
        :rtype: ContactObject
        """
        return self._billing_address

    @billing_address.setter
    def billing_address(self, billing_address):
        """Sets the billing_address of this AlternativePaymentInstrument2.

        The billing address.

        :param billing_address: The billing_address of this AlternativePaymentInstrument2.
        :type billing_address: ContactObject
        """

        self._billing_address = billing_address

    @property
    def created_time(self):
        """Gets the created_time of this AlternativePaymentInstrument2.

        The payment instrument created time.

        :return: The created_time of this AlternativePaymentInstrument2.
        :rtype: datetime
        """
        return self._created_time

    @created_time.setter
    def created_time(self, created_time):
        """Sets the created_time of this AlternativePaymentInstrument2.

        The payment instrument created time.

        :param created_time: The created_time of this AlternativePaymentInstrument2.
        :type created_time: datetime
        """

        self._created_time = created_time

    @property
    def custom_fields(self):
        """Gets the custom_fields of this AlternativePaymentInstrument2.

        Custom Fields list as a map `{\"custom field name\": \"custom field value\", ...}`. The format must follow the saved format (see Custom Fields section for the formats). 

        :return: The custom_fields of this AlternativePaymentInstrument2.
        :rtype: object
        """
        return self._custom_fields

    @custom_fields.setter
    def custom_fields(self, custom_fields):
        """Sets the custom_fields of this AlternativePaymentInstrument2.

        Custom Fields list as a map `{\"custom field name\": \"custom field value\", ...}`. The format must follow the saved format (see Custom Fields section for the formats). 

        :param custom_fields: The custom_fields of this AlternativePaymentInstrument2.
        :type custom_fields: object
        """

        self._custom_fields = custom_fields

    @property
    def customer_id(self):
        """Gets the customer_id of this AlternativePaymentInstrument2.

        Customer's ID.

        :return: The customer_id of this AlternativePaymentInstrument2.
        :rtype: str
        """
        return self._customer_id

    @customer_id.setter
    def customer_id(self, customer_id):
        """Sets the customer_id of this AlternativePaymentInstrument2.

        Customer's ID.

        :param customer_id: The customer_id of this AlternativePaymentInstrument2.
        :type customer_id: str
        """
        if customer_id is not None and len(customer_id) > 50:
            raise ValueError("Invalid value for `customer_id`, length must be less than or equal to `50`")

        self._customer_id = customer_id

    @property
    def id(self):
        """Gets the id of this AlternativePaymentInstrument2.

        The payment instrument ID.

        :return: The id of this AlternativePaymentInstrument2.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AlternativePaymentInstrument2.

        The payment instrument ID.

        :param id: The id of this AlternativePaymentInstrument2.
        :type id: str
        """
        if id is not None and len(id) > 50:
            raise ValueError("Invalid value for `id`, length must be less than or equal to `50`")

        self._id = id

    @property
    def method(self):
        """Gets the method of this AlternativePaymentInstrument2.

        The method of payment instrument.

        :return: The method of this AlternativePaymentInstrument2.
        :rtype: AlternativePaymentMethods
        """
        return self._method

    @method.setter
    def method(self, method):
        """Sets the method of this AlternativePaymentInstrument2.

        The method of payment instrument.

        :param method: The method of this AlternativePaymentInstrument2.
        :type method: AlternativePaymentMethods
        """

        self._method = method

    @property
    def risk_metadata(self):
        """Gets the risk_metadata of this AlternativePaymentInstrument2.


        :return: The risk_metadata of this AlternativePaymentInstrument2.
        :rtype: RiskMetadata
        """
        return self._risk_metadata

    @risk_metadata.setter
    def risk_metadata(self, risk_metadata):
        """Sets the risk_metadata of this AlternativePaymentInstrument2.


        :param risk_metadata: The risk_metadata of this AlternativePaymentInstrument2.
        :type risk_metadata: RiskMetadata
        """

        self._risk_metadata = risk_metadata

    @property
    def status(self):
        """Gets the status of this AlternativePaymentInstrument2.

        The payment instrument status.

        :return: The status of this AlternativePaymentInstrument2.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this AlternativePaymentInstrument2.

        The payment instrument status.

        :param status: The status of this AlternativePaymentInstrument2.
        :type status: str
        """
        allowed_values = ["active", "deactivated"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def updated_time(self):
        """Gets the updated_time of this AlternativePaymentInstrument2.

        The payment instrument updated time.

        :return: The updated_time of this AlternativePaymentInstrument2.
        :rtype: datetime
        """
        return self._updated_time

    @updated_time.setter
    def updated_time(self, updated_time):
        """Sets the updated_time of this AlternativePaymentInstrument2.

        The payment instrument updated time.

        :param updated_time: The updated_time of this AlternativePaymentInstrument2.
        :type updated_time: datetime
        """

        self._updated_time = updated_time
