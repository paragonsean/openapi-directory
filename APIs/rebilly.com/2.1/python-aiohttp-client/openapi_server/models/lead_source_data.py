# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.bank_account_all_of_links import BankAccountAllOfLinks
from openapi_server import util


class LeadSourceData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, links: List[BankAccountAllOfLinks]=None, affiliate: str=None, campaign: str=None, click_id: str=None, content: str=None, created_time: datetime=None, medium: str=None, path: str=None, referrer: str=None, sales_agent: str=None, source: str=None, sub_affiliate: str=None, term: str=None):
        """LeadSourceData - a model defined in OpenAPI

        :param links: The links of this LeadSourceData.
        :param affiliate: The affiliate of this LeadSourceData.
        :param campaign: The campaign of this LeadSourceData.
        :param click_id: The click_id of this LeadSourceData.
        :param content: The content of this LeadSourceData.
        :param created_time: The created_time of this LeadSourceData.
        :param medium: The medium of this LeadSourceData.
        :param path: The path of this LeadSourceData.
        :param referrer: The referrer of this LeadSourceData.
        :param sales_agent: The sales_agent of this LeadSourceData.
        :param source: The source of this LeadSourceData.
        :param sub_affiliate: The sub_affiliate of this LeadSourceData.
        :param term: The term of this LeadSourceData.
        """
        self.openapi_types = {
            'links': List[BankAccountAllOfLinks],
            'affiliate': str,
            'campaign': str,
            'click_id': str,
            'content': str,
            'created_time': datetime,
            'medium': str,
            'path': str,
            'referrer': str,
            'sales_agent': str,
            'source': str,
            'sub_affiliate': str,
            'term': str
        }

        self.attribute_map = {
            'links': '_links',
            'affiliate': 'affiliate',
            'campaign': 'campaign',
            'click_id': 'clickId',
            'content': 'content',
            'created_time': 'createdTime',
            'medium': 'medium',
            'path': 'path',
            'referrer': 'referrer',
            'sales_agent': 'salesAgent',
            'source': 'source',
            'sub_affiliate': 'subAffiliate',
            'term': 'term'
        }

        self._links = links
        self._affiliate = affiliate
        self._campaign = campaign
        self._click_id = click_id
        self._content = content
        self._created_time = created_time
        self._medium = medium
        self._path = path
        self._referrer = referrer
        self._sales_agent = sales_agent
        self._source = source
        self._sub_affiliate = sub_affiliate
        self._term = term

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LeadSourceData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LeadSourceData of this LeadSourceData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def links(self):
        """Gets the links of this LeadSourceData.

        The links related to resource.

        :return: The links of this LeadSourceData.
        :rtype: List[BankAccountAllOfLinks]
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this LeadSourceData.

        The links related to resource.

        :param links: The links of this LeadSourceData.
        :type links: List[BankAccountAllOfLinks]
        """
        if links is not None and len(links) < 1:
            raise ValueError("Invalid value for `links`, number of items must be greater than or equal to `1`")

        self._links = links

    @property
    def affiliate(self):
        """Gets the affiliate of this LeadSourceData.

        Lead source affiliate (eg 123, Bob Smith).

        :return: The affiliate of this LeadSourceData.
        :rtype: str
        """
        return self._affiliate

    @affiliate.setter
    def affiliate(self, affiliate):
        """Sets the affiliate of this LeadSourceData.

        Lead source affiliate (eg 123, Bob Smith).

        :param affiliate: The affiliate of this LeadSourceData.
        :type affiliate: str
        """

        self._affiliate = affiliate

    @property
    def campaign(self):
        """Gets the campaign of this LeadSourceData.

        Lead source campaign (eg go-big-123).

        :return: The campaign of this LeadSourceData.
        :rtype: str
        """
        return self._campaign

    @campaign.setter
    def campaign(self, campaign):
        """Sets the campaign of this LeadSourceData.

        Lead source campaign (eg go-big-123).

        :param campaign: The campaign of this LeadSourceData.
        :type campaign: str
        """

        self._campaign = campaign

    @property
    def click_id(self):
        """Gets the click_id of this LeadSourceData.

        Lead source click id (may come from an ad server).

        :return: The click_id of this LeadSourceData.
        :rtype: str
        """
        return self._click_id

    @click_id.setter
    def click_id(self, click_id):
        """Sets the click_id of this LeadSourceData.

        Lead source click id (may come from an ad server).

        :param click_id: The click_id of this LeadSourceData.
        :type click_id: str
        """

        self._click_id = click_id

    @property
    def content(self):
        """Gets the content of this LeadSourceData.

        Lead source content (eg smiley faces).

        :return: The content of this LeadSourceData.
        :rtype: str
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this LeadSourceData.

        Lead source content (eg smiley faces).

        :param content: The content of this LeadSourceData.
        :type content: str
        """

        self._content = content

    @property
    def created_time(self):
        """Gets the created_time of this LeadSourceData.

        Lead source created time.

        :return: The created_time of this LeadSourceData.
        :rtype: datetime
        """
        return self._created_time

    @created_time.setter
    def created_time(self, created_time):
        """Sets the created_time of this LeadSourceData.

        Lead source created time.

        :param created_time: The created_time of this LeadSourceData.
        :type created_time: datetime
        """

        self._created_time = created_time

    @property
    def medium(self):
        """Gets the medium of this LeadSourceData.

        Lead source medium (eg search, display).

        :return: The medium of this LeadSourceData.
        :rtype: str
        """
        return self._medium

    @medium.setter
    def medium(self, medium):
        """Sets the medium of this LeadSourceData.

        Lead source medium (eg search, display).

        :param medium: The medium of this LeadSourceData.
        :type medium: str
        """

        self._medium = medium

    @property
    def path(self):
        """Gets the path of this LeadSourceData.

        Lead source path url (eg www.example.com/some/landing/path).

        :return: The path of this LeadSourceData.
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this LeadSourceData.

        Lead source path url (eg www.example.com/some/landing/path).

        :param path: The path of this LeadSourceData.
        :type path: str
        """

        self._path = path

    @property
    def referrer(self):
        """Gets the referrer of this LeadSourceData.

        Lead source [`referer` url](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Referer) as determined (eg www.example.com/some/landing/path).

        :return: The referrer of this LeadSourceData.
        :rtype: str
        """
        return self._referrer

    @referrer.setter
    def referrer(self, referrer):
        """Sets the referrer of this LeadSourceData.

        Lead source [`referer` url](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Referer) as determined (eg www.example.com/some/landing/path).

        :param referrer: The referrer of this LeadSourceData.
        :type referrer: str
        """

        self._referrer = referrer

    @property
    def sales_agent(self):
        """Gets the sales_agent of this LeadSourceData.

        Lead source sales agent (eg James Bond).

        :return: The sales_agent of this LeadSourceData.
        :rtype: str
        """
        return self._sales_agent

    @sales_agent.setter
    def sales_agent(self, sales_agent):
        """Sets the sales_agent of this LeadSourceData.

        Lead source sales agent (eg James Bond).

        :param sales_agent: The sales_agent of this LeadSourceData.
        :type sales_agent: str
        """

        self._sales_agent = sales_agent

    @property
    def source(self):
        """Gets the source of this LeadSourceData.

        Lead source origin (eg google, yahoo).

        :return: The source of this LeadSourceData.
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this LeadSourceData.

        Lead source origin (eg google, yahoo).

        :param source: The source of this LeadSourceData.
        :type source: str
        """

        self._source = source

    @property
    def sub_affiliate(self):
        """Gets the sub_affiliate of this LeadSourceData.

        Lead source sub-affiliate also called a sub-id or click id in some circles (eg 123456).

        :return: The sub_affiliate of this LeadSourceData.
        :rtype: str
        """
        return self._sub_affiliate

    @sub_affiliate.setter
    def sub_affiliate(self, sub_affiliate):
        """Sets the sub_affiliate of this LeadSourceData.

        Lead source sub-affiliate also called a sub-id or click id in some circles (eg 123456).

        :param sub_affiliate: The sub_affiliate of this LeadSourceData.
        :type sub_affiliate: str
        """

        self._sub_affiliate = sub_affiliate

    @property
    def term(self):
        """Gets the term of this LeadSourceData.

        Lead source term (eg salt shakers).

        :return: The term of this LeadSourceData.
        :rtype: str
        """
        return self._term

    @term.setter
    def term(self, term):
        """Sets the term of this LeadSourceData.

        Lead source term (eg salt shakers).

        :param term: The term of this LeadSourceData.
        :type term: str
        """

        self._term = term
