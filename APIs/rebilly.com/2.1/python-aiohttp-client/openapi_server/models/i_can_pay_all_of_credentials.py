# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ICanPayAllOfCredentials(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, authenticate_id: str=None, authenticate_pw: str=None, public_key: str=None, secret_key: str=None):
        """ICanPayAllOfCredentials - a model defined in OpenAPI

        :param authenticate_id: The authenticate_id of this ICanPayAllOfCredentials.
        :param authenticate_pw: The authenticate_pw of this ICanPayAllOfCredentials.
        :param public_key: The public_key of this ICanPayAllOfCredentials.
        :param secret_key: The secret_key of this ICanPayAllOfCredentials.
        """
        self.openapi_types = {
            'authenticate_id': str,
            'authenticate_pw': str,
            'public_key': str,
            'secret_key': str
        }

        self.attribute_map = {
            'authenticate_id': 'authenticateId',
            'authenticate_pw': 'authenticatePw',
            'public_key': 'publicKey',
            'secret_key': 'secretKey'
        }

        self._authenticate_id = authenticate_id
        self._authenticate_pw = authenticate_pw
        self._public_key = public_key
        self._secret_key = secret_key

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ICanPayAllOfCredentials':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The iCanPay_allOf_credentials of this ICanPayAllOfCredentials.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def authenticate_id(self):
        """Gets the authenticate_id of this ICanPayAllOfCredentials.

        iCanPay Gateway authenticate ID.

        :return: The authenticate_id of this ICanPayAllOfCredentials.
        :rtype: str
        """
        return self._authenticate_id

    @authenticate_id.setter
    def authenticate_id(self, authenticate_id):
        """Sets the authenticate_id of this ICanPayAllOfCredentials.

        iCanPay Gateway authenticate ID.

        :param authenticate_id: The authenticate_id of this ICanPayAllOfCredentials.
        :type authenticate_id: str
        """
        if authenticate_id is None:
            raise ValueError("Invalid value for `authenticate_id`, must not be `None`")

        self._authenticate_id = authenticate_id

    @property
    def authenticate_pw(self):
        """Gets the authenticate_pw of this ICanPayAllOfCredentials.

        iCanPay Gateway authenticate password.

        :return: The authenticate_pw of this ICanPayAllOfCredentials.
        :rtype: str
        """
        return self._authenticate_pw

    @authenticate_pw.setter
    def authenticate_pw(self, authenticate_pw):
        """Sets the authenticate_pw of this ICanPayAllOfCredentials.

        iCanPay Gateway authenticate password.

        :param authenticate_pw: The authenticate_pw of this ICanPayAllOfCredentials.
        :type authenticate_pw: str
        """
        if authenticate_pw is None:
            raise ValueError("Invalid value for `authenticate_pw`, must not be `None`")

        self._authenticate_pw = authenticate_pw

    @property
    def public_key(self):
        """Gets the public_key of this ICanPayAllOfCredentials.

        iCanPay Gateway API public key.

        :return: The public_key of this ICanPayAllOfCredentials.
        :rtype: str
        """
        return self._public_key

    @public_key.setter
    def public_key(self, public_key):
        """Sets the public_key of this ICanPayAllOfCredentials.

        iCanPay Gateway API public key.

        :param public_key: The public_key of this ICanPayAllOfCredentials.
        :type public_key: str
        """
        if public_key is None:
            raise ValueError("Invalid value for `public_key`, must not be `None`")

        self._public_key = public_key

    @property
    def secret_key(self):
        """Gets the secret_key of this ICanPayAllOfCredentials.

        iCanPay Gateway API secret key.

        :return: The secret_key of this ICanPayAllOfCredentials.
        :rtype: str
        """
        return self._secret_key

    @secret_key.setter
    def secret_key(self, secret_key):
        """Sets the secret_key of this ICanPayAllOfCredentials.

        iCanPay Gateway API secret key.

        :param secret_key: The secret_key of this ICanPayAllOfCredentials.
        :type secret_key: str
        """
        if secret_key is None:
            raise ValueError("Invalid value for `secret_key`, must not be `None`")

        self._secret_key = secret_key
