# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class BankAccountCreateToken(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, custom_fields: object=None, customer_id: str=None, token: str=None):
        """BankAccountCreateToken - a model defined in OpenAPI

        :param custom_fields: The custom_fields of this BankAccountCreateToken.
        :param customer_id: The customer_id of this BankAccountCreateToken.
        :param token: The token of this BankAccountCreateToken.
        """
        self.openapi_types = {
            'custom_fields': object,
            'customer_id': str,
            'token': str
        }

        self.attribute_map = {
            'custom_fields': 'customFields',
            'customer_id': 'customerId',
            'token': 'token'
        }

        self._custom_fields = custom_fields
        self._customer_id = customer_id
        self._token = token

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BankAccountCreateToken':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BankAccountCreateToken of this BankAccountCreateToken.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def custom_fields(self):
        """Gets the custom_fields of this BankAccountCreateToken.

        Custom Fields list as a map `{\"custom field name\": \"custom field value\", ...}`. The format must follow the saved format (see Custom Fields section for the formats). 

        :return: The custom_fields of this BankAccountCreateToken.
        :rtype: object
        """
        return self._custom_fields

    @custom_fields.setter
    def custom_fields(self, custom_fields):
        """Sets the custom_fields of this BankAccountCreateToken.

        Custom Fields list as a map `{\"custom field name\": \"custom field value\", ...}`. The format must follow the saved format (see Custom Fields section for the formats). 

        :param custom_fields: The custom_fields of this BankAccountCreateToken.
        :type custom_fields: object
        """

        self._custom_fields = custom_fields

    @property
    def customer_id(self):
        """Gets the customer_id of this BankAccountCreateToken.

        The Customer's ID.

        :return: The customer_id of this BankAccountCreateToken.
        :rtype: str
        """
        return self._customer_id

    @customer_id.setter
    def customer_id(self, customer_id):
        """Sets the customer_id of this BankAccountCreateToken.

        The Customer's ID.

        :param customer_id: The customer_id of this BankAccountCreateToken.
        :type customer_id: str
        """
        if customer_id is None:
            raise ValueError("Invalid value for `customer_id`, must not be `None`")
        if customer_id is not None and len(customer_id) > 50:
            raise ValueError("Invalid value for `customer_id`, length must be less than or equal to `50`")

        self._customer_id = customer_id

    @property
    def token(self):
        """Gets the token of this BankAccountCreateToken.

        BankAccountToken ID.

        :return: The token of this BankAccountCreateToken.
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token):
        """Sets the token of this BankAccountCreateToken.

        BankAccountToken ID.

        :param token: The token of this BankAccountCreateToken.
        :type token: str
        """
        if token is None:
            raise ValueError("Invalid value for `token`, must not be `None`")

        self._token = token
