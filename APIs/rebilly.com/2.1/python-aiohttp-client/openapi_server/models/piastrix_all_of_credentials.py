# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PiastrixAllOfCredentials(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, secret_key: str=None, shop_id: str=None):
        """PiastrixAllOfCredentials - a model defined in OpenAPI

        :param secret_key: The secret_key of this PiastrixAllOfCredentials.
        :param shop_id: The shop_id of this PiastrixAllOfCredentials.
        """
        self.openapi_types = {
            'secret_key': str,
            'shop_id': str
        }

        self.attribute_map = {
            'secret_key': 'secretKey',
            'shop_id': 'shopId'
        }

        self._secret_key = secret_key
        self._shop_id = shop_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PiastrixAllOfCredentials':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Piastrix_allOf_credentials of this PiastrixAllOfCredentials.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def secret_key(self):
        """Gets the secret_key of this PiastrixAllOfCredentials.

        Secret Key.

        :return: The secret_key of this PiastrixAllOfCredentials.
        :rtype: str
        """
        return self._secret_key

    @secret_key.setter
    def secret_key(self, secret_key):
        """Sets the secret_key of this PiastrixAllOfCredentials.

        Secret Key.

        :param secret_key: The secret_key of this PiastrixAllOfCredentials.
        :type secret_key: str
        """
        if secret_key is None:
            raise ValueError("Invalid value for `secret_key`, must not be `None`")

        self._secret_key = secret_key

    @property
    def shop_id(self):
        """Gets the shop_id of this PiastrixAllOfCredentials.

        Shop ID.

        :return: The shop_id of this PiastrixAllOfCredentials.
        :rtype: str
        """
        return self._shop_id

    @shop_id.setter
    def shop_id(self, shop_id):
        """Sets the shop_id of this PiastrixAllOfCredentials.

        Shop ID.

        :param shop_id: The shop_id of this PiastrixAllOfCredentials.
        :type shop_id: str
        """
        if shop_id is None:
            raise ValueError("Invalid value for `shop_id`, must not be `None`")

        self._shop_id = shop_id
