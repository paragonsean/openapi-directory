# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SeamlessChexAllOfCredentials(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, public_key: str=None, secret_key: str=None):
        """SeamlessChexAllOfCredentials - a model defined in OpenAPI

        :param public_key: The public_key of this SeamlessChexAllOfCredentials.
        :param secret_key: The secret_key of this SeamlessChexAllOfCredentials.
        """
        self.openapi_types = {
            'public_key': str,
            'secret_key': str
        }

        self.attribute_map = {
            'public_key': 'publicKey',
            'secret_key': 'secretKey'
        }

        self._public_key = public_key
        self._secret_key = secret_key

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SeamlessChexAllOfCredentials':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SeamlessChex_allOf_credentials of this SeamlessChexAllOfCredentials.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def public_key(self):
        """Gets the public_key of this SeamlessChexAllOfCredentials.

        SeamlessChex publishable key.

        :return: The public_key of this SeamlessChexAllOfCredentials.
        :rtype: str
        """
        return self._public_key

    @public_key.setter
    def public_key(self, public_key):
        """Sets the public_key of this SeamlessChexAllOfCredentials.

        SeamlessChex publishable key.

        :param public_key: The public_key of this SeamlessChexAllOfCredentials.
        :type public_key: str
        """
        if public_key is None:
            raise ValueError("Invalid value for `public_key`, must not be `None`")

        self._public_key = public_key

    @property
    def secret_key(self):
        """Gets the secret_key of this SeamlessChexAllOfCredentials.

        SeamlessChex secret key.

        :return: The secret_key of this SeamlessChexAllOfCredentials.
        :rtype: str
        """
        return self._secret_key

    @secret_key.setter
    def secret_key(self, secret_key):
        """Sets the secret_key of this SeamlessChexAllOfCredentials.

        SeamlessChex secret key.

        :param secret_key: The secret_key of this SeamlessChexAllOfCredentials.
        :type secret_key: str
        """
        if secret_key is None:
            raise ValueError("Invalid value for `secret_key`, must not be `None`")

        self._secret_key = secret_key
