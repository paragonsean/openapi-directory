# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class UPayCardAllOfCredentials(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, key: str=None, receiver_account: str=None, secret: str=None):
        """UPayCardAllOfCredentials - a model defined in OpenAPI

        :param key: The key of this UPayCardAllOfCredentials.
        :param receiver_account: The receiver_account of this UPayCardAllOfCredentials.
        :param secret: The secret of this UPayCardAllOfCredentials.
        """
        self.openapi_types = {
            'key': str,
            'receiver_account': str,
            'secret': str
        }

        self.attribute_map = {
            'key': 'key',
            'receiver_account': 'receiver_account',
            'secret': 'secret'
        }

        self._key = key
        self._receiver_account = receiver_account
        self._secret = secret

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UPayCardAllOfCredentials':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UPayCard_allOf_credentials of this UPayCardAllOfCredentials.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def key(self):
        """Gets the key of this UPayCardAllOfCredentials.

        merchant key.

        :return: The key of this UPayCardAllOfCredentials.
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this UPayCardAllOfCredentials.

        merchant key.

        :param key: The key of this UPayCardAllOfCredentials.
        :type key: str
        """
        if key is None:
            raise ValueError("Invalid value for `key`, must not be `None`")

        self._key = key

    @property
    def receiver_account(self):
        """Gets the receiver_account of this UPayCardAllOfCredentials.

        merchant receiver account.

        :return: The receiver_account of this UPayCardAllOfCredentials.
        :rtype: str
        """
        return self._receiver_account

    @receiver_account.setter
    def receiver_account(self, receiver_account):
        """Sets the receiver_account of this UPayCardAllOfCredentials.

        merchant receiver account.

        :param receiver_account: The receiver_account of this UPayCardAllOfCredentials.
        :type receiver_account: str
        """
        if receiver_account is None:
            raise ValueError("Invalid value for `receiver_account`, must not be `None`")

        self._receiver_account = receiver_account

    @property
    def secret(self):
        """Gets the secret of this UPayCardAllOfCredentials.

        merchant secret.

        :return: The secret of this UPayCardAllOfCredentials.
        :rtype: str
        """
        return self._secret

    @secret.setter
    def secret(self, secret):
        """Sets the secret of this UPayCardAllOfCredentials.

        merchant secret.

        :param secret: The secret of this UPayCardAllOfCredentials.
        :type secret: str
        """
        if secret is None:
            raise ValueError("Invalid value for `secret`, must not be `None`")

        self._secret = secret
