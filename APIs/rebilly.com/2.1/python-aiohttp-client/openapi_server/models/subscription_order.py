# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.common_subscription_items_inner import CommonSubscriptionItemsInner
from openapi_server.models.common_subscription_order_all_of_line_item_subtotal import CommonSubscriptionOrderAllOfLineItemSubtotal
from openapi_server.models.common_subscription_order_all_of_recurring_interval import CommonSubscriptionOrderAllOfRecurringInterval
from openapi_server.models.common_subscription_order_all_of_trial import CommonSubscriptionOrderAllOfTrial
from openapi_server.models.contact_object import ContactObject
from openapi_server.models.invoice_time_shift import InvoiceTimeShift
from openapi_server.models.risk_metadata import RiskMetadata
from openapi_server.models.subscription_metadata_embedded_inner import SubscriptionMetadataEmbeddedInner
from openapi_server.models.subscription_metadata_links_inner import SubscriptionMetadataLinksInner
from openapi_server.models.upcoming_invoice_item import UpcomingInvoiceItem
from openapi_server import util


class SubscriptionOrder(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, activation_time: datetime=None, billing_address: ContactObject=None, billing_status: str=None, coupon_ids: List[str]=None, delivery_address: ContactObject=None, id: str=None, initial_invoice_id: str=None, items: List[CommonSubscriptionItemsInner]=None, order_type: str='subscription-order', po_number: str=None, recent_invoice_id: str=None, void_time: datetime=None, website_id: str=None, autopay: bool=True, end_time: datetime=None, in_trial: bool=None, invoice_time_shift: InvoiceTimeShift=None, is_trial_only: bool=False, line_item_subtotal: CommonSubscriptionOrderAllOfLineItemSubtotal=None, line_items: List[UpcomingInvoiceItem]=None, rebill_number: int=None, recurring_interval: CommonSubscriptionOrderAllOfRecurringInterval=None, renewal_time: datetime=None, start_time: datetime=None, status: str=None, trial: CommonSubscriptionOrderAllOfTrial=None, cancel_category: str=None, cancel_description: str=None, canceled_by: str=None, canceled_time: datetime=None, embedded: List[SubscriptionMetadataEmbeddedInner]=None, links: List[SubscriptionMetadataLinksInner]=None, created_time: datetime=None, custom_fields: object=None, revision: int=None, risk_metadata: RiskMetadata=None, updated_time: datetime=None, customer_id: str=None, renewal_reminder_number: int=None, renewal_reminder_time: datetime=None, trial_reminder_number: int=None, trial_reminder_time: datetime=None):
        """SubscriptionOrder - a model defined in OpenAPI

        :param activation_time: The activation_time of this SubscriptionOrder.
        :param billing_address: The billing_address of this SubscriptionOrder.
        :param billing_status: The billing_status of this SubscriptionOrder.
        :param coupon_ids: The coupon_ids of this SubscriptionOrder.
        :param delivery_address: The delivery_address of this SubscriptionOrder.
        :param id: The id of this SubscriptionOrder.
        :param initial_invoice_id: The initial_invoice_id of this SubscriptionOrder.
        :param items: The items of this SubscriptionOrder.
        :param order_type: The order_type of this SubscriptionOrder.
        :param po_number: The po_number of this SubscriptionOrder.
        :param recent_invoice_id: The recent_invoice_id of this SubscriptionOrder.
        :param void_time: The void_time of this SubscriptionOrder.
        :param website_id: The website_id of this SubscriptionOrder.
        :param autopay: The autopay of this SubscriptionOrder.
        :param end_time: The end_time of this SubscriptionOrder.
        :param in_trial: The in_trial of this SubscriptionOrder.
        :param invoice_time_shift: The invoice_time_shift of this SubscriptionOrder.
        :param is_trial_only: The is_trial_only of this SubscriptionOrder.
        :param line_item_subtotal: The line_item_subtotal of this SubscriptionOrder.
        :param line_items: The line_items of this SubscriptionOrder.
        :param rebill_number: The rebill_number of this SubscriptionOrder.
        :param recurring_interval: The recurring_interval of this SubscriptionOrder.
        :param renewal_time: The renewal_time of this SubscriptionOrder.
        :param start_time: The start_time of this SubscriptionOrder.
        :param status: The status of this SubscriptionOrder.
        :param trial: The trial of this SubscriptionOrder.
        :param cancel_category: The cancel_category of this SubscriptionOrder.
        :param cancel_description: The cancel_description of this SubscriptionOrder.
        :param canceled_by: The canceled_by of this SubscriptionOrder.
        :param canceled_time: The canceled_time of this SubscriptionOrder.
        :param embedded: The embedded of this SubscriptionOrder.
        :param links: The links of this SubscriptionOrder.
        :param created_time: The created_time of this SubscriptionOrder.
        :param custom_fields: The custom_fields of this SubscriptionOrder.
        :param revision: The revision of this SubscriptionOrder.
        :param risk_metadata: The risk_metadata of this SubscriptionOrder.
        :param updated_time: The updated_time of this SubscriptionOrder.
        :param customer_id: The customer_id of this SubscriptionOrder.
        :param renewal_reminder_number: The renewal_reminder_number of this SubscriptionOrder.
        :param renewal_reminder_time: The renewal_reminder_time of this SubscriptionOrder.
        :param trial_reminder_number: The trial_reminder_number of this SubscriptionOrder.
        :param trial_reminder_time: The trial_reminder_time of this SubscriptionOrder.
        """
        self.openapi_types = {
            'activation_time': datetime,
            'billing_address': ContactObject,
            'billing_status': str,
            'coupon_ids': List[str],
            'delivery_address': ContactObject,
            'id': str,
            'initial_invoice_id': str,
            'items': List[CommonSubscriptionItemsInner],
            'order_type': str,
            'po_number': str,
            'recent_invoice_id': str,
            'void_time': datetime,
            'website_id': str,
            'autopay': bool,
            'end_time': datetime,
            'in_trial': bool,
            'invoice_time_shift': InvoiceTimeShift,
            'is_trial_only': bool,
            'line_item_subtotal': CommonSubscriptionOrderAllOfLineItemSubtotal,
            'line_items': List[UpcomingInvoiceItem],
            'rebill_number': int,
            'recurring_interval': CommonSubscriptionOrderAllOfRecurringInterval,
            'renewal_time': datetime,
            'start_time': datetime,
            'status': str,
            'trial': CommonSubscriptionOrderAllOfTrial,
            'cancel_category': str,
            'cancel_description': str,
            'canceled_by': str,
            'canceled_time': datetime,
            'embedded': List[SubscriptionMetadataEmbeddedInner],
            'links': List[SubscriptionMetadataLinksInner],
            'created_time': datetime,
            'custom_fields': object,
            'revision': int,
            'risk_metadata': RiskMetadata,
            'updated_time': datetime,
            'customer_id': str,
            'renewal_reminder_number': int,
            'renewal_reminder_time': datetime,
            'trial_reminder_number': int,
            'trial_reminder_time': datetime
        }

        self.attribute_map = {
            'activation_time': 'activationTime',
            'billing_address': 'billingAddress',
            'billing_status': 'billingStatus',
            'coupon_ids': 'couponIds',
            'delivery_address': 'deliveryAddress',
            'id': 'id',
            'initial_invoice_id': 'initialInvoiceId',
            'items': 'items',
            'order_type': 'orderType',
            'po_number': 'poNumber',
            'recent_invoice_id': 'recentInvoiceId',
            'void_time': 'voidTime',
            'website_id': 'websiteId',
            'autopay': 'autopay',
            'end_time': 'endTime',
            'in_trial': 'inTrial',
            'invoice_time_shift': 'invoiceTimeShift',
            'is_trial_only': 'isTrialOnly',
            'line_item_subtotal': 'lineItemSubtotal',
            'line_items': 'lineItems',
            'rebill_number': 'rebillNumber',
            'recurring_interval': 'recurringInterval',
            'renewal_time': 'renewalTime',
            'start_time': 'startTime',
            'status': 'status',
            'trial': 'trial',
            'cancel_category': 'cancelCategory',
            'cancel_description': 'cancelDescription',
            'canceled_by': 'canceledBy',
            'canceled_time': 'canceledTime',
            'embedded': '_embedded',
            'links': '_links',
            'created_time': 'createdTime',
            'custom_fields': 'customFields',
            'revision': 'revision',
            'risk_metadata': 'riskMetadata',
            'updated_time': 'updatedTime',
            'customer_id': 'customerId',
            'renewal_reminder_number': 'renewalReminderNumber',
            'renewal_reminder_time': 'renewalReminderTime',
            'trial_reminder_number': 'trialReminderNumber',
            'trial_reminder_time': 'trialReminderTime'
        }

        self._activation_time = activation_time
        self._billing_address = billing_address
        self._billing_status = billing_status
        self._coupon_ids = coupon_ids
        self._delivery_address = delivery_address
        self._id = id
        self._initial_invoice_id = initial_invoice_id
        self._items = items
        self._order_type = order_type
        self._po_number = po_number
        self._recent_invoice_id = recent_invoice_id
        self._void_time = void_time
        self._website_id = website_id
        self._autopay = autopay
        self._end_time = end_time
        self._in_trial = in_trial
        self._invoice_time_shift = invoice_time_shift
        self._is_trial_only = is_trial_only
        self._line_item_subtotal = line_item_subtotal
        self._line_items = line_items
        self._rebill_number = rebill_number
        self._recurring_interval = recurring_interval
        self._renewal_time = renewal_time
        self._start_time = start_time
        self._status = status
        self._trial = trial
        self._cancel_category = cancel_category
        self._cancel_description = cancel_description
        self._canceled_by = canceled_by
        self._canceled_time = canceled_time
        self._embedded = embedded
        self._links = links
        self._created_time = created_time
        self._custom_fields = custom_fields
        self._revision = revision
        self._risk_metadata = risk_metadata
        self._updated_time = updated_time
        self._customer_id = customer_id
        self._renewal_reminder_number = renewal_reminder_number
        self._renewal_reminder_time = renewal_reminder_time
        self._trial_reminder_number = trial_reminder_number
        self._trial_reminder_time = trial_reminder_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SubscriptionOrder':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SubscriptionOrder of this SubscriptionOrder.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def activation_time(self):
        """Gets the activation_time of this SubscriptionOrder.

        Order activation time.

        :return: The activation_time of this SubscriptionOrder.
        :rtype: datetime
        """
        return self._activation_time

    @activation_time.setter
    def activation_time(self, activation_time):
        """Sets the activation_time of this SubscriptionOrder.

        Order activation time.

        :param activation_time: The activation_time of this SubscriptionOrder.
        :type activation_time: datetime
        """

        self._activation_time = activation_time

    @property
    def billing_address(self):
        """Gets the billing_address of this SubscriptionOrder.

        Order billing address.

        :return: The billing_address of this SubscriptionOrder.
        :rtype: ContactObject
        """
        return self._billing_address

    @billing_address.setter
    def billing_address(self, billing_address):
        """Sets the billing_address of this SubscriptionOrder.

        Order billing address.

        :param billing_address: The billing_address of this SubscriptionOrder.
        :type billing_address: ContactObject
        """

        self._billing_address = billing_address

    @property
    def billing_status(self):
        """Gets the billing_status of this SubscriptionOrder.

        The billing status of the most recent invoice.  It may help you determine if you should change the service status such as suspending the service. 

        :return: The billing_status of this SubscriptionOrder.
        :rtype: str
        """
        return self._billing_status

    @billing_status.setter
    def billing_status(self, billing_status):
        """Sets the billing_status of this SubscriptionOrder.

        The billing status of the most recent invoice.  It may help you determine if you should change the service status such as suspending the service. 

        :param billing_status: The billing_status of this SubscriptionOrder.
        :type billing_status: str
        """
        allowed_values = ["unpaid", "past-due", "delinquent", "paid", "voided", "refunded", "disputed", "voided"]  # noqa: E501
        if billing_status not in allowed_values:
            raise ValueError(
                "Invalid value for `billing_status` ({0}), must be one of {1}"
                .format(billing_status, allowed_values)
            )

        self._billing_status = billing_status

    @property
    def coupon_ids(self):
        """Gets the coupon_ids of this SubscriptionOrder.

        A list of coupons to redeem on the customer and restrict to this subscription. Read more about [coupons here](https://docs.rebilly.com/docs/dashboard/marketing/coupons-and-discounts/).  This parameter respects the following logic:  - When not passed then applied coupons will not be changed.  - When empty array passed then all applied coupon redemptions will be canceled.  - When list of coupons is passed then not applied yet coupons will be applied, already applied coupons will not change their state, applied coupons that are not presented in passed list will be canceled.  If list of applied coupons on pending order will be changed due to this param during update order,  Invoice for the order will be reissued. 

        :return: The coupon_ids of this SubscriptionOrder.
        :rtype: List[str]
        """
        return self._coupon_ids

    @coupon_ids.setter
    def coupon_ids(self, coupon_ids):
        """Sets the coupon_ids of this SubscriptionOrder.

        A list of coupons to redeem on the customer and restrict to this subscription. Read more about [coupons here](https://docs.rebilly.com/docs/dashboard/marketing/coupons-and-discounts/).  This parameter respects the following logic:  - When not passed then applied coupons will not be changed.  - When empty array passed then all applied coupon redemptions will be canceled.  - When list of coupons is passed then not applied yet coupons will be applied, already applied coupons will not change their state, applied coupons that are not presented in passed list will be canceled.  If list of applied coupons on pending order will be changed due to this param during update order,  Invoice for the order will be reissued. 

        :param coupon_ids: The coupon_ids of this SubscriptionOrder.
        :type coupon_ids: List[str]
        """

        self._coupon_ids = coupon_ids

    @property
    def delivery_address(self):
        """Gets the delivery_address of this SubscriptionOrder.

        Order delivery address.

        :return: The delivery_address of this SubscriptionOrder.
        :rtype: ContactObject
        """
        return self._delivery_address

    @delivery_address.setter
    def delivery_address(self, delivery_address):
        """Sets the delivery_address of this SubscriptionOrder.

        Order delivery address.

        :param delivery_address: The delivery_address of this SubscriptionOrder.
        :type delivery_address: ContactObject
        """

        self._delivery_address = delivery_address

    @property
    def id(self):
        """Gets the id of this SubscriptionOrder.

        The order identifier string.

        :return: The id of this SubscriptionOrder.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SubscriptionOrder.

        The order identifier string.

        :param id: The id of this SubscriptionOrder.
        :type id: str
        """
        if id is not None and len(id) > 50:
            raise ValueError("Invalid value for `id`, length must be less than or equal to `50`")

        self._id = id

    @property
    def initial_invoice_id(self):
        """Gets the initial_invoice_id of this SubscriptionOrder.

        The initial invoice identifier string.

        :return: The initial_invoice_id of this SubscriptionOrder.
        :rtype: str
        """
        return self._initial_invoice_id

    @initial_invoice_id.setter
    def initial_invoice_id(self, initial_invoice_id):
        """Sets the initial_invoice_id of this SubscriptionOrder.

        The initial invoice identifier string.

        :param initial_invoice_id: The initial_invoice_id of this SubscriptionOrder.
        :type initial_invoice_id: str
        """
        if initial_invoice_id is not None and len(initial_invoice_id) > 50:
            raise ValueError("Invalid value for `initial_invoice_id`, length must be less than or equal to `50`")

        self._initial_invoice_id = initial_invoice_id

    @property
    def items(self):
        """Gets the items of this SubscriptionOrder.


        :return: The items of this SubscriptionOrder.
        :rtype: List[CommonSubscriptionItemsInner]
        """
        return self._items

    @items.setter
    def items(self, items):
        """Sets the items of this SubscriptionOrder.


        :param items: The items of this SubscriptionOrder.
        :type items: List[CommonSubscriptionItemsInner]
        """
        if items is None:
            raise ValueError("Invalid value for `items`, must not be `None`")
        if items is not None and len(items) < 1:
            raise ValueError("Invalid value for `items`, number of items must be greater than or equal to `1`")

        self._items = items

    @property
    def order_type(self):
        """Gets the order_type of this SubscriptionOrder.

        Specifies the type of order, a subscription or a one-time purchase. 

        :return: The order_type of this SubscriptionOrder.
        :rtype: str
        """
        return self._order_type

    @order_type.setter
    def order_type(self, order_type):
        """Sets the order_type of this SubscriptionOrder.

        Specifies the type of order, a subscription or a one-time purchase. 

        :param order_type: The order_type of this SubscriptionOrder.
        :type order_type: str
        """
        allowed_values = ["subscription-order", "one-time-order"]  # noqa: E501
        if order_type not in allowed_values:
            raise ValueError(
                "Invalid value for `order_type` ({0}), must be one of {1}"
                .format(order_type, allowed_values)
            )

        self._order_type = order_type

    @property
    def po_number(self):
        """Gets the po_number of this SubscriptionOrder.

        Purchase order number, will be displayed on the issued invoices.

        :return: The po_number of this SubscriptionOrder.
        :rtype: str
        """
        return self._po_number

    @po_number.setter
    def po_number(self, po_number):
        """Sets the po_number of this SubscriptionOrder.

        Purchase order number, will be displayed on the issued invoices.

        :param po_number: The po_number of this SubscriptionOrder.
        :type po_number: str
        """

        self._po_number = po_number

    @property
    def recent_invoice_id(self):
        """Gets the recent_invoice_id of this SubscriptionOrder.

        Most recently issued invoice identifier string. It might not be `paid` yet.

        :return: The recent_invoice_id of this SubscriptionOrder.
        :rtype: str
        """
        return self._recent_invoice_id

    @recent_invoice_id.setter
    def recent_invoice_id(self, recent_invoice_id):
        """Sets the recent_invoice_id of this SubscriptionOrder.

        Most recently issued invoice identifier string. It might not be `paid` yet.

        :param recent_invoice_id: The recent_invoice_id of this SubscriptionOrder.
        :type recent_invoice_id: str
        """
        if recent_invoice_id is not None and len(recent_invoice_id) > 50:
            raise ValueError("Invalid value for `recent_invoice_id`, length must be less than or equal to `50`")

        self._recent_invoice_id = recent_invoice_id

    @property
    def void_time(self):
        """Gets the void_time of this SubscriptionOrder.

        Order void time.

        :return: The void_time of this SubscriptionOrder.
        :rtype: datetime
        """
        return self._void_time

    @void_time.setter
    def void_time(self, void_time):
        """Sets the void_time of this SubscriptionOrder.

        Order void time.

        :param void_time: The void_time of this SubscriptionOrder.
        :type void_time: datetime
        """

        self._void_time = void_time

    @property
    def website_id(self):
        """Gets the website_id of this SubscriptionOrder.

        The website identifier string.

        :return: The website_id of this SubscriptionOrder.
        :rtype: str
        """
        return self._website_id

    @website_id.setter
    def website_id(self, website_id):
        """Sets the website_id of this SubscriptionOrder.

        The website identifier string.

        :param website_id: The website_id of this SubscriptionOrder.
        :type website_id: str
        """
        if website_id is None:
            raise ValueError("Invalid value for `website_id`, must not be `None`")
        if website_id is not None and len(website_id) > 50:
            raise ValueError("Invalid value for `website_id`, length must be less than or equal to `50`")

        self._website_id = website_id

    @property
    def autopay(self):
        """Gets the autopay of this SubscriptionOrder.

        Autopay determines if a payment attempt will be automatic.

        :return: The autopay of this SubscriptionOrder.
        :rtype: bool
        """
        return self._autopay

    @autopay.setter
    def autopay(self, autopay):
        """Sets the autopay of this SubscriptionOrder.

        Autopay determines if a payment attempt will be automatic.

        :param autopay: The autopay of this SubscriptionOrder.
        :type autopay: bool
        """

        self._autopay = autopay

    @property
    def end_time(self):
        """Gets the end_time of this SubscriptionOrder.

        Subscription end time.

        :return: The end_time of this SubscriptionOrder.
        :rtype: datetime
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this SubscriptionOrder.

        Subscription end time.

        :param end_time: The end_time of this SubscriptionOrder.
        :type end_time: datetime
        """

        self._end_time = end_time

    @property
    def in_trial(self):
        """Gets the in_trial of this SubscriptionOrder.

        True if the subscription is currently in a trial period.

        :return: The in_trial of this SubscriptionOrder.
        :rtype: bool
        """
        return self._in_trial

    @in_trial.setter
    def in_trial(self, in_trial):
        """Sets the in_trial of this SubscriptionOrder.

        True if the subscription is currently in a trial period.

        :param in_trial: The in_trial of this SubscriptionOrder.
        :type in_trial: bool
        """

        self._in_trial = in_trial

    @property
    def invoice_time_shift(self):
        """Gets the invoice_time_shift of this SubscriptionOrder.

        You can shift issue time and due time of invoices for this subscription. This setting overrides plan settings. To use plan settings, set `null`. To use multiple plans in one subscription they all must have the same billing period, this property allows to subscribe to different plans. 

        :return: The invoice_time_shift of this SubscriptionOrder.
        :rtype: InvoiceTimeShift
        """
        return self._invoice_time_shift

    @invoice_time_shift.setter
    def invoice_time_shift(self, invoice_time_shift):
        """Sets the invoice_time_shift of this SubscriptionOrder.

        You can shift issue time and due time of invoices for this subscription. This setting overrides plan settings. To use plan settings, set `null`. To use multiple plans in one subscription they all must have the same billing period, this property allows to subscribe to different plans. 

        :param invoice_time_shift: The invoice_time_shift of this SubscriptionOrder.
        :type invoice_time_shift: InvoiceTimeShift
        """

        self._invoice_time_shift = invoice_time_shift

    @property
    def is_trial_only(self):
        """Gets the is_trial_only of this SubscriptionOrder.

        Whether a subscription ends after a trial period. Recurring settings are ignored if it's `true`.

        :return: The is_trial_only of this SubscriptionOrder.
        :rtype: bool
        """
        return self._is_trial_only

    @is_trial_only.setter
    def is_trial_only(self, is_trial_only):
        """Sets the is_trial_only of this SubscriptionOrder.

        Whether a subscription ends after a trial period. Recurring settings are ignored if it's `true`.

        :param is_trial_only: The is_trial_only of this SubscriptionOrder.
        :type is_trial_only: bool
        """

        self._is_trial_only = is_trial_only

    @property
    def line_item_subtotal(self):
        """Gets the line_item_subtotal of this SubscriptionOrder.


        :return: The line_item_subtotal of this SubscriptionOrder.
        :rtype: CommonSubscriptionOrderAllOfLineItemSubtotal
        """
        return self._line_item_subtotal

    @line_item_subtotal.setter
    def line_item_subtotal(self, line_item_subtotal):
        """Sets the line_item_subtotal of this SubscriptionOrder.


        :param line_item_subtotal: The line_item_subtotal of this SubscriptionOrder.
        :type line_item_subtotal: CommonSubscriptionOrderAllOfLineItemSubtotal
        """

        self._line_item_subtotal = line_item_subtotal

    @property
    def line_items(self):
        """Gets the line_items of this SubscriptionOrder.

        Subscription line items which queue until the next renewal (or interim) invoice is issued for the subscription.

        :return: The line_items of this SubscriptionOrder.
        :rtype: List[UpcomingInvoiceItem]
        """
        return self._line_items

    @line_items.setter
    def line_items(self, line_items):
        """Sets the line_items of this SubscriptionOrder.

        Subscription line items which queue until the next renewal (or interim) invoice is issued for the subscription.

        :param line_items: The line_items of this SubscriptionOrder.
        :type line_items: List[UpcomingInvoiceItem]
        """

        self._line_items = line_items

    @property
    def rebill_number(self):
        """Gets the rebill_number of this SubscriptionOrder.

        The current period number.

        :return: The rebill_number of this SubscriptionOrder.
        :rtype: int
        """
        return self._rebill_number

    @rebill_number.setter
    def rebill_number(self, rebill_number):
        """Sets the rebill_number of this SubscriptionOrder.

        The current period number.

        :param rebill_number: The rebill_number of this SubscriptionOrder.
        :type rebill_number: int
        """

        self._rebill_number = rebill_number

    @property
    def recurring_interval(self):
        """Gets the recurring_interval of this SubscriptionOrder.


        :return: The recurring_interval of this SubscriptionOrder.
        :rtype: CommonSubscriptionOrderAllOfRecurringInterval
        """
        return self._recurring_interval

    @recurring_interval.setter
    def recurring_interval(self, recurring_interval):
        """Sets the recurring_interval of this SubscriptionOrder.


        :param recurring_interval: The recurring_interval of this SubscriptionOrder.
        :type recurring_interval: CommonSubscriptionOrderAllOfRecurringInterval
        """

        self._recurring_interval = recurring_interval

    @property
    def renewal_time(self):
        """Gets the renewal_time of this SubscriptionOrder.

        Subscription renewal time.

        :return: The renewal_time of this SubscriptionOrder.
        :rtype: datetime
        """
        return self._renewal_time

    @renewal_time.setter
    def renewal_time(self, renewal_time):
        """Sets the renewal_time of this SubscriptionOrder.

        Subscription renewal time.

        :param renewal_time: The renewal_time of this SubscriptionOrder.
        :type renewal_time: datetime
        """

        self._renewal_time = renewal_time

    @property
    def start_time(self):
        """Gets the start_time of this SubscriptionOrder.

        Subscription start time.  When the value is sent as null, it will use the current time. This value can't be in past more than one service period.

        :return: The start_time of this SubscriptionOrder.
        :rtype: datetime
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this SubscriptionOrder.

        Subscription start time.  When the value is sent as null, it will use the current time. This value can't be in past more than one service period.

        :param start_time: The start_time of this SubscriptionOrder.
        :type start_time: datetime
        """

        self._start_time = start_time

    @property
    def status(self):
        """Gets the status of this SubscriptionOrder.

        The status of the subscription service. A subscription starts in the `pending` status, and will become `active` when the service period begins. 

        :return: The status of this SubscriptionOrder.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this SubscriptionOrder.

        The status of the subscription service. A subscription starts in the `pending` status, and will become `active` when the service period begins. 

        :param status: The status of this SubscriptionOrder.
        :type status: str
        """
        allowed_values = ["pending", "active", "canceled", "churned", "suspended", "paused", "abandoned", "trial-ended"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def trial(self):
        """Gets the trial of this SubscriptionOrder.


        :return: The trial of this SubscriptionOrder.
        :rtype: CommonSubscriptionOrderAllOfTrial
        """
        return self._trial

    @trial.setter
    def trial(self, trial):
        """Sets the trial of this SubscriptionOrder.


        :param trial: The trial of this SubscriptionOrder.
        :type trial: CommonSubscriptionOrderAllOfTrial
        """

        self._trial = trial

    @property
    def cancel_category(self):
        """Gets the cancel_category of this SubscriptionOrder.

        Cancel category.

        :return: The cancel_category of this SubscriptionOrder.
        :rtype: str
        """
        return self._cancel_category

    @cancel_category.setter
    def cancel_category(self, cancel_category):
        """Sets the cancel_category of this SubscriptionOrder.

        Cancel category.

        :param cancel_category: The cancel_category of this SubscriptionOrder.
        :type cancel_category: str
        """
        allowed_values = ["billing-failure", "did-not-use", "did-not-want", "missing-features", "bugs-or-problems", "do-not-remember", "risk-warning", "contract-expired", "too-expensive", "never-started", "switched-plan", "other"]  # noqa: E501
        if cancel_category not in allowed_values:
            raise ValueError(
                "Invalid value for `cancel_category` ({0}), must be one of {1}"
                .format(cancel_category, allowed_values)
            )

        self._cancel_category = cancel_category

    @property
    def cancel_description(self):
        """Gets the cancel_description of this SubscriptionOrder.

        Cancel reason description in free form.

        :return: The cancel_description of this SubscriptionOrder.
        :rtype: str
        """
        return self._cancel_description

    @cancel_description.setter
    def cancel_description(self, cancel_description):
        """Sets the cancel_description of this SubscriptionOrder.

        Cancel reason description in free form.

        :param cancel_description: The cancel_description of this SubscriptionOrder.
        :type cancel_description: str
        """
        if cancel_description is not None and len(cancel_description) > 255:
            raise ValueError("Invalid value for `cancel_description`, length must be less than or equal to `255`")

        self._cancel_description = cancel_description

    @property
    def canceled_by(self):
        """Gets the canceled_by of this SubscriptionOrder.

        Canceled by.

        :return: The canceled_by of this SubscriptionOrder.
        :rtype: str
        """
        return self._canceled_by

    @canceled_by.setter
    def canceled_by(self, canceled_by):
        """Sets the canceled_by of this SubscriptionOrder.

        Canceled by.

        :param canceled_by: The canceled_by of this SubscriptionOrder.
        :type canceled_by: str
        """
        allowed_values = ["merchant", "customer", "rebilly"]  # noqa: E501
        if canceled_by not in allowed_values:
            raise ValueError(
                "Invalid value for `canceled_by` ({0}), must be one of {1}"
                .format(canceled_by, allowed_values)
            )

        self._canceled_by = canceled_by

    @property
    def canceled_time(self):
        """Gets the canceled_time of this SubscriptionOrder.

        Subscription order canceled time.

        :return: The canceled_time of this SubscriptionOrder.
        :rtype: datetime
        """
        return self._canceled_time

    @canceled_time.setter
    def canceled_time(self, canceled_time):
        """Sets the canceled_time of this SubscriptionOrder.

        Subscription order canceled time.

        :param canceled_time: The canceled_time of this SubscriptionOrder.
        :type canceled_time: datetime
        """

        self._canceled_time = canceled_time

    @property
    def embedded(self):
        """Gets the embedded of this SubscriptionOrder.

        Any embedded objects available that are requested by the `expand` querystring parameter.

        :return: The embedded of this SubscriptionOrder.
        :rtype: List[SubscriptionMetadataEmbeddedInner]
        """
        return self._embedded

    @embedded.setter
    def embedded(self, embedded):
        """Sets the embedded of this SubscriptionOrder.

        Any embedded objects available that are requested by the `expand` querystring parameter.

        :param embedded: The embedded of this SubscriptionOrder.
        :type embedded: List[SubscriptionMetadataEmbeddedInner]
        """
        if embedded is not None and len(embedded) < 1:
            raise ValueError("Invalid value for `embedded`, number of items must be greater than or equal to `1`")

        self._embedded = embedded

    @property
    def links(self):
        """Gets the links of this SubscriptionOrder.

        The links related to resource.

        :return: The links of this SubscriptionOrder.
        :rtype: List[SubscriptionMetadataLinksInner]
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this SubscriptionOrder.

        The links related to resource.

        :param links: The links of this SubscriptionOrder.
        :type links: List[SubscriptionMetadataLinksInner]
        """
        if links is not None and len(links) < 1:
            raise ValueError("Invalid value for `links`, number of items must be greater than or equal to `1`")

        self._links = links

    @property
    def created_time(self):
        """Gets the created_time of this SubscriptionOrder.

        Order created time.

        :return: The created_time of this SubscriptionOrder.
        :rtype: datetime
        """
        return self._created_time

    @created_time.setter
    def created_time(self, created_time):
        """Sets the created_time of this SubscriptionOrder.

        Order created time.

        :param created_time: The created_time of this SubscriptionOrder.
        :type created_time: datetime
        """

        self._created_time = created_time

    @property
    def custom_fields(self):
        """Gets the custom_fields of this SubscriptionOrder.

        Custom Fields list as a map `{\"custom field name\": \"custom field value\", ...}`. The format must follow the saved format (see Custom Fields section for the formats). 

        :return: The custom_fields of this SubscriptionOrder.
        :rtype: object
        """
        return self._custom_fields

    @custom_fields.setter
    def custom_fields(self, custom_fields):
        """Sets the custom_fields of this SubscriptionOrder.

        Custom Fields list as a map `{\"custom field name\": \"custom field value\", ...}`. The format must follow the saved format (see Custom Fields section for the formats). 

        :param custom_fields: The custom_fields of this SubscriptionOrder.
        :type custom_fields: object
        """

        self._custom_fields = custom_fields

    @property
    def revision(self):
        """Gets the revision of this SubscriptionOrder.

        The number of times the order data has been modified. The revision is useful when analyzing webhook data to determine if the change takes precedence over the current representation. 

        :return: The revision of this SubscriptionOrder.
        :rtype: int
        """
        return self._revision

    @revision.setter
    def revision(self, revision):
        """Sets the revision of this SubscriptionOrder.

        The number of times the order data has been modified. The revision is useful when analyzing webhook data to determine if the change takes precedence over the current representation. 

        :param revision: The revision of this SubscriptionOrder.
        :type revision: int
        """

        self._revision = revision

    @property
    def risk_metadata(self):
        """Gets the risk_metadata of this SubscriptionOrder.

        Risk metadata. If null, the value would coalesce to the risk metadata captured when creating the payment token.

        :return: The risk_metadata of this SubscriptionOrder.
        :rtype: RiskMetadata
        """
        return self._risk_metadata

    @risk_metadata.setter
    def risk_metadata(self, risk_metadata):
        """Sets the risk_metadata of this SubscriptionOrder.

        Risk metadata. If null, the value would coalesce to the risk metadata captured when creating the payment token.

        :param risk_metadata: The risk_metadata of this SubscriptionOrder.
        :type risk_metadata: RiskMetadata
        """

        self._risk_metadata = risk_metadata

    @property
    def updated_time(self):
        """Gets the updated_time of this SubscriptionOrder.

        Order updated time.

        :return: The updated_time of this SubscriptionOrder.
        :rtype: datetime
        """
        return self._updated_time

    @updated_time.setter
    def updated_time(self, updated_time):
        """Sets the updated_time of this SubscriptionOrder.

        Order updated time.

        :param updated_time: The updated_time of this SubscriptionOrder.
        :type updated_time: datetime
        """

        self._updated_time = updated_time

    @property
    def customer_id(self):
        """Gets the customer_id of this SubscriptionOrder.

        The customer identifier string.

        :return: The customer_id of this SubscriptionOrder.
        :rtype: str
        """
        return self._customer_id

    @customer_id.setter
    def customer_id(self, customer_id):
        """Sets the customer_id of this SubscriptionOrder.

        The customer identifier string.

        :param customer_id: The customer_id of this SubscriptionOrder.
        :type customer_id: str
        """
        if customer_id is None:
            raise ValueError("Invalid value for `customer_id`, must not be `None`")
        if customer_id is not None and len(customer_id) > 50:
            raise ValueError("Invalid value for `customer_id`, length must be less than or equal to `50`")

        self._customer_id = customer_id

    @property
    def renewal_reminder_number(self):
        """Gets the renewal_reminder_number of this SubscriptionOrder.

        Number of renewal reminder events triggered.

        :return: The renewal_reminder_number of this SubscriptionOrder.
        :rtype: int
        """
        return self._renewal_reminder_number

    @renewal_reminder_number.setter
    def renewal_reminder_number(self, renewal_reminder_number):
        """Sets the renewal_reminder_number of this SubscriptionOrder.

        Number of renewal reminder events triggered.

        :param renewal_reminder_number: The renewal_reminder_number of this SubscriptionOrder.
        :type renewal_reminder_number: int
        """

        self._renewal_reminder_number = renewal_reminder_number

    @property
    def renewal_reminder_time(self):
        """Gets the renewal_reminder_time of this SubscriptionOrder.

        Time renewal reminder event will be triggered.

        :return: The renewal_reminder_time of this SubscriptionOrder.
        :rtype: datetime
        """
        return self._renewal_reminder_time

    @renewal_reminder_time.setter
    def renewal_reminder_time(self, renewal_reminder_time):
        """Sets the renewal_reminder_time of this SubscriptionOrder.

        Time renewal reminder event will be triggered.

        :param renewal_reminder_time: The renewal_reminder_time of this SubscriptionOrder.
        :type renewal_reminder_time: datetime
        """

        self._renewal_reminder_time = renewal_reminder_time

    @property
    def trial_reminder_number(self):
        """Gets the trial_reminder_number of this SubscriptionOrder.

        Number of renewal reminder events triggered.

        :return: The trial_reminder_number of this SubscriptionOrder.
        :rtype: int
        """
        return self._trial_reminder_number

    @trial_reminder_number.setter
    def trial_reminder_number(self, trial_reminder_number):
        """Sets the trial_reminder_number of this SubscriptionOrder.

        Number of renewal reminder events triggered.

        :param trial_reminder_number: The trial_reminder_number of this SubscriptionOrder.
        :type trial_reminder_number: int
        """

        self._trial_reminder_number = trial_reminder_number

    @property
    def trial_reminder_time(self):
        """Gets the trial_reminder_time of this SubscriptionOrder.

        Time renewal reminder event will be triggered.

        :return: The trial_reminder_time of this SubscriptionOrder.
        :rtype: datetime
        """
        return self._trial_reminder_time

    @trial_reminder_time.setter
    def trial_reminder_time(self, trial_reminder_time):
        """Sets the trial_reminder_time of this SubscriptionOrder.

        Time renewal reminder event will be triggered.

        :param trial_reminder_time: The trial_reminder_time of this SubscriptionOrder.
        :type trial_reminder_time: datetime
        """

        self._trial_reminder_time = trial_reminder_time
