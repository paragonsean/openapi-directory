# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.invoice_all_of_retry_instruction_attempts import InvoiceAllOfRetryInstructionAttempts
from openapi_server import util


class InvoiceAllOfRetryInstruction(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, after_attempt_policies: List[str]=None, after_retry_end_policies: List[str]=None, attempts: List[InvoiceAllOfRetryInstructionAttempts]=None):
        """InvoiceAllOfRetryInstruction - a model defined in OpenAPI

        :param after_attempt_policies: The after_attempt_policies of this InvoiceAllOfRetryInstruction.
        :param after_retry_end_policies: The after_retry_end_policies of this InvoiceAllOfRetryInstruction.
        :param attempts: The attempts of this InvoiceAllOfRetryInstruction.
        """
        self.openapi_types = {
            'after_attempt_policies': List[str],
            'after_retry_end_policies': List[str],
            'attempts': List[InvoiceAllOfRetryInstructionAttempts]
        }

        self.attribute_map = {
            'after_attempt_policies': 'afterAttemptPolicies',
            'after_retry_end_policies': 'afterRetryEndPolicies',
            'attempts': 'attempts'
        }

        self._after_attempt_policies = after_attempt_policies
        self._after_retry_end_policies = after_retry_end_policies
        self._attempts = attempts

    @classmethod
    def from_dict(cls, dikt: dict) -> 'InvoiceAllOfRetryInstruction':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Invoice_allOf_retryInstruction of this InvoiceAllOfRetryInstruction.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def after_attempt_policies(self):
        """Gets the after_attempt_policies of this InvoiceAllOfRetryInstruction.

        The policy on the attempt finishes.

        :return: The after_attempt_policies of this InvoiceAllOfRetryInstruction.
        :rtype: List[str]
        """
        return self._after_attempt_policies

    @after_attempt_policies.setter
    def after_attempt_policies(self, after_attempt_policies):
        """Sets the after_attempt_policies of this InvoiceAllOfRetryInstruction.

        The policy on the attempt finishes.

        :param after_attempt_policies: The after_attempt_policies of this InvoiceAllOfRetryInstruction.
        :type after_attempt_policies: List[str]
        """
        allowed_values = ["change-subscription-renewal-time"]  # noqa: E501
        if not set(after_attempt_policies).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `after_attempt_policies` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(after_attempt_policies) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._after_attempt_policies = after_attempt_policies

    @property
    def after_retry_end_policies(self):
        """Gets the after_retry_end_policies of this InvoiceAllOfRetryInstruction.

        The policy on the retry ends.

        :return: The after_retry_end_policies of this InvoiceAllOfRetryInstruction.
        :rtype: List[str]
        """
        return self._after_retry_end_policies

    @after_retry_end_policies.setter
    def after_retry_end_policies(self, after_retry_end_policies):
        """Sets the after_retry_end_policies of this InvoiceAllOfRetryInstruction.

        The policy on the retry ends.

        :param after_retry_end_policies: The after_retry_end_policies of this InvoiceAllOfRetryInstruction.
        :type after_retry_end_policies: List[str]
        """
        allowed_values = ["abandon-invoice", "cancel-subscription"]  # noqa: E501
        if not set(after_retry_end_policies).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `after_retry_end_policies` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(after_retry_end_policies) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._after_retry_end_policies = after_retry_end_policies

    @property
    def attempts(self):
        """Gets the attempts of this InvoiceAllOfRetryInstruction.


        :return: The attempts of this InvoiceAllOfRetryInstruction.
        :rtype: List[InvoiceAllOfRetryInstructionAttempts]
        """
        return self._attempts

    @attempts.setter
    def attempts(self, attempts):
        """Sets the attempts of this InvoiceAllOfRetryInstruction.


        :param attempts: The attempts of this InvoiceAllOfRetryInstruction.
        :type attempts: List[InvoiceAllOfRetryInstructionAttempts]
        """
        if attempts is None:
            raise ValueError("Invalid value for `attempts`, must not be `None`")
        if attempts is not None and len(attempts) < 1:
            raise ValueError("Invalid value for `attempts`, number of items must be greater than or equal to `1`")

        self._attempts = attempts
