# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.bank_account_instrument import BankAccountInstrument
import re
from openapi_server import util


class BBANInstrument(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_number_type: str='BBAN', account_number: str=None, account_type: str=None, bank_name: str=None, bic: str=None, last4: str=None, routing_number: str=None):
        """BBANInstrument - a model defined in OpenAPI

        :param account_number_type: The account_number_type of this BBANInstrument.
        :param account_number: The account_number of this BBANInstrument.
        :param account_type: The account_type of this BBANInstrument.
        :param bank_name: The bank_name of this BBANInstrument.
        :param bic: The bic of this BBANInstrument.
        :param last4: The last4 of this BBANInstrument.
        :param routing_number: The routing_number of this BBANInstrument.
        """
        self.openapi_types = {
            'account_number_type': str,
            'account_number': str,
            'account_type': str,
            'bank_name': str,
            'bic': str,
            'last4': str,
            'routing_number': str
        }

        self.attribute_map = {
            'account_number_type': 'accountNumberType',
            'account_number': 'accountNumber',
            'account_type': 'accountType',
            'bank_name': 'bankName',
            'bic': 'bic',
            'last4': 'last4',
            'routing_number': 'routingNumber'
        }

        self._account_number_type = account_number_type
        self._account_number = account_number
        self._account_type = account_type
        self._bank_name = bank_name
        self._bic = bic
        self._last4 = last4
        self._routing_number = routing_number

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BBANInstrument':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BBANInstrument of this BBANInstrument.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_number_type(self):
        """Gets the account_number_type of this BBANInstrument.

        Bank's Account Number type. A valid value is basic bank account number (BBAN) or international bank account number (IBAN).

        :return: The account_number_type of this BBANInstrument.
        :rtype: str
        """
        return self._account_number_type

    @account_number_type.setter
    def account_number_type(self, account_number_type):
        """Sets the account_number_type of this BBANInstrument.

        Bank's Account Number type. A valid value is basic bank account number (BBAN) or international bank account number (IBAN).

        :param account_number_type: The account_number_type of this BBANInstrument.
        :type account_number_type: str
        """
        allowed_values = ["IBAN", "BBAN"]  # noqa: E501
        if account_number_type not in allowed_values:
            raise ValueError(
                "Invalid value for `account_number_type` ({0}), must be one of {1}"
                .format(account_number_type, allowed_values)
            )

        self._account_number_type = account_number_type

    @property
    def account_number(self):
        """Gets the account_number of this BBANInstrument.

        Bank Account Number.

        :return: The account_number of this BBANInstrument.
        :rtype: str
        """
        return self._account_number

    @account_number.setter
    def account_number(self, account_number):
        """Sets the account_number of this BBANInstrument.

        Bank Account Number.

        :param account_number: The account_number of this BBANInstrument.
        :type account_number: str
        """
        if account_number is None:
            raise ValueError("Invalid value for `account_number`, must not be `None`")
        if account_number is not None and not re.search(r'^[0-9]+$', account_number):
            raise ValueError("Invalid value for `account_number`, must be a follow pattern or equal to `/^[0-9]+$/`")

        self._account_number = account_number

    @property
    def account_type(self):
        """Gets the account_type of this BBANInstrument.

        Bank Account Type.

        :return: The account_type of this BBANInstrument.
        :rtype: str
        """
        return self._account_type

    @account_type.setter
    def account_type(self, account_type):
        """Sets the account_type of this BBANInstrument.

        Bank Account Type.

        :param account_type: The account_type of this BBANInstrument.
        :type account_type: str
        """
        allowed_values = ["checking", "savings", "other"]  # noqa: E501
        if account_type not in allowed_values:
            raise ValueError(
                "Invalid value for `account_type` ({0}), must be one of {1}"
                .format(account_type, allowed_values)
            )

        self._account_type = account_type

    @property
    def bank_name(self):
        """Gets the bank_name of this BBANInstrument.

        Bank name.

        :return: The bank_name of this BBANInstrument.
        :rtype: str
        """
        return self._bank_name

    @bank_name.setter
    def bank_name(self, bank_name):
        """Sets the bank_name of this BBANInstrument.

        Bank name.

        :param bank_name: The bank_name of this BBANInstrument.
        :type bank_name: str
        """

        self._bank_name = bank_name

    @property
    def bic(self):
        """Gets the bic of this BBANInstrument.

        Bank Identifier Code.

        :return: The bic of this BBANInstrument.
        :rtype: str
        """
        return self._bic

    @bic.setter
    def bic(self, bic):
        """Sets the bic of this BBANInstrument.

        Bank Identifier Code.

        :param bic: The bic of this BBANInstrument.
        :type bic: str
        """

        self._bic = bic

    @property
    def last4(self):
        """Gets the last4 of this BBANInstrument.

        Bank Account Number's last 4 digits.

        :return: The last4 of this BBANInstrument.
        :rtype: str
        """
        return self._last4

    @last4.setter
    def last4(self, last4):
        """Sets the last4 of this BBANInstrument.

        Bank Account Number's last 4 digits.

        :param last4: The last4 of this BBANInstrument.
        :type last4: str
        """

        self._last4 = last4

    @property
    def routing_number(self):
        """Gets the routing_number of this BBANInstrument.

        Bank Routing Number.

        :return: The routing_number of this BBANInstrument.
        :rtype: str
        """
        return self._routing_number

    @routing_number.setter
    def routing_number(self, routing_number):
        """Sets the routing_number of this BBANInstrument.

        Bank Routing Number.

        :param routing_number: The routing_number of this BBANInstrument.
        :type routing_number: str
        """
        if routing_number is None:
            raise ValueError("Invalid value for `routing_number`, must not be `None`")
        if routing_number is not None and not re.search(r'^[0-9]+$', routing_number):
            raise ValueError("Invalid value for `routing_number`, must be a follow pattern or equal to `/^[0-9]+$/`")

        self._routing_number = routing_number
