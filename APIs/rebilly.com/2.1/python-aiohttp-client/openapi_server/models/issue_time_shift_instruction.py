# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.due_time_shift_instruction_unit import DueTimeShiftInstructionUnit
from openapi_server import util


class IssueTimeShiftInstruction(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, chronology: str=None, duration: int=None, unit: DueTimeShiftInstructionUnit=None):
        """IssueTimeShiftInstruction - a model defined in OpenAPI

        :param chronology: The chronology of this IssueTimeShiftInstruction.
        :param duration: The duration of this IssueTimeShiftInstruction.
        :param unit: The unit of this IssueTimeShiftInstruction.
        """
        self.openapi_types = {
            'chronology': str,
            'duration': int,
            'unit': DueTimeShiftInstructionUnit
        }

        self.attribute_map = {
            'chronology': 'chronology',
            'duration': 'duration',
            'unit': 'unit'
        }

        self._chronology = chronology
        self._duration = duration
        self._unit = unit

    @classmethod
    def from_dict(cls, dikt: dict) -> 'IssueTimeShiftInstruction':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The IssueTimeShiftInstruction of this IssueTimeShiftInstruction.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def chronology(self):
        """Gets the chronology of this IssueTimeShiftInstruction.

        The chronology of the billing time relatively to the service period start.

        :return: The chronology of this IssueTimeShiftInstruction.
        :rtype: str
        """
        return self._chronology

    @chronology.setter
    def chronology(self, chronology):
        """Sets the chronology of this IssueTimeShiftInstruction.

        The chronology of the billing time relatively to the service period start.

        :param chronology: The chronology of this IssueTimeShiftInstruction.
        :type chronology: str
        """
        allowed_values = ["before"]  # noqa: E501
        if chronology not in allowed_values:
            raise ValueError(
                "Invalid value for `chronology` ({0}), must be one of {1}"
                .format(chronology, allowed_values)
            )

        self._chronology = chronology

    @property
    def duration(self):
        """Gets the duration of this IssueTimeShiftInstruction.

        The number of the units.

        :return: The duration of this IssueTimeShiftInstruction.
        :rtype: int
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this IssueTimeShiftInstruction.

        The number of the units.

        :param duration: The duration of this IssueTimeShiftInstruction.
        :type duration: int
        """
        if duration is None:
            raise ValueError("Invalid value for `duration`, must not be `None`")
        if duration is not None and duration < 1:
            raise ValueError("Invalid value for `duration`, must be a value greater than or equal to `1`")

        self._duration = duration

    @property
    def unit(self):
        """Gets the unit of this IssueTimeShiftInstruction.


        :return: The unit of this IssueTimeShiftInstruction.
        :rtype: DueTimeShiftInstructionUnit
        """
        return self._unit

    @unit.setter
    def unit(self, unit):
        """Sets the unit of this IssueTimeShiftInstruction.


        :param unit: The unit of this IssueTimeShiftInstruction.
        :type unit: DueTimeShiftInstructionUnit
        """
        if unit is None:
            raise ValueError("Invalid value for `unit`, must not be `None`")

        self._unit = unit
