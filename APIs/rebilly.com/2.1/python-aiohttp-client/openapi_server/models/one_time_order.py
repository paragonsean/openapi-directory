# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.common_subscription_items_inner import CommonSubscriptionItemsInner
from openapi_server.models.contact_object import ContactObject
from openapi_server.models.risk_metadata import RiskMetadata
from openapi_server.models.subscription_metadata_embedded_inner import SubscriptionMetadataEmbeddedInner
from openapi_server.models.subscription_metadata_links_inner import SubscriptionMetadataLinksInner
from openapi_server import util


class OneTimeOrder(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, activation_time: datetime=None, billing_address: ContactObject=None, billing_status: str=None, coupon_ids: List[str]=None, delivery_address: ContactObject=None, id: str=None, initial_invoice_id: str=None, items: List[CommonSubscriptionItemsInner]=None, order_type: str='subscription-order', po_number: str=None, recent_invoice_id: str=None, void_time: datetime=None, website_id: str=None, status: str=None, embedded: List[SubscriptionMetadataEmbeddedInner]=None, links: List[SubscriptionMetadataLinksInner]=None, created_time: datetime=None, custom_fields: object=None, revision: int=None, risk_metadata: RiskMetadata=None, updated_time: datetime=None, customer_id: str=None):
        """OneTimeOrder - a model defined in OpenAPI

        :param activation_time: The activation_time of this OneTimeOrder.
        :param billing_address: The billing_address of this OneTimeOrder.
        :param billing_status: The billing_status of this OneTimeOrder.
        :param coupon_ids: The coupon_ids of this OneTimeOrder.
        :param delivery_address: The delivery_address of this OneTimeOrder.
        :param id: The id of this OneTimeOrder.
        :param initial_invoice_id: The initial_invoice_id of this OneTimeOrder.
        :param items: The items of this OneTimeOrder.
        :param order_type: The order_type of this OneTimeOrder.
        :param po_number: The po_number of this OneTimeOrder.
        :param recent_invoice_id: The recent_invoice_id of this OneTimeOrder.
        :param void_time: The void_time of this OneTimeOrder.
        :param website_id: The website_id of this OneTimeOrder.
        :param status: The status of this OneTimeOrder.
        :param embedded: The embedded of this OneTimeOrder.
        :param links: The links of this OneTimeOrder.
        :param created_time: The created_time of this OneTimeOrder.
        :param custom_fields: The custom_fields of this OneTimeOrder.
        :param revision: The revision of this OneTimeOrder.
        :param risk_metadata: The risk_metadata of this OneTimeOrder.
        :param updated_time: The updated_time of this OneTimeOrder.
        :param customer_id: The customer_id of this OneTimeOrder.
        """
        self.openapi_types = {
            'activation_time': datetime,
            'billing_address': ContactObject,
            'billing_status': str,
            'coupon_ids': List[str],
            'delivery_address': ContactObject,
            'id': str,
            'initial_invoice_id': str,
            'items': List[CommonSubscriptionItemsInner],
            'order_type': str,
            'po_number': str,
            'recent_invoice_id': str,
            'void_time': datetime,
            'website_id': str,
            'status': str,
            'embedded': List[SubscriptionMetadataEmbeddedInner],
            'links': List[SubscriptionMetadataLinksInner],
            'created_time': datetime,
            'custom_fields': object,
            'revision': int,
            'risk_metadata': RiskMetadata,
            'updated_time': datetime,
            'customer_id': str
        }

        self.attribute_map = {
            'activation_time': 'activationTime',
            'billing_address': 'billingAddress',
            'billing_status': 'billingStatus',
            'coupon_ids': 'couponIds',
            'delivery_address': 'deliveryAddress',
            'id': 'id',
            'initial_invoice_id': 'initialInvoiceId',
            'items': 'items',
            'order_type': 'orderType',
            'po_number': 'poNumber',
            'recent_invoice_id': 'recentInvoiceId',
            'void_time': 'voidTime',
            'website_id': 'websiteId',
            'status': 'status',
            'embedded': '_embedded',
            'links': '_links',
            'created_time': 'createdTime',
            'custom_fields': 'customFields',
            'revision': 'revision',
            'risk_metadata': 'riskMetadata',
            'updated_time': 'updatedTime',
            'customer_id': 'customerId'
        }

        self._activation_time = activation_time
        self._billing_address = billing_address
        self._billing_status = billing_status
        self._coupon_ids = coupon_ids
        self._delivery_address = delivery_address
        self._id = id
        self._initial_invoice_id = initial_invoice_id
        self._items = items
        self._order_type = order_type
        self._po_number = po_number
        self._recent_invoice_id = recent_invoice_id
        self._void_time = void_time
        self._website_id = website_id
        self._status = status
        self._embedded = embedded
        self._links = links
        self._created_time = created_time
        self._custom_fields = custom_fields
        self._revision = revision
        self._risk_metadata = risk_metadata
        self._updated_time = updated_time
        self._customer_id = customer_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OneTimeOrder':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OneTimeOrder of this OneTimeOrder.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def activation_time(self):
        """Gets the activation_time of this OneTimeOrder.

        Order activation time.

        :return: The activation_time of this OneTimeOrder.
        :rtype: datetime
        """
        return self._activation_time

    @activation_time.setter
    def activation_time(self, activation_time):
        """Sets the activation_time of this OneTimeOrder.

        Order activation time.

        :param activation_time: The activation_time of this OneTimeOrder.
        :type activation_time: datetime
        """

        self._activation_time = activation_time

    @property
    def billing_address(self):
        """Gets the billing_address of this OneTimeOrder.

        Order billing address.

        :return: The billing_address of this OneTimeOrder.
        :rtype: ContactObject
        """
        return self._billing_address

    @billing_address.setter
    def billing_address(self, billing_address):
        """Sets the billing_address of this OneTimeOrder.

        Order billing address.

        :param billing_address: The billing_address of this OneTimeOrder.
        :type billing_address: ContactObject
        """

        self._billing_address = billing_address

    @property
    def billing_status(self):
        """Gets the billing_status of this OneTimeOrder.

        The billing status of the most recent invoice.  It may help you determine if you should change the service status such as suspending the service. 

        :return: The billing_status of this OneTimeOrder.
        :rtype: str
        """
        return self._billing_status

    @billing_status.setter
    def billing_status(self, billing_status):
        """Sets the billing_status of this OneTimeOrder.

        The billing status of the most recent invoice.  It may help you determine if you should change the service status such as suspending the service. 

        :param billing_status: The billing_status of this OneTimeOrder.
        :type billing_status: str
        """
        allowed_values = ["unpaid", "past-due", "delinquent", "paid", "voided", "refunded", "disputed", "voided"]  # noqa: E501
        if billing_status not in allowed_values:
            raise ValueError(
                "Invalid value for `billing_status` ({0}), must be one of {1}"
                .format(billing_status, allowed_values)
            )

        self._billing_status = billing_status

    @property
    def coupon_ids(self):
        """Gets the coupon_ids of this OneTimeOrder.

        A list of coupons to redeem on the customer and restrict to this subscription. Read more about [coupons here](https://docs.rebilly.com/docs/dashboard/marketing/coupons-and-discounts/).  This parameter respects the following logic:  - When not passed then applied coupons will not be changed.  - When empty array passed then all applied coupon redemptions will be canceled.  - When list of coupons is passed then not applied yet coupons will be applied, already applied coupons will not change their state, applied coupons that are not presented in passed list will be canceled.  If list of applied coupons on pending order will be changed due to this param during update order,  Invoice for the order will be reissued. 

        :return: The coupon_ids of this OneTimeOrder.
        :rtype: List[str]
        """
        return self._coupon_ids

    @coupon_ids.setter
    def coupon_ids(self, coupon_ids):
        """Sets the coupon_ids of this OneTimeOrder.

        A list of coupons to redeem on the customer and restrict to this subscription. Read more about [coupons here](https://docs.rebilly.com/docs/dashboard/marketing/coupons-and-discounts/).  This parameter respects the following logic:  - When not passed then applied coupons will not be changed.  - When empty array passed then all applied coupon redemptions will be canceled.  - When list of coupons is passed then not applied yet coupons will be applied, already applied coupons will not change their state, applied coupons that are not presented in passed list will be canceled.  If list of applied coupons on pending order will be changed due to this param during update order,  Invoice for the order will be reissued. 

        :param coupon_ids: The coupon_ids of this OneTimeOrder.
        :type coupon_ids: List[str]
        """

        self._coupon_ids = coupon_ids

    @property
    def delivery_address(self):
        """Gets the delivery_address of this OneTimeOrder.

        Order delivery address.

        :return: The delivery_address of this OneTimeOrder.
        :rtype: ContactObject
        """
        return self._delivery_address

    @delivery_address.setter
    def delivery_address(self, delivery_address):
        """Sets the delivery_address of this OneTimeOrder.

        Order delivery address.

        :param delivery_address: The delivery_address of this OneTimeOrder.
        :type delivery_address: ContactObject
        """

        self._delivery_address = delivery_address

    @property
    def id(self):
        """Gets the id of this OneTimeOrder.

        The order identifier string.

        :return: The id of this OneTimeOrder.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this OneTimeOrder.

        The order identifier string.

        :param id: The id of this OneTimeOrder.
        :type id: str
        """
        if id is not None and len(id) > 50:
            raise ValueError("Invalid value for `id`, length must be less than or equal to `50`")

        self._id = id

    @property
    def initial_invoice_id(self):
        """Gets the initial_invoice_id of this OneTimeOrder.

        The initial invoice identifier string.

        :return: The initial_invoice_id of this OneTimeOrder.
        :rtype: str
        """
        return self._initial_invoice_id

    @initial_invoice_id.setter
    def initial_invoice_id(self, initial_invoice_id):
        """Sets the initial_invoice_id of this OneTimeOrder.

        The initial invoice identifier string.

        :param initial_invoice_id: The initial_invoice_id of this OneTimeOrder.
        :type initial_invoice_id: str
        """
        if initial_invoice_id is not None and len(initial_invoice_id) > 50:
            raise ValueError("Invalid value for `initial_invoice_id`, length must be less than or equal to `50`")

        self._initial_invoice_id = initial_invoice_id

    @property
    def items(self):
        """Gets the items of this OneTimeOrder.


        :return: The items of this OneTimeOrder.
        :rtype: List[CommonSubscriptionItemsInner]
        """
        return self._items

    @items.setter
    def items(self, items):
        """Sets the items of this OneTimeOrder.


        :param items: The items of this OneTimeOrder.
        :type items: List[CommonSubscriptionItemsInner]
        """
        if items is None:
            raise ValueError("Invalid value for `items`, must not be `None`")
        if items is not None and len(items) < 1:
            raise ValueError("Invalid value for `items`, number of items must be greater than or equal to `1`")

        self._items = items

    @property
    def order_type(self):
        """Gets the order_type of this OneTimeOrder.

        Specifies the type of order, a subscription or a one-time purchase. 

        :return: The order_type of this OneTimeOrder.
        :rtype: str
        """
        return self._order_type

    @order_type.setter
    def order_type(self, order_type):
        """Sets the order_type of this OneTimeOrder.

        Specifies the type of order, a subscription or a one-time purchase. 

        :param order_type: The order_type of this OneTimeOrder.
        :type order_type: str
        """
        allowed_values = ["subscription-order", "one-time-order"]  # noqa: E501
        if order_type not in allowed_values:
            raise ValueError(
                "Invalid value for `order_type` ({0}), must be one of {1}"
                .format(order_type, allowed_values)
            )

        self._order_type = order_type

    @property
    def po_number(self):
        """Gets the po_number of this OneTimeOrder.

        Purchase order number, will be displayed on the issued invoices.

        :return: The po_number of this OneTimeOrder.
        :rtype: str
        """
        return self._po_number

    @po_number.setter
    def po_number(self, po_number):
        """Sets the po_number of this OneTimeOrder.

        Purchase order number, will be displayed on the issued invoices.

        :param po_number: The po_number of this OneTimeOrder.
        :type po_number: str
        """

        self._po_number = po_number

    @property
    def recent_invoice_id(self):
        """Gets the recent_invoice_id of this OneTimeOrder.

        Most recently issued invoice identifier string. It might not be `paid` yet.

        :return: The recent_invoice_id of this OneTimeOrder.
        :rtype: str
        """
        return self._recent_invoice_id

    @recent_invoice_id.setter
    def recent_invoice_id(self, recent_invoice_id):
        """Sets the recent_invoice_id of this OneTimeOrder.

        Most recently issued invoice identifier string. It might not be `paid` yet.

        :param recent_invoice_id: The recent_invoice_id of this OneTimeOrder.
        :type recent_invoice_id: str
        """
        if recent_invoice_id is not None and len(recent_invoice_id) > 50:
            raise ValueError("Invalid value for `recent_invoice_id`, length must be less than or equal to `50`")

        self._recent_invoice_id = recent_invoice_id

    @property
    def void_time(self):
        """Gets the void_time of this OneTimeOrder.

        Order void time.

        :return: The void_time of this OneTimeOrder.
        :rtype: datetime
        """
        return self._void_time

    @void_time.setter
    def void_time(self, void_time):
        """Sets the void_time of this OneTimeOrder.

        Order void time.

        :param void_time: The void_time of this OneTimeOrder.
        :type void_time: datetime
        """

        self._void_time = void_time

    @property
    def website_id(self):
        """Gets the website_id of this OneTimeOrder.

        The website identifier string.

        :return: The website_id of this OneTimeOrder.
        :rtype: str
        """
        return self._website_id

    @website_id.setter
    def website_id(self, website_id):
        """Sets the website_id of this OneTimeOrder.

        The website identifier string.

        :param website_id: The website_id of this OneTimeOrder.
        :type website_id: str
        """
        if website_id is None:
            raise ValueError("Invalid value for `website_id`, must not be `None`")
        if website_id is not None and len(website_id) > 50:
            raise ValueError("Invalid value for `website_id`, length must be less than or equal to `50`")

        self._website_id = website_id

    @property
    def status(self):
        """Gets the status of this OneTimeOrder.

        One-time order status.

        :return: The status of this OneTimeOrder.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this OneTimeOrder.

        One-time order status.

        :param status: The status of this OneTimeOrder.
        :type status: str
        """
        allowed_values = ["pending", "completed", "abandoned"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def embedded(self):
        """Gets the embedded of this OneTimeOrder.

        Any embedded objects available that are requested by the `expand` querystring parameter.

        :return: The embedded of this OneTimeOrder.
        :rtype: List[SubscriptionMetadataEmbeddedInner]
        """
        return self._embedded

    @embedded.setter
    def embedded(self, embedded):
        """Sets the embedded of this OneTimeOrder.

        Any embedded objects available that are requested by the `expand` querystring parameter.

        :param embedded: The embedded of this OneTimeOrder.
        :type embedded: List[SubscriptionMetadataEmbeddedInner]
        """
        if embedded is not None and len(embedded) < 1:
            raise ValueError("Invalid value for `embedded`, number of items must be greater than or equal to `1`")

        self._embedded = embedded

    @property
    def links(self):
        """Gets the links of this OneTimeOrder.

        The links related to resource.

        :return: The links of this OneTimeOrder.
        :rtype: List[SubscriptionMetadataLinksInner]
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this OneTimeOrder.

        The links related to resource.

        :param links: The links of this OneTimeOrder.
        :type links: List[SubscriptionMetadataLinksInner]
        """
        if links is not None and len(links) < 1:
            raise ValueError("Invalid value for `links`, number of items must be greater than or equal to `1`")

        self._links = links

    @property
    def created_time(self):
        """Gets the created_time of this OneTimeOrder.

        Order created time.

        :return: The created_time of this OneTimeOrder.
        :rtype: datetime
        """
        return self._created_time

    @created_time.setter
    def created_time(self, created_time):
        """Sets the created_time of this OneTimeOrder.

        Order created time.

        :param created_time: The created_time of this OneTimeOrder.
        :type created_time: datetime
        """

        self._created_time = created_time

    @property
    def custom_fields(self):
        """Gets the custom_fields of this OneTimeOrder.

        Custom Fields list as a map `{\"custom field name\": \"custom field value\", ...}`. The format must follow the saved format (see Custom Fields section for the formats). 

        :return: The custom_fields of this OneTimeOrder.
        :rtype: object
        """
        return self._custom_fields

    @custom_fields.setter
    def custom_fields(self, custom_fields):
        """Sets the custom_fields of this OneTimeOrder.

        Custom Fields list as a map `{\"custom field name\": \"custom field value\", ...}`. The format must follow the saved format (see Custom Fields section for the formats). 

        :param custom_fields: The custom_fields of this OneTimeOrder.
        :type custom_fields: object
        """

        self._custom_fields = custom_fields

    @property
    def revision(self):
        """Gets the revision of this OneTimeOrder.

        The number of times the order data has been modified. The revision is useful when analyzing webhook data to determine if the change takes precedence over the current representation. 

        :return: The revision of this OneTimeOrder.
        :rtype: int
        """
        return self._revision

    @revision.setter
    def revision(self, revision):
        """Sets the revision of this OneTimeOrder.

        The number of times the order data has been modified. The revision is useful when analyzing webhook data to determine if the change takes precedence over the current representation. 

        :param revision: The revision of this OneTimeOrder.
        :type revision: int
        """

        self._revision = revision

    @property
    def risk_metadata(self):
        """Gets the risk_metadata of this OneTimeOrder.

        Risk metadata. If null, the value would coalesce to the risk metadata captured when creating the payment token.

        :return: The risk_metadata of this OneTimeOrder.
        :rtype: RiskMetadata
        """
        return self._risk_metadata

    @risk_metadata.setter
    def risk_metadata(self, risk_metadata):
        """Sets the risk_metadata of this OneTimeOrder.

        Risk metadata. If null, the value would coalesce to the risk metadata captured when creating the payment token.

        :param risk_metadata: The risk_metadata of this OneTimeOrder.
        :type risk_metadata: RiskMetadata
        """

        self._risk_metadata = risk_metadata

    @property
    def updated_time(self):
        """Gets the updated_time of this OneTimeOrder.

        Order updated time.

        :return: The updated_time of this OneTimeOrder.
        :rtype: datetime
        """
        return self._updated_time

    @updated_time.setter
    def updated_time(self, updated_time):
        """Sets the updated_time of this OneTimeOrder.

        Order updated time.

        :param updated_time: The updated_time of this OneTimeOrder.
        :type updated_time: datetime
        """

        self._updated_time = updated_time

    @property
    def customer_id(self):
        """Gets the customer_id of this OneTimeOrder.

        The customer identifier string.

        :return: The customer_id of this OneTimeOrder.
        :rtype: str
        """
        return self._customer_id

    @customer_id.setter
    def customer_id(self, customer_id):
        """Sets the customer_id of this OneTimeOrder.

        The customer identifier string.

        :param customer_id: The customer_id of this OneTimeOrder.
        :type customer_id: str
        """
        if customer_id is None:
            raise ValueError("Invalid value for `customer_id`, must not be `None`")
        if customer_id is not None and len(customer_id) > 50:
            raise ValueError("Invalid value for `customer_id`, length must be less than or equal to `50`")

        self._customer_id = customer_id
