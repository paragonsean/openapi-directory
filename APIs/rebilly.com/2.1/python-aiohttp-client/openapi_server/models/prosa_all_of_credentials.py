# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ProsaAllOfCredentials(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, access_token: str=None, entity_id: str=None):
        """ProsaAllOfCredentials - a model defined in OpenAPI

        :param access_token: The access_token of this ProsaAllOfCredentials.
        :param entity_id: The entity_id of this ProsaAllOfCredentials.
        """
        self.openapi_types = {
            'access_token': str,
            'entity_id': str
        }

        self.attribute_map = {
            'access_token': 'accessToken',
            'entity_id': 'entityId'
        }

        self._access_token = access_token
        self._entity_id = entity_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ProsaAllOfCredentials':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Prosa_allOf_credentials of this ProsaAllOfCredentials.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def access_token(self):
        """Gets the access_token of this ProsaAllOfCredentials.

        Access token.

        :return: The access_token of this ProsaAllOfCredentials.
        :rtype: str
        """
        return self._access_token

    @access_token.setter
    def access_token(self, access_token):
        """Sets the access_token of this ProsaAllOfCredentials.

        Access token.

        :param access_token: The access_token of this ProsaAllOfCredentials.
        :type access_token: str
        """
        if access_token is None:
            raise ValueError("Invalid value for `access_token`, must not be `None`")

        self._access_token = access_token

    @property
    def entity_id(self):
        """Gets the entity_id of this ProsaAllOfCredentials.

        Entity ID.

        :return: The entity_id of this ProsaAllOfCredentials.
        :rtype: str
        """
        return self._entity_id

    @entity_id.setter
    def entity_id(self, entity_id):
        """Sets the entity_id of this ProsaAllOfCredentials.

        Entity ID.

        :param entity_id: The entity_id of this ProsaAllOfCredentials.
        :type entity_id: str
        """
        if entity_id is None:
            raise ValueError("Invalid value for `entity_id`, must not be `None`")

        self._entity_id = entity_id
