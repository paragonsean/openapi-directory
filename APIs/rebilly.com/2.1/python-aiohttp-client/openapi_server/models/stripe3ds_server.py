# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.stripe3ds_servers import Stripe3dsServers
from openapi_server.models.three_d_secure_server_name import ThreeDSecureServerName
from openapi_server import util


class Stripe3dsServer(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: ThreeDSecureServerName=None, enforce_three_d_secure: bool=None):
        """Stripe3dsServer - a model defined in OpenAPI

        :param name: The name of this Stripe3dsServer.
        :param enforce_three_d_secure: The enforce_three_d_secure of this Stripe3dsServer.
        """
        self.openapi_types = {
            'name': ThreeDSecureServerName,
            'enforce_three_d_secure': bool
        }

        self.attribute_map = {
            'name': 'name',
            'enforce_three_d_secure': 'enforceThreeDSecure'
        }

        self._name = name
        self._enforce_three_d_secure = enforce_three_d_secure

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Stripe3dsServer':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Stripe3dsServer of this Stripe3dsServer.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this Stripe3dsServer.


        :return: The name of this Stripe3dsServer.
        :rtype: ThreeDSecureServerName
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Stripe3dsServer.


        :param name: The name of this Stripe3dsServer.
        :type name: ThreeDSecureServerName
        """

        self._name = name

    @property
    def enforce_three_d_secure(self):
        """Gets the enforce_three_d_secure of this Stripe3dsServer.

        If true, Stripe will attempt to perform 3D Secure and overrides any [dynamic 3D Secure Radar rules](https://stripe.com/docs/radar/rules#request-3ds). 

        :return: The enforce_three_d_secure of this Stripe3dsServer.
        :rtype: bool
        """
        return self._enforce_three_d_secure

    @enforce_three_d_secure.setter
    def enforce_three_d_secure(self, enforce_three_d_secure):
        """Sets the enforce_three_d_secure of this Stripe3dsServer.

        If true, Stripe will attempt to perform 3D Secure and overrides any [dynamic 3D Secure Radar rules](https://stripe.com/docs/radar/rules#request-3ds). 

        :param enforce_three_d_secure: The enforce_three_d_secure of this Stripe3dsServer.
        :type enforce_three_d_secure: bool
        """

        self._enforce_three_d_secure = enforce_three_d_secure
