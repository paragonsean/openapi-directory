# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class NuaPayAllOfCredentials(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, nua_pay_account_id: str=None, nua_pay_api_key: str=None, nua_pay_common_name: str=None, nua_pay_originator_iban: str=None, nua_pay_private_key: str=None, nua_pay_serial_number: str=None):
        """NuaPayAllOfCredentials - a model defined in OpenAPI

        :param nua_pay_account_id: The nua_pay_account_id of this NuaPayAllOfCredentials.
        :param nua_pay_api_key: The nua_pay_api_key of this NuaPayAllOfCredentials.
        :param nua_pay_common_name: The nua_pay_common_name of this NuaPayAllOfCredentials.
        :param nua_pay_originator_iban: The nua_pay_originator_iban of this NuaPayAllOfCredentials.
        :param nua_pay_private_key: The nua_pay_private_key of this NuaPayAllOfCredentials.
        :param nua_pay_serial_number: The nua_pay_serial_number of this NuaPayAllOfCredentials.
        """
        self.openapi_types = {
            'nua_pay_account_id': str,
            'nua_pay_api_key': str,
            'nua_pay_common_name': str,
            'nua_pay_originator_iban': str,
            'nua_pay_private_key': str,
            'nua_pay_serial_number': str
        }

        self.attribute_map = {
            'nua_pay_account_id': 'nuaPayAccountId',
            'nua_pay_api_key': 'nuaPayApiKey',
            'nua_pay_common_name': 'nuaPayCommonName',
            'nua_pay_originator_iban': 'nuaPayOriginatorIban',
            'nua_pay_private_key': 'nuaPayPrivateKey',
            'nua_pay_serial_number': 'nuaPaySerialNumber'
        }

        self._nua_pay_account_id = nua_pay_account_id
        self._nua_pay_api_key = nua_pay_api_key
        self._nua_pay_common_name = nua_pay_common_name
        self._nua_pay_originator_iban = nua_pay_originator_iban
        self._nua_pay_private_key = nua_pay_private_key
        self._nua_pay_serial_number = nua_pay_serial_number

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NuaPayAllOfCredentials':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NuaPay_allOf_credentials of this NuaPayAllOfCredentials.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def nua_pay_account_id(self):
        """Gets the nua_pay_account_id of this NuaPayAllOfCredentials.

        NuaPay account ID.

        :return: The nua_pay_account_id of this NuaPayAllOfCredentials.
        :rtype: str
        """
        return self._nua_pay_account_id

    @nua_pay_account_id.setter
    def nua_pay_account_id(self, nua_pay_account_id):
        """Sets the nua_pay_account_id of this NuaPayAllOfCredentials.

        NuaPay account ID.

        :param nua_pay_account_id: The nua_pay_account_id of this NuaPayAllOfCredentials.
        :type nua_pay_account_id: str
        """
        if nua_pay_account_id is None:
            raise ValueError("Invalid value for `nua_pay_account_id`, must not be `None`")

        self._nua_pay_account_id = nua_pay_account_id

    @property
    def nua_pay_api_key(self):
        """Gets the nua_pay_api_key of this NuaPayAllOfCredentials.

        NuaPay api key.

        :return: The nua_pay_api_key of this NuaPayAllOfCredentials.
        :rtype: str
        """
        return self._nua_pay_api_key

    @nua_pay_api_key.setter
    def nua_pay_api_key(self, nua_pay_api_key):
        """Sets the nua_pay_api_key of this NuaPayAllOfCredentials.

        NuaPay api key.

        :param nua_pay_api_key: The nua_pay_api_key of this NuaPayAllOfCredentials.
        :type nua_pay_api_key: str
        """
        if nua_pay_api_key is None:
            raise ValueError("Invalid value for `nua_pay_api_key`, must not be `None`")

        self._nua_pay_api_key = nua_pay_api_key

    @property
    def nua_pay_common_name(self):
        """Gets the nua_pay_common_name of this NuaPayAllOfCredentials.

        NuaPay common name.

        :return: The nua_pay_common_name of this NuaPayAllOfCredentials.
        :rtype: str
        """
        return self._nua_pay_common_name

    @nua_pay_common_name.setter
    def nua_pay_common_name(self, nua_pay_common_name):
        """Sets the nua_pay_common_name of this NuaPayAllOfCredentials.

        NuaPay common name.

        :param nua_pay_common_name: The nua_pay_common_name of this NuaPayAllOfCredentials.
        :type nua_pay_common_name: str
        """
        if nua_pay_common_name is None:
            raise ValueError("Invalid value for `nua_pay_common_name`, must not be `None`")

        self._nua_pay_common_name = nua_pay_common_name

    @property
    def nua_pay_originator_iban(self):
        """Gets the nua_pay_originator_iban of this NuaPayAllOfCredentials.

        NuaPay origiantor IBAN.

        :return: The nua_pay_originator_iban of this NuaPayAllOfCredentials.
        :rtype: str
        """
        return self._nua_pay_originator_iban

    @nua_pay_originator_iban.setter
    def nua_pay_originator_iban(self, nua_pay_originator_iban):
        """Sets the nua_pay_originator_iban of this NuaPayAllOfCredentials.

        NuaPay origiantor IBAN.

        :param nua_pay_originator_iban: The nua_pay_originator_iban of this NuaPayAllOfCredentials.
        :type nua_pay_originator_iban: str
        """
        if nua_pay_originator_iban is None:
            raise ValueError("Invalid value for `nua_pay_originator_iban`, must not be `None`")

        self._nua_pay_originator_iban = nua_pay_originator_iban

    @property
    def nua_pay_private_key(self):
        """Gets the nua_pay_private_key of this NuaPayAllOfCredentials.

        NuaPay private key.

        :return: The nua_pay_private_key of this NuaPayAllOfCredentials.
        :rtype: str
        """
        return self._nua_pay_private_key

    @nua_pay_private_key.setter
    def nua_pay_private_key(self, nua_pay_private_key):
        """Sets the nua_pay_private_key of this NuaPayAllOfCredentials.

        NuaPay private key.

        :param nua_pay_private_key: The nua_pay_private_key of this NuaPayAllOfCredentials.
        :type nua_pay_private_key: str
        """
        if nua_pay_private_key is None:
            raise ValueError("Invalid value for `nua_pay_private_key`, must not be `None`")

        self._nua_pay_private_key = nua_pay_private_key

    @property
    def nua_pay_serial_number(self):
        """Gets the nua_pay_serial_number of this NuaPayAllOfCredentials.

        NuaPay serial number.

        :return: The nua_pay_serial_number of this NuaPayAllOfCredentials.
        :rtype: str
        """
        return self._nua_pay_serial_number

    @nua_pay_serial_number.setter
    def nua_pay_serial_number(self, nua_pay_serial_number):
        """Sets the nua_pay_serial_number of this NuaPayAllOfCredentials.

        NuaPay serial number.

        :param nua_pay_serial_number: The nua_pay_serial_number of this NuaPayAllOfCredentials.
        :type nua_pay_serial_number: str
        """
        if nua_pay_serial_number is None:
            raise ValueError("Invalid value for `nua_pay_serial_number`, must not be `None`")

        self._nua_pay_serial_number = nua_pay_serial_number
