# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.invoice_transaction_allocation_links_inner import InvoiceTransactionAllocationLinksInner
from openapi_server import util


class InvoiceTransactionAllocation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, links: List[InvoiceTransactionAllocationLinksInner]=None, amount: float=None, currency: str=None, invoice_id: str=None, transaction_id: str=None):
        """InvoiceTransactionAllocation - a model defined in OpenAPI

        :param links: The links of this InvoiceTransactionAllocation.
        :param amount: The amount of this InvoiceTransactionAllocation.
        :param currency: The currency of this InvoiceTransactionAllocation.
        :param invoice_id: The invoice_id of this InvoiceTransactionAllocation.
        :param transaction_id: The transaction_id of this InvoiceTransactionAllocation.
        """
        self.openapi_types = {
            'links': List[InvoiceTransactionAllocationLinksInner],
            'amount': float,
            'currency': str,
            'invoice_id': str,
            'transaction_id': str
        }

        self.attribute_map = {
            'links': '_links',
            'amount': 'amount',
            'currency': 'currency',
            'invoice_id': 'invoiceId',
            'transaction_id': 'transactionId'
        }

        self._links = links
        self._amount = amount
        self._currency = currency
        self._invoice_id = invoice_id
        self._transaction_id = transaction_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'InvoiceTransactionAllocation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The InvoiceTransactionAllocation of this InvoiceTransactionAllocation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def links(self):
        """Gets the links of this InvoiceTransactionAllocation.

        The links related to resource.

        :return: The links of this InvoiceTransactionAllocation.
        :rtype: List[InvoiceTransactionAllocationLinksInner]
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this InvoiceTransactionAllocation.

        The links related to resource.

        :param links: The links of this InvoiceTransactionAllocation.
        :type links: List[InvoiceTransactionAllocationLinksInner]
        """
        if links is not None and len(links) > 2:
            raise ValueError("Invalid value for `links`, number of items must be less than or equal to `2`")
        if links is not None and len(links) < 2:
            raise ValueError("Invalid value for `links`, number of items must be greater than or equal to `2`")

        self._links = links

    @property
    def amount(self):
        """Gets the amount of this InvoiceTransactionAllocation.


        :return: The amount of this InvoiceTransactionAllocation.
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this InvoiceTransactionAllocation.


        :param amount: The amount of this InvoiceTransactionAllocation.
        :type amount: float
        """

        self._amount = amount

    @property
    def currency(self):
        """Gets the currency of this InvoiceTransactionAllocation.

        ISO 4217 alphabetic currency code.

        :return: The currency of this InvoiceTransactionAllocation.
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this InvoiceTransactionAllocation.

        ISO 4217 alphabetic currency code.

        :param currency: The currency of this InvoiceTransactionAllocation.
        :type currency: str
        """
        if currency is not None and len(currency) > 3:
            raise ValueError("Invalid value for `currency`, length must be less than or equal to `3`")
        if currency is not None and len(currency) < 3:
            raise ValueError("Invalid value for `currency`, length must be greater than or equal to `3`")

        self._currency = currency

    @property
    def invoice_id(self):
        """Gets the invoice_id of this InvoiceTransactionAllocation.

        The resource ID. Defaults to UUID v4.

        :return: The invoice_id of this InvoiceTransactionAllocation.
        :rtype: str
        """
        return self._invoice_id

    @invoice_id.setter
    def invoice_id(self, invoice_id):
        """Sets the invoice_id of this InvoiceTransactionAllocation.

        The resource ID. Defaults to UUID v4.

        :param invoice_id: The invoice_id of this InvoiceTransactionAllocation.
        :type invoice_id: str
        """
        if invoice_id is not None and len(invoice_id) > 50:
            raise ValueError("Invalid value for `invoice_id`, length must be less than or equal to `50`")

        self._invoice_id = invoice_id

    @property
    def transaction_id(self):
        """Gets the transaction_id of this InvoiceTransactionAllocation.

        The resource ID. Defaults to UUID v4.

        :return: The transaction_id of this InvoiceTransactionAllocation.
        :rtype: str
        """
        return self._transaction_id

    @transaction_id.setter
    def transaction_id(self, transaction_id):
        """Sets the transaction_id of this InvoiceTransactionAllocation.

        The resource ID. Defaults to UUID v4.

        :param transaction_id: The transaction_id of this InvoiceTransactionAllocation.
        :type transaction_id: str
        """
        if transaction_id is not None and len(transaction_id) > 50:
            raise ValueError("Invalid value for `transaction_id`, length must be less than or equal to `50`")

        self._transaction_id = transaction_id
