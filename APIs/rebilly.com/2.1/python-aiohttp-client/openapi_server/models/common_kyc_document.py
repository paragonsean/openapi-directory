# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.common_kyc_document_links_inner import CommonKycDocumentLinksInner
from openapi_server.models.kyc_document_rejection import KycDocumentRejection
from openapi_server.models.kyc_document_subtypes import KycDocumentSubtypes
from openapi_server.models.kyc_document_types import KycDocumentTypes
from openapi_server import util


class CommonKycDocument(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, links: List[CommonKycDocumentLinksInner]=None, created_time: datetime=None, document_subtype: KycDocumentSubtypes=None, document_type: KycDocumentTypes=None, file_id: str=None, file_ids: List[str]=None, id: str=None, processed_time: datetime=None, rejection_reason: KycDocumentRejection=None, request_id: str=None, status: str=None, updated_time: datetime=None):
        """CommonKycDocument - a model defined in OpenAPI

        :param links: The links of this CommonKycDocument.
        :param created_time: The created_time of this CommonKycDocument.
        :param document_subtype: The document_subtype of this CommonKycDocument.
        :param document_type: The document_type of this CommonKycDocument.
        :param file_id: The file_id of this CommonKycDocument.
        :param file_ids: The file_ids of this CommonKycDocument.
        :param id: The id of this CommonKycDocument.
        :param processed_time: The processed_time of this CommonKycDocument.
        :param rejection_reason: The rejection_reason of this CommonKycDocument.
        :param request_id: The request_id of this CommonKycDocument.
        :param status: The status of this CommonKycDocument.
        :param updated_time: The updated_time of this CommonKycDocument.
        """
        self.openapi_types = {
            'links': List[CommonKycDocumentLinksInner],
            'created_time': datetime,
            'document_subtype': KycDocumentSubtypes,
            'document_type': KycDocumentTypes,
            'file_id': str,
            'file_ids': List[str],
            'id': str,
            'processed_time': datetime,
            'rejection_reason': KycDocumentRejection,
            'request_id': str,
            'status': str,
            'updated_time': datetime
        }

        self.attribute_map = {
            'links': '_links',
            'created_time': 'createdTime',
            'document_subtype': 'documentSubtype',
            'document_type': 'documentType',
            'file_id': 'fileId',
            'file_ids': 'fileIds',
            'id': 'id',
            'processed_time': 'processedTime',
            'rejection_reason': 'rejectionReason',
            'request_id': 'requestId',
            'status': 'status',
            'updated_time': 'updatedTime'
        }

        self._links = links
        self._created_time = created_time
        self._document_subtype = document_subtype
        self._document_type = document_type
        self._file_id = file_id
        self._file_ids = file_ids
        self._id = id
        self._processed_time = processed_time
        self._rejection_reason = rejection_reason
        self._request_id = request_id
        self._status = status
        self._updated_time = updated_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CommonKycDocument':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CommonKycDocument of this CommonKycDocument.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def links(self):
        """Gets the links of this CommonKycDocument.

        The links related to resource.

        :return: The links of this CommonKycDocument.
        :rtype: List[CommonKycDocumentLinksInner]
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this CommonKycDocument.

        The links related to resource.

        :param links: The links of this CommonKycDocument.
        :type links: List[CommonKycDocumentLinksInner]
        """
        if links is not None and len(links) < 1:
            raise ValueError("Invalid value for `links`, number of items must be greater than or equal to `1`")

        self._links = links

    @property
    def created_time(self):
        """Gets the created_time of this CommonKycDocument.

        Creation date/time.

        :return: The created_time of this CommonKycDocument.
        :rtype: datetime
        """
        return self._created_time

    @created_time.setter
    def created_time(self, created_time):
        """Sets the created_time of this CommonKycDocument.

        Creation date/time.

        :param created_time: The created_time of this CommonKycDocument.
        :type created_time: datetime
        """

        self._created_time = created_time

    @property
    def document_subtype(self):
        """Gets the document_subtype of this CommonKycDocument.

        Document subtype submitted for validation.

        :return: The document_subtype of this CommonKycDocument.
        :rtype: KycDocumentSubtypes
        """
        return self._document_subtype

    @document_subtype.setter
    def document_subtype(self, document_subtype):
        """Sets the document_subtype of this CommonKycDocument.

        Document subtype submitted for validation.

        :param document_subtype: The document_subtype of this CommonKycDocument.
        :type document_subtype: KycDocumentSubtypes
        """

        self._document_subtype = document_subtype

    @property
    def document_type(self):
        """Gets the document_type of this CommonKycDocument.

        Document type submitted for validation, only identity-proof type is analyzed in an automated manner.

        :return: The document_type of this CommonKycDocument.
        :rtype: KycDocumentTypes
        """
        return self._document_type

    @document_type.setter
    def document_type(self, document_type):
        """Sets the document_type of this CommonKycDocument.

        Document type submitted for validation, only identity-proof type is analyzed in an automated manner.

        :param document_type: The document_type of this CommonKycDocument.
        :type document_type: KycDocumentTypes
        """
        if document_type is None:
            raise ValueError("Invalid value for `document_type`, must not be `None`")

        self._document_type = document_type

    @property
    def file_id(self):
        """Gets the file_id of this CommonKycDocument.

        Linked file object id.

        :return: The file_id of this CommonKycDocument.
        :rtype: str
        """
        return self._file_id

    @file_id.setter
    def file_id(self, file_id):
        """Sets the file_id of this CommonKycDocument.

        Linked file object id.

        :param file_id: The file_id of this CommonKycDocument.
        :type file_id: str
        """
        if file_id is not None and len(file_id) > 50:
            raise ValueError("Invalid value for `file_id`, length must be less than or equal to `50`")

        self._file_id = file_id

    @property
    def file_ids(self):
        """Gets the file_ids of this CommonKycDocument.

        Linked file object id's.

        :return: The file_ids of this CommonKycDocument.
        :rtype: List[str]
        """
        return self._file_ids

    @file_ids.setter
    def file_ids(self, file_ids):
        """Sets the file_ids of this CommonKycDocument.

        Linked file object id's.

        :param file_ids: The file_ids of this CommonKycDocument.
        :type file_ids: List[str]
        """

        self._file_ids = file_ids

    @property
    def id(self):
        """Gets the id of this CommonKycDocument.

        The resource ID. Defaults to UUID v4.

        :return: The id of this CommonKycDocument.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CommonKycDocument.

        The resource ID. Defaults to UUID v4.

        :param id: The id of this CommonKycDocument.
        :type id: str
        """
        if id is not None and len(id) > 50:
            raise ValueError("Invalid value for `id`, length must be less than or equal to `50`")

        self._id = id

    @property
    def processed_time(self):
        """Gets the processed_time of this CommonKycDocument.

        Processing date/time.

        :return: The processed_time of this CommonKycDocument.
        :rtype: datetime
        """
        return self._processed_time

    @processed_time.setter
    def processed_time(self, processed_time):
        """Sets the processed_time of this CommonKycDocument.

        Processing date/time.

        :param processed_time: The processed_time of this CommonKycDocument.
        :type processed_time: datetime
        """

        self._processed_time = processed_time

    @property
    def rejection_reason(self):
        """Gets the rejection_reason of this CommonKycDocument.


        :return: The rejection_reason of this CommonKycDocument.
        :rtype: KycDocumentRejection
        """
        return self._rejection_reason

    @rejection_reason.setter
    def rejection_reason(self, rejection_reason):
        """Sets the rejection_reason of this CommonKycDocument.


        :param rejection_reason: The rejection_reason of this CommonKycDocument.
        :type rejection_reason: KycDocumentRejection
        """

        self._rejection_reason = rejection_reason

    @property
    def request_id(self):
        """Gets the request_id of this CommonKycDocument.

        KYC request identifier string.

        :return: The request_id of this CommonKycDocument.
        :rtype: str
        """
        return self._request_id

    @request_id.setter
    def request_id(self, request_id):
        """Sets the request_id of this CommonKycDocument.

        KYC request identifier string.

        :param request_id: The request_id of this CommonKycDocument.
        :type request_id: str
        """
        if request_id is not None and len(request_id) > 50:
            raise ValueError("Invalid value for `request_id`, length must be less than or equal to `50`")

        self._request_id = request_id

    @property
    def status(self):
        """Gets the status of this CommonKycDocument.

        Status of the validation.

        :return: The status of this CommonKycDocument.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this CommonKycDocument.

        Status of the validation.

        :param status: The status of this CommonKycDocument.
        :type status: str
        """
        allowed_values = ["pending", "in-progress", "accepted", "rejected"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def updated_time(self):
        """Gets the updated_time of this CommonKycDocument.

        Latest update date/time.

        :return: The updated_time of this CommonKycDocument.
        :rtype: datetime
        """
        return self._updated_time

    @updated_time.setter
    def updated_time(self, updated_time):
        """Sets the updated_time of this CommonKycDocument.

        Latest update date/time.

        :param updated_time: The updated_time of this CommonKycDocument.
        :type updated_time: datetime
        """

        self._updated_time = updated_time
