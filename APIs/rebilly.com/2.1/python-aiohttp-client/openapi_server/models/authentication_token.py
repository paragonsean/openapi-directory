# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AuthenticationToken(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, credential_id: str=None, mode: str='password', otp_required: bool=None, token: str=None):
        """AuthenticationToken - a model defined in OpenAPI

        :param credential_id: The credential_id of this AuthenticationToken.
        :param mode: The mode of this AuthenticationToken.
        :param otp_required: The otp_required of this AuthenticationToken.
        :param token: The token of this AuthenticationToken.
        """
        self.openapi_types = {
            'credential_id': str,
            'mode': str,
            'otp_required': bool,
            'token': str
        }

        self.attribute_map = {
            'credential_id': 'credentialId',
            'mode': 'mode',
            'otp_required': 'otpRequired',
            'token': 'token'
        }

        self._credential_id = credential_id
        self._mode = mode
        self._otp_required = otp_required
        self._token = token

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AuthenticationToken':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AuthenticationToken of this AuthenticationToken.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def credential_id(self):
        """Gets the credential_id of this AuthenticationToken.

        The credential's ID.

        :return: The credential_id of this AuthenticationToken.
        :rtype: str
        """
        return self._credential_id

    @credential_id.setter
    def credential_id(self, credential_id):
        """Sets the credential_id of this AuthenticationToken.

        The credential's ID.

        :param credential_id: The credential_id of this AuthenticationToken.
        :type credential_id: str
        """
        if credential_id is not None and len(credential_id) > 50:
            raise ValueError("Invalid value for `credential_id`, length must be less than or equal to `50`")

        self._credential_id = credential_id

    @property
    def mode(self):
        """Gets the mode of this AuthenticationToken.

        The token's generation mode.

        :return: The mode of this AuthenticationToken.
        :rtype: str
        """
        return self._mode

    @mode.setter
    def mode(self, mode):
        """Sets the mode of this AuthenticationToken.

        The token's generation mode.

        :param mode: The mode of this AuthenticationToken.
        :type mode: str
        """
        allowed_values = ["password", "passwordless"]  # noqa: E501
        if mode not in allowed_values:
            raise ValueError(
                "Invalid value for `mode` ({0}), must be one of {1}"
                .format(mode, allowed_values)
            )

        self._mode = mode

    @property
    def otp_required(self):
        """Gets the otp_required of this AuthenticationToken.

        Should OTP be required to exchange this token.

        :return: The otp_required of this AuthenticationToken.
        :rtype: bool
        """
        return self._otp_required

    @otp_required.setter
    def otp_required(self, otp_required):
        """Sets the otp_required of this AuthenticationToken.

        Should OTP be required to exchange this token.

        :param otp_required: The otp_required of this AuthenticationToken.
        :type otp_required: bool
        """

        self._otp_required = otp_required

    @property
    def token(self):
        """Gets the token of this AuthenticationToken.

        The token identifier string.

        :return: The token of this AuthenticationToken.
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token):
        """Sets the token of this AuthenticationToken.

        The token identifier string.

        :param token: The token of this AuthenticationToken.
        :type token: str
        """

        self._token = token
