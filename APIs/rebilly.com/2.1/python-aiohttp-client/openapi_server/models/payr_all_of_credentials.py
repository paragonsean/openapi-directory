# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PayrAllOfCredentials(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, api_security_token: str=None, api_user_id: str=None, client_id: str=None, secret_word: str=None):
        """PayrAllOfCredentials - a model defined in OpenAPI

        :param api_security_token: The api_security_token of this PayrAllOfCredentials.
        :param api_user_id: The api_user_id of this PayrAllOfCredentials.
        :param client_id: The client_id of this PayrAllOfCredentials.
        :param secret_word: The secret_word of this PayrAllOfCredentials.
        """
        self.openapi_types = {
            'api_security_token': str,
            'api_user_id': str,
            'client_id': str,
            'secret_word': str
        }

        self.attribute_map = {
            'api_security_token': 'apiSecurityToken',
            'api_user_id': 'apiUserId',
            'client_id': 'clientId',
            'secret_word': 'secretWord'
        }

        self._api_security_token = api_security_token
        self._api_user_id = api_user_id
        self._client_id = client_id
        self._secret_word = secret_word

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PayrAllOfCredentials':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Payr_allOf_credentials of this PayrAllOfCredentials.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def api_security_token(self):
        """Gets the api_security_token of this PayrAllOfCredentials.

        Hash of the password for the Alliance API (transaction reporting).

        :return: The api_security_token of this PayrAllOfCredentials.
        :rtype: str
        """
        return self._api_security_token

    @api_security_token.setter
    def api_security_token(self, api_security_token):
        """Sets the api_security_token of this PayrAllOfCredentials.

        Hash of the password for the Alliance API (transaction reporting).

        :param api_security_token: The api_security_token of this PayrAllOfCredentials.
        :type api_security_token: str
        """

        self._api_security_token = api_security_token

    @property
    def api_user_id(self):
        """Gets the api_user_id of this PayrAllOfCredentials.

        Username for the Alliance API (transaction reporting).

        :return: The api_user_id of this PayrAllOfCredentials.
        :rtype: str
        """
        return self._api_user_id

    @api_user_id.setter
    def api_user_id(self, api_user_id):
        """Sets the api_user_id of this PayrAllOfCredentials.

        Username for the Alliance API (transaction reporting).

        :param api_user_id: The api_user_id of this PayrAllOfCredentials.
        :type api_user_id: str
        """

        self._api_user_id = api_user_id

    @property
    def client_id(self):
        """Gets the client_id of this PayrAllOfCredentials.

        Payr Gateway client ID.

        :return: The client_id of this PayrAllOfCredentials.
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this PayrAllOfCredentials.

        Payr Gateway client ID.

        :param client_id: The client_id of this PayrAllOfCredentials.
        :type client_id: str
        """
        if client_id is None:
            raise ValueError("Invalid value for `client_id`, must not be `None`")

        self._client_id = client_id

    @property
    def secret_word(self):
        """Gets the secret_word of this PayrAllOfCredentials.

        Payr Gateway secret word.

        :return: The secret_word of this PayrAllOfCredentials.
        :rtype: str
        """
        return self._secret_word

    @secret_word.setter
    def secret_word(self, secret_word):
        """Sets the secret_word of this PayrAllOfCredentials.

        Payr Gateway secret word.

        :param secret_word: The secret_word of this PayrAllOfCredentials.
        :type secret_word: str
        """
        if secret_word is None:
            raise ValueError("Invalid value for `secret_word`, must not be `None`")

        self._secret_word = secret_word
