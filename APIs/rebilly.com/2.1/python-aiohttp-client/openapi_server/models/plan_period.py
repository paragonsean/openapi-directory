# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PlanPeriod(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, length: int=None, unit: str=None):
        """PlanPeriod - a model defined in OpenAPI

        :param length: The length of this PlanPeriod.
        :param unit: The unit of this PlanPeriod.
        """
        self.openapi_types = {
            'length': int,
            'unit': str
        }

        self.attribute_map = {
            'length': 'length',
            'unit': 'unit'
        }

        self._length = length
        self._unit = unit

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PlanPeriod':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PlanPeriod of this PlanPeriod.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def length(self):
        """Gets the length of this PlanPeriod.

        The length of time.

        :return: The length of this PlanPeriod.
        :rtype: int
        """
        return self._length

    @length.setter
    def length(self, length):
        """Sets the length of this PlanPeriod.

        The length of time.

        :param length: The length of this PlanPeriod.
        :type length: int
        """
        if length is None:
            raise ValueError("Invalid value for `length`, must not be `None`")

        self._length = length

    @property
    def unit(self):
        """Gets the unit of this PlanPeriod.

        The unit of time.

        :return: The unit of this PlanPeriod.
        :rtype: str
        """
        return self._unit

    @unit.setter
    def unit(self, unit):
        """Sets the unit of this PlanPeriod.

        The unit of time.

        :param unit: The unit of this PlanPeriod.
        :type unit: str
        """
        allowed_values = ["day", "week", "month", "year"]  # noqa: E501
        if unit not in allowed_values:
            raise ValueError(
                "Invalid value for `unit` ({0}), must be one of {1}"
                .format(unit, allowed_values)
            )

        self._unit = unit
