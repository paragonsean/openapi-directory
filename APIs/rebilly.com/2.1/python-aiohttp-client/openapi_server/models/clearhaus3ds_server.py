# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.clearhaus3ds_servers import Clearhaus3dsServers
from openapi_server.models.three_d_secure_server_name import ThreeDSecureServerName
from openapi_server import util


class Clearhaus3dsServer(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: ThreeDSecureServerName=None, acquirer_bin: str=None, api_key: str=None, merchant_id: str=None):
        """Clearhaus3dsServer - a model defined in OpenAPI

        :param name: The name of this Clearhaus3dsServer.
        :param acquirer_bin: The acquirer_bin of this Clearhaus3dsServer.
        :param api_key: The api_key of this Clearhaus3dsServer.
        :param merchant_id: The merchant_id of this Clearhaus3dsServer.
        """
        self.openapi_types = {
            'name': ThreeDSecureServerName,
            'acquirer_bin': str,
            'api_key': str,
            'merchant_id': str
        }

        self.attribute_map = {
            'name': 'name',
            'acquirer_bin': 'acquirerBin',
            'api_key': 'apiKey',
            'merchant_id': 'merchantId'
        }

        self._name = name
        self._acquirer_bin = acquirer_bin
        self._api_key = api_key
        self._merchant_id = merchant_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Clearhaus3dsServer':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Clearhaus3dsServer of this Clearhaus3dsServer.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this Clearhaus3dsServer.


        :return: The name of this Clearhaus3dsServer.
        :rtype: ThreeDSecureServerName
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Clearhaus3dsServer.


        :param name: The name of this Clearhaus3dsServer.
        :type name: ThreeDSecureServerName
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def acquirer_bin(self):
        """Gets the acquirer_bin of this Clearhaus3dsServer.

        Acquiring institution identification code.

        :return: The acquirer_bin of this Clearhaus3dsServer.
        :rtype: str
        """
        return self._acquirer_bin

    @acquirer_bin.setter
    def acquirer_bin(self, acquirer_bin):
        """Sets the acquirer_bin of this Clearhaus3dsServer.

        Acquiring institution identification code.

        :param acquirer_bin: The acquirer_bin of this Clearhaus3dsServer.
        :type acquirer_bin: str
        """
        if acquirer_bin is None:
            raise ValueError("Invalid value for `acquirer_bin`, must not be `None`")

        self._acquirer_bin = acquirer_bin

    @property
    def api_key(self):
        """Gets the api_key of this Clearhaus3dsServer.

        3DS Server Api key.

        :return: The api_key of this Clearhaus3dsServer.
        :rtype: str
        """
        return self._api_key

    @api_key.setter
    def api_key(self, api_key):
        """Sets the api_key of this Clearhaus3dsServer.

        3DS Server Api key.

        :param api_key: The api_key of this Clearhaus3dsServer.
        :type api_key: str
        """
        if api_key is None:
            raise ValueError("Invalid value for `api_key`, must not be `None`")

        self._api_key = api_key

    @property
    def merchant_id(self):
        """Gets the merchant_id of this Clearhaus3dsServer.

        Merchant account ID or Card Acceptor ID provided by the acquiring bank.

        :return: The merchant_id of this Clearhaus3dsServer.
        :rtype: str
        """
        return self._merchant_id

    @merchant_id.setter
    def merchant_id(self, merchant_id):
        """Sets the merchant_id of this Clearhaus3dsServer.

        Merchant account ID or Card Acceptor ID provided by the acquiring bank.

        :param merchant_id: The merchant_id of this Clearhaus3dsServer.
        :type merchant_id: str
        """
        if merchant_id is None:
            raise ValueError("Invalid value for `merchant_id`, must not be `None`")

        self._merchant_id = merchant_id
