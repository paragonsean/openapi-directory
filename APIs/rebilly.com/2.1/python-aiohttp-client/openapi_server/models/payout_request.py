# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.contact_object import ContactObject
from openapi_server.models.payment_instruction import PaymentInstruction
from openapi_server.models.payment_instrument import PaymentInstrument
from openapi_server.models.risk_metadata import RiskMetadata
import re
from openapi_server import util


class PayoutRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, amount: float=None, billing_address: ContactObject=None, currency: str=None, custom_fields: object=None, customer_id: str=None, description: str=None, gateway_account_id: str=None, invoice_ids: List[str]=None, is_merchant_initiated: bool=False, is_processed_outside: bool=False, notification_url: str=None, payment_instruction: PaymentInstruction=None, payment_instrument: PaymentInstrument=None, processed_time: datetime=None, redirect_url: str=None, request_id: str=None, risk_metadata: RiskMetadata=None, website_id: str=None):
        """PayoutRequest - a model defined in OpenAPI

        :param amount: The amount of this PayoutRequest.
        :param billing_address: The billing_address of this PayoutRequest.
        :param currency: The currency of this PayoutRequest.
        :param custom_fields: The custom_fields of this PayoutRequest.
        :param customer_id: The customer_id of this PayoutRequest.
        :param description: The description of this PayoutRequest.
        :param gateway_account_id: The gateway_account_id of this PayoutRequest.
        :param invoice_ids: The invoice_ids of this PayoutRequest.
        :param is_merchant_initiated: The is_merchant_initiated of this PayoutRequest.
        :param is_processed_outside: The is_processed_outside of this PayoutRequest.
        :param notification_url: The notification_url of this PayoutRequest.
        :param payment_instruction: The payment_instruction of this PayoutRequest.
        :param payment_instrument: The payment_instrument of this PayoutRequest.
        :param processed_time: The processed_time of this PayoutRequest.
        :param redirect_url: The redirect_url of this PayoutRequest.
        :param request_id: The request_id of this PayoutRequest.
        :param risk_metadata: The risk_metadata of this PayoutRequest.
        :param website_id: The website_id of this PayoutRequest.
        """
        self.openapi_types = {
            'amount': float,
            'billing_address': ContactObject,
            'currency': str,
            'custom_fields': object,
            'customer_id': str,
            'description': str,
            'gateway_account_id': str,
            'invoice_ids': List[str],
            'is_merchant_initiated': bool,
            'is_processed_outside': bool,
            'notification_url': str,
            'payment_instruction': PaymentInstruction,
            'payment_instrument': PaymentInstrument,
            'processed_time': datetime,
            'redirect_url': str,
            'request_id': str,
            'risk_metadata': RiskMetadata,
            'website_id': str
        }

        self.attribute_map = {
            'amount': 'amount',
            'billing_address': 'billingAddress',
            'currency': 'currency',
            'custom_fields': 'customFields',
            'customer_id': 'customerId',
            'description': 'description',
            'gateway_account_id': 'gatewayAccountId',
            'invoice_ids': 'invoiceIds',
            'is_merchant_initiated': 'isMerchantInitiated',
            'is_processed_outside': 'isProcessedOutside',
            'notification_url': 'notificationUrl',
            'payment_instruction': 'paymentInstruction',
            'payment_instrument': 'paymentInstrument',
            'processed_time': 'processedTime',
            'redirect_url': 'redirectUrl',
            'request_id': 'requestId',
            'risk_metadata': 'riskMetadata',
            'website_id': 'websiteId'
        }

        self._amount = amount
        self._billing_address = billing_address
        self._currency = currency
        self._custom_fields = custom_fields
        self._customer_id = customer_id
        self._description = description
        self._gateway_account_id = gateway_account_id
        self._invoice_ids = invoice_ids
        self._is_merchant_initiated = is_merchant_initiated
        self._is_processed_outside = is_processed_outside
        self._notification_url = notification_url
        self._payment_instruction = payment_instruction
        self._payment_instrument = payment_instrument
        self._processed_time = processed_time
        self._redirect_url = redirect_url
        self._request_id = request_id
        self._risk_metadata = risk_metadata
        self._website_id = website_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PayoutRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PayoutRequest of this PayoutRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def amount(self):
        """Gets the amount of this PayoutRequest.

        The transaction amount.

        :return: The amount of this PayoutRequest.
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this PayoutRequest.

        The transaction amount.

        :param amount: The amount of this PayoutRequest.
        :type amount: float
        """
        if amount is None:
            raise ValueError("Invalid value for `amount`, must not be `None`")

        self._amount = amount

    @property
    def billing_address(self):
        """Gets the billing_address of this PayoutRequest.

        Billing address. If not supplied, we use the billing address associated with the payment instrument, and then customer.

        :return: The billing_address of this PayoutRequest.
        :rtype: ContactObject
        """
        return self._billing_address

    @billing_address.setter
    def billing_address(self, billing_address):
        """Sets the billing_address of this PayoutRequest.

        Billing address. If not supplied, we use the billing address associated with the payment instrument, and then customer.

        :param billing_address: The billing_address of this PayoutRequest.
        :type billing_address: ContactObject
        """

        self._billing_address = billing_address

    @property
    def currency(self):
        """Gets the currency of this PayoutRequest.

        ISO 4217 alphabetic currency code.

        :return: The currency of this PayoutRequest.
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this PayoutRequest.

        ISO 4217 alphabetic currency code.

        :param currency: The currency of this PayoutRequest.
        :type currency: str
        """
        if currency is None:
            raise ValueError("Invalid value for `currency`, must not be `None`")
        if currency is not None and len(currency) > 3:
            raise ValueError("Invalid value for `currency`, length must be less than or equal to `3`")
        if currency is not None and len(currency) < 3:
            raise ValueError("Invalid value for `currency`, length must be greater than or equal to `3`")

        self._currency = currency

    @property
    def custom_fields(self):
        """Gets the custom_fields of this PayoutRequest.

        Custom Fields list as a map `{\"custom field name\": \"custom field value\", ...}`. The format must follow the saved format (see Custom Fields section for the formats). 

        :return: The custom_fields of this PayoutRequest.
        :rtype: object
        """
        return self._custom_fields

    @custom_fields.setter
    def custom_fields(self, custom_fields):
        """Sets the custom_fields of this PayoutRequest.

        Custom Fields list as a map `{\"custom field name\": \"custom field value\", ...}`. The format must follow the saved format (see Custom Fields section for the formats). 

        :param custom_fields: The custom_fields of this PayoutRequest.
        :type custom_fields: object
        """

        self._custom_fields = custom_fields

    @property
    def customer_id(self):
        """Gets the customer_id of this PayoutRequest.

        The customer identifier string.

        :return: The customer_id of this PayoutRequest.
        :rtype: str
        """
        return self._customer_id

    @customer_id.setter
    def customer_id(self, customer_id):
        """Sets the customer_id of this PayoutRequest.

        The customer identifier string.

        :param customer_id: The customer_id of this PayoutRequest.
        :type customer_id: str
        """
        if customer_id is None:
            raise ValueError("Invalid value for `customer_id`, must not be `None`")
        if customer_id is not None and len(customer_id) > 50:
            raise ValueError("Invalid value for `customer_id`, length must be less than or equal to `50`")

        self._customer_id = customer_id

    @property
    def description(self):
        """Gets the description of this PayoutRequest.

        The payment description.

        :return: The description of this PayoutRequest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this PayoutRequest.

        The payment description.

        :param description: The description of this PayoutRequest.
        :type description: str
        """
        if description is not None and len(description) > 255:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `255`")

        self._description = description

    @property
    def gateway_account_id(self):
        """Gets the gateway_account_id of this PayoutRequest.

        Rebilly will select the appropriate payment gateway account for the transaction based on the properties of the transaction and the `gateway-account-requested` event rules configurations. If you wish to prevent Rebilly from making the gateway account selection, you may supply a gateway account id here, and it will be used instead. Only use this field if you intend to override the settings.

        :return: The gateway_account_id of this PayoutRequest.
        :rtype: str
        """
        return self._gateway_account_id

    @gateway_account_id.setter
    def gateway_account_id(self, gateway_account_id):
        """Sets the gateway_account_id of this PayoutRequest.

        Rebilly will select the appropriate payment gateway account for the transaction based on the properties of the transaction and the `gateway-account-requested` event rules configurations. If you wish to prevent Rebilly from making the gateway account selection, you may supply a gateway account id here, and it will be used instead. Only use this field if you intend to override the settings.

        :param gateway_account_id: The gateway_account_id of this PayoutRequest.
        :type gateway_account_id: str
        """
        if gateway_account_id is not None and len(gateway_account_id) > 50:
            raise ValueError("Invalid value for `gateway_account_id`, length must be less than or equal to `50`")

        self._gateway_account_id = gateway_account_id

    @property
    def invoice_ids(self):
        """Gets the invoice_ids of this PayoutRequest.

        The array of invoice identifiers.

        :return: The invoice_ids of this PayoutRequest.
        :rtype: List[str]
        """
        return self._invoice_ids

    @invoice_ids.setter
    def invoice_ids(self, invoice_ids):
        """Sets the invoice_ids of this PayoutRequest.

        The array of invoice identifiers.

        :param invoice_ids: The invoice_ids of this PayoutRequest.
        :type invoice_ids: List[str]
        """

        self._invoice_ids = invoice_ids

    @property
    def is_merchant_initiated(self):
        """Gets the is_merchant_initiated of this PayoutRequest.

        True if the transaction was initiated by the merchant.

        :return: The is_merchant_initiated of this PayoutRequest.
        :rtype: bool
        """
        return self._is_merchant_initiated

    @is_merchant_initiated.setter
    def is_merchant_initiated(self, is_merchant_initiated):
        """Sets the is_merchant_initiated of this PayoutRequest.

        True if the transaction was initiated by the merchant.

        :param is_merchant_initiated: The is_merchant_initiated of this PayoutRequest.
        :type is_merchant_initiated: bool
        """

        self._is_merchant_initiated = is_merchant_initiated

    @property
    def is_processed_outside(self):
        """Gets the is_processed_outside of this PayoutRequest.

        True if transaction was processed outside Rebilly.

        :return: The is_processed_outside of this PayoutRequest.
        :rtype: bool
        """
        return self._is_processed_outside

    @is_processed_outside.setter
    def is_processed_outside(self, is_processed_outside):
        """Sets the is_processed_outside of this PayoutRequest.

        True if transaction was processed outside Rebilly.

        :param is_processed_outside: The is_processed_outside of this PayoutRequest.
        :type is_processed_outside: bool
        """

        self._is_processed_outside = is_processed_outside

    @property
    def notification_url(self):
        """Gets the notification_url of this PayoutRequest.

        The URL where a server-to-server notification request type `POST` with a transaction payload will be sent when the transaction's result is finalized. Do not trust the notification; follow with a `GET` request to confirm the result of the transaction. Please respond with a `2xx` HTTP status code, or we will reattempt the request again. You may use `{id}` or `{result}` as placeholders in the URL and we will replace them with the transaction's id and result accordingly. 

        :return: The notification_url of this PayoutRequest.
        :rtype: str
        """
        return self._notification_url

    @notification_url.setter
    def notification_url(self, notification_url):
        """Sets the notification_url of this PayoutRequest.

        The URL where a server-to-server notification request type `POST` with a transaction payload will be sent when the transaction's result is finalized. Do not trust the notification; follow with a `GET` request to confirm the result of the transaction. Please respond with a `2xx` HTTP status code, or we will reattempt the request again. You may use `{id}` or `{result}` as placeholders in the URL and we will replace them with the transaction's id and result accordingly. 

        :param notification_url: The notification_url of this PayoutRequest.
        :type notification_url: str
        """

        self._notification_url = notification_url

    @property
    def payment_instruction(self):
        """Gets the payment_instruction of this PayoutRequest.

        Payment instruction. If not supplied, customer's default payment instrument will be used.

        :return: The payment_instruction of this PayoutRequest.
        :rtype: PaymentInstruction
        """
        return self._payment_instruction

    @payment_instruction.setter
    def payment_instruction(self, payment_instruction):
        """Sets the payment_instruction of this PayoutRequest.

        Payment instruction. If not supplied, customer's default payment instrument will be used.

        :param payment_instruction: The payment_instruction of this PayoutRequest.
        :type payment_instruction: PaymentInstruction
        """

        self._payment_instruction = payment_instruction

    @property
    def payment_instrument(self):
        """Gets the payment_instrument of this PayoutRequest.


        :return: The payment_instrument of this PayoutRequest.
        :rtype: PaymentInstrument
        """
        return self._payment_instrument

    @payment_instrument.setter
    def payment_instrument(self, payment_instrument):
        """Sets the payment_instrument of this PayoutRequest.


        :param payment_instrument: The payment_instrument of this PayoutRequest.
        :type payment_instrument: PaymentInstrument
        """

        self._payment_instrument = payment_instrument

    @property
    def processed_time(self):
        """Gets the processed_time of this PayoutRequest.

        The time the transaction was processed. Can be specified only if transaction was processed outside Rebilly.

        :return: The processed_time of this PayoutRequest.
        :rtype: datetime
        """
        return self._processed_time

    @processed_time.setter
    def processed_time(self, processed_time):
        """Sets the processed_time of this PayoutRequest.

        The time the transaction was processed. Can be specified only if transaction was processed outside Rebilly.

        :param processed_time: The processed_time of this PayoutRequest.
        :type processed_time: datetime
        """

        self._processed_time = processed_time

    @property
    def redirect_url(self):
        """Gets the redirect_url of this PayoutRequest.

        The URL to redirect the end-user when an offsite transaction is completed. Defaults to the website's configured URL. You may use `{id}` or `{result}` as placeholders in the URL and we will replace them with the transaction's id and result accordingly.

        :return: The redirect_url of this PayoutRequest.
        :rtype: str
        """
        return self._redirect_url

    @redirect_url.setter
    def redirect_url(self, redirect_url):
        """Sets the redirect_url of this PayoutRequest.

        The URL to redirect the end-user when an offsite transaction is completed. Defaults to the website's configured URL. You may use `{id}` or `{result}` as placeholders in the URL and we will replace them with the transaction's id and result accordingly.

        :param redirect_url: The redirect_url of this PayoutRequest.
        :type redirect_url: str
        """

        self._redirect_url = redirect_url

    @property
    def request_id(self):
        """Gets the request_id of this PayoutRequest.

        The request id is **recommended**. It prevents duplicate transaction requests within a short period of time. If a duplicate request is sent with the same `requestId` it will be ignored to prevent double-billing anyone.  It must be unique within a 24-hour period.  We recommend generating a UUID v4 as its value.

        :return: The request_id of this PayoutRequest.
        :rtype: str
        """
        return self._request_id

    @request_id.setter
    def request_id(self, request_id):
        """Sets the request_id of this PayoutRequest.

        The request id is **recommended**. It prevents duplicate transaction requests within a short period of time. If a duplicate request is sent with the same `requestId` it will be ignored to prevent double-billing anyone.  It must be unique within a 24-hour period.  We recommend generating a UUID v4 as its value.

        :param request_id: The request_id of this PayoutRequest.
        :type request_id: str
        """
        if request_id is not None and len(request_id) > 50:
            raise ValueError("Invalid value for `request_id`, length must be less than or equal to `50`")
        if request_id is not None and not re.search(r'^[\-\w]+$', request_id):
            raise ValueError("Invalid value for `request_id`, must be a follow pattern or equal to `/^[\-\w]+$/`")

        self._request_id = request_id

    @property
    def risk_metadata(self):
        """Gets the risk_metadata of this PayoutRequest.


        :return: The risk_metadata of this PayoutRequest.
        :rtype: RiskMetadata
        """
        return self._risk_metadata

    @risk_metadata.setter
    def risk_metadata(self, risk_metadata):
        """Sets the risk_metadata of this PayoutRequest.


        :param risk_metadata: The risk_metadata of this PayoutRequest.
        :type risk_metadata: RiskMetadata
        """

        self._risk_metadata = risk_metadata

    @property
    def website_id(self):
        """Gets the website_id of this PayoutRequest.

        The website identifier string.

        :return: The website_id of this PayoutRequest.
        :rtype: str
        """
        return self._website_id

    @website_id.setter
    def website_id(self, website_id):
        """Sets the website_id of this PayoutRequest.

        The website identifier string.

        :param website_id: The website_id of this PayoutRequest.
        :type website_id: str
        """
        if website_id is None:
            raise ValueError("Invalid value for `website_id`, must not be `None`")
        if website_id is not None and len(website_id) > 50:
            raise ValueError("Invalid value for `website_id`, length must be less than or equal to `50`")

        self._website_id = website_id
