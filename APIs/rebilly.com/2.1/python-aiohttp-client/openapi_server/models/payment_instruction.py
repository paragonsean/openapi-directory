# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.payment_instrument3 import PaymentInstrument3
from openapi_server.models.payment_method import PaymentMethod
from openapi_server.models.payment_methods import PaymentMethods
from openapi_server.models.payment_token import PaymentToken
from openapi_server import util


class PaymentInstruction(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, token: str=None, payment_instrument_id: str=None, methods: List[PaymentMethod]=None):
        """PaymentInstruction - a model defined in OpenAPI

        :param token: The token of this PaymentInstruction.
        :param payment_instrument_id: The payment_instrument_id of this PaymentInstruction.
        :param methods: The methods of this PaymentInstruction.
        """
        self.openapi_types = {
            'token': str,
            'payment_instrument_id': str,
            'methods': List[PaymentMethod]
        }

        self.attribute_map = {
            'token': 'token',
            'payment_instrument_id': 'paymentInstrumentId',
            'methods': 'methods'
        }

        self._token = token
        self._payment_instrument_id = payment_instrument_id
        self._methods = methods

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PaymentInstruction':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PaymentInstruction of this PaymentInstruction.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def token(self):
        """Gets the token of this PaymentInstruction.

        Payment Token ID.

        :return: The token of this PaymentInstruction.
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token):
        """Sets the token of this PaymentInstruction.

        Payment Token ID.

        :param token: The token of this PaymentInstruction.
        :type token: str
        """
        if token is None:
            raise ValueError("Invalid value for `token`, must not be `None`")

        self._token = token

    @property
    def payment_instrument_id(self):
        """Gets the payment_instrument_id of this PaymentInstruction.

        The Payment Instrument identifier string.

        :return: The payment_instrument_id of this PaymentInstruction.
        :rtype: str
        """
        return self._payment_instrument_id

    @payment_instrument_id.setter
    def payment_instrument_id(self, payment_instrument_id):
        """Sets the payment_instrument_id of this PaymentInstruction.

        The Payment Instrument identifier string.

        :param payment_instrument_id: The payment_instrument_id of this PaymentInstruction.
        :type payment_instrument_id: str
        """
        if payment_instrument_id is None:
            raise ValueError("Invalid value for `payment_instrument_id`, must not be `None`")
        if payment_instrument_id is not None and len(payment_instrument_id) > 50:
            raise ValueError("Invalid value for `payment_instrument_id`, length must be less than or equal to `50`")

        self._payment_instrument_id = payment_instrument_id

    @property
    def methods(self):
        """Gets the methods of this PaymentInstruction.

        The list of available payment methods. Only payment methods with at least one active gateway account are allowed.  If not specified all available payment methods will be displayed.  Customer can choose any of those as well as the payment instrument for them. Additional steps will occur via a redirect to `approvalUrl`. 

        :return: The methods of this PaymentInstruction.
        :rtype: List[PaymentMethod]
        """
        return self._methods

    @methods.setter
    def methods(self, methods):
        """Sets the methods of this PaymentInstruction.

        The list of available payment methods. Only payment methods with at least one active gateway account are allowed.  If not specified all available payment methods will be displayed.  Customer can choose any of those as well as the payment instrument for them. Additional steps will occur via a redirect to `approvalUrl`. 

        :param methods: The methods of this PaymentInstruction.
        :type methods: List[PaymentMethod]
        """

        self._methods = methods
