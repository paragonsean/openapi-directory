# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.coupon_restriction import CouponRestriction
from openapi_server.models.redemption_restriction import RedemptionRestriction
from openapi_server import util


class RestrictToPlans(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, type: str=None, plan_ids: List[str]=None):
        """RestrictToPlans - a model defined in OpenAPI

        :param type: The type of this RestrictToPlans.
        :param plan_ids: The plan_ids of this RestrictToPlans.
        """
        self.openapi_types = {
            'type': str,
            'plan_ids': List[str]
        }

        self.attribute_map = {
            'type': 'type',
            'plan_ids': 'planIds'
        }

        self._type = type
        self._plan_ids = plan_ids

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RestrictToPlans':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The restrict-to-plans of this RestrictToPlans.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def type(self):
        """Gets the type of this RestrictToPlans.

        Coupon's restriction type.

        :return: The type of this RestrictToPlans.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this RestrictToPlans.

        Coupon's restriction type.

        :param type: The type of this RestrictToPlans.
        :type type: str
        """
        allowed_values = ["discounts-per-redemption", "minimum-order-amount", "redemptions-per-customer", "restrict-to-invoices", "restrict-to-plans", "restrict-to-subscriptions", "restrict-to-products", "total-redemptions", "paid-by-time"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def plan_ids(self):
        """Gets the plan_ids of this RestrictToPlans.

        Plan IDs coupon can be applied to.

        :return: The plan_ids of this RestrictToPlans.
        :rtype: List[str]
        """
        return self._plan_ids

    @plan_ids.setter
    def plan_ids(self, plan_ids):
        """Sets the plan_ids of this RestrictToPlans.

        Plan IDs coupon can be applied to.

        :param plan_ids: The plan_ids of this RestrictToPlans.
        :type plan_ids: List[str]
        """
        if plan_ids is None:
            raise ValueError("Invalid value for `plan_ids`, must not be `None`")

        self._plan_ids = plan_ids
