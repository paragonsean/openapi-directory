# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SkrillAllOfCredentials(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_email: str=None, mqi_password: str=None, secret_word: str=None):
        """SkrillAllOfCredentials - a model defined in OpenAPI

        :param account_email: The account_email of this SkrillAllOfCredentials.
        :param mqi_password: The mqi_password of this SkrillAllOfCredentials.
        :param secret_word: The secret_word of this SkrillAllOfCredentials.
        """
        self.openapi_types = {
            'account_email': str,
            'mqi_password': str,
            'secret_word': str
        }

        self.attribute_map = {
            'account_email': 'accountEmail',
            'mqi_password': 'mqiPassword',
            'secret_word': 'secretWord'
        }

        self._account_email = account_email
        self._mqi_password = mqi_password
        self._secret_word = secret_word

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SkrillAllOfCredentials':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Skrill_allOf_credentials of this SkrillAllOfCredentials.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_email(self):
        """Gets the account_email of this SkrillAllOfCredentials.

        Email address of your Skrill merchant account.

        :return: The account_email of this SkrillAllOfCredentials.
        :rtype: str
        """
        return self._account_email

    @account_email.setter
    def account_email(self, account_email):
        """Sets the account_email of this SkrillAllOfCredentials.

        Email address of your Skrill merchant account.

        :param account_email: The account_email of this SkrillAllOfCredentials.
        :type account_email: str
        """
        if account_email is None:
            raise ValueError("Invalid value for `account_email`, must not be `None`")

        self._account_email = account_email

    @property
    def mqi_password(self):
        """Gets the mqi_password of this SkrillAllOfCredentials.

        Password used during MQI/API requests.

        :return: The mqi_password of this SkrillAllOfCredentials.
        :rtype: str
        """
        return self._mqi_password

    @mqi_password.setter
    def mqi_password(self, mqi_password):
        """Sets the mqi_password of this SkrillAllOfCredentials.

        Password used during MQI/API requests.

        :param mqi_password: The mqi_password of this SkrillAllOfCredentials.
        :type mqi_password: str
        """

        self._mqi_password = mqi_password

    @property
    def secret_word(self):
        """Gets the secret_word of this SkrillAllOfCredentials.

        Secret word used for MD5 signature verifications.

        :return: The secret_word of this SkrillAllOfCredentials.
        :rtype: str
        """
        return self._secret_word

    @secret_word.setter
    def secret_word(self, secret_word):
        """Sets the secret_word of this SkrillAllOfCredentials.

        Secret word used for MD5 signature verifications.

        :param secret_word: The secret_word of this SkrillAllOfCredentials.
        :type secret_word: str
        """
        if secret_word is None:
            raise ValueError("Invalid value for `secret_word`, must not be `None`")

        self._secret_word = secret_word
