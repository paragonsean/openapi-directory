# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SubscriptionCancellationState(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cancel_category: str=None, cancel_description: str=None, canceled_by: str=None, canceled_time: datetime=None):
        """SubscriptionCancellationState - a model defined in OpenAPI

        :param cancel_category: The cancel_category of this SubscriptionCancellationState.
        :param cancel_description: The cancel_description of this SubscriptionCancellationState.
        :param canceled_by: The canceled_by of this SubscriptionCancellationState.
        :param canceled_time: The canceled_time of this SubscriptionCancellationState.
        """
        self.openapi_types = {
            'cancel_category': str,
            'cancel_description': str,
            'canceled_by': str,
            'canceled_time': datetime
        }

        self.attribute_map = {
            'cancel_category': 'cancelCategory',
            'cancel_description': 'cancelDescription',
            'canceled_by': 'canceledBy',
            'canceled_time': 'canceledTime'
        }

        self._cancel_category = cancel_category
        self._cancel_description = cancel_description
        self._canceled_by = canceled_by
        self._canceled_time = canceled_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SubscriptionCancellationState':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SubscriptionCancellationState of this SubscriptionCancellationState.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cancel_category(self):
        """Gets the cancel_category of this SubscriptionCancellationState.

        Cancel category.

        :return: The cancel_category of this SubscriptionCancellationState.
        :rtype: str
        """
        return self._cancel_category

    @cancel_category.setter
    def cancel_category(self, cancel_category):
        """Sets the cancel_category of this SubscriptionCancellationState.

        Cancel category.

        :param cancel_category: The cancel_category of this SubscriptionCancellationState.
        :type cancel_category: str
        """
        allowed_values = ["billing-failure", "did-not-use", "did-not-want", "missing-features", "bugs-or-problems", "do-not-remember", "risk-warning", "contract-expired", "too-expensive", "never-started", "switched-plan", "other"]  # noqa: E501
        if cancel_category not in allowed_values:
            raise ValueError(
                "Invalid value for `cancel_category` ({0}), must be one of {1}"
                .format(cancel_category, allowed_values)
            )

        self._cancel_category = cancel_category

    @property
    def cancel_description(self):
        """Gets the cancel_description of this SubscriptionCancellationState.

        Cancel reason description in free form.

        :return: The cancel_description of this SubscriptionCancellationState.
        :rtype: str
        """
        return self._cancel_description

    @cancel_description.setter
    def cancel_description(self, cancel_description):
        """Sets the cancel_description of this SubscriptionCancellationState.

        Cancel reason description in free form.

        :param cancel_description: The cancel_description of this SubscriptionCancellationState.
        :type cancel_description: str
        """
        if cancel_description is not None and len(cancel_description) > 255:
            raise ValueError("Invalid value for `cancel_description`, length must be less than or equal to `255`")

        self._cancel_description = cancel_description

    @property
    def canceled_by(self):
        """Gets the canceled_by of this SubscriptionCancellationState.

        Canceled by.

        :return: The canceled_by of this SubscriptionCancellationState.
        :rtype: str
        """
        return self._canceled_by

    @canceled_by.setter
    def canceled_by(self, canceled_by):
        """Sets the canceled_by of this SubscriptionCancellationState.

        Canceled by.

        :param canceled_by: The canceled_by of this SubscriptionCancellationState.
        :type canceled_by: str
        """
        allowed_values = ["merchant", "customer", "rebilly"]  # noqa: E501
        if canceled_by not in allowed_values:
            raise ValueError(
                "Invalid value for `canceled_by` ({0}), must be one of {1}"
                .format(canceled_by, allowed_values)
            )

        self._canceled_by = canceled_by

    @property
    def canceled_time(self):
        """Gets the canceled_time of this SubscriptionCancellationState.

        Subscription order canceled time.

        :return: The canceled_time of this SubscriptionCancellationState.
        :rtype: datetime
        """
        return self._canceled_time

    @canceled_time.setter
    def canceled_time(self, canceled_time):
        """Sets the canceled_time of this SubscriptionCancellationState.

        Subscription order canceled time.

        :param canceled_time: The canceled_time of this SubscriptionCancellationState.
        :type canceled_time: datetime
        """

        self._canceled_time = canceled_time
