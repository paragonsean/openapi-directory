# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AuthenticationOptions(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, auth_token_ttl: int=None, credential_ttl: int=None, otp_required: bool=None, password_pattern: str=None, reset_token_ttl: int=None):
        """AuthenticationOptions - a model defined in OpenAPI

        :param auth_token_ttl: The auth_token_ttl of this AuthenticationOptions.
        :param credential_ttl: The credential_ttl of this AuthenticationOptions.
        :param otp_required: The otp_required of this AuthenticationOptions.
        :param password_pattern: The password_pattern of this AuthenticationOptions.
        :param reset_token_ttl: The reset_token_ttl of this AuthenticationOptions.
        """
        self.openapi_types = {
            'auth_token_ttl': int,
            'credential_ttl': int,
            'otp_required': bool,
            'password_pattern': str,
            'reset_token_ttl': int
        }

        self.attribute_map = {
            'auth_token_ttl': 'authTokenTtl',
            'credential_ttl': 'credentialTtl',
            'otp_required': 'otpRequired',
            'password_pattern': 'passwordPattern',
            'reset_token_ttl': 'resetTokenTtl'
        }

        self._auth_token_ttl = auth_token_ttl
        self._credential_ttl = credential_ttl
        self._otp_required = otp_required
        self._password_pattern = password_pattern
        self._reset_token_ttl = reset_token_ttl

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AuthenticationOptions':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AuthenticationOptions of this AuthenticationOptions.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def auth_token_ttl(self):
        """Gets the auth_token_ttl of this AuthenticationOptions.

        The default lifetime of the auth-token in seconds.

        :return: The auth_token_ttl of this AuthenticationOptions.
        :rtype: int
        """
        return self._auth_token_ttl

    @auth_token_ttl.setter
    def auth_token_ttl(self, auth_token_ttl):
        """Sets the auth_token_ttl of this AuthenticationOptions.

        The default lifetime of the auth-token in seconds.

        :param auth_token_ttl: The auth_token_ttl of this AuthenticationOptions.
        :type auth_token_ttl: int
        """

        self._auth_token_ttl = auth_token_ttl

    @property
    def credential_ttl(self):
        """Gets the credential_ttl of this AuthenticationOptions.

        The default lifetime of the credential in seconds.

        :return: The credential_ttl of this AuthenticationOptions.
        :rtype: int
        """
        return self._credential_ttl

    @credential_ttl.setter
    def credential_ttl(self, credential_ttl):
        """Sets the credential_ttl of this AuthenticationOptions.

        The default lifetime of the credential in seconds.

        :param credential_ttl: The credential_ttl of this AuthenticationOptions.
        :type credential_ttl: int
        """

        self._credential_ttl = credential_ttl

    @property
    def otp_required(self):
        """Gets the otp_required of this AuthenticationOptions.

        Should OTP be required to exchange token.

        :return: The otp_required of this AuthenticationOptions.
        :rtype: bool
        """
        return self._otp_required

    @otp_required.setter
    def otp_required(self, otp_required):
        """Sets the otp_required of this AuthenticationOptions.

        Should OTP be required to exchange token.

        :param otp_required: The otp_required of this AuthenticationOptions.
        :type otp_required: bool
        """

        self._otp_required = otp_required

    @property
    def password_pattern(self):
        """Gets the password_pattern of this AuthenticationOptions.

        Allowed password pattern.

        :return: The password_pattern of this AuthenticationOptions.
        :rtype: str
        """
        return self._password_pattern

    @password_pattern.setter
    def password_pattern(self, password_pattern):
        """Sets the password_pattern of this AuthenticationOptions.

        Allowed password pattern.

        :param password_pattern: The password_pattern of this AuthenticationOptions.
        :type password_pattern: str
        """

        self._password_pattern = password_pattern

    @property
    def reset_token_ttl(self):
        """Gets the reset_token_ttl of this AuthenticationOptions.

        The default lifetime of the reset-token in seconds.

        :return: The reset_token_ttl of this AuthenticationOptions.
        :rtype: int
        """
        return self._reset_token_ttl

    @reset_token_ttl.setter
    def reset_token_ttl(self, reset_token_ttl):
        """Sets the reset_token_ttl of this AuthenticationOptions.

        The default lifetime of the reset-token in seconds.

        :param reset_token_ttl: The reset_token_ttl of this AuthenticationOptions.
        :type reset_token_ttl: int
        """

        self._reset_token_ttl = reset_token_ttl
