# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PaymeroAllOfSettings(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, amount_exceeded: bool=False, main_currency: str=None, target_currency: str=None):
        """PaymeroAllOfSettings - a model defined in OpenAPI

        :param amount_exceeded: The amount_exceeded of this PaymeroAllOfSettings.
        :param main_currency: The main_currency of this PaymeroAllOfSettings.
        :param target_currency: The target_currency of this PaymeroAllOfSettings.
        """
        self.openapi_types = {
            'amount_exceeded': bool,
            'main_currency': str,
            'target_currency': str
        }

        self.attribute_map = {
            'amount_exceeded': 'amountExceeded',
            'main_currency': 'mainCurrency',
            'target_currency': 'targetCurrency'
        }

        self._amount_exceeded = amount_exceeded
        self._main_currency = main_currency
        self._target_currency = target_currency

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PaymeroAllOfSettings':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Paymero_allOf_settings of this PaymeroAllOfSettings.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def amount_exceeded(self):
        """Gets the amount_exceeded of this PaymeroAllOfSettings.

        Decline transactions when the amount received exceeds the amount requested.

        :return: The amount_exceeded of this PaymeroAllOfSettings.
        :rtype: bool
        """
        return self._amount_exceeded

    @amount_exceeded.setter
    def amount_exceeded(self, amount_exceeded):
        """Sets the amount_exceeded of this PaymeroAllOfSettings.

        Decline transactions when the amount received exceeds the amount requested.

        :param amount_exceeded: The amount_exceeded of this PaymeroAllOfSettings.
        :type amount_exceeded: bool
        """

        self._amount_exceeded = amount_exceeded

    @property
    def main_currency(self):
        """Gets the main_currency of this PaymeroAllOfSettings.

        This will be the blockchain on which currency runs.

        :return: The main_currency of this PaymeroAllOfSettings.
        :rtype: str
        """
        return self._main_currency

    @main_currency.setter
    def main_currency(self, main_currency):
        """Sets the main_currency of this PaymeroAllOfSettings.

        This will be the blockchain on which currency runs.

        :param main_currency: The main_currency of this PaymeroAllOfSettings.
        :type main_currency: str
        """
        allowed_values = ["TRX", "ETH"]  # noqa: E501
        if main_currency not in allowed_values:
            raise ValueError(
                "Invalid value for `main_currency` ({0}), must be one of {1}"
                .format(main_currency, allowed_values)
            )

        self._main_currency = main_currency

    @property
    def target_currency(self):
        """Gets the target_currency of this PaymeroAllOfSettings.

        This will be the currency to which you want to auto-convert the received cryptocurrency in to.

        :return: The target_currency of this PaymeroAllOfSettings.
        :rtype: str
        """
        return self._target_currency

    @target_currency.setter
    def target_currency(self, target_currency):
        """Sets the target_currency of this PaymeroAllOfSettings.

        This will be the currency to which you want to auto-convert the received cryptocurrency in to.

        :param target_currency: The target_currency of this PaymeroAllOfSettings.
        :type target_currency: str
        """
        if target_currency is not None and len(target_currency) > 3:
            raise ValueError("Invalid value for `target_currency`, length must be less than or equal to `3`")
        if target_currency is not None and len(target_currency) < 3:
            raise ValueError("Invalid value for `target_currency`, length must be greater than or equal to `3`")

        self._target_currency = target_currency
