# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.bank_account_all_of_links import BankAccountAllOfLinks
from openapi_server import util


class Credential(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, links: List[BankAccountAllOfLinks]=None, customer_id: str=None, expired_time: datetime=None, id: str=None, password: str=None, username: str=None):
        """Credential - a model defined in OpenAPI

        :param links: The links of this Credential.
        :param customer_id: The customer_id of this Credential.
        :param expired_time: The expired_time of this Credential.
        :param id: The id of this Credential.
        :param password: The password of this Credential.
        :param username: The username of this Credential.
        """
        self.openapi_types = {
            'links': List[BankAccountAllOfLinks],
            'customer_id': str,
            'expired_time': datetime,
            'id': str,
            'password': str,
            'username': str
        }

        self.attribute_map = {
            'links': '_links',
            'customer_id': 'customerId',
            'expired_time': 'expiredTime',
            'id': 'id',
            'password': 'password',
            'username': 'username'
        }

        self._links = links
        self._customer_id = customer_id
        self._expired_time = expired_time
        self._id = id
        self._password = password
        self._username = username

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Credential':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Credential of this Credential.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def links(self):
        """Gets the links of this Credential.

        The links related to resource.

        :return: The links of this Credential.
        :rtype: List[BankAccountAllOfLinks]
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this Credential.

        The links related to resource.

        :param links: The links of this Credential.
        :type links: List[BankAccountAllOfLinks]
        """
        if links is not None and len(links) < 1:
            raise ValueError("Invalid value for `links`, number of items must be greater than or equal to `1`")

        self._links = links

    @property
    def customer_id(self):
        """Gets the customer_id of this Credential.

        The credential's customer ID.

        :return: The customer_id of this Credential.
        :rtype: str
        """
        return self._customer_id

    @customer_id.setter
    def customer_id(self, customer_id):
        """Sets the customer_id of this Credential.

        The credential's customer ID.

        :param customer_id: The customer_id of this Credential.
        :type customer_id: str
        """
        if customer_id is None:
            raise ValueError("Invalid value for `customer_id`, must not be `None`")

        self._customer_id = customer_id

    @property
    def expired_time(self):
        """Gets the expired_time of this Credential.

        The credential's expired time.

        :return: The expired_time of this Credential.
        :rtype: datetime
        """
        return self._expired_time

    @expired_time.setter
    def expired_time(self, expired_time):
        """Sets the expired_time of this Credential.

        The credential's expired time.

        :param expired_time: The expired_time of this Credential.
        :type expired_time: datetime
        """

        self._expired_time = expired_time

    @property
    def id(self):
        """Gets the id of this Credential.

        The credential identifier string.

        :return: The id of this Credential.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Credential.

        The credential identifier string.

        :param id: The id of this Credential.
        :type id: str
        """
        if id is not None and len(id) > 50:
            raise ValueError("Invalid value for `id`, length must be less than or equal to `50`")

        self._id = id

    @property
    def password(self):
        """Gets the password of this Credential.

        The credential's password.

        :return: The password of this Credential.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this Credential.

        The credential's password.

        :param password: The password of this Credential.
        :type password: str
        """
        if password is None:
            raise ValueError("Invalid value for `password`, must not be `None`")

        self._password = password

    @property
    def username(self):
        """Gets the username of this Credential.

        Credential's username.

        :return: The username of this Credential.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this Credential.

        Credential's username.

        :param username: The username of this Credential.
        :type username: str
        """
        if username is None:
            raise ValueError("Invalid value for `username`, must not be `None`")

        self._username = username
