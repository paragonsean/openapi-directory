# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.bank_account_instrument import BankAccountInstrument
from openapi_server.models.contact_object import ContactObject
from openapi_server.models.lead_source import LeadSource
from openapi_server.models.risk_metadata import RiskMetadata
from openapi_server.models.self_link import SelfLink
from openapi_server import util


class BankAccountToken(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, billing_address: ContactObject=None, method: str=None, payment_instrument: BankAccountInstrument=None, links: List[SelfLink]=None, created_time: datetime=None, expiration_time: datetime=None, id: str=None, is_used: bool=False, lead_source: LeadSource=None, risk_metadata: RiskMetadata=None, updated_time: datetime=None, usage_time: datetime=None):
        """BankAccountToken - a model defined in OpenAPI

        :param billing_address: The billing_address of this BankAccountToken.
        :param method: The method of this BankAccountToken.
        :param payment_instrument: The payment_instrument of this BankAccountToken.
        :param links: The links of this BankAccountToken.
        :param created_time: The created_time of this BankAccountToken.
        :param expiration_time: The expiration_time of this BankAccountToken.
        :param id: The id of this BankAccountToken.
        :param is_used: The is_used of this BankAccountToken.
        :param lead_source: The lead_source of this BankAccountToken.
        :param risk_metadata: The risk_metadata of this BankAccountToken.
        :param updated_time: The updated_time of this BankAccountToken.
        :param usage_time: The usage_time of this BankAccountToken.
        """
        self.openapi_types = {
            'billing_address': ContactObject,
            'method': str,
            'payment_instrument': BankAccountInstrument,
            'links': List[SelfLink],
            'created_time': datetime,
            'expiration_time': datetime,
            'id': str,
            'is_used': bool,
            'lead_source': LeadSource,
            'risk_metadata': RiskMetadata,
            'updated_time': datetime,
            'usage_time': datetime
        }

        self.attribute_map = {
            'billing_address': 'billingAddress',
            'method': 'method',
            'payment_instrument': 'paymentInstrument',
            'links': '_links',
            'created_time': 'createdTime',
            'expiration_time': 'expirationTime',
            'id': 'id',
            'is_used': 'isUsed',
            'lead_source': 'leadSource',
            'risk_metadata': 'riskMetadata',
            'updated_time': 'updatedTime',
            'usage_time': 'usageTime'
        }

        self._billing_address = billing_address
        self._method = method
        self._payment_instrument = payment_instrument
        self._links = links
        self._created_time = created_time
        self._expiration_time = expiration_time
        self._id = id
        self._is_used = is_used
        self._lead_source = lead_source
        self._risk_metadata = risk_metadata
        self._updated_time = updated_time
        self._usage_time = usage_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BankAccountToken':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BankAccountToken of this BankAccountToken.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def billing_address(self):
        """Gets the billing_address of this BankAccountToken.

        The billing address object.

        :return: The billing_address of this BankAccountToken.
        :rtype: ContactObject
        """
        return self._billing_address

    @billing_address.setter
    def billing_address(self, billing_address):
        """Sets the billing_address of this BankAccountToken.

        The billing address object.

        :param billing_address: The billing_address of this BankAccountToken.
        :type billing_address: ContactObject
        """
        if billing_address is None:
            raise ValueError("Invalid value for `billing_address`, must not be `None`")

        self._billing_address = billing_address

    @property
    def method(self):
        """Gets the method of this BankAccountToken.

        The token payment method.

        :return: The method of this BankAccountToken.
        :rtype: str
        """
        return self._method

    @method.setter
    def method(self, method):
        """Sets the method of this BankAccountToken.

        The token payment method.

        :param method: The method of this BankAccountToken.
        :type method: str
        """
        allowed_values = ["ach", "echeck"]  # noqa: E501
        if method not in allowed_values:
            raise ValueError(
                "Invalid value for `method` ({0}), must be one of {1}"
                .format(method, allowed_values)
            )

        self._method = method

    @property
    def payment_instrument(self):
        """Gets the payment_instrument of this BankAccountToken.


        :return: The payment_instrument of this BankAccountToken.
        :rtype: BankAccountInstrument
        """
        return self._payment_instrument

    @payment_instrument.setter
    def payment_instrument(self, payment_instrument):
        """Sets the payment_instrument of this BankAccountToken.


        :param payment_instrument: The payment_instrument of this BankAccountToken.
        :type payment_instrument: BankAccountInstrument
        """
        if payment_instrument is None:
            raise ValueError("Invalid value for `payment_instrument`, must not be `None`")

        self._payment_instrument = payment_instrument

    @property
    def links(self):
        """Gets the links of this BankAccountToken.

        The links related to resource.

        :return: The links of this BankAccountToken.
        :rtype: List[SelfLink]
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this BankAccountToken.

        The links related to resource.

        :param links: The links of this BankAccountToken.
        :type links: List[SelfLink]
        """
        if links is not None and len(links) < 1:
            raise ValueError("Invalid value for `links`, number of items must be greater than or equal to `1`")

        self._links = links

    @property
    def created_time(self):
        """Gets the created_time of this BankAccountToken.

        Token created time.

        :return: The created_time of this BankAccountToken.
        :rtype: datetime
        """
        return self._created_time

    @created_time.setter
    def created_time(self, created_time):
        """Sets the created_time of this BankAccountToken.

        Token created time.

        :param created_time: The created_time of this BankAccountToken.
        :type created_time: datetime
        """

        self._created_time = created_time

    @property
    def expiration_time(self):
        """Gets the expiration_time of this BankAccountToken.

        Token expiration time.

        :return: The expiration_time of this BankAccountToken.
        :rtype: datetime
        """
        return self._expiration_time

    @expiration_time.setter
    def expiration_time(self, expiration_time):
        """Sets the expiration_time of this BankAccountToken.

        Token expiration time.

        :param expiration_time: The expiration_time of this BankAccountToken.
        :type expiration_time: datetime
        """

        self._expiration_time = expiration_time

    @property
    def id(self):
        """Gets the id of this BankAccountToken.

        The token identifier string.

        :return: The id of this BankAccountToken.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this BankAccountToken.

        The token identifier string.

        :param id: The id of this BankAccountToken.
        :type id: str
        """
        if id is not None and len(id) > 50:
            raise ValueError("Invalid value for `id`, length must be less than or equal to `50`")

        self._id = id

    @property
    def is_used(self):
        """Gets the is_used of this BankAccountToken.

        Whether the token was already used.

        :return: The is_used of this BankAccountToken.
        :rtype: bool
        """
        return self._is_used

    @is_used.setter
    def is_used(self, is_used):
        """Sets the is_used of this BankAccountToken.

        Whether the token was already used.

        :param is_used: The is_used of this BankAccountToken.
        :type is_used: bool
        """

        self._is_used = is_used

    @property
    def lead_source(self):
        """Gets the lead_source of this BankAccountToken.


        :return: The lead_source of this BankAccountToken.
        :rtype: LeadSource
        """
        return self._lead_source

    @lead_source.setter
    def lead_source(self, lead_source):
        """Sets the lead_source of this BankAccountToken.


        :param lead_source: The lead_source of this BankAccountToken.
        :type lead_source: LeadSource
        """

        self._lead_source = lead_source

    @property
    def risk_metadata(self):
        """Gets the risk_metadata of this BankAccountToken.


        :return: The risk_metadata of this BankAccountToken.
        :rtype: RiskMetadata
        """
        return self._risk_metadata

    @risk_metadata.setter
    def risk_metadata(self, risk_metadata):
        """Sets the risk_metadata of this BankAccountToken.


        :param risk_metadata: The risk_metadata of this BankAccountToken.
        :type risk_metadata: RiskMetadata
        """

        self._risk_metadata = risk_metadata

    @property
    def updated_time(self):
        """Gets the updated_time of this BankAccountToken.

        Token updated time.

        :return: The updated_time of this BankAccountToken.
        :rtype: datetime
        """
        return self._updated_time

    @updated_time.setter
    def updated_time(self, updated_time):
        """Sets the updated_time of this BankAccountToken.

        Token updated time.

        :param updated_time: The updated_time of this BankAccountToken.
        :type updated_time: datetime
        """

        self._updated_time = updated_time

    @property
    def usage_time(self):
        """Gets the usage_time of this BankAccountToken.

        Token usage time.

        :return: The usage_time of this BankAccountToken.
        :rtype: datetime
        """
        return self._usage_time

    @usage_time.setter
    def usage_time(self, usage_time):
        """Sets the usage_time of this BankAccountToken.

        Token usage time.

        :param usage_time: The usage_time of this BankAccountToken.
        :type usage_time: datetime
        """

        self._usage_time = usage_time
