# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CredoraxAllOfCredentials(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, merchant_id: str=None, merchant_md5_signature: str=None):
        """CredoraxAllOfCredentials - a model defined in OpenAPI

        :param merchant_id: The merchant_id of this CredoraxAllOfCredentials.
        :param merchant_md5_signature: The merchant_md5_signature of this CredoraxAllOfCredentials.
        """
        self.openapi_types = {
            'merchant_id': str,
            'merchant_md5_signature': str
        }

        self.attribute_map = {
            'merchant_id': 'merchantId',
            'merchant_md5_signature': 'merchantMd5Signature'
        }

        self._merchant_id = merchant_id
        self._merchant_md5_signature = merchant_md5_signature

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CredoraxAllOfCredentials':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Credorax_allOf_credentials of this CredoraxAllOfCredentials.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def merchant_id(self):
        """Gets the merchant_id of this CredoraxAllOfCredentials.

        Credorax Gateway merchant ID.

        :return: The merchant_id of this CredoraxAllOfCredentials.
        :rtype: str
        """
        return self._merchant_id

    @merchant_id.setter
    def merchant_id(self, merchant_id):
        """Sets the merchant_id of this CredoraxAllOfCredentials.

        Credorax Gateway merchant ID.

        :param merchant_id: The merchant_id of this CredoraxAllOfCredentials.
        :type merchant_id: str
        """
        if merchant_id is None:
            raise ValueError("Invalid value for `merchant_id`, must not be `None`")

        self._merchant_id = merchant_id

    @property
    def merchant_md5_signature(self):
        """Gets the merchant_md5_signature of this CredoraxAllOfCredentials.

        Credorax Gateway md5 signature.

        :return: The merchant_md5_signature of this CredoraxAllOfCredentials.
        :rtype: str
        """
        return self._merchant_md5_signature

    @merchant_md5_signature.setter
    def merchant_md5_signature(self, merchant_md5_signature):
        """Sets the merchant_md5_signature of this CredoraxAllOfCredentials.

        Credorax Gateway md5 signature.

        :param merchant_md5_signature: The merchant_md5_signature of this CredoraxAllOfCredentials.
        :type merchant_md5_signature: str
        """
        if merchant_md5_signature is None:
            raise ValueError("Invalid value for `merchant_md5_signature`, must not be `None`")

        self._merchant_md5_signature = merchant_md5_signature
