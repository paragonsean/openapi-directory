# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class FinTecSystemsAllOfSettings(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, recipient_bic: str=None, recipient_country: str=None, recipient_holder: str=None, recipient_iban: str=None):
        """FinTecSystemsAllOfSettings - a model defined in OpenAPI

        :param recipient_bic: The recipient_bic of this FinTecSystemsAllOfSettings.
        :param recipient_country: The recipient_country of this FinTecSystemsAllOfSettings.
        :param recipient_holder: The recipient_holder of this FinTecSystemsAllOfSettings.
        :param recipient_iban: The recipient_iban of this FinTecSystemsAllOfSettings.
        """
        self.openapi_types = {
            'recipient_bic': str,
            'recipient_country': str,
            'recipient_holder': str,
            'recipient_iban': str
        }

        self.attribute_map = {
            'recipient_bic': 'recipientBIC',
            'recipient_country': 'recipientCountry',
            'recipient_holder': 'recipientHolder',
            'recipient_iban': 'recipientIBAN'
        }

        self._recipient_bic = recipient_bic
        self._recipient_country = recipient_country
        self._recipient_holder = recipient_holder
        self._recipient_iban = recipient_iban

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FinTecSystemsAllOfSettings':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FinTecSystems_allOf_settings of this FinTecSystemsAllOfSettings.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def recipient_bic(self):
        """Gets the recipient_bic of this FinTecSystemsAllOfSettings.

        BIC of the recipient account.

        :return: The recipient_bic of this FinTecSystemsAllOfSettings.
        :rtype: str
        """
        return self._recipient_bic

    @recipient_bic.setter
    def recipient_bic(self, recipient_bic):
        """Sets the recipient_bic of this FinTecSystemsAllOfSettings.

        BIC of the recipient account.

        :param recipient_bic: The recipient_bic of this FinTecSystemsAllOfSettings.
        :type recipient_bic: str
        """
        if recipient_bic is None:
            raise ValueError("Invalid value for `recipient_bic`, must not be `None`")

        self._recipient_bic = recipient_bic

    @property
    def recipient_country(self):
        """Gets the recipient_country of this FinTecSystemsAllOfSettings.

        Two letter country code.

        :return: The recipient_country of this FinTecSystemsAllOfSettings.
        :rtype: str
        """
        return self._recipient_country

    @recipient_country.setter
    def recipient_country(self, recipient_country):
        """Sets the recipient_country of this FinTecSystemsAllOfSettings.

        Two letter country code.

        :param recipient_country: The recipient_country of this FinTecSystemsAllOfSettings.
        :type recipient_country: str
        """
        allowed_values = ["AT", "CH", "DE"]  # noqa: E501
        if recipient_country not in allowed_values:
            raise ValueError(
                "Invalid value for `recipient_country` ({0}), must be one of {1}"
                .format(recipient_country, allowed_values)
            )

        self._recipient_country = recipient_country

    @property
    def recipient_holder(self):
        """Gets the recipient_holder of this FinTecSystemsAllOfSettings.

        Account holder of the recipient account.

        :return: The recipient_holder of this FinTecSystemsAllOfSettings.
        :rtype: str
        """
        return self._recipient_holder

    @recipient_holder.setter
    def recipient_holder(self, recipient_holder):
        """Sets the recipient_holder of this FinTecSystemsAllOfSettings.

        Account holder of the recipient account.

        :param recipient_holder: The recipient_holder of this FinTecSystemsAllOfSettings.
        :type recipient_holder: str
        """
        if recipient_holder is None:
            raise ValueError("Invalid value for `recipient_holder`, must not be `None`")

        self._recipient_holder = recipient_holder

    @property
    def recipient_iban(self):
        """Gets the recipient_iban of this FinTecSystemsAllOfSettings.

        IBAN of the recipient account.

        :return: The recipient_iban of this FinTecSystemsAllOfSettings.
        :rtype: str
        """
        return self._recipient_iban

    @recipient_iban.setter
    def recipient_iban(self, recipient_iban):
        """Sets the recipient_iban of this FinTecSystemsAllOfSettings.

        IBAN of the recipient account.

        :param recipient_iban: The recipient_iban of this FinTecSystemsAllOfSettings.
        :type recipient_iban: str
        """
        if recipient_iban is None:
            raise ValueError("Invalid value for `recipient_iban`, must not be `None`")

        self._recipient_iban = recipient_iban
