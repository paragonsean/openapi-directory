# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.common_subscription_items_inner import CommonSubscriptionItemsInner
from openapi_server.models.common_subscription_order_all_of_line_item_subtotal import CommonSubscriptionOrderAllOfLineItemSubtotal
from openapi_server.models.common_subscription_order_all_of_recurring_interval import CommonSubscriptionOrderAllOfRecurringInterval
from openapi_server.models.common_subscription_order_all_of_trial import CommonSubscriptionOrderAllOfTrial
from openapi_server.models.contact_object import ContactObject
from openapi_server.models.invoice_time_shift import InvoiceTimeShift
from openapi_server.models.upcoming_invoice_item import UpcomingInvoiceItem
from openapi_server import util


class CommonSubscriptionOrder(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, activation_time: datetime=None, billing_address: ContactObject=None, billing_status: str=None, coupon_ids: List[str]=None, delivery_address: ContactObject=None, id: str=None, initial_invoice_id: str=None, items: List[CommonSubscriptionItemsInner]=None, order_type: str='subscription-order', po_number: str=None, recent_invoice_id: str=None, void_time: datetime=None, website_id: str=None, autopay: bool=True, end_time: datetime=None, in_trial: bool=None, invoice_time_shift: InvoiceTimeShift=None, is_trial_only: bool=False, line_item_subtotal: CommonSubscriptionOrderAllOfLineItemSubtotal=None, line_items: List[UpcomingInvoiceItem]=None, rebill_number: int=None, recurring_interval: CommonSubscriptionOrderAllOfRecurringInterval=None, renewal_time: datetime=None, start_time: datetime=None, status: str=None, trial: CommonSubscriptionOrderAllOfTrial=None):
        """CommonSubscriptionOrder - a model defined in OpenAPI

        :param activation_time: The activation_time of this CommonSubscriptionOrder.
        :param billing_address: The billing_address of this CommonSubscriptionOrder.
        :param billing_status: The billing_status of this CommonSubscriptionOrder.
        :param coupon_ids: The coupon_ids of this CommonSubscriptionOrder.
        :param delivery_address: The delivery_address of this CommonSubscriptionOrder.
        :param id: The id of this CommonSubscriptionOrder.
        :param initial_invoice_id: The initial_invoice_id of this CommonSubscriptionOrder.
        :param items: The items of this CommonSubscriptionOrder.
        :param order_type: The order_type of this CommonSubscriptionOrder.
        :param po_number: The po_number of this CommonSubscriptionOrder.
        :param recent_invoice_id: The recent_invoice_id of this CommonSubscriptionOrder.
        :param void_time: The void_time of this CommonSubscriptionOrder.
        :param website_id: The website_id of this CommonSubscriptionOrder.
        :param autopay: The autopay of this CommonSubscriptionOrder.
        :param end_time: The end_time of this CommonSubscriptionOrder.
        :param in_trial: The in_trial of this CommonSubscriptionOrder.
        :param invoice_time_shift: The invoice_time_shift of this CommonSubscriptionOrder.
        :param is_trial_only: The is_trial_only of this CommonSubscriptionOrder.
        :param line_item_subtotal: The line_item_subtotal of this CommonSubscriptionOrder.
        :param line_items: The line_items of this CommonSubscriptionOrder.
        :param rebill_number: The rebill_number of this CommonSubscriptionOrder.
        :param recurring_interval: The recurring_interval of this CommonSubscriptionOrder.
        :param renewal_time: The renewal_time of this CommonSubscriptionOrder.
        :param start_time: The start_time of this CommonSubscriptionOrder.
        :param status: The status of this CommonSubscriptionOrder.
        :param trial: The trial of this CommonSubscriptionOrder.
        """
        self.openapi_types = {
            'activation_time': datetime,
            'billing_address': ContactObject,
            'billing_status': str,
            'coupon_ids': List[str],
            'delivery_address': ContactObject,
            'id': str,
            'initial_invoice_id': str,
            'items': List[CommonSubscriptionItemsInner],
            'order_type': str,
            'po_number': str,
            'recent_invoice_id': str,
            'void_time': datetime,
            'website_id': str,
            'autopay': bool,
            'end_time': datetime,
            'in_trial': bool,
            'invoice_time_shift': InvoiceTimeShift,
            'is_trial_only': bool,
            'line_item_subtotal': CommonSubscriptionOrderAllOfLineItemSubtotal,
            'line_items': List[UpcomingInvoiceItem],
            'rebill_number': int,
            'recurring_interval': CommonSubscriptionOrderAllOfRecurringInterval,
            'renewal_time': datetime,
            'start_time': datetime,
            'status': str,
            'trial': CommonSubscriptionOrderAllOfTrial
        }

        self.attribute_map = {
            'activation_time': 'activationTime',
            'billing_address': 'billingAddress',
            'billing_status': 'billingStatus',
            'coupon_ids': 'couponIds',
            'delivery_address': 'deliveryAddress',
            'id': 'id',
            'initial_invoice_id': 'initialInvoiceId',
            'items': 'items',
            'order_type': 'orderType',
            'po_number': 'poNumber',
            'recent_invoice_id': 'recentInvoiceId',
            'void_time': 'voidTime',
            'website_id': 'websiteId',
            'autopay': 'autopay',
            'end_time': 'endTime',
            'in_trial': 'inTrial',
            'invoice_time_shift': 'invoiceTimeShift',
            'is_trial_only': 'isTrialOnly',
            'line_item_subtotal': 'lineItemSubtotal',
            'line_items': 'lineItems',
            'rebill_number': 'rebillNumber',
            'recurring_interval': 'recurringInterval',
            'renewal_time': 'renewalTime',
            'start_time': 'startTime',
            'status': 'status',
            'trial': 'trial'
        }

        self._activation_time = activation_time
        self._billing_address = billing_address
        self._billing_status = billing_status
        self._coupon_ids = coupon_ids
        self._delivery_address = delivery_address
        self._id = id
        self._initial_invoice_id = initial_invoice_id
        self._items = items
        self._order_type = order_type
        self._po_number = po_number
        self._recent_invoice_id = recent_invoice_id
        self._void_time = void_time
        self._website_id = website_id
        self._autopay = autopay
        self._end_time = end_time
        self._in_trial = in_trial
        self._invoice_time_shift = invoice_time_shift
        self._is_trial_only = is_trial_only
        self._line_item_subtotal = line_item_subtotal
        self._line_items = line_items
        self._rebill_number = rebill_number
        self._recurring_interval = recurring_interval
        self._renewal_time = renewal_time
        self._start_time = start_time
        self._status = status
        self._trial = trial

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CommonSubscriptionOrder':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CommonSubscriptionOrder of this CommonSubscriptionOrder.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def activation_time(self):
        """Gets the activation_time of this CommonSubscriptionOrder.

        Order activation time.

        :return: The activation_time of this CommonSubscriptionOrder.
        :rtype: datetime
        """
        return self._activation_time

    @activation_time.setter
    def activation_time(self, activation_time):
        """Sets the activation_time of this CommonSubscriptionOrder.

        Order activation time.

        :param activation_time: The activation_time of this CommonSubscriptionOrder.
        :type activation_time: datetime
        """

        self._activation_time = activation_time

    @property
    def billing_address(self):
        """Gets the billing_address of this CommonSubscriptionOrder.

        Order billing address.

        :return: The billing_address of this CommonSubscriptionOrder.
        :rtype: ContactObject
        """
        return self._billing_address

    @billing_address.setter
    def billing_address(self, billing_address):
        """Sets the billing_address of this CommonSubscriptionOrder.

        Order billing address.

        :param billing_address: The billing_address of this CommonSubscriptionOrder.
        :type billing_address: ContactObject
        """

        self._billing_address = billing_address

    @property
    def billing_status(self):
        """Gets the billing_status of this CommonSubscriptionOrder.

        The billing status of the most recent invoice.  It may help you determine if you should change the service status such as suspending the service. 

        :return: The billing_status of this CommonSubscriptionOrder.
        :rtype: str
        """
        return self._billing_status

    @billing_status.setter
    def billing_status(self, billing_status):
        """Sets the billing_status of this CommonSubscriptionOrder.

        The billing status of the most recent invoice.  It may help you determine if you should change the service status such as suspending the service. 

        :param billing_status: The billing_status of this CommonSubscriptionOrder.
        :type billing_status: str
        """
        allowed_values = ["unpaid", "past-due", "delinquent", "paid", "voided", "refunded", "disputed", "voided"]  # noqa: E501
        if billing_status not in allowed_values:
            raise ValueError(
                "Invalid value for `billing_status` ({0}), must be one of {1}"
                .format(billing_status, allowed_values)
            )

        self._billing_status = billing_status

    @property
    def coupon_ids(self):
        """Gets the coupon_ids of this CommonSubscriptionOrder.

        A list of coupons to redeem on the customer and restrict to this subscription. Read more about [coupons here](https://docs.rebilly.com/docs/dashboard/marketing/coupons-and-discounts/).  This parameter respects the following logic:  - When not passed then applied coupons will not be changed.  - When empty array passed then all applied coupon redemptions will be canceled.  - When list of coupons is passed then not applied yet coupons will be applied, already applied coupons will not change their state, applied coupons that are not presented in passed list will be canceled.  If list of applied coupons on pending order will be changed due to this param during update order,  Invoice for the order will be reissued. 

        :return: The coupon_ids of this CommonSubscriptionOrder.
        :rtype: List[str]
        """
        return self._coupon_ids

    @coupon_ids.setter
    def coupon_ids(self, coupon_ids):
        """Sets the coupon_ids of this CommonSubscriptionOrder.

        A list of coupons to redeem on the customer and restrict to this subscription. Read more about [coupons here](https://docs.rebilly.com/docs/dashboard/marketing/coupons-and-discounts/).  This parameter respects the following logic:  - When not passed then applied coupons will not be changed.  - When empty array passed then all applied coupon redemptions will be canceled.  - When list of coupons is passed then not applied yet coupons will be applied, already applied coupons will not change their state, applied coupons that are not presented in passed list will be canceled.  If list of applied coupons on pending order will be changed due to this param during update order,  Invoice for the order will be reissued. 

        :param coupon_ids: The coupon_ids of this CommonSubscriptionOrder.
        :type coupon_ids: List[str]
        """

        self._coupon_ids = coupon_ids

    @property
    def delivery_address(self):
        """Gets the delivery_address of this CommonSubscriptionOrder.

        Order delivery address.

        :return: The delivery_address of this CommonSubscriptionOrder.
        :rtype: ContactObject
        """
        return self._delivery_address

    @delivery_address.setter
    def delivery_address(self, delivery_address):
        """Sets the delivery_address of this CommonSubscriptionOrder.

        Order delivery address.

        :param delivery_address: The delivery_address of this CommonSubscriptionOrder.
        :type delivery_address: ContactObject
        """

        self._delivery_address = delivery_address

    @property
    def id(self):
        """Gets the id of this CommonSubscriptionOrder.

        The order identifier string.

        :return: The id of this CommonSubscriptionOrder.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CommonSubscriptionOrder.

        The order identifier string.

        :param id: The id of this CommonSubscriptionOrder.
        :type id: str
        """
        if id is not None and len(id) > 50:
            raise ValueError("Invalid value for `id`, length must be less than or equal to `50`")

        self._id = id

    @property
    def initial_invoice_id(self):
        """Gets the initial_invoice_id of this CommonSubscriptionOrder.

        The initial invoice identifier string.

        :return: The initial_invoice_id of this CommonSubscriptionOrder.
        :rtype: str
        """
        return self._initial_invoice_id

    @initial_invoice_id.setter
    def initial_invoice_id(self, initial_invoice_id):
        """Sets the initial_invoice_id of this CommonSubscriptionOrder.

        The initial invoice identifier string.

        :param initial_invoice_id: The initial_invoice_id of this CommonSubscriptionOrder.
        :type initial_invoice_id: str
        """
        if initial_invoice_id is not None and len(initial_invoice_id) > 50:
            raise ValueError("Invalid value for `initial_invoice_id`, length must be less than or equal to `50`")

        self._initial_invoice_id = initial_invoice_id

    @property
    def items(self):
        """Gets the items of this CommonSubscriptionOrder.


        :return: The items of this CommonSubscriptionOrder.
        :rtype: List[CommonSubscriptionItemsInner]
        """
        return self._items

    @items.setter
    def items(self, items):
        """Sets the items of this CommonSubscriptionOrder.


        :param items: The items of this CommonSubscriptionOrder.
        :type items: List[CommonSubscriptionItemsInner]
        """
        if items is not None and len(items) < 1:
            raise ValueError("Invalid value for `items`, number of items must be greater than or equal to `1`")

        self._items = items

    @property
    def order_type(self):
        """Gets the order_type of this CommonSubscriptionOrder.

        Specifies the type of order, a subscription or a one-time purchase. 

        :return: The order_type of this CommonSubscriptionOrder.
        :rtype: str
        """
        return self._order_type

    @order_type.setter
    def order_type(self, order_type):
        """Sets the order_type of this CommonSubscriptionOrder.

        Specifies the type of order, a subscription or a one-time purchase. 

        :param order_type: The order_type of this CommonSubscriptionOrder.
        :type order_type: str
        """
        allowed_values = ["subscription-order", "one-time-order"]  # noqa: E501
        if order_type not in allowed_values:
            raise ValueError(
                "Invalid value for `order_type` ({0}), must be one of {1}"
                .format(order_type, allowed_values)
            )

        self._order_type = order_type

    @property
    def po_number(self):
        """Gets the po_number of this CommonSubscriptionOrder.

        Purchase order number, will be displayed on the issued invoices.

        :return: The po_number of this CommonSubscriptionOrder.
        :rtype: str
        """
        return self._po_number

    @po_number.setter
    def po_number(self, po_number):
        """Sets the po_number of this CommonSubscriptionOrder.

        Purchase order number, will be displayed on the issued invoices.

        :param po_number: The po_number of this CommonSubscriptionOrder.
        :type po_number: str
        """

        self._po_number = po_number

    @property
    def recent_invoice_id(self):
        """Gets the recent_invoice_id of this CommonSubscriptionOrder.

        Most recently issued invoice identifier string. It might not be `paid` yet.

        :return: The recent_invoice_id of this CommonSubscriptionOrder.
        :rtype: str
        """
        return self._recent_invoice_id

    @recent_invoice_id.setter
    def recent_invoice_id(self, recent_invoice_id):
        """Sets the recent_invoice_id of this CommonSubscriptionOrder.

        Most recently issued invoice identifier string. It might not be `paid` yet.

        :param recent_invoice_id: The recent_invoice_id of this CommonSubscriptionOrder.
        :type recent_invoice_id: str
        """
        if recent_invoice_id is not None and len(recent_invoice_id) > 50:
            raise ValueError("Invalid value for `recent_invoice_id`, length must be less than or equal to `50`")

        self._recent_invoice_id = recent_invoice_id

    @property
    def void_time(self):
        """Gets the void_time of this CommonSubscriptionOrder.

        Order void time.

        :return: The void_time of this CommonSubscriptionOrder.
        :rtype: datetime
        """
        return self._void_time

    @void_time.setter
    def void_time(self, void_time):
        """Sets the void_time of this CommonSubscriptionOrder.

        Order void time.

        :param void_time: The void_time of this CommonSubscriptionOrder.
        :type void_time: datetime
        """

        self._void_time = void_time

    @property
    def website_id(self):
        """Gets the website_id of this CommonSubscriptionOrder.

        The website identifier string.

        :return: The website_id of this CommonSubscriptionOrder.
        :rtype: str
        """
        return self._website_id

    @website_id.setter
    def website_id(self, website_id):
        """Sets the website_id of this CommonSubscriptionOrder.

        The website identifier string.

        :param website_id: The website_id of this CommonSubscriptionOrder.
        :type website_id: str
        """
        if website_id is not None and len(website_id) > 50:
            raise ValueError("Invalid value for `website_id`, length must be less than or equal to `50`")

        self._website_id = website_id

    @property
    def autopay(self):
        """Gets the autopay of this CommonSubscriptionOrder.

        Autopay determines if a payment attempt will be automatic.

        :return: The autopay of this CommonSubscriptionOrder.
        :rtype: bool
        """
        return self._autopay

    @autopay.setter
    def autopay(self, autopay):
        """Sets the autopay of this CommonSubscriptionOrder.

        Autopay determines if a payment attempt will be automatic.

        :param autopay: The autopay of this CommonSubscriptionOrder.
        :type autopay: bool
        """

        self._autopay = autopay

    @property
    def end_time(self):
        """Gets the end_time of this CommonSubscriptionOrder.

        Subscription end time.

        :return: The end_time of this CommonSubscriptionOrder.
        :rtype: datetime
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this CommonSubscriptionOrder.

        Subscription end time.

        :param end_time: The end_time of this CommonSubscriptionOrder.
        :type end_time: datetime
        """

        self._end_time = end_time

    @property
    def in_trial(self):
        """Gets the in_trial of this CommonSubscriptionOrder.

        True if the subscription is currently in a trial period.

        :return: The in_trial of this CommonSubscriptionOrder.
        :rtype: bool
        """
        return self._in_trial

    @in_trial.setter
    def in_trial(self, in_trial):
        """Sets the in_trial of this CommonSubscriptionOrder.

        True if the subscription is currently in a trial period.

        :param in_trial: The in_trial of this CommonSubscriptionOrder.
        :type in_trial: bool
        """

        self._in_trial = in_trial

    @property
    def invoice_time_shift(self):
        """Gets the invoice_time_shift of this CommonSubscriptionOrder.

        You can shift issue time and due time of invoices for this subscription. This setting overrides plan settings. To use plan settings, set `null`. To use multiple plans in one subscription they all must have the same billing period, this property allows to subscribe to different plans. 

        :return: The invoice_time_shift of this CommonSubscriptionOrder.
        :rtype: InvoiceTimeShift
        """
        return self._invoice_time_shift

    @invoice_time_shift.setter
    def invoice_time_shift(self, invoice_time_shift):
        """Sets the invoice_time_shift of this CommonSubscriptionOrder.

        You can shift issue time and due time of invoices for this subscription. This setting overrides plan settings. To use plan settings, set `null`. To use multiple plans in one subscription they all must have the same billing period, this property allows to subscribe to different plans. 

        :param invoice_time_shift: The invoice_time_shift of this CommonSubscriptionOrder.
        :type invoice_time_shift: InvoiceTimeShift
        """

        self._invoice_time_shift = invoice_time_shift

    @property
    def is_trial_only(self):
        """Gets the is_trial_only of this CommonSubscriptionOrder.

        Whether a subscription ends after a trial period. Recurring settings are ignored if it's `true`.

        :return: The is_trial_only of this CommonSubscriptionOrder.
        :rtype: bool
        """
        return self._is_trial_only

    @is_trial_only.setter
    def is_trial_only(self, is_trial_only):
        """Sets the is_trial_only of this CommonSubscriptionOrder.

        Whether a subscription ends after a trial period. Recurring settings are ignored if it's `true`.

        :param is_trial_only: The is_trial_only of this CommonSubscriptionOrder.
        :type is_trial_only: bool
        """

        self._is_trial_only = is_trial_only

    @property
    def line_item_subtotal(self):
        """Gets the line_item_subtotal of this CommonSubscriptionOrder.


        :return: The line_item_subtotal of this CommonSubscriptionOrder.
        :rtype: CommonSubscriptionOrderAllOfLineItemSubtotal
        """
        return self._line_item_subtotal

    @line_item_subtotal.setter
    def line_item_subtotal(self, line_item_subtotal):
        """Sets the line_item_subtotal of this CommonSubscriptionOrder.


        :param line_item_subtotal: The line_item_subtotal of this CommonSubscriptionOrder.
        :type line_item_subtotal: CommonSubscriptionOrderAllOfLineItemSubtotal
        """

        self._line_item_subtotal = line_item_subtotal

    @property
    def line_items(self):
        """Gets the line_items of this CommonSubscriptionOrder.

        Subscription line items which queue until the next renewal (or interim) invoice is issued for the subscription.

        :return: The line_items of this CommonSubscriptionOrder.
        :rtype: List[UpcomingInvoiceItem]
        """
        return self._line_items

    @line_items.setter
    def line_items(self, line_items):
        """Sets the line_items of this CommonSubscriptionOrder.

        Subscription line items which queue until the next renewal (or interim) invoice is issued for the subscription.

        :param line_items: The line_items of this CommonSubscriptionOrder.
        :type line_items: List[UpcomingInvoiceItem]
        """

        self._line_items = line_items

    @property
    def rebill_number(self):
        """Gets the rebill_number of this CommonSubscriptionOrder.

        The current period number.

        :return: The rebill_number of this CommonSubscriptionOrder.
        :rtype: int
        """
        return self._rebill_number

    @rebill_number.setter
    def rebill_number(self, rebill_number):
        """Sets the rebill_number of this CommonSubscriptionOrder.

        The current period number.

        :param rebill_number: The rebill_number of this CommonSubscriptionOrder.
        :type rebill_number: int
        """

        self._rebill_number = rebill_number

    @property
    def recurring_interval(self):
        """Gets the recurring_interval of this CommonSubscriptionOrder.


        :return: The recurring_interval of this CommonSubscriptionOrder.
        :rtype: CommonSubscriptionOrderAllOfRecurringInterval
        """
        return self._recurring_interval

    @recurring_interval.setter
    def recurring_interval(self, recurring_interval):
        """Sets the recurring_interval of this CommonSubscriptionOrder.


        :param recurring_interval: The recurring_interval of this CommonSubscriptionOrder.
        :type recurring_interval: CommonSubscriptionOrderAllOfRecurringInterval
        """

        self._recurring_interval = recurring_interval

    @property
    def renewal_time(self):
        """Gets the renewal_time of this CommonSubscriptionOrder.

        Subscription renewal time.

        :return: The renewal_time of this CommonSubscriptionOrder.
        :rtype: datetime
        """
        return self._renewal_time

    @renewal_time.setter
    def renewal_time(self, renewal_time):
        """Sets the renewal_time of this CommonSubscriptionOrder.

        Subscription renewal time.

        :param renewal_time: The renewal_time of this CommonSubscriptionOrder.
        :type renewal_time: datetime
        """

        self._renewal_time = renewal_time

    @property
    def start_time(self):
        """Gets the start_time of this CommonSubscriptionOrder.

        Subscription start time.  When the value is sent as null, it will use the current time. This value can't be in past more than one service period.

        :return: The start_time of this CommonSubscriptionOrder.
        :rtype: datetime
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this CommonSubscriptionOrder.

        Subscription start time.  When the value is sent as null, it will use the current time. This value can't be in past more than one service period.

        :param start_time: The start_time of this CommonSubscriptionOrder.
        :type start_time: datetime
        """

        self._start_time = start_time

    @property
    def status(self):
        """Gets the status of this CommonSubscriptionOrder.

        The status of the subscription service. A subscription starts in the `pending` status, and will become `active` when the service period begins. 

        :return: The status of this CommonSubscriptionOrder.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this CommonSubscriptionOrder.

        The status of the subscription service. A subscription starts in the `pending` status, and will become `active` when the service period begins. 

        :param status: The status of this CommonSubscriptionOrder.
        :type status: str
        """
        allowed_values = ["pending", "active", "canceled", "churned", "suspended", "paused", "abandoned", "trial-ended"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def trial(self):
        """Gets the trial of this CommonSubscriptionOrder.


        :return: The trial of this CommonSubscriptionOrder.
        :rtype: CommonSubscriptionOrderAllOfTrial
        """
        return self._trial

    @trial.setter
    def trial(self, trial):
        """Sets the trial of this CommonSubscriptionOrder.


        :param trial: The trial of this CommonSubscriptionOrder.
        :type trial: CommonSubscriptionOrderAllOfTrial
        """

        self._trial = trial
