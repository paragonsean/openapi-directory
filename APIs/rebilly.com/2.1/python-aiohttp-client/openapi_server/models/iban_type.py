# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.contact_object import ContactObject
from openapi_server.models.risk_metadata import RiskMetadata
from openapi_server import util


class IBANType(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_number: str=None, account_number_type: str='BBAN', bank_name: str=None, bic: str=None, billing_address: ContactObject=None, custom_fields: object=None, customer_id: str=None, method: str=None, risk_metadata: RiskMetadata=None):
        """IBANType - a model defined in OpenAPI

        :param account_number: The account_number of this IBANType.
        :param account_number_type: The account_number_type of this IBANType.
        :param bank_name: The bank_name of this IBANType.
        :param bic: The bic of this IBANType.
        :param billing_address: The billing_address of this IBANType.
        :param custom_fields: The custom_fields of this IBANType.
        :param customer_id: The customer_id of this IBANType.
        :param method: The method of this IBANType.
        :param risk_metadata: The risk_metadata of this IBANType.
        """
        self.openapi_types = {
            'account_number': str,
            'account_number_type': str,
            'bank_name': str,
            'bic': str,
            'billing_address': ContactObject,
            'custom_fields': object,
            'customer_id': str,
            'method': str,
            'risk_metadata': RiskMetadata
        }

        self.attribute_map = {
            'account_number': 'accountNumber',
            'account_number_type': 'accountNumberType',
            'bank_name': 'bankName',
            'bic': 'bic',
            'billing_address': 'billingAddress',
            'custom_fields': 'customFields',
            'customer_id': 'customerId',
            'method': 'method',
            'risk_metadata': 'riskMetadata'
        }

        self._account_number = account_number
        self._account_number_type = account_number_type
        self._bank_name = bank_name
        self._bic = bic
        self._billing_address = billing_address
        self._custom_fields = custom_fields
        self._customer_id = customer_id
        self._method = method
        self._risk_metadata = risk_metadata

    @classmethod
    def from_dict(cls, dikt: dict) -> 'IBANType':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The IBANType of this IBANType.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_number(self):
        """Gets the account_number of this IBANType.

        Bank's account number. Detailed information about all ISO 13616-compliant national IBAN formats is available in the [SWIFT IBAN Registry](https://www.swift.com/standards/data-standards/iban). 

        :return: The account_number of this IBANType.
        :rtype: str
        """
        return self._account_number

    @account_number.setter
    def account_number(self, account_number):
        """Sets the account_number of this IBANType.

        Bank's account number. Detailed information about all ISO 13616-compliant national IBAN formats is available in the [SWIFT IBAN Registry](https://www.swift.com/standards/data-standards/iban). 

        :param account_number: The account_number of this IBANType.
        :type account_number: str
        """
        if account_number is None:
            raise ValueError("Invalid value for `account_number`, must not be `None`")

        self._account_number = account_number

    @property
    def account_number_type(self):
        """Gets the account_number_type of this IBANType.

        Bank's Account Number type. A valid value is basic bank account number (BBAN) or international bank account number (IBAN). This is the object for the IBAN.

        :return: The account_number_type of this IBANType.
        :rtype: str
        """
        return self._account_number_type

    @account_number_type.setter
    def account_number_type(self, account_number_type):
        """Sets the account_number_type of this IBANType.

        Bank's Account Number type. A valid value is basic bank account number (BBAN) or international bank account number (IBAN). This is the object for the IBAN.

        :param account_number_type: The account_number_type of this IBANType.
        :type account_number_type: str
        """
        allowed_values = ["IBAN", "BBAN"]  # noqa: E501
        if account_number_type not in allowed_values:
            raise ValueError(
                "Invalid value for `account_number_type` ({0}), must be one of {1}"
                .format(account_number_type, allowed_values)
            )

        self._account_number_type = account_number_type

    @property
    def bank_name(self):
        """Gets the bank_name of this IBANType.

        Bank's name.

        :return: The bank_name of this IBANType.
        :rtype: str
        """
        return self._bank_name

    @bank_name.setter
    def bank_name(self, bank_name):
        """Sets the bank_name of this IBANType.

        Bank's name.

        :param bank_name: The bank_name of this IBANType.
        :type bank_name: str
        """

        self._bank_name = bank_name

    @property
    def bic(self):
        """Gets the bic of this IBANType.

        Bank Identifier Code.

        :return: The bic of this IBANType.
        :rtype: str
        """
        return self._bic

    @bic.setter
    def bic(self, bic):
        """Sets the bic of this IBANType.

        Bank Identifier Code.

        :param bic: The bic of this IBANType.
        :type bic: str
        """

        self._bic = bic

    @property
    def billing_address(self):
        """Gets the billing_address of this IBANType.

        The billing address.

        :return: The billing_address of this IBANType.
        :rtype: ContactObject
        """
        return self._billing_address

    @billing_address.setter
    def billing_address(self, billing_address):
        """Sets the billing_address of this IBANType.

        The billing address.

        :param billing_address: The billing_address of this IBANType.
        :type billing_address: ContactObject
        """
        if billing_address is None:
            raise ValueError("Invalid value for `billing_address`, must not be `None`")

        self._billing_address = billing_address

    @property
    def custom_fields(self):
        """Gets the custom_fields of this IBANType.

        Custom Fields list as a map `{\"custom field name\": \"custom field value\", ...}`. The format must follow the saved format (see Custom Fields section for the formats). 

        :return: The custom_fields of this IBANType.
        :rtype: object
        """
        return self._custom_fields

    @custom_fields.setter
    def custom_fields(self, custom_fields):
        """Sets the custom_fields of this IBANType.

        Custom Fields list as a map `{\"custom field name\": \"custom field value\", ...}`. The format must follow the saved format (see Custom Fields section for the formats). 

        :param custom_fields: The custom_fields of this IBANType.
        :type custom_fields: object
        """

        self._custom_fields = custom_fields

    @property
    def customer_id(self):
        """Gets the customer_id of this IBANType.

        Customer's ID.

        :return: The customer_id of this IBANType.
        :rtype: str
        """
        return self._customer_id

    @customer_id.setter
    def customer_id(self, customer_id):
        """Sets the customer_id of this IBANType.

        Customer's ID.

        :param customer_id: The customer_id of this IBANType.
        :type customer_id: str
        """
        if customer_id is None:
            raise ValueError("Invalid value for `customer_id`, must not be `None`")
        if customer_id is not None and len(customer_id) > 50:
            raise ValueError("Invalid value for `customer_id`, length must be less than or equal to `50`")

        self._customer_id = customer_id

    @property
    def method(self):
        """Gets the method of this IBANType.

        The method of payment instrument.

        :return: The method of this IBANType.
        :rtype: str
        """
        return self._method

    @method.setter
    def method(self, method):
        """Sets the method of this IBANType.

        The method of payment instrument.

        :param method: The method of this IBANType.
        :type method: str
        """
        allowed_values = ["ach"]  # noqa: E501
        if method not in allowed_values:
            raise ValueError(
                "Invalid value for `method` ({0}), must be one of {1}"
                .format(method, allowed_values)
            )

        self._method = method

    @property
    def risk_metadata(self):
        """Gets the risk_metadata of this IBANType.


        :return: The risk_metadata of this IBANType.
        :rtype: RiskMetadata
        """
        return self._risk_metadata

    @risk_metadata.setter
    def risk_metadata(self, risk_metadata):
        """Sets the risk_metadata of this IBANType.


        :param risk_metadata: The risk_metadata of this IBANType.
        :type risk_metadata: RiskMetadata
        """

        self._risk_metadata = risk_metadata
