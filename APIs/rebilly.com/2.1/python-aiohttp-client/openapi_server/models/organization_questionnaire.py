# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class OrganizationQuestionnaire(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, integration_type: str=None, launch_timing: str=None, monthly_transactions: str=None, products: List[str]=None, role: str=None):
        """OrganizationQuestionnaire - a model defined in OpenAPI

        :param integration_type: The integration_type of this OrganizationQuestionnaire.
        :param launch_timing: The launch_timing of this OrganizationQuestionnaire.
        :param monthly_transactions: The monthly_transactions of this OrganizationQuestionnaire.
        :param products: The products of this OrganizationQuestionnaire.
        :param role: The role of this OrganizationQuestionnaire.
        """
        self.openapi_types = {
            'integration_type': str,
            'launch_timing': str,
            'monthly_transactions': str,
            'products': List[str],
            'role': str
        }

        self.attribute_map = {
            'integration_type': 'integrationType',
            'launch_timing': 'launchTiming',
            'monthly_transactions': 'monthlyTransactions',
            'products': 'products',
            'role': 'role'
        }

        self._integration_type = integration_type
        self._launch_timing = launch_timing
        self._monthly_transactions = monthly_transactions
        self._products = products
        self._role = role

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OrganizationQuestionnaire':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OrganizationQuestionnaire of this OrganizationQuestionnaire.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def integration_type(self):
        """Gets the integration_type of this OrganizationQuestionnaire.

        What kind of integration organization looks for.

        :return: The integration_type of this OrganizationQuestionnaire.
        :rtype: str
        """
        return self._integration_type

    @integration_type.setter
    def integration_type(self, integration_type):
        """Sets the integration_type of this OrganizationQuestionnaire.

        What kind of integration organization looks for.

        :param integration_type: The integration_type of this OrganizationQuestionnaire.
        :type integration_type: str
        """

        self._integration_type = integration_type

    @property
    def launch_timing(self):
        """Gets the launch_timing of this OrganizationQuestionnaire.

        Desired time to go live.

        :return: The launch_timing of this OrganizationQuestionnaire.
        :rtype: str
        """
        return self._launch_timing

    @launch_timing.setter
    def launch_timing(self, launch_timing):
        """Sets the launch_timing of this OrganizationQuestionnaire.

        Desired time to go live.

        :param launch_timing: The launch_timing of this OrganizationQuestionnaire.
        :type launch_timing: str
        """

        self._launch_timing = launch_timing

    @property
    def monthly_transactions(self):
        """Gets the monthly_transactions of this OrganizationQuestionnaire.

        The amount of monthly processed transaction.

        :return: The monthly_transactions of this OrganizationQuestionnaire.
        :rtype: str
        """
        return self._monthly_transactions

    @monthly_transactions.setter
    def monthly_transactions(self, monthly_transactions):
        """Sets the monthly_transactions of this OrganizationQuestionnaire.

        The amount of monthly processed transaction.

        :param monthly_transactions: The monthly_transactions of this OrganizationQuestionnaire.
        :type monthly_transactions: str
        """

        self._monthly_transactions = monthly_transactions

    @property
    def products(self):
        """Gets the products of this OrganizationQuestionnaire.

        The list of products organization is interested in.

        :return: The products of this OrganizationQuestionnaire.
        :rtype: List[str]
        """
        return self._products

    @products.setter
    def products(self, products):
        """Sets the products of this OrganizationQuestionnaire.

        The list of products organization is interested in.

        :param products: The products of this OrganizationQuestionnaire.
        :type products: List[str]
        """

        self._products = products

    @property
    def role(self):
        """Gets the role of this OrganizationQuestionnaire.

        The role of the owner.

        :return: The role of this OrganizationQuestionnaire.
        :rtype: str
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this OrganizationQuestionnaire.

        The role of the owner.

        :param role: The role of this OrganizationQuestionnaire.
        :type role: str
        """

        self._role = role
