# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.address_matches import AddressMatches
from openapi_server import util


class ProofOfAddressAllOfDocumentMatches(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, data: AddressMatches=None, score: float=None):
        """ProofOfAddressAllOfDocumentMatches - a model defined in OpenAPI

        :param data: The data of this ProofOfAddressAllOfDocumentMatches.
        :param score: The score of this ProofOfAddressAllOfDocumentMatches.
        """
        self.openapi_types = {
            'data': AddressMatches,
            'score': float
        }

        self.attribute_map = {
            'data': 'data',
            'score': 'score'
        }

        self._data = data
        self._score = score

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ProofOfAddressAllOfDocumentMatches':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ProofOfAddress_allOf_documentMatches of this ProofOfAddressAllOfDocumentMatches.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def data(self):
        """Gets the data of this ProofOfAddressAllOfDocumentMatches.


        :return: The data of this ProofOfAddressAllOfDocumentMatches.
        :rtype: AddressMatches
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this ProofOfAddressAllOfDocumentMatches.


        :param data: The data of this ProofOfAddressAllOfDocumentMatches.
        :type data: AddressMatches
        """

        self._data = data

    @property
    def score(self):
        """Gets the score of this ProofOfAddressAllOfDocumentMatches.

        The calculated score that represents the % of confidence that this proof of address represents the given customer.

        :return: The score of this ProofOfAddressAllOfDocumentMatches.
        :rtype: float
        """
        return self._score

    @score.setter
    def score(self, score):
        """Sets the score of this ProofOfAddressAllOfDocumentMatches.

        The calculated score that represents the % of confidence that this proof of address represents the given customer.

        :param score: The score of this ProofOfAddressAllOfDocumentMatches.
        :type score: float
        """

        self._score = score
