# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SecurionPayAllOfCredentials(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, secret_api_key: str=None):
        """SecurionPayAllOfCredentials - a model defined in OpenAPI

        :param secret_api_key: The secret_api_key of this SecurionPayAllOfCredentials.
        """
        self.openapi_types = {
            'secret_api_key': str
        }

        self.attribute_map = {
            'secret_api_key': 'secretApiKey'
        }

        self._secret_api_key = secret_api_key

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SecurionPayAllOfCredentials':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SecurionPay_allOf_credentials of this SecurionPayAllOfCredentials.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def secret_api_key(self):
        """Gets the secret_api_key of this SecurionPayAllOfCredentials.


        :return: The secret_api_key of this SecurionPayAllOfCredentials.
        :rtype: str
        """
        return self._secret_api_key

    @secret_api_key.setter
    def secret_api_key(self, secret_api_key):
        """Sets the secret_api_key of this SecurionPayAllOfCredentials.


        :param secret_api_key: The secret_api_key of this SecurionPayAllOfCredentials.
        :type secret_api_key: str
        """
        if secret_api_key is None:
            raise ValueError("Invalid value for `secret_api_key`, must not be `None`")

        self._secret_api_key = secret_api_key
