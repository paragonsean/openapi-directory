# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CardknoxAllOfCredentials(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, x_key: str=None):
        """CardknoxAllOfCredentials - a model defined in OpenAPI

        :param x_key: The x_key of this CardknoxAllOfCredentials.
        """
        self.openapi_types = {
            'x_key': str
        }

        self.attribute_map = {
            'x_key': 'xKey'
        }

        self._x_key = x_key

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CardknoxAllOfCredentials':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Cardknox_allOf_credentials of this CardknoxAllOfCredentials.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def x_key(self):
        """Gets the x_key of this CardknoxAllOfCredentials.

        Cardknox xKey.

        :return: The x_key of this CardknoxAllOfCredentials.
        :rtype: str
        """
        return self._x_key

    @x_key.setter
    def x_key(self, x_key):
        """Sets the x_key of this CardknoxAllOfCredentials.

        Cardknox xKey.

        :param x_key: The x_key of this CardknoxAllOfCredentials.
        :type x_key: str
        """
        if x_key is None:
            raise ValueError("Invalid value for `x_key`, must not be `None`")

        self._x_key = x_key
