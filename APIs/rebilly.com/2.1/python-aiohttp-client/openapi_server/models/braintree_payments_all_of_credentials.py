# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class BraintreePaymentsAllOfCredentials(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, merchant_account_id: str=None, merchant_id: str=None, private_key: str=None, public_key: str=None):
        """BraintreePaymentsAllOfCredentials - a model defined in OpenAPI

        :param merchant_account_id: The merchant_account_id of this BraintreePaymentsAllOfCredentials.
        :param merchant_id: The merchant_id of this BraintreePaymentsAllOfCredentials.
        :param private_key: The private_key of this BraintreePaymentsAllOfCredentials.
        :param public_key: The public_key of this BraintreePaymentsAllOfCredentials.
        """
        self.openapi_types = {
            'merchant_account_id': str,
            'merchant_id': str,
            'private_key': str,
            'public_key': str
        }

        self.attribute_map = {
            'merchant_account_id': 'merchantAccountId',
            'merchant_id': 'merchantId',
            'private_key': 'privateKey',
            'public_key': 'publicKey'
        }

        self._merchant_account_id = merchant_account_id
        self._merchant_id = merchant_id
        self._private_key = private_key
        self._public_key = public_key

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BraintreePaymentsAllOfCredentials':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BraintreePayments_allOf_credentials of this BraintreePaymentsAllOfCredentials.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def merchant_account_id(self):
        """Gets the merchant_account_id of this BraintreePaymentsAllOfCredentials.

        BraintreePayments merchant account ID.

        :return: The merchant_account_id of this BraintreePaymentsAllOfCredentials.
        :rtype: str
        """
        return self._merchant_account_id

    @merchant_account_id.setter
    def merchant_account_id(self, merchant_account_id):
        """Sets the merchant_account_id of this BraintreePaymentsAllOfCredentials.

        BraintreePayments merchant account ID.

        :param merchant_account_id: The merchant_account_id of this BraintreePaymentsAllOfCredentials.
        :type merchant_account_id: str
        """
        if merchant_account_id is None:
            raise ValueError("Invalid value for `merchant_account_id`, must not be `None`")

        self._merchant_account_id = merchant_account_id

    @property
    def merchant_id(self):
        """Gets the merchant_id of this BraintreePaymentsAllOfCredentials.

        BraintreePayments merchant ID.

        :return: The merchant_id of this BraintreePaymentsAllOfCredentials.
        :rtype: str
        """
        return self._merchant_id

    @merchant_id.setter
    def merchant_id(self, merchant_id):
        """Sets the merchant_id of this BraintreePaymentsAllOfCredentials.

        BraintreePayments merchant ID.

        :param merchant_id: The merchant_id of this BraintreePaymentsAllOfCredentials.
        :type merchant_id: str
        """
        if merchant_id is None:
            raise ValueError("Invalid value for `merchant_id`, must not be `None`")

        self._merchant_id = merchant_id

    @property
    def private_key(self):
        """Gets the private_key of this BraintreePaymentsAllOfCredentials.

        BraintreePayments Private Key.

        :return: The private_key of this BraintreePaymentsAllOfCredentials.
        :rtype: str
        """
        return self._private_key

    @private_key.setter
    def private_key(self, private_key):
        """Sets the private_key of this BraintreePaymentsAllOfCredentials.

        BraintreePayments Private Key.

        :param private_key: The private_key of this BraintreePaymentsAllOfCredentials.
        :type private_key: str
        """
        if private_key is None:
            raise ValueError("Invalid value for `private_key`, must not be `None`")

        self._private_key = private_key

    @property
    def public_key(self):
        """Gets the public_key of this BraintreePaymentsAllOfCredentials.

        BraintreePayments Public Key.

        :return: The public_key of this BraintreePaymentsAllOfCredentials.
        :rtype: str
        """
        return self._public_key

    @public_key.setter
    def public_key(self, public_key):
        """Sets the public_key of this BraintreePaymentsAllOfCredentials.

        BraintreePayments Public Key.

        :param public_key: The public_key of this BraintreePaymentsAllOfCredentials.
        :type public_key: str
        """
        if public_key is None:
            raise ValueError("Invalid value for `public_key`, must not be `None`")

        self._public_key = public_key
