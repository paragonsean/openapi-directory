# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class EMerchantPayAllOfSettings(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, platform: str='IPG'):
        """EMerchantPayAllOfSettings - a model defined in OpenAPI

        :param platform: The platform of this EMerchantPayAllOfSettings.
        """
        self.openapi_types = {
            'platform': str
        }

        self.attribute_map = {
            'platform': 'platform'
        }

        self._platform = platform

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EMerchantPayAllOfSettings':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The eMerchantPay_allOf_settings of this EMerchantPayAllOfSettings.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def platform(self):
        """Gets the platform of this EMerchantPayAllOfSettings.

        eMerchantPay platform to process payment.

        :return: The platform of this EMerchantPayAllOfSettings.
        :rtype: str
        """
        return self._platform

    @platform.setter
    def platform(self, platform):
        """Sets the platform of this EMerchantPayAllOfSettings.

        eMerchantPay platform to process payment.

        :param platform: The platform of this EMerchantPayAllOfSettings.
        :type platform: str
        """
        allowed_values = ["IPG", "Genesis"]  # noqa: E501
        if platform not in allowed_values:
            raise ValueError(
                "Invalid value for `platform` ({0}), must be one of {1}"
                .format(platform, allowed_values)
            )

        self._platform = platform
