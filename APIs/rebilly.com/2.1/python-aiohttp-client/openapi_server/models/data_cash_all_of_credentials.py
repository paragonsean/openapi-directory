# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DataCashAllOfCredentials(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, client: str=None, master_card_payouts_client: str=None, master_card_payouts_password: str=None, password: str=None, report_group: str=None, report_password: str=None, report_user: str=None, visa_payouts_client: str=None, visa_payouts_password: str=None):
        """DataCashAllOfCredentials - a model defined in OpenAPI

        :param client: The client of this DataCashAllOfCredentials.
        :param master_card_payouts_client: The master_card_payouts_client of this DataCashAllOfCredentials.
        :param master_card_payouts_password: The master_card_payouts_password of this DataCashAllOfCredentials.
        :param password: The password of this DataCashAllOfCredentials.
        :param report_group: The report_group of this DataCashAllOfCredentials.
        :param report_password: The report_password of this DataCashAllOfCredentials.
        :param report_user: The report_user of this DataCashAllOfCredentials.
        :param visa_payouts_client: The visa_payouts_client of this DataCashAllOfCredentials.
        :param visa_payouts_password: The visa_payouts_password of this DataCashAllOfCredentials.
        """
        self.openapi_types = {
            'client': str,
            'master_card_payouts_client': str,
            'master_card_payouts_password': str,
            'password': str,
            'report_group': str,
            'report_password': str,
            'report_user': str,
            'visa_payouts_client': str,
            'visa_payouts_password': str
        }

        self.attribute_map = {
            'client': 'client',
            'master_card_payouts_client': 'masterCardPayoutsClient',
            'master_card_payouts_password': 'masterCardPayoutsPassword',
            'password': 'password',
            'report_group': 'reportGroup',
            'report_password': 'reportPassword',
            'report_user': 'reportUser',
            'visa_payouts_client': 'visaPayoutsClient',
            'visa_payouts_password': 'visaPayoutsPassword'
        }

        self._client = client
        self._master_card_payouts_client = master_card_payouts_client
        self._master_card_payouts_password = master_card_payouts_password
        self._password = password
        self._report_group = report_group
        self._report_password = report_password
        self._report_user = report_user
        self._visa_payouts_client = visa_payouts_client
        self._visa_payouts_password = visa_payouts_password

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DataCashAllOfCredentials':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DataCash_allOf_credentials of this DataCashAllOfCredentials.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def client(self):
        """Gets the client of this DataCashAllOfCredentials.

        DataCash Gateway client.

        :return: The client of this DataCashAllOfCredentials.
        :rtype: str
        """
        return self._client

    @client.setter
    def client(self, client):
        """Sets the client of this DataCashAllOfCredentials.

        DataCash Gateway client.

        :param client: The client of this DataCashAllOfCredentials.
        :type client: str
        """
        if client is None:
            raise ValueError("Invalid value for `client`, must not be `None`")

        self._client = client

    @property
    def master_card_payouts_client(self):
        """Gets the master_card_payouts_client of this DataCashAllOfCredentials.

        DataCash Gateway client for MasterCard payouts (OCT).

        :return: The master_card_payouts_client of this DataCashAllOfCredentials.
        :rtype: str
        """
        return self._master_card_payouts_client

    @master_card_payouts_client.setter
    def master_card_payouts_client(self, master_card_payouts_client):
        """Sets the master_card_payouts_client of this DataCashAllOfCredentials.

        DataCash Gateway client for MasterCard payouts (OCT).

        :param master_card_payouts_client: The master_card_payouts_client of this DataCashAllOfCredentials.
        :type master_card_payouts_client: str
        """

        self._master_card_payouts_client = master_card_payouts_client

    @property
    def master_card_payouts_password(self):
        """Gets the master_card_payouts_password of this DataCashAllOfCredentials.

        DataCash Gateway password for MasterCard payouts (OCT).

        :return: The master_card_payouts_password of this DataCashAllOfCredentials.
        :rtype: str
        """
        return self._master_card_payouts_password

    @master_card_payouts_password.setter
    def master_card_payouts_password(self, master_card_payouts_password):
        """Sets the master_card_payouts_password of this DataCashAllOfCredentials.

        DataCash Gateway password for MasterCard payouts (OCT).

        :param master_card_payouts_password: The master_card_payouts_password of this DataCashAllOfCredentials.
        :type master_card_payouts_password: str
        """

        self._master_card_payouts_password = master_card_payouts_password

    @property
    def password(self):
        """Gets the password of this DataCashAllOfCredentials.

        DataCash Gateway password.

        :return: The password of this DataCashAllOfCredentials.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this DataCashAllOfCredentials.

        DataCash Gateway password.

        :param password: The password of this DataCashAllOfCredentials.
        :type password: str
        """
        if password is None:
            raise ValueError("Invalid value for `password`, must not be `None`")

        self._password = password

    @property
    def report_group(self):
        """Gets the report_group of this DataCashAllOfCredentials.

        DataCash report group.

        :return: The report_group of this DataCashAllOfCredentials.
        :rtype: str
        """
        return self._report_group

    @report_group.setter
    def report_group(self, report_group):
        """Sets the report_group of this DataCashAllOfCredentials.

        DataCash report group.

        :param report_group: The report_group of this DataCashAllOfCredentials.
        :type report_group: str
        """

        self._report_group = report_group

    @property
    def report_password(self):
        """Gets the report_password of this DataCashAllOfCredentials.

        DataCash report password.

        :return: The report_password of this DataCashAllOfCredentials.
        :rtype: str
        """
        return self._report_password

    @report_password.setter
    def report_password(self, report_password):
        """Sets the report_password of this DataCashAllOfCredentials.

        DataCash report password.

        :param report_password: The report_password of this DataCashAllOfCredentials.
        :type report_password: str
        """

        self._report_password = report_password

    @property
    def report_user(self):
        """Gets the report_user of this DataCashAllOfCredentials.

        DataCash report user.

        :return: The report_user of this DataCashAllOfCredentials.
        :rtype: str
        """
        return self._report_user

    @report_user.setter
    def report_user(self, report_user):
        """Sets the report_user of this DataCashAllOfCredentials.

        DataCash report user.

        :param report_user: The report_user of this DataCashAllOfCredentials.
        :type report_user: str
        """

        self._report_user = report_user

    @property
    def visa_payouts_client(self):
        """Gets the visa_payouts_client of this DataCashAllOfCredentials.

        DataCash Gateway client for Visa payouts (OCT).

        :return: The visa_payouts_client of this DataCashAllOfCredentials.
        :rtype: str
        """
        return self._visa_payouts_client

    @visa_payouts_client.setter
    def visa_payouts_client(self, visa_payouts_client):
        """Sets the visa_payouts_client of this DataCashAllOfCredentials.

        DataCash Gateway client for Visa payouts (OCT).

        :param visa_payouts_client: The visa_payouts_client of this DataCashAllOfCredentials.
        :type visa_payouts_client: str
        """

        self._visa_payouts_client = visa_payouts_client

    @property
    def visa_payouts_password(self):
        """Gets the visa_payouts_password of this DataCashAllOfCredentials.

        DataCash Gateway password for Visa payouts (OCT).

        :return: The visa_payouts_password of this DataCashAllOfCredentials.
        :rtype: str
        """
        return self._visa_payouts_password

    @visa_payouts_password.setter
    def visa_payouts_password(self, visa_payouts_password):
        """Sets the visa_payouts_password of this DataCashAllOfCredentials.

        DataCash Gateway password for Visa payouts (OCT).

        :param visa_payouts_password: The visa_payouts_password of this DataCashAllOfCredentials.
        :type visa_payouts_password: str
        """

        self._visa_payouts_password = visa_payouts_password
