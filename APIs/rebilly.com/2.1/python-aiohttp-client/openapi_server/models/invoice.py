# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.contact_object import ContactObject
from openapi_server.models.invoice_all_of_embedded import InvoiceAllOfEmbedded
from openapi_server.models.invoice_all_of_links import InvoiceAllOfLinks
from openapi_server.models.invoice_all_of_retry_instruction import InvoiceAllOfRetryInstruction
from openapi_server.models.invoice_discount import InvoiceDiscount
from openapi_server.models.invoice_item import InvoiceItem
from openapi_server.models.invoice_shipping import InvoiceShipping
from openapi_server.models.invoice_tax import InvoiceTax
from openapi_server.models.transaction import Transaction
from openapi_server import util


class Invoice(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, abandoned_time: datetime=None, amount: float=None, amount_due: float=None, autopay_retry_number: int=0, autopay_scheduled_time: datetime=None, billing_address: ContactObject=None, collection_period: int=None, created_time: datetime=None, currency: str=None, delinquent_collection_period: int=None, delivery_address: ContactObject=None, discount_amount: float=None, discounts: List[InvoiceDiscount]=None, due_time: datetime=None, id: str=None, invoice_number: int=None, issued_time: datetime=None, items: List[InvoiceItem]=None, notes: str=None, paid_time: datetime=None, payment_form_url: str=None, po_number: str=None, shipping: InvoiceShipping=None, status: str=None, subscription_id: str=None, subtotal_amount: float=None, tax: InvoiceTax=None, updated_time: datetime=None, voided_time: datetime=None, website_id: str=None, embedded: List[InvoiceAllOfEmbedded]=None, links: List[InvoiceAllOfLinks]=None, customer_id: str=None, due_reminder_number: int=None, due_reminder_time: datetime=None, retry_instruction: InvoiceAllOfRetryInstruction=None, revision: int=None, transactions: List[Transaction]=None, type: str=None):
        """Invoice - a model defined in OpenAPI

        :param abandoned_time: The abandoned_time of this Invoice.
        :param amount: The amount of this Invoice.
        :param amount_due: The amount_due of this Invoice.
        :param autopay_retry_number: The autopay_retry_number of this Invoice.
        :param autopay_scheduled_time: The autopay_scheduled_time of this Invoice.
        :param billing_address: The billing_address of this Invoice.
        :param collection_period: The collection_period of this Invoice.
        :param created_time: The created_time of this Invoice.
        :param currency: The currency of this Invoice.
        :param delinquent_collection_period: The delinquent_collection_period of this Invoice.
        :param delivery_address: The delivery_address of this Invoice.
        :param discount_amount: The discount_amount of this Invoice.
        :param discounts: The discounts of this Invoice.
        :param due_time: The due_time of this Invoice.
        :param id: The id of this Invoice.
        :param invoice_number: The invoice_number of this Invoice.
        :param issued_time: The issued_time of this Invoice.
        :param items: The items of this Invoice.
        :param notes: The notes of this Invoice.
        :param paid_time: The paid_time of this Invoice.
        :param payment_form_url: The payment_form_url of this Invoice.
        :param po_number: The po_number of this Invoice.
        :param shipping: The shipping of this Invoice.
        :param status: The status of this Invoice.
        :param subscription_id: The subscription_id of this Invoice.
        :param subtotal_amount: The subtotal_amount of this Invoice.
        :param tax: The tax of this Invoice.
        :param updated_time: The updated_time of this Invoice.
        :param voided_time: The voided_time of this Invoice.
        :param website_id: The website_id of this Invoice.
        :param embedded: The embedded of this Invoice.
        :param links: The links of this Invoice.
        :param customer_id: The customer_id of this Invoice.
        :param due_reminder_number: The due_reminder_number of this Invoice.
        :param due_reminder_time: The due_reminder_time of this Invoice.
        :param retry_instruction: The retry_instruction of this Invoice.
        :param revision: The revision of this Invoice.
        :param transactions: The transactions of this Invoice.
        :param type: The type of this Invoice.
        """
        self.openapi_types = {
            'abandoned_time': datetime,
            'amount': float,
            'amount_due': float,
            'autopay_retry_number': int,
            'autopay_scheduled_time': datetime,
            'billing_address': ContactObject,
            'collection_period': int,
            'created_time': datetime,
            'currency': str,
            'delinquent_collection_period': int,
            'delivery_address': ContactObject,
            'discount_amount': float,
            'discounts': List[InvoiceDiscount],
            'due_time': datetime,
            'id': str,
            'invoice_number': int,
            'issued_time': datetime,
            'items': List[InvoiceItem],
            'notes': str,
            'paid_time': datetime,
            'payment_form_url': str,
            'po_number': str,
            'shipping': InvoiceShipping,
            'status': str,
            'subscription_id': str,
            'subtotal_amount': float,
            'tax': InvoiceTax,
            'updated_time': datetime,
            'voided_time': datetime,
            'website_id': str,
            'embedded': List[InvoiceAllOfEmbedded],
            'links': List[InvoiceAllOfLinks],
            'customer_id': str,
            'due_reminder_number': int,
            'due_reminder_time': datetime,
            'retry_instruction': InvoiceAllOfRetryInstruction,
            'revision': int,
            'transactions': List[Transaction],
            'type': str
        }

        self.attribute_map = {
            'abandoned_time': 'abandonedTime',
            'amount': 'amount',
            'amount_due': 'amountDue',
            'autopay_retry_number': 'autopayRetryNumber',
            'autopay_scheduled_time': 'autopayScheduledTime',
            'billing_address': 'billingAddress',
            'collection_period': 'collectionPeriod',
            'created_time': 'createdTime',
            'currency': 'currency',
            'delinquent_collection_period': 'delinquentCollectionPeriod',
            'delivery_address': 'deliveryAddress',
            'discount_amount': 'discountAmount',
            'discounts': 'discounts',
            'due_time': 'dueTime',
            'id': 'id',
            'invoice_number': 'invoiceNumber',
            'issued_time': 'issuedTime',
            'items': 'items',
            'notes': 'notes',
            'paid_time': 'paidTime',
            'payment_form_url': 'paymentFormUrl',
            'po_number': 'poNumber',
            'shipping': 'shipping',
            'status': 'status',
            'subscription_id': 'subscriptionId',
            'subtotal_amount': 'subtotalAmount',
            'tax': 'tax',
            'updated_time': 'updatedTime',
            'voided_time': 'voidedTime',
            'website_id': 'websiteId',
            'embedded': '_embedded',
            'links': '_links',
            'customer_id': 'customerId',
            'due_reminder_number': 'dueReminderNumber',
            'due_reminder_time': 'dueReminderTime',
            'retry_instruction': 'retryInstruction',
            'revision': 'revision',
            'transactions': 'transactions',
            'type': 'type'
        }

        self._abandoned_time = abandoned_time
        self._amount = amount
        self._amount_due = amount_due
        self._autopay_retry_number = autopay_retry_number
        self._autopay_scheduled_time = autopay_scheduled_time
        self._billing_address = billing_address
        self._collection_period = collection_period
        self._created_time = created_time
        self._currency = currency
        self._delinquent_collection_period = delinquent_collection_period
        self._delivery_address = delivery_address
        self._discount_amount = discount_amount
        self._discounts = discounts
        self._due_time = due_time
        self._id = id
        self._invoice_number = invoice_number
        self._issued_time = issued_time
        self._items = items
        self._notes = notes
        self._paid_time = paid_time
        self._payment_form_url = payment_form_url
        self._po_number = po_number
        self._shipping = shipping
        self._status = status
        self._subscription_id = subscription_id
        self._subtotal_amount = subtotal_amount
        self._tax = tax
        self._updated_time = updated_time
        self._voided_time = voided_time
        self._website_id = website_id
        self._embedded = embedded
        self._links = links
        self._customer_id = customer_id
        self._due_reminder_number = due_reminder_number
        self._due_reminder_time = due_reminder_time
        self._retry_instruction = retry_instruction
        self._revision = revision
        self._transactions = transactions
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Invoice':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Invoice of this Invoice.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def abandoned_time(self):
        """Gets the abandoned_time of this Invoice.

        Invoice abandoned time.

        :return: The abandoned_time of this Invoice.
        :rtype: datetime
        """
        return self._abandoned_time

    @abandoned_time.setter
    def abandoned_time(self, abandoned_time):
        """Sets the abandoned_time of this Invoice.

        Invoice abandoned time.

        :param abandoned_time: The abandoned_time of this Invoice.
        :type abandoned_time: datetime
        """

        self._abandoned_time = abandoned_time

    @property
    def amount(self):
        """Gets the amount of this Invoice.

        The invoice's amount.

        :return: The amount of this Invoice.
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this Invoice.

        The invoice's amount.

        :param amount: The amount of this Invoice.
        :type amount: float
        """

        self._amount = amount

    @property
    def amount_due(self):
        """Gets the amount_due of this Invoice.

        The invoice's due amount.

        :return: The amount_due of this Invoice.
        :rtype: float
        """
        return self._amount_due

    @amount_due.setter
    def amount_due(self, amount_due):
        """Sets the amount_due of this Invoice.

        The invoice's due amount.

        :param amount_due: The amount_due of this Invoice.
        :type amount_due: float
        """

        self._amount_due = amount_due

    @property
    def autopay_retry_number(self):
        """Gets the autopay_retry_number of this Invoice.

        Invoice autopay retry number.

        :return: The autopay_retry_number of this Invoice.
        :rtype: int
        """
        return self._autopay_retry_number

    @autopay_retry_number.setter
    def autopay_retry_number(self, autopay_retry_number):
        """Sets the autopay_retry_number of this Invoice.

        Invoice autopay retry number.

        :param autopay_retry_number: The autopay_retry_number of this Invoice.
        :type autopay_retry_number: int
        """
        if autopay_retry_number is not None and autopay_retry_number < 0:
            raise ValueError("Invalid value for `autopay_retry_number`, must be a value greater than or equal to `0`")

        self._autopay_retry_number = autopay_retry_number

    @property
    def autopay_scheduled_time(self):
        """Gets the autopay_scheduled_time of this Invoice.

        Invoice autopay scheduled time.

        :return: The autopay_scheduled_time of this Invoice.
        :rtype: datetime
        """
        return self._autopay_scheduled_time

    @autopay_scheduled_time.setter
    def autopay_scheduled_time(self, autopay_scheduled_time):
        """Sets the autopay_scheduled_time of this Invoice.

        Invoice autopay scheduled time.

        :param autopay_scheduled_time: The autopay_scheduled_time of this Invoice.
        :type autopay_scheduled_time: datetime
        """

        self._autopay_scheduled_time = autopay_scheduled_time

    @property
    def billing_address(self):
        """Gets the billing_address of this Invoice.

        Invoice's billing address.

        :return: The billing_address of this Invoice.
        :rtype: ContactObject
        """
        return self._billing_address

    @billing_address.setter
    def billing_address(self, billing_address):
        """Sets the billing_address of this Invoice.

        Invoice's billing address.

        :param billing_address: The billing_address of this Invoice.
        :type billing_address: ContactObject
        """

        self._billing_address = billing_address

    @property
    def collection_period(self):
        """Gets the collection_period of this Invoice.

        Collection period - difference between paidTime and issuedTime in days.

        :return: The collection_period of this Invoice.
        :rtype: int
        """
        return self._collection_period

    @collection_period.setter
    def collection_period(self, collection_period):
        """Sets the collection_period of this Invoice.

        Collection period - difference between paidTime and issuedTime in days.

        :param collection_period: The collection_period of this Invoice.
        :type collection_period: int
        """

        self._collection_period = collection_period

    @property
    def created_time(self):
        """Gets the created_time of this Invoice.

        Invoice created time.

        :return: The created_time of this Invoice.
        :rtype: datetime
        """
        return self._created_time

    @created_time.setter
    def created_time(self, created_time):
        """Sets the created_time of this Invoice.

        Invoice created time.

        :param created_time: The created_time of this Invoice.
        :type created_time: datetime
        """

        self._created_time = created_time

    @property
    def currency(self):
        """Gets the currency of this Invoice.

        ISO 4217 alphabetic currency code.

        :return: The currency of this Invoice.
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this Invoice.

        ISO 4217 alphabetic currency code.

        :param currency: The currency of this Invoice.
        :type currency: str
        """
        if currency is None:
            raise ValueError("Invalid value for `currency`, must not be `None`")
        if currency is not None and len(currency) > 3:
            raise ValueError("Invalid value for `currency`, length must be less than or equal to `3`")
        if currency is not None and len(currency) < 3:
            raise ValueError("Invalid value for `currency`, length must be greater than or equal to `3`")

        self._currency = currency

    @property
    def delinquent_collection_period(self):
        """Gets the delinquent_collection_period of this Invoice.

        Delinquent collection period - difference between paidTime and dueTime in days.

        :return: The delinquent_collection_period of this Invoice.
        :rtype: int
        """
        return self._delinquent_collection_period

    @delinquent_collection_period.setter
    def delinquent_collection_period(self, delinquent_collection_period):
        """Sets the delinquent_collection_period of this Invoice.

        Delinquent collection period - difference between paidTime and dueTime in days.

        :param delinquent_collection_period: The delinquent_collection_period of this Invoice.
        :type delinquent_collection_period: int
        """

        self._delinquent_collection_period = delinquent_collection_period

    @property
    def delivery_address(self):
        """Gets the delivery_address of this Invoice.

        Invoice's delivery address.

        :return: The delivery_address of this Invoice.
        :rtype: ContactObject
        """
        return self._delivery_address

    @delivery_address.setter
    def delivery_address(self, delivery_address):
        """Sets the delivery_address of this Invoice.

        Invoice's delivery address.

        :param delivery_address: The delivery_address of this Invoice.
        :type delivery_address: ContactObject
        """

        self._delivery_address = delivery_address

    @property
    def discount_amount(self):
        """Gets the discount_amount of this Invoice.

        The invoice's discounts amount.

        :return: The discount_amount of this Invoice.
        :rtype: float
        """
        return self._discount_amount

    @discount_amount.setter
    def discount_amount(self, discount_amount):
        """Sets the discount_amount of this Invoice.

        The invoice's discounts amount.

        :param discount_amount: The discount_amount of this Invoice.
        :type discount_amount: float
        """

        self._discount_amount = discount_amount

    @property
    def discounts(self):
        """Gets the discounts of this Invoice.

        Discounts applied.

        :return: The discounts of this Invoice.
        :rtype: List[InvoiceDiscount]
        """
        return self._discounts

    @discounts.setter
    def discounts(self, discounts):
        """Sets the discounts of this Invoice.

        Discounts applied.

        :param discounts: The discounts of this Invoice.
        :type discounts: List[InvoiceDiscount]
        """

        self._discounts = discounts

    @property
    def due_time(self):
        """Gets the due_time of this Invoice.

        Invoice due time.

        :return: The due_time of this Invoice.
        :rtype: datetime
        """
        return self._due_time

    @due_time.setter
    def due_time(self, due_time):
        """Sets the due_time of this Invoice.

        Invoice due time.

        :param due_time: The due_time of this Invoice.
        :type due_time: datetime
        """

        self._due_time = due_time

    @property
    def id(self):
        """Gets the id of this Invoice.

        The invoice ID.

        :return: The id of this Invoice.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Invoice.

        The invoice ID.

        :param id: The id of this Invoice.
        :type id: str
        """
        if id is not None and len(id) > 50:
            raise ValueError("Invalid value for `id`, length must be less than or equal to `50`")

        self._id = id

    @property
    def invoice_number(self):
        """Gets the invoice_number of this Invoice.

        An auto-incrementing number based on the sequence of invoices for any particular customer.

        :return: The invoice_number of this Invoice.
        :rtype: int
        """
        return self._invoice_number

    @invoice_number.setter
    def invoice_number(self, invoice_number):
        """Sets the invoice_number of this Invoice.

        An auto-incrementing number based on the sequence of invoices for any particular customer.

        :param invoice_number: The invoice_number of this Invoice.
        :type invoice_number: int
        """

        self._invoice_number = invoice_number

    @property
    def issued_time(self):
        """Gets the issued_time of this Invoice.

        Invoice issued time.

        :return: The issued_time of this Invoice.
        :rtype: datetime
        """
        return self._issued_time

    @issued_time.setter
    def issued_time(self, issued_time):
        """Sets the issued_time of this Invoice.

        Invoice issued time.

        :param issued_time: The issued_time of this Invoice.
        :type issued_time: datetime
        """

        self._issued_time = issued_time

    @property
    def items(self):
        """Gets the items of this Invoice.

        Invoice items array.

        :return: The items of this Invoice.
        :rtype: List[InvoiceItem]
        """
        return self._items

    @items.setter
    def items(self, items):
        """Sets the items of this Invoice.

        Invoice items array.

        :param items: The items of this Invoice.
        :type items: List[InvoiceItem]
        """

        self._items = items

    @property
    def notes(self):
        """Gets the notes of this Invoice.

        Notes for the customer which will be displayed on the invoice.

        :return: The notes of this Invoice.
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this Invoice.

        Notes for the customer which will be displayed on the invoice.

        :param notes: The notes of this Invoice.
        :type notes: str
        """

        self._notes = notes

    @property
    def paid_time(self):
        """Gets the paid_time of this Invoice.

        Invoice paid time.

        :return: The paid_time of this Invoice.
        :rtype: datetime
        """
        return self._paid_time

    @paid_time.setter
    def paid_time(self, paid_time):
        """Sets the paid_time of this Invoice.

        Invoice paid time.

        :param paid_time: The paid_time of this Invoice.
        :type paid_time: datetime
        """

        self._paid_time = paid_time

    @property
    def payment_form_url(self):
        """Gets the payment_form_url of this Invoice.

        URL where the customer can be redirected to pay for the invoice with one of the methods which are available for this customer. It's an alternative to creating a new transaction with empty `methods`. 

        :return: The payment_form_url of this Invoice.
        :rtype: str
        """
        return self._payment_form_url

    @payment_form_url.setter
    def payment_form_url(self, payment_form_url):
        """Sets the payment_form_url of this Invoice.

        URL where the customer can be redirected to pay for the invoice with one of the methods which are available for this customer. It's an alternative to creating a new transaction with empty `methods`. 

        :param payment_form_url: The payment_form_url of this Invoice.
        :type payment_form_url: str
        """

        self._payment_form_url = payment_form_url

    @property
    def po_number(self):
        """Gets the po_number of this Invoice.

        Purchase order number which will be displayed on the invoice.

        :return: The po_number of this Invoice.
        :rtype: str
        """
        return self._po_number

    @po_number.setter
    def po_number(self, po_number):
        """Sets the po_number of this Invoice.

        Purchase order number which will be displayed on the invoice.

        :param po_number: The po_number of this Invoice.
        :type po_number: str
        """

        self._po_number = po_number

    @property
    def shipping(self):
        """Gets the shipping of this Invoice.


        :return: The shipping of this Invoice.
        :rtype: InvoiceShipping
        """
        return self._shipping

    @shipping.setter
    def shipping(self, shipping):
        """Sets the shipping of this Invoice.


        :param shipping: The shipping of this Invoice.
        :type shipping: InvoiceShipping
        """

        self._shipping = shipping

    @property
    def status(self):
        """Gets the status of this Invoice.

        Invoice status.

        :return: The status of this Invoice.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Invoice.

        Invoice status.

        :param status: The status of this Invoice.
        :type status: str
        """
        allowed_values = ["draft", "unpaid", "paid", "past-due", "delinquent", "abandoned", "voided", "partially-refunded", "refunded", "disputed"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def subscription_id(self):
        """Gets the subscription_id of this Invoice.

        The related order's ID if available, otherwise null.

        :return: The subscription_id of this Invoice.
        :rtype: str
        """
        return self._subscription_id

    @subscription_id.setter
    def subscription_id(self, subscription_id):
        """Sets the subscription_id of this Invoice.

        The related order's ID if available, otherwise null.

        :param subscription_id: The subscription_id of this Invoice.
        :type subscription_id: str
        """
        if subscription_id is not None and len(subscription_id) > 50:
            raise ValueError("Invalid value for `subscription_id`, length must be less than or equal to `50`")

        self._subscription_id = subscription_id

    @property
    def subtotal_amount(self):
        """Gets the subtotal_amount of this Invoice.

        The invoice's subtotal amount.

        :return: The subtotal_amount of this Invoice.
        :rtype: float
        """
        return self._subtotal_amount

    @subtotal_amount.setter
    def subtotal_amount(self, subtotal_amount):
        """Sets the subtotal_amount of this Invoice.

        The invoice's subtotal amount.

        :param subtotal_amount: The subtotal_amount of this Invoice.
        :type subtotal_amount: float
        """

        self._subtotal_amount = subtotal_amount

    @property
    def tax(self):
        """Gets the tax of this Invoice.


        :return: The tax of this Invoice.
        :rtype: InvoiceTax
        """
        return self._tax

    @tax.setter
    def tax(self, tax):
        """Sets the tax of this Invoice.


        :param tax: The tax of this Invoice.
        :type tax: InvoiceTax
        """

        self._tax = tax

    @property
    def updated_time(self):
        """Gets the updated_time of this Invoice.

        Invoice updated time.

        :return: The updated_time of this Invoice.
        :rtype: datetime
        """
        return self._updated_time

    @updated_time.setter
    def updated_time(self, updated_time):
        """Sets the updated_time of this Invoice.

        Invoice updated time.

        :param updated_time: The updated_time of this Invoice.
        :type updated_time: datetime
        """

        self._updated_time = updated_time

    @property
    def voided_time(self):
        """Gets the voided_time of this Invoice.

        Invoice voided time.

        :return: The voided_time of this Invoice.
        :rtype: datetime
        """
        return self._voided_time

    @voided_time.setter
    def voided_time(self, voided_time):
        """Sets the voided_time of this Invoice.

        Invoice voided time.

        :param voided_time: The voided_time of this Invoice.
        :type voided_time: datetime
        """

        self._voided_time = voided_time

    @property
    def website_id(self):
        """Gets the website_id of this Invoice.

        The website ID.

        :return: The website_id of this Invoice.
        :rtype: str
        """
        return self._website_id

    @website_id.setter
    def website_id(self, website_id):
        """Sets the website_id of this Invoice.

        The website ID.

        :param website_id: The website_id of this Invoice.
        :type website_id: str
        """
        if website_id is None:
            raise ValueError("Invalid value for `website_id`, must not be `None`")
        if website_id is not None and len(website_id) > 50:
            raise ValueError("Invalid value for `website_id`, length must be less than or equal to `50`")

        self._website_id = website_id

    @property
    def embedded(self):
        """Gets the embedded of this Invoice.

        Any embedded objects available that are requested by the `expand` querystring parameter.

        :return: The embedded of this Invoice.
        :rtype: List[InvoiceAllOfEmbedded]
        """
        return self._embedded

    @embedded.setter
    def embedded(self, embedded):
        """Sets the embedded of this Invoice.

        Any embedded objects available that are requested by the `expand` querystring parameter.

        :param embedded: The embedded of this Invoice.
        :type embedded: List[InvoiceAllOfEmbedded]
        """
        if embedded is not None and len(embedded) < 1:
            raise ValueError("Invalid value for `embedded`, number of items must be greater than or equal to `1`")

        self._embedded = embedded

    @property
    def links(self):
        """Gets the links of this Invoice.

        The links related to resource.

        :return: The links of this Invoice.
        :rtype: List[InvoiceAllOfLinks]
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this Invoice.

        The links related to resource.

        :param links: The links of this Invoice.
        :type links: List[InvoiceAllOfLinks]
        """
        if links is not None and len(links) < 1:
            raise ValueError("Invalid value for `links`, number of items must be greater than or equal to `1`")

        self._links = links

    @property
    def customer_id(self):
        """Gets the customer_id of this Invoice.

        The сustomer's ID.

        :return: The customer_id of this Invoice.
        :rtype: str
        """
        return self._customer_id

    @customer_id.setter
    def customer_id(self, customer_id):
        """Sets the customer_id of this Invoice.

        The сustomer's ID.

        :param customer_id: The customer_id of this Invoice.
        :type customer_id: str
        """
        if customer_id is None:
            raise ValueError("Invalid value for `customer_id`, must not be `None`")
        if customer_id is not None and len(customer_id) > 50:
            raise ValueError("Invalid value for `customer_id`, length must be less than or equal to `50`")

        self._customer_id = customer_id

    @property
    def due_reminder_number(self):
        """Gets the due_reminder_number of this Invoice.

        Number of past due reminder events triggered.

        :return: The due_reminder_number of this Invoice.
        :rtype: int
        """
        return self._due_reminder_number

    @due_reminder_number.setter
    def due_reminder_number(self, due_reminder_number):
        """Sets the due_reminder_number of this Invoice.

        Number of past due reminder events triggered.

        :param due_reminder_number: The due_reminder_number of this Invoice.
        :type due_reminder_number: int
        """

        self._due_reminder_number = due_reminder_number

    @property
    def due_reminder_time(self):
        """Gets the due_reminder_time of this Invoice.

        Time past due reminder event will be triggered.

        :return: The due_reminder_time of this Invoice.
        :rtype: datetime
        """
        return self._due_reminder_time

    @due_reminder_time.setter
    def due_reminder_time(self, due_reminder_time):
        """Sets the due_reminder_time of this Invoice.

        Time past due reminder event will be triggered.

        :param due_reminder_time: The due_reminder_time of this Invoice.
        :type due_reminder_time: datetime
        """

        self._due_reminder_time = due_reminder_time

    @property
    def retry_instruction(self):
        """Gets the retry_instruction of this Invoice.


        :return: The retry_instruction of this Invoice.
        :rtype: InvoiceAllOfRetryInstruction
        """
        return self._retry_instruction

    @retry_instruction.setter
    def retry_instruction(self, retry_instruction):
        """Sets the retry_instruction of this Invoice.


        :param retry_instruction: The retry_instruction of this Invoice.
        :type retry_instruction: InvoiceAllOfRetryInstruction
        """

        self._retry_instruction = retry_instruction

    @property
    def revision(self):
        """Gets the revision of this Invoice.

        The number of times the invoice data has been modified. The revision is useful when analyzing webhook data to determine if the change takes precedence over the current representation. 

        :return: The revision of this Invoice.
        :rtype: int
        """
        return self._revision

    @revision.setter
    def revision(self, revision):
        """Sets the revision of this Invoice.

        The number of times the invoice data has been modified. The revision is useful when analyzing webhook data to determine if the change takes precedence over the current representation. 

        :param revision: The revision of this Invoice.
        :type revision: int
        """

        self._revision = revision

    @property
    def transactions(self):
        """Gets the transactions of this Invoice.

        Invoice transactions array.

        :return: The transactions of this Invoice.
        :rtype: List[Transaction]
        """
        return self._transactions

    @transactions.setter
    def transactions(self, transactions):
        """Sets the transactions of this Invoice.

        Invoice transactions array.

        :param transactions: The transactions of this Invoice.
        :type transactions: List[Transaction]
        """

        self._transactions = transactions

    @property
    def type(self):
        """Gets the type of this Invoice.

        Invoice type.

        :return: The type of this Invoice.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Invoice.

        Invoice type.

        :param type: The type of this Invoice.
        :type type: str
        """
        allowed_values = ["initial", "renewal", "interim", "cancellation", "one-time", "refund", "charge"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
