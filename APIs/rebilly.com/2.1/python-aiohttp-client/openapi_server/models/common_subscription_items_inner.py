# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.flexible_plan import FlexiblePlan
from openapi_server import util


class CommonSubscriptionItemsInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, is_grandfathered: bool=None, is_modified: bool=None, plan: FlexiblePlan=None, plan_id: str=None, quantity: int=None, revision: int=None):
        """CommonSubscriptionItemsInner - a model defined in OpenAPI

        :param is_grandfathered: The is_grandfathered of this CommonSubscriptionItemsInner.
        :param is_modified: The is_modified of this CommonSubscriptionItemsInner.
        :param plan: The plan of this CommonSubscriptionItemsInner.
        :param plan_id: The plan_id of this CommonSubscriptionItemsInner.
        :param quantity: The quantity of this CommonSubscriptionItemsInner.
        :param revision: The revision of this CommonSubscriptionItemsInner.
        """
        self.openapi_types = {
            'is_grandfathered': bool,
            'is_modified': bool,
            'plan': FlexiblePlan,
            'plan_id': str,
            'quantity': int,
            'revision': int
        }

        self.attribute_map = {
            'is_grandfathered': 'isGrandfathered',
            'is_modified': 'isModified',
            'plan': 'plan',
            'plan_id': 'planId',
            'quantity': 'quantity',
            'revision': 'revision'
        }

        self._is_grandfathered = is_grandfathered
        self._is_modified = is_modified
        self._plan = plan
        self._plan_id = plan_id
        self._quantity = quantity
        self._revision = revision

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CommonSubscriptionItemsInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CommonSubscription_items_inner of this CommonSubscriptionItemsInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def is_grandfathered(self):
        """Gets the is_grandfathered of this CommonSubscriptionItemsInner.

        Indicates if the plan's current revision is greater than this item's plan revision.

        :return: The is_grandfathered of this CommonSubscriptionItemsInner.
        :rtype: bool
        """
        return self._is_grandfathered

    @is_grandfathered.setter
    def is_grandfathered(self, is_grandfathered):
        """Sets the is_grandfathered of this CommonSubscriptionItemsInner.

        Indicates if the plan's current revision is greater than this item's plan revision.

        :param is_grandfathered: The is_grandfathered of this CommonSubscriptionItemsInner.
        :type is_grandfathered: bool
        """

        self._is_grandfathered = is_grandfathered

    @property
    def is_modified(self):
        """Gets the is_modified of this CommonSubscriptionItemsInner.

        Indicates if the plan information was modified for this subscription.

        :return: The is_modified of this CommonSubscriptionItemsInner.
        :rtype: bool
        """
        return self._is_modified

    @is_modified.setter
    def is_modified(self, is_modified):
        """Sets the is_modified of this CommonSubscriptionItemsInner.

        Indicates if the plan information was modified for this subscription.

        :param is_modified: The is_modified of this CommonSubscriptionItemsInner.
        :type is_modified: bool
        """

        self._is_modified = is_modified

    @property
    def plan(self):
        """Gets the plan of this CommonSubscriptionItemsInner.


        :return: The plan of this CommonSubscriptionItemsInner.
        :rtype: FlexiblePlan
        """
        return self._plan

    @plan.setter
    def plan(self, plan):
        """Sets the plan of this CommonSubscriptionItemsInner.


        :param plan: The plan of this CommonSubscriptionItemsInner.
        :type plan: FlexiblePlan
        """
        if plan is None:
            raise ValueError("Invalid value for `plan`, must not be `None`")

        self._plan = plan

    @property
    def plan_id(self):
        """Gets the plan_id of this CommonSubscriptionItemsInner.

        The plan identifier string.

        :return: The plan_id of this CommonSubscriptionItemsInner.
        :rtype: str
        """
        return self._plan_id

    @plan_id.setter
    def plan_id(self, plan_id):
        """Sets the plan_id of this CommonSubscriptionItemsInner.

        The plan identifier string.

        :param plan_id: The plan_id of this CommonSubscriptionItemsInner.
        :type plan_id: str
        """
        if plan_id is not None and len(plan_id) > 50:
            raise ValueError("Invalid value for `plan_id`, length must be less than or equal to `50`")

        self._plan_id = plan_id

    @property
    def quantity(self):
        """Gets the quantity of this CommonSubscriptionItemsInner.

        Number of units of the product on the given plan.

        :return: The quantity of this CommonSubscriptionItemsInner.
        :rtype: int
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this CommonSubscriptionItemsInner.

        Number of units of the product on the given plan.

        :param quantity: The quantity of this CommonSubscriptionItemsInner.
        :type quantity: int
        """

        self._quantity = quantity

    @property
    def revision(self):
        """Gets the revision of this CommonSubscriptionItemsInner.

        Increments with each override change to this specific item.

        :return: The revision of this CommonSubscriptionItemsInner.
        :rtype: int
        """
        return self._revision

    @revision.setter
    def revision(self, revision):
        """Sets the revision of this CommonSubscriptionItemsInner.

        Increments with each override change to this specific item.

        :param revision: The revision of this CommonSubscriptionItemsInner.
        :type revision: int
        """

        self._revision = revision
