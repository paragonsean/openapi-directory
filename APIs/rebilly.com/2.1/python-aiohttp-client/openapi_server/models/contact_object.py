# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.contact_emails_inner import ContactEmailsInner
from openapi_server.models.contact_phone_numbers_inner import ContactPhoneNumbersInner
import re
from openapi_server import util


class ContactObject(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, address: str=None, address2: str=None, city: str=None, country: str=None, emails: List[ContactEmailsInner]=None, first_name: str=None, hash: str=None, last_name: str=None, organization: str=None, phone_numbers: List[ContactPhoneNumbersInner]=None, postal_code: str=None, region: str=None):
        """ContactObject - a model defined in OpenAPI

        :param address: The address of this ContactObject.
        :param address2: The address2 of this ContactObject.
        :param city: The city of this ContactObject.
        :param country: The country of this ContactObject.
        :param emails: The emails of this ContactObject.
        :param first_name: The first_name of this ContactObject.
        :param hash: The hash of this ContactObject.
        :param last_name: The last_name of this ContactObject.
        :param organization: The organization of this ContactObject.
        :param phone_numbers: The phone_numbers of this ContactObject.
        :param postal_code: The postal_code of this ContactObject.
        :param region: The region of this ContactObject.
        """
        self.openapi_types = {
            'address': str,
            'address2': str,
            'city': str,
            'country': str,
            'emails': List[ContactEmailsInner],
            'first_name': str,
            'hash': str,
            'last_name': str,
            'organization': str,
            'phone_numbers': List[ContactPhoneNumbersInner],
            'postal_code': str,
            'region': str
        }

        self.attribute_map = {
            'address': 'address',
            'address2': 'address2',
            'city': 'city',
            'country': 'country',
            'emails': 'emails',
            'first_name': 'firstName',
            'hash': 'hash',
            'last_name': 'lastName',
            'organization': 'organization',
            'phone_numbers': 'phoneNumbers',
            'postal_code': 'postalCode',
            'region': 'region'
        }

        self._address = address
        self._address2 = address2
        self._city = city
        self._country = country
        self._emails = emails
        self._first_name = first_name
        self._hash = hash
        self._last_name = last_name
        self._organization = organization
        self._phone_numbers = phone_numbers
        self._postal_code = postal_code
        self._region = region

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ContactObject':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ContactObject of this ContactObject.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def address(self):
        """Gets the address of this ContactObject.

        The contact street address.

        :return: The address of this ContactObject.
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this ContactObject.

        The contact street address.

        :param address: The address of this ContactObject.
        :type address: str
        """
        if address is not None and len(address) > 60:
            raise ValueError("Invalid value for `address`, length must be less than or equal to `60`")
        if address is not None and not re.search(r'^[\w\s\-\/\pL,.#;:()\']+$', address):
            raise ValueError("Invalid value for `address`, must be a follow pattern or equal to `/^[\w\s\-\/\pL,.#;:()']+$/`")

        self._address = address

    @property
    def address2(self):
        """Gets the address2 of this ContactObject.

        The contact street address (second line).

        :return: The address2 of this ContactObject.
        :rtype: str
        """
        return self._address2

    @address2.setter
    def address2(self, address2):
        """Sets the address2 of this ContactObject.

        The contact street address (second line).

        :param address2: The address2 of this ContactObject.
        :type address2: str
        """
        if address2 is not None and len(address2) > 60:
            raise ValueError("Invalid value for `address2`, length must be less than or equal to `60`")
        if address2 is not None and not re.search(r'^[\w\s\-\/\pL,.#;:()\']+$', address2):
            raise ValueError("Invalid value for `address2`, must be a follow pattern or equal to `/^[\w\s\-\/\pL,.#;:()']+$/`")

        self._address2 = address2

    @property
    def city(self):
        """Gets the city of this ContactObject.

        The contact city.

        :return: The city of this ContactObject.
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this ContactObject.

        The contact city.

        :param city: The city of this ContactObject.
        :type city: str
        """
        if city is not None and len(city) > 45:
            raise ValueError("Invalid value for `city`, length must be less than or equal to `45`")
        if city is not None and not re.search(r'^[\w\s\-\pL,.\']+$', city):
            raise ValueError("Invalid value for `city`, must be a follow pattern or equal to `/^[\w\s\-\pL,.']+$/`")

        self._city = city

    @property
    def country(self):
        """Gets the country of this ContactObject.

        The contact country ISO Alpha-2 code.

        :return: The country of this ContactObject.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this ContactObject.

        The contact country ISO Alpha-2 code.

        :param country: The country of this ContactObject.
        :type country: str
        """
        if country is not None and len(country) > 2:
            raise ValueError("Invalid value for `country`, length must be less than or equal to `2`")
        if country is not None and not re.search(r'^[A-Z]{2}$', country):
            raise ValueError("Invalid value for `country`, must be a follow pattern or equal to `/^[A-Z]{2}$/`")

        self._country = country

    @property
    def emails(self):
        """Gets the emails of this ContactObject.

        The list of emails.

        :return: The emails of this ContactObject.
        :rtype: List[ContactEmailsInner]
        """
        return self._emails

    @emails.setter
    def emails(self, emails):
        """Sets the emails of this ContactObject.

        The list of emails.

        :param emails: The emails of this ContactObject.
        :type emails: List[ContactEmailsInner]
        """

        self._emails = emails

    @property
    def first_name(self):
        """Gets the first_name of this ContactObject.

        The contact first name.

        :return: The first_name of this ContactObject.
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this ContactObject.

        The contact first name.

        :param first_name: The first_name of this ContactObject.
        :type first_name: str
        """
        if first_name is not None and len(first_name) > 45:
            raise ValueError("Invalid value for `first_name`, length must be less than or equal to `45`")
        if first_name is not None and not re.search(r'^[\w\s\-\pL,.\']+$', first_name):
            raise ValueError("Invalid value for `first_name`, must be a follow pattern or equal to `/^[\w\s\-\pL,.']+$/`")

        self._first_name = first_name

    @property
    def hash(self):
        """Gets the hash of this ContactObject.

        A hash that can be used to compare multiple contacts for identical attribute values.

        :return: The hash of this ContactObject.
        :rtype: str
        """
        return self._hash

    @hash.setter
    def hash(self, hash):
        """Sets the hash of this ContactObject.

        A hash that can be used to compare multiple contacts for identical attribute values.

        :param hash: The hash of this ContactObject.
        :type hash: str
        """
        if hash is not None and len(hash) > 40:
            raise ValueError("Invalid value for `hash`, length must be less than or equal to `40`")

        self._hash = hash

    @property
    def last_name(self):
        """Gets the last_name of this ContactObject.

        The contact last name.

        :return: The last_name of this ContactObject.
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this ContactObject.

        The contact last name.

        :param last_name: The last_name of this ContactObject.
        :type last_name: str
        """
        if last_name is not None and len(last_name) > 45:
            raise ValueError("Invalid value for `last_name`, length must be less than or equal to `45`")
        if last_name is not None and not re.search(r'^[\w\s\-\pL,.\']+$', last_name):
            raise ValueError("Invalid value for `last_name`, must be a follow pattern or equal to `/^[\w\s\-\pL,.']+$/`")

        self._last_name = last_name

    @property
    def organization(self):
        """Gets the organization of this ContactObject.

        The contact organization.

        :return: The organization of this ContactObject.
        :rtype: str
        """
        return self._organization

    @organization.setter
    def organization(self, organization):
        """Sets the organization of this ContactObject.

        The contact organization.

        :param organization: The organization of this ContactObject.
        :type organization: str
        """
        if organization is not None and len(organization) > 255:
            raise ValueError("Invalid value for `organization`, length must be less than or equal to `255`")
        if organization is not None and not re.search(r'^[\w\s\-\pL,.\']+$', organization):
            raise ValueError("Invalid value for `organization`, must be a follow pattern or equal to `/^[\w\s\-\pL,.']+$/`")

        self._organization = organization

    @property
    def phone_numbers(self):
        """Gets the phone_numbers of this ContactObject.

        The list of phone numbers.

        :return: The phone_numbers of this ContactObject.
        :rtype: List[ContactPhoneNumbersInner]
        """
        return self._phone_numbers

    @phone_numbers.setter
    def phone_numbers(self, phone_numbers):
        """Sets the phone_numbers of this ContactObject.

        The list of phone numbers.

        :param phone_numbers: The phone_numbers of this ContactObject.
        :type phone_numbers: List[ContactPhoneNumbersInner]
        """

        self._phone_numbers = phone_numbers

    @property
    def postal_code(self):
        """Gets the postal_code of this ContactObject.

        The contact postal code.

        :return: The postal_code of this ContactObject.
        :rtype: str
        """
        return self._postal_code

    @postal_code.setter
    def postal_code(self, postal_code):
        """Sets the postal_code of this ContactObject.

        The contact postal code.

        :param postal_code: The postal_code of this ContactObject.
        :type postal_code: str
        """
        if postal_code is not None and len(postal_code) > 10:
            raise ValueError("Invalid value for `postal_code`, length must be less than or equal to `10`")
        if postal_code is not None and not re.search(r'^[\w\s\-]+$', postal_code):
            raise ValueError("Invalid value for `postal_code`, must be a follow pattern or equal to `/^[\w\s\-]+$/`")

        self._postal_code = postal_code

    @property
    def region(self):
        """Gets the region of this ContactObject.

        The contact region (state).

        :return: The region of this ContactObject.
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this ContactObject.

        The contact region (state).

        :param region: The region of this ContactObject.
        :type region: str
        """
        if region is not None and len(region) > 45:
            raise ValueError("Invalid value for `region`, length must be less than or equal to `45`")
        if region is not None and not re.search(r'^[\w\s\-\/\pL,.#;:()\']+$', region):
            raise ValueError("Invalid value for `region`, must be a follow pattern or equal to `/^[\w\s\-\/\pL,.#;:()']+$/`")

        self._region = region
