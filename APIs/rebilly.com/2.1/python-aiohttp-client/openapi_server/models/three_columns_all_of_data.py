# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ThreeColumnsAllOfData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, attribute: str=None, new_value: str=None, previous_value: str=None):
        """ThreeColumnsAllOfData - a model defined in OpenAPI

        :param attribute: The attribute of this ThreeColumnsAllOfData.
        :param new_value: The new_value of this ThreeColumnsAllOfData.
        :param previous_value: The previous_value of this ThreeColumnsAllOfData.
        """
        self.openapi_types = {
            'attribute': str,
            'new_value': str,
            'previous_value': str
        }

        self.attribute_map = {
            'attribute': 'attribute',
            'new_value': 'newValue',
            'previous_value': 'previousValue'
        }

        self._attribute = attribute
        self._new_value = new_value
        self._previous_value = previous_value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ThreeColumnsAllOfData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The three_columns_allOf_data of this ThreeColumnsAllOfData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def attribute(self):
        """Gets the attribute of this ThreeColumnsAllOfData.


        :return: The attribute of this ThreeColumnsAllOfData.
        :rtype: str
        """
        return self._attribute

    @attribute.setter
    def attribute(self, attribute):
        """Sets the attribute of this ThreeColumnsAllOfData.


        :param attribute: The attribute of this ThreeColumnsAllOfData.
        :type attribute: str
        """

        self._attribute = attribute

    @property
    def new_value(self):
        """Gets the new_value of this ThreeColumnsAllOfData.


        :return: The new_value of this ThreeColumnsAllOfData.
        :rtype: str
        """
        return self._new_value

    @new_value.setter
    def new_value(self, new_value):
        """Sets the new_value of this ThreeColumnsAllOfData.


        :param new_value: The new_value of this ThreeColumnsAllOfData.
        :type new_value: str
        """

        self._new_value = new_value

    @property
    def previous_value(self):
        """Gets the previous_value of this ThreeColumnsAllOfData.


        :return: The previous_value of this ThreeColumnsAllOfData.
        :rtype: str
        """
        return self._previous_value

    @previous_value.setter
    def previous_value(self, previous_value):
        """Sets the previous_value of this ThreeColumnsAllOfData.


        :param previous_value: The previous_value of this ThreeColumnsAllOfData.
        :type previous_value: str
        """

        self._previous_value = previous_value
