# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.a1_gateway3ds_servers import A1Gateway3dsServers
from openapi_server.models.e_merchant_pay3ds_servers import EMerchantPay3dsServers
from openapi_server.models.get3ds_servers import GET3dsServers
from openapi_server.models.nmi3ds_servers import NMI3dsServers
from openapi_server.models.payvision3ds_servers import Payvision3dsServers
from openapi_server.models.three_d_secure_server_name import ThreeDSecureServerName
from openapi_server.models.vantiv_litle3ds_servers import VantivLitle3dsServers
from openapi_server.models.walpay3ds_servers import Walpay3dsServers
from openapi_server.models.worldpay3ds_servers import Worldpay3dsServers
from openapi_server import util


class Paay3dsServer(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: ThreeDSecureServerName=None, api_key: str=None, mpi_url: str=None, sandbox_mpi_url: str=None, secret: str=None):
        """Paay3dsServer - a model defined in OpenAPI

        :param name: The name of this Paay3dsServer.
        :param api_key: The api_key of this Paay3dsServer.
        :param mpi_url: The mpi_url of this Paay3dsServer.
        :param sandbox_mpi_url: The sandbox_mpi_url of this Paay3dsServer.
        :param secret: The secret of this Paay3dsServer.
        """
        self.openapi_types = {
            'name': ThreeDSecureServerName,
            'api_key': str,
            'mpi_url': str,
            'sandbox_mpi_url': str,
            'secret': str
        }

        self.attribute_map = {
            'name': 'name',
            'api_key': 'apiKey',
            'mpi_url': 'mpiUrl',
            'sandbox_mpi_url': 'sandboxMpiUrl',
            'secret': 'secret'
        }

        self._name = name
        self._api_key = api_key
        self._mpi_url = mpi_url
        self._sandbox_mpi_url = sandbox_mpi_url
        self._secret = secret

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Paay3dsServer':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Paay3dsServer of this Paay3dsServer.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this Paay3dsServer.


        :return: The name of this Paay3dsServer.
        :rtype: ThreeDSecureServerName
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Paay3dsServer.


        :param name: The name of this Paay3dsServer.
        :type name: ThreeDSecureServerName
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def api_key(self):
        """Gets the api_key of this Paay3dsServer.

        Paay ApiKey.

        :return: The api_key of this Paay3dsServer.
        :rtype: str
        """
        return self._api_key

    @api_key.setter
    def api_key(self, api_key):
        """Sets the api_key of this Paay3dsServer.

        Paay ApiKey.

        :param api_key: The api_key of this Paay3dsServer.
        :type api_key: str
        """
        if api_key is None:
            raise ValueError("Invalid value for `api_key`, must not be `None`")

        self._api_key = api_key

    @property
    def mpi_url(self):
        """Gets the mpi_url of this Paay3dsServer.

        Paay 3DS Server url.

        :return: The mpi_url of this Paay3dsServer.
        :rtype: str
        """
        return self._mpi_url

    @mpi_url.setter
    def mpi_url(self, mpi_url):
        """Sets the mpi_url of this Paay3dsServer.

        Paay 3DS Server url.

        :param mpi_url: The mpi_url of this Paay3dsServer.
        :type mpi_url: str
        """
        if mpi_url is None:
            raise ValueError("Invalid value for `mpi_url`, must not be `None`")

        self._mpi_url = mpi_url

    @property
    def sandbox_mpi_url(self):
        """Gets the sandbox_mpi_url of this Paay3dsServer.

        Paay sandbox 3DS Server url.

        :return: The sandbox_mpi_url of this Paay3dsServer.
        :rtype: str
        """
        return self._sandbox_mpi_url

    @sandbox_mpi_url.setter
    def sandbox_mpi_url(self, sandbox_mpi_url):
        """Sets the sandbox_mpi_url of this Paay3dsServer.

        Paay sandbox 3DS Server url.

        :param sandbox_mpi_url: The sandbox_mpi_url of this Paay3dsServer.
        :type sandbox_mpi_url: str
        """
        if sandbox_mpi_url is None:
            raise ValueError("Invalid value for `sandbox_mpi_url`, must not be `None`")

        self._sandbox_mpi_url = sandbox_mpi_url

    @property
    def secret(self):
        """Gets the secret of this Paay3dsServer.

        Paay secret.

        :return: The secret of this Paay3dsServer.
        :rtype: str
        """
        return self._secret

    @secret.setter
    def secret(self, secret):
        """Sets the secret of this Paay3dsServer.

        Paay secret.

        :param secret: The secret of this Paay3dsServer.
        :type secret: str
        """
        if secret is None:
            raise ValueError("Invalid value for `secret`, must not be `None`")

        self._secret = secret
