# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.self_link import SelfLink
from openapi_server.models.timeline_extra_data import TimelineExtraData
from openapi_server import util


class CustomerTimeline(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, links: List[SelfLink]=None, custom_data: object=None, custom_event_type: str=None, extra_data: TimelineExtraData=None, id: str=None, message: str=None, occurred_time: datetime=None, triggered_by: str=None, type: str=None):
        """CustomerTimeline - a model defined in OpenAPI

        :param links: The links of this CustomerTimeline.
        :param custom_data: The custom_data of this CustomerTimeline.
        :param custom_event_type: The custom_event_type of this CustomerTimeline.
        :param extra_data: The extra_data of this CustomerTimeline.
        :param id: The id of this CustomerTimeline.
        :param message: The message of this CustomerTimeline.
        :param occurred_time: The occurred_time of this CustomerTimeline.
        :param triggered_by: The triggered_by of this CustomerTimeline.
        :param type: The type of this CustomerTimeline.
        """
        self.openapi_types = {
            'links': List[SelfLink],
            'custom_data': object,
            'custom_event_type': str,
            'extra_data': TimelineExtraData,
            'id': str,
            'message': str,
            'occurred_time': datetime,
            'triggered_by': str,
            'type': str
        }

        self.attribute_map = {
            'links': '_links',
            'custom_data': 'customData',
            'custom_event_type': 'customEventType',
            'extra_data': 'extraData',
            'id': 'id',
            'message': 'message',
            'occurred_time': 'occurredTime',
            'triggered_by': 'triggeredBy',
            'type': 'type'
        }

        self._links = links
        self._custom_data = custom_data
        self._custom_event_type = custom_event_type
        self._extra_data = extra_data
        self._id = id
        self._message = message
        self._occurred_time = occurred_time
        self._triggered_by = triggered_by
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CustomerTimeline':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CustomerTimeline of this CustomerTimeline.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def links(self):
        """Gets the links of this CustomerTimeline.

        The links related to resource.

        :return: The links of this CustomerTimeline.
        :rtype: List[SelfLink]
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this CustomerTimeline.

        The links related to resource.

        :param links: The links of this CustomerTimeline.
        :type links: List[SelfLink]
        """
        if links is not None and len(links) < 1:
            raise ValueError("Invalid value for `links`, number of items must be greater than or equal to `1`")

        self._links = links

    @property
    def custom_data(self):
        """Gets the custom_data of this CustomerTimeline.

        Timeline custom event data. Used with `custom-event` type. Will be transformed to `extraData` two-column table in response.

        :return: The custom_data of this CustomerTimeline.
        :rtype: object
        """
        return self._custom_data

    @custom_data.setter
    def custom_data(self, custom_data):
        """Sets the custom_data of this CustomerTimeline.

        Timeline custom event data. Used with `custom-event` type. Will be transformed to `extraData` two-column table in response.

        :param custom_data: The custom_data of this CustomerTimeline.
        :type custom_data: object
        """

        self._custom_data = custom_data

    @property
    def custom_event_type(self):
        """Gets the custom_event_type of this CustomerTimeline.

        Timeline custom event type. Used with `custom-event` type. Must be defined using [Customer Timeline custom event API](#operation/PostCustomerTimelineCustomEventType).

        :return: The custom_event_type of this CustomerTimeline.
        :rtype: str
        """
        return self._custom_event_type

    @custom_event_type.setter
    def custom_event_type(self, custom_event_type):
        """Sets the custom_event_type of this CustomerTimeline.

        Timeline custom event type. Used with `custom-event` type. Must be defined using [Customer Timeline custom event API](#operation/PostCustomerTimelineCustomEventType).

        :param custom_event_type: The custom_event_type of this CustomerTimeline.
        :type custom_event_type: str
        """
        if custom_event_type is not None and len(custom_event_type) > 255:
            raise ValueError("Invalid value for `custom_event_type`, length must be less than or equal to `255`")
        if custom_event_type is not None and len(custom_event_type) < 1:
            raise ValueError("Invalid value for `custom_event_type`, length must be greater than or equal to `1`")

        self._custom_event_type = custom_event_type

    @property
    def extra_data(self):
        """Gets the extra_data of this CustomerTimeline.


        :return: The extra_data of this CustomerTimeline.
        :rtype: TimelineExtraData
        """
        return self._extra_data

    @extra_data.setter
    def extra_data(self, extra_data):
        """Sets the extra_data of this CustomerTimeline.


        :param extra_data: The extra_data of this CustomerTimeline.
        :type extra_data: TimelineExtraData
        """

        self._extra_data = extra_data

    @property
    def id(self):
        """Gets the id of this CustomerTimeline.

        The Timeline message identifier string.

        :return: The id of this CustomerTimeline.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CustomerTimeline.

        The Timeline message identifier string.

        :param id: The id of this CustomerTimeline.
        :type id: str
        """
        if id is not None and len(id) > 50:
            raise ValueError("Invalid value for `id`, length must be less than or equal to `50`")

        self._id = id

    @property
    def message(self):
        """Gets the message of this CustomerTimeline.

        The message that describes the message details.

        :return: The message of this CustomerTimeline.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this CustomerTimeline.

        The message that describes the message details.

        :param message: The message of this CustomerTimeline.
        :type message: str
        """

        self._message = message

    @property
    def occurred_time(self):
        """Gets the occurred_time of this CustomerTimeline.

        Timeline message time.

        :return: The occurred_time of this CustomerTimeline.
        :rtype: datetime
        """
        return self._occurred_time

    @occurred_time.setter
    def occurred_time(self, occurred_time):
        """Sets the occurred_time of this CustomerTimeline.

        Timeline message time.

        :param occurred_time: The occurred_time of this CustomerTimeline.
        :type occurred_time: datetime
        """

        self._occurred_time = occurred_time

    @property
    def triggered_by(self):
        """Gets the triggered_by of this CustomerTimeline.

        Shows who or what triggered the Timeline message.

        :return: The triggered_by of this CustomerTimeline.
        :rtype: str
        """
        return self._triggered_by

    @triggered_by.setter
    def triggered_by(self, triggered_by):
        """Sets the triggered_by of this CustomerTimeline.

        Shows who or what triggered the Timeline message.

        :param triggered_by: The triggered_by of this CustomerTimeline.
        :type triggered_by: str
        """
        allowed_values = ["rebilly", "app", "direct-api"]  # noqa: E501
        if triggered_by not in allowed_values:
            raise ValueError(
                "Invalid value for `triggered_by` ({0}), must be one of {1}"
                .format(triggered_by, allowed_values)
            )

        self._triggered_by = triggered_by

    @property
    def type(self):
        """Gets the type of this CustomerTimeline.

        Timeline message type.

        :return: The type of this CustomerTimeline.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CustomerTimeline.

        Timeline message type.

        :param type: The type of this CustomerTimeline.
        :type type: str
        """
        allowed_values = ["customer-comment-created", "customer-created", "primary-address-changed", "default-payment-instrument-changed", "lead-source-changed", "custom-fields-changed", "coupon-applied", "coupon-redeemed", "coupon-redemption-canceled", "kyc-document-created", "kyc-document-accepted", "kyc-document-manually-accepted", "kyc-document-rejected", "kyc-document-manually-rejected", "kyc-document-modified", "payment-card-expired", "payment-instrument-created", "payment-instrument-deactivated", "customer-bank-account-blocked", "customer-blocked", "customer-payment-card-blocked", "invoice-created", "invoice-issued", "invoice-abandoned", "invoice-voided", "invoice-past-due", "invoice-paid", "invoice-partially-paid", "invoice-disputed", "invoice-refunded", "invoice-partially-refunded", "order-created", "order-renewed", "order-activated", "order-completed", "order-reactivated", "order-canceled", "order-upgraded", "order-downgraded", "order-churned", "order-paid-early", "transaction-approved", "transaction-canceled", "transaction-declined", "transaction-abandoned", "transaction-refunded", "transaction-voided", "transaction-discrepancy-found", "transaction-amount-discrepancy-found", "email-message-sent", "custom-event-processed", "custom-event", "transaction-waiting-gateway", "aml-list-was-possibly-matched", "experian-check-performed"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
