# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class XPayAllOfCredentials(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, encryption_key: str=None, merchant_id: str=None):
        """XPayAllOfCredentials - a model defined in OpenAPI

        :param encryption_key: The encryption_key of this XPayAllOfCredentials.
        :param merchant_id: The merchant_id of this XPayAllOfCredentials.
        """
        self.openapi_types = {
            'encryption_key': str,
            'merchant_id': str
        }

        self.attribute_map = {
            'encryption_key': 'encryptionKey',
            'merchant_id': 'merchantId'
        }

        self._encryption_key = encryption_key
        self._merchant_id = merchant_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'XPayAllOfCredentials':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The XPay_allOf_credentials of this XPayAllOfCredentials.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def encryption_key(self):
        """Gets the encryption_key of this XPayAllOfCredentials.


        :return: The encryption_key of this XPayAllOfCredentials.
        :rtype: str
        """
        return self._encryption_key

    @encryption_key.setter
    def encryption_key(self, encryption_key):
        """Sets the encryption_key of this XPayAllOfCredentials.


        :param encryption_key: The encryption_key of this XPayAllOfCredentials.
        :type encryption_key: str
        """
        if encryption_key is None:
            raise ValueError("Invalid value for `encryption_key`, must not be `None`")

        self._encryption_key = encryption_key

    @property
    def merchant_id(self):
        """Gets the merchant_id of this XPayAllOfCredentials.


        :return: The merchant_id of this XPayAllOfCredentials.
        :rtype: str
        """
        return self._merchant_id

    @merchant_id.setter
    def merchant_id(self, merchant_id):
        """Sets the merchant_id of this XPayAllOfCredentials.


        :param merchant_id: The merchant_id of this XPayAllOfCredentials.
        :type merchant_id: str
        """
        if merchant_id is None:
            raise ValueError("Invalid value for `merchant_id`, must not be `None`")

        self._merchant_id = merchant_id
