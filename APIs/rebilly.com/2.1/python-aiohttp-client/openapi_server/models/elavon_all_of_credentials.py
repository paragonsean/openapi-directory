# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ElavonAllOfCredentials(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ssl_merchant_id: str=None, ssl_pin: str=None, ssl_user_id: str=None):
        """ElavonAllOfCredentials - a model defined in OpenAPI

        :param ssl_merchant_id: The ssl_merchant_id of this ElavonAllOfCredentials.
        :param ssl_pin: The ssl_pin of this ElavonAllOfCredentials.
        :param ssl_user_id: The ssl_user_id of this ElavonAllOfCredentials.
        """
        self.openapi_types = {
            'ssl_merchant_id': str,
            'ssl_pin': str,
            'ssl_user_id': str
        }

        self.attribute_map = {
            'ssl_merchant_id': 'ssl_merchant_id',
            'ssl_pin': 'ssl_pin',
            'ssl_user_id': 'ssl_user_id'
        }

        self._ssl_merchant_id = ssl_merchant_id
        self._ssl_pin = ssl_pin
        self._ssl_user_id = ssl_user_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ElavonAllOfCredentials':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Elavon_allOf_credentials of this ElavonAllOfCredentials.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ssl_merchant_id(self):
        """Gets the ssl_merchant_id of this ElavonAllOfCredentials.

        Elavon merchant ID.

        :return: The ssl_merchant_id of this ElavonAllOfCredentials.
        :rtype: str
        """
        return self._ssl_merchant_id

    @ssl_merchant_id.setter
    def ssl_merchant_id(self, ssl_merchant_id):
        """Sets the ssl_merchant_id of this ElavonAllOfCredentials.

        Elavon merchant ID.

        :param ssl_merchant_id: The ssl_merchant_id of this ElavonAllOfCredentials.
        :type ssl_merchant_id: str
        """
        if ssl_merchant_id is None:
            raise ValueError("Invalid value for `ssl_merchant_id`, must not be `None`")

        self._ssl_merchant_id = ssl_merchant_id

    @property
    def ssl_pin(self):
        """Gets the ssl_pin of this ElavonAllOfCredentials.

        Elavon pin.

        :return: The ssl_pin of this ElavonAllOfCredentials.
        :rtype: str
        """
        return self._ssl_pin

    @ssl_pin.setter
    def ssl_pin(self, ssl_pin):
        """Sets the ssl_pin of this ElavonAllOfCredentials.

        Elavon pin.

        :param ssl_pin: The ssl_pin of this ElavonAllOfCredentials.
        :type ssl_pin: str
        """
        if ssl_pin is None:
            raise ValueError("Invalid value for `ssl_pin`, must not be `None`")

        self._ssl_pin = ssl_pin

    @property
    def ssl_user_id(self):
        """Gets the ssl_user_id of this ElavonAllOfCredentials.

        Elavon user ID.

        :return: The ssl_user_id of this ElavonAllOfCredentials.
        :rtype: str
        """
        return self._ssl_user_id

    @ssl_user_id.setter
    def ssl_user_id(self, ssl_user_id):
        """Sets the ssl_user_id of this ElavonAllOfCredentials.

        Elavon user ID.

        :param ssl_user_id: The ssl_user_id of this ElavonAllOfCredentials.
        :type ssl_user_id: str
        """
        if ssl_user_id is None:
            raise ValueError("Invalid value for `ssl_user_id`, must not be `None`")

        self._ssl_user_id = ssl_user_id
