# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PayCashAllOfCredentials(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, emisor: str=None, token: str=None):
        """PayCashAllOfCredentials - a model defined in OpenAPI

        :param emisor: The emisor of this PayCashAllOfCredentials.
        :param token: The token of this PayCashAllOfCredentials.
        """
        self.openapi_types = {
            'emisor': str,
            'token': str
        }

        self.attribute_map = {
            'emisor': 'emisor',
            'token': 'token'
        }

        self._emisor = emisor
        self._token = token

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PayCashAllOfCredentials':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PayCash_allOf_credentials of this PayCashAllOfCredentials.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def emisor(self):
        """Gets the emisor of this PayCashAllOfCredentials.

        Identify of the company.

        :return: The emisor of this PayCashAllOfCredentials.
        :rtype: str
        """
        return self._emisor

    @emisor.setter
    def emisor(self, emisor):
        """Sets the emisor of this PayCashAllOfCredentials.

        Identify of the company.

        :param emisor: The emisor of this PayCashAllOfCredentials.
        :type emisor: str
        """
        if emisor is None:
            raise ValueError("Invalid value for `emisor`, must not be `None`")

        self._emisor = emisor

    @property
    def token(self):
        """Gets the token of this PayCashAllOfCredentials.

        Token.

        :return: The token of this PayCashAllOfCredentials.
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token):
        """Sets the token of this PayCashAllOfCredentials.

        Token.

        :param token: The token of this PayCashAllOfCredentials.
        :type token: str
        """
        if token is None:
            raise ValueError("Invalid value for `token`, must not be `None`")

        self._token = token
