# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.aml_address_inner import AMLAddressInner
from openapi_server.models.aml_aliases_inner import AMLAliasesInner
from openapi_server.models.aml_passport_inner import AMLPassportInner
from openapi_server.models.self_link import SelfLink
from openapi_server import util


class AML(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, links: List[SelfLink]=None, address: List[AMLAddressInner]=None, aliases: List[AMLAliasesInner]=None, comments: str=None, confidence: str=None, dob: List[date]=None, first_name: str=None, gender: str=None, last_name: str=None, legal_basis: List[str]=None, nationality: str=None, passport: List[AMLPassportInner]=None, regime: str=None, source: str=None, source_type: str=None, title: List[str]=None, type: str=None):
        """AML - a model defined in OpenAPI

        :param links: The links of this AML.
        :param address: The address of this AML.
        :param aliases: The aliases of this AML.
        :param comments: The comments of this AML.
        :param confidence: The confidence of this AML.
        :param dob: The dob of this AML.
        :param first_name: The first_name of this AML.
        :param gender: The gender of this AML.
        :param last_name: The last_name of this AML.
        :param legal_basis: The legal_basis of this AML.
        :param nationality: The nationality of this AML.
        :param passport: The passport of this AML.
        :param regime: The regime of this AML.
        :param source: The source of this AML.
        :param source_type: The source_type of this AML.
        :param title: The title of this AML.
        :param type: The type of this AML.
        """
        self.openapi_types = {
            'links': List[SelfLink],
            'address': List[AMLAddressInner],
            'aliases': List[AMLAliasesInner],
            'comments': str,
            'confidence': str,
            'dob': List[date],
            'first_name': str,
            'gender': str,
            'last_name': str,
            'legal_basis': List[str],
            'nationality': str,
            'passport': List[AMLPassportInner],
            'regime': str,
            'source': str,
            'source_type': str,
            'title': List[str],
            'type': str
        }

        self.attribute_map = {
            'links': '_links',
            'address': 'address',
            'aliases': 'aliases',
            'comments': 'comments',
            'confidence': 'confidence',
            'dob': 'dob',
            'first_name': 'firstName',
            'gender': 'gender',
            'last_name': 'lastName',
            'legal_basis': 'legalBasis',
            'nationality': 'nationality',
            'passport': 'passport',
            'regime': 'regime',
            'source': 'source',
            'source_type': 'sourceType',
            'title': 'title',
            'type': 'type'
        }

        self._links = links
        self._address = address
        self._aliases = aliases
        self._comments = comments
        self._confidence = confidence
        self._dob = dob
        self._first_name = first_name
        self._gender = gender
        self._last_name = last_name
        self._legal_basis = legal_basis
        self._nationality = nationality
        self._passport = passport
        self._regime = regime
        self._source = source
        self._source_type = source_type
        self._title = title
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AML':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AML of this AML.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def links(self):
        """Gets the links of this AML.

        The links related to resource, including links provided by the list.

        :return: The links of this AML.
        :rtype: List[SelfLink]
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this AML.

        The links related to resource, including links provided by the list.

        :param links: The links of this AML.
        :type links: List[SelfLink]
        """
        if links is not None and len(links) < 1:
            raise ValueError("Invalid value for `links`, number of items must be greater than or equal to `1`")

        self._links = links

    @property
    def address(self):
        """Gets the address of this AML.

        Addresses related to the identity.

        :return: The address of this AML.
        :rtype: List[AMLAddressInner]
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this AML.

        Addresses related to the identity.

        :param address: The address of this AML.
        :type address: List[AMLAddressInner]
        """

        self._address = address

    @property
    def aliases(self):
        """Gets the aliases of this AML.

        List of aliases, if any.

        :return: The aliases of this AML.
        :rtype: List[AMLAliasesInner]
        """
        return self._aliases

    @aliases.setter
    def aliases(self, aliases):
        """Sets the aliases of this AML.

        List of aliases, if any.

        :param aliases: The aliases of this AML.
        :type aliases: List[AMLAliasesInner]
        """

        self._aliases = aliases

    @property
    def comments(self):
        """Gets the comments of this AML.

        Extra information (the content varies per list).

        :return: The comments of this AML.
        :rtype: str
        """
        return self._comments

    @comments.setter
    def comments(self, comments):
        """Sets the comments of this AML.

        Extra information (the content varies per list).

        :param comments: The comments of this AML.
        :type comments: str
        """

        self._comments = comments

    @property
    def confidence(self):
        """Gets the confidence of this AML.

        The source list's confidence in information.

        :return: The confidence of this AML.
        :rtype: str
        """
        return self._confidence

    @confidence.setter
    def confidence(self, confidence):
        """Sets the confidence of this AML.

        The source list's confidence in information.

        :param confidence: The confidence of this AML.
        :type confidence: str
        """
        allowed_values = ["weak", "medium", "strong", "very-strong"]  # noqa: E501
        if confidence not in allowed_values:
            raise ValueError(
                "Invalid value for `confidence` ({0}), must be one of {1}"
                .format(confidence, allowed_values)
            )

        self._confidence = confidence

    @property
    def dob(self):
        """Gets the dob of this AML.

        One or more possible dates of birth.

        :return: The dob of this AML.
        :rtype: List[date]
        """
        return self._dob

    @dob.setter
    def dob(self, dob):
        """Sets the dob of this AML.

        One or more possible dates of birth.

        :param dob: The dob of this AML.
        :type dob: List[date]
        """

        self._dob = dob

    @property
    def first_name(self):
        """Gets the first_name of this AML.

        First Name.

        :return: The first_name of this AML.
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this AML.

        First Name.

        :param first_name: The first_name of this AML.
        :type first_name: str
        """

        self._first_name = first_name

    @property
    def gender(self):
        """Gets the gender of this AML.

        Gender of returned identity (if `type` is `individual`).

        :return: The gender of this AML.
        :rtype: str
        """
        return self._gender

    @gender.setter
    def gender(self, gender):
        """Sets the gender of this AML.

        Gender of returned identity (if `type` is `individual`).

        :param gender: The gender of this AML.
        :type gender: str
        """

        self._gender = gender

    @property
    def last_name(self):
        """Gets the last_name of this AML.

        Last Name. `null` if it is a single-name entity.

        :return: The last_name of this AML.
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this AML.

        Last Name. `null` if it is a single-name entity.

        :param last_name: The last_name of this AML.
        :type last_name: str
        """

        self._last_name = last_name

    @property
    def legal_basis(self):
        """Gets the legal_basis of this AML.

        List of references to legal documents if they exist.

        :return: The legal_basis of this AML.
        :rtype: List[str]
        """
        return self._legal_basis

    @legal_basis.setter
    def legal_basis(self, legal_basis):
        """Sets the legal_basis of this AML.

        List of references to legal documents if they exist.

        :param legal_basis: The legal_basis of this AML.
        :type legal_basis: List[str]
        """

        self._legal_basis = legal_basis

    @property
    def nationality(self):
        """Gets the nationality of this AML.

        The nationality of the identity.

        :return: The nationality of this AML.
        :rtype: str
        """
        return self._nationality

    @nationality.setter
    def nationality(self, nationality):
        """Sets the nationality of this AML.

        The nationality of the identity.

        :param nationality: The nationality of this AML.
        :type nationality: str
        """

        self._nationality = nationality

    @property
    def passport(self):
        """Gets the passport of this AML.

        Passport information.

        :return: The passport of this AML.
        :rtype: List[AMLPassportInner]
        """
        return self._passport

    @passport.setter
    def passport(self, passport):
        """Sets the passport of this AML.

        Passport information.

        :param passport: The passport of this AML.
        :type passport: List[AMLPassportInner]
        """

        self._passport = passport

    @property
    def regime(self):
        """Gets the regime of this AML.

        Regime.

        :return: The regime of this AML.
        :rtype: str
        """
        return self._regime

    @regime.setter
    def regime(self, regime):
        """Sets the regime of this AML.

        Regime.

        :param regime: The regime of this AML.
        :type regime: str
        """

        self._regime = regime

    @property
    def source(self):
        """Gets the source of this AML.

        Which list this came from.

        :return: The source of this AML.
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this AML.

        Which list this came from.

        :param source: The source of this AML.
        :type source: str
        """

        self._source = source

    @property
    def source_type(self):
        """Gets the source_type of this AML.

        The list type.

        :return: The source_type of this AML.
        :rtype: str
        """
        return self._source_type

    @source_type.setter
    def source_type(self, source_type):
        """Sets the source_type of this AML.

        The list type.

        :param source_type: The source_type of this AML.
        :type source_type: str
        """
        allowed_values = ["pep", "sanctions", "adverse-media"]  # noqa: E501
        if source_type not in allowed_values:
            raise ValueError(
                "Invalid value for `source_type` ({0}), must be one of {1}"
                .format(source_type, allowed_values)
            )

        self._source_type = source_type

    @property
    def title(self):
        """Gets the title of this AML.

        The title of their position.

        :return: The title of this AML.
        :rtype: List[str]
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this AML.

        The title of their position.

        :param title: The title of this AML.
        :type title: List[str]
        """

        self._title = title

    @property
    def type(self):
        """Gets the type of this AML.

        The record type.

        :return: The type of this AML.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this AML.

        The record type.

        :param type: The type of this AML.
        :type type: str
        """
        allowed_values = ["individual", "entity"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
