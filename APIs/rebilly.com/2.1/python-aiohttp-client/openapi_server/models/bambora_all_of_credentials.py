# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class BamboraAllOfCredentials(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, api_passcode: str=None, merchant_id: str=None):
        """BamboraAllOfCredentials - a model defined in OpenAPI

        :param api_passcode: The api_passcode of this BamboraAllOfCredentials.
        :param merchant_id: The merchant_id of this BamboraAllOfCredentials.
        """
        self.openapi_types = {
            'api_passcode': str,
            'merchant_id': str
        }

        self.attribute_map = {
            'api_passcode': 'apiPasscode',
            'merchant_id': 'merchantId'
        }

        self._api_passcode = api_passcode
        self._merchant_id = merchant_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BamboraAllOfCredentials':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Bambora_allOf_credentials of this BamboraAllOfCredentials.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def api_passcode(self):
        """Gets the api_passcode of this BamboraAllOfCredentials.

        Bambora Gateway API Passcode.

        :return: The api_passcode of this BamboraAllOfCredentials.
        :rtype: str
        """
        return self._api_passcode

    @api_passcode.setter
    def api_passcode(self, api_passcode):
        """Sets the api_passcode of this BamboraAllOfCredentials.

        Bambora Gateway API Passcode.

        :param api_passcode: The api_passcode of this BamboraAllOfCredentials.
        :type api_passcode: str
        """
        if api_passcode is None:
            raise ValueError("Invalid value for `api_passcode`, must not be `None`")

        self._api_passcode = api_passcode

    @property
    def merchant_id(self):
        """Gets the merchant_id of this BamboraAllOfCredentials.

        Bambora Gateway merchant ID.

        :return: The merchant_id of this BamboraAllOfCredentials.
        :rtype: str
        """
        return self._merchant_id

    @merchant_id.setter
    def merchant_id(self, merchant_id):
        """Sets the merchant_id of this BamboraAllOfCredentials.

        Bambora Gateway merchant ID.

        :param merchant_id: The merchant_id of this BamboraAllOfCredentials.
        :type merchant_id: str
        """
        if merchant_id is None:
            raise ValueError("Invalid value for `merchant_id`, must not be `None`")

        self._merchant_id = merchant_id
