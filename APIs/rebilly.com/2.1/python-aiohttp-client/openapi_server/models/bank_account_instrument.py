# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class BankAccountInstrument(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_number_type: str='BBAN'):
        """BankAccountInstrument - a model defined in OpenAPI

        :param account_number_type: The account_number_type of this BankAccountInstrument.
        """
        self.openapi_types = {
            'account_number_type': str
        }

        self.attribute_map = {
            'account_number_type': 'accountNumberType'
        }

        self._account_number_type = account_number_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BankAccountInstrument':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BankAccountInstrument of this BankAccountInstrument.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_number_type(self):
        """Gets the account_number_type of this BankAccountInstrument.

        Bank's Account Number type. A valid value is basic bank account number (BBAN) or international bank account number (IBAN).

        :return: The account_number_type of this BankAccountInstrument.
        :rtype: str
        """
        return self._account_number_type

    @account_number_type.setter
    def account_number_type(self, account_number_type):
        """Sets the account_number_type of this BankAccountInstrument.

        Bank's Account Number type. A valid value is basic bank account number (BBAN) or international bank account number (IBAN).

        :param account_number_type: The account_number_type of this BankAccountInstrument.
        :type account_number_type: str
        """
        allowed_values = ["IBAN", "BBAN"]  # noqa: E501
        if account_number_type not in allowed_values:
            raise ValueError(
                "Invalid value for `account_number_type` ({0}), must be one of {1}"
                .format(account_number_type, allowed_values)
            )

        self._account_number_type = account_number_type
