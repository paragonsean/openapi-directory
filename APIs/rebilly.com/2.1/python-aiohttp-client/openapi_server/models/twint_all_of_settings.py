# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TWINTAllOfSettings(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cash_register_type: str=None):
        """TWINTAllOfSettings - a model defined in OpenAPI

        :param cash_register_type: The cash_register_type of this TWINTAllOfSettings.
        """
        self.openapi_types = {
            'cash_register_type': str
        }

        self.attribute_map = {
            'cash_register_type': 'cashRegisterType'
        }

        self._cash_register_type = cash_register_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TWINTAllOfSettings':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TWINT_allOf_settings of this TWINTAllOfSettings.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cash_register_type(self):
        """Gets the cash_register_type of this TWINTAllOfSettings.

        TWINT cash register type.

        :return: The cash_register_type of this TWINTAllOfSettings.
        :rtype: str
        """
        return self._cash_register_type

    @cash_register_type.setter
    def cash_register_type(self, cash_register_type):
        """Sets the cash_register_type of this TWINTAllOfSettings.

        TWINT cash register type.

        :param cash_register_type: The cash_register_type of this TWINTAllOfSettings.
        :type cash_register_type: str
        """
        if cash_register_type is None:
            raise ValueError("Invalid value for `cash_register_type`, must not be `None`")

        self._cash_register_type = cash_register_type
