# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PayvisionAllOfCredentials(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, member_guid: str=None, member_id: str=None):
        """PayvisionAllOfCredentials - a model defined in OpenAPI

        :param member_guid: The member_guid of this PayvisionAllOfCredentials.
        :param member_id: The member_id of this PayvisionAllOfCredentials.
        """
        self.openapi_types = {
            'member_guid': str,
            'member_id': str
        }

        self.attribute_map = {
            'member_guid': 'memberGuid',
            'member_id': 'memberId'
        }

        self._member_guid = member_guid
        self._member_id = member_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PayvisionAllOfCredentials':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Payvision_allOf_credentials of this PayvisionAllOfCredentials.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def member_guid(self):
        """Gets the member_guid of this PayvisionAllOfCredentials.

        Payvision Gateway member guid.

        :return: The member_guid of this PayvisionAllOfCredentials.
        :rtype: str
        """
        return self._member_guid

    @member_guid.setter
    def member_guid(self, member_guid):
        """Sets the member_guid of this PayvisionAllOfCredentials.

        Payvision Gateway member guid.

        :param member_guid: The member_guid of this PayvisionAllOfCredentials.
        :type member_guid: str
        """
        if member_guid is None:
            raise ValueError("Invalid value for `member_guid`, must not be `None`")

        self._member_guid = member_guid

    @property
    def member_id(self):
        """Gets the member_id of this PayvisionAllOfCredentials.

        Payvision Gateway member id.

        :return: The member_id of this PayvisionAllOfCredentials.
        :rtype: str
        """
        return self._member_id

    @member_id.setter
    def member_id(self, member_id):
        """Sets the member_id of this PayvisionAllOfCredentials.

        Payvision Gateway member id.

        :param member_id: The member_id of this PayvisionAllOfCredentials.
        :type member_id: str
        """
        if member_id is None:
            raise ValueError("Invalid value for `member_id`, must not be `None`")

        self._member_id = member_id
