# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.common_schedule_instruction import CommonScheduleInstruction
from openapi_server.models.custom_event_schedule_instruction import CustomEventScheduleInstruction
from openapi_server.models.invoice_retry_schedule_instruction import InvoiceRetryScheduleInstruction
from openapi_server.models.service_period_anchor_instruction import ServicePeriodAnchorInstruction
import re
from openapi_server import util


class DayOfMonth(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, method: str=None, day: int=None, time: str=None):
        """DayOfMonth - a model defined in OpenAPI

        :param method: The method of this DayOfMonth.
        :param day: The day of this DayOfMonth.
        :param time: The time of this DayOfMonth.
        """
        self.openapi_types = {
            'method': str,
            'day': int,
            'time': str
        }

        self.attribute_map = {
            'method': 'method',
            'day': 'day',
            'time': 'time'
        }

        self._method = method
        self._day = day
        self._time = time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DayOfMonth':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The day-of-month of this DayOfMonth.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def method(self):
        """Gets the method of this DayOfMonth.


        :return: The method of this DayOfMonth.
        :rtype: str
        """
        return self._method

    @method.setter
    def method(self, method):
        """Sets the method of this DayOfMonth.


        :param method: The method of this DayOfMonth.
        :type method: str
        """
        allowed_values = ["intelligent", "immediately", "date-interval", "day-of-month", "day-of-week"]  # noqa: E501
        if method not in allowed_values:
            raise ValueError(
                "Invalid value for `method` ({0}), must be one of {1}"
                .format(method, allowed_values)
            )

        self._method = method

    @property
    def day(self):
        """Gets the day of this DayOfMonth.

        The day of the month when event will be scheduled. Be aware if the month has less days, the last day of the month will be selected. 

        :return: The day of this DayOfMonth.
        :rtype: int
        """
        return self._day

    @day.setter
    def day(self, day):
        """Sets the day of this DayOfMonth.

        The day of the month when event will be scheduled. Be aware if the month has less days, the last day of the month will be selected. 

        :param day: The day of this DayOfMonth.
        :type day: int
        """
        if day is None:
            raise ValueError("Invalid value for `day`, must not be `None`")
        if day is not None and day > 31:
            raise ValueError("Invalid value for `day`, must be a value less than or equal to `31`")
        if day is not None and day < 1:
            raise ValueError("Invalid value for `day`, must be a value greater than or equal to `1`")

        self._day = day

    @property
    def time(self):
        """Gets the time of this DayOfMonth.

        Extended ISO-8601 format of time.

        :return: The time of this DayOfMonth.
        :rtype: str
        """
        return self._time

    @time.setter
    def time(self, time):
        """Sets the time of this DayOfMonth.

        Extended ISO-8601 format of time.

        :param time: The time of this DayOfMonth.
        :type time: str
        """
        if time is not None and not re.search(r'^(([01][0-9]|2[0-3]):([0-5][0-9])(?::([0-5][0-9]))?)((?:[+-](?:0[0-9]|1[12])(?::?[0-5][0-9])?)|Z)?$', time):
            raise ValueError("Invalid value for `time`, must be a follow pattern or equal to `/^(([01][0-9]|2[0-3]):([0-5][0-9])(?::([0-5][0-9]))?)((?:[+-](?:0[0-9]|1[12])(?::?[0-5][0-9])?)|Z)?$/`")

        self._time = time
