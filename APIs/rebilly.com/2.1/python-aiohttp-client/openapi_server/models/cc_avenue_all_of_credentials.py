# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CCAvenueAllOfCredentials(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, access_code: str=None, merchant_id: str=None, working_key: str=None):
        """CCAvenueAllOfCredentials - a model defined in OpenAPI

        :param access_code: The access_code of this CCAvenueAllOfCredentials.
        :param merchant_id: The merchant_id of this CCAvenueAllOfCredentials.
        :param working_key: The working_key of this CCAvenueAllOfCredentials.
        """
        self.openapi_types = {
            'access_code': str,
            'merchant_id': str,
            'working_key': str
        }

        self.attribute_map = {
            'access_code': 'accessCode',
            'merchant_id': 'merchantId',
            'working_key': 'workingKey'
        }

        self._access_code = access_code
        self._merchant_id = merchant_id
        self._working_key = working_key

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CCAvenueAllOfCredentials':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CCAvenue_allOf_credentials of this CCAvenueAllOfCredentials.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def access_code(self):
        """Gets the access_code of this CCAvenueAllOfCredentials.

        CCAvenue access code.

        :return: The access_code of this CCAvenueAllOfCredentials.
        :rtype: str
        """
        return self._access_code

    @access_code.setter
    def access_code(self, access_code):
        """Sets the access_code of this CCAvenueAllOfCredentials.

        CCAvenue access code.

        :param access_code: The access_code of this CCAvenueAllOfCredentials.
        :type access_code: str
        """
        if access_code is None:
            raise ValueError("Invalid value for `access_code`, must not be `None`")

        self._access_code = access_code

    @property
    def merchant_id(self):
        """Gets the merchant_id of this CCAvenueAllOfCredentials.

        CCAvenue merchant id.

        :return: The merchant_id of this CCAvenueAllOfCredentials.
        :rtype: str
        """
        return self._merchant_id

    @merchant_id.setter
    def merchant_id(self, merchant_id):
        """Sets the merchant_id of this CCAvenueAllOfCredentials.

        CCAvenue merchant id.

        :param merchant_id: The merchant_id of this CCAvenueAllOfCredentials.
        :type merchant_id: str
        """
        if merchant_id is None:
            raise ValueError("Invalid value for `merchant_id`, must not be `None`")

        self._merchant_id = merchant_id

    @property
    def working_key(self):
        """Gets the working_key of this CCAvenueAllOfCredentials.

        CCAvenue working key.

        :return: The working_key of this CCAvenueAllOfCredentials.
        :rtype: str
        """
        return self._working_key

    @working_key.setter
    def working_key(self, working_key):
        """Sets the working_key of this CCAvenueAllOfCredentials.

        CCAvenue working key.

        :param working_key: The working_key of this CCAvenueAllOfCredentials.
        :type working_key: str
        """
        if working_key is None:
            raise ValueError("Invalid value for `working_key`, must not be `None`")

        self._working_key = working_key
