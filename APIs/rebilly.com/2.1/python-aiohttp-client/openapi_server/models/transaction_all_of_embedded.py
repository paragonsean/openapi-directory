# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.bank_account import BankAccount
from openapi_server.models.bank_account_embed import BankAccountEmbed
from openapi_server.models.customer import Customer
from openapi_server.models.customer_embed import CustomerEmbed
from openapi_server.models.gateway_account import GatewayAccount
from openapi_server.models.gateway_account_embed import GatewayAccountEmbed
from openapi_server.models.invoice import Invoice
from openapi_server.models.invoices_embed import InvoicesEmbed
from openapi_server.models.lead_source import LeadSource
from openapi_server.models.lead_source_embed import LeadSourceEmbed
from openapi_server.models.parent_transaction_embed import ParentTransactionEmbed
from openapi_server.models.payment_card import PaymentCard
from openapi_server.models.payment_card_embed import PaymentCardEmbed
from openapi_server.models.retried_transaction_embed import RetriedTransactionEmbed
from openapi_server.models.transaction import Transaction
from openapi_server.models.website_embed import WebsiteEmbed
from openapi_server import util


class TransactionAllOfEmbedded(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, parent_transaction: Transaction=None, retried_transaction: Transaction=None, gateway_account: GatewayAccount=None, customer: Customer=None, lead_source: LeadSource=None, website: object=None, payment_card: PaymentCard=None, bank_account: BankAccount=None, invoices: List[Invoice]=None):
        """TransactionAllOfEmbedded - a model defined in OpenAPI

        :param parent_transaction: The parent_transaction of this TransactionAllOfEmbedded.
        :param retried_transaction: The retried_transaction of this TransactionAllOfEmbedded.
        :param gateway_account: The gateway_account of this TransactionAllOfEmbedded.
        :param customer: The customer of this TransactionAllOfEmbedded.
        :param lead_source: The lead_source of this TransactionAllOfEmbedded.
        :param website: The website of this TransactionAllOfEmbedded.
        :param payment_card: The payment_card of this TransactionAllOfEmbedded.
        :param bank_account: The bank_account of this TransactionAllOfEmbedded.
        :param invoices: The invoices of this TransactionAllOfEmbedded.
        """
        self.openapi_types = {
            'parent_transaction': Transaction,
            'retried_transaction': Transaction,
            'gateway_account': GatewayAccount,
            'customer': Customer,
            'lead_source': LeadSource,
            'website': object,
            'payment_card': PaymentCard,
            'bank_account': BankAccount,
            'invoices': List[Invoice]
        }

        self.attribute_map = {
            'parent_transaction': 'parentTransaction',
            'retried_transaction': 'retriedTransaction',
            'gateway_account': 'gatewayAccount',
            'customer': 'customer',
            'lead_source': 'leadSource',
            'website': 'website',
            'payment_card': 'paymentCard',
            'bank_account': 'bankAccount',
            'invoices': 'invoices'
        }

        self._parent_transaction = parent_transaction
        self._retried_transaction = retried_transaction
        self._gateway_account = gateway_account
        self._customer = customer
        self._lead_source = lead_source
        self._website = website
        self._payment_card = payment_card
        self._bank_account = bank_account
        self._invoices = invoices

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TransactionAllOfEmbedded':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Transaction_allOf__embedded of this TransactionAllOfEmbedded.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def parent_transaction(self):
        """Gets the parent_transaction of this TransactionAllOfEmbedded.


        :return: The parent_transaction of this TransactionAllOfEmbedded.
        :rtype: Transaction
        """
        return self._parent_transaction

    @parent_transaction.setter
    def parent_transaction(self, parent_transaction):
        """Sets the parent_transaction of this TransactionAllOfEmbedded.


        :param parent_transaction: The parent_transaction of this TransactionAllOfEmbedded.
        :type parent_transaction: Transaction
        """

        self._parent_transaction = parent_transaction

    @property
    def retried_transaction(self):
        """Gets the retried_transaction of this TransactionAllOfEmbedded.


        :return: The retried_transaction of this TransactionAllOfEmbedded.
        :rtype: Transaction
        """
        return self._retried_transaction

    @retried_transaction.setter
    def retried_transaction(self, retried_transaction):
        """Sets the retried_transaction of this TransactionAllOfEmbedded.


        :param retried_transaction: The retried_transaction of this TransactionAllOfEmbedded.
        :type retried_transaction: Transaction
        """

        self._retried_transaction = retried_transaction

    @property
    def gateway_account(self):
        """Gets the gateway_account of this TransactionAllOfEmbedded.


        :return: The gateway_account of this TransactionAllOfEmbedded.
        :rtype: GatewayAccount
        """
        return self._gateway_account

    @gateway_account.setter
    def gateway_account(self, gateway_account):
        """Sets the gateway_account of this TransactionAllOfEmbedded.


        :param gateway_account: The gateway_account of this TransactionAllOfEmbedded.
        :type gateway_account: GatewayAccount
        """

        self._gateway_account = gateway_account

    @property
    def customer(self):
        """Gets the customer of this TransactionAllOfEmbedded.


        :return: The customer of this TransactionAllOfEmbedded.
        :rtype: Customer
        """
        return self._customer

    @customer.setter
    def customer(self, customer):
        """Sets the customer of this TransactionAllOfEmbedded.


        :param customer: The customer of this TransactionAllOfEmbedded.
        :type customer: Customer
        """

        self._customer = customer

    @property
    def lead_source(self):
        """Gets the lead_source of this TransactionAllOfEmbedded.


        :return: The lead_source of this TransactionAllOfEmbedded.
        :rtype: LeadSource
        """
        return self._lead_source

    @lead_source.setter
    def lead_source(self, lead_source):
        """Sets the lead_source of this TransactionAllOfEmbedded.


        :param lead_source: The lead_source of this TransactionAllOfEmbedded.
        :type lead_source: LeadSource
        """

        self._lead_source = lead_source

    @property
    def website(self):
        """Gets the website of this TransactionAllOfEmbedded.


        :return: The website of this TransactionAllOfEmbedded.
        :rtype: object
        """
        return self._website

    @website.setter
    def website(self, website):
        """Sets the website of this TransactionAllOfEmbedded.


        :param website: The website of this TransactionAllOfEmbedded.
        :type website: object
        """

        self._website = website

    @property
    def payment_card(self):
        """Gets the payment_card of this TransactionAllOfEmbedded.


        :return: The payment_card of this TransactionAllOfEmbedded.
        :rtype: PaymentCard
        """
        return self._payment_card

    @payment_card.setter
    def payment_card(self, payment_card):
        """Sets the payment_card of this TransactionAllOfEmbedded.


        :param payment_card: The payment_card of this TransactionAllOfEmbedded.
        :type payment_card: PaymentCard
        """

        self._payment_card = payment_card

    @property
    def bank_account(self):
        """Gets the bank_account of this TransactionAllOfEmbedded.


        :return: The bank_account of this TransactionAllOfEmbedded.
        :rtype: BankAccount
        """
        return self._bank_account

    @bank_account.setter
    def bank_account(self, bank_account):
        """Sets the bank_account of this TransactionAllOfEmbedded.


        :param bank_account: The bank_account of this TransactionAllOfEmbedded.
        :type bank_account: BankAccount
        """

        self._bank_account = bank_account

    @property
    def invoices(self):
        """Gets the invoices of this TransactionAllOfEmbedded.


        :return: The invoices of this TransactionAllOfEmbedded.
        :rtype: List[Invoice]
        """
        return self._invoices

    @invoices.setter
    def invoices(self, invoices):
        """Sets the invoices of this TransactionAllOfEmbedded.


        :param invoices: The invoices of this TransactionAllOfEmbedded.
        :type invoices: List[Invoice]
        """

        self._invoices = invoices
