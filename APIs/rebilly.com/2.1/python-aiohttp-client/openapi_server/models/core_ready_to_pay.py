# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.contact_object import ContactObject
from openapi_server.models.ready_to_pay_items_items_inner import ReadyToPayItemsItemsInner
from openapi_server.models.risk_metadata import RiskMetadata
from openapi_server import util


class CoreReadyToPay(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, billing_address: ContactObject=None, risk_metadata: RiskMetadata=None, website_id: str=None, amount: float=None, currency: str=None, items: List[ReadyToPayItemsItemsInner]=None, customer_id: str=None):
        """CoreReadyToPay - a model defined in OpenAPI

        :param billing_address: The billing_address of this CoreReadyToPay.
        :param risk_metadata: The risk_metadata of this CoreReadyToPay.
        :param website_id: The website_id of this CoreReadyToPay.
        :param amount: The amount of this CoreReadyToPay.
        :param currency: The currency of this CoreReadyToPay.
        :param items: The items of this CoreReadyToPay.
        :param customer_id: The customer_id of this CoreReadyToPay.
        """
        self.openapi_types = {
            'billing_address': ContactObject,
            'risk_metadata': RiskMetadata,
            'website_id': str,
            'amount': float,
            'currency': str,
            'items': List[ReadyToPayItemsItemsInner],
            'customer_id': str
        }

        self.attribute_map = {
            'billing_address': 'billingAddress',
            'risk_metadata': 'riskMetadata',
            'website_id': 'websiteId',
            'amount': 'amount',
            'currency': 'currency',
            'items': 'items',
            'customer_id': 'customerId'
        }

        self._billing_address = billing_address
        self._risk_metadata = risk_metadata
        self._website_id = website_id
        self._amount = amount
        self._currency = currency
        self._items = items
        self._customer_id = customer_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CoreReadyToPay':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CoreReadyToPay of this CoreReadyToPay.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def billing_address(self):
        """Gets the billing_address of this CoreReadyToPay.

        The billing address.

        :return: The billing_address of this CoreReadyToPay.
        :rtype: ContactObject
        """
        return self._billing_address

    @billing_address.setter
    def billing_address(self, billing_address):
        """Sets the billing_address of this CoreReadyToPay.

        The billing address.

        :param billing_address: The billing_address of this CoreReadyToPay.
        :type billing_address: ContactObject
        """

        self._billing_address = billing_address

    @property
    def risk_metadata(self):
        """Gets the risk_metadata of this CoreReadyToPay.


        :return: The risk_metadata of this CoreReadyToPay.
        :rtype: RiskMetadata
        """
        return self._risk_metadata

    @risk_metadata.setter
    def risk_metadata(self, risk_metadata):
        """Sets the risk_metadata of this CoreReadyToPay.


        :param risk_metadata: The risk_metadata of this CoreReadyToPay.
        :type risk_metadata: RiskMetadata
        """
        if risk_metadata is None:
            raise ValueError("Invalid value for `risk_metadata`, must not be `None`")

        self._risk_metadata = risk_metadata

    @property
    def website_id(self):
        """Gets the website_id of this CoreReadyToPay.

        The website identifier string.

        :return: The website_id of this CoreReadyToPay.
        :rtype: str
        """
        return self._website_id

    @website_id.setter
    def website_id(self, website_id):
        """Sets the website_id of this CoreReadyToPay.

        The website identifier string.

        :param website_id: The website_id of this CoreReadyToPay.
        :type website_id: str
        """
        if website_id is None:
            raise ValueError("Invalid value for `website_id`, must not be `None`")
        if website_id is not None and len(website_id) > 50:
            raise ValueError("Invalid value for `website_id`, length must be less than or equal to `50`")

        self._website_id = website_id

    @property
    def amount(self):
        """Gets the amount of this CoreReadyToPay.

        The amount.

        :return: The amount of this CoreReadyToPay.
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this CoreReadyToPay.

        The amount.

        :param amount: The amount of this CoreReadyToPay.
        :type amount: float
        """
        if amount is None:
            raise ValueError("Invalid value for `amount`, must not be `None`")

        self._amount = amount

    @property
    def currency(self):
        """Gets the currency of this CoreReadyToPay.

        ISO 4217 alphabetic currency code.

        :return: The currency of this CoreReadyToPay.
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this CoreReadyToPay.

        ISO 4217 alphabetic currency code.

        :param currency: The currency of this CoreReadyToPay.
        :type currency: str
        """
        if currency is None:
            raise ValueError("Invalid value for `currency`, must not be `None`")
        if currency is not None and len(currency) > 3:
            raise ValueError("Invalid value for `currency`, length must be less than or equal to `3`")
        if currency is not None and len(currency) < 3:
            raise ValueError("Invalid value for `currency`, length must be greater than or equal to `3`")

        self._currency = currency

    @property
    def items(self):
        """Gets the items of this CoreReadyToPay.


        :return: The items of this CoreReadyToPay.
        :rtype: List[ReadyToPayItemsItemsInner]
        """
        return self._items

    @items.setter
    def items(self, items):
        """Sets the items of this CoreReadyToPay.


        :param items: The items of this CoreReadyToPay.
        :type items: List[ReadyToPayItemsItemsInner]
        """
        if items is None:
            raise ValueError("Invalid value for `items`, must not be `None`")
        if items is not None and len(items) < 1:
            raise ValueError("Invalid value for `items`, number of items must be greater than or equal to `1`")

        self._items = items

    @property
    def customer_id(self):
        """Gets the customer_id of this CoreReadyToPay.

        The customer identifier string.

        :return: The customer_id of this CoreReadyToPay.
        :rtype: str
        """
        return self._customer_id

    @customer_id.setter
    def customer_id(self, customer_id):
        """Sets the customer_id of this CoreReadyToPay.

        The customer identifier string.

        :param customer_id: The customer_id of this CoreReadyToPay.
        :type customer_id: str
        """
        if customer_id is not None and len(customer_id) > 50:
            raise ValueError("Invalid value for `customer_id`, length must be less than or equal to `50`")

        self._customer_id = customer_id
