# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GlobalOneAllOfCredentials(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, shared_secret: str=None, terminal_id: str=None):
        """GlobalOneAllOfCredentials - a model defined in OpenAPI

        :param shared_secret: The shared_secret of this GlobalOneAllOfCredentials.
        :param terminal_id: The terminal_id of this GlobalOneAllOfCredentials.
        """
        self.openapi_types = {
            'shared_secret': str,
            'terminal_id': str
        }

        self.attribute_map = {
            'shared_secret': 'sharedSecret',
            'terminal_id': 'terminalId'
        }

        self._shared_secret = shared_secret
        self._terminal_id = terminal_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GlobalOneAllOfCredentials':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GlobalOne_allOf_credentials of this GlobalOneAllOfCredentials.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def shared_secret(self):
        """Gets the shared_secret of this GlobalOneAllOfCredentials.

        GlobalOne Gateway shared secret.

        :return: The shared_secret of this GlobalOneAllOfCredentials.
        :rtype: str
        """
        return self._shared_secret

    @shared_secret.setter
    def shared_secret(self, shared_secret):
        """Sets the shared_secret of this GlobalOneAllOfCredentials.

        GlobalOne Gateway shared secret.

        :param shared_secret: The shared_secret of this GlobalOneAllOfCredentials.
        :type shared_secret: str
        """
        if shared_secret is None:
            raise ValueError("Invalid value for `shared_secret`, must not be `None`")

        self._shared_secret = shared_secret

    @property
    def terminal_id(self):
        """Gets the terminal_id of this GlobalOneAllOfCredentials.

        GlobalOne Gateway terminal ID.

        :return: The terminal_id of this GlobalOneAllOfCredentials.
        :rtype: str
        """
        return self._terminal_id

    @terminal_id.setter
    def terminal_id(self, terminal_id):
        """Sets the terminal_id of this GlobalOneAllOfCredentials.

        GlobalOne Gateway terminal ID.

        :param terminal_id: The terminal_id of this GlobalOneAllOfCredentials.
        :type terminal_id: str
        """
        if terminal_id is None:
            raise ValueError("Invalid value for `terminal_id`, must not be `None`")

        self._terminal_id = terminal_id
