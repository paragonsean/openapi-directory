# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class NinjaWalletAllOfCredentials(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, api_key: str=None, passphrase: str=None, secret: str=None):
        """NinjaWalletAllOfCredentials - a model defined in OpenAPI

        :param api_key: The api_key of this NinjaWalletAllOfCredentials.
        :param passphrase: The passphrase of this NinjaWalletAllOfCredentials.
        :param secret: The secret of this NinjaWalletAllOfCredentials.
        """
        self.openapi_types = {
            'api_key': str,
            'passphrase': str,
            'secret': str
        }

        self.attribute_map = {
            'api_key': 'apiKey',
            'passphrase': 'passphrase',
            'secret': 'secret'
        }

        self._api_key = api_key
        self._passphrase = passphrase
        self._secret = secret

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NinjaWalletAllOfCredentials':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NinjaWallet_allOf_credentials of this NinjaWalletAllOfCredentials.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def api_key(self):
        """Gets the api_key of this NinjaWalletAllOfCredentials.

        NinjaWallet api key.

        :return: The api_key of this NinjaWalletAllOfCredentials.
        :rtype: str
        """
        return self._api_key

    @api_key.setter
    def api_key(self, api_key):
        """Sets the api_key of this NinjaWalletAllOfCredentials.

        NinjaWallet api key.

        :param api_key: The api_key of this NinjaWalletAllOfCredentials.
        :type api_key: str
        """
        if api_key is None:
            raise ValueError("Invalid value for `api_key`, must not be `None`")

        self._api_key = api_key

    @property
    def passphrase(self):
        """Gets the passphrase of this NinjaWalletAllOfCredentials.

        NinjaWallet passphrase.

        :return: The passphrase of this NinjaWalletAllOfCredentials.
        :rtype: str
        """
        return self._passphrase

    @passphrase.setter
    def passphrase(self, passphrase):
        """Sets the passphrase of this NinjaWalletAllOfCredentials.

        NinjaWallet passphrase.

        :param passphrase: The passphrase of this NinjaWalletAllOfCredentials.
        :type passphrase: str
        """
        if passphrase is None:
            raise ValueError("Invalid value for `passphrase`, must not be `None`")

        self._passphrase = passphrase

    @property
    def secret(self):
        """Gets the secret of this NinjaWalletAllOfCredentials.

        NinjaWallet secret.

        :return: The secret of this NinjaWalletAllOfCredentials.
        :rtype: str
        """
        return self._secret

    @secret.setter
    def secret(self, secret):
        """Sets the secret of this NinjaWalletAllOfCredentials.

        NinjaWallet secret.

        :param secret: The secret of this NinjaWalletAllOfCredentials.
        :type secret: str
        """
        if secret is None:
            raise ValueError("Invalid value for `secret`, must not be `None`")

        self._secret = secret
