# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PayClubAllOfCredentials(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_number: str=None, merchant_id: str=None, sign_key: str=None):
        """PayClubAllOfCredentials - a model defined in OpenAPI

        :param account_number: The account_number of this PayClubAllOfCredentials.
        :param merchant_id: The merchant_id of this PayClubAllOfCredentials.
        :param sign_key: The sign_key of this PayClubAllOfCredentials.
        """
        self.openapi_types = {
            'account_number': str,
            'merchant_id': str,
            'sign_key': str
        }

        self.attribute_map = {
            'account_number': 'accountNumber',
            'merchant_id': 'merchantId',
            'sign_key': 'signKey'
        }

        self._account_number = account_number
        self._merchant_id = merchant_id
        self._sign_key = sign_key

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PayClubAllOfCredentials':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PayClub_allOf_credentials of this PayClubAllOfCredentials.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_number(self):
        """Gets the account_number of this PayClubAllOfCredentials.


        :return: The account_number of this PayClubAllOfCredentials.
        :rtype: str
        """
        return self._account_number

    @account_number.setter
    def account_number(self, account_number):
        """Sets the account_number of this PayClubAllOfCredentials.


        :param account_number: The account_number of this PayClubAllOfCredentials.
        :type account_number: str
        """
        if account_number is None:
            raise ValueError("Invalid value for `account_number`, must not be `None`")

        self._account_number = account_number

    @property
    def merchant_id(self):
        """Gets the merchant_id of this PayClubAllOfCredentials.


        :return: The merchant_id of this PayClubAllOfCredentials.
        :rtype: str
        """
        return self._merchant_id

    @merchant_id.setter
    def merchant_id(self, merchant_id):
        """Sets the merchant_id of this PayClubAllOfCredentials.


        :param merchant_id: The merchant_id of this PayClubAllOfCredentials.
        :type merchant_id: str
        """

        self._merchant_id = merchant_id

    @property
    def sign_key(self):
        """Gets the sign_key of this PayClubAllOfCredentials.


        :return: The sign_key of this PayClubAllOfCredentials.
        :rtype: str
        """
        return self._sign_key

    @sign_key.setter
    def sign_key(self, sign_key):
        """Sets the sign_key of this PayClubAllOfCredentials.


        :param sign_key: The sign_key of this PayClubAllOfCredentials.
        :type sign_key: str
        """
        if sign_key is None:
            raise ValueError("Invalid value for `sign_key`, must not be `None`")

        self._sign_key = sign_key
