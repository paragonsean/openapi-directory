# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.self_link import SelfLink
from openapi_server import util


class PriceBasedShippingRate(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, links: List[SelfLink]=None, currency: str=None, max_order_subtotal: float=None, min_order_subtotal: float=0, name: str=None, price: float=None):
        """PriceBasedShippingRate - a model defined in OpenAPI

        :param links: The links of this PriceBasedShippingRate.
        :param currency: The currency of this PriceBasedShippingRate.
        :param max_order_subtotal: The max_order_subtotal of this PriceBasedShippingRate.
        :param min_order_subtotal: The min_order_subtotal of this PriceBasedShippingRate.
        :param name: The name of this PriceBasedShippingRate.
        :param price: The price of this PriceBasedShippingRate.
        """
        self.openapi_types = {
            'links': List[SelfLink],
            'currency': str,
            'max_order_subtotal': float,
            'min_order_subtotal': float,
            'name': str,
            'price': float
        }

        self.attribute_map = {
            'links': '_links',
            'currency': 'currency',
            'max_order_subtotal': 'maxOrderSubtotal',
            'min_order_subtotal': 'minOrderSubtotal',
            'name': 'name',
            'price': 'price'
        }

        self._links = links
        self._currency = currency
        self._max_order_subtotal = max_order_subtotal
        self._min_order_subtotal = min_order_subtotal
        self._name = name
        self._price = price

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PriceBasedShippingRate':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PriceBasedShippingRate of this PriceBasedShippingRate.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def links(self):
        """Gets the links of this PriceBasedShippingRate.

        The links related to resource.

        :return: The links of this PriceBasedShippingRate.
        :rtype: List[SelfLink]
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this PriceBasedShippingRate.

        The links related to resource.

        :param links: The links of this PriceBasedShippingRate.
        :type links: List[SelfLink]
        """
        if links is not None and len(links) < 1:
            raise ValueError("Invalid value for `links`, number of items must be greater than or equal to `1`")

        self._links = links

    @property
    def currency(self):
        """Gets the currency of this PriceBasedShippingRate.

        ISO 4217 alphabetic currency code.

        :return: The currency of this PriceBasedShippingRate.
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this PriceBasedShippingRate.

        ISO 4217 alphabetic currency code.

        :param currency: The currency of this PriceBasedShippingRate.
        :type currency: str
        """
        if currency is None:
            raise ValueError("Invalid value for `currency`, must not be `None`")
        if currency is not None and len(currency) > 3:
            raise ValueError("Invalid value for `currency`, length must be less than or equal to `3`")
        if currency is not None and len(currency) < 3:
            raise ValueError("Invalid value for `currency`, length must be greater than or equal to `3`")

        self._currency = currency

    @property
    def max_order_subtotal(self):
        """Gets the max_order_subtotal of this PriceBasedShippingRate.

        Maximum order subtotal for which this shipping rate is applicable (NULL if no maximum).

        :return: The max_order_subtotal of this PriceBasedShippingRate.
        :rtype: float
        """
        return self._max_order_subtotal

    @max_order_subtotal.setter
    def max_order_subtotal(self, max_order_subtotal):
        """Sets the max_order_subtotal of this PriceBasedShippingRate.

        Maximum order subtotal for which this shipping rate is applicable (NULL if no maximum).

        :param max_order_subtotal: The max_order_subtotal of this PriceBasedShippingRate.
        :type max_order_subtotal: float
        """

        self._max_order_subtotal = max_order_subtotal

    @property
    def min_order_subtotal(self):
        """Gets the min_order_subtotal of this PriceBasedShippingRate.

        Minimum order subtotal for which this shipping rate is applicable, defaults to 0.00.

        :return: The min_order_subtotal of this PriceBasedShippingRate.
        :rtype: float
        """
        return self._min_order_subtotal

    @min_order_subtotal.setter
    def min_order_subtotal(self, min_order_subtotal):
        """Sets the min_order_subtotal of this PriceBasedShippingRate.

        Minimum order subtotal for which this shipping rate is applicable, defaults to 0.00.

        :param min_order_subtotal: The min_order_subtotal of this PriceBasedShippingRate.
        :type min_order_subtotal: float
        """

        self._min_order_subtotal = min_order_subtotal

    @property
    def name(self):
        """Gets the name of this PriceBasedShippingRate.

        The shipping rate name.

        :return: The name of this PriceBasedShippingRate.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PriceBasedShippingRate.

        The shipping rate name.

        :param name: The name of this PriceBasedShippingRate.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) > 255:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `255`")

        self._name = name

    @property
    def price(self):
        """Gets the price of this PriceBasedShippingRate.

        The shipping price - 0 is a valid value (for free).

        :return: The price of this PriceBasedShippingRate.
        :rtype: float
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this PriceBasedShippingRate.

        The shipping price - 0 is a valid value (for free).

        :param price: The price of this PriceBasedShippingRate.
        :type price: float
        """
        if price is None:
            raise ValueError("Invalid value for `price`, must not be `None`")

        self._price = price
