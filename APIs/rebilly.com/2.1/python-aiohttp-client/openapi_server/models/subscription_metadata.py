# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.risk_metadata import RiskMetadata
from openapi_server.models.subscription_metadata_embedded_inner import SubscriptionMetadataEmbeddedInner
from openapi_server.models.subscription_metadata_links_inner import SubscriptionMetadataLinksInner
from openapi_server import util


class SubscriptionMetadata(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, embedded: List[SubscriptionMetadataEmbeddedInner]=None, links: List[SubscriptionMetadataLinksInner]=None, created_time: datetime=None, custom_fields: object=None, revision: int=None, risk_metadata: RiskMetadata=None, updated_time: datetime=None):
        """SubscriptionMetadata - a model defined in OpenAPI

        :param embedded: The embedded of this SubscriptionMetadata.
        :param links: The links of this SubscriptionMetadata.
        :param created_time: The created_time of this SubscriptionMetadata.
        :param custom_fields: The custom_fields of this SubscriptionMetadata.
        :param revision: The revision of this SubscriptionMetadata.
        :param risk_metadata: The risk_metadata of this SubscriptionMetadata.
        :param updated_time: The updated_time of this SubscriptionMetadata.
        """
        self.openapi_types = {
            'embedded': List[SubscriptionMetadataEmbeddedInner],
            'links': List[SubscriptionMetadataLinksInner],
            'created_time': datetime,
            'custom_fields': object,
            'revision': int,
            'risk_metadata': RiskMetadata,
            'updated_time': datetime
        }

        self.attribute_map = {
            'embedded': '_embedded',
            'links': '_links',
            'created_time': 'createdTime',
            'custom_fields': 'customFields',
            'revision': 'revision',
            'risk_metadata': 'riskMetadata',
            'updated_time': 'updatedTime'
        }

        self._embedded = embedded
        self._links = links
        self._created_time = created_time
        self._custom_fields = custom_fields
        self._revision = revision
        self._risk_metadata = risk_metadata
        self._updated_time = updated_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SubscriptionMetadata':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SubscriptionMetadata of this SubscriptionMetadata.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def embedded(self):
        """Gets the embedded of this SubscriptionMetadata.

        Any embedded objects available that are requested by the `expand` querystring parameter.

        :return: The embedded of this SubscriptionMetadata.
        :rtype: List[SubscriptionMetadataEmbeddedInner]
        """
        return self._embedded

    @embedded.setter
    def embedded(self, embedded):
        """Sets the embedded of this SubscriptionMetadata.

        Any embedded objects available that are requested by the `expand` querystring parameter.

        :param embedded: The embedded of this SubscriptionMetadata.
        :type embedded: List[SubscriptionMetadataEmbeddedInner]
        """
        if embedded is not None and len(embedded) < 1:
            raise ValueError("Invalid value for `embedded`, number of items must be greater than or equal to `1`")

        self._embedded = embedded

    @property
    def links(self):
        """Gets the links of this SubscriptionMetadata.

        The links related to resource.

        :return: The links of this SubscriptionMetadata.
        :rtype: List[SubscriptionMetadataLinksInner]
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this SubscriptionMetadata.

        The links related to resource.

        :param links: The links of this SubscriptionMetadata.
        :type links: List[SubscriptionMetadataLinksInner]
        """
        if links is not None and len(links) < 1:
            raise ValueError("Invalid value for `links`, number of items must be greater than or equal to `1`")

        self._links = links

    @property
    def created_time(self):
        """Gets the created_time of this SubscriptionMetadata.

        Order created time.

        :return: The created_time of this SubscriptionMetadata.
        :rtype: datetime
        """
        return self._created_time

    @created_time.setter
    def created_time(self, created_time):
        """Sets the created_time of this SubscriptionMetadata.

        Order created time.

        :param created_time: The created_time of this SubscriptionMetadata.
        :type created_time: datetime
        """

        self._created_time = created_time

    @property
    def custom_fields(self):
        """Gets the custom_fields of this SubscriptionMetadata.

        Custom Fields list as a map `{\"custom field name\": \"custom field value\", ...}`. The format must follow the saved format (see Custom Fields section for the formats). 

        :return: The custom_fields of this SubscriptionMetadata.
        :rtype: object
        """
        return self._custom_fields

    @custom_fields.setter
    def custom_fields(self, custom_fields):
        """Sets the custom_fields of this SubscriptionMetadata.

        Custom Fields list as a map `{\"custom field name\": \"custom field value\", ...}`. The format must follow the saved format (see Custom Fields section for the formats). 

        :param custom_fields: The custom_fields of this SubscriptionMetadata.
        :type custom_fields: object
        """

        self._custom_fields = custom_fields

    @property
    def revision(self):
        """Gets the revision of this SubscriptionMetadata.

        The number of times the order data has been modified. The revision is useful when analyzing webhook data to determine if the change takes precedence over the current representation. 

        :return: The revision of this SubscriptionMetadata.
        :rtype: int
        """
        return self._revision

    @revision.setter
    def revision(self, revision):
        """Sets the revision of this SubscriptionMetadata.

        The number of times the order data has been modified. The revision is useful when analyzing webhook data to determine if the change takes precedence over the current representation. 

        :param revision: The revision of this SubscriptionMetadata.
        :type revision: int
        """

        self._revision = revision

    @property
    def risk_metadata(self):
        """Gets the risk_metadata of this SubscriptionMetadata.

        Risk metadata. If null, the value would coalesce to the risk metadata captured when creating the payment token.

        :return: The risk_metadata of this SubscriptionMetadata.
        :rtype: RiskMetadata
        """
        return self._risk_metadata

    @risk_metadata.setter
    def risk_metadata(self, risk_metadata):
        """Sets the risk_metadata of this SubscriptionMetadata.

        Risk metadata. If null, the value would coalesce to the risk metadata captured when creating the payment token.

        :param risk_metadata: The risk_metadata of this SubscriptionMetadata.
        :type risk_metadata: RiskMetadata
        """

        self._risk_metadata = risk_metadata

    @property
    def updated_time(self):
        """Gets the updated_time of this SubscriptionMetadata.

        Order updated time.

        :return: The updated_time of this SubscriptionMetadata.
        :rtype: datetime
        """
        return self._updated_time

    @updated_time.setter
    def updated_time(self, updated_time):
        """Sets the updated_time of this SubscriptionMetadata.

        Order updated time.

        :param updated_time: The updated_time of this SubscriptionMetadata.
        :type updated_time: datetime
        """

        self._updated_time = updated_time
