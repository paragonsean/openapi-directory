# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.dispute_embedded_inner import DisputeEmbeddedInner
from openapi_server.models.dispute_links_inner import DisputeLinksInner
from openapi_server import util


class Dispute(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, embedded: List[DisputeEmbeddedInner]=None, links: List[DisputeLinksInner]=None, acquirer_reference_number: str=None, amount: float=None, case_id: str=None, category: str=None, created_time: datetime=None, currency: str=None, customer_id: str=None, deadline_time: datetime=None, id: str=None, posted_time: datetime=None, raw_response: str=None, reason_code: str=None, resolved_time: datetime=None, status: str=None, transaction_id: str=None, type: str=None, updated_time: datetime=None):
        """Dispute - a model defined in OpenAPI

        :param embedded: The embedded of this Dispute.
        :param links: The links of this Dispute.
        :param acquirer_reference_number: The acquirer_reference_number of this Dispute.
        :param amount: The amount of this Dispute.
        :param case_id: The case_id of this Dispute.
        :param category: The category of this Dispute.
        :param created_time: The created_time of this Dispute.
        :param currency: The currency of this Dispute.
        :param customer_id: The customer_id of this Dispute.
        :param deadline_time: The deadline_time of this Dispute.
        :param id: The id of this Dispute.
        :param posted_time: The posted_time of this Dispute.
        :param raw_response: The raw_response of this Dispute.
        :param reason_code: The reason_code of this Dispute.
        :param resolved_time: The resolved_time of this Dispute.
        :param status: The status of this Dispute.
        :param transaction_id: The transaction_id of this Dispute.
        :param type: The type of this Dispute.
        :param updated_time: The updated_time of this Dispute.
        """
        self.openapi_types = {
            'embedded': List[DisputeEmbeddedInner],
            'links': List[DisputeLinksInner],
            'acquirer_reference_number': str,
            'amount': float,
            'case_id': str,
            'category': str,
            'created_time': datetime,
            'currency': str,
            'customer_id': str,
            'deadline_time': datetime,
            'id': str,
            'posted_time': datetime,
            'raw_response': str,
            'reason_code': str,
            'resolved_time': datetime,
            'status': str,
            'transaction_id': str,
            'type': str,
            'updated_time': datetime
        }

        self.attribute_map = {
            'embedded': '_embedded',
            'links': '_links',
            'acquirer_reference_number': 'acquirerReferenceNumber',
            'amount': 'amount',
            'case_id': 'caseId',
            'category': 'category',
            'created_time': 'createdTime',
            'currency': 'currency',
            'customer_id': 'customerId',
            'deadline_time': 'deadlineTime',
            'id': 'id',
            'posted_time': 'postedTime',
            'raw_response': 'rawResponse',
            'reason_code': 'reasonCode',
            'resolved_time': 'resolvedTime',
            'status': 'status',
            'transaction_id': 'transactionId',
            'type': 'type',
            'updated_time': 'updatedTime'
        }

        self._embedded = embedded
        self._links = links
        self._acquirer_reference_number = acquirer_reference_number
        self._amount = amount
        self._case_id = case_id
        self._category = category
        self._created_time = created_time
        self._currency = currency
        self._customer_id = customer_id
        self._deadline_time = deadline_time
        self._id = id
        self._posted_time = posted_time
        self._raw_response = raw_response
        self._reason_code = reason_code
        self._resolved_time = resolved_time
        self._status = status
        self._transaction_id = transaction_id
        self._type = type
        self._updated_time = updated_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Dispute':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Dispute of this Dispute.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def embedded(self):
        """Gets the embedded of this Dispute.

        Any embedded objects available that are requested by the `expand` querystring parameter.

        :return: The embedded of this Dispute.
        :rtype: List[DisputeEmbeddedInner]
        """
        return self._embedded

    @embedded.setter
    def embedded(self, embedded):
        """Sets the embedded of this Dispute.

        Any embedded objects available that are requested by the `expand` querystring parameter.

        :param embedded: The embedded of this Dispute.
        :type embedded: List[DisputeEmbeddedInner]
        """
        if embedded is not None and len(embedded) < 1:
            raise ValueError("Invalid value for `embedded`, number of items must be greater than or equal to `1`")

        self._embedded = embedded

    @property
    def links(self):
        """Gets the links of this Dispute.

        The links related to resource.

        :return: The links of this Dispute.
        :rtype: List[DisputeLinksInner]
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this Dispute.

        The links related to resource.

        :param links: The links of this Dispute.
        :type links: List[DisputeLinksInner]
        """
        if links is not None and len(links) < 1:
            raise ValueError("Invalid value for `links`, number of items must be greater than or equal to `1`")

        self._links = links

    @property
    def acquirer_reference_number(self):
        """Gets the acquirer_reference_number of this Dispute.

        The dispute's acquirer reference number.

        :return: The acquirer_reference_number of this Dispute.
        :rtype: str
        """
        return self._acquirer_reference_number

    @acquirer_reference_number.setter
    def acquirer_reference_number(self, acquirer_reference_number):
        """Sets the acquirer_reference_number of this Dispute.

        The dispute's acquirer reference number.

        :param acquirer_reference_number: The acquirer_reference_number of this Dispute.
        :type acquirer_reference_number: str
        """

        self._acquirer_reference_number = acquirer_reference_number

    @property
    def amount(self):
        """Gets the amount of this Dispute.

        The dispute amount.

        :return: The amount of this Dispute.
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this Dispute.

        The dispute amount.

        :param amount: The amount of this Dispute.
        :type amount: float
        """
        if amount is None:
            raise ValueError("Invalid value for `amount`, must not be `None`")

        self._amount = amount

    @property
    def case_id(self):
        """Gets the case_id of this Dispute.

        The case ID for the dispute.

        :return: The case_id of this Dispute.
        :rtype: str
        """
        return self._case_id

    @case_id.setter
    def case_id(self, case_id):
        """Sets the case_id of this Dispute.

        The case ID for the dispute.

        :param case_id: The case_id of this Dispute.
        :type case_id: str
        """

        self._case_id = case_id

    @property
    def category(self):
        """Gets the category of this Dispute.

        The dispute's category.

        :return: The category of this Dispute.
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this Dispute.

        The dispute's category.

        :param category: The category of this Dispute.
        :type category: str
        """
        allowed_values = ["fraud", "unrecognized", "product-not-received", "product-unacceptable", "product-not-refunded", "duplicate", "subscription-canceled", "uncategorized"]  # noqa: E501
        if category not in allowed_values:
            raise ValueError(
                "Invalid value for `category` ({0}), must be one of {1}"
                .format(category, allowed_values)
            )

        self._category = category

    @property
    def created_time(self):
        """Gets the created_time of this Dispute.

        Dispute created time.

        :return: The created_time of this Dispute.
        :rtype: datetime
        """
        return self._created_time

    @created_time.setter
    def created_time(self, created_time):
        """Sets the created_time of this Dispute.

        Dispute created time.

        :param created_time: The created_time of this Dispute.
        :type created_time: datetime
        """

        self._created_time = created_time

    @property
    def currency(self):
        """Gets the currency of this Dispute.

        ISO 4217 alphabetic currency code.

        :return: The currency of this Dispute.
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this Dispute.

        ISO 4217 alphabetic currency code.

        :param currency: The currency of this Dispute.
        :type currency: str
        """
        if currency is None:
            raise ValueError("Invalid value for `currency`, must not be `None`")
        if currency is not None and len(currency) > 3:
            raise ValueError("Invalid value for `currency`, length must be less than or equal to `3`")
        if currency is not None and len(currency) < 3:
            raise ValueError("Invalid value for `currency`, length must be greater than or equal to `3`")

        self._currency = currency

    @property
    def customer_id(self):
        """Gets the customer_id of this Dispute.

        The dispute's customer ID.

        :return: The customer_id of this Dispute.
        :rtype: str
        """
        return self._customer_id

    @customer_id.setter
    def customer_id(self, customer_id):
        """Sets the customer_id of this Dispute.

        The dispute's customer ID.

        :param customer_id: The customer_id of this Dispute.
        :type customer_id: str
        """

        self._customer_id = customer_id

    @property
    def deadline_time(self):
        """Gets the deadline_time of this Dispute.

        Dispute deadline time.

        :return: The deadline_time of this Dispute.
        :rtype: datetime
        """
        return self._deadline_time

    @deadline_time.setter
    def deadline_time(self, deadline_time):
        """Sets the deadline_time of this Dispute.

        Dispute deadline time.

        :param deadline_time: The deadline_time of this Dispute.
        :type deadline_time: datetime
        """

        self._deadline_time = deadline_time

    @property
    def id(self):
        """Gets the id of this Dispute.

        The dispute identifier string.

        :return: The id of this Dispute.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Dispute.

        The dispute identifier string.

        :param id: The id of this Dispute.
        :type id: str
        """
        if id is not None and len(id) > 50:
            raise ValueError("Invalid value for `id`, length must be less than or equal to `50`")

        self._id = id

    @property
    def posted_time(self):
        """Gets the posted_time of this Dispute.

        Dispute posted time.

        :return: The posted_time of this Dispute.
        :rtype: datetime
        """
        return self._posted_time

    @posted_time.setter
    def posted_time(self, posted_time):
        """Sets the posted_time of this Dispute.

        Dispute posted time.

        :param posted_time: The posted_time of this Dispute.
        :type posted_time: datetime
        """
        if posted_time is None:
            raise ValueError("Invalid value for `posted_time`, must not be `None`")

        self._posted_time = posted_time

    @property
    def raw_response(self):
        """Gets the raw_response of this Dispute.

        Dispute raw response from gateway.

        :return: The raw_response of this Dispute.
        :rtype: str
        """
        return self._raw_response

    @raw_response.setter
    def raw_response(self, raw_response):
        """Sets the raw_response of this Dispute.

        Dispute raw response from gateway.

        :param raw_response: The raw_response of this Dispute.
        :type raw_response: str
        """

        self._raw_response = raw_response

    @property
    def reason_code(self):
        """Gets the reason_code of this Dispute.

        The dispute's reason code.

        :return: The reason_code of this Dispute.
        :rtype: str
        """
        return self._reason_code

    @reason_code.setter
    def reason_code(self, reason_code):
        """Sets the reason_code of this Dispute.

        The dispute's reason code.

        :param reason_code: The reason_code of this Dispute.
        :type reason_code: str
        """
        allowed_values = ["1000", "10.1", "10.2", "10.3", "10.4", "10.5", "11.1", "11.2", "11.3", "12", "12.1", "12.2", "12.3", "12.4", "12.5", "12.6", "12.7", "13.1", "13.2", "13.3", "13.4", "13.5", "13.6", "13.7", "13.8", "13.9", "2", "30", "31", "35", "37", "40", "41", "42", "46", "47", "49", "50", "53", "54", "55", "57", "59", "60", "62", "7", "70", "71", "72", "73", "74", "75", "76", "77", "79", "8", "80", "81", "82", "83", "85", "86", "93", "00", "63", "A01", "A02", "A08", "F10", "F14", "F22", "F24", "F29", "C02", "C04", "C05", "C08", "C14", "C18", "C28", "C31", "C32", "M10", "M49", "P01", "P03", "P04", "P05", "P07", "P08", "P22", "P23", "R03", "R13", "M01", "FR1", "FR4", "FR6", "AL", "AP", "AW", "CA", "CD", "CR", "DA", "DP", "DP1", "EX", "IC", "IN", "IS", "LP", "N", "NA", "NC", "P", "RG", "RM", "RN1", "RN2", "SV", "TF", "TNM", "UA01", "UA02", "UA32", "UA99", "UA03", "UA10", "UA11", "UA12", "UA18", "UA20", "UA21", "UA22", "UA23", "UA28", "UA30", "UA31", "UA38", "duplicate", "fraudulent", "subscription_canceled", "product_unacceptable", "product_not_received", "unrecognized", "credit_not_processed", "customer_initiated", "incorrect_account_details", "insufficient_funds", "bank_cannot_process", "debit_not_authorized", "general", "pre-chargeback-alert", "0", "1", "2", "3", "4", "5", "6", "7", "9", "51", "A", "B"]  # noqa: E501
        if reason_code not in allowed_values:
            raise ValueError(
                "Invalid value for `reason_code` ({0}), must be one of {1}"
                .format(reason_code, allowed_values)
            )

        self._reason_code = reason_code

    @property
    def resolved_time(self):
        """Gets the resolved_time of this Dispute.

        Dispute resolved time.

        :return: The resolved_time of this Dispute.
        :rtype: datetime
        """
        return self._resolved_time

    @resolved_time.setter
    def resolved_time(self, resolved_time):
        """Sets the resolved_time of this Dispute.

        Dispute resolved time.

        :param resolved_time: The resolved_time of this Dispute.
        :type resolved_time: datetime
        """

        self._resolved_time = resolved_time

    @property
    def status(self):
        """Gets the status of this Dispute.

        The dispute's status.

        :return: The status of this Dispute.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Dispute.

        The dispute's status.

        :param status: The status of this Dispute.
        :type status: str
        """
        allowed_values = ["response-needed", "under-review", "forfeited", "won", "lost", "unknown"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def transaction_id(self):
        """Gets the transaction_id of this Dispute.

        The dispute's transaction ID.

        :return: The transaction_id of this Dispute.
        :rtype: str
        """
        return self._transaction_id

    @transaction_id.setter
    def transaction_id(self, transaction_id):
        """Sets the transaction_id of this Dispute.

        The dispute's transaction ID.

        :param transaction_id: The transaction_id of this Dispute.
        :type transaction_id: str
        """
        if transaction_id is None:
            raise ValueError("Invalid value for `transaction_id`, must not be `None`")

        self._transaction_id = transaction_id

    @property
    def type(self):
        """Gets the type of this Dispute.

        The dispute's type.

        :return: The type of this Dispute.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Dispute.

        The dispute's type.

        :param type: The type of this Dispute.
        :type type: str
        """
        allowed_values = ["information-request", "first-chargeback", "second-chargeback", "arbitration", "fraud", "ethoca-alert", "verifi-alert"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def updated_time(self):
        """Gets the updated_time of this Dispute.

        Dispute updated time.

        :return: The updated_time of this Dispute.
        :rtype: datetime
        """
        return self._updated_time

    @updated_time.setter
    def updated_time(self, updated_time):
        """Sets the updated_time of this Dispute.

        Dispute updated time.

        :param updated_time: The updated_time of this Dispute.
        :type updated_time: datetime
        """

        self._updated_time = updated_time
