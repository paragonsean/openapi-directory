# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.contact_emails_inner import ContactEmailsInner
from openapi_server.models.contact_phone_numbers_inner import ContactPhoneNumbersInner
from openapi_server.models.organization_questionnaire import OrganizationQuestionnaire
from openapi_server.models.self_link import SelfLink
import re
from openapi_server import util


class Organization(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, links: List[SelfLink]=None, address: str=None, address2: str=None, city: str=None, country: str=None, created_time: datetime=None, emails: List[ContactEmailsInner]=None, id: str=None, invoice_time_zone: str=None, is_primary: bool=None, name: str=None, phone_numbers: List[ContactPhoneNumbersInner]=None, postal_code: str=None, questionnaire: OrganizationQuestionnaire=None, region: str=None, tax_descriptor: str=None, updated_time: datetime=None):
        """Organization - a model defined in OpenAPI

        :param links: The links of this Organization.
        :param address: The address of this Organization.
        :param address2: The address2 of this Organization.
        :param city: The city of this Organization.
        :param country: The country of this Organization.
        :param created_time: The created_time of this Organization.
        :param emails: The emails of this Organization.
        :param id: The id of this Organization.
        :param invoice_time_zone: The invoice_time_zone of this Organization.
        :param is_primary: The is_primary of this Organization.
        :param name: The name of this Organization.
        :param phone_numbers: The phone_numbers of this Organization.
        :param postal_code: The postal_code of this Organization.
        :param questionnaire: The questionnaire of this Organization.
        :param region: The region of this Organization.
        :param tax_descriptor: The tax_descriptor of this Organization.
        :param updated_time: The updated_time of this Organization.
        """
        self.openapi_types = {
            'links': List[SelfLink],
            'address': str,
            'address2': str,
            'city': str,
            'country': str,
            'created_time': datetime,
            'emails': List[ContactEmailsInner],
            'id': str,
            'invoice_time_zone': str,
            'is_primary': bool,
            'name': str,
            'phone_numbers': List[ContactPhoneNumbersInner],
            'postal_code': str,
            'questionnaire': OrganizationQuestionnaire,
            'region': str,
            'tax_descriptor': str,
            'updated_time': datetime
        }

        self.attribute_map = {
            'links': '_links',
            'address': 'address',
            'address2': 'address2',
            'city': 'city',
            'country': 'country',
            'created_time': 'createdTime',
            'emails': 'emails',
            'id': 'id',
            'invoice_time_zone': 'invoiceTimeZone',
            'is_primary': 'isPrimary',
            'name': 'name',
            'phone_numbers': 'phoneNumbers',
            'postal_code': 'postalCode',
            'questionnaire': 'questionnaire',
            'region': 'region',
            'tax_descriptor': 'taxDescriptor',
            'updated_time': 'updatedTime'
        }

        self._links = links
        self._address = address
        self._address2 = address2
        self._city = city
        self._country = country
        self._created_time = created_time
        self._emails = emails
        self._id = id
        self._invoice_time_zone = invoice_time_zone
        self._is_primary = is_primary
        self._name = name
        self._phone_numbers = phone_numbers
        self._postal_code = postal_code
        self._questionnaire = questionnaire
        self._region = region
        self._tax_descriptor = tax_descriptor
        self._updated_time = updated_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Organization':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Organization of this Organization.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def links(self):
        """Gets the links of this Organization.

        The links related to resource.

        :return: The links of this Organization.
        :rtype: List[SelfLink]
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this Organization.

        The links related to resource.

        :param links: The links of this Organization.
        :type links: List[SelfLink]
        """
        if links is not None and len(links) < 1:
            raise ValueError("Invalid value for `links`, number of items must be greater than or equal to `1`")

        self._links = links

    @property
    def address(self):
        """Gets the address of this Organization.

        The organization street address.

        :return: The address of this Organization.
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this Organization.

        The organization street address.

        :param address: The address of this Organization.
        :type address: str
        """
        if address is not None and len(address) > 60:
            raise ValueError("Invalid value for `address`, length must be less than or equal to `60`")

        self._address = address

    @property
    def address2(self):
        """Gets the address2 of this Organization.

        The organization street address.

        :return: The address2 of this Organization.
        :rtype: str
        """
        return self._address2

    @address2.setter
    def address2(self, address2):
        """Sets the address2 of this Organization.

        The organization street address.

        :param address2: The address2 of this Organization.
        :type address2: str
        """
        if address2 is not None and len(address2) > 60:
            raise ValueError("Invalid value for `address2`, length must be less than or equal to `60`")

        self._address2 = address2

    @property
    def city(self):
        """Gets the city of this Organization.

        The organization city.

        :return: The city of this Organization.
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this Organization.

        The organization city.

        :param city: The city of this Organization.
        :type city: str
        """
        if city is not None and len(city) > 45:
            raise ValueError("Invalid value for `city`, length must be less than or equal to `45`")

        self._city = city

    @property
    def country(self):
        """Gets the country of this Organization.

        The organization country ISO Alpha-2 code.

        :return: The country of this Organization.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this Organization.

        The organization country ISO Alpha-2 code.

        :param country: The country of this Organization.
        :type country: str
        """
        if country is None:
            raise ValueError("Invalid value for `country`, must not be `None`")
        if country is not None and not re.search(r'^[A-Z]{2}$', country):
            raise ValueError("Invalid value for `country`, must be a follow pattern or equal to `/^[A-Z]{2}$/`")

        self._country = country

    @property
    def created_time(self):
        """Gets the created_time of this Organization.

        The organization created time.

        :return: The created_time of this Organization.
        :rtype: datetime
        """
        return self._created_time

    @created_time.setter
    def created_time(self, created_time):
        """Sets the created_time of this Organization.

        The organization created time.

        :param created_time: The created_time of this Organization.
        :type created_time: datetime
        """

        self._created_time = created_time

    @property
    def emails(self):
        """Gets the emails of this Organization.

        The list of emails.

        :return: The emails of this Organization.
        :rtype: List[ContactEmailsInner]
        """
        return self._emails

    @emails.setter
    def emails(self, emails):
        """Sets the emails of this Organization.

        The list of emails.

        :param emails: The emails of this Organization.
        :type emails: List[ContactEmailsInner]
        """

        self._emails = emails

    @property
    def id(self):
        """Gets the id of this Organization.

        The organization identifier string.

        :return: The id of this Organization.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Organization.

        The organization identifier string.

        :param id: The id of this Organization.
        :type id: str
        """
        if id is not None and len(id) > 50:
            raise ValueError("Invalid value for `id`, length must be less than or equal to `50`")

        self._id = id

    @property
    def invoice_time_zone(self):
        """Gets the invoice_time_zone of this Organization.

        Invoice will use this time zone to display time otherwise UTC will be used. Example \"America/New_York\".

        :return: The invoice_time_zone of this Organization.
        :rtype: str
        """
        return self._invoice_time_zone

    @invoice_time_zone.setter
    def invoice_time_zone(self, invoice_time_zone):
        """Sets the invoice_time_zone of this Organization.

        Invoice will use this time zone to display time otherwise UTC will be used. Example \"America/New_York\".

        :param invoice_time_zone: The invoice_time_zone of this Organization.
        :type invoice_time_zone: str
        """
        if invoice_time_zone is not None and len(invoice_time_zone) > 50:
            raise ValueError("Invalid value for `invoice_time_zone`, length must be less than or equal to `50`")

        self._invoice_time_zone = invoice_time_zone

    @property
    def is_primary(self):
        """Gets the is_primary of this Organization.

        True, if Organization is primary (available to set as true only, other organizations will become as isPrimary=false).

        :return: The is_primary of this Organization.
        :rtype: bool
        """
        return self._is_primary

    @is_primary.setter
    def is_primary(self, is_primary):
        """Sets the is_primary of this Organization.

        True, if Organization is primary (available to set as true only, other organizations will become as isPrimary=false).

        :param is_primary: The is_primary of this Organization.
        :type is_primary: bool
        """

        self._is_primary = is_primary

    @property
    def name(self):
        """Gets the name of this Organization.

        The organization name.

        :return: The name of this Organization.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Organization.

        The organization name.

        :param name: The name of this Organization.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) > 60:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `60`")

        self._name = name

    @property
    def phone_numbers(self):
        """Gets the phone_numbers of this Organization.

        The list of phone numbers.

        :return: The phone_numbers of this Organization.
        :rtype: List[ContactPhoneNumbersInner]
        """
        return self._phone_numbers

    @phone_numbers.setter
    def phone_numbers(self, phone_numbers):
        """Sets the phone_numbers of this Organization.

        The list of phone numbers.

        :param phone_numbers: The phone_numbers of this Organization.
        :type phone_numbers: List[ContactPhoneNumbersInner]
        """

        self._phone_numbers = phone_numbers

    @property
    def postal_code(self):
        """Gets the postal_code of this Organization.

        The organization postal code.

        :return: The postal_code of this Organization.
        :rtype: str
        """
        return self._postal_code

    @postal_code.setter
    def postal_code(self, postal_code):
        """Sets the postal_code of this Organization.

        The organization postal code.

        :param postal_code: The postal_code of this Organization.
        :type postal_code: str
        """
        if postal_code is not None and len(postal_code) > 10:
            raise ValueError("Invalid value for `postal_code`, length must be less than or equal to `10`")

        self._postal_code = postal_code

    @property
    def questionnaire(self):
        """Gets the questionnaire of this Organization.


        :return: The questionnaire of this Organization.
        :rtype: OrganizationQuestionnaire
        """
        return self._questionnaire

    @questionnaire.setter
    def questionnaire(self, questionnaire):
        """Sets the questionnaire of this Organization.


        :param questionnaire: The questionnaire of this Organization.
        :type questionnaire: OrganizationQuestionnaire
        """

        self._questionnaire = questionnaire

    @property
    def region(self):
        """Gets the region of this Organization.

        The organization region (state).

        :return: The region of this Organization.
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this Organization.

        The organization region (state).

        :param region: The region of this Organization.
        :type region: str
        """
        if region is not None and len(region) > 45:
            raise ValueError("Invalid value for `region`, length must be less than or equal to `45`")

        self._region = region

    @property
    def tax_descriptor(self):
        """Gets the tax_descriptor of this Organization.

        The organization's tax label. This will be displayed on the invoice.

        :return: The tax_descriptor of this Organization.
        :rtype: str
        """
        return self._tax_descriptor

    @tax_descriptor.setter
    def tax_descriptor(self, tax_descriptor):
        """Sets the tax_descriptor of this Organization.

        The organization's tax label. This will be displayed on the invoice.

        :param tax_descriptor: The tax_descriptor of this Organization.
        :type tax_descriptor: str
        """
        if tax_descriptor is not None and len(tax_descriptor) > 255:
            raise ValueError("Invalid value for `tax_descriptor`, length must be less than or equal to `255`")

        self._tax_descriptor = tax_descriptor

    @property
    def updated_time(self):
        """Gets the updated_time of this Organization.

        The organization updated time.

        :return: The updated_time of this Organization.
        :rtype: datetime
        """
        return self._updated_time

    @updated_time.setter
    def updated_time(self, updated_time):
        """Sets the updated_time of this Organization.

        The organization updated time.

        :param updated_time: The updated_time of this Organization.
        :type updated_time: datetime
        """

        self._updated_time = updated_time
