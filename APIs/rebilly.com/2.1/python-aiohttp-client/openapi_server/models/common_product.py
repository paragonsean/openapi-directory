# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CommonProduct(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, created_time: datetime=None, custom_fields: object=None, description: str=None, id: str=None, name: str=None, options: List[str]=None, requires_shipping: bool=None, unit_label: str='unit', updated_time: datetime=None):
        """CommonProduct - a model defined in OpenAPI

        :param created_time: The created_time of this CommonProduct.
        :param custom_fields: The custom_fields of this CommonProduct.
        :param description: The description of this CommonProduct.
        :param id: The id of this CommonProduct.
        :param name: The name of this CommonProduct.
        :param options: The options of this CommonProduct.
        :param requires_shipping: The requires_shipping of this CommonProduct.
        :param unit_label: The unit_label of this CommonProduct.
        :param updated_time: The updated_time of this CommonProduct.
        """
        self.openapi_types = {
            'created_time': datetime,
            'custom_fields': object,
            'description': str,
            'id': str,
            'name': str,
            'options': List[str],
            'requires_shipping': bool,
            'unit_label': str,
            'updated_time': datetime
        }

        self.attribute_map = {
            'created_time': 'createdTime',
            'custom_fields': 'customFields',
            'description': 'description',
            'id': 'id',
            'name': 'name',
            'options': 'options',
            'requires_shipping': 'requiresShipping',
            'unit_label': 'unitLabel',
            'updated_time': 'updatedTime'
        }

        self._created_time = created_time
        self._custom_fields = custom_fields
        self._description = description
        self._id = id
        self._name = name
        self._options = options
        self._requires_shipping = requires_shipping
        self._unit_label = unit_label
        self._updated_time = updated_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CommonProduct':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CommonProduct of this CommonProduct.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def created_time(self):
        """Gets the created_time of this CommonProduct.

        The product created time.

        :return: The created_time of this CommonProduct.
        :rtype: datetime
        """
        return self._created_time

    @created_time.setter
    def created_time(self, created_time):
        """Sets the created_time of this CommonProduct.

        The product created time.

        :param created_time: The created_time of this CommonProduct.
        :type created_time: datetime
        """

        self._created_time = created_time

    @property
    def custom_fields(self):
        """Gets the custom_fields of this CommonProduct.

        Custom Fields list as a map `{\"custom field name\": \"custom field value\", ...}`. The format must follow the saved format (see Custom Fields section for the formats). 

        :return: The custom_fields of this CommonProduct.
        :rtype: object
        """
        return self._custom_fields

    @custom_fields.setter
    def custom_fields(self, custom_fields):
        """Sets the custom_fields of this CommonProduct.

        Custom Fields list as a map `{\"custom field name\": \"custom field value\", ...}`. The format must follow the saved format (see Custom Fields section for the formats). 

        :param custom_fields: The custom_fields of this CommonProduct.
        :type custom_fields: object
        """

        self._custom_fields = custom_fields

    @property
    def description(self):
        """Gets the description of this CommonProduct.

        The product description.

        :return: The description of this CommonProduct.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CommonProduct.

        The product description.

        :param description: The description of this CommonProduct.
        :type description: str
        """
        if description is not None and len(description) > 512:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `512`")

        self._description = description

    @property
    def id(self):
        """Gets the id of this CommonProduct.

        The product ID.

        :return: The id of this CommonProduct.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CommonProduct.

        The product ID.

        :param id: The id of this CommonProduct.
        :type id: str
        """
        if id is not None and len(id) > 50:
            raise ValueError("Invalid value for `id`, length must be less than or equal to `50`")

        self._id = id

    @property
    def name(self):
        """Gets the name of this CommonProduct.

        The product name.

        :return: The name of this CommonProduct.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CommonProduct.

        The product name.

        :param name: The name of this CommonProduct.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) > 255:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `255`")

        self._name = name

    @property
    def options(self):
        """Gets the options of this CommonProduct.

        The product options such as color, size, etc. The product options definition does not include option values. Those are defined within the plans. 

        :return: The options of this CommonProduct.
        :rtype: List[str]
        """
        return self._options

    @options.setter
    def options(self, options):
        """Sets the options of this CommonProduct.

        The product options such as color, size, etc. The product options definition does not include option values. Those are defined within the plans. 

        :param options: The options of this CommonProduct.
        :type options: List[str]
        """

        self._options = options

    @property
    def requires_shipping(self):
        """Gets the requires_shipping of this CommonProduct.

        If the product requires shipping, shipping calculations will be applied.

        :return: The requires_shipping of this CommonProduct.
        :rtype: bool
        """
        return self._requires_shipping

    @requires_shipping.setter
    def requires_shipping(self, requires_shipping):
        """Sets the requires_shipping of this CommonProduct.

        If the product requires shipping, shipping calculations will be applied.

        :param requires_shipping: The requires_shipping of this CommonProduct.
        :type requires_shipping: bool
        """

        self._requires_shipping = requires_shipping

    @property
    def unit_label(self):
        """Gets the unit_label of this CommonProduct.

        The unit label, such as per `seat` or per `unit`.

        :return: The unit_label of this CommonProduct.
        :rtype: str
        """
        return self._unit_label

    @unit_label.setter
    def unit_label(self, unit_label):
        """Sets the unit_label of this CommonProduct.

        The unit label, such as per `seat` or per `unit`.

        :param unit_label: The unit_label of this CommonProduct.
        :type unit_label: str
        """
        if unit_label is not None and len(unit_label) > 50:
            raise ValueError("Invalid value for `unit_label`, length must be less than or equal to `50`")

        self._unit_label = unit_label

    @property
    def updated_time(self):
        """Gets the updated_time of this CommonProduct.

        The product updated time.

        :return: The updated_time of this CommonProduct.
        :rtype: datetime
        """
        return self._updated_time

    @updated_time.setter
    def updated_time(self, updated_time):
        """Sets the updated_time of this CommonProduct.

        The product updated time.

        :param updated_time: The updated_time of this CommonProduct.
        :type updated_time: datetime
        """

        self._updated_time = updated_time
