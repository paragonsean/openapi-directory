# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PlugnpayAllOfCredentials(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, publisher_name: str=None, publisher_password: str=None):
        """PlugnpayAllOfCredentials - a model defined in OpenAPI

        :param publisher_name: The publisher_name of this PlugnpayAllOfCredentials.
        :param publisher_password: The publisher_password of this PlugnpayAllOfCredentials.
        """
        self.openapi_types = {
            'publisher_name': str,
            'publisher_password': str
        }

        self.attribute_map = {
            'publisher_name': 'publisher-name',
            'publisher_password': 'publisher-password'
        }

        self._publisher_name = publisher_name
        self._publisher_password = publisher_password

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PlugnpayAllOfCredentials':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Plugnpay_allOf_credentials of this PlugnpayAllOfCredentials.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def publisher_name(self):
        """Gets the publisher_name of this PlugnpayAllOfCredentials.

        Plugnpay Gateway member id.

        :return: The publisher_name of this PlugnpayAllOfCredentials.
        :rtype: str
        """
        return self._publisher_name

    @publisher_name.setter
    def publisher_name(self, publisher_name):
        """Sets the publisher_name of this PlugnpayAllOfCredentials.

        Plugnpay Gateway member id.

        :param publisher_name: The publisher_name of this PlugnpayAllOfCredentials.
        :type publisher_name: str
        """
        if publisher_name is None:
            raise ValueError("Invalid value for `publisher_name`, must not be `None`")

        self._publisher_name = publisher_name

    @property
    def publisher_password(self):
        """Gets the publisher_password of this PlugnpayAllOfCredentials.

        Plugnpay Gateway avs.

        :return: The publisher_password of this PlugnpayAllOfCredentials.
        :rtype: str
        """
        return self._publisher_password

    @publisher_password.setter
    def publisher_password(self, publisher_password):
        """Sets the publisher_password of this PlugnpayAllOfCredentials.

        Plugnpay Gateway avs.

        :param publisher_password: The publisher_password of this PlugnpayAllOfCredentials.
        :type publisher_password: str
        """
        if publisher_password is None:
            raise ValueError("Invalid value for `publisher_password`, must not be `None`")

        self._publisher_password = publisher_password
