# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.self_link import SelfLink
from openapi_server import util


class ResetPasswordToken(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, links: List[SelfLink]=None, credential_id: str=None, expired_time: datetime=None, token: str=None, username: str=None):
        """ResetPasswordToken - a model defined in OpenAPI

        :param links: The links of this ResetPasswordToken.
        :param credential_id: The credential_id of this ResetPasswordToken.
        :param expired_time: The expired_time of this ResetPasswordToken.
        :param token: The token of this ResetPasswordToken.
        :param username: The username of this ResetPasswordToken.
        """
        self.openapi_types = {
            'links': List[SelfLink],
            'credential_id': str,
            'expired_time': datetime,
            'token': str,
            'username': str
        }

        self.attribute_map = {
            'links': '_links',
            'credential_id': 'credentialId',
            'expired_time': 'expiredTime',
            'token': 'token',
            'username': 'username'
        }

        self._links = links
        self._credential_id = credential_id
        self._expired_time = expired_time
        self._token = token
        self._username = username

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ResetPasswordToken':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ResetPasswordToken of this ResetPasswordToken.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def links(self):
        """Gets the links of this ResetPasswordToken.

        The links related to resource.

        :return: The links of this ResetPasswordToken.
        :rtype: List[SelfLink]
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this ResetPasswordToken.

        The links related to resource.

        :param links: The links of this ResetPasswordToken.
        :type links: List[SelfLink]
        """
        if links is not None and len(links) < 1:
            raise ValueError("Invalid value for `links`, number of items must be greater than or equal to `1`")

        self._links = links

    @property
    def credential_id(self):
        """Gets the credential_id of this ResetPasswordToken.

        Token's credential ID.

        :return: The credential_id of this ResetPasswordToken.
        :rtype: str
        """
        return self._credential_id

    @credential_id.setter
    def credential_id(self, credential_id):
        """Sets the credential_id of this ResetPasswordToken.

        Token's credential ID.

        :param credential_id: The credential_id of this ResetPasswordToken.
        :type credential_id: str
        """

        self._credential_id = credential_id

    @property
    def expired_time(self):
        """Gets the expired_time of this ResetPasswordToken.

        Password expired time.

        :return: The expired_time of this ResetPasswordToken.
        :rtype: datetime
        """
        return self._expired_time

    @expired_time.setter
    def expired_time(self, expired_time):
        """Sets the expired_time of this ResetPasswordToken.

        Password expired time.

        :param expired_time: The expired_time of this ResetPasswordToken.
        :type expired_time: datetime
        """

        self._expired_time = expired_time

    @property
    def token(self):
        """Gets the token of this ResetPasswordToken.

        The token's identifier string.

        :return: The token of this ResetPasswordToken.
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token):
        """Sets the token of this ResetPasswordToken.

        The token's identifier string.

        :param token: The token of this ResetPasswordToken.
        :type token: str
        """

        self._token = token

    @property
    def username(self):
        """Gets the username of this ResetPasswordToken.

        The token's username.

        :return: The username of this ResetPasswordToken.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this ResetPasswordToken.

        The token's username.

        :param username: The username of this ResetPasswordToken.
        :type username: str
        """
        if username is None:
            raise ValueError("Invalid value for `username`, must not be `None`")

        self._username = username
