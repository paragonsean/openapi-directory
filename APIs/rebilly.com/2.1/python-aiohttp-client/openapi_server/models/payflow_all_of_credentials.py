# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PayflowAllOfCredentials(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, password: str=None, user: str=None, vendor: str=None):
        """PayflowAllOfCredentials - a model defined in OpenAPI

        :param password: The password of this PayflowAllOfCredentials.
        :param user: The user of this PayflowAllOfCredentials.
        :param vendor: The vendor of this PayflowAllOfCredentials.
        """
        self.openapi_types = {
            'password': str,
            'user': str,
            'vendor': str
        }

        self.attribute_map = {
            'password': 'password',
            'user': 'user',
            'vendor': 'vendor'
        }

        self._password = password
        self._user = user
        self._vendor = vendor

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PayflowAllOfCredentials':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Payflow_allOf_credentials of this PayflowAllOfCredentials.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def password(self):
        """Gets the password of this PayflowAllOfCredentials.

        The password you defined while registering for the account.

        :return: The password of this PayflowAllOfCredentials.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this PayflowAllOfCredentials.

        The password you defined while registering for the account.

        :param password: The password of this PayflowAllOfCredentials.
        :type password: str
        """
        if password is None:
            raise ValueError("Invalid value for `password`, must not be `None`")

        self._password = password

    @property
    def user(self):
        """Gets the user of this PayflowAllOfCredentials.

        If you set up one or more additional users on the account, this value is the ID of the user authorized to process transactions. If, however, you have not set up additional users, USER has the same value as VENDOR.

        :return: The user of this PayflowAllOfCredentials.
        :rtype: str
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this PayflowAllOfCredentials.

        If you set up one or more additional users on the account, this value is the ID of the user authorized to process transactions. If, however, you have not set up additional users, USER has the same value as VENDOR.

        :param user: The user of this PayflowAllOfCredentials.
        :type user: str
        """
        if user is None:
            raise ValueError("Invalid value for `user`, must not be `None`")

        self._user = user

    @property
    def vendor(self):
        """Gets the vendor of this PayflowAllOfCredentials.

        Your merchant login ID created when you registered for the account.

        :return: The vendor of this PayflowAllOfCredentials.
        :rtype: str
        """
        return self._vendor

    @vendor.setter
    def vendor(self, vendor):
        """Sets the vendor of this PayflowAllOfCredentials.

        Your merchant login ID created when you registered for the account.

        :param vendor: The vendor of this PayflowAllOfCredentials.
        :type vendor: str
        """
        if vendor is None:
            raise ValueError("Invalid value for `vendor`, must not be `None`")

        self._vendor = vendor
