# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ThreeDSecureResult(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, authenticated: str=None, enrolled: str=None, flow: str=None, is_downgraded: bool=False, liability: str=None, version: str=None):
        """ThreeDSecureResult - a model defined in OpenAPI

        :param authenticated: The authenticated of this ThreeDSecureResult.
        :param enrolled: The enrolled of this ThreeDSecureResult.
        :param flow: The flow of this ThreeDSecureResult.
        :param is_downgraded: The is_downgraded of this ThreeDSecureResult.
        :param liability: The liability of this ThreeDSecureResult.
        :param version: The version of this ThreeDSecureResult.
        """
        self.openapi_types = {
            'authenticated': str,
            'enrolled': str,
            'flow': str,
            'is_downgraded': bool,
            'liability': str,
            'version': str
        }

        self.attribute_map = {
            'authenticated': 'authenticated',
            'enrolled': 'enrolled',
            'flow': 'flow',
            'is_downgraded': 'isDowngraded',
            'liability': 'liability',
            'version': 'version'
        }

        self._authenticated = authenticated
        self._enrolled = enrolled
        self._flow = flow
        self._is_downgraded = is_downgraded
        self._liability = liability
        self._version = version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ThreeDSecureResult':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ThreeDSecureResult of this ThreeDSecureResult.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def authenticated(self):
        """Gets the authenticated of this ThreeDSecureResult.

        3D Secure authentication response status.

        :return: The authenticated of this ThreeDSecureResult.
        :rtype: str
        """
        return self._authenticated

    @authenticated.setter
    def authenticated(self, authenticated):
        """Sets the authenticated of this ThreeDSecureResult.

        3D Secure authentication response status.

        :param authenticated: The authenticated of this ThreeDSecureResult.
        :type authenticated: str
        """
        allowed_values = ["true", "false", "not applicable", "attempted"]  # noqa: E501
        if authenticated not in allowed_values:
            raise ValueError(
                "Invalid value for `authenticated` ({0}), must be one of {1}"
                .format(authenticated, allowed_values)
            )

        self._authenticated = authenticated

    @property
    def enrolled(self):
        """Gets the enrolled of this ThreeDSecureResult.

        Is the cardholder enrolled in 3D Secure.

        :return: The enrolled of this ThreeDSecureResult.
        :rtype: str
        """
        return self._enrolled

    @enrolled.setter
    def enrolled(self, enrolled):
        """Sets the enrolled of this ThreeDSecureResult.

        Is the cardholder enrolled in 3D Secure.

        :param enrolled: The enrolled of this ThreeDSecureResult.
        :type enrolled: str
        """
        allowed_values = ["true", "false", "invalid card/timeout", "unavailable"]  # noqa: E501
        if enrolled not in allowed_values:
            raise ValueError(
                "Invalid value for `enrolled` ({0}), must be one of {1}"
                .format(enrolled, allowed_values)
            )

        self._enrolled = enrolled

    @property
    def flow(self):
        """Gets the flow of this ThreeDSecureResult.

        3D Secure 2 authentication flow.

        :return: The flow of this ThreeDSecureResult.
        :rtype: str
        """
        return self._flow

    @flow.setter
    def flow(self, flow):
        """Sets the flow of this ThreeDSecureResult.

        3D Secure 2 authentication flow.

        :param flow: The flow of this ThreeDSecureResult.
        :type flow: str
        """
        allowed_values = ["frictionless", "challenge"]  # noqa: E501
        if flow not in allowed_values:
            raise ValueError(
                "Invalid value for `flow` ({0}), must be one of {1}"
                .format(flow, allowed_values)
            )

        self._flow = flow

    @property
    def is_downgraded(self):
        """Gets the is_downgraded of this ThreeDSecureResult.

        If 3D Secure 2 was attempted but downgraded to 3D Secure 1.

        :return: The is_downgraded of this ThreeDSecureResult.
        :rtype: bool
        """
        return self._is_downgraded

    @is_downgraded.setter
    def is_downgraded(self, is_downgraded):
        """Sets the is_downgraded of this ThreeDSecureResult.

        If 3D Secure 2 was attempted but downgraded to 3D Secure 1.

        :param is_downgraded: The is_downgraded of this ThreeDSecureResult.
        :type is_downgraded: bool
        """
        if is_downgraded is None:
            raise ValueError("Invalid value for `is_downgraded`, must not be `None`")

        self._is_downgraded = is_downgraded

    @property
    def liability(self):
        """Gets the liability of this ThreeDSecureResult.


        :return: The liability of this ThreeDSecureResult.
        :rtype: str
        """
        return self._liability

    @liability.setter
    def liability(self, liability):
        """Sets the liability of this ThreeDSecureResult.


        :param liability: The liability of this ThreeDSecureResult.
        :type liability: str
        """
        allowed_values = ["protected", "not protected", "protected (attempt)"]  # noqa: E501
        if liability not in allowed_values:
            raise ValueError(
                "Invalid value for `liability` ({0}), must be one of {1}"
                .format(liability, allowed_values)
            )

        self._liability = liability

    @property
    def version(self):
        """Gets the version of this ThreeDSecureResult.

        3D Secure version.

        :return: The version of this ThreeDSecureResult.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this ThreeDSecureResult.

        3D Secure version.

        :param version: The version of this ThreeDSecureResult.
        :type version: str
        """
        allowed_values = ["1.0.2", "2.1.0", "2.2.0"]  # noqa: E501
        if version not in allowed_values:
            raise ValueError(
                "Invalid value for `version` ({0}), must be one of {1}"
                .format(version, allowed_values)
            )

        self._version = version
