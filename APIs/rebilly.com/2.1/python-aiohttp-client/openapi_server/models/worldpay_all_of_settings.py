# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class WorldpayAllOfSettings(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, delay: int=0, enable_stored_credentials: bool=False, merchant_initiated_reason: str='UNSCHEDULED'):
        """WorldpayAllOfSettings - a model defined in OpenAPI

        :param delay: The delay of this WorldpayAllOfSettings.
        :param enable_stored_credentials: The enable_stored_credentials of this WorldpayAllOfSettings.
        :param merchant_initiated_reason: The merchant_initiated_reason of this WorldpayAllOfSettings.
        """
        self.openapi_types = {
            'delay': int,
            'enable_stored_credentials': bool,
            'merchant_initiated_reason': str
        }

        self.attribute_map = {
            'delay': 'delay',
            'enable_stored_credentials': 'enableStoredCredentials',
            'merchant_initiated_reason': 'merchantInitiatedReason'
        }

        self._delay = delay
        self._enable_stored_credentials = enable_stored_credentials
        self._merchant_initiated_reason = merchant_initiated_reason

    @classmethod
    def from_dict(cls, dikt: dict) -> 'WorldpayAllOfSettings':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Worldpay_allOf_settings of this WorldpayAllOfSettings.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def delay(self):
        """Gets the delay of this WorldpayAllOfSettings.

        Auto Capture delay (in hours).

        :return: The delay of this WorldpayAllOfSettings.
        :rtype: int
        """
        return self._delay

    @delay.setter
    def delay(self, delay):
        """Sets the delay of this WorldpayAllOfSettings.

        Auto Capture delay (in hours).

        :param delay: The delay of this WorldpayAllOfSettings.
        :type delay: int
        """
        if delay is not None and delay < 0:
            raise ValueError("Invalid value for `delay`, must be a value greater than or equal to `0`")

        self._delay = delay

    @property
    def enable_stored_credentials(self):
        """Gets the enable_stored_credentials of this WorldpayAllOfSettings.

        True to enable Stored Credentials.

        :return: The enable_stored_credentials of this WorldpayAllOfSettings.
        :rtype: bool
        """
        return self._enable_stored_credentials

    @enable_stored_credentials.setter
    def enable_stored_credentials(self, enable_stored_credentials):
        """Sets the enable_stored_credentials of this WorldpayAllOfSettings.

        True to enable Stored Credentials.

        :param enable_stored_credentials: The enable_stored_credentials of this WorldpayAllOfSettings.
        :type enable_stored_credentials: bool
        """

        self._enable_stored_credentials = enable_stored_credentials

    @property
    def merchant_initiated_reason(self):
        """Gets the merchant_initiated_reason of this WorldpayAllOfSettings.

        The value of merchantInitiatedReason to send with merchant-initiated transactions.

        :return: The merchant_initiated_reason of this WorldpayAllOfSettings.
        :rtype: str
        """
        return self._merchant_initiated_reason

    @merchant_initiated_reason.setter
    def merchant_initiated_reason(self, merchant_initiated_reason):
        """Sets the merchant_initiated_reason of this WorldpayAllOfSettings.

        The value of merchantInitiatedReason to send with merchant-initiated transactions.

        :param merchant_initiated_reason: The merchant_initiated_reason of this WorldpayAllOfSettings.
        :type merchant_initiated_reason: str
        """
        allowed_values = ["UNSCHEDULED", "RECURRING", "INSTALMENT", "REAUTH", "DELAYED", "INCREMENTAL", "RESUBMISSION", "NOSHOW"]  # noqa: E501
        if merchant_initiated_reason not in allowed_values:
            raise ValueError(
                "Invalid value for `merchant_initiated_reason` ({0}), must be one of {1}"
                .format(merchant_initiated_reason, allowed_values)
            )

        self._merchant_initiated_reason = merchant_initiated_reason
