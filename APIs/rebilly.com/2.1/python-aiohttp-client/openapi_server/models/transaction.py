# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.acquirer_name import AcquirerName
from openapi_server.models.contact_object import ContactObject
from openapi_server.models.gateway_name import GatewayName
from openapi_server.models.payment_instrument import PaymentInstrument
from openapi_server.models.payment_method import PaymentMethod
from openapi_server.models.payment_retry import PaymentRetry
from openapi_server.models.risk_metadata import RiskMetadata
from openapi_server.models.three_d_secure_result import ThreeDSecureResult
from openapi_server.models.transaction_all_of_bump_offer import TransactionAllOfBumpOffer
from openapi_server.models.transaction_all_of_dcc import TransactionAllOfDcc
from openapi_server.models.transaction_all_of_embedded import TransactionAllOfEmbedded
from openapi_server.models.transaction_all_of_gateway import TransactionAllOfGateway
from openapi_server.models.transaction_all_of_links import TransactionAllOfLinks
from openapi_server import util


class Transaction(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, _3ds: ThreeDSecureResult=None, amount: float=None, billing_address: ContactObject=None, billing_descriptor: str=None, child_transactions: List[str]=None, created_time: datetime=None, currency: str=None, custom_fields: object=None, customer_id: str=None, description: str=None, gateway_name: GatewayName=None, has3ds: bool=None, has_amount_adjustment: bool=None, id: str=None, invoice_ids: List[str]=None, is_rebill: bool=None, is_retry: bool=None, parent_transaction_id: str=None, payment_instrument: PaymentInstrument=None, plan_ids: List[str]=None, processed_time: datetime=None, purchase_amount: float=None, purchase_currency: str=None, rebill_number: int=None, redirect_url: str=None, request_amount: float=None, request_currency: str=None, request_id: str=None, result: str=None, retry_number: int=None, status: str=None, subscription_ids: List[str]=None, type: str=None, updated_time: datetime=None, website_id: str=None, embedded: List[TransactionAllOfEmbedded]=None, links: List[TransactionAllOfLinks]=None, acquirer_name: AcquirerName=None, arn: str=None, bin: str=None, bump_offer: TransactionAllOfBumpOffer=None, dcc: TransactionAllOfDcc=None, discrepancy_time: datetime=None, dispute_status: str=None, dispute_time: datetime=None, gateway: TransactionAllOfGateway=None, gateway_account_id: str=None, gateway_transaction_id: str=None, had_discrepancy: bool=None, has_bump_offer: bool=None, has_dcc: bool=None, is_disputed: bool=None, is_merchant_initiated: bool=None, is_processed_outside: bool=None, is_reconciled: bool=None, method: PaymentMethod=None, notification_url: str=None, order_id: str=None, reference_data: Dict[str, str]=None, report_amount: float=None, report_currency: str=None, retried_transaction_id: str=None, retries_result: str=None, retry_instruction: PaymentRetry=None, revision: int=None, risk_metadata: RiskMetadata=None, risk_score: int=None, scheduled_time: datetime=None, settlement_time: datetime=None, velocity: int=None):
        """Transaction - a model defined in OpenAPI

        :param _3ds: The _3ds of this Transaction.
        :param amount: The amount of this Transaction.
        :param billing_address: The billing_address of this Transaction.
        :param billing_descriptor: The billing_descriptor of this Transaction.
        :param child_transactions: The child_transactions of this Transaction.
        :param created_time: The created_time of this Transaction.
        :param currency: The currency of this Transaction.
        :param custom_fields: The custom_fields of this Transaction.
        :param customer_id: The customer_id of this Transaction.
        :param description: The description of this Transaction.
        :param gateway_name: The gateway_name of this Transaction.
        :param has3ds: The has3ds of this Transaction.
        :param has_amount_adjustment: The has_amount_adjustment of this Transaction.
        :param id: The id of this Transaction.
        :param invoice_ids: The invoice_ids of this Transaction.
        :param is_rebill: The is_rebill of this Transaction.
        :param is_retry: The is_retry of this Transaction.
        :param parent_transaction_id: The parent_transaction_id of this Transaction.
        :param payment_instrument: The payment_instrument of this Transaction.
        :param plan_ids: The plan_ids of this Transaction.
        :param processed_time: The processed_time of this Transaction.
        :param purchase_amount: The purchase_amount of this Transaction.
        :param purchase_currency: The purchase_currency of this Transaction.
        :param rebill_number: The rebill_number of this Transaction.
        :param redirect_url: The redirect_url of this Transaction.
        :param request_amount: The request_amount of this Transaction.
        :param request_currency: The request_currency of this Transaction.
        :param request_id: The request_id of this Transaction.
        :param result: The result of this Transaction.
        :param retry_number: The retry_number of this Transaction.
        :param status: The status of this Transaction.
        :param subscription_ids: The subscription_ids of this Transaction.
        :param type: The type of this Transaction.
        :param updated_time: The updated_time of this Transaction.
        :param website_id: The website_id of this Transaction.
        :param embedded: The embedded of this Transaction.
        :param links: The links of this Transaction.
        :param acquirer_name: The acquirer_name of this Transaction.
        :param arn: The arn of this Transaction.
        :param bin: The bin of this Transaction.
        :param bump_offer: The bump_offer of this Transaction.
        :param dcc: The dcc of this Transaction.
        :param discrepancy_time: The discrepancy_time of this Transaction.
        :param dispute_status: The dispute_status of this Transaction.
        :param dispute_time: The dispute_time of this Transaction.
        :param gateway: The gateway of this Transaction.
        :param gateway_account_id: The gateway_account_id of this Transaction.
        :param gateway_transaction_id: The gateway_transaction_id of this Transaction.
        :param had_discrepancy: The had_discrepancy of this Transaction.
        :param has_bump_offer: The has_bump_offer of this Transaction.
        :param has_dcc: The has_dcc of this Transaction.
        :param is_disputed: The is_disputed of this Transaction.
        :param is_merchant_initiated: The is_merchant_initiated of this Transaction.
        :param is_processed_outside: The is_processed_outside of this Transaction.
        :param is_reconciled: The is_reconciled of this Transaction.
        :param method: The method of this Transaction.
        :param notification_url: The notification_url of this Transaction.
        :param order_id: The order_id of this Transaction.
        :param reference_data: The reference_data of this Transaction.
        :param report_amount: The report_amount of this Transaction.
        :param report_currency: The report_currency of this Transaction.
        :param retried_transaction_id: The retried_transaction_id of this Transaction.
        :param retries_result: The retries_result of this Transaction.
        :param retry_instruction: The retry_instruction of this Transaction.
        :param revision: The revision of this Transaction.
        :param risk_metadata: The risk_metadata of this Transaction.
        :param risk_score: The risk_score of this Transaction.
        :param scheduled_time: The scheduled_time of this Transaction.
        :param settlement_time: The settlement_time of this Transaction.
        :param velocity: The velocity of this Transaction.
        """
        self.openapi_types = {
            '_3ds': ThreeDSecureResult,
            'amount': float,
            'billing_address': ContactObject,
            'billing_descriptor': str,
            'child_transactions': List[str],
            'created_time': datetime,
            'currency': str,
            'custom_fields': object,
            'customer_id': str,
            'description': str,
            'gateway_name': GatewayName,
            'has3ds': bool,
            'has_amount_adjustment': bool,
            'id': str,
            'invoice_ids': List[str],
            'is_rebill': bool,
            'is_retry': bool,
            'parent_transaction_id': str,
            'payment_instrument': PaymentInstrument,
            'plan_ids': List[str],
            'processed_time': datetime,
            'purchase_amount': float,
            'purchase_currency': str,
            'rebill_number': int,
            'redirect_url': str,
            'request_amount': float,
            'request_currency': str,
            'request_id': str,
            'result': str,
            'retry_number': int,
            'status': str,
            'subscription_ids': List[str],
            'type': str,
            'updated_time': datetime,
            'website_id': str,
            'embedded': List[TransactionAllOfEmbedded],
            'links': List[TransactionAllOfLinks],
            'acquirer_name': AcquirerName,
            'arn': str,
            'bin': str,
            'bump_offer': TransactionAllOfBumpOffer,
            'dcc': TransactionAllOfDcc,
            'discrepancy_time': datetime,
            'dispute_status': str,
            'dispute_time': datetime,
            'gateway': TransactionAllOfGateway,
            'gateway_account_id': str,
            'gateway_transaction_id': str,
            'had_discrepancy': bool,
            'has_bump_offer': bool,
            'has_dcc': bool,
            'is_disputed': bool,
            'is_merchant_initiated': bool,
            'is_processed_outside': bool,
            'is_reconciled': bool,
            'method': PaymentMethod,
            'notification_url': str,
            'order_id': str,
            'reference_data': Dict[str, str],
            'report_amount': float,
            'report_currency': str,
            'retried_transaction_id': str,
            'retries_result': str,
            'retry_instruction': PaymentRetry,
            'revision': int,
            'risk_metadata': RiskMetadata,
            'risk_score': int,
            'scheduled_time': datetime,
            'settlement_time': datetime,
            'velocity': int
        }

        self.attribute_map = {
            '_3ds': '3ds',
            'amount': 'amount',
            'billing_address': 'billingAddress',
            'billing_descriptor': 'billingDescriptor',
            'child_transactions': 'childTransactions',
            'created_time': 'createdTime',
            'currency': 'currency',
            'custom_fields': 'customFields',
            'customer_id': 'customerId',
            'description': 'description',
            'gateway_name': 'gatewayName',
            'has3ds': 'has3ds',
            'has_amount_adjustment': 'hasAmountAdjustment',
            'id': 'id',
            'invoice_ids': 'invoiceIds',
            'is_rebill': 'isRebill',
            'is_retry': 'isRetry',
            'parent_transaction_id': 'parentTransactionId',
            'payment_instrument': 'paymentInstrument',
            'plan_ids': 'planIds',
            'processed_time': 'processedTime',
            'purchase_amount': 'purchaseAmount',
            'purchase_currency': 'purchaseCurrency',
            'rebill_number': 'rebillNumber',
            'redirect_url': 'redirectUrl',
            'request_amount': 'requestAmount',
            'request_currency': 'requestCurrency',
            'request_id': 'requestId',
            'result': 'result',
            'retry_number': 'retryNumber',
            'status': 'status',
            'subscription_ids': 'subscriptionIds',
            'type': 'type',
            'updated_time': 'updatedTime',
            'website_id': 'websiteId',
            'embedded': '_embedded',
            'links': '_links',
            'acquirer_name': 'acquirerName',
            'arn': 'arn',
            'bin': 'bin',
            'bump_offer': 'bumpOffer',
            'dcc': 'dcc',
            'discrepancy_time': 'discrepancyTime',
            'dispute_status': 'disputeStatus',
            'dispute_time': 'disputeTime',
            'gateway': 'gateway',
            'gateway_account_id': 'gatewayAccountId',
            'gateway_transaction_id': 'gatewayTransactionId',
            'had_discrepancy': 'hadDiscrepancy',
            'has_bump_offer': 'hasBumpOffer',
            'has_dcc': 'hasDcc',
            'is_disputed': 'isDisputed',
            'is_merchant_initiated': 'isMerchantInitiated',
            'is_processed_outside': 'isProcessedOutside',
            'is_reconciled': 'isReconciled',
            'method': 'method',
            'notification_url': 'notificationUrl',
            'order_id': 'orderId',
            'reference_data': 'referenceData',
            'report_amount': 'reportAmount',
            'report_currency': 'reportCurrency',
            'retried_transaction_id': 'retriedTransactionId',
            'retries_result': 'retriesResult',
            'retry_instruction': 'retryInstruction',
            'revision': 'revision',
            'risk_metadata': 'riskMetadata',
            'risk_score': 'riskScore',
            'scheduled_time': 'scheduledTime',
            'settlement_time': 'settlementTime',
            'velocity': 'velocity'
        }

        self.__3ds = _3ds
        self._amount = amount
        self._billing_address = billing_address
        self._billing_descriptor = billing_descriptor
        self._child_transactions = child_transactions
        self._created_time = created_time
        self._currency = currency
        self._custom_fields = custom_fields
        self._customer_id = customer_id
        self._description = description
        self._gateway_name = gateway_name
        self._has3ds = has3ds
        self._has_amount_adjustment = has_amount_adjustment
        self._id = id
        self._invoice_ids = invoice_ids
        self._is_rebill = is_rebill
        self._is_retry = is_retry
        self._parent_transaction_id = parent_transaction_id
        self._payment_instrument = payment_instrument
        self._plan_ids = plan_ids
        self._processed_time = processed_time
        self._purchase_amount = purchase_amount
        self._purchase_currency = purchase_currency
        self._rebill_number = rebill_number
        self._redirect_url = redirect_url
        self._request_amount = request_amount
        self._request_currency = request_currency
        self._request_id = request_id
        self._result = result
        self._retry_number = retry_number
        self._status = status
        self._subscription_ids = subscription_ids
        self._type = type
        self._updated_time = updated_time
        self._website_id = website_id
        self._embedded = embedded
        self._links = links
        self._acquirer_name = acquirer_name
        self._arn = arn
        self._bin = bin
        self._bump_offer = bump_offer
        self._dcc = dcc
        self._discrepancy_time = discrepancy_time
        self._dispute_status = dispute_status
        self._dispute_time = dispute_time
        self._gateway = gateway
        self._gateway_account_id = gateway_account_id
        self._gateway_transaction_id = gateway_transaction_id
        self._had_discrepancy = had_discrepancy
        self._has_bump_offer = has_bump_offer
        self._has_dcc = has_dcc
        self._is_disputed = is_disputed
        self._is_merchant_initiated = is_merchant_initiated
        self._is_processed_outside = is_processed_outside
        self._is_reconciled = is_reconciled
        self._method = method
        self._notification_url = notification_url
        self._order_id = order_id
        self._reference_data = reference_data
        self._report_amount = report_amount
        self._report_currency = report_currency
        self._retried_transaction_id = retried_transaction_id
        self._retries_result = retries_result
        self._retry_instruction = retry_instruction
        self._revision = revision
        self._risk_metadata = risk_metadata
        self._risk_score = risk_score
        self._scheduled_time = scheduled_time
        self._settlement_time = settlement_time
        self._velocity = velocity

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Transaction':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Transaction of this Transaction.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def _3ds(self):
        """Gets the _3ds of this Transaction.


        :return: The _3ds of this Transaction.
        :rtype: ThreeDSecureResult
        """
        return self.__3ds

    @_3ds.setter
    def _3ds(self, _3ds):
        """Sets the _3ds of this Transaction.


        :param _3ds: The _3ds of this Transaction.
        :type _3ds: ThreeDSecureResult
        """

        self.__3ds = _3ds

    @property
    def amount(self):
        """Gets the amount of this Transaction.

        The transaction's amount.

        :return: The amount of this Transaction.
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this Transaction.

        The transaction's amount.

        :param amount: The amount of this Transaction.
        :type amount: float
        """

        self._amount = amount

    @property
    def billing_address(self):
        """Gets the billing_address of this Transaction.

        Billing address.

        :return: The billing_address of this Transaction.
        :rtype: ContactObject
        """
        return self._billing_address

    @billing_address.setter
    def billing_address(self, billing_address):
        """Sets the billing_address of this Transaction.

        Billing address.

        :param billing_address: The billing_address of this Transaction.
        :type billing_address: ContactObject
        """

        self._billing_address = billing_address

    @property
    def billing_descriptor(self):
        """Gets the billing_descriptor of this Transaction.

        The billing descriptor that appears on the periodic billing statement. Commonly 12 or fewer characters for a credit card statement. 

        :return: The billing_descriptor of this Transaction.
        :rtype: str
        """
        return self._billing_descriptor

    @billing_descriptor.setter
    def billing_descriptor(self, billing_descriptor):
        """Sets the billing_descriptor of this Transaction.

        The billing descriptor that appears on the periodic billing statement. Commonly 12 or fewer characters for a credit card statement. 

        :param billing_descriptor: The billing_descriptor of this Transaction.
        :type billing_descriptor: str
        """

        self._billing_descriptor = billing_descriptor

    @property
    def child_transactions(self):
        """Gets the child_transactions of this Transaction.

        The child transaction IDs.

        :return: The child_transactions of this Transaction.
        :rtype: List[str]
        """
        return self._child_transactions

    @child_transactions.setter
    def child_transactions(self, child_transactions):
        """Sets the child_transactions of this Transaction.

        The child transaction IDs.

        :param child_transactions: The child_transactions of this Transaction.
        :type child_transactions: List[str]
        """

        self._child_transactions = child_transactions

    @property
    def created_time(self):
        """Gets the created_time of this Transaction.

        Transaction created time.

        :return: The created_time of this Transaction.
        :rtype: datetime
        """
        return self._created_time

    @created_time.setter
    def created_time(self, created_time):
        """Sets the created_time of this Transaction.

        Transaction created time.

        :param created_time: The created_time of this Transaction.
        :type created_time: datetime
        """

        self._created_time = created_time

    @property
    def currency(self):
        """Gets the currency of this Transaction.

        ISO 4217 alphabetic currency code.

        :return: The currency of this Transaction.
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this Transaction.

        ISO 4217 alphabetic currency code.

        :param currency: The currency of this Transaction.
        :type currency: str
        """
        if currency is not None and len(currency) > 3:
            raise ValueError("Invalid value for `currency`, length must be less than or equal to `3`")
        if currency is not None and len(currency) < 3:
            raise ValueError("Invalid value for `currency`, length must be greater than or equal to `3`")

        self._currency = currency

    @property
    def custom_fields(self):
        """Gets the custom_fields of this Transaction.

        Custom Fields list as a map `{\"custom field name\": \"custom field value\", ...}`. The format must follow the saved format (see Custom Fields section for the formats). 

        :return: The custom_fields of this Transaction.
        :rtype: object
        """
        return self._custom_fields

    @custom_fields.setter
    def custom_fields(self, custom_fields):
        """Sets the custom_fields of this Transaction.

        Custom Fields list as a map `{\"custom field name\": \"custom field value\", ...}`. The format must follow the saved format (see Custom Fields section for the formats). 

        :param custom_fields: The custom_fields of this Transaction.
        :type custom_fields: object
        """

        self._custom_fields = custom_fields

    @property
    def customer_id(self):
        """Gets the customer_id of this Transaction.

        The сustomer's ID.

        :return: The customer_id of this Transaction.
        :rtype: str
        """
        return self._customer_id

    @customer_id.setter
    def customer_id(self, customer_id):
        """Sets the customer_id of this Transaction.

        The сustomer's ID.

        :param customer_id: The customer_id of this Transaction.
        :type customer_id: str
        """
        if customer_id is not None and len(customer_id) > 50:
            raise ValueError("Invalid value for `customer_id`, length must be less than or equal to `50`")

        self._customer_id = customer_id

    @property
    def description(self):
        """Gets the description of this Transaction.

        The payment description.

        :return: The description of this Transaction.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Transaction.

        The payment description.

        :param description: The description of this Transaction.
        :type description: str
        """
        if description is not None and len(description) > 255:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `255`")

        self._description = description

    @property
    def gateway_name(self):
        """Gets the gateway_name of this Transaction.

        Payment Gateway name, available only after the gateway is selected for the transaction. 

        :return: The gateway_name of this Transaction.
        :rtype: GatewayName
        """
        return self._gateway_name

    @gateway_name.setter
    def gateway_name(self, gateway_name):
        """Sets the gateway_name of this Transaction.

        Payment Gateway name, available only after the gateway is selected for the transaction. 

        :param gateway_name: The gateway_name of this Transaction.
        :type gateway_name: GatewayName
        """

        self._gateway_name = gateway_name

    @property
    def has3ds(self):
        """Gets the has3ds of this Transaction.


        :return: The has3ds of this Transaction.
        :rtype: bool
        """
        return self._has3ds

    @has3ds.setter
    def has3ds(self, has3ds):
        """Sets the has3ds of this Transaction.


        :param has3ds: The has3ds of this Transaction.
        :type has3ds: bool
        """

        self._has3ds = has3ds

    @property
    def has_amount_adjustment(self):
        """Gets the has_amount_adjustment of this Transaction.

        True if transaction has amount adjustment.

        :return: The has_amount_adjustment of this Transaction.
        :rtype: bool
        """
        return self._has_amount_adjustment

    @has_amount_adjustment.setter
    def has_amount_adjustment(self, has_amount_adjustment):
        """Sets the has_amount_adjustment of this Transaction.

        True if transaction has amount adjustment.

        :param has_amount_adjustment: The has_amount_adjustment of this Transaction.
        :type has_amount_adjustment: bool
        """

        self._has_amount_adjustment = has_amount_adjustment

    @property
    def id(self):
        """Gets the id of this Transaction.

        The transaction ID.

        :return: The id of this Transaction.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Transaction.

        The transaction ID.

        :param id: The id of this Transaction.
        :type id: str
        """
        if id is not None and len(id) > 50:
            raise ValueError("Invalid value for `id`, length must be less than or equal to `50`")

        self._id = id

    @property
    def invoice_ids(self):
        """Gets the invoice_ids of this Transaction.

        The invoice IDs related to transaction.

        :return: The invoice_ids of this Transaction.
        :rtype: List[str]
        """
        return self._invoice_ids

    @invoice_ids.setter
    def invoice_ids(self, invoice_ids):
        """Sets the invoice_ids of this Transaction.

        The invoice IDs related to transaction.

        :param invoice_ids: The invoice_ids of this Transaction.
        :type invoice_ids: List[str]
        """

        self._invoice_ids = invoice_ids

    @property
    def is_rebill(self):
        """Gets the is_rebill of this Transaction.


        :return: The is_rebill of this Transaction.
        :rtype: bool
        """
        return self._is_rebill

    @is_rebill.setter
    def is_rebill(self, is_rebill):
        """Sets the is_rebill of this Transaction.


        :param is_rebill: The is_rebill of this Transaction.
        :type is_rebill: bool
        """

        self._is_rebill = is_rebill

    @property
    def is_retry(self):
        """Gets the is_retry of this Transaction.

        True if this transaction is retry.

        :return: The is_retry of this Transaction.
        :rtype: bool
        """
        return self._is_retry

    @is_retry.setter
    def is_retry(self, is_retry):
        """Sets the is_retry of this Transaction.

        True if this transaction is retry.

        :param is_retry: The is_retry of this Transaction.
        :type is_retry: bool
        """

        self._is_retry = is_retry

    @property
    def parent_transaction_id(self):
        """Gets the parent_transaction_id of this Transaction.

        The parent's transaction ID.

        :return: The parent_transaction_id of this Transaction.
        :rtype: str
        """
        return self._parent_transaction_id

    @parent_transaction_id.setter
    def parent_transaction_id(self, parent_transaction_id):
        """Sets the parent_transaction_id of this Transaction.

        The parent's transaction ID.

        :param parent_transaction_id: The parent_transaction_id of this Transaction.
        :type parent_transaction_id: str
        """
        if parent_transaction_id is not None and len(parent_transaction_id) > 50:
            raise ValueError("Invalid value for `parent_transaction_id`, length must be less than or equal to `50`")

        self._parent_transaction_id = parent_transaction_id

    @property
    def payment_instrument(self):
        """Gets the payment_instrument of this Transaction.


        :return: The payment_instrument of this Transaction.
        :rtype: PaymentInstrument
        """
        return self._payment_instrument

    @payment_instrument.setter
    def payment_instrument(self, payment_instrument):
        """Sets the payment_instrument of this Transaction.


        :param payment_instrument: The payment_instrument of this Transaction.
        :type payment_instrument: PaymentInstrument
        """

        self._payment_instrument = payment_instrument

    @property
    def plan_ids(self):
        """Gets the plan_ids of this Transaction.

        The plan IDs related to transaction's order(s).

        :return: The plan_ids of this Transaction.
        :rtype: List[str]
        """
        return self._plan_ids

    @plan_ids.setter
    def plan_ids(self, plan_ids):
        """Sets the plan_ids of this Transaction.

        The plan IDs related to transaction's order(s).

        :param plan_ids: The plan_ids of this Transaction.
        :type plan_ids: List[str]
        """

        self._plan_ids = plan_ids

    @property
    def processed_time(self):
        """Gets the processed_time of this Transaction.

        Transaction processed time.

        :return: The processed_time of this Transaction.
        :rtype: datetime
        """
        return self._processed_time

    @processed_time.setter
    def processed_time(self, processed_time):
        """Sets the processed_time of this Transaction.

        Transaction processed time.

        :param processed_time: The processed_time of this Transaction.
        :type processed_time: datetime
        """

        self._processed_time = processed_time

    @property
    def purchase_amount(self):
        """Gets the purchase_amount of this Transaction.

        The amount actually purchased which may have differed from the originally requested amount in case of an adjustment.

        :return: The purchase_amount of this Transaction.
        :rtype: float
        """
        return self._purchase_amount

    @purchase_amount.setter
    def purchase_amount(self, purchase_amount):
        """Sets the purchase_amount of this Transaction.

        The amount actually purchased which may have differed from the originally requested amount in case of an adjustment.

        :param purchase_amount: The purchase_amount of this Transaction.
        :type purchase_amount: float
        """

        self._purchase_amount = purchase_amount

    @property
    def purchase_currency(self):
        """Gets the purchase_currency of this Transaction.

        ISO 4217 alphabetic currency code.

        :return: The purchase_currency of this Transaction.
        :rtype: str
        """
        return self._purchase_currency

    @purchase_currency.setter
    def purchase_currency(self, purchase_currency):
        """Sets the purchase_currency of this Transaction.

        ISO 4217 alphabetic currency code.

        :param purchase_currency: The purchase_currency of this Transaction.
        :type purchase_currency: str
        """
        if purchase_currency is not None and len(purchase_currency) > 3:
            raise ValueError("Invalid value for `purchase_currency`, length must be less than or equal to `3`")
        if purchase_currency is not None and len(purchase_currency) < 3:
            raise ValueError("Invalid value for `purchase_currency`, length must be greater than or equal to `3`")

        self._purchase_currency = purchase_currency

    @property
    def rebill_number(self):
        """Gets the rebill_number of this Transaction.

        The transaction's rebill number.

        :return: The rebill_number of this Transaction.
        :rtype: int
        """
        return self._rebill_number

    @rebill_number.setter
    def rebill_number(self, rebill_number):
        """Sets the rebill_number of this Transaction.

        The transaction's rebill number.

        :param rebill_number: The rebill_number of this Transaction.
        :type rebill_number: int
        """

        self._rebill_number = rebill_number

    @property
    def redirect_url(self):
        """Gets the redirect_url of this Transaction.

        The URL to redirect the end-user when an offsite transaction is completed. Defaults to the website's configured URL.

        :return: The redirect_url of this Transaction.
        :rtype: str
        """
        return self._redirect_url

    @redirect_url.setter
    def redirect_url(self, redirect_url):
        """Sets the redirect_url of this Transaction.

        The URL to redirect the end-user when an offsite transaction is completed. Defaults to the website's configured URL.

        :param redirect_url: The redirect_url of this Transaction.
        :type redirect_url: str
        """

        self._redirect_url = redirect_url

    @property
    def request_amount(self):
        """Gets the request_amount of this Transaction.

        The amount in the payment request. If adjusted, the purchase amount and billing amount may vary from it.

        :return: The request_amount of this Transaction.
        :rtype: float
        """
        return self._request_amount

    @request_amount.setter
    def request_amount(self, request_amount):
        """Sets the request_amount of this Transaction.

        The amount in the payment request. If adjusted, the purchase amount and billing amount may vary from it.

        :param request_amount: The request_amount of this Transaction.
        :type request_amount: float
        """

        self._request_amount = request_amount

    @property
    def request_currency(self):
        """Gets the request_currency of this Transaction.

        ISO 4217 alphabetic currency code.

        :return: The request_currency of this Transaction.
        :rtype: str
        """
        return self._request_currency

    @request_currency.setter
    def request_currency(self, request_currency):
        """Sets the request_currency of this Transaction.

        ISO 4217 alphabetic currency code.

        :param request_currency: The request_currency of this Transaction.
        :type request_currency: str
        """
        if request_currency is not None and len(request_currency) > 3:
            raise ValueError("Invalid value for `request_currency`, length must be less than or equal to `3`")
        if request_currency is not None and len(request_currency) < 3:
            raise ValueError("Invalid value for `request_currency`, length must be greater than or equal to `3`")

        self._request_currency = request_currency

    @property
    def request_id(self):
        """Gets the request_id of this Transaction.

        The transaction's request ID.  This ID must be unique within a 24 hour period. Use this field to prevent duplicated transactions.

        :return: The request_id of this Transaction.
        :rtype: str
        """
        return self._request_id

    @request_id.setter
    def request_id(self, request_id):
        """Sets the request_id of this Transaction.

        The transaction's request ID.  This ID must be unique within a 24 hour period. Use this field to prevent duplicated transactions.

        :param request_id: The request_id of this Transaction.
        :type request_id: str
        """

        self._request_id = request_id

    @property
    def result(self):
        """Gets the result of this Transaction.

        Transaction result.

        :return: The result of this Transaction.
        :rtype: str
        """
        return self._result

    @result.setter
    def result(self, result):
        """Sets the result of this Transaction.

        Transaction result.

        :param result: The result of this Transaction.
        :type result: str
        """
        allowed_values = ["abandoned", "approved", "canceled", "declined", "unknown"]  # noqa: E501
        if result not in allowed_values:
            raise ValueError(
                "Invalid value for `result` ({0}), must be one of {1}"
                .format(result, allowed_values)
            )

        self._result = result

    @property
    def retry_number(self):
        """Gets the retry_number of this Transaction.

        The position in the sequence of retries.

        :return: The retry_number of this Transaction.
        :rtype: int
        """
        return self._retry_number

    @retry_number.setter
    def retry_number(self, retry_number):
        """Sets the retry_number of this Transaction.

        The position in the sequence of retries.

        :param retry_number: The retry_number of this Transaction.
        :type retry_number: int
        """

        self._retry_number = retry_number

    @property
    def status(self):
        """Gets the status of this Transaction.

        Transaction status.

        :return: The status of this Transaction.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Transaction.

        Transaction status.

        :param status: The status of this Transaction.
        :type status: str
        """
        allowed_values = ["completed", "conn-error", "disputed", "never-sent", "offsite", "partially-refunded", "pending", "refunded", "sending", "suspended", "timeout", "voided", "waiting-approval", "waiting-capture", "waiting-gateway", "waiting-refund"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def subscription_ids(self):
        """Gets the subscription_ids of this Transaction.

        The orders IDs related to transaction's invoice(s).

        :return: The subscription_ids of this Transaction.
        :rtype: List[str]
        """
        return self._subscription_ids

    @subscription_ids.setter
    def subscription_ids(self, subscription_ids):
        """Sets the subscription_ids of this Transaction.

        The orders IDs related to transaction's invoice(s).

        :param subscription_ids: The subscription_ids of this Transaction.
        :type subscription_ids: List[str]
        """

        self._subscription_ids = subscription_ids

    @property
    def type(self):
        """Gets the type of this Transaction.

        Transaction type.

        :return: The type of this Transaction.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Transaction.

        Transaction type.

        :param type: The type of this Transaction.
        :type type: str
        """
        allowed_values = ["3ds-authentication", "authorize", "capture", "credit", "refund", "sale", "void"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def updated_time(self):
        """Gets the updated_time of this Transaction.

        Transaction updated time.

        :return: The updated_time of this Transaction.
        :rtype: datetime
        """
        return self._updated_time

    @updated_time.setter
    def updated_time(self, updated_time):
        """Sets the updated_time of this Transaction.

        Transaction updated time.

        :param updated_time: The updated_time of this Transaction.
        :type updated_time: datetime
        """

        self._updated_time = updated_time

    @property
    def website_id(self):
        """Gets the website_id of this Transaction.

        The website ID.

        :return: The website_id of this Transaction.
        :rtype: str
        """
        return self._website_id

    @website_id.setter
    def website_id(self, website_id):
        """Sets the website_id of this Transaction.

        The website ID.

        :param website_id: The website_id of this Transaction.
        :type website_id: str
        """
        if website_id is not None and len(website_id) > 50:
            raise ValueError("Invalid value for `website_id`, length must be less than or equal to `50`")

        self._website_id = website_id

    @property
    def embedded(self):
        """Gets the embedded of this Transaction.

        Any embedded objects available that are requested by the `expand` querystring parameter.

        :return: The embedded of this Transaction.
        :rtype: List[TransactionAllOfEmbedded]
        """
        return self._embedded

    @embedded.setter
    def embedded(self, embedded):
        """Sets the embedded of this Transaction.

        Any embedded objects available that are requested by the `expand` querystring parameter.

        :param embedded: The embedded of this Transaction.
        :type embedded: List[TransactionAllOfEmbedded]
        """
        if embedded is not None and len(embedded) < 1:
            raise ValueError("Invalid value for `embedded`, number of items must be greater than or equal to `1`")

        self._embedded = embedded

    @property
    def links(self):
        """Gets the links of this Transaction.

        The links related to resource.

        :return: The links of this Transaction.
        :rtype: List[TransactionAllOfLinks]
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this Transaction.

        The links related to resource.

        :param links: The links of this Transaction.
        :type links: List[TransactionAllOfLinks]
        """
        if links is not None and len(links) < 1:
            raise ValueError("Invalid value for `links`, number of items must be greater than or equal to `1`")

        self._links = links

    @property
    def acquirer_name(self):
        """Gets the acquirer_name of this Transaction.

        Acquirer name, available only when transaction use gateway, else null.

        :return: The acquirer_name of this Transaction.
        :rtype: AcquirerName
        """
        return self._acquirer_name

    @acquirer_name.setter
    def acquirer_name(self, acquirer_name):
        """Sets the acquirer_name of this Transaction.

        Acquirer name, available only when transaction use gateway, else null.

        :param acquirer_name: The acquirer_name of this Transaction.
        :type acquirer_name: AcquirerName
        """

        self._acquirer_name = acquirer_name

    @property
    def arn(self):
        """Gets the arn of this Transaction.

        The acquirer reference number.

        :return: The arn of this Transaction.
        :rtype: str
        """
        return self._arn

    @arn.setter
    def arn(self, arn):
        """Sets the arn of this Transaction.

        The acquirer reference number.

        :param arn: The arn of this Transaction.
        :type arn: str
        """

        self._arn = arn

    @property
    def bin(self):
        """Gets the bin of this Transaction.

        Payment Card BIN.

        :return: The bin of this Transaction.
        :rtype: str
        """
        return self._bin

    @bin.setter
    def bin(self, bin):
        """Sets the bin of this Transaction.

        Payment Card BIN.

        :param bin: The bin of this Transaction.
        :type bin: str
        """

        self._bin = bin

    @property
    def bump_offer(self):
        """Gets the bump_offer of this Transaction.


        :return: The bump_offer of this Transaction.
        :rtype: TransactionAllOfBumpOffer
        """
        return self._bump_offer

    @bump_offer.setter
    def bump_offer(self, bump_offer):
        """Sets the bump_offer of this Transaction.


        :param bump_offer: The bump_offer of this Transaction.
        :type bump_offer: TransactionAllOfBumpOffer
        """

        self._bump_offer = bump_offer

    @property
    def dcc(self):
        """Gets the dcc of this Transaction.


        :return: The dcc of this Transaction.
        :rtype: TransactionAllOfDcc
        """
        return self._dcc

    @dcc.setter
    def dcc(self, dcc):
        """Sets the dcc of this Transaction.


        :param dcc: The dcc of this Transaction.
        :type dcc: TransactionAllOfDcc
        """

        self._dcc = dcc

    @property
    def discrepancy_time(self):
        """Gets the discrepancy_time of this Transaction.

        The time of the most recent discrepancy on the transaction.

        :return: The discrepancy_time of this Transaction.
        :rtype: datetime
        """
        return self._discrepancy_time

    @discrepancy_time.setter
    def discrepancy_time(self, discrepancy_time):
        """Sets the discrepancy_time of this Transaction.

        The time of the most recent discrepancy on the transaction.

        :param discrepancy_time: The discrepancy_time of this Transaction.
        :type discrepancy_time: datetime
        """

        self._discrepancy_time = discrepancy_time

    @property
    def dispute_status(self):
        """Gets the dispute_status of this Transaction.

        The dispute's status, else null.

        :return: The dispute_status of this Transaction.
        :rtype: str
        """
        return self._dispute_status

    @dispute_status.setter
    def dispute_status(self, dispute_status):
        """Sets the dispute_status of this Transaction.

        The dispute's status, else null.

        :param dispute_status: The dispute_status of this Transaction.
        :type dispute_status: str
        """
        allowed_values = [None,"response-needed", "under-review", "forfeited", "won", "lost", "unknown"]  # noqa: E501
        if dispute_status not in allowed_values:
            raise ValueError(
                "Invalid value for `dispute_status` ({0}), must be one of {1}"
                .format(dispute_status, allowed_values)
            )

        self._dispute_status = dispute_status

    @property
    def dispute_time(self):
        """Gets the dispute_time of this Transaction.

        Time the dispute was created, else null.

        :return: The dispute_time of this Transaction.
        :rtype: datetime
        """
        return self._dispute_time

    @dispute_time.setter
    def dispute_time(self, dispute_time):
        """Sets the dispute_time of this Transaction.

        Time the dispute was created, else null.

        :param dispute_time: The dispute_time of this Transaction.
        :type dispute_time: datetime
        """

        self._dispute_time = dispute_time

    @property
    def gateway(self):
        """Gets the gateway of this Transaction.


        :return: The gateway of this Transaction.
        :rtype: TransactionAllOfGateway
        """
        return self._gateway

    @gateway.setter
    def gateway(self, gateway):
        """Sets the gateway of this Transaction.


        :param gateway: The gateway of this Transaction.
        :type gateway: TransactionAllOfGateway
        """

        self._gateway = gateway

    @property
    def gateway_account_id(self):
        """Gets the gateway_account_id of this Transaction.

        The transaction's Gateway Account ID.

        :return: The gateway_account_id of this Transaction.
        :rtype: str
        """
        return self._gateway_account_id

    @gateway_account_id.setter
    def gateway_account_id(self, gateway_account_id):
        """Sets the gateway_account_id of this Transaction.

        The transaction's Gateway Account ID.

        :param gateway_account_id: The gateway_account_id of this Transaction.
        :type gateway_account_id: str
        """
        if gateway_account_id is not None and len(gateway_account_id) > 50:
            raise ValueError("Invalid value for `gateway_account_id`, length must be less than or equal to `50`")

        self._gateway_account_id = gateway_account_id

    @property
    def gateway_transaction_id(self):
        """Gets the gateway_transaction_id of this Transaction.

        The gateway's transaction ID.

        :return: The gateway_transaction_id of this Transaction.
        :rtype: str
        """
        return self._gateway_transaction_id

    @gateway_transaction_id.setter
    def gateway_transaction_id(self, gateway_transaction_id):
        """Sets the gateway_transaction_id of this Transaction.

        The gateway's transaction ID.

        :param gateway_transaction_id: The gateway_transaction_id of this Transaction.
        :type gateway_transaction_id: str
        """
        if gateway_transaction_id is not None and len(gateway_transaction_id) > 50:
            raise ValueError("Invalid value for `gateway_transaction_id`, length must be less than or equal to `50`")

        self._gateway_transaction_id = gateway_transaction_id

    @property
    def had_discrepancy(self):
        """Gets the had_discrepancy of this Transaction.

        True if the transaction has been updated due to a discrepancy with its. source of truth.

        :return: The had_discrepancy of this Transaction.
        :rtype: bool
        """
        return self._had_discrepancy

    @had_discrepancy.setter
    def had_discrepancy(self, had_discrepancy):
        """Sets the had_discrepancy of this Transaction.

        True if the transaction has been updated due to a discrepancy with its. source of truth.

        :param had_discrepancy: The had_discrepancy of this Transaction.
        :type had_discrepancy: bool
        """

        self._had_discrepancy = had_discrepancy

    @property
    def has_bump_offer(self):
        """Gets the has_bump_offer of this Transaction.

        True if transaction has a Bump offer.

        :return: The has_bump_offer of this Transaction.
        :rtype: bool
        """
        return self._has_bump_offer

    @has_bump_offer.setter
    def has_bump_offer(self, has_bump_offer):
        """Sets the has_bump_offer of this Transaction.

        True if transaction has a Bump offer.

        :param has_bump_offer: The has_bump_offer of this Transaction.
        :type has_bump_offer: bool
        """

        self._has_bump_offer = has_bump_offer

    @property
    def has_dcc(self):
        """Gets the has_dcc of this Transaction.

        True if transaction has Dynamic Currency Conversion applied.

        :return: The has_dcc of this Transaction.
        :rtype: bool
        """
        return self._has_dcc

    @has_dcc.setter
    def has_dcc(self, has_dcc):
        """Sets the has_dcc of this Transaction.

        True if transaction has Dynamic Currency Conversion applied.

        :param has_dcc: The has_dcc of this Transaction.
        :type has_dcc: bool
        """

        self._has_dcc = has_dcc

    @property
    def is_disputed(self):
        """Gets the is_disputed of this Transaction.

        True if transaction is disputed.

        :return: The is_disputed of this Transaction.
        :rtype: bool
        """
        return self._is_disputed

    @is_disputed.setter
    def is_disputed(self, is_disputed):
        """Sets the is_disputed of this Transaction.

        True if transaction is disputed.

        :param is_disputed: The is_disputed of this Transaction.
        :type is_disputed: bool
        """

        self._is_disputed = is_disputed

    @property
    def is_merchant_initiated(self):
        """Gets the is_merchant_initiated of this Transaction.

        True if the transaction was initiated by the merchant.

        :return: The is_merchant_initiated of this Transaction.
        :rtype: bool
        """
        return self._is_merchant_initiated

    @is_merchant_initiated.setter
    def is_merchant_initiated(self, is_merchant_initiated):
        """Sets the is_merchant_initiated of this Transaction.

        True if the transaction was initiated by the merchant.

        :param is_merchant_initiated: The is_merchant_initiated of this Transaction.
        :type is_merchant_initiated: bool
        """

        self._is_merchant_initiated = is_merchant_initiated

    @property
    def is_processed_outside(self):
        """Gets the is_processed_outside of this Transaction.

        True if the transaction was processed outside of Rebilly.

        :return: The is_processed_outside of this Transaction.
        :rtype: bool
        """
        return self._is_processed_outside

    @is_processed_outside.setter
    def is_processed_outside(self, is_processed_outside):
        """Sets the is_processed_outside of this Transaction.

        True if the transaction was processed outside of Rebilly.

        :param is_processed_outside: The is_processed_outside of this Transaction.
        :type is_processed_outside: bool
        """

        self._is_processed_outside = is_processed_outside

    @property
    def is_reconciled(self):
        """Gets the is_reconciled of this Transaction.

        True if the transaction has been verified with gateway batch data.

        :return: The is_reconciled of this Transaction.
        :rtype: bool
        """
        return self._is_reconciled

    @is_reconciled.setter
    def is_reconciled(self, is_reconciled):
        """Sets the is_reconciled of this Transaction.

        True if the transaction has been verified with gateway batch data.

        :param is_reconciled: The is_reconciled of this Transaction.
        :type is_reconciled: bool
        """

        self._is_reconciled = is_reconciled

    @property
    def method(self):
        """Gets the method of this Transaction.

        Payment Method. Use `paymentInstrument.method` instead.

        :return: The method of this Transaction.
        :rtype: PaymentMethod
        """
        return self._method

    @method.setter
    def method(self, method):
        """Sets the method of this Transaction.

        Payment Method. Use `paymentInstrument.method` instead.

        :param method: The method of this Transaction.
        :type method: PaymentMethod
        """

        self._method = method

    @property
    def notification_url(self):
        """Gets the notification_url of this Transaction.

        The URL where a server-to-server POST notification will be sent.  It  will be sent when the transaction's result is finalized after a timeout or an offsite interaction. Do not trust the notification; follow with a GET request to confirm the result of the transaction. Please respond with a 2xx HTTP status code, or we will reattempt the request again. The 2 placeholders are available to use in this URI: `{id}` and `{result}`. 

        :return: The notification_url of this Transaction.
        :rtype: str
        """
        return self._notification_url

    @notification_url.setter
    def notification_url(self, notification_url):
        """Sets the notification_url of this Transaction.

        The URL where a server-to-server POST notification will be sent.  It  will be sent when the transaction's result is finalized after a timeout or an offsite interaction. Do not trust the notification; follow with a GET request to confirm the result of the transaction. Please respond with a 2xx HTTP status code, or we will reattempt the request again. The 2 placeholders are available to use in this URI: `{id}` and `{result}`. 

        :param notification_url: The notification_url of this Transaction.
        :type notification_url: str
        """

        self._notification_url = notification_url

    @property
    def order_id(self):
        """Gets the order_id of this Transaction.

        The transaction's order ID.  This ID must be unique within a 24 hour period. This field was renamed to the `requestId`.

        :return: The order_id of this Transaction.
        :rtype: str
        """
        return self._order_id

    @order_id.setter
    def order_id(self, order_id):
        """Sets the order_id of this Transaction.

        The transaction's order ID.  This ID must be unique within a 24 hour period. This field was renamed to the `requestId`.

        :param order_id: The order_id of this Transaction.
        :type order_id: str
        """

        self._order_id = order_id

    @property
    def reference_data(self):
        """Gets the reference_data of this Transaction.

        Transaction reference data.

        :return: The reference_data of this Transaction.
        :rtype: Dict[str, str]
        """
        return self._reference_data

    @reference_data.setter
    def reference_data(self, reference_data):
        """Sets the reference_data of this Transaction.

        Transaction reference data.

        :param reference_data: The reference_data of this Transaction.
        :type reference_data: Dict[str, str]
        """

        self._reference_data = reference_data

    @property
    def report_amount(self):
        """Gets the report_amount of this Transaction.

        Transaction amount converted to organization&nbsp;selected report currency.

        :return: The report_amount of this Transaction.
        :rtype: float
        """
        return self._report_amount

    @report_amount.setter
    def report_amount(self, report_amount):
        """Sets the report_amount of this Transaction.

        Transaction amount converted to organization&nbsp;selected report currency.

        :param report_amount: The report_amount of this Transaction.
        :type report_amount: float
        """

        self._report_amount = report_amount

    @property
    def report_currency(self):
        """Gets the report_currency of this Transaction.

        ISO 4217 alphabetic currency code.

        :return: The report_currency of this Transaction.
        :rtype: str
        """
        return self._report_currency

    @report_currency.setter
    def report_currency(self, report_currency):
        """Sets the report_currency of this Transaction.

        ISO 4217 alphabetic currency code.

        :param report_currency: The report_currency of this Transaction.
        :type report_currency: str
        """
        if report_currency is not None and len(report_currency) > 3:
            raise ValueError("Invalid value for `report_currency`, length must be less than or equal to `3`")
        if report_currency is not None and len(report_currency) < 3:
            raise ValueError("Invalid value for `report_currency`, length must be greater than or equal to `3`")

        self._report_currency = report_currency

    @property
    def retried_transaction_id(self):
        """Gets the retried_transaction_id of this Transaction.

        The retried transaction ID.

        :return: The retried_transaction_id of this Transaction.
        :rtype: str
        """
        return self._retried_transaction_id

    @retried_transaction_id.setter
    def retried_transaction_id(self, retried_transaction_id):
        """Sets the retried_transaction_id of this Transaction.

        The retried transaction ID.

        :param retried_transaction_id: The retried_transaction_id of this Transaction.
        :type retried_transaction_id: str
        """
        if retried_transaction_id is not None and len(retried_transaction_id) > 50:
            raise ValueError("Invalid value for `retried_transaction_id`, length must be less than or equal to `50`")

        self._retried_transaction_id = retried_transaction_id

    @property
    def retries_result(self):
        """Gets the retries_result of this Transaction.

        Retries sequence result.

        :return: The retries_result of this Transaction.
        :rtype: str
        """
        return self._retries_result

    @retries_result.setter
    def retries_result(self, retries_result):
        """Sets the retries_result of this Transaction.

        Retries sequence result.

        :param retries_result: The retries_result of this Transaction.
        :type retries_result: str
        """
        allowed_values = ["approved", "canceled", "declined", "scheduled"]  # noqa: E501
        if retries_result not in allowed_values:
            raise ValueError(
                "Invalid value for `retries_result` ({0}), must be one of {1}"
                .format(retries_result, allowed_values)
            )

        self._retries_result = retries_result

    @property
    def retry_instruction(self):
        """Gets the retry_instruction of this Transaction.


        :return: The retry_instruction of this Transaction.
        :rtype: PaymentRetry
        """
        return self._retry_instruction

    @retry_instruction.setter
    def retry_instruction(self, retry_instruction):
        """Sets the retry_instruction of this Transaction.


        :param retry_instruction: The retry_instruction of this Transaction.
        :type retry_instruction: PaymentRetry
        """

        self._retry_instruction = retry_instruction

    @property
    def revision(self):
        """Gets the revision of this Transaction.

        The number of times the transaction data has been modified. The revision is useful when analyzing webhook data to determine if the change takes precedence over the current representation. 

        :return: The revision of this Transaction.
        :rtype: int
        """
        return self._revision

    @revision.setter
    def revision(self, revision):
        """Sets the revision of this Transaction.

        The number of times the transaction data has been modified. The revision is useful when analyzing webhook data to determine if the change takes precedence over the current representation. 

        :param revision: The revision of this Transaction.
        :type revision: int
        """

        self._revision = revision

    @property
    def risk_metadata(self):
        """Gets the risk_metadata of this Transaction.

        Risk metadata.

        :return: The risk_metadata of this Transaction.
        :rtype: RiskMetadata
        """
        return self._risk_metadata

    @risk_metadata.setter
    def risk_metadata(self, risk_metadata):
        """Sets the risk_metadata of this Transaction.

        Risk metadata.

        :param risk_metadata: The risk_metadata of this Transaction.
        :type risk_metadata: RiskMetadata
        """

        self._risk_metadata = risk_metadata

    @property
    def risk_score(self):
        """Gets the risk_score of this Transaction.

        The transaction's risk score.

        :return: The risk_score of this Transaction.
        :rtype: int
        """
        return self._risk_score

    @risk_score.setter
    def risk_score(self, risk_score):
        """Sets the risk_score of this Transaction.

        The transaction's risk score.

        :param risk_score: The risk_score of this Transaction.
        :type risk_score: int
        """

        self._risk_score = risk_score

    @property
    def scheduled_time(self):
        """Gets the scheduled_time of this Transaction.

        The time the transaction is scheduled for collection.

        :return: The scheduled_time of this Transaction.
        :rtype: datetime
        """
        return self._scheduled_time

    @scheduled_time.setter
    def scheduled_time(self, scheduled_time):
        """Sets the scheduled_time of this Transaction.

        The time the transaction is scheduled for collection.

        :param scheduled_time: The scheduled_time of this Transaction.
        :type scheduled_time: datetime
        """

        self._scheduled_time = scheduled_time

    @property
    def settlement_time(self):
        """Gets the settlement_time of this Transaction.

        The time that the transaction was settled by the banking instuition.

        :return: The settlement_time of this Transaction.
        :rtype: datetime
        """
        return self._settlement_time

    @settlement_time.setter
    def settlement_time(self, settlement_time):
        """Sets the settlement_time of this Transaction.

        The time that the transaction was settled by the banking instuition.

        :param settlement_time: The settlement_time of this Transaction.
        :type settlement_time: datetime
        """

        self._settlement_time = settlement_time

    @property
    def velocity(self):
        """Gets the velocity of this Transaction.

        The number of transactions by the same customer in the past 24 hours.

        :return: The velocity of this Transaction.
        :rtype: int
        """
        return self._velocity

    @velocity.setter
    def velocity(self, velocity):
        """Sets the velocity of this Transaction.

        The number of transactions by the same customer in the past 24 hours.

        :param velocity: The velocity of this Transaction.
        :type velocity: int
        """

        self._velocity = velocity
