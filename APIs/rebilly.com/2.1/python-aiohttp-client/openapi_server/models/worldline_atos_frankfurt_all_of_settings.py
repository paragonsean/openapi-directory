# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class WorldlineAtosFrankfurtAllOfSettings(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, card_acceptor_country_code: str=None, card_acceptor_location: str=None, card_acceptor_name: str=None):
        """WorldlineAtosFrankfurtAllOfSettings - a model defined in OpenAPI

        :param card_acceptor_country_code: The card_acceptor_country_code of this WorldlineAtosFrankfurtAllOfSettings.
        :param card_acceptor_location: The card_acceptor_location of this WorldlineAtosFrankfurtAllOfSettings.
        :param card_acceptor_name: The card_acceptor_name of this WorldlineAtosFrankfurtAllOfSettings.
        """
        self.openapi_types = {
            'card_acceptor_country_code': str,
            'card_acceptor_location': str,
            'card_acceptor_name': str
        }

        self.attribute_map = {
            'card_acceptor_country_code': 'cardAcceptorCountryCode',
            'card_acceptor_location': 'cardAcceptorLocation',
            'card_acceptor_name': 'cardAcceptorName'
        }

        self._card_acceptor_country_code = card_acceptor_country_code
        self._card_acceptor_location = card_acceptor_location
        self._card_acceptor_name = card_acceptor_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'WorldlineAtosFrankfurtAllOfSettings':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The WorldlineAtosFrankfurt_allOf_settings of this WorldlineAtosFrankfurtAllOfSettings.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def card_acceptor_country_code(self):
        """Gets the card_acceptor_country_code of this WorldlineAtosFrankfurtAllOfSettings.

        Card Acceptor Country Code.

        :return: The card_acceptor_country_code of this WorldlineAtosFrankfurtAllOfSettings.
        :rtype: str
        """
        return self._card_acceptor_country_code

    @card_acceptor_country_code.setter
    def card_acceptor_country_code(self, card_acceptor_country_code):
        """Sets the card_acceptor_country_code of this WorldlineAtosFrankfurtAllOfSettings.

        Card Acceptor Country Code.

        :param card_acceptor_country_code: The card_acceptor_country_code of this WorldlineAtosFrankfurtAllOfSettings.
        :type card_acceptor_country_code: str
        """
        if card_acceptor_country_code is None:
            raise ValueError("Invalid value for `card_acceptor_country_code`, must not be `None`")

        self._card_acceptor_country_code = card_acceptor_country_code

    @property
    def card_acceptor_location(self):
        """Gets the card_acceptor_location of this WorldlineAtosFrankfurtAllOfSettings.

        Card Acceptor Location.

        :return: The card_acceptor_location of this WorldlineAtosFrankfurtAllOfSettings.
        :rtype: str
        """
        return self._card_acceptor_location

    @card_acceptor_location.setter
    def card_acceptor_location(self, card_acceptor_location):
        """Sets the card_acceptor_location of this WorldlineAtosFrankfurtAllOfSettings.

        Card Acceptor Location.

        :param card_acceptor_location: The card_acceptor_location of this WorldlineAtosFrankfurtAllOfSettings.
        :type card_acceptor_location: str
        """
        if card_acceptor_location is None:
            raise ValueError("Invalid value for `card_acceptor_location`, must not be `None`")

        self._card_acceptor_location = card_acceptor_location

    @property
    def card_acceptor_name(self):
        """Gets the card_acceptor_name of this WorldlineAtosFrankfurtAllOfSettings.

        Card Acceptor Name.

        :return: The card_acceptor_name of this WorldlineAtosFrankfurtAllOfSettings.
        :rtype: str
        """
        return self._card_acceptor_name

    @card_acceptor_name.setter
    def card_acceptor_name(self, card_acceptor_name):
        """Sets the card_acceptor_name of this WorldlineAtosFrankfurtAllOfSettings.

        Card Acceptor Name.

        :param card_acceptor_name: The card_acceptor_name of this WorldlineAtosFrankfurtAllOfSettings.
        :type card_acceptor_name: str
        """
        if card_acceptor_name is None:
            raise ValueError("Invalid value for `card_acceptor_name`, must not be `None`")

        self._card_acceptor_name = card_acceptor_name
