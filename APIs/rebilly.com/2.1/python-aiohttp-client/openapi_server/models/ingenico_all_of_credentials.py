# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class IngenicoAllOfCredentials(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, api_key_id: str=None, api_secret_key: str=None, merchant_id: str=None, skip_fraud_service: bool=None):
        """IngenicoAllOfCredentials - a model defined in OpenAPI

        :param api_key_id: The api_key_id of this IngenicoAllOfCredentials.
        :param api_secret_key: The api_secret_key of this IngenicoAllOfCredentials.
        :param merchant_id: The merchant_id of this IngenicoAllOfCredentials.
        :param skip_fraud_service: The skip_fraud_service of this IngenicoAllOfCredentials.
        """
        self.openapi_types = {
            'api_key_id': str,
            'api_secret_key': str,
            'merchant_id': str,
            'skip_fraud_service': bool
        }

        self.attribute_map = {
            'api_key_id': 'apiKeyId',
            'api_secret_key': 'apiSecretKey',
            'merchant_id': 'merchantId',
            'skip_fraud_service': 'skipFraudService'
        }

        self._api_key_id = api_key_id
        self._api_secret_key = api_secret_key
        self._merchant_id = merchant_id
        self._skip_fraud_service = skip_fraud_service

    @classmethod
    def from_dict(cls, dikt: dict) -> 'IngenicoAllOfCredentials':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Ingenico_allOf_credentials of this IngenicoAllOfCredentials.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def api_key_id(self):
        """Gets the api_key_id of this IngenicoAllOfCredentials.

        Ingenico Gateway api key ID.

        :return: The api_key_id of this IngenicoAllOfCredentials.
        :rtype: str
        """
        return self._api_key_id

    @api_key_id.setter
    def api_key_id(self, api_key_id):
        """Sets the api_key_id of this IngenicoAllOfCredentials.

        Ingenico Gateway api key ID.

        :param api_key_id: The api_key_id of this IngenicoAllOfCredentials.
        :type api_key_id: str
        """
        if api_key_id is None:
            raise ValueError("Invalid value for `api_key_id`, must not be `None`")

        self._api_key_id = api_key_id

    @property
    def api_secret_key(self):
        """Gets the api_secret_key of this IngenicoAllOfCredentials.

        Ingenico Gateway api secret key.

        :return: The api_secret_key of this IngenicoAllOfCredentials.
        :rtype: str
        """
        return self._api_secret_key

    @api_secret_key.setter
    def api_secret_key(self, api_secret_key):
        """Sets the api_secret_key of this IngenicoAllOfCredentials.

        Ingenico Gateway api secret key.

        :param api_secret_key: The api_secret_key of this IngenicoAllOfCredentials.
        :type api_secret_key: str
        """
        if api_secret_key is None:
            raise ValueError("Invalid value for `api_secret_key`, must not be `None`")

        self._api_secret_key = api_secret_key

    @property
    def merchant_id(self):
        """Gets the merchant_id of this IngenicoAllOfCredentials.

        Ingenico Gateway merchant ID.

        :return: The merchant_id of this IngenicoAllOfCredentials.
        :rtype: str
        """
        return self._merchant_id

    @merchant_id.setter
    def merchant_id(self, merchant_id):
        """Sets the merchant_id of this IngenicoAllOfCredentials.

        Ingenico Gateway merchant ID.

        :param merchant_id: The merchant_id of this IngenicoAllOfCredentials.
        :type merchant_id: str
        """
        if merchant_id is None:
            raise ValueError("Invalid value for `merchant_id`, must not be `None`")

        self._merchant_id = merchant_id

    @property
    def skip_fraud_service(self):
        """Gets the skip_fraud_service of this IngenicoAllOfCredentials.

        Ingenico skip fraud service.

        :return: The skip_fraud_service of this IngenicoAllOfCredentials.
        :rtype: bool
        """
        return self._skip_fraud_service

    @skip_fraud_service.setter
    def skip_fraud_service(self, skip_fraud_service):
        """Sets the skip_fraud_service of this IngenicoAllOfCredentials.

        Ingenico skip fraud service.

        :param skip_fraud_service: The skip_fraud_service of this IngenicoAllOfCredentials.
        :type skip_fraud_service: bool
        """

        self._skip_fraud_service = skip_fraud_service
