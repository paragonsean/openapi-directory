# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.browser_data import BrowserData
from openapi_server import util


class RiskMetadata(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, accuracy_radius: int=None, browser_data: BrowserData=None, city: str=None, country: str=None, device_velocity: int=None, distance: int=None, fingerprint: str=None, has_mismatched_bank_country: bool=None, has_mismatched_billing_address_country: bool=None, has_mismatched_holder_name: bool=None, has_mismatched_time_zone: bool=None, http_headers: Dict[str, str]=None, ip_address: str=None, is_hosting: bool=None, is_proxy: bool=None, is_tor: bool=None, is_vpn: bool=None, isp: str=None, latitude: float=None, longitude: float=None, payment_instrument_velocity: int=None, postal_code: str=None, region: str=None, score: int=None, time_zone: str=None, vpn_service_name: str=None):
        """RiskMetadata - a model defined in OpenAPI

        :param accuracy_radius: The accuracy_radius of this RiskMetadata.
        :param browser_data: The browser_data of this RiskMetadata.
        :param city: The city of this RiskMetadata.
        :param country: The country of this RiskMetadata.
        :param device_velocity: The device_velocity of this RiskMetadata.
        :param distance: The distance of this RiskMetadata.
        :param fingerprint: The fingerprint of this RiskMetadata.
        :param has_mismatched_bank_country: The has_mismatched_bank_country of this RiskMetadata.
        :param has_mismatched_billing_address_country: The has_mismatched_billing_address_country of this RiskMetadata.
        :param has_mismatched_holder_name: The has_mismatched_holder_name of this RiskMetadata.
        :param has_mismatched_time_zone: The has_mismatched_time_zone of this RiskMetadata.
        :param http_headers: The http_headers of this RiskMetadata.
        :param ip_address: The ip_address of this RiskMetadata.
        :param is_hosting: The is_hosting of this RiskMetadata.
        :param is_proxy: The is_proxy of this RiskMetadata.
        :param is_tor: The is_tor of this RiskMetadata.
        :param is_vpn: The is_vpn of this RiskMetadata.
        :param isp: The isp of this RiskMetadata.
        :param latitude: The latitude of this RiskMetadata.
        :param longitude: The longitude of this RiskMetadata.
        :param payment_instrument_velocity: The payment_instrument_velocity of this RiskMetadata.
        :param postal_code: The postal_code of this RiskMetadata.
        :param region: The region of this RiskMetadata.
        :param score: The score of this RiskMetadata.
        :param time_zone: The time_zone of this RiskMetadata.
        :param vpn_service_name: The vpn_service_name of this RiskMetadata.
        """
        self.openapi_types = {
            'accuracy_radius': int,
            'browser_data': BrowserData,
            'city': str,
            'country': str,
            'device_velocity': int,
            'distance': int,
            'fingerprint': str,
            'has_mismatched_bank_country': bool,
            'has_mismatched_billing_address_country': bool,
            'has_mismatched_holder_name': bool,
            'has_mismatched_time_zone': bool,
            'http_headers': Dict[str, str],
            'ip_address': str,
            'is_hosting': bool,
            'is_proxy': bool,
            'is_tor': bool,
            'is_vpn': bool,
            'isp': str,
            'latitude': float,
            'longitude': float,
            'payment_instrument_velocity': int,
            'postal_code': str,
            'region': str,
            'score': int,
            'time_zone': str,
            'vpn_service_name': str
        }

        self.attribute_map = {
            'accuracy_radius': 'accuracyRadius',
            'browser_data': 'browserData',
            'city': 'city',
            'country': 'country',
            'device_velocity': 'deviceVelocity',
            'distance': 'distance',
            'fingerprint': 'fingerprint',
            'has_mismatched_bank_country': 'hasMismatchedBankCountry',
            'has_mismatched_billing_address_country': 'hasMismatchedBillingAddressCountry',
            'has_mismatched_holder_name': 'hasMismatchedHolderName',
            'has_mismatched_time_zone': 'hasMismatchedTimeZone',
            'http_headers': 'httpHeaders',
            'ip_address': 'ipAddress',
            'is_hosting': 'isHosting',
            'is_proxy': 'isProxy',
            'is_tor': 'isTor',
            'is_vpn': 'isVpn',
            'isp': 'isp',
            'latitude': 'latitude',
            'longitude': 'longitude',
            'payment_instrument_velocity': 'paymentInstrumentVelocity',
            'postal_code': 'postalCode',
            'region': 'region',
            'score': 'score',
            'time_zone': 'timeZone',
            'vpn_service_name': 'vpnServiceName'
        }

        self._accuracy_radius = accuracy_radius
        self._browser_data = browser_data
        self._city = city
        self._country = country
        self._device_velocity = device_velocity
        self._distance = distance
        self._fingerprint = fingerprint
        self._has_mismatched_bank_country = has_mismatched_bank_country
        self._has_mismatched_billing_address_country = has_mismatched_billing_address_country
        self._has_mismatched_holder_name = has_mismatched_holder_name
        self._has_mismatched_time_zone = has_mismatched_time_zone
        self._http_headers = http_headers
        self._ip_address = ip_address
        self._is_hosting = is_hosting
        self._is_proxy = is_proxy
        self._is_tor = is_tor
        self._is_vpn = is_vpn
        self._isp = isp
        self._latitude = latitude
        self._longitude = longitude
        self._payment_instrument_velocity = payment_instrument_velocity
        self._postal_code = postal_code
        self._region = region
        self._score = score
        self._time_zone = time_zone
        self._vpn_service_name = vpn_service_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RiskMetadata':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RiskMetadata of this RiskMetadata.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def accuracy_radius(self):
        """Gets the accuracy_radius of this RiskMetadata.

        Accuracy radius for specified ipAddress (kilometers).

        :return: The accuracy_radius of this RiskMetadata.
        :rtype: int
        """
        return self._accuracy_radius

    @accuracy_radius.setter
    def accuracy_radius(self, accuracy_radius):
        """Sets the accuracy_radius of this RiskMetadata.

        Accuracy radius for specified ipAddress (kilometers).

        :param accuracy_radius: The accuracy_radius of this RiskMetadata.
        :type accuracy_radius: int
        """

        self._accuracy_radius = accuracy_radius

    @property
    def browser_data(self):
        """Gets the browser_data of this RiskMetadata.


        :return: The browser_data of this RiskMetadata.
        :rtype: BrowserData
        """
        return self._browser_data

    @browser_data.setter
    def browser_data(self, browser_data):
        """Sets the browser_data of this RiskMetadata.


        :param browser_data: The browser_data of this RiskMetadata.
        :type browser_data: BrowserData
        """

        self._browser_data = browser_data

    @property
    def city(self):
        """Gets the city of this RiskMetadata.

        City for specified ipAddress.

        :return: The city of this RiskMetadata.
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this RiskMetadata.

        City for specified ipAddress.

        :param city: The city of this RiskMetadata.
        :type city: str
        """

        self._city = city

    @property
    def country(self):
        """Gets the country of this RiskMetadata.

        Country ISO Alpha-2 code for specified ipAddress.

        :return: The country of this RiskMetadata.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this RiskMetadata.

        Country ISO Alpha-2 code for specified ipAddress.

        :param country: The country of this RiskMetadata.
        :type country: str
        """
        if country is not None and len(country) > 2:
            raise ValueError("Invalid value for `country`, length must be less than or equal to `2`")

        self._country = country

    @property
    def device_velocity(self):
        """Gets the device_velocity of this RiskMetadata.

        Number of transactions for this device (based on fingerprint) in the last 24 hours.

        :return: The device_velocity of this RiskMetadata.
        :rtype: int
        """
        return self._device_velocity

    @device_velocity.setter
    def device_velocity(self, device_velocity):
        """Sets the device_velocity of this RiskMetadata.

        Number of transactions for this device (based on fingerprint) in the last 24 hours.

        :param device_velocity: The device_velocity of this RiskMetadata.
        :type device_velocity: int
        """

        self._device_velocity = device_velocity

    @property
    def distance(self):
        """Gets the distance of this RiskMetadata.

        Distance between IP Address and Billing Address geolocation (kilometers).

        :return: The distance of this RiskMetadata.
        :rtype: int
        """
        return self._distance

    @distance.setter
    def distance(self, distance):
        """Sets the distance of this RiskMetadata.

        Distance between IP Address and Billing Address geolocation (kilometers).

        :param distance: The distance of this RiskMetadata.
        :type distance: int
        """

        self._distance = distance

    @property
    def fingerprint(self):
        """Gets the fingerprint of this RiskMetadata.

        The fingerprint.

        :return: The fingerprint of this RiskMetadata.
        :rtype: str
        """
        return self._fingerprint

    @fingerprint.setter
    def fingerprint(self, fingerprint):
        """Sets the fingerprint of this RiskMetadata.

        The fingerprint.

        :param fingerprint: The fingerprint of this RiskMetadata.
        :type fingerprint: str
        """
        if fingerprint is not None and len(fingerprint) > 50:
            raise ValueError("Invalid value for `fingerprint`, length must be less than or equal to `50`")

        self._fingerprint = fingerprint

    @property
    def has_mismatched_bank_country(self):
        """Gets the has_mismatched_bank_country of this RiskMetadata.

        True if the bank country and geo-IP address are not the same.

        :return: The has_mismatched_bank_country of this RiskMetadata.
        :rtype: bool
        """
        return self._has_mismatched_bank_country

    @has_mismatched_bank_country.setter
    def has_mismatched_bank_country(self, has_mismatched_bank_country):
        """Sets the has_mismatched_bank_country of this RiskMetadata.

        True if the bank country and geo-IP address are not the same.

        :param has_mismatched_bank_country: The has_mismatched_bank_country of this RiskMetadata.
        :type has_mismatched_bank_country: bool
        """

        self._has_mismatched_bank_country = has_mismatched_bank_country

    @property
    def has_mismatched_billing_address_country(self):
        """Gets the has_mismatched_billing_address_country of this RiskMetadata.

        True if the billing address country and geo-IP address are not the same.

        :return: The has_mismatched_billing_address_country of this RiskMetadata.
        :rtype: bool
        """
        return self._has_mismatched_billing_address_country

    @has_mismatched_billing_address_country.setter
    def has_mismatched_billing_address_country(self, has_mismatched_billing_address_country):
        """Sets the has_mismatched_billing_address_country of this RiskMetadata.

        True if the billing address country and geo-IP address are not the same.

        :param has_mismatched_billing_address_country: The has_mismatched_billing_address_country of this RiskMetadata.
        :type has_mismatched_billing_address_country: bool
        """

        self._has_mismatched_billing_address_country = has_mismatched_billing_address_country

    @property
    def has_mismatched_holder_name(self):
        """Gets the has_mismatched_holder_name of this RiskMetadata.

        True if the customer's name from billing address and from customer's primary address are not the same.

        :return: The has_mismatched_holder_name of this RiskMetadata.
        :rtype: bool
        """
        return self._has_mismatched_holder_name

    @has_mismatched_holder_name.setter
    def has_mismatched_holder_name(self, has_mismatched_holder_name):
        """Sets the has_mismatched_holder_name of this RiskMetadata.

        True if the customer's name from billing address and from customer's primary address are not the same.

        :param has_mismatched_holder_name: The has_mismatched_holder_name of this RiskMetadata.
        :type has_mismatched_holder_name: bool
        """

        self._has_mismatched_holder_name = has_mismatched_holder_name

    @property
    def has_mismatched_time_zone(self):
        """Gets the has_mismatched_time_zone of this RiskMetadata.

        True if the browser time zone and IP address associated time zone are not the same.

        :return: The has_mismatched_time_zone of this RiskMetadata.
        :rtype: bool
        """
        return self._has_mismatched_time_zone

    @has_mismatched_time_zone.setter
    def has_mismatched_time_zone(self, has_mismatched_time_zone):
        """Sets the has_mismatched_time_zone of this RiskMetadata.

        True if the browser time zone and IP address associated time zone are not the same.

        :param has_mismatched_time_zone: The has_mismatched_time_zone of this RiskMetadata.
        :type has_mismatched_time_zone: bool
        """

        self._has_mismatched_time_zone = has_mismatched_time_zone

    @property
    def http_headers(self):
        """Gets the http_headers of this RiskMetadata.

        The HTTP headers.

        :return: The http_headers of this RiskMetadata.
        :rtype: Dict[str, str]
        """
        return self._http_headers

    @http_headers.setter
    def http_headers(self, http_headers):
        """Sets the http_headers of this RiskMetadata.

        The HTTP headers.

        :param http_headers: The http_headers of this RiskMetadata.
        :type http_headers: Dict[str, str]
        """

        self._http_headers = http_headers

    @property
    def ip_address(self):
        """Gets the ip_address of this RiskMetadata.

        The customer's IP.

        :return: The ip_address of this RiskMetadata.
        :rtype: str
        """
        return self._ip_address

    @ip_address.setter
    def ip_address(self, ip_address):
        """Sets the ip_address of this RiskMetadata.

        The customer's IP.

        :param ip_address: The ip_address of this RiskMetadata.
        :type ip_address: str
        """

        self._ip_address = ip_address

    @property
    def is_hosting(self):
        """Gets the is_hosting of this RiskMetadata.

        True if customer's ip address is related to hosting.

        :return: The is_hosting of this RiskMetadata.
        :rtype: bool
        """
        return self._is_hosting

    @is_hosting.setter
    def is_hosting(self, is_hosting):
        """Sets the is_hosting of this RiskMetadata.

        True if customer's ip address is related to hosting.

        :param is_hosting: The is_hosting of this RiskMetadata.
        :type is_hosting: bool
        """

        self._is_hosting = is_hosting

    @property
    def is_proxy(self):
        """Gets the is_proxy of this RiskMetadata.

        True if customer's ip address is related to proxy.

        :return: The is_proxy of this RiskMetadata.
        :rtype: bool
        """
        return self._is_proxy

    @is_proxy.setter
    def is_proxy(self, is_proxy):
        """Sets the is_proxy of this RiskMetadata.

        True if customer's ip address is related to proxy.

        :param is_proxy: The is_proxy of this RiskMetadata.
        :type is_proxy: bool
        """

        self._is_proxy = is_proxy

    @property
    def is_tor(self):
        """Gets the is_tor of this RiskMetadata.

        True if customer's ip address is related to TOR.

        :return: The is_tor of this RiskMetadata.
        :rtype: bool
        """
        return self._is_tor

    @is_tor.setter
    def is_tor(self, is_tor):
        """Sets the is_tor of this RiskMetadata.

        True if customer's ip address is related to TOR.

        :param is_tor: The is_tor of this RiskMetadata.
        :type is_tor: bool
        """

        self._is_tor = is_tor

    @property
    def is_vpn(self):
        """Gets the is_vpn of this RiskMetadata.

        True if customer's ip address is related to VPN.

        :return: The is_vpn of this RiskMetadata.
        :rtype: bool
        """
        return self._is_vpn

    @is_vpn.setter
    def is_vpn(self, is_vpn):
        """Sets the is_vpn of this RiskMetadata.

        True if customer's ip address is related to VPN.

        :param is_vpn: The is_vpn of this RiskMetadata.
        :type is_vpn: bool
        """

        self._is_vpn = is_vpn

    @property
    def isp(self):
        """Gets the isp of this RiskMetadata.

        Internet Service Provider name, if available.

        :return: The isp of this RiskMetadata.
        :rtype: str
        """
        return self._isp

    @isp.setter
    def isp(self, isp):
        """Sets the isp of this RiskMetadata.

        Internet Service Provider name, if available.

        :param isp: The isp of this RiskMetadata.
        :type isp: str
        """

        self._isp = isp

    @property
    def latitude(self):
        """Gets the latitude of this RiskMetadata.

        Latitude for specified ipAddress.

        :return: The latitude of this RiskMetadata.
        :rtype: float
        """
        return self._latitude

    @latitude.setter
    def latitude(self, latitude):
        """Sets the latitude of this RiskMetadata.

        Latitude for specified ipAddress.

        :param latitude: The latitude of this RiskMetadata.
        :type latitude: float
        """

        self._latitude = latitude

    @property
    def longitude(self):
        """Gets the longitude of this RiskMetadata.

        Longitude for specified ipAddress.

        :return: The longitude of this RiskMetadata.
        :rtype: float
        """
        return self._longitude

    @longitude.setter
    def longitude(self, longitude):
        """Sets the longitude of this RiskMetadata.

        Longitude for specified ipAddress.

        :param longitude: The longitude of this RiskMetadata.
        :type longitude: float
        """

        self._longitude = longitude

    @property
    def payment_instrument_velocity(self):
        """Gets the payment_instrument_velocity of this RiskMetadata.

        Number of transactions for this payment instrument (based on fingerprint) in the last 24 hours.

        :return: The payment_instrument_velocity of this RiskMetadata.
        :rtype: int
        """
        return self._payment_instrument_velocity

    @payment_instrument_velocity.setter
    def payment_instrument_velocity(self, payment_instrument_velocity):
        """Sets the payment_instrument_velocity of this RiskMetadata.

        Number of transactions for this payment instrument (based on fingerprint) in the last 24 hours.

        :param payment_instrument_velocity: The payment_instrument_velocity of this RiskMetadata.
        :type payment_instrument_velocity: int
        """

        self._payment_instrument_velocity = payment_instrument_velocity

    @property
    def postal_code(self):
        """Gets the postal_code of this RiskMetadata.

        Postal code for specified ipAddress.

        :return: The postal_code of this RiskMetadata.
        :rtype: str
        """
        return self._postal_code

    @postal_code.setter
    def postal_code(self, postal_code):
        """Sets the postal_code of this RiskMetadata.

        Postal code for specified ipAddress.

        :param postal_code: The postal_code of this RiskMetadata.
        :type postal_code: str
        """
        if postal_code is not None and len(postal_code) > 10:
            raise ValueError("Invalid value for `postal_code`, length must be less than or equal to `10`")

        self._postal_code = postal_code

    @property
    def region(self):
        """Gets the region of this RiskMetadata.

        Region for specified ipAddress.

        :return: The region of this RiskMetadata.
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this RiskMetadata.

        Region for specified ipAddress.

        :param region: The region of this RiskMetadata.
        :type region: str
        """

        self._region = region

    @property
    def score(self):
        """Gets the score of this RiskMetadata.

        Risk score computed per all the factors.

        :return: The score of this RiskMetadata.
        :rtype: int
        """
        return self._score

    @score.setter
    def score(self, score):
        """Sets the score of this RiskMetadata.

        Risk score computed per all the factors.

        :param score: The score of this RiskMetadata.
        :type score: int
        """

        self._score = score

    @property
    def time_zone(self):
        """Gets the time_zone of this RiskMetadata.

        Time zone for specified ipAddress.

        :return: The time_zone of this RiskMetadata.
        :rtype: str
        """
        return self._time_zone

    @time_zone.setter
    def time_zone(self, time_zone):
        """Sets the time_zone of this RiskMetadata.

        Time zone for specified ipAddress.

        :param time_zone: The time_zone of this RiskMetadata.
        :type time_zone: str
        """

        self._time_zone = time_zone

    @property
    def vpn_service_name(self):
        """Gets the vpn_service_name of this RiskMetadata.

        VPN service name, if available.

        :return: The vpn_service_name of this RiskMetadata.
        :rtype: str
        """
        return self._vpn_service_name

    @vpn_service_name.setter
    def vpn_service_name(self, vpn_service_name):
        """Sets the vpn_service_name of this RiskMetadata.

        VPN service name, if available.

        :param vpn_service_name: The vpn_service_name of this RiskMetadata.
        :type vpn_service_name: str
        """

        self._vpn_service_name = vpn_service_name
