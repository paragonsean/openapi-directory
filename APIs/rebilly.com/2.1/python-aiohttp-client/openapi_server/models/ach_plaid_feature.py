# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AchPlaidFeature(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, expiration_time: datetime=None, link_token: str=None, name: str=None):
        """AchPlaidFeature - a model defined in OpenAPI

        :param expiration_time: The expiration_time of this AchPlaidFeature.
        :param link_token: The link_token of this AchPlaidFeature.
        :param name: The name of this AchPlaidFeature.
        """
        self.openapi_types = {
            'expiration_time': datetime,
            'link_token': str,
            'name': str
        }

        self.attribute_map = {
            'expiration_time': 'expirationTime',
            'link_token': 'linkToken',
            'name': 'name'
        }

        self._expiration_time = expiration_time
        self._link_token = link_token
        self._name = name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AchPlaidFeature':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AchPlaidFeature of this AchPlaidFeature.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def expiration_time(self):
        """Gets the expiration_time of this AchPlaidFeature.

        The expiration time of a `linkToken`.

        :return: The expiration_time of this AchPlaidFeature.
        :rtype: datetime
        """
        return self._expiration_time

    @expiration_time.setter
    def expiration_time(self, expiration_time):
        """Sets the expiration_time of this AchPlaidFeature.

        The expiration time of a `linkToken`.

        :param expiration_time: The expiration_time of this AchPlaidFeature.
        :type expiration_time: datetime
        """

        self._expiration_time = expiration_time

    @property
    def link_token(self):
        """Gets the link_token of this AchPlaidFeature.

        The Plaid `linkToken` for frontend integrations.

        :return: The link_token of this AchPlaidFeature.
        :rtype: str
        """
        return self._link_token

    @link_token.setter
    def link_token(self, link_token):
        """Sets the link_token of this AchPlaidFeature.

        The Plaid `linkToken` for frontend integrations.

        :param link_token: The link_token of this AchPlaidFeature.
        :type link_token: str
        """

        self._link_token = link_token

    @property
    def name(self):
        """Gets the name of this AchPlaidFeature.

        The feature name.

        :return: The name of this AchPlaidFeature.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AchPlaidFeature.

        The feature name.

        :param name: The name of this AchPlaidFeature.
        :type name: str
        """
        allowed_values = ["Plaid"]  # noqa: E501
        if name not in allowed_values:
            raise ValueError(
                "Invalid value for `name` ({0}), must be one of {1}"
                .format(name, allowed_values)
            )

        self._name = name
