# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.plan_billing_timing import PlanBillingTiming
from openapi_server import util


class CommonPlanRecurringInterval(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, length: int=None, unit: str=None, billing_timing: PlanBillingTiming=PlanBillingTiming.PREPAID, limit: int=None):
        """CommonPlanRecurringInterval - a model defined in OpenAPI

        :param length: The length of this CommonPlanRecurringInterval.
        :param unit: The unit of this CommonPlanRecurringInterval.
        :param billing_timing: The billing_timing of this CommonPlanRecurringInterval.
        :param limit: The limit of this CommonPlanRecurringInterval.
        """
        self.openapi_types = {
            'length': int,
            'unit': str,
            'billing_timing': PlanBillingTiming,
            'limit': int
        }

        self.attribute_map = {
            'length': 'length',
            'unit': 'unit',
            'billing_timing': 'billingTiming',
            'limit': 'limit'
        }

        self._length = length
        self._unit = unit
        self._billing_timing = billing_timing
        self._limit = limit

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CommonPlanRecurringInterval':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CommonPlan_recurringInterval of this CommonPlanRecurringInterval.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def length(self):
        """Gets the length of this CommonPlanRecurringInterval.

        The length of time.

        :return: The length of this CommonPlanRecurringInterval.
        :rtype: int
        """
        return self._length

    @length.setter
    def length(self, length):
        """Sets the length of this CommonPlanRecurringInterval.

        The length of time.

        :param length: The length of this CommonPlanRecurringInterval.
        :type length: int
        """
        if length is None:
            raise ValueError("Invalid value for `length`, must not be `None`")

        self._length = length

    @property
    def unit(self):
        """Gets the unit of this CommonPlanRecurringInterval.

        The unit of time.

        :return: The unit of this CommonPlanRecurringInterval.
        :rtype: str
        """
        return self._unit

    @unit.setter
    def unit(self, unit):
        """Sets the unit of this CommonPlanRecurringInterval.

        The unit of time.

        :param unit: The unit of this CommonPlanRecurringInterval.
        :type unit: str
        """
        allowed_values = ["day", "week", "month", "year"]  # noqa: E501
        if unit not in allowed_values:
            raise ValueError(
                "Invalid value for `unit` ({0}), must be one of {1}"
                .format(unit, allowed_values)
            )

        self._unit = unit

    @property
    def billing_timing(self):
        """Gets the billing_timing of this CommonPlanRecurringInterval.


        :return: The billing_timing of this CommonPlanRecurringInterval.
        :rtype: PlanBillingTiming
        """
        return self._billing_timing

    @billing_timing.setter
    def billing_timing(self, billing_timing):
        """Sets the billing_timing of this CommonPlanRecurringInterval.


        :param billing_timing: The billing_timing of this CommonPlanRecurringInterval.
        :type billing_timing: PlanBillingTiming
        """

        self._billing_timing = billing_timing

    @property
    def limit(self):
        """Gets the limit of this CommonPlanRecurringInterval.

        The number of invoices this subscription order will generate (if 1, it will not generate any beyond the initial order creation). For example, set this property to `12`, when the `periodUnit` is month and the `periodDuration` is 1, for a 1 year contract billed monthly. 

        :return: The limit of this CommonPlanRecurringInterval.
        :rtype: int
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this CommonPlanRecurringInterval.

        The number of invoices this subscription order will generate (if 1, it will not generate any beyond the initial order creation). For example, set this property to `12`, when the `periodUnit` is month and the `periodDuration` is 1, for a 1 year contract billed monthly. 

        :param limit: The limit of this CommonPlanRecurringInterval.
        :type limit: int
        """

        self._limit = limit
