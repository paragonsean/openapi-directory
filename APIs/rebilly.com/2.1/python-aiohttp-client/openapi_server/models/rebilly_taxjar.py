# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.invoice_tax import InvoiceTax
from openapi_server.models.rebilly_taxjar_all_of_items import RebillyTaxjarAllOfItems
from openapi_server import util


class RebillyTaxjar(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, amount: int=None, calculator: str=None, items: List[RebillyTaxjarAllOfItems]=None):
        """RebillyTaxjar - a model defined in OpenAPI

        :param amount: The amount of this RebillyTaxjar.
        :param calculator: The calculator of this RebillyTaxjar.
        :param items: The items of this RebillyTaxjar.
        """
        self.openapi_types = {
            'amount': int,
            'calculator': str,
            'items': List[RebillyTaxjarAllOfItems]
        }

        self.attribute_map = {
            'amount': 'amount',
            'calculator': 'calculator',
            'items': 'items'
        }

        self._amount = amount
        self._calculator = calculator
        self._items = items

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RebillyTaxjar':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The rebilly-taxjar of this RebillyTaxjar.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def amount(self):
        """Gets the amount of this RebillyTaxjar.

        A sum of all invoice taxes.

        :return: The amount of this RebillyTaxjar.
        :rtype: int
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this RebillyTaxjar.

        A sum of all invoice taxes.

        :param amount: The amount of this RebillyTaxjar.
        :type amount: int
        """

        self._amount = amount

    @property
    def calculator(self):
        """Gets the calculator of this RebillyTaxjar.

        Tax calculator.

        :return: The calculator of this RebillyTaxjar.
        :rtype: str
        """
        return self._calculator

    @calculator.setter
    def calculator(self, calculator):
        """Sets the calculator of this RebillyTaxjar.

        Tax calculator.

        :param calculator: The calculator of this RebillyTaxjar.
        :type calculator: str
        """
        allowed_values = ["manual", "rebilly-taxjar"]  # noqa: E501
        if calculator not in allowed_values:
            raise ValueError(
                "Invalid value for `calculator` ({0}), must be one of {1}"
                .format(calculator, allowed_values)
            )

        self._calculator = calculator

    @property
    def items(self):
        """Gets the items of this RebillyTaxjar.

        Taxes applied to this invoice and calculated based on the related Product's `taxCategoryId`. 

        :return: The items of this RebillyTaxjar.
        :rtype: List[RebillyTaxjarAllOfItems]
        """
        return self._items

    @items.setter
    def items(self, items):
        """Sets the items of this RebillyTaxjar.

        Taxes applied to this invoice and calculated based on the related Product's `taxCategoryId`. 

        :param items: The items of this RebillyTaxjar.
        :type items: List[RebillyTaxjarAllOfItems]
        """

        self._items = items
