# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class IpayOptionsAllOfSettings(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, card_type: str=None, extra_step: bool=None, platform: str=None, subdomain: str=None):
        """IpayOptionsAllOfSettings - a model defined in OpenAPI

        :param card_type: The card_type of this IpayOptionsAllOfSettings.
        :param extra_step: The extra_step of this IpayOptionsAllOfSettings.
        :param platform: The platform of this IpayOptionsAllOfSettings.
        :param subdomain: The subdomain of this IpayOptionsAllOfSettings.
        """
        self.openapi_types = {
            'card_type': str,
            'extra_step': bool,
            'platform': str,
            'subdomain': str
        }

        self.attribute_map = {
            'card_type': 'cardType',
            'extra_step': 'extraStep',
            'platform': 'platform',
            'subdomain': 'subdomain'
        }

        self._card_type = card_type
        self._extra_step = extra_step
        self._platform = platform
        self._subdomain = subdomain

    @classmethod
    def from_dict(cls, dikt: dict) -> 'IpayOptionsAllOfSettings':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The IpayOptions_allOf_settings of this IpayOptionsAllOfSettings.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def card_type(self):
        """Gets the card_type of this IpayOptionsAllOfSettings.

        Manually set the card_type for iDEAL.

        :return: The card_type of this IpayOptionsAllOfSettings.
        :rtype: str
        """
        return self._card_type

    @card_type.setter
    def card_type(self, card_type):
        """Sets the card_type of this IpayOptionsAllOfSettings.

        Manually set the card_type for iDEAL.

        :param card_type: The card_type of this IpayOptionsAllOfSettings.
        :type card_type: str
        """
        allowed_values = ["ideal", "idealqr", "sofort"]  # noqa: E501
        if card_type not in allowed_values:
            raise ValueError(
                "Invalid value for `card_type` ({0}), must be one of {1}"
                .format(card_type, allowed_values)
            )

        self._card_type = card_type

    @property
    def extra_step(self):
        """Gets the extra_step of this IpayOptionsAllOfSettings.

        Show extra step for user to enter their email and DNI number.

        :return: The extra_step of this IpayOptionsAllOfSettings.
        :rtype: bool
        """
        return self._extra_step

    @extra_step.setter
    def extra_step(self, extra_step):
        """Sets the extra_step of this IpayOptionsAllOfSettings.

        Show extra step for user to enter their email and DNI number.

        :param extra_step: The extra_step of this IpayOptionsAllOfSettings.
        :type extra_step: bool
        """

        self._extra_step = extra_step

    @property
    def platform(self):
        """Gets the platform of this IpayOptionsAllOfSettings.

        Platform which IpayOptions will process.

        :return: The platform of this IpayOptionsAllOfSettings.
        :rtype: str
        """
        return self._platform

    @platform.setter
    def platform(self, platform):
        """Sets the platform of this IpayOptionsAllOfSettings.

        Platform which IpayOptions will process.

        :param platform: The platform of this IpayOptionsAllOfSettings.
        :type platform: str
        """
        allowed_values = ["SOAP", "TxHandler", "SecureHosted"]  # noqa: E501
        if platform not in allowed_values:
            raise ValueError(
                "Invalid value for `platform` ({0}), must be one of {1}"
                .format(platform, allowed_values)
            )

        self._platform = platform

    @property
    def subdomain(self):
        """Gets the subdomain of this IpayOptionsAllOfSettings.

        Subdomain to use when sending request to IpayOptions.

        :return: The subdomain of this IpayOptionsAllOfSettings.
        :rtype: str
        """
        return self._subdomain

    @subdomain.setter
    def subdomain(self, subdomain):
        """Sets the subdomain of this IpayOptionsAllOfSettings.

        Subdomain to use when sending request to IpayOptions.

        :param subdomain: The subdomain of this IpayOptionsAllOfSettings.
        :type subdomain: str
        """
        allowed_values = ["miglite", "w88asiapay"]  # noqa: E501
        if subdomain not in allowed_values:
            raise ValueError(
                "Invalid value for `subdomain` ({0}), must be one of {1}"
                .format(subdomain, allowed_values)
            )

        self._subdomain = subdomain
