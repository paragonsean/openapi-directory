# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.subscription_change_items_inner import SubscriptionChangeItemsInner
from openapi_server import util


class SubscriptionChange(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, effective_time: datetime=None, items: List[SubscriptionChangeItemsInner]=None, keep_trial: bool=False, preview: bool=False, prorated: bool=None, renewal_policy: str=None):
        """SubscriptionChange - a model defined in OpenAPI

        :param effective_time: The effective_time of this SubscriptionChange.
        :param items: The items of this SubscriptionChange.
        :param keep_trial: The keep_trial of this SubscriptionChange.
        :param preview: The preview of this SubscriptionChange.
        :param prorated: The prorated of this SubscriptionChange.
        :param renewal_policy: The renewal_policy of this SubscriptionChange.
        """
        self.openapi_types = {
            'effective_time': datetime,
            'items': List[SubscriptionChangeItemsInner],
            'keep_trial': bool,
            'preview': bool,
            'prorated': bool,
            'renewal_policy': str
        }

        self.attribute_map = {
            'effective_time': 'effectiveTime',
            'items': 'items',
            'keep_trial': 'keepTrial',
            'preview': 'preview',
            'prorated': 'prorated',
            'renewal_policy': 'renewalPolicy'
        }

        self._effective_time = effective_time
        self._items = items
        self._keep_trial = keep_trial
        self._preview = preview
        self._prorated = prorated
        self._renewal_policy = renewal_policy

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SubscriptionChange':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SubscriptionChange of this SubscriptionChange.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def effective_time(self):
        """Gets the effective_time of this SubscriptionChange.

        The date from which the renewal time (for `reset` operations) and proration calculations are made.  If omitted, it will default to the current time.

        :return: The effective_time of this SubscriptionChange.
        :rtype: datetime
        """
        return self._effective_time

    @effective_time.setter
    def effective_time(self, effective_time):
        """Sets the effective_time of this SubscriptionChange.

        The date from which the renewal time (for `reset` operations) and proration calculations are made.  If omitted, it will default to the current time.

        :param effective_time: The effective_time of this SubscriptionChange.
        :type effective_time: datetime
        """

        self._effective_time = effective_time

    @property
    def items(self):
        """Gets the items of this SubscriptionChange.


        :return: The items of this SubscriptionChange.
        :rtype: List[SubscriptionChangeItemsInner]
        """
        return self._items

    @items.setter
    def items(self, items):
        """Sets the items of this SubscriptionChange.


        :param items: The items of this SubscriptionChange.
        :type items: List[SubscriptionChangeItemsInner]
        """
        if items is None:
            raise ValueError("Invalid value for `items`, must not be `None`")
        if items is not None and len(items) < 1:
            raise ValueError("Invalid value for `items`, number of items must be greater than or equal to `1`")

        self._items = items

    @property
    def keep_trial(self):
        """Gets the keep_trial of this SubscriptionChange.

        If set to true and the subscription order has an active trial, it will use that trial further. Works with 'retain' renewalPolicy only.

        :return: The keep_trial of this SubscriptionChange.
        :rtype: bool
        """
        return self._keep_trial

    @keep_trial.setter
    def keep_trial(self, keep_trial):
        """Sets the keep_trial of this SubscriptionChange.

        If set to true and the subscription order has an active trial, it will use that trial further. Works with 'retain' renewalPolicy only.

        :param keep_trial: The keep_trial of this SubscriptionChange.
        :type keep_trial: bool
        """

        self._keep_trial = keep_trial

    @property
    def preview(self):
        """Gets the preview of this SubscriptionChange.

        If set to true, it will not change the subscription.  It allows for a way to preview the changes that would be made to a subscription.

        :return: The preview of this SubscriptionChange.
        :rtype: bool
        """
        return self._preview

    @preview.setter
    def preview(self, preview):
        """Sets the preview of this SubscriptionChange.

        If set to true, it will not change the subscription.  It allows for a way to preview the changes that would be made to a subscription.

        :param preview: The preview of this SubscriptionChange.
        :type preview: bool
        """

        self._preview = preview

    @property
    def prorated(self):
        """Gets the prorated of this SubscriptionChange.

        Whether or not to give a pro rata credit for the amount of time remaining between the `effectiveTime` and the end of the current period. In addition, if the `renewalTime` is retained (by setting the `renewalPolicy` to `retain`), then a pro rata debit will occur as well, for the amount between the `effectiveTime` and the `renewalTime` as a percentage of the normal period size. 

        :return: The prorated of this SubscriptionChange.
        :rtype: bool
        """
        return self._prorated

    @prorated.setter
    def prorated(self, prorated):
        """Sets the prorated of this SubscriptionChange.

        Whether or not to give a pro rata credit for the amount of time remaining between the `effectiveTime` and the end of the current period. In addition, if the `renewalTime` is retained (by setting the `renewalPolicy` to `retain`), then a pro rata debit will occur as well, for the amount between the `effectiveTime` and the `renewalTime` as a percentage of the normal period size. 

        :param prorated: The prorated of this SubscriptionChange.
        :type prorated: bool
        """
        if prorated is None:
            raise ValueError("Invalid value for `prorated`, must not be `None`")

        self._prorated = prorated

    @property
    def renewal_policy(self):
        """Gets the renewal_policy of this SubscriptionChange.

        The value determines whether the subscription retains its current `renewalTime` or resets it to a newly calculated `renewalTime`.

        :return: The renewal_policy of this SubscriptionChange.
        :rtype: str
        """
        return self._renewal_policy

    @renewal_policy.setter
    def renewal_policy(self, renewal_policy):
        """Sets the renewal_policy of this SubscriptionChange.

        The value determines whether the subscription retains its current `renewalTime` or resets it to a newly calculated `renewalTime`.

        :param renewal_policy: The renewal_policy of this SubscriptionChange.
        :type renewal_policy: str
        """
        allowed_values = ["reset", "retain"]  # noqa: E501
        if renewal_policy not in allowed_values:
            raise ValueError(
                "Invalid value for `renewal_policy` ({0}), must be one of {1}"
                .format(renewal_policy, allowed_values)
            )

        self._renewal_policy = renewal_policy
