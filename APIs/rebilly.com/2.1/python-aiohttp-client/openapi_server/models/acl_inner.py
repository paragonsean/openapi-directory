# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.api_key_scope import ApiKeyScope
from openapi_server import util


class AclInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, permissions: List[str]=None, scope: ApiKeyScope=None):
        """AclInner - a model defined in OpenAPI

        :param permissions: The permissions of this AclInner.
        :param scope: The scope of this AclInner.
        """
        self.openapi_types = {
            'permissions': List[str],
            'scope': ApiKeyScope
        }

        self.attribute_map = {
            'permissions': 'permissions',
            'scope': 'scope'
        }

        self._permissions = permissions
        self._scope = scope

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AclInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Acl_inner of this AclInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def permissions(self):
        """Gets the permissions of this AclInner.

        Specify individual permission here if creating a restricted API key. Use wildcard `*` for full access.

        :return: The permissions of this AclInner.
        :rtype: List[str]
        """
        return self._permissions

    @permissions.setter
    def permissions(self, permissions):
        """Sets the permissions of this AclInner.

        Specify individual permission here if creating a restricted API key. Use wildcard `*` for full access.

        :param permissions: The permissions of this AclInner.
        :type permissions: List[str]
        """
        if permissions is None:
            raise ValueError("Invalid value for `permissions`, must not be `None`")

        self._permissions = permissions

    @property
    def scope(self):
        """Gets the scope of this AclInner.

        Api Key scope.

        :return: The scope of this AclInner.
        :rtype: ApiKeyScope
        """
        return self._scope

    @scope.setter
    def scope(self, scope):
        """Sets the scope of this AclInner.

        Api Key scope.

        :param scope: The scope of this AclInner.
        :type scope: ApiKeyScope
        """
        if scope is None:
            raise ValueError("Invalid value for `scope`, must not be `None`")

        self._scope = scope
