# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PiastrixAllOfSettings(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, tolerance_percentage: int=None):
        """PiastrixAllOfSettings - a model defined in OpenAPI

        :param tolerance_percentage: The tolerance_percentage of this PiastrixAllOfSettings.
        """
        self.openapi_types = {
            'tolerance_percentage': int
        }

        self.attribute_map = {
            'tolerance_percentage': 'tolerancePercentage'
        }

        self._tolerance_percentage = tolerance_percentage

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PiastrixAllOfSettings':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Piastrix_allOf_settings of this PiastrixAllOfSettings.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def tolerance_percentage(self):
        """Gets the tolerance_percentage of this PiastrixAllOfSettings.

        Tolerance percentage for settled amount.

        :return: The tolerance_percentage of this PiastrixAllOfSettings.
        :rtype: int
        """
        return self._tolerance_percentage

    @tolerance_percentage.setter
    def tolerance_percentage(self, tolerance_percentage):
        """Sets the tolerance_percentage of this PiastrixAllOfSettings.

        Tolerance percentage for settled amount.

        :param tolerance_percentage: The tolerance_percentage of this PiastrixAllOfSettings.
        :type tolerance_percentage: int
        """
        if tolerance_percentage is not None and tolerance_percentage > 5:
            raise ValueError("Invalid value for `tolerance_percentage`, must be a value less than or equal to `5`")
        if tolerance_percentage is not None and tolerance_percentage < 0:
            raise ValueError("Invalid value for `tolerance_percentage`, must be a value greater than or equal to `0`")

        self._tolerance_percentage = tolerance_percentage
