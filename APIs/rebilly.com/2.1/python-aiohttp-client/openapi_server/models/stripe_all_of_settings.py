# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class StripeAllOfSettings(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, enforce_off_session: bool=False, redirect_url: str=None, use_payment_intents: bool=False):
        """StripeAllOfSettings - a model defined in OpenAPI

        :param enforce_off_session: The enforce_off_session of this StripeAllOfSettings.
        :param redirect_url: The redirect_url of this StripeAllOfSettings.
        :param use_payment_intents: The use_payment_intents of this StripeAllOfSettings.
        """
        self.openapi_types = {
            'enforce_off_session': bool,
            'redirect_url': str,
            'use_payment_intents': bool
        }

        self.attribute_map = {
            'enforce_off_session': 'enforceOffSession',
            'redirect_url': 'redirectUrl',
            'use_payment_intents': 'usePaymentIntents'
        }

        self._enforce_off_session = enforce_off_session
        self._redirect_url = redirect_url
        self._use_payment_intents = use_payment_intents

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StripeAllOfSettings':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Stripe_allOf_settings of this StripeAllOfSettings.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def enforce_off_session(self):
        """Gets the enforce_off_session of this StripeAllOfSettings.

        If `true`, `off_session` param will always be `true` in Stripe requests.

        :return: The enforce_off_session of this StripeAllOfSettings.
        :rtype: bool
        """
        return self._enforce_off_session

    @enforce_off_session.setter
    def enforce_off_session(self, enforce_off_session):
        """Sets the enforce_off_session of this StripeAllOfSettings.

        If `true`, `off_session` param will always be `true` in Stripe requests.

        :param enforce_off_session: The enforce_off_session of this StripeAllOfSettings.
        :type enforce_off_session: bool
        """

        self._enforce_off_session = enforce_off_session

    @property
    def redirect_url(self):
        """Gets the redirect_url of this StripeAllOfSettings.

        The URL where the user will be redirected after authorizing the account on Stripe.

        :return: The redirect_url of this StripeAllOfSettings.
        :rtype: str
        """
        return self._redirect_url

    @redirect_url.setter
    def redirect_url(self, redirect_url):
        """Sets the redirect_url of this StripeAllOfSettings.

        The URL where the user will be redirected after authorizing the account on Stripe.

        :param redirect_url: The redirect_url of this StripeAllOfSettings.
        :type redirect_url: str
        """
        if redirect_url is None:
            raise ValueError("Invalid value for `redirect_url`, must not be `None`")

        self._redirect_url = redirect_url

    @property
    def use_payment_intents(self):
        """Gets the use_payment_intents of this StripeAllOfSettings.

        If `true` the `PaymentIntents` API will be used instead of `Charges` API.

        :return: The use_payment_intents of this StripeAllOfSettings.
        :rtype: bool
        """
        return self._use_payment_intents

    @use_payment_intents.setter
    def use_payment_intents(self, use_payment_intents):
        """Sets the use_payment_intents of this StripeAllOfSettings.

        If `true` the `PaymentIntents` API will be used instead of `Charges` API.

        :param use_payment_intents: The use_payment_intents of this StripeAllOfSettings.
        :type use_payment_intents: bool
        """

        self._use_payment_intents = use_payment_intents
