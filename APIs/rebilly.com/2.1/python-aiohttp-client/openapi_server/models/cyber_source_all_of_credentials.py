# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CyberSourceAllOfCredentials(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, access_key: str=None, profile_id: str=None, secret_key: str=None):
        """CyberSourceAllOfCredentials - a model defined in OpenAPI

        :param access_key: The access_key of this CyberSourceAllOfCredentials.
        :param profile_id: The profile_id of this CyberSourceAllOfCredentials.
        :param secret_key: The secret_key of this CyberSourceAllOfCredentials.
        """
        self.openapi_types = {
            'access_key': str,
            'profile_id': str,
            'secret_key': str
        }

        self.attribute_map = {
            'access_key': 'accessKey',
            'profile_id': 'profileId',
            'secret_key': 'secretKey'
        }

        self._access_key = access_key
        self._profile_id = profile_id
        self._secret_key = secret_key

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CyberSourceAllOfCredentials':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CyberSource_allOf_credentials of this CyberSourceAllOfCredentials.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def access_key(self):
        """Gets the access_key of this CyberSourceAllOfCredentials.

        CyberSource access key.

        :return: The access_key of this CyberSourceAllOfCredentials.
        :rtype: str
        """
        return self._access_key

    @access_key.setter
    def access_key(self, access_key):
        """Sets the access_key of this CyberSourceAllOfCredentials.

        CyberSource access key.

        :param access_key: The access_key of this CyberSourceAllOfCredentials.
        :type access_key: str
        """
        if access_key is None:
            raise ValueError("Invalid value for `access_key`, must not be `None`")

        self._access_key = access_key

    @property
    def profile_id(self):
        """Gets the profile_id of this CyberSourceAllOfCredentials.

        CyberSource profile ID.

        :return: The profile_id of this CyberSourceAllOfCredentials.
        :rtype: str
        """
        return self._profile_id

    @profile_id.setter
    def profile_id(self, profile_id):
        """Sets the profile_id of this CyberSourceAllOfCredentials.

        CyberSource profile ID.

        :param profile_id: The profile_id of this CyberSourceAllOfCredentials.
        :type profile_id: str
        """
        if profile_id is None:
            raise ValueError("Invalid value for `profile_id`, must not be `None`")

        self._profile_id = profile_id

    @property
    def secret_key(self):
        """Gets the secret_key of this CyberSourceAllOfCredentials.

        CyberSource secret key.

        :return: The secret_key of this CyberSourceAllOfCredentials.
        :rtype: str
        """
        return self._secret_key

    @secret_key.setter
    def secret_key(self, secret_key):
        """Sets the secret_key of this CyberSourceAllOfCredentials.

        CyberSource secret key.

        :param secret_key: The secret_key of this CyberSourceAllOfCredentials.
        :type secret_key: str
        """
        if secret_key is None:
            raise ValueError("Invalid value for `secret_key`, must not be `None`")

        self._secret_key = secret_key
