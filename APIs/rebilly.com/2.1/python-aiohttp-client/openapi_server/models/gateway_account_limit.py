# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.self_link import SelfLink
from openapi_server import util


class GatewayAccountLimit(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, links: List[SelfLink]=None, cap: int=None, created_time: datetime=None, end_time: datetime=None, frequency: str=None, id: str=None, start_time: datetime=None, status: str=None, type: str=None, updated_time: datetime=None, usage: int=None):
        """GatewayAccountLimit - a model defined in OpenAPI

        :param links: The links of this GatewayAccountLimit.
        :param cap: The cap of this GatewayAccountLimit.
        :param created_time: The created_time of this GatewayAccountLimit.
        :param end_time: The end_time of this GatewayAccountLimit.
        :param frequency: The frequency of this GatewayAccountLimit.
        :param id: The id of this GatewayAccountLimit.
        :param start_time: The start_time of this GatewayAccountLimit.
        :param status: The status of this GatewayAccountLimit.
        :param type: The type of this GatewayAccountLimit.
        :param updated_time: The updated_time of this GatewayAccountLimit.
        :param usage: The usage of this GatewayAccountLimit.
        """
        self.openapi_types = {
            'links': List[SelfLink],
            'cap': int,
            'created_time': datetime,
            'end_time': datetime,
            'frequency': str,
            'id': str,
            'start_time': datetime,
            'status': str,
            'type': str,
            'updated_time': datetime,
            'usage': int
        }

        self.attribute_map = {
            'links': '_links',
            'cap': 'cap',
            'created_time': 'createdTime',
            'end_time': 'endTime',
            'frequency': 'frequency',
            'id': 'id',
            'start_time': 'startTime',
            'status': 'status',
            'type': 'type',
            'updated_time': 'updatedTime',
            'usage': 'usage'
        }

        self._links = links
        self._cap = cap
        self._created_time = created_time
        self._end_time = end_time
        self._frequency = frequency
        self._id = id
        self._start_time = start_time
        self._status = status
        self._type = type
        self._updated_time = updated_time
        self._usage = usage

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GatewayAccountLimit':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GatewayAccountLimit of this GatewayAccountLimit.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def links(self):
        """Gets the links of this GatewayAccountLimit.

        The links related to resource.

        :return: The links of this GatewayAccountLimit.
        :rtype: List[SelfLink]
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this GatewayAccountLimit.

        The links related to resource.

        :param links: The links of this GatewayAccountLimit.
        :type links: List[SelfLink]
        """
        if links is not None and len(links) < 1:
            raise ValueError("Invalid value for `links`, number of items must be greater than or equal to `1`")

        self._links = links

    @property
    def cap(self):
        """Gets the cap of this GatewayAccountLimit.

        The limit's value cap is the maximum desired value. If type is money, the currency is the report currency. The cap only applies to approved transactions of type `authorize` or `sale`. 

        :return: The cap of this GatewayAccountLimit.
        :rtype: int
        """
        return self._cap

    @cap.setter
    def cap(self, cap):
        """Sets the cap of this GatewayAccountLimit.

        The limit's value cap is the maximum desired value. If type is money, the currency is the report currency. The cap only applies to approved transactions of type `authorize` or `sale`. 

        :param cap: The cap of this GatewayAccountLimit.
        :type cap: int
        """
        if cap is None:
            raise ValueError("Invalid value for `cap`, must not be `None`")

        self._cap = cap

    @property
    def created_time(self):
        """Gets the created_time of this GatewayAccountLimit.

        Gateway account limit created time.

        :return: The created_time of this GatewayAccountLimit.
        :rtype: datetime
        """
        return self._created_time

    @created_time.setter
    def created_time(self, created_time):
        """Sets the created_time of this GatewayAccountLimit.

        Gateway account limit created time.

        :param created_time: The created_time of this GatewayAccountLimit.
        :type created_time: datetime
        """

        self._created_time = created_time

    @property
    def end_time(self):
        """Gets the end_time of this GatewayAccountLimit.

        The limit's current period end time. At this time, the limit will reset.

        :return: The end_time of this GatewayAccountLimit.
        :rtype: datetime
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this GatewayAccountLimit.

        The limit's current period end time. At this time, the limit will reset.

        :param end_time: The end_time of this GatewayAccountLimit.
        :type end_time: datetime
        """

        self._end_time = end_time

    @property
    def frequency(self):
        """Gets the frequency of this GatewayAccountLimit.

        The limit's period will reset according to the frequency.

        :return: The frequency of this GatewayAccountLimit.
        :rtype: str
        """
        return self._frequency

    @frequency.setter
    def frequency(self, frequency):
        """Sets the frequency of this GatewayAccountLimit.

        The limit's period will reset according to the frequency.

        :param frequency: The frequency of this GatewayAccountLimit.
        :type frequency: str
        """
        allowed_values = ["daily", "monthly"]  # noqa: E501
        if frequency not in allowed_values:
            raise ValueError(
                "Invalid value for `frequency` ({0}), must be one of {1}"
                .format(frequency, allowed_values)
            )

        self._frequency = frequency

    @property
    def id(self):
        """Gets the id of this GatewayAccountLimit.

        The gateway account limit identifier.

        :return: The id of this GatewayAccountLimit.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this GatewayAccountLimit.

        The gateway account limit identifier.

        :param id: The id of this GatewayAccountLimit.
        :type id: str
        """
        if id is not None and len(id) > 50:
            raise ValueError("Invalid value for `id`, length must be less than or equal to `50`")

        self._id = id

    @property
    def start_time(self):
        """Gets the start_time of this GatewayAccountLimit.

        The limit's current period start time.

        :return: The start_time of this GatewayAccountLimit.
        :rtype: datetime
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this GatewayAccountLimit.

        The limit's current period start time.

        :param start_time: The start_time of this GatewayAccountLimit.
        :type start_time: datetime
        """

        self._start_time = start_time

    @property
    def status(self):
        """Gets the status of this GatewayAccountLimit.

        The gateway account limit status.

        :return: The status of this GatewayAccountLimit.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this GatewayAccountLimit.

        The gateway account limit status.

        :param status: The status of this GatewayAccountLimit.
        :type status: str
        """
        allowed_values = ["monitoring", "reached"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def type(self):
        """Gets the type of this GatewayAccountLimit.

        The limit can be on `money` or `count` of transactions. If `money` is chosen, the currency is the report currency. 

        :return: The type of this GatewayAccountLimit.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this GatewayAccountLimit.

        The limit can be on `money` or `count` of transactions. If `money` is chosen, the currency is the report currency. 

        :param type: The type of this GatewayAccountLimit.
        :type type: str
        """
        allowed_values = ["count", "money"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def updated_time(self):
        """Gets the updated_time of this GatewayAccountLimit.

        Gateway account limit updated time.

        :return: The updated_time of this GatewayAccountLimit.
        :rtype: datetime
        """
        return self._updated_time

    @updated_time.setter
    def updated_time(self, updated_time):
        """Sets the updated_time of this GatewayAccountLimit.

        Gateway account limit updated time.

        :param updated_time: The updated_time of this GatewayAccountLimit.
        :type updated_time: datetime
        """

        self._updated_time = updated_time

    @property
    def usage(self):
        """Gets the usage of this GatewayAccountLimit.

        The limit's actual usage during this period.

        :return: The usage of this GatewayAccountLimit.
        :rtype: int
        """
        return self._usage

    @usage.setter
    def usage(self, usage):
        """Sets the usage of this GatewayAccountLimit.

        The limit's actual usage during this period.

        :param usage: The usage of this GatewayAccountLimit.
        :type usage: int
        """

        self._usage = usage
