# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.acl_inner import AclInner
from openapi_server.models.customer_link import CustomerLink
import re
from openapi_server import util


class CustomerJWT(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, links: List[CustomerLink]=None, acl: List[AclInner]=None, created_time: datetime=None, custom_claims: Dict[str, object]=None, customer_id: str=None, expired_time: datetime=None, id: str=None, invalidate: bool=True, one_time_password: str=None, token: str=None, type: str=None, updated_time: datetime=None):
        """CustomerJWT - a model defined in OpenAPI

        :param links: The links of this CustomerJWT.
        :param acl: The acl of this CustomerJWT.
        :param created_time: The created_time of this CustomerJWT.
        :param custom_claims: The custom_claims of this CustomerJWT.
        :param customer_id: The customer_id of this CustomerJWT.
        :param expired_time: The expired_time of this CustomerJWT.
        :param id: The id of this CustomerJWT.
        :param invalidate: The invalidate of this CustomerJWT.
        :param one_time_password: The one_time_password of this CustomerJWT.
        :param token: The token of this CustomerJWT.
        :param type: The type of this CustomerJWT.
        :param updated_time: The updated_time of this CustomerJWT.
        """
        self.openapi_types = {
            'links': List[CustomerLink],
            'acl': List[AclInner],
            'created_time': datetime,
            'custom_claims': Dict[str, object],
            'customer_id': str,
            'expired_time': datetime,
            'id': str,
            'invalidate': bool,
            'one_time_password': str,
            'token': str,
            'type': str,
            'updated_time': datetime
        }

        self.attribute_map = {
            'links': '_links',
            'acl': 'acl',
            'created_time': 'createdTime',
            'custom_claims': 'customClaims',
            'customer_id': 'customerId',
            'expired_time': 'expiredTime',
            'id': 'id',
            'invalidate': 'invalidate',
            'one_time_password': 'oneTimePassword',
            'token': 'token',
            'type': 'type',
            'updated_time': 'updatedTime'
        }

        self._links = links
        self._acl = acl
        self._created_time = created_time
        self._custom_claims = custom_claims
        self._customer_id = customer_id
        self._expired_time = expired_time
        self._id = id
        self._invalidate = invalidate
        self._one_time_password = one_time_password
        self._token = token
        self._type = type
        self._updated_time = updated_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CustomerJWT':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CustomerJWT of this CustomerJWT.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def links(self):
        """Gets the links of this CustomerJWT.

        The links related to resource.

        :return: The links of this CustomerJWT.
        :rtype: List[CustomerLink]
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this CustomerJWT.

        The links related to resource.

        :param links: The links of this CustomerJWT.
        :type links: List[CustomerLink]
        """
        if links is not None and len(links) < 1:
            raise ValueError("Invalid value for `links`, number of items must be greater than or equal to `1`")

        self._links = links

    @property
    def acl(self):
        """Gets the acl of this CustomerJWT.


        :return: The acl of this CustomerJWT.
        :rtype: List[AclInner]
        """
        return self._acl

    @acl.setter
    def acl(self, acl):
        """Sets the acl of this CustomerJWT.


        :param acl: The acl of this CustomerJWT.
        :type acl: List[AclInner]
        """

        self._acl = acl

    @property
    def created_time(self):
        """Gets the created_time of this CustomerJWT.

        Session created time.

        :return: The created_time of this CustomerJWT.
        :rtype: datetime
        """
        return self._created_time

    @created_time.setter
    def created_time(self, created_time):
        """Sets the created_time of this CustomerJWT.

        Session created time.

        :param created_time: The created_time of this CustomerJWT.
        :type created_time: datetime
        """

        self._created_time = created_time

    @property
    def custom_claims(self):
        """Gets the custom_claims of this CustomerJWT.


        :return: The custom_claims of this CustomerJWT.
        :rtype: Dict[str, object]
        """
        return self._custom_claims

    @custom_claims.setter
    def custom_claims(self, custom_claims):
        """Sets the custom_claims of this CustomerJWT.


        :param custom_claims: The custom_claims of this CustomerJWT.
        :type custom_claims: Dict[str, object]
        """

        self._custom_claims = custom_claims

    @property
    def customer_id(self):
        """Gets the customer_id of this CustomerJWT.

        The customer's ID.

        :return: The customer_id of this CustomerJWT.
        :rtype: str
        """
        return self._customer_id

    @customer_id.setter
    def customer_id(self, customer_id):
        """Sets the customer_id of this CustomerJWT.

        The customer's ID.

        :param customer_id: The customer_id of this CustomerJWT.
        :type customer_id: str
        """
        if customer_id is not None and len(customer_id) > 50:
            raise ValueError("Invalid value for `customer_id`, length must be less than or equal to `50`")

        self._customer_id = customer_id

    @property
    def expired_time(self):
        """Gets the expired_time of this CustomerJWT.

        Session expired time. Defaults to one hour.

        :return: The expired_time of this CustomerJWT.
        :rtype: datetime
        """
        return self._expired_time

    @expired_time.setter
    def expired_time(self, expired_time):
        """Sets the expired_time of this CustomerJWT.

        Session expired time. Defaults to one hour.

        :param expired_time: The expired_time of this CustomerJWT.
        :type expired_time: datetime
        """

        self._expired_time = expired_time

    @property
    def id(self):
        """Gets the id of this CustomerJWT.

        The session identifier string.

        :return: The id of this CustomerJWT.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CustomerJWT.

        The session identifier string.

        :param id: The id of this CustomerJWT.
        :type id: str
        """
        if id is not None and len(id) > 50:
            raise ValueError("Invalid value for `id`, length must be less than or equal to `50`")

        self._id = id

    @property
    def invalidate(self):
        """Gets the invalidate of this CustomerJWT.

        Whether to invalidate token after exchange or not.

        :return: The invalidate of this CustomerJWT.
        :rtype: bool
        """
        return self._invalidate

    @invalidate.setter
    def invalidate(self, invalidate):
        """Sets the invalidate of this CustomerJWT.

        Whether to invalidate token after exchange or not.

        :param invalidate: The invalidate of this CustomerJWT.
        :type invalidate: bool
        """

        self._invalidate = invalidate

    @property
    def one_time_password(self):
        """Gets the one_time_password of this CustomerJWT.

        The one time password sent via an email. Should contain digits only.

        :return: The one_time_password of this CustomerJWT.
        :rtype: str
        """
        return self._one_time_password

    @one_time_password.setter
    def one_time_password(self, one_time_password):
        """Sets the one_time_password of this CustomerJWT.

        The one time password sent via an email. Should contain digits only.

        :param one_time_password: The one_time_password of this CustomerJWT.
        :type one_time_password: str
        """
        if one_time_password is not None and not re.search(r'^[0-9]{6}$', one_time_password):
            raise ValueError("Invalid value for `one_time_password`, must be a follow pattern or equal to `/^[0-9]{6}$/`")

        self._one_time_password = one_time_password

    @property
    def token(self):
        """Gets the token of this CustomerJWT.

        The session's token used for authentication.

        :return: The token of this CustomerJWT.
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token):
        """Sets the token of this CustomerJWT.

        The session's token used for authentication.

        :param token: The token of this CustomerJWT.
        :type token: str
        """

        self._token = token

    @property
    def type(self):
        """Gets the type of this CustomerJWT.

        Session type.

        :return: The type of this CustomerJWT.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CustomerJWT.

        Session type.

        :param type: The type of this CustomerJWT.
        :type type: str
        """
        allowed_values = ["customer"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def updated_time(self):
        """Gets the updated_time of this CustomerJWT.

        Session updated time.

        :return: The updated_time of this CustomerJWT.
        :rtype: datetime
        """
        return self._updated_time

    @updated_time.setter
    def updated_time(self, updated_time):
        """Sets the updated_time of this CustomerJWT.

        Session updated time.

        :param updated_time: The updated_time of this CustomerJWT.
        :type updated_time: datetime
        """

        self._updated_time = updated_time
