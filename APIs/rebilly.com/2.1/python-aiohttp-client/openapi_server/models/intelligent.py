# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.common_schedule_instruction import CommonScheduleInstruction
from openapi_server.models.custom_event_schedule_instruction import CustomEventScheduleInstruction
from openapi_server.models.intelligent_all_of_unit import IntelligentAllOfUnit
from openapi_server.models.invoice_retry_schedule_instruction import InvoiceRetryScheduleInstruction
from openapi_server import util


class Intelligent(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, method: str=None, duration: int=None, unit: IntelligentAllOfUnit=None):
        """Intelligent - a model defined in OpenAPI

        :param method: The method of this Intelligent.
        :param duration: The duration of this Intelligent.
        :param unit: The unit of this Intelligent.
        """
        self.openapi_types = {
            'method': str,
            'duration': int,
            'unit': IntelligentAllOfUnit
        }

        self.attribute_map = {
            'method': 'method',
            'duration': 'duration',
            'unit': 'unit'
        }

        self._method = method
        self._duration = duration
        self._unit = unit

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Intelligent':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The intelligent of this Intelligent.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def method(self):
        """Gets the method of this Intelligent.


        :return: The method of this Intelligent.
        :rtype: str
        """
        return self._method

    @method.setter
    def method(self, method):
        """Sets the method of this Intelligent.


        :param method: The method of this Intelligent.
        :type method: str
        """
        allowed_values = ["intelligent", "immediately", "date-interval", "day-of-month", "day-of-week"]  # noqa: E501
        if method not in allowed_values:
            raise ValueError(
                "Invalid value for `method` ({0}), must be one of {1}"
                .format(method, allowed_values)
            )

        self._method = method

    @property
    def duration(self):
        """Gets the duration of this Intelligent.

        The number of the units.

        :return: The duration of this Intelligent.
        :rtype: int
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this Intelligent.

        The number of the units.

        :param duration: The duration of this Intelligent.
        :type duration: int
        """
        if duration is None:
            raise ValueError("Invalid value for `duration`, must not be `None`")
        if duration is not None and duration < 1:
            raise ValueError("Invalid value for `duration`, must be a value greater than or equal to `1`")

        self._duration = duration

    @property
    def unit(self):
        """Gets the unit of this Intelligent.


        :return: The unit of this Intelligent.
        :rtype: IntelligentAllOfUnit
        """
        return self._unit

    @unit.setter
    def unit(self, unit):
        """Sets the unit of this Intelligent.


        :param unit: The unit of this Intelligent.
        :type unit: IntelligentAllOfUnit
        """
        if unit is None:
            raise ValueError("Invalid value for `unit`, must not be `None`")

        self._unit = unit
