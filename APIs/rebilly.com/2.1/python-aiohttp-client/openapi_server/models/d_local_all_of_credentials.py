# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DLocalAllOfCredentials(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, secret_key: str=None, x_login: str=None, x_trans_key: str=None):
        """DLocalAllOfCredentials - a model defined in OpenAPI

        :param secret_key: The secret_key of this DLocalAllOfCredentials.
        :param x_login: The x_login of this DLocalAllOfCredentials.
        :param x_trans_key: The x_trans_key of this DLocalAllOfCredentials.
        """
        self.openapi_types = {
            'secret_key': str,
            'x_login': str,
            'x_trans_key': str
        }

        self.attribute_map = {
            'secret_key': 'secretKey',
            'x_login': 'xLogin',
            'x_trans_key': 'xTransKey'
        }

        self._secret_key = secret_key
        self._x_login = x_login
        self._x_trans_key = x_trans_key

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DLocalAllOfCredentials':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The dLocal_allOf_credentials of this DLocalAllOfCredentials.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def secret_key(self):
        """Gets the secret_key of this DLocalAllOfCredentials.


        :return: The secret_key of this DLocalAllOfCredentials.
        :rtype: str
        """
        return self._secret_key

    @secret_key.setter
    def secret_key(self, secret_key):
        """Sets the secret_key of this DLocalAllOfCredentials.


        :param secret_key: The secret_key of this DLocalAllOfCredentials.
        :type secret_key: str
        """
        if secret_key is None:
            raise ValueError("Invalid value for `secret_key`, must not be `None`")

        self._secret_key = secret_key

    @property
    def x_login(self):
        """Gets the x_login of this DLocalAllOfCredentials.


        :return: The x_login of this DLocalAllOfCredentials.
        :rtype: str
        """
        return self._x_login

    @x_login.setter
    def x_login(self, x_login):
        """Sets the x_login of this DLocalAllOfCredentials.


        :param x_login: The x_login of this DLocalAllOfCredentials.
        :type x_login: str
        """
        if x_login is None:
            raise ValueError("Invalid value for `x_login`, must not be `None`")

        self._x_login = x_login

    @property
    def x_trans_key(self):
        """Gets the x_trans_key of this DLocalAllOfCredentials.


        :return: The x_trans_key of this DLocalAllOfCredentials.
        :rtype: str
        """
        return self._x_trans_key

    @x_trans_key.setter
    def x_trans_key(self, x_trans_key):
        """Sets the x_trans_key of this DLocalAllOfCredentials.


        :param x_trans_key: The x_trans_key of this DLocalAllOfCredentials.
        :type x_trans_key: str
        """
        if x_trans_key is None:
            raise ValueError("Invalid value for `x_trans_key`, must not be `None`")

        self._x_trans_key = x_trans_key
