# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.payvision3ds_servers import Payvision3dsServers
from openapi_server.models.three_d_secure_server_name import ThreeDSecureServerName
from openapi_server import util


class CardinalCommerce3dsServer(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name: ThreeDSecureServerName=None, merchant_id: str=None, processor_id: str=None, transaction_pwd: str=None):
        """CardinalCommerce3dsServer - a model defined in OpenAPI

        :param name: The name of this CardinalCommerce3dsServer.
        :param merchant_id: The merchant_id of this CardinalCommerce3dsServer.
        :param processor_id: The processor_id of this CardinalCommerce3dsServer.
        :param transaction_pwd: The transaction_pwd of this CardinalCommerce3dsServer.
        """
        self.openapi_types = {
            'name': ThreeDSecureServerName,
            'merchant_id': str,
            'processor_id': str,
            'transaction_pwd': str
        }

        self.attribute_map = {
            'name': 'name',
            'merchant_id': 'merchantId',
            'processor_id': 'processorId',
            'transaction_pwd': 'transactionPwd'
        }

        self._name = name
        self._merchant_id = merchant_id
        self._processor_id = processor_id
        self._transaction_pwd = transaction_pwd

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CardinalCommerce3dsServer':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CardinalCommerce3dsServer of this CardinalCommerce3dsServer.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this CardinalCommerce3dsServer.


        :return: The name of this CardinalCommerce3dsServer.
        :rtype: ThreeDSecureServerName
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CardinalCommerce3dsServer.


        :param name: The name of this CardinalCommerce3dsServer.
        :type name: ThreeDSecureServerName
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def merchant_id(self):
        """Gets the merchant_id of this CardinalCommerce3dsServer.

        Cardinal MerchantId.

        :return: The merchant_id of this CardinalCommerce3dsServer.
        :rtype: str
        """
        return self._merchant_id

    @merchant_id.setter
    def merchant_id(self, merchant_id):
        """Sets the merchant_id of this CardinalCommerce3dsServer.

        Cardinal MerchantId.

        :param merchant_id: The merchant_id of this CardinalCommerce3dsServer.
        :type merchant_id: str
        """
        if merchant_id is None:
            raise ValueError("Invalid value for `merchant_id`, must not be `None`")

        self._merchant_id = merchant_id

    @property
    def processor_id(self):
        """Gets the processor_id of this CardinalCommerce3dsServer.

        Cardinal ProcessorId.

        :return: The processor_id of this CardinalCommerce3dsServer.
        :rtype: str
        """
        return self._processor_id

    @processor_id.setter
    def processor_id(self, processor_id):
        """Sets the processor_id of this CardinalCommerce3dsServer.

        Cardinal ProcessorId.

        :param processor_id: The processor_id of this CardinalCommerce3dsServer.
        :type processor_id: str
        """
        if processor_id is None:
            raise ValueError("Invalid value for `processor_id`, must not be `None`")

        self._processor_id = processor_id

    @property
    def transaction_pwd(self):
        """Gets the transaction_pwd of this CardinalCommerce3dsServer.

        Cardinal TransactionPwd.

        :return: The transaction_pwd of this CardinalCommerce3dsServer.
        :rtype: str
        """
        return self._transaction_pwd

    @transaction_pwd.setter
    def transaction_pwd(self, transaction_pwd):
        """Sets the transaction_pwd of this CardinalCommerce3dsServer.

        Cardinal TransactionPwd.

        :param transaction_pwd: The transaction_pwd of this CardinalCommerce3dsServer.
        :type transaction_pwd: str
        """
        if transaction_pwd is None:
            raise ValueError("Invalid value for `transaction_pwd`, must not be `None`")

        self._transaction_pwd = transaction_pwd
