# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.contact_object import ContactObject
from openapi_server.models.invoice_discount import InvoiceDiscount
from openapi_server.models.invoice_item import InvoiceItem
from openapi_server.models.invoice_shipping import InvoiceShipping
from openapi_server.models.invoice_tax import InvoiceTax
from openapi_server import util


class CommonInvoice(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, abandoned_time: datetime=None, amount: float=None, amount_due: float=None, autopay_retry_number: int=0, autopay_scheduled_time: datetime=None, billing_address: ContactObject=None, collection_period: int=None, created_time: datetime=None, currency: str=None, delinquent_collection_period: int=None, delivery_address: ContactObject=None, discount_amount: float=None, discounts: List[InvoiceDiscount]=None, due_time: datetime=None, id: str=None, invoice_number: int=None, issued_time: datetime=None, items: List[InvoiceItem]=None, notes: str=None, paid_time: datetime=None, payment_form_url: str=None, po_number: str=None, shipping: InvoiceShipping=None, status: str=None, subscription_id: str=None, subtotal_amount: float=None, tax: InvoiceTax=None, updated_time: datetime=None, voided_time: datetime=None, website_id: str=None):
        """CommonInvoice - a model defined in OpenAPI

        :param abandoned_time: The abandoned_time of this CommonInvoice.
        :param amount: The amount of this CommonInvoice.
        :param amount_due: The amount_due of this CommonInvoice.
        :param autopay_retry_number: The autopay_retry_number of this CommonInvoice.
        :param autopay_scheduled_time: The autopay_scheduled_time of this CommonInvoice.
        :param billing_address: The billing_address of this CommonInvoice.
        :param collection_period: The collection_period of this CommonInvoice.
        :param created_time: The created_time of this CommonInvoice.
        :param currency: The currency of this CommonInvoice.
        :param delinquent_collection_period: The delinquent_collection_period of this CommonInvoice.
        :param delivery_address: The delivery_address of this CommonInvoice.
        :param discount_amount: The discount_amount of this CommonInvoice.
        :param discounts: The discounts of this CommonInvoice.
        :param due_time: The due_time of this CommonInvoice.
        :param id: The id of this CommonInvoice.
        :param invoice_number: The invoice_number of this CommonInvoice.
        :param issued_time: The issued_time of this CommonInvoice.
        :param items: The items of this CommonInvoice.
        :param notes: The notes of this CommonInvoice.
        :param paid_time: The paid_time of this CommonInvoice.
        :param payment_form_url: The payment_form_url of this CommonInvoice.
        :param po_number: The po_number of this CommonInvoice.
        :param shipping: The shipping of this CommonInvoice.
        :param status: The status of this CommonInvoice.
        :param subscription_id: The subscription_id of this CommonInvoice.
        :param subtotal_amount: The subtotal_amount of this CommonInvoice.
        :param tax: The tax of this CommonInvoice.
        :param updated_time: The updated_time of this CommonInvoice.
        :param voided_time: The voided_time of this CommonInvoice.
        :param website_id: The website_id of this CommonInvoice.
        """
        self.openapi_types = {
            'abandoned_time': datetime,
            'amount': float,
            'amount_due': float,
            'autopay_retry_number': int,
            'autopay_scheduled_time': datetime,
            'billing_address': ContactObject,
            'collection_period': int,
            'created_time': datetime,
            'currency': str,
            'delinquent_collection_period': int,
            'delivery_address': ContactObject,
            'discount_amount': float,
            'discounts': List[InvoiceDiscount],
            'due_time': datetime,
            'id': str,
            'invoice_number': int,
            'issued_time': datetime,
            'items': List[InvoiceItem],
            'notes': str,
            'paid_time': datetime,
            'payment_form_url': str,
            'po_number': str,
            'shipping': InvoiceShipping,
            'status': str,
            'subscription_id': str,
            'subtotal_amount': float,
            'tax': InvoiceTax,
            'updated_time': datetime,
            'voided_time': datetime,
            'website_id': str
        }

        self.attribute_map = {
            'abandoned_time': 'abandonedTime',
            'amount': 'amount',
            'amount_due': 'amountDue',
            'autopay_retry_number': 'autopayRetryNumber',
            'autopay_scheduled_time': 'autopayScheduledTime',
            'billing_address': 'billingAddress',
            'collection_period': 'collectionPeriod',
            'created_time': 'createdTime',
            'currency': 'currency',
            'delinquent_collection_period': 'delinquentCollectionPeriod',
            'delivery_address': 'deliveryAddress',
            'discount_amount': 'discountAmount',
            'discounts': 'discounts',
            'due_time': 'dueTime',
            'id': 'id',
            'invoice_number': 'invoiceNumber',
            'issued_time': 'issuedTime',
            'items': 'items',
            'notes': 'notes',
            'paid_time': 'paidTime',
            'payment_form_url': 'paymentFormUrl',
            'po_number': 'poNumber',
            'shipping': 'shipping',
            'status': 'status',
            'subscription_id': 'subscriptionId',
            'subtotal_amount': 'subtotalAmount',
            'tax': 'tax',
            'updated_time': 'updatedTime',
            'voided_time': 'voidedTime',
            'website_id': 'websiteId'
        }

        self._abandoned_time = abandoned_time
        self._amount = amount
        self._amount_due = amount_due
        self._autopay_retry_number = autopay_retry_number
        self._autopay_scheduled_time = autopay_scheduled_time
        self._billing_address = billing_address
        self._collection_period = collection_period
        self._created_time = created_time
        self._currency = currency
        self._delinquent_collection_period = delinquent_collection_period
        self._delivery_address = delivery_address
        self._discount_amount = discount_amount
        self._discounts = discounts
        self._due_time = due_time
        self._id = id
        self._invoice_number = invoice_number
        self._issued_time = issued_time
        self._items = items
        self._notes = notes
        self._paid_time = paid_time
        self._payment_form_url = payment_form_url
        self._po_number = po_number
        self._shipping = shipping
        self._status = status
        self._subscription_id = subscription_id
        self._subtotal_amount = subtotal_amount
        self._tax = tax
        self._updated_time = updated_time
        self._voided_time = voided_time
        self._website_id = website_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CommonInvoice':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CommonInvoice of this CommonInvoice.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def abandoned_time(self):
        """Gets the abandoned_time of this CommonInvoice.

        Invoice abandoned time.

        :return: The abandoned_time of this CommonInvoice.
        :rtype: datetime
        """
        return self._abandoned_time

    @abandoned_time.setter
    def abandoned_time(self, abandoned_time):
        """Sets the abandoned_time of this CommonInvoice.

        Invoice abandoned time.

        :param abandoned_time: The abandoned_time of this CommonInvoice.
        :type abandoned_time: datetime
        """

        self._abandoned_time = abandoned_time

    @property
    def amount(self):
        """Gets the amount of this CommonInvoice.

        The invoice's amount.

        :return: The amount of this CommonInvoice.
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this CommonInvoice.

        The invoice's amount.

        :param amount: The amount of this CommonInvoice.
        :type amount: float
        """

        self._amount = amount

    @property
    def amount_due(self):
        """Gets the amount_due of this CommonInvoice.

        The invoice's due amount.

        :return: The amount_due of this CommonInvoice.
        :rtype: float
        """
        return self._amount_due

    @amount_due.setter
    def amount_due(self, amount_due):
        """Sets the amount_due of this CommonInvoice.

        The invoice's due amount.

        :param amount_due: The amount_due of this CommonInvoice.
        :type amount_due: float
        """

        self._amount_due = amount_due

    @property
    def autopay_retry_number(self):
        """Gets the autopay_retry_number of this CommonInvoice.

        Invoice autopay retry number.

        :return: The autopay_retry_number of this CommonInvoice.
        :rtype: int
        """
        return self._autopay_retry_number

    @autopay_retry_number.setter
    def autopay_retry_number(self, autopay_retry_number):
        """Sets the autopay_retry_number of this CommonInvoice.

        Invoice autopay retry number.

        :param autopay_retry_number: The autopay_retry_number of this CommonInvoice.
        :type autopay_retry_number: int
        """
        if autopay_retry_number is not None and autopay_retry_number < 0:
            raise ValueError("Invalid value for `autopay_retry_number`, must be a value greater than or equal to `0`")

        self._autopay_retry_number = autopay_retry_number

    @property
    def autopay_scheduled_time(self):
        """Gets the autopay_scheduled_time of this CommonInvoice.

        Invoice autopay scheduled time.

        :return: The autopay_scheduled_time of this CommonInvoice.
        :rtype: datetime
        """
        return self._autopay_scheduled_time

    @autopay_scheduled_time.setter
    def autopay_scheduled_time(self, autopay_scheduled_time):
        """Sets the autopay_scheduled_time of this CommonInvoice.

        Invoice autopay scheduled time.

        :param autopay_scheduled_time: The autopay_scheduled_time of this CommonInvoice.
        :type autopay_scheduled_time: datetime
        """

        self._autopay_scheduled_time = autopay_scheduled_time

    @property
    def billing_address(self):
        """Gets the billing_address of this CommonInvoice.

        Invoice's billing address.

        :return: The billing_address of this CommonInvoice.
        :rtype: ContactObject
        """
        return self._billing_address

    @billing_address.setter
    def billing_address(self, billing_address):
        """Sets the billing_address of this CommonInvoice.

        Invoice's billing address.

        :param billing_address: The billing_address of this CommonInvoice.
        :type billing_address: ContactObject
        """

        self._billing_address = billing_address

    @property
    def collection_period(self):
        """Gets the collection_period of this CommonInvoice.

        Collection period - difference between paidTime and issuedTime in days.

        :return: The collection_period of this CommonInvoice.
        :rtype: int
        """
        return self._collection_period

    @collection_period.setter
    def collection_period(self, collection_period):
        """Sets the collection_period of this CommonInvoice.

        Collection period - difference between paidTime and issuedTime in days.

        :param collection_period: The collection_period of this CommonInvoice.
        :type collection_period: int
        """

        self._collection_period = collection_period

    @property
    def created_time(self):
        """Gets the created_time of this CommonInvoice.

        Invoice created time.

        :return: The created_time of this CommonInvoice.
        :rtype: datetime
        """
        return self._created_time

    @created_time.setter
    def created_time(self, created_time):
        """Sets the created_time of this CommonInvoice.

        Invoice created time.

        :param created_time: The created_time of this CommonInvoice.
        :type created_time: datetime
        """

        self._created_time = created_time

    @property
    def currency(self):
        """Gets the currency of this CommonInvoice.

        ISO 4217 alphabetic currency code.

        :return: The currency of this CommonInvoice.
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this CommonInvoice.

        ISO 4217 alphabetic currency code.

        :param currency: The currency of this CommonInvoice.
        :type currency: str
        """
        if currency is None:
            raise ValueError("Invalid value for `currency`, must not be `None`")
        if currency is not None and len(currency) > 3:
            raise ValueError("Invalid value for `currency`, length must be less than or equal to `3`")
        if currency is not None and len(currency) < 3:
            raise ValueError("Invalid value for `currency`, length must be greater than or equal to `3`")

        self._currency = currency

    @property
    def delinquent_collection_period(self):
        """Gets the delinquent_collection_period of this CommonInvoice.

        Delinquent collection period - difference between paidTime and dueTime in days.

        :return: The delinquent_collection_period of this CommonInvoice.
        :rtype: int
        """
        return self._delinquent_collection_period

    @delinquent_collection_period.setter
    def delinquent_collection_period(self, delinquent_collection_period):
        """Sets the delinquent_collection_period of this CommonInvoice.

        Delinquent collection period - difference between paidTime and dueTime in days.

        :param delinquent_collection_period: The delinquent_collection_period of this CommonInvoice.
        :type delinquent_collection_period: int
        """

        self._delinquent_collection_period = delinquent_collection_period

    @property
    def delivery_address(self):
        """Gets the delivery_address of this CommonInvoice.

        Invoice's delivery address.

        :return: The delivery_address of this CommonInvoice.
        :rtype: ContactObject
        """
        return self._delivery_address

    @delivery_address.setter
    def delivery_address(self, delivery_address):
        """Sets the delivery_address of this CommonInvoice.

        Invoice's delivery address.

        :param delivery_address: The delivery_address of this CommonInvoice.
        :type delivery_address: ContactObject
        """

        self._delivery_address = delivery_address

    @property
    def discount_amount(self):
        """Gets the discount_amount of this CommonInvoice.

        The invoice's discounts amount.

        :return: The discount_amount of this CommonInvoice.
        :rtype: float
        """
        return self._discount_amount

    @discount_amount.setter
    def discount_amount(self, discount_amount):
        """Sets the discount_amount of this CommonInvoice.

        The invoice's discounts amount.

        :param discount_amount: The discount_amount of this CommonInvoice.
        :type discount_amount: float
        """

        self._discount_amount = discount_amount

    @property
    def discounts(self):
        """Gets the discounts of this CommonInvoice.

        Discounts applied.

        :return: The discounts of this CommonInvoice.
        :rtype: List[InvoiceDiscount]
        """
        return self._discounts

    @discounts.setter
    def discounts(self, discounts):
        """Sets the discounts of this CommonInvoice.

        Discounts applied.

        :param discounts: The discounts of this CommonInvoice.
        :type discounts: List[InvoiceDiscount]
        """

        self._discounts = discounts

    @property
    def due_time(self):
        """Gets the due_time of this CommonInvoice.

        Invoice due time.

        :return: The due_time of this CommonInvoice.
        :rtype: datetime
        """
        return self._due_time

    @due_time.setter
    def due_time(self, due_time):
        """Sets the due_time of this CommonInvoice.

        Invoice due time.

        :param due_time: The due_time of this CommonInvoice.
        :type due_time: datetime
        """

        self._due_time = due_time

    @property
    def id(self):
        """Gets the id of this CommonInvoice.

        The invoice ID.

        :return: The id of this CommonInvoice.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CommonInvoice.

        The invoice ID.

        :param id: The id of this CommonInvoice.
        :type id: str
        """
        if id is not None and len(id) > 50:
            raise ValueError("Invalid value for `id`, length must be less than or equal to `50`")

        self._id = id

    @property
    def invoice_number(self):
        """Gets the invoice_number of this CommonInvoice.

        An auto-incrementing number based on the sequence of invoices for any particular customer.

        :return: The invoice_number of this CommonInvoice.
        :rtype: int
        """
        return self._invoice_number

    @invoice_number.setter
    def invoice_number(self, invoice_number):
        """Sets the invoice_number of this CommonInvoice.

        An auto-incrementing number based on the sequence of invoices for any particular customer.

        :param invoice_number: The invoice_number of this CommonInvoice.
        :type invoice_number: int
        """

        self._invoice_number = invoice_number

    @property
    def issued_time(self):
        """Gets the issued_time of this CommonInvoice.

        Invoice issued time.

        :return: The issued_time of this CommonInvoice.
        :rtype: datetime
        """
        return self._issued_time

    @issued_time.setter
    def issued_time(self, issued_time):
        """Sets the issued_time of this CommonInvoice.

        Invoice issued time.

        :param issued_time: The issued_time of this CommonInvoice.
        :type issued_time: datetime
        """

        self._issued_time = issued_time

    @property
    def items(self):
        """Gets the items of this CommonInvoice.

        Invoice items array.

        :return: The items of this CommonInvoice.
        :rtype: List[InvoiceItem]
        """
        return self._items

    @items.setter
    def items(self, items):
        """Sets the items of this CommonInvoice.

        Invoice items array.

        :param items: The items of this CommonInvoice.
        :type items: List[InvoiceItem]
        """

        self._items = items

    @property
    def notes(self):
        """Gets the notes of this CommonInvoice.

        Notes for the customer which will be displayed on the invoice.

        :return: The notes of this CommonInvoice.
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this CommonInvoice.

        Notes for the customer which will be displayed on the invoice.

        :param notes: The notes of this CommonInvoice.
        :type notes: str
        """

        self._notes = notes

    @property
    def paid_time(self):
        """Gets the paid_time of this CommonInvoice.

        Invoice paid time.

        :return: The paid_time of this CommonInvoice.
        :rtype: datetime
        """
        return self._paid_time

    @paid_time.setter
    def paid_time(self, paid_time):
        """Sets the paid_time of this CommonInvoice.

        Invoice paid time.

        :param paid_time: The paid_time of this CommonInvoice.
        :type paid_time: datetime
        """

        self._paid_time = paid_time

    @property
    def payment_form_url(self):
        """Gets the payment_form_url of this CommonInvoice.

        URL where the customer can be redirected to pay for the invoice with one of the methods which are available for this customer. It's an alternative to creating a new transaction with empty `methods`. 

        :return: The payment_form_url of this CommonInvoice.
        :rtype: str
        """
        return self._payment_form_url

    @payment_form_url.setter
    def payment_form_url(self, payment_form_url):
        """Sets the payment_form_url of this CommonInvoice.

        URL where the customer can be redirected to pay for the invoice with one of the methods which are available for this customer. It's an alternative to creating a new transaction with empty `methods`. 

        :param payment_form_url: The payment_form_url of this CommonInvoice.
        :type payment_form_url: str
        """

        self._payment_form_url = payment_form_url

    @property
    def po_number(self):
        """Gets the po_number of this CommonInvoice.

        Purchase order number which will be displayed on the invoice.

        :return: The po_number of this CommonInvoice.
        :rtype: str
        """
        return self._po_number

    @po_number.setter
    def po_number(self, po_number):
        """Sets the po_number of this CommonInvoice.

        Purchase order number which will be displayed on the invoice.

        :param po_number: The po_number of this CommonInvoice.
        :type po_number: str
        """

        self._po_number = po_number

    @property
    def shipping(self):
        """Gets the shipping of this CommonInvoice.


        :return: The shipping of this CommonInvoice.
        :rtype: InvoiceShipping
        """
        return self._shipping

    @shipping.setter
    def shipping(self, shipping):
        """Sets the shipping of this CommonInvoice.


        :param shipping: The shipping of this CommonInvoice.
        :type shipping: InvoiceShipping
        """

        self._shipping = shipping

    @property
    def status(self):
        """Gets the status of this CommonInvoice.

        Invoice status.

        :return: The status of this CommonInvoice.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this CommonInvoice.

        Invoice status.

        :param status: The status of this CommonInvoice.
        :type status: str
        """
        allowed_values = ["draft", "unpaid", "paid", "past-due", "delinquent", "abandoned", "voided", "partially-refunded", "refunded", "disputed"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def subscription_id(self):
        """Gets the subscription_id of this CommonInvoice.

        The related order's ID if available, otherwise null.

        :return: The subscription_id of this CommonInvoice.
        :rtype: str
        """
        return self._subscription_id

    @subscription_id.setter
    def subscription_id(self, subscription_id):
        """Sets the subscription_id of this CommonInvoice.

        The related order's ID if available, otherwise null.

        :param subscription_id: The subscription_id of this CommonInvoice.
        :type subscription_id: str
        """
        if subscription_id is not None and len(subscription_id) > 50:
            raise ValueError("Invalid value for `subscription_id`, length must be less than or equal to `50`")

        self._subscription_id = subscription_id

    @property
    def subtotal_amount(self):
        """Gets the subtotal_amount of this CommonInvoice.

        The invoice's subtotal amount.

        :return: The subtotal_amount of this CommonInvoice.
        :rtype: float
        """
        return self._subtotal_amount

    @subtotal_amount.setter
    def subtotal_amount(self, subtotal_amount):
        """Sets the subtotal_amount of this CommonInvoice.

        The invoice's subtotal amount.

        :param subtotal_amount: The subtotal_amount of this CommonInvoice.
        :type subtotal_amount: float
        """

        self._subtotal_amount = subtotal_amount

    @property
    def tax(self):
        """Gets the tax of this CommonInvoice.


        :return: The tax of this CommonInvoice.
        :rtype: InvoiceTax
        """
        return self._tax

    @tax.setter
    def tax(self, tax):
        """Sets the tax of this CommonInvoice.


        :param tax: The tax of this CommonInvoice.
        :type tax: InvoiceTax
        """

        self._tax = tax

    @property
    def updated_time(self):
        """Gets the updated_time of this CommonInvoice.

        Invoice updated time.

        :return: The updated_time of this CommonInvoice.
        :rtype: datetime
        """
        return self._updated_time

    @updated_time.setter
    def updated_time(self, updated_time):
        """Sets the updated_time of this CommonInvoice.

        Invoice updated time.

        :param updated_time: The updated_time of this CommonInvoice.
        :type updated_time: datetime
        """

        self._updated_time = updated_time

    @property
    def voided_time(self):
        """Gets the voided_time of this CommonInvoice.

        Invoice voided time.

        :return: The voided_time of this CommonInvoice.
        :rtype: datetime
        """
        return self._voided_time

    @voided_time.setter
    def voided_time(self, voided_time):
        """Sets the voided_time of this CommonInvoice.

        Invoice voided time.

        :param voided_time: The voided_time of this CommonInvoice.
        :type voided_time: datetime
        """

        self._voided_time = voided_time

    @property
    def website_id(self):
        """Gets the website_id of this CommonInvoice.

        The website ID.

        :return: The website_id of this CommonInvoice.
        :rtype: str
        """
        return self._website_id

    @website_id.setter
    def website_id(self, website_id):
        """Sets the website_id of this CommonInvoice.

        The website ID.

        :param website_id: The website_id of this CommonInvoice.
        :type website_id: str
        """
        if website_id is None:
            raise ValueError("Invalid value for `website_id`, must not be `None`")
        if website_id is not None and len(website_id) > 50:
            raise ValueError("Invalid value for `website_id`, length must be less than or equal to `50`")

        self._website_id = website_id
