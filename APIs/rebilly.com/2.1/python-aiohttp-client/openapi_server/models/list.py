# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.timeline_table import TimelineTable
from openapi_server import util


class List(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, footer: str=None, title: str=None, type: str=None, data: List[str]=None):
        """List - a model defined in OpenAPI

        :param footer: The footer of this List.
        :param title: The title of this List.
        :param type: The type of this List.
        :param data: The data of this List.
        """
        self.openapi_types = {
            'footer': str,
            'title': str,
            'type': str,
            'data': List[str]
        }

        self.attribute_map = {
            'footer': 'footer',
            'title': 'title',
            'type': 'type',
            'data': 'data'
        }

        self._footer = footer
        self._title = title
        self._type = type
        self._data = data

    @classmethod
    def from_dict(cls, dikt: dict) -> 'List':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The list of this List.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def footer(self):
        """Gets the footer of this List.

        Data table footer.

        :return: The footer of this List.
        :rtype: str
        """
        return self._footer

    @footer.setter
    def footer(self, footer):
        """Sets the footer of this List.

        Data table footer.

        :param footer: The footer of this List.
        :type footer: str
        """

        self._footer = footer

    @property
    def title(self):
        """Gets the title of this List.

        Data table title.

        :return: The title of this List.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this List.

        Data table title.

        :param title: The title of this List.
        :type title: str
        """

        self._title = title

    @property
    def type(self):
        """Gets the type of this List.


        :return: The type of this List.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this List.


        :param type: The type of this List.
        :type type: str
        """
        allowed_values = ["list", "one-columns", "two-columns", "three-columns"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def data(self):
        """Gets the data of this List.

        Table data. Each array element represents a line.

        :return: The data of this List.
        :rtype: List[str]
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this List.

        Table data. Each array element represents a line.

        :param data: The data of this List.
        :type data: List[str]
        """

        self._data = data
