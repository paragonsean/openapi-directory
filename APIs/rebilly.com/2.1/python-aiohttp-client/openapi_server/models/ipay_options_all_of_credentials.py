# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class IpayOptionsAllOfCredentials(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, rcode: str=None, sid: str=None):
        """IpayOptionsAllOfCredentials - a model defined in OpenAPI

        :param rcode: The rcode of this IpayOptionsAllOfCredentials.
        :param sid: The sid of this IpayOptionsAllOfCredentials.
        """
        self.openapi_types = {
            'rcode': str,
            'sid': str
        }

        self.attribute_map = {
            'rcode': 'rcode',
            'sid': 'sid'
        }

        self._rcode = rcode
        self._sid = sid

    @classmethod
    def from_dict(cls, dikt: dict) -> 'IpayOptionsAllOfCredentials':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The IpayOptions_allOf_credentials of this IpayOptionsAllOfCredentials.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def rcode(self):
        """Gets the rcode of this IpayOptionsAllOfCredentials.

        Ipay Options rcode.

        :return: The rcode of this IpayOptionsAllOfCredentials.
        :rtype: str
        """
        return self._rcode

    @rcode.setter
    def rcode(self, rcode):
        """Sets the rcode of this IpayOptionsAllOfCredentials.

        Ipay Options rcode.

        :param rcode: The rcode of this IpayOptionsAllOfCredentials.
        :type rcode: str
        """
        if rcode is None:
            raise ValueError("Invalid value for `rcode`, must not be `None`")

        self._rcode = rcode

    @property
    def sid(self):
        """Gets the sid of this IpayOptionsAllOfCredentials.

        Ipay Options website ID.

        :return: The sid of this IpayOptionsAllOfCredentials.
        :rtype: str
        """
        return self._sid

    @sid.setter
    def sid(self, sid):
        """Sets the sid of this IpayOptionsAllOfCredentials.

        Ipay Options website ID.

        :param sid: The sid of this IpayOptionsAllOfCredentials.
        :type sid: str
        """
        if sid is None:
            raise ValueError("Invalid value for `sid`, must not be `None`")

        self._sid = sid
