# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DigitalWalletsGooglePay(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, is_enabled: bool=False, merchant_name: str=None, merchant_origin: str=None):
        """DigitalWalletsGooglePay - a model defined in OpenAPI

        :param is_enabled: The is_enabled of this DigitalWalletsGooglePay.
        :param merchant_name: The merchant_name of this DigitalWalletsGooglePay.
        :param merchant_origin: The merchant_origin of this DigitalWalletsGooglePay.
        """
        self.openapi_types = {
            'is_enabled': bool,
            'merchant_name': str,
            'merchant_origin': str
        }

        self.attribute_map = {
            'is_enabled': 'isEnabled',
            'merchant_name': 'merchantName',
            'merchant_origin': 'merchantOrigin'
        }

        self._is_enabled = is_enabled
        self._merchant_name = merchant_name
        self._merchant_origin = merchant_origin

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DigitalWalletsGooglePay':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DigitalWallets_googlePay of this DigitalWalletsGooglePay.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def is_enabled(self):
        """Gets the is_enabled of this DigitalWalletsGooglePay.

        Set true if Google Pay is enabled.

        :return: The is_enabled of this DigitalWalletsGooglePay.
        :rtype: bool
        """
        return self._is_enabled

    @is_enabled.setter
    def is_enabled(self, is_enabled):
        """Sets the is_enabled of this DigitalWalletsGooglePay.

        Set true if Google Pay is enabled.

        :param is_enabled: The is_enabled of this DigitalWalletsGooglePay.
        :type is_enabled: bool
        """
        if is_enabled is None:
            raise ValueError("Invalid value for `is_enabled`, must not be `None`")

        self._is_enabled = is_enabled

    @property
    def merchant_name(self):
        """Gets the merchant_name of this DigitalWalletsGooglePay.

        The merchant name in Google Pay. Leave blank if using FramePay.

        :return: The merchant_name of this DigitalWalletsGooglePay.
        :rtype: str
        """
        return self._merchant_name

    @merchant_name.setter
    def merchant_name(self, merchant_name):
        """Sets the merchant_name of this DigitalWalletsGooglePay.

        The merchant name in Google Pay. Leave blank if using FramePay.

        :param merchant_name: The merchant_name of this DigitalWalletsGooglePay.
        :type merchant_name: str
        """

        self._merchant_name = merchant_name

    @property
    def merchant_origin(self):
        """Gets the merchant_origin of this DigitalWalletsGooglePay.

        The merchant origin in Google Pay. The fully qualified domain name. Leave blank if using FramePay.

        :return: The merchant_origin of this DigitalWalletsGooglePay.
        :rtype: str
        """
        return self._merchant_origin

    @merchant_origin.setter
    def merchant_origin(self, merchant_origin):
        """Sets the merchant_origin of this DigitalWalletsGooglePay.

        The merchant origin in Google Pay. The fully qualified domain name. Leave blank if using FramePay.

        :param merchant_origin: The merchant_origin of this DigitalWalletsGooglePay.
        :type merchant_origin: str
        """

        self._merchant_origin = merchant_origin
