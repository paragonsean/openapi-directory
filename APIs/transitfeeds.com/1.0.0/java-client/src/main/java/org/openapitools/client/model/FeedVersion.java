/*
 * TransitFeeds API
 * API to view feed information and download feeds from TransitFeeds.com 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@transitfeeds.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Feed;
import org.openapitools.client.model.FeedVersionD;
import org.openapitools.client.model.FeedVersionIssue;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Contains the information about a single feed version.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:22:19.041604-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class FeedVersion {
  public static final String SERIALIZED_NAME_D = "d";
  @SerializedName(SERIALIZED_NAME_D)
  private FeedVersionD d;

  public static final String SERIALIZED_NAME_ERR = "err";
  @SerializedName(SERIALIZED_NAME_ERR)
  private List<FeedVersionIssue> err = new ArrayList<>();

  public static final String SERIALIZED_NAME_F = "f";
  @SerializedName(SERIALIZED_NAME_F)
  private Feed f;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_SIZE = "size";
  @SerializedName(SERIALIZED_NAME_SIZE)
  private Integer size;

  public static final String SERIALIZED_NAME_TS = "ts";
  @SerializedName(SERIALIZED_NAME_TS)
  private Integer ts;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public static final String SERIALIZED_NAME_WARN = "warn";
  @SerializedName(SERIALIZED_NAME_WARN)
  private List<FeedVersionIssue> warn = new ArrayList<>();

  public FeedVersion() {
  }

  public FeedVersion d(FeedVersionD d) {
    this.d = d;
    return this;
  }

  /**
   * Get d
   * @return d
   */
  @javax.annotation.Nullable
  public FeedVersionD getD() {
    return d;
  }

  public void setD(FeedVersionD d) {
    this.d = d;
  }


  public FeedVersion err(List<FeedVersionIssue> err) {
    this.err = err;
    return this;
  }

  public FeedVersion addErrItem(FeedVersionIssue errItem) {
    if (this.err == null) {
      this.err = new ArrayList<>();
    }
    this.err.add(errItem);
    return this;
  }

  /**
   * If you have included an &#x60;err&#x60; value of &#x60;1&#x60; in your request, then any errors detected when importing this feed version are included.
   * @return err
   */
  @javax.annotation.Nullable
  public List<FeedVersionIssue> getErr() {
    return err;
  }

  public void setErr(List<FeedVersionIssue> err) {
    this.err = err;
  }


  public FeedVersion f(Feed f) {
    this.f = f;
    return this;
  }

  /**
   * Get f
   * @return f
   */
  @javax.annotation.Nonnull
  public Feed getF() {
    return f;
  }

  public void setF(Feed f) {
    this.f = f;
  }


  public FeedVersion id(String id) {
    this.id = id;
    return this;
  }

  /**
   * The unique ID for this feed. This is constructed using the feed ID and an internal ID (generally the date it was imported, but not always, so do not rely on this).
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public FeedVersion size(Integer size) {
    this.size = size;
    return this;
  }

  /**
   * The filesize in bytes of the feed version when compressed.
   * @return size
   */
  @javax.annotation.Nonnull
  public Integer getSize() {
    return size;
  }

  public void setSize(Integer size) {
    this.size = size;
  }


  public FeedVersion ts(Integer ts) {
    this.ts = ts;
    return this;
  }

  /**
   * The timestamp of when this feed version was registered in the TransitFeeds.com system (in number of seconds since the epoch (January 1 1970 00:00:00 GMT).
   * @return ts
   */
  @javax.annotation.Nonnull
  public Integer getTs() {
    return ts;
  }

  public void setTs(Integer ts) {
    this.ts = ts;
  }


  public FeedVersion url(String url) {
    this.url = url;
    return this;
  }

  /**
   * This is the URL to directly download the feed version via the TranstiFeeds.com web site (and not via the API). In other words, you can provide a download URL without exposing your API key to others. 
   * @return url
   */
  @javax.annotation.Nonnull
  public String getUrl() {
    return url;
  }

  public void setUrl(String url) {
    this.url = url;
  }


  public FeedVersion warn(List<FeedVersionIssue> warn) {
    this.warn = warn;
    return this;
  }

  public FeedVersion addWarnItem(FeedVersionIssue warnItem) {
    if (this.warn == null) {
      this.warn = new ArrayList<>();
    }
    this.warn.add(warnItem);
    return this;
  }

  /**
   * If you have included a &#x60;warn&#x60; value of &#x60;1&#x60; in your request, then any warnings detected when importing this feed version are included.
   * @return warn
   */
  @javax.annotation.Nullable
  public List<FeedVersionIssue> getWarn() {
    return warn;
  }

  public void setWarn(List<FeedVersionIssue> warn) {
    this.warn = warn;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FeedVersion feedVersion = (FeedVersion) o;
    return Objects.equals(this.d, feedVersion.d) &&
        Objects.equals(this.err, feedVersion.err) &&
        Objects.equals(this.f, feedVersion.f) &&
        Objects.equals(this.id, feedVersion.id) &&
        Objects.equals(this.size, feedVersion.size) &&
        Objects.equals(this.ts, feedVersion.ts) &&
        Objects.equals(this.url, feedVersion.url) &&
        Objects.equals(this.warn, feedVersion.warn);
  }

  @Override
  public int hashCode() {
    return Objects.hash(d, err, f, id, size, ts, url, warn);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FeedVersion {\n");
    sb.append("    d: ").append(toIndentedString(d)).append("\n");
    sb.append("    err: ").append(toIndentedString(err)).append("\n");
    sb.append("    f: ").append(toIndentedString(f)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    size: ").append(toIndentedString(size)).append("\n");
    sb.append("    ts: ").append(toIndentedString(ts)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    warn: ").append(toIndentedString(warn)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("d");
    openapiFields.add("err");
    openapiFields.add("f");
    openapiFields.add("id");
    openapiFields.add("size");
    openapiFields.add("ts");
    openapiFields.add("url");
    openapiFields.add("warn");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("f");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("size");
    openapiRequiredFields.add("ts");
    openapiRequiredFields.add("url");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to FeedVersion
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!FeedVersion.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FeedVersion is not found in the empty JSON string", FeedVersion.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!FeedVersion.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `FeedVersion` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : FeedVersion.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `d`
      if (jsonObj.get("d") != null && !jsonObj.get("d").isJsonNull()) {
        FeedVersionD.validateJsonElement(jsonObj.get("d"));
      }
      if (jsonObj.get("err") != null && !jsonObj.get("err").isJsonNull()) {
        JsonArray jsonArrayerr = jsonObj.getAsJsonArray("err");
        if (jsonArrayerr != null) {
          // ensure the json data is an array
          if (!jsonObj.get("err").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `err` to be an array in the JSON string but got `%s`", jsonObj.get("err").toString()));
          }

          // validate the optional field `err` (array)
          for (int i = 0; i < jsonArrayerr.size(); i++) {
            FeedVersionIssue.validateJsonElement(jsonArrayerr.get(i));
          };
        }
      }
      // validate the required field `f`
      Feed.validateJsonElement(jsonObj.get("f"));
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
      if (jsonObj.get("warn") != null && !jsonObj.get("warn").isJsonNull()) {
        JsonArray jsonArraywarn = jsonObj.getAsJsonArray("warn");
        if (jsonArraywarn != null) {
          // ensure the json data is an array
          if (!jsonObj.get("warn").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `warn` to be an array in the JSON string but got `%s`", jsonObj.get("warn").toString()));
          }

          // validate the optional field `warn` (array)
          for (int i = 0; i < jsonArraywarn.size(); i++) {
            FeedVersionIssue.validateJsonElement(jsonArraywarn.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FeedVersion.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FeedVersion' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FeedVersion> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FeedVersion.class));

       return (TypeAdapter<T>) new TypeAdapter<FeedVersion>() {
           @Override
           public void write(JsonWriter out, FeedVersion value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FeedVersion read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of FeedVersion given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of FeedVersion
   * @throws IOException if the JSON string is invalid with respect to FeedVersion
   */
  public static FeedVersion fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FeedVersion.class);
  }

  /**
   * Convert an instance of FeedVersion to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

