/*
 * TransitFeeds API
 * API to view feed information and download feeds from TransitFeeds.com 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@transitfeeds.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Contains the information about a single error or warning associated with a feed version.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:22:19.041604-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class FeedVersionIssue {
  public static final String SERIALIZED_NAME_C = "c";
  @SerializedName(SERIALIZED_NAME_C)
  private String c;

  public static final String SERIALIZED_NAME_F = "f";
  @SerializedName(SERIALIZED_NAME_F)
  private String f;

  public static final String SERIALIZED_NAME_L = "l";
  @SerializedName(SERIALIZED_NAME_L)
  private String l;

  public static final String SERIALIZED_NAME_M = "m";
  @SerializedName(SERIALIZED_NAME_M)
  private String m;

  public FeedVersionIssue() {
  }

  public FeedVersionIssue c(String c) {
    this.c = c;
    return this;
  }

  /**
   * The column name (if referring to a GTFS file / CSV file) associated with the issue.
   * @return c
   */
  @javax.annotation.Nullable
  public String getC() {
    return c;
  }

  public void setC(String c) {
    this.c = c;
  }


  public FeedVersionIssue f(String f) {
    this.f = f;
    return this;
  }

  /**
   * The filename associated with this issue.
   * @return f
   */
  @javax.annotation.Nullable
  public String getF() {
    return f;
  }

  public void setF(String f) {
    this.f = f;
  }


  public FeedVersionIssue l(String l) {
    this.l = l;
    return this;
  }

  /**
   * The line number in the given file associated with the issue.
   * @return l
   */
  @javax.annotation.Nullable
  public String getL() {
    return l;
  }

  public void setL(String l) {
    this.l = l;
  }


  public FeedVersionIssue m(String m) {
    this.m = m;
    return this;
  }

  /**
   * A description of the issue.
   * @return m
   */
  @javax.annotation.Nullable
  public String getM() {
    return m;
  }

  public void setM(String m) {
    this.m = m;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FeedVersionIssue feedVersionIssue = (FeedVersionIssue) o;
    return Objects.equals(this.c, feedVersionIssue.c) &&
        Objects.equals(this.f, feedVersionIssue.f) &&
        Objects.equals(this.l, feedVersionIssue.l) &&
        Objects.equals(this.m, feedVersionIssue.m);
  }

  @Override
  public int hashCode() {
    return Objects.hash(c, f, l, m);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FeedVersionIssue {\n");
    sb.append("    c: ").append(toIndentedString(c)).append("\n");
    sb.append("    f: ").append(toIndentedString(f)).append("\n");
    sb.append("    l: ").append(toIndentedString(l)).append("\n");
    sb.append("    m: ").append(toIndentedString(m)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("c");
    openapiFields.add("f");
    openapiFields.add("l");
    openapiFields.add("m");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to FeedVersionIssue
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!FeedVersionIssue.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FeedVersionIssue is not found in the empty JSON string", FeedVersionIssue.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!FeedVersionIssue.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `FeedVersionIssue` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("c") != null && !jsonObj.get("c").isJsonNull()) && !jsonObj.get("c").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `c` to be a primitive type in the JSON string but got `%s`", jsonObj.get("c").toString()));
      }
      if ((jsonObj.get("f") != null && !jsonObj.get("f").isJsonNull()) && !jsonObj.get("f").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `f` to be a primitive type in the JSON string but got `%s`", jsonObj.get("f").toString()));
      }
      if ((jsonObj.get("l") != null && !jsonObj.get("l").isJsonNull()) && !jsonObj.get("l").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `l` to be a primitive type in the JSON string but got `%s`", jsonObj.get("l").toString()));
      }
      if ((jsonObj.get("m") != null && !jsonObj.get("m").isJsonNull()) && !jsonObj.get("m").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `m` to be a primitive type in the JSON string but got `%s`", jsonObj.get("m").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FeedVersionIssue.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FeedVersionIssue' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FeedVersionIssue> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FeedVersionIssue.class));

       return (TypeAdapter<T>) new TypeAdapter<FeedVersionIssue>() {
           @Override
           public void write(JsonWriter out, FeedVersionIssue value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FeedVersionIssue read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of FeedVersionIssue given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of FeedVersionIssue
   * @throws IOException if the JSON string is invalid with respect to FeedVersionIssue
   */
  public static FeedVersionIssue fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FeedVersionIssue.class);
  }

  /**
   * Convert an instance of FeedVersionIssue to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

