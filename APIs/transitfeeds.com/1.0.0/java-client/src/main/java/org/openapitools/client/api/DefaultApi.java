/*
 * TransitFeeds API
 * API to view feed information and download feeds from TransitFeeds.com 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@transitfeeds.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.API401Response;
import org.openapitools.client.model.API404Response;
import org.openapitools.client.model.GetFeedVersionsResponse;
import org.openapitools.client.model.GetFeedsResponse;
import org.openapitools.client.model.GetLatestFeedVersionResponse;
import org.openapitools.client.model.GetLocationsResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getFeedVersions
     * @param key Your personal API key, used for authentication. (required)
     * @param feed If you only want to retrieve feed versions for a particular feed, include its ID here. You can use the &#x60;/getFeeds&#x60; call to discover feed IDs. (optional)
     * @param page The page number of results to return. For example, if you specify a &#x60;page&#x60; of &#x60;2&#x60; with a &#x60;limit&#x60; of 10, then results 11-20 are returned. The number of pages available is included in the response.  (optional, default to 1)
     * @param limit The maximum number of results to return.. (optional, default to 10)
     * @param err To include any errors detected when importing this feed in the response, specify a valud of &#x60;1&#x60;. (optional, default to 1)
     * @param warn To include any warnings detected when importing this feed in the response, specify a valud of &#x60;1&#x60;. (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The response for a valid &#x60;/getFeedVersions&#x60; API call. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFeedVersionsCall(String key, String feed, Integer page, Integer limit, Integer err, Integer warn, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/getFeedVersions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (feed != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("feed", feed));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (err != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("err", err));
        }

        if (warn != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("warn", warn));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFeedVersionsValidateBeforeCall(String key, String feed, Integer page, Integer limit, Integer err, Integer warn, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling getFeedVersions(Async)");
        }

        return getFeedVersionsCall(key, feed, page, limit, err, warn, _callback);

    }

    /**
     * Retrieve a list of versions of specified (or all) feeds.
     * This API call allows you to easily see every single feed update in the TranstiFeeds.com system. Since this can be quite long, it&#39;s also possible to filter this list by a single feed ID. 
     * @param key Your personal API key, used for authentication. (required)
     * @param feed If you only want to retrieve feed versions for a particular feed, include its ID here. You can use the &#x60;/getFeeds&#x60; call to discover feed IDs. (optional)
     * @param page The page number of results to return. For example, if you specify a &#x60;page&#x60; of &#x60;2&#x60; with a &#x60;limit&#x60; of 10, then results 11-20 are returned. The number of pages available is included in the response.  (optional, default to 1)
     * @param limit The maximum number of results to return.. (optional, default to 10)
     * @param err To include any errors detected when importing this feed in the response, specify a valud of &#x60;1&#x60;. (optional, default to 1)
     * @param warn To include any warnings detected when importing this feed in the response, specify a valud of &#x60;1&#x60;. (optional, default to 1)
     * @return GetFeedVersionsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The response for a valid &#x60;/getFeedVersions&#x60; API call. </td><td>  -  </td></tr>
     </table>
     */
    public GetFeedVersionsResponse getFeedVersions(String key, String feed, Integer page, Integer limit, Integer err, Integer warn) throws ApiException {
        ApiResponse<GetFeedVersionsResponse> localVarResp = getFeedVersionsWithHttpInfo(key, feed, page, limit, err, warn);
        return localVarResp.getData();
    }

    /**
     * Retrieve a list of versions of specified (or all) feeds.
     * This API call allows you to easily see every single feed update in the TranstiFeeds.com system. Since this can be quite long, it&#39;s also possible to filter this list by a single feed ID. 
     * @param key Your personal API key, used for authentication. (required)
     * @param feed If you only want to retrieve feed versions for a particular feed, include its ID here. You can use the &#x60;/getFeeds&#x60; call to discover feed IDs. (optional)
     * @param page The page number of results to return. For example, if you specify a &#x60;page&#x60; of &#x60;2&#x60; with a &#x60;limit&#x60; of 10, then results 11-20 are returned. The number of pages available is included in the response.  (optional, default to 1)
     * @param limit The maximum number of results to return.. (optional, default to 10)
     * @param err To include any errors detected when importing this feed in the response, specify a valud of &#x60;1&#x60;. (optional, default to 1)
     * @param warn To include any warnings detected when importing this feed in the response, specify a valud of &#x60;1&#x60;. (optional, default to 1)
     * @return ApiResponse&lt;GetFeedVersionsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The response for a valid &#x60;/getFeedVersions&#x60; API call. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetFeedVersionsResponse> getFeedVersionsWithHttpInfo(String key, String feed, Integer page, Integer limit, Integer err, Integer warn) throws ApiException {
        okhttp3.Call localVarCall = getFeedVersionsValidateBeforeCall(key, feed, page, limit, err, warn, null);
        Type localVarReturnType = new TypeToken<GetFeedVersionsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve a list of versions of specified (or all) feeds. (asynchronously)
     * This API call allows you to easily see every single feed update in the TranstiFeeds.com system. Since this can be quite long, it&#39;s also possible to filter this list by a single feed ID. 
     * @param key Your personal API key, used for authentication. (required)
     * @param feed If you only want to retrieve feed versions for a particular feed, include its ID here. You can use the &#x60;/getFeeds&#x60; call to discover feed IDs. (optional)
     * @param page The page number of results to return. For example, if you specify a &#x60;page&#x60; of &#x60;2&#x60; with a &#x60;limit&#x60; of 10, then results 11-20 are returned. The number of pages available is included in the response.  (optional, default to 1)
     * @param limit The maximum number of results to return.. (optional, default to 10)
     * @param err To include any errors detected when importing this feed in the response, specify a valud of &#x60;1&#x60;. (optional, default to 1)
     * @param warn To include any warnings detected when importing this feed in the response, specify a valud of &#x60;1&#x60;. (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The response for a valid &#x60;/getFeedVersions&#x60; API call. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFeedVersionsAsync(String key, String feed, Integer page, Integer limit, Integer err, Integer warn, final ApiCallback<GetFeedVersionsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFeedVersionsValidateBeforeCall(key, feed, page, limit, err, warn, _callback);
        Type localVarReturnType = new TypeToken<GetFeedVersionsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getFeeds
     * @param key Your personal API key, used for authentication. (required)
     * @param location This is the unique ID of a location. If specified, feeds will only be returned that belong to this location (and perhaps sub-locations too, depending on the &#x60;descendants&#x60; value). You can use the &#x60;/getLocations&#x60; API endpoint to determine location IDs.  (optional)
     * @param descendants If a location is specified in &#x60;location&#x60;, this flag can be used to control if returned feeds must be assigned directly to the location, or if feeds belonging to sub-locations can also be returned. If &#x60;0&#x60;, then feeds must be assigned directly to the specified location. (optional, default to 1)
     * @param page The page number of results to return. For example, if you specify a &#x60;page&#x60; of &#x60;2&#x60; with a &#x60;limit&#x60; of 10, then results 11-20 are returned. The number of pages available is included in the response.  (optional, default to 1)
     * @param limit The maximum number of results to return.. (optional, default to 10)
     * @param type The type of feeds to return. If unspecified, feeds of all types are returned. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The response for a valid &#x60;/getFeeds&#x60; API call. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFeedsCall(String key, Integer location, Integer descendants, Integer page, Integer limit, String type, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/getFeeds";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (location != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("location", location));
        }

        if (descendants != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("descendants", descendants));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFeedsValidateBeforeCall(String key, Integer location, Integer descendants, Integer page, Integer limit, String type, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling getFeeds(Async)");
        }

        return getFeedsCall(key, location, descendants, page, limit, type, _callback);

    }

    /**
     * Retrieve a list of feeds.
     * Used this API to retrieve a list of feeds in the system. Doing so can be usedful to discover feed IDs that can be used in other API calls. 
     * @param key Your personal API key, used for authentication. (required)
     * @param location This is the unique ID of a location. If specified, feeds will only be returned that belong to this location (and perhaps sub-locations too, depending on the &#x60;descendants&#x60; value). You can use the &#x60;/getLocations&#x60; API endpoint to determine location IDs.  (optional)
     * @param descendants If a location is specified in &#x60;location&#x60;, this flag can be used to control if returned feeds must be assigned directly to the location, or if feeds belonging to sub-locations can also be returned. If &#x60;0&#x60;, then feeds must be assigned directly to the specified location. (optional, default to 1)
     * @param page The page number of results to return. For example, if you specify a &#x60;page&#x60; of &#x60;2&#x60; with a &#x60;limit&#x60; of 10, then results 11-20 are returned. The number of pages available is included in the response.  (optional, default to 1)
     * @param limit The maximum number of results to return.. (optional, default to 10)
     * @param type The type of feeds to return. If unspecified, feeds of all types are returned. (optional)
     * @return GetFeedsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The response for a valid &#x60;/getFeeds&#x60; API call. </td><td>  -  </td></tr>
     </table>
     */
    public GetFeedsResponse getFeeds(String key, Integer location, Integer descendants, Integer page, Integer limit, String type) throws ApiException {
        ApiResponse<GetFeedsResponse> localVarResp = getFeedsWithHttpInfo(key, location, descendants, page, limit, type);
        return localVarResp.getData();
    }

    /**
     * Retrieve a list of feeds.
     * Used this API to retrieve a list of feeds in the system. Doing so can be usedful to discover feed IDs that can be used in other API calls. 
     * @param key Your personal API key, used for authentication. (required)
     * @param location This is the unique ID of a location. If specified, feeds will only be returned that belong to this location (and perhaps sub-locations too, depending on the &#x60;descendants&#x60; value). You can use the &#x60;/getLocations&#x60; API endpoint to determine location IDs.  (optional)
     * @param descendants If a location is specified in &#x60;location&#x60;, this flag can be used to control if returned feeds must be assigned directly to the location, or if feeds belonging to sub-locations can also be returned. If &#x60;0&#x60;, then feeds must be assigned directly to the specified location. (optional, default to 1)
     * @param page The page number of results to return. For example, if you specify a &#x60;page&#x60; of &#x60;2&#x60; with a &#x60;limit&#x60; of 10, then results 11-20 are returned. The number of pages available is included in the response.  (optional, default to 1)
     * @param limit The maximum number of results to return.. (optional, default to 10)
     * @param type The type of feeds to return. If unspecified, feeds of all types are returned. (optional)
     * @return ApiResponse&lt;GetFeedsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The response for a valid &#x60;/getFeeds&#x60; API call. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetFeedsResponse> getFeedsWithHttpInfo(String key, Integer location, Integer descendants, Integer page, Integer limit, String type) throws ApiException {
        okhttp3.Call localVarCall = getFeedsValidateBeforeCall(key, location, descendants, page, limit, type, null);
        Type localVarReturnType = new TypeToken<GetFeedsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve a list of feeds. (asynchronously)
     * Used this API to retrieve a list of feeds in the system. Doing so can be usedful to discover feed IDs that can be used in other API calls. 
     * @param key Your personal API key, used for authentication. (required)
     * @param location This is the unique ID of a location. If specified, feeds will only be returned that belong to this location (and perhaps sub-locations too, depending on the &#x60;descendants&#x60; value). You can use the &#x60;/getLocations&#x60; API endpoint to determine location IDs.  (optional)
     * @param descendants If a location is specified in &#x60;location&#x60;, this flag can be used to control if returned feeds must be assigned directly to the location, or if feeds belonging to sub-locations can also be returned. If &#x60;0&#x60;, then feeds must be assigned directly to the specified location. (optional, default to 1)
     * @param page The page number of results to return. For example, if you specify a &#x60;page&#x60; of &#x60;2&#x60; with a &#x60;limit&#x60; of 10, then results 11-20 are returned. The number of pages available is included in the response.  (optional, default to 1)
     * @param limit The maximum number of results to return.. (optional, default to 10)
     * @param type The type of feeds to return. If unspecified, feeds of all types are returned. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The response for a valid &#x60;/getFeeds&#x60; API call. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFeedsAsync(String key, Integer location, Integer descendants, Integer page, Integer limit, String type, final ApiCallback<GetFeedsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFeedsValidateBeforeCall(key, location, descendants, page, limit, type, _callback);
        Type localVarReturnType = new TypeToken<GetFeedsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getLatestFeedVersion
     * @param key Your personal API key, used for authentication. (required)
     * @param feed The ID of the feed to retrieve the latest feed version for. You can use the &#x60;/getFeeds&#x60; call to discover feed IDs. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The response for a &#x60;/getLatestFeedVersion&#x60; API call that includes invalid request parameters. </td><td>  -  </td></tr>
        <tr><td> 302 </td><td> If a &#x60;/getLatestFeedVersion&#x60; request is valid, then a HTTP 302 Temporary Redirect is issued to the download location. For example, if the requested feed is a GTFS feed, then this will redirect to the URL of the latest zip file for this feed.  </td><td>  * Location -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getLatestFeedVersionCall(String key, String feed, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/getLatestFeedVersion";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        if (feed != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("feed", feed));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getLatestFeedVersionValidateBeforeCall(String key, String feed, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling getLatestFeedVersion(Async)");
        }

        // verify the required parameter 'feed' is set
        if (feed == null) {
            throw new ApiException("Missing the required parameter 'feed' when calling getLatestFeedVersion(Async)");
        }

        return getLatestFeedVersionCall(key, feed, _callback);

    }

    /**
     * Retrieve the download URL for the latest version of a feed.
     * Once you have used &#x60;/getFeeds&#x60; to discover a feed&#39;s URL, you can use this endpoint to download its latest version from TranstiFeeds. It will be unmodified in the original format from the provider. 
     * @param key Your personal API key, used for authentication. (required)
     * @param feed The ID of the feed to retrieve the latest feed version for. You can use the &#x60;/getFeeds&#x60; call to discover feed IDs. (required)
     * @return GetLatestFeedVersionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The response for a &#x60;/getLatestFeedVersion&#x60; API call that includes invalid request parameters. </td><td>  -  </td></tr>
        <tr><td> 302 </td><td> If a &#x60;/getLatestFeedVersion&#x60; request is valid, then a HTTP 302 Temporary Redirect is issued to the download location. For example, if the requested feed is a GTFS feed, then this will redirect to the URL of the latest zip file for this feed.  </td><td>  * Location -  <br>  </td></tr>
     </table>
     */
    public GetLatestFeedVersionResponse getLatestFeedVersion(String key, String feed) throws ApiException {
        ApiResponse<GetLatestFeedVersionResponse> localVarResp = getLatestFeedVersionWithHttpInfo(key, feed);
        return localVarResp.getData();
    }

    /**
     * Retrieve the download URL for the latest version of a feed.
     * Once you have used &#x60;/getFeeds&#x60; to discover a feed&#39;s URL, you can use this endpoint to download its latest version from TranstiFeeds. It will be unmodified in the original format from the provider. 
     * @param key Your personal API key, used for authentication. (required)
     * @param feed The ID of the feed to retrieve the latest feed version for. You can use the &#x60;/getFeeds&#x60; call to discover feed IDs. (required)
     * @return ApiResponse&lt;GetLatestFeedVersionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The response for a &#x60;/getLatestFeedVersion&#x60; API call that includes invalid request parameters. </td><td>  -  </td></tr>
        <tr><td> 302 </td><td> If a &#x60;/getLatestFeedVersion&#x60; request is valid, then a HTTP 302 Temporary Redirect is issued to the download location. For example, if the requested feed is a GTFS feed, then this will redirect to the URL of the latest zip file for this feed.  </td><td>  * Location -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<GetLatestFeedVersionResponse> getLatestFeedVersionWithHttpInfo(String key, String feed) throws ApiException {
        okhttp3.Call localVarCall = getLatestFeedVersionValidateBeforeCall(key, feed, null);
        Type localVarReturnType = new TypeToken<GetLatestFeedVersionResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve the download URL for the latest version of a feed. (asynchronously)
     * Once you have used &#x60;/getFeeds&#x60; to discover a feed&#39;s URL, you can use this endpoint to download its latest version from TranstiFeeds. It will be unmodified in the original format from the provider. 
     * @param key Your personal API key, used for authentication. (required)
     * @param feed The ID of the feed to retrieve the latest feed version for. You can use the &#x60;/getFeeds&#x60; call to discover feed IDs. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The response for a &#x60;/getLatestFeedVersion&#x60; API call that includes invalid request parameters. </td><td>  -  </td></tr>
        <tr><td> 302 </td><td> If a &#x60;/getLatestFeedVersion&#x60; request is valid, then a HTTP 302 Temporary Redirect is issued to the download location. For example, if the requested feed is a GTFS feed, then this will redirect to the URL of the latest zip file for this feed.  </td><td>  * Location -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call getLatestFeedVersionAsync(String key, String feed, final ApiCallback<GetLatestFeedVersionResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getLatestFeedVersionValidateBeforeCall(key, feed, _callback);
        Type localVarReturnType = new TypeToken<GetLatestFeedVersionResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getLocations
     * @param key Your personal API key, used for authentication. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The response for a valid &#x60;getLocations&#x60; API call. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The response for invalid key or permission denied. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The response for invalid API method. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getLocationsCall(String key, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/getLocations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (key != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key", key));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getLocationsValidateBeforeCall(String key, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling getLocations(Async)");
        }

        return getLocationsCall(key, _callback);

    }

    /**
     * Retrieve a list of locations.
     * Retrieve a list of locations. Each location (except for the root) has a parent location, and each location has zero or more child locations. This hierarchy is generally structured so countries contain states, states contain cities (although this typically depends on the country). 
     * @param key Your personal API key, used for authentication. (required)
     * @return GetLocationsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The response for a valid &#x60;getLocations&#x60; API call. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The response for invalid key or permission denied. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The response for invalid API method. </td><td>  -  </td></tr>
     </table>
     */
    public GetLocationsResponse getLocations(String key) throws ApiException {
        ApiResponse<GetLocationsResponse> localVarResp = getLocationsWithHttpInfo(key);
        return localVarResp.getData();
    }

    /**
     * Retrieve a list of locations.
     * Retrieve a list of locations. Each location (except for the root) has a parent location, and each location has zero or more child locations. This hierarchy is generally structured so countries contain states, states contain cities (although this typically depends on the country). 
     * @param key Your personal API key, used for authentication. (required)
     * @return ApiResponse&lt;GetLocationsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The response for a valid &#x60;getLocations&#x60; API call. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The response for invalid key or permission denied. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The response for invalid API method. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetLocationsResponse> getLocationsWithHttpInfo(String key) throws ApiException {
        okhttp3.Call localVarCall = getLocationsValidateBeforeCall(key, null);
        Type localVarReturnType = new TypeToken<GetLocationsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve a list of locations. (asynchronously)
     * Retrieve a list of locations. Each location (except for the root) has a parent location, and each location has zero or more child locations. This hierarchy is generally structured so countries contain states, states contain cities (although this typically depends on the country). 
     * @param key Your personal API key, used for authentication. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The response for a valid &#x60;getLocations&#x60; API call. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The response for invalid key or permission denied. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The response for invalid API method. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getLocationsAsync(String key, final ApiCallback<GetLocationsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getLocationsValidateBeforeCall(key, _callback);
        Type localVarReturnType = new TypeToken<GetLocationsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
