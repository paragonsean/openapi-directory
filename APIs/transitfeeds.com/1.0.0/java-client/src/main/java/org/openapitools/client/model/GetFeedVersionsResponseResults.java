/*
 * TransitFeeds API
 * API to view feed information and download feeds from TransitFeeds.com 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@transitfeeds.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.FeedVersion;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Contains requested data for a valid request.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:22:19.041604-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetFeedVersionsResponseResults {
  public static final String SERIALIZED_NAME_FEEDS = "feeds";
  @SerializedName(SERIALIZED_NAME_FEEDS)
  private List<FeedVersion> feeds = new ArrayList<>();

  public static final String SERIALIZED_NAME_INPUT = "input";
  @SerializedName(SERIALIZED_NAME_INPUT)
  private String input;

  public static final String SERIALIZED_NAME_LIMIT = "limit";
  @SerializedName(SERIALIZED_NAME_LIMIT)
  private Integer limit;

  public static final String SERIALIZED_NAME_NUM_PAGES = "numPages";
  @SerializedName(SERIALIZED_NAME_NUM_PAGES)
  private Integer numPages;

  public static final String SERIALIZED_NAME_PAGE = "page";
  @SerializedName(SERIALIZED_NAME_PAGE)
  private Integer page;

  public static final String SERIALIZED_NAME_TOTAL = "total";
  @SerializedName(SERIALIZED_NAME_TOTAL)
  private Integer total;

  public GetFeedVersionsResponseResults() {
  }

  public GetFeedVersionsResponseResults feeds(List<FeedVersion> feeds) {
    this.feeds = feeds;
    return this;
  }

  public GetFeedVersionsResponseResults addFeedsItem(FeedVersion feedsItem) {
    if (this.feeds == null) {
      this.feeds = new ArrayList<>();
    }
    this.feeds.add(feedsItem);
    return this;
  }

  /**
   * An array of zero or more feed versions.
   * @return feeds
   */
  @javax.annotation.Nullable
  public List<FeedVersion> getFeeds() {
    return feeds;
  }

  public void setFeeds(List<FeedVersion> feeds) {
    this.feeds = feeds;
  }


  public GetFeedVersionsResponseResults input(String input) {
    this.input = input;
    return this;
  }

  /**
   * If the status value is &#x60;MISSINGINPUT&#x60; or &#x60;INVALIDINPUT&#x60;, this field contains the name of the offending field.
   * @return input
   */
  @javax.annotation.Nullable
  public String getInput() {
    return input;
  }

  public void setInput(String input) {
    this.input = input;
  }


  public GetFeedVersionsResponseResults limit(Integer limit) {
    this.limit = limit;
    return this;
  }

  /**
   * The maximum number of feed versions that can be returned in this response. If the final page is being requested then this number may be larger than the number of feed versions returned in &#x60;versions&#x60;. 
   * @return limit
   */
  @javax.annotation.Nullable
  public Integer getLimit() {
    return limit;
  }

  public void setLimit(Integer limit) {
    this.limit = limit;
  }


  public GetFeedVersionsResponseResults numPages(Integer numPages) {
    this.numPages = numPages;
    return this;
  }

  /**
   * The number of pages available, based on the &#x60;total&#x60; and &#x60;limit&#x60;.
   * @return numPages
   */
  @javax.annotation.Nullable
  public Integer getNumPages() {
    return numPages;
  }

  public void setNumPages(Integer numPages) {
    this.numPages = numPages;
  }


  public GetFeedVersionsResponseResults page(Integer page) {
    this.page = page;
    return this;
  }

  /**
   * The page number being requested, based on the maximum number than can be returned from in &#x60;limit&#x60;.
   * @return page
   */
  @javax.annotation.Nullable
  public Integer getPage() {
    return page;
  }

  public void setPage(Integer page) {
    this.page = page;
  }


  public GetFeedVersionsResponseResults total(Integer total) {
    this.total = total;
    return this;
  }

  /**
   * The total number of feed versions found based on the request input. Note that this number may be larger than the number of feed versions returned in &#x60;versions&#x60;, based on the values for &#x60;limit&#x60; and &#x60;page&#x60;. 
   * @return total
   */
  @javax.annotation.Nullable
  public Integer getTotal() {
    return total;
  }

  public void setTotal(Integer total) {
    this.total = total;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetFeedVersionsResponseResults getFeedVersionsResponseResults = (GetFeedVersionsResponseResults) o;
    return Objects.equals(this.feeds, getFeedVersionsResponseResults.feeds) &&
        Objects.equals(this.input, getFeedVersionsResponseResults.input) &&
        Objects.equals(this.limit, getFeedVersionsResponseResults.limit) &&
        Objects.equals(this.numPages, getFeedVersionsResponseResults.numPages) &&
        Objects.equals(this.page, getFeedVersionsResponseResults.page) &&
        Objects.equals(this.total, getFeedVersionsResponseResults.total);
  }

  @Override
  public int hashCode() {
    return Objects.hash(feeds, input, limit, numPages, page, total);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetFeedVersionsResponseResults {\n");
    sb.append("    feeds: ").append(toIndentedString(feeds)).append("\n");
    sb.append("    input: ").append(toIndentedString(input)).append("\n");
    sb.append("    limit: ").append(toIndentedString(limit)).append("\n");
    sb.append("    numPages: ").append(toIndentedString(numPages)).append("\n");
    sb.append("    page: ").append(toIndentedString(page)).append("\n");
    sb.append("    total: ").append(toIndentedString(total)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("feeds");
    openapiFields.add("input");
    openapiFields.add("limit");
    openapiFields.add("numPages");
    openapiFields.add("page");
    openapiFields.add("total");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetFeedVersionsResponseResults
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetFeedVersionsResponseResults.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetFeedVersionsResponseResults is not found in the empty JSON string", GetFeedVersionsResponseResults.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetFeedVersionsResponseResults.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetFeedVersionsResponseResults` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("feeds") != null && !jsonObj.get("feeds").isJsonNull()) {
        JsonArray jsonArrayfeeds = jsonObj.getAsJsonArray("feeds");
        if (jsonArrayfeeds != null) {
          // ensure the json data is an array
          if (!jsonObj.get("feeds").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `feeds` to be an array in the JSON string but got `%s`", jsonObj.get("feeds").toString()));
          }

          // validate the optional field `feeds` (array)
          for (int i = 0; i < jsonArrayfeeds.size(); i++) {
            FeedVersion.validateJsonElement(jsonArrayfeeds.get(i));
          };
        }
      }
      if ((jsonObj.get("input") != null && !jsonObj.get("input").isJsonNull()) && !jsonObj.get("input").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `input` to be a primitive type in the JSON string but got `%s`", jsonObj.get("input").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetFeedVersionsResponseResults.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetFeedVersionsResponseResults' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetFeedVersionsResponseResults> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetFeedVersionsResponseResults.class));

       return (TypeAdapter<T>) new TypeAdapter<GetFeedVersionsResponseResults>() {
           @Override
           public void write(JsonWriter out, GetFeedVersionsResponseResults value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetFeedVersionsResponseResults read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetFeedVersionsResponseResults given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetFeedVersionsResponseResults
   * @throws IOException if the JSON string is invalid with respect to GetFeedVersionsResponseResults
   */
  public static GetFeedVersionsResponseResults fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetFeedVersionsResponseResults.class);
  }

  /**
   * Convert an instance of GetFeedVersionsResponseResults to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

