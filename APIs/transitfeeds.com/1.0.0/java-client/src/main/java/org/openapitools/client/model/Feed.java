/*
 * TransitFeeds API
 * API to view feed information and download feeds from TransitFeeds.com 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@transitfeeds.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.FeedLatest;
import org.openapitools.client.model.FeedU;
import org.openapitools.client.model.Location;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Contains the information about a single feed.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:22:19.041604-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Feed {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_L = "l";
  @SerializedName(SERIALIZED_NAME_L)
  private Location l;

  public static final String SERIALIZED_NAME_LATEST = "latest";
  @SerializedName(SERIALIZED_NAME_LATEST)
  private FeedLatest latest;

  public static final String SERIALIZED_NAME_T = "t";
  @SerializedName(SERIALIZED_NAME_T)
  private String t;

  /**
   * The type of feed (such as GTFS or GTFS-realtime).
   */
  @JsonAdapter(TyEnum.Adapter.class)
  public enum TyEnum {
    GTFS("gtfs"),
    
    GTFSREALTIME("gtfsrealtime");

    private String value;

    TyEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TyEnum fromValue(String value) {
      for (TyEnum b : TyEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TyEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TyEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TyEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TyEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TyEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TY = "ty";
  @SerializedName(SERIALIZED_NAME_TY)
  private TyEnum ty;

  public static final String SERIALIZED_NAME_U = "u";
  @SerializedName(SERIALIZED_NAME_U)
  private FeedU u;

  public Feed() {
  }

  public Feed id(String id) {
    this.id = id;
    return this;
  }

  /**
   * The unique ID for this feed. This is constructed using the ID of the feed&#39;s provider and an internal ID. This ID can be used in other calls, such as &#x60;/getFeedVersions&#x60; or &#x60;/getLatestFeedVersion&#x60;. 
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public Feed l(Location l) {
    this.l = l;
    return this;
  }

  /**
   * Get l
   * @return l
   */
  @javax.annotation.Nonnull
  public Location getL() {
    return l;
  }

  public void setL(Location l) {
    this.l = l;
  }


  public Feed latest(FeedLatest latest) {
    this.latest = latest;
    return this;
  }

  /**
   * Get latest
   * @return latest
   */
  @javax.annotation.Nullable
  public FeedLatest getLatest() {
    return latest;
  }

  public void setLatest(FeedLatest latest) {
    this.latest = latest;
  }


  public Feed t(String t) {
    this.t = t;
    return this;
  }

  /**
   * The title of the feed as it appears on TransitFeeds.com
   * @return t
   */
  @javax.annotation.Nonnull
  public String getT() {
    return t;
  }

  public void setT(String t) {
    this.t = t;
  }


  public Feed ty(TyEnum ty) {
    this.ty = ty;
    return this;
  }

  /**
   * The type of feed (such as GTFS or GTFS-realtime).
   * @return ty
   */
  @javax.annotation.Nonnull
  public TyEnum getTy() {
    return ty;
  }

  public void setTy(TyEnum ty) {
    this.ty = ty;
  }


  public Feed u(FeedU u) {
    this.u = u;
    return this;
  }

  /**
   * Get u
   * @return u
   */
  @javax.annotation.Nullable
  public FeedU getU() {
    return u;
  }

  public void setU(FeedU u) {
    this.u = u;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Feed feed = (Feed) o;
    return Objects.equals(this.id, feed.id) &&
        Objects.equals(this.l, feed.l) &&
        Objects.equals(this.latest, feed.latest) &&
        Objects.equals(this.t, feed.t) &&
        Objects.equals(this.ty, feed.ty) &&
        Objects.equals(this.u, feed.u);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, l, latest, t, ty, u);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Feed {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    l: ").append(toIndentedString(l)).append("\n");
    sb.append("    latest: ").append(toIndentedString(latest)).append("\n");
    sb.append("    t: ").append(toIndentedString(t)).append("\n");
    sb.append("    ty: ").append(toIndentedString(ty)).append("\n");
    sb.append("    u: ").append(toIndentedString(u)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("l");
    openapiFields.add("latest");
    openapiFields.add("t");
    openapiFields.add("ty");
    openapiFields.add("u");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("l");
    openapiRequiredFields.add("t");
    openapiRequiredFields.add("ty");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Feed
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Feed.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Feed is not found in the empty JSON string", Feed.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Feed.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Feed` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Feed.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // validate the required field `l`
      Location.validateJsonElement(jsonObj.get("l"));
      // validate the optional field `latest`
      if (jsonObj.get("latest") != null && !jsonObj.get("latest").isJsonNull()) {
        FeedLatest.validateJsonElement(jsonObj.get("latest"));
      }
      if (!jsonObj.get("t").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `t` to be a primitive type in the JSON string but got `%s`", jsonObj.get("t").toString()));
      }
      if (!jsonObj.get("ty").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ty` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ty").toString()));
      }
      // validate the required field `ty`
      TyEnum.validateJsonElement(jsonObj.get("ty"));
      // validate the optional field `u`
      if (jsonObj.get("u") != null && !jsonObj.get("u").isJsonNull()) {
        FeedU.validateJsonElement(jsonObj.get("u"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Feed.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Feed' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Feed> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Feed.class));

       return (TypeAdapter<T>) new TypeAdapter<Feed>() {
           @Override
           public void write(JsonWriter out, Feed value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Feed read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Feed given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Feed
   * @throws IOException if the JSON string is invalid with respect to Feed
   */
  public static Feed fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Feed.class);
  }

  /**
   * Convert an instance of Feed to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

