# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.feed_latest import FeedLatest
from openapi_server.models.feed_u import FeedU
from openapi_server.models.location import Location
from openapi_server import util


class Feed(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, l: Location=None, latest: FeedLatest=None, t: str=None, ty: str=None, u: FeedU=None):
        """Feed - a model defined in OpenAPI

        :param id: The id of this Feed.
        :param l: The l of this Feed.
        :param latest: The latest of this Feed.
        :param t: The t of this Feed.
        :param ty: The ty of this Feed.
        :param u: The u of this Feed.
        """
        self.openapi_types = {
            'id': str,
            'l': Location,
            'latest': FeedLatest,
            't': str,
            'ty': str,
            'u': FeedU
        }

        self.attribute_map = {
            'id': 'id',
            'l': 'l',
            'latest': 'latest',
            't': 't',
            'ty': 'ty',
            'u': 'u'
        }

        self._id = id
        self._l = l
        self._latest = latest
        self._t = t
        self._ty = ty
        self._u = u

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Feed':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Feed of this Feed.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this Feed.

        The unique ID for this feed. This is constructed using the ID of the feed's provider and an internal ID. This ID can be used in other calls, such as `/getFeedVersions` or `/getLatestFeedVersion`. 

        :return: The id of this Feed.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Feed.

        The unique ID for this feed. This is constructed using the ID of the feed's provider and an internal ID. This ID can be used in other calls, such as `/getFeedVersions` or `/getLatestFeedVersion`. 

        :param id: The id of this Feed.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def l(self):
        """Gets the l of this Feed.


        :return: The l of this Feed.
        :rtype: Location
        """
        return self._l

    @l.setter
    def l(self, l):
        """Sets the l of this Feed.


        :param l: The l of this Feed.
        :type l: Location
        """
        if l is None:
            raise ValueError("Invalid value for `l`, must not be `None`")

        self._l = l

    @property
    def latest(self):
        """Gets the latest of this Feed.


        :return: The latest of this Feed.
        :rtype: FeedLatest
        """
        return self._latest

    @latest.setter
    def latest(self, latest):
        """Sets the latest of this Feed.


        :param latest: The latest of this Feed.
        :type latest: FeedLatest
        """

        self._latest = latest

    @property
    def t(self):
        """Gets the t of this Feed.

        The title of the feed as it appears on TransitFeeds.com

        :return: The t of this Feed.
        :rtype: str
        """
        return self._t

    @t.setter
    def t(self, t):
        """Sets the t of this Feed.

        The title of the feed as it appears on TransitFeeds.com

        :param t: The t of this Feed.
        :type t: str
        """
        if t is None:
            raise ValueError("Invalid value for `t`, must not be `None`")

        self._t = t

    @property
    def ty(self):
        """Gets the ty of this Feed.

        The type of feed (such as GTFS or GTFS-realtime).

        :return: The ty of this Feed.
        :rtype: str
        """
        return self._ty

    @ty.setter
    def ty(self, ty):
        """Sets the ty of this Feed.

        The type of feed (such as GTFS or GTFS-realtime).

        :param ty: The ty of this Feed.
        :type ty: str
        """
        allowed_values = ["gtfs", "gtfsrealtime"]  # noqa: E501
        if ty not in allowed_values:
            raise ValueError(
                "Invalid value for `ty` ({0}), must be one of {1}"
                .format(ty, allowed_values)
            )

        self._ty = ty

    @property
    def u(self):
        """Gets the u of this Feed.


        :return: The u of this Feed.
        :rtype: FeedU
        """
        return self._u

    @u.setter
    def u(self, u):
        """Sets the u of this Feed.


        :param u: The u of this Feed.
        :type u: FeedU
        """

        self._u = u
