# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.feed import Feed
from openapi_server.models.feed_version_d import FeedVersionD
from openapi_server.models.feed_version_issue import FeedVersionIssue
from openapi_server import util


class FeedVersion(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, d: FeedVersionD=None, err: List[FeedVersionIssue]=None, f: Feed=None, id: str=None, size: int=None, ts: int=None, url: str=None, warn: List[FeedVersionIssue]=None):
        """FeedVersion - a model defined in OpenAPI

        :param d: The d of this FeedVersion.
        :param err: The err of this FeedVersion.
        :param f: The f of this FeedVersion.
        :param id: The id of this FeedVersion.
        :param size: The size of this FeedVersion.
        :param ts: The ts of this FeedVersion.
        :param url: The url of this FeedVersion.
        :param warn: The warn of this FeedVersion.
        """
        self.openapi_types = {
            'd': FeedVersionD,
            'err': List[FeedVersionIssue],
            'f': Feed,
            'id': str,
            'size': int,
            'ts': int,
            'url': str,
            'warn': List[FeedVersionIssue]
        }

        self.attribute_map = {
            'd': 'd',
            'err': 'err',
            'f': 'f',
            'id': 'id',
            'size': 'size',
            'ts': 'ts',
            'url': 'url',
            'warn': 'warn'
        }

        self._d = d
        self._err = err
        self._f = f
        self._id = id
        self._size = size
        self._ts = ts
        self._url = url
        self._warn = warn

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FeedVersion':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FeedVersion of this FeedVersion.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def d(self):
        """Gets the d of this FeedVersion.


        :return: The d of this FeedVersion.
        :rtype: FeedVersionD
        """
        return self._d

    @d.setter
    def d(self, d):
        """Sets the d of this FeedVersion.


        :param d: The d of this FeedVersion.
        :type d: FeedVersionD
        """

        self._d = d

    @property
    def err(self):
        """Gets the err of this FeedVersion.

        If you have included an `err` value of `1` in your request, then any errors detected when importing this feed version are included.

        :return: The err of this FeedVersion.
        :rtype: List[FeedVersionIssue]
        """
        return self._err

    @err.setter
    def err(self, err):
        """Sets the err of this FeedVersion.

        If you have included an `err` value of `1` in your request, then any errors detected when importing this feed version are included.

        :param err: The err of this FeedVersion.
        :type err: List[FeedVersionIssue]
        """

        self._err = err

    @property
    def f(self):
        """Gets the f of this FeedVersion.


        :return: The f of this FeedVersion.
        :rtype: Feed
        """
        return self._f

    @f.setter
    def f(self, f):
        """Sets the f of this FeedVersion.


        :param f: The f of this FeedVersion.
        :type f: Feed
        """
        if f is None:
            raise ValueError("Invalid value for `f`, must not be `None`")

        self._f = f

    @property
    def id(self):
        """Gets the id of this FeedVersion.

        The unique ID for this feed. This is constructed using the feed ID and an internal ID (generally the date it was imported, but not always, so do not rely on this).

        :return: The id of this FeedVersion.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this FeedVersion.

        The unique ID for this feed. This is constructed using the feed ID and an internal ID (generally the date it was imported, but not always, so do not rely on this).

        :param id: The id of this FeedVersion.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def size(self):
        """Gets the size of this FeedVersion.

        The filesize in bytes of the feed version when compressed.

        :return: The size of this FeedVersion.
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this FeedVersion.

        The filesize in bytes of the feed version when compressed.

        :param size: The size of this FeedVersion.
        :type size: int
        """
        if size is None:
            raise ValueError("Invalid value for `size`, must not be `None`")

        self._size = size

    @property
    def ts(self):
        """Gets the ts of this FeedVersion.

        The timestamp of when this feed version was registered in the TransitFeeds.com system (in number of seconds since the epoch (January 1 1970 00:00:00 GMT).

        :return: The ts of this FeedVersion.
        :rtype: int
        """
        return self._ts

    @ts.setter
    def ts(self, ts):
        """Sets the ts of this FeedVersion.

        The timestamp of when this feed version was registered in the TransitFeeds.com system (in number of seconds since the epoch (January 1 1970 00:00:00 GMT).

        :param ts: The ts of this FeedVersion.
        :type ts: int
        """
        if ts is None:
            raise ValueError("Invalid value for `ts`, must not be `None`")

        self._ts = ts

    @property
    def url(self):
        """Gets the url of this FeedVersion.

        This is the URL to directly download the feed version via the TranstiFeeds.com web site (and not via the API). In other words, you can provide a download URL without exposing your API key to others. 

        :return: The url of this FeedVersion.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this FeedVersion.

        This is the URL to directly download the feed version via the TranstiFeeds.com web site (and not via the API). In other words, you can provide a download URL without exposing your API key to others. 

        :param url: The url of this FeedVersion.
        :type url: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")

        self._url = url

    @property
    def warn(self):
        """Gets the warn of this FeedVersion.

        If you have included a `warn` value of `1` in your request, then any warnings detected when importing this feed version are included.

        :return: The warn of this FeedVersion.
        :rtype: List[FeedVersionIssue]
        """
        return self._warn

    @warn.setter
    def warn(self, warn):
        """Sets the warn of this FeedVersion.

        If you have included a `warn` value of `1` in your request, then any warnings detected when importing this feed version are included.

        :param warn: The warn of this FeedVersion.
        :type warn: List[FeedVersionIssue]
        """

        self._warn = warn
