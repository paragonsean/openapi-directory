# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.feed import Feed
from openapi_server import util


class GetFeedsResponseResults(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, feeds: List[Feed]=None, input: str=None, limit: int=None, num_pages: int=None, page: int=None, total: int=None):
        """GetFeedsResponseResults - a model defined in OpenAPI

        :param feeds: The feeds of this GetFeedsResponseResults.
        :param input: The input of this GetFeedsResponseResults.
        :param limit: The limit of this GetFeedsResponseResults.
        :param num_pages: The num_pages of this GetFeedsResponseResults.
        :param page: The page of this GetFeedsResponseResults.
        :param total: The total of this GetFeedsResponseResults.
        """
        self.openapi_types = {
            'feeds': List[Feed],
            'input': str,
            'limit': int,
            'num_pages': int,
            'page': int,
            'total': int
        }

        self.attribute_map = {
            'feeds': 'feeds',
            'input': 'input',
            'limit': 'limit',
            'num_pages': 'numPages',
            'page': 'page',
            'total': 'total'
        }

        self._feeds = feeds
        self._input = input
        self._limit = limit
        self._num_pages = num_pages
        self._page = page
        self._total = total

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetFeedsResponseResults':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GetFeedsResponse_results of this GetFeedsResponseResults.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def feeds(self):
        """Gets the feeds of this GetFeedsResponseResults.

        An array of zero or more feeds.

        :return: The feeds of this GetFeedsResponseResults.
        :rtype: List[Feed]
        """
        return self._feeds

    @feeds.setter
    def feeds(self, feeds):
        """Sets the feeds of this GetFeedsResponseResults.

        An array of zero or more feeds.

        :param feeds: The feeds of this GetFeedsResponseResults.
        :type feeds: List[Feed]
        """

        self._feeds = feeds

    @property
    def input(self):
        """Gets the input of this GetFeedsResponseResults.

        If the status value is `MISSINGINPUT` or `INVALIDINPUT`, this field contains the name of the offending field.

        :return: The input of this GetFeedsResponseResults.
        :rtype: str
        """
        return self._input

    @input.setter
    def input(self, input):
        """Sets the input of this GetFeedsResponseResults.

        If the status value is `MISSINGINPUT` or `INVALIDINPUT`, this field contains the name of the offending field.

        :param input: The input of this GetFeedsResponseResults.
        :type input: str
        """

        self._input = input

    @property
    def limit(self):
        """Gets the limit of this GetFeedsResponseResults.

        The maximum number of feeds that can be returned in this response. If the final page is being requested then this number may be larger than the number of feeds returned in `feeds`. 

        :return: The limit of this GetFeedsResponseResults.
        :rtype: int
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this GetFeedsResponseResults.

        The maximum number of feeds that can be returned in this response. If the final page is being requested then this number may be larger than the number of feeds returned in `feeds`. 

        :param limit: The limit of this GetFeedsResponseResults.
        :type limit: int
        """

        self._limit = limit

    @property
    def num_pages(self):
        """Gets the num_pages of this GetFeedsResponseResults.

        The number of pages available, based on the `total` and `limit`.

        :return: The num_pages of this GetFeedsResponseResults.
        :rtype: int
        """
        return self._num_pages

    @num_pages.setter
    def num_pages(self, num_pages):
        """Sets the num_pages of this GetFeedsResponseResults.

        The number of pages available, based on the `total` and `limit`.

        :param num_pages: The num_pages of this GetFeedsResponseResults.
        :type num_pages: int
        """

        self._num_pages = num_pages

    @property
    def page(self):
        """Gets the page of this GetFeedsResponseResults.

        The page number being requested, based on the maximum number than can be returned from in `limit`.

        :return: The page of this GetFeedsResponseResults.
        :rtype: int
        """
        return self._page

    @page.setter
    def page(self, page):
        """Sets the page of this GetFeedsResponseResults.

        The page number being requested, based on the maximum number than can be returned from in `limit`.

        :param page: The page of this GetFeedsResponseResults.
        :type page: int
        """

        self._page = page

    @property
    def total(self):
        """Gets the total of this GetFeedsResponseResults.

        The total number of feeds found based on the request input. Note that this number may be larger than the number of feeds returned in `feeds`, based on the values for `limit` and `page`. 

        :return: The total of this GetFeedsResponseResults.
        :rtype: int
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this GetFeedsResponseResults.

        The total number of feeds found based on the request input. Note that this number may be larger than the number of feeds returned in `feeds`, based on the values for `limit` and `page`. 

        :param total: The total of this GetFeedsResponseResults.
        :type total: int
        """

        self._total = total
