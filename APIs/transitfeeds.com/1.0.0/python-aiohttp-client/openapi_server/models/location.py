# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Location(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: int=None, lat: float=None, lng: float=None, n: str=None, pid: int=None, t: str=None):
        """Location - a model defined in OpenAPI

        :param id: The id of this Location.
        :param lat: The lat of this Location.
        :param lng: The lng of this Location.
        :param n: The n of this Location.
        :param pid: The pid of this Location.
        :param t: The t of this Location.
        """
        self.openapi_types = {
            'id': int,
            'lat': float,
            'lng': float,
            'n': str,
            'pid': int,
            't': str
        }

        self.attribute_map = {
            'id': 'id',
            'lat': 'lat',
            'lng': 'lng',
            'n': 'n',
            'pid': 'pid',
            't': 't'
        }

        self._id = id
        self._lat = lat
        self._lng = lng
        self._n = n
        self._pid = pid
        self._t = t

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Location':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Location of this Location.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this Location.

        The unique ID for this location.

        :return: The id of this Location.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Location.

        The unique ID for this location.

        :param id: The id of this Location.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def lat(self):
        """Gets the lat of this Location.

        The latitude of the approximate point of this location.

        :return: The lat of this Location.
        :rtype: float
        """
        return self._lat

    @lat.setter
    def lat(self, lat):
        """Sets the lat of this Location.

        The latitude of the approximate point of this location.

        :param lat: The lat of this Location.
        :type lat: float
        """
        if lat is None:
            raise ValueError("Invalid value for `lat`, must not be `None`")

        self._lat = lat

    @property
    def lng(self):
        """Gets the lng of this Location.

        The longitude of the approximate point of this location.

        :return: The lng of this Location.
        :rtype: float
        """
        return self._lng

    @lng.setter
    def lng(self, lng):
        """Sets the lng of this Location.

        The longitude of the approximate point of this location.

        :param lng: The lng of this Location.
        :type lng: float
        """
        if lng is None:
            raise ValueError("Invalid value for `lng`, must not be `None`")

        self._lng = lng

    @property
    def n(self):
        """Gets the n of this Location.

        The title of this location on its own (i.e. without any state or country information).

        :return: The n of this Location.
        :rtype: str
        """
        return self._n

    @n.setter
    def n(self, n):
        """Sets the n of this Location.

        The title of this location on its own (i.e. without any state or country information).

        :param n: The n of this Location.
        :type n: str
        """
        if n is None:
            raise ValueError("Invalid value for `n`, must not be `None`")

        self._n = n

    @property
    def pid(self):
        """Gets the pid of this Location.

        The ID for the parent location. If a location has no parent this value is `0`.

        :return: The pid of this Location.
        :rtype: int
        """
        return self._pid

    @pid.setter
    def pid(self, pid):
        """Sets the pid of this Location.

        The ID for the parent location. If a location has no parent this value is `0`.

        :param pid: The pid of this Location.
        :type pid: int
        """
        if pid is None:
            raise ValueError("Invalid value for `pid`, must not be `None`")

        self._pid = pid

    @property
    def t(self):
        """Gets the t of this Location.

        The title of this location. This may include state/province and country, depending  on the location of type it refers to. 

        :return: The t of this Location.
        :rtype: str
        """
        return self._t

    @t.setter
    def t(self, t):
        """Sets the t of this Location.

        The title of this location. This may include state/province and country, depending  on the location of type it refers to. 

        :param t: The t of this Location.
        :type t: str
        """
        if t is None:
            raise ValueError("Invalid value for `t`, must not be `None`")

        self._t = t
