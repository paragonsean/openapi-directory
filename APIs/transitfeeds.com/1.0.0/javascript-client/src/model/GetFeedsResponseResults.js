/**
 * TransitFeeds API
 * API to view feed information and download feeds from TransitFeeds.com 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@transitfeeds.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Feed from './Feed';

/**
 * The GetFeedsResponseResults model module.
 * @module model/GetFeedsResponseResults
 * @version 1.0.0
 */
class GetFeedsResponseResults {
    /**
     * Constructs a new <code>GetFeedsResponseResults</code>.
     * Contains requested data for a valid request.
     * @alias module:model/GetFeedsResponseResults
     */
    constructor() { 
        
        GetFeedsResponseResults.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GetFeedsResponseResults</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GetFeedsResponseResults} obj Optional instance to populate.
     * @return {module:model/GetFeedsResponseResults} The populated <code>GetFeedsResponseResults</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GetFeedsResponseResults();

            if (data.hasOwnProperty('feeds')) {
                obj['feeds'] = ApiClient.convertToType(data['feeds'], [Feed]);
            }
            if (data.hasOwnProperty('input')) {
                obj['input'] = ApiClient.convertToType(data['input'], 'String');
            }
            if (data.hasOwnProperty('limit')) {
                obj['limit'] = ApiClient.convertToType(data['limit'], 'Number');
            }
            if (data.hasOwnProperty('numPages')) {
                obj['numPages'] = ApiClient.convertToType(data['numPages'], 'Number');
            }
            if (data.hasOwnProperty('page')) {
                obj['page'] = ApiClient.convertToType(data['page'], 'Number');
            }
            if (data.hasOwnProperty('total')) {
                obj['total'] = ApiClient.convertToType(data['total'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GetFeedsResponseResults</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GetFeedsResponseResults</code>.
     */
    static validateJSON(data) {
        if (data['feeds']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['feeds'])) {
                throw new Error("Expected the field `feeds` to be an array in the JSON data but got " + data['feeds']);
            }
            // validate the optional field `feeds` (array)
            for (const item of data['feeds']) {
                Feed.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['input'] && !(typeof data['input'] === 'string' || data['input'] instanceof String)) {
            throw new Error("Expected the field `input` to be a primitive type in the JSON string but got " + data['input']);
        }

        return true;
    }


}



/**
 * An array of zero or more feeds.
 * @member {Array.<module:model/Feed>} feeds
 */
GetFeedsResponseResults.prototype['feeds'] = undefined;

/**
 * If the status value is `MISSINGINPUT` or `INVALIDINPUT`, this field contains the name of the offending field.
 * @member {String} input
 */
GetFeedsResponseResults.prototype['input'] = undefined;

/**
 * The maximum number of feeds that can be returned in this response. If the final page is being requested then this number may be larger than the number of feeds returned in `feeds`. 
 * @member {Number} limit
 */
GetFeedsResponseResults.prototype['limit'] = undefined;

/**
 * The number of pages available, based on the `total` and `limit`.
 * @member {Number} numPages
 */
GetFeedsResponseResults.prototype['numPages'] = undefined;

/**
 * The page number being requested, based on the maximum number than can be returned from in `limit`.
 * @member {Number} page
 */
GetFeedsResponseResults.prototype['page'] = undefined;

/**
 * The total number of feeds found based on the request input. Note that this number may be larger than the number of feeds returned in `feeds`, based on the values for `limit` and `page`. 
 * @member {Number} total
 */
GetFeedsResponseResults.prototype['total'] = undefined;






export default GetFeedsResponseResults;

