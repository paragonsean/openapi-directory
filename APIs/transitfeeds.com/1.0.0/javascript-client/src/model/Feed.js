/**
 * TransitFeeds API
 * API to view feed information and download feeds from TransitFeeds.com 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@transitfeeds.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import FeedLatest from './FeedLatest';
import FeedU from './FeedU';
import Location from './Location';

/**
 * The Feed model module.
 * @module model/Feed
 * @version 1.0.0
 */
class Feed {
    /**
     * Constructs a new <code>Feed</code>.
     * Contains the information about a single feed.
     * @alias module:model/Feed
     * @param id {String} The unique ID for this feed. This is constructed using the ID of the feed's provider and an internal ID. This ID can be used in other calls, such as `/getFeedVersions` or `/getLatestFeedVersion`. 
     * @param l {module:model/Location} 
     * @param t {String} The title of the feed as it appears on TransitFeeds.com
     * @param ty {module:model/Feed.TyEnum} The type of feed (such as GTFS or GTFS-realtime).
     */
    constructor(id, l, t, ty) { 
        
        Feed.initialize(this, id, l, t, ty);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id, l, t, ty) { 
        obj['id'] = id;
        obj['l'] = l;
        obj['t'] = t;
        obj['ty'] = ty;
    }

    /**
     * Constructs a <code>Feed</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Feed} obj Optional instance to populate.
     * @return {module:model/Feed} The populated <code>Feed</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Feed();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('l')) {
                obj['l'] = Location.constructFromObject(data['l']);
            }
            if (data.hasOwnProperty('latest')) {
                obj['latest'] = FeedLatest.constructFromObject(data['latest']);
            }
            if (data.hasOwnProperty('t')) {
                obj['t'] = ApiClient.convertToType(data['t'], 'String');
            }
            if (data.hasOwnProperty('ty')) {
                obj['ty'] = ApiClient.convertToType(data['ty'], 'String');
            }
            if (data.hasOwnProperty('u')) {
                obj['u'] = FeedU.constructFromObject(data['u']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Feed</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Feed</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Feed.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // validate the optional field `l`
        if (data['l']) { // data not null
          Location.validateJSON(data['l']);
        }
        // validate the optional field `latest`
        if (data['latest']) { // data not null
          FeedLatest.validateJSON(data['latest']);
        }
        // ensure the json data is a string
        if (data['t'] && !(typeof data['t'] === 'string' || data['t'] instanceof String)) {
            throw new Error("Expected the field `t` to be a primitive type in the JSON string but got " + data['t']);
        }
        // ensure the json data is a string
        if (data['ty'] && !(typeof data['ty'] === 'string' || data['ty'] instanceof String)) {
            throw new Error("Expected the field `ty` to be a primitive type in the JSON string but got " + data['ty']);
        }
        // validate the optional field `u`
        if (data['u']) { // data not null
          FeedU.validateJSON(data['u']);
        }

        return true;
    }


}

Feed.RequiredProperties = ["id", "l", "t", "ty"];

/**
 * The unique ID for this feed. This is constructed using the ID of the feed's provider and an internal ID. This ID can be used in other calls, such as `/getFeedVersions` or `/getLatestFeedVersion`. 
 * @member {String} id
 */
Feed.prototype['id'] = undefined;

/**
 * @member {module:model/Location} l
 */
Feed.prototype['l'] = undefined;

/**
 * @member {module:model/FeedLatest} latest
 */
Feed.prototype['latest'] = undefined;

/**
 * The title of the feed as it appears on TransitFeeds.com
 * @member {String} t
 */
Feed.prototype['t'] = undefined;

/**
 * The type of feed (such as GTFS or GTFS-realtime).
 * @member {module:model/Feed.TyEnum} ty
 */
Feed.prototype['ty'] = undefined;

/**
 * @member {module:model/FeedU} u
 */
Feed.prototype['u'] = undefined;





/**
 * Allowed values for the <code>ty</code> property.
 * @enum {String}
 * @readonly
 */
Feed['TyEnum'] = {

    /**
     * value: "gtfs"
     * @const
     */
    "gtfs": "gtfs",

    /**
     * value: "gtfsrealtime"
     * @const
     */
    "gtfsrealtime": "gtfsrealtime"
};



export default Feed;

