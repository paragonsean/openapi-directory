/**
 * TransitFeeds API
 * API to view feed information and download feeds from TransitFeeds.com 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@transitfeeds.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Location model module.
 * @module model/Location
 * @version 1.0.0
 */
class Location {
    /**
     * Constructs a new <code>Location</code>.
     * Contains the information about a single location.
     * @alias module:model/Location
     * @param id {Number} The unique ID for this location.
     * @param lat {Number} The latitude of the approximate point of this location.
     * @param lng {Number} The longitude of the approximate point of this location.
     * @param n {String} The title of this location on its own (i.e. without any state or country information).
     * @param pid {Number} The ID for the parent location. If a location has no parent this value is `0`.
     * @param t {String} The title of this location. This may include state/province and country, depending  on the location of type it refers to. 
     */
    constructor(id, lat, lng, n, pid, t) { 
        
        Location.initialize(this, id, lat, lng, n, pid, t);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id, lat, lng, n, pid, t) { 
        obj['id'] = id;
        obj['lat'] = lat;
        obj['lng'] = lng;
        obj['n'] = n;
        obj['pid'] = pid;
        obj['t'] = t;
    }

    /**
     * Constructs a <code>Location</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Location} obj Optional instance to populate.
     * @return {module:model/Location} The populated <code>Location</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Location();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('lat')) {
                obj['lat'] = ApiClient.convertToType(data['lat'], 'Number');
            }
            if (data.hasOwnProperty('lng')) {
                obj['lng'] = ApiClient.convertToType(data['lng'], 'Number');
            }
            if (data.hasOwnProperty('n')) {
                obj['n'] = ApiClient.convertToType(data['n'], 'String');
            }
            if (data.hasOwnProperty('pid')) {
                obj['pid'] = ApiClient.convertToType(data['pid'], 'Number');
            }
            if (data.hasOwnProperty('t')) {
                obj['t'] = ApiClient.convertToType(data['t'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Location</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Location</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Location.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['n'] && !(typeof data['n'] === 'string' || data['n'] instanceof String)) {
            throw new Error("Expected the field `n` to be a primitive type in the JSON string but got " + data['n']);
        }
        // ensure the json data is a string
        if (data['t'] && !(typeof data['t'] === 'string' || data['t'] instanceof String)) {
            throw new Error("Expected the field `t` to be a primitive type in the JSON string but got " + data['t']);
        }

        return true;
    }


}

Location.RequiredProperties = ["id", "lat", "lng", "n", "pid", "t"];

/**
 * The unique ID for this location.
 * @member {Number} id
 */
Location.prototype['id'] = undefined;

/**
 * The latitude of the approximate point of this location.
 * @member {Number} lat
 */
Location.prototype['lat'] = undefined;

/**
 * The longitude of the approximate point of this location.
 * @member {Number} lng
 */
Location.prototype['lng'] = undefined;

/**
 * The title of this location on its own (i.e. without any state or country information).
 * @member {String} n
 */
Location.prototype['n'] = undefined;

/**
 * The ID for the parent location. If a location has no parent this value is `0`.
 * @member {Number} pid
 */
Location.prototype['pid'] = undefined;

/**
 * The title of this location. This may include state/province and country, depending  on the location of type it refers to. 
 * @member {String} t
 */
Location.prototype['t'] = undefined;






export default Location;

