/**
 * TransitFeeds API
 * API to view feed information and download feeds from TransitFeeds.com 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@transitfeeds.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The FeedVersionD model module.
 * @module model/FeedVersionD
 * @version 1.0.0
 */
class FeedVersionD {
    /**
     * Constructs a new <code>FeedVersionD</code>.
     * Contains the start/finish dates for this feed version, if available. 
     * @alias module:model/FeedVersionD
     */
    constructor() { 
        
        FeedVersionD.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>FeedVersionD</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/FeedVersionD} obj Optional instance to populate.
     * @return {module:model/FeedVersionD} The populated <code>FeedVersionD</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new FeedVersionD();

            if (data.hasOwnProperty('f')) {
                obj['f'] = ApiClient.convertToType(data['f'], 'String');
            }
            if (data.hasOwnProperty('s')) {
                obj['s'] = ApiClient.convertToType(data['s'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>FeedVersionD</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>FeedVersionD</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['f'] && !(typeof data['f'] === 'string' || data['f'] instanceof String)) {
            throw new Error("Expected the field `f` to be a primitive type in the JSON string but got " + data['f']);
        }
        // ensure the json data is a string
        if (data['s'] && !(typeof data['s'] === 'string' || data['s'] instanceof String)) {
            throw new Error("Expected the field `s` to be a primitive type in the JSON string but got " + data['s']);
        }

        return true;
    }


}



/**
 * The start date of the feed version, in `YYYYMMDD` format.
 * @member {String} f
 */
FeedVersionD.prototype['f'] = undefined;

/**
 * The start date of the feed version, in `YYYYMMDD` format.
 * @member {String} s
 */
FeedVersionD.prototype['s'] = undefined;






export default FeedVersionD;

