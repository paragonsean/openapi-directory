/**
 * TransitFeeds API
 * API to view feed information and download feeds from TransitFeeds.com 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@transitfeeds.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Feed from './Feed';
import FeedVersionD from './FeedVersionD';
import FeedVersionIssue from './FeedVersionIssue';

/**
 * The FeedVersion model module.
 * @module model/FeedVersion
 * @version 1.0.0
 */
class FeedVersion {
    /**
     * Constructs a new <code>FeedVersion</code>.
     * Contains the information about a single feed version.
     * @alias module:model/FeedVersion
     * @param f {module:model/Feed} 
     * @param id {String} The unique ID for this feed. This is constructed using the feed ID and an internal ID (generally the date it was imported, but not always, so do not rely on this).
     * @param size {Number} The filesize in bytes of the feed version when compressed.
     * @param ts {Number} The timestamp of when this feed version was registered in the TransitFeeds.com system (in number of seconds since the epoch (January 1 1970 00:00:00 GMT).
     * @param url {String} This is the URL to directly download the feed version via the TranstiFeeds.com web site (and not via the API). In other words, you can provide a download URL without exposing your API key to others. 
     */
    constructor(f, id, size, ts, url) { 
        
        FeedVersion.initialize(this, f, id, size, ts, url);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, f, id, size, ts, url) { 
        obj['f'] = f;
        obj['id'] = id;
        obj['size'] = size;
        obj['ts'] = ts;
        obj['url'] = url;
    }

    /**
     * Constructs a <code>FeedVersion</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/FeedVersion} obj Optional instance to populate.
     * @return {module:model/FeedVersion} The populated <code>FeedVersion</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new FeedVersion();

            if (data.hasOwnProperty('d')) {
                obj['d'] = FeedVersionD.constructFromObject(data['d']);
            }
            if (data.hasOwnProperty('err')) {
                obj['err'] = ApiClient.convertToType(data['err'], [FeedVersionIssue]);
            }
            if (data.hasOwnProperty('f')) {
                obj['f'] = Feed.constructFromObject(data['f']);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('size')) {
                obj['size'] = ApiClient.convertToType(data['size'], 'Number');
            }
            if (data.hasOwnProperty('ts')) {
                obj['ts'] = ApiClient.convertToType(data['ts'], 'Number');
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
            if (data.hasOwnProperty('warn')) {
                obj['warn'] = ApiClient.convertToType(data['warn'], [FeedVersionIssue]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>FeedVersion</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>FeedVersion</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of FeedVersion.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `d`
        if (data['d']) { // data not null
          FeedVersionD.validateJSON(data['d']);
        }
        if (data['err']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['err'])) {
                throw new Error("Expected the field `err` to be an array in the JSON data but got " + data['err']);
            }
            // validate the optional field `err` (array)
            for (const item of data['err']) {
                FeedVersionIssue.validateJSON(item);
            };
        }
        // validate the optional field `f`
        if (data['f']) { // data not null
          Feed.validateJSON(data['f']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }
        if (data['warn']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['warn'])) {
                throw new Error("Expected the field `warn` to be an array in the JSON data but got " + data['warn']);
            }
            // validate the optional field `warn` (array)
            for (const item of data['warn']) {
                FeedVersionIssue.validateJSON(item);
            };
        }

        return true;
    }


}

FeedVersion.RequiredProperties = ["f", "id", "size", "ts", "url"];

/**
 * @member {module:model/FeedVersionD} d
 */
FeedVersion.prototype['d'] = undefined;

/**
 * If you have included an `err` value of `1` in your request, then any errors detected when importing this feed version are included.
 * @member {Array.<module:model/FeedVersionIssue>} err
 */
FeedVersion.prototype['err'] = undefined;

/**
 * @member {module:model/Feed} f
 */
FeedVersion.prototype['f'] = undefined;

/**
 * The unique ID for this feed. This is constructed using the feed ID and an internal ID (generally the date it was imported, but not always, so do not rely on this).
 * @member {String} id
 */
FeedVersion.prototype['id'] = undefined;

/**
 * The filesize in bytes of the feed version when compressed.
 * @member {Number} size
 */
FeedVersion.prototype['size'] = undefined;

/**
 * The timestamp of when this feed version was registered in the TransitFeeds.com system (in number of seconds since the epoch (January 1 1970 00:00:00 GMT).
 * @member {Number} ts
 */
FeedVersion.prototype['ts'] = undefined;

/**
 * This is the URL to directly download the feed version via the TranstiFeeds.com web site (and not via the API). In other words, you can provide a download URL without exposing your API key to others. 
 * @member {String} url
 */
FeedVersion.prototype['url'] = undefined;

/**
 * If you have included a `warn` value of `1` in your request, then any warnings detected when importing this feed version are included.
 * @member {Array.<module:model/FeedVersionIssue>} warn
 */
FeedVersion.prototype['warn'] = undefined;






export default FeedVersion;

