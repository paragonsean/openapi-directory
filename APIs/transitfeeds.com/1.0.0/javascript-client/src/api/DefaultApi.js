/**
 * TransitFeeds API
 * API to view feed information and download feeds from TransitFeeds.com 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@transitfeeds.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import API401Response from '../model/API401Response';
import API404Response from '../model/API404Response';
import GetFeedVersionsResponse from '../model/GetFeedVersionsResponse';
import GetFeedsResponse from '../model/GetFeedsResponse';
import GetLatestFeedVersionResponse from '../model/GetLatestFeedVersionResponse';
import GetLocationsResponse from '../model/GetLocationsResponse';

/**
* Default service.
* @module api/DefaultApi
* @version 1.0.0
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getFeedVersions operation.
     * @callback module:api/DefaultApi~getFeedVersionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetFeedVersionsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a list of versions of specified (or all) feeds.
     * This API call allows you to easily see every single feed update in the TranstiFeeds.com system. Since this can be quite long, it's also possible to filter this list by a single feed ID. 
     * @param {String} key Your personal API key, used for authentication.
     * @param {Object} opts Optional parameters
     * @param {String} [feed] If you only want to retrieve feed versions for a particular feed, include its ID here. You can use the `/getFeeds` call to discover feed IDs.
     * @param {Number} [page = 1)] The page number of results to return. For example, if you specify a `page` of `2` with a `limit` of 10, then results 11-20 are returned. The number of pages available is included in the response. 
     * @param {Number} [limit = 10)] The maximum number of results to return..
     * @param {module:model/Number} [err = 1)] To include any errors detected when importing this feed in the response, specify a valud of `1`.
     * @param {module:model/Number} [warn = 1)] To include any warnings detected when importing this feed in the response, specify a valud of `1`.
     * @param {module:api/DefaultApi~getFeedVersionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetFeedVersionsResponse}
     */
    getFeedVersions(key, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getFeedVersions");
      }

      let pathParams = {
      };
      let queryParams = {
        'key': key,
        'feed': opts['feed'],
        'page': opts['page'],
        'limit': opts['limit'],
        'err': opts['err'],
        'warn': opts['warn']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetFeedVersionsResponse;
      return this.apiClient.callApi(
        '/getFeedVersions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getFeeds operation.
     * @callback module:api/DefaultApi~getFeedsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetFeedsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a list of feeds.
     * Used this API to retrieve a list of feeds in the system. Doing so can be usedful to discover feed IDs that can be used in other API calls. 
     * @param {String} key Your personal API key, used for authentication.
     * @param {Object} opts Optional parameters
     * @param {Number} [location] This is the unique ID of a location. If specified, feeds will only be returned that belong to this location (and perhaps sub-locations too, depending on the `descendants` value). You can use the `/getLocations` API endpoint to determine location IDs. 
     * @param {module:model/Number} [descendants = 1)] If a location is specified in `location`, this flag can be used to control if returned feeds must be assigned directly to the location, or if feeds belonging to sub-locations can also be returned. If `0`, then feeds must be assigned directly to the specified location.
     * @param {Number} [page = 1)] The page number of results to return. For example, if you specify a `page` of `2` with a `limit` of 10, then results 11-20 are returned. The number of pages available is included in the response. 
     * @param {Number} [limit = 10)] The maximum number of results to return..
     * @param {module:model/String} [type] The type of feeds to return. If unspecified, feeds of all types are returned.
     * @param {module:api/DefaultApi~getFeedsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetFeedsResponse}
     */
    getFeeds(key, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getFeeds");
      }

      let pathParams = {
      };
      let queryParams = {
        'key': key,
        'location': opts['location'],
        'descendants': opts['descendants'],
        'page': opts['page'],
        'limit': opts['limit'],
        'type': opts['type']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetFeedsResponse;
      return this.apiClient.callApi(
        '/getFeeds', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getLatestFeedVersion operation.
     * @callback module:api/DefaultApi~getLatestFeedVersionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetLatestFeedVersionResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve the download URL for the latest version of a feed.
     * Once you have used `/getFeeds` to discover a feed's URL, you can use this endpoint to download its latest version from TranstiFeeds. It will be unmodified in the original format from the provider. 
     * @param {String} key Your personal API key, used for authentication.
     * @param {String} feed The ID of the feed to retrieve the latest feed version for. You can use the `/getFeeds` call to discover feed IDs.
     * @param {module:api/DefaultApi~getLatestFeedVersionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetLatestFeedVersionResponse}
     */
    getLatestFeedVersion(key, feed, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getLatestFeedVersion");
      }
      // verify the required parameter 'feed' is set
      if (feed === undefined || feed === null) {
        throw new Error("Missing the required parameter 'feed' when calling getLatestFeedVersion");
      }

      let pathParams = {
      };
      let queryParams = {
        'key': key,
        'feed': feed
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetLatestFeedVersionResponse;
      return this.apiClient.callApi(
        '/getLatestFeedVersion', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getLocations operation.
     * @callback module:api/DefaultApi~getLocationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetLocationsResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a list of locations.
     * Retrieve a list of locations. Each location (except for the root) has a parent location, and each location has zero or more child locations. This hierarchy is generally structured so countries contain states, states contain cities (although this typically depends on the country). 
     * @param {String} key Your personal API key, used for authentication.
     * @param {module:api/DefaultApi~getLocationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetLocationsResponse}
     */
    getLocations(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getLocations");
      }

      let pathParams = {
      };
      let queryParams = {
        'key': key
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetLocationsResponse;
      return this.apiClient.callApi(
        '/getLocations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
