/**
 * TransitFeeds API
 * API to view feed information and download feeds from TransitFeeds.com 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@transitfeeds.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from './ApiClient';
import API401Response from './model/API401Response';
import API404Response from './model/API404Response';
import Feed from './model/Feed';
import FeedLatest from './model/FeedLatest';
import FeedU from './model/FeedU';
import FeedVersion from './model/FeedVersion';
import FeedVersionD from './model/FeedVersionD';
import FeedVersionIssue from './model/FeedVersionIssue';
import GetFeedVersionsResponse from './model/GetFeedVersionsResponse';
import GetFeedVersionsResponseResults from './model/GetFeedVersionsResponseResults';
import GetFeedsResponse from './model/GetFeedsResponse';
import GetFeedsResponseResults from './model/GetFeedsResponseResults';
import GetLatestFeedVersionResponse from './model/GetLatestFeedVersionResponse';
import GetLocationsResponse from './model/GetLocationsResponse';
import GetLocationsResponseResults from './model/GetLocationsResponseResults';
import Location from './model/Location';
import DefaultApi from './api/DefaultApi';


/**
* API to view feed information and download feeds from TransitFeeds.com .<br>
* The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
* <p>
* An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
* <pre>
* var TransitFeedsApi = require('index'); // See note below*.
* var xxxSvc = new TransitFeedsApi.XxxApi(); // Allocate the API class we're going to use.
* var yyyModel = new TransitFeedsApi.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
* and put the application logic within the callback function.</em>
* </p>
* <p>
* A non-AMD browser application (discouraged) might do something like this:
* <pre>
* var xxxSvc = new TransitFeedsApi.XxxApi(); // Allocate the API class we're going to use.
* var yyy = new TransitFeedsApi.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* </p>
* @module index
* @version 1.0.0
*/
export {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient,

    /**
     * The API401Response model constructor.
     * @property {module:model/API401Response}
     */
    API401Response,

    /**
     * The API404Response model constructor.
     * @property {module:model/API404Response}
     */
    API404Response,

    /**
     * The Feed model constructor.
     * @property {module:model/Feed}
     */
    Feed,

    /**
     * The FeedLatest model constructor.
     * @property {module:model/FeedLatest}
     */
    FeedLatest,

    /**
     * The FeedU model constructor.
     * @property {module:model/FeedU}
     */
    FeedU,

    /**
     * The FeedVersion model constructor.
     * @property {module:model/FeedVersion}
     */
    FeedVersion,

    /**
     * The FeedVersionD model constructor.
     * @property {module:model/FeedVersionD}
     */
    FeedVersionD,

    /**
     * The FeedVersionIssue model constructor.
     * @property {module:model/FeedVersionIssue}
     */
    FeedVersionIssue,

    /**
     * The GetFeedVersionsResponse model constructor.
     * @property {module:model/GetFeedVersionsResponse}
     */
    GetFeedVersionsResponse,

    /**
     * The GetFeedVersionsResponseResults model constructor.
     * @property {module:model/GetFeedVersionsResponseResults}
     */
    GetFeedVersionsResponseResults,

    /**
     * The GetFeedsResponse model constructor.
     * @property {module:model/GetFeedsResponse}
     */
    GetFeedsResponse,

    /**
     * The GetFeedsResponseResults model constructor.
     * @property {module:model/GetFeedsResponseResults}
     */
    GetFeedsResponseResults,

    /**
     * The GetLatestFeedVersionResponse model constructor.
     * @property {module:model/GetLatestFeedVersionResponse}
     */
    GetLatestFeedVersionResponse,

    /**
     * The GetLocationsResponse model constructor.
     * @property {module:model/GetLocationsResponse}
     */
    GetLocationsResponse,

    /**
     * The GetLocationsResponseResults model constructor.
     * @property {module:model/GetLocationsResponseResults}
     */
    GetLocationsResponseResults,

    /**
     * The Location model constructor.
     * @property {module:model/Location}
     */
    Location,

    /**
    * The DefaultApi service constructor.
    * @property {module:api/DefaultApi}
    */
    DefaultApi
};
