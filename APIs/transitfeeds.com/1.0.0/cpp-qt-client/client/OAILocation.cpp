/**
 * TransitFeeds API
 * API to view feed information and download feeds from TransitFeeds.com 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@transitfeeds.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILocation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILocation::OAILocation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILocation::OAILocation() {
    this->initializeModel();
}

OAILocation::~OAILocation() {}

void OAILocation::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_lat_isSet = false;
    m_lat_isValid = false;

    m_lng_isSet = false;
    m_lng_isValid = false;

    m_n_isSet = false;
    m_n_isValid = false;

    m_pid_isSet = false;
    m_pid_isValid = false;

    m_t_isSet = false;
    m_t_isValid = false;
}

void OAILocation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILocation::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_lat_isValid = ::OpenAPI::fromJsonValue(m_lat, json[QString("lat")]);
    m_lat_isSet = !json[QString("lat")].isNull() && m_lat_isValid;

    m_lng_isValid = ::OpenAPI::fromJsonValue(m_lng, json[QString("lng")]);
    m_lng_isSet = !json[QString("lng")].isNull() && m_lng_isValid;

    m_n_isValid = ::OpenAPI::fromJsonValue(m_n, json[QString("n")]);
    m_n_isSet = !json[QString("n")].isNull() && m_n_isValid;

    m_pid_isValid = ::OpenAPI::fromJsonValue(m_pid, json[QString("pid")]);
    m_pid_isSet = !json[QString("pid")].isNull() && m_pid_isValid;

    m_t_isValid = ::OpenAPI::fromJsonValue(m_t, json[QString("t")]);
    m_t_isSet = !json[QString("t")].isNull() && m_t_isValid;
}

QString OAILocation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILocation::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_lat_isSet) {
        obj.insert(QString("lat"), ::OpenAPI::toJsonValue(m_lat));
    }
    if (m_lng_isSet) {
        obj.insert(QString("lng"), ::OpenAPI::toJsonValue(m_lng));
    }
    if (m_n_isSet) {
        obj.insert(QString("n"), ::OpenAPI::toJsonValue(m_n));
    }
    if (m_pid_isSet) {
        obj.insert(QString("pid"), ::OpenAPI::toJsonValue(m_pid));
    }
    if (m_t_isSet) {
        obj.insert(QString("t"), ::OpenAPI::toJsonValue(m_t));
    }
    return obj;
}

qint32 OAILocation::getId() const {
    return m_id;
}
void OAILocation::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAILocation::is_id_Set() const{
    return m_id_isSet;
}

bool OAILocation::is_id_Valid() const{
    return m_id_isValid;
}

double OAILocation::getLat() const {
    return m_lat;
}
void OAILocation::setLat(const double &lat) {
    m_lat = lat;
    m_lat_isSet = true;
}

bool OAILocation::is_lat_Set() const{
    return m_lat_isSet;
}

bool OAILocation::is_lat_Valid() const{
    return m_lat_isValid;
}

double OAILocation::getLng() const {
    return m_lng;
}
void OAILocation::setLng(const double &lng) {
    m_lng = lng;
    m_lng_isSet = true;
}

bool OAILocation::is_lng_Set() const{
    return m_lng_isSet;
}

bool OAILocation::is_lng_Valid() const{
    return m_lng_isValid;
}

QString OAILocation::getN() const {
    return m_n;
}
void OAILocation::setN(const QString &n) {
    m_n = n;
    m_n_isSet = true;
}

bool OAILocation::is_n_Set() const{
    return m_n_isSet;
}

bool OAILocation::is_n_Valid() const{
    return m_n_isValid;
}

qint32 OAILocation::getPid() const {
    return m_pid;
}
void OAILocation::setPid(const qint32 &pid) {
    m_pid = pid;
    m_pid_isSet = true;
}

bool OAILocation::is_pid_Set() const{
    return m_pid_isSet;
}

bool OAILocation::is_pid_Valid() const{
    return m_pid_isValid;
}

QString OAILocation::getT() const {
    return m_t;
}
void OAILocation::setT(const QString &t) {
    m_t = t;
    m_t_isSet = true;
}

bool OAILocation::is_t_Set() const{
    return m_t_isSet;
}

bool OAILocation::is_t_Valid() const{
    return m_t_isValid;
}

bool OAILocation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lat_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lng_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_n_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_t_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILocation::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_id_isValid && m_lat_isValid && m_lng_isValid && m_n_isValid && m_pid_isValid && m_t_isValid && true;
}

} // namespace OpenAPI
