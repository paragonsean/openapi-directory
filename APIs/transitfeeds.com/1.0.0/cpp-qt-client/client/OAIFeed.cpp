/**
 * TransitFeeds API
 * API to view feed information and download feeds from TransitFeeds.com 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@transitfeeds.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFeed.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFeed::OAIFeed(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFeed::OAIFeed() {
    this->initializeModel();
}

OAIFeed::~OAIFeed() {}

void OAIFeed::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_l_isSet = false;
    m_l_isValid = false;

    m_latest_isSet = false;
    m_latest_isValid = false;

    m_t_isSet = false;
    m_t_isValid = false;

    m_ty_isSet = false;
    m_ty_isValid = false;

    m_u_isSet = false;
    m_u_isValid = false;
}

void OAIFeed::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFeed::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_l_isValid = ::OpenAPI::fromJsonValue(m_l, json[QString("l")]);
    m_l_isSet = !json[QString("l")].isNull() && m_l_isValid;

    m_latest_isValid = ::OpenAPI::fromJsonValue(m_latest, json[QString("latest")]);
    m_latest_isSet = !json[QString("latest")].isNull() && m_latest_isValid;

    m_t_isValid = ::OpenAPI::fromJsonValue(m_t, json[QString("t")]);
    m_t_isSet = !json[QString("t")].isNull() && m_t_isValid;

    m_ty_isValid = ::OpenAPI::fromJsonValue(m_ty, json[QString("ty")]);
    m_ty_isSet = !json[QString("ty")].isNull() && m_ty_isValid;

    m_u_isValid = ::OpenAPI::fromJsonValue(m_u, json[QString("u")]);
    m_u_isSet = !json[QString("u")].isNull() && m_u_isValid;
}

QString OAIFeed::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFeed::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_l.isSet()) {
        obj.insert(QString("l"), ::OpenAPI::toJsonValue(m_l));
    }
    if (m_latest.isSet()) {
        obj.insert(QString("latest"), ::OpenAPI::toJsonValue(m_latest));
    }
    if (m_t_isSet) {
        obj.insert(QString("t"), ::OpenAPI::toJsonValue(m_t));
    }
    if (m_ty_isSet) {
        obj.insert(QString("ty"), ::OpenAPI::toJsonValue(m_ty));
    }
    if (m_u.isSet()) {
        obj.insert(QString("u"), ::OpenAPI::toJsonValue(m_u));
    }
    return obj;
}

QString OAIFeed::getId() const {
    return m_id;
}
void OAIFeed::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIFeed::is_id_Set() const{
    return m_id_isSet;
}

bool OAIFeed::is_id_Valid() const{
    return m_id_isValid;
}

OAILocation OAIFeed::getL() const {
    return m_l;
}
void OAIFeed::setL(const OAILocation &l) {
    m_l = l;
    m_l_isSet = true;
}

bool OAIFeed::is_l_Set() const{
    return m_l_isSet;
}

bool OAIFeed::is_l_Valid() const{
    return m_l_isValid;
}

OAIFeed_latest OAIFeed::getLatest() const {
    return m_latest;
}
void OAIFeed::setLatest(const OAIFeed_latest &latest) {
    m_latest = latest;
    m_latest_isSet = true;
}

bool OAIFeed::is_latest_Set() const{
    return m_latest_isSet;
}

bool OAIFeed::is_latest_Valid() const{
    return m_latest_isValid;
}

QString OAIFeed::getT() const {
    return m_t;
}
void OAIFeed::setT(const QString &t) {
    m_t = t;
    m_t_isSet = true;
}

bool OAIFeed::is_t_Set() const{
    return m_t_isSet;
}

bool OAIFeed::is_t_Valid() const{
    return m_t_isValid;
}

QString OAIFeed::getTy() const {
    return m_ty;
}
void OAIFeed::setTy(const QString &ty) {
    m_ty = ty;
    m_ty_isSet = true;
}

bool OAIFeed::is_ty_Set() const{
    return m_ty_isSet;
}

bool OAIFeed::is_ty_Valid() const{
    return m_ty_isValid;
}

OAIFeed_u OAIFeed::getU() const {
    return m_u;
}
void OAIFeed::setU(const OAIFeed_u &u) {
    m_u = u;
    m_u_isSet = true;
}

bool OAIFeed::is_u_Set() const{
    return m_u_isSet;
}

bool OAIFeed::is_u_Valid() const{
    return m_u_isValid;
}

bool OAIFeed::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_l.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_latest.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_t_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ty_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_u.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFeed::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_id_isValid && m_l_isValid && m_t_isValid && m_ty_isValid && true;
}

} // namespace OpenAPI
