/**
 * TransitFeeds API
 * API to view feed information and download feeds from TransitFeeds.com 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@transitfeeds.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDefaultApi_H
#define OAI_OAIDefaultApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAPI401Response.h"
#include "OAIAPI404Response.h"
#include "OAIGetFeedVersionsResponse.h"
#include "OAIGetFeedsResponse.h"
#include "OAIGetLatestFeedVersionResponse.h"
#include "OAIGetLocationsResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDefaultApi : public QObject {
    Q_OBJECT

public:
    OAIDefaultApi(const int timeOut = 0);
    ~OAIDefaultApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  key QString [required]
    * @param[in]  feed QString [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  err qint32 [optional]
    * @param[in]  warn qint32 [optional]
    */
    virtual void getFeedVersions(const QString &key, const ::OpenAPI::OptionalParam<QString> &feed = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &err = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &warn = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  key QString [required]
    * @param[in]  location qint32 [optional]
    * @param[in]  descendants qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  type QString [optional]
    */
    virtual void getFeeds(const QString &key, const ::OpenAPI::OptionalParam<qint32> &location = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &descendants = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  key QString [required]
    * @param[in]  feed QString [required]
    */
    virtual void getLatestFeedVersion(const QString &key, const QString &feed);

    /**
    * @param[in]  key QString [required]
    */
    virtual void getLocations(const QString &key);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void getFeedVersionsCallback(OAIHttpRequestWorker *worker);
    void getFeedsCallback(OAIHttpRequestWorker *worker);
    void getLatestFeedVersionCallback(OAIHttpRequestWorker *worker);
    void getLocationsCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void getFeedVersionsSignal(OAIGetFeedVersionsResponse summary);
    void getFeedsSignal(OAIGetFeedsResponse summary);
    void getLatestFeedVersionSignal(OAIGetLatestFeedVersionResponse summary);
    void getLocationsSignal(OAIGetLocationsResponse summary);


    void getFeedVersionsSignalFull(OAIHttpRequestWorker *worker, OAIGetFeedVersionsResponse summary);
    void getFeedsSignalFull(OAIHttpRequestWorker *worker, OAIGetFeedsResponse summary);
    void getLatestFeedVersionSignalFull(OAIHttpRequestWorker *worker, OAIGetLatestFeedVersionResponse summary);
    void getLocationsSignalFull(OAIHttpRequestWorker *worker, OAIGetLocationsResponse summary);

    Q_DECL_DEPRECATED_X("Use getFeedVersionsSignalError() instead")
    void getFeedVersionsSignalE(OAIGetFeedVersionsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getFeedVersionsSignalError(OAIGetFeedVersionsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getFeedsSignalError() instead")
    void getFeedsSignalE(OAIGetFeedsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getFeedsSignalError(OAIGetFeedsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getLatestFeedVersionSignalError() instead")
    void getLatestFeedVersionSignalE(OAIGetLatestFeedVersionResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getLatestFeedVersionSignalError(OAIGetLatestFeedVersionResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getLocationsSignalError() instead")
    void getLocationsSignalE(OAIGetLocationsResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getLocationsSignalError(OAIGetLocationsResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use getFeedVersionsSignalErrorFull() instead")
    void getFeedVersionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getFeedVersionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getFeedsSignalErrorFull() instead")
    void getFeedsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getFeedsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getLatestFeedVersionSignalErrorFull() instead")
    void getLatestFeedVersionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getLatestFeedVersionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getLocationsSignalErrorFull() instead")
    void getLocationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getLocationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
