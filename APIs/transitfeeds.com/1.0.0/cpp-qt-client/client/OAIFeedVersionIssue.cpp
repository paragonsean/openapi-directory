/**
 * TransitFeeds API
 * API to view feed information and download feeds from TransitFeeds.com 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@transitfeeds.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFeedVersionIssue.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFeedVersionIssue::OAIFeedVersionIssue(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFeedVersionIssue::OAIFeedVersionIssue() {
    this->initializeModel();
}

OAIFeedVersionIssue::~OAIFeedVersionIssue() {}

void OAIFeedVersionIssue::initializeModel() {

    m_c_isSet = false;
    m_c_isValid = false;

    m_f_isSet = false;
    m_f_isValid = false;

    m_l_isSet = false;
    m_l_isValid = false;

    m_m_isSet = false;
    m_m_isValid = false;
}

void OAIFeedVersionIssue::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFeedVersionIssue::fromJsonObject(QJsonObject json) {

    m_c_isValid = ::OpenAPI::fromJsonValue(m_c, json[QString("c")]);
    m_c_isSet = !json[QString("c")].isNull() && m_c_isValid;

    m_f_isValid = ::OpenAPI::fromJsonValue(m_f, json[QString("f")]);
    m_f_isSet = !json[QString("f")].isNull() && m_f_isValid;

    m_l_isValid = ::OpenAPI::fromJsonValue(m_l, json[QString("l")]);
    m_l_isSet = !json[QString("l")].isNull() && m_l_isValid;

    m_m_isValid = ::OpenAPI::fromJsonValue(m_m, json[QString("m")]);
    m_m_isSet = !json[QString("m")].isNull() && m_m_isValid;
}

QString OAIFeedVersionIssue::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFeedVersionIssue::asJsonObject() const {
    QJsonObject obj;
    if (m_c_isSet) {
        obj.insert(QString("c"), ::OpenAPI::toJsonValue(m_c));
    }
    if (m_f_isSet) {
        obj.insert(QString("f"), ::OpenAPI::toJsonValue(m_f));
    }
    if (m_l_isSet) {
        obj.insert(QString("l"), ::OpenAPI::toJsonValue(m_l));
    }
    if (m_m_isSet) {
        obj.insert(QString("m"), ::OpenAPI::toJsonValue(m_m));
    }
    return obj;
}

QString OAIFeedVersionIssue::getC() const {
    return m_c;
}
void OAIFeedVersionIssue::setC(const QString &c) {
    m_c = c;
    m_c_isSet = true;
}

bool OAIFeedVersionIssue::is_c_Set() const{
    return m_c_isSet;
}

bool OAIFeedVersionIssue::is_c_Valid() const{
    return m_c_isValid;
}

QString OAIFeedVersionIssue::getF() const {
    return m_f;
}
void OAIFeedVersionIssue::setF(const QString &f) {
    m_f = f;
    m_f_isSet = true;
}

bool OAIFeedVersionIssue::is_f_Set() const{
    return m_f_isSet;
}

bool OAIFeedVersionIssue::is_f_Valid() const{
    return m_f_isValid;
}

QString OAIFeedVersionIssue::getL() const {
    return m_l;
}
void OAIFeedVersionIssue::setL(const QString &l) {
    m_l = l;
    m_l_isSet = true;
}

bool OAIFeedVersionIssue::is_l_Set() const{
    return m_l_isSet;
}

bool OAIFeedVersionIssue::is_l_Valid() const{
    return m_l_isValid;
}

QString OAIFeedVersionIssue::getM() const {
    return m_m;
}
void OAIFeedVersionIssue::setM(const QString &m) {
    m_m = m;
    m_m_isSet = true;
}

bool OAIFeedVersionIssue::is_m_Set() const{
    return m_m_isSet;
}

bool OAIFeedVersionIssue::is_m_Valid() const{
    return m_m_isValid;
}

bool OAIFeedVersionIssue::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_c_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_f_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_l_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_m_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFeedVersionIssue::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
