/**
 * TransitFeeds API
 * API to view feed information and download feeds from TransitFeeds.com 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@transitfeeds.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFeedVersion.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFeedVersion::OAIFeedVersion(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFeedVersion::OAIFeedVersion() {
    this->initializeModel();
}

OAIFeedVersion::~OAIFeedVersion() {}

void OAIFeedVersion::initializeModel() {

    m_d_isSet = false;
    m_d_isValid = false;

    m_err_isSet = false;
    m_err_isValid = false;

    m_f_isSet = false;
    m_f_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_size_isSet = false;
    m_size_isValid = false;

    m_ts_isSet = false;
    m_ts_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;

    m_warn_isSet = false;
    m_warn_isValid = false;
}

void OAIFeedVersion::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFeedVersion::fromJsonObject(QJsonObject json) {

    m_d_isValid = ::OpenAPI::fromJsonValue(m_d, json[QString("d")]);
    m_d_isSet = !json[QString("d")].isNull() && m_d_isValid;

    m_err_isValid = ::OpenAPI::fromJsonValue(m_err, json[QString("err")]);
    m_err_isSet = !json[QString("err")].isNull() && m_err_isValid;

    m_f_isValid = ::OpenAPI::fromJsonValue(m_f, json[QString("f")]);
    m_f_isSet = !json[QString("f")].isNull() && m_f_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_size_isValid = ::OpenAPI::fromJsonValue(m_size, json[QString("size")]);
    m_size_isSet = !json[QString("size")].isNull() && m_size_isValid;

    m_ts_isValid = ::OpenAPI::fromJsonValue(m_ts, json[QString("ts")]);
    m_ts_isSet = !json[QString("ts")].isNull() && m_ts_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;

    m_warn_isValid = ::OpenAPI::fromJsonValue(m_warn, json[QString("warn")]);
    m_warn_isSet = !json[QString("warn")].isNull() && m_warn_isValid;
}

QString OAIFeedVersion::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFeedVersion::asJsonObject() const {
    QJsonObject obj;
    if (m_d.isSet()) {
        obj.insert(QString("d"), ::OpenAPI::toJsonValue(m_d));
    }
    if (m_err.size() > 0) {
        obj.insert(QString("err"), ::OpenAPI::toJsonValue(m_err));
    }
    if (m_f.isSet()) {
        obj.insert(QString("f"), ::OpenAPI::toJsonValue(m_f));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_size_isSet) {
        obj.insert(QString("size"), ::OpenAPI::toJsonValue(m_size));
    }
    if (m_ts_isSet) {
        obj.insert(QString("ts"), ::OpenAPI::toJsonValue(m_ts));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    if (m_warn.size() > 0) {
        obj.insert(QString("warn"), ::OpenAPI::toJsonValue(m_warn));
    }
    return obj;
}

OAIFeedVersion_d OAIFeedVersion::getD() const {
    return m_d;
}
void OAIFeedVersion::setD(const OAIFeedVersion_d &d) {
    m_d = d;
    m_d_isSet = true;
}

bool OAIFeedVersion::is_d_Set() const{
    return m_d_isSet;
}

bool OAIFeedVersion::is_d_Valid() const{
    return m_d_isValid;
}

QList<OAIFeedVersionIssue> OAIFeedVersion::getErr() const {
    return m_err;
}
void OAIFeedVersion::setErr(const QList<OAIFeedVersionIssue> &err) {
    m_err = err;
    m_err_isSet = true;
}

bool OAIFeedVersion::is_err_Set() const{
    return m_err_isSet;
}

bool OAIFeedVersion::is_err_Valid() const{
    return m_err_isValid;
}

OAIFeed OAIFeedVersion::getF() const {
    return m_f;
}
void OAIFeedVersion::setF(const OAIFeed &f) {
    m_f = f;
    m_f_isSet = true;
}

bool OAIFeedVersion::is_f_Set() const{
    return m_f_isSet;
}

bool OAIFeedVersion::is_f_Valid() const{
    return m_f_isValid;
}

QString OAIFeedVersion::getId() const {
    return m_id;
}
void OAIFeedVersion::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIFeedVersion::is_id_Set() const{
    return m_id_isSet;
}

bool OAIFeedVersion::is_id_Valid() const{
    return m_id_isValid;
}

qint32 OAIFeedVersion::getSize() const {
    return m_size;
}
void OAIFeedVersion::setSize(const qint32 &size) {
    m_size = size;
    m_size_isSet = true;
}

bool OAIFeedVersion::is_size_Set() const{
    return m_size_isSet;
}

bool OAIFeedVersion::is_size_Valid() const{
    return m_size_isValid;
}

qint32 OAIFeedVersion::getTs() const {
    return m_ts;
}
void OAIFeedVersion::setTs(const qint32 &ts) {
    m_ts = ts;
    m_ts_isSet = true;
}

bool OAIFeedVersion::is_ts_Set() const{
    return m_ts_isSet;
}

bool OAIFeedVersion::is_ts_Valid() const{
    return m_ts_isValid;
}

QString OAIFeedVersion::getUrl() const {
    return m_url;
}
void OAIFeedVersion::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIFeedVersion::is_url_Set() const{
    return m_url_isSet;
}

bool OAIFeedVersion::is_url_Valid() const{
    return m_url_isValid;
}

QList<OAIFeedVersionIssue> OAIFeedVersion::getWarn() const {
    return m_warn;
}
void OAIFeedVersion::setWarn(const QList<OAIFeedVersionIssue> &warn) {
    m_warn = warn;
    m_warn_isSet = true;
}

bool OAIFeedVersion::is_warn_Set() const{
    return m_warn_isSet;
}

bool OAIFeedVersion::is_warn_Valid() const{
    return m_warn_isValid;
}

bool OAIFeedVersion::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_d.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_err.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_f.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ts_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_warn.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFeedVersion::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_f_isValid && m_id_isValid && m_size_isValid && m_ts_isValid && m_url_isValid && true;
}

} // namespace OpenAPI
