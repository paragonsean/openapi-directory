/**
 * TransitFeeds API
 * API to view feed information and download feeds from TransitFeeds.com 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: support@transitfeeds.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetFeedsResponse_results.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetFeedsResponse_results::OAIGetFeedsResponse_results(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetFeedsResponse_results::OAIGetFeedsResponse_results() {
    this->initializeModel();
}

OAIGetFeedsResponse_results::~OAIGetFeedsResponse_results() {}

void OAIGetFeedsResponse_results::initializeModel() {

    m_feeds_isSet = false;
    m_feeds_isValid = false;

    m_input_isSet = false;
    m_input_isValid = false;

    m_limit_isSet = false;
    m_limit_isValid = false;

    m_num_pages_isSet = false;
    m_num_pages_isValid = false;

    m_page_isSet = false;
    m_page_isValid = false;

    m_total_isSet = false;
    m_total_isValid = false;
}

void OAIGetFeedsResponse_results::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetFeedsResponse_results::fromJsonObject(QJsonObject json) {

    m_feeds_isValid = ::OpenAPI::fromJsonValue(m_feeds, json[QString("feeds")]);
    m_feeds_isSet = !json[QString("feeds")].isNull() && m_feeds_isValid;

    m_input_isValid = ::OpenAPI::fromJsonValue(m_input, json[QString("input")]);
    m_input_isSet = !json[QString("input")].isNull() && m_input_isValid;

    m_limit_isValid = ::OpenAPI::fromJsonValue(m_limit, json[QString("limit")]);
    m_limit_isSet = !json[QString("limit")].isNull() && m_limit_isValid;

    m_num_pages_isValid = ::OpenAPI::fromJsonValue(m_num_pages, json[QString("numPages")]);
    m_num_pages_isSet = !json[QString("numPages")].isNull() && m_num_pages_isValid;

    m_page_isValid = ::OpenAPI::fromJsonValue(m_page, json[QString("page")]);
    m_page_isSet = !json[QString("page")].isNull() && m_page_isValid;

    m_total_isValid = ::OpenAPI::fromJsonValue(m_total, json[QString("total")]);
    m_total_isSet = !json[QString("total")].isNull() && m_total_isValid;
}

QString OAIGetFeedsResponse_results::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetFeedsResponse_results::asJsonObject() const {
    QJsonObject obj;
    if (m_feeds.size() > 0) {
        obj.insert(QString("feeds"), ::OpenAPI::toJsonValue(m_feeds));
    }
    if (m_input_isSet) {
        obj.insert(QString("input"), ::OpenAPI::toJsonValue(m_input));
    }
    if (m_limit_isSet) {
        obj.insert(QString("limit"), ::OpenAPI::toJsonValue(m_limit));
    }
    if (m_num_pages_isSet) {
        obj.insert(QString("numPages"), ::OpenAPI::toJsonValue(m_num_pages));
    }
    if (m_page_isSet) {
        obj.insert(QString("page"), ::OpenAPI::toJsonValue(m_page));
    }
    if (m_total_isSet) {
        obj.insert(QString("total"), ::OpenAPI::toJsonValue(m_total));
    }
    return obj;
}

QList<OAIFeed> OAIGetFeedsResponse_results::getFeeds() const {
    return m_feeds;
}
void OAIGetFeedsResponse_results::setFeeds(const QList<OAIFeed> &feeds) {
    m_feeds = feeds;
    m_feeds_isSet = true;
}

bool OAIGetFeedsResponse_results::is_feeds_Set() const{
    return m_feeds_isSet;
}

bool OAIGetFeedsResponse_results::is_feeds_Valid() const{
    return m_feeds_isValid;
}

QString OAIGetFeedsResponse_results::getInput() const {
    return m_input;
}
void OAIGetFeedsResponse_results::setInput(const QString &input) {
    m_input = input;
    m_input_isSet = true;
}

bool OAIGetFeedsResponse_results::is_input_Set() const{
    return m_input_isSet;
}

bool OAIGetFeedsResponse_results::is_input_Valid() const{
    return m_input_isValid;
}

qint32 OAIGetFeedsResponse_results::getLimit() const {
    return m_limit;
}
void OAIGetFeedsResponse_results::setLimit(const qint32 &limit) {
    m_limit = limit;
    m_limit_isSet = true;
}

bool OAIGetFeedsResponse_results::is_limit_Set() const{
    return m_limit_isSet;
}

bool OAIGetFeedsResponse_results::is_limit_Valid() const{
    return m_limit_isValid;
}

qint32 OAIGetFeedsResponse_results::getNumPages() const {
    return m_num_pages;
}
void OAIGetFeedsResponse_results::setNumPages(const qint32 &num_pages) {
    m_num_pages = num_pages;
    m_num_pages_isSet = true;
}

bool OAIGetFeedsResponse_results::is_num_pages_Set() const{
    return m_num_pages_isSet;
}

bool OAIGetFeedsResponse_results::is_num_pages_Valid() const{
    return m_num_pages_isValid;
}

qint32 OAIGetFeedsResponse_results::getPage() const {
    return m_page;
}
void OAIGetFeedsResponse_results::setPage(const qint32 &page) {
    m_page = page;
    m_page_isSet = true;
}

bool OAIGetFeedsResponse_results::is_page_Set() const{
    return m_page_isSet;
}

bool OAIGetFeedsResponse_results::is_page_Valid() const{
    return m_page_isValid;
}

qint32 OAIGetFeedsResponse_results::getTotal() const {
    return m_total;
}
void OAIGetFeedsResponse_results::setTotal(const qint32 &total) {
    m_total = total;
    m_total_isSet = true;
}

bool OAIGetFeedsResponse_results::is_total_Set() const{
    return m_total_isSet;
}

bool OAIGetFeedsResponse_results::is_total_Valid() const{
    return m_total_isValid;
}

bool OAIGetFeedsResponse_results::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_feeds.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_input_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_limit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_num_pages_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_page_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetFeedsResponse_results::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
