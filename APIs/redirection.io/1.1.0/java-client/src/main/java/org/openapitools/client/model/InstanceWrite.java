/*
 * redirection.io
 * API documentation for redirection.io
 *
 * The version of the OpenAPI document: 1.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:00:05.237264-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class InstanceWrite {
  public static final String SERIALIZED_NAME_AGENT_DURATION = "agentDuration";
  @SerializedName(SERIALIZED_NAME_AGENT_DURATION)
  private Integer agentDuration;

  public static final String SERIALIZED_NAME_MESSAGE = "message";
  @SerializedName(SERIALIZED_NAME_MESSAGE)
  private String message;

  public static final String SERIALIZED_NAME_RULES_COUNT = "rulesCount";
  @SerializedName(SERIALIZED_NAME_RULES_COUNT)
  private Integer rulesCount;

  public static final String SERIALIZED_NAME_RULES_HASH = "rulesHash";
  @SerializedName(SERIALIZED_NAME_RULES_HASH)
  private String rulesHash;

  public InstanceWrite() {
  }

  public InstanceWrite agentDuration(Integer agentDuration) {
    this.agentDuration = agentDuration;
    return this;
  }

  /**
   * Get agentDuration
   * @return agentDuration
   */
  @javax.annotation.Nullable
  public Integer getAgentDuration() {
    return agentDuration;
  }

  public void setAgentDuration(Integer agentDuration) {
    this.agentDuration = agentDuration;
  }


  public InstanceWrite message(String message) {
    this.message = message;
    return this;
  }

  /**
   * Get message
   * @return message
   */
  @javax.annotation.Nullable
  public String getMessage() {
    return message;
  }

  public void setMessage(String message) {
    this.message = message;
  }


  public InstanceWrite rulesCount(Integer rulesCount) {
    this.rulesCount = rulesCount;
    return this;
  }

  /**
   * Get rulesCount
   * @return rulesCount
   */
  @javax.annotation.Nullable
  public Integer getRulesCount() {
    return rulesCount;
  }

  public void setRulesCount(Integer rulesCount) {
    this.rulesCount = rulesCount;
  }


  public InstanceWrite rulesHash(String rulesHash) {
    this.rulesHash = rulesHash;
    return this;
  }

  /**
   * Get rulesHash
   * @return rulesHash
   */
  @javax.annotation.Nullable
  public String getRulesHash() {
    return rulesHash;
  }

  public void setRulesHash(String rulesHash) {
    this.rulesHash = rulesHash;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InstanceWrite instanceWrite = (InstanceWrite) o;
    return Objects.equals(this.agentDuration, instanceWrite.agentDuration) &&
        Objects.equals(this.message, instanceWrite.message) &&
        Objects.equals(this.rulesCount, instanceWrite.rulesCount) &&
        Objects.equals(this.rulesHash, instanceWrite.rulesHash);
  }

  @Override
  public int hashCode() {
    return Objects.hash(agentDuration, message, rulesCount, rulesHash);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InstanceWrite {\n");
    sb.append("    agentDuration: ").append(toIndentedString(agentDuration)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    rulesCount: ").append(toIndentedString(rulesCount)).append("\n");
    sb.append("    rulesHash: ").append(toIndentedString(rulesHash)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("agentDuration");
    openapiFields.add("message");
    openapiFields.add("rulesCount");
    openapiFields.add("rulesHash");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to InstanceWrite
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!InstanceWrite.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in InstanceWrite is not found in the empty JSON string", InstanceWrite.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!InstanceWrite.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `InstanceWrite` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("message") != null && !jsonObj.get("message").isJsonNull()) && !jsonObj.get("message").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `message` to be a primitive type in the JSON string but got `%s`", jsonObj.get("message").toString()));
      }
      if ((jsonObj.get("rulesHash") != null && !jsonObj.get("rulesHash").isJsonNull()) && !jsonObj.get("rulesHash").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rulesHash` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rulesHash").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!InstanceWrite.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'InstanceWrite' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<InstanceWrite> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(InstanceWrite.class));

       return (TypeAdapter<T>) new TypeAdapter<InstanceWrite>() {
           @Override
           public void write(JsonWriter out, InstanceWrite value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public InstanceWrite read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of InstanceWrite given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of InstanceWrite
   * @throws IOException if the JSON string is invalid with respect to InstanceWrite
   */
  public static InstanceWrite fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, InstanceWrite.class);
  }

  /**
   * Convert an instance of InstanceWrite to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

