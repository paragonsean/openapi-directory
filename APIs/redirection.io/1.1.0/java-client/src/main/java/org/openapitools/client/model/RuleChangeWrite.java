/*
 * redirection.io
 * API documentation for redirection.io
 *
 * The version of the OpenAPI document: 1.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.MarkerWrite;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:00:05.237264-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RuleChangeWrite {
  public static final String SERIALIZED_NAME_ACTION = "action";
  @SerializedName(SERIALIZED_NAME_ACTION)
  private String action;

  public static final String SERIALIZED_NAME_ACTIONS = "actions";
  @SerializedName(SERIALIZED_NAME_ACTIONS)
  private List<String> actions = new ArrayList<>();

  public static final String SERIALIZED_NAME_EXAMPLES = "examples";
  @SerializedName(SERIALIZED_NAME_EXAMPLES)
  private List<String> examples = new ArrayList<>();

  public static final String SERIALIZED_NAME_FORMATTED_SOURCE = "formattedSource";
  @SerializedName(SERIALIZED_NAME_FORMATTED_SOURCE)
  private String formattedSource;

  public static final String SERIALIZED_NAME_MARKERS = "markers";
  @SerializedName(SERIALIZED_NAME_MARKERS)
  private List<MarkerWrite> markers = new ArrayList<>();

  public static final String SERIALIZED_NAME_MATCH_ON_RESPONSE_STATUS = "matchOnResponseStatus";
  @SerializedName(SERIALIZED_NAME_MATCH_ON_RESPONSE_STATUS)
  private Integer matchOnResponseStatus;

  public static final String SERIALIZED_NAME_RANK = "rank";
  @SerializedName(SERIALIZED_NAME_RANK)
  private Integer rank;

  public static final String SERIALIZED_NAME_RULE_ID = "ruleId";
  @SerializedName(SERIALIZED_NAME_RULE_ID)
  private String ruleId;

  public static final String SERIALIZED_NAME_SOURCE = "source";
  @SerializedName(SERIALIZED_NAME_SOURCE)
  private String source;

  public RuleChangeWrite() {
  }

  public RuleChangeWrite action(String action) {
    this.action = action;
    return this;
  }

  /**
   * Get action
   * @return action
   */
  @javax.annotation.Nonnull
  public String getAction() {
    return action;
  }

  public void setAction(String action) {
    this.action = action;
  }


  public RuleChangeWrite actions(List<String> actions) {
    this.actions = actions;
    return this;
  }

  public RuleChangeWrite addActionsItem(String actionsItem) {
    if (this.actions == null) {
      this.actions = new ArrayList<>();
    }
    this.actions.add(actionsItem);
    return this;
  }

  /**
   * Get actions
   * @return actions
   */
  @javax.annotation.Nullable
  public List<String> getActions() {
    return actions;
  }

  public void setActions(List<String> actions) {
    this.actions = actions;
  }


  public RuleChangeWrite examples(List<String> examples) {
    this.examples = examples;
    return this;
  }

  public RuleChangeWrite addExamplesItem(String examplesItem) {
    if (this.examples == null) {
      this.examples = new ArrayList<>();
    }
    this.examples.add(examplesItem);
    return this;
  }

  /**
   * Get examples
   * @return examples
   */
  @javax.annotation.Nullable
  public List<String> getExamples() {
    return examples;
  }

  public void setExamples(List<String> examples) {
    this.examples = examples;
  }


  public RuleChangeWrite formattedSource(String formattedSource) {
    this.formattedSource = formattedSource;
    return this;
  }

  /**
   * Get formattedSource
   * @return formattedSource
   */
  @javax.annotation.Nullable
  public String getFormattedSource() {
    return formattedSource;
  }

  public void setFormattedSource(String formattedSource) {
    this.formattedSource = formattedSource;
  }


  public RuleChangeWrite markers(List<MarkerWrite> markers) {
    this.markers = markers;
    return this;
  }

  public RuleChangeWrite addMarkersItem(MarkerWrite markersItem) {
    if (this.markers == null) {
      this.markers = new ArrayList<>();
    }
    this.markers.add(markersItem);
    return this;
  }

  /**
   * Get markers
   * @return markers
   */
  @javax.annotation.Nullable
  public List<MarkerWrite> getMarkers() {
    return markers;
  }

  public void setMarkers(List<MarkerWrite> markers) {
    this.markers = markers;
  }


  public RuleChangeWrite matchOnResponseStatus(Integer matchOnResponseStatus) {
    this.matchOnResponseStatus = matchOnResponseStatus;
    return this;
  }

  /**
   * Get matchOnResponseStatus
   * @return matchOnResponseStatus
   */
  @javax.annotation.Nullable
  public Integer getMatchOnResponseStatus() {
    return matchOnResponseStatus;
  }

  public void setMatchOnResponseStatus(Integer matchOnResponseStatus) {
    this.matchOnResponseStatus = matchOnResponseStatus;
  }


  public RuleChangeWrite rank(Integer rank) {
    this.rank = rank;
    return this;
  }

  /**
   * Get rank
   * @return rank
   */
  @javax.annotation.Nonnull
  public Integer getRank() {
    return rank;
  }

  public void setRank(Integer rank) {
    this.rank = rank;
  }


  public RuleChangeWrite ruleId(String ruleId) {
    this.ruleId = ruleId;
    return this;
  }

  /**
   * Get ruleId
   * @return ruleId
   */
  @javax.annotation.Nullable
  public String getRuleId() {
    return ruleId;
  }

  public void setRuleId(String ruleId) {
    this.ruleId = ruleId;
  }


  public RuleChangeWrite source(String source) {
    this.source = source;
    return this;
  }

  /**
   * Get source
   * @return source
   */
  @javax.annotation.Nonnull
  public String getSource() {
    return source;
  }

  public void setSource(String source) {
    this.source = source;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RuleChangeWrite ruleChangeWrite = (RuleChangeWrite) o;
    return Objects.equals(this.action, ruleChangeWrite.action) &&
        Objects.equals(this.actions, ruleChangeWrite.actions) &&
        Objects.equals(this.examples, ruleChangeWrite.examples) &&
        Objects.equals(this.formattedSource, ruleChangeWrite.formattedSource) &&
        Objects.equals(this.markers, ruleChangeWrite.markers) &&
        Objects.equals(this.matchOnResponseStatus, ruleChangeWrite.matchOnResponseStatus) &&
        Objects.equals(this.rank, ruleChangeWrite.rank) &&
        Objects.equals(this.ruleId, ruleChangeWrite.ruleId) &&
        Objects.equals(this.source, ruleChangeWrite.source);
  }

  @Override
  public int hashCode() {
    return Objects.hash(action, actions, examples, formattedSource, markers, matchOnResponseStatus, rank, ruleId, source);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RuleChangeWrite {\n");
    sb.append("    action: ").append(toIndentedString(action)).append("\n");
    sb.append("    actions: ").append(toIndentedString(actions)).append("\n");
    sb.append("    examples: ").append(toIndentedString(examples)).append("\n");
    sb.append("    formattedSource: ").append(toIndentedString(formattedSource)).append("\n");
    sb.append("    markers: ").append(toIndentedString(markers)).append("\n");
    sb.append("    matchOnResponseStatus: ").append(toIndentedString(matchOnResponseStatus)).append("\n");
    sb.append("    rank: ").append(toIndentedString(rank)).append("\n");
    sb.append("    ruleId: ").append(toIndentedString(ruleId)).append("\n");
    sb.append("    source: ").append(toIndentedString(source)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("action");
    openapiFields.add("actions");
    openapiFields.add("examples");
    openapiFields.add("formattedSource");
    openapiFields.add("markers");
    openapiFields.add("matchOnResponseStatus");
    openapiFields.add("rank");
    openapiFields.add("ruleId");
    openapiFields.add("source");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("action");
    openapiRequiredFields.add("rank");
    openapiRequiredFields.add("source");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RuleChangeWrite
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RuleChangeWrite.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RuleChangeWrite is not found in the empty JSON string", RuleChangeWrite.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RuleChangeWrite.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RuleChangeWrite` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : RuleChangeWrite.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("action").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `action` to be a primitive type in the JSON string but got `%s`", jsonObj.get("action").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("actions") != null && !jsonObj.get("actions").isJsonNull() && !jsonObj.get("actions").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `actions` to be an array in the JSON string but got `%s`", jsonObj.get("actions").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("examples") != null && !jsonObj.get("examples").isJsonNull() && !jsonObj.get("examples").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `examples` to be an array in the JSON string but got `%s`", jsonObj.get("examples").toString()));
      }
      if ((jsonObj.get("formattedSource") != null && !jsonObj.get("formattedSource").isJsonNull()) && !jsonObj.get("formattedSource").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `formattedSource` to be a primitive type in the JSON string but got `%s`", jsonObj.get("formattedSource").toString()));
      }
      if (jsonObj.get("markers") != null && !jsonObj.get("markers").isJsonNull()) {
        JsonArray jsonArraymarkers = jsonObj.getAsJsonArray("markers");
        if (jsonArraymarkers != null) {
          // ensure the json data is an array
          if (!jsonObj.get("markers").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `markers` to be an array in the JSON string but got `%s`", jsonObj.get("markers").toString()));
          }

          // validate the optional field `markers` (array)
          for (int i = 0; i < jsonArraymarkers.size(); i++) {
            MarkerWrite.validateJsonElement(jsonArraymarkers.get(i));
          };
        }
      }
      if ((jsonObj.get("ruleId") != null && !jsonObj.get("ruleId").isJsonNull()) && !jsonObj.get("ruleId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ruleId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ruleId").toString()));
      }
      if (!jsonObj.get("source").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `source` to be a primitive type in the JSON string but got `%s`", jsonObj.get("source").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RuleChangeWrite.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RuleChangeWrite' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RuleChangeWrite> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RuleChangeWrite.class));

       return (TypeAdapter<T>) new TypeAdapter<RuleChangeWrite>() {
           @Override
           public void write(JsonWriter out, RuleChangeWrite value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RuleChangeWrite read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RuleChangeWrite given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RuleChangeWrite
   * @throws IOException if the JSON string is invalid with respect to RuleChangeWrite
   */
  public static RuleChangeWrite fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RuleChangeWrite.class);
  }

  /**
   * Convert an instance of RuleChangeWrite to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

