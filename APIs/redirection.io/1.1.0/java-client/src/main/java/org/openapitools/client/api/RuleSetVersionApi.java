/*
 * redirection.io
 * API documentation for redirection.io
 *
 * The version of the OpenAPI document: 1.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.RuleSetVersion;
import org.openapitools.client.model.RuleSetVersionRead;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class RuleSetVersionApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public RuleSetVersionApi() {
        this(Configuration.getDefaultApiClient());
    }

    public RuleSetVersionApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for clearRuleSetVersionItem
     * @param id The id of the version (required)
     * @param ruleSetVersion The new RuleSetVersion resource (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> RuleSetVersion resource created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid input </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clearRuleSetVersionItemCall(String id, RuleSetVersion ruleSetVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = ruleSetVersion;

        // create path and map variables
        String localVarPath = "/rule-set-versions/{id}/clear"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/ld+json",
            "application/json",
            "text/html",
            "text/csv"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/ld+json",
            "application/json",
            "text/html",
            "text/csv"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call clearRuleSetVersionItemValidateBeforeCall(String id, RuleSetVersion ruleSetVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling clearRuleSetVersionItem(Async)");
        }

        // verify the required parameter 'ruleSetVersion' is set
        if (ruleSetVersion == null) {
            throw new ApiException("Missing the required parameter 'ruleSetVersion' when calling clearRuleSetVersionItem(Async)");
        }

        return clearRuleSetVersionItemCall(id, ruleSetVersion, _callback);

    }

    /**
     * Clear a version
     * 
     * @param id The id of the version (required)
     * @param ruleSetVersion The new RuleSetVersion resource (required)
     * @return RuleSetVersionRead
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> RuleSetVersion resource created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid input </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     */
    public RuleSetVersionRead clearRuleSetVersionItem(String id, RuleSetVersion ruleSetVersion) throws ApiException {
        ApiResponse<RuleSetVersionRead> localVarResp = clearRuleSetVersionItemWithHttpInfo(id, ruleSetVersion);
        return localVarResp.getData();
    }

    /**
     * Clear a version
     * 
     * @param id The id of the version (required)
     * @param ruleSetVersion The new RuleSetVersion resource (required)
     * @return ApiResponse&lt;RuleSetVersionRead&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> RuleSetVersion resource created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid input </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RuleSetVersionRead> clearRuleSetVersionItemWithHttpInfo(String id, RuleSetVersion ruleSetVersion) throws ApiException {
        okhttp3.Call localVarCall = clearRuleSetVersionItemValidateBeforeCall(id, ruleSetVersion, null);
        Type localVarReturnType = new TypeToken<RuleSetVersionRead>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Clear a version (asynchronously)
     * 
     * @param id The id of the version (required)
     * @param ruleSetVersion The new RuleSetVersion resource (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> RuleSetVersion resource created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid input </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call clearRuleSetVersionItemAsync(String id, RuleSetVersion ruleSetVersion, final ApiCallback<RuleSetVersionRead> _callback) throws ApiException {

        okhttp3.Call localVarCall = clearRuleSetVersionItemValidateBeforeCall(id, ruleSetVersion, _callback);
        Type localVarReturnType = new TypeToken<RuleSetVersionRead>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getRuleSetVersionCollection
     * @param projectId  (required)
     * @param sortCreatedAt  (optional)
     * @param page The collection page number (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> RuleSetVersion collection response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRuleSetVersionCollectionCall(String projectId, String sortCreatedAt, Integer page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rule-set-versions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (projectId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("projectId", projectId));
        }

        if (sortCreatedAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort[createdAt]", sortCreatedAt));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "application/ld+json",
            "application/json",
            "text/html",
            "text/csv"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRuleSetVersionCollectionValidateBeforeCall(String projectId, String sortCreatedAt, Integer page, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling getRuleSetVersionCollection(Async)");
        }

        return getRuleSetVersionCollectionCall(projectId, sortCreatedAt, page, _callback);

    }

    /**
     * Retrieves the collection of RuleSetVersion resources.
     * 
     * @param projectId  (required)
     * @param sortCreatedAt  (optional)
     * @param page The collection page number (optional)
     * @return List&lt;RuleSetVersionRead&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> RuleSetVersion collection response </td><td>  -  </td></tr>
     </table>
     */
    public List<RuleSetVersionRead> getRuleSetVersionCollection(String projectId, String sortCreatedAt, Integer page) throws ApiException {
        ApiResponse<List<RuleSetVersionRead>> localVarResp = getRuleSetVersionCollectionWithHttpInfo(projectId, sortCreatedAt, page);
        return localVarResp.getData();
    }

    /**
     * Retrieves the collection of RuleSetVersion resources.
     * 
     * @param projectId  (required)
     * @param sortCreatedAt  (optional)
     * @param page The collection page number (optional)
     * @return ApiResponse&lt;List&lt;RuleSetVersionRead&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> RuleSetVersion collection response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<RuleSetVersionRead>> getRuleSetVersionCollectionWithHttpInfo(String projectId, String sortCreatedAt, Integer page) throws ApiException {
        okhttp3.Call localVarCall = getRuleSetVersionCollectionValidateBeforeCall(projectId, sortCreatedAt, page, null);
        Type localVarReturnType = new TypeToken<List<RuleSetVersionRead>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves the collection of RuleSetVersion resources. (asynchronously)
     * 
     * @param projectId  (required)
     * @param sortCreatedAt  (optional)
     * @param page The collection page number (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> RuleSetVersion collection response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRuleSetVersionCollectionAsync(String projectId, String sortCreatedAt, Integer page, final ApiCallback<List<RuleSetVersionRead>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRuleSetVersionCollectionValidateBeforeCall(projectId, sortCreatedAt, page, _callback);
        Type localVarReturnType = new TypeToken<List<RuleSetVersionRead>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getRuleSetVersionItem
     * @param id  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> RuleSetVersion resource response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRuleSetVersionItemCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rule-set-versions/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/ld+json",
            "application/json",
            "text/html",
            "text/csv"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRuleSetVersionItemValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getRuleSetVersionItem(Async)");
        }

        return getRuleSetVersionItemCall(id, _callback);

    }

    /**
     * Retrieves a RuleSetVersion resource.
     * 
     * @param id  (required)
     * @return RuleSetVersionRead
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> RuleSetVersion resource response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     */
    public RuleSetVersionRead getRuleSetVersionItem(String id) throws ApiException {
        ApiResponse<RuleSetVersionRead> localVarResp = getRuleSetVersionItemWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Retrieves a RuleSetVersion resource.
     * 
     * @param id  (required)
     * @return ApiResponse&lt;RuleSetVersionRead&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> RuleSetVersion resource response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RuleSetVersionRead> getRuleSetVersionItemWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = getRuleSetVersionItemValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<RuleSetVersionRead>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves a RuleSetVersion resource. (asynchronously)
     * 
     * @param id  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> RuleSetVersion resource response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRuleSetVersionItemAsync(String id, final ApiCallback<RuleSetVersionRead> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRuleSetVersionItemValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<RuleSetVersionRead>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for publishRuleSetVersionItem
     * @param id The id of the version (required)
     * @param ruleSetVersion The new RuleSetVersion resource (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> RuleSetVersion resource created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid input </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call publishRuleSetVersionItemCall(String id, RuleSetVersion ruleSetVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = ruleSetVersion;

        // create path and map variables
        String localVarPath = "/rule-set-versions/{id}/publish"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/ld+json",
            "application/json",
            "text/html",
            "text/csv"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/ld+json",
            "application/json",
            "text/html",
            "text/csv"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call publishRuleSetVersionItemValidateBeforeCall(String id, RuleSetVersion ruleSetVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling publishRuleSetVersionItem(Async)");
        }

        // verify the required parameter 'ruleSetVersion' is set
        if (ruleSetVersion == null) {
            throw new ApiException("Missing the required parameter 'ruleSetVersion' when calling publishRuleSetVersionItem(Async)");
        }

        return publishRuleSetVersionItemCall(id, ruleSetVersion, _callback);

    }

    /**
     * Publish a version
     * 
     * @param id The id of the version (required)
     * @param ruleSetVersion The new RuleSetVersion resource (required)
     * @return RuleSetVersionRead
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> RuleSetVersion resource created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid input </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     */
    public RuleSetVersionRead publishRuleSetVersionItem(String id, RuleSetVersion ruleSetVersion) throws ApiException {
        ApiResponse<RuleSetVersionRead> localVarResp = publishRuleSetVersionItemWithHttpInfo(id, ruleSetVersion);
        return localVarResp.getData();
    }

    /**
     * Publish a version
     * 
     * @param id The id of the version (required)
     * @param ruleSetVersion The new RuleSetVersion resource (required)
     * @return ApiResponse&lt;RuleSetVersionRead&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> RuleSetVersion resource created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid input </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RuleSetVersionRead> publishRuleSetVersionItemWithHttpInfo(String id, RuleSetVersion ruleSetVersion) throws ApiException {
        okhttp3.Call localVarCall = publishRuleSetVersionItemValidateBeforeCall(id, ruleSetVersion, null);
        Type localVarReturnType = new TypeToken<RuleSetVersionRead>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Publish a version (asynchronously)
     * 
     * @param id The id of the version (required)
     * @param ruleSetVersion The new RuleSetVersion resource (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> RuleSetVersion resource created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid input </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call publishRuleSetVersionItemAsync(String id, RuleSetVersion ruleSetVersion, final ApiCallback<RuleSetVersionRead> _callback) throws ApiException {

        okhttp3.Call localVarCall = publishRuleSetVersionItemValidateBeforeCall(id, ruleSetVersion, _callback);
        Type localVarReturnType = new TypeToken<RuleSetVersionRead>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
