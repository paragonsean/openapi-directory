/*
 * redirection.io
 * API documentation for redirection.io
 *
 * The version of the OpenAPI document: 1.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.RuleRead;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class RuleApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public RuleApi() {
        this(Configuration.getDefaultApiClient());
    }

    public RuleApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for agentLegacyComplexRuleCollection
     * @param projectId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Rule collection response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call agentLegacyComplexRuleCollectionCall(String projectId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/agent-rule-complexes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (projectId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("projectId", projectId));
        }

        final String[] localVarAccepts = {
            "application/ld+json",
            "application/json",
            "text/html",
            "text/csv"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call agentLegacyComplexRuleCollectionValidateBeforeCall(String projectId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling agentLegacyComplexRuleCollection(Async)");
        }

        return agentLegacyComplexRuleCollectionCall(projectId, _callback);

    }

    /**
     * Retrieves the collection of Rule resources.
     * 
     * @param projectId  (required)
     * @return List&lt;RuleRead&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Rule collection response </td><td>  -  </td></tr>
     </table>
     */
    public List<RuleRead> agentLegacyComplexRuleCollection(String projectId) throws ApiException {
        ApiResponse<List<RuleRead>> localVarResp = agentLegacyComplexRuleCollectionWithHttpInfo(projectId);
        return localVarResp.getData();
    }

    /**
     * Retrieves the collection of Rule resources.
     * 
     * @param projectId  (required)
     * @return ApiResponse&lt;List&lt;RuleRead&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Rule collection response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<RuleRead>> agentLegacyComplexRuleCollectionWithHttpInfo(String projectId) throws ApiException {
        okhttp3.Call localVarCall = agentLegacyComplexRuleCollectionValidateBeforeCall(projectId, null);
        Type localVarReturnType = new TypeToken<List<RuleRead>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves the collection of Rule resources. (asynchronously)
     * 
     * @param projectId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Rule collection response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call agentLegacyComplexRuleCollectionAsync(String projectId, final ApiCallback<List<RuleRead>> _callback) throws ApiException {

        okhttp3.Call localVarCall = agentLegacyComplexRuleCollectionValidateBeforeCall(projectId, _callback);
        Type localVarReturnType = new TypeToken<List<RuleRead>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for agentLegacyStraightRuleCollection
     * @param projectId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Rule collection response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call agentLegacyStraightRuleCollectionCall(String projectId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/agent-rule-straights";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (projectId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("projectId", projectId));
        }

        final String[] localVarAccepts = {
            "application/ld+json",
            "application/json",
            "text/html",
            "text/csv"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call agentLegacyStraightRuleCollectionValidateBeforeCall(String projectId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling agentLegacyStraightRuleCollection(Async)");
        }

        return agentLegacyStraightRuleCollectionCall(projectId, _callback);

    }

    /**
     * Retrieves the collection of Rule resources.
     * 
     * @param projectId  (required)
     * @return List&lt;RuleRead&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Rule collection response </td><td>  -  </td></tr>
     </table>
     */
    public List<RuleRead> agentLegacyStraightRuleCollection(String projectId) throws ApiException {
        ApiResponse<List<RuleRead>> localVarResp = agentLegacyStraightRuleCollectionWithHttpInfo(projectId);
        return localVarResp.getData();
    }

    /**
     * Retrieves the collection of Rule resources.
     * 
     * @param projectId  (required)
     * @return ApiResponse&lt;List&lt;RuleRead&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Rule collection response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<RuleRead>> agentLegacyStraightRuleCollectionWithHttpInfo(String projectId) throws ApiException {
        okhttp3.Call localVarCall = agentLegacyStraightRuleCollectionValidateBeforeCall(projectId, null);
        Type localVarReturnType = new TypeToken<List<RuleRead>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves the collection of Rule resources. (asynchronously)
     * 
     * @param projectId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Rule collection response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call agentLegacyStraightRuleCollectionAsync(String projectId, final ApiCallback<List<RuleRead>> _callback) throws ApiException {

        okhttp3.Call localVarCall = agentLegacyStraightRuleCollectionValidateBeforeCall(projectId, _callback);
        Type localVarReturnType = new TypeToken<List<RuleRead>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for agentRuleCollection
     * @param projectId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Rule collection response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call agentRuleCollectionCall(String projectId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/agent-rules";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (projectId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("projectId", projectId));
        }

        final String[] localVarAccepts = {
            "application/ld+json",
            "application/json",
            "text/html",
            "text/csv"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call agentRuleCollectionValidateBeforeCall(String projectId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling agentRuleCollection(Async)");
        }

        return agentRuleCollectionCall(projectId, _callback);

    }

    /**
     * Retrieves the collection of Rule resources.
     * 
     * @param projectId  (required)
     * @return List&lt;RuleRead&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Rule collection response </td><td>  -  </td></tr>
     </table>
     */
    public List<RuleRead> agentRuleCollection(String projectId) throws ApiException {
        ApiResponse<List<RuleRead>> localVarResp = agentRuleCollectionWithHttpInfo(projectId);
        return localVarResp.getData();
    }

    /**
     * Retrieves the collection of Rule resources.
     * 
     * @param projectId  (required)
     * @return ApiResponse&lt;List&lt;RuleRead&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Rule collection response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<RuleRead>> agentRuleCollectionWithHttpInfo(String projectId) throws ApiException {
        okhttp3.Call localVarCall = agentRuleCollectionValidateBeforeCall(projectId, null);
        Type localVarReturnType = new TypeToken<List<RuleRead>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves the collection of Rule resources. (asynchronously)
     * 
     * @param projectId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Rule collection response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call agentRuleCollectionAsync(String projectId, final ApiCallback<List<RuleRead>> _callback) throws ApiException {

        okhttp3.Call localVarCall = agentRuleCollectionValidateBeforeCall(projectId, _callback);
        Type localVarReturnType = new TypeToken<List<RuleRead>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for exportRuleCollection
     * @param projectId  (required)
     * @param sortId  (optional)
     * @param sortViewCount  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Rule collection response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call exportRuleCollectionCall(String projectId, String sortId, String sortViewCount, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/export-rules";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (projectId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("projectId", projectId));
        }

        if (sortId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort[id]", sortId));
        }

        if (sortViewCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort[viewCount]", sortViewCount));
        }

        final String[] localVarAccepts = {
            "application/ld+json",
            "application/json",
            "text/html",
            "text/csv"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call exportRuleCollectionValidateBeforeCall(String projectId, String sortId, String sortViewCount, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling exportRuleCollection(Async)");
        }

        return exportRuleCollectionCall(projectId, sortId, sortViewCount, _callback);

    }

    /**
     * Retrieves the collection of Rule resources.
     * 
     * @param projectId  (required)
     * @param sortId  (optional)
     * @param sortViewCount  (optional)
     * @return List&lt;RuleRead&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Rule collection response </td><td>  -  </td></tr>
     </table>
     */
    public List<RuleRead> exportRuleCollection(String projectId, String sortId, String sortViewCount) throws ApiException {
        ApiResponse<List<RuleRead>> localVarResp = exportRuleCollectionWithHttpInfo(projectId, sortId, sortViewCount);
        return localVarResp.getData();
    }

    /**
     * Retrieves the collection of Rule resources.
     * 
     * @param projectId  (required)
     * @param sortId  (optional)
     * @param sortViewCount  (optional)
     * @return ApiResponse&lt;List&lt;RuleRead&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Rule collection response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<RuleRead>> exportRuleCollectionWithHttpInfo(String projectId, String sortId, String sortViewCount) throws ApiException {
        okhttp3.Call localVarCall = exportRuleCollectionValidateBeforeCall(projectId, sortId, sortViewCount, null);
        Type localVarReturnType = new TypeToken<List<RuleRead>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves the collection of Rule resources. (asynchronously)
     * 
     * @param projectId  (required)
     * @param sortId  (optional)
     * @param sortViewCount  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Rule collection response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call exportRuleCollectionAsync(String projectId, String sortId, String sortViewCount, final ApiCallback<List<RuleRead>> _callback) throws ApiException {

        okhttp3.Call localVarCall = exportRuleCollectionValidateBeforeCall(projectId, sortId, sortViewCount, _callback);
        Type localVarReturnType = new TypeToken<List<RuleRead>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getRuleCollection
     * @param projectId  (required)
     * @param sortId  (optional)
     * @param sortViewCount  (optional)
     * @param page The collection page number (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Rule collection response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRuleCollectionCall(String projectId, String sortId, String sortViewCount, Integer page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rules";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (projectId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("projectId", projectId));
        }

        if (sortId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort[id]", sortId));
        }

        if (sortViewCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort[viewCount]", sortViewCount));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "application/ld+json",
            "application/json",
            "text/html",
            "text/csv"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRuleCollectionValidateBeforeCall(String projectId, String sortId, String sortViewCount, Integer page, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling getRuleCollection(Async)");
        }

        return getRuleCollectionCall(projectId, sortId, sortViewCount, page, _callback);

    }

    /**
     * Retrieves the collection of Rule resources.
     * 
     * @param projectId  (required)
     * @param sortId  (optional)
     * @param sortViewCount  (optional)
     * @param page The collection page number (optional)
     * @return List&lt;RuleRead&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Rule collection response </td><td>  -  </td></tr>
     </table>
     */
    public List<RuleRead> getRuleCollection(String projectId, String sortId, String sortViewCount, Integer page) throws ApiException {
        ApiResponse<List<RuleRead>> localVarResp = getRuleCollectionWithHttpInfo(projectId, sortId, sortViewCount, page);
        return localVarResp.getData();
    }

    /**
     * Retrieves the collection of Rule resources.
     * 
     * @param projectId  (required)
     * @param sortId  (optional)
     * @param sortViewCount  (optional)
     * @param page The collection page number (optional)
     * @return ApiResponse&lt;List&lt;RuleRead&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Rule collection response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<RuleRead>> getRuleCollectionWithHttpInfo(String projectId, String sortId, String sortViewCount, Integer page) throws ApiException {
        okhttp3.Call localVarCall = getRuleCollectionValidateBeforeCall(projectId, sortId, sortViewCount, page, null);
        Type localVarReturnType = new TypeToken<List<RuleRead>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves the collection of Rule resources. (asynchronously)
     * 
     * @param projectId  (required)
     * @param sortId  (optional)
     * @param sortViewCount  (optional)
     * @param page The collection page number (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Rule collection response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRuleCollectionAsync(String projectId, String sortId, String sortViewCount, Integer page, final ApiCallback<List<RuleRead>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRuleCollectionValidateBeforeCall(projectId, sortId, sortViewCount, page, _callback);
        Type localVarReturnType = new TypeToken<List<RuleRead>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getRuleItem
     * @param id  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Rule resource response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRuleItemCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rules/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/ld+json",
            "application/json",
            "text/html",
            "text/csv"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRuleItemValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getRuleItem(Async)");
        }

        return getRuleItemCall(id, _callback);

    }

    /**
     * Retrieves a Rule resource.
     * 
     * @param id  (required)
     * @return RuleRead
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Rule resource response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     */
    public RuleRead getRuleItem(String id) throws ApiException {
        ApiResponse<RuleRead> localVarResp = getRuleItemWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Retrieves a Rule resource.
     * 
     * @param id  (required)
     * @return ApiResponse&lt;RuleRead&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Rule resource response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RuleRead> getRuleItemWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = getRuleItemValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<RuleRead>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves a Rule resource. (asynchronously)
     * 
     * @param id  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Rule resource response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRuleItemAsync(String id, final ApiCallback<RuleRead> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRuleItemValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<RuleRead>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
