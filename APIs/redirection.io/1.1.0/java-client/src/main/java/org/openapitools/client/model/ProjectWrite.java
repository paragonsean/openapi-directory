/*
 * redirection.io
 * API documentation for redirection.io
 *
 * The version of the OpenAPI document: 1.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:00:05.237264-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ProjectWrite {
  public static final String SERIALIZED_NAME_IGNORE_PROJECT_TYPES = "ignoreProjectTypes";
  @SerializedName(SERIALIZED_NAME_IGNORE_PROJECT_TYPES)
  private List<String> ignoreProjectTypes = new ArrayList<>();

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_ONBOARDING_COMPLETED_DEMOS = "onboardingCompletedDemos";
  @SerializedName(SERIALIZED_NAME_ONBOARDING_COMPLETED_DEMOS)
  private List<String> onboardingCompletedDemos = new ArrayList<>();

  public ProjectWrite() {
  }

  public ProjectWrite ignoreProjectTypes(List<String> ignoreProjectTypes) {
    this.ignoreProjectTypes = ignoreProjectTypes;
    return this;
  }

  public ProjectWrite addIgnoreProjectTypesItem(String ignoreProjectTypesItem) {
    if (this.ignoreProjectTypes == null) {
      this.ignoreProjectTypes = new ArrayList<>();
    }
    this.ignoreProjectTypes.add(ignoreProjectTypesItem);
    return this;
  }

  /**
   * Get ignoreProjectTypes
   * @return ignoreProjectTypes
   */
  @javax.annotation.Nullable
  public List<String> getIgnoreProjectTypes() {
    return ignoreProjectTypes;
  }

  public void setIgnoreProjectTypes(List<String> ignoreProjectTypes) {
    this.ignoreProjectTypes = ignoreProjectTypes;
  }


  public ProjectWrite name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public ProjectWrite onboardingCompletedDemos(List<String> onboardingCompletedDemos) {
    this.onboardingCompletedDemos = onboardingCompletedDemos;
    return this;
  }

  public ProjectWrite addOnboardingCompletedDemosItem(String onboardingCompletedDemosItem) {
    if (this.onboardingCompletedDemos == null) {
      this.onboardingCompletedDemos = new ArrayList<>();
    }
    this.onboardingCompletedDemos.add(onboardingCompletedDemosItem);
    return this;
  }

  /**
   * Get onboardingCompletedDemos
   * @return onboardingCompletedDemos
   */
  @javax.annotation.Nullable
  public List<String> getOnboardingCompletedDemos() {
    return onboardingCompletedDemos;
  }

  public void setOnboardingCompletedDemos(List<String> onboardingCompletedDemos) {
    this.onboardingCompletedDemos = onboardingCompletedDemos;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProjectWrite projectWrite = (ProjectWrite) o;
    return Objects.equals(this.ignoreProjectTypes, projectWrite.ignoreProjectTypes) &&
        Objects.equals(this.name, projectWrite.name) &&
        Objects.equals(this.onboardingCompletedDemos, projectWrite.onboardingCompletedDemos);
  }

  @Override
  public int hashCode() {
    return Objects.hash(ignoreProjectTypes, name, onboardingCompletedDemos);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProjectWrite {\n");
    sb.append("    ignoreProjectTypes: ").append(toIndentedString(ignoreProjectTypes)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    onboardingCompletedDemos: ").append(toIndentedString(onboardingCompletedDemos)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ignoreProjectTypes");
    openapiFields.add("name");
    openapiFields.add("onboardingCompletedDemos");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("name");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ProjectWrite
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ProjectWrite.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ProjectWrite is not found in the empty JSON string", ProjectWrite.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ProjectWrite.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ProjectWrite` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ProjectWrite.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("ignoreProjectTypes") != null && !jsonObj.get("ignoreProjectTypes").isJsonNull() && !jsonObj.get("ignoreProjectTypes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `ignoreProjectTypes` to be an array in the JSON string but got `%s`", jsonObj.get("ignoreProjectTypes").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("onboardingCompletedDemos") != null && !jsonObj.get("onboardingCompletedDemos").isJsonNull() && !jsonObj.get("onboardingCompletedDemos").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `onboardingCompletedDemos` to be an array in the JSON string but got `%s`", jsonObj.get("onboardingCompletedDemos").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ProjectWrite.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ProjectWrite' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ProjectWrite> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ProjectWrite.class));

       return (TypeAdapter<T>) new TypeAdapter<ProjectWrite>() {
           @Override
           public void write(JsonWriter out, ProjectWrite value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ProjectWrite read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ProjectWrite given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ProjectWrite
   * @throws IOException if the JSON string is invalid with respect to ProjectWrite
   */
  public static ProjectWrite fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ProjectWrite.class);
  }

  /**
   * Convert an instance of ProjectWrite to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

