/*
 * redirection.io
 * API documentation for redirection.io
 *
 * The version of the OpenAPI document: 1.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:00:05.237264-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class InstanceRead {
  public static final String SERIALIZED_NAME_AGENT_DURATION = "agentDuration";
  @SerializedName(SERIALIZED_NAME_AGENT_DURATION)
  private Integer agentDuration;

  public static final String SERIALIZED_NAME_AGENT_VERSION = "agentVersion";
  @SerializedName(SERIALIZED_NAME_AGENT_VERSION)
  private String agentVersion;

  public static final String SERIALIZED_NAME_AGENT_VERSION_STATUS = "agentVersionStatus";
  @SerializedName(SERIALIZED_NAME_AGENT_VERSION_STATUS)
  private String agentVersionStatus;

  public static final String SERIALIZED_NAME_CONFIG = "config";
  @SerializedName(SERIALIZED_NAME_CONFIG)
  private String config;

  public static final String SERIALIZED_NAME_CREATED_AT = "createdAt";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_GONE = "gone";
  @SerializedName(SERIALIZED_NAME_GONE)
  private Boolean gone;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_LAST_COMPLETED_AT = "lastCompletedAt";
  @SerializedName(SERIALIZED_NAME_LAST_COMPLETED_AT)
  private OffsetDateTime lastCompletedAt;

  public static final String SERIALIZED_NAME_LAST_STARTED_AT = "lastStartedAt";
  @SerializedName(SERIALIZED_NAME_LAST_STARTED_AT)
  private OffsetDateTime lastStartedAt;

  public static final String SERIALIZED_NAME_LIVE = "live";
  @SerializedName(SERIALIZED_NAME_LIVE)
  private Boolean live;

  public static final String SERIALIZED_NAME_LOGGING = "logging";
  @SerializedName(SERIALIZED_NAME_LOGGING)
  private Boolean logging;

  public static final String SERIALIZED_NAME_LOGS_LAST_FLUSHED_AT = "logsLastFlushedAt";
  @SerializedName(SERIALIZED_NAME_LOGS_LAST_FLUSHED_AT)
  private OffsetDateTime logsLastFlushedAt;

  public static final String SERIALIZED_NAME_MESSAGE = "message";
  @SerializedName(SERIALIZED_NAME_MESSAGE)
  private String message;

  public static final String SERIALIZED_NAME_MISCONFIGURED = "misconfigured";
  @SerializedName(SERIALIZED_NAME_MISCONFIGURED)
  private Boolean misconfigured;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_RULES_COUNT = "rulesCount";
  @SerializedName(SERIALIZED_NAME_RULES_COUNT)
  private Integer rulesCount;

  public static final String SERIALIZED_NAME_RULES_HASH = "rulesHash";
  @SerializedName(SERIALIZED_NAME_RULES_HASH)
  private String rulesHash;

  public static final String SERIALIZED_NAME_STALE = "stale";
  @SerializedName(SERIALIZED_NAME_STALE)
  private Boolean stale;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private Integer status;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updatedAt";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  private OffsetDateTime updatedAt;

  public InstanceRead() {
  }

  public InstanceRead(
     String agentVersionStatus, 
     Boolean gone, 
     String id, 
     Boolean stale
  ) {
    this();
    this.agentVersionStatus = agentVersionStatus;
    this.gone = gone;
    this.id = id;
    this.stale = stale;
  }

  public InstanceRead agentDuration(Integer agentDuration) {
    this.agentDuration = agentDuration;
    return this;
  }

  /**
   * Get agentDuration
   * @return agentDuration
   */
  @javax.annotation.Nullable
  public Integer getAgentDuration() {
    return agentDuration;
  }

  public void setAgentDuration(Integer agentDuration) {
    this.agentDuration = agentDuration;
  }


  public InstanceRead agentVersion(String agentVersion) {
    this.agentVersion = agentVersion;
    return this;
  }

  /**
   * Get agentVersion
   * @return agentVersion
   */
  @javax.annotation.Nullable
  public String getAgentVersion() {
    return agentVersion;
  }

  public void setAgentVersion(String agentVersion) {
    this.agentVersion = agentVersion;
  }


  /**
   * Get agentVersionStatus
   * @return agentVersionStatus
   */
  @javax.annotation.Nullable
  public String getAgentVersionStatus() {
    return agentVersionStatus;
  }



  public InstanceRead config(String config) {
    this.config = config;
    return this;
  }

  /**
   * Get config
   * @return config
   */
  @javax.annotation.Nullable
  public String getConfig() {
    return config;
  }

  public void setConfig(String config) {
    this.config = config;
  }


  public InstanceRead createdAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Get createdAt
   * @return createdAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  /**
   * Get gone
   * @return gone
   */
  @javax.annotation.Nullable
  public Boolean getGone() {
    return gone;
  }



  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }



  public InstanceRead lastCompletedAt(OffsetDateTime lastCompletedAt) {
    this.lastCompletedAt = lastCompletedAt;
    return this;
  }

  /**
   * Get lastCompletedAt
   * @return lastCompletedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastCompletedAt() {
    return lastCompletedAt;
  }

  public void setLastCompletedAt(OffsetDateTime lastCompletedAt) {
    this.lastCompletedAt = lastCompletedAt;
  }


  public InstanceRead lastStartedAt(OffsetDateTime lastStartedAt) {
    this.lastStartedAt = lastStartedAt;
    return this;
  }

  /**
   * Get lastStartedAt
   * @return lastStartedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastStartedAt() {
    return lastStartedAt;
  }

  public void setLastStartedAt(OffsetDateTime lastStartedAt) {
    this.lastStartedAt = lastStartedAt;
  }


  public InstanceRead live(Boolean live) {
    this.live = live;
    return this;
  }

  /**
   * Get live
   * @return live
   */
  @javax.annotation.Nullable
  public Boolean getLive() {
    return live;
  }

  public void setLive(Boolean live) {
    this.live = live;
  }


  public InstanceRead logging(Boolean logging) {
    this.logging = logging;
    return this;
  }

  /**
   * Get logging
   * @return logging
   */
  @javax.annotation.Nullable
  public Boolean getLogging() {
    return logging;
  }

  public void setLogging(Boolean logging) {
    this.logging = logging;
  }


  public InstanceRead logsLastFlushedAt(OffsetDateTime logsLastFlushedAt) {
    this.logsLastFlushedAt = logsLastFlushedAt;
    return this;
  }

  /**
   * Get logsLastFlushedAt
   * @return logsLastFlushedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLogsLastFlushedAt() {
    return logsLastFlushedAt;
  }

  public void setLogsLastFlushedAt(OffsetDateTime logsLastFlushedAt) {
    this.logsLastFlushedAt = logsLastFlushedAt;
  }


  public InstanceRead message(String message) {
    this.message = message;
    return this;
  }

  /**
   * Get message
   * @return message
   */
  @javax.annotation.Nullable
  public String getMessage() {
    return message;
  }

  public void setMessage(String message) {
    this.message = message;
  }


  public InstanceRead misconfigured(Boolean misconfigured) {
    this.misconfigured = misconfigured;
    return this;
  }

  /**
   * Get misconfigured
   * @return misconfigured
   */
  @javax.annotation.Nullable
  public Boolean getMisconfigured() {
    return misconfigured;
  }

  public void setMisconfigured(Boolean misconfigured) {
    this.misconfigured = misconfigured;
  }


  public InstanceRead name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public InstanceRead rulesCount(Integer rulesCount) {
    this.rulesCount = rulesCount;
    return this;
  }

  /**
   * Get rulesCount
   * @return rulesCount
   */
  @javax.annotation.Nullable
  public Integer getRulesCount() {
    return rulesCount;
  }

  public void setRulesCount(Integer rulesCount) {
    this.rulesCount = rulesCount;
  }


  public InstanceRead rulesHash(String rulesHash) {
    this.rulesHash = rulesHash;
    return this;
  }

  /**
   * Get rulesHash
   * @return rulesHash
   */
  @javax.annotation.Nullable
  public String getRulesHash() {
    return rulesHash;
  }

  public void setRulesHash(String rulesHash) {
    this.rulesHash = rulesHash;
  }


  /**
   * Get stale
   * @return stale
   */
  @javax.annotation.Nullable
  public Boolean getStale() {
    return stale;
  }



  public InstanceRead status(Integer status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public Integer getStatus() {
    return status;
  }

  public void setStatus(Integer status) {
    this.status = status;
  }


  public InstanceRead updatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
    return this;
  }

  /**
   * Get updatedAt
   * @return updatedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }

  public void setUpdatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InstanceRead instanceRead = (InstanceRead) o;
    return Objects.equals(this.agentDuration, instanceRead.agentDuration) &&
        Objects.equals(this.agentVersion, instanceRead.agentVersion) &&
        Objects.equals(this.agentVersionStatus, instanceRead.agentVersionStatus) &&
        Objects.equals(this.config, instanceRead.config) &&
        Objects.equals(this.createdAt, instanceRead.createdAt) &&
        Objects.equals(this.gone, instanceRead.gone) &&
        Objects.equals(this.id, instanceRead.id) &&
        Objects.equals(this.lastCompletedAt, instanceRead.lastCompletedAt) &&
        Objects.equals(this.lastStartedAt, instanceRead.lastStartedAt) &&
        Objects.equals(this.live, instanceRead.live) &&
        Objects.equals(this.logging, instanceRead.logging) &&
        Objects.equals(this.logsLastFlushedAt, instanceRead.logsLastFlushedAt) &&
        Objects.equals(this.message, instanceRead.message) &&
        Objects.equals(this.misconfigured, instanceRead.misconfigured) &&
        Objects.equals(this.name, instanceRead.name) &&
        Objects.equals(this.rulesCount, instanceRead.rulesCount) &&
        Objects.equals(this.rulesHash, instanceRead.rulesHash) &&
        Objects.equals(this.stale, instanceRead.stale) &&
        Objects.equals(this.status, instanceRead.status) &&
        Objects.equals(this.updatedAt, instanceRead.updatedAt);
  }

  @Override
  public int hashCode() {
    return Objects.hash(agentDuration, agentVersion, agentVersionStatus, config, createdAt, gone, id, lastCompletedAt, lastStartedAt, live, logging, logsLastFlushedAt, message, misconfigured, name, rulesCount, rulesHash, stale, status, updatedAt);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InstanceRead {\n");
    sb.append("    agentDuration: ").append(toIndentedString(agentDuration)).append("\n");
    sb.append("    agentVersion: ").append(toIndentedString(agentVersion)).append("\n");
    sb.append("    agentVersionStatus: ").append(toIndentedString(agentVersionStatus)).append("\n");
    sb.append("    config: ").append(toIndentedString(config)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    gone: ").append(toIndentedString(gone)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    lastCompletedAt: ").append(toIndentedString(lastCompletedAt)).append("\n");
    sb.append("    lastStartedAt: ").append(toIndentedString(lastStartedAt)).append("\n");
    sb.append("    live: ").append(toIndentedString(live)).append("\n");
    sb.append("    logging: ").append(toIndentedString(logging)).append("\n");
    sb.append("    logsLastFlushedAt: ").append(toIndentedString(logsLastFlushedAt)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    misconfigured: ").append(toIndentedString(misconfigured)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    rulesCount: ").append(toIndentedString(rulesCount)).append("\n");
    sb.append("    rulesHash: ").append(toIndentedString(rulesHash)).append("\n");
    sb.append("    stale: ").append(toIndentedString(stale)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("agentDuration");
    openapiFields.add("agentVersion");
    openapiFields.add("agentVersionStatus");
    openapiFields.add("config");
    openapiFields.add("createdAt");
    openapiFields.add("gone");
    openapiFields.add("id");
    openapiFields.add("lastCompletedAt");
    openapiFields.add("lastStartedAt");
    openapiFields.add("live");
    openapiFields.add("logging");
    openapiFields.add("logsLastFlushedAt");
    openapiFields.add("message");
    openapiFields.add("misconfigured");
    openapiFields.add("name");
    openapiFields.add("rulesCount");
    openapiFields.add("rulesHash");
    openapiFields.add("stale");
    openapiFields.add("status");
    openapiFields.add("updatedAt");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("name");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to InstanceRead
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!InstanceRead.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in InstanceRead is not found in the empty JSON string", InstanceRead.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!InstanceRead.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `InstanceRead` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : InstanceRead.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("agentVersion") != null && !jsonObj.get("agentVersion").isJsonNull()) && !jsonObj.get("agentVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `agentVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("agentVersion").toString()));
      }
      if ((jsonObj.get("agentVersionStatus") != null && !jsonObj.get("agentVersionStatus").isJsonNull()) && !jsonObj.get("agentVersionStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `agentVersionStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("agentVersionStatus").toString()));
      }
      if ((jsonObj.get("config") != null && !jsonObj.get("config").isJsonNull()) && !jsonObj.get("config").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `config` to be a primitive type in the JSON string but got `%s`", jsonObj.get("config").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("message") != null && !jsonObj.get("message").isJsonNull()) && !jsonObj.get("message").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `message` to be a primitive type in the JSON string but got `%s`", jsonObj.get("message").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("rulesHash") != null && !jsonObj.get("rulesHash").isJsonNull()) && !jsonObj.get("rulesHash").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rulesHash` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rulesHash").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!InstanceRead.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'InstanceRead' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<InstanceRead> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(InstanceRead.class));

       return (TypeAdapter<T>) new TypeAdapter<InstanceRead>() {
           @Override
           public void write(JsonWriter out, InstanceRead value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public InstanceRead read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of InstanceRead given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of InstanceRead
   * @throws IOException if the JSON string is invalid with respect to InstanceRead
   */
  public static InstanceRead fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, InstanceRead.class);
  }

  /**
   * Convert an instance of InstanceRead to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

