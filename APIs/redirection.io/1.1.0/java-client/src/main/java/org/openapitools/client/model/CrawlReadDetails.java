/*
 * redirection.io
 * API documentation for redirection.io
 *
 * The version of the OpenAPI document: 1.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.UserReadDetails;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:00:05.237264-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CrawlReadDetails {
  public static final String SERIALIZED_NAME_ARCHIVED = "archived";
  @SerializedName(SERIALIZED_NAME_ARCHIVED)
  private Boolean archived;

  public static final String SERIALIZED_NAME_AUTHOR = "author";
  @SerializedName(SERIALIZED_NAME_AUTHOR)
  private UserReadDetails author;

  public static final String SERIALIZED_NAME_CREATED_AT = "createdAt";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_ERROR = "error";
  @SerializedName(SERIALIZED_NAME_ERROR)
  private String error;

  public static final String SERIALIZED_NAME_FINISHED_AT = "finishedAt";
  @SerializedName(SERIALIZED_NAME_FINISHED_AT)
  private OffsetDateTime finishedAt;

  public static final String SERIALIZED_NAME_FIRST_URL = "firstUrl";
  @SerializedName(SERIALIZED_NAME_FIRST_URL)
  private String firstUrl;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_STATS = "stats";
  @SerializedName(SERIALIZED_NAME_STATS)
  private List<String> stats = new ArrayList<>();

  public static final String SERIALIZED_NAME_TRIGGER = "trigger";
  @SerializedName(SERIALIZED_NAME_TRIGGER)
  private String trigger;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updatedAt";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  private OffsetDateTime updatedAt;

  public CrawlReadDetails() {
  }

  public CrawlReadDetails(
     Boolean archived, 
     OffsetDateTime createdAt, 
     String error, 
     OffsetDateTime finishedAt, 
     String firstUrl, 
     String id, 
     String trigger, 
     OffsetDateTime updatedAt
  ) {
    this();
    this.archived = archived;
    this.createdAt = createdAt;
    this.error = error;
    this.finishedAt = finishedAt;
    this.firstUrl = firstUrl;
    this.id = id;
    this.trigger = trigger;
    this.updatedAt = updatedAt;
  }

  /**
   * Get archived
   * @return archived
   */
  @javax.annotation.Nullable
  public Boolean getArchived() {
    return archived;
  }



  public CrawlReadDetails author(UserReadDetails author) {
    this.author = author;
    return this;
  }

  /**
   * Get author
   * @return author
   */
  @javax.annotation.Nullable
  public UserReadDetails getAuthor() {
    return author;
  }

  public void setAuthor(UserReadDetails author) {
    this.author = author;
  }


  /**
   * Get createdAt
   * @return createdAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }



  /**
   * Get error
   * @return error
   */
  @javax.annotation.Nullable
  public String getError() {
    return error;
  }



  /**
   * Get finishedAt
   * @return finishedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getFinishedAt() {
    return finishedAt;
  }



  /**
   * Get firstUrl
   * @return firstUrl
   */
  @javax.annotation.Nullable
  public String getFirstUrl() {
    return firstUrl;
  }



  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }



  public CrawlReadDetails stats(List<String> stats) {
    this.stats = stats;
    return this;
  }

  public CrawlReadDetails addStatsItem(String statsItem) {
    if (this.stats == null) {
      this.stats = new ArrayList<>();
    }
    this.stats.add(statsItem);
    return this;
  }

  /**
   * Get stats
   * @return stats
   */
  @javax.annotation.Nullable
  public List<String> getStats() {
    return stats;
  }

  public void setStats(List<String> stats) {
    this.stats = stats;
  }


  /**
   * Get trigger
   * @return trigger
   */
  @javax.annotation.Nullable
  public String getTrigger() {
    return trigger;
  }



  /**
   * Get updatedAt
   * @return updatedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CrawlReadDetails crawlReadDetails = (CrawlReadDetails) o;
    return Objects.equals(this.archived, crawlReadDetails.archived) &&
        Objects.equals(this.author, crawlReadDetails.author) &&
        Objects.equals(this.createdAt, crawlReadDetails.createdAt) &&
        Objects.equals(this.error, crawlReadDetails.error) &&
        Objects.equals(this.finishedAt, crawlReadDetails.finishedAt) &&
        Objects.equals(this.firstUrl, crawlReadDetails.firstUrl) &&
        Objects.equals(this.id, crawlReadDetails.id) &&
        Objects.equals(this.stats, crawlReadDetails.stats) &&
        Objects.equals(this.trigger, crawlReadDetails.trigger) &&
        Objects.equals(this.updatedAt, crawlReadDetails.updatedAt);
  }

  @Override
  public int hashCode() {
    return Objects.hash(archived, author, createdAt, error, finishedAt, firstUrl, id, stats, trigger, updatedAt);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CrawlReadDetails {\n");
    sb.append("    archived: ").append(toIndentedString(archived)).append("\n");
    sb.append("    author: ").append(toIndentedString(author)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    error: ").append(toIndentedString(error)).append("\n");
    sb.append("    finishedAt: ").append(toIndentedString(finishedAt)).append("\n");
    sb.append("    firstUrl: ").append(toIndentedString(firstUrl)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    stats: ").append(toIndentedString(stats)).append("\n");
    sb.append("    trigger: ").append(toIndentedString(trigger)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("archived");
    openapiFields.add("author");
    openapiFields.add("createdAt");
    openapiFields.add("error");
    openapiFields.add("finishedAt");
    openapiFields.add("firstUrl");
    openapiFields.add("id");
    openapiFields.add("stats");
    openapiFields.add("trigger");
    openapiFields.add("updatedAt");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CrawlReadDetails
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CrawlReadDetails.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CrawlReadDetails is not found in the empty JSON string", CrawlReadDetails.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CrawlReadDetails.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CrawlReadDetails` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `author`
      if (jsonObj.get("author") != null && !jsonObj.get("author").isJsonNull()) {
        UserReadDetails.validateJsonElement(jsonObj.get("author"));
      }
      if ((jsonObj.get("error") != null && !jsonObj.get("error").isJsonNull()) && !jsonObj.get("error").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `error` to be a primitive type in the JSON string but got `%s`", jsonObj.get("error").toString()));
      }
      if ((jsonObj.get("firstUrl") != null && !jsonObj.get("firstUrl").isJsonNull()) && !jsonObj.get("firstUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `firstUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("firstUrl").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("stats") != null && !jsonObj.get("stats").isJsonNull() && !jsonObj.get("stats").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `stats` to be an array in the JSON string but got `%s`", jsonObj.get("stats").toString()));
      }
      if ((jsonObj.get("trigger") != null && !jsonObj.get("trigger").isJsonNull()) && !jsonObj.get("trigger").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `trigger` to be a primitive type in the JSON string but got `%s`", jsonObj.get("trigger").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CrawlReadDetails.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CrawlReadDetails' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CrawlReadDetails> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CrawlReadDetails.class));

       return (TypeAdapter<T>) new TypeAdapter<CrawlReadDetails>() {
           @Override
           public void write(JsonWriter out, CrawlReadDetails value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CrawlReadDetails read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CrawlReadDetails given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CrawlReadDetails
   * @throws IOException if the JSON string is invalid with respect to CrawlReadDetails
   */
  public static CrawlReadDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CrawlReadDetails.class);
  }

  /**
   * Convert an instance of CrawlReadDetails to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

