/*
 * redirection.io
 * API documentation for redirection.io
 *
 * The version of the OpenAPI document: 1.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:00:05.237264-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CrawlWrite {
  public static final String SERIALIZED_NAME_CONCURRENCY = "concurrency";
  @SerializedName(SERIALIZED_NAME_CONCURRENCY)
  private Integer concurrency;

  public static final String SERIALIZED_NAME_FIRST_URL = "firstUrl";
  @SerializedName(SERIALIZED_NAME_FIRST_URL)
  private Object firstUrl;

  public static final String SERIALIZED_NAME_HEADERS = "headers";
  @SerializedName(SERIALIZED_NAME_HEADERS)
  private List<String> headers = new ArrayList<>();

  public static final String SERIALIZED_NAME_HTTP_BASIC_PASSWORD = "httpBasicPassword";
  @SerializedName(SERIALIZED_NAME_HTTP_BASIC_PASSWORD)
  private Object httpBasicPassword;

  public static final String SERIALIZED_NAME_HTTP_BASIC_USER = "httpBasicUser";
  @SerializedName(SERIALIZED_NAME_HTTP_BASIC_USER)
  private Object httpBasicUser;

  public static final String SERIALIZED_NAME_MAX_DEPTH = "maxDepth";
  @SerializedName(SERIALIZED_NAME_MAX_DEPTH)
  private Integer maxDepth;

  public static final String SERIALIZED_NAME_MAX_DURATION = "maxDuration";
  @SerializedName(SERIALIZED_NAME_MAX_DURATION)
  private Integer maxDuration;

  public static final String SERIALIZED_NAME_MAX_URLS = "maxUrls";
  @SerializedName(SERIALIZED_NAME_MAX_URLS)
  private Integer maxUrls;

  public static final String SERIALIZED_NAME_OTHER_DOMAINS = "otherDomains";
  @SerializedName(SERIALIZED_NAME_OTHER_DOMAINS)
  private List<String> otherDomains = new ArrayList<>();

  public static final String SERIALIZED_NAME_PROJECT = "project";
  @SerializedName(SERIALIZED_NAME_PROJECT)
  private String project;

  public static final String SERIALIZED_NAME_SSL_CHECKING_DISABLED = "sslCheckingDisabled";
  @SerializedName(SERIALIZED_NAME_SSL_CHECKING_DISABLED)
  private Boolean sslCheckingDisabled;

  public static final String SERIALIZED_NAME_SUBDOMAIN_INCLUDED = "subdomainIncluded";
  @SerializedName(SERIALIZED_NAME_SUBDOMAIN_INCLUDED)
  private Boolean subdomainIncluded;

  public static final String SERIALIZED_NAME_USER_AGENT = "userAgent";
  @SerializedName(SERIALIZED_NAME_USER_AGENT)
  private Object userAgent;

  public CrawlWrite() {
  }

  public CrawlWrite concurrency(Integer concurrency) {
    this.concurrency = concurrency;
    return this;
  }

  /**
   * Get concurrency
   * @return concurrency
   */
  @javax.annotation.Nonnull
  public Integer getConcurrency() {
    return concurrency;
  }

  public void setConcurrency(Integer concurrency) {
    this.concurrency = concurrency;
  }


  public CrawlWrite firstUrl(Object firstUrl) {
    this.firstUrl = firstUrl;
    return this;
  }

  /**
   * Get firstUrl
   * @return firstUrl
   */
  @javax.annotation.Nonnull
  public Object getFirstUrl() {
    return firstUrl;
  }

  public void setFirstUrl(Object firstUrl) {
    this.firstUrl = firstUrl;
  }


  public CrawlWrite headers(List<String> headers) {
    this.headers = headers;
    return this;
  }

  public CrawlWrite addHeadersItem(String headersItem) {
    if (this.headers == null) {
      this.headers = new ArrayList<>();
    }
    this.headers.add(headersItem);
    return this;
  }

  /**
   * Get headers
   * @return headers
   */
  @javax.annotation.Nullable
  public List<String> getHeaders() {
    return headers;
  }

  public void setHeaders(List<String> headers) {
    this.headers = headers;
  }


  public CrawlWrite httpBasicPassword(Object httpBasicPassword) {
    this.httpBasicPassword = httpBasicPassword;
    return this;
  }

  /**
   * Get httpBasicPassword
   * @return httpBasicPassword
   */
  @javax.annotation.Nullable
  public Object getHttpBasicPassword() {
    return httpBasicPassword;
  }

  public void setHttpBasicPassword(Object httpBasicPassword) {
    this.httpBasicPassword = httpBasicPassword;
  }


  public CrawlWrite httpBasicUser(Object httpBasicUser) {
    this.httpBasicUser = httpBasicUser;
    return this;
  }

  /**
   * Get httpBasicUser
   * @return httpBasicUser
   */
  @javax.annotation.Nullable
  public Object getHttpBasicUser() {
    return httpBasicUser;
  }

  public void setHttpBasicUser(Object httpBasicUser) {
    this.httpBasicUser = httpBasicUser;
  }


  public CrawlWrite maxDepth(Integer maxDepth) {
    this.maxDepth = maxDepth;
    return this;
  }

  /**
   * Get maxDepth
   * @return maxDepth
   */
  @javax.annotation.Nonnull
  public Integer getMaxDepth() {
    return maxDepth;
  }

  public void setMaxDepth(Integer maxDepth) {
    this.maxDepth = maxDepth;
  }


  public CrawlWrite maxDuration(Integer maxDuration) {
    this.maxDuration = maxDuration;
    return this;
  }

  /**
   * Get maxDuration
   * @return maxDuration
   */
  @javax.annotation.Nonnull
  public Integer getMaxDuration() {
    return maxDuration;
  }

  public void setMaxDuration(Integer maxDuration) {
    this.maxDuration = maxDuration;
  }


  public CrawlWrite maxUrls(Integer maxUrls) {
    this.maxUrls = maxUrls;
    return this;
  }

  /**
   * Get maxUrls
   * @return maxUrls
   */
  @javax.annotation.Nonnull
  public Integer getMaxUrls() {
    return maxUrls;
  }

  public void setMaxUrls(Integer maxUrls) {
    this.maxUrls = maxUrls;
  }


  public CrawlWrite otherDomains(List<String> otherDomains) {
    this.otherDomains = otherDomains;
    return this;
  }

  public CrawlWrite addOtherDomainsItem(String otherDomainsItem) {
    if (this.otherDomains == null) {
      this.otherDomains = new ArrayList<>();
    }
    this.otherDomains.add(otherDomainsItem);
    return this;
  }

  /**
   * Get otherDomains
   * @return otherDomains
   */
  @javax.annotation.Nullable
  public List<String> getOtherDomains() {
    return otherDomains;
  }

  public void setOtherDomains(List<String> otherDomains) {
    this.otherDomains = otherDomains;
  }


  public CrawlWrite project(String project) {
    this.project = project;
    return this;
  }

  /**
   * Get project
   * @return project
   */
  @javax.annotation.Nonnull
  public String getProject() {
    return project;
  }

  public void setProject(String project) {
    this.project = project;
  }


  public CrawlWrite sslCheckingDisabled(Boolean sslCheckingDisabled) {
    this.sslCheckingDisabled = sslCheckingDisabled;
    return this;
  }

  /**
   * Get sslCheckingDisabled
   * @return sslCheckingDisabled
   */
  @javax.annotation.Nonnull
  public Boolean getSslCheckingDisabled() {
    return sslCheckingDisabled;
  }

  public void setSslCheckingDisabled(Boolean sslCheckingDisabled) {
    this.sslCheckingDisabled = sslCheckingDisabled;
  }


  public CrawlWrite subdomainIncluded(Boolean subdomainIncluded) {
    this.subdomainIncluded = subdomainIncluded;
    return this;
  }

  /**
   * Get subdomainIncluded
   * @return subdomainIncluded
   */
  @javax.annotation.Nonnull
  public Boolean getSubdomainIncluded() {
    return subdomainIncluded;
  }

  public void setSubdomainIncluded(Boolean subdomainIncluded) {
    this.subdomainIncluded = subdomainIncluded;
  }


  public CrawlWrite userAgent(Object userAgent) {
    this.userAgent = userAgent;
    return this;
  }

  /**
   * Get userAgent
   * @return userAgent
   */
  @javax.annotation.Nullable
  public Object getUserAgent() {
    return userAgent;
  }

  public void setUserAgent(Object userAgent) {
    this.userAgent = userAgent;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CrawlWrite crawlWrite = (CrawlWrite) o;
    return Objects.equals(this.concurrency, crawlWrite.concurrency) &&
        Objects.equals(this.firstUrl, crawlWrite.firstUrl) &&
        Objects.equals(this.headers, crawlWrite.headers) &&
        Objects.equals(this.httpBasicPassword, crawlWrite.httpBasicPassword) &&
        Objects.equals(this.httpBasicUser, crawlWrite.httpBasicUser) &&
        Objects.equals(this.maxDepth, crawlWrite.maxDepth) &&
        Objects.equals(this.maxDuration, crawlWrite.maxDuration) &&
        Objects.equals(this.maxUrls, crawlWrite.maxUrls) &&
        Objects.equals(this.otherDomains, crawlWrite.otherDomains) &&
        Objects.equals(this.project, crawlWrite.project) &&
        Objects.equals(this.sslCheckingDisabled, crawlWrite.sslCheckingDisabled) &&
        Objects.equals(this.subdomainIncluded, crawlWrite.subdomainIncluded) &&
        Objects.equals(this.userAgent, crawlWrite.userAgent);
  }

  @Override
  public int hashCode() {
    return Objects.hash(concurrency, firstUrl, headers, httpBasicPassword, httpBasicUser, maxDepth, maxDuration, maxUrls, otherDomains, project, sslCheckingDisabled, subdomainIncluded, userAgent);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CrawlWrite {\n");
    sb.append("    concurrency: ").append(toIndentedString(concurrency)).append("\n");
    sb.append("    firstUrl: ").append(toIndentedString(firstUrl)).append("\n");
    sb.append("    headers: ").append(toIndentedString(headers)).append("\n");
    sb.append("    httpBasicPassword: ").append(toIndentedString(httpBasicPassword)).append("\n");
    sb.append("    httpBasicUser: ").append(toIndentedString(httpBasicUser)).append("\n");
    sb.append("    maxDepth: ").append(toIndentedString(maxDepth)).append("\n");
    sb.append("    maxDuration: ").append(toIndentedString(maxDuration)).append("\n");
    sb.append("    maxUrls: ").append(toIndentedString(maxUrls)).append("\n");
    sb.append("    otherDomains: ").append(toIndentedString(otherDomains)).append("\n");
    sb.append("    project: ").append(toIndentedString(project)).append("\n");
    sb.append("    sslCheckingDisabled: ").append(toIndentedString(sslCheckingDisabled)).append("\n");
    sb.append("    subdomainIncluded: ").append(toIndentedString(subdomainIncluded)).append("\n");
    sb.append("    userAgent: ").append(toIndentedString(userAgent)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("concurrency");
    openapiFields.add("firstUrl");
    openapiFields.add("headers");
    openapiFields.add("httpBasicPassword");
    openapiFields.add("httpBasicUser");
    openapiFields.add("maxDepth");
    openapiFields.add("maxDuration");
    openapiFields.add("maxUrls");
    openapiFields.add("otherDomains");
    openapiFields.add("project");
    openapiFields.add("sslCheckingDisabled");
    openapiFields.add("subdomainIncluded");
    openapiFields.add("userAgent");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("concurrency");
    openapiRequiredFields.add("firstUrl");
    openapiRequiredFields.add("maxDepth");
    openapiRequiredFields.add("maxDuration");
    openapiRequiredFields.add("maxUrls");
    openapiRequiredFields.add("project");
    openapiRequiredFields.add("sslCheckingDisabled");
    openapiRequiredFields.add("subdomainIncluded");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CrawlWrite
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CrawlWrite.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CrawlWrite is not found in the empty JSON string", CrawlWrite.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CrawlWrite.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CrawlWrite` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CrawlWrite.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("headers") != null && !jsonObj.get("headers").isJsonNull() && !jsonObj.get("headers").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `headers` to be an array in the JSON string but got `%s`", jsonObj.get("headers").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("otherDomains") != null && !jsonObj.get("otherDomains").isJsonNull() && !jsonObj.get("otherDomains").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `otherDomains` to be an array in the JSON string but got `%s`", jsonObj.get("otherDomains").toString()));
      }
      if (!jsonObj.get("project").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `project` to be a primitive type in the JSON string but got `%s`", jsonObj.get("project").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CrawlWrite.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CrawlWrite' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CrawlWrite> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CrawlWrite.class));

       return (TypeAdapter<T>) new TypeAdapter<CrawlWrite>() {
           @Override
           public void write(JsonWriter out, CrawlWrite value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CrawlWrite read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CrawlWrite given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CrawlWrite
   * @throws IOException if the JSON string is invalid with respect to CrawlWrite
   */
  public static CrawlWrite fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CrawlWrite.class);
  }

  /**
   * Convert an instance of CrawlWrite to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

