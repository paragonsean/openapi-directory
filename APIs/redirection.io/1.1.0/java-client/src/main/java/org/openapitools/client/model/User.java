/*
 * redirection.io
 * API documentation for redirection.io
 *
 * The version of the OpenAPI document: 1.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Organization;
import org.openapitools.client.model.UserOrganization;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:00:05.237264-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class User {
  public static final String SERIALIZED_NAME_CURRENT_PASSWORD = "currentPassword";
  @SerializedName(SERIALIZED_NAME_CURRENT_PASSWORD)
  private Object currentPassword;

  public static final String SERIALIZED_NAME_DEFAULT_ORGANIZATION = "defaultOrganization";
  @SerializedName(SERIALIZED_NAME_DEFAULT_ORGANIZATION)
  private Organization defaultOrganization;

  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private String email;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NEW_EMAIL = "newEmail";
  @SerializedName(SERIALIZED_NAME_NEW_EMAIL)
  private String newEmail;

  public static final String SERIALIZED_NAME_NEW_EMAIL_TOKEN = "newEmailToken";
  @SerializedName(SERIALIZED_NAME_NEW_EMAIL_TOKEN)
  private String newEmailToken;

  public static final String SERIALIZED_NAME_NEW_EMAIL_TOKEN_EXPIRED_AT = "newEmailTokenExpiredAt";
  @SerializedName(SERIALIZED_NAME_NEW_EMAIL_TOKEN_EXPIRED_AT)
  private OffsetDateTime newEmailTokenExpiredAt;

  public static final String SERIALIZED_NAME_PASSWORD = "password";
  @SerializedName(SERIALIZED_NAME_PASSWORD)
  private String password;

  public static final String SERIALIZED_NAME_PLAIN_PASSWORD = "plainPassword";
  @SerializedName(SERIALIZED_NAME_PLAIN_PASSWORD)
  private String plainPassword;

  public static final String SERIALIZED_NAME_PLAIN_PASSWORD_REPEAT = "plainPasswordRepeat";
  @SerializedName(SERIALIZED_NAME_PLAIN_PASSWORD_REPEAT)
  private Object plainPasswordRepeat;

  public static final String SERIALIZED_NAME_PROJECTS_FLATTENED = "projectsFlattened";
  @SerializedName(SERIALIZED_NAME_PROJECTS_FLATTENED)
  private List<String> projectsFlattened = new ArrayList<>();

  public static final String SERIALIZED_NAME_SUPER_ADMIN = "superAdmin";
  @SerializedName(SERIALIZED_NAME_SUPER_ADMIN)
  private Boolean superAdmin;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updatedAt";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  private OffsetDateTime updatedAt;

  public static final String SERIALIZED_NAME_USER_ORGANIZATIONS = "userOrganizations";
  @SerializedName(SERIALIZED_NAME_USER_ORGANIZATIONS)
  private List<UserOrganization> userOrganizations = new ArrayList<>();

  public static final String SERIALIZED_NAME_USER_PROJECTS = "userProjects";
  @SerializedName(SERIALIZED_NAME_USER_PROJECTS)
  private List<String> userProjects = new ArrayList<>();

  public User() {
  }

  public User(
     String id
  ) {
    this();
    this.id = id;
  }

  public User currentPassword(Object currentPassword) {
    this.currentPassword = currentPassword;
    return this;
  }

  /**
   * Get currentPassword
   * @return currentPassword
   */
  @javax.annotation.Nullable
  public Object getCurrentPassword() {
    return currentPassword;
  }

  public void setCurrentPassword(Object currentPassword) {
    this.currentPassword = currentPassword;
  }


  public User defaultOrganization(Organization defaultOrganization) {
    this.defaultOrganization = defaultOrganization;
    return this;
  }

  /**
   * Get defaultOrganization
   * @return defaultOrganization
   */
  @javax.annotation.Nullable
  public Organization getDefaultOrganization() {
    return defaultOrganization;
  }

  public void setDefaultOrganization(Organization defaultOrganization) {
    this.defaultOrganization = defaultOrganization;
  }


  public User email(String email) {
    this.email = email;
    return this;
  }

  /**
   * Get email
   * @return email
   */
  @javax.annotation.Nonnull
  public String getEmail() {
    return email;
  }

  public void setEmail(String email) {
    this.email = email;
  }


  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }



  public User name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public User newEmail(String newEmail) {
    this.newEmail = newEmail;
    return this;
  }

  /**
   * Get newEmail
   * @return newEmail
   */
  @javax.annotation.Nullable
  public String getNewEmail() {
    return newEmail;
  }

  public void setNewEmail(String newEmail) {
    this.newEmail = newEmail;
  }


  public User newEmailToken(String newEmailToken) {
    this.newEmailToken = newEmailToken;
    return this;
  }

  /**
   * Get newEmailToken
   * @return newEmailToken
   */
  @javax.annotation.Nullable
  public String getNewEmailToken() {
    return newEmailToken;
  }

  public void setNewEmailToken(String newEmailToken) {
    this.newEmailToken = newEmailToken;
  }


  public User newEmailTokenExpiredAt(OffsetDateTime newEmailTokenExpiredAt) {
    this.newEmailTokenExpiredAt = newEmailTokenExpiredAt;
    return this;
  }

  /**
   * Get newEmailTokenExpiredAt
   * @return newEmailTokenExpiredAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getNewEmailTokenExpiredAt() {
    return newEmailTokenExpiredAt;
  }

  public void setNewEmailTokenExpiredAt(OffsetDateTime newEmailTokenExpiredAt) {
    this.newEmailTokenExpiredAt = newEmailTokenExpiredAt;
  }


  public User password(String password) {
    this.password = password;
    return this;
  }

  /**
   * Get password
   * @return password
   */
  @javax.annotation.Nullable
  public String getPassword() {
    return password;
  }

  public void setPassword(String password) {
    this.password = password;
  }


  public User plainPassword(String plainPassword) {
    this.plainPassword = plainPassword;
    return this;
  }

  /**
   * Get plainPassword
   * @return plainPassword
   */
  @javax.annotation.Nullable
  public String getPlainPassword() {
    return plainPassword;
  }

  public void setPlainPassword(String plainPassword) {
    this.plainPassword = plainPassword;
  }


  public User plainPasswordRepeat(Object plainPasswordRepeat) {
    this.plainPasswordRepeat = plainPasswordRepeat;
    return this;
  }

  /**
   * Get plainPasswordRepeat
   * @return plainPasswordRepeat
   */
  @javax.annotation.Nullable
  public Object getPlainPasswordRepeat() {
    return plainPasswordRepeat;
  }

  public void setPlainPasswordRepeat(Object plainPasswordRepeat) {
    this.plainPasswordRepeat = plainPasswordRepeat;
  }


  public User projectsFlattened(List<String> projectsFlattened) {
    this.projectsFlattened = projectsFlattened;
    return this;
  }

  public User addProjectsFlattenedItem(String projectsFlattenedItem) {
    if (this.projectsFlattened == null) {
      this.projectsFlattened = new ArrayList<>();
    }
    this.projectsFlattened.add(projectsFlattenedItem);
    return this;
  }

  /**
   * Get projectsFlattened
   * @return projectsFlattened
   */
  @javax.annotation.Nullable
  public List<String> getProjectsFlattened() {
    return projectsFlattened;
  }

  public void setProjectsFlattened(List<String> projectsFlattened) {
    this.projectsFlattened = projectsFlattened;
  }


  public User superAdmin(Boolean superAdmin) {
    this.superAdmin = superAdmin;
    return this;
  }

  /**
   * Get superAdmin
   * @return superAdmin
   */
  @javax.annotation.Nullable
  public Boolean getSuperAdmin() {
    return superAdmin;
  }

  public void setSuperAdmin(Boolean superAdmin) {
    this.superAdmin = superAdmin;
  }


  public User updatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
    return this;
  }

  /**
   * Get updatedAt
   * @return updatedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }

  public void setUpdatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
  }


  public User userOrganizations(List<UserOrganization> userOrganizations) {
    this.userOrganizations = userOrganizations;
    return this;
  }

  public User addUserOrganizationsItem(UserOrganization userOrganizationsItem) {
    if (this.userOrganizations == null) {
      this.userOrganizations = new ArrayList<>();
    }
    this.userOrganizations.add(userOrganizationsItem);
    return this;
  }

  /**
   * Get userOrganizations
   * @return userOrganizations
   */
  @javax.annotation.Nullable
  public List<UserOrganization> getUserOrganizations() {
    return userOrganizations;
  }

  public void setUserOrganizations(List<UserOrganization> userOrganizations) {
    this.userOrganizations = userOrganizations;
  }


  public User userProjects(List<String> userProjects) {
    this.userProjects = userProjects;
    return this;
  }

  public User addUserProjectsItem(String userProjectsItem) {
    if (this.userProjects == null) {
      this.userProjects = new ArrayList<>();
    }
    this.userProjects.add(userProjectsItem);
    return this;
  }

  /**
   * Get userProjects
   * @return userProjects
   */
  @javax.annotation.Nullable
  public List<String> getUserProjects() {
    return userProjects;
  }

  public void setUserProjects(List<String> userProjects) {
    this.userProjects = userProjects;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    User user = (User) o;
    return Objects.equals(this.currentPassword, user.currentPassword) &&
        Objects.equals(this.defaultOrganization, user.defaultOrganization) &&
        Objects.equals(this.email, user.email) &&
        Objects.equals(this.id, user.id) &&
        Objects.equals(this.name, user.name) &&
        Objects.equals(this.newEmail, user.newEmail) &&
        Objects.equals(this.newEmailToken, user.newEmailToken) &&
        Objects.equals(this.newEmailTokenExpiredAt, user.newEmailTokenExpiredAt) &&
        Objects.equals(this.password, user.password) &&
        Objects.equals(this.plainPassword, user.plainPassword) &&
        Objects.equals(this.plainPasswordRepeat, user.plainPasswordRepeat) &&
        Objects.equals(this.projectsFlattened, user.projectsFlattened) &&
        Objects.equals(this.superAdmin, user.superAdmin) &&
        Objects.equals(this.updatedAt, user.updatedAt) &&
        Objects.equals(this.userOrganizations, user.userOrganizations) &&
        Objects.equals(this.userProjects, user.userProjects);
  }

  @Override
  public int hashCode() {
    return Objects.hash(currentPassword, defaultOrganization, email, id, name, newEmail, newEmailToken, newEmailTokenExpiredAt, password, plainPassword, plainPasswordRepeat, projectsFlattened, superAdmin, updatedAt, userOrganizations, userProjects);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class User {\n");
    sb.append("    currentPassword: ").append(toIndentedString(currentPassword)).append("\n");
    sb.append("    defaultOrganization: ").append(toIndentedString(defaultOrganization)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    newEmail: ").append(toIndentedString(newEmail)).append("\n");
    sb.append("    newEmailToken: ").append(toIndentedString(newEmailToken)).append("\n");
    sb.append("    newEmailTokenExpiredAt: ").append(toIndentedString(newEmailTokenExpiredAt)).append("\n");
    sb.append("    password: ").append(toIndentedString(password)).append("\n");
    sb.append("    plainPassword: ").append(toIndentedString(plainPassword)).append("\n");
    sb.append("    plainPasswordRepeat: ").append(toIndentedString(plainPasswordRepeat)).append("\n");
    sb.append("    projectsFlattened: ").append(toIndentedString(projectsFlattened)).append("\n");
    sb.append("    superAdmin: ").append(toIndentedString(superAdmin)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("    userOrganizations: ").append(toIndentedString(userOrganizations)).append("\n");
    sb.append("    userProjects: ").append(toIndentedString(userProjects)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("currentPassword");
    openapiFields.add("defaultOrganization");
    openapiFields.add("email");
    openapiFields.add("id");
    openapiFields.add("name");
    openapiFields.add("newEmail");
    openapiFields.add("newEmailToken");
    openapiFields.add("newEmailTokenExpiredAt");
    openapiFields.add("password");
    openapiFields.add("plainPassword");
    openapiFields.add("plainPasswordRepeat");
    openapiFields.add("projectsFlattened");
    openapiFields.add("superAdmin");
    openapiFields.add("updatedAt");
    openapiFields.add("userOrganizations");
    openapiFields.add("userProjects");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("email");
    openapiRequiredFields.add("name");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to User
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!User.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in User is not found in the empty JSON string", User.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!User.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `User` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : User.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `defaultOrganization`
      if (jsonObj.get("defaultOrganization") != null && !jsonObj.get("defaultOrganization").isJsonNull()) {
        Organization.validateJsonElement(jsonObj.get("defaultOrganization"));
      }
      if (!jsonObj.get("email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("newEmail") != null && !jsonObj.get("newEmail").isJsonNull()) && !jsonObj.get("newEmail").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `newEmail` to be a primitive type in the JSON string but got `%s`", jsonObj.get("newEmail").toString()));
      }
      if ((jsonObj.get("newEmailToken") != null && !jsonObj.get("newEmailToken").isJsonNull()) && !jsonObj.get("newEmailToken").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `newEmailToken` to be a primitive type in the JSON string but got `%s`", jsonObj.get("newEmailToken").toString()));
      }
      if ((jsonObj.get("password") != null && !jsonObj.get("password").isJsonNull()) && !jsonObj.get("password").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `password` to be a primitive type in the JSON string but got `%s`", jsonObj.get("password").toString()));
      }
      if ((jsonObj.get("plainPassword") != null && !jsonObj.get("plainPassword").isJsonNull()) && !jsonObj.get("plainPassword").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `plainPassword` to be a primitive type in the JSON string but got `%s`", jsonObj.get("plainPassword").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("projectsFlattened") != null && !jsonObj.get("projectsFlattened").isJsonNull() && !jsonObj.get("projectsFlattened").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `projectsFlattened` to be an array in the JSON string but got `%s`", jsonObj.get("projectsFlattened").toString()));
      }
      if (jsonObj.get("userOrganizations") != null && !jsonObj.get("userOrganizations").isJsonNull()) {
        JsonArray jsonArrayuserOrganizations = jsonObj.getAsJsonArray("userOrganizations");
        if (jsonArrayuserOrganizations != null) {
          // ensure the json data is an array
          if (!jsonObj.get("userOrganizations").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `userOrganizations` to be an array in the JSON string but got `%s`", jsonObj.get("userOrganizations").toString()));
          }

          // validate the optional field `userOrganizations` (array)
          for (int i = 0; i < jsonArrayuserOrganizations.size(); i++) {
            UserOrganization.validateJsonElement(jsonArrayuserOrganizations.get(i));
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("userProjects") != null && !jsonObj.get("userProjects").isJsonNull() && !jsonObj.get("userProjects").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `userProjects` to be an array in the JSON string but got `%s`", jsonObj.get("userProjects").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!User.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'User' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<User> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(User.class));

       return (TypeAdapter<T>) new TypeAdapter<User>() {
           @Override
           public void write(JsonWriter out, User value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public User read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of User given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of User
   * @throws IOException if the JSON string is invalid with respect to User
   */
  public static User fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, User.class);
  }

  /**
   * Convert an instance of User to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

