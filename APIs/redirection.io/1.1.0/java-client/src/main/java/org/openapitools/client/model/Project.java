/*
 * redirection.io
 * API documentation for redirection.io
 *
 * The version of the OpenAPI document: 1.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Organization;
import org.openapitools.client.model.RuleSetVersion;
import org.openapitools.client.model.UserProject;
import org.openapitools.client.model.UserProjectFlattened;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:00:05.237264-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Project {
  public static final String SERIALIZED_NAME_COMPLEX_RULES_COUNT = "complexRulesCount";
  @SerializedName(SERIALIZED_NAME_COMPLEX_RULES_COUNT)
  private Integer complexRulesCount;

  public static final String SERIALIZED_NAME_COMPLEX_RULES_UPDATED_AT = "complexRulesUpdatedAt";
  @SerializedName(SERIALIZED_NAME_COMPLEX_RULES_UPDATED_AT)
  private OffsetDateTime complexRulesUpdatedAt;

  public static final String SERIALIZED_NAME_CONFIGURATION = "configuration";
  @SerializedName(SERIALIZED_NAME_CONFIGURATION)
  private List<String> _configuration = new ArrayList<>();

  public static final String SERIALIZED_NAME_CREATED_AT = "createdAt";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_CURRENT_VERSION = "currentVersion";
  @SerializedName(SERIALIZED_NAME_CURRENT_VERSION)
  private RuleSetVersion currentVersion;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_IGNORE_PROJECT_TYPES = "ignoreProjectTypes";
  @SerializedName(SERIALIZED_NAME_IGNORE_PROJECT_TYPES)
  private List<String> ignoreProjectTypes = new ArrayList<>();

  public static final String SERIALIZED_NAME_IS_PUBLISHING = "isPublishing";
  @SerializedName(SERIALIZED_NAME_IS_PUBLISHING)
  private Boolean isPublishing;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_ONBOARDING_COMPLETED_DEMOS = "onboardingCompletedDemos";
  @SerializedName(SERIALIZED_NAME_ONBOARDING_COMPLETED_DEMOS)
  private List<String> onboardingCompletedDemos = new ArrayList<>();

  public static final String SERIALIZED_NAME_ORGANIZATION = "organization";
  @SerializedName(SERIALIZED_NAME_ORGANIZATION)
  private Organization organization;

  public static final String SERIALIZED_NAME_PLAN = "plan";
  @SerializedName(SERIALIZED_NAME_PLAN)
  private Integer plan;

  public static final String SERIALIZED_NAME_RULES_HASH = "rulesHash";
  @SerializedName(SERIALIZED_NAME_RULES_HASH)
  private String rulesHash;

  public static final String SERIALIZED_NAME_SLUG = "slug";
  @SerializedName(SERIALIZED_NAME_SLUG)
  private String slug;

  public static final String SERIALIZED_NAME_STRAIGHT_RULES_COUNT = "straightRulesCount";
  @SerializedName(SERIALIZED_NAME_STRAIGHT_RULES_COUNT)
  private Integer straightRulesCount;

  public static final String SERIALIZED_NAME_STRAIGHT_RULES_UPDATED_AT = "straightRulesUpdatedAt";
  @SerializedName(SERIALIZED_NAME_STRAIGHT_RULES_UPDATED_AT)
  private OffsetDateTime straightRulesUpdatedAt;

  public static final String SERIALIZED_NAME_TOKEN = "token";
  @SerializedName(SERIALIZED_NAME_TOKEN)
  private String token;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updatedAt";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  private OffsetDateTime updatedAt;

  public static final String SERIALIZED_NAME_USER_PROJECTS = "userProjects";
  @SerializedName(SERIALIZED_NAME_USER_PROJECTS)
  private List<UserProject> userProjects = new ArrayList<>();

  public static final String SERIALIZED_NAME_USERS_FLATTENED = "usersFlattened";
  @SerializedName(SERIALIZED_NAME_USERS_FLATTENED)
  private List<UserProjectFlattened> usersFlattened = new ArrayList<>();

  public static final String SERIALIZED_NAME_WORKING_VERSION = "workingVersion";
  @SerializedName(SERIALIZED_NAME_WORKING_VERSION)
  private RuleSetVersion workingVersion;

  public Project() {
  }

  public Project(
     Integer complexRulesCount, 
     OffsetDateTime complexRulesUpdatedAt, 
     List<String> _configuration, 
     OffsetDateTime createdAt, 
     String id, 
     Boolean isPublishing, 
     Integer plan, 
     String rulesHash, 
     String slug, 
     Integer straightRulesCount, 
     OffsetDateTime straightRulesUpdatedAt, 
     String token, 
     OffsetDateTime updatedAt, 
     List<UserProject> userProjects, 
     List<UserProjectFlattened> usersFlattened
  ) {
    this();
    this.complexRulesCount = complexRulesCount;
    this.complexRulesUpdatedAt = complexRulesUpdatedAt;
    this._configuration = _configuration;
    this.createdAt = createdAt;
    this.id = id;
    this.isPublishing = isPublishing;
    this.plan = plan;
    this.rulesHash = rulesHash;
    this.slug = slug;
    this.straightRulesCount = straightRulesCount;
    this.straightRulesUpdatedAt = straightRulesUpdatedAt;
    this.token = token;
    this.updatedAt = updatedAt;
    this.userProjects = userProjects;
    this.usersFlattened = usersFlattened;
  }

  /**
   * Get complexRulesCount
   * @return complexRulesCount
   */
  @javax.annotation.Nullable
  public Integer getComplexRulesCount() {
    return complexRulesCount;
  }



  /**
   * Get complexRulesUpdatedAt
   * @return complexRulesUpdatedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getComplexRulesUpdatedAt() {
    return complexRulesUpdatedAt;
  }



  /**
   * Get _configuration
   * @return _configuration
   */
  @javax.annotation.Nullable
  public List<String> getConfiguration() {
    return _configuration;
  }



  /**
   * Get createdAt
   * @return createdAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }



  public Project currentVersion(RuleSetVersion currentVersion) {
    this.currentVersion = currentVersion;
    return this;
  }

  /**
   * Get currentVersion
   * @return currentVersion
   */
  @javax.annotation.Nullable
  public RuleSetVersion getCurrentVersion() {
    return currentVersion;
  }

  public void setCurrentVersion(RuleSetVersion currentVersion) {
    this.currentVersion = currentVersion;
  }


  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }



  public Project ignoreProjectTypes(List<String> ignoreProjectTypes) {
    this.ignoreProjectTypes = ignoreProjectTypes;
    return this;
  }

  public Project addIgnoreProjectTypesItem(String ignoreProjectTypesItem) {
    if (this.ignoreProjectTypes == null) {
      this.ignoreProjectTypes = new ArrayList<>();
    }
    this.ignoreProjectTypes.add(ignoreProjectTypesItem);
    return this;
  }

  /**
   * Get ignoreProjectTypes
   * @return ignoreProjectTypes
   */
  @javax.annotation.Nullable
  public List<String> getIgnoreProjectTypes() {
    return ignoreProjectTypes;
  }

  public void setIgnoreProjectTypes(List<String> ignoreProjectTypes) {
    this.ignoreProjectTypes = ignoreProjectTypes;
  }


  /**
   * Get isPublishing
   * @return isPublishing
   */
  @javax.annotation.Nullable
  public Boolean getIsPublishing() {
    return isPublishing;
  }



  public Project name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public Project onboardingCompletedDemos(List<String> onboardingCompletedDemos) {
    this.onboardingCompletedDemos = onboardingCompletedDemos;
    return this;
  }

  public Project addOnboardingCompletedDemosItem(String onboardingCompletedDemosItem) {
    if (this.onboardingCompletedDemos == null) {
      this.onboardingCompletedDemos = new ArrayList<>();
    }
    this.onboardingCompletedDemos.add(onboardingCompletedDemosItem);
    return this;
  }

  /**
   * Get onboardingCompletedDemos
   * @return onboardingCompletedDemos
   */
  @javax.annotation.Nullable
  public List<String> getOnboardingCompletedDemos() {
    return onboardingCompletedDemos;
  }

  public void setOnboardingCompletedDemos(List<String> onboardingCompletedDemos) {
    this.onboardingCompletedDemos = onboardingCompletedDemos;
  }


  public Project organization(Organization organization) {
    this.organization = organization;
    return this;
  }

  /**
   * Get organization
   * @return organization
   */
  @javax.annotation.Nullable
  public Organization getOrganization() {
    return organization;
  }

  public void setOrganization(Organization organization) {
    this.organization = organization;
  }


  /**
   * Get plan
   * @return plan
   */
  @javax.annotation.Nullable
  public Integer getPlan() {
    return plan;
  }



  /**
   * Get rulesHash
   * @return rulesHash
   */
  @javax.annotation.Nullable
  public String getRulesHash() {
    return rulesHash;
  }



  /**
   * Get slug
   * @return slug
   */
  @javax.annotation.Nullable
  public String getSlug() {
    return slug;
  }



  /**
   * Get straightRulesCount
   * @return straightRulesCount
   */
  @javax.annotation.Nullable
  public Integer getStraightRulesCount() {
    return straightRulesCount;
  }



  /**
   * Get straightRulesUpdatedAt
   * @return straightRulesUpdatedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getStraightRulesUpdatedAt() {
    return straightRulesUpdatedAt;
  }



  /**
   * Get token
   * @return token
   */
  @javax.annotation.Nullable
  public String getToken() {
    return token;
  }



  /**
   * Get updatedAt
   * @return updatedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }



  /**
   * Get userProjects
   * @return userProjects
   */
  @javax.annotation.Nullable
  public List<UserProject> getUserProjects() {
    return userProjects;
  }



  /**
   * Get usersFlattened
   * @return usersFlattened
   */
  @javax.annotation.Nullable
  public List<UserProjectFlattened> getUsersFlattened() {
    return usersFlattened;
  }



  public Project workingVersion(RuleSetVersion workingVersion) {
    this.workingVersion = workingVersion;
    return this;
  }

  /**
   * Get workingVersion
   * @return workingVersion
   */
  @javax.annotation.Nullable
  public RuleSetVersion getWorkingVersion() {
    return workingVersion;
  }

  public void setWorkingVersion(RuleSetVersion workingVersion) {
    this.workingVersion = workingVersion;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Project project = (Project) o;
    return Objects.equals(this.complexRulesCount, project.complexRulesCount) &&
        Objects.equals(this.complexRulesUpdatedAt, project.complexRulesUpdatedAt) &&
        Objects.equals(this._configuration, project._configuration) &&
        Objects.equals(this.createdAt, project.createdAt) &&
        Objects.equals(this.currentVersion, project.currentVersion) &&
        Objects.equals(this.id, project.id) &&
        Objects.equals(this.ignoreProjectTypes, project.ignoreProjectTypes) &&
        Objects.equals(this.isPublishing, project.isPublishing) &&
        Objects.equals(this.name, project.name) &&
        Objects.equals(this.onboardingCompletedDemos, project.onboardingCompletedDemos) &&
        Objects.equals(this.organization, project.organization) &&
        Objects.equals(this.plan, project.plan) &&
        Objects.equals(this.rulesHash, project.rulesHash) &&
        Objects.equals(this.slug, project.slug) &&
        Objects.equals(this.straightRulesCount, project.straightRulesCount) &&
        Objects.equals(this.straightRulesUpdatedAt, project.straightRulesUpdatedAt) &&
        Objects.equals(this.token, project.token) &&
        Objects.equals(this.updatedAt, project.updatedAt) &&
        Objects.equals(this.userProjects, project.userProjects) &&
        Objects.equals(this.usersFlattened, project.usersFlattened) &&
        Objects.equals(this.workingVersion, project.workingVersion);
  }

  @Override
  public int hashCode() {
    return Objects.hash(complexRulesCount, complexRulesUpdatedAt, _configuration, createdAt, currentVersion, id, ignoreProjectTypes, isPublishing, name, onboardingCompletedDemos, organization, plan, rulesHash, slug, straightRulesCount, straightRulesUpdatedAt, token, updatedAt, userProjects, usersFlattened, workingVersion);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Project {\n");
    sb.append("    complexRulesCount: ").append(toIndentedString(complexRulesCount)).append("\n");
    sb.append("    complexRulesUpdatedAt: ").append(toIndentedString(complexRulesUpdatedAt)).append("\n");
    sb.append("    _configuration: ").append(toIndentedString(_configuration)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    currentVersion: ").append(toIndentedString(currentVersion)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    ignoreProjectTypes: ").append(toIndentedString(ignoreProjectTypes)).append("\n");
    sb.append("    isPublishing: ").append(toIndentedString(isPublishing)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    onboardingCompletedDemos: ").append(toIndentedString(onboardingCompletedDemos)).append("\n");
    sb.append("    organization: ").append(toIndentedString(organization)).append("\n");
    sb.append("    plan: ").append(toIndentedString(plan)).append("\n");
    sb.append("    rulesHash: ").append(toIndentedString(rulesHash)).append("\n");
    sb.append("    slug: ").append(toIndentedString(slug)).append("\n");
    sb.append("    straightRulesCount: ").append(toIndentedString(straightRulesCount)).append("\n");
    sb.append("    straightRulesUpdatedAt: ").append(toIndentedString(straightRulesUpdatedAt)).append("\n");
    sb.append("    token: ").append(toIndentedString(token)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("    userProjects: ").append(toIndentedString(userProjects)).append("\n");
    sb.append("    usersFlattened: ").append(toIndentedString(usersFlattened)).append("\n");
    sb.append("    workingVersion: ").append(toIndentedString(workingVersion)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("complexRulesCount");
    openapiFields.add("complexRulesUpdatedAt");
    openapiFields.add("configuration");
    openapiFields.add("createdAt");
    openapiFields.add("currentVersion");
    openapiFields.add("id");
    openapiFields.add("ignoreProjectTypes");
    openapiFields.add("isPublishing");
    openapiFields.add("name");
    openapiFields.add("onboardingCompletedDemos");
    openapiFields.add("organization");
    openapiFields.add("plan");
    openapiFields.add("rulesHash");
    openapiFields.add("slug");
    openapiFields.add("straightRulesCount");
    openapiFields.add("straightRulesUpdatedAt");
    openapiFields.add("token");
    openapiFields.add("updatedAt");
    openapiFields.add("userProjects");
    openapiFields.add("usersFlattened");
    openapiFields.add("workingVersion");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("name");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Project
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Project.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Project is not found in the empty JSON string", Project.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Project.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Project` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Project.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("configuration") != null && !jsonObj.get("configuration").isJsonNull() && !jsonObj.get("configuration").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `configuration` to be an array in the JSON string but got `%s`", jsonObj.get("configuration").toString()));
      }
      // validate the optional field `currentVersion`
      if (jsonObj.get("currentVersion") != null && !jsonObj.get("currentVersion").isJsonNull()) {
        RuleSetVersion.validateJsonElement(jsonObj.get("currentVersion"));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("ignoreProjectTypes") != null && !jsonObj.get("ignoreProjectTypes").isJsonNull() && !jsonObj.get("ignoreProjectTypes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `ignoreProjectTypes` to be an array in the JSON string but got `%s`", jsonObj.get("ignoreProjectTypes").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("onboardingCompletedDemos") != null && !jsonObj.get("onboardingCompletedDemos").isJsonNull() && !jsonObj.get("onboardingCompletedDemos").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `onboardingCompletedDemos` to be an array in the JSON string but got `%s`", jsonObj.get("onboardingCompletedDemos").toString()));
      }
      // validate the optional field `organization`
      if (jsonObj.get("organization") != null && !jsonObj.get("organization").isJsonNull()) {
        Organization.validateJsonElement(jsonObj.get("organization"));
      }
      if ((jsonObj.get("rulesHash") != null && !jsonObj.get("rulesHash").isJsonNull()) && !jsonObj.get("rulesHash").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rulesHash` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rulesHash").toString()));
      }
      if ((jsonObj.get("slug") != null && !jsonObj.get("slug").isJsonNull()) && !jsonObj.get("slug").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `slug` to be a primitive type in the JSON string but got `%s`", jsonObj.get("slug").toString()));
      }
      if ((jsonObj.get("token") != null && !jsonObj.get("token").isJsonNull()) && !jsonObj.get("token").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `token` to be a primitive type in the JSON string but got `%s`", jsonObj.get("token").toString()));
      }
      if (jsonObj.get("userProjects") != null && !jsonObj.get("userProjects").isJsonNull()) {
        JsonArray jsonArrayuserProjects = jsonObj.getAsJsonArray("userProjects");
        if (jsonArrayuserProjects != null) {
          // ensure the json data is an array
          if (!jsonObj.get("userProjects").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `userProjects` to be an array in the JSON string but got `%s`", jsonObj.get("userProjects").toString()));
          }

          // validate the optional field `userProjects` (array)
          for (int i = 0; i < jsonArrayuserProjects.size(); i++) {
            UserProject.validateJsonElement(jsonArrayuserProjects.get(i));
          };
        }
      }
      if (jsonObj.get("usersFlattened") != null && !jsonObj.get("usersFlattened").isJsonNull()) {
        JsonArray jsonArrayusersFlattened = jsonObj.getAsJsonArray("usersFlattened");
        if (jsonArrayusersFlattened != null) {
          // ensure the json data is an array
          if (!jsonObj.get("usersFlattened").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `usersFlattened` to be an array in the JSON string but got `%s`", jsonObj.get("usersFlattened").toString()));
          }

          // validate the optional field `usersFlattened` (array)
          for (int i = 0; i < jsonArrayusersFlattened.size(); i++) {
            UserProjectFlattened.validateJsonElement(jsonArrayusersFlattened.get(i));
          };
        }
      }
      // validate the optional field `workingVersion`
      if (jsonObj.get("workingVersion") != null && !jsonObj.get("workingVersion").isJsonNull()) {
        RuleSetVersion.validateJsonElement(jsonObj.get("workingVersion"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Project.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Project' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Project> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Project.class));

       return (TypeAdapter<T>) new TypeAdapter<Project>() {
           @Override
           public void write(JsonWriter out, Project value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Project read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Project given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Project
   * @throws IOException if the JSON string is invalid with respect to Project
   */
  public static Project fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Project.class);
  }

  /**
   * Convert an instance of Project to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

