/*
 * redirection.io
 * API documentation for redirection.io
 *
 * The version of the OpenAPI document: 1.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.LogRead;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class LogApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public LogApi() {
        this(Configuration.getDefaultApiClient());
    }

    public LogApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getLogCollection
     * @param page The collection page number (optional)
     * @param projectId  (optional)
     * @param createdAt  (optional)
     * @param source  (optional)
     * @param target  (optional)
     * @param statusCode  (optional)
     * @param referrer  (optional)
     * @param userAgent  (optional)
     * @param userAgentType  (optional)
     * @param simplifiedUserAgent  (optional)
     * @param ruleId  (optional)
     * @param instanceName  (optional)
     * @param excludeUrls  (optional)
     * @param excludeEmptyReferrer  (optional)
     * @param createdAtGt  (optional)
     * @param createdAtGte  (optional)
     * @param createdAtLt  (optional)
     * @param createdAtLte  (optional)
     * @param statusCodeGt  (optional)
     * @param statusCodeGte  (optional)
     * @param statusCodeLt  (optional)
     * @param statusCodeLte  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Log collection response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getLogCollectionCall(Integer page, String projectId, String createdAt, String source, String target, String statusCode, String referrer, String userAgent, String userAgentType, String simplifiedUserAgent, String ruleId, String instanceName, String excludeUrls, String excludeEmptyReferrer, String createdAtGt, String createdAtGte, String createdAtLt, String createdAtLte, String statusCodeGt, String statusCodeGte, String statusCodeLt, String statusCodeLte, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/logs";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (projectId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("projectId", projectId));
        }

        if (createdAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("createdAt", createdAt));
        }

        if (source != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("source", source));
        }

        if (target != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("target", target));
        }

        if (statusCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("statusCode", statusCode));
        }

        if (referrer != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("referrer", referrer));
        }

        if (userAgent != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userAgent", userAgent));
        }

        if (userAgentType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userAgentType", userAgentType));
        }

        if (simplifiedUserAgent != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("simplifiedUserAgent", simplifiedUserAgent));
        }

        if (ruleId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ruleId", ruleId));
        }

        if (instanceName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("instanceName", instanceName));
        }

        if (excludeUrls != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("excludeUrls", excludeUrls));
        }

        if (excludeEmptyReferrer != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("excludeEmptyReferrer", excludeEmptyReferrer));
        }

        if (createdAtGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("createdAt_gt", createdAtGt));
        }

        if (createdAtGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("createdAt_gte", createdAtGte));
        }

        if (createdAtLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("createdAt_lt", createdAtLt));
        }

        if (createdAtLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("createdAt_lte", createdAtLte));
        }

        if (statusCodeGt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("statusCode_gt", statusCodeGt));
        }

        if (statusCodeGte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("statusCode_gte", statusCodeGte));
        }

        if (statusCodeLt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("statusCode_lt", statusCodeLt));
        }

        if (statusCodeLte != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("statusCode_lte", statusCodeLte));
        }

        final String[] localVarAccepts = {
            "application/ld+json",
            "application/json",
            "text/html",
            "text/csv"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getLogCollectionValidateBeforeCall(Integer page, String projectId, String createdAt, String source, String target, String statusCode, String referrer, String userAgent, String userAgentType, String simplifiedUserAgent, String ruleId, String instanceName, String excludeUrls, String excludeEmptyReferrer, String createdAtGt, String createdAtGte, String createdAtLt, String createdAtLte, String statusCodeGt, String statusCodeGte, String statusCodeLt, String statusCodeLte, final ApiCallback _callback) throws ApiException {
        return getLogCollectionCall(page, projectId, createdAt, source, target, statusCode, referrer, userAgent, userAgentType, simplifiedUserAgent, ruleId, instanceName, excludeUrls, excludeEmptyReferrer, createdAtGt, createdAtGte, createdAtLt, createdAtLte, statusCodeGt, statusCodeGte, statusCodeLt, statusCodeLte, _callback);

    }

    /**
     * Retrieves the collection of Log resources.
     * 
     * @param page The collection page number (optional)
     * @param projectId  (optional)
     * @param createdAt  (optional)
     * @param source  (optional)
     * @param target  (optional)
     * @param statusCode  (optional)
     * @param referrer  (optional)
     * @param userAgent  (optional)
     * @param userAgentType  (optional)
     * @param simplifiedUserAgent  (optional)
     * @param ruleId  (optional)
     * @param instanceName  (optional)
     * @param excludeUrls  (optional)
     * @param excludeEmptyReferrer  (optional)
     * @param createdAtGt  (optional)
     * @param createdAtGte  (optional)
     * @param createdAtLt  (optional)
     * @param createdAtLte  (optional)
     * @param statusCodeGt  (optional)
     * @param statusCodeGte  (optional)
     * @param statusCodeLt  (optional)
     * @param statusCodeLte  (optional)
     * @return List&lt;LogRead&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Log collection response </td><td>  -  </td></tr>
     </table>
     */
    public List<LogRead> getLogCollection(Integer page, String projectId, String createdAt, String source, String target, String statusCode, String referrer, String userAgent, String userAgentType, String simplifiedUserAgent, String ruleId, String instanceName, String excludeUrls, String excludeEmptyReferrer, String createdAtGt, String createdAtGte, String createdAtLt, String createdAtLte, String statusCodeGt, String statusCodeGte, String statusCodeLt, String statusCodeLte) throws ApiException {
        ApiResponse<List<LogRead>> localVarResp = getLogCollectionWithHttpInfo(page, projectId, createdAt, source, target, statusCode, referrer, userAgent, userAgentType, simplifiedUserAgent, ruleId, instanceName, excludeUrls, excludeEmptyReferrer, createdAtGt, createdAtGte, createdAtLt, createdAtLte, statusCodeGt, statusCodeGte, statusCodeLt, statusCodeLte);
        return localVarResp.getData();
    }

    /**
     * Retrieves the collection of Log resources.
     * 
     * @param page The collection page number (optional)
     * @param projectId  (optional)
     * @param createdAt  (optional)
     * @param source  (optional)
     * @param target  (optional)
     * @param statusCode  (optional)
     * @param referrer  (optional)
     * @param userAgent  (optional)
     * @param userAgentType  (optional)
     * @param simplifiedUserAgent  (optional)
     * @param ruleId  (optional)
     * @param instanceName  (optional)
     * @param excludeUrls  (optional)
     * @param excludeEmptyReferrer  (optional)
     * @param createdAtGt  (optional)
     * @param createdAtGte  (optional)
     * @param createdAtLt  (optional)
     * @param createdAtLte  (optional)
     * @param statusCodeGt  (optional)
     * @param statusCodeGte  (optional)
     * @param statusCodeLt  (optional)
     * @param statusCodeLte  (optional)
     * @return ApiResponse&lt;List&lt;LogRead&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Log collection response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<LogRead>> getLogCollectionWithHttpInfo(Integer page, String projectId, String createdAt, String source, String target, String statusCode, String referrer, String userAgent, String userAgentType, String simplifiedUserAgent, String ruleId, String instanceName, String excludeUrls, String excludeEmptyReferrer, String createdAtGt, String createdAtGte, String createdAtLt, String createdAtLte, String statusCodeGt, String statusCodeGte, String statusCodeLt, String statusCodeLte) throws ApiException {
        okhttp3.Call localVarCall = getLogCollectionValidateBeforeCall(page, projectId, createdAt, source, target, statusCode, referrer, userAgent, userAgentType, simplifiedUserAgent, ruleId, instanceName, excludeUrls, excludeEmptyReferrer, createdAtGt, createdAtGte, createdAtLt, createdAtLte, statusCodeGt, statusCodeGte, statusCodeLt, statusCodeLte, null);
        Type localVarReturnType = new TypeToken<List<LogRead>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves the collection of Log resources. (asynchronously)
     * 
     * @param page The collection page number (optional)
     * @param projectId  (optional)
     * @param createdAt  (optional)
     * @param source  (optional)
     * @param target  (optional)
     * @param statusCode  (optional)
     * @param referrer  (optional)
     * @param userAgent  (optional)
     * @param userAgentType  (optional)
     * @param simplifiedUserAgent  (optional)
     * @param ruleId  (optional)
     * @param instanceName  (optional)
     * @param excludeUrls  (optional)
     * @param excludeEmptyReferrer  (optional)
     * @param createdAtGt  (optional)
     * @param createdAtGte  (optional)
     * @param createdAtLt  (optional)
     * @param createdAtLte  (optional)
     * @param statusCodeGt  (optional)
     * @param statusCodeGte  (optional)
     * @param statusCodeLt  (optional)
     * @param statusCodeLte  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Log collection response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getLogCollectionAsync(Integer page, String projectId, String createdAt, String source, String target, String statusCode, String referrer, String userAgent, String userAgentType, String simplifiedUserAgent, String ruleId, String instanceName, String excludeUrls, String excludeEmptyReferrer, String createdAtGt, String createdAtGte, String createdAtLt, String createdAtLte, String statusCodeGt, String statusCodeGte, String statusCodeLt, String statusCodeLte, final ApiCallback<List<LogRead>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getLogCollectionValidateBeforeCall(page, projectId, createdAt, source, target, statusCode, referrer, userAgent, userAgentType, simplifiedUserAgent, ruleId, instanceName, excludeUrls, excludeEmptyReferrer, createdAtGt, createdAtGte, createdAtLt, createdAtLte, statusCodeGt, statusCodeGte, statusCodeLt, statusCodeLte, _callback);
        Type localVarReturnType = new TypeToken<List<LogRead>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getLogItem
     * @param id  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Log resource response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getLogItemCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/logs/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/ld+json",
            "application/json",
            "text/html",
            "text/csv"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getLogItemValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getLogItem(Async)");
        }

        return getLogItemCall(id, _callback);

    }

    /**
     * Retrieves a Log resource.
     * 
     * @param id  (required)
     * @return LogRead
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Log resource response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     */
    public LogRead getLogItem(String id) throws ApiException {
        ApiResponse<LogRead> localVarResp = getLogItemWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Retrieves a Log resource.
     * 
     * @param id  (required)
     * @return ApiResponse&lt;LogRead&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Log resource response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LogRead> getLogItemWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = getLogItemValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<LogRead>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieves a Log resource. (asynchronously)
     * 
     * @param id  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Log resource response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Resource not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getLogItemAsync(String id, final ApiCallback<LogRead> _callback) throws ApiException {

        okhttp3.Call localVarCall = getLogItemValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<LogRead>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
