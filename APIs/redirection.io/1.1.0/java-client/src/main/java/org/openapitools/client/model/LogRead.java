/*
 * redirection.io
 * API documentation for redirection.io
 *
 * The version of the OpenAPI document: 1.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:00:05.237264-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class LogRead {
  public static final String SERIALIZED_NAME_CREATED_AT = "createdAt";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_FIXED = "fixed";
  @SerializedName(SERIALIZED_NAME_FIXED)
  private Boolean fixed;

  public static final String SERIALIZED_NAME_FIXED_BY_VERSIONS = "fixedByVersions";
  @SerializedName(SERIALIZED_NAME_FIXED_BY_VERSIONS)
  private List<String> fixedByVersions = new ArrayList<>();

  public static final String SERIALIZED_NAME_FROM_SMART_LIST = "fromSmartList";
  @SerializedName(SERIALIZED_NAME_FROM_SMART_LIST)
  private Boolean fromSmartList;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Object id;

  public static final String SERIALIZED_NAME_INSTANCE_NAME = "instanceName";
  @SerializedName(SERIALIZED_NAME_INSTANCE_NAME)
  private Object instanceName;

  public static final String SERIALIZED_NAME_METHOD = "method";
  @SerializedName(SERIALIZED_NAME_METHOD)
  private Object method;

  public static final String SERIALIZED_NAME_NOT_FIXED_BY_VERSIONS = "notFixedByVersions";
  @SerializedName(SERIALIZED_NAME_NOT_FIXED_BY_VERSIONS)
  private List<String> notFixedByVersions = new ArrayList<>();

  public static final String SERIALIZED_NAME_PROXY = "proxy";
  @SerializedName(SERIALIZED_NAME_PROXY)
  private String proxy;

  public static final String SERIALIZED_NAME_REFERRER = "referrer";
  @SerializedName(SERIALIZED_NAME_REFERRER)
  private Object referrer;

  public static final String SERIALIZED_NAME_RULE_ID = "ruleId";
  @SerializedName(SERIALIZED_NAME_RULE_ID)
  private String ruleId;

  public static final String SERIALIZED_NAME_SIMPLIFIED_USER_AGENT = "simplifiedUserAgent";
  @SerializedName(SERIALIZED_NAME_SIMPLIFIED_USER_AGENT)
  private Object simplifiedUserAgent;

  public static final String SERIALIZED_NAME_SMART_LIST = "smartList";
  @SerializedName(SERIALIZED_NAME_SMART_LIST)
  private String smartList;

  public static final String SERIALIZED_NAME_SOURCE = "source";
  @SerializedName(SERIALIZED_NAME_SOURCE)
  private Object source;

  public static final String SERIALIZED_NAME_STATUS_CODE = "statusCode";
  @SerializedName(SERIALIZED_NAME_STATUS_CODE)
  private Object statusCode;

  public static final String SERIALIZED_NAME_TARGET = "target";
  @SerializedName(SERIALIZED_NAME_TARGET)
  private Object target;

  public static final String SERIALIZED_NAME_USER_AGENT = "userAgent";
  @SerializedName(SERIALIZED_NAME_USER_AGENT)
  private Object userAgent;

  public static final String SERIALIZED_NAME_USER_AGENT_TYPE = "userAgentType";
  @SerializedName(SERIALIZED_NAME_USER_AGENT_TYPE)
  private Object userAgentType;

  public LogRead() {
  }

  public LogRead(
     Boolean fromSmartList, 
     String smartList
  ) {
    this();
    this.fromSmartList = fromSmartList;
    this.smartList = smartList;
  }

  public LogRead createdAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Get createdAt
   * @return createdAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public LogRead fixed(Boolean fixed) {
    this.fixed = fixed;
    return this;
  }

  /**
   * Get fixed
   * @return fixed
   */
  @javax.annotation.Nullable
  public Boolean getFixed() {
    return fixed;
  }

  public void setFixed(Boolean fixed) {
    this.fixed = fixed;
  }


  public LogRead fixedByVersions(List<String> fixedByVersions) {
    this.fixedByVersions = fixedByVersions;
    return this;
  }

  public LogRead addFixedByVersionsItem(String fixedByVersionsItem) {
    if (this.fixedByVersions == null) {
      this.fixedByVersions = new ArrayList<>();
    }
    this.fixedByVersions.add(fixedByVersionsItem);
    return this;
  }

  /**
   * Get fixedByVersions
   * @return fixedByVersions
   */
  @javax.annotation.Nullable
  public List<String> getFixedByVersions() {
    return fixedByVersions;
  }

  public void setFixedByVersions(List<String> fixedByVersions) {
    this.fixedByVersions = fixedByVersions;
  }


  /**
   * Get fromSmartList
   * @return fromSmartList
   */
  @javax.annotation.Nullable
  public Boolean getFromSmartList() {
    return fromSmartList;
  }



  public LogRead id(Object id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public Object getId() {
    return id;
  }

  public void setId(Object id) {
    this.id = id;
  }


  public LogRead instanceName(Object instanceName) {
    this.instanceName = instanceName;
    return this;
  }

  /**
   * Get instanceName
   * @return instanceName
   */
  @javax.annotation.Nullable
  public Object getInstanceName() {
    return instanceName;
  }

  public void setInstanceName(Object instanceName) {
    this.instanceName = instanceName;
  }


  public LogRead method(Object method) {
    this.method = method;
    return this;
  }

  /**
   * Get method
   * @return method
   */
  @javax.annotation.Nullable
  public Object getMethod() {
    return method;
  }

  public void setMethod(Object method) {
    this.method = method;
  }


  public LogRead notFixedByVersions(List<String> notFixedByVersions) {
    this.notFixedByVersions = notFixedByVersions;
    return this;
  }

  public LogRead addNotFixedByVersionsItem(String notFixedByVersionsItem) {
    if (this.notFixedByVersions == null) {
      this.notFixedByVersions = new ArrayList<>();
    }
    this.notFixedByVersions.add(notFixedByVersionsItem);
    return this;
  }

  /**
   * Get notFixedByVersions
   * @return notFixedByVersions
   */
  @javax.annotation.Nullable
  public List<String> getNotFixedByVersions() {
    return notFixedByVersions;
  }

  public void setNotFixedByVersions(List<String> notFixedByVersions) {
    this.notFixedByVersions = notFixedByVersions;
  }


  public LogRead proxy(String proxy) {
    this.proxy = proxy;
    return this;
  }

  /**
   * Get proxy
   * @return proxy
   */
  @javax.annotation.Nullable
  public String getProxy() {
    return proxy;
  }

  public void setProxy(String proxy) {
    this.proxy = proxy;
  }


  public LogRead referrer(Object referrer) {
    this.referrer = referrer;
    return this;
  }

  /**
   * Get referrer
   * @return referrer
   */
  @javax.annotation.Nullable
  public Object getReferrer() {
    return referrer;
  }

  public void setReferrer(Object referrer) {
    this.referrer = referrer;
  }


  public LogRead ruleId(String ruleId) {
    this.ruleId = ruleId;
    return this;
  }

  /**
   * Get ruleId
   * @return ruleId
   */
  @javax.annotation.Nullable
  public String getRuleId() {
    return ruleId;
  }

  public void setRuleId(String ruleId) {
    this.ruleId = ruleId;
  }


  public LogRead simplifiedUserAgent(Object simplifiedUserAgent) {
    this.simplifiedUserAgent = simplifiedUserAgent;
    return this;
  }

  /**
   * Get simplifiedUserAgent
   * @return simplifiedUserAgent
   */
  @javax.annotation.Nullable
  public Object getSimplifiedUserAgent() {
    return simplifiedUserAgent;
  }

  public void setSimplifiedUserAgent(Object simplifiedUserAgent) {
    this.simplifiedUserAgent = simplifiedUserAgent;
  }


  /**
   * Get smartList
   * @return smartList
   */
  @javax.annotation.Nullable
  public String getSmartList() {
    return smartList;
  }



  public LogRead source(Object source) {
    this.source = source;
    return this;
  }

  /**
   * Get source
   * @return source
   */
  @javax.annotation.Nullable
  public Object getSource() {
    return source;
  }

  public void setSource(Object source) {
    this.source = source;
  }


  public LogRead statusCode(Object statusCode) {
    this.statusCode = statusCode;
    return this;
  }

  /**
   * Get statusCode
   * @return statusCode
   */
  @javax.annotation.Nullable
  public Object getStatusCode() {
    return statusCode;
  }

  public void setStatusCode(Object statusCode) {
    this.statusCode = statusCode;
  }


  public LogRead target(Object target) {
    this.target = target;
    return this;
  }

  /**
   * Get target
   * @return target
   */
  @javax.annotation.Nullable
  public Object getTarget() {
    return target;
  }

  public void setTarget(Object target) {
    this.target = target;
  }


  public LogRead userAgent(Object userAgent) {
    this.userAgent = userAgent;
    return this;
  }

  /**
   * Get userAgent
   * @return userAgent
   */
  @javax.annotation.Nullable
  public Object getUserAgent() {
    return userAgent;
  }

  public void setUserAgent(Object userAgent) {
    this.userAgent = userAgent;
  }


  public LogRead userAgentType(Object userAgentType) {
    this.userAgentType = userAgentType;
    return this;
  }

  /**
   * Get userAgentType
   * @return userAgentType
   */
  @javax.annotation.Nullable
  public Object getUserAgentType() {
    return userAgentType;
  }

  public void setUserAgentType(Object userAgentType) {
    this.userAgentType = userAgentType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LogRead logRead = (LogRead) o;
    return Objects.equals(this.createdAt, logRead.createdAt) &&
        Objects.equals(this.fixed, logRead.fixed) &&
        Objects.equals(this.fixedByVersions, logRead.fixedByVersions) &&
        Objects.equals(this.fromSmartList, logRead.fromSmartList) &&
        Objects.equals(this.id, logRead.id) &&
        Objects.equals(this.instanceName, logRead.instanceName) &&
        Objects.equals(this.method, logRead.method) &&
        Objects.equals(this.notFixedByVersions, logRead.notFixedByVersions) &&
        Objects.equals(this.proxy, logRead.proxy) &&
        Objects.equals(this.referrer, logRead.referrer) &&
        Objects.equals(this.ruleId, logRead.ruleId) &&
        Objects.equals(this.simplifiedUserAgent, logRead.simplifiedUserAgent) &&
        Objects.equals(this.smartList, logRead.smartList) &&
        Objects.equals(this.source, logRead.source) &&
        Objects.equals(this.statusCode, logRead.statusCode) &&
        Objects.equals(this.target, logRead.target) &&
        Objects.equals(this.userAgent, logRead.userAgent) &&
        Objects.equals(this.userAgentType, logRead.userAgentType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(createdAt, fixed, fixedByVersions, fromSmartList, id, instanceName, method, notFixedByVersions, proxy, referrer, ruleId, simplifiedUserAgent, smartList, source, statusCode, target, userAgent, userAgentType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LogRead {\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    fixed: ").append(toIndentedString(fixed)).append("\n");
    sb.append("    fixedByVersions: ").append(toIndentedString(fixedByVersions)).append("\n");
    sb.append("    fromSmartList: ").append(toIndentedString(fromSmartList)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    instanceName: ").append(toIndentedString(instanceName)).append("\n");
    sb.append("    method: ").append(toIndentedString(method)).append("\n");
    sb.append("    notFixedByVersions: ").append(toIndentedString(notFixedByVersions)).append("\n");
    sb.append("    proxy: ").append(toIndentedString(proxy)).append("\n");
    sb.append("    referrer: ").append(toIndentedString(referrer)).append("\n");
    sb.append("    ruleId: ").append(toIndentedString(ruleId)).append("\n");
    sb.append("    simplifiedUserAgent: ").append(toIndentedString(simplifiedUserAgent)).append("\n");
    sb.append("    smartList: ").append(toIndentedString(smartList)).append("\n");
    sb.append("    source: ").append(toIndentedString(source)).append("\n");
    sb.append("    statusCode: ").append(toIndentedString(statusCode)).append("\n");
    sb.append("    target: ").append(toIndentedString(target)).append("\n");
    sb.append("    userAgent: ").append(toIndentedString(userAgent)).append("\n");
    sb.append("    userAgentType: ").append(toIndentedString(userAgentType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("createdAt");
    openapiFields.add("fixed");
    openapiFields.add("fixedByVersions");
    openapiFields.add("fromSmartList");
    openapiFields.add("id");
    openapiFields.add("instanceName");
    openapiFields.add("method");
    openapiFields.add("notFixedByVersions");
    openapiFields.add("proxy");
    openapiFields.add("referrer");
    openapiFields.add("ruleId");
    openapiFields.add("simplifiedUserAgent");
    openapiFields.add("smartList");
    openapiFields.add("source");
    openapiFields.add("statusCode");
    openapiFields.add("target");
    openapiFields.add("userAgent");
    openapiFields.add("userAgentType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to LogRead
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LogRead.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LogRead is not found in the empty JSON string", LogRead.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LogRead.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LogRead` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("fixedByVersions") != null && !jsonObj.get("fixedByVersions").isJsonNull() && !jsonObj.get("fixedByVersions").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `fixedByVersions` to be an array in the JSON string but got `%s`", jsonObj.get("fixedByVersions").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("notFixedByVersions") != null && !jsonObj.get("notFixedByVersions").isJsonNull() && !jsonObj.get("notFixedByVersions").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `notFixedByVersions` to be an array in the JSON string but got `%s`", jsonObj.get("notFixedByVersions").toString()));
      }
      if ((jsonObj.get("proxy") != null && !jsonObj.get("proxy").isJsonNull()) && !jsonObj.get("proxy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `proxy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("proxy").toString()));
      }
      if ((jsonObj.get("ruleId") != null && !jsonObj.get("ruleId").isJsonNull()) && !jsonObj.get("ruleId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ruleId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ruleId").toString()));
      }
      if ((jsonObj.get("smartList") != null && !jsonObj.get("smartList").isJsonNull()) && !jsonObj.get("smartList").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `smartList` to be a primitive type in the JSON string but got `%s`", jsonObj.get("smartList").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LogRead.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LogRead' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LogRead> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LogRead.class));

       return (TypeAdapter<T>) new TypeAdapter<LogRead>() {
           @Override
           public void write(JsonWriter out, LogRead value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LogRead read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of LogRead given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of LogRead
   * @throws IOException if the JSON string is invalid with respect to LogRead
   */
  public static LogRead fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LogRead.class);
  }

  /**
   * Convert an instance of LogRead to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

