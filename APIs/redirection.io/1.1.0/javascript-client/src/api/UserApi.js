/**
 * redirection.io
 * API documentation for redirection.io
 *
 * The version of the OpenAPI document: 1.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import UserCreationWrite from '../model/UserCreationWrite';
import UserEditInfo from '../model/UserEditInfo';
import UserList from '../model/UserList';
import UserPassword from '../model/UserPassword';
import UserRead from '../model/UserRead';

/**
* User service.
* @module api/UserApi
* @version 1.1.0
*/
export default class UserApi {

    /**
    * Constructs a new UserApi. 
    * @alias module:api/UserApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the confirmNewEmailUserItem operation.
     * @callback module:api/UserApi~confirmNewEmailUserItemCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserRead} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a User resource.
     * @param {String} id 
     * @param {String} newEmailToken 
     * @param {module:api/UserApi~confirmNewEmailUserItemCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserRead}
     */
    confirmNewEmailUserItem(id, newEmailToken, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling confirmNewEmailUserItem");
      }
      // verify the required parameter 'newEmailToken' is set
      if (newEmailToken === undefined || newEmailToken === null) {
        throw new Error("Missing the required parameter 'newEmailToken' when calling confirmNewEmailUserItem");
      }

      let pathParams = {
        'id': id,
        'newEmailToken': newEmailToken
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey'];
      let contentTypes = [];
      let accepts = ['application/ld+json', 'application/json', 'text/html', 'text/csv'];
      let returnType = UserRead;
      return this.apiClient.callApi(
        '/users/{id}/confirm-new-email/{newEmailToken}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteUserItem operation.
     * @callback module:api/UserApi~deleteUserItemCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes the User resource.
     * @param {String} id 
     * @param {module:api/UserApi~deleteUserItemCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteUserItem(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteUserItem");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/users/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the editEmailUserItem operation.
     * @callback module:api/UserApi~editEmailUserItemCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserRead} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Replaces the User resource.
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/UserEditInfo} [user] The updated User resource
     * @param {module:api/UserApi~editEmailUserItemCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserRead}
     */
    editEmailUserItem(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['user'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling editEmailUserItem");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey'];
      let contentTypes = ['application/ld+json', 'application/json', 'text/html', 'text/csv'];
      let accepts = ['application/ld+json', 'application/json', 'text/html', 'text/csv'];
      let returnType = UserRead;
      return this.apiClient.callApi(
        '/users/{id}/edit-email', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the editInfoUserItem operation.
     * @callback module:api/UserApi~editInfoUserItemCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserRead} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Replaces the User resource.
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/UserEditInfo} [user] The updated User resource
     * @param {module:api/UserApi~editInfoUserItemCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserRead}
     */
    editInfoUserItem(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['user'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling editInfoUserItem");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey'];
      let contentTypes = ['application/ld+json', 'application/json', 'text/html', 'text/csv'];
      let accepts = ['application/ld+json', 'application/json', 'text/html', 'text/csv'];
      let returnType = UserRead;
      return this.apiClient.callApi(
        '/users/{id}/edit-info', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the editPasswordUserItem operation.
     * @callback module:api/UserApi~editPasswordUserItemCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserRead} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Replaces the User resource.
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/UserEditInfo} [user] The updated User resource
     * @param {module:api/UserApi~editPasswordUserItemCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserRead}
     */
    editPasswordUserItem(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['user'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling editPasswordUserItem");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey'];
      let contentTypes = ['application/ld+json', 'application/json', 'text/html', 'text/csv'];
      let accepts = ['application/ld+json', 'application/json', 'text/html', 'text/csv'];
      let returnType = UserRead;
      return this.apiClient.callApi(
        '/users/{id}/edit-password', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the forgotPasswordUserItem operation.
     * @callback module:api/UserApi~forgotPasswordUserItemCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserRead} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Replaces the User resource.
     * @param {String} resetToken 
     * @param {Object} opts Optional parameters
     * @param {module:model/UserPassword} [user] The updated User resource
     * @param {module:api/UserApi~forgotPasswordUserItemCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserRead}
     */
    forgotPasswordUserItem(resetToken, opts, callback) {
      opts = opts || {};
      let postBody = opts['user'];
      // verify the required parameter 'resetToken' is set
      if (resetToken === undefined || resetToken === null) {
        throw new Error("Missing the required parameter 'resetToken' when calling forgotPasswordUserItem");
      }

      let pathParams = {
        'resetToken': resetToken
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey'];
      let contentTypes = ['application/ld+json', 'application/json', 'text/html', 'text/csv'];
      let accepts = ['application/ld+json', 'application/json', 'text/html', 'text/csv'];
      let returnType = UserRead;
      return this.apiClient.callApi(
        '/users/forgot-password/{resetToken}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getUserCollection operation.
     * @callback module:api/UserApi~getUserCollectionCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UserList>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves the collection of User resources.
     * @param {String} organizationId 
     * @param {Object} opts Optional parameters
     * @param {String} [search] 
     * @param {module:api/UserApi~getUserCollectionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UserList>}
     */
    getUserCollection(organizationId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'organizationId' is set
      if (organizationId === undefined || organizationId === null) {
        throw new Error("Missing the required parameter 'organizationId' when calling getUserCollection");
      }

      let pathParams = {
      };
      let queryParams = {
        'organizationId': organizationId,
        'search': opts['search']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey'];
      let contentTypes = [];
      let accepts = ['application/ld+json', 'application/json', 'text/html', 'text/csv'];
      let returnType = [UserList];
      return this.apiClient.callApi(
        '/users', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getUserItem operation.
     * @callback module:api/UserApi~getUserItemCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserRead} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a User resource.
     * @param {String} id 
     * @param {module:api/UserApi~getUserItemCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserRead}
     */
    getUserItem(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getUserItem");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey'];
      let contentTypes = [];
      let accepts = ['application/ld+json', 'application/json', 'text/html', 'text/csv'];
      let returnType = UserRead;
      return this.apiClient.callApi(
        '/users/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postUserCollection operation.
     * @callback module:api/UserApi~postUserCollectionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserRead} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a User resource.
     * @param {Object} opts Optional parameters
     * @param {module:model/UserCreationWrite} [user] The new User resource
     * @param {module:api/UserApi~postUserCollectionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserRead}
     */
    postUserCollection(opts, callback) {
      opts = opts || {};
      let postBody = opts['user'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey'];
      let contentTypes = ['application/ld+json', 'application/json', 'text/html', 'text/csv'];
      let accepts = ['application/ld+json', 'application/json', 'text/html', 'text/csv'];
      let returnType = UserRead;
      return this.apiClient.callApi(
        '/users', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
