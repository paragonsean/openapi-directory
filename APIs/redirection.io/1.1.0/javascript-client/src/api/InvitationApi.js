/**
 * redirection.io
 * API documentation for redirection.io
 *
 * The version of the OpenAPI document: 1.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Invitation from '../model/Invitation';
import InvitationRead from '../model/InvitationRead';
import InvitationWrite from '../model/InvitationWrite';

/**
* Invitation service.
* @module api/InvitationApi
* @version 1.1.0
*/
export default class InvitationApi {

    /**
    * Constructs a new InvitationApi. 
    * @alias module:api/InvitationApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the acceptInvitationItem operation.
     * @callback module:api/InvitationApi~acceptInvitationItemCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InvitationRead} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a Invitation resource.
     * @param {String} token The invitation acceptation token
     * @param {module:model/Invitation} invitation The new Invitation resource
     * @param {module:api/InvitationApi~acceptInvitationItemCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InvitationRead}
     */
    acceptInvitationItem(token, invitation, callback) {
      let postBody = invitation;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling acceptInvitationItem");
      }
      // verify the required parameter 'invitation' is set
      if (invitation === undefined || invitation === null) {
        throw new Error("Missing the required parameter 'invitation' when calling acceptInvitationItem");
      }

      let pathParams = {
        'token': token
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey'];
      let contentTypes = ['application/ld+json', 'application/json', 'text/html', 'text/csv'];
      let accepts = ['application/ld+json', 'application/json', 'text/html', 'text/csv'];
      let returnType = InvitationRead;
      return this.apiClient.callApi(
        '/invitations/accept/{token}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteInvitationItem operation.
     * @callback module:api/InvitationApi~deleteInvitationItemCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes the Invitation resource.
     * @param {String} id 
     * @param {module:api/InvitationApi~deleteInvitationItemCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteInvitationItem(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteInvitationItem");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/invitations/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getInvitationCollection operation.
     * @callback module:api/InvitationApi~getInvitationCollectionCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/InvitationRead>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves the collection of Invitation resources.
     * @param {String} targetId 
     * @param {String} targetType 
     * @param {module:api/InvitationApi~getInvitationCollectionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/InvitationRead>}
     */
    getInvitationCollection(targetId, targetType, callback) {
      let postBody = null;
      // verify the required parameter 'targetId' is set
      if (targetId === undefined || targetId === null) {
        throw new Error("Missing the required parameter 'targetId' when calling getInvitationCollection");
      }
      // verify the required parameter 'targetType' is set
      if (targetType === undefined || targetType === null) {
        throw new Error("Missing the required parameter 'targetType' when calling getInvitationCollection");
      }

      let pathParams = {
      };
      let queryParams = {
        'targetId': targetId,
        'targetType': targetType
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey'];
      let contentTypes = [];
      let accepts = ['application/ld+json', 'application/json', 'text/html', 'text/csv'];
      let returnType = [InvitationRead];
      return this.apiClient.callApi(
        '/invitations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getInvitationItem operation.
     * @callback module:api/InvitationApi~getInvitationItemCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InvitationRead} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a Invitation resource.
     * @param {String} id 
     * @param {module:api/InvitationApi~getInvitationItemCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InvitationRead}
     */
    getInvitationItem(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getInvitationItem");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey'];
      let contentTypes = [];
      let accepts = ['application/ld+json', 'application/json', 'text/html', 'text/csv'];
      let returnType = InvitationRead;
      return this.apiClient.callApi(
        '/invitations/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postInvitationCollection operation.
     * @callback module:api/InvitationApi~postInvitationCollectionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InvitationRead} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a Invitation resource.
     * @param {Object} opts Optional parameters
     * @param {module:model/InvitationWrite} [invitation] The new Invitation resource
     * @param {module:api/InvitationApi~postInvitationCollectionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InvitationRead}
     */
    postInvitationCollection(opts, callback) {
      opts = opts || {};
      let postBody = opts['invitation'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey'];
      let contentTypes = ['application/ld+json', 'application/json', 'text/html', 'text/csv'];
      let accepts = ['application/ld+json', 'application/json', 'text/html', 'text/csv'];
      let returnType = InvitationRead;
      return this.apiClient.callApi(
        '/invitations', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
