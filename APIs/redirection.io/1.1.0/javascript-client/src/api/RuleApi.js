/**
 * redirection.io
 * API documentation for redirection.io
 *
 * The version of the OpenAPI document: 1.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import RuleRead from '../model/RuleRead';

/**
* Rule service.
* @module api/RuleApi
* @version 1.1.0
*/
export default class RuleApi {

    /**
    * Constructs a new RuleApi. 
    * @alias module:api/RuleApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the agentLegacyComplexRuleCollection operation.
     * @callback module:api/RuleApi~agentLegacyComplexRuleCollectionCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/RuleRead>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves the collection of Rule resources.
     * @param {String} projectId 
     * @param {module:api/RuleApi~agentLegacyComplexRuleCollectionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/RuleRead>}
     */
    agentLegacyComplexRuleCollection(projectId, callback) {
      let postBody = null;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling agentLegacyComplexRuleCollection");
      }

      let pathParams = {
      };
      let queryParams = {
        'projectId': projectId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey'];
      let contentTypes = [];
      let accepts = ['application/ld+json', 'application/json', 'text/html', 'text/csv'];
      let returnType = [RuleRead];
      return this.apiClient.callApi(
        '/agent-rule-complexes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the agentLegacyStraightRuleCollection operation.
     * @callback module:api/RuleApi~agentLegacyStraightRuleCollectionCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/RuleRead>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves the collection of Rule resources.
     * @param {String} projectId 
     * @param {module:api/RuleApi~agentLegacyStraightRuleCollectionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/RuleRead>}
     */
    agentLegacyStraightRuleCollection(projectId, callback) {
      let postBody = null;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling agentLegacyStraightRuleCollection");
      }

      let pathParams = {
      };
      let queryParams = {
        'projectId': projectId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey'];
      let contentTypes = [];
      let accepts = ['application/ld+json', 'application/json', 'text/html', 'text/csv'];
      let returnType = [RuleRead];
      return this.apiClient.callApi(
        '/agent-rule-straights', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the agentRuleCollection operation.
     * @callback module:api/RuleApi~agentRuleCollectionCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/RuleRead>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves the collection of Rule resources.
     * @param {String} projectId 
     * @param {module:api/RuleApi~agentRuleCollectionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/RuleRead>}
     */
    agentRuleCollection(projectId, callback) {
      let postBody = null;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling agentRuleCollection");
      }

      let pathParams = {
      };
      let queryParams = {
        'projectId': projectId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey'];
      let contentTypes = [];
      let accepts = ['application/ld+json', 'application/json', 'text/html', 'text/csv'];
      let returnType = [RuleRead];
      return this.apiClient.callApi(
        '/agent-rules', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the exportRuleCollection operation.
     * @callback module:api/RuleApi~exportRuleCollectionCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/RuleRead>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves the collection of Rule resources.
     * @param {String} projectId 
     * @param {Object} opts Optional parameters
     * @param {String} [sortId] 
     * @param {String} [sortViewCount] 
     * @param {module:api/RuleApi~exportRuleCollectionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/RuleRead>}
     */
    exportRuleCollection(projectId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling exportRuleCollection");
      }

      let pathParams = {
      };
      let queryParams = {
        'projectId': projectId,
        'sort[id]': opts['sortId'],
        'sort[viewCount]': opts['sortViewCount']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey'];
      let contentTypes = [];
      let accepts = ['application/ld+json', 'application/json', 'text/html', 'text/csv'];
      let returnType = [RuleRead];
      return this.apiClient.callApi(
        '/export-rules', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRuleCollection operation.
     * @callback module:api/RuleApi~getRuleCollectionCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/RuleRead>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves the collection of Rule resources.
     * @param {String} projectId 
     * @param {Object} opts Optional parameters
     * @param {String} [sortId] 
     * @param {String} [sortViewCount] 
     * @param {Number} [page] The collection page number
     * @param {module:api/RuleApi~getRuleCollectionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/RuleRead>}
     */
    getRuleCollection(projectId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling getRuleCollection");
      }

      let pathParams = {
      };
      let queryParams = {
        'projectId': projectId,
        'sort[id]': opts['sortId'],
        'sort[viewCount]': opts['sortViewCount'],
        'page': opts['page']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey'];
      let contentTypes = [];
      let accepts = ['application/ld+json', 'application/json', 'text/html', 'text/csv'];
      let returnType = [RuleRead];
      return this.apiClient.callApi(
        '/rules', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRuleItem operation.
     * @callback module:api/RuleApi~getRuleItemCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RuleRead} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a Rule resource.
     * @param {String} id 
     * @param {module:api/RuleApi~getRuleItemCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RuleRead}
     */
    getRuleItem(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getRuleItem");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey'];
      let contentTypes = [];
      let accepts = ['application/ld+json', 'application/json', 'text/html', 'text/csv'];
      let returnType = RuleRead;
      return this.apiClient.callApi(
        '/rules/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
