/**
 * redirection.io
 * API documentation for redirection.io
 *
 * The version of the OpenAPI document: 1.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AggregateLogRead from '../model/AggregateLogRead';

/**
* AggregateLog service.
* @module api/AggregateLogApi
* @version 1.1.0
*/
export default class AggregateLogApi {

    /**
    * Constructs a new AggregateLogApi. 
    * @alias module:api/AggregateLogApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getAggregateLogCollection operation.
     * @callback module:api/AggregateLogApi~getAggregateLogCollectionCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/AggregateLogRead>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves the collection of AggregateLog resources.
     * @param {Object} opts Optional parameters
     * @param {Number} [page] The collection page number
     * @param {String} [projectId] 
     * @param {String} [createdAt] 
     * @param {String} [source] 
     * @param {String} [target] 
     * @param {String} [statusCode] 
     * @param {String} [referrer] 
     * @param {String} [userAgent] 
     * @param {String} [userAgentType] 
     * @param {String} [simplifiedUserAgent] 
     * @param {String} [ruleId] 
     * @param {String} [instanceName] 
     * @param {String} [excludeUrls] 
     * @param {String} [excludeEmptyReferrer] 
     * @param {String} [createdAtGt] 
     * @param {String} [createdAtGte] 
     * @param {String} [createdAtLt] 
     * @param {String} [createdAtLte] 
     * @param {String} [statusCodeGt] 
     * @param {String} [statusCodeGte] 
     * @param {String} [statusCodeLt] 
     * @param {String} [statusCodeLte] 
     * @param {module:api/AggregateLogApi~getAggregateLogCollectionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/AggregateLogRead>}
     */
    getAggregateLogCollection(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'page': opts['page'],
        'projectId': opts['projectId'],
        'createdAt': opts['createdAt'],
        'source': opts['source'],
        'target': opts['target'],
        'statusCode': opts['statusCode'],
        'referrer': opts['referrer'],
        'userAgent': opts['userAgent'],
        'userAgentType': opts['userAgentType'],
        'simplifiedUserAgent': opts['simplifiedUserAgent'],
        'ruleId': opts['ruleId'],
        'instanceName': opts['instanceName'],
        'excludeUrls': opts['excludeUrls'],
        'excludeEmptyReferrer': opts['excludeEmptyReferrer'],
        'createdAt_gt': opts['createdAtGt'],
        'createdAt_gte': opts['createdAtGte'],
        'createdAt_lt': opts['createdAtLt'],
        'createdAt_lte': opts['createdAtLte'],
        'statusCode_gt': opts['statusCodeGt'],
        'statusCode_gte': opts['statusCodeGte'],
        'statusCode_lt': opts['statusCodeLt'],
        'statusCode_lte': opts['statusCodeLte']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey'];
      let contentTypes = [];
      let accepts = ['application/ld+json', 'application/json', 'text/html', 'text/csv'];
      let returnType = [AggregateLogRead];
      return this.apiClient.callApi(
        '/aggregate-logs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAggregateLogItem operation.
     * @callback module:api/AggregateLogApi~getAggregateLogItemCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AggregateLogRead} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a AggregateLog resource.
     * @param {String} id 
     * @param {module:api/AggregateLogApi~getAggregateLogItemCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AggregateLogRead}
     */
    getAggregateLogItem(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getAggregateLogItem");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey'];
      let contentTypes = [];
      let accepts = ['application/ld+json', 'application/json', 'text/html', 'text/csv'];
      let returnType = AggregateLogRead;
      return this.apiClient.callApi(
        '/aggregate-logs/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
