/**
 * redirection.io
 * API documentation for redirection.io
 *
 * The version of the OpenAPI document: 1.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ProjectCreationWrite from '../model/ProjectCreationWrite';
import ProjectList from '../model/ProjectList';
import ProjectRead from '../model/ProjectRead';
import ProjectWrite from '../model/ProjectWrite';

/**
* Project service.
* @module api/ProjectApi
* @version 1.1.0
*/
export default class ProjectApi {

    /**
    * Constructs a new ProjectApi. 
    * @alias module:api/ProjectApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the deleteProjectItem operation.
     * @callback module:api/ProjectApi~deleteProjectItemCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes the Project resource.
     * @param {String} id 
     * @param {module:api/ProjectApi~deleteProjectItemCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteProjectItem(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteProjectItem");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/projects/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getProjectCollection operation.
     * @callback module:api/ProjectApi~getProjectCollectionCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ProjectList>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves the collection of Project resources.
     * @param {module:api/ProjectApi~getProjectCollectionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ProjectList>}
     */
    getProjectCollection(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey'];
      let contentTypes = [];
      let accepts = ['application/ld+json', 'application/json', 'text/html', 'text/csv'];
      let returnType = [ProjectList];
      return this.apiClient.callApi(
        '/projects', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getProjectItem operation.
     * @callback module:api/ProjectApi~getProjectItemCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProjectRead} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a Project resource.
     * @param {String} id 
     * @param {module:api/ProjectApi~getProjectItemCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProjectRead}
     */
    getProjectItem(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getProjectItem");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey'];
      let contentTypes = [];
      let accepts = ['application/ld+json', 'application/json', 'text/html', 'text/csv'];
      let returnType = ProjectRead;
      return this.apiClient.callApi(
        '/projects/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postProjectCollection operation.
     * @callback module:api/ProjectApi~postProjectCollectionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProjectRead} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a Project resource.
     * @param {Object} opts Optional parameters
     * @param {module:model/ProjectCreationWrite} [project] The new Project resource
     * @param {module:api/ProjectApi~postProjectCollectionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProjectRead}
     */
    postProjectCollection(opts, callback) {
      opts = opts || {};
      let postBody = opts['project'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey'];
      let contentTypes = ['application/ld+json', 'application/json', 'text/html', 'text/csv'];
      let accepts = ['application/ld+json', 'application/json', 'text/html', 'text/csv'];
      let returnType = ProjectRead;
      return this.apiClient.callApi(
        '/projects', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putProjectItem operation.
     * @callback module:api/ProjectApi~putProjectItemCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProjectRead} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Replaces the Project resource.
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/ProjectWrite} [project] The updated Project resource
     * @param {module:api/ProjectApi~putProjectItemCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProjectRead}
     */
    putProjectItem(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['project'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling putProjectItem");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey'];
      let contentTypes = ['application/ld+json', 'application/json', 'text/html', 'text/csv'];
      let accepts = ['application/ld+json', 'application/json', 'text/html', 'text/csv'];
      let returnType = ProjectRead;
      return this.apiClient.callApi(
        '/projects/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
