/**
 * redirection.io
 * API documentation for redirection.io
 *
 * The version of the OpenAPI document: 1.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import UserProjectCreationWrite from '../model/UserProjectCreationWrite';
import UserProjectRead from '../model/UserProjectRead';
import UserProjectWrite from '../model/UserProjectWrite';

/**
* UserProject service.
* @module api/UserProjectApi
* @version 1.1.0
*/
export default class UserProjectApi {

    /**
    * Constructs a new UserProjectApi. 
    * @alias module:api/UserProjectApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the deleteUserProjectItem operation.
     * @callback module:api/UserProjectApi~deleteUserProjectItemCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes the UserProject resource.
     * @param {String} id 
     * @param {module:api/UserProjectApi~deleteUserProjectItemCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteUserProjectItem(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteUserProjectItem");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/user-projects/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getUserProjectItem operation.
     * @callback module:api/UserProjectApi~getUserProjectItemCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserProjectRead} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves a UserProject resource.
     * @param {String} id 
     * @param {module:api/UserProjectApi~getUserProjectItemCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserProjectRead}
     */
    getUserProjectItem(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getUserProjectItem");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey'];
      let contentTypes = [];
      let accepts = ['application/ld+json', 'application/json', 'text/html', 'text/csv'];
      let returnType = UserProjectRead;
      return this.apiClient.callApi(
        '/user-projects/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postUserProjectCollection operation.
     * @callback module:api/UserProjectApi~postUserProjectCollectionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserProjectRead} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a UserProject resource.
     * @param {Object} opts Optional parameters
     * @param {module:model/UserProjectCreationWrite} [userProject] The new UserProject resource
     * @param {module:api/UserProjectApi~postUserProjectCollectionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserProjectRead}
     */
    postUserProjectCollection(opts, callback) {
      opts = opts || {};
      let postBody = opts['userProject'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey'];
      let contentTypes = ['application/ld+json', 'application/json', 'text/html', 'text/csv'];
      let accepts = ['application/ld+json', 'application/json', 'text/html', 'text/csv'];
      let returnType = UserProjectRead;
      return this.apiClient.callApi(
        '/user-projects', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putUserProjectItem operation.
     * @callback module:api/UserProjectApi~putUserProjectItemCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserProjectRead} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Replaces the UserProject resource.
     * @param {String} id 
     * @param {Object} opts Optional parameters
     * @param {module:model/UserProjectWrite} [userProject] The updated UserProject resource
     * @param {module:api/UserProjectApi~putUserProjectItemCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserProjectRead}
     */
    putUserProjectItem(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['userProject'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling putUserProjectItem");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKey'];
      let contentTypes = ['application/ld+json', 'application/json', 'text/html', 'text/csv'];
      let accepts = ['application/ld+json', 'application/json', 'text/html', 'text/csv'];
      let returnType = UserProjectRead;
      return this.apiClient.callApi(
        '/user-projects/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
