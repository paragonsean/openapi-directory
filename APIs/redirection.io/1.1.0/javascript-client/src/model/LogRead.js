/**
 * redirection.io
 * API documentation for redirection.io
 *
 * The version of the OpenAPI document: 1.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The LogRead model module.
 * @module model/LogRead
 * @version 1.1.0
 */
class LogRead {
    /**
     * Constructs a new <code>LogRead</code>.
     * 
     * @alias module:model/LogRead
     */
    constructor() { 
        
        LogRead.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>LogRead</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/LogRead} obj Optional instance to populate.
     * @return {module:model/LogRead} The populated <code>LogRead</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new LogRead();

            if (data.hasOwnProperty('createdAt')) {
                obj['createdAt'] = ApiClient.convertToType(data['createdAt'], 'Date');
            }
            if (data.hasOwnProperty('fixed')) {
                obj['fixed'] = ApiClient.convertToType(data['fixed'], 'Boolean');
            }
            if (data.hasOwnProperty('fixedByVersions')) {
                obj['fixedByVersions'] = ApiClient.convertToType(data['fixedByVersions'], ['String']);
            }
            if (data.hasOwnProperty('fromSmartList')) {
                obj['fromSmartList'] = ApiClient.convertToType(data['fromSmartList'], 'Boolean');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], Object);
            }
            if (data.hasOwnProperty('instanceName')) {
                obj['instanceName'] = ApiClient.convertToType(data['instanceName'], Object);
            }
            if (data.hasOwnProperty('method')) {
                obj['method'] = ApiClient.convertToType(data['method'], Object);
            }
            if (data.hasOwnProperty('notFixedByVersions')) {
                obj['notFixedByVersions'] = ApiClient.convertToType(data['notFixedByVersions'], ['String']);
            }
            if (data.hasOwnProperty('proxy')) {
                obj['proxy'] = ApiClient.convertToType(data['proxy'], 'String');
            }
            if (data.hasOwnProperty('referrer')) {
                obj['referrer'] = ApiClient.convertToType(data['referrer'], Object);
            }
            if (data.hasOwnProperty('ruleId')) {
                obj['ruleId'] = ApiClient.convertToType(data['ruleId'], 'String');
            }
            if (data.hasOwnProperty('simplifiedUserAgent')) {
                obj['simplifiedUserAgent'] = ApiClient.convertToType(data['simplifiedUserAgent'], Object);
            }
            if (data.hasOwnProperty('smartList')) {
                obj['smartList'] = ApiClient.convertToType(data['smartList'], 'String');
            }
            if (data.hasOwnProperty('source')) {
                obj['source'] = ApiClient.convertToType(data['source'], Object);
            }
            if (data.hasOwnProperty('statusCode')) {
                obj['statusCode'] = ApiClient.convertToType(data['statusCode'], Object);
            }
            if (data.hasOwnProperty('target')) {
                obj['target'] = ApiClient.convertToType(data['target'], Object);
            }
            if (data.hasOwnProperty('userAgent')) {
                obj['userAgent'] = ApiClient.convertToType(data['userAgent'], Object);
            }
            if (data.hasOwnProperty('userAgentType')) {
                obj['userAgentType'] = ApiClient.convertToType(data['userAgentType'], Object);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>LogRead</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>LogRead</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['fixedByVersions'])) {
            throw new Error("Expected the field `fixedByVersions` to be an array in the JSON data but got " + data['fixedByVersions']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['notFixedByVersions'])) {
            throw new Error("Expected the field `notFixedByVersions` to be an array in the JSON data but got " + data['notFixedByVersions']);
        }
        // ensure the json data is a string
        if (data['proxy'] && !(typeof data['proxy'] === 'string' || data['proxy'] instanceof String)) {
            throw new Error("Expected the field `proxy` to be a primitive type in the JSON string but got " + data['proxy']);
        }
        // ensure the json data is a string
        if (data['ruleId'] && !(typeof data['ruleId'] === 'string' || data['ruleId'] instanceof String)) {
            throw new Error("Expected the field `ruleId` to be a primitive type in the JSON string but got " + data['ruleId']);
        }
        // ensure the json data is a string
        if (data['smartList'] && !(typeof data['smartList'] === 'string' || data['smartList'] instanceof String)) {
            throw new Error("Expected the field `smartList` to be a primitive type in the JSON string but got " + data['smartList']);
        }

        return true;
    }


}



/**
 * @member {Date} createdAt
 */
LogRead.prototype['createdAt'] = undefined;

/**
 * @member {Boolean} fixed
 */
LogRead.prototype['fixed'] = undefined;

/**
 * @member {Array.<String>} fixedByVersions
 */
LogRead.prototype['fixedByVersions'] = undefined;

/**
 * @member {Boolean} fromSmartList
 */
LogRead.prototype['fromSmartList'] = undefined;

/**
 * @member {Object} id
 */
LogRead.prototype['id'] = undefined;

/**
 * @member {Object} instanceName
 */
LogRead.prototype['instanceName'] = undefined;

/**
 * @member {Object} method
 */
LogRead.prototype['method'] = undefined;

/**
 * @member {Array.<String>} notFixedByVersions
 */
LogRead.prototype['notFixedByVersions'] = undefined;

/**
 * @member {String} proxy
 */
LogRead.prototype['proxy'] = undefined;

/**
 * @member {Object} referrer
 */
LogRead.prototype['referrer'] = undefined;

/**
 * @member {String} ruleId
 */
LogRead.prototype['ruleId'] = undefined;

/**
 * @member {Object} simplifiedUserAgent
 */
LogRead.prototype['simplifiedUserAgent'] = undefined;

/**
 * @member {String} smartList
 */
LogRead.prototype['smartList'] = undefined;

/**
 * @member {Object} source
 */
LogRead.prototype['source'] = undefined;

/**
 * @member {Object} statusCode
 */
LogRead.prototype['statusCode'] = undefined;

/**
 * @member {Object} target
 */
LogRead.prototype['target'] = undefined;

/**
 * @member {Object} userAgent
 */
LogRead.prototype['userAgent'] = undefined;

/**
 * @member {Object} userAgentType
 */
LogRead.prototype['userAgentType'] = undefined;






export default LogRead;

