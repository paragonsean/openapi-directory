/**
 * redirection.io
 * API documentation for redirection.io
 *
 * The version of the OpenAPI document: 1.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ImportRead model module.
 * @module model/ImportRead
 * @version 1.1.0
 */
class ImportRead {
    /**
     * Constructs a new <code>ImportRead</code>.
     * 
     * @alias module:model/ImportRead
     * @param project {String} 
     */
    constructor(project) { 
        
        ImportRead.initialize(this, project);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, project) { 
        obj['project'] = project;
    }

    /**
     * Constructs a <code>ImportRead</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ImportRead} obj Optional instance to populate.
     * @return {module:model/ImportRead} The populated <code>ImportRead</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ImportRead();

            if (data.hasOwnProperty('author')) {
                obj['author'] = ApiClient.convertToType(data['author'], 'String');
            }
            if (data.hasOwnProperty('completedAt')) {
                obj['completedAt'] = ApiClient.convertToType(data['completedAt'], 'Date');
            }
            if (data.hasOwnProperty('errorCount')) {
                obj['errorCount'] = ApiClient.convertToType(data['errorCount'], 'Number');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('importDuration')) {
                obj['importDuration'] = ApiClient.convertToType(data['importDuration'], 'Number');
            }
            if (data.hasOwnProperty('message')) {
                obj['message'] = ApiClient.convertToType(data['message'], 'String');
            }
            if (data.hasOwnProperty('project')) {
                obj['project'] = ApiClient.convertToType(data['project'], 'String');
            }
            if (data.hasOwnProperty('startedAt')) {
                obj['startedAt'] = ApiClient.convertToType(data['startedAt'], 'Date');
            }
            if (data.hasOwnProperty('statusAsText')) {
                obj['statusAsText'] = ApiClient.convertToType(data['statusAsText'], Object);
            }
            if (data.hasOwnProperty('successCount')) {
                obj['successCount'] = ApiClient.convertToType(data['successCount'], 'Number');
            }
            if (data.hasOwnProperty('updatedAt')) {
                obj['updatedAt'] = ApiClient.convertToType(data['updatedAt'], 'Date');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ImportRead</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ImportRead</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ImportRead.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['author'] && !(typeof data['author'] === 'string' || data['author'] instanceof String)) {
            throw new Error("Expected the field `author` to be a primitive type in the JSON string but got " + data['author']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['message'] && !(typeof data['message'] === 'string' || data['message'] instanceof String)) {
            throw new Error("Expected the field `message` to be a primitive type in the JSON string but got " + data['message']);
        }
        // ensure the json data is a string
        if (data['project'] && !(typeof data['project'] === 'string' || data['project'] instanceof String)) {
            throw new Error("Expected the field `project` to be a primitive type in the JSON string but got " + data['project']);
        }

        return true;
    }


}

ImportRead.RequiredProperties = ["project"];

/**
 * @member {String} author
 */
ImportRead.prototype['author'] = undefined;

/**
 * @member {Date} completedAt
 */
ImportRead.prototype['completedAt'] = undefined;

/**
 * @member {Number} errorCount
 */
ImportRead.prototype['errorCount'] = undefined;

/**
 * @member {String} id
 */
ImportRead.prototype['id'] = undefined;

/**
 * @member {Number} importDuration
 */
ImportRead.prototype['importDuration'] = undefined;

/**
 * @member {String} message
 */
ImportRead.prototype['message'] = undefined;

/**
 * @member {String} project
 */
ImportRead.prototype['project'] = undefined;

/**
 * @member {Date} startedAt
 */
ImportRead.prototype['startedAt'] = undefined;

/**
 * @member {Object} statusAsText
 */
ImportRead.prototype['statusAsText'] = undefined;

/**
 * @member {Number} successCount
 */
ImportRead.prototype['successCount'] = undefined;

/**
 * @member {Date} updatedAt
 */
ImportRead.prototype['updatedAt'] = undefined;






export default ImportRead;

