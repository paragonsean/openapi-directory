/**
 * redirection.io
 * API documentation for redirection.io
 *
 * The version of the OpenAPI document: 1.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Project from './Project';
import UserOrganization from './UserOrganization';

/**
 * The Organization model module.
 * @module model/Organization
 * @version 1.1.0
 */
class Organization {
    /**
     * Constructs a new <code>Organization</code>.
     * 
     * @alias module:model/Organization
     * @param name {String} 
     */
    constructor(name) { 
        
        Organization.initialize(this, name);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, name) { 
        obj['name'] = name;
    }

    /**
     * Constructs a <code>Organization</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Organization} obj Optional instance to populate.
     * @return {module:model/Organization} The populated <code>Organization</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Organization();

            if (data.hasOwnProperty('createdAt')) {
                obj['createdAt'] = ApiClient.convertToType(data['createdAt'], 'Date');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('projects')) {
                obj['projects'] = ApiClient.convertToType(data['projects'], [Project]);
            }
            if (data.hasOwnProperty('slug')) {
                obj['slug'] = ApiClient.convertToType(data['slug'], 'String');
            }
            if (data.hasOwnProperty('updatedAt')) {
                obj['updatedAt'] = ApiClient.convertToType(data['updatedAt'], 'Date');
            }
            if (data.hasOwnProperty('userOrganizations')) {
                obj['userOrganizations'] = ApiClient.convertToType(data['userOrganizations'], [UserOrganization]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Organization</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Organization</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Organization.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        if (data['projects']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['projects'])) {
                throw new Error("Expected the field `projects` to be an array in the JSON data but got " + data['projects']);
            }
            // validate the optional field `projects` (array)
            for (const item of data['projects']) {
                Project.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['slug'] && !(typeof data['slug'] === 'string' || data['slug'] instanceof String)) {
            throw new Error("Expected the field `slug` to be a primitive type in the JSON string but got " + data['slug']);
        }
        if (data['userOrganizations']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['userOrganizations'])) {
                throw new Error("Expected the field `userOrganizations` to be an array in the JSON data but got " + data['userOrganizations']);
            }
            // validate the optional field `userOrganizations` (array)
            for (const item of data['userOrganizations']) {
                UserOrganization.validateJSON(item);
            };
        }

        return true;
    }


}

Organization.RequiredProperties = ["name"];

/**
 * @member {Date} createdAt
 */
Organization.prototype['createdAt'] = undefined;

/**
 * @member {String} id
 */
Organization.prototype['id'] = undefined;

/**
 * @member {String} name
 */
Organization.prototype['name'] = undefined;

/**
 * @member {Array.<module:model/Project>} projects
 */
Organization.prototype['projects'] = undefined;

/**
 * @member {String} slug
 */
Organization.prototype['slug'] = undefined;

/**
 * @member {Date} updatedAt
 */
Organization.prototype['updatedAt'] = undefined;

/**
 * @member {Array.<module:model/UserOrganization>} userOrganizations
 */
Organization.prototype['userOrganizations'] = undefined;






export default Organization;

