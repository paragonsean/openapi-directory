/**
 * redirection.io
 * API documentation for redirection.io
 *
 * The version of the OpenAPI document: 1.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import MarkerWrite from './MarkerWrite';

/**
 * The RuleChangeWrite model module.
 * @module model/RuleChangeWrite
 * @version 1.1.0
 */
class RuleChangeWrite {
    /**
     * Constructs a new <code>RuleChangeWrite</code>.
     * 
     * @alias module:model/RuleChangeWrite
     * @param action {String} 
     * @param rank {Number} 
     * @param source {String} 
     */
    constructor(action, rank, source) { 
        
        RuleChangeWrite.initialize(this, action, rank, source);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, action, rank, source) { 
        obj['action'] = action;
        obj['rank'] = rank;
        obj['source'] = source;
    }

    /**
     * Constructs a <code>RuleChangeWrite</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RuleChangeWrite} obj Optional instance to populate.
     * @return {module:model/RuleChangeWrite} The populated <code>RuleChangeWrite</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RuleChangeWrite();

            if (data.hasOwnProperty('action')) {
                obj['action'] = ApiClient.convertToType(data['action'], 'String');
            }
            if (data.hasOwnProperty('actions')) {
                obj['actions'] = ApiClient.convertToType(data['actions'], ['String']);
            }
            if (data.hasOwnProperty('examples')) {
                obj['examples'] = ApiClient.convertToType(data['examples'], ['String']);
            }
            if (data.hasOwnProperty('formattedSource')) {
                obj['formattedSource'] = ApiClient.convertToType(data['formattedSource'], 'String');
            }
            if (data.hasOwnProperty('markers')) {
                obj['markers'] = ApiClient.convertToType(data['markers'], [MarkerWrite]);
            }
            if (data.hasOwnProperty('matchOnResponseStatus')) {
                obj['matchOnResponseStatus'] = ApiClient.convertToType(data['matchOnResponseStatus'], 'Number');
            }
            if (data.hasOwnProperty('rank')) {
                obj['rank'] = ApiClient.convertToType(data['rank'], 'Number');
            }
            if (data.hasOwnProperty('ruleId')) {
                obj['ruleId'] = ApiClient.convertToType(data['ruleId'], 'String');
            }
            if (data.hasOwnProperty('source')) {
                obj['source'] = ApiClient.convertToType(data['source'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RuleChangeWrite</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RuleChangeWrite</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of RuleChangeWrite.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['action'] && !(typeof data['action'] === 'string' || data['action'] instanceof String)) {
            throw new Error("Expected the field `action` to be a primitive type in the JSON string but got " + data['action']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['actions'])) {
            throw new Error("Expected the field `actions` to be an array in the JSON data but got " + data['actions']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['examples'])) {
            throw new Error("Expected the field `examples` to be an array in the JSON data but got " + data['examples']);
        }
        // ensure the json data is a string
        if (data['formattedSource'] && !(typeof data['formattedSource'] === 'string' || data['formattedSource'] instanceof String)) {
            throw new Error("Expected the field `formattedSource` to be a primitive type in the JSON string but got " + data['formattedSource']);
        }
        if (data['markers']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['markers'])) {
                throw new Error("Expected the field `markers` to be an array in the JSON data but got " + data['markers']);
            }
            // validate the optional field `markers` (array)
            for (const item of data['markers']) {
                MarkerWrite.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['ruleId'] && !(typeof data['ruleId'] === 'string' || data['ruleId'] instanceof String)) {
            throw new Error("Expected the field `ruleId` to be a primitive type in the JSON string but got " + data['ruleId']);
        }
        // ensure the json data is a string
        if (data['source'] && !(typeof data['source'] === 'string' || data['source'] instanceof String)) {
            throw new Error("Expected the field `source` to be a primitive type in the JSON string but got " + data['source']);
        }

        return true;
    }


}

RuleChangeWrite.RequiredProperties = ["action", "rank", "source"];

/**
 * @member {String} action
 */
RuleChangeWrite.prototype['action'] = undefined;

/**
 * @member {Array.<String>} actions
 */
RuleChangeWrite.prototype['actions'] = undefined;

/**
 * @member {Array.<String>} examples
 */
RuleChangeWrite.prototype['examples'] = undefined;

/**
 * @member {String} formattedSource
 */
RuleChangeWrite.prototype['formattedSource'] = undefined;

/**
 * @member {Array.<module:model/MarkerWrite>} markers
 */
RuleChangeWrite.prototype['markers'] = undefined;

/**
 * @member {Number} matchOnResponseStatus
 */
RuleChangeWrite.prototype['matchOnResponseStatus'] = undefined;

/**
 * @member {Number} rank
 */
RuleChangeWrite.prototype['rank'] = undefined;

/**
 * @member {String} ruleId
 */
RuleChangeWrite.prototype['ruleId'] = undefined;

/**
 * @member {String} source
 */
RuleChangeWrite.prototype['source'] = undefined;






export default RuleChangeWrite;

