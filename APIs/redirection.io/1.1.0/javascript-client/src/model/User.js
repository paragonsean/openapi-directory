/**
 * redirection.io
 * API documentation for redirection.io
 *
 * The version of the OpenAPI document: 1.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Organization from './Organization';
import UserOrganization from './UserOrganization';

/**
 * The User model module.
 * @module model/User
 * @version 1.1.0
 */
class User {
    /**
     * Constructs a new <code>User</code>.
     * 
     * @alias module:model/User
     * @param email {String} 
     * @param name {String} 
     */
    constructor(email, name) { 
        
        User.initialize(this, email, name);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, email, name) { 
        obj['email'] = email;
        obj['name'] = name;
    }

    /**
     * Constructs a <code>User</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/User} obj Optional instance to populate.
     * @return {module:model/User} The populated <code>User</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new User();

            if (data.hasOwnProperty('currentPassword')) {
                obj['currentPassword'] = ApiClient.convertToType(data['currentPassword'], Object);
            }
            if (data.hasOwnProperty('defaultOrganization')) {
                obj['defaultOrganization'] = Organization.constructFromObject(data['defaultOrganization']);
            }
            if (data.hasOwnProperty('email')) {
                obj['email'] = ApiClient.convertToType(data['email'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('newEmail')) {
                obj['newEmail'] = ApiClient.convertToType(data['newEmail'], 'String');
            }
            if (data.hasOwnProperty('newEmailToken')) {
                obj['newEmailToken'] = ApiClient.convertToType(data['newEmailToken'], 'String');
            }
            if (data.hasOwnProperty('newEmailTokenExpiredAt')) {
                obj['newEmailTokenExpiredAt'] = ApiClient.convertToType(data['newEmailTokenExpiredAt'], 'Date');
            }
            if (data.hasOwnProperty('password')) {
                obj['password'] = ApiClient.convertToType(data['password'], 'String');
            }
            if (data.hasOwnProperty('plainPassword')) {
                obj['plainPassword'] = ApiClient.convertToType(data['plainPassword'], 'String');
            }
            if (data.hasOwnProperty('plainPasswordRepeat')) {
                obj['plainPasswordRepeat'] = ApiClient.convertToType(data['plainPasswordRepeat'], Object);
            }
            if (data.hasOwnProperty('projectsFlattened')) {
                obj['projectsFlattened'] = ApiClient.convertToType(data['projectsFlattened'], ['String']);
            }
            if (data.hasOwnProperty('superAdmin')) {
                obj['superAdmin'] = ApiClient.convertToType(data['superAdmin'], 'Boolean');
            }
            if (data.hasOwnProperty('updatedAt')) {
                obj['updatedAt'] = ApiClient.convertToType(data['updatedAt'], 'Date');
            }
            if (data.hasOwnProperty('userOrganizations')) {
                obj['userOrganizations'] = ApiClient.convertToType(data['userOrganizations'], [UserOrganization]);
            }
            if (data.hasOwnProperty('userProjects')) {
                obj['userProjects'] = ApiClient.convertToType(data['userProjects'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>User</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>User</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of User.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `defaultOrganization`
        if (data['defaultOrganization']) { // data not null
          Organization.validateJSON(data['defaultOrganization']);
        }
        // ensure the json data is a string
        if (data['email'] && !(typeof data['email'] === 'string' || data['email'] instanceof String)) {
            throw new Error("Expected the field `email` to be a primitive type in the JSON string but got " + data['email']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['newEmail'] && !(typeof data['newEmail'] === 'string' || data['newEmail'] instanceof String)) {
            throw new Error("Expected the field `newEmail` to be a primitive type in the JSON string but got " + data['newEmail']);
        }
        // ensure the json data is a string
        if (data['newEmailToken'] && !(typeof data['newEmailToken'] === 'string' || data['newEmailToken'] instanceof String)) {
            throw new Error("Expected the field `newEmailToken` to be a primitive type in the JSON string but got " + data['newEmailToken']);
        }
        // ensure the json data is a string
        if (data['password'] && !(typeof data['password'] === 'string' || data['password'] instanceof String)) {
            throw new Error("Expected the field `password` to be a primitive type in the JSON string but got " + data['password']);
        }
        // ensure the json data is a string
        if (data['plainPassword'] && !(typeof data['plainPassword'] === 'string' || data['plainPassword'] instanceof String)) {
            throw new Error("Expected the field `plainPassword` to be a primitive type in the JSON string but got " + data['plainPassword']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['projectsFlattened'])) {
            throw new Error("Expected the field `projectsFlattened` to be an array in the JSON data but got " + data['projectsFlattened']);
        }
        if (data['userOrganizations']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['userOrganizations'])) {
                throw new Error("Expected the field `userOrganizations` to be an array in the JSON data but got " + data['userOrganizations']);
            }
            // validate the optional field `userOrganizations` (array)
            for (const item of data['userOrganizations']) {
                UserOrganization.validateJSON(item);
            };
        }
        // ensure the json data is an array
        if (!Array.isArray(data['userProjects'])) {
            throw new Error("Expected the field `userProjects` to be an array in the JSON data but got " + data['userProjects']);
        }

        return true;
    }


}

User.RequiredProperties = ["email", "name"];

/**
 * @member {Object} currentPassword
 */
User.prototype['currentPassword'] = undefined;

/**
 * @member {module:model/Organization} defaultOrganization
 */
User.prototype['defaultOrganization'] = undefined;

/**
 * @member {String} email
 */
User.prototype['email'] = undefined;

/**
 * @member {String} id
 */
User.prototype['id'] = undefined;

/**
 * @member {String} name
 */
User.prototype['name'] = undefined;

/**
 * @member {String} newEmail
 */
User.prototype['newEmail'] = undefined;

/**
 * @member {String} newEmailToken
 */
User.prototype['newEmailToken'] = undefined;

/**
 * @member {Date} newEmailTokenExpiredAt
 */
User.prototype['newEmailTokenExpiredAt'] = undefined;

/**
 * @member {String} password
 */
User.prototype['password'] = undefined;

/**
 * @member {String} plainPassword
 */
User.prototype['plainPassword'] = undefined;

/**
 * @member {Object} plainPasswordRepeat
 */
User.prototype['plainPasswordRepeat'] = undefined;

/**
 * @member {Array.<String>} projectsFlattened
 */
User.prototype['projectsFlattened'] = undefined;

/**
 * @member {Boolean} superAdmin
 */
User.prototype['superAdmin'] = undefined;

/**
 * @member {Date} updatedAt
 */
User.prototype['updatedAt'] = undefined;

/**
 * @member {Array.<module:model/UserOrganization>} userOrganizations
 */
User.prototype['userOrganizations'] = undefined;

/**
 * @member {Array.<String>} userProjects
 */
User.prototype['userProjects'] = undefined;






export default User;

