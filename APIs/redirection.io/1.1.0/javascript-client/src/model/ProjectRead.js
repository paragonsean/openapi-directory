/**
 * redirection.io
 * API documentation for redirection.io
 *
 * The version of the OpenAPI document: 1.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import OrganizationRead from './OrganizationRead';
import RuleSetVersionRead from './RuleSetVersionRead';
import UserProjectFlattenedRead from './UserProjectFlattenedRead';
import UserProjectRead from './UserProjectRead';

/**
 * The ProjectRead model module.
 * @module model/ProjectRead
 * @version 1.1.0
 */
class ProjectRead {
    /**
     * Constructs a new <code>ProjectRead</code>.
     * 
     * @alias module:model/ProjectRead
     * @param name {String} 
     */
    constructor(name) { 
        
        ProjectRead.initialize(this, name);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, name) { 
        obj['name'] = name;
    }

    /**
     * Constructs a <code>ProjectRead</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ProjectRead} obj Optional instance to populate.
     * @return {module:model/ProjectRead} The populated <code>ProjectRead</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ProjectRead();

            if (data.hasOwnProperty('complexRulesCount')) {
                obj['complexRulesCount'] = ApiClient.convertToType(data['complexRulesCount'], 'Number');
            }
            if (data.hasOwnProperty('complexRulesUpdatedAt')) {
                obj['complexRulesUpdatedAt'] = ApiClient.convertToType(data['complexRulesUpdatedAt'], 'Date');
            }
            if (data.hasOwnProperty('configuration')) {
                obj['configuration'] = ApiClient.convertToType(data['configuration'], ['String']);
            }
            if (data.hasOwnProperty('createdAt')) {
                obj['createdAt'] = ApiClient.convertToType(data['createdAt'], 'Date');
            }
            if (data.hasOwnProperty('currentVersion')) {
                obj['currentVersion'] = RuleSetVersionRead.constructFromObject(data['currentVersion']);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('ignoreProjectTypes')) {
                obj['ignoreProjectTypes'] = ApiClient.convertToType(data['ignoreProjectTypes'], ['String']);
            }
            if (data.hasOwnProperty('isPublishing')) {
                obj['isPublishing'] = ApiClient.convertToType(data['isPublishing'], 'Boolean');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('onboardingCompletedDemos')) {
                obj['onboardingCompletedDemos'] = ApiClient.convertToType(data['onboardingCompletedDemos'], ['String']);
            }
            if (data.hasOwnProperty('organization')) {
                obj['organization'] = OrganizationRead.constructFromObject(data['organization']);
            }
            if (data.hasOwnProperty('plan')) {
                obj['plan'] = ApiClient.convertToType(data['plan'], 'Number');
            }
            if (data.hasOwnProperty('rulesHash')) {
                obj['rulesHash'] = ApiClient.convertToType(data['rulesHash'], 'String');
            }
            if (data.hasOwnProperty('slug')) {
                obj['slug'] = ApiClient.convertToType(data['slug'], 'String');
            }
            if (data.hasOwnProperty('straightRulesCount')) {
                obj['straightRulesCount'] = ApiClient.convertToType(data['straightRulesCount'], 'Number');
            }
            if (data.hasOwnProperty('straightRulesUpdatedAt')) {
                obj['straightRulesUpdatedAt'] = ApiClient.convertToType(data['straightRulesUpdatedAt'], 'Date');
            }
            if (data.hasOwnProperty('token')) {
                obj['token'] = ApiClient.convertToType(data['token'], 'String');
            }
            if (data.hasOwnProperty('updatedAt')) {
                obj['updatedAt'] = ApiClient.convertToType(data['updatedAt'], 'Date');
            }
            if (data.hasOwnProperty('userProjects')) {
                obj['userProjects'] = ApiClient.convertToType(data['userProjects'], [UserProjectRead]);
            }
            if (data.hasOwnProperty('usersFlattened')) {
                obj['usersFlattened'] = ApiClient.convertToType(data['usersFlattened'], [UserProjectFlattenedRead]);
            }
            if (data.hasOwnProperty('workingVersion')) {
                obj['workingVersion'] = RuleSetVersionRead.constructFromObject(data['workingVersion']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ProjectRead</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ProjectRead</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ProjectRead.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is an array
        if (!Array.isArray(data['configuration'])) {
            throw new Error("Expected the field `configuration` to be an array in the JSON data but got " + data['configuration']);
        }
        // validate the optional field `currentVersion`
        if (data['currentVersion']) { // data not null
          RuleSetVersionRead.validateJSON(data['currentVersion']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['ignoreProjectTypes'])) {
            throw new Error("Expected the field `ignoreProjectTypes` to be an array in the JSON data but got " + data['ignoreProjectTypes']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['onboardingCompletedDemos'])) {
            throw new Error("Expected the field `onboardingCompletedDemos` to be an array in the JSON data but got " + data['onboardingCompletedDemos']);
        }
        // validate the optional field `organization`
        if (data['organization']) { // data not null
          OrganizationRead.validateJSON(data['organization']);
        }
        // ensure the json data is a string
        if (data['rulesHash'] && !(typeof data['rulesHash'] === 'string' || data['rulesHash'] instanceof String)) {
            throw new Error("Expected the field `rulesHash` to be a primitive type in the JSON string but got " + data['rulesHash']);
        }
        // ensure the json data is a string
        if (data['slug'] && !(typeof data['slug'] === 'string' || data['slug'] instanceof String)) {
            throw new Error("Expected the field `slug` to be a primitive type in the JSON string but got " + data['slug']);
        }
        // ensure the json data is a string
        if (data['token'] && !(typeof data['token'] === 'string' || data['token'] instanceof String)) {
            throw new Error("Expected the field `token` to be a primitive type in the JSON string but got " + data['token']);
        }
        if (data['userProjects']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['userProjects'])) {
                throw new Error("Expected the field `userProjects` to be an array in the JSON data but got " + data['userProjects']);
            }
            // validate the optional field `userProjects` (array)
            for (const item of data['userProjects']) {
                UserProjectRead.validateJSON(item);
            };
        }
        if (data['usersFlattened']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['usersFlattened'])) {
                throw new Error("Expected the field `usersFlattened` to be an array in the JSON data but got " + data['usersFlattened']);
            }
            // validate the optional field `usersFlattened` (array)
            for (const item of data['usersFlattened']) {
                UserProjectFlattenedRead.validateJSON(item);
            };
        }
        // validate the optional field `workingVersion`
        if (data['workingVersion']) { // data not null
          RuleSetVersionRead.validateJSON(data['workingVersion']);
        }

        return true;
    }


}

ProjectRead.RequiredProperties = ["name"];

/**
 * @member {Number} complexRulesCount
 */
ProjectRead.prototype['complexRulesCount'] = undefined;

/**
 * @member {Date} complexRulesUpdatedAt
 */
ProjectRead.prototype['complexRulesUpdatedAt'] = undefined;

/**
 * @member {Array.<String>} configuration
 */
ProjectRead.prototype['configuration'] = undefined;

/**
 * @member {Date} createdAt
 */
ProjectRead.prototype['createdAt'] = undefined;

/**
 * @member {module:model/RuleSetVersionRead} currentVersion
 */
ProjectRead.prototype['currentVersion'] = undefined;

/**
 * @member {String} id
 */
ProjectRead.prototype['id'] = undefined;

/**
 * @member {Array.<String>} ignoreProjectTypes
 */
ProjectRead.prototype['ignoreProjectTypes'] = undefined;

/**
 * @member {Boolean} isPublishing
 */
ProjectRead.prototype['isPublishing'] = undefined;

/**
 * @member {String} name
 */
ProjectRead.prototype['name'] = undefined;

/**
 * @member {Array.<String>} onboardingCompletedDemos
 */
ProjectRead.prototype['onboardingCompletedDemos'] = undefined;

/**
 * @member {module:model/OrganizationRead} organization
 */
ProjectRead.prototype['organization'] = undefined;

/**
 * @member {Number} plan
 */
ProjectRead.prototype['plan'] = undefined;

/**
 * @member {String} rulesHash
 */
ProjectRead.prototype['rulesHash'] = undefined;

/**
 * @member {String} slug
 */
ProjectRead.prototype['slug'] = undefined;

/**
 * @member {Number} straightRulesCount
 */
ProjectRead.prototype['straightRulesCount'] = undefined;

/**
 * @member {Date} straightRulesUpdatedAt
 */
ProjectRead.prototype['straightRulesUpdatedAt'] = undefined;

/**
 * @member {String} token
 */
ProjectRead.prototype['token'] = undefined;

/**
 * @member {Date} updatedAt
 */
ProjectRead.prototype['updatedAt'] = undefined;

/**
 * @member {Array.<module:model/UserProjectRead>} userProjects
 */
ProjectRead.prototype['userProjects'] = undefined;

/**
 * @member {Array.<module:model/UserProjectFlattenedRead>} usersFlattened
 */
ProjectRead.prototype['usersFlattened'] = undefined;

/**
 * @member {module:model/RuleSetVersionRead} workingVersion
 */
ProjectRead.prototype['workingVersion'] = undefined;






export default ProjectRead;

