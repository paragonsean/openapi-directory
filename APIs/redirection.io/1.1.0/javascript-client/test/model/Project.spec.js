/**
 * redirection.io
 * API documentation for redirection.io
 *
 * The version of the OpenAPI document: 1.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.RedirectionIo);
  }
}(this, function(expect, RedirectionIo) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new RedirectionIo.Project();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('Project', function() {
    it('should create an instance of Project', function() {
      // uncomment below and update the code to test Project
      //var instance = new RedirectionIo.Project();
      //expect(instance).to.be.a(RedirectionIo.Project);
    });

    it('should have the property complexRulesCount (base name: "complexRulesCount")', function() {
      // uncomment below and update the code to test the property complexRulesCount
      //var instance = new RedirectionIo.Project();
      //expect(instance).to.be();
    });

    it('should have the property complexRulesUpdatedAt (base name: "complexRulesUpdatedAt")', function() {
      // uncomment below and update the code to test the property complexRulesUpdatedAt
      //var instance = new RedirectionIo.Project();
      //expect(instance).to.be();
    });

    it('should have the property configuration (base name: "configuration")', function() {
      // uncomment below and update the code to test the property configuration
      //var instance = new RedirectionIo.Project();
      //expect(instance).to.be();
    });

    it('should have the property createdAt (base name: "createdAt")', function() {
      // uncomment below and update the code to test the property createdAt
      //var instance = new RedirectionIo.Project();
      //expect(instance).to.be();
    });

    it('should have the property currentVersion (base name: "currentVersion")', function() {
      // uncomment below and update the code to test the property currentVersion
      //var instance = new RedirectionIo.Project();
      //expect(instance).to.be();
    });

    it('should have the property id (base name: "id")', function() {
      // uncomment below and update the code to test the property id
      //var instance = new RedirectionIo.Project();
      //expect(instance).to.be();
    });

    it('should have the property ignoreProjectTypes (base name: "ignoreProjectTypes")', function() {
      // uncomment below and update the code to test the property ignoreProjectTypes
      //var instance = new RedirectionIo.Project();
      //expect(instance).to.be();
    });

    it('should have the property isPublishing (base name: "isPublishing")', function() {
      // uncomment below and update the code to test the property isPublishing
      //var instance = new RedirectionIo.Project();
      //expect(instance).to.be();
    });

    it('should have the property name (base name: "name")', function() {
      // uncomment below and update the code to test the property name
      //var instance = new RedirectionIo.Project();
      //expect(instance).to.be();
    });

    it('should have the property onboardingCompletedDemos (base name: "onboardingCompletedDemos")', function() {
      // uncomment below and update the code to test the property onboardingCompletedDemos
      //var instance = new RedirectionIo.Project();
      //expect(instance).to.be();
    });

    it('should have the property organization (base name: "organization")', function() {
      // uncomment below and update the code to test the property organization
      //var instance = new RedirectionIo.Project();
      //expect(instance).to.be();
    });

    it('should have the property plan (base name: "plan")', function() {
      // uncomment below and update the code to test the property plan
      //var instance = new RedirectionIo.Project();
      //expect(instance).to.be();
    });

    it('should have the property rulesHash (base name: "rulesHash")', function() {
      // uncomment below and update the code to test the property rulesHash
      //var instance = new RedirectionIo.Project();
      //expect(instance).to.be();
    });

    it('should have the property slug (base name: "slug")', function() {
      // uncomment below and update the code to test the property slug
      //var instance = new RedirectionIo.Project();
      //expect(instance).to.be();
    });

    it('should have the property straightRulesCount (base name: "straightRulesCount")', function() {
      // uncomment below and update the code to test the property straightRulesCount
      //var instance = new RedirectionIo.Project();
      //expect(instance).to.be();
    });

    it('should have the property straightRulesUpdatedAt (base name: "straightRulesUpdatedAt")', function() {
      // uncomment below and update the code to test the property straightRulesUpdatedAt
      //var instance = new RedirectionIo.Project();
      //expect(instance).to.be();
    });

    it('should have the property token (base name: "token")', function() {
      // uncomment below and update the code to test the property token
      //var instance = new RedirectionIo.Project();
      //expect(instance).to.be();
    });

    it('should have the property updatedAt (base name: "updatedAt")', function() {
      // uncomment below and update the code to test the property updatedAt
      //var instance = new RedirectionIo.Project();
      //expect(instance).to.be();
    });

    it('should have the property userProjects (base name: "userProjects")', function() {
      // uncomment below and update the code to test the property userProjects
      //var instance = new RedirectionIo.Project();
      //expect(instance).to.be();
    });

    it('should have the property usersFlattened (base name: "usersFlattened")', function() {
      // uncomment below and update the code to test the property usersFlattened
      //var instance = new RedirectionIo.Project();
      //expect(instance).to.be();
    });

    it('should have the property workingVersion (base name: "workingVersion")', function() {
      // uncomment below and update the code to test the property workingVersion
      //var instance = new RedirectionIo.Project();
      //expect(instance).to.be();
    });

  });

}));
