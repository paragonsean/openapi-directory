/**
 * redirection.io
 * API documentation for redirection.io
 *
 * The version of the OpenAPI document: 1.1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInstance_Write.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInstance_Write::OAIInstance_Write(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInstance_Write::OAIInstance_Write() {
    this->initializeModel();
}

OAIInstance_Write::~OAIInstance_Write() {}

void OAIInstance_Write::initializeModel() {

    m_agent_duration_isSet = false;
    m_agent_duration_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;

    m_rules_count_isSet = false;
    m_rules_count_isValid = false;

    m_rules_hash_isSet = false;
    m_rules_hash_isValid = false;
}

void OAIInstance_Write::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInstance_Write::fromJsonObject(QJsonObject json) {

    m_agent_duration_isValid = ::OpenAPI::fromJsonValue(m_agent_duration, json[QString("agentDuration")]);
    m_agent_duration_isSet = !json[QString("agentDuration")].isNull() && m_agent_duration_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;

    m_rules_count_isValid = ::OpenAPI::fromJsonValue(m_rules_count, json[QString("rulesCount")]);
    m_rules_count_isSet = !json[QString("rulesCount")].isNull() && m_rules_count_isValid;

    m_rules_hash_isValid = ::OpenAPI::fromJsonValue(m_rules_hash, json[QString("rulesHash")]);
    m_rules_hash_isSet = !json[QString("rulesHash")].isNull() && m_rules_hash_isValid;
}

QString OAIInstance_Write::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInstance_Write::asJsonObject() const {
    QJsonObject obj;
    if (m_agent_duration_isSet) {
        obj.insert(QString("agentDuration"), ::OpenAPI::toJsonValue(m_agent_duration));
    }
    if (m_message_isSet) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_rules_count_isSet) {
        obj.insert(QString("rulesCount"), ::OpenAPI::toJsonValue(m_rules_count));
    }
    if (m_rules_hash_isSet) {
        obj.insert(QString("rulesHash"), ::OpenAPI::toJsonValue(m_rules_hash));
    }
    return obj;
}

qint32 OAIInstance_Write::getAgentDuration() const {
    return m_agent_duration;
}
void OAIInstance_Write::setAgentDuration(const qint32 &agent_duration) {
    m_agent_duration = agent_duration;
    m_agent_duration_isSet = true;
}

bool OAIInstance_Write::is_agent_duration_Set() const{
    return m_agent_duration_isSet;
}

bool OAIInstance_Write::is_agent_duration_Valid() const{
    return m_agent_duration_isValid;
}

QString OAIInstance_Write::getMessage() const {
    return m_message;
}
void OAIInstance_Write::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAIInstance_Write::is_message_Set() const{
    return m_message_isSet;
}

bool OAIInstance_Write::is_message_Valid() const{
    return m_message_isValid;
}

qint32 OAIInstance_Write::getRulesCount() const {
    return m_rules_count;
}
void OAIInstance_Write::setRulesCount(const qint32 &rules_count) {
    m_rules_count = rules_count;
    m_rules_count_isSet = true;
}

bool OAIInstance_Write::is_rules_count_Set() const{
    return m_rules_count_isSet;
}

bool OAIInstance_Write::is_rules_count_Valid() const{
    return m_rules_count_isValid;
}

QString OAIInstance_Write::getRulesHash() const {
    return m_rules_hash;
}
void OAIInstance_Write::setRulesHash(const QString &rules_hash) {
    m_rules_hash = rules_hash;
    m_rules_hash_isSet = true;
}

bool OAIInstance_Write::is_rules_hash_Set() const{
    return m_rules_hash_isSet;
}

bool OAIInstance_Write::is_rules_hash_Valid() const{
    return m_rules_hash_isValid;
}

bool OAIInstance_Write::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_agent_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rules_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rules_hash_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInstance_Write::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
