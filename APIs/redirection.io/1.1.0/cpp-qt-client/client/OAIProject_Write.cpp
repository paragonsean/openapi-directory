/**
 * redirection.io
 * API documentation for redirection.io
 *
 * The version of the OpenAPI document: 1.1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProject_Write.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProject_Write::OAIProject_Write(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProject_Write::OAIProject_Write() {
    this->initializeModel();
}

OAIProject_Write::~OAIProject_Write() {}

void OAIProject_Write::initializeModel() {

    m_ignore_project_types_isSet = false;
    m_ignore_project_types_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_onboarding_completed_demos_isSet = false;
    m_onboarding_completed_demos_isValid = false;
}

void OAIProject_Write::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProject_Write::fromJsonObject(QJsonObject json) {

    m_ignore_project_types_isValid = ::OpenAPI::fromJsonValue(m_ignore_project_types, json[QString("ignoreProjectTypes")]);
    m_ignore_project_types_isSet = !json[QString("ignoreProjectTypes")].isNull() && m_ignore_project_types_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_onboarding_completed_demos_isValid = ::OpenAPI::fromJsonValue(m_onboarding_completed_demos, json[QString("onboardingCompletedDemos")]);
    m_onboarding_completed_demos_isSet = !json[QString("onboardingCompletedDemos")].isNull() && m_onboarding_completed_demos_isValid;
}

QString OAIProject_Write::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProject_Write::asJsonObject() const {
    QJsonObject obj;
    if (m_ignore_project_types.size() > 0) {
        obj.insert(QString("ignoreProjectTypes"), ::OpenAPI::toJsonValue(m_ignore_project_types));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_onboarding_completed_demos.size() > 0) {
        obj.insert(QString("onboardingCompletedDemos"), ::OpenAPI::toJsonValue(m_onboarding_completed_demos));
    }
    return obj;
}

QList<QString> OAIProject_Write::getIgnoreProjectTypes() const {
    return m_ignore_project_types;
}
void OAIProject_Write::setIgnoreProjectTypes(const QList<QString> &ignore_project_types) {
    m_ignore_project_types = ignore_project_types;
    m_ignore_project_types_isSet = true;
}

bool OAIProject_Write::is_ignore_project_types_Set() const{
    return m_ignore_project_types_isSet;
}

bool OAIProject_Write::is_ignore_project_types_Valid() const{
    return m_ignore_project_types_isValid;
}

QString OAIProject_Write::getName() const {
    return m_name;
}
void OAIProject_Write::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIProject_Write::is_name_Set() const{
    return m_name_isSet;
}

bool OAIProject_Write::is_name_Valid() const{
    return m_name_isValid;
}

QList<QString> OAIProject_Write::getOnboardingCompletedDemos() const {
    return m_onboarding_completed_demos;
}
void OAIProject_Write::setOnboardingCompletedDemos(const QList<QString> &onboarding_completed_demos) {
    m_onboarding_completed_demos = onboarding_completed_demos;
    m_onboarding_completed_demos_isSet = true;
}

bool OAIProject_Write::is_onboarding_completed_demos_Set() const{
    return m_onboarding_completed_demos_isSet;
}

bool OAIProject_Write::is_onboarding_completed_demos_Valid() const{
    return m_onboarding_completed_demos_isValid;
}

bool OAIProject_Write::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_ignore_project_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_onboarding_completed_demos.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProject_Write::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && true;
}

} // namespace OpenAPI
