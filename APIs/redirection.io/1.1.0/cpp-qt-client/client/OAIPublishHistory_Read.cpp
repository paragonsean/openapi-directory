/**
 * redirection.io
 * API documentation for redirection.io
 *
 * The version of the OpenAPI document: 1.1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPublishHistory_Read.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPublishHistory_Read::OAIPublishHistory_Read(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPublishHistory_Read::OAIPublishHistory_Read() {
    this->initializeModel();
}

OAIPublishHistory_Read::~OAIPublishHistory_Read() {}

void OAIPublishHistory_Read::initializeModel() {

    m_added_isSet = false;
    m_added_isValid = false;

    m_author_isSet = false;
    m_author_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_deleted_isSet = false;
    m_deleted_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_summary_isSet = false;
    m_summary_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_updated_isSet = false;
    m_updated_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;
}

void OAIPublishHistory_Read::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPublishHistory_Read::fromJsonObject(QJsonObject json) {

    m_added_isValid = ::OpenAPI::fromJsonValue(m_added, json[QString("added")]);
    m_added_isSet = !json[QString("added")].isNull() && m_added_isValid;

    m_author_isValid = ::OpenAPI::fromJsonValue(m_author, json[QString("author")]);
    m_author_isSet = !json[QString("author")].isNull() && m_author_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("createdAt")]);
    m_created_at_isSet = !json[QString("createdAt")].isNull() && m_created_at_isValid;

    m_deleted_isValid = ::OpenAPI::fromJsonValue(m_deleted, json[QString("deleted")]);
    m_deleted_isSet = !json[QString("deleted")].isNull() && m_deleted_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_summary_isValid = ::OpenAPI::fromJsonValue(m_summary, json[QString("summary")]);
    m_summary_isSet = !json[QString("summary")].isNull() && m_summary_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_updated_isValid = ::OpenAPI::fromJsonValue(m_updated, json[QString("updated")]);
    m_updated_isSet = !json[QString("updated")].isNull() && m_updated_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;
}

QString OAIPublishHistory_Read::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPublishHistory_Read::asJsonObject() const {
    QJsonObject obj;
    if (m_added_isSet) {
        obj.insert(QString("added"), ::OpenAPI::toJsonValue(m_added));
    }
    if (m_author.isSet()) {
        obj.insert(QString("author"), ::OpenAPI::toJsonValue(m_author));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("createdAt"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_deleted_isSet) {
        obj.insert(QString("deleted"), ::OpenAPI::toJsonValue(m_deleted));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_summary_isSet) {
        obj.insert(QString("summary"), ::OpenAPI::toJsonValue(m_summary));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_updated_isSet) {
        obj.insert(QString("updated"), ::OpenAPI::toJsonValue(m_updated));
    }
    if (m_version.isSet()) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    return obj;
}

qint32 OAIPublishHistory_Read::getAdded() const {
    return m_added;
}
void OAIPublishHistory_Read::setAdded(const qint32 &added) {
    m_added = added;
    m_added_isSet = true;
}

bool OAIPublishHistory_Read::is_added_Set() const{
    return m_added_isSet;
}

bool OAIPublishHistory_Read::is_added_Valid() const{
    return m_added_isValid;
}

OAIUser_Read OAIPublishHistory_Read::getAuthor() const {
    return m_author;
}
void OAIPublishHistory_Read::setAuthor(const OAIUser_Read &author) {
    m_author = author;
    m_author_isSet = true;
}

bool OAIPublishHistory_Read::is_author_Set() const{
    return m_author_isSet;
}

bool OAIPublishHistory_Read::is_author_Valid() const{
    return m_author_isValid;
}

QDateTime OAIPublishHistory_Read::getCreatedAt() const {
    return m_created_at;
}
void OAIPublishHistory_Read::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIPublishHistory_Read::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIPublishHistory_Read::is_created_at_Valid() const{
    return m_created_at_isValid;
}

qint32 OAIPublishHistory_Read::getDeleted() const {
    return m_deleted;
}
void OAIPublishHistory_Read::setDeleted(const qint32 &deleted) {
    m_deleted = deleted;
    m_deleted_isSet = true;
}

bool OAIPublishHistory_Read::is_deleted_Set() const{
    return m_deleted_isSet;
}

bool OAIPublishHistory_Read::is_deleted_Valid() const{
    return m_deleted_isValid;
}

QString OAIPublishHistory_Read::getId() const {
    return m_id;
}
void OAIPublishHistory_Read::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIPublishHistory_Read::is_id_Set() const{
    return m_id_isSet;
}

bool OAIPublishHistory_Read::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIPublishHistory_Read::getSummary() const {
    return m_summary;
}
void OAIPublishHistory_Read::setSummary(const QString &summary) {
    m_summary = summary;
    m_summary_isSet = true;
}

bool OAIPublishHistory_Read::is_summary_Set() const{
    return m_summary_isSet;
}

bool OAIPublishHistory_Read::is_summary_Valid() const{
    return m_summary_isValid;
}

QString OAIPublishHistory_Read::getType() const {
    return m_type;
}
void OAIPublishHistory_Read::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIPublishHistory_Read::is_type_Set() const{
    return m_type_isSet;
}

bool OAIPublishHistory_Read::is_type_Valid() const{
    return m_type_isValid;
}

qint32 OAIPublishHistory_Read::getUpdated() const {
    return m_updated;
}
void OAIPublishHistory_Read::setUpdated(const qint32 &updated) {
    m_updated = updated;
    m_updated_isSet = true;
}

bool OAIPublishHistory_Read::is_updated_Set() const{
    return m_updated_isSet;
}

bool OAIPublishHistory_Read::is_updated_Valid() const{
    return m_updated_isValid;
}

OAIRuleSetVersion_Read OAIPublishHistory_Read::getVersion() const {
    return m_version;
}
void OAIPublishHistory_Read::setVersion(const OAIRuleSetVersion_Read &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIPublishHistory_Read::is_version_Set() const{
    return m_version_isSet;
}

bool OAIPublishHistory_Read::is_version_Valid() const{
    return m_version_isValid;
}

bool OAIPublishHistory_Read::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_added_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_author.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deleted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_summary_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPublishHistory_Read::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
