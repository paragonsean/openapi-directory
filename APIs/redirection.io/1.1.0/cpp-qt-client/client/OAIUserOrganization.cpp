/**
 * redirection.io
 * API documentation for redirection.io
 *
 * The version of the OpenAPI document: 1.1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUserOrganization.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUserOrganization::OAIUserOrganization(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUserOrganization::OAIUserOrganization() {
    this->initializeModel();
}

OAIUserOrganization::~OAIUserOrganization() {}

void OAIUserOrganization::initializeModel() {

    m_functional_roles_isSet = false;
    m_functional_roles_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_organization_isSet = false;
    m_organization_isValid = false;

    m_user_isSet = false;
    m_user_isValid = false;
}

void OAIUserOrganization::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUserOrganization::fromJsonObject(QJsonObject json) {

    m_functional_roles_isValid = ::OpenAPI::fromJsonValue(m_functional_roles, json[QString("functionalRoles")]);
    m_functional_roles_isSet = !json[QString("functionalRoles")].isNull() && m_functional_roles_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_organization_isValid = ::OpenAPI::fromJsonValue(m_organization, json[QString("organization")]);
    m_organization_isSet = !json[QString("organization")].isNull() && m_organization_isValid;

    m_user_isValid = ::OpenAPI::fromJsonValue(m_user, json[QString("user")]);
    m_user_isSet = !json[QString("user")].isNull() && m_user_isValid;
}

QString OAIUserOrganization::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUserOrganization::asJsonObject() const {
    QJsonObject obj;
    if (m_functional_roles.size() > 0) {
        obj.insert(QString("functionalRoles"), ::OpenAPI::toJsonValue(m_functional_roles));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_organization_isSet) {
        obj.insert(QString("organization"), ::OpenAPI::toJsonValue(m_organization));
    }
    if (m_user_isSet) {
        obj.insert(QString("user"), ::OpenAPI::toJsonValue(m_user));
    }
    return obj;
}

QList<QString> OAIUserOrganization::getFunctionalRoles() const {
    return m_functional_roles;
}
void OAIUserOrganization::setFunctionalRoles(const QList<QString> &functional_roles) {
    m_functional_roles = functional_roles;
    m_functional_roles_isSet = true;
}

bool OAIUserOrganization::is_functional_roles_Set() const{
    return m_functional_roles_isSet;
}

bool OAIUserOrganization::is_functional_roles_Valid() const{
    return m_functional_roles_isValid;
}

QString OAIUserOrganization::getId() const {
    return m_id;
}
void OAIUserOrganization::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIUserOrganization::is_id_Set() const{
    return m_id_isSet;
}

bool OAIUserOrganization::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIUserOrganization::getOrganization() const {
    return m_organization;
}
void OAIUserOrganization::setOrganization(const QString &organization) {
    m_organization = organization;
    m_organization_isSet = true;
}

bool OAIUserOrganization::is_organization_Set() const{
    return m_organization_isSet;
}

bool OAIUserOrganization::is_organization_Valid() const{
    return m_organization_isValid;
}

QString OAIUserOrganization::getUser() const {
    return m_user;
}
void OAIUserOrganization::setUser(const QString &user) {
    m_user = user;
    m_user_isSet = true;
}

bool OAIUserOrganization::is_user_Set() const{
    return m_user_isSet;
}

bool OAIUserOrganization::is_user_Valid() const{
    return m_user_isValid;
}

bool OAIUserOrganization::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_functional_roles.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_organization_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUserOrganization::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_functional_roles_isValid && true;
}

} // namespace OpenAPI
