/**
 * redirection.io
 * API documentation for redirection.io
 *
 * The version of the OpenAPI document: 1.1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIUserApi_H
#define OAI_OAIUserApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIUser_CreationWrite.h"
#include "OAIUser_EditInfo.h"
#include "OAIUser_List.h"
#include "OAIUser_Password.h"
#include "OAIUser_Read.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIUserApi : public QObject {
    Q_OBJECT

public:
    OAIUserApi(const int timeOut = 0);
    ~OAIUserApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  id QString [required]
    * @param[in]  new_email_token QString [required]
    */
    virtual void confirmNewEmailUserItem(const QString &id, const QString &new_email_token);

    /**
    * @param[in]  id QString [required]
    */
    virtual void deleteUserItem(const QString &id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  user OAIUser_EditInfo [optional]
    */
    virtual void editEmailUserItem(const QString &id, const ::OpenAPI::OptionalParam<OAIUser_EditInfo> &user = ::OpenAPI::OptionalParam<OAIUser_EditInfo>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  user OAIUser_EditInfo [optional]
    */
    virtual void editInfoUserItem(const QString &id, const ::OpenAPI::OptionalParam<OAIUser_EditInfo> &user = ::OpenAPI::OptionalParam<OAIUser_EditInfo>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  user OAIUser_EditInfo [optional]
    */
    virtual void editPasswordUserItem(const QString &id, const ::OpenAPI::OptionalParam<OAIUser_EditInfo> &user = ::OpenAPI::OptionalParam<OAIUser_EditInfo>());

    /**
    * @param[in]  reset_token QString [required]
    * @param[in]  user OAIUser_Password [optional]
    */
    virtual void forgotPasswordUserItem(const QString &reset_token, const ::OpenAPI::OptionalParam<OAIUser_Password> &user = ::OpenAPI::OptionalParam<OAIUser_Password>());

    /**
    * @param[in]  organization_id QString [required]
    * @param[in]  search QString [optional]
    */
    virtual void getUserCollection(const QString &organization_id, const ::OpenAPI::OptionalParam<QString> &search = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    */
    virtual void getUserItem(const QString &id);

    /**
    * @param[in]  user OAIUser_CreationWrite [optional]
    */
    virtual void postUserCollection(const ::OpenAPI::OptionalParam<OAIUser_CreationWrite> &user = ::OpenAPI::OptionalParam<OAIUser_CreationWrite>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void confirmNewEmailUserItemCallback(OAIHttpRequestWorker *worker);
    void deleteUserItemCallback(OAIHttpRequestWorker *worker);
    void editEmailUserItemCallback(OAIHttpRequestWorker *worker);
    void editInfoUserItemCallback(OAIHttpRequestWorker *worker);
    void editPasswordUserItemCallback(OAIHttpRequestWorker *worker);
    void forgotPasswordUserItemCallback(OAIHttpRequestWorker *worker);
    void getUserCollectionCallback(OAIHttpRequestWorker *worker);
    void getUserItemCallback(OAIHttpRequestWorker *worker);
    void postUserCollectionCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void confirmNewEmailUserItemSignal(OAIUser_Read summary);
    void deleteUserItemSignal();
    void editEmailUserItemSignal(OAIUser_Read summary);
    void editInfoUserItemSignal(OAIUser_Read summary);
    void editPasswordUserItemSignal(OAIUser_Read summary);
    void forgotPasswordUserItemSignal(OAIUser_Read summary);
    void getUserCollectionSignal(QList<OAIUser_List> summary);
    void getUserItemSignal(OAIUser_Read summary);
    void postUserCollectionSignal(OAIUser_Read summary);


    void confirmNewEmailUserItemSignalFull(OAIHttpRequestWorker *worker, OAIUser_Read summary);
    void deleteUserItemSignalFull(OAIHttpRequestWorker *worker);
    void editEmailUserItemSignalFull(OAIHttpRequestWorker *worker, OAIUser_Read summary);
    void editInfoUserItemSignalFull(OAIHttpRequestWorker *worker, OAIUser_Read summary);
    void editPasswordUserItemSignalFull(OAIHttpRequestWorker *worker, OAIUser_Read summary);
    void forgotPasswordUserItemSignalFull(OAIHttpRequestWorker *worker, OAIUser_Read summary);
    void getUserCollectionSignalFull(OAIHttpRequestWorker *worker, QList<OAIUser_List> summary);
    void getUserItemSignalFull(OAIHttpRequestWorker *worker, OAIUser_Read summary);
    void postUserCollectionSignalFull(OAIHttpRequestWorker *worker, OAIUser_Read summary);

    Q_DECL_DEPRECATED_X("Use confirmNewEmailUserItemSignalError() instead")
    void confirmNewEmailUserItemSignalE(OAIUser_Read summary, QNetworkReply::NetworkError error_type, QString error_str);
    void confirmNewEmailUserItemSignalError(OAIUser_Read summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteUserItemSignalError() instead")
    void deleteUserItemSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteUserItemSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use editEmailUserItemSignalError() instead")
    void editEmailUserItemSignalE(OAIUser_Read summary, QNetworkReply::NetworkError error_type, QString error_str);
    void editEmailUserItemSignalError(OAIUser_Read summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use editInfoUserItemSignalError() instead")
    void editInfoUserItemSignalE(OAIUser_Read summary, QNetworkReply::NetworkError error_type, QString error_str);
    void editInfoUserItemSignalError(OAIUser_Read summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use editPasswordUserItemSignalError() instead")
    void editPasswordUserItemSignalE(OAIUser_Read summary, QNetworkReply::NetworkError error_type, QString error_str);
    void editPasswordUserItemSignalError(OAIUser_Read summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use forgotPasswordUserItemSignalError() instead")
    void forgotPasswordUserItemSignalE(OAIUser_Read summary, QNetworkReply::NetworkError error_type, QString error_str);
    void forgotPasswordUserItemSignalError(OAIUser_Read summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUserCollectionSignalError() instead")
    void getUserCollectionSignalE(QList<OAIUser_List> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getUserCollectionSignalError(QList<OAIUser_List> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUserItemSignalError() instead")
    void getUserItemSignalE(OAIUser_Read summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getUserItemSignalError(OAIUser_Read summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postUserCollectionSignalError() instead")
    void postUserCollectionSignalE(OAIUser_Read summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postUserCollectionSignalError(OAIUser_Read summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use confirmNewEmailUserItemSignalErrorFull() instead")
    void confirmNewEmailUserItemSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void confirmNewEmailUserItemSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteUserItemSignalErrorFull() instead")
    void deleteUserItemSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteUserItemSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use editEmailUserItemSignalErrorFull() instead")
    void editEmailUserItemSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void editEmailUserItemSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use editInfoUserItemSignalErrorFull() instead")
    void editInfoUserItemSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void editInfoUserItemSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use editPasswordUserItemSignalErrorFull() instead")
    void editPasswordUserItemSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void editPasswordUserItemSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use forgotPasswordUserItemSignalErrorFull() instead")
    void forgotPasswordUserItemSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void forgotPasswordUserItemSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUserCollectionSignalErrorFull() instead")
    void getUserCollectionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getUserCollectionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUserItemSignalErrorFull() instead")
    void getUserItemSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getUserItemSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postUserCollectionSignalErrorFull() instead")
    void postUserCollectionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postUserCollectionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
