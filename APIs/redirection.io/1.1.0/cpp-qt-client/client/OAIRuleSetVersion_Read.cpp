/**
 * redirection.io
 * API documentation for redirection.io
 *
 * The version of the OpenAPI document: 1.1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRuleSetVersion_Read.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRuleSetVersion_Read::OAIRuleSetVersion_Read(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRuleSetVersion_Read::OAIRuleSetVersion_Read() {
    this->initializeModel();
}

OAIRuleSetVersion_Read::~OAIRuleSetVersion_Read() {}

void OAIRuleSetVersion_Read::initializeModel() {

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_current_isSet = false;
    m_current_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_is_snapshot_isSet = false;
    m_is_snapshot_isValid = false;

    m_merged_rules_count_isSet = false;
    m_merged_rules_count_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_published_at_isSet = false;
    m_published_at_isValid = false;

    m_working_isSet = false;
    m_working_isValid = false;
}

void OAIRuleSetVersion_Read::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRuleSetVersion_Read::fromJsonObject(QJsonObject json) {

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("createdAt")]);
    m_created_at_isSet = !json[QString("createdAt")].isNull() && m_created_at_isValid;

    m_current_isValid = ::OpenAPI::fromJsonValue(m_current, json[QString("current")]);
    m_current_isSet = !json[QString("current")].isNull() && m_current_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_is_snapshot_isValid = ::OpenAPI::fromJsonValue(m_is_snapshot, json[QString("isSnapshot")]);
    m_is_snapshot_isSet = !json[QString("isSnapshot")].isNull() && m_is_snapshot_isValid;

    m_merged_rules_count_isValid = ::OpenAPI::fromJsonValue(m_merged_rules_count, json[QString("mergedRulesCount")]);
    m_merged_rules_count_isSet = !json[QString("mergedRulesCount")].isNull() && m_merged_rules_count_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_published_at_isValid = ::OpenAPI::fromJsonValue(m_published_at, json[QString("publishedAt")]);
    m_published_at_isSet = !json[QString("publishedAt")].isNull() && m_published_at_isValid;

    m_working_isValid = ::OpenAPI::fromJsonValue(m_working, json[QString("working")]);
    m_working_isSet = !json[QString("working")].isNull() && m_working_isValid;
}

QString OAIRuleSetVersion_Read::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRuleSetVersion_Read::asJsonObject() const {
    QJsonObject obj;
    if (m_created_at_isSet) {
        obj.insert(QString("createdAt"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_current_isSet) {
        obj.insert(QString("current"), ::OpenAPI::toJsonValue(m_current));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_is_snapshot_isSet) {
        obj.insert(QString("isSnapshot"), ::OpenAPI::toJsonValue(m_is_snapshot));
    }
    if (m_merged_rules_count_isSet) {
        obj.insert(QString("mergedRulesCount"), ::OpenAPI::toJsonValue(m_merged_rules_count));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_published_at_isSet) {
        obj.insert(QString("publishedAt"), ::OpenAPI::toJsonValue(m_published_at));
    }
    if (m_working_isSet) {
        obj.insert(QString("working"), ::OpenAPI::toJsonValue(m_working));
    }
    return obj;
}

QDateTime OAIRuleSetVersion_Read::getCreatedAt() const {
    return m_created_at;
}
void OAIRuleSetVersion_Read::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIRuleSetVersion_Read::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIRuleSetVersion_Read::is_created_at_Valid() const{
    return m_created_at_isValid;
}

bool OAIRuleSetVersion_Read::isCurrent() const {
    return m_current;
}
void OAIRuleSetVersion_Read::setCurrent(const bool &current) {
    m_current = current;
    m_current_isSet = true;
}

bool OAIRuleSetVersion_Read::is_current_Set() const{
    return m_current_isSet;
}

bool OAIRuleSetVersion_Read::is_current_Valid() const{
    return m_current_isValid;
}

QString OAIRuleSetVersion_Read::getId() const {
    return m_id;
}
void OAIRuleSetVersion_Read::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIRuleSetVersion_Read::is_id_Set() const{
    return m_id_isSet;
}

bool OAIRuleSetVersion_Read::is_id_Valid() const{
    return m_id_isValid;
}

bool OAIRuleSetVersion_Read::isIsSnapshot() const {
    return m_is_snapshot;
}
void OAIRuleSetVersion_Read::setIsSnapshot(const bool &is_snapshot) {
    m_is_snapshot = is_snapshot;
    m_is_snapshot_isSet = true;
}

bool OAIRuleSetVersion_Read::is_is_snapshot_Set() const{
    return m_is_snapshot_isSet;
}

bool OAIRuleSetVersion_Read::is_is_snapshot_Valid() const{
    return m_is_snapshot_isValid;
}

qint32 OAIRuleSetVersion_Read::getMergedRulesCount() const {
    return m_merged_rules_count;
}
void OAIRuleSetVersion_Read::setMergedRulesCount(const qint32 &merged_rules_count) {
    m_merged_rules_count = merged_rules_count;
    m_merged_rules_count_isSet = true;
}

bool OAIRuleSetVersion_Read::is_merged_rules_count_Set() const{
    return m_merged_rules_count_isSet;
}

bool OAIRuleSetVersion_Read::is_merged_rules_count_Valid() const{
    return m_merged_rules_count_isValid;
}

QString OAIRuleSetVersion_Read::getName() const {
    return m_name;
}
void OAIRuleSetVersion_Read::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIRuleSetVersion_Read::is_name_Set() const{
    return m_name_isSet;
}

bool OAIRuleSetVersion_Read::is_name_Valid() const{
    return m_name_isValid;
}

QDateTime OAIRuleSetVersion_Read::getPublishedAt() const {
    return m_published_at;
}
void OAIRuleSetVersion_Read::setPublishedAt(const QDateTime &published_at) {
    m_published_at = published_at;
    m_published_at_isSet = true;
}

bool OAIRuleSetVersion_Read::is_published_at_Set() const{
    return m_published_at_isSet;
}

bool OAIRuleSetVersion_Read::is_published_at_Valid() const{
    return m_published_at_isValid;
}

bool OAIRuleSetVersion_Read::isWorking() const {
    return m_working;
}
void OAIRuleSetVersion_Read::setWorking(const bool &working) {
    m_working = working;
    m_working_isSet = true;
}

bool OAIRuleSetVersion_Read::is_working_Set() const{
    return m_working_isSet;
}

bool OAIRuleSetVersion_Read::is_working_Valid() const{
    return m_working_isValid;
}

bool OAIRuleSetVersion_Read::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_snapshot_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_merged_rules_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_published_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_working_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRuleSetVersion_Read::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
