/**
 * redirection.io
 * API documentation for redirection.io
 *
 * The version of the OpenAPI document: 1.1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIProjectApi_H
#define OAI_OAIProjectApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIProject_CreationWrite.h"
#include "OAIProject_List.h"
#include "OAIProject_Read.h"
#include "OAIProject_Write.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIProjectApi : public QObject {
    Q_OBJECT

public:
    OAIProjectApi(const int timeOut = 0);
    ~OAIProjectApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  id QString [required]
    */
    virtual void deleteProjectItem(const QString &id);


    virtual void getProjectCollection();

    /**
    * @param[in]  id QString [required]
    */
    virtual void getProjectItem(const QString &id);

    /**
    * @param[in]  project OAIProject_CreationWrite [optional]
    */
    virtual void postProjectCollection(const ::OpenAPI::OptionalParam<OAIProject_CreationWrite> &project = ::OpenAPI::OptionalParam<OAIProject_CreationWrite>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  project OAIProject_Write [optional]
    */
    virtual void putProjectItem(const QString &id, const ::OpenAPI::OptionalParam<OAIProject_Write> &project = ::OpenAPI::OptionalParam<OAIProject_Write>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void deleteProjectItemCallback(OAIHttpRequestWorker *worker);
    void getProjectCollectionCallback(OAIHttpRequestWorker *worker);
    void getProjectItemCallback(OAIHttpRequestWorker *worker);
    void postProjectCollectionCallback(OAIHttpRequestWorker *worker);
    void putProjectItemCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void deleteProjectItemSignal();
    void getProjectCollectionSignal(QList<OAIProject_List> summary);
    void getProjectItemSignal(OAIProject_Read summary);
    void postProjectCollectionSignal(OAIProject_Read summary);
    void putProjectItemSignal(OAIProject_Read summary);


    void deleteProjectItemSignalFull(OAIHttpRequestWorker *worker);
    void getProjectCollectionSignalFull(OAIHttpRequestWorker *worker, QList<OAIProject_List> summary);
    void getProjectItemSignalFull(OAIHttpRequestWorker *worker, OAIProject_Read summary);
    void postProjectCollectionSignalFull(OAIHttpRequestWorker *worker, OAIProject_Read summary);
    void putProjectItemSignalFull(OAIHttpRequestWorker *worker, OAIProject_Read summary);

    Q_DECL_DEPRECATED_X("Use deleteProjectItemSignalError() instead")
    void deleteProjectItemSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteProjectItemSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getProjectCollectionSignalError() instead")
    void getProjectCollectionSignalE(QList<OAIProject_List> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getProjectCollectionSignalError(QList<OAIProject_List> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getProjectItemSignalError() instead")
    void getProjectItemSignalE(OAIProject_Read summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getProjectItemSignalError(OAIProject_Read summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postProjectCollectionSignalError() instead")
    void postProjectCollectionSignalE(OAIProject_Read summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postProjectCollectionSignalError(OAIProject_Read summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putProjectItemSignalError() instead")
    void putProjectItemSignalE(OAIProject_Read summary, QNetworkReply::NetworkError error_type, QString error_str);
    void putProjectItemSignalError(OAIProject_Read summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use deleteProjectItemSignalErrorFull() instead")
    void deleteProjectItemSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteProjectItemSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getProjectCollectionSignalErrorFull() instead")
    void getProjectCollectionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getProjectCollectionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getProjectItemSignalErrorFull() instead")
    void getProjectItemSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getProjectItemSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postProjectCollectionSignalErrorFull() instead")
    void postProjectCollectionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postProjectCollectionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putProjectItemSignalErrorFull() instead")
    void putProjectItemSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void putProjectItemSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
