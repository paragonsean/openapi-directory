/**
 * redirection.io
 * API documentation for redirection.io
 *
 * The version of the OpenAPI document: 1.1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOrganization.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOrganization::OAIOrganization(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOrganization::OAIOrganization() {
    this->initializeModel();
}

OAIOrganization::~OAIOrganization() {}

void OAIOrganization::initializeModel() {

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_projects_isSet = false;
    m_projects_isValid = false;

    m_slug_isSet = false;
    m_slug_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;

    m_user_organizations_isSet = false;
    m_user_organizations_isValid = false;
}

void OAIOrganization::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOrganization::fromJsonObject(QJsonObject json) {

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("createdAt")]);
    m_created_at_isSet = !json[QString("createdAt")].isNull() && m_created_at_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_projects_isValid = ::OpenAPI::fromJsonValue(m_projects, json[QString("projects")]);
    m_projects_isSet = !json[QString("projects")].isNull() && m_projects_isValid;

    m_slug_isValid = ::OpenAPI::fromJsonValue(m_slug, json[QString("slug")]);
    m_slug_isSet = !json[QString("slug")].isNull() && m_slug_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updatedAt")]);
    m_updated_at_isSet = !json[QString("updatedAt")].isNull() && m_updated_at_isValid;

    m_user_organizations_isValid = ::OpenAPI::fromJsonValue(m_user_organizations, json[QString("userOrganizations")]);
    m_user_organizations_isSet = !json[QString("userOrganizations")].isNull() && m_user_organizations_isValid;
}

QString OAIOrganization::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOrganization::asJsonObject() const {
    QJsonObject obj;
    if (m_created_at_isSet) {
        obj.insert(QString("createdAt"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_projects.size() > 0) {
        obj.insert(QString("projects"), ::OpenAPI::toJsonValue(m_projects));
    }
    if (m_slug_isSet) {
        obj.insert(QString("slug"), ::OpenAPI::toJsonValue(m_slug));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updatedAt"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    if (m_user_organizations.size() > 0) {
        obj.insert(QString("userOrganizations"), ::OpenAPI::toJsonValue(m_user_organizations));
    }
    return obj;
}

QDateTime OAIOrganization::getCreatedAt() const {
    return m_created_at;
}
void OAIOrganization::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIOrganization::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIOrganization::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAIOrganization::getId() const {
    return m_id;
}
void OAIOrganization::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIOrganization::is_id_Set() const{
    return m_id_isSet;
}

bool OAIOrganization::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIOrganization::getName() const {
    return m_name;
}
void OAIOrganization::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIOrganization::is_name_Set() const{
    return m_name_isSet;
}

bool OAIOrganization::is_name_Valid() const{
    return m_name_isValid;
}

QList<OAIProject> OAIOrganization::getProjects() const {
    return m_projects;
}
void OAIOrganization::setProjects(const QList<OAIProject> &projects) {
    m_projects = projects;
    m_projects_isSet = true;
}

bool OAIOrganization::is_projects_Set() const{
    return m_projects_isSet;
}

bool OAIOrganization::is_projects_Valid() const{
    return m_projects_isValid;
}

QString OAIOrganization::getSlug() const {
    return m_slug;
}
void OAIOrganization::setSlug(const QString &slug) {
    m_slug = slug;
    m_slug_isSet = true;
}

bool OAIOrganization::is_slug_Set() const{
    return m_slug_isSet;
}

bool OAIOrganization::is_slug_Valid() const{
    return m_slug_isValid;
}

QDateTime OAIOrganization::getUpdatedAt() const {
    return m_updated_at;
}
void OAIOrganization::setUpdatedAt(const QDateTime &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAIOrganization::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAIOrganization::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

QList<OAIUserOrganization> OAIOrganization::getUserOrganizations() const {
    return m_user_organizations;
}
void OAIOrganization::setUserOrganizations(const QList<OAIUserOrganization> &user_organizations) {
    m_user_organizations = user_organizations;
    m_user_organizations_isSet = true;
}

bool OAIOrganization::is_user_organizations_Set() const{
    return m_user_organizations_isSet;
}

bool OAIOrganization::is_user_organizations_Valid() const{
    return m_user_organizations_isValid;
}

bool OAIOrganization::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_projects.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_slug_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_organizations.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOrganization::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && true;
}

} // namespace OpenAPI
