/**
 * redirection.io
 * API documentation for redirection.io
 *
 * The version of the OpenAPI document: 1.1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIInvitationApi_H
#define OAI_OAIInvitationApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIInvitation.h"
#include "OAIInvitation_Read.h"
#include "OAIInvitation_Write.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIInvitationApi : public QObject {
    Q_OBJECT

public:
    OAIInvitationApi(const int timeOut = 0);
    ~OAIInvitationApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  token QString [required]
    * @param[in]  invitation OAIInvitation [required]
    */
    virtual void acceptInvitationItem(const QString &token, const OAIInvitation &invitation);

    /**
    * @param[in]  id QString [required]
    */
    virtual void deleteInvitationItem(const QString &id);

    /**
    * @param[in]  target_id QString [required]
    * @param[in]  target_type QString [required]
    */
    virtual void getInvitationCollection(const QString &target_id, const QString &target_type);

    /**
    * @param[in]  id QString [required]
    */
    virtual void getInvitationItem(const QString &id);

    /**
    * @param[in]  invitation OAIInvitation_Write [optional]
    */
    virtual void postInvitationCollection(const ::OpenAPI::OptionalParam<OAIInvitation_Write> &invitation = ::OpenAPI::OptionalParam<OAIInvitation_Write>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void acceptInvitationItemCallback(OAIHttpRequestWorker *worker);
    void deleteInvitationItemCallback(OAIHttpRequestWorker *worker);
    void getInvitationCollectionCallback(OAIHttpRequestWorker *worker);
    void getInvitationItemCallback(OAIHttpRequestWorker *worker);
    void postInvitationCollectionCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void acceptInvitationItemSignal(OAIInvitation_Read summary);
    void deleteInvitationItemSignal();
    void getInvitationCollectionSignal(QList<OAIInvitation_Read> summary);
    void getInvitationItemSignal(OAIInvitation_Read summary);
    void postInvitationCollectionSignal(OAIInvitation_Read summary);


    void acceptInvitationItemSignalFull(OAIHttpRequestWorker *worker, OAIInvitation_Read summary);
    void deleteInvitationItemSignalFull(OAIHttpRequestWorker *worker);
    void getInvitationCollectionSignalFull(OAIHttpRequestWorker *worker, QList<OAIInvitation_Read> summary);
    void getInvitationItemSignalFull(OAIHttpRequestWorker *worker, OAIInvitation_Read summary);
    void postInvitationCollectionSignalFull(OAIHttpRequestWorker *worker, OAIInvitation_Read summary);

    Q_DECL_DEPRECATED_X("Use acceptInvitationItemSignalError() instead")
    void acceptInvitationItemSignalE(OAIInvitation_Read summary, QNetworkReply::NetworkError error_type, QString error_str);
    void acceptInvitationItemSignalError(OAIInvitation_Read summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteInvitationItemSignalError() instead")
    void deleteInvitationItemSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteInvitationItemSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getInvitationCollectionSignalError() instead")
    void getInvitationCollectionSignalE(QList<OAIInvitation_Read> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getInvitationCollectionSignalError(QList<OAIInvitation_Read> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getInvitationItemSignalError() instead")
    void getInvitationItemSignalE(OAIInvitation_Read summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getInvitationItemSignalError(OAIInvitation_Read summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postInvitationCollectionSignalError() instead")
    void postInvitationCollectionSignalE(OAIInvitation_Read summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postInvitationCollectionSignalError(OAIInvitation_Read summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use acceptInvitationItemSignalErrorFull() instead")
    void acceptInvitationItemSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void acceptInvitationItemSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteInvitationItemSignalErrorFull() instead")
    void deleteInvitationItemSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteInvitationItemSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getInvitationCollectionSignalErrorFull() instead")
    void getInvitationCollectionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getInvitationCollectionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getInvitationItemSignalErrorFull() instead")
    void getInvitationItemSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getInvitationItemSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postInvitationCollectionSignalErrorFull() instead")
    void postInvitationCollectionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postInvitationCollectionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
