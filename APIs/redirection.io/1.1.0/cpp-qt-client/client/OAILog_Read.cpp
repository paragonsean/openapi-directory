/**
 * redirection.io
 * API documentation for redirection.io
 *
 * The version of the OpenAPI document: 1.1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILog_Read.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILog_Read::OAILog_Read(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILog_Read::OAILog_Read() {
    this->initializeModel();
}

OAILog_Read::~OAILog_Read() {}

void OAILog_Read::initializeModel() {

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_fixed_isSet = false;
    m_fixed_isValid = false;

    m_fixed_by_versions_isSet = false;
    m_fixed_by_versions_isValid = false;

    m_from_smart_list_isSet = false;
    m_from_smart_list_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_instance_name_isSet = false;
    m_instance_name_isValid = false;

    m_method_isSet = false;
    m_method_isValid = false;

    m_not_fixed_by_versions_isSet = false;
    m_not_fixed_by_versions_isValid = false;

    m_proxy_isSet = false;
    m_proxy_isValid = false;

    m_referrer_isSet = false;
    m_referrer_isValid = false;

    m_rule_id_isSet = false;
    m_rule_id_isValid = false;

    m_simplified_user_agent_isSet = false;
    m_simplified_user_agent_isValid = false;

    m_smart_list_isSet = false;
    m_smart_list_isValid = false;

    m_source_isSet = false;
    m_source_isValid = false;

    m_status_code_isSet = false;
    m_status_code_isValid = false;

    m_target_isSet = false;
    m_target_isValid = false;

    m_user_agent_isSet = false;
    m_user_agent_isValid = false;

    m_user_agent_type_isSet = false;
    m_user_agent_type_isValid = false;
}

void OAILog_Read::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILog_Read::fromJsonObject(QJsonObject json) {

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("createdAt")]);
    m_created_at_isSet = !json[QString("createdAt")].isNull() && m_created_at_isValid;

    m_fixed_isValid = ::OpenAPI::fromJsonValue(m_fixed, json[QString("fixed")]);
    m_fixed_isSet = !json[QString("fixed")].isNull() && m_fixed_isValid;

    m_fixed_by_versions_isValid = ::OpenAPI::fromJsonValue(m_fixed_by_versions, json[QString("fixedByVersions")]);
    m_fixed_by_versions_isSet = !json[QString("fixedByVersions")].isNull() && m_fixed_by_versions_isValid;

    m_from_smart_list_isValid = ::OpenAPI::fromJsonValue(m_from_smart_list, json[QString("fromSmartList")]);
    m_from_smart_list_isSet = !json[QString("fromSmartList")].isNull() && m_from_smart_list_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_instance_name_isValid = ::OpenAPI::fromJsonValue(m_instance_name, json[QString("instanceName")]);
    m_instance_name_isSet = !json[QString("instanceName")].isNull() && m_instance_name_isValid;

    m_method_isValid = ::OpenAPI::fromJsonValue(m_method, json[QString("method")]);
    m_method_isSet = !json[QString("method")].isNull() && m_method_isValid;

    m_not_fixed_by_versions_isValid = ::OpenAPI::fromJsonValue(m_not_fixed_by_versions, json[QString("notFixedByVersions")]);
    m_not_fixed_by_versions_isSet = !json[QString("notFixedByVersions")].isNull() && m_not_fixed_by_versions_isValid;

    m_proxy_isValid = ::OpenAPI::fromJsonValue(m_proxy, json[QString("proxy")]);
    m_proxy_isSet = !json[QString("proxy")].isNull() && m_proxy_isValid;

    m_referrer_isValid = ::OpenAPI::fromJsonValue(m_referrer, json[QString("referrer")]);
    m_referrer_isSet = !json[QString("referrer")].isNull() && m_referrer_isValid;

    m_rule_id_isValid = ::OpenAPI::fromJsonValue(m_rule_id, json[QString("ruleId")]);
    m_rule_id_isSet = !json[QString("ruleId")].isNull() && m_rule_id_isValid;

    m_simplified_user_agent_isValid = ::OpenAPI::fromJsonValue(m_simplified_user_agent, json[QString("simplifiedUserAgent")]);
    m_simplified_user_agent_isSet = !json[QString("simplifiedUserAgent")].isNull() && m_simplified_user_agent_isValid;

    m_smart_list_isValid = ::OpenAPI::fromJsonValue(m_smart_list, json[QString("smartList")]);
    m_smart_list_isSet = !json[QString("smartList")].isNull() && m_smart_list_isValid;

    m_source_isValid = ::OpenAPI::fromJsonValue(m_source, json[QString("source")]);
    m_source_isSet = !json[QString("source")].isNull() && m_source_isValid;

    m_status_code_isValid = ::OpenAPI::fromJsonValue(m_status_code, json[QString("statusCode")]);
    m_status_code_isSet = !json[QString("statusCode")].isNull() && m_status_code_isValid;

    m_target_isValid = ::OpenAPI::fromJsonValue(m_target, json[QString("target")]);
    m_target_isSet = !json[QString("target")].isNull() && m_target_isValid;

    m_user_agent_isValid = ::OpenAPI::fromJsonValue(m_user_agent, json[QString("userAgent")]);
    m_user_agent_isSet = !json[QString("userAgent")].isNull() && m_user_agent_isValid;

    m_user_agent_type_isValid = ::OpenAPI::fromJsonValue(m_user_agent_type, json[QString("userAgentType")]);
    m_user_agent_type_isSet = !json[QString("userAgentType")].isNull() && m_user_agent_type_isValid;
}

QString OAILog_Read::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILog_Read::asJsonObject() const {
    QJsonObject obj;
    if (m_created_at_isSet) {
        obj.insert(QString("createdAt"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_fixed_isSet) {
        obj.insert(QString("fixed"), ::OpenAPI::toJsonValue(m_fixed));
    }
    if (m_fixed_by_versions.size() > 0) {
        obj.insert(QString("fixedByVersions"), ::OpenAPI::toJsonValue(m_fixed_by_versions));
    }
    if (m_from_smart_list_isSet) {
        obj.insert(QString("fromSmartList"), ::OpenAPI::toJsonValue(m_from_smart_list));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_instance_name_isSet) {
        obj.insert(QString("instanceName"), ::OpenAPI::toJsonValue(m_instance_name));
    }
    if (m_method_isSet) {
        obj.insert(QString("method"), ::OpenAPI::toJsonValue(m_method));
    }
    if (m_not_fixed_by_versions.size() > 0) {
        obj.insert(QString("notFixedByVersions"), ::OpenAPI::toJsonValue(m_not_fixed_by_versions));
    }
    if (m_proxy_isSet) {
        obj.insert(QString("proxy"), ::OpenAPI::toJsonValue(m_proxy));
    }
    if (m_referrer_isSet) {
        obj.insert(QString("referrer"), ::OpenAPI::toJsonValue(m_referrer));
    }
    if (m_rule_id_isSet) {
        obj.insert(QString("ruleId"), ::OpenAPI::toJsonValue(m_rule_id));
    }
    if (m_simplified_user_agent_isSet) {
        obj.insert(QString("simplifiedUserAgent"), ::OpenAPI::toJsonValue(m_simplified_user_agent));
    }
    if (m_smart_list_isSet) {
        obj.insert(QString("smartList"), ::OpenAPI::toJsonValue(m_smart_list));
    }
    if (m_source_isSet) {
        obj.insert(QString("source"), ::OpenAPI::toJsonValue(m_source));
    }
    if (m_status_code_isSet) {
        obj.insert(QString("statusCode"), ::OpenAPI::toJsonValue(m_status_code));
    }
    if (m_target_isSet) {
        obj.insert(QString("target"), ::OpenAPI::toJsonValue(m_target));
    }
    if (m_user_agent_isSet) {
        obj.insert(QString("userAgent"), ::OpenAPI::toJsonValue(m_user_agent));
    }
    if (m_user_agent_type_isSet) {
        obj.insert(QString("userAgentType"), ::OpenAPI::toJsonValue(m_user_agent_type));
    }
    return obj;
}

QDateTime OAILog_Read::getCreatedAt() const {
    return m_created_at;
}
void OAILog_Read::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAILog_Read::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAILog_Read::is_created_at_Valid() const{
    return m_created_at_isValid;
}

bool OAILog_Read::isFixed() const {
    return m_fixed;
}
void OAILog_Read::setFixed(const bool &fixed) {
    m_fixed = fixed;
    m_fixed_isSet = true;
}

bool OAILog_Read::is_fixed_Set() const{
    return m_fixed_isSet;
}

bool OAILog_Read::is_fixed_Valid() const{
    return m_fixed_isValid;
}

QList<QString> OAILog_Read::getFixedByVersions() const {
    return m_fixed_by_versions;
}
void OAILog_Read::setFixedByVersions(const QList<QString> &fixed_by_versions) {
    m_fixed_by_versions = fixed_by_versions;
    m_fixed_by_versions_isSet = true;
}

bool OAILog_Read::is_fixed_by_versions_Set() const{
    return m_fixed_by_versions_isSet;
}

bool OAILog_Read::is_fixed_by_versions_Valid() const{
    return m_fixed_by_versions_isValid;
}

bool OAILog_Read::isFromSmartList() const {
    return m_from_smart_list;
}
void OAILog_Read::setFromSmartList(const bool &from_smart_list) {
    m_from_smart_list = from_smart_list;
    m_from_smart_list_isSet = true;
}

bool OAILog_Read::is_from_smart_list_Set() const{
    return m_from_smart_list_isSet;
}

bool OAILog_Read::is_from_smart_list_Valid() const{
    return m_from_smart_list_isValid;
}

OAIObject OAILog_Read::getId() const {
    return m_id;
}
void OAILog_Read::setId(const OAIObject &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAILog_Read::is_id_Set() const{
    return m_id_isSet;
}

bool OAILog_Read::is_id_Valid() const{
    return m_id_isValid;
}

OAIObject OAILog_Read::getInstanceName() const {
    return m_instance_name;
}
void OAILog_Read::setInstanceName(const OAIObject &instance_name) {
    m_instance_name = instance_name;
    m_instance_name_isSet = true;
}

bool OAILog_Read::is_instance_name_Set() const{
    return m_instance_name_isSet;
}

bool OAILog_Read::is_instance_name_Valid() const{
    return m_instance_name_isValid;
}

OAIObject OAILog_Read::getMethod() const {
    return m_method;
}
void OAILog_Read::setMethod(const OAIObject &method) {
    m_method = method;
    m_method_isSet = true;
}

bool OAILog_Read::is_method_Set() const{
    return m_method_isSet;
}

bool OAILog_Read::is_method_Valid() const{
    return m_method_isValid;
}

QList<QString> OAILog_Read::getNotFixedByVersions() const {
    return m_not_fixed_by_versions;
}
void OAILog_Read::setNotFixedByVersions(const QList<QString> &not_fixed_by_versions) {
    m_not_fixed_by_versions = not_fixed_by_versions;
    m_not_fixed_by_versions_isSet = true;
}

bool OAILog_Read::is_not_fixed_by_versions_Set() const{
    return m_not_fixed_by_versions_isSet;
}

bool OAILog_Read::is_not_fixed_by_versions_Valid() const{
    return m_not_fixed_by_versions_isValid;
}

QString OAILog_Read::getProxy() const {
    return m_proxy;
}
void OAILog_Read::setProxy(const QString &proxy) {
    m_proxy = proxy;
    m_proxy_isSet = true;
}

bool OAILog_Read::is_proxy_Set() const{
    return m_proxy_isSet;
}

bool OAILog_Read::is_proxy_Valid() const{
    return m_proxy_isValid;
}

OAIObject OAILog_Read::getReferrer() const {
    return m_referrer;
}
void OAILog_Read::setReferrer(const OAIObject &referrer) {
    m_referrer = referrer;
    m_referrer_isSet = true;
}

bool OAILog_Read::is_referrer_Set() const{
    return m_referrer_isSet;
}

bool OAILog_Read::is_referrer_Valid() const{
    return m_referrer_isValid;
}

QString OAILog_Read::getRuleId() const {
    return m_rule_id;
}
void OAILog_Read::setRuleId(const QString &rule_id) {
    m_rule_id = rule_id;
    m_rule_id_isSet = true;
}

bool OAILog_Read::is_rule_id_Set() const{
    return m_rule_id_isSet;
}

bool OAILog_Read::is_rule_id_Valid() const{
    return m_rule_id_isValid;
}

OAIObject OAILog_Read::getSimplifiedUserAgent() const {
    return m_simplified_user_agent;
}
void OAILog_Read::setSimplifiedUserAgent(const OAIObject &simplified_user_agent) {
    m_simplified_user_agent = simplified_user_agent;
    m_simplified_user_agent_isSet = true;
}

bool OAILog_Read::is_simplified_user_agent_Set() const{
    return m_simplified_user_agent_isSet;
}

bool OAILog_Read::is_simplified_user_agent_Valid() const{
    return m_simplified_user_agent_isValid;
}

QString OAILog_Read::getSmartList() const {
    return m_smart_list;
}
void OAILog_Read::setSmartList(const QString &smart_list) {
    m_smart_list = smart_list;
    m_smart_list_isSet = true;
}

bool OAILog_Read::is_smart_list_Set() const{
    return m_smart_list_isSet;
}

bool OAILog_Read::is_smart_list_Valid() const{
    return m_smart_list_isValid;
}

OAIObject OAILog_Read::getSource() const {
    return m_source;
}
void OAILog_Read::setSource(const OAIObject &source) {
    m_source = source;
    m_source_isSet = true;
}

bool OAILog_Read::is_source_Set() const{
    return m_source_isSet;
}

bool OAILog_Read::is_source_Valid() const{
    return m_source_isValid;
}

OAIObject OAILog_Read::getStatusCode() const {
    return m_status_code;
}
void OAILog_Read::setStatusCode(const OAIObject &status_code) {
    m_status_code = status_code;
    m_status_code_isSet = true;
}

bool OAILog_Read::is_status_code_Set() const{
    return m_status_code_isSet;
}

bool OAILog_Read::is_status_code_Valid() const{
    return m_status_code_isValid;
}

OAIObject OAILog_Read::getTarget() const {
    return m_target;
}
void OAILog_Read::setTarget(const OAIObject &target) {
    m_target = target;
    m_target_isSet = true;
}

bool OAILog_Read::is_target_Set() const{
    return m_target_isSet;
}

bool OAILog_Read::is_target_Valid() const{
    return m_target_isValid;
}

OAIObject OAILog_Read::getUserAgent() const {
    return m_user_agent;
}
void OAILog_Read::setUserAgent(const OAIObject &user_agent) {
    m_user_agent = user_agent;
    m_user_agent_isSet = true;
}

bool OAILog_Read::is_user_agent_Set() const{
    return m_user_agent_isSet;
}

bool OAILog_Read::is_user_agent_Valid() const{
    return m_user_agent_isValid;
}

OAIObject OAILog_Read::getUserAgentType() const {
    return m_user_agent_type;
}
void OAILog_Read::setUserAgentType(const OAIObject &user_agent_type) {
    m_user_agent_type = user_agent_type;
    m_user_agent_type_isSet = true;
}

bool OAILog_Read::is_user_agent_type_Set() const{
    return m_user_agent_type_isSet;
}

bool OAILog_Read::is_user_agent_type_Valid() const{
    return m_user_agent_type_isValid;
}

bool OAILog_Read::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fixed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fixed_by_versions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_from_smart_list_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_instance_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_method_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_not_fixed_by_versions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_proxy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_referrer_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rule_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_simplified_user_agent_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_smart_list_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_agent_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_agent_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILog_Read::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
