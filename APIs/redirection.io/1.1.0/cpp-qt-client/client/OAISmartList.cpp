/**
 * redirection.io
 * API documentation for redirection.io
 *
 * The version of the OpenAPI document: 1.1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISmartList.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISmartList::OAISmartList(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISmartList::OAISmartList() {
    this->initializeModel();
}

OAISmartList::~OAISmartList() {}

void OAISmartList::initializeModel() {

    m_default_version_isSet = false;
    m_default_version_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_rules_isSet = false;
    m_rules_isValid = false;

    m_versions_isSet = false;
    m_versions_isValid = false;
}

void OAISmartList::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISmartList::fromJsonObject(QJsonObject json) {

    m_default_version_isValid = ::OpenAPI::fromJsonValue(m_default_version, json[QString("defaultVersion")]);
    m_default_version_isSet = !json[QString("defaultVersion")].isNull() && m_default_version_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_rules_isValid = ::OpenAPI::fromJsonValue(m_rules, json[QString("rules")]);
    m_rules_isSet = !json[QString("rules")].isNull() && m_rules_isValid;

    m_versions_isValid = ::OpenAPI::fromJsonValue(m_versions, json[QString("versions")]);
    m_versions_isSet = !json[QString("versions")].isNull() && m_versions_isValid;
}

QString OAISmartList::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISmartList::asJsonObject() const {
    QJsonObject obj;
    if (m_default_version_isSet) {
        obj.insert(QString("defaultVersion"), ::OpenAPI::toJsonValue(m_default_version));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_rules_isSet) {
        obj.insert(QString("rules"), ::OpenAPI::toJsonValue(m_rules));
    }
    if (m_versions.size() > 0) {
        obj.insert(QString("versions"), ::OpenAPI::toJsonValue(m_versions));
    }
    return obj;
}

QString OAISmartList::getDefaultVersion() const {
    return m_default_version;
}
void OAISmartList::setDefaultVersion(const QString &default_version) {
    m_default_version = default_version;
    m_default_version_isSet = true;
}

bool OAISmartList::is_default_version_Set() const{
    return m_default_version_isSet;
}

bool OAISmartList::is_default_version_Valid() const{
    return m_default_version_isValid;
}

QString OAISmartList::getDescription() const {
    return m_description;
}
void OAISmartList::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAISmartList::is_description_Set() const{
    return m_description_isSet;
}

bool OAISmartList::is_description_Valid() const{
    return m_description_isValid;
}

QString OAISmartList::getId() const {
    return m_id;
}
void OAISmartList::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAISmartList::is_id_Set() const{
    return m_id_isSet;
}

bool OAISmartList::is_id_Valid() const{
    return m_id_isValid;
}

QString OAISmartList::getName() const {
    return m_name;
}
void OAISmartList::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAISmartList::is_name_Set() const{
    return m_name_isSet;
}

bool OAISmartList::is_name_Valid() const{
    return m_name_isValid;
}

QString OAISmartList::getRules() const {
    return m_rules;
}
void OAISmartList::setRules(const QString &rules) {
    m_rules = rules;
    m_rules_isSet = true;
}

bool OAISmartList::is_rules_Set() const{
    return m_rules_isSet;
}

bool OAISmartList::is_rules_Valid() const{
    return m_rules_isValid;
}

QList<QString> OAISmartList::getVersions() const {
    return m_versions;
}
void OAISmartList::setVersions(const QList<QString> &versions) {
    m_versions = versions;
    m_versions_isSet = true;
}

bool OAISmartList::is_versions_Set() const{
    return m_versions_isSet;
}

bool OAISmartList::is_versions_Valid() const{
    return m_versions_isValid;
}

bool OAISmartList::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_default_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rules_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_versions.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISmartList::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
