/**
 * redirection.io
 * API documentation for redirection.io
 *
 * The version of the OpenAPI document: 1.1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUser.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUser::OAIUser(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUser::OAIUser() {
    this->initializeModel();
}

OAIUser::~OAIUser() {}

void OAIUser::initializeModel() {

    m_current_password_isSet = false;
    m_current_password_isValid = false;

    m_default_organization_isSet = false;
    m_default_organization_isValid = false;

    m_email_isSet = false;
    m_email_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_new_email_isSet = false;
    m_new_email_isValid = false;

    m_new_email_token_isSet = false;
    m_new_email_token_isValid = false;

    m_new_email_token_expired_at_isSet = false;
    m_new_email_token_expired_at_isValid = false;

    m_password_isSet = false;
    m_password_isValid = false;

    m_plain_password_isSet = false;
    m_plain_password_isValid = false;

    m_plain_password_repeat_isSet = false;
    m_plain_password_repeat_isValid = false;

    m_projects_flattened_isSet = false;
    m_projects_flattened_isValid = false;

    m_super_admin_isSet = false;
    m_super_admin_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;

    m_user_organizations_isSet = false;
    m_user_organizations_isValid = false;

    m_user_projects_isSet = false;
    m_user_projects_isValid = false;
}

void OAIUser::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUser::fromJsonObject(QJsonObject json) {

    m_current_password_isValid = ::OpenAPI::fromJsonValue(m_current_password, json[QString("currentPassword")]);
    m_current_password_isSet = !json[QString("currentPassword")].isNull() && m_current_password_isValid;

    m_default_organization_isValid = ::OpenAPI::fromJsonValue(m_default_organization, json[QString("defaultOrganization")]);
    m_default_organization_isSet = !json[QString("defaultOrganization")].isNull() && m_default_organization_isValid;

    m_email_isValid = ::OpenAPI::fromJsonValue(m_email, json[QString("email")]);
    m_email_isSet = !json[QString("email")].isNull() && m_email_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_new_email_isValid = ::OpenAPI::fromJsonValue(m_new_email, json[QString("newEmail")]);
    m_new_email_isSet = !json[QString("newEmail")].isNull() && m_new_email_isValid;

    m_new_email_token_isValid = ::OpenAPI::fromJsonValue(m_new_email_token, json[QString("newEmailToken")]);
    m_new_email_token_isSet = !json[QString("newEmailToken")].isNull() && m_new_email_token_isValid;

    m_new_email_token_expired_at_isValid = ::OpenAPI::fromJsonValue(m_new_email_token_expired_at, json[QString("newEmailTokenExpiredAt")]);
    m_new_email_token_expired_at_isSet = !json[QString("newEmailTokenExpiredAt")].isNull() && m_new_email_token_expired_at_isValid;

    m_password_isValid = ::OpenAPI::fromJsonValue(m_password, json[QString("password")]);
    m_password_isSet = !json[QString("password")].isNull() && m_password_isValid;

    m_plain_password_isValid = ::OpenAPI::fromJsonValue(m_plain_password, json[QString("plainPassword")]);
    m_plain_password_isSet = !json[QString("plainPassword")].isNull() && m_plain_password_isValid;

    m_plain_password_repeat_isValid = ::OpenAPI::fromJsonValue(m_plain_password_repeat, json[QString("plainPasswordRepeat")]);
    m_plain_password_repeat_isSet = !json[QString("plainPasswordRepeat")].isNull() && m_plain_password_repeat_isValid;

    m_projects_flattened_isValid = ::OpenAPI::fromJsonValue(m_projects_flattened, json[QString("projectsFlattened")]);
    m_projects_flattened_isSet = !json[QString("projectsFlattened")].isNull() && m_projects_flattened_isValid;

    m_super_admin_isValid = ::OpenAPI::fromJsonValue(m_super_admin, json[QString("superAdmin")]);
    m_super_admin_isSet = !json[QString("superAdmin")].isNull() && m_super_admin_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updatedAt")]);
    m_updated_at_isSet = !json[QString("updatedAt")].isNull() && m_updated_at_isValid;

    m_user_organizations_isValid = ::OpenAPI::fromJsonValue(m_user_organizations, json[QString("userOrganizations")]);
    m_user_organizations_isSet = !json[QString("userOrganizations")].isNull() && m_user_organizations_isValid;

    m_user_projects_isValid = ::OpenAPI::fromJsonValue(m_user_projects, json[QString("userProjects")]);
    m_user_projects_isSet = !json[QString("userProjects")].isNull() && m_user_projects_isValid;
}

QString OAIUser::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUser::asJsonObject() const {
    QJsonObject obj;
    if (m_current_password_isSet) {
        obj.insert(QString("currentPassword"), ::OpenAPI::toJsonValue(m_current_password));
    }
    if (m_default_organization.isSet()) {
        obj.insert(QString("defaultOrganization"), ::OpenAPI::toJsonValue(m_default_organization));
    }
    if (m_email_isSet) {
        obj.insert(QString("email"), ::OpenAPI::toJsonValue(m_email));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_new_email_isSet) {
        obj.insert(QString("newEmail"), ::OpenAPI::toJsonValue(m_new_email));
    }
    if (m_new_email_token_isSet) {
        obj.insert(QString("newEmailToken"), ::OpenAPI::toJsonValue(m_new_email_token));
    }
    if (m_new_email_token_expired_at_isSet) {
        obj.insert(QString("newEmailTokenExpiredAt"), ::OpenAPI::toJsonValue(m_new_email_token_expired_at));
    }
    if (m_password_isSet) {
        obj.insert(QString("password"), ::OpenAPI::toJsonValue(m_password));
    }
    if (m_plain_password_isSet) {
        obj.insert(QString("plainPassword"), ::OpenAPI::toJsonValue(m_plain_password));
    }
    if (m_plain_password_repeat_isSet) {
        obj.insert(QString("plainPasswordRepeat"), ::OpenAPI::toJsonValue(m_plain_password_repeat));
    }
    if (m_projects_flattened.size() > 0) {
        obj.insert(QString("projectsFlattened"), ::OpenAPI::toJsonValue(m_projects_flattened));
    }
    if (m_super_admin_isSet) {
        obj.insert(QString("superAdmin"), ::OpenAPI::toJsonValue(m_super_admin));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updatedAt"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    if (m_user_organizations.size() > 0) {
        obj.insert(QString("userOrganizations"), ::OpenAPI::toJsonValue(m_user_organizations));
    }
    if (m_user_projects.size() > 0) {
        obj.insert(QString("userProjects"), ::OpenAPI::toJsonValue(m_user_projects));
    }
    return obj;
}

OAIObject OAIUser::getCurrentPassword() const {
    return m_current_password;
}
void OAIUser::setCurrentPassword(const OAIObject &current_password) {
    m_current_password = current_password;
    m_current_password_isSet = true;
}

bool OAIUser::is_current_password_Set() const{
    return m_current_password_isSet;
}

bool OAIUser::is_current_password_Valid() const{
    return m_current_password_isValid;
}

OAIOrganization OAIUser::getDefaultOrganization() const {
    return m_default_organization;
}
void OAIUser::setDefaultOrganization(const OAIOrganization &default_organization) {
    m_default_organization = default_organization;
    m_default_organization_isSet = true;
}

bool OAIUser::is_default_organization_Set() const{
    return m_default_organization_isSet;
}

bool OAIUser::is_default_organization_Valid() const{
    return m_default_organization_isValid;
}

QString OAIUser::getEmail() const {
    return m_email;
}
void OAIUser::setEmail(const QString &email) {
    m_email = email;
    m_email_isSet = true;
}

bool OAIUser::is_email_Set() const{
    return m_email_isSet;
}

bool OAIUser::is_email_Valid() const{
    return m_email_isValid;
}

QString OAIUser::getId() const {
    return m_id;
}
void OAIUser::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIUser::is_id_Set() const{
    return m_id_isSet;
}

bool OAIUser::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIUser::getName() const {
    return m_name;
}
void OAIUser::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIUser::is_name_Set() const{
    return m_name_isSet;
}

bool OAIUser::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIUser::getNewEmail() const {
    return m_new_email;
}
void OAIUser::setNewEmail(const QString &new_email) {
    m_new_email = new_email;
    m_new_email_isSet = true;
}

bool OAIUser::is_new_email_Set() const{
    return m_new_email_isSet;
}

bool OAIUser::is_new_email_Valid() const{
    return m_new_email_isValid;
}

QString OAIUser::getNewEmailToken() const {
    return m_new_email_token;
}
void OAIUser::setNewEmailToken(const QString &new_email_token) {
    m_new_email_token = new_email_token;
    m_new_email_token_isSet = true;
}

bool OAIUser::is_new_email_token_Set() const{
    return m_new_email_token_isSet;
}

bool OAIUser::is_new_email_token_Valid() const{
    return m_new_email_token_isValid;
}

QDateTime OAIUser::getNewEmailTokenExpiredAt() const {
    return m_new_email_token_expired_at;
}
void OAIUser::setNewEmailTokenExpiredAt(const QDateTime &new_email_token_expired_at) {
    m_new_email_token_expired_at = new_email_token_expired_at;
    m_new_email_token_expired_at_isSet = true;
}

bool OAIUser::is_new_email_token_expired_at_Set() const{
    return m_new_email_token_expired_at_isSet;
}

bool OAIUser::is_new_email_token_expired_at_Valid() const{
    return m_new_email_token_expired_at_isValid;
}

QString OAIUser::getPassword() const {
    return m_password;
}
void OAIUser::setPassword(const QString &password) {
    m_password = password;
    m_password_isSet = true;
}

bool OAIUser::is_password_Set() const{
    return m_password_isSet;
}

bool OAIUser::is_password_Valid() const{
    return m_password_isValid;
}

QString OAIUser::getPlainPassword() const {
    return m_plain_password;
}
void OAIUser::setPlainPassword(const QString &plain_password) {
    m_plain_password = plain_password;
    m_plain_password_isSet = true;
}

bool OAIUser::is_plain_password_Set() const{
    return m_plain_password_isSet;
}

bool OAIUser::is_plain_password_Valid() const{
    return m_plain_password_isValid;
}

OAIObject OAIUser::getPlainPasswordRepeat() const {
    return m_plain_password_repeat;
}
void OAIUser::setPlainPasswordRepeat(const OAIObject &plain_password_repeat) {
    m_plain_password_repeat = plain_password_repeat;
    m_plain_password_repeat_isSet = true;
}

bool OAIUser::is_plain_password_repeat_Set() const{
    return m_plain_password_repeat_isSet;
}

bool OAIUser::is_plain_password_repeat_Valid() const{
    return m_plain_password_repeat_isValid;
}

QList<QString> OAIUser::getProjectsFlattened() const {
    return m_projects_flattened;
}
void OAIUser::setProjectsFlattened(const QList<QString> &projects_flattened) {
    m_projects_flattened = projects_flattened;
    m_projects_flattened_isSet = true;
}

bool OAIUser::is_projects_flattened_Set() const{
    return m_projects_flattened_isSet;
}

bool OAIUser::is_projects_flattened_Valid() const{
    return m_projects_flattened_isValid;
}

bool OAIUser::isSuperAdmin() const {
    return m_super_admin;
}
void OAIUser::setSuperAdmin(const bool &super_admin) {
    m_super_admin = super_admin;
    m_super_admin_isSet = true;
}

bool OAIUser::is_super_admin_Set() const{
    return m_super_admin_isSet;
}

bool OAIUser::is_super_admin_Valid() const{
    return m_super_admin_isValid;
}

QDateTime OAIUser::getUpdatedAt() const {
    return m_updated_at;
}
void OAIUser::setUpdatedAt(const QDateTime &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAIUser::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAIUser::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

QList<OAIUserOrganization> OAIUser::getUserOrganizations() const {
    return m_user_organizations;
}
void OAIUser::setUserOrganizations(const QList<OAIUserOrganization> &user_organizations) {
    m_user_organizations = user_organizations;
    m_user_organizations_isSet = true;
}

bool OAIUser::is_user_organizations_Set() const{
    return m_user_organizations_isSet;
}

bool OAIUser::is_user_organizations_Valid() const{
    return m_user_organizations_isValid;
}

QList<QString> OAIUser::getUserProjects() const {
    return m_user_projects;
}
void OAIUser::setUserProjects(const QList<QString> &user_projects) {
    m_user_projects = user_projects;
    m_user_projects_isSet = true;
}

bool OAIUser::is_user_projects_Set() const{
    return m_user_projects_isSet;
}

bool OAIUser::is_user_projects_Valid() const{
    return m_user_projects_isValid;
}

bool OAIUser::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_current_password_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_organization.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_new_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_new_email_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_new_email_token_expired_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_password_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_plain_password_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_plain_password_repeat_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_projects_flattened.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_super_admin_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_organizations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_projects.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUser::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_email_isValid && m_name_isValid && true;
}

} // namespace OpenAPI
