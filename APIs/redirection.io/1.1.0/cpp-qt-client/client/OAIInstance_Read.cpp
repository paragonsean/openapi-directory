/**
 * redirection.io
 * API documentation for redirection.io
 *
 * The version of the OpenAPI document: 1.1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInstance_Read.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInstance_Read::OAIInstance_Read(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInstance_Read::OAIInstance_Read() {
    this->initializeModel();
}

OAIInstance_Read::~OAIInstance_Read() {}

void OAIInstance_Read::initializeModel() {

    m_agent_duration_isSet = false;
    m_agent_duration_isValid = false;

    m_agent_version_isSet = false;
    m_agent_version_isValid = false;

    m_agent_version_status_isSet = false;
    m_agent_version_status_isValid = false;

    m_config_isSet = false;
    m_config_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_gone_isSet = false;
    m_gone_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_last_completed_at_isSet = false;
    m_last_completed_at_isValid = false;

    m_last_started_at_isSet = false;
    m_last_started_at_isValid = false;

    m_live_isSet = false;
    m_live_isValid = false;

    m_logging_isSet = false;
    m_logging_isValid = false;

    m_logs_last_flushed_at_isSet = false;
    m_logs_last_flushed_at_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;

    m_misconfigured_isSet = false;
    m_misconfigured_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_rules_count_isSet = false;
    m_rules_count_isValid = false;

    m_rules_hash_isSet = false;
    m_rules_hash_isValid = false;

    m_stale_isSet = false;
    m_stale_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;
}

void OAIInstance_Read::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInstance_Read::fromJsonObject(QJsonObject json) {

    m_agent_duration_isValid = ::OpenAPI::fromJsonValue(m_agent_duration, json[QString("agentDuration")]);
    m_agent_duration_isSet = !json[QString("agentDuration")].isNull() && m_agent_duration_isValid;

    m_agent_version_isValid = ::OpenAPI::fromJsonValue(m_agent_version, json[QString("agentVersion")]);
    m_agent_version_isSet = !json[QString("agentVersion")].isNull() && m_agent_version_isValid;

    m_agent_version_status_isValid = ::OpenAPI::fromJsonValue(m_agent_version_status, json[QString("agentVersionStatus")]);
    m_agent_version_status_isSet = !json[QString("agentVersionStatus")].isNull() && m_agent_version_status_isValid;

    m_config_isValid = ::OpenAPI::fromJsonValue(m_config, json[QString("config")]);
    m_config_isSet = !json[QString("config")].isNull() && m_config_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("createdAt")]);
    m_created_at_isSet = !json[QString("createdAt")].isNull() && m_created_at_isValid;

    m_gone_isValid = ::OpenAPI::fromJsonValue(m_gone, json[QString("gone")]);
    m_gone_isSet = !json[QString("gone")].isNull() && m_gone_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_last_completed_at_isValid = ::OpenAPI::fromJsonValue(m_last_completed_at, json[QString("lastCompletedAt")]);
    m_last_completed_at_isSet = !json[QString("lastCompletedAt")].isNull() && m_last_completed_at_isValid;

    m_last_started_at_isValid = ::OpenAPI::fromJsonValue(m_last_started_at, json[QString("lastStartedAt")]);
    m_last_started_at_isSet = !json[QString("lastStartedAt")].isNull() && m_last_started_at_isValid;

    m_live_isValid = ::OpenAPI::fromJsonValue(m_live, json[QString("live")]);
    m_live_isSet = !json[QString("live")].isNull() && m_live_isValid;

    m_logging_isValid = ::OpenAPI::fromJsonValue(m_logging, json[QString("logging")]);
    m_logging_isSet = !json[QString("logging")].isNull() && m_logging_isValid;

    m_logs_last_flushed_at_isValid = ::OpenAPI::fromJsonValue(m_logs_last_flushed_at, json[QString("logsLastFlushedAt")]);
    m_logs_last_flushed_at_isSet = !json[QString("logsLastFlushedAt")].isNull() && m_logs_last_flushed_at_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;

    m_misconfigured_isValid = ::OpenAPI::fromJsonValue(m_misconfigured, json[QString("misconfigured")]);
    m_misconfigured_isSet = !json[QString("misconfigured")].isNull() && m_misconfigured_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_rules_count_isValid = ::OpenAPI::fromJsonValue(m_rules_count, json[QString("rulesCount")]);
    m_rules_count_isSet = !json[QString("rulesCount")].isNull() && m_rules_count_isValid;

    m_rules_hash_isValid = ::OpenAPI::fromJsonValue(m_rules_hash, json[QString("rulesHash")]);
    m_rules_hash_isSet = !json[QString("rulesHash")].isNull() && m_rules_hash_isValid;

    m_stale_isValid = ::OpenAPI::fromJsonValue(m_stale, json[QString("stale")]);
    m_stale_isSet = !json[QString("stale")].isNull() && m_stale_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updatedAt")]);
    m_updated_at_isSet = !json[QString("updatedAt")].isNull() && m_updated_at_isValid;
}

QString OAIInstance_Read::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInstance_Read::asJsonObject() const {
    QJsonObject obj;
    if (m_agent_duration_isSet) {
        obj.insert(QString("agentDuration"), ::OpenAPI::toJsonValue(m_agent_duration));
    }
    if (m_agent_version_isSet) {
        obj.insert(QString("agentVersion"), ::OpenAPI::toJsonValue(m_agent_version));
    }
    if (m_agent_version_status_isSet) {
        obj.insert(QString("agentVersionStatus"), ::OpenAPI::toJsonValue(m_agent_version_status));
    }
    if (m_config_isSet) {
        obj.insert(QString("config"), ::OpenAPI::toJsonValue(m_config));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("createdAt"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_gone_isSet) {
        obj.insert(QString("gone"), ::OpenAPI::toJsonValue(m_gone));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_last_completed_at_isSet) {
        obj.insert(QString("lastCompletedAt"), ::OpenAPI::toJsonValue(m_last_completed_at));
    }
    if (m_last_started_at_isSet) {
        obj.insert(QString("lastStartedAt"), ::OpenAPI::toJsonValue(m_last_started_at));
    }
    if (m_live_isSet) {
        obj.insert(QString("live"), ::OpenAPI::toJsonValue(m_live));
    }
    if (m_logging_isSet) {
        obj.insert(QString("logging"), ::OpenAPI::toJsonValue(m_logging));
    }
    if (m_logs_last_flushed_at_isSet) {
        obj.insert(QString("logsLastFlushedAt"), ::OpenAPI::toJsonValue(m_logs_last_flushed_at));
    }
    if (m_message_isSet) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_misconfigured_isSet) {
        obj.insert(QString("misconfigured"), ::OpenAPI::toJsonValue(m_misconfigured));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_rules_count_isSet) {
        obj.insert(QString("rulesCount"), ::OpenAPI::toJsonValue(m_rules_count));
    }
    if (m_rules_hash_isSet) {
        obj.insert(QString("rulesHash"), ::OpenAPI::toJsonValue(m_rules_hash));
    }
    if (m_stale_isSet) {
        obj.insert(QString("stale"), ::OpenAPI::toJsonValue(m_stale));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updatedAt"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    return obj;
}

qint32 OAIInstance_Read::getAgentDuration() const {
    return m_agent_duration;
}
void OAIInstance_Read::setAgentDuration(const qint32 &agent_duration) {
    m_agent_duration = agent_duration;
    m_agent_duration_isSet = true;
}

bool OAIInstance_Read::is_agent_duration_Set() const{
    return m_agent_duration_isSet;
}

bool OAIInstance_Read::is_agent_duration_Valid() const{
    return m_agent_duration_isValid;
}

QString OAIInstance_Read::getAgentVersion() const {
    return m_agent_version;
}
void OAIInstance_Read::setAgentVersion(const QString &agent_version) {
    m_agent_version = agent_version;
    m_agent_version_isSet = true;
}

bool OAIInstance_Read::is_agent_version_Set() const{
    return m_agent_version_isSet;
}

bool OAIInstance_Read::is_agent_version_Valid() const{
    return m_agent_version_isValid;
}

QString OAIInstance_Read::getAgentVersionStatus() const {
    return m_agent_version_status;
}
void OAIInstance_Read::setAgentVersionStatus(const QString &agent_version_status) {
    m_agent_version_status = agent_version_status;
    m_agent_version_status_isSet = true;
}

bool OAIInstance_Read::is_agent_version_status_Set() const{
    return m_agent_version_status_isSet;
}

bool OAIInstance_Read::is_agent_version_status_Valid() const{
    return m_agent_version_status_isValid;
}

QString OAIInstance_Read::getConfig() const {
    return m_config;
}
void OAIInstance_Read::setConfig(const QString &config) {
    m_config = config;
    m_config_isSet = true;
}

bool OAIInstance_Read::is_config_Set() const{
    return m_config_isSet;
}

bool OAIInstance_Read::is_config_Valid() const{
    return m_config_isValid;
}

QDateTime OAIInstance_Read::getCreatedAt() const {
    return m_created_at;
}
void OAIInstance_Read::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIInstance_Read::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIInstance_Read::is_created_at_Valid() const{
    return m_created_at_isValid;
}

bool OAIInstance_Read::isGone() const {
    return m_gone;
}
void OAIInstance_Read::setGone(const bool &gone) {
    m_gone = gone;
    m_gone_isSet = true;
}

bool OAIInstance_Read::is_gone_Set() const{
    return m_gone_isSet;
}

bool OAIInstance_Read::is_gone_Valid() const{
    return m_gone_isValid;
}

QString OAIInstance_Read::getId() const {
    return m_id;
}
void OAIInstance_Read::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIInstance_Read::is_id_Set() const{
    return m_id_isSet;
}

bool OAIInstance_Read::is_id_Valid() const{
    return m_id_isValid;
}

QDateTime OAIInstance_Read::getLastCompletedAt() const {
    return m_last_completed_at;
}
void OAIInstance_Read::setLastCompletedAt(const QDateTime &last_completed_at) {
    m_last_completed_at = last_completed_at;
    m_last_completed_at_isSet = true;
}

bool OAIInstance_Read::is_last_completed_at_Set() const{
    return m_last_completed_at_isSet;
}

bool OAIInstance_Read::is_last_completed_at_Valid() const{
    return m_last_completed_at_isValid;
}

QDateTime OAIInstance_Read::getLastStartedAt() const {
    return m_last_started_at;
}
void OAIInstance_Read::setLastStartedAt(const QDateTime &last_started_at) {
    m_last_started_at = last_started_at;
    m_last_started_at_isSet = true;
}

bool OAIInstance_Read::is_last_started_at_Set() const{
    return m_last_started_at_isSet;
}

bool OAIInstance_Read::is_last_started_at_Valid() const{
    return m_last_started_at_isValid;
}

bool OAIInstance_Read::isLive() const {
    return m_live;
}
void OAIInstance_Read::setLive(const bool &live) {
    m_live = live;
    m_live_isSet = true;
}

bool OAIInstance_Read::is_live_Set() const{
    return m_live_isSet;
}

bool OAIInstance_Read::is_live_Valid() const{
    return m_live_isValid;
}

bool OAIInstance_Read::isLogging() const {
    return m_logging;
}
void OAIInstance_Read::setLogging(const bool &logging) {
    m_logging = logging;
    m_logging_isSet = true;
}

bool OAIInstance_Read::is_logging_Set() const{
    return m_logging_isSet;
}

bool OAIInstance_Read::is_logging_Valid() const{
    return m_logging_isValid;
}

QDateTime OAIInstance_Read::getLogsLastFlushedAt() const {
    return m_logs_last_flushed_at;
}
void OAIInstance_Read::setLogsLastFlushedAt(const QDateTime &logs_last_flushed_at) {
    m_logs_last_flushed_at = logs_last_flushed_at;
    m_logs_last_flushed_at_isSet = true;
}

bool OAIInstance_Read::is_logs_last_flushed_at_Set() const{
    return m_logs_last_flushed_at_isSet;
}

bool OAIInstance_Read::is_logs_last_flushed_at_Valid() const{
    return m_logs_last_flushed_at_isValid;
}

QString OAIInstance_Read::getMessage() const {
    return m_message;
}
void OAIInstance_Read::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAIInstance_Read::is_message_Set() const{
    return m_message_isSet;
}

bool OAIInstance_Read::is_message_Valid() const{
    return m_message_isValid;
}

bool OAIInstance_Read::isMisconfigured() const {
    return m_misconfigured;
}
void OAIInstance_Read::setMisconfigured(const bool &misconfigured) {
    m_misconfigured = misconfigured;
    m_misconfigured_isSet = true;
}

bool OAIInstance_Read::is_misconfigured_Set() const{
    return m_misconfigured_isSet;
}

bool OAIInstance_Read::is_misconfigured_Valid() const{
    return m_misconfigured_isValid;
}

QString OAIInstance_Read::getName() const {
    return m_name;
}
void OAIInstance_Read::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIInstance_Read::is_name_Set() const{
    return m_name_isSet;
}

bool OAIInstance_Read::is_name_Valid() const{
    return m_name_isValid;
}

qint32 OAIInstance_Read::getRulesCount() const {
    return m_rules_count;
}
void OAIInstance_Read::setRulesCount(const qint32 &rules_count) {
    m_rules_count = rules_count;
    m_rules_count_isSet = true;
}

bool OAIInstance_Read::is_rules_count_Set() const{
    return m_rules_count_isSet;
}

bool OAIInstance_Read::is_rules_count_Valid() const{
    return m_rules_count_isValid;
}

QString OAIInstance_Read::getRulesHash() const {
    return m_rules_hash;
}
void OAIInstance_Read::setRulesHash(const QString &rules_hash) {
    m_rules_hash = rules_hash;
    m_rules_hash_isSet = true;
}

bool OAIInstance_Read::is_rules_hash_Set() const{
    return m_rules_hash_isSet;
}

bool OAIInstance_Read::is_rules_hash_Valid() const{
    return m_rules_hash_isValid;
}

bool OAIInstance_Read::isStale() const {
    return m_stale;
}
void OAIInstance_Read::setStale(const bool &stale) {
    m_stale = stale;
    m_stale_isSet = true;
}

bool OAIInstance_Read::is_stale_Set() const{
    return m_stale_isSet;
}

bool OAIInstance_Read::is_stale_Valid() const{
    return m_stale_isValid;
}

qint32 OAIInstance_Read::getStatus() const {
    return m_status;
}
void OAIInstance_Read::setStatus(const qint32 &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIInstance_Read::is_status_Set() const{
    return m_status_isSet;
}

bool OAIInstance_Read::is_status_Valid() const{
    return m_status_isValid;
}

QDateTime OAIInstance_Read::getUpdatedAt() const {
    return m_updated_at;
}
void OAIInstance_Read::setUpdatedAt(const QDateTime &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAIInstance_Read::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAIInstance_Read::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

bool OAIInstance_Read::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_agent_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_agent_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_agent_version_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_config_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gone_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_completed_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_started_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_live_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_logging_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_logs_last_flushed_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_misconfigured_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rules_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rules_hash_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stale_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInstance_Read::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && true;
}

} // namespace OpenAPI
