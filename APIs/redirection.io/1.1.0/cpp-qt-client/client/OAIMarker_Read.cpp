/**
 * redirection.io
 * API documentation for redirection.io
 *
 * The version of the OpenAPI document: 1.1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMarker_Read.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMarker_Read::OAIMarker_Read(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMarker_Read::OAIMarker_Read() {
    this->initializeModel();
}

OAIMarker_Read::~OAIMarker_Read() {}

void OAIMarker_Read::initializeModel() {

    m_maximum_occurrence_isSet = false;
    m_maximum_occurrence_isValid = false;

    m_minimum_occurrence_isSet = false;
    m_minimum_occurrence_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_options_isSet = false;
    m_options_isValid = false;

    m_transformers_isSet = false;
    m_transformers_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIMarker_Read::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMarker_Read::fromJsonObject(QJsonObject json) {

    m_maximum_occurrence_isValid = ::OpenAPI::fromJsonValue(m_maximum_occurrence, json[QString("maximumOccurrence")]);
    m_maximum_occurrence_isSet = !json[QString("maximumOccurrence")].isNull() && m_maximum_occurrence_isValid;

    m_minimum_occurrence_isValid = ::OpenAPI::fromJsonValue(m_minimum_occurrence, json[QString("minimumOccurrence")]);
    m_minimum_occurrence_isSet = !json[QString("minimumOccurrence")].isNull() && m_minimum_occurrence_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_options_isValid = ::OpenAPI::fromJsonValue(m_options, json[QString("options")]);
    m_options_isSet = !json[QString("options")].isNull() && m_options_isValid;

    m_transformers_isValid = ::OpenAPI::fromJsonValue(m_transformers, json[QString("transformers")]);
    m_transformers_isSet = !json[QString("transformers")].isNull() && m_transformers_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIMarker_Read::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMarker_Read::asJsonObject() const {
    QJsonObject obj;
    if (m_maximum_occurrence_isSet) {
        obj.insert(QString("maximumOccurrence"), ::OpenAPI::toJsonValue(m_maximum_occurrence));
    }
    if (m_minimum_occurrence_isSet) {
        obj.insert(QString("minimumOccurrence"), ::OpenAPI::toJsonValue(m_minimum_occurrence));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_options.size() > 0) {
        obj.insert(QString("options"), ::OpenAPI::toJsonValue(m_options));
    }
    if (m_transformers.size() > 0) {
        obj.insert(QString("transformers"), ::OpenAPI::toJsonValue(m_transformers));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

qint32 OAIMarker_Read::getMaximumOccurrence() const {
    return m_maximum_occurrence;
}
void OAIMarker_Read::setMaximumOccurrence(const qint32 &maximum_occurrence) {
    m_maximum_occurrence = maximum_occurrence;
    m_maximum_occurrence_isSet = true;
}

bool OAIMarker_Read::is_maximum_occurrence_Set() const{
    return m_maximum_occurrence_isSet;
}

bool OAIMarker_Read::is_maximum_occurrence_Valid() const{
    return m_maximum_occurrence_isValid;
}

qint32 OAIMarker_Read::getMinimumOccurrence() const {
    return m_minimum_occurrence;
}
void OAIMarker_Read::setMinimumOccurrence(const qint32 &minimum_occurrence) {
    m_minimum_occurrence = minimum_occurrence;
    m_minimum_occurrence_isSet = true;
}

bool OAIMarker_Read::is_minimum_occurrence_Set() const{
    return m_minimum_occurrence_isSet;
}

bool OAIMarker_Read::is_minimum_occurrence_Valid() const{
    return m_minimum_occurrence_isValid;
}

QString OAIMarker_Read::getName() const {
    return m_name;
}
void OAIMarker_Read::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIMarker_Read::is_name_Set() const{
    return m_name_isSet;
}

bool OAIMarker_Read::is_name_Valid() const{
    return m_name_isValid;
}

QList<QString> OAIMarker_Read::getOptions() const {
    return m_options;
}
void OAIMarker_Read::setOptions(const QList<QString> &options) {
    m_options = options;
    m_options_isSet = true;
}

bool OAIMarker_Read::is_options_Set() const{
    return m_options_isSet;
}

bool OAIMarker_Read::is_options_Valid() const{
    return m_options_isValid;
}

QList<QString> OAIMarker_Read::getTransformers() const {
    return m_transformers;
}
void OAIMarker_Read::setTransformers(const QList<QString> &transformers) {
    m_transformers = transformers;
    m_transformers_isSet = true;
}

bool OAIMarker_Read::is_transformers_Set() const{
    return m_transformers_isSet;
}

bool OAIMarker_Read::is_transformers_Valid() const{
    return m_transformers_isValid;
}

QString OAIMarker_Read::getType() const {
    return m_type;
}
void OAIMarker_Read::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIMarker_Read::is_type_Set() const{
    return m_type_isSet;
}

bool OAIMarker_Read::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIMarker_Read::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_maximum_occurrence_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_minimum_occurrence_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_options.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_transformers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMarker_Read::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
