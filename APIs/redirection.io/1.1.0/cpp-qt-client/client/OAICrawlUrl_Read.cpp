/**
 * redirection.io
 * API documentation for redirection.io
 *
 * The version of the OpenAPI document: 1.1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICrawlUrl_Read.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICrawlUrl_Read::OAICrawlUrl_Read(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICrawlUrl_Read::OAICrawlUrl_Read() {
    this->initializeModel();
}

OAICrawlUrl_Read::~OAICrawlUrl_Read() {}

void OAICrawlUrl_Read::initializeModel() {

    m_curl_info_isSet = false;
    m_curl_info_isValid = false;

    m_depth_isSet = false;
    m_depth_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_error_isSet = false;
    m_error_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_redirect_url_isSet = false;
    m_redirect_url_isValid = false;

    m_status_code_isSet = false;
    m_status_code_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;

    m_urls_to_isSet = false;
    m_urls_to_isValid = false;
}

void OAICrawlUrl_Read::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICrawlUrl_Read::fromJsonObject(QJsonObject json) {

    m_curl_info_isValid = ::OpenAPI::fromJsonValue(m_curl_info, json[QString("curlInfo")]);
    m_curl_info_isSet = !json[QString("curlInfo")].isNull() && m_curl_info_isValid;

    m_depth_isValid = ::OpenAPI::fromJsonValue(m_depth, json[QString("depth")]);
    m_depth_isSet = !json[QString("depth")].isNull() && m_depth_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_error_isValid = ::OpenAPI::fromJsonValue(m_error, json[QString("error")]);
    m_error_isSet = !json[QString("error")].isNull() && m_error_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_redirect_url_isValid = ::OpenAPI::fromJsonValue(m_redirect_url, json[QString("redirectUrl")]);
    m_redirect_url_isSet = !json[QString("redirectUrl")].isNull() && m_redirect_url_isValid;

    m_status_code_isValid = ::OpenAPI::fromJsonValue(m_status_code, json[QString("statusCode")]);
    m_status_code_isSet = !json[QString("statusCode")].isNull() && m_status_code_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;

    m_urls_to_isValid = ::OpenAPI::fromJsonValue(m_urls_to, json[QString("urlsTo")]);
    m_urls_to_isSet = !json[QString("urlsTo")].isNull() && m_urls_to_isValid;
}

QString OAICrawlUrl_Read::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICrawlUrl_Read::asJsonObject() const {
    QJsonObject obj;
    if (m_curl_info_isSet) {
        obj.insert(QString("curlInfo"), ::OpenAPI::toJsonValue(m_curl_info));
    }
    if (m_depth_isSet) {
        obj.insert(QString("depth"), ::OpenAPI::toJsonValue(m_depth));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_error_isSet) {
        obj.insert(QString("error"), ::OpenAPI::toJsonValue(m_error));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_redirect_url_isSet) {
        obj.insert(QString("redirectUrl"), ::OpenAPI::toJsonValue(m_redirect_url));
    }
    if (m_status_code_isSet) {
        obj.insert(QString("statusCode"), ::OpenAPI::toJsonValue(m_status_code));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    if (m_urls_to_isSet) {
        obj.insert(QString("urlsTo"), ::OpenAPI::toJsonValue(m_urls_to));
    }
    return obj;
}

OAIObject OAICrawlUrl_Read::getCurlInfo() const {
    return m_curl_info;
}
void OAICrawlUrl_Read::setCurlInfo(const OAIObject &curl_info) {
    m_curl_info = curl_info;
    m_curl_info_isSet = true;
}

bool OAICrawlUrl_Read::is_curl_info_Set() const{
    return m_curl_info_isSet;
}

bool OAICrawlUrl_Read::is_curl_info_Valid() const{
    return m_curl_info_isValid;
}

OAIObject OAICrawlUrl_Read::getDepth() const {
    return m_depth;
}
void OAICrawlUrl_Read::setDepth(const OAIObject &depth) {
    m_depth = depth;
    m_depth_isSet = true;
}

bool OAICrawlUrl_Read::is_depth_Set() const{
    return m_depth_isSet;
}

bool OAICrawlUrl_Read::is_depth_Valid() const{
    return m_depth_isValid;
}

OAIObject OAICrawlUrl_Read::getDescription() const {
    return m_description;
}
void OAICrawlUrl_Read::setDescription(const OAIObject &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAICrawlUrl_Read::is_description_Set() const{
    return m_description_isSet;
}

bool OAICrawlUrl_Read::is_description_Valid() const{
    return m_description_isValid;
}

OAIObject OAICrawlUrl_Read::getError() const {
    return m_error;
}
void OAICrawlUrl_Read::setError(const OAIObject &error) {
    m_error = error;
    m_error_isSet = true;
}

bool OAICrawlUrl_Read::is_error_Set() const{
    return m_error_isSet;
}

bool OAICrawlUrl_Read::is_error_Valid() const{
    return m_error_isValid;
}

OAIObject OAICrawlUrl_Read::getId() const {
    return m_id;
}
void OAICrawlUrl_Read::setId(const OAIObject &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAICrawlUrl_Read::is_id_Set() const{
    return m_id_isSet;
}

bool OAICrawlUrl_Read::is_id_Valid() const{
    return m_id_isValid;
}

OAIObject OAICrawlUrl_Read::getRedirectUrl() const {
    return m_redirect_url;
}
void OAICrawlUrl_Read::setRedirectUrl(const OAIObject &redirect_url) {
    m_redirect_url = redirect_url;
    m_redirect_url_isSet = true;
}

bool OAICrawlUrl_Read::is_redirect_url_Set() const{
    return m_redirect_url_isSet;
}

bool OAICrawlUrl_Read::is_redirect_url_Valid() const{
    return m_redirect_url_isValid;
}

OAIObject OAICrawlUrl_Read::getStatusCode() const {
    return m_status_code;
}
void OAICrawlUrl_Read::setStatusCode(const OAIObject &status_code) {
    m_status_code = status_code;
    m_status_code_isSet = true;
}

bool OAICrawlUrl_Read::is_status_code_Set() const{
    return m_status_code_isSet;
}

bool OAICrawlUrl_Read::is_status_code_Valid() const{
    return m_status_code_isValid;
}

OAIObject OAICrawlUrl_Read::getTitle() const {
    return m_title;
}
void OAICrawlUrl_Read::setTitle(const OAIObject &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAICrawlUrl_Read::is_title_Set() const{
    return m_title_isSet;
}

bool OAICrawlUrl_Read::is_title_Valid() const{
    return m_title_isValid;
}

OAIObject OAICrawlUrl_Read::getUrl() const {
    return m_url;
}
void OAICrawlUrl_Read::setUrl(const OAIObject &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAICrawlUrl_Read::is_url_Set() const{
    return m_url_isSet;
}

bool OAICrawlUrl_Read::is_url_Valid() const{
    return m_url_isValid;
}

QString OAICrawlUrl_Read::getUrlsTo() const {
    return m_urls_to;
}
void OAICrawlUrl_Read::setUrlsTo(const QString &urls_to) {
    m_urls_to = urls_to;
    m_urls_to_isSet = true;
}

bool OAICrawlUrl_Read::is_urls_to_Set() const{
    return m_urls_to_isSet;
}

bool OAICrawlUrl_Read::is_urls_to_Valid() const{
    return m_urls_to_isValid;
}

bool OAICrawlUrl_Read::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_curl_info_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_depth_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_redirect_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_urls_to_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICrawlUrl_Read::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
