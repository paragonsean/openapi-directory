/**
 * redirection.io
 * API documentation for redirection.io
 *
 * The version of the OpenAPI document: 1.1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIRuleApi_H
#define OAI_OAIRuleApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIRule_Read.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIRuleApi : public QObject {
    Q_OBJECT

public:
    OAIRuleApi(const int timeOut = 0);
    ~OAIRuleApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  project_id QString [required]
    */
    virtual void agentLegacyComplexRuleCollection(const QString &project_id);

    /**
    * @param[in]  project_id QString [required]
    */
    virtual void agentLegacyStraightRuleCollection(const QString &project_id);

    /**
    * @param[in]  project_id QString [required]
    */
    virtual void agentRuleCollection(const QString &project_id);

    /**
    * @param[in]  project_id QString [required]
    * @param[in]  sort_id QString [optional]
    * @param[in]  sort_view_count QString [optional]
    */
    virtual void exportRuleCollection(const QString &project_id, const ::OpenAPI::OptionalParam<QString> &sort_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort_view_count = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  project_id QString [required]
    * @param[in]  sort_id QString [optional]
    * @param[in]  sort_view_count QString [optional]
    * @param[in]  page qint32 [optional]
    */
    virtual void getRuleCollection(const QString &project_id, const ::OpenAPI::OptionalParam<QString> &sort_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort_view_count = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id QString [required]
    */
    virtual void getRuleItem(const QString &id);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void agentLegacyComplexRuleCollectionCallback(OAIHttpRequestWorker *worker);
    void agentLegacyStraightRuleCollectionCallback(OAIHttpRequestWorker *worker);
    void agentRuleCollectionCallback(OAIHttpRequestWorker *worker);
    void exportRuleCollectionCallback(OAIHttpRequestWorker *worker);
    void getRuleCollectionCallback(OAIHttpRequestWorker *worker);
    void getRuleItemCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void agentLegacyComplexRuleCollectionSignal(QList<OAIRule_Read> summary);
    void agentLegacyStraightRuleCollectionSignal(QList<OAIRule_Read> summary);
    void agentRuleCollectionSignal(QList<OAIRule_Read> summary);
    void exportRuleCollectionSignal(QList<OAIRule_Read> summary);
    void getRuleCollectionSignal(QList<OAIRule_Read> summary);
    void getRuleItemSignal(OAIRule_Read summary);


    void agentLegacyComplexRuleCollectionSignalFull(OAIHttpRequestWorker *worker, QList<OAIRule_Read> summary);
    void agentLegacyStraightRuleCollectionSignalFull(OAIHttpRequestWorker *worker, QList<OAIRule_Read> summary);
    void agentRuleCollectionSignalFull(OAIHttpRequestWorker *worker, QList<OAIRule_Read> summary);
    void exportRuleCollectionSignalFull(OAIHttpRequestWorker *worker, QList<OAIRule_Read> summary);
    void getRuleCollectionSignalFull(OAIHttpRequestWorker *worker, QList<OAIRule_Read> summary);
    void getRuleItemSignalFull(OAIHttpRequestWorker *worker, OAIRule_Read summary);

    Q_DECL_DEPRECATED_X("Use agentLegacyComplexRuleCollectionSignalError() instead")
    void agentLegacyComplexRuleCollectionSignalE(QList<OAIRule_Read> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void agentLegacyComplexRuleCollectionSignalError(QList<OAIRule_Read> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use agentLegacyStraightRuleCollectionSignalError() instead")
    void agentLegacyStraightRuleCollectionSignalE(QList<OAIRule_Read> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void agentLegacyStraightRuleCollectionSignalError(QList<OAIRule_Read> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use agentRuleCollectionSignalError() instead")
    void agentRuleCollectionSignalE(QList<OAIRule_Read> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void agentRuleCollectionSignalError(QList<OAIRule_Read> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use exportRuleCollectionSignalError() instead")
    void exportRuleCollectionSignalE(QList<OAIRule_Read> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void exportRuleCollectionSignalError(QList<OAIRule_Read> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRuleCollectionSignalError() instead")
    void getRuleCollectionSignalE(QList<OAIRule_Read> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getRuleCollectionSignalError(QList<OAIRule_Read> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRuleItemSignalError() instead")
    void getRuleItemSignalE(OAIRule_Read summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getRuleItemSignalError(OAIRule_Read summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use agentLegacyComplexRuleCollectionSignalErrorFull() instead")
    void agentLegacyComplexRuleCollectionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void agentLegacyComplexRuleCollectionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use agentLegacyStraightRuleCollectionSignalErrorFull() instead")
    void agentLegacyStraightRuleCollectionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void agentLegacyStraightRuleCollectionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use agentRuleCollectionSignalErrorFull() instead")
    void agentRuleCollectionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void agentRuleCollectionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use exportRuleCollectionSignalErrorFull() instead")
    void exportRuleCollectionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void exportRuleCollectionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRuleCollectionSignalErrorFull() instead")
    void getRuleCollectionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getRuleCollectionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRuleItemSignalErrorFull() instead")
    void getRuleItemSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getRuleItemSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
