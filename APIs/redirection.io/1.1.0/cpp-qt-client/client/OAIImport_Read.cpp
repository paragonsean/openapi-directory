/**
 * redirection.io
 * API documentation for redirection.io
 *
 * The version of the OpenAPI document: 1.1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIImport_Read.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIImport_Read::OAIImport_Read(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIImport_Read::OAIImport_Read() {
    this->initializeModel();
}

OAIImport_Read::~OAIImport_Read() {}

void OAIImport_Read::initializeModel() {

    m_author_isSet = false;
    m_author_isValid = false;

    m_completed_at_isSet = false;
    m_completed_at_isValid = false;

    m_error_count_isSet = false;
    m_error_count_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_import_duration_isSet = false;
    m_import_duration_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;

    m_project_isSet = false;
    m_project_isValid = false;

    m_started_at_isSet = false;
    m_started_at_isValid = false;

    m_status_as_text_isSet = false;
    m_status_as_text_isValid = false;

    m_success_count_isSet = false;
    m_success_count_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;
}

void OAIImport_Read::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIImport_Read::fromJsonObject(QJsonObject json) {

    m_author_isValid = ::OpenAPI::fromJsonValue(m_author, json[QString("author")]);
    m_author_isSet = !json[QString("author")].isNull() && m_author_isValid;

    m_completed_at_isValid = ::OpenAPI::fromJsonValue(m_completed_at, json[QString("completedAt")]);
    m_completed_at_isSet = !json[QString("completedAt")].isNull() && m_completed_at_isValid;

    m_error_count_isValid = ::OpenAPI::fromJsonValue(m_error_count, json[QString("errorCount")]);
    m_error_count_isSet = !json[QString("errorCount")].isNull() && m_error_count_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_import_duration_isValid = ::OpenAPI::fromJsonValue(m_import_duration, json[QString("importDuration")]);
    m_import_duration_isSet = !json[QString("importDuration")].isNull() && m_import_duration_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;

    m_project_isValid = ::OpenAPI::fromJsonValue(m_project, json[QString("project")]);
    m_project_isSet = !json[QString("project")].isNull() && m_project_isValid;

    m_started_at_isValid = ::OpenAPI::fromJsonValue(m_started_at, json[QString("startedAt")]);
    m_started_at_isSet = !json[QString("startedAt")].isNull() && m_started_at_isValid;

    m_status_as_text_isValid = ::OpenAPI::fromJsonValue(m_status_as_text, json[QString("statusAsText")]);
    m_status_as_text_isSet = !json[QString("statusAsText")].isNull() && m_status_as_text_isValid;

    m_success_count_isValid = ::OpenAPI::fromJsonValue(m_success_count, json[QString("successCount")]);
    m_success_count_isSet = !json[QString("successCount")].isNull() && m_success_count_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updatedAt")]);
    m_updated_at_isSet = !json[QString("updatedAt")].isNull() && m_updated_at_isValid;
}

QString OAIImport_Read::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIImport_Read::asJsonObject() const {
    QJsonObject obj;
    if (m_author_isSet) {
        obj.insert(QString("author"), ::OpenAPI::toJsonValue(m_author));
    }
    if (m_completed_at_isSet) {
        obj.insert(QString("completedAt"), ::OpenAPI::toJsonValue(m_completed_at));
    }
    if (m_error_count_isSet) {
        obj.insert(QString("errorCount"), ::OpenAPI::toJsonValue(m_error_count));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_import_duration_isSet) {
        obj.insert(QString("importDuration"), ::OpenAPI::toJsonValue(m_import_duration));
    }
    if (m_message_isSet) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_project_isSet) {
        obj.insert(QString("project"), ::OpenAPI::toJsonValue(m_project));
    }
    if (m_started_at_isSet) {
        obj.insert(QString("startedAt"), ::OpenAPI::toJsonValue(m_started_at));
    }
    if (m_status_as_text_isSet) {
        obj.insert(QString("statusAsText"), ::OpenAPI::toJsonValue(m_status_as_text));
    }
    if (m_success_count_isSet) {
        obj.insert(QString("successCount"), ::OpenAPI::toJsonValue(m_success_count));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updatedAt"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    return obj;
}

QString OAIImport_Read::getAuthor() const {
    return m_author;
}
void OAIImport_Read::setAuthor(const QString &author) {
    m_author = author;
    m_author_isSet = true;
}

bool OAIImport_Read::is_author_Set() const{
    return m_author_isSet;
}

bool OAIImport_Read::is_author_Valid() const{
    return m_author_isValid;
}

QDateTime OAIImport_Read::getCompletedAt() const {
    return m_completed_at;
}
void OAIImport_Read::setCompletedAt(const QDateTime &completed_at) {
    m_completed_at = completed_at;
    m_completed_at_isSet = true;
}

bool OAIImport_Read::is_completed_at_Set() const{
    return m_completed_at_isSet;
}

bool OAIImport_Read::is_completed_at_Valid() const{
    return m_completed_at_isValid;
}

qint32 OAIImport_Read::getErrorCount() const {
    return m_error_count;
}
void OAIImport_Read::setErrorCount(const qint32 &error_count) {
    m_error_count = error_count;
    m_error_count_isSet = true;
}

bool OAIImport_Read::is_error_count_Set() const{
    return m_error_count_isSet;
}

bool OAIImport_Read::is_error_count_Valid() const{
    return m_error_count_isValid;
}

QString OAIImport_Read::getId() const {
    return m_id;
}
void OAIImport_Read::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIImport_Read::is_id_Set() const{
    return m_id_isSet;
}

bool OAIImport_Read::is_id_Valid() const{
    return m_id_isValid;
}

qint32 OAIImport_Read::getImportDuration() const {
    return m_import_duration;
}
void OAIImport_Read::setImportDuration(const qint32 &import_duration) {
    m_import_duration = import_duration;
    m_import_duration_isSet = true;
}

bool OAIImport_Read::is_import_duration_Set() const{
    return m_import_duration_isSet;
}

bool OAIImport_Read::is_import_duration_Valid() const{
    return m_import_duration_isValid;
}

QString OAIImport_Read::getMessage() const {
    return m_message;
}
void OAIImport_Read::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAIImport_Read::is_message_Set() const{
    return m_message_isSet;
}

bool OAIImport_Read::is_message_Valid() const{
    return m_message_isValid;
}

QString OAIImport_Read::getProject() const {
    return m_project;
}
void OAIImport_Read::setProject(const QString &project) {
    m_project = project;
    m_project_isSet = true;
}

bool OAIImport_Read::is_project_Set() const{
    return m_project_isSet;
}

bool OAIImport_Read::is_project_Valid() const{
    return m_project_isValid;
}

QDateTime OAIImport_Read::getStartedAt() const {
    return m_started_at;
}
void OAIImport_Read::setStartedAt(const QDateTime &started_at) {
    m_started_at = started_at;
    m_started_at_isSet = true;
}

bool OAIImport_Read::is_started_at_Set() const{
    return m_started_at_isSet;
}

bool OAIImport_Read::is_started_at_Valid() const{
    return m_started_at_isValid;
}

OAIObject OAIImport_Read::getStatusAsText() const {
    return m_status_as_text;
}
void OAIImport_Read::setStatusAsText(const OAIObject &status_as_text) {
    m_status_as_text = status_as_text;
    m_status_as_text_isSet = true;
}

bool OAIImport_Read::is_status_as_text_Set() const{
    return m_status_as_text_isSet;
}

bool OAIImport_Read::is_status_as_text_Valid() const{
    return m_status_as_text_isValid;
}

qint32 OAIImport_Read::getSuccessCount() const {
    return m_success_count;
}
void OAIImport_Read::setSuccessCount(const qint32 &success_count) {
    m_success_count = success_count;
    m_success_count_isSet = true;
}

bool OAIImport_Read::is_success_count_Set() const{
    return m_success_count_isSet;
}

bool OAIImport_Read::is_success_count_Valid() const{
    return m_success_count_isValid;
}

QDateTime OAIImport_Read::getUpdatedAt() const {
    return m_updated_at;
}
void OAIImport_Read::setUpdatedAt(const QDateTime &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAIImport_Read::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAIImport_Read::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

bool OAIImport_Read::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_author_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_completed_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_import_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_project_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_started_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_as_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_success_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIImport_Read::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_project_isValid && true;
}

} // namespace OpenAPI
