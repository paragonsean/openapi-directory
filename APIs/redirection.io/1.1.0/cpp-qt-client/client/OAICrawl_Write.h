/**
 * redirection.io
 * API documentation for redirection.io
 *
 * The version of the OpenAPI document: 1.1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICrawl_Write.h
 *
 * 
 */

#ifndef OAICrawl_Write_H
#define OAICrawl_Write_H

#include <QJsonObject>

#include "OAIObject.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAICrawl_Write : public OAIObject {
public:
    OAICrawl_Write();
    OAICrawl_Write(QString json);
    ~OAICrawl_Write() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getConcurrency() const;
    void setConcurrency(const qint32 &concurrency);
    bool is_concurrency_Set() const;
    bool is_concurrency_Valid() const;

    OAIObject getFirstUrl() const;
    void setFirstUrl(const OAIObject &first_url);
    bool is_first_url_Set() const;
    bool is_first_url_Valid() const;

    QList<QString> getHeaders() const;
    void setHeaders(const QList<QString> &headers);
    bool is_headers_Set() const;
    bool is_headers_Valid() const;

    OAIObject getHttpBasicPassword() const;
    void setHttpBasicPassword(const OAIObject &http_basic_password);
    bool is_http_basic_password_Set() const;
    bool is_http_basic_password_Valid() const;

    OAIObject getHttpBasicUser() const;
    void setHttpBasicUser(const OAIObject &http_basic_user);
    bool is_http_basic_user_Set() const;
    bool is_http_basic_user_Valid() const;

    qint32 getMaxDepth() const;
    void setMaxDepth(const qint32 &max_depth);
    bool is_max_depth_Set() const;
    bool is_max_depth_Valid() const;

    qint32 getMaxDuration() const;
    void setMaxDuration(const qint32 &max_duration);
    bool is_max_duration_Set() const;
    bool is_max_duration_Valid() const;

    qint32 getMaxUrls() const;
    void setMaxUrls(const qint32 &max_urls);
    bool is_max_urls_Set() const;
    bool is_max_urls_Valid() const;

    QList<QString> getOtherDomains() const;
    void setOtherDomains(const QList<QString> &other_domains);
    bool is_other_domains_Set() const;
    bool is_other_domains_Valid() const;

    QString getProject() const;
    void setProject(const QString &project);
    bool is_project_Set() const;
    bool is_project_Valid() const;

    bool isSslCheckingDisabled() const;
    void setSslCheckingDisabled(const bool &ssl_checking_disabled);
    bool is_ssl_checking_disabled_Set() const;
    bool is_ssl_checking_disabled_Valid() const;

    bool isSubdomainIncluded() const;
    void setSubdomainIncluded(const bool &subdomain_included);
    bool is_subdomain_included_Set() const;
    bool is_subdomain_included_Valid() const;

    OAIObject getUserAgent() const;
    void setUserAgent(const OAIObject &user_agent);
    bool is_user_agent_Set() const;
    bool is_user_agent_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_concurrency;
    bool m_concurrency_isSet;
    bool m_concurrency_isValid;

    OAIObject m_first_url;
    bool m_first_url_isSet;
    bool m_first_url_isValid;

    QList<QString> m_headers;
    bool m_headers_isSet;
    bool m_headers_isValid;

    OAIObject m_http_basic_password;
    bool m_http_basic_password_isSet;
    bool m_http_basic_password_isValid;

    OAIObject m_http_basic_user;
    bool m_http_basic_user_isSet;
    bool m_http_basic_user_isValid;

    qint32 m_max_depth;
    bool m_max_depth_isSet;
    bool m_max_depth_isValid;

    qint32 m_max_duration;
    bool m_max_duration_isSet;
    bool m_max_duration_isValid;

    qint32 m_max_urls;
    bool m_max_urls_isSet;
    bool m_max_urls_isValid;

    QList<QString> m_other_domains;
    bool m_other_domains_isSet;
    bool m_other_domains_isValid;

    QString m_project;
    bool m_project_isSet;
    bool m_project_isValid;

    bool m_ssl_checking_disabled;
    bool m_ssl_checking_disabled_isSet;
    bool m_ssl_checking_disabled_isValid;

    bool m_subdomain_included;
    bool m_subdomain_included_isSet;
    bool m_subdomain_included_isValid;

    OAIObject m_user_agent;
    bool m_user_agent_isSet;
    bool m_user_agent_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICrawl_Write)

#endif // OAICrawl_Write_H
