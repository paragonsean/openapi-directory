/**
 * redirection.io
 * API documentation for redirection.io
 *
 * The version of the OpenAPI document: 1.1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRuleChange_Read.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRuleChange_Read::OAIRuleChange_Read(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRuleChange_Read::OAIRuleChange_Read() {
    this->initializeModel();
}

OAIRuleChange_Read::~OAIRuleChange_Read() {}

void OAIRuleChange_Read::initializeModel() {

    m_action_isSet = false;
    m_action_isValid = false;

    m_actions_isSet = false;
    m_actions_isValid = false;

    m_author_isSet = false;
    m_author_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_examples_isSet = false;
    m_examples_isValid = false;

    m_formatted_source_isSet = false;
    m_formatted_source_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_markers_isSet = false;
    m_markers_isValid = false;

    m_match_on_response_status_isSet = false;
    m_match_on_response_status_isValid = false;

    m_rank_isSet = false;
    m_rank_isValid = false;

    m_rule_id_isSet = false;
    m_rule_id_isValid = false;

    m_source_isSet = false;
    m_source_isValid = false;
}

void OAIRuleChange_Read::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRuleChange_Read::fromJsonObject(QJsonObject json) {

    m_action_isValid = ::OpenAPI::fromJsonValue(m_action, json[QString("action")]);
    m_action_isSet = !json[QString("action")].isNull() && m_action_isValid;

    m_actions_isValid = ::OpenAPI::fromJsonValue(m_actions, json[QString("actions")]);
    m_actions_isSet = !json[QString("actions")].isNull() && m_actions_isValid;

    m_author_isValid = ::OpenAPI::fromJsonValue(m_author, json[QString("author")]);
    m_author_isSet = !json[QString("author")].isNull() && m_author_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("createdAt")]);
    m_created_at_isSet = !json[QString("createdAt")].isNull() && m_created_at_isValid;

    m_examples_isValid = ::OpenAPI::fromJsonValue(m_examples, json[QString("examples")]);
    m_examples_isSet = !json[QString("examples")].isNull() && m_examples_isValid;

    m_formatted_source_isValid = ::OpenAPI::fromJsonValue(m_formatted_source, json[QString("formattedSource")]);
    m_formatted_source_isSet = !json[QString("formattedSource")].isNull() && m_formatted_source_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_markers_isValid = ::OpenAPI::fromJsonValue(m_markers, json[QString("markers")]);
    m_markers_isSet = !json[QString("markers")].isNull() && m_markers_isValid;

    m_match_on_response_status_isValid = ::OpenAPI::fromJsonValue(m_match_on_response_status, json[QString("matchOnResponseStatus")]);
    m_match_on_response_status_isSet = !json[QString("matchOnResponseStatus")].isNull() && m_match_on_response_status_isValid;

    m_rank_isValid = ::OpenAPI::fromJsonValue(m_rank, json[QString("rank")]);
    m_rank_isSet = !json[QString("rank")].isNull() && m_rank_isValid;

    m_rule_id_isValid = ::OpenAPI::fromJsonValue(m_rule_id, json[QString("ruleId")]);
    m_rule_id_isSet = !json[QString("ruleId")].isNull() && m_rule_id_isValid;

    m_source_isValid = ::OpenAPI::fromJsonValue(m_source, json[QString("source")]);
    m_source_isSet = !json[QString("source")].isNull() && m_source_isValid;
}

QString OAIRuleChange_Read::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRuleChange_Read::asJsonObject() const {
    QJsonObject obj;
    if (m_action_isSet) {
        obj.insert(QString("action"), ::OpenAPI::toJsonValue(m_action));
    }
    if (m_actions.size() > 0) {
        obj.insert(QString("actions"), ::OpenAPI::toJsonValue(m_actions));
    }
    if (m_author.isSet()) {
        obj.insert(QString("author"), ::OpenAPI::toJsonValue(m_author));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("createdAt"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_examples.size() > 0) {
        obj.insert(QString("examples"), ::OpenAPI::toJsonValue(m_examples));
    }
    if (m_formatted_source_isSet) {
        obj.insert(QString("formattedSource"), ::OpenAPI::toJsonValue(m_formatted_source));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_markers.size() > 0) {
        obj.insert(QString("markers"), ::OpenAPI::toJsonValue(m_markers));
    }
    if (m_match_on_response_status_isSet) {
        obj.insert(QString("matchOnResponseStatus"), ::OpenAPI::toJsonValue(m_match_on_response_status));
    }
    if (m_rank_isSet) {
        obj.insert(QString("rank"), ::OpenAPI::toJsonValue(m_rank));
    }
    if (m_rule_id_isSet) {
        obj.insert(QString("ruleId"), ::OpenAPI::toJsonValue(m_rule_id));
    }
    if (m_source_isSet) {
        obj.insert(QString("source"), ::OpenAPI::toJsonValue(m_source));
    }
    return obj;
}

QString OAIRuleChange_Read::getAction() const {
    return m_action;
}
void OAIRuleChange_Read::setAction(const QString &action) {
    m_action = action;
    m_action_isSet = true;
}

bool OAIRuleChange_Read::is_action_Set() const{
    return m_action_isSet;
}

bool OAIRuleChange_Read::is_action_Valid() const{
    return m_action_isValid;
}

QList<QString> OAIRuleChange_Read::getActions() const {
    return m_actions;
}
void OAIRuleChange_Read::setActions(const QList<QString> &actions) {
    m_actions = actions;
    m_actions_isSet = true;
}

bool OAIRuleChange_Read::is_actions_Set() const{
    return m_actions_isSet;
}

bool OAIRuleChange_Read::is_actions_Valid() const{
    return m_actions_isValid;
}

OAIUser_Read OAIRuleChange_Read::getAuthor() const {
    return m_author;
}
void OAIRuleChange_Read::setAuthor(const OAIUser_Read &author) {
    m_author = author;
    m_author_isSet = true;
}

bool OAIRuleChange_Read::is_author_Set() const{
    return m_author_isSet;
}

bool OAIRuleChange_Read::is_author_Valid() const{
    return m_author_isValid;
}

QDateTime OAIRuleChange_Read::getCreatedAt() const {
    return m_created_at;
}
void OAIRuleChange_Read::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIRuleChange_Read::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIRuleChange_Read::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QList<QString> OAIRuleChange_Read::getExamples() const {
    return m_examples;
}
void OAIRuleChange_Read::setExamples(const QList<QString> &examples) {
    m_examples = examples;
    m_examples_isSet = true;
}

bool OAIRuleChange_Read::is_examples_Set() const{
    return m_examples_isSet;
}

bool OAIRuleChange_Read::is_examples_Valid() const{
    return m_examples_isValid;
}

QString OAIRuleChange_Read::getFormattedSource() const {
    return m_formatted_source;
}
void OAIRuleChange_Read::setFormattedSource(const QString &formatted_source) {
    m_formatted_source = formatted_source;
    m_formatted_source_isSet = true;
}

bool OAIRuleChange_Read::is_formatted_source_Set() const{
    return m_formatted_source_isSet;
}

bool OAIRuleChange_Read::is_formatted_source_Valid() const{
    return m_formatted_source_isValid;
}

QString OAIRuleChange_Read::getId() const {
    return m_id;
}
void OAIRuleChange_Read::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIRuleChange_Read::is_id_Set() const{
    return m_id_isSet;
}

bool OAIRuleChange_Read::is_id_Valid() const{
    return m_id_isValid;
}

QList<OAIMarker_Read> OAIRuleChange_Read::getMarkers() const {
    return m_markers;
}
void OAIRuleChange_Read::setMarkers(const QList<OAIMarker_Read> &markers) {
    m_markers = markers;
    m_markers_isSet = true;
}

bool OAIRuleChange_Read::is_markers_Set() const{
    return m_markers_isSet;
}

bool OAIRuleChange_Read::is_markers_Valid() const{
    return m_markers_isValid;
}

qint32 OAIRuleChange_Read::getMatchOnResponseStatus() const {
    return m_match_on_response_status;
}
void OAIRuleChange_Read::setMatchOnResponseStatus(const qint32 &match_on_response_status) {
    m_match_on_response_status = match_on_response_status;
    m_match_on_response_status_isSet = true;
}

bool OAIRuleChange_Read::is_match_on_response_status_Set() const{
    return m_match_on_response_status_isSet;
}

bool OAIRuleChange_Read::is_match_on_response_status_Valid() const{
    return m_match_on_response_status_isValid;
}

qint32 OAIRuleChange_Read::getRank() const {
    return m_rank;
}
void OAIRuleChange_Read::setRank(const qint32 &rank) {
    m_rank = rank;
    m_rank_isSet = true;
}

bool OAIRuleChange_Read::is_rank_Set() const{
    return m_rank_isSet;
}

bool OAIRuleChange_Read::is_rank_Valid() const{
    return m_rank_isValid;
}

QString OAIRuleChange_Read::getRuleId() const {
    return m_rule_id;
}
void OAIRuleChange_Read::setRuleId(const QString &rule_id) {
    m_rule_id = rule_id;
    m_rule_id_isSet = true;
}

bool OAIRuleChange_Read::is_rule_id_Set() const{
    return m_rule_id_isSet;
}

bool OAIRuleChange_Read::is_rule_id_Valid() const{
    return m_rule_id_isValid;
}

QString OAIRuleChange_Read::getSource() const {
    return m_source;
}
void OAIRuleChange_Read::setSource(const QString &source) {
    m_source = source;
    m_source_isSet = true;
}

bool OAIRuleChange_Read::is_source_Set() const{
    return m_source_isSet;
}

bool OAIRuleChange_Read::is_source_Valid() const{
    return m_source_isValid;
}

bool OAIRuleChange_Read::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_action_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_actions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_author.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_examples.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_formatted_source_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_markers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_match_on_response_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rank_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rule_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRuleChange_Read::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_action_isValid && m_rank_isValid && m_source_isValid && true;
}

} // namespace OpenAPI
