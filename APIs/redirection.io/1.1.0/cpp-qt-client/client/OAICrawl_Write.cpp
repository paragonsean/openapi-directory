/**
 * redirection.io
 * API documentation for redirection.io
 *
 * The version of the OpenAPI document: 1.1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICrawl_Write.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICrawl_Write::OAICrawl_Write(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICrawl_Write::OAICrawl_Write() {
    this->initializeModel();
}

OAICrawl_Write::~OAICrawl_Write() {}

void OAICrawl_Write::initializeModel() {

    m_concurrency_isSet = false;
    m_concurrency_isValid = false;

    m_first_url_isSet = false;
    m_first_url_isValid = false;

    m_headers_isSet = false;
    m_headers_isValid = false;

    m_http_basic_password_isSet = false;
    m_http_basic_password_isValid = false;

    m_http_basic_user_isSet = false;
    m_http_basic_user_isValid = false;

    m_max_depth_isSet = false;
    m_max_depth_isValid = false;

    m_max_duration_isSet = false;
    m_max_duration_isValid = false;

    m_max_urls_isSet = false;
    m_max_urls_isValid = false;

    m_other_domains_isSet = false;
    m_other_domains_isValid = false;

    m_project_isSet = false;
    m_project_isValid = false;

    m_ssl_checking_disabled_isSet = false;
    m_ssl_checking_disabled_isValid = false;

    m_subdomain_included_isSet = false;
    m_subdomain_included_isValid = false;

    m_user_agent_isSet = false;
    m_user_agent_isValid = false;
}

void OAICrawl_Write::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICrawl_Write::fromJsonObject(QJsonObject json) {

    m_concurrency_isValid = ::OpenAPI::fromJsonValue(m_concurrency, json[QString("concurrency")]);
    m_concurrency_isSet = !json[QString("concurrency")].isNull() && m_concurrency_isValid;

    m_first_url_isValid = ::OpenAPI::fromJsonValue(m_first_url, json[QString("firstUrl")]);
    m_first_url_isSet = !json[QString("firstUrl")].isNull() && m_first_url_isValid;

    m_headers_isValid = ::OpenAPI::fromJsonValue(m_headers, json[QString("headers")]);
    m_headers_isSet = !json[QString("headers")].isNull() && m_headers_isValid;

    m_http_basic_password_isValid = ::OpenAPI::fromJsonValue(m_http_basic_password, json[QString("httpBasicPassword")]);
    m_http_basic_password_isSet = !json[QString("httpBasicPassword")].isNull() && m_http_basic_password_isValid;

    m_http_basic_user_isValid = ::OpenAPI::fromJsonValue(m_http_basic_user, json[QString("httpBasicUser")]);
    m_http_basic_user_isSet = !json[QString("httpBasicUser")].isNull() && m_http_basic_user_isValid;

    m_max_depth_isValid = ::OpenAPI::fromJsonValue(m_max_depth, json[QString("maxDepth")]);
    m_max_depth_isSet = !json[QString("maxDepth")].isNull() && m_max_depth_isValid;

    m_max_duration_isValid = ::OpenAPI::fromJsonValue(m_max_duration, json[QString("maxDuration")]);
    m_max_duration_isSet = !json[QString("maxDuration")].isNull() && m_max_duration_isValid;

    m_max_urls_isValid = ::OpenAPI::fromJsonValue(m_max_urls, json[QString("maxUrls")]);
    m_max_urls_isSet = !json[QString("maxUrls")].isNull() && m_max_urls_isValid;

    m_other_domains_isValid = ::OpenAPI::fromJsonValue(m_other_domains, json[QString("otherDomains")]);
    m_other_domains_isSet = !json[QString("otherDomains")].isNull() && m_other_domains_isValid;

    m_project_isValid = ::OpenAPI::fromJsonValue(m_project, json[QString("project")]);
    m_project_isSet = !json[QString("project")].isNull() && m_project_isValid;

    m_ssl_checking_disabled_isValid = ::OpenAPI::fromJsonValue(m_ssl_checking_disabled, json[QString("sslCheckingDisabled")]);
    m_ssl_checking_disabled_isSet = !json[QString("sslCheckingDisabled")].isNull() && m_ssl_checking_disabled_isValid;

    m_subdomain_included_isValid = ::OpenAPI::fromJsonValue(m_subdomain_included, json[QString("subdomainIncluded")]);
    m_subdomain_included_isSet = !json[QString("subdomainIncluded")].isNull() && m_subdomain_included_isValid;

    m_user_agent_isValid = ::OpenAPI::fromJsonValue(m_user_agent, json[QString("userAgent")]);
    m_user_agent_isSet = !json[QString("userAgent")].isNull() && m_user_agent_isValid;
}

QString OAICrawl_Write::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICrawl_Write::asJsonObject() const {
    QJsonObject obj;
    if (m_concurrency_isSet) {
        obj.insert(QString("concurrency"), ::OpenAPI::toJsonValue(m_concurrency));
    }
    if (m_first_url_isSet) {
        obj.insert(QString("firstUrl"), ::OpenAPI::toJsonValue(m_first_url));
    }
    if (m_headers.size() > 0) {
        obj.insert(QString("headers"), ::OpenAPI::toJsonValue(m_headers));
    }
    if (m_http_basic_password_isSet) {
        obj.insert(QString("httpBasicPassword"), ::OpenAPI::toJsonValue(m_http_basic_password));
    }
    if (m_http_basic_user_isSet) {
        obj.insert(QString("httpBasicUser"), ::OpenAPI::toJsonValue(m_http_basic_user));
    }
    if (m_max_depth_isSet) {
        obj.insert(QString("maxDepth"), ::OpenAPI::toJsonValue(m_max_depth));
    }
    if (m_max_duration_isSet) {
        obj.insert(QString("maxDuration"), ::OpenAPI::toJsonValue(m_max_duration));
    }
    if (m_max_urls_isSet) {
        obj.insert(QString("maxUrls"), ::OpenAPI::toJsonValue(m_max_urls));
    }
    if (m_other_domains.size() > 0) {
        obj.insert(QString("otherDomains"), ::OpenAPI::toJsonValue(m_other_domains));
    }
    if (m_project_isSet) {
        obj.insert(QString("project"), ::OpenAPI::toJsonValue(m_project));
    }
    if (m_ssl_checking_disabled_isSet) {
        obj.insert(QString("sslCheckingDisabled"), ::OpenAPI::toJsonValue(m_ssl_checking_disabled));
    }
    if (m_subdomain_included_isSet) {
        obj.insert(QString("subdomainIncluded"), ::OpenAPI::toJsonValue(m_subdomain_included));
    }
    if (m_user_agent_isSet) {
        obj.insert(QString("userAgent"), ::OpenAPI::toJsonValue(m_user_agent));
    }
    return obj;
}

qint32 OAICrawl_Write::getConcurrency() const {
    return m_concurrency;
}
void OAICrawl_Write::setConcurrency(const qint32 &concurrency) {
    m_concurrency = concurrency;
    m_concurrency_isSet = true;
}

bool OAICrawl_Write::is_concurrency_Set() const{
    return m_concurrency_isSet;
}

bool OAICrawl_Write::is_concurrency_Valid() const{
    return m_concurrency_isValid;
}

OAIObject OAICrawl_Write::getFirstUrl() const {
    return m_first_url;
}
void OAICrawl_Write::setFirstUrl(const OAIObject &first_url) {
    m_first_url = first_url;
    m_first_url_isSet = true;
}

bool OAICrawl_Write::is_first_url_Set() const{
    return m_first_url_isSet;
}

bool OAICrawl_Write::is_first_url_Valid() const{
    return m_first_url_isValid;
}

QList<QString> OAICrawl_Write::getHeaders() const {
    return m_headers;
}
void OAICrawl_Write::setHeaders(const QList<QString> &headers) {
    m_headers = headers;
    m_headers_isSet = true;
}

bool OAICrawl_Write::is_headers_Set() const{
    return m_headers_isSet;
}

bool OAICrawl_Write::is_headers_Valid() const{
    return m_headers_isValid;
}

OAIObject OAICrawl_Write::getHttpBasicPassword() const {
    return m_http_basic_password;
}
void OAICrawl_Write::setHttpBasicPassword(const OAIObject &http_basic_password) {
    m_http_basic_password = http_basic_password;
    m_http_basic_password_isSet = true;
}

bool OAICrawl_Write::is_http_basic_password_Set() const{
    return m_http_basic_password_isSet;
}

bool OAICrawl_Write::is_http_basic_password_Valid() const{
    return m_http_basic_password_isValid;
}

OAIObject OAICrawl_Write::getHttpBasicUser() const {
    return m_http_basic_user;
}
void OAICrawl_Write::setHttpBasicUser(const OAIObject &http_basic_user) {
    m_http_basic_user = http_basic_user;
    m_http_basic_user_isSet = true;
}

bool OAICrawl_Write::is_http_basic_user_Set() const{
    return m_http_basic_user_isSet;
}

bool OAICrawl_Write::is_http_basic_user_Valid() const{
    return m_http_basic_user_isValid;
}

qint32 OAICrawl_Write::getMaxDepth() const {
    return m_max_depth;
}
void OAICrawl_Write::setMaxDepth(const qint32 &max_depth) {
    m_max_depth = max_depth;
    m_max_depth_isSet = true;
}

bool OAICrawl_Write::is_max_depth_Set() const{
    return m_max_depth_isSet;
}

bool OAICrawl_Write::is_max_depth_Valid() const{
    return m_max_depth_isValid;
}

qint32 OAICrawl_Write::getMaxDuration() const {
    return m_max_duration;
}
void OAICrawl_Write::setMaxDuration(const qint32 &max_duration) {
    m_max_duration = max_duration;
    m_max_duration_isSet = true;
}

bool OAICrawl_Write::is_max_duration_Set() const{
    return m_max_duration_isSet;
}

bool OAICrawl_Write::is_max_duration_Valid() const{
    return m_max_duration_isValid;
}

qint32 OAICrawl_Write::getMaxUrls() const {
    return m_max_urls;
}
void OAICrawl_Write::setMaxUrls(const qint32 &max_urls) {
    m_max_urls = max_urls;
    m_max_urls_isSet = true;
}

bool OAICrawl_Write::is_max_urls_Set() const{
    return m_max_urls_isSet;
}

bool OAICrawl_Write::is_max_urls_Valid() const{
    return m_max_urls_isValid;
}

QList<QString> OAICrawl_Write::getOtherDomains() const {
    return m_other_domains;
}
void OAICrawl_Write::setOtherDomains(const QList<QString> &other_domains) {
    m_other_domains = other_domains;
    m_other_domains_isSet = true;
}

bool OAICrawl_Write::is_other_domains_Set() const{
    return m_other_domains_isSet;
}

bool OAICrawl_Write::is_other_domains_Valid() const{
    return m_other_domains_isValid;
}

QString OAICrawl_Write::getProject() const {
    return m_project;
}
void OAICrawl_Write::setProject(const QString &project) {
    m_project = project;
    m_project_isSet = true;
}

bool OAICrawl_Write::is_project_Set() const{
    return m_project_isSet;
}

bool OAICrawl_Write::is_project_Valid() const{
    return m_project_isValid;
}

bool OAICrawl_Write::isSslCheckingDisabled() const {
    return m_ssl_checking_disabled;
}
void OAICrawl_Write::setSslCheckingDisabled(const bool &ssl_checking_disabled) {
    m_ssl_checking_disabled = ssl_checking_disabled;
    m_ssl_checking_disabled_isSet = true;
}

bool OAICrawl_Write::is_ssl_checking_disabled_Set() const{
    return m_ssl_checking_disabled_isSet;
}

bool OAICrawl_Write::is_ssl_checking_disabled_Valid() const{
    return m_ssl_checking_disabled_isValid;
}

bool OAICrawl_Write::isSubdomainIncluded() const {
    return m_subdomain_included;
}
void OAICrawl_Write::setSubdomainIncluded(const bool &subdomain_included) {
    m_subdomain_included = subdomain_included;
    m_subdomain_included_isSet = true;
}

bool OAICrawl_Write::is_subdomain_included_Set() const{
    return m_subdomain_included_isSet;
}

bool OAICrawl_Write::is_subdomain_included_Valid() const{
    return m_subdomain_included_isValid;
}

OAIObject OAICrawl_Write::getUserAgent() const {
    return m_user_agent;
}
void OAICrawl_Write::setUserAgent(const OAIObject &user_agent) {
    m_user_agent = user_agent;
    m_user_agent_isSet = true;
}

bool OAICrawl_Write::is_user_agent_Set() const{
    return m_user_agent_isSet;
}

bool OAICrawl_Write::is_user_agent_Valid() const{
    return m_user_agent_isValid;
}

bool OAICrawl_Write::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_concurrency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_first_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_headers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_http_basic_password_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_http_basic_user_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_depth_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_urls_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_other_domains.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_project_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ssl_checking_disabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subdomain_included_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_agent_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICrawl_Write::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_concurrency_isValid && m_first_url_isValid && m_max_depth_isValid && m_max_duration_isValid && m_max_urls_isValid && m_project_isValid && m_ssl_checking_disabled_isValid && m_subdomain_included_isValid && true;
}

} // namespace OpenAPI
