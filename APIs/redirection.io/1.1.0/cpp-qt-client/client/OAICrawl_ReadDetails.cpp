/**
 * redirection.io
 * API documentation for redirection.io
 *
 * The version of the OpenAPI document: 1.1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICrawl_ReadDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICrawl_ReadDetails::OAICrawl_ReadDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICrawl_ReadDetails::OAICrawl_ReadDetails() {
    this->initializeModel();
}

OAICrawl_ReadDetails::~OAICrawl_ReadDetails() {}

void OAICrawl_ReadDetails::initializeModel() {

    m_archived_isSet = false;
    m_archived_isValid = false;

    m_author_isSet = false;
    m_author_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_error_isSet = false;
    m_error_isValid = false;

    m_finished_at_isSet = false;
    m_finished_at_isValid = false;

    m_first_url_isSet = false;
    m_first_url_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_stats_isSet = false;
    m_stats_isValid = false;

    m_trigger_isSet = false;
    m_trigger_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;
}

void OAICrawl_ReadDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICrawl_ReadDetails::fromJsonObject(QJsonObject json) {

    m_archived_isValid = ::OpenAPI::fromJsonValue(m_archived, json[QString("archived")]);
    m_archived_isSet = !json[QString("archived")].isNull() && m_archived_isValid;

    m_author_isValid = ::OpenAPI::fromJsonValue(m_author, json[QString("author")]);
    m_author_isSet = !json[QString("author")].isNull() && m_author_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("createdAt")]);
    m_created_at_isSet = !json[QString("createdAt")].isNull() && m_created_at_isValid;

    m_error_isValid = ::OpenAPI::fromJsonValue(m_error, json[QString("error")]);
    m_error_isSet = !json[QString("error")].isNull() && m_error_isValid;

    m_finished_at_isValid = ::OpenAPI::fromJsonValue(m_finished_at, json[QString("finishedAt")]);
    m_finished_at_isSet = !json[QString("finishedAt")].isNull() && m_finished_at_isValid;

    m_first_url_isValid = ::OpenAPI::fromJsonValue(m_first_url, json[QString("firstUrl")]);
    m_first_url_isSet = !json[QString("firstUrl")].isNull() && m_first_url_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_stats_isValid = ::OpenAPI::fromJsonValue(m_stats, json[QString("stats")]);
    m_stats_isSet = !json[QString("stats")].isNull() && m_stats_isValid;

    m_trigger_isValid = ::OpenAPI::fromJsonValue(m_trigger, json[QString("trigger")]);
    m_trigger_isSet = !json[QString("trigger")].isNull() && m_trigger_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updatedAt")]);
    m_updated_at_isSet = !json[QString("updatedAt")].isNull() && m_updated_at_isValid;
}

QString OAICrawl_ReadDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICrawl_ReadDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_archived_isSet) {
        obj.insert(QString("archived"), ::OpenAPI::toJsonValue(m_archived));
    }
    if (m_author.isSet()) {
        obj.insert(QString("author"), ::OpenAPI::toJsonValue(m_author));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("createdAt"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_error_isSet) {
        obj.insert(QString("error"), ::OpenAPI::toJsonValue(m_error));
    }
    if (m_finished_at_isSet) {
        obj.insert(QString("finishedAt"), ::OpenAPI::toJsonValue(m_finished_at));
    }
    if (m_first_url_isSet) {
        obj.insert(QString("firstUrl"), ::OpenAPI::toJsonValue(m_first_url));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_stats.size() > 0) {
        obj.insert(QString("stats"), ::OpenAPI::toJsonValue(m_stats));
    }
    if (m_trigger_isSet) {
        obj.insert(QString("trigger"), ::OpenAPI::toJsonValue(m_trigger));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updatedAt"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    return obj;
}

bool OAICrawl_ReadDetails::isArchived() const {
    return m_archived;
}
void OAICrawl_ReadDetails::setArchived(const bool &archived) {
    m_archived = archived;
    m_archived_isSet = true;
}

bool OAICrawl_ReadDetails::is_archived_Set() const{
    return m_archived_isSet;
}

bool OAICrawl_ReadDetails::is_archived_Valid() const{
    return m_archived_isValid;
}

OAIUser_ReadDetails OAICrawl_ReadDetails::getAuthor() const {
    return m_author;
}
void OAICrawl_ReadDetails::setAuthor(const OAIUser_ReadDetails &author) {
    m_author = author;
    m_author_isSet = true;
}

bool OAICrawl_ReadDetails::is_author_Set() const{
    return m_author_isSet;
}

bool OAICrawl_ReadDetails::is_author_Valid() const{
    return m_author_isValid;
}

QDateTime OAICrawl_ReadDetails::getCreatedAt() const {
    return m_created_at;
}
void OAICrawl_ReadDetails::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAICrawl_ReadDetails::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAICrawl_ReadDetails::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAICrawl_ReadDetails::getError() const {
    return m_error;
}
void OAICrawl_ReadDetails::setError(const QString &error) {
    m_error = error;
    m_error_isSet = true;
}

bool OAICrawl_ReadDetails::is_error_Set() const{
    return m_error_isSet;
}

bool OAICrawl_ReadDetails::is_error_Valid() const{
    return m_error_isValid;
}

QDateTime OAICrawl_ReadDetails::getFinishedAt() const {
    return m_finished_at;
}
void OAICrawl_ReadDetails::setFinishedAt(const QDateTime &finished_at) {
    m_finished_at = finished_at;
    m_finished_at_isSet = true;
}

bool OAICrawl_ReadDetails::is_finished_at_Set() const{
    return m_finished_at_isSet;
}

bool OAICrawl_ReadDetails::is_finished_at_Valid() const{
    return m_finished_at_isValid;
}

QString OAICrawl_ReadDetails::getFirstUrl() const {
    return m_first_url;
}
void OAICrawl_ReadDetails::setFirstUrl(const QString &first_url) {
    m_first_url = first_url;
    m_first_url_isSet = true;
}

bool OAICrawl_ReadDetails::is_first_url_Set() const{
    return m_first_url_isSet;
}

bool OAICrawl_ReadDetails::is_first_url_Valid() const{
    return m_first_url_isValid;
}

QString OAICrawl_ReadDetails::getId() const {
    return m_id;
}
void OAICrawl_ReadDetails::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAICrawl_ReadDetails::is_id_Set() const{
    return m_id_isSet;
}

bool OAICrawl_ReadDetails::is_id_Valid() const{
    return m_id_isValid;
}

QList<QString> OAICrawl_ReadDetails::getStats() const {
    return m_stats;
}
void OAICrawl_ReadDetails::setStats(const QList<QString> &stats) {
    m_stats = stats;
    m_stats_isSet = true;
}

bool OAICrawl_ReadDetails::is_stats_Set() const{
    return m_stats_isSet;
}

bool OAICrawl_ReadDetails::is_stats_Valid() const{
    return m_stats_isValid;
}

QString OAICrawl_ReadDetails::getTrigger() const {
    return m_trigger;
}
void OAICrawl_ReadDetails::setTrigger(const QString &trigger) {
    m_trigger = trigger;
    m_trigger_isSet = true;
}

bool OAICrawl_ReadDetails::is_trigger_Set() const{
    return m_trigger_isSet;
}

bool OAICrawl_ReadDetails::is_trigger_Valid() const{
    return m_trigger_isValid;
}

QDateTime OAICrawl_ReadDetails::getUpdatedAt() const {
    return m_updated_at;
}
void OAICrawl_ReadDetails::setUpdatedAt(const QDateTime &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAICrawl_ReadDetails::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAICrawl_ReadDetails::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

bool OAICrawl_ReadDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_archived_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_author.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_finished_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_first_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stats.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_trigger_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICrawl_ReadDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
