/**
 * redirection.io
 * API documentation for redirection.io
 *
 * The version of the OpenAPI document: 1.1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIInstanceApi_H
#define OAI_OAIInstanceApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIInstance_Read.h"
#include "OAIInstance_Write.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIInstanceApi : public QObject {
    Q_OBJECT

public:
    OAIInstanceApi(const int timeOut = 0);
    ~OAIInstanceApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  project_id QString [required]
    */
    virtual void getInstanceCollection(const QString &project_id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void getInstanceItem(const QString &id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  instance OAIInstance_Write [optional]
    */
    virtual void liveInstanceItem(const QString &id, const ::OpenAPI::OptionalParam<OAIInstance_Write> &instance = ::OpenAPI::OptionalParam<OAIInstance_Write>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  instance OAIInstance_Write [optional]
    */
    virtual void loggingInstanceItem(const QString &id, const ::OpenAPI::OptionalParam<OAIInstance_Write> &instance = ::OpenAPI::OptionalParam<OAIInstance_Write>());

    /**
    * @param[in]  instance OAIInstance_Write [optional]
    */
    virtual void postInstanceCollection(const ::OpenAPI::OptionalParam<OAIInstance_Write> &instance = ::OpenAPI::OptionalParam<OAIInstance_Write>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  instance OAIInstance_Write [optional]
    */
    virtual void putInstanceItem(const QString &id, const ::OpenAPI::OptionalParam<OAIInstance_Write> &instance = ::OpenAPI::OptionalParam<OAIInstance_Write>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void getInstanceCollectionCallback(OAIHttpRequestWorker *worker);
    void getInstanceItemCallback(OAIHttpRequestWorker *worker);
    void liveInstanceItemCallback(OAIHttpRequestWorker *worker);
    void loggingInstanceItemCallback(OAIHttpRequestWorker *worker);
    void postInstanceCollectionCallback(OAIHttpRequestWorker *worker);
    void putInstanceItemCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void getInstanceCollectionSignal(QList<OAIInstance_Read> summary);
    void getInstanceItemSignal(OAIInstance_Read summary);
    void liveInstanceItemSignal(OAIInstance_Read summary);
    void loggingInstanceItemSignal(OAIInstance_Read summary);
    void postInstanceCollectionSignal(OAIInstance_Read summary);
    void putInstanceItemSignal(OAIInstance_Read summary);


    void getInstanceCollectionSignalFull(OAIHttpRequestWorker *worker, QList<OAIInstance_Read> summary);
    void getInstanceItemSignalFull(OAIHttpRequestWorker *worker, OAIInstance_Read summary);
    void liveInstanceItemSignalFull(OAIHttpRequestWorker *worker, OAIInstance_Read summary);
    void loggingInstanceItemSignalFull(OAIHttpRequestWorker *worker, OAIInstance_Read summary);
    void postInstanceCollectionSignalFull(OAIHttpRequestWorker *worker, OAIInstance_Read summary);
    void putInstanceItemSignalFull(OAIHttpRequestWorker *worker, OAIInstance_Read summary);

    Q_DECL_DEPRECATED_X("Use getInstanceCollectionSignalError() instead")
    void getInstanceCollectionSignalE(QList<OAIInstance_Read> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getInstanceCollectionSignalError(QList<OAIInstance_Read> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getInstanceItemSignalError() instead")
    void getInstanceItemSignalE(OAIInstance_Read summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getInstanceItemSignalError(OAIInstance_Read summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use liveInstanceItemSignalError() instead")
    void liveInstanceItemSignalE(OAIInstance_Read summary, QNetworkReply::NetworkError error_type, QString error_str);
    void liveInstanceItemSignalError(OAIInstance_Read summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use loggingInstanceItemSignalError() instead")
    void loggingInstanceItemSignalE(OAIInstance_Read summary, QNetworkReply::NetworkError error_type, QString error_str);
    void loggingInstanceItemSignalError(OAIInstance_Read summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postInstanceCollectionSignalError() instead")
    void postInstanceCollectionSignalE(OAIInstance_Read summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postInstanceCollectionSignalError(OAIInstance_Read summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putInstanceItemSignalError() instead")
    void putInstanceItemSignalE(OAIInstance_Read summary, QNetworkReply::NetworkError error_type, QString error_str);
    void putInstanceItemSignalError(OAIInstance_Read summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use getInstanceCollectionSignalErrorFull() instead")
    void getInstanceCollectionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getInstanceCollectionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getInstanceItemSignalErrorFull() instead")
    void getInstanceItemSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getInstanceItemSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use liveInstanceItemSignalErrorFull() instead")
    void liveInstanceItemSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void liveInstanceItemSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use loggingInstanceItemSignalErrorFull() instead")
    void loggingInstanceItemSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void loggingInstanceItemSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postInstanceCollectionSignalErrorFull() instead")
    void postInstanceCollectionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postInstanceCollectionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putInstanceItemSignalErrorFull() instead")
    void putInstanceItemSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void putInstanceItemSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
