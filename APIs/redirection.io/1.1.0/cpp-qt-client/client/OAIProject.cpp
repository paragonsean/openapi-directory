/**
 * redirection.io
 * API documentation for redirection.io
 *
 * The version of the OpenAPI document: 1.1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProject.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProject::OAIProject(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProject::OAIProject() {
    this->initializeModel();
}

OAIProject::~OAIProject() {}

void OAIProject::initializeModel() {

    m_complex_rules_count_isSet = false;
    m_complex_rules_count_isValid = false;

    m_complex_rules_updated_at_isSet = false;
    m_complex_rules_updated_at_isValid = false;

    m_configuration_isSet = false;
    m_configuration_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_current_version_isSet = false;
    m_current_version_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_ignore_project_types_isSet = false;
    m_ignore_project_types_isValid = false;

    m_is_publishing_isSet = false;
    m_is_publishing_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_onboarding_completed_demos_isSet = false;
    m_onboarding_completed_demos_isValid = false;

    m_organization_isSet = false;
    m_organization_isValid = false;

    m_plan_isSet = false;
    m_plan_isValid = false;

    m_rules_hash_isSet = false;
    m_rules_hash_isValid = false;

    m_slug_isSet = false;
    m_slug_isValid = false;

    m_straight_rules_count_isSet = false;
    m_straight_rules_count_isValid = false;

    m_straight_rules_updated_at_isSet = false;
    m_straight_rules_updated_at_isValid = false;

    m_token_isSet = false;
    m_token_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;

    m_user_projects_isSet = false;
    m_user_projects_isValid = false;

    m_users_flattened_isSet = false;
    m_users_flattened_isValid = false;

    m_working_version_isSet = false;
    m_working_version_isValid = false;
}

void OAIProject::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProject::fromJsonObject(QJsonObject json) {

    m_complex_rules_count_isValid = ::OpenAPI::fromJsonValue(m_complex_rules_count, json[QString("complexRulesCount")]);
    m_complex_rules_count_isSet = !json[QString("complexRulesCount")].isNull() && m_complex_rules_count_isValid;

    m_complex_rules_updated_at_isValid = ::OpenAPI::fromJsonValue(m_complex_rules_updated_at, json[QString("complexRulesUpdatedAt")]);
    m_complex_rules_updated_at_isSet = !json[QString("complexRulesUpdatedAt")].isNull() && m_complex_rules_updated_at_isValid;

    m_configuration_isValid = ::OpenAPI::fromJsonValue(m_configuration, json[QString("configuration")]);
    m_configuration_isSet = !json[QString("configuration")].isNull() && m_configuration_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("createdAt")]);
    m_created_at_isSet = !json[QString("createdAt")].isNull() && m_created_at_isValid;

    m_current_version_isValid = ::OpenAPI::fromJsonValue(m_current_version, json[QString("currentVersion")]);
    m_current_version_isSet = !json[QString("currentVersion")].isNull() && m_current_version_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_ignore_project_types_isValid = ::OpenAPI::fromJsonValue(m_ignore_project_types, json[QString("ignoreProjectTypes")]);
    m_ignore_project_types_isSet = !json[QString("ignoreProjectTypes")].isNull() && m_ignore_project_types_isValid;

    m_is_publishing_isValid = ::OpenAPI::fromJsonValue(m_is_publishing, json[QString("isPublishing")]);
    m_is_publishing_isSet = !json[QString("isPublishing")].isNull() && m_is_publishing_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_onboarding_completed_demos_isValid = ::OpenAPI::fromJsonValue(m_onboarding_completed_demos, json[QString("onboardingCompletedDemos")]);
    m_onboarding_completed_demos_isSet = !json[QString("onboardingCompletedDemos")].isNull() && m_onboarding_completed_demos_isValid;

    m_organization_isValid = ::OpenAPI::fromJsonValue(m_organization, json[QString("organization")]);
    m_organization_isSet = !json[QString("organization")].isNull() && m_organization_isValid;

    m_plan_isValid = ::OpenAPI::fromJsonValue(m_plan, json[QString("plan")]);
    m_plan_isSet = !json[QString("plan")].isNull() && m_plan_isValid;

    m_rules_hash_isValid = ::OpenAPI::fromJsonValue(m_rules_hash, json[QString("rulesHash")]);
    m_rules_hash_isSet = !json[QString("rulesHash")].isNull() && m_rules_hash_isValid;

    m_slug_isValid = ::OpenAPI::fromJsonValue(m_slug, json[QString("slug")]);
    m_slug_isSet = !json[QString("slug")].isNull() && m_slug_isValid;

    m_straight_rules_count_isValid = ::OpenAPI::fromJsonValue(m_straight_rules_count, json[QString("straightRulesCount")]);
    m_straight_rules_count_isSet = !json[QString("straightRulesCount")].isNull() && m_straight_rules_count_isValid;

    m_straight_rules_updated_at_isValid = ::OpenAPI::fromJsonValue(m_straight_rules_updated_at, json[QString("straightRulesUpdatedAt")]);
    m_straight_rules_updated_at_isSet = !json[QString("straightRulesUpdatedAt")].isNull() && m_straight_rules_updated_at_isValid;

    m_token_isValid = ::OpenAPI::fromJsonValue(m_token, json[QString("token")]);
    m_token_isSet = !json[QString("token")].isNull() && m_token_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updatedAt")]);
    m_updated_at_isSet = !json[QString("updatedAt")].isNull() && m_updated_at_isValid;

    m_user_projects_isValid = ::OpenAPI::fromJsonValue(m_user_projects, json[QString("userProjects")]);
    m_user_projects_isSet = !json[QString("userProjects")].isNull() && m_user_projects_isValid;

    m_users_flattened_isValid = ::OpenAPI::fromJsonValue(m_users_flattened, json[QString("usersFlattened")]);
    m_users_flattened_isSet = !json[QString("usersFlattened")].isNull() && m_users_flattened_isValid;

    m_working_version_isValid = ::OpenAPI::fromJsonValue(m_working_version, json[QString("workingVersion")]);
    m_working_version_isSet = !json[QString("workingVersion")].isNull() && m_working_version_isValid;
}

QString OAIProject::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProject::asJsonObject() const {
    QJsonObject obj;
    if (m_complex_rules_count_isSet) {
        obj.insert(QString("complexRulesCount"), ::OpenAPI::toJsonValue(m_complex_rules_count));
    }
    if (m_complex_rules_updated_at_isSet) {
        obj.insert(QString("complexRulesUpdatedAt"), ::OpenAPI::toJsonValue(m_complex_rules_updated_at));
    }
    if (m_configuration.size() > 0) {
        obj.insert(QString("configuration"), ::OpenAPI::toJsonValue(m_configuration));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("createdAt"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_current_version.isSet()) {
        obj.insert(QString("currentVersion"), ::OpenAPI::toJsonValue(m_current_version));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_ignore_project_types.size() > 0) {
        obj.insert(QString("ignoreProjectTypes"), ::OpenAPI::toJsonValue(m_ignore_project_types));
    }
    if (m_is_publishing_isSet) {
        obj.insert(QString("isPublishing"), ::OpenAPI::toJsonValue(m_is_publishing));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_onboarding_completed_demos.size() > 0) {
        obj.insert(QString("onboardingCompletedDemos"), ::OpenAPI::toJsonValue(m_onboarding_completed_demos));
    }
    if (m_organization.isSet()) {
        obj.insert(QString("organization"), ::OpenAPI::toJsonValue(m_organization));
    }
    if (m_plan_isSet) {
        obj.insert(QString("plan"), ::OpenAPI::toJsonValue(m_plan));
    }
    if (m_rules_hash_isSet) {
        obj.insert(QString("rulesHash"), ::OpenAPI::toJsonValue(m_rules_hash));
    }
    if (m_slug_isSet) {
        obj.insert(QString("slug"), ::OpenAPI::toJsonValue(m_slug));
    }
    if (m_straight_rules_count_isSet) {
        obj.insert(QString("straightRulesCount"), ::OpenAPI::toJsonValue(m_straight_rules_count));
    }
    if (m_straight_rules_updated_at_isSet) {
        obj.insert(QString("straightRulesUpdatedAt"), ::OpenAPI::toJsonValue(m_straight_rules_updated_at));
    }
    if (m_token_isSet) {
        obj.insert(QString("token"), ::OpenAPI::toJsonValue(m_token));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updatedAt"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    if (m_user_projects.size() > 0) {
        obj.insert(QString("userProjects"), ::OpenAPI::toJsonValue(m_user_projects));
    }
    if (m_users_flattened.size() > 0) {
        obj.insert(QString("usersFlattened"), ::OpenAPI::toJsonValue(m_users_flattened));
    }
    if (m_working_version.isSet()) {
        obj.insert(QString("workingVersion"), ::OpenAPI::toJsonValue(m_working_version));
    }
    return obj;
}

qint32 OAIProject::getComplexRulesCount() const {
    return m_complex_rules_count;
}
void OAIProject::setComplexRulesCount(const qint32 &complex_rules_count) {
    m_complex_rules_count = complex_rules_count;
    m_complex_rules_count_isSet = true;
}

bool OAIProject::is_complex_rules_count_Set() const{
    return m_complex_rules_count_isSet;
}

bool OAIProject::is_complex_rules_count_Valid() const{
    return m_complex_rules_count_isValid;
}

QDateTime OAIProject::getComplexRulesUpdatedAt() const {
    return m_complex_rules_updated_at;
}
void OAIProject::setComplexRulesUpdatedAt(const QDateTime &complex_rules_updated_at) {
    m_complex_rules_updated_at = complex_rules_updated_at;
    m_complex_rules_updated_at_isSet = true;
}

bool OAIProject::is_complex_rules_updated_at_Set() const{
    return m_complex_rules_updated_at_isSet;
}

bool OAIProject::is_complex_rules_updated_at_Valid() const{
    return m_complex_rules_updated_at_isValid;
}

QList<QString> OAIProject::getConfiguration() const {
    return m_configuration;
}
void OAIProject::setConfiguration(const QList<QString> &configuration) {
    m_configuration = configuration;
    m_configuration_isSet = true;
}

bool OAIProject::is_configuration_Set() const{
    return m_configuration_isSet;
}

bool OAIProject::is_configuration_Valid() const{
    return m_configuration_isValid;
}

QDateTime OAIProject::getCreatedAt() const {
    return m_created_at;
}
void OAIProject::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIProject::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIProject::is_created_at_Valid() const{
    return m_created_at_isValid;
}

OAIRuleSetVersion OAIProject::getCurrentVersion() const {
    return m_current_version;
}
void OAIProject::setCurrentVersion(const OAIRuleSetVersion &current_version) {
    m_current_version = current_version;
    m_current_version_isSet = true;
}

bool OAIProject::is_current_version_Set() const{
    return m_current_version_isSet;
}

bool OAIProject::is_current_version_Valid() const{
    return m_current_version_isValid;
}

QString OAIProject::getId() const {
    return m_id;
}
void OAIProject::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIProject::is_id_Set() const{
    return m_id_isSet;
}

bool OAIProject::is_id_Valid() const{
    return m_id_isValid;
}

QList<QString> OAIProject::getIgnoreProjectTypes() const {
    return m_ignore_project_types;
}
void OAIProject::setIgnoreProjectTypes(const QList<QString> &ignore_project_types) {
    m_ignore_project_types = ignore_project_types;
    m_ignore_project_types_isSet = true;
}

bool OAIProject::is_ignore_project_types_Set() const{
    return m_ignore_project_types_isSet;
}

bool OAIProject::is_ignore_project_types_Valid() const{
    return m_ignore_project_types_isValid;
}

bool OAIProject::isIsPublishing() const {
    return m_is_publishing;
}
void OAIProject::setIsPublishing(const bool &is_publishing) {
    m_is_publishing = is_publishing;
    m_is_publishing_isSet = true;
}

bool OAIProject::is_is_publishing_Set() const{
    return m_is_publishing_isSet;
}

bool OAIProject::is_is_publishing_Valid() const{
    return m_is_publishing_isValid;
}

QString OAIProject::getName() const {
    return m_name;
}
void OAIProject::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIProject::is_name_Set() const{
    return m_name_isSet;
}

bool OAIProject::is_name_Valid() const{
    return m_name_isValid;
}

QList<QString> OAIProject::getOnboardingCompletedDemos() const {
    return m_onboarding_completed_demos;
}
void OAIProject::setOnboardingCompletedDemos(const QList<QString> &onboarding_completed_demos) {
    m_onboarding_completed_demos = onboarding_completed_demos;
    m_onboarding_completed_demos_isSet = true;
}

bool OAIProject::is_onboarding_completed_demos_Set() const{
    return m_onboarding_completed_demos_isSet;
}

bool OAIProject::is_onboarding_completed_demos_Valid() const{
    return m_onboarding_completed_demos_isValid;
}

OAIOrganization OAIProject::getOrganization() const {
    return m_organization;
}
void OAIProject::setOrganization(const OAIOrganization &organization) {
    m_organization = organization;
    m_organization_isSet = true;
}

bool OAIProject::is_organization_Set() const{
    return m_organization_isSet;
}

bool OAIProject::is_organization_Valid() const{
    return m_organization_isValid;
}

qint32 OAIProject::getPlan() const {
    return m_plan;
}
void OAIProject::setPlan(const qint32 &plan) {
    m_plan = plan;
    m_plan_isSet = true;
}

bool OAIProject::is_plan_Set() const{
    return m_plan_isSet;
}

bool OAIProject::is_plan_Valid() const{
    return m_plan_isValid;
}

QString OAIProject::getRulesHash() const {
    return m_rules_hash;
}
void OAIProject::setRulesHash(const QString &rules_hash) {
    m_rules_hash = rules_hash;
    m_rules_hash_isSet = true;
}

bool OAIProject::is_rules_hash_Set() const{
    return m_rules_hash_isSet;
}

bool OAIProject::is_rules_hash_Valid() const{
    return m_rules_hash_isValid;
}

QString OAIProject::getSlug() const {
    return m_slug;
}
void OAIProject::setSlug(const QString &slug) {
    m_slug = slug;
    m_slug_isSet = true;
}

bool OAIProject::is_slug_Set() const{
    return m_slug_isSet;
}

bool OAIProject::is_slug_Valid() const{
    return m_slug_isValid;
}

qint32 OAIProject::getStraightRulesCount() const {
    return m_straight_rules_count;
}
void OAIProject::setStraightRulesCount(const qint32 &straight_rules_count) {
    m_straight_rules_count = straight_rules_count;
    m_straight_rules_count_isSet = true;
}

bool OAIProject::is_straight_rules_count_Set() const{
    return m_straight_rules_count_isSet;
}

bool OAIProject::is_straight_rules_count_Valid() const{
    return m_straight_rules_count_isValid;
}

QDateTime OAIProject::getStraightRulesUpdatedAt() const {
    return m_straight_rules_updated_at;
}
void OAIProject::setStraightRulesUpdatedAt(const QDateTime &straight_rules_updated_at) {
    m_straight_rules_updated_at = straight_rules_updated_at;
    m_straight_rules_updated_at_isSet = true;
}

bool OAIProject::is_straight_rules_updated_at_Set() const{
    return m_straight_rules_updated_at_isSet;
}

bool OAIProject::is_straight_rules_updated_at_Valid() const{
    return m_straight_rules_updated_at_isValid;
}

QString OAIProject::getToken() const {
    return m_token;
}
void OAIProject::setToken(const QString &token) {
    m_token = token;
    m_token_isSet = true;
}

bool OAIProject::is_token_Set() const{
    return m_token_isSet;
}

bool OAIProject::is_token_Valid() const{
    return m_token_isValid;
}

QDateTime OAIProject::getUpdatedAt() const {
    return m_updated_at;
}
void OAIProject::setUpdatedAt(const QDateTime &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAIProject::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAIProject::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

QList<OAIUserProject> OAIProject::getUserProjects() const {
    return m_user_projects;
}
void OAIProject::setUserProjects(const QList<OAIUserProject> &user_projects) {
    m_user_projects = user_projects;
    m_user_projects_isSet = true;
}

bool OAIProject::is_user_projects_Set() const{
    return m_user_projects_isSet;
}

bool OAIProject::is_user_projects_Valid() const{
    return m_user_projects_isValid;
}

QList<OAIUserProjectFlattened> OAIProject::getUsersFlattened() const {
    return m_users_flattened;
}
void OAIProject::setUsersFlattened(const QList<OAIUserProjectFlattened> &users_flattened) {
    m_users_flattened = users_flattened;
    m_users_flattened_isSet = true;
}

bool OAIProject::is_users_flattened_Set() const{
    return m_users_flattened_isSet;
}

bool OAIProject::is_users_flattened_Valid() const{
    return m_users_flattened_isValid;
}

OAIRuleSetVersion OAIProject::getWorkingVersion() const {
    return m_working_version;
}
void OAIProject::setWorkingVersion(const OAIRuleSetVersion &working_version) {
    m_working_version = working_version;
    m_working_version_isSet = true;
}

bool OAIProject::is_working_version_Set() const{
    return m_working_version_isSet;
}

bool OAIProject::is_working_version_Valid() const{
    return m_working_version_isValid;
}

bool OAIProject::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_complex_rules_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_complex_rules_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_configuration.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_version.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ignore_project_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_publishing_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_onboarding_completed_demos.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_organization.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_plan_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rules_hash_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_slug_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_straight_rules_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_straight_rules_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_projects.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_users_flattened.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_working_version.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProject::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && true;
}

} // namespace OpenAPI
