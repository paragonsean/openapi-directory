/**
 * redirection.io
 * API documentation for redirection.io
 *
 * The version of the OpenAPI document: 1.1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAggregateLog_Read.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAggregateLog_Read::OAIAggregateLog_Read(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAggregateLog_Read::OAIAggregateLog_Read() {
    this->initializeModel();
}

OAIAggregateLog_Read::~OAIAggregateLog_Read() {}

void OAIAggregateLog_Read::initializeModel() {

    m_fixed_isSet = false;
    m_fixed_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_last_occurrence_at_isSet = false;
    m_last_occurrence_at_isValid = false;

    m_rule_id_isSet = false;
    m_rule_id_isValid = false;

    m_source_isSet = false;
    m_source_isValid = false;

    m_status_code_isSet = false;
    m_status_code_isValid = false;

    m_target_isSet = false;
    m_target_isValid = false;

    m_view_count_isSet = false;
    m_view_count_isValid = false;
}

void OAIAggregateLog_Read::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAggregateLog_Read::fromJsonObject(QJsonObject json) {

    m_fixed_isValid = ::OpenAPI::fromJsonValue(m_fixed, json[QString("fixed")]);
    m_fixed_isSet = !json[QString("fixed")].isNull() && m_fixed_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_last_occurrence_at_isValid = ::OpenAPI::fromJsonValue(m_last_occurrence_at, json[QString("lastOccurrenceAt")]);
    m_last_occurrence_at_isSet = !json[QString("lastOccurrenceAt")].isNull() && m_last_occurrence_at_isValid;

    m_rule_id_isValid = ::OpenAPI::fromJsonValue(m_rule_id, json[QString("ruleId")]);
    m_rule_id_isSet = !json[QString("ruleId")].isNull() && m_rule_id_isValid;

    m_source_isValid = ::OpenAPI::fromJsonValue(m_source, json[QString("source")]);
    m_source_isSet = !json[QString("source")].isNull() && m_source_isValid;

    m_status_code_isValid = ::OpenAPI::fromJsonValue(m_status_code, json[QString("statusCode")]);
    m_status_code_isSet = !json[QString("statusCode")].isNull() && m_status_code_isValid;

    m_target_isValid = ::OpenAPI::fromJsonValue(m_target, json[QString("target")]);
    m_target_isSet = !json[QString("target")].isNull() && m_target_isValid;

    m_view_count_isValid = ::OpenAPI::fromJsonValue(m_view_count, json[QString("viewCount")]);
    m_view_count_isSet = !json[QString("viewCount")].isNull() && m_view_count_isValid;
}

QString OAIAggregateLog_Read::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAggregateLog_Read::asJsonObject() const {
    QJsonObject obj;
    if (m_fixed_isSet) {
        obj.insert(QString("fixed"), ::OpenAPI::toJsonValue(m_fixed));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_last_occurrence_at_isSet) {
        obj.insert(QString("lastOccurrenceAt"), ::OpenAPI::toJsonValue(m_last_occurrence_at));
    }
    if (m_rule_id_isSet) {
        obj.insert(QString("ruleId"), ::OpenAPI::toJsonValue(m_rule_id));
    }
    if (m_source_isSet) {
        obj.insert(QString("source"), ::OpenAPI::toJsonValue(m_source));
    }
    if (m_status_code_isSet) {
        obj.insert(QString("statusCode"), ::OpenAPI::toJsonValue(m_status_code));
    }
    if (m_target_isSet) {
        obj.insert(QString("target"), ::OpenAPI::toJsonValue(m_target));
    }
    if (m_view_count_isSet) {
        obj.insert(QString("viewCount"), ::OpenAPI::toJsonValue(m_view_count));
    }
    return obj;
}

bool OAIAggregateLog_Read::isFixed() const {
    return m_fixed;
}
void OAIAggregateLog_Read::setFixed(const bool &fixed) {
    m_fixed = fixed;
    m_fixed_isSet = true;
}

bool OAIAggregateLog_Read::is_fixed_Set() const{
    return m_fixed_isSet;
}

bool OAIAggregateLog_Read::is_fixed_Valid() const{
    return m_fixed_isValid;
}

OAIObject OAIAggregateLog_Read::getId() const {
    return m_id;
}
void OAIAggregateLog_Read::setId(const OAIObject &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIAggregateLog_Read::is_id_Set() const{
    return m_id_isSet;
}

bool OAIAggregateLog_Read::is_id_Valid() const{
    return m_id_isValid;
}

QDateTime OAIAggregateLog_Read::getLastOccurrenceAt() const {
    return m_last_occurrence_at;
}
void OAIAggregateLog_Read::setLastOccurrenceAt(const QDateTime &last_occurrence_at) {
    m_last_occurrence_at = last_occurrence_at;
    m_last_occurrence_at_isSet = true;
}

bool OAIAggregateLog_Read::is_last_occurrence_at_Set() const{
    return m_last_occurrence_at_isSet;
}

bool OAIAggregateLog_Read::is_last_occurrence_at_Valid() const{
    return m_last_occurrence_at_isValid;
}

QString OAIAggregateLog_Read::getRuleId() const {
    return m_rule_id;
}
void OAIAggregateLog_Read::setRuleId(const QString &rule_id) {
    m_rule_id = rule_id;
    m_rule_id_isSet = true;
}

bool OAIAggregateLog_Read::is_rule_id_Set() const{
    return m_rule_id_isSet;
}

bool OAIAggregateLog_Read::is_rule_id_Valid() const{
    return m_rule_id_isValid;
}

OAIObject OAIAggregateLog_Read::getSource() const {
    return m_source;
}
void OAIAggregateLog_Read::setSource(const OAIObject &source) {
    m_source = source;
    m_source_isSet = true;
}

bool OAIAggregateLog_Read::is_source_Set() const{
    return m_source_isSet;
}

bool OAIAggregateLog_Read::is_source_Valid() const{
    return m_source_isValid;
}

qint32 OAIAggregateLog_Read::getStatusCode() const {
    return m_status_code;
}
void OAIAggregateLog_Read::setStatusCode(const qint32 &status_code) {
    m_status_code = status_code;
    m_status_code_isSet = true;
}

bool OAIAggregateLog_Read::is_status_code_Set() const{
    return m_status_code_isSet;
}

bool OAIAggregateLog_Read::is_status_code_Valid() const{
    return m_status_code_isValid;
}

OAIObject OAIAggregateLog_Read::getTarget() const {
    return m_target;
}
void OAIAggregateLog_Read::setTarget(const OAIObject &target) {
    m_target = target;
    m_target_isSet = true;
}

bool OAIAggregateLog_Read::is_target_Set() const{
    return m_target_isSet;
}

bool OAIAggregateLog_Read::is_target_Valid() const{
    return m_target_isValid;
}

qint32 OAIAggregateLog_Read::getViewCount() const {
    return m_view_count;
}
void OAIAggregateLog_Read::setViewCount(const qint32 &view_count) {
    m_view_count = view_count;
    m_view_count_isSet = true;
}

bool OAIAggregateLog_Read::is_view_count_Set() const{
    return m_view_count_isSet;
}

bool OAIAggregateLog_Read::is_view_count_Valid() const{
    return m_view_count_isValid;
}

bool OAIAggregateLog_Read::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_fixed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_occurrence_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rule_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_view_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAggregateLog_Read::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
