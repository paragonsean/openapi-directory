# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ImpactSmartListWrite(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, project: str=None, smart_list_id: str=None, smart_list_version: str=None):
        """ImpactSmartListWrite - a model defined in OpenAPI

        :param project: The project of this ImpactSmartListWrite.
        :param smart_list_id: The smart_list_id of this ImpactSmartListWrite.
        :param smart_list_version: The smart_list_version of this ImpactSmartListWrite.
        """
        self.openapi_types = {
            'project': str,
            'smart_list_id': str,
            'smart_list_version': str
        }

        self.attribute_map = {
            'project': 'project',
            'smart_list_id': 'smartListId',
            'smart_list_version': 'smartListVersion'
        }

        self._project = project
        self._smart_list_id = smart_list_id
        self._smart_list_version = smart_list_version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ImpactSmartListWrite':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ImpactSmartList-Write of this ImpactSmartListWrite.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def project(self):
        """Gets the project of this ImpactSmartListWrite.


        :return: The project of this ImpactSmartListWrite.
        :rtype: str
        """
        return self._project

    @project.setter
    def project(self, project):
        """Sets the project of this ImpactSmartListWrite.


        :param project: The project of this ImpactSmartListWrite.
        :type project: str
        """
        if project is None:
            raise ValueError("Invalid value for `project`, must not be `None`")

        self._project = project

    @property
    def smart_list_id(self):
        """Gets the smart_list_id of this ImpactSmartListWrite.


        :return: The smart_list_id of this ImpactSmartListWrite.
        :rtype: str
        """
        return self._smart_list_id

    @smart_list_id.setter
    def smart_list_id(self, smart_list_id):
        """Sets the smart_list_id of this ImpactSmartListWrite.


        :param smart_list_id: The smart_list_id of this ImpactSmartListWrite.
        :type smart_list_id: str
        """
        if smart_list_id is None:
            raise ValueError("Invalid value for `smart_list_id`, must not be `None`")

        self._smart_list_id = smart_list_id

    @property
    def smart_list_version(self):
        """Gets the smart_list_version of this ImpactSmartListWrite.


        :return: The smart_list_version of this ImpactSmartListWrite.
        :rtype: str
        """
        return self._smart_list_version

    @smart_list_version.setter
    def smart_list_version(self, smart_list_version):
        """Sets the smart_list_version of this ImpactSmartListWrite.


        :param smart_list_version: The smart_list_version of this ImpactSmartListWrite.
        :type smart_list_version: str
        """

        self._smart_list_version = smart_list_version
