# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.marker_read import MarkerRead
from openapi_server.models.rule_change_read import RuleChangeRead
from openapi_server import util


class RuleRead(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, actions: List[str]=None, changes: List[RuleChangeRead]=None, current_change: RuleChangeRead=None, examples: List[str]=None, formatted_source: str=None, id: str=None, markers: List[MarkerRead]=None, match_on_response_status: int=None, rank: int=None, source: str=None, updated_at: datetime=None, view_count: int=None):
        """RuleRead - a model defined in OpenAPI

        :param actions: The actions of this RuleRead.
        :param changes: The changes of this RuleRead.
        :param current_change: The current_change of this RuleRead.
        :param examples: The examples of this RuleRead.
        :param formatted_source: The formatted_source of this RuleRead.
        :param id: The id of this RuleRead.
        :param markers: The markers of this RuleRead.
        :param match_on_response_status: The match_on_response_status of this RuleRead.
        :param rank: The rank of this RuleRead.
        :param source: The source of this RuleRead.
        :param updated_at: The updated_at of this RuleRead.
        :param view_count: The view_count of this RuleRead.
        """
        self.openapi_types = {
            'actions': List[str],
            'changes': List[RuleChangeRead],
            'current_change': RuleChangeRead,
            'examples': List[str],
            'formatted_source': str,
            'id': str,
            'markers': List[MarkerRead],
            'match_on_response_status': int,
            'rank': int,
            'source': str,
            'updated_at': datetime,
            'view_count': int
        }

        self.attribute_map = {
            'actions': 'actions',
            'changes': 'changes',
            'current_change': 'currentChange',
            'examples': 'examples',
            'formatted_source': 'formattedSource',
            'id': 'id',
            'markers': 'markers',
            'match_on_response_status': 'matchOnResponseStatus',
            'rank': 'rank',
            'source': 'source',
            'updated_at': 'updatedAt',
            'view_count': 'viewCount'
        }

        self._actions = actions
        self._changes = changes
        self._current_change = current_change
        self._examples = examples
        self._formatted_source = formatted_source
        self._id = id
        self._markers = markers
        self._match_on_response_status = match_on_response_status
        self._rank = rank
        self._source = source
        self._updated_at = updated_at
        self._view_count = view_count

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RuleRead':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Rule-Read of this RuleRead.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def actions(self):
        """Gets the actions of this RuleRead.


        :return: The actions of this RuleRead.
        :rtype: List[str]
        """
        return self._actions

    @actions.setter
    def actions(self, actions):
        """Sets the actions of this RuleRead.


        :param actions: The actions of this RuleRead.
        :type actions: List[str]
        """

        self._actions = actions

    @property
    def changes(self):
        """Gets the changes of this RuleRead.


        :return: The changes of this RuleRead.
        :rtype: List[RuleChangeRead]
        """
        return self._changes

    @changes.setter
    def changes(self, changes):
        """Sets the changes of this RuleRead.


        :param changes: The changes of this RuleRead.
        :type changes: List[RuleChangeRead]
        """

        self._changes = changes

    @property
    def current_change(self):
        """Gets the current_change of this RuleRead.


        :return: The current_change of this RuleRead.
        :rtype: RuleChangeRead
        """
        return self._current_change

    @current_change.setter
    def current_change(self, current_change):
        """Sets the current_change of this RuleRead.


        :param current_change: The current_change of this RuleRead.
        :type current_change: RuleChangeRead
        """

        self._current_change = current_change

    @property
    def examples(self):
        """Gets the examples of this RuleRead.


        :return: The examples of this RuleRead.
        :rtype: List[str]
        """
        return self._examples

    @examples.setter
    def examples(self, examples):
        """Sets the examples of this RuleRead.


        :param examples: The examples of this RuleRead.
        :type examples: List[str]
        """

        self._examples = examples

    @property
    def formatted_source(self):
        """Gets the formatted_source of this RuleRead.


        :return: The formatted_source of this RuleRead.
        :rtype: str
        """
        return self._formatted_source

    @formatted_source.setter
    def formatted_source(self, formatted_source):
        """Sets the formatted_source of this RuleRead.


        :param formatted_source: The formatted_source of this RuleRead.
        :type formatted_source: str
        """

        self._formatted_source = formatted_source

    @property
    def id(self):
        """Gets the id of this RuleRead.


        :return: The id of this RuleRead.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this RuleRead.


        :param id: The id of this RuleRead.
        :type id: str
        """

        self._id = id

    @property
    def markers(self):
        """Gets the markers of this RuleRead.


        :return: The markers of this RuleRead.
        :rtype: List[MarkerRead]
        """
        return self._markers

    @markers.setter
    def markers(self, markers):
        """Sets the markers of this RuleRead.


        :param markers: The markers of this RuleRead.
        :type markers: List[MarkerRead]
        """

        self._markers = markers

    @property
    def match_on_response_status(self):
        """Gets the match_on_response_status of this RuleRead.


        :return: The match_on_response_status of this RuleRead.
        :rtype: int
        """
        return self._match_on_response_status

    @match_on_response_status.setter
    def match_on_response_status(self, match_on_response_status):
        """Sets the match_on_response_status of this RuleRead.


        :param match_on_response_status: The match_on_response_status of this RuleRead.
        :type match_on_response_status: int
        """

        self._match_on_response_status = match_on_response_status

    @property
    def rank(self):
        """Gets the rank of this RuleRead.


        :return: The rank of this RuleRead.
        :rtype: int
        """
        return self._rank

    @rank.setter
    def rank(self, rank):
        """Sets the rank of this RuleRead.


        :param rank: The rank of this RuleRead.
        :type rank: int
        """

        self._rank = rank

    @property
    def source(self):
        """Gets the source of this RuleRead.


        :return: The source of this RuleRead.
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this RuleRead.


        :param source: The source of this RuleRead.
        :type source: str
        """

        self._source = source

    @property
    def updated_at(self):
        """Gets the updated_at of this RuleRead.


        :return: The updated_at of this RuleRead.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this RuleRead.


        :param updated_at: The updated_at of this RuleRead.
        :type updated_at: datetime
        """

        self._updated_at = updated_at

    @property
    def view_count(self):
        """Gets the view_count of this RuleRead.


        :return: The view_count of this RuleRead.
        :rtype: int
        """
        return self._view_count

    @view_count.setter
    def view_count(self, view_count):
        """Sets the view_count of this RuleRead.


        :param view_count: The view_count of this RuleRead.
        :type view_count: int
        """

        self._view_count = view_count
