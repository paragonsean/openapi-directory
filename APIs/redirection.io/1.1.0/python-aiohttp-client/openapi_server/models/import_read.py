# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ImportRead(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, author: str=None, completed_at: datetime=None, error_count: int=None, id: str=None, import_duration: int=None, message: str=None, project: str=None, started_at: datetime=None, status_as_text: object=None, success_count: int=None, updated_at: datetime=None):
        """ImportRead - a model defined in OpenAPI

        :param author: The author of this ImportRead.
        :param completed_at: The completed_at of this ImportRead.
        :param error_count: The error_count of this ImportRead.
        :param id: The id of this ImportRead.
        :param import_duration: The import_duration of this ImportRead.
        :param message: The message of this ImportRead.
        :param project: The project of this ImportRead.
        :param started_at: The started_at of this ImportRead.
        :param status_as_text: The status_as_text of this ImportRead.
        :param success_count: The success_count of this ImportRead.
        :param updated_at: The updated_at of this ImportRead.
        """
        self.openapi_types = {
            'author': str,
            'completed_at': datetime,
            'error_count': int,
            'id': str,
            'import_duration': int,
            'message': str,
            'project': str,
            'started_at': datetime,
            'status_as_text': object,
            'success_count': int,
            'updated_at': datetime
        }

        self.attribute_map = {
            'author': 'author',
            'completed_at': 'completedAt',
            'error_count': 'errorCount',
            'id': 'id',
            'import_duration': 'importDuration',
            'message': 'message',
            'project': 'project',
            'started_at': 'startedAt',
            'status_as_text': 'statusAsText',
            'success_count': 'successCount',
            'updated_at': 'updatedAt'
        }

        self._author = author
        self._completed_at = completed_at
        self._error_count = error_count
        self._id = id
        self._import_duration = import_duration
        self._message = message
        self._project = project
        self._started_at = started_at
        self._status_as_text = status_as_text
        self._success_count = success_count
        self._updated_at = updated_at

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ImportRead':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Import-Read of this ImportRead.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def author(self):
        """Gets the author of this ImportRead.


        :return: The author of this ImportRead.
        :rtype: str
        """
        return self._author

    @author.setter
    def author(self, author):
        """Sets the author of this ImportRead.


        :param author: The author of this ImportRead.
        :type author: str
        """

        self._author = author

    @property
    def completed_at(self):
        """Gets the completed_at of this ImportRead.


        :return: The completed_at of this ImportRead.
        :rtype: datetime
        """
        return self._completed_at

    @completed_at.setter
    def completed_at(self, completed_at):
        """Sets the completed_at of this ImportRead.


        :param completed_at: The completed_at of this ImportRead.
        :type completed_at: datetime
        """

        self._completed_at = completed_at

    @property
    def error_count(self):
        """Gets the error_count of this ImportRead.


        :return: The error_count of this ImportRead.
        :rtype: int
        """
        return self._error_count

    @error_count.setter
    def error_count(self, error_count):
        """Sets the error_count of this ImportRead.


        :param error_count: The error_count of this ImportRead.
        :type error_count: int
        """

        self._error_count = error_count

    @property
    def id(self):
        """Gets the id of this ImportRead.


        :return: The id of this ImportRead.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ImportRead.


        :param id: The id of this ImportRead.
        :type id: str
        """

        self._id = id

    @property
    def import_duration(self):
        """Gets the import_duration of this ImportRead.


        :return: The import_duration of this ImportRead.
        :rtype: int
        """
        return self._import_duration

    @import_duration.setter
    def import_duration(self, import_duration):
        """Sets the import_duration of this ImportRead.


        :param import_duration: The import_duration of this ImportRead.
        :type import_duration: int
        """

        self._import_duration = import_duration

    @property
    def message(self):
        """Gets the message of this ImportRead.


        :return: The message of this ImportRead.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this ImportRead.


        :param message: The message of this ImportRead.
        :type message: str
        """

        self._message = message

    @property
    def project(self):
        """Gets the project of this ImportRead.


        :return: The project of this ImportRead.
        :rtype: str
        """
        return self._project

    @project.setter
    def project(self, project):
        """Sets the project of this ImportRead.


        :param project: The project of this ImportRead.
        :type project: str
        """
        if project is None:
            raise ValueError("Invalid value for `project`, must not be `None`")

        self._project = project

    @property
    def started_at(self):
        """Gets the started_at of this ImportRead.


        :return: The started_at of this ImportRead.
        :rtype: datetime
        """
        return self._started_at

    @started_at.setter
    def started_at(self, started_at):
        """Sets the started_at of this ImportRead.


        :param started_at: The started_at of this ImportRead.
        :type started_at: datetime
        """

        self._started_at = started_at

    @property
    def status_as_text(self):
        """Gets the status_as_text of this ImportRead.


        :return: The status_as_text of this ImportRead.
        :rtype: object
        """
        return self._status_as_text

    @status_as_text.setter
    def status_as_text(self, status_as_text):
        """Sets the status_as_text of this ImportRead.


        :param status_as_text: The status_as_text of this ImportRead.
        :type status_as_text: object
        """

        self._status_as_text = status_as_text

    @property
    def success_count(self):
        """Gets the success_count of this ImportRead.


        :return: The success_count of this ImportRead.
        :rtype: int
        """
        return self._success_count

    @success_count.setter
    def success_count(self, success_count):
        """Sets the success_count of this ImportRead.


        :param success_count: The success_count of this ImportRead.
        :type success_count: int
        """

        self._success_count = success_count

    @property
    def updated_at(self):
        """Gets the updated_at of this ImportRead.


        :return: The updated_at of this ImportRead.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this ImportRead.


        :param updated_at: The updated_at of this ImportRead.
        :type updated_at: datetime
        """

        self._updated_at = updated_at
