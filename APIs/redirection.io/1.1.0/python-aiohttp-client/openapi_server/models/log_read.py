# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class LogRead(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, created_at: datetime=None, fixed: bool=None, fixed_by_versions: List[str]=None, from_smart_list: bool=None, id: object=None, instance_name: object=None, method: object=None, not_fixed_by_versions: List[str]=None, proxy: str=None, referrer: object=None, rule_id: str=None, simplified_user_agent: object=None, smart_list: str=None, source: object=None, status_code: object=None, target: object=None, user_agent: object=None, user_agent_type: object=None):
        """LogRead - a model defined in OpenAPI

        :param created_at: The created_at of this LogRead.
        :param fixed: The fixed of this LogRead.
        :param fixed_by_versions: The fixed_by_versions of this LogRead.
        :param from_smart_list: The from_smart_list of this LogRead.
        :param id: The id of this LogRead.
        :param instance_name: The instance_name of this LogRead.
        :param method: The method of this LogRead.
        :param not_fixed_by_versions: The not_fixed_by_versions of this LogRead.
        :param proxy: The proxy of this LogRead.
        :param referrer: The referrer of this LogRead.
        :param rule_id: The rule_id of this LogRead.
        :param simplified_user_agent: The simplified_user_agent of this LogRead.
        :param smart_list: The smart_list of this LogRead.
        :param source: The source of this LogRead.
        :param status_code: The status_code of this LogRead.
        :param target: The target of this LogRead.
        :param user_agent: The user_agent of this LogRead.
        :param user_agent_type: The user_agent_type of this LogRead.
        """
        self.openapi_types = {
            'created_at': datetime,
            'fixed': bool,
            'fixed_by_versions': List[str],
            'from_smart_list': bool,
            'id': object,
            'instance_name': object,
            'method': object,
            'not_fixed_by_versions': List[str],
            'proxy': str,
            'referrer': object,
            'rule_id': str,
            'simplified_user_agent': object,
            'smart_list': str,
            'source': object,
            'status_code': object,
            'target': object,
            'user_agent': object,
            'user_agent_type': object
        }

        self.attribute_map = {
            'created_at': 'createdAt',
            'fixed': 'fixed',
            'fixed_by_versions': 'fixedByVersions',
            'from_smart_list': 'fromSmartList',
            'id': 'id',
            'instance_name': 'instanceName',
            'method': 'method',
            'not_fixed_by_versions': 'notFixedByVersions',
            'proxy': 'proxy',
            'referrer': 'referrer',
            'rule_id': 'ruleId',
            'simplified_user_agent': 'simplifiedUserAgent',
            'smart_list': 'smartList',
            'source': 'source',
            'status_code': 'statusCode',
            'target': 'target',
            'user_agent': 'userAgent',
            'user_agent_type': 'userAgentType'
        }

        self._created_at = created_at
        self._fixed = fixed
        self._fixed_by_versions = fixed_by_versions
        self._from_smart_list = from_smart_list
        self._id = id
        self._instance_name = instance_name
        self._method = method
        self._not_fixed_by_versions = not_fixed_by_versions
        self._proxy = proxy
        self._referrer = referrer
        self._rule_id = rule_id
        self._simplified_user_agent = simplified_user_agent
        self._smart_list = smart_list
        self._source = source
        self._status_code = status_code
        self._target = target
        self._user_agent = user_agent
        self._user_agent_type = user_agent_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LogRead':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Log-Read of this LogRead.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def created_at(self):
        """Gets the created_at of this LogRead.


        :return: The created_at of this LogRead.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this LogRead.


        :param created_at: The created_at of this LogRead.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def fixed(self):
        """Gets the fixed of this LogRead.


        :return: The fixed of this LogRead.
        :rtype: bool
        """
        return self._fixed

    @fixed.setter
    def fixed(self, fixed):
        """Sets the fixed of this LogRead.


        :param fixed: The fixed of this LogRead.
        :type fixed: bool
        """

        self._fixed = fixed

    @property
    def fixed_by_versions(self):
        """Gets the fixed_by_versions of this LogRead.


        :return: The fixed_by_versions of this LogRead.
        :rtype: List[str]
        """
        return self._fixed_by_versions

    @fixed_by_versions.setter
    def fixed_by_versions(self, fixed_by_versions):
        """Sets the fixed_by_versions of this LogRead.


        :param fixed_by_versions: The fixed_by_versions of this LogRead.
        :type fixed_by_versions: List[str]
        """

        self._fixed_by_versions = fixed_by_versions

    @property
    def from_smart_list(self):
        """Gets the from_smart_list of this LogRead.


        :return: The from_smart_list of this LogRead.
        :rtype: bool
        """
        return self._from_smart_list

    @from_smart_list.setter
    def from_smart_list(self, from_smart_list):
        """Sets the from_smart_list of this LogRead.


        :param from_smart_list: The from_smart_list of this LogRead.
        :type from_smart_list: bool
        """

        self._from_smart_list = from_smart_list

    @property
    def id(self):
        """Gets the id of this LogRead.


        :return: The id of this LogRead.
        :rtype: object
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this LogRead.


        :param id: The id of this LogRead.
        :type id: object
        """

        self._id = id

    @property
    def instance_name(self):
        """Gets the instance_name of this LogRead.


        :return: The instance_name of this LogRead.
        :rtype: object
        """
        return self._instance_name

    @instance_name.setter
    def instance_name(self, instance_name):
        """Sets the instance_name of this LogRead.


        :param instance_name: The instance_name of this LogRead.
        :type instance_name: object
        """

        self._instance_name = instance_name

    @property
    def method(self):
        """Gets the method of this LogRead.


        :return: The method of this LogRead.
        :rtype: object
        """
        return self._method

    @method.setter
    def method(self, method):
        """Sets the method of this LogRead.


        :param method: The method of this LogRead.
        :type method: object
        """

        self._method = method

    @property
    def not_fixed_by_versions(self):
        """Gets the not_fixed_by_versions of this LogRead.


        :return: The not_fixed_by_versions of this LogRead.
        :rtype: List[str]
        """
        return self._not_fixed_by_versions

    @not_fixed_by_versions.setter
    def not_fixed_by_versions(self, not_fixed_by_versions):
        """Sets the not_fixed_by_versions of this LogRead.


        :param not_fixed_by_versions: The not_fixed_by_versions of this LogRead.
        :type not_fixed_by_versions: List[str]
        """

        self._not_fixed_by_versions = not_fixed_by_versions

    @property
    def proxy(self):
        """Gets the proxy of this LogRead.


        :return: The proxy of this LogRead.
        :rtype: str
        """
        return self._proxy

    @proxy.setter
    def proxy(self, proxy):
        """Sets the proxy of this LogRead.


        :param proxy: The proxy of this LogRead.
        :type proxy: str
        """

        self._proxy = proxy

    @property
    def referrer(self):
        """Gets the referrer of this LogRead.


        :return: The referrer of this LogRead.
        :rtype: object
        """
        return self._referrer

    @referrer.setter
    def referrer(self, referrer):
        """Sets the referrer of this LogRead.


        :param referrer: The referrer of this LogRead.
        :type referrer: object
        """

        self._referrer = referrer

    @property
    def rule_id(self):
        """Gets the rule_id of this LogRead.


        :return: The rule_id of this LogRead.
        :rtype: str
        """
        return self._rule_id

    @rule_id.setter
    def rule_id(self, rule_id):
        """Sets the rule_id of this LogRead.


        :param rule_id: The rule_id of this LogRead.
        :type rule_id: str
        """

        self._rule_id = rule_id

    @property
    def simplified_user_agent(self):
        """Gets the simplified_user_agent of this LogRead.


        :return: The simplified_user_agent of this LogRead.
        :rtype: object
        """
        return self._simplified_user_agent

    @simplified_user_agent.setter
    def simplified_user_agent(self, simplified_user_agent):
        """Sets the simplified_user_agent of this LogRead.


        :param simplified_user_agent: The simplified_user_agent of this LogRead.
        :type simplified_user_agent: object
        """

        self._simplified_user_agent = simplified_user_agent

    @property
    def smart_list(self):
        """Gets the smart_list of this LogRead.


        :return: The smart_list of this LogRead.
        :rtype: str
        """
        return self._smart_list

    @smart_list.setter
    def smart_list(self, smart_list):
        """Sets the smart_list of this LogRead.


        :param smart_list: The smart_list of this LogRead.
        :type smart_list: str
        """

        self._smart_list = smart_list

    @property
    def source(self):
        """Gets the source of this LogRead.


        :return: The source of this LogRead.
        :rtype: object
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this LogRead.


        :param source: The source of this LogRead.
        :type source: object
        """

        self._source = source

    @property
    def status_code(self):
        """Gets the status_code of this LogRead.


        :return: The status_code of this LogRead.
        :rtype: object
        """
        return self._status_code

    @status_code.setter
    def status_code(self, status_code):
        """Sets the status_code of this LogRead.


        :param status_code: The status_code of this LogRead.
        :type status_code: object
        """

        self._status_code = status_code

    @property
    def target(self):
        """Gets the target of this LogRead.


        :return: The target of this LogRead.
        :rtype: object
        """
        return self._target

    @target.setter
    def target(self, target):
        """Sets the target of this LogRead.


        :param target: The target of this LogRead.
        :type target: object
        """

        self._target = target

    @property
    def user_agent(self):
        """Gets the user_agent of this LogRead.


        :return: The user_agent of this LogRead.
        :rtype: object
        """
        return self._user_agent

    @user_agent.setter
    def user_agent(self, user_agent):
        """Sets the user_agent of this LogRead.


        :param user_agent: The user_agent of this LogRead.
        :type user_agent: object
        """

        self._user_agent = user_agent

    @property
    def user_agent_type(self):
        """Gets the user_agent_type of this LogRead.


        :return: The user_agent_type of this LogRead.
        :rtype: object
        """
        return self._user_agent_type

    @user_agent_type.setter
    def user_agent_type(self, user_agent_type):
        """Sets the user_agent_type of this LogRead.


        :param user_agent_type: The user_agent_type of this LogRead.
        :type user_agent_type: object
        """

        self._user_agent_type = user_agent_type
