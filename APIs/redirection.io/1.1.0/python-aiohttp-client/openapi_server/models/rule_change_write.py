# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.marker_write import MarkerWrite
from openapi_server import util


class RuleChangeWrite(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, action: str=None, actions: List[str]=None, examples: List[str]=None, formatted_source: str=None, markers: List[MarkerWrite]=None, match_on_response_status: int=None, rank: int=None, rule_id: str=None, source: str=None):
        """RuleChangeWrite - a model defined in OpenAPI

        :param action: The action of this RuleChangeWrite.
        :param actions: The actions of this RuleChangeWrite.
        :param examples: The examples of this RuleChangeWrite.
        :param formatted_source: The formatted_source of this RuleChangeWrite.
        :param markers: The markers of this RuleChangeWrite.
        :param match_on_response_status: The match_on_response_status of this RuleChangeWrite.
        :param rank: The rank of this RuleChangeWrite.
        :param rule_id: The rule_id of this RuleChangeWrite.
        :param source: The source of this RuleChangeWrite.
        """
        self.openapi_types = {
            'action': str,
            'actions': List[str],
            'examples': List[str],
            'formatted_source': str,
            'markers': List[MarkerWrite],
            'match_on_response_status': int,
            'rank': int,
            'rule_id': str,
            'source': str
        }

        self.attribute_map = {
            'action': 'action',
            'actions': 'actions',
            'examples': 'examples',
            'formatted_source': 'formattedSource',
            'markers': 'markers',
            'match_on_response_status': 'matchOnResponseStatus',
            'rank': 'rank',
            'rule_id': 'ruleId',
            'source': 'source'
        }

        self._action = action
        self._actions = actions
        self._examples = examples
        self._formatted_source = formatted_source
        self._markers = markers
        self._match_on_response_status = match_on_response_status
        self._rank = rank
        self._rule_id = rule_id
        self._source = source

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RuleChangeWrite':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RuleChange-Write of this RuleChangeWrite.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def action(self):
        """Gets the action of this RuleChangeWrite.


        :return: The action of this RuleChangeWrite.
        :rtype: str
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this RuleChangeWrite.


        :param action: The action of this RuleChangeWrite.
        :type action: str
        """
        if action is None:
            raise ValueError("Invalid value for `action`, must not be `None`")

        self._action = action

    @property
    def actions(self):
        """Gets the actions of this RuleChangeWrite.


        :return: The actions of this RuleChangeWrite.
        :rtype: List[str]
        """
        return self._actions

    @actions.setter
    def actions(self, actions):
        """Sets the actions of this RuleChangeWrite.


        :param actions: The actions of this RuleChangeWrite.
        :type actions: List[str]
        """

        self._actions = actions

    @property
    def examples(self):
        """Gets the examples of this RuleChangeWrite.


        :return: The examples of this RuleChangeWrite.
        :rtype: List[str]
        """
        return self._examples

    @examples.setter
    def examples(self, examples):
        """Sets the examples of this RuleChangeWrite.


        :param examples: The examples of this RuleChangeWrite.
        :type examples: List[str]
        """

        self._examples = examples

    @property
    def formatted_source(self):
        """Gets the formatted_source of this RuleChangeWrite.


        :return: The formatted_source of this RuleChangeWrite.
        :rtype: str
        """
        return self._formatted_source

    @formatted_source.setter
    def formatted_source(self, formatted_source):
        """Sets the formatted_source of this RuleChangeWrite.


        :param formatted_source: The formatted_source of this RuleChangeWrite.
        :type formatted_source: str
        """

        self._formatted_source = formatted_source

    @property
    def markers(self):
        """Gets the markers of this RuleChangeWrite.


        :return: The markers of this RuleChangeWrite.
        :rtype: List[MarkerWrite]
        """
        return self._markers

    @markers.setter
    def markers(self, markers):
        """Sets the markers of this RuleChangeWrite.


        :param markers: The markers of this RuleChangeWrite.
        :type markers: List[MarkerWrite]
        """

        self._markers = markers

    @property
    def match_on_response_status(self):
        """Gets the match_on_response_status of this RuleChangeWrite.


        :return: The match_on_response_status of this RuleChangeWrite.
        :rtype: int
        """
        return self._match_on_response_status

    @match_on_response_status.setter
    def match_on_response_status(self, match_on_response_status):
        """Sets the match_on_response_status of this RuleChangeWrite.


        :param match_on_response_status: The match_on_response_status of this RuleChangeWrite.
        :type match_on_response_status: int
        """

        self._match_on_response_status = match_on_response_status

    @property
    def rank(self):
        """Gets the rank of this RuleChangeWrite.


        :return: The rank of this RuleChangeWrite.
        :rtype: int
        """
        return self._rank

    @rank.setter
    def rank(self, rank):
        """Sets the rank of this RuleChangeWrite.


        :param rank: The rank of this RuleChangeWrite.
        :type rank: int
        """
        if rank is None:
            raise ValueError("Invalid value for `rank`, must not be `None`")

        self._rank = rank

    @property
    def rule_id(self):
        """Gets the rule_id of this RuleChangeWrite.


        :return: The rule_id of this RuleChangeWrite.
        :rtype: str
        """
        return self._rule_id

    @rule_id.setter
    def rule_id(self, rule_id):
        """Sets the rule_id of this RuleChangeWrite.


        :param rule_id: The rule_id of this RuleChangeWrite.
        :type rule_id: str
        """

        self._rule_id = rule_id

    @property
    def source(self):
        """Gets the source of this RuleChangeWrite.


        :return: The source of this RuleChangeWrite.
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this RuleChangeWrite.


        :param source: The source of this RuleChangeWrite.
        :type source: str
        """
        if source is None:
            raise ValueError("Invalid value for `source`, must not be `None`")

        self._source = source
