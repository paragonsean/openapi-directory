# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ProjectWrite(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ignore_project_types: List[str]=None, name: str=None, onboarding_completed_demos: List[str]=None):
        """ProjectWrite - a model defined in OpenAPI

        :param ignore_project_types: The ignore_project_types of this ProjectWrite.
        :param name: The name of this ProjectWrite.
        :param onboarding_completed_demos: The onboarding_completed_demos of this ProjectWrite.
        """
        self.openapi_types = {
            'ignore_project_types': List[str],
            'name': str,
            'onboarding_completed_demos': List[str]
        }

        self.attribute_map = {
            'ignore_project_types': 'ignoreProjectTypes',
            'name': 'name',
            'onboarding_completed_demos': 'onboardingCompletedDemos'
        }

        self._ignore_project_types = ignore_project_types
        self._name = name
        self._onboarding_completed_demos = onboarding_completed_demos

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ProjectWrite':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Project-Write of this ProjectWrite.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ignore_project_types(self):
        """Gets the ignore_project_types of this ProjectWrite.


        :return: The ignore_project_types of this ProjectWrite.
        :rtype: List[str]
        """
        return self._ignore_project_types

    @ignore_project_types.setter
    def ignore_project_types(self, ignore_project_types):
        """Sets the ignore_project_types of this ProjectWrite.


        :param ignore_project_types: The ignore_project_types of this ProjectWrite.
        :type ignore_project_types: List[str]
        """

        self._ignore_project_types = ignore_project_types

    @property
    def name(self):
        """Gets the name of this ProjectWrite.


        :return: The name of this ProjectWrite.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ProjectWrite.


        :param name: The name of this ProjectWrite.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def onboarding_completed_demos(self):
        """Gets the onboarding_completed_demos of this ProjectWrite.


        :return: The onboarding_completed_demos of this ProjectWrite.
        :rtype: List[str]
        """
        return self._onboarding_completed_demos

    @onboarding_completed_demos.setter
    def onboarding_completed_demos(self, onboarding_completed_demos):
        """Sets the onboarding_completed_demos of this ProjectWrite.


        :param onboarding_completed_demos: The onboarding_completed_demos of this ProjectWrite.
        :type onboarding_completed_demos: List[str]
        """

        self._onboarding_completed_demos = onboarding_completed_demos
