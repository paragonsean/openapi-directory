# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CrawlWrite(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, concurrency: int=None, first_url: object=None, headers: List[str]=None, http_basic_password: object=None, http_basic_user: object=None, max_depth: int=None, max_duration: int=None, max_urls: int=None, other_domains: List[str]=None, project: str=None, ssl_checking_disabled: bool=None, subdomain_included: bool=None, user_agent: object=None):
        """CrawlWrite - a model defined in OpenAPI

        :param concurrency: The concurrency of this CrawlWrite.
        :param first_url: The first_url of this CrawlWrite.
        :param headers: The headers of this CrawlWrite.
        :param http_basic_password: The http_basic_password of this CrawlWrite.
        :param http_basic_user: The http_basic_user of this CrawlWrite.
        :param max_depth: The max_depth of this CrawlWrite.
        :param max_duration: The max_duration of this CrawlWrite.
        :param max_urls: The max_urls of this CrawlWrite.
        :param other_domains: The other_domains of this CrawlWrite.
        :param project: The project of this CrawlWrite.
        :param ssl_checking_disabled: The ssl_checking_disabled of this CrawlWrite.
        :param subdomain_included: The subdomain_included of this CrawlWrite.
        :param user_agent: The user_agent of this CrawlWrite.
        """
        self.openapi_types = {
            'concurrency': int,
            'first_url': object,
            'headers': List[str],
            'http_basic_password': object,
            'http_basic_user': object,
            'max_depth': int,
            'max_duration': int,
            'max_urls': int,
            'other_domains': List[str],
            'project': str,
            'ssl_checking_disabled': bool,
            'subdomain_included': bool,
            'user_agent': object
        }

        self.attribute_map = {
            'concurrency': 'concurrency',
            'first_url': 'firstUrl',
            'headers': 'headers',
            'http_basic_password': 'httpBasicPassword',
            'http_basic_user': 'httpBasicUser',
            'max_depth': 'maxDepth',
            'max_duration': 'maxDuration',
            'max_urls': 'maxUrls',
            'other_domains': 'otherDomains',
            'project': 'project',
            'ssl_checking_disabled': 'sslCheckingDisabled',
            'subdomain_included': 'subdomainIncluded',
            'user_agent': 'userAgent'
        }

        self._concurrency = concurrency
        self._first_url = first_url
        self._headers = headers
        self._http_basic_password = http_basic_password
        self._http_basic_user = http_basic_user
        self._max_depth = max_depth
        self._max_duration = max_duration
        self._max_urls = max_urls
        self._other_domains = other_domains
        self._project = project
        self._ssl_checking_disabled = ssl_checking_disabled
        self._subdomain_included = subdomain_included
        self._user_agent = user_agent

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CrawlWrite':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Crawl-Write of this CrawlWrite.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def concurrency(self):
        """Gets the concurrency of this CrawlWrite.


        :return: The concurrency of this CrawlWrite.
        :rtype: int
        """
        return self._concurrency

    @concurrency.setter
    def concurrency(self, concurrency):
        """Sets the concurrency of this CrawlWrite.


        :param concurrency: The concurrency of this CrawlWrite.
        :type concurrency: int
        """
        if concurrency is None:
            raise ValueError("Invalid value for `concurrency`, must not be `None`")

        self._concurrency = concurrency

    @property
    def first_url(self):
        """Gets the first_url of this CrawlWrite.


        :return: The first_url of this CrawlWrite.
        :rtype: object
        """
        return self._first_url

    @first_url.setter
    def first_url(self, first_url):
        """Sets the first_url of this CrawlWrite.


        :param first_url: The first_url of this CrawlWrite.
        :type first_url: object
        """
        if first_url is None:
            raise ValueError("Invalid value for `first_url`, must not be `None`")

        self._first_url = first_url

    @property
    def headers(self):
        """Gets the headers of this CrawlWrite.


        :return: The headers of this CrawlWrite.
        :rtype: List[str]
        """
        return self._headers

    @headers.setter
    def headers(self, headers):
        """Sets the headers of this CrawlWrite.


        :param headers: The headers of this CrawlWrite.
        :type headers: List[str]
        """

        self._headers = headers

    @property
    def http_basic_password(self):
        """Gets the http_basic_password of this CrawlWrite.


        :return: The http_basic_password of this CrawlWrite.
        :rtype: object
        """
        return self._http_basic_password

    @http_basic_password.setter
    def http_basic_password(self, http_basic_password):
        """Sets the http_basic_password of this CrawlWrite.


        :param http_basic_password: The http_basic_password of this CrawlWrite.
        :type http_basic_password: object
        """

        self._http_basic_password = http_basic_password

    @property
    def http_basic_user(self):
        """Gets the http_basic_user of this CrawlWrite.


        :return: The http_basic_user of this CrawlWrite.
        :rtype: object
        """
        return self._http_basic_user

    @http_basic_user.setter
    def http_basic_user(self, http_basic_user):
        """Sets the http_basic_user of this CrawlWrite.


        :param http_basic_user: The http_basic_user of this CrawlWrite.
        :type http_basic_user: object
        """

        self._http_basic_user = http_basic_user

    @property
    def max_depth(self):
        """Gets the max_depth of this CrawlWrite.


        :return: The max_depth of this CrawlWrite.
        :rtype: int
        """
        return self._max_depth

    @max_depth.setter
    def max_depth(self, max_depth):
        """Sets the max_depth of this CrawlWrite.


        :param max_depth: The max_depth of this CrawlWrite.
        :type max_depth: int
        """
        if max_depth is None:
            raise ValueError("Invalid value for `max_depth`, must not be `None`")

        self._max_depth = max_depth

    @property
    def max_duration(self):
        """Gets the max_duration of this CrawlWrite.


        :return: The max_duration of this CrawlWrite.
        :rtype: int
        """
        return self._max_duration

    @max_duration.setter
    def max_duration(self, max_duration):
        """Sets the max_duration of this CrawlWrite.


        :param max_duration: The max_duration of this CrawlWrite.
        :type max_duration: int
        """
        if max_duration is None:
            raise ValueError("Invalid value for `max_duration`, must not be `None`")

        self._max_duration = max_duration

    @property
    def max_urls(self):
        """Gets the max_urls of this CrawlWrite.


        :return: The max_urls of this CrawlWrite.
        :rtype: int
        """
        return self._max_urls

    @max_urls.setter
    def max_urls(self, max_urls):
        """Sets the max_urls of this CrawlWrite.


        :param max_urls: The max_urls of this CrawlWrite.
        :type max_urls: int
        """
        if max_urls is None:
            raise ValueError("Invalid value for `max_urls`, must not be `None`")

        self._max_urls = max_urls

    @property
    def other_domains(self):
        """Gets the other_domains of this CrawlWrite.


        :return: The other_domains of this CrawlWrite.
        :rtype: List[str]
        """
        return self._other_domains

    @other_domains.setter
    def other_domains(self, other_domains):
        """Sets the other_domains of this CrawlWrite.


        :param other_domains: The other_domains of this CrawlWrite.
        :type other_domains: List[str]
        """

        self._other_domains = other_domains

    @property
    def project(self):
        """Gets the project of this CrawlWrite.


        :return: The project of this CrawlWrite.
        :rtype: str
        """
        return self._project

    @project.setter
    def project(self, project):
        """Sets the project of this CrawlWrite.


        :param project: The project of this CrawlWrite.
        :type project: str
        """
        if project is None:
            raise ValueError("Invalid value for `project`, must not be `None`")

        self._project = project

    @property
    def ssl_checking_disabled(self):
        """Gets the ssl_checking_disabled of this CrawlWrite.


        :return: The ssl_checking_disabled of this CrawlWrite.
        :rtype: bool
        """
        return self._ssl_checking_disabled

    @ssl_checking_disabled.setter
    def ssl_checking_disabled(self, ssl_checking_disabled):
        """Sets the ssl_checking_disabled of this CrawlWrite.


        :param ssl_checking_disabled: The ssl_checking_disabled of this CrawlWrite.
        :type ssl_checking_disabled: bool
        """
        if ssl_checking_disabled is None:
            raise ValueError("Invalid value for `ssl_checking_disabled`, must not be `None`")

        self._ssl_checking_disabled = ssl_checking_disabled

    @property
    def subdomain_included(self):
        """Gets the subdomain_included of this CrawlWrite.


        :return: The subdomain_included of this CrawlWrite.
        :rtype: bool
        """
        return self._subdomain_included

    @subdomain_included.setter
    def subdomain_included(self, subdomain_included):
        """Sets the subdomain_included of this CrawlWrite.


        :param subdomain_included: The subdomain_included of this CrawlWrite.
        :type subdomain_included: bool
        """
        if subdomain_included is None:
            raise ValueError("Invalid value for `subdomain_included`, must not be `None`")

        self._subdomain_included = subdomain_included

    @property
    def user_agent(self):
        """Gets the user_agent of this CrawlWrite.


        :return: The user_agent of this CrawlWrite.
        :rtype: object
        """
        return self._user_agent

    @user_agent.setter
    def user_agent(self, user_agent):
        """Sets the user_agent of this CrawlWrite.


        :param user_agent: The user_agent of this CrawlWrite.
        :type user_agent: object
        """

        self._user_agent = user_agent
