# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.organization_list import OrganizationList
from openapi_server import util


class ProjectList(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, name: str=None, organization: OrganizationList=None, slug: str=None, token: str=None):
        """ProjectList - a model defined in OpenAPI

        :param id: The id of this ProjectList.
        :param name: The name of this ProjectList.
        :param organization: The organization of this ProjectList.
        :param slug: The slug of this ProjectList.
        :param token: The token of this ProjectList.
        """
        self.openapi_types = {
            'id': str,
            'name': str,
            'organization': OrganizationList,
            'slug': str,
            'token': str
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'organization': 'organization',
            'slug': 'slug',
            'token': 'token'
        }

        self._id = id
        self._name = name
        self._organization = organization
        self._slug = slug
        self._token = token

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ProjectList':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Project-List of this ProjectList.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this ProjectList.


        :return: The id of this ProjectList.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ProjectList.


        :param id: The id of this ProjectList.
        :type id: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this ProjectList.


        :return: The name of this ProjectList.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ProjectList.


        :param name: The name of this ProjectList.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def organization(self):
        """Gets the organization of this ProjectList.


        :return: The organization of this ProjectList.
        :rtype: OrganizationList
        """
        return self._organization

    @organization.setter
    def organization(self, organization):
        """Sets the organization of this ProjectList.


        :param organization: The organization of this ProjectList.
        :type organization: OrganizationList
        """

        self._organization = organization

    @property
    def slug(self):
        """Gets the slug of this ProjectList.


        :return: The slug of this ProjectList.
        :rtype: str
        """
        return self._slug

    @slug.setter
    def slug(self, slug):
        """Sets the slug of this ProjectList.


        :param slug: The slug of this ProjectList.
        :type slug: str
        """

        self._slug = slug

    @property
    def token(self):
        """Gets the token of this ProjectList.


        :return: The token of this ProjectList.
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token):
        """Sets the token of this ProjectList.


        :param token: The token of this ProjectList.
        :type token: str
        """

        self._token = token
