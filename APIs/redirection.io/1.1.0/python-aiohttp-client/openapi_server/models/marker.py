# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Marker(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, maximum_occurrence: int=None, minimum_occurrence: int=None, name: str=None, options: List[str]=None, regex: str=None, transformers: List[str]=None, type: str=None):
        """Marker - a model defined in OpenAPI

        :param id: The id of this Marker.
        :param maximum_occurrence: The maximum_occurrence of this Marker.
        :param minimum_occurrence: The minimum_occurrence of this Marker.
        :param name: The name of this Marker.
        :param options: The options of this Marker.
        :param regex: The regex of this Marker.
        :param transformers: The transformers of this Marker.
        :param type: The type of this Marker.
        """
        self.openapi_types = {
            'id': str,
            'maximum_occurrence': int,
            'minimum_occurrence': int,
            'name': str,
            'options': List[str],
            'regex': str,
            'transformers': List[str],
            'type': str
        }

        self.attribute_map = {
            'id': 'id',
            'maximum_occurrence': 'maximumOccurrence',
            'minimum_occurrence': 'minimumOccurrence',
            'name': 'name',
            'options': 'options',
            'regex': 'regex',
            'transformers': 'transformers',
            'type': 'type'
        }

        self._id = id
        self._maximum_occurrence = maximum_occurrence
        self._minimum_occurrence = minimum_occurrence
        self._name = name
        self._options = options
        self._regex = regex
        self._transformers = transformers
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Marker':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Marker of this Marker.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this Marker.


        :return: The id of this Marker.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Marker.


        :param id: The id of this Marker.
        :type id: str
        """

        self._id = id

    @property
    def maximum_occurrence(self):
        """Gets the maximum_occurrence of this Marker.


        :return: The maximum_occurrence of this Marker.
        :rtype: int
        """
        return self._maximum_occurrence

    @maximum_occurrence.setter
    def maximum_occurrence(self, maximum_occurrence):
        """Sets the maximum_occurrence of this Marker.


        :param maximum_occurrence: The maximum_occurrence of this Marker.
        :type maximum_occurrence: int
        """

        self._maximum_occurrence = maximum_occurrence

    @property
    def minimum_occurrence(self):
        """Gets the minimum_occurrence of this Marker.


        :return: The minimum_occurrence of this Marker.
        :rtype: int
        """
        return self._minimum_occurrence

    @minimum_occurrence.setter
    def minimum_occurrence(self, minimum_occurrence):
        """Sets the minimum_occurrence of this Marker.


        :param minimum_occurrence: The minimum_occurrence of this Marker.
        :type minimum_occurrence: int
        """

        self._minimum_occurrence = minimum_occurrence

    @property
    def name(self):
        """Gets the name of this Marker.


        :return: The name of this Marker.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Marker.


        :param name: The name of this Marker.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def options(self):
        """Gets the options of this Marker.


        :return: The options of this Marker.
        :rtype: List[str]
        """
        return self._options

    @options.setter
    def options(self, options):
        """Sets the options of this Marker.


        :param options: The options of this Marker.
        :type options: List[str]
        """

        self._options = options

    @property
    def regex(self):
        """Gets the regex of this Marker.


        :return: The regex of this Marker.
        :rtype: str
        """
        return self._regex

    @regex.setter
    def regex(self, regex):
        """Sets the regex of this Marker.


        :param regex: The regex of this Marker.
        :type regex: str
        """

        self._regex = regex

    @property
    def transformers(self):
        """Gets the transformers of this Marker.


        :return: The transformers of this Marker.
        :rtype: List[str]
        """
        return self._transformers

    @transformers.setter
    def transformers(self, transformers):
        """Sets the transformers of this Marker.


        :param transformers: The transformers of this Marker.
        :type transformers: List[str]
        """

        self._transformers = transformers

    @property
    def type(self):
        """Gets the type of this Marker.


        :return: The type of this Marker.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Marker.


        :param type: The type of this Marker.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type
