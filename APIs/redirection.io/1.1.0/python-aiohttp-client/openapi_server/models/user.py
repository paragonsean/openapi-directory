# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.organization import Organization
from openapi_server.models.user_organization import UserOrganization
from openapi_server import util


class User(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, current_password: object=None, default_organization: Organization=None, email: str=None, id: str=None, name: str=None, new_email: str=None, new_email_token: str=None, new_email_token_expired_at: datetime=None, password: str=None, plain_password: str=None, plain_password_repeat: object=None, projects_flattened: List[str]=None, super_admin: bool=None, updated_at: datetime=None, user_organizations: List[UserOrganization]=None, user_projects: List[str]=None):
        """User - a model defined in OpenAPI

        :param current_password: The current_password of this User.
        :param default_organization: The default_organization of this User.
        :param email: The email of this User.
        :param id: The id of this User.
        :param name: The name of this User.
        :param new_email: The new_email of this User.
        :param new_email_token: The new_email_token of this User.
        :param new_email_token_expired_at: The new_email_token_expired_at of this User.
        :param password: The password of this User.
        :param plain_password: The plain_password of this User.
        :param plain_password_repeat: The plain_password_repeat of this User.
        :param projects_flattened: The projects_flattened of this User.
        :param super_admin: The super_admin of this User.
        :param updated_at: The updated_at of this User.
        :param user_organizations: The user_organizations of this User.
        :param user_projects: The user_projects of this User.
        """
        self.openapi_types = {
            'current_password': object,
            'default_organization': Organization,
            'email': str,
            'id': str,
            'name': str,
            'new_email': str,
            'new_email_token': str,
            'new_email_token_expired_at': datetime,
            'password': str,
            'plain_password': str,
            'plain_password_repeat': object,
            'projects_flattened': List[str],
            'super_admin': bool,
            'updated_at': datetime,
            'user_organizations': List[UserOrganization],
            'user_projects': List[str]
        }

        self.attribute_map = {
            'current_password': 'currentPassword',
            'default_organization': 'defaultOrganization',
            'email': 'email',
            'id': 'id',
            'name': 'name',
            'new_email': 'newEmail',
            'new_email_token': 'newEmailToken',
            'new_email_token_expired_at': 'newEmailTokenExpiredAt',
            'password': 'password',
            'plain_password': 'plainPassword',
            'plain_password_repeat': 'plainPasswordRepeat',
            'projects_flattened': 'projectsFlattened',
            'super_admin': 'superAdmin',
            'updated_at': 'updatedAt',
            'user_organizations': 'userOrganizations',
            'user_projects': 'userProjects'
        }

        self._current_password = current_password
        self._default_organization = default_organization
        self._email = email
        self._id = id
        self._name = name
        self._new_email = new_email
        self._new_email_token = new_email_token
        self._new_email_token_expired_at = new_email_token_expired_at
        self._password = password
        self._plain_password = plain_password
        self._plain_password_repeat = plain_password_repeat
        self._projects_flattened = projects_flattened
        self._super_admin = super_admin
        self._updated_at = updated_at
        self._user_organizations = user_organizations
        self._user_projects = user_projects

    @classmethod
    def from_dict(cls, dikt: dict) -> 'User':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The User of this User.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def current_password(self):
        """Gets the current_password of this User.


        :return: The current_password of this User.
        :rtype: object
        """
        return self._current_password

    @current_password.setter
    def current_password(self, current_password):
        """Sets the current_password of this User.


        :param current_password: The current_password of this User.
        :type current_password: object
        """

        self._current_password = current_password

    @property
    def default_organization(self):
        """Gets the default_organization of this User.


        :return: The default_organization of this User.
        :rtype: Organization
        """
        return self._default_organization

    @default_organization.setter
    def default_organization(self, default_organization):
        """Sets the default_organization of this User.


        :param default_organization: The default_organization of this User.
        :type default_organization: Organization
        """

        self._default_organization = default_organization

    @property
    def email(self):
        """Gets the email of this User.


        :return: The email of this User.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this User.


        :param email: The email of this User.
        :type email: str
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")

        self._email = email

    @property
    def id(self):
        """Gets the id of this User.


        :return: The id of this User.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this User.


        :param id: The id of this User.
        :type id: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this User.


        :return: The name of this User.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this User.


        :param name: The name of this User.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def new_email(self):
        """Gets the new_email of this User.


        :return: The new_email of this User.
        :rtype: str
        """
        return self._new_email

    @new_email.setter
    def new_email(self, new_email):
        """Sets the new_email of this User.


        :param new_email: The new_email of this User.
        :type new_email: str
        """

        self._new_email = new_email

    @property
    def new_email_token(self):
        """Gets the new_email_token of this User.


        :return: The new_email_token of this User.
        :rtype: str
        """
        return self._new_email_token

    @new_email_token.setter
    def new_email_token(self, new_email_token):
        """Sets the new_email_token of this User.


        :param new_email_token: The new_email_token of this User.
        :type new_email_token: str
        """

        self._new_email_token = new_email_token

    @property
    def new_email_token_expired_at(self):
        """Gets the new_email_token_expired_at of this User.


        :return: The new_email_token_expired_at of this User.
        :rtype: datetime
        """
        return self._new_email_token_expired_at

    @new_email_token_expired_at.setter
    def new_email_token_expired_at(self, new_email_token_expired_at):
        """Sets the new_email_token_expired_at of this User.


        :param new_email_token_expired_at: The new_email_token_expired_at of this User.
        :type new_email_token_expired_at: datetime
        """

        self._new_email_token_expired_at = new_email_token_expired_at

    @property
    def password(self):
        """Gets the password of this User.


        :return: The password of this User.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this User.


        :param password: The password of this User.
        :type password: str
        """

        self._password = password

    @property
    def plain_password(self):
        """Gets the plain_password of this User.


        :return: The plain_password of this User.
        :rtype: str
        """
        return self._plain_password

    @plain_password.setter
    def plain_password(self, plain_password):
        """Sets the plain_password of this User.


        :param plain_password: The plain_password of this User.
        :type plain_password: str
        """

        self._plain_password = plain_password

    @property
    def plain_password_repeat(self):
        """Gets the plain_password_repeat of this User.


        :return: The plain_password_repeat of this User.
        :rtype: object
        """
        return self._plain_password_repeat

    @plain_password_repeat.setter
    def plain_password_repeat(self, plain_password_repeat):
        """Sets the plain_password_repeat of this User.


        :param plain_password_repeat: The plain_password_repeat of this User.
        :type plain_password_repeat: object
        """

        self._plain_password_repeat = plain_password_repeat

    @property
    def projects_flattened(self):
        """Gets the projects_flattened of this User.


        :return: The projects_flattened of this User.
        :rtype: List[str]
        """
        return self._projects_flattened

    @projects_flattened.setter
    def projects_flattened(self, projects_flattened):
        """Sets the projects_flattened of this User.


        :param projects_flattened: The projects_flattened of this User.
        :type projects_flattened: List[str]
        """

        self._projects_flattened = projects_flattened

    @property
    def super_admin(self):
        """Gets the super_admin of this User.


        :return: The super_admin of this User.
        :rtype: bool
        """
        return self._super_admin

    @super_admin.setter
    def super_admin(self, super_admin):
        """Sets the super_admin of this User.


        :param super_admin: The super_admin of this User.
        :type super_admin: bool
        """

        self._super_admin = super_admin

    @property
    def updated_at(self):
        """Gets the updated_at of this User.


        :return: The updated_at of this User.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this User.


        :param updated_at: The updated_at of this User.
        :type updated_at: datetime
        """

        self._updated_at = updated_at

    @property
    def user_organizations(self):
        """Gets the user_organizations of this User.


        :return: The user_organizations of this User.
        :rtype: List[UserOrganization]
        """
        return self._user_organizations

    @user_organizations.setter
    def user_organizations(self, user_organizations):
        """Sets the user_organizations of this User.


        :param user_organizations: The user_organizations of this User.
        :type user_organizations: List[UserOrganization]
        """

        self._user_organizations = user_organizations

    @property
    def user_projects(self):
        """Gets the user_projects of this User.


        :return: The user_projects of this User.
        :rtype: List[str]
        """
        return self._user_projects

    @user_projects.setter
    def user_projects(self, user_projects):
        """Sets the user_projects of this User.


        :param user_projects: The user_projects of this User.
        :type user_projects: List[str]
        """

        self._user_projects = user_projects
