# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class UserProjectWrite(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, functional_roles: List[str]=None):
        """UserProjectWrite - a model defined in OpenAPI

        :param functional_roles: The functional_roles of this UserProjectWrite.
        """
        self.openapi_types = {
            'functional_roles': List[str]
        }

        self.attribute_map = {
            'functional_roles': 'functionalRoles'
        }

        self._functional_roles = functional_roles

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UserProjectWrite':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UserProject-Write of this UserProjectWrite.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def functional_roles(self):
        """Gets the functional_roles of this UserProjectWrite.


        :return: The functional_roles of this UserProjectWrite.
        :rtype: List[str]
        """
        return self._functional_roles

    @functional_roles.setter
    def functional_roles(self, functional_roles):
        """Sets the functional_roles of this UserProjectWrite.


        :param functional_roles: The functional_roles of this UserProjectWrite.
        :type functional_roles: List[str]
        """
        if functional_roles is None:
            raise ValueError("Invalid value for `functional_roles`, must not be `None`")

        self._functional_roles = functional_roles
