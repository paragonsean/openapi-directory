# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class UserOrganizationCreationWrite(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, functional_roles: List[str]=None, organization: str=None, user: str=None):
        """UserOrganizationCreationWrite - a model defined in OpenAPI

        :param functional_roles: The functional_roles of this UserOrganizationCreationWrite.
        :param organization: The organization of this UserOrganizationCreationWrite.
        :param user: The user of this UserOrganizationCreationWrite.
        """
        self.openapi_types = {
            'functional_roles': List[str],
            'organization': str,
            'user': str
        }

        self.attribute_map = {
            'functional_roles': 'functionalRoles',
            'organization': 'organization',
            'user': 'user'
        }

        self._functional_roles = functional_roles
        self._organization = organization
        self._user = user

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UserOrganizationCreationWrite':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UserOrganization-CreationWrite of this UserOrganizationCreationWrite.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def functional_roles(self):
        """Gets the functional_roles of this UserOrganizationCreationWrite.


        :return: The functional_roles of this UserOrganizationCreationWrite.
        :rtype: List[str]
        """
        return self._functional_roles

    @functional_roles.setter
    def functional_roles(self, functional_roles):
        """Sets the functional_roles of this UserOrganizationCreationWrite.


        :param functional_roles: The functional_roles of this UserOrganizationCreationWrite.
        :type functional_roles: List[str]
        """
        if functional_roles is None:
            raise ValueError("Invalid value for `functional_roles`, must not be `None`")

        self._functional_roles = functional_roles

    @property
    def organization(self):
        """Gets the organization of this UserOrganizationCreationWrite.


        :return: The organization of this UserOrganizationCreationWrite.
        :rtype: str
        """
        return self._organization

    @organization.setter
    def organization(self, organization):
        """Sets the organization of this UserOrganizationCreationWrite.


        :param organization: The organization of this UserOrganizationCreationWrite.
        :type organization: str
        """

        self._organization = organization

    @property
    def user(self):
        """Gets the user of this UserOrganizationCreationWrite.


        :return: The user of this UserOrganizationCreationWrite.
        :rtype: str
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this UserOrganizationCreationWrite.


        :param user: The user of this UserOrganizationCreationWrite.
        :type user: str
        """

        self._user = user
