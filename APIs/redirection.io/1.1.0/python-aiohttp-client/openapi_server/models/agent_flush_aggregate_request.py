# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AgentFlushAggregateRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, instance_name: object=None, instance_time: object=None, logs: object=None):
        """AgentFlushAggregateRequest - a model defined in OpenAPI

        :param instance_name: The instance_name of this AgentFlushAggregateRequest.
        :param instance_time: The instance_time of this AgentFlushAggregateRequest.
        :param logs: The logs of this AgentFlushAggregateRequest.
        """
        self.openapi_types = {
            'instance_name': object,
            'instance_time': object,
            'logs': object
        }

        self.attribute_map = {
            'instance_name': 'instanceName',
            'instance_time': 'instanceTime',
            'logs': 'logs'
        }

        self._instance_name = instance_name
        self._instance_time = instance_time
        self._logs = logs

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AgentFlushAggregateRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AgentFlushAggregateRequest of this AgentFlushAggregateRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def instance_name(self):
        """Gets the instance_name of this AgentFlushAggregateRequest.


        :return: The instance_name of this AgentFlushAggregateRequest.
        :rtype: object
        """
        return self._instance_name

    @instance_name.setter
    def instance_name(self, instance_name):
        """Sets the instance_name of this AgentFlushAggregateRequest.


        :param instance_name: The instance_name of this AgentFlushAggregateRequest.
        :type instance_name: object
        """
        if instance_name is None:
            raise ValueError("Invalid value for `instance_name`, must not be `None`")

        self._instance_name = instance_name

    @property
    def instance_time(self):
        """Gets the instance_time of this AgentFlushAggregateRequest.


        :return: The instance_time of this AgentFlushAggregateRequest.
        :rtype: object
        """
        return self._instance_time

    @instance_time.setter
    def instance_time(self, instance_time):
        """Sets the instance_time of this AgentFlushAggregateRequest.


        :param instance_time: The instance_time of this AgentFlushAggregateRequest.
        :type instance_time: object
        """
        if instance_time is None:
            raise ValueError("Invalid value for `instance_time`, must not be `None`")

        self._instance_time = instance_time

    @property
    def logs(self):
        """Gets the logs of this AgentFlushAggregateRequest.


        :return: The logs of this AgentFlushAggregateRequest.
        :rtype: object
        """
        return self._logs

    @logs.setter
    def logs(self, logs):
        """Sets the logs of this AgentFlushAggregateRequest.


        :param logs: The logs of this AgentFlushAggregateRequest.
        :type logs: object
        """
        if logs is None:
            raise ValueError("Invalid value for `logs`, must not be `None`")

        self._logs = logs
