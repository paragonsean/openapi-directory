# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.user_read import UserRead
from openapi_server import util


class CrawlRead(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, archived: bool=None, author: UserRead=None, created_at: datetime=None, error: str=None, finished_at: datetime=None, first_url: str=None, id: str=None, stats: List[str]=None, trigger: str=None, updated_at: datetime=None):
        """CrawlRead - a model defined in OpenAPI

        :param archived: The archived of this CrawlRead.
        :param author: The author of this CrawlRead.
        :param created_at: The created_at of this CrawlRead.
        :param error: The error of this CrawlRead.
        :param finished_at: The finished_at of this CrawlRead.
        :param first_url: The first_url of this CrawlRead.
        :param id: The id of this CrawlRead.
        :param stats: The stats of this CrawlRead.
        :param trigger: The trigger of this CrawlRead.
        :param updated_at: The updated_at of this CrawlRead.
        """
        self.openapi_types = {
            'archived': bool,
            'author': UserRead,
            'created_at': datetime,
            'error': str,
            'finished_at': datetime,
            'first_url': str,
            'id': str,
            'stats': List[str],
            'trigger': str,
            'updated_at': datetime
        }

        self.attribute_map = {
            'archived': 'archived',
            'author': 'author',
            'created_at': 'createdAt',
            'error': 'error',
            'finished_at': 'finishedAt',
            'first_url': 'firstUrl',
            'id': 'id',
            'stats': 'stats',
            'trigger': 'trigger',
            'updated_at': 'updatedAt'
        }

        self._archived = archived
        self._author = author
        self._created_at = created_at
        self._error = error
        self._finished_at = finished_at
        self._first_url = first_url
        self._id = id
        self._stats = stats
        self._trigger = trigger
        self._updated_at = updated_at

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CrawlRead':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Crawl-Read of this CrawlRead.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def archived(self):
        """Gets the archived of this CrawlRead.


        :return: The archived of this CrawlRead.
        :rtype: bool
        """
        return self._archived

    @archived.setter
    def archived(self, archived):
        """Sets the archived of this CrawlRead.


        :param archived: The archived of this CrawlRead.
        :type archived: bool
        """

        self._archived = archived

    @property
    def author(self):
        """Gets the author of this CrawlRead.


        :return: The author of this CrawlRead.
        :rtype: UserRead
        """
        return self._author

    @author.setter
    def author(self, author):
        """Sets the author of this CrawlRead.


        :param author: The author of this CrawlRead.
        :type author: UserRead
        """

        self._author = author

    @property
    def created_at(self):
        """Gets the created_at of this CrawlRead.


        :return: The created_at of this CrawlRead.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this CrawlRead.


        :param created_at: The created_at of this CrawlRead.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def error(self):
        """Gets the error of this CrawlRead.


        :return: The error of this CrawlRead.
        :rtype: str
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this CrawlRead.


        :param error: The error of this CrawlRead.
        :type error: str
        """

        self._error = error

    @property
    def finished_at(self):
        """Gets the finished_at of this CrawlRead.


        :return: The finished_at of this CrawlRead.
        :rtype: datetime
        """
        return self._finished_at

    @finished_at.setter
    def finished_at(self, finished_at):
        """Sets the finished_at of this CrawlRead.


        :param finished_at: The finished_at of this CrawlRead.
        :type finished_at: datetime
        """

        self._finished_at = finished_at

    @property
    def first_url(self):
        """Gets the first_url of this CrawlRead.


        :return: The first_url of this CrawlRead.
        :rtype: str
        """
        return self._first_url

    @first_url.setter
    def first_url(self, first_url):
        """Sets the first_url of this CrawlRead.


        :param first_url: The first_url of this CrawlRead.
        :type first_url: str
        """

        self._first_url = first_url

    @property
    def id(self):
        """Gets the id of this CrawlRead.


        :return: The id of this CrawlRead.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CrawlRead.


        :param id: The id of this CrawlRead.
        :type id: str
        """

        self._id = id

    @property
    def stats(self):
        """Gets the stats of this CrawlRead.


        :return: The stats of this CrawlRead.
        :rtype: List[str]
        """
        return self._stats

    @stats.setter
    def stats(self, stats):
        """Sets the stats of this CrawlRead.


        :param stats: The stats of this CrawlRead.
        :type stats: List[str]
        """

        self._stats = stats

    @property
    def trigger(self):
        """Gets the trigger of this CrawlRead.


        :return: The trigger of this CrawlRead.
        :rtype: str
        """
        return self._trigger

    @trigger.setter
    def trigger(self, trigger):
        """Sets the trigger of this CrawlRead.


        :param trigger: The trigger of this CrawlRead.
        :type trigger: str
        """

        self._trigger = trigger

    @property
    def updated_at(self):
        """Gets the updated_at of this CrawlRead.


        :return: The updated_at of this CrawlRead.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this CrawlRead.


        :param updated_at: The updated_at of this CrawlRead.
        :type updated_at: datetime
        """

        self._updated_at = updated_at
