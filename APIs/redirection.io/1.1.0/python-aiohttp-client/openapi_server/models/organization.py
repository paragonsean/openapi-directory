# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.project import Project
from openapi_server.models.user_organization import UserOrganization
from openapi_server import util


class Organization(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, created_at: datetime=None, id: str=None, name: str=None, projects: List[Project]=None, slug: str=None, updated_at: datetime=None, user_organizations: List[UserOrganization]=None):
        """Organization - a model defined in OpenAPI

        :param created_at: The created_at of this Organization.
        :param id: The id of this Organization.
        :param name: The name of this Organization.
        :param projects: The projects of this Organization.
        :param slug: The slug of this Organization.
        :param updated_at: The updated_at of this Organization.
        :param user_organizations: The user_organizations of this Organization.
        """
        self.openapi_types = {
            'created_at': datetime,
            'id': str,
            'name': str,
            'projects': List[Project],
            'slug': str,
            'updated_at': datetime,
            'user_organizations': List[UserOrganization]
        }

        self.attribute_map = {
            'created_at': 'createdAt',
            'id': 'id',
            'name': 'name',
            'projects': 'projects',
            'slug': 'slug',
            'updated_at': 'updatedAt',
            'user_organizations': 'userOrganizations'
        }

        self._created_at = created_at
        self._id = id
        self._name = name
        self._projects = projects
        self._slug = slug
        self._updated_at = updated_at
        self._user_organizations = user_organizations

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Organization':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Organization of this Organization.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def created_at(self):
        """Gets the created_at of this Organization.


        :return: The created_at of this Organization.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Organization.


        :param created_at: The created_at of this Organization.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def id(self):
        """Gets the id of this Organization.


        :return: The id of this Organization.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Organization.


        :param id: The id of this Organization.
        :type id: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Organization.


        :return: The name of this Organization.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Organization.


        :param name: The name of this Organization.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def projects(self):
        """Gets the projects of this Organization.


        :return: The projects of this Organization.
        :rtype: List[Project]
        """
        return self._projects

    @projects.setter
    def projects(self, projects):
        """Sets the projects of this Organization.


        :param projects: The projects of this Organization.
        :type projects: List[Project]
        """

        self._projects = projects

    @property
    def slug(self):
        """Gets the slug of this Organization.


        :return: The slug of this Organization.
        :rtype: str
        """
        return self._slug

    @slug.setter
    def slug(self, slug):
        """Sets the slug of this Organization.


        :param slug: The slug of this Organization.
        :type slug: str
        """

        self._slug = slug

    @property
    def updated_at(self):
        """Gets the updated_at of this Organization.


        :return: The updated_at of this Organization.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this Organization.


        :param updated_at: The updated_at of this Organization.
        :type updated_at: datetime
        """

        self._updated_at = updated_at

    @property
    def user_organizations(self):
        """Gets the user_organizations of this Organization.


        :return: The user_organizations of this Organization.
        :rtype: List[UserOrganization]
        """
        return self._user_organizations

    @user_organizations.setter
    def user_organizations(self, user_organizations):
        """Sets the user_organizations of this Organization.


        :param user_organizations: The user_organizations of this Organization.
        :type user_organizations: List[UserOrganization]
        """

        self._user_organizations = user_organizations
