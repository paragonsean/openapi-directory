# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RuleSetVersion(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, created_at: datetime=None, current: bool=None, id: str=None, is_snapshot: bool=None, merged_rules_count: int=None, name: str=None, published_at: datetime=None, working: bool=None):
        """RuleSetVersion - a model defined in OpenAPI

        :param created_at: The created_at of this RuleSetVersion.
        :param current: The current of this RuleSetVersion.
        :param id: The id of this RuleSetVersion.
        :param is_snapshot: The is_snapshot of this RuleSetVersion.
        :param merged_rules_count: The merged_rules_count of this RuleSetVersion.
        :param name: The name of this RuleSetVersion.
        :param published_at: The published_at of this RuleSetVersion.
        :param working: The working of this RuleSetVersion.
        """
        self.openapi_types = {
            'created_at': datetime,
            'current': bool,
            'id': str,
            'is_snapshot': bool,
            'merged_rules_count': int,
            'name': str,
            'published_at': datetime,
            'working': bool
        }

        self.attribute_map = {
            'created_at': 'createdAt',
            'current': 'current',
            'id': 'id',
            'is_snapshot': 'isSnapshot',
            'merged_rules_count': 'mergedRulesCount',
            'name': 'name',
            'published_at': 'publishedAt',
            'working': 'working'
        }

        self._created_at = created_at
        self._current = current
        self._id = id
        self._is_snapshot = is_snapshot
        self._merged_rules_count = merged_rules_count
        self._name = name
        self._published_at = published_at
        self._working = working

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RuleSetVersion':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RuleSetVersion of this RuleSetVersion.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def created_at(self):
        """Gets the created_at of this RuleSetVersion.


        :return: The created_at of this RuleSetVersion.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this RuleSetVersion.


        :param created_at: The created_at of this RuleSetVersion.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def current(self):
        """Gets the current of this RuleSetVersion.


        :return: The current of this RuleSetVersion.
        :rtype: bool
        """
        return self._current

    @current.setter
    def current(self, current):
        """Sets the current of this RuleSetVersion.


        :param current: The current of this RuleSetVersion.
        :type current: bool
        """

        self._current = current

    @property
    def id(self):
        """Gets the id of this RuleSetVersion.


        :return: The id of this RuleSetVersion.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this RuleSetVersion.


        :param id: The id of this RuleSetVersion.
        :type id: str
        """

        self._id = id

    @property
    def is_snapshot(self):
        """Gets the is_snapshot of this RuleSetVersion.


        :return: The is_snapshot of this RuleSetVersion.
        :rtype: bool
        """
        return self._is_snapshot

    @is_snapshot.setter
    def is_snapshot(self, is_snapshot):
        """Sets the is_snapshot of this RuleSetVersion.


        :param is_snapshot: The is_snapshot of this RuleSetVersion.
        :type is_snapshot: bool
        """

        self._is_snapshot = is_snapshot

    @property
    def merged_rules_count(self):
        """Gets the merged_rules_count of this RuleSetVersion.


        :return: The merged_rules_count of this RuleSetVersion.
        :rtype: int
        """
        return self._merged_rules_count

    @merged_rules_count.setter
    def merged_rules_count(self, merged_rules_count):
        """Sets the merged_rules_count of this RuleSetVersion.


        :param merged_rules_count: The merged_rules_count of this RuleSetVersion.
        :type merged_rules_count: int
        """

        self._merged_rules_count = merged_rules_count

    @property
    def name(self):
        """Gets the name of this RuleSetVersion.


        :return: The name of this RuleSetVersion.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this RuleSetVersion.


        :param name: The name of this RuleSetVersion.
        :type name: str
        """

        self._name = name

    @property
    def published_at(self):
        """Gets the published_at of this RuleSetVersion.


        :return: The published_at of this RuleSetVersion.
        :rtype: datetime
        """
        return self._published_at

    @published_at.setter
    def published_at(self, published_at):
        """Sets the published_at of this RuleSetVersion.


        :param published_at: The published_at of this RuleSetVersion.
        :type published_at: datetime
        """

        self._published_at = published_at

    @property
    def working(self):
        """Gets the working of this RuleSetVersion.


        :return: The working of this RuleSetVersion.
        :rtype: bool
        """
        return self._working

    @working.setter
    def working(self, working):
        """Sets the working of this RuleSetVersion.


        :param working: The working of this RuleSetVersion.
        :type working: bool
        """

        self._working = working
