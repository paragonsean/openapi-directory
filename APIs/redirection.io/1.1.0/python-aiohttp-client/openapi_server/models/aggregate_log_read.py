# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AggregateLogRead(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, fixed: bool=None, id: object=None, last_occurrence_at: datetime=None, rule_id: str=None, source: object=None, status_code: int=None, target: object=None, view_count: int=None):
        """AggregateLogRead - a model defined in OpenAPI

        :param fixed: The fixed of this AggregateLogRead.
        :param id: The id of this AggregateLogRead.
        :param last_occurrence_at: The last_occurrence_at of this AggregateLogRead.
        :param rule_id: The rule_id of this AggregateLogRead.
        :param source: The source of this AggregateLogRead.
        :param status_code: The status_code of this AggregateLogRead.
        :param target: The target of this AggregateLogRead.
        :param view_count: The view_count of this AggregateLogRead.
        """
        self.openapi_types = {
            'fixed': bool,
            'id': object,
            'last_occurrence_at': datetime,
            'rule_id': str,
            'source': object,
            'status_code': int,
            'target': object,
            'view_count': int
        }

        self.attribute_map = {
            'fixed': 'fixed',
            'id': 'id',
            'last_occurrence_at': 'lastOccurrenceAt',
            'rule_id': 'ruleId',
            'source': 'source',
            'status_code': 'statusCode',
            'target': 'target',
            'view_count': 'viewCount'
        }

        self._fixed = fixed
        self._id = id
        self._last_occurrence_at = last_occurrence_at
        self._rule_id = rule_id
        self._source = source
        self._status_code = status_code
        self._target = target
        self._view_count = view_count

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AggregateLogRead':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AggregateLog-Read of this AggregateLogRead.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def fixed(self):
        """Gets the fixed of this AggregateLogRead.


        :return: The fixed of this AggregateLogRead.
        :rtype: bool
        """
        return self._fixed

    @fixed.setter
    def fixed(self, fixed):
        """Sets the fixed of this AggregateLogRead.


        :param fixed: The fixed of this AggregateLogRead.
        :type fixed: bool
        """

        self._fixed = fixed

    @property
    def id(self):
        """Gets the id of this AggregateLogRead.


        :return: The id of this AggregateLogRead.
        :rtype: object
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AggregateLogRead.


        :param id: The id of this AggregateLogRead.
        :type id: object
        """

        self._id = id

    @property
    def last_occurrence_at(self):
        """Gets the last_occurrence_at of this AggregateLogRead.


        :return: The last_occurrence_at of this AggregateLogRead.
        :rtype: datetime
        """
        return self._last_occurrence_at

    @last_occurrence_at.setter
    def last_occurrence_at(self, last_occurrence_at):
        """Sets the last_occurrence_at of this AggregateLogRead.


        :param last_occurrence_at: The last_occurrence_at of this AggregateLogRead.
        :type last_occurrence_at: datetime
        """

        self._last_occurrence_at = last_occurrence_at

    @property
    def rule_id(self):
        """Gets the rule_id of this AggregateLogRead.


        :return: The rule_id of this AggregateLogRead.
        :rtype: str
        """
        return self._rule_id

    @rule_id.setter
    def rule_id(self, rule_id):
        """Sets the rule_id of this AggregateLogRead.


        :param rule_id: The rule_id of this AggregateLogRead.
        :type rule_id: str
        """

        self._rule_id = rule_id

    @property
    def source(self):
        """Gets the source of this AggregateLogRead.


        :return: The source of this AggregateLogRead.
        :rtype: object
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this AggregateLogRead.


        :param source: The source of this AggregateLogRead.
        :type source: object
        """

        self._source = source

    @property
    def status_code(self):
        """Gets the status_code of this AggregateLogRead.


        :return: The status_code of this AggregateLogRead.
        :rtype: int
        """
        return self._status_code

    @status_code.setter
    def status_code(self, status_code):
        """Sets the status_code of this AggregateLogRead.


        :param status_code: The status_code of this AggregateLogRead.
        :type status_code: int
        """

        self._status_code = status_code

    @property
    def target(self):
        """Gets the target of this AggregateLogRead.


        :return: The target of this AggregateLogRead.
        :rtype: object
        """
        return self._target

    @target.setter
    def target(self, target):
        """Sets the target of this AggregateLogRead.


        :param target: The target of this AggregateLogRead.
        :type target: object
        """

        self._target = target

    @property
    def view_count(self):
        """Gets the view_count of this AggregateLogRead.


        :return: The view_count of this AggregateLogRead.
        :rtype: int
        """
        return self._view_count

    @view_count.setter
    def view_count(self, view_count):
        """Sets the view_count of this AggregateLogRead.


        :param view_count: The view_count of this AggregateLogRead.
        :type view_count: int
        """

        self._view_count = view_count
