# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.organization_read import OrganizationRead
from openapi_server.models.rule_set_version_read import RuleSetVersionRead
from openapi_server.models.user_project_flattened_read import UserProjectFlattenedRead
from openapi_server.models.user_project_read import UserProjectRead
from openapi_server import util


class ProjectRead(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, complex_rules_count: int=None, complex_rules_updated_at: datetime=None, configuration: List[str]=None, created_at: datetime=None, current_version: RuleSetVersionRead=None, id: str=None, ignore_project_types: List[str]=None, is_publishing: bool=None, name: str=None, onboarding_completed_demos: List[str]=None, organization: OrganizationRead=None, plan: int=None, rules_hash: str=None, slug: str=None, straight_rules_count: int=None, straight_rules_updated_at: datetime=None, token: str=None, updated_at: datetime=None, user_projects: List[UserProjectRead]=None, users_flattened: List[UserProjectFlattenedRead]=None, working_version: RuleSetVersionRead=None):
        """ProjectRead - a model defined in OpenAPI

        :param complex_rules_count: The complex_rules_count of this ProjectRead.
        :param complex_rules_updated_at: The complex_rules_updated_at of this ProjectRead.
        :param configuration: The configuration of this ProjectRead.
        :param created_at: The created_at of this ProjectRead.
        :param current_version: The current_version of this ProjectRead.
        :param id: The id of this ProjectRead.
        :param ignore_project_types: The ignore_project_types of this ProjectRead.
        :param is_publishing: The is_publishing of this ProjectRead.
        :param name: The name of this ProjectRead.
        :param onboarding_completed_demos: The onboarding_completed_demos of this ProjectRead.
        :param organization: The organization of this ProjectRead.
        :param plan: The plan of this ProjectRead.
        :param rules_hash: The rules_hash of this ProjectRead.
        :param slug: The slug of this ProjectRead.
        :param straight_rules_count: The straight_rules_count of this ProjectRead.
        :param straight_rules_updated_at: The straight_rules_updated_at of this ProjectRead.
        :param token: The token of this ProjectRead.
        :param updated_at: The updated_at of this ProjectRead.
        :param user_projects: The user_projects of this ProjectRead.
        :param users_flattened: The users_flattened of this ProjectRead.
        :param working_version: The working_version of this ProjectRead.
        """
        self.openapi_types = {
            'complex_rules_count': int,
            'complex_rules_updated_at': datetime,
            'configuration': List[str],
            'created_at': datetime,
            'current_version': RuleSetVersionRead,
            'id': str,
            'ignore_project_types': List[str],
            'is_publishing': bool,
            'name': str,
            'onboarding_completed_demos': List[str],
            'organization': OrganizationRead,
            'plan': int,
            'rules_hash': str,
            'slug': str,
            'straight_rules_count': int,
            'straight_rules_updated_at': datetime,
            'token': str,
            'updated_at': datetime,
            'user_projects': List[UserProjectRead],
            'users_flattened': List[UserProjectFlattenedRead],
            'working_version': RuleSetVersionRead
        }

        self.attribute_map = {
            'complex_rules_count': 'complexRulesCount',
            'complex_rules_updated_at': 'complexRulesUpdatedAt',
            'configuration': 'configuration',
            'created_at': 'createdAt',
            'current_version': 'currentVersion',
            'id': 'id',
            'ignore_project_types': 'ignoreProjectTypes',
            'is_publishing': 'isPublishing',
            'name': 'name',
            'onboarding_completed_demos': 'onboardingCompletedDemos',
            'organization': 'organization',
            'plan': 'plan',
            'rules_hash': 'rulesHash',
            'slug': 'slug',
            'straight_rules_count': 'straightRulesCount',
            'straight_rules_updated_at': 'straightRulesUpdatedAt',
            'token': 'token',
            'updated_at': 'updatedAt',
            'user_projects': 'userProjects',
            'users_flattened': 'usersFlattened',
            'working_version': 'workingVersion'
        }

        self._complex_rules_count = complex_rules_count
        self._complex_rules_updated_at = complex_rules_updated_at
        self._configuration = configuration
        self._created_at = created_at
        self._current_version = current_version
        self._id = id
        self._ignore_project_types = ignore_project_types
        self._is_publishing = is_publishing
        self._name = name
        self._onboarding_completed_demos = onboarding_completed_demos
        self._organization = organization
        self._plan = plan
        self._rules_hash = rules_hash
        self._slug = slug
        self._straight_rules_count = straight_rules_count
        self._straight_rules_updated_at = straight_rules_updated_at
        self._token = token
        self._updated_at = updated_at
        self._user_projects = user_projects
        self._users_flattened = users_flattened
        self._working_version = working_version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ProjectRead':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Project-Read of this ProjectRead.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def complex_rules_count(self):
        """Gets the complex_rules_count of this ProjectRead.


        :return: The complex_rules_count of this ProjectRead.
        :rtype: int
        """
        return self._complex_rules_count

    @complex_rules_count.setter
    def complex_rules_count(self, complex_rules_count):
        """Sets the complex_rules_count of this ProjectRead.


        :param complex_rules_count: The complex_rules_count of this ProjectRead.
        :type complex_rules_count: int
        """

        self._complex_rules_count = complex_rules_count

    @property
    def complex_rules_updated_at(self):
        """Gets the complex_rules_updated_at of this ProjectRead.


        :return: The complex_rules_updated_at of this ProjectRead.
        :rtype: datetime
        """
        return self._complex_rules_updated_at

    @complex_rules_updated_at.setter
    def complex_rules_updated_at(self, complex_rules_updated_at):
        """Sets the complex_rules_updated_at of this ProjectRead.


        :param complex_rules_updated_at: The complex_rules_updated_at of this ProjectRead.
        :type complex_rules_updated_at: datetime
        """

        self._complex_rules_updated_at = complex_rules_updated_at

    @property
    def configuration(self):
        """Gets the configuration of this ProjectRead.


        :return: The configuration of this ProjectRead.
        :rtype: List[str]
        """
        return self._configuration

    @configuration.setter
    def configuration(self, configuration):
        """Sets the configuration of this ProjectRead.


        :param configuration: The configuration of this ProjectRead.
        :type configuration: List[str]
        """

        self._configuration = configuration

    @property
    def created_at(self):
        """Gets the created_at of this ProjectRead.


        :return: The created_at of this ProjectRead.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this ProjectRead.


        :param created_at: The created_at of this ProjectRead.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def current_version(self):
        """Gets the current_version of this ProjectRead.


        :return: The current_version of this ProjectRead.
        :rtype: RuleSetVersionRead
        """
        return self._current_version

    @current_version.setter
    def current_version(self, current_version):
        """Sets the current_version of this ProjectRead.


        :param current_version: The current_version of this ProjectRead.
        :type current_version: RuleSetVersionRead
        """

        self._current_version = current_version

    @property
    def id(self):
        """Gets the id of this ProjectRead.


        :return: The id of this ProjectRead.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ProjectRead.


        :param id: The id of this ProjectRead.
        :type id: str
        """

        self._id = id

    @property
    def ignore_project_types(self):
        """Gets the ignore_project_types of this ProjectRead.


        :return: The ignore_project_types of this ProjectRead.
        :rtype: List[str]
        """
        return self._ignore_project_types

    @ignore_project_types.setter
    def ignore_project_types(self, ignore_project_types):
        """Sets the ignore_project_types of this ProjectRead.


        :param ignore_project_types: The ignore_project_types of this ProjectRead.
        :type ignore_project_types: List[str]
        """

        self._ignore_project_types = ignore_project_types

    @property
    def is_publishing(self):
        """Gets the is_publishing of this ProjectRead.


        :return: The is_publishing of this ProjectRead.
        :rtype: bool
        """
        return self._is_publishing

    @is_publishing.setter
    def is_publishing(self, is_publishing):
        """Sets the is_publishing of this ProjectRead.


        :param is_publishing: The is_publishing of this ProjectRead.
        :type is_publishing: bool
        """

        self._is_publishing = is_publishing

    @property
    def name(self):
        """Gets the name of this ProjectRead.


        :return: The name of this ProjectRead.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ProjectRead.


        :param name: The name of this ProjectRead.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def onboarding_completed_demos(self):
        """Gets the onboarding_completed_demos of this ProjectRead.


        :return: The onboarding_completed_demos of this ProjectRead.
        :rtype: List[str]
        """
        return self._onboarding_completed_demos

    @onboarding_completed_demos.setter
    def onboarding_completed_demos(self, onboarding_completed_demos):
        """Sets the onboarding_completed_demos of this ProjectRead.


        :param onboarding_completed_demos: The onboarding_completed_demos of this ProjectRead.
        :type onboarding_completed_demos: List[str]
        """

        self._onboarding_completed_demos = onboarding_completed_demos

    @property
    def organization(self):
        """Gets the organization of this ProjectRead.


        :return: The organization of this ProjectRead.
        :rtype: OrganizationRead
        """
        return self._organization

    @organization.setter
    def organization(self, organization):
        """Sets the organization of this ProjectRead.


        :param organization: The organization of this ProjectRead.
        :type organization: OrganizationRead
        """

        self._organization = organization

    @property
    def plan(self):
        """Gets the plan of this ProjectRead.


        :return: The plan of this ProjectRead.
        :rtype: int
        """
        return self._plan

    @plan.setter
    def plan(self, plan):
        """Sets the plan of this ProjectRead.


        :param plan: The plan of this ProjectRead.
        :type plan: int
        """

        self._plan = plan

    @property
    def rules_hash(self):
        """Gets the rules_hash of this ProjectRead.


        :return: The rules_hash of this ProjectRead.
        :rtype: str
        """
        return self._rules_hash

    @rules_hash.setter
    def rules_hash(self, rules_hash):
        """Sets the rules_hash of this ProjectRead.


        :param rules_hash: The rules_hash of this ProjectRead.
        :type rules_hash: str
        """

        self._rules_hash = rules_hash

    @property
    def slug(self):
        """Gets the slug of this ProjectRead.


        :return: The slug of this ProjectRead.
        :rtype: str
        """
        return self._slug

    @slug.setter
    def slug(self, slug):
        """Sets the slug of this ProjectRead.


        :param slug: The slug of this ProjectRead.
        :type slug: str
        """

        self._slug = slug

    @property
    def straight_rules_count(self):
        """Gets the straight_rules_count of this ProjectRead.


        :return: The straight_rules_count of this ProjectRead.
        :rtype: int
        """
        return self._straight_rules_count

    @straight_rules_count.setter
    def straight_rules_count(self, straight_rules_count):
        """Sets the straight_rules_count of this ProjectRead.


        :param straight_rules_count: The straight_rules_count of this ProjectRead.
        :type straight_rules_count: int
        """

        self._straight_rules_count = straight_rules_count

    @property
    def straight_rules_updated_at(self):
        """Gets the straight_rules_updated_at of this ProjectRead.


        :return: The straight_rules_updated_at of this ProjectRead.
        :rtype: datetime
        """
        return self._straight_rules_updated_at

    @straight_rules_updated_at.setter
    def straight_rules_updated_at(self, straight_rules_updated_at):
        """Sets the straight_rules_updated_at of this ProjectRead.


        :param straight_rules_updated_at: The straight_rules_updated_at of this ProjectRead.
        :type straight_rules_updated_at: datetime
        """

        self._straight_rules_updated_at = straight_rules_updated_at

    @property
    def token(self):
        """Gets the token of this ProjectRead.


        :return: The token of this ProjectRead.
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token):
        """Sets the token of this ProjectRead.


        :param token: The token of this ProjectRead.
        :type token: str
        """

        self._token = token

    @property
    def updated_at(self):
        """Gets the updated_at of this ProjectRead.


        :return: The updated_at of this ProjectRead.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this ProjectRead.


        :param updated_at: The updated_at of this ProjectRead.
        :type updated_at: datetime
        """

        self._updated_at = updated_at

    @property
    def user_projects(self):
        """Gets the user_projects of this ProjectRead.


        :return: The user_projects of this ProjectRead.
        :rtype: List[UserProjectRead]
        """
        return self._user_projects

    @user_projects.setter
    def user_projects(self, user_projects):
        """Sets the user_projects of this ProjectRead.


        :param user_projects: The user_projects of this ProjectRead.
        :type user_projects: List[UserProjectRead]
        """

        self._user_projects = user_projects

    @property
    def users_flattened(self):
        """Gets the users_flattened of this ProjectRead.


        :return: The users_flattened of this ProjectRead.
        :rtype: List[UserProjectFlattenedRead]
        """
        return self._users_flattened

    @users_flattened.setter
    def users_flattened(self, users_flattened):
        """Sets the users_flattened of this ProjectRead.


        :param users_flattened: The users_flattened of this ProjectRead.
        :type users_flattened: List[UserProjectFlattenedRead]
        """

        self._users_flattened = users_flattened

    @property
    def working_version(self):
        """Gets the working_version of this ProjectRead.


        :return: The working_version of this ProjectRead.
        :rtype: RuleSetVersionRead
        """
        return self._working_version

    @working_version.setter
    def working_version(self, working_version):
        """Sets the working_version of this ProjectRead.


        :param working_version: The working_version of this ProjectRead.
        :type working_version: RuleSetVersionRead
        """

        self._working_version = working_version
