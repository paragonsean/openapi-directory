/*
 * REST API Version 2
 * Circuit REST API to interact with the Circuit system.  [Learn more about the Circuit Development Community](https://www.circuit.com/web/developers/home)
 *
 * The version of the OpenAPI document: 2.9.235
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ParticipantsImportDataResult
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:29:23.236704-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ParticipantsImportDataResult {
  public static final String SERIALIZED_NAME_ACTUAL_NUMBER_OF_IMPORTED_PARTICIPANTS = "actualNumberOfImportedParticipants";
  @SerializedName(SERIALIZED_NAME_ACTUAL_NUMBER_OF_IMPORTED_PARTICIPANTS)
  private BigDecimal actualNumberOfImportedParticipants;

  public static final String SERIALIZED_NAME_ESTIMATED_IMPORT_DURATION = "estimatedImportDuration";
  @SerializedName(SERIALIZED_NAME_ESTIMATED_IMPORT_DURATION)
  private BigDecimal estimatedImportDuration;

  public static final String SERIALIZED_NAME_IMPORT_END_DATE = "importEndDate";
  @SerializedName(SERIALIZED_NAME_IMPORT_END_DATE)
  private BigDecimal importEndDate;

  public static final String SERIALIZED_NAME_IMPORT_FILE_ID = "importFileId";
  @SerializedName(SERIALIZED_NAME_IMPORT_FILE_ID)
  private String importFileId;

  public static final String SERIALIZED_NAME_IMPORT_FILE_NAME = "importFileName";
  @SerializedName(SERIALIZED_NAME_IMPORT_FILE_NAME)
  private String importFileName;

  public static final String SERIALIZED_NAME_IMPORT_PROGRESS = "importProgress";
  @SerializedName(SERIALIZED_NAME_IMPORT_PROGRESS)
  private BigDecimal importProgress;

  public static final String SERIALIZED_NAME_IMPORT_START_DATE = "importStartDate";
  @SerializedName(SERIALIZED_NAME_IMPORT_START_DATE)
  private BigDecimal importStartDate;

  public static final String SERIALIZED_NAME_IMPORT_STATUS = "importStatus";
  @SerializedName(SERIALIZED_NAME_IMPORT_STATUS)
  private String importStatus;

  public static final String SERIALIZED_NAME_PLANNED_NUMBER_OF_IMPORTED_PARTICIPANTS = "plannedNumberOfImportedParticipants";
  @SerializedName(SERIALIZED_NAME_PLANNED_NUMBER_OF_IMPORTED_PARTICIPANTS)
  private BigDecimal plannedNumberOfImportedParticipants;

  public static final String SERIALIZED_NAME_RESULT_FILE_ID = "resultFileId";
  @SerializedName(SERIALIZED_NAME_RESULT_FILE_ID)
  private String resultFileId;

  public static final String SERIALIZED_NAME_RESULT_FILE_NAME = "resultFileName";
  @SerializedName(SERIALIZED_NAME_RESULT_FILE_NAME)
  private String resultFileName;

  public ParticipantsImportDataResult() {
  }

  public ParticipantsImportDataResult actualNumberOfImportedParticipants(BigDecimal actualNumberOfImportedParticipants) {
    this.actualNumberOfImportedParticipants = actualNumberOfImportedParticipants;
    return this;
  }

  /**
   * Actual number of imported participants
   * @return actualNumberOfImportedParticipants
   */
  @javax.annotation.Nullable
  public BigDecimal getActualNumberOfImportedParticipants() {
    return actualNumberOfImportedParticipants;
  }

  public void setActualNumberOfImportedParticipants(BigDecimal actualNumberOfImportedParticipants) {
    this.actualNumberOfImportedParticipants = actualNumberOfImportedParticipants;
  }


  public ParticipantsImportDataResult estimatedImportDuration(BigDecimal estimatedImportDuration) {
    this.estimatedImportDuration = estimatedImportDuration;
    return this;
  }

  /**
   * Estimated import duration
   * @return estimatedImportDuration
   */
  @javax.annotation.Nullable
  public BigDecimal getEstimatedImportDuration() {
    return estimatedImportDuration;
  }

  public void setEstimatedImportDuration(BigDecimal estimatedImportDuration) {
    this.estimatedImportDuration = estimatedImportDuration;
  }


  public ParticipantsImportDataResult importEndDate(BigDecimal importEndDate) {
    this.importEndDate = importEndDate;
    return this;
  }

  /**
   * Import end date
   * @return importEndDate
   */
  @javax.annotation.Nullable
  public BigDecimal getImportEndDate() {
    return importEndDate;
  }

  public void setImportEndDate(BigDecimal importEndDate) {
    this.importEndDate = importEndDate;
  }


  public ParticipantsImportDataResult importFileId(String importFileId) {
    this.importFileId = importFileId;
    return this;
  }

  /**
   * The file id of the import
   * @return importFileId
   */
  @javax.annotation.Nullable
  public String getImportFileId() {
    return importFileId;
  }

  public void setImportFileId(String importFileId) {
    this.importFileId = importFileId;
  }


  public ParticipantsImportDataResult importFileName(String importFileName) {
    this.importFileName = importFileName;
    return this;
  }

  /**
   * The name of the import file
   * @return importFileName
   */
  @javax.annotation.Nullable
  public String getImportFileName() {
    return importFileName;
  }

  public void setImportFileName(String importFileName) {
    this.importFileName = importFileName;
  }


  public ParticipantsImportDataResult importProgress(BigDecimal importProgress) {
    this.importProgress = importProgress;
    return this;
  }

  /**
   * The progress of the import
   * @return importProgress
   */
  @javax.annotation.Nullable
  public BigDecimal getImportProgress() {
    return importProgress;
  }

  public void setImportProgress(BigDecimal importProgress) {
    this.importProgress = importProgress;
  }


  public ParticipantsImportDataResult importStartDate(BigDecimal importStartDate) {
    this.importStartDate = importStartDate;
    return this;
  }

  /**
   * Import start date
   * @return importStartDate
   */
  @javax.annotation.Nullable
  public BigDecimal getImportStartDate() {
    return importStartDate;
  }

  public void setImportStartDate(BigDecimal importStartDate) {
    this.importStartDate = importStartDate;
  }


  public ParticipantsImportDataResult importStatus(String importStatus) {
    this.importStatus = importStatus;
    return this;
  }

  /**
   * The status of the import
   * @return importStatus
   */
  @javax.annotation.Nullable
  public String getImportStatus() {
    return importStatus;
  }

  public void setImportStatus(String importStatus) {
    this.importStatus = importStatus;
  }


  public ParticipantsImportDataResult plannedNumberOfImportedParticipants(BigDecimal plannedNumberOfImportedParticipants) {
    this.plannedNumberOfImportedParticipants = plannedNumberOfImportedParticipants;
    return this;
  }

  /**
   * Planned number of imported participants
   * @return plannedNumberOfImportedParticipants
   */
  @javax.annotation.Nullable
  public BigDecimal getPlannedNumberOfImportedParticipants() {
    return plannedNumberOfImportedParticipants;
  }

  public void setPlannedNumberOfImportedParticipants(BigDecimal plannedNumberOfImportedParticipants) {
    this.plannedNumberOfImportedParticipants = plannedNumberOfImportedParticipants;
  }


  public ParticipantsImportDataResult resultFileId(String resultFileId) {
    this.resultFileId = resultFileId;
    return this;
  }

  /**
   * The file id of the result file
   * @return resultFileId
   */
  @javax.annotation.Nullable
  public String getResultFileId() {
    return resultFileId;
  }

  public void setResultFileId(String resultFileId) {
    this.resultFileId = resultFileId;
  }


  public ParticipantsImportDataResult resultFileName(String resultFileName) {
    this.resultFileName = resultFileName;
    return this;
  }

  /**
   * The name of the result file
   * @return resultFileName
   */
  @javax.annotation.Nullable
  public String getResultFileName() {
    return resultFileName;
  }

  public void setResultFileName(String resultFileName) {
    this.resultFileName = resultFileName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ParticipantsImportDataResult participantsImportDataResult = (ParticipantsImportDataResult) o;
    return Objects.equals(this.actualNumberOfImportedParticipants, participantsImportDataResult.actualNumberOfImportedParticipants) &&
        Objects.equals(this.estimatedImportDuration, participantsImportDataResult.estimatedImportDuration) &&
        Objects.equals(this.importEndDate, participantsImportDataResult.importEndDate) &&
        Objects.equals(this.importFileId, participantsImportDataResult.importFileId) &&
        Objects.equals(this.importFileName, participantsImportDataResult.importFileName) &&
        Objects.equals(this.importProgress, participantsImportDataResult.importProgress) &&
        Objects.equals(this.importStartDate, participantsImportDataResult.importStartDate) &&
        Objects.equals(this.importStatus, participantsImportDataResult.importStatus) &&
        Objects.equals(this.plannedNumberOfImportedParticipants, participantsImportDataResult.plannedNumberOfImportedParticipants) &&
        Objects.equals(this.resultFileId, participantsImportDataResult.resultFileId) &&
        Objects.equals(this.resultFileName, participantsImportDataResult.resultFileName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(actualNumberOfImportedParticipants, estimatedImportDuration, importEndDate, importFileId, importFileName, importProgress, importStartDate, importStatus, plannedNumberOfImportedParticipants, resultFileId, resultFileName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ParticipantsImportDataResult {\n");
    sb.append("    actualNumberOfImportedParticipants: ").append(toIndentedString(actualNumberOfImportedParticipants)).append("\n");
    sb.append("    estimatedImportDuration: ").append(toIndentedString(estimatedImportDuration)).append("\n");
    sb.append("    importEndDate: ").append(toIndentedString(importEndDate)).append("\n");
    sb.append("    importFileId: ").append(toIndentedString(importFileId)).append("\n");
    sb.append("    importFileName: ").append(toIndentedString(importFileName)).append("\n");
    sb.append("    importProgress: ").append(toIndentedString(importProgress)).append("\n");
    sb.append("    importStartDate: ").append(toIndentedString(importStartDate)).append("\n");
    sb.append("    importStatus: ").append(toIndentedString(importStatus)).append("\n");
    sb.append("    plannedNumberOfImportedParticipants: ").append(toIndentedString(plannedNumberOfImportedParticipants)).append("\n");
    sb.append("    resultFileId: ").append(toIndentedString(resultFileId)).append("\n");
    sb.append("    resultFileName: ").append(toIndentedString(resultFileName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("actualNumberOfImportedParticipants");
    openapiFields.add("estimatedImportDuration");
    openapiFields.add("importEndDate");
    openapiFields.add("importFileId");
    openapiFields.add("importFileName");
    openapiFields.add("importProgress");
    openapiFields.add("importStartDate");
    openapiFields.add("importStatus");
    openapiFields.add("plannedNumberOfImportedParticipants");
    openapiFields.add("resultFileId");
    openapiFields.add("resultFileName");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ParticipantsImportDataResult
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ParticipantsImportDataResult.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ParticipantsImportDataResult is not found in the empty JSON string", ParticipantsImportDataResult.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ParticipantsImportDataResult.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ParticipantsImportDataResult` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("importFileId") != null && !jsonObj.get("importFileId").isJsonNull()) && !jsonObj.get("importFileId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `importFileId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("importFileId").toString()));
      }
      if ((jsonObj.get("importFileName") != null && !jsonObj.get("importFileName").isJsonNull()) && !jsonObj.get("importFileName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `importFileName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("importFileName").toString()));
      }
      if ((jsonObj.get("importStatus") != null && !jsonObj.get("importStatus").isJsonNull()) && !jsonObj.get("importStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `importStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("importStatus").toString()));
      }
      if ((jsonObj.get("resultFileId") != null && !jsonObj.get("resultFileId").isJsonNull()) && !jsonObj.get("resultFileId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resultFileId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resultFileId").toString()));
      }
      if ((jsonObj.get("resultFileName") != null && !jsonObj.get("resultFileName").isJsonNull()) && !jsonObj.get("resultFileName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resultFileName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resultFileName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ParticipantsImportDataResult.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ParticipantsImportDataResult' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ParticipantsImportDataResult> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ParticipantsImportDataResult.class));

       return (TypeAdapter<T>) new TypeAdapter<ParticipantsImportDataResult>() {
           @Override
           public void write(JsonWriter out, ParticipantsImportDataResult value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ParticipantsImportDataResult read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ParticipantsImportDataResult given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ParticipantsImportDataResult
   * @throws IOException if the JSON string is invalid with respect to ParticipantsImportDataResult
   */
  public static ParticipantsImportDataResult fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ParticipantsImportDataResult.class);
  }

  /**
   * Convert an instance of ParticipantsImportDataResult to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

