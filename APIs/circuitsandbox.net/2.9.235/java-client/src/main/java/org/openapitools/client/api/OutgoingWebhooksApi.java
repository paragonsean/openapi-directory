/*
 * REST API Version 2
 * Circuit REST API to interact with the Circuit system.  [Learn more about the Circuit Development Community](https://www.circuit.com/web/developers/home)
 *
 * The version of the OpenAPI document: 2.9.235
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.WebHook;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class OutgoingWebhooksApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public OutgoingWebhooksApi() {
        this(Configuration.getDefaultApiClient());
    }

    public OutgoingWebhooksApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for addPresenceWebHook
     * @param url WebHook callback URL (required)
     * @param userIds The IDs of the users to subscribe for their presence (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The webHook was successfully registered </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request cannot be fulfilled due to bad syntax: &lt;ul&gt;&lt;li&gt;an invalid URL&lt;/li&gt;&lt;li&gt;one or more invalid userIds&lt;/li&gt;&lt;li&gt;a field constraint is violated&lt;/li&gt;&lt;/ul&gt; </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The maximum number of allowed userIds is reached or the maximum number of allowed webHook is reached </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addPresenceWebHookCall(String url, List<String> userIds, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/webhooks/presence";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (url != null) {
            localVarFormParams.put("url", url);
        }

        if (userIds != null) {
            localVarFormParams.put("userIds", userIds);
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addPresenceWebHookValidateBeforeCall(String url, List<String> userIds, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'url' is set
        if (url == null) {
            throw new ApiException("Missing the required parameter 'url' when calling addPresenceWebHook(Async)");
        }

        // verify the required parameter 'userIds' is set
        if (userIds == null) {
            throw new ApiException("Missing the required parameter 'userIds' when calling addPresenceWebHook(Async)");
        }

        return addPresenceWebHookCall(url, userIds, _callback);

    }

    /**
     * Registers Presence WebHook registration
     * Registers a webHook that has a presence filter with the given URL and userIds. There is a maximum number of userIds allowed OauthScopes: READ_USER
     * @param url WebHook callback URL (required)
     * @param userIds The IDs of the users to subscribe for their presence (required)
     * @return WebHook
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The webHook was successfully registered </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request cannot be fulfilled due to bad syntax: &lt;ul&gt;&lt;li&gt;an invalid URL&lt;/li&gt;&lt;li&gt;one or more invalid userIds&lt;/li&gt;&lt;li&gt;a field constraint is violated&lt;/li&gt;&lt;/ul&gt; </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The maximum number of allowed userIds is reached or the maximum number of allowed webHook is reached </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public WebHook addPresenceWebHook(String url, List<String> userIds) throws ApiException {
        ApiResponse<WebHook> localVarResp = addPresenceWebHookWithHttpInfo(url, userIds);
        return localVarResp.getData();
    }

    /**
     * Registers Presence WebHook registration
     * Registers a webHook that has a presence filter with the given URL and userIds. There is a maximum number of userIds allowed OauthScopes: READ_USER
     * @param url WebHook callback URL (required)
     * @param userIds The IDs of the users to subscribe for their presence (required)
     * @return ApiResponse&lt;WebHook&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The webHook was successfully registered </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request cannot be fulfilled due to bad syntax: &lt;ul&gt;&lt;li&gt;an invalid URL&lt;/li&gt;&lt;li&gt;one or more invalid userIds&lt;/li&gt;&lt;li&gt;a field constraint is violated&lt;/li&gt;&lt;/ul&gt; </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The maximum number of allowed userIds is reached or the maximum number of allowed webHook is reached </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WebHook> addPresenceWebHookWithHttpInfo(String url, List<String> userIds) throws ApiException {
        okhttp3.Call localVarCall = addPresenceWebHookValidateBeforeCall(url, userIds, null);
        Type localVarReturnType = new TypeToken<WebHook>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Registers Presence WebHook registration (asynchronously)
     * Registers a webHook that has a presence filter with the given URL and userIds. There is a maximum number of userIds allowed OauthScopes: READ_USER
     * @param url WebHook callback URL (required)
     * @param userIds The IDs of the users to subscribe for their presence (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The webHook was successfully registered </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request cannot be fulfilled due to bad syntax: &lt;ul&gt;&lt;li&gt;an invalid URL&lt;/li&gt;&lt;li&gt;one or more invalid userIds&lt;/li&gt;&lt;li&gt;a field constraint is violated&lt;/li&gt;&lt;/ul&gt; </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The maximum number of allowed userIds is reached or the maximum number of allowed webHook is reached </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addPresenceWebHookAsync(String url, List<String> userIds, final ApiCallback<WebHook> _callback) throws ApiException {

        okhttp3.Call localVarCall = addPresenceWebHookValidateBeforeCall(url, userIds, _callback);
        Type localVarReturnType = new TypeToken<WebHook>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for addWebHook
     * @param filter A filter for WebHooks that checks for a list of configured events. This filter will use a regular expression to determine if it is interested in the events or not. The event itself is converted into a string of format AREA.EVENT. Examples: CONVERSATION.CREATE / USER.UPDATE (required)
     * @param url WebHook callback URL (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The webHook was successfully registered </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request cannot be fulfilled due to bad syntax: &lt;ul&gt;&lt;li&gt;an invalid URL&lt;/li&gt;&lt;li&gt;an invalid event filter&lt;/li&gt;&lt;li&gt;an unsupported event filter&lt;/li&gt;&lt;li&gt;a field constraint is violated&lt;/li&gt;&lt;/ul&gt; </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The maximum number of allowed webHook is reached </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addWebHookCall(List<String> filter, String url, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/webhooks";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (filter != null) {
            localVarFormParams.put("filter", filter);
        }

        if (url != null) {
            localVarFormParams.put("url", url);
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addWebHookValidateBeforeCall(List<String> filter, String url, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'filter' is set
        if (filter == null) {
            throw new ApiException("Missing the required parameter 'filter' when calling addWebHook(Async)");
        }

        // verify the required parameter 'url' is set
        if (url == null) {
            throw new ApiException("Missing the required parameter 'url' when calling addWebHook(Async)");
        }

        return addWebHookCall(filter, url, _callback);

    }

    /**
     * Registers a WebHook
     * Registers the webHook with the given filter and callback URL. OauthScopes: READ_CONVERSATIONS, READ_USER
     * @param filter A filter for WebHooks that checks for a list of configured events. This filter will use a regular expression to determine if it is interested in the events or not. The event itself is converted into a string of format AREA.EVENT. Examples: CONVERSATION.CREATE / USER.UPDATE (required)
     * @param url WebHook callback URL (required)
     * @return WebHook
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The webHook was successfully registered </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request cannot be fulfilled due to bad syntax: &lt;ul&gt;&lt;li&gt;an invalid URL&lt;/li&gt;&lt;li&gt;an invalid event filter&lt;/li&gt;&lt;li&gt;an unsupported event filter&lt;/li&gt;&lt;li&gt;a field constraint is violated&lt;/li&gt;&lt;/ul&gt; </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The maximum number of allowed webHook is reached </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public WebHook addWebHook(List<String> filter, String url) throws ApiException {
        ApiResponse<WebHook> localVarResp = addWebHookWithHttpInfo(filter, url);
        return localVarResp.getData();
    }

    /**
     * Registers a WebHook
     * Registers the webHook with the given filter and callback URL. OauthScopes: READ_CONVERSATIONS, READ_USER
     * @param filter A filter for WebHooks that checks for a list of configured events. This filter will use a regular expression to determine if it is interested in the events or not. The event itself is converted into a string of format AREA.EVENT. Examples: CONVERSATION.CREATE / USER.UPDATE (required)
     * @param url WebHook callback URL (required)
     * @return ApiResponse&lt;WebHook&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The webHook was successfully registered </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request cannot be fulfilled due to bad syntax: &lt;ul&gt;&lt;li&gt;an invalid URL&lt;/li&gt;&lt;li&gt;an invalid event filter&lt;/li&gt;&lt;li&gt;an unsupported event filter&lt;/li&gt;&lt;li&gt;a field constraint is violated&lt;/li&gt;&lt;/ul&gt; </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The maximum number of allowed webHook is reached </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WebHook> addWebHookWithHttpInfo(List<String> filter, String url) throws ApiException {
        okhttp3.Call localVarCall = addWebHookValidateBeforeCall(filter, url, null);
        Type localVarReturnType = new TypeToken<WebHook>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Registers a WebHook (asynchronously)
     * Registers the webHook with the given filter and callback URL. OauthScopes: READ_CONVERSATIONS, READ_USER
     * @param filter A filter for WebHooks that checks for a list of configured events. This filter will use a regular expression to determine if it is interested in the events or not. The event itself is converted into a string of format AREA.EVENT. Examples: CONVERSATION.CREATE / USER.UPDATE (required)
     * @param url WebHook callback URL (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> The webHook was successfully registered </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request cannot be fulfilled due to bad syntax: &lt;ul&gt;&lt;li&gt;an invalid URL&lt;/li&gt;&lt;li&gt;an invalid event filter&lt;/li&gt;&lt;li&gt;an unsupported event filter&lt;/li&gt;&lt;li&gt;a field constraint is violated&lt;/li&gt;&lt;/ul&gt; </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The maximum number of allowed webHook is reached </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addWebHookAsync(List<String> filter, String url, final ApiCallback<WebHook> _callback) throws ApiException {

        okhttp3.Call localVarCall = addWebHookValidateBeforeCall(filter, url, _callback);
        Type localVarReturnType = new TypeToken<WebHook>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getWebHook
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of registered webHooks </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getWebHookCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/webhooks";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getWebHookValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getWebHookCall(_callback);

    }

    /**
     * Gets a list of webHooks
     * Gets the list of webHooks registered for this user or API. OauthScopes: READ_CONVERSATIONS, READ_USER
     * @return List&lt;WebHook&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of registered webHooks </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public List<WebHook> getWebHook() throws ApiException {
        ApiResponse<List<WebHook>> localVarResp = getWebHookWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Gets a list of webHooks
     * Gets the list of webHooks registered for this user or API. OauthScopes: READ_CONVERSATIONS, READ_USER
     * @return ApiResponse&lt;List&lt;WebHook&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of registered webHooks </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<WebHook>> getWebHookWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getWebHookValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<WebHook>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets a list of webHooks (asynchronously)
     * Gets the list of webHooks registered for this user or API. OauthScopes: READ_CONVERSATIONS, READ_USER
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of registered webHooks </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getWebHookAsync(final ApiCallback<List<WebHook>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getWebHookValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<WebHook>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getWebHookById
     * @param id The unique ID of the webHook to fetch (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The registered webHook with the given ID </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request cannot be fulfilled due to bad syntax: &lt;ul&gt;&lt;li&gt;the data format of the given id does not match a UUID&lt;/li&gt;&lt;li&gt;a field constraint is violated&lt;/li&gt;&lt;/ul&gt; </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The webHook does not exist </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getWebHookByIdCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/webhooks/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getWebHookByIdValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getWebHookById(Async)");
        }

        return getWebHookByIdCall(id, _callback);

    }

    /**
     * Gets a webHook
     * Gets the registered webHook with the given ID. OauthScopes: READ_CONVERSATIONS, READ_USER
     * @param id The unique ID of the webHook to fetch (required)
     * @return WebHook
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The registered webHook with the given ID </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request cannot be fulfilled due to bad syntax: &lt;ul&gt;&lt;li&gt;the data format of the given id does not match a UUID&lt;/li&gt;&lt;li&gt;a field constraint is violated&lt;/li&gt;&lt;/ul&gt; </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The webHook does not exist </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public WebHook getWebHookById(String id) throws ApiException {
        ApiResponse<WebHook> localVarResp = getWebHookByIdWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Gets a webHook
     * Gets the registered webHook with the given ID. OauthScopes: READ_CONVERSATIONS, READ_USER
     * @param id The unique ID of the webHook to fetch (required)
     * @return ApiResponse&lt;WebHook&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The registered webHook with the given ID </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request cannot be fulfilled due to bad syntax: &lt;ul&gt;&lt;li&gt;the data format of the given id does not match a UUID&lt;/li&gt;&lt;li&gt;a field constraint is violated&lt;/li&gt;&lt;/ul&gt; </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The webHook does not exist </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WebHook> getWebHookByIdWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = getWebHookByIdValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<WebHook>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets a webHook (asynchronously)
     * Gets the registered webHook with the given ID. OauthScopes: READ_CONVERSATIONS, READ_USER
     * @param id The unique ID of the webHook to fetch (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The registered webHook with the given ID </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request cannot be fulfilled due to bad syntax: &lt;ul&gt;&lt;li&gt;the data format of the given id does not match a UUID&lt;/li&gt;&lt;li&gt;a field constraint is violated&lt;/li&gt;&lt;/ul&gt; </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The webHook does not exist </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getWebHookByIdAsync(String id, final ApiCallback<WebHook> _callback) throws ApiException {

        okhttp3.Call localVarCall = getWebHookByIdValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<WebHook>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for removeWebHook
     * @param id The unique ID of the webHook to remove (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The operation was successful </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request cannot be fulfilled due to bad syntax: &lt;ul&gt;&lt;li&gt;the data format of the given id does not match a UUID&lt;/li&gt;&lt;li&gt;a field constraint is violated&lt;/li&gt;&lt;/ul&gt; </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The webHook does not exist </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeWebHookCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/webhooks/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeWebHookValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling removeWebHook(Async)");
        }

        return removeWebHookCall(id, _callback);

    }

    /**
     * Removes a registered webHook
     * Unregisters the webHook with the given ID. OauthScopes: READ_CONVERSATIONS, READ_USER
     * @param id The unique ID of the webHook to remove (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The operation was successful </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request cannot be fulfilled due to bad syntax: &lt;ul&gt;&lt;li&gt;the data format of the given id does not match a UUID&lt;/li&gt;&lt;li&gt;a field constraint is violated&lt;/li&gt;&lt;/ul&gt; </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The webHook does not exist </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public void removeWebHook(String id) throws ApiException {
        removeWebHookWithHttpInfo(id);
    }

    /**
     * Removes a registered webHook
     * Unregisters the webHook with the given ID. OauthScopes: READ_CONVERSATIONS, READ_USER
     * @param id The unique ID of the webHook to remove (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The operation was successful </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request cannot be fulfilled due to bad syntax: &lt;ul&gt;&lt;li&gt;the data format of the given id does not match a UUID&lt;/li&gt;&lt;li&gt;a field constraint is violated&lt;/li&gt;&lt;/ul&gt; </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The webHook does not exist </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> removeWebHookWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = removeWebHookValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Removes a registered webHook (asynchronously)
     * Unregisters the webHook with the given ID. OauthScopes: READ_CONVERSATIONS, READ_USER
     * @param id The unique ID of the webHook to remove (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The operation was successful </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request cannot be fulfilled due to bad syntax: &lt;ul&gt;&lt;li&gt;the data format of the given id does not match a UUID&lt;/li&gt;&lt;li&gt;a field constraint is violated&lt;/li&gt;&lt;/ul&gt; </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The webHook does not exist </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeWebHookAsync(String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeWebHookValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for removeWebHooks
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The operation was successful </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeWebHooksCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/webhooks";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeWebHooksValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return removeWebHooksCall(_callback);

    }

    /**
     * Removes all webHooks
     * Unregisters all webHooks of the authenticated user OauthScopes: READ_CONVERSATIONS, READ_USER
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The operation was successful </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public void removeWebHooks() throws ApiException {
        removeWebHooksWithHttpInfo();
    }

    /**
     * Removes all webHooks
     * Unregisters all webHooks of the authenticated user OauthScopes: READ_CONVERSATIONS, READ_USER
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The operation was successful </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> removeWebHooksWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = removeWebHooksValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Removes all webHooks (asynchronously)
     * Unregisters all webHooks of the authenticated user OauthScopes: READ_CONVERSATIONS, READ_USER
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The operation was successful </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeWebHooksAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeWebHooksValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for updatePresenceWebHook
     * @param id The unique ID of the webHook to update (required)
     * @param url WebHook callback URL (optional)
     * @param userIds The IDs of the users to subscribe for their presence (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The webHook registration was successfully updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request cannot be fulfilled due to bad syntax: &lt;ul&gt;&lt;li&gt;an invalid URL&lt;/li&gt;&lt;li&gt;one or more invalid userIds&lt;/li&gt;&lt;li&gt;no input parameter is provided&lt;/li&gt;&lt;li&gt;a field constraint is violated&lt;/li&gt;&lt;/ul&gt; </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The maximum number of allowed userIds is reached </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The webHook does not exist </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updatePresenceWebHookCall(String id, String url, List<String> userIds, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/webhooks/presence/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (url != null) {
            localVarFormParams.put("url", url);
        }

        if (userIds != null) {
            localVarFormParams.put("userIds", userIds);
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updatePresenceWebHookValidateBeforeCall(String id, String url, List<String> userIds, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updatePresenceWebHook(Async)");
        }

        return updatePresenceWebHookCall(id, url, userIds, _callback);

    }

    /**
     * Updates a Presence WebHook registration
     * Updates a registration of a webHook that has a presence filter. The update can be performed either on the URL and/or the userIds. The new userIds, if any, will override any existing userIds. OauthScopes: READ_USER
     * @param id The unique ID of the webHook to update (required)
     * @param url WebHook callback URL (optional)
     * @param userIds The IDs of the users to subscribe for their presence (optional)
     * @return WebHook
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The webHook registration was successfully updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request cannot be fulfilled due to bad syntax: &lt;ul&gt;&lt;li&gt;an invalid URL&lt;/li&gt;&lt;li&gt;one or more invalid userIds&lt;/li&gt;&lt;li&gt;no input parameter is provided&lt;/li&gt;&lt;li&gt;a field constraint is violated&lt;/li&gt;&lt;/ul&gt; </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The maximum number of allowed userIds is reached </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The webHook does not exist </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public WebHook updatePresenceWebHook(String id, String url, List<String> userIds) throws ApiException {
        ApiResponse<WebHook> localVarResp = updatePresenceWebHookWithHttpInfo(id, url, userIds);
        return localVarResp.getData();
    }

    /**
     * Updates a Presence WebHook registration
     * Updates a registration of a webHook that has a presence filter. The update can be performed either on the URL and/or the userIds. The new userIds, if any, will override any existing userIds. OauthScopes: READ_USER
     * @param id The unique ID of the webHook to update (required)
     * @param url WebHook callback URL (optional)
     * @param userIds The IDs of the users to subscribe for their presence (optional)
     * @return ApiResponse&lt;WebHook&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The webHook registration was successfully updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request cannot be fulfilled due to bad syntax: &lt;ul&gt;&lt;li&gt;an invalid URL&lt;/li&gt;&lt;li&gt;one or more invalid userIds&lt;/li&gt;&lt;li&gt;no input parameter is provided&lt;/li&gt;&lt;li&gt;a field constraint is violated&lt;/li&gt;&lt;/ul&gt; </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The maximum number of allowed userIds is reached </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The webHook does not exist </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WebHook> updatePresenceWebHookWithHttpInfo(String id, String url, List<String> userIds) throws ApiException {
        okhttp3.Call localVarCall = updatePresenceWebHookValidateBeforeCall(id, url, userIds, null);
        Type localVarReturnType = new TypeToken<WebHook>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates a Presence WebHook registration (asynchronously)
     * Updates a registration of a webHook that has a presence filter. The update can be performed either on the URL and/or the userIds. The new userIds, if any, will override any existing userIds. OauthScopes: READ_USER
     * @param id The unique ID of the webHook to update (required)
     * @param url WebHook callback URL (optional)
     * @param userIds The IDs of the users to subscribe for their presence (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The webHook registration was successfully updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request cannot be fulfilled due to bad syntax: &lt;ul&gt;&lt;li&gt;an invalid URL&lt;/li&gt;&lt;li&gt;one or more invalid userIds&lt;/li&gt;&lt;li&gt;no input parameter is provided&lt;/li&gt;&lt;li&gt;a field constraint is violated&lt;/li&gt;&lt;/ul&gt; </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The maximum number of allowed userIds is reached </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The webHook does not exist </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updatePresenceWebHookAsync(String id, String url, List<String> userIds, final ApiCallback<WebHook> _callback) throws ApiException {

        okhttp3.Call localVarCall = updatePresenceWebHookValidateBeforeCall(id, url, userIds, _callback);
        Type localVarReturnType = new TypeToken<WebHook>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateWebHook
     * @param id The unique ID of the webHook to update (required)
     * @param filter A filter for WebHooks that checks for a list of configured events. This filter will use a regular expression to determine if it is interested in the events or not. The event itself is converted into a string of format AREA.EVENT. Examples: CONVERSATION.CREATE / USER.UPDATE (optional)
     * @param url WebHook callback URL (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The webHook registration was successfully updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request cannot be fulfilled due to bad syntax: &lt;ul&gt;&lt;li&gt;an invalid URL&lt;/li&gt;&lt;li&gt;an invalid event filter&lt;/li&gt;&lt;li&gt;an unsupported event filter&lt;/li&gt;&lt;li&gt;no input parameter is provided&lt;/li&gt;&lt;li&gt;a field constraint is violated&lt;/li&gt;&lt;/ul&gt; </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The webHook does not exist </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateWebHookCall(String id, List<String> filter, String url, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/webhooks/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (filter != null) {
            localVarFormParams.put("filter", filter);
        }

        if (url != null) {
            localVarFormParams.put("url", url);
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateWebHookValidateBeforeCall(String id, List<String> filter, String url, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateWebHook(Async)");
        }

        return updateWebHookCall(id, filter, url, _callback);

    }

    /**
     * Updates a WebHook registration
     * Updates a webHook registration with the given filter and callback URL. OauthScopes: READ_CONVERSATIONS, READ_USER
     * @param id The unique ID of the webHook to update (required)
     * @param filter A filter for WebHooks that checks for a list of configured events. This filter will use a regular expression to determine if it is interested in the events or not. The event itself is converted into a string of format AREA.EVENT. Examples: CONVERSATION.CREATE / USER.UPDATE (optional)
     * @param url WebHook callback URL (optional)
     * @return WebHook
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The webHook registration was successfully updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request cannot be fulfilled due to bad syntax: &lt;ul&gt;&lt;li&gt;an invalid URL&lt;/li&gt;&lt;li&gt;an invalid event filter&lt;/li&gt;&lt;li&gt;an unsupported event filter&lt;/li&gt;&lt;li&gt;no input parameter is provided&lt;/li&gt;&lt;li&gt;a field constraint is violated&lt;/li&gt;&lt;/ul&gt; </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The webHook does not exist </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public WebHook updateWebHook(String id, List<String> filter, String url) throws ApiException {
        ApiResponse<WebHook> localVarResp = updateWebHookWithHttpInfo(id, filter, url);
        return localVarResp.getData();
    }

    /**
     * Updates a WebHook registration
     * Updates a webHook registration with the given filter and callback URL. OauthScopes: READ_CONVERSATIONS, READ_USER
     * @param id The unique ID of the webHook to update (required)
     * @param filter A filter for WebHooks that checks for a list of configured events. This filter will use a regular expression to determine if it is interested in the events or not. The event itself is converted into a string of format AREA.EVENT. Examples: CONVERSATION.CREATE / USER.UPDATE (optional)
     * @param url WebHook callback URL (optional)
     * @return ApiResponse&lt;WebHook&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The webHook registration was successfully updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request cannot be fulfilled due to bad syntax: &lt;ul&gt;&lt;li&gt;an invalid URL&lt;/li&gt;&lt;li&gt;an invalid event filter&lt;/li&gt;&lt;li&gt;an unsupported event filter&lt;/li&gt;&lt;li&gt;no input parameter is provided&lt;/li&gt;&lt;li&gt;a field constraint is violated&lt;/li&gt;&lt;/ul&gt; </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The webHook does not exist </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WebHook> updateWebHookWithHttpInfo(String id, List<String> filter, String url) throws ApiException {
        okhttp3.Call localVarCall = updateWebHookValidateBeforeCall(id, filter, url, null);
        Type localVarReturnType = new TypeToken<WebHook>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates a WebHook registration (asynchronously)
     * Updates a webHook registration with the given filter and callback URL. OauthScopes: READ_CONVERSATIONS, READ_USER
     * @param id The unique ID of the webHook to update (required)
     * @param filter A filter for WebHooks that checks for a list of configured events. This filter will use a regular expression to determine if it is interested in the events or not. The event itself is converted into a string of format AREA.EVENT. Examples: CONVERSATION.CREATE / USER.UPDATE (optional)
     * @param url WebHook callback URL (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The webHook registration was successfully updated </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request cannot be fulfilled due to bad syntax: &lt;ul&gt;&lt;li&gt;an invalid URL&lt;/li&gt;&lt;li&gt;an invalid event filter&lt;/li&gt;&lt;li&gt;an unsupported event filter&lt;/li&gt;&lt;li&gt;no input parameter is provided&lt;/li&gt;&lt;li&gt;a field constraint is violated&lt;/li&gt;&lt;/ul&gt; </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The webHook does not exist </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateWebHookAsync(String id, List<String> filter, String url, final ApiCallback<WebHook> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateWebHookValidateBeforeCall(id, filter, url, _callback);
        Type localVarReturnType = new TypeToken<WebHook>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
