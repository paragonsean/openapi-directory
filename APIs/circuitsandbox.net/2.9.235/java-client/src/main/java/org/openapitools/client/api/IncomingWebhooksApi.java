/*
 * REST API Version 2
 * Circuit REST API to interact with the Circuit system.  [Learn more about the Circuit Development Community](https://www.circuit.com/web/developers/home)
 *
 * The version of the OpenAPI document: 2.9.235
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.math.BigDecimal;
import org.openapitools.client.model.IncomingWebhook;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class IncomingWebhooksApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public IncomingWebhooksApi() {
        this(Configuration.getDefaultApiClient());
    }

    public IncomingWebhooksApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createIncomingWebhook
     * @param conversationId The id of the conversation. (required)
     * @param name The name of the webhook (optional)
     * @param userId The id of the user of the webhook (optional)
     * @param description A short description of the webhook (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The created webhook object as JSON string. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Could not create webhook. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createIncomingWebhookCall(String conversationId, String name, String userId, String description, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/webhooks/incoming/create/{conversationId}"
            .replace("{" + "conversationId" + "}", localVarApiClient.escapeString(conversationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (userId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userId", userId));
        }

        if (description != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description", description));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createIncomingWebhookValidateBeforeCall(String conversationId, String name, String userId, String description, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'conversationId' is set
        if (conversationId == null) {
            throw new ApiException("Missing the required parameter 'conversationId' when calling createIncomingWebhook(Async)");
        }

        return createIncomingWebhookCall(conversationId, name, userId, description, _callback);

    }

    /**
     * Create a new webhook for existing conversation.
     * Create a new webhook. Conversation must exist and creater has to be participant. OauthScopes: WRITE_CONVERSATIONS, MANAGE_CONVERSATIONS
     * @param conversationId The id of the conversation. (required)
     * @param name The name of the webhook (optional)
     * @param userId The id of the user of the webhook (optional)
     * @param description A short description of the webhook (optional)
     * @return IncomingWebhook
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The created webhook object as JSON string. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Could not create webhook. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public IncomingWebhook createIncomingWebhook(String conversationId, String name, String userId, String description) throws ApiException {
        ApiResponse<IncomingWebhook> localVarResp = createIncomingWebhookWithHttpInfo(conversationId, name, userId, description);
        return localVarResp.getData();
    }

    /**
     * Create a new webhook for existing conversation.
     * Create a new webhook. Conversation must exist and creater has to be participant. OauthScopes: WRITE_CONVERSATIONS, MANAGE_CONVERSATIONS
     * @param conversationId The id of the conversation. (required)
     * @param name The name of the webhook (optional)
     * @param userId The id of the user of the webhook (optional)
     * @param description A short description of the webhook (optional)
     * @return ApiResponse&lt;IncomingWebhook&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The created webhook object as JSON string. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Could not create webhook. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<IncomingWebhook> createIncomingWebhookWithHttpInfo(String conversationId, String name, String userId, String description) throws ApiException {
        okhttp3.Call localVarCall = createIncomingWebhookValidateBeforeCall(conversationId, name, userId, description, null);
        Type localVarReturnType = new TypeToken<IncomingWebhook>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a new webhook for existing conversation. (asynchronously)
     * Create a new webhook. Conversation must exist and creater has to be participant. OauthScopes: WRITE_CONVERSATIONS, MANAGE_CONVERSATIONS
     * @param conversationId The id of the conversation. (required)
     * @param name The name of the webhook (optional)
     * @param userId The id of the user of the webhook (optional)
     * @param description A short description of the webhook (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The created webhook object as JSON string. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Could not create webhook. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createIncomingWebhookAsync(String conversationId, String name, String userId, String description, final ApiCallback<IncomingWebhook> _callback) throws ApiException {

        okhttp3.Call localVarCall = createIncomingWebhookValidateBeforeCall(conversationId, name, userId, description, _callback);
        Type localVarReturnType = new TypeToken<IncomingWebhook>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteIncomingWebhook
     * @param webhookId The id of the webhook (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The webhook was deleted </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Could not find webhook </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteIncomingWebhookCall(String webhookId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/webhooks/incoming/{webhookId}"
            .replace("{" + "webhookId" + "}", localVarApiClient.escapeString(webhookId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteIncomingWebhookValidateBeforeCall(String webhookId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'webhookId' is set
        if (webhookId == null) {
            throw new ApiException("Missing the required parameter 'webhookId' when calling deleteIncomingWebhook(Async)");
        }

        return deleteIncomingWebhookCall(webhookId, _callback);

    }

    /**
     * Delete an existing webhook
     * Delete a new webhook. Webhook must exist OauthScopes: WRITE_CONVERSATIONS, MANAGE_CONVERSATIONS
     * @param webhookId The id of the webhook (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The webhook was deleted </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Could not find webhook </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public void deleteIncomingWebhook(String webhookId) throws ApiException {
        deleteIncomingWebhookWithHttpInfo(webhookId);
    }

    /**
     * Delete an existing webhook
     * Delete a new webhook. Webhook must exist OauthScopes: WRITE_CONVERSATIONS, MANAGE_CONVERSATIONS
     * @param webhookId The id of the webhook (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The webhook was deleted </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Could not find webhook </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteIncomingWebhookWithHttpInfo(String webhookId) throws ApiException {
        okhttp3.Call localVarCall = deleteIncomingWebhookValidateBeforeCall(webhookId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete an existing webhook (asynchronously)
     * Delete a new webhook. Webhook must exist OauthScopes: WRITE_CONVERSATIONS, MANAGE_CONVERSATIONS
     * @param webhookId The id of the webhook (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The webhook was deleted </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Could not find webhook </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteIncomingWebhookAsync(String webhookId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteIncomingWebhookValidateBeforeCall(webhookId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getIncomingWebhookByUser
     * @param userId The id of the user. (required)
     * @param pagesize Max number of hooks per request. Default is 25 (optional, default to 25)
     * @param searchpointer Start of search if consequtive call. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Result successful </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request cannot be fulfilled due to bad syntax </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getIncomingWebhookByUserCall(String userId, BigDecimal pagesize, String searchpointer, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/webhooks/incoming/user/{userId}"
            .replace("{" + "userId" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pagesize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pagesize", pagesize));
        }

        if (searchpointer != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("searchpointer", searchpointer));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getIncomingWebhookByUserValidateBeforeCall(String userId, BigDecimal pagesize, String searchpointer, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling getIncomingWebhookByUser(Async)");
        }

        return getIncomingWebhookByUserCall(userId, pagesize, searchpointer, _callback);

    }

    /**
     * Get all webhooks of a special user.
     * Get all webhooks of a special user. OauthScopes: READ_CONVERSATIONS, MANAGE_CONVERSATIONS
     * @param userId The id of the user. (required)
     * @param pagesize Max number of hooks per request. Default is 25 (optional, default to 25)
     * @param searchpointer Start of search if consequtive call. (optional)
     * @return List&lt;IncomingWebhook&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Result successful </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request cannot be fulfilled due to bad syntax </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public List<IncomingWebhook> getIncomingWebhookByUser(String userId, BigDecimal pagesize, String searchpointer) throws ApiException {
        ApiResponse<List<IncomingWebhook>> localVarResp = getIncomingWebhookByUserWithHttpInfo(userId, pagesize, searchpointer);
        return localVarResp.getData();
    }

    /**
     * Get all webhooks of a special user.
     * Get all webhooks of a special user. OauthScopes: READ_CONVERSATIONS, MANAGE_CONVERSATIONS
     * @param userId The id of the user. (required)
     * @param pagesize Max number of hooks per request. Default is 25 (optional, default to 25)
     * @param searchpointer Start of search if consequtive call. (optional)
     * @return ApiResponse&lt;List&lt;IncomingWebhook&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Result successful </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request cannot be fulfilled due to bad syntax </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<IncomingWebhook>> getIncomingWebhookByUserWithHttpInfo(String userId, BigDecimal pagesize, String searchpointer) throws ApiException {
        okhttp3.Call localVarCall = getIncomingWebhookByUserValidateBeforeCall(userId, pagesize, searchpointer, null);
        Type localVarReturnType = new TypeToken<List<IncomingWebhook>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all webhooks of a special user. (asynchronously)
     * Get all webhooks of a special user. OauthScopes: READ_CONVERSATIONS, MANAGE_CONVERSATIONS
     * @param userId The id of the user. (required)
     * @param pagesize Max number of hooks per request. Default is 25 (optional, default to 25)
     * @param searchpointer Start of search if consequtive call. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Result successful </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request cannot be fulfilled due to bad syntax </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getIncomingWebhookByUserAsync(String userId, BigDecimal pagesize, String searchpointer, final ApiCallback<List<IncomingWebhook>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getIncomingWebhookByUserValidateBeforeCall(userId, pagesize, searchpointer, _callback);
        Type localVarReturnType = new TypeToken<List<IncomingWebhook>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postWebhookAsSlackMessage
     * @param webhookId The id of the webhook. (required)
     * @param fileURL missing documentation (optional)
     * @param filename missing documentation (optional)
     * @param markdown missing documentation (optional)
     * @param subject missing documentation (optional)
     * @param text The text which will occur in the conversation. May contain formats like *bold* or _italic_ (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Message was posted to conversation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request cannot be fulfilled due to bad syntax </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postWebhookAsSlackMessageCall(String webhookId, String fileURL, String filename, Boolean markdown, String subject, String text, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/webhooks/incoming/{webhookId}"
            .replace("{" + "webhookId" + "}", localVarApiClient.escapeString(webhookId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fileURL != null) {
            localVarFormParams.put("fileURL", fileURL);
        }

        if (filename != null) {
            localVarFormParams.put("filename", filename);
        }

        if (markdown != null) {
            localVarFormParams.put("markdown", markdown);
        }

        if (subject != null) {
            localVarFormParams.put("subject", subject);
        }

        if (text != null) {
            localVarFormParams.put("text", text);
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postWebhookAsSlackMessageValidateBeforeCall(String webhookId, String fileURL, String filename, Boolean markdown, String subject, String text, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'webhookId' is set
        if (webhookId == null) {
            throw new ApiException("Missing the required parameter 'webhookId' when calling postWebhookAsSlackMessage(Async)");
        }

        return postWebhookAsSlackMessageCall(webhookId, fileURL, filename, markdown, subject, text, _callback);

    }

    /**
     * Post text item for conversation via webhook.
     * Post text items to conversations via slack apps.
     * @param webhookId The id of the webhook. (required)
     * @param fileURL missing documentation (optional)
     * @param filename missing documentation (optional)
     * @param markdown missing documentation (optional)
     * @param subject missing documentation (optional)
     * @param text The text which will occur in the conversation. May contain formats like *bold* or _italic_ (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Message was posted to conversation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request cannot be fulfilled due to bad syntax </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public void postWebhookAsSlackMessage(String webhookId, String fileURL, String filename, Boolean markdown, String subject, String text) throws ApiException {
        postWebhookAsSlackMessageWithHttpInfo(webhookId, fileURL, filename, markdown, subject, text);
    }

    /**
     * Post text item for conversation via webhook.
     * Post text items to conversations via slack apps.
     * @param webhookId The id of the webhook. (required)
     * @param fileURL missing documentation (optional)
     * @param filename missing documentation (optional)
     * @param markdown missing documentation (optional)
     * @param subject missing documentation (optional)
     * @param text The text which will occur in the conversation. May contain formats like *bold* or _italic_ (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Message was posted to conversation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request cannot be fulfilled due to bad syntax </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> postWebhookAsSlackMessageWithHttpInfo(String webhookId, String fileURL, String filename, Boolean markdown, String subject, String text) throws ApiException {
        okhttp3.Call localVarCall = postWebhookAsSlackMessageValidateBeforeCall(webhookId, fileURL, filename, markdown, subject, text, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Post text item for conversation via webhook. (asynchronously)
     * Post text items to conversations via slack apps.
     * @param webhookId The id of the webhook. (required)
     * @param fileURL missing documentation (optional)
     * @param filename missing documentation (optional)
     * @param markdown missing documentation (optional)
     * @param subject missing documentation (optional)
     * @param text The text which will occur in the conversation. May contain formats like *bold* or _italic_ (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Message was posted to conversation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request cannot be fulfilled due to bad syntax </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postWebhookAsSlackMessageAsync(String webhookId, String fileURL, String filename, Boolean markdown, String subject, String text, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = postWebhookAsSlackMessageValidateBeforeCall(webhookId, fileURL, filename, markdown, subject, text, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
