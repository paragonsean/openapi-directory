/*
 * REST API Version 2
 * Circuit REST API to interact with the Circuit system.  [Learn more about the Circuit Development Community](https://www.circuit.com/web/developers/home)
 *
 * The version of the OpenAPI document: 2.9.235
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Attachment;
import org.openapitools.client.model.ConversationTextItem;
import org.openapitools.client.model.RtcItem;
import org.openapitools.client.model.SystemItem;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ConversationItem
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:29:23.236704-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ConversationItem {
  public static final String SERIALIZED_NAME_ATTACHMENTS = "attachments";
  @SerializedName(SERIALIZED_NAME_ATTACHMENTS)
  private List<Attachment> attachments = new ArrayList<>();

  public static final String SERIALIZED_NAME_CONV_ID = "convId";
  @SerializedName(SERIALIZED_NAME_CONV_ID)
  private String convId;

  public static final String SERIALIZED_NAME_CREATION_TIME = "creationTime";
  @SerializedName(SERIALIZED_NAME_CREATION_TIME)
  private BigDecimal creationTime;

  public static final String SERIALIZED_NAME_CREATOR_ID = "creatorId";
  @SerializedName(SERIALIZED_NAME_CREATOR_ID)
  private String creatorId;

  public static final String SERIALIZED_NAME_INCLUDE_IN_UNREAD_COUNT = "includeInUnreadCount";
  @SerializedName(SERIALIZED_NAME_INCLUDE_IN_UNREAD_COUNT)
  private Boolean includeInUnreadCount;

  public static final String SERIALIZED_NAME_ITEM_ID = "itemId";
  @SerializedName(SERIALIZED_NAME_ITEM_ID)
  private String itemId;

  public static final String SERIALIZED_NAME_MODIFICATION_TIME = "modificationTime";
  @SerializedName(SERIALIZED_NAME_MODIFICATION_TIME)
  private BigDecimal modificationTime;

  public static final String SERIALIZED_NAME_RTC = "rtc";
  @SerializedName(SERIALIZED_NAME_RTC)
  private RtcItem rtc;

  public static final String SERIALIZED_NAME_SYSTEM = "system";
  @SerializedName(SERIALIZED_NAME_SYSTEM)
  private SystemItem system;

  public static final String SERIALIZED_NAME_TEXT = "text";
  @SerializedName(SERIALIZED_NAME_TEXT)
  private ConversationTextItem text;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public ConversationItem() {
  }

  public ConversationItem attachments(List<Attachment> attachments) {
    this.attachments = attachments;
    return this;
  }

  public ConversationItem addAttachmentsItem(Attachment attachmentsItem) {
    if (this.attachments == null) {
      this.attachments = new ArrayList<>();
    }
    this.attachments.add(attachmentsItem);
    return this;
  }

  /**
   * Array of files attached to the item
   * @return attachments
   */
  @javax.annotation.Nullable
  public List<Attachment> getAttachments() {
    return attachments;
  }

  public void setAttachments(List<Attachment> attachments) {
    this.attachments = attachments;
  }


  public ConversationItem convId(String convId) {
    this.convId = convId;
    return this;
  }

  /**
   * The ID of the conversation the item belongs to
   * @return convId
   */
  @javax.annotation.Nullable
  public String getConvId() {
    return convId;
  }

  public void setConvId(String convId) {
    this.convId = convId;
  }


  public ConversationItem creationTime(BigDecimal creationTime) {
    this.creationTime = creationTime;
    return this;
  }

  /**
   * UTC timestamp when the item was created
   * @return creationTime
   */
  @javax.annotation.Nullable
  public BigDecimal getCreationTime() {
    return creationTime;
  }

  public void setCreationTime(BigDecimal creationTime) {
    this.creationTime = creationTime;
  }


  public ConversationItem creatorId(String creatorId) {
    this.creatorId = creatorId;
    return this;
  }

  /**
   * The ID of the user who created the conversation item
   * @return creatorId
   */
  @javax.annotation.Nullable
  public String getCreatorId() {
    return creatorId;
  }

  public void setCreatorId(String creatorId) {
    this.creatorId = creatorId;
  }


  public ConversationItem includeInUnreadCount(Boolean includeInUnreadCount) {
    this.includeInUnreadCount = includeInUnreadCount;
    return this;
  }

  /**
   * Indicates whether the item is included in the unread message count
   * @return includeInUnreadCount
   */
  @javax.annotation.Nullable
  public Boolean getIncludeInUnreadCount() {
    return includeInUnreadCount;
  }

  public void setIncludeInUnreadCount(Boolean includeInUnreadCount) {
    this.includeInUnreadCount = includeInUnreadCount;
  }


  public ConversationItem itemId(String itemId) {
    this.itemId = itemId;
    return this;
  }

  /**
   * The ID of the item
   * @return itemId
   */
  @javax.annotation.Nullable
  public String getItemId() {
    return itemId;
  }

  public void setItemId(String itemId) {
    this.itemId = itemId;
  }


  public ConversationItem modificationTime(BigDecimal modificationTime) {
    this.modificationTime = modificationTime;
    return this;
  }

  /**
   * UTC timestamp when the conversation was modified
   * @return modificationTime
   */
  @javax.annotation.Nullable
  public BigDecimal getModificationTime() {
    return modificationTime;
  }

  public void setModificationTime(BigDecimal modificationTime) {
    this.modificationTime = modificationTime;
  }


  public ConversationItem rtc(RtcItem rtc) {
    this.rtc = rtc;
    return this;
  }

  /**
   * Get rtc
   * @return rtc
   */
  @javax.annotation.Nullable
  public RtcItem getRtc() {
    return rtc;
  }

  public void setRtc(RtcItem rtc) {
    this.rtc = rtc;
  }


  public ConversationItem system(SystemItem system) {
    this.system = system;
    return this;
  }

  /**
   * Get system
   * @return system
   */
  @javax.annotation.Nullable
  public SystemItem getSystem() {
    return system;
  }

  public void setSystem(SystemItem system) {
    this.system = system;
  }


  public ConversationItem text(ConversationTextItem text) {
    this.text = text;
    return this;
  }

  /**
   * Get text
   * @return text
   */
  @javax.annotation.Nullable
  public ConversationTextItem getText() {
    return text;
  }

  public void setText(ConversationTextItem text) {
    this.text = text;
  }


  public ConversationItem type(String type) {
    this.type = type;
    return this;
  }

  /**
   * The type of the conversation item. It can be one of the following TEXT, SYSTEM or RTC
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConversationItem conversationItem = (ConversationItem) o;
    return Objects.equals(this.attachments, conversationItem.attachments) &&
        Objects.equals(this.convId, conversationItem.convId) &&
        Objects.equals(this.creationTime, conversationItem.creationTime) &&
        Objects.equals(this.creatorId, conversationItem.creatorId) &&
        Objects.equals(this.includeInUnreadCount, conversationItem.includeInUnreadCount) &&
        Objects.equals(this.itemId, conversationItem.itemId) &&
        Objects.equals(this.modificationTime, conversationItem.modificationTime) &&
        Objects.equals(this.rtc, conversationItem.rtc) &&
        Objects.equals(this.system, conversationItem.system) &&
        Objects.equals(this.text, conversationItem.text) &&
        Objects.equals(this.type, conversationItem.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(attachments, convId, creationTime, creatorId, includeInUnreadCount, itemId, modificationTime, rtc, system, text, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConversationItem {\n");
    sb.append("    attachments: ").append(toIndentedString(attachments)).append("\n");
    sb.append("    convId: ").append(toIndentedString(convId)).append("\n");
    sb.append("    creationTime: ").append(toIndentedString(creationTime)).append("\n");
    sb.append("    creatorId: ").append(toIndentedString(creatorId)).append("\n");
    sb.append("    includeInUnreadCount: ").append(toIndentedString(includeInUnreadCount)).append("\n");
    sb.append("    itemId: ").append(toIndentedString(itemId)).append("\n");
    sb.append("    modificationTime: ").append(toIndentedString(modificationTime)).append("\n");
    sb.append("    rtc: ").append(toIndentedString(rtc)).append("\n");
    sb.append("    system: ").append(toIndentedString(system)).append("\n");
    sb.append("    text: ").append(toIndentedString(text)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("attachments");
    openapiFields.add("convId");
    openapiFields.add("creationTime");
    openapiFields.add("creatorId");
    openapiFields.add("includeInUnreadCount");
    openapiFields.add("itemId");
    openapiFields.add("modificationTime");
    openapiFields.add("rtc");
    openapiFields.add("system");
    openapiFields.add("text");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ConversationItem
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ConversationItem.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ConversationItem is not found in the empty JSON string", ConversationItem.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ConversationItem.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ConversationItem` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("attachments") != null && !jsonObj.get("attachments").isJsonNull()) {
        JsonArray jsonArrayattachments = jsonObj.getAsJsonArray("attachments");
        if (jsonArrayattachments != null) {
          // ensure the json data is an array
          if (!jsonObj.get("attachments").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `attachments` to be an array in the JSON string but got `%s`", jsonObj.get("attachments").toString()));
          }

          // validate the optional field `attachments` (array)
          for (int i = 0; i < jsonArrayattachments.size(); i++) {
            Attachment.validateJsonElement(jsonArrayattachments.get(i));
          };
        }
      }
      if ((jsonObj.get("convId") != null && !jsonObj.get("convId").isJsonNull()) && !jsonObj.get("convId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `convId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("convId").toString()));
      }
      if ((jsonObj.get("creatorId") != null && !jsonObj.get("creatorId").isJsonNull()) && !jsonObj.get("creatorId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `creatorId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("creatorId").toString()));
      }
      if ((jsonObj.get("itemId") != null && !jsonObj.get("itemId").isJsonNull()) && !jsonObj.get("itemId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `itemId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("itemId").toString()));
      }
      // validate the optional field `rtc`
      if (jsonObj.get("rtc") != null && !jsonObj.get("rtc").isJsonNull()) {
        RtcItem.validateJsonElement(jsonObj.get("rtc"));
      }
      // validate the optional field `system`
      if (jsonObj.get("system") != null && !jsonObj.get("system").isJsonNull()) {
        SystemItem.validateJsonElement(jsonObj.get("system"));
      }
      // validate the optional field `text`
      if (jsonObj.get("text") != null && !jsonObj.get("text").isJsonNull()) {
        ConversationTextItem.validateJsonElement(jsonObj.get("text"));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ConversationItem.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ConversationItem' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ConversationItem> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ConversationItem.class));

       return (TypeAdapter<T>) new TypeAdapter<ConversationItem>() {
           @Override
           public void write(JsonWriter out, ConversationItem value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ConversationItem read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ConversationItem given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ConversationItem
   * @throws IOException if the JSON string is invalid with respect to ConversationItem
   */
  public static ConversationItem fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ConversationItem.class);
  }

  /**
   * Convert an instance of ConversationItem to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

