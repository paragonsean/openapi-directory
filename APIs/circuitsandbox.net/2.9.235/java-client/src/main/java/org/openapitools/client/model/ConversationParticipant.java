/*
 * REST API Version 2
 * Circuit REST API to interact with the Circuit system.  [Learn more about the Circuit Development Community](https://www.circuit.com/web/developers/home)
 *
 * The version of the OpenAPI document: 2.9.235
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ConversationParticipant
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:29:23.236704-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ConversationParticipant {
  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_FIRST_NAME = "firstName";
  @SerializedName(SERIALIZED_NAME_FIRST_NAME)
  private String firstName;

  public static final String SERIALIZED_NAME_IS_DELETED = "isDeleted";
  @SerializedName(SERIALIZED_NAME_IS_DELETED)
  private Boolean isDeleted;

  public static final String SERIALIZED_NAME_LARGE_IMAGE_URI = "largeImageUri";
  @SerializedName(SERIALIZED_NAME_LARGE_IMAGE_URI)
  private String largeImageUri;

  public static final String SERIALIZED_NAME_LAST_NAME = "lastName";
  @SerializedName(SERIALIZED_NAME_LAST_NAME)
  private String lastName;

  public static final String SERIALIZED_NAME_SMALL_IMAGE_URI = "smallImageUri";
  @SerializedName(SERIALIZED_NAME_SMALL_IMAGE_URI)
  private String smallImageUri;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_USER_ID = "userId";
  @SerializedName(SERIALIZED_NAME_USER_ID)
  private String userId;

  public ConversationParticipant() {
  }

  public ConversationParticipant displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * The display name of the participant.
   * @return displayName
   */
  @javax.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public ConversationParticipant firstName(String firstName) {
    this.firstName = firstName;
    return this;
  }

  /**
   * The first name of the participant.
   * @return firstName
   */
  @javax.annotation.Nullable
  public String getFirstName() {
    return firstName;
  }

  public void setFirstName(String firstName) {
    this.firstName = firstName;
  }


  public ConversationParticipant isDeleted(Boolean isDeleted) {
    this.isDeleted = isDeleted;
    return this;
  }

  /**
   * If the participant is deleted.
   * @return isDeleted
   */
  @javax.annotation.Nullable
  public Boolean getIsDeleted() {
    return isDeleted;
  }

  public void setIsDeleted(Boolean isDeleted) {
    this.isDeleted = isDeleted;
  }


  public ConversationParticipant largeImageUri(String largeImageUri) {
    this.largeImageUri = largeImageUri;
    return this;
  }

  /**
   * The large image uri of the participant.
   * @return largeImageUri
   */
  @javax.annotation.Nullable
  public String getLargeImageUri() {
    return largeImageUri;
  }

  public void setLargeImageUri(String largeImageUri) {
    this.largeImageUri = largeImageUri;
  }


  public ConversationParticipant lastName(String lastName) {
    this.lastName = lastName;
    return this;
  }

  /**
   * The last name of the participant.
   * @return lastName
   */
  @javax.annotation.Nullable
  public String getLastName() {
    return lastName;
  }

  public void setLastName(String lastName) {
    this.lastName = lastName;
  }


  public ConversationParticipant smallImageUri(String smallImageUri) {
    this.smallImageUri = smallImageUri;
    return this;
  }

  /**
   * The small image uri of the participant;
   * @return smallImageUri
   */
  @javax.annotation.Nullable
  public String getSmallImageUri() {
    return smallImageUri;
  }

  public void setSmallImageUri(String smallImageUri) {
    this.smallImageUri = smallImageUri;
  }


  public ConversationParticipant type(String type) {
    this.type = type;
    return this;
  }

  /**
   * The type of the participant
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }


  public ConversationParticipant userId(String userId) {
    this.userId = userId;
    return this;
  }

  /**
   * The unique user id of the participant.
   * @return userId
   */
  @javax.annotation.Nullable
  public String getUserId() {
    return userId;
  }

  public void setUserId(String userId) {
    this.userId = userId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConversationParticipant conversationParticipant = (ConversationParticipant) o;
    return Objects.equals(this.displayName, conversationParticipant.displayName) &&
        Objects.equals(this.firstName, conversationParticipant.firstName) &&
        Objects.equals(this.isDeleted, conversationParticipant.isDeleted) &&
        Objects.equals(this.largeImageUri, conversationParticipant.largeImageUri) &&
        Objects.equals(this.lastName, conversationParticipant.lastName) &&
        Objects.equals(this.smallImageUri, conversationParticipant.smallImageUri) &&
        Objects.equals(this.type, conversationParticipant.type) &&
        Objects.equals(this.userId, conversationParticipant.userId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(displayName, firstName, isDeleted, largeImageUri, lastName, smallImageUri, type, userId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConversationParticipant {\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    firstName: ").append(toIndentedString(firstName)).append("\n");
    sb.append("    isDeleted: ").append(toIndentedString(isDeleted)).append("\n");
    sb.append("    largeImageUri: ").append(toIndentedString(largeImageUri)).append("\n");
    sb.append("    lastName: ").append(toIndentedString(lastName)).append("\n");
    sb.append("    smallImageUri: ").append(toIndentedString(smallImageUri)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("displayName");
    openapiFields.add("firstName");
    openapiFields.add("isDeleted");
    openapiFields.add("largeImageUri");
    openapiFields.add("lastName");
    openapiFields.add("smallImageUri");
    openapiFields.add("type");
    openapiFields.add("userId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ConversationParticipant
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ConversationParticipant.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ConversationParticipant is not found in the empty JSON string", ConversationParticipant.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ConversationParticipant.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ConversationParticipant` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("displayName") != null && !jsonObj.get("displayName").isJsonNull()) && !jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      if ((jsonObj.get("firstName") != null && !jsonObj.get("firstName").isJsonNull()) && !jsonObj.get("firstName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `firstName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("firstName").toString()));
      }
      if ((jsonObj.get("largeImageUri") != null && !jsonObj.get("largeImageUri").isJsonNull()) && !jsonObj.get("largeImageUri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `largeImageUri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("largeImageUri").toString()));
      }
      if ((jsonObj.get("lastName") != null && !jsonObj.get("lastName").isJsonNull()) && !jsonObj.get("lastName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastName").toString()));
      }
      if ((jsonObj.get("smallImageUri") != null && !jsonObj.get("smallImageUri").isJsonNull()) && !jsonObj.get("smallImageUri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `smallImageUri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("smallImageUri").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      if ((jsonObj.get("userId") != null && !jsonObj.get("userId").isJsonNull()) && !jsonObj.get("userId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ConversationParticipant.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ConversationParticipant' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ConversationParticipant> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ConversationParticipant.class));

       return (TypeAdapter<T>) new TypeAdapter<ConversationParticipant>() {
           @Override
           public void write(JsonWriter out, ConversationParticipant value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ConversationParticipant read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ConversationParticipant given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ConversationParticipant
   * @throws IOException if the JSON string is invalid with respect to ConversationParticipant
   */
  public static ConversationParticipant fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ConversationParticipant.class);
  }

  /**
   * Convert an instance of ConversationParticipant to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

