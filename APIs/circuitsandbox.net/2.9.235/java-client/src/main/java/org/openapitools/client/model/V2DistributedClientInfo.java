/*
 * REST API Version 2
 * Circuit REST API to interact with the Circuit system.  [Learn more about the Circuit Development Community](https://www.circuit.com/web/developers/home)
 *
 * The version of the OpenAPI document: 2.9.235
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * V2DistributedClientInfo
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:29:23.236704-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class V2DistributedClientInfo {
  public static final String SERIALIZED_NAME_CLIENT_ID = "clientId";
  @SerializedName(SERIALIZED_NAME_CLIENT_ID)
  private String clientId;

  public static final String SERIALIZED_NAME_CLIENT_VERSION = "clientVersion";
  @SerializedName(SERIALIZED_NAME_CLIENT_VERSION)
  private String clientVersion;

  public static final String SERIALIZED_NAME_DEVICE_SUBTYPE = "deviceSubtype";
  @SerializedName(SERIALIZED_NAME_DEVICE_SUBTYPE)
  private String deviceSubtype;

  public static final String SERIALIZED_NAME_DEVICE_TYPE = "deviceType";
  @SerializedName(SERIALIZED_NAME_DEVICE_TYPE)
  private String deviceType;

  public static final String SERIALIZED_NAME_HARDWARE_MODEL = "hardwareModel";
  @SerializedName(SERIALIZED_NAME_HARDWARE_MODEL)
  private String hardwareModel;

  public static final String SERIALIZED_NAME_HOME_NODE = "homeNode";
  @SerializedName(SERIALIZED_NAME_HOME_NODE)
  private String homeNode;

  public static final String SERIALIZED_NAME_MANUFACTURER = "manufacturer";
  @SerializedName(SERIALIZED_NAME_MANUFACTURER)
  private String manufacturer;

  public static final String SERIALIZED_NAME_OS_VERSION = "osVersion";
  @SerializedName(SERIALIZED_NAME_OS_VERSION)
  private String osVersion;

  public static final String SERIALIZED_NAME_USER_ID = "userId";
  @SerializedName(SERIALIZED_NAME_USER_ID)
  private String userId;

  public V2DistributedClientInfo() {
  }

  public V2DistributedClientInfo clientId(String clientId) {
    this.clientId = clientId;
    return this;
  }

  /**
   * The client id
   * @return clientId
   */
  @javax.annotation.Nullable
  public String getClientId() {
    return clientId;
  }

  public void setClientId(String clientId) {
    this.clientId = clientId;
  }


  public V2DistributedClientInfo clientVersion(String clientVersion) {
    this.clientVersion = clientVersion;
    return this;
  }

  /**
   * The version of the client
   * @return clientVersion
   */
  @javax.annotation.Nullable
  public String getClientVersion() {
    return clientVersion;
  }

  public void setClientVersion(String clientVersion) {
    this.clientVersion = clientVersion;
  }


  public V2DistributedClientInfo deviceSubtype(String deviceSubtype) {
    this.deviceSubtype = deviceSubtype;
    return this;
  }

  /**
   * The device sub type
   * @return deviceSubtype
   */
  @javax.annotation.Nullable
  public String getDeviceSubtype() {
    return deviceSubtype;
  }

  public void setDeviceSubtype(String deviceSubtype) {
    this.deviceSubtype = deviceSubtype;
  }


  public V2DistributedClientInfo deviceType(String deviceType) {
    this.deviceType = deviceType;
    return this;
  }

  /**
   * The devicetype
   * @return deviceType
   */
  @javax.annotation.Nullable
  public String getDeviceType() {
    return deviceType;
  }

  public void setDeviceType(String deviceType) {
    this.deviceType = deviceType;
  }


  public V2DistributedClientInfo hardwareModel(String hardwareModel) {
    this.hardwareModel = hardwareModel;
    return this;
  }

  /**
   * The hardware model
   * @return hardwareModel
   */
  @javax.annotation.Nullable
  public String getHardwareModel() {
    return hardwareModel;
  }

  public void setHardwareModel(String hardwareModel) {
    this.hardwareModel = hardwareModel;
  }


  public V2DistributedClientInfo homeNode(String homeNode) {
    this.homeNode = homeNode;
    return this;
  }

  /**
   * The home node name
   * @return homeNode
   */
  @javax.annotation.Nullable
  public String getHomeNode() {
    return homeNode;
  }

  public void setHomeNode(String homeNode) {
    this.homeNode = homeNode;
  }


  public V2DistributedClientInfo manufacturer(String manufacturer) {
    this.manufacturer = manufacturer;
    return this;
  }

  /**
   * The manufacturer
   * @return manufacturer
   */
  @javax.annotation.Nullable
  public String getManufacturer() {
    return manufacturer;
  }

  public void setManufacturer(String manufacturer) {
    this.manufacturer = manufacturer;
  }


  public V2DistributedClientInfo osVersion(String osVersion) {
    this.osVersion = osVersion;
    return this;
  }

  /**
   * The version of the operating system
   * @return osVersion
   */
  @javax.annotation.Nullable
  public String getOsVersion() {
    return osVersion;
  }

  public void setOsVersion(String osVersion) {
    this.osVersion = osVersion;
  }


  public V2DistributedClientInfo userId(String userId) {
    this.userId = userId;
    return this;
  }

  /**
   * The user id
   * @return userId
   */
  @javax.annotation.Nullable
  public String getUserId() {
    return userId;
  }

  public void setUserId(String userId) {
    this.userId = userId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    V2DistributedClientInfo v2DistributedClientInfo = (V2DistributedClientInfo) o;
    return Objects.equals(this.clientId, v2DistributedClientInfo.clientId) &&
        Objects.equals(this.clientVersion, v2DistributedClientInfo.clientVersion) &&
        Objects.equals(this.deviceSubtype, v2DistributedClientInfo.deviceSubtype) &&
        Objects.equals(this.deviceType, v2DistributedClientInfo.deviceType) &&
        Objects.equals(this.hardwareModel, v2DistributedClientInfo.hardwareModel) &&
        Objects.equals(this.homeNode, v2DistributedClientInfo.homeNode) &&
        Objects.equals(this.manufacturer, v2DistributedClientInfo.manufacturer) &&
        Objects.equals(this.osVersion, v2DistributedClientInfo.osVersion) &&
        Objects.equals(this.userId, v2DistributedClientInfo.userId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(clientId, clientVersion, deviceSubtype, deviceType, hardwareModel, homeNode, manufacturer, osVersion, userId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class V2DistributedClientInfo {\n");
    sb.append("    clientId: ").append(toIndentedString(clientId)).append("\n");
    sb.append("    clientVersion: ").append(toIndentedString(clientVersion)).append("\n");
    sb.append("    deviceSubtype: ").append(toIndentedString(deviceSubtype)).append("\n");
    sb.append("    deviceType: ").append(toIndentedString(deviceType)).append("\n");
    sb.append("    hardwareModel: ").append(toIndentedString(hardwareModel)).append("\n");
    sb.append("    homeNode: ").append(toIndentedString(homeNode)).append("\n");
    sb.append("    manufacturer: ").append(toIndentedString(manufacturer)).append("\n");
    sb.append("    osVersion: ").append(toIndentedString(osVersion)).append("\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("clientId");
    openapiFields.add("clientVersion");
    openapiFields.add("deviceSubtype");
    openapiFields.add("deviceType");
    openapiFields.add("hardwareModel");
    openapiFields.add("homeNode");
    openapiFields.add("manufacturer");
    openapiFields.add("osVersion");
    openapiFields.add("userId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to V2DistributedClientInfo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!V2DistributedClientInfo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in V2DistributedClientInfo is not found in the empty JSON string", V2DistributedClientInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!V2DistributedClientInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `V2DistributedClientInfo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("clientId") != null && !jsonObj.get("clientId").isJsonNull()) && !jsonObj.get("clientId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clientId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clientId").toString()));
      }
      if ((jsonObj.get("clientVersion") != null && !jsonObj.get("clientVersion").isJsonNull()) && !jsonObj.get("clientVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clientVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clientVersion").toString()));
      }
      if ((jsonObj.get("deviceSubtype") != null && !jsonObj.get("deviceSubtype").isJsonNull()) && !jsonObj.get("deviceSubtype").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `deviceSubtype` to be a primitive type in the JSON string but got `%s`", jsonObj.get("deviceSubtype").toString()));
      }
      if ((jsonObj.get("deviceType") != null && !jsonObj.get("deviceType").isJsonNull()) && !jsonObj.get("deviceType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `deviceType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("deviceType").toString()));
      }
      if ((jsonObj.get("hardwareModel") != null && !jsonObj.get("hardwareModel").isJsonNull()) && !jsonObj.get("hardwareModel").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hardwareModel` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hardwareModel").toString()));
      }
      if ((jsonObj.get("homeNode") != null && !jsonObj.get("homeNode").isJsonNull()) && !jsonObj.get("homeNode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `homeNode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("homeNode").toString()));
      }
      if ((jsonObj.get("manufacturer") != null && !jsonObj.get("manufacturer").isJsonNull()) && !jsonObj.get("manufacturer").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `manufacturer` to be a primitive type in the JSON string but got `%s`", jsonObj.get("manufacturer").toString()));
      }
      if ((jsonObj.get("osVersion") != null && !jsonObj.get("osVersion").isJsonNull()) && !jsonObj.get("osVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `osVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("osVersion").toString()));
      }
      if ((jsonObj.get("userId") != null && !jsonObj.get("userId").isJsonNull()) && !jsonObj.get("userId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!V2DistributedClientInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'V2DistributedClientInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<V2DistributedClientInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(V2DistributedClientInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<V2DistributedClientInfo>() {
           @Override
           public void write(JsonWriter out, V2DistributedClientInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public V2DistributedClientInfo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of V2DistributedClientInfo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of V2DistributedClientInfo
   * @throws IOException if the JSON string is invalid with respect to V2DistributedClientInfo
   */
  public static V2DistributedClientInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, V2DistributedClientInfo.class);
  }

  /**
   * Convert an instance of V2DistributedClientInfo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

