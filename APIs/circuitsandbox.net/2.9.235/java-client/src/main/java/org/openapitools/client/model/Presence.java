/*
 * REST API Version 2
 * Circuit REST API to interact with the Circuit system.  [Learn more about the Circuit Development Community](https://www.circuit.com/web/developers/home)
 *
 * The version of the OpenAPI document: 2.9.235
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Presence
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:29:23.236704-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Presence {
  public static final String SERIALIZED_NAME_DND_UNTIL = "dndUntil";
  @SerializedName(SERIALIZED_NAME_DND_UNTIL)
  private BigDecimal dndUntil;

  public static final String SERIALIZED_NAME_IS_OPTED_OUT = "isOptedOut";
  @SerializedName(SERIALIZED_NAME_IS_OPTED_OUT)
  private Boolean isOptedOut;

  public static final String SERIALIZED_NAME_LATITUDE = "latitude";
  @SerializedName(SERIALIZED_NAME_LATITUDE)
  private Float latitude;

  public static final String SERIALIZED_NAME_LOCATION_TEXT = "locationText";
  @SerializedName(SERIALIZED_NAME_LOCATION_TEXT)
  private String locationText;

  public static final String SERIALIZED_NAME_LONGITUDE = "longitude";
  @SerializedName(SERIALIZED_NAME_LONGITUDE)
  private Float longitude;

  public static final String SERIALIZED_NAME_MOBILE = "mobile";
  @SerializedName(SERIALIZED_NAME_MOBILE)
  private Boolean mobile;

  public static final String SERIALIZED_NAME_POOR = "poor";
  @SerializedName(SERIALIZED_NAME_POOR)
  private Boolean poor;

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private String state;

  public static final String SERIALIZED_NAME_STATUS_MESSAGE = "statusMessage";
  @SerializedName(SERIALIZED_NAME_STATUS_MESSAGE)
  private String statusMessage;

  public static final String SERIALIZED_NAME_TIME_ZONE_OFFSET = "timeZoneOffset";
  @SerializedName(SERIALIZED_NAME_TIME_ZONE_OFFSET)
  private BigDecimal timeZoneOffset;

  public static final String SERIALIZED_NAME_USER_ID = "userId";
  @SerializedName(SERIALIZED_NAME_USER_ID)
  private String userId;

  public Presence() {
  }

  public Presence dndUntil(BigDecimal dndUntil) {
    this.dndUntil = dndUntil;
    return this;
  }

  /**
   * Timestamp until the DND state of the user is active
   * @return dndUntil
   */
  @javax.annotation.Nullable
  public BigDecimal getDndUntil() {
    return dndUntil;
  }

  public void setDndUntil(BigDecimal dndUntil) {
    this.dndUntil = dndUntil;
  }


  public Presence isOptedOut(Boolean isOptedOut) {
    this.isOptedOut = isOptedOut;
    return this;
  }

  /**
   * Indicates whether the user has opted out of their presence
   * @return isOptedOut
   */
  @javax.annotation.Nullable
  public Boolean getIsOptedOut() {
    return isOptedOut;
  }

  public void setIsOptedOut(Boolean isOptedOut) {
    this.isOptedOut = isOptedOut;
  }


  public Presence latitude(Float latitude) {
    this.latitude = latitude;
    return this;
  }

  /**
   * The latitude of the geo location of the user
   * @return latitude
   */
  @javax.annotation.Nullable
  public Float getLatitude() {
    return latitude;
  }

  public void setLatitude(Float latitude) {
    this.latitude = latitude;
  }


  public Presence locationText(String locationText) {
    this.locationText = locationText;
    return this;
  }

  /**
   * The geo location of the user in clear text
   * @return locationText
   */
  @javax.annotation.Nullable
  public String getLocationText() {
    return locationText;
  }

  public void setLocationText(String locationText) {
    this.locationText = locationText;
  }


  public Presence longitude(Float longitude) {
    this.longitude = longitude;
    return this;
  }

  /**
   * The longitude of the geo location of the user
   * @return longitude
   */
  @javax.annotation.Nullable
  public Float getLongitude() {
    return longitude;
  }

  public void setLongitude(Float longitude) {
    this.longitude = longitude;
  }


  public Presence mobile(Boolean mobile) {
    this.mobile = mobile;
    return this;
  }

  /**
   * Identifies whether the presence state is based on the state information of a mobile device or not
   * @return mobile
   */
  @javax.annotation.Nullable
  public Boolean getMobile() {
    return mobile;
  }

  public void setMobile(Boolean mobile) {
    this.mobile = mobile;
  }


  public Presence poor(Boolean poor) {
    this.poor = poor;
    return this;
  }

  /**
   * n/a
   * @return poor
   */
  @javax.annotation.Nullable
  public Boolean getPoor() {
    return poor;
  }

  public void setPoor(Boolean poor) {
    this.poor = poor;
  }


  public Presence state(String state) {
    this.state = state;
    return this;
  }

  /**
   * The presence state of the user. It can be one of the following: AVAILABLE, OFFLINE, AWAY, BUSY, or DND (Do-Not-Disturb)
   * @return state
   */
  @javax.annotation.Nullable
  public String getState() {
    return state;
  }

  public void setState(String state) {
    this.state = state;
  }


  public Presence statusMessage(String statusMessage) {
    this.statusMessage = statusMessage;
    return this;
  }

  /**
   * A free formed status message of the user
   * @return statusMessage
   */
  @javax.annotation.Nullable
  public String getStatusMessage() {
    return statusMessage;
  }

  public void setStatusMessage(String statusMessage) {
    this.statusMessage = statusMessage;
  }


  public Presence timeZoneOffset(BigDecimal timeZoneOffset) {
    this.timeZoneOffset = timeZoneOffset;
    return this;
  }

  /**
   * The timezone offset of the user compared to UTC
   * @return timeZoneOffset
   */
  @javax.annotation.Nullable
  public BigDecimal getTimeZoneOffset() {
    return timeZoneOffset;
  }

  public void setTimeZoneOffset(BigDecimal timeZoneOffset) {
    this.timeZoneOffset = timeZoneOffset;
  }


  public Presence userId(String userId) {
    this.userId = userId;
    return this;
  }

  /**
   * The ID of the user
   * @return userId
   */
  @javax.annotation.Nullable
  public String getUserId() {
    return userId;
  }

  public void setUserId(String userId) {
    this.userId = userId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Presence presence = (Presence) o;
    return Objects.equals(this.dndUntil, presence.dndUntil) &&
        Objects.equals(this.isOptedOut, presence.isOptedOut) &&
        Objects.equals(this.latitude, presence.latitude) &&
        Objects.equals(this.locationText, presence.locationText) &&
        Objects.equals(this.longitude, presence.longitude) &&
        Objects.equals(this.mobile, presence.mobile) &&
        Objects.equals(this.poor, presence.poor) &&
        Objects.equals(this.state, presence.state) &&
        Objects.equals(this.statusMessage, presence.statusMessage) &&
        Objects.equals(this.timeZoneOffset, presence.timeZoneOffset) &&
        Objects.equals(this.userId, presence.userId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dndUntil, isOptedOut, latitude, locationText, longitude, mobile, poor, state, statusMessage, timeZoneOffset, userId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Presence {\n");
    sb.append("    dndUntil: ").append(toIndentedString(dndUntil)).append("\n");
    sb.append("    isOptedOut: ").append(toIndentedString(isOptedOut)).append("\n");
    sb.append("    latitude: ").append(toIndentedString(latitude)).append("\n");
    sb.append("    locationText: ").append(toIndentedString(locationText)).append("\n");
    sb.append("    longitude: ").append(toIndentedString(longitude)).append("\n");
    sb.append("    mobile: ").append(toIndentedString(mobile)).append("\n");
    sb.append("    poor: ").append(toIndentedString(poor)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    statusMessage: ").append(toIndentedString(statusMessage)).append("\n");
    sb.append("    timeZoneOffset: ").append(toIndentedString(timeZoneOffset)).append("\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("dndUntil");
    openapiFields.add("isOptedOut");
    openapiFields.add("latitude");
    openapiFields.add("locationText");
    openapiFields.add("longitude");
    openapiFields.add("mobile");
    openapiFields.add("poor");
    openapiFields.add("state");
    openapiFields.add("statusMessage");
    openapiFields.add("timeZoneOffset");
    openapiFields.add("userId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Presence
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Presence.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Presence is not found in the empty JSON string", Presence.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Presence.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Presence` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("locationText") != null && !jsonObj.get("locationText").isJsonNull()) && !jsonObj.get("locationText").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `locationText` to be a primitive type in the JSON string but got `%s`", jsonObj.get("locationText").toString()));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      if ((jsonObj.get("statusMessage") != null && !jsonObj.get("statusMessage").isJsonNull()) && !jsonObj.get("statusMessage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `statusMessage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("statusMessage").toString()));
      }
      if ((jsonObj.get("userId") != null && !jsonObj.get("userId").isJsonNull()) && !jsonObj.get("userId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Presence.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Presence' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Presence> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Presence.class));

       return (TypeAdapter<T>) new TypeAdapter<Presence>() {
           @Override
           public void write(JsonWriter out, Presence value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Presence read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Presence given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Presence
   * @throws IOException if the JSON string is invalid with respect to Presence
   */
  public static Presence fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Presence.class);
  }

  /**
   * Convert an instance of Presence to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

