/*
 * REST API Version 2
 * Circuit REST API to interact with the Circuit system.  [Learn more about the Circuit Development Community](https://www.circuit.com/web/developers/home)
 *
 * The version of the OpenAPI document: 2.9.235
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * SpaceAttachment
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:29:23.236704-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SpaceAttachment {
  public static final String SERIALIZED_NAME_CREATION_TIME = "creationTime";
  @SerializedName(SERIALIZED_NAME_CREATION_TIME)
  private BigDecimal creationTime;

  public static final String SERIALIZED_NAME_CREATOR_ID = "creatorId";
  @SerializedName(SERIALIZED_NAME_CREATOR_ID)
  private String creatorId;

  public static final String SERIALIZED_NAME_FILE_ID = "fileId";
  @SerializedName(SERIALIZED_NAME_FILE_ID)
  private String fileId;

  public static final String SERIALIZED_NAME_FILE_NAME = "fileName";
  @SerializedName(SERIALIZED_NAME_FILE_NAME)
  private String fileName;

  public static final String SERIALIZED_NAME_INLINE_USAGE = "inlineUsage";
  @SerializedName(SERIALIZED_NAME_INLINE_USAGE)
  private Boolean inlineUsage;

  public static final String SERIALIZED_NAME_ITEM_ID = "itemId";
  @SerializedName(SERIALIZED_NAME_ITEM_ID)
  private String itemId;

  public static final String SERIALIZED_NAME_LAYOUT = "layout";
  @SerializedName(SERIALIZED_NAME_LAYOUT)
  private String layout;

  public static final String SERIALIZED_NAME_MIME_TYPE = "mimeType";
  @SerializedName(SERIALIZED_NAME_MIME_TYPE)
  private String mimeType;

  public static final String SERIALIZED_NAME_MODIFICATION_TIME = "modificationTime";
  @SerializedName(SERIALIZED_NAME_MODIFICATION_TIME)
  private BigDecimal modificationTime;

  public static final String SERIALIZED_NAME_SIZE = "size";
  @SerializedName(SERIALIZED_NAME_SIZE)
  private BigDecimal size;

  public static final String SERIALIZED_NAME_SPACE_ID = "spaceId";
  @SerializedName(SERIALIZED_NAME_SPACE_ID)
  private String spaceId;

  public static final String SERIALIZED_NAME_THUMBNAIL_ID = "thumbnailId";
  @SerializedName(SERIALIZED_NAME_THUMBNAIL_ID)
  private String thumbnailId;

  public SpaceAttachment() {
  }

  public SpaceAttachment creationTime(BigDecimal creationTime) {
    this.creationTime = creationTime;
    return this;
  }

  /**
   * time this item has been created
   * @return creationTime
   */
  @javax.annotation.Nullable
  public BigDecimal getCreationTime() {
    return creationTime;
  }

  public void setCreationTime(BigDecimal creationTime) {
    this.creationTime = creationTime;
  }


  public SpaceAttachment creatorId(String creatorId) {
    this.creatorId = creatorId;
    return this;
  }

  /**
   * the id of the creator
   * @return creatorId
   */
  @javax.annotation.Nullable
  public String getCreatorId() {
    return creatorId;
  }

  public void setCreatorId(String creatorId) {
    this.creatorId = creatorId;
  }


  public SpaceAttachment fileId(String fileId) {
    this.fileId = fileId;
    return this;
  }

  /**
   * the id of the field
   * @return fileId
   */
  @javax.annotation.Nullable
  public String getFileId() {
    return fileId;
  }

  public void setFileId(String fileId) {
    this.fileId = fileId;
  }


  public SpaceAttachment fileName(String fileName) {
    this.fileName = fileName;
    return this;
  }

  /**
   * name of the file
   * @return fileName
   */
  @javax.annotation.Nullable
  public String getFileName() {
    return fileName;
  }

  public void setFileName(String fileName) {
    this.fileName = fileName;
  }


  public SpaceAttachment inlineUsage(Boolean inlineUsage) {
    this.inlineUsage = inlineUsage;
    return this;
  }

  /**
   * is inline usage allowed
   * @return inlineUsage
   */
  @javax.annotation.Nullable
  public Boolean getInlineUsage() {
    return inlineUsage;
  }

  public void setInlineUsage(Boolean inlineUsage) {
    this.inlineUsage = inlineUsage;
  }


  public SpaceAttachment itemId(String itemId) {
    this.itemId = itemId;
    return this;
  }

  /**
   * id of the item
   * @return itemId
   */
  @javax.annotation.Nullable
  public String getItemId() {
    return itemId;
  }

  public void setItemId(String itemId) {
    this.itemId = itemId;
  }


  public SpaceAttachment layout(String layout) {
    this.layout = layout;
    return this;
  }

  /**
   * layout
   * @return layout
   */
  @javax.annotation.Nullable
  public String getLayout() {
    return layout;
  }

  public void setLayout(String layout) {
    this.layout = layout;
  }


  public SpaceAttachment mimeType(String mimeType) {
    this.mimeType = mimeType;
    return this;
  }

  /**
   * the media type
   * @return mimeType
   */
  @javax.annotation.Nullable
  public String getMimeType() {
    return mimeType;
  }

  public void setMimeType(String mimeType) {
    this.mimeType = mimeType;
  }


  public SpaceAttachment modificationTime(BigDecimal modificationTime) {
    this.modificationTime = modificationTime;
    return this;
  }

  /**
   * the time this item has been ben modified
   * @return modificationTime
   */
  @javax.annotation.Nullable
  public BigDecimal getModificationTime() {
    return modificationTime;
  }

  public void setModificationTime(BigDecimal modificationTime) {
    this.modificationTime = modificationTime;
  }


  public SpaceAttachment size(BigDecimal size) {
    this.size = size;
    return this;
  }

  /**
   * size of this file
   * @return size
   */
  @javax.annotation.Nullable
  public BigDecimal getSize() {
    return size;
  }

  public void setSize(BigDecimal size) {
    this.size = size;
  }


  public SpaceAttachment spaceId(String spaceId) {
    this.spaceId = spaceId;
    return this;
  }

  /**
   * id of the space
   * @return spaceId
   */
  @javax.annotation.Nullable
  public String getSpaceId() {
    return spaceId;
  }

  public void setSpaceId(String spaceId) {
    this.spaceId = spaceId;
  }


  public SpaceAttachment thumbnailId(String thumbnailId) {
    this.thumbnailId = thumbnailId;
    return this;
  }

  /**
   * the id of the tumbnail
   * @return thumbnailId
   */
  @javax.annotation.Nullable
  public String getThumbnailId() {
    return thumbnailId;
  }

  public void setThumbnailId(String thumbnailId) {
    this.thumbnailId = thumbnailId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SpaceAttachment spaceAttachment = (SpaceAttachment) o;
    return Objects.equals(this.creationTime, spaceAttachment.creationTime) &&
        Objects.equals(this.creatorId, spaceAttachment.creatorId) &&
        Objects.equals(this.fileId, spaceAttachment.fileId) &&
        Objects.equals(this.fileName, spaceAttachment.fileName) &&
        Objects.equals(this.inlineUsage, spaceAttachment.inlineUsage) &&
        Objects.equals(this.itemId, spaceAttachment.itemId) &&
        Objects.equals(this.layout, spaceAttachment.layout) &&
        Objects.equals(this.mimeType, spaceAttachment.mimeType) &&
        Objects.equals(this.modificationTime, spaceAttachment.modificationTime) &&
        Objects.equals(this.size, spaceAttachment.size) &&
        Objects.equals(this.spaceId, spaceAttachment.spaceId) &&
        Objects.equals(this.thumbnailId, spaceAttachment.thumbnailId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(creationTime, creatorId, fileId, fileName, inlineUsage, itemId, layout, mimeType, modificationTime, size, spaceId, thumbnailId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SpaceAttachment {\n");
    sb.append("    creationTime: ").append(toIndentedString(creationTime)).append("\n");
    sb.append("    creatorId: ").append(toIndentedString(creatorId)).append("\n");
    sb.append("    fileId: ").append(toIndentedString(fileId)).append("\n");
    sb.append("    fileName: ").append(toIndentedString(fileName)).append("\n");
    sb.append("    inlineUsage: ").append(toIndentedString(inlineUsage)).append("\n");
    sb.append("    itemId: ").append(toIndentedString(itemId)).append("\n");
    sb.append("    layout: ").append(toIndentedString(layout)).append("\n");
    sb.append("    mimeType: ").append(toIndentedString(mimeType)).append("\n");
    sb.append("    modificationTime: ").append(toIndentedString(modificationTime)).append("\n");
    sb.append("    size: ").append(toIndentedString(size)).append("\n");
    sb.append("    spaceId: ").append(toIndentedString(spaceId)).append("\n");
    sb.append("    thumbnailId: ").append(toIndentedString(thumbnailId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("creationTime");
    openapiFields.add("creatorId");
    openapiFields.add("fileId");
    openapiFields.add("fileName");
    openapiFields.add("inlineUsage");
    openapiFields.add("itemId");
    openapiFields.add("layout");
    openapiFields.add("mimeType");
    openapiFields.add("modificationTime");
    openapiFields.add("size");
    openapiFields.add("spaceId");
    openapiFields.add("thumbnailId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SpaceAttachment
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SpaceAttachment.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SpaceAttachment is not found in the empty JSON string", SpaceAttachment.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SpaceAttachment.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SpaceAttachment` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("creatorId") != null && !jsonObj.get("creatorId").isJsonNull()) && !jsonObj.get("creatorId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `creatorId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("creatorId").toString()));
      }
      if ((jsonObj.get("fileId") != null && !jsonObj.get("fileId").isJsonNull()) && !jsonObj.get("fileId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fileId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fileId").toString()));
      }
      if ((jsonObj.get("fileName") != null && !jsonObj.get("fileName").isJsonNull()) && !jsonObj.get("fileName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fileName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fileName").toString()));
      }
      if ((jsonObj.get("itemId") != null && !jsonObj.get("itemId").isJsonNull()) && !jsonObj.get("itemId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `itemId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("itemId").toString()));
      }
      if ((jsonObj.get("layout") != null && !jsonObj.get("layout").isJsonNull()) && !jsonObj.get("layout").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `layout` to be a primitive type in the JSON string but got `%s`", jsonObj.get("layout").toString()));
      }
      if ((jsonObj.get("mimeType") != null && !jsonObj.get("mimeType").isJsonNull()) && !jsonObj.get("mimeType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mimeType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mimeType").toString()));
      }
      if ((jsonObj.get("spaceId") != null && !jsonObj.get("spaceId").isJsonNull()) && !jsonObj.get("spaceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `spaceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("spaceId").toString()));
      }
      if ((jsonObj.get("thumbnailId") != null && !jsonObj.get("thumbnailId").isJsonNull()) && !jsonObj.get("thumbnailId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `thumbnailId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("thumbnailId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SpaceAttachment.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SpaceAttachment' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SpaceAttachment> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SpaceAttachment.class));

       return (TypeAdapter<T>) new TypeAdapter<SpaceAttachment>() {
           @Override
           public void write(JsonWriter out, SpaceAttachment value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SpaceAttachment read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SpaceAttachment given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SpaceAttachment
   * @throws IOException if the JSON string is invalid with respect to SpaceAttachment
   */
  public static SpaceAttachment fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SpaceAttachment.class);
  }

  /**
   * Convert an instance of SpaceAttachment to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

