/*
 * REST API Version 2
 * Circuit REST API to interact with the Circuit system.  [Learn more about the Circuit Development Community](https://www.circuit.com/web/developers/home)
 *
 * The version of the OpenAPI document: 2.9.235
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AddParticipantsSearchResult;
import org.openapitools.client.model.BasicSearchResult;
import java.math.BigDecimal;
import org.openapitools.client.model.DirectoryResult;
import org.openapitools.client.model.FlaggedItemsResult;
import org.openapitools.client.model.LabelIds;
import java.time.OffsetDateTime;
import org.openapitools.client.model.ParticipantsImportDataResult;
import org.openapitools.client.model.ParticipantsLikeResult;
import org.openapitools.client.model.ParticipantsSearchResult;
import org.openapitools.client.model.ParticipantsSearchResultLarge;
import org.openapitools.client.model.SpacePinnedTopic;
import org.openapitools.client.model.SpaceReply;
import org.openapitools.client.model.SpaceSearchResultDetailedBack;
import org.openapitools.client.model.SpaceTopic;
import org.openapitools.client.model.SpaceTopicWithReplies;
import org.openapitools.client.model.SpacesSearchTermResult;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SpacesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public SpacesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SpacesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for addParticipantsToSpace
     * @param id The id of the space (required)
     * @param role The name of the role of the participant (required)
     * @param userId The user id of the participant (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully added participant. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addParticipantsToSpaceCall(String id, String role, List<String> userId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/spaces/{id}/participant"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (role != null) {
            localVarFormParams.put("role", role);
        }

        if (userId != null) {
            localVarFormParams.put("userId", userId);
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addParticipantsToSpaceValidateBeforeCall(String id, String role, List<String> userId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling addParticipantsToSpace(Async)");
        }

        // verify the required parameter 'role' is set
        if (role == null) {
            throw new ApiException("Missing the required parameter 'role' when calling addParticipantsToSpace(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling addParticipantsToSpace(Async)");
        }

        return addParticipantsToSpaceCall(id, role, userId, _callback);

    }

    /**
     * Add Participant to Space
     * Add a participant to a space OauthScopes: WRITE_SPACE, MANAGE_SPACE
     * @param id The id of the space (required)
     * @param role The name of the role of the participant (required)
     * @param userId The user id of the participant (required)
     * @return List&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully added participant. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public List<Object> addParticipantsToSpace(String id, String role, List<String> userId) throws ApiException {
        ApiResponse<List<Object>> localVarResp = addParticipantsToSpaceWithHttpInfo(id, role, userId);
        return localVarResp.getData();
    }

    /**
     * Add Participant to Space
     * Add a participant to a space OauthScopes: WRITE_SPACE, MANAGE_SPACE
     * @param id The id of the space (required)
     * @param role The name of the role of the participant (required)
     * @param userId The user id of the participant (required)
     * @return ApiResponse&lt;List&lt;Object&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully added participant. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Object>> addParticipantsToSpaceWithHttpInfo(String id, String role, List<String> userId) throws ApiException {
        okhttp3.Call localVarCall = addParticipantsToSpaceValidateBeforeCall(id, role, userId, null);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add Participant to Space (asynchronously)
     * Add a participant to a space OauthScopes: WRITE_SPACE, MANAGE_SPACE
     * @param id The id of the space (required)
     * @param role The name of the role of the participant (required)
     * @param userId The user id of the participant (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successfully added participant. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addParticipantsToSpaceAsync(String id, String role, List<String> userId, final ApiCallback<List<Object>> _callback) throws ApiException {

        okhttp3.Call localVarCall = addParticipantsToSpaceValidateBeforeCall(id, role, userId, _callback);
        Type localVarReturnType = new TypeToken<List<Object>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for addRecentSpaceSearch
     * @param scope The scope of the search. (required)
     * @param searchTerm The term to search for. (required)
     * @param endTime The end time. (optional)
     * @param startTime The start time. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Search successfully added. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addRecentSpaceSearchCall(String scope, String searchTerm, OffsetDateTime endTime, OffsetDateTime startTime, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/spaces/search/add/recent";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (endTime != null) {
            localVarFormParams.put("endTime", endTime);
        }

        if (scope != null) {
            localVarFormParams.put("scope", scope);
        }

        if (searchTerm != null) {
            localVarFormParams.put("searchTerm", searchTerm);
        }

        if (startTime != null) {
            localVarFormParams.put("startTime", startTime);
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addRecentSpaceSearchValidateBeforeCall(String scope, String searchTerm, OffsetDateTime endTime, OffsetDateTime startTime, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'scope' is set
        if (scope == null) {
            throw new ApiException("Missing the required parameter 'scope' when calling addRecentSpaceSearch(Async)");
        }

        // verify the required parameter 'searchTerm' is set
        if (searchTerm == null) {
            throw new ApiException("Missing the required parameter 'searchTerm' when calling addRecentSpaceSearch(Async)");
        }

        return addRecentSpaceSearchCall(scope, searchTerm, endTime, startTime, _callback);

    }

    /**
     * Add recent search 
     * Add recent search of a client to search controller. OauthScopes: WRITE_SPACE, MANAGE_SPACE, ORGANIZE_SPACE
     * @param scope The scope of the search. (required)
     * @param searchTerm The term to search for. (required)
     * @param endTime The end time. (optional)
     * @param startTime The start time. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Search successfully added. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public void addRecentSpaceSearch(String scope, String searchTerm, OffsetDateTime endTime, OffsetDateTime startTime) throws ApiException {
        addRecentSpaceSearchWithHttpInfo(scope, searchTerm, endTime, startTime);
    }

    /**
     * Add recent search 
     * Add recent search of a client to search controller. OauthScopes: WRITE_SPACE, MANAGE_SPACE, ORGANIZE_SPACE
     * @param scope The scope of the search. (required)
     * @param searchTerm The term to search for. (required)
     * @param endTime The end time. (optional)
     * @param startTime The start time. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Search successfully added. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> addRecentSpaceSearchWithHttpInfo(String scope, String searchTerm, OffsetDateTime endTime, OffsetDateTime startTime) throws ApiException {
        okhttp3.Call localVarCall = addRecentSpaceSearchValidateBeforeCall(scope, searchTerm, endTime, startTime, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Add recent search  (asynchronously)
     * Add recent search of a client to search controller. OauthScopes: WRITE_SPACE, MANAGE_SPACE, ORGANIZE_SPACE
     * @param scope The scope of the search. (required)
     * @param searchTerm The term to search for. (required)
     * @param endTime The end time. (optional)
     * @param startTime The start time. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Search successfully added. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addRecentSpaceSearchAsync(String scope, String searchTerm, OffsetDateTime endTime, OffsetDateTime startTime, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = addRecentSpaceSearchValidateBeforeCall(scope, searchTerm, endTime, startTime, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for assignLabels
     * @param id The id of the space. (required)
     * @param labels The labels to assign to the space (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Labels successfully assigned </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call assignLabelsCall(String id, List<String> labels, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/spaces/{id}/labels/assign"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (labels != null) {
            localVarFormParams.put("labels", labels);
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call assignLabelsValidateBeforeCall(String id, List<String> labels, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling assignLabels(Async)");
        }

        // verify the required parameter 'labels' is set
        if (labels == null) {
            throw new ApiException("Missing the required parameter 'labels' when calling assignLabels(Async)");
        }

        return assignLabelsCall(id, labels, _callback);

    }

    /**
     * Assign labels
     * Assign labels to space OauthScopes: WRITE_SPACE, ORGANIZE_SPACE
     * @param id The id of the space. (required)
     * @param labels The labels to assign to the space (required)
     * @return List&lt;LabelIds&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Labels successfully assigned </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public List<LabelIds> assignLabels(String id, List<String> labels) throws ApiException {
        ApiResponse<List<LabelIds>> localVarResp = assignLabelsWithHttpInfo(id, labels);
        return localVarResp.getData();
    }

    /**
     * Assign labels
     * Assign labels to space OauthScopes: WRITE_SPACE, ORGANIZE_SPACE
     * @param id The id of the space. (required)
     * @param labels The labels to assign to the space (required)
     * @return ApiResponse&lt;List&lt;LabelIds&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Labels successfully assigned </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<LabelIds>> assignLabelsWithHttpInfo(String id, List<String> labels) throws ApiException {
        okhttp3.Call localVarCall = assignLabelsValidateBeforeCall(id, labels, null);
        Type localVarReturnType = new TypeToken<List<LabelIds>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Assign labels (asynchronously)
     * Assign labels to space OauthScopes: WRITE_SPACE, ORGANIZE_SPACE
     * @param id The id of the space. (required)
     * @param labels The labels to assign to the space (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Labels successfully assigned </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call assignLabelsAsync(String id, List<String> labels, final ApiCallback<List<LabelIds>> _callback) throws ApiException {

        okhttp3.Call localVarCall = assignLabelsValidateBeforeCall(id, labels, _callback);
        Type localVarReturnType = new TypeToken<List<LabelIds>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for cancelSpaceSearch
     * @param searchId The id of the search to cancel (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Search successfully cancelled. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cancelSpaceSearchCall(String searchId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/spaces/search/cancel/{searchId}"
            .replace("{" + "searchId" + "}", localVarApiClient.escapeString(searchId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cancelSpaceSearchValidateBeforeCall(String searchId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'searchId' is set
        if (searchId == null) {
            throw new ApiException("Missing the required parameter 'searchId' when calling cancelSpaceSearch(Async)");
        }

        return cancelSpaceSearchCall(searchId, _callback);

    }

    /**
     * Cancels a space search of a client.
     * Cancels a space search of a client. OauthScopes: WRITE_SPACE, MANAGE_SPACE
     * @param searchId The id of the search to cancel (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Search successfully cancelled. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public void cancelSpaceSearch(String searchId) throws ApiException {
        cancelSpaceSearchWithHttpInfo(searchId);
    }

    /**
     * Cancels a space search of a client.
     * Cancels a space search of a client. OauthScopes: WRITE_SPACE, MANAGE_SPACE
     * @param searchId The id of the search to cancel (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Search successfully cancelled. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> cancelSpaceSearchWithHttpInfo(String searchId) throws ApiException {
        okhttp3.Call localVarCall = cancelSpaceSearchValidateBeforeCall(searchId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Cancels a space search of a client. (asynchronously)
     * Cancels a space search of a client. OauthScopes: WRITE_SPACE, MANAGE_SPACE
     * @param searchId The id of the search to cancel (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Search successfully cancelled. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cancelSpaceSearchAsync(String searchId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = cancelSpaceSearchValidateBeforeCall(searchId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for createReply
     * @param spaceId ID of the space (required)
     * @param topicId ID of the topic (required)
     * @param attachments the attached files (optional)
     * @param complex complex or not (optional)
     * @param content Content of the reply (optional)
     * @param formMetaData formMetaData used in the reply (optional)
     * @param mentionedUser the user mentioned in the reply (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> returns the created reply </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid input </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createReplyCall(String spaceId, String topicId, List<String> attachments, Boolean complex, String content, String formMetaData, String mentionedUser, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/spaces/{spaceId}/topic/{topicId}/reply"
            .replace("{" + "spaceId" + "}", localVarApiClient.escapeString(spaceId.toString()))
            .replace("{" + "topicId" + "}", localVarApiClient.escapeString(topicId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (attachments != null) {
            localVarFormParams.put("attachments", attachments);
        }

        if (complex != null) {
            localVarFormParams.put("complex", complex);
        }

        if (content != null) {
            localVarFormParams.put("content", content);
        }

        if (formMetaData != null) {
            localVarFormParams.put("formMetaData", formMetaData);
        }

        if (mentionedUser != null) {
            localVarFormParams.put("mentionedUser", mentionedUser);
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createReplyValidateBeforeCall(String spaceId, String topicId, List<String> attachments, Boolean complex, String content, String formMetaData, String mentionedUser, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'spaceId' is set
        if (spaceId == null) {
            throw new ApiException("Missing the required parameter 'spaceId' when calling createReply(Async)");
        }

        // verify the required parameter 'topicId' is set
        if (topicId == null) {
            throw new ApiException("Missing the required parameter 'topicId' when calling createReply(Async)");
        }

        return createReplyCall(spaceId, topicId, attachments, complex, content, formMetaData, mentionedUser, _callback);

    }

    /**
     * creates a reply to a topic
     * creates a reply to a topic OauthScopes: WRITE_SPACE
     * @param spaceId ID of the space (required)
     * @param topicId ID of the topic (required)
     * @param attachments the attached files (optional)
     * @param complex complex or not (optional)
     * @param content Content of the reply (optional)
     * @param formMetaData formMetaData used in the reply (optional)
     * @param mentionedUser the user mentioned in the reply (optional)
     * @return SpaceReply
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> returns the created reply </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid input </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public SpaceReply createReply(String spaceId, String topicId, List<String> attachments, Boolean complex, String content, String formMetaData, String mentionedUser) throws ApiException {
        ApiResponse<SpaceReply> localVarResp = createReplyWithHttpInfo(spaceId, topicId, attachments, complex, content, formMetaData, mentionedUser);
        return localVarResp.getData();
    }

    /**
     * creates a reply to a topic
     * creates a reply to a topic OauthScopes: WRITE_SPACE
     * @param spaceId ID of the space (required)
     * @param topicId ID of the topic (required)
     * @param attachments the attached files (optional)
     * @param complex complex or not (optional)
     * @param content Content of the reply (optional)
     * @param formMetaData formMetaData used in the reply (optional)
     * @param mentionedUser the user mentioned in the reply (optional)
     * @return ApiResponse&lt;SpaceReply&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> returns the created reply </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid input </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SpaceReply> createReplyWithHttpInfo(String spaceId, String topicId, List<String> attachments, Boolean complex, String content, String formMetaData, String mentionedUser) throws ApiException {
        okhttp3.Call localVarCall = createReplyValidateBeforeCall(spaceId, topicId, attachments, complex, content, formMetaData, mentionedUser, null);
        Type localVarReturnType = new TypeToken<SpaceReply>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * creates a reply to a topic (asynchronously)
     * creates a reply to a topic OauthScopes: WRITE_SPACE
     * @param spaceId ID of the space (required)
     * @param topicId ID of the topic (required)
     * @param attachments the attached files (optional)
     * @param complex complex or not (optional)
     * @param content Content of the reply (optional)
     * @param formMetaData formMetaData used in the reply (optional)
     * @param mentionedUser the user mentioned in the reply (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> returns the created reply </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid input </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createReplyAsync(String spaceId, String topicId, List<String> attachments, Boolean complex, String content, String formMetaData, String mentionedUser, final ApiCallback<SpaceReply> _callback) throws ApiException {

        okhttp3.Call localVarCall = createReplyValidateBeforeCall(spaceId, topicId, attachments, complex, content, formMetaData, mentionedUser, _callback);
        Type localVarReturnType = new TypeToken<SpaceReply>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createSpace
     * @param accessModeType Access mode (required)
     * @param name name of the space (required)
     * @param role role (required)
     * @param status status (required)
     * @param type type (required)
     * @param description description of the space (optional)
     * @param largePictureBase64 large picture (optional)
     * @param smallPictureBase64 small picture (optional)
     * @param tags tags of the space (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Space successfully created. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createSpaceCall(String accessModeType, String name, String role, String status, String type, String description, String largePictureBase64, String smallPictureBase64, List<String> tags, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/spaces/create";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (accessModeType != null) {
            localVarFormParams.put("accessModeType", accessModeType);
        }

        if (description != null) {
            localVarFormParams.put("description", description);
        }

        if (largePictureBase64 != null) {
            localVarFormParams.put("largePictureBase64", largePictureBase64);
        }

        if (name != null) {
            localVarFormParams.put("name", name);
        }

        if (role != null) {
            localVarFormParams.put("role", role);
        }

        if (smallPictureBase64 != null) {
            localVarFormParams.put("smallPictureBase64", smallPictureBase64);
        }

        if (status != null) {
            localVarFormParams.put("status", status);
        }

        if (tags != null) {
            localVarFormParams.put("tags", tags);
        }

        if (type != null) {
            localVarFormParams.put("type", type);
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createSpaceValidateBeforeCall(String accessModeType, String name, String role, String status, String type, String description, String largePictureBase64, String smallPictureBase64, List<String> tags, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accessModeType' is set
        if (accessModeType == null) {
            throw new ApiException("Missing the required parameter 'accessModeType' when calling createSpace(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling createSpace(Async)");
        }

        // verify the required parameter 'role' is set
        if (role == null) {
            throw new ApiException("Missing the required parameter 'role' when calling createSpace(Async)");
        }

        // verify the required parameter 'status' is set
        if (status == null) {
            throw new ApiException("Missing the required parameter 'status' when calling createSpace(Async)");
        }

        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling createSpace(Async)");
        }

        return createSpaceCall(accessModeType, name, role, status, type, description, largePictureBase64, smallPictureBase64, tags, _callback);

    }

    /**
     * Create a space
     * Create a space OauthScopes: WRITE_SPACE, MANAGE_SPACE, CREATE_SPACE_CONTENT
     * @param accessModeType Access mode (required)
     * @param name name of the space (required)
     * @param role role (required)
     * @param status status (required)
     * @param type type (required)
     * @param description description of the space (optional)
     * @param largePictureBase64 large picture (optional)
     * @param smallPictureBase64 small picture (optional)
     * @param tags tags of the space (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Space successfully created. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public Object createSpace(String accessModeType, String name, String role, String status, String type, String description, String largePictureBase64, String smallPictureBase64, List<String> tags) throws ApiException {
        ApiResponse<Object> localVarResp = createSpaceWithHttpInfo(accessModeType, name, role, status, type, description, largePictureBase64, smallPictureBase64, tags);
        return localVarResp.getData();
    }

    /**
     * Create a space
     * Create a space OauthScopes: WRITE_SPACE, MANAGE_SPACE, CREATE_SPACE_CONTENT
     * @param accessModeType Access mode (required)
     * @param name name of the space (required)
     * @param role role (required)
     * @param status status (required)
     * @param type type (required)
     * @param description description of the space (optional)
     * @param largePictureBase64 large picture (optional)
     * @param smallPictureBase64 small picture (optional)
     * @param tags tags of the space (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Space successfully created. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> createSpaceWithHttpInfo(String accessModeType, String name, String role, String status, String type, String description, String largePictureBase64, String smallPictureBase64, List<String> tags) throws ApiException {
        okhttp3.Call localVarCall = createSpaceValidateBeforeCall(accessModeType, name, role, status, type, description, largePictureBase64, smallPictureBase64, tags, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a space (asynchronously)
     * Create a space OauthScopes: WRITE_SPACE, MANAGE_SPACE, CREATE_SPACE_CONTENT
     * @param accessModeType Access mode (required)
     * @param name name of the space (required)
     * @param role role (required)
     * @param status status (required)
     * @param type type (required)
     * @param description description of the space (optional)
     * @param largePictureBase64 large picture (optional)
     * @param smallPictureBase64 small picture (optional)
     * @param tags tags of the space (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Space successfully created. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createSpaceAsync(String accessModeType, String name, String role, String status, String type, String description, String largePictureBase64, String smallPictureBase64, List<String> tags, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = createSpaceValidateBeforeCall(accessModeType, name, role, status, type, description, largePictureBase64, smallPictureBase64, tags, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createSpaceTopic
     * @param spaceId The ID of the space (required)
     * @param subject The subject of the topic (required)
     * @param attachments the attached files (optional)
     * @param complex complex or not (optional)
     * @param content The content of this topic (optional)
     * @param contentTags the content tags (optional)
     * @param formMetaData The formMetaData (optional)
     * @param mentionedUser A list of mentioned users (optional)
     * @param tags the tags (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> returns the created topic </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> something went wrong </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createSpaceTopicCall(String spaceId, String subject, List<String> attachments, Boolean complex, String content, List<String> contentTags, String formMetaData, String mentionedUser, List<String> tags, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/spaces/{spaceId}/topic"
            .replace("{" + "spaceId" + "}", localVarApiClient.escapeString(spaceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (attachments != null) {
            localVarFormParams.put("attachments", attachments);
        }

        if (complex != null) {
            localVarFormParams.put("complex", complex);
        }

        if (content != null) {
            localVarFormParams.put("content", content);
        }

        if (contentTags != null) {
            localVarFormParams.put("contentTags", contentTags);
        }

        if (formMetaData != null) {
            localVarFormParams.put("formMetaData", formMetaData);
        }

        if (mentionedUser != null) {
            localVarFormParams.put("mentionedUser", mentionedUser);
        }

        if (subject != null) {
            localVarFormParams.put("subject", subject);
        }

        if (tags != null) {
            localVarFormParams.put("tags", tags);
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createSpaceTopicValidateBeforeCall(String spaceId, String subject, List<String> attachments, Boolean complex, String content, List<String> contentTags, String formMetaData, String mentionedUser, List<String> tags, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'spaceId' is set
        if (spaceId == null) {
            throw new ApiException("Missing the required parameter 'spaceId' when calling createSpaceTopic(Async)");
        }

        // verify the required parameter 'subject' is set
        if (subject == null) {
            throw new ApiException("Missing the required parameter 'subject' when calling createSpaceTopic(Async)");
        }

        return createSpaceTopicCall(spaceId, subject, attachments, complex, content, contentTags, formMetaData, mentionedUser, tags, _callback);

    }

    /**
     * creates a new space topic
     * creates a new space topic OauthScopes: WRITE_SPACE, MANAGE_SPACE, CREATE_SPACE_CONTENT
     * @param spaceId The ID of the space (required)
     * @param subject The subject of the topic (required)
     * @param attachments the attached files (optional)
     * @param complex complex or not (optional)
     * @param content The content of this topic (optional)
     * @param contentTags the content tags (optional)
     * @param formMetaData The formMetaData (optional)
     * @param mentionedUser A list of mentioned users (optional)
     * @param tags the tags (optional)
     * @return SpaceTopic
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> returns the created topic </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> something went wrong </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public SpaceTopic createSpaceTopic(String spaceId, String subject, List<String> attachments, Boolean complex, String content, List<String> contentTags, String formMetaData, String mentionedUser, List<String> tags) throws ApiException {
        ApiResponse<SpaceTopic> localVarResp = createSpaceTopicWithHttpInfo(spaceId, subject, attachments, complex, content, contentTags, formMetaData, mentionedUser, tags);
        return localVarResp.getData();
    }

    /**
     * creates a new space topic
     * creates a new space topic OauthScopes: WRITE_SPACE, MANAGE_SPACE, CREATE_SPACE_CONTENT
     * @param spaceId The ID of the space (required)
     * @param subject The subject of the topic (required)
     * @param attachments the attached files (optional)
     * @param complex complex or not (optional)
     * @param content The content of this topic (optional)
     * @param contentTags the content tags (optional)
     * @param formMetaData The formMetaData (optional)
     * @param mentionedUser A list of mentioned users (optional)
     * @param tags the tags (optional)
     * @return ApiResponse&lt;SpaceTopic&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> returns the created topic </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> something went wrong </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SpaceTopic> createSpaceTopicWithHttpInfo(String spaceId, String subject, List<String> attachments, Boolean complex, String content, List<String> contentTags, String formMetaData, String mentionedUser, List<String> tags) throws ApiException {
        okhttp3.Call localVarCall = createSpaceTopicValidateBeforeCall(spaceId, subject, attachments, complex, content, contentTags, formMetaData, mentionedUser, tags, null);
        Type localVarReturnType = new TypeToken<SpaceTopic>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * creates a new space topic (asynchronously)
     * creates a new space topic OauthScopes: WRITE_SPACE, MANAGE_SPACE, CREATE_SPACE_CONTENT
     * @param spaceId The ID of the space (required)
     * @param subject The subject of the topic (required)
     * @param attachments the attached files (optional)
     * @param complex complex or not (optional)
     * @param content The content of this topic (optional)
     * @param contentTags the content tags (optional)
     * @param formMetaData The formMetaData (optional)
     * @param mentionedUser A list of mentioned users (optional)
     * @param tags the tags (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> returns the created topic </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> something went wrong </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createSpaceTopicAsync(String spaceId, String subject, List<String> attachments, Boolean complex, String content, List<String> contentTags, String formMetaData, String mentionedUser, List<String> tags, final ApiCallback<SpaceTopic> _callback) throws ApiException {

        okhttp3.Call localVarCall = createSpaceTopicValidateBeforeCall(spaceId, subject, attachments, complex, content, contentTags, formMetaData, mentionedUser, tags, _callback);
        Type localVarReturnType = new TypeToken<SpaceTopic>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteSpace
     * @param id id of the space (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Space successfully deleted. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteSpaceCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/spaces/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteSpaceValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteSpace(Async)");
        }

        return deleteSpaceCall(id, _callback);

    }

    /**
     * Delete a space
     * Delete a space OauthScopes: WRITE_SPACE, MANAGE_SPACE, DELETE_SPACE_CONTENT
     * @param id id of the space (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Space successfully deleted. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public void deleteSpace(String id) throws ApiException {
        deleteSpaceWithHttpInfo(id);
    }

    /**
     * Delete a space
     * Delete a space OauthScopes: WRITE_SPACE, MANAGE_SPACE, DELETE_SPACE_CONTENT
     * @param id id of the space (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Space successfully deleted. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteSpaceWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = deleteSpaceValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a space (asynchronously)
     * Delete a space OauthScopes: WRITE_SPACE, MANAGE_SPACE, DELETE_SPACE_CONTENT
     * @param id id of the space (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Space successfully deleted. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteSpaceAsync(String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteSpaceValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteSpaceItem
     * @param itemId the id of the spaceItem (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the deletion was a success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid itemid </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteSpaceItemCall(String itemId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/spaces/item/{itemId}"
            .replace("{" + "itemId" + "}", localVarApiClient.escapeString(itemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteSpaceItemValidateBeforeCall(String itemId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'itemId' is set
        if (itemId == null) {
            throw new ApiException("Missing the required parameter 'itemId' when calling deleteSpaceItem(Async)");
        }

        return deleteSpaceItemCall(itemId, _callback);

    }

    /**
     * deletes a space item
     * deletes a space item OauthScopes: WRITE_SPACE, DELETE_SPACE_CONTENT
     * @param itemId the id of the spaceItem (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the deletion was a success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid itemid </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public void deleteSpaceItem(String itemId) throws ApiException {
        deleteSpaceItemWithHttpInfo(itemId);
    }

    /**
     * deletes a space item
     * deletes a space item OauthScopes: WRITE_SPACE, DELETE_SPACE_CONTENT
     * @param itemId the id of the spaceItem (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the deletion was a success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid itemid </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteSpaceItemWithHttpInfo(String itemId) throws ApiException {
        okhttp3.Call localVarCall = deleteSpaceItemValidateBeforeCall(itemId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * deletes a space item (asynchronously)
     * deletes a space item OauthScopes: WRITE_SPACE, DELETE_SPACE_CONTENT
     * @param itemId the id of the spaceItem (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the deletion was a success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid itemid </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteSpaceItemAsync(String itemId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteSpaceItemValidateBeforeCall(itemId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for denySpaceAcces
     * @param spaceId Id of the space (required)
     * @param participantId Id of the participant (required)
     * @param reason Reason why the request has been denied (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Access denied </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call denySpaceAccesCall(String spaceId, String participantId, String reason, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/spaces/{spaceId}/participant/{participantId}/deny"
            .replace("{" + "spaceId" + "}", localVarApiClient.escapeString(spaceId.toString()))
            .replace("{" + "participantId" + "}", localVarApiClient.escapeString(participantId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (reason != null) {
            localVarFormParams.put("reason", reason);
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call denySpaceAccesValidateBeforeCall(String spaceId, String participantId, String reason, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'spaceId' is set
        if (spaceId == null) {
            throw new ApiException("Missing the required parameter 'spaceId' when calling denySpaceAcces(Async)");
        }

        // verify the required parameter 'participantId' is set
        if (participantId == null) {
            throw new ApiException("Missing the required parameter 'participantId' when calling denySpaceAcces(Async)");
        }

        return denySpaceAccesCall(spaceId, participantId, reason, _callback);

    }

    /**
     * Deny access for a space
     * Deny access for a space OauthScopes: WRITE_SPACE, MANAGE_SPACE
     * @param spaceId Id of the space (required)
     * @param participantId Id of the participant (required)
     * @param reason Reason why the request has been denied (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Access denied </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public void denySpaceAcces(String spaceId, String participantId, String reason) throws ApiException {
        denySpaceAccesWithHttpInfo(spaceId, participantId, reason);
    }

    /**
     * Deny access for a space
     * Deny access for a space OauthScopes: WRITE_SPACE, MANAGE_SPACE
     * @param spaceId Id of the space (required)
     * @param participantId Id of the participant (required)
     * @param reason Reason why the request has been denied (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Access denied </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> denySpaceAccesWithHttpInfo(String spaceId, String participantId, String reason) throws ApiException {
        okhttp3.Call localVarCall = denySpaceAccesValidateBeforeCall(spaceId, participantId, reason, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Deny access for a space (asynchronously)
     * Deny access for a space OauthScopes: WRITE_SPACE, MANAGE_SPACE
     * @param spaceId Id of the space (required)
     * @param participantId Id of the participant (required)
     * @param reason Reason why the request has been denied (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Access denied </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid parameter </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call denySpaceAccesAsync(String spaceId, String participantId, String reason, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = denySpaceAccesValidateBeforeCall(spaceId, participantId, reason, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for existsSpaceName
     * @param name The name to check for existence. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Check performed successfully, returning true if found, false if not found. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call existsSpaceNameCall(String name, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/spaces/exists/{name}"
            .replace("{" + "name" + "}", localVarApiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call existsSpaceNameValidateBeforeCall(String name, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling existsSpaceName(Async)");
        }

        return existsSpaceNameCall(name, _callback);

    }

    /**
     * Space name exists
     * Find out if a space name already exists for non-secret spaces. OauthScopes: READ_SPACE
     * @param name The name to check for existence. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Check performed successfully, returning true if found, false if not found. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public void existsSpaceName(String name) throws ApiException {
        existsSpaceNameWithHttpInfo(name);
    }

    /**
     * Space name exists
     * Find out if a space name already exists for non-secret spaces. OauthScopes: READ_SPACE
     * @param name The name to check for existence. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Check performed successfully, returning true if found, false if not found. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> existsSpaceNameWithHttpInfo(String name) throws ApiException {
        okhttp3.Call localVarCall = existsSpaceNameValidateBeforeCall(name, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Space name exists (asynchronously)
     * Find out if a space name already exists for non-secret spaces. OauthScopes: READ_SPACE
     * @param name The name to check for existence. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Check performed successfully, returning true if found, false if not found. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call existsSpaceNameAsync(String name, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = existsSpaceNameValidateBeforeCall(name, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for flagSpaceItem
     * @param itemId the id of the item you want to flag (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Space item successfully flagged </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call flagSpaceItemCall(String itemId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/spaces/flag/{itemId}"
            .replace("{" + "itemId" + "}", localVarApiClient.escapeString(itemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call flagSpaceItemValidateBeforeCall(String itemId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'itemId' is set
        if (itemId == null) {
            throw new ApiException("Missing the required parameter 'itemId' when calling flagSpaceItem(Async)");
        }

        return flagSpaceItemCall(itemId, _callback);

    }

    /**
     * flag a space item
     * flag a space item OauthScopes: WRITE_SPACE, UPDATE_SPACE_CONTENT
     * @param itemId the id of the item you want to flag (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Space item successfully flagged </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public void flagSpaceItem(String itemId) throws ApiException {
        flagSpaceItemWithHttpInfo(itemId);
    }

    /**
     * flag a space item
     * flag a space item OauthScopes: WRITE_SPACE, UPDATE_SPACE_CONTENT
     * @param itemId the id of the item you want to flag (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Space item successfully flagged </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> flagSpaceItemWithHttpInfo(String itemId) throws ApiException {
        okhttp3.Call localVarCall = flagSpaceItemValidateBeforeCall(itemId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * flag a space item (asynchronously)
     * flag a space item OauthScopes: WRITE_SPACE, UPDATE_SPACE_CONTENT
     * @param itemId the id of the item you want to flag (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Space item successfully flagged </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call flagSpaceItemAsync(String itemId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = flagSpaceItemValidateBeforeCall(itemId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDirectory
     * @param sortBy sort the spaces by LAST_CONTENT, NAME, NUMBER_OF_USERS or CREATION_DATE (required)
     * @param sortOrder ascending or descending (required)
     * @param filter filter for spaces (JOINED, REQUESTED, OPEN, CLOSED or NOT_JOINED_REQUESTED) (required)
     * @param query some sort of query (optional)
     * @param pagePointer page pointer, start with nothing and for next query use returned pointer (optional)
     * @param numberOfResults number of results to return, 25 by default. (optional, default to 25)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Spaces successfully retrieved. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDirectoryCall(String sortBy, String sortOrder, String filter, String query, String pagePointer, BigDecimal numberOfResults, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/spaces/directory";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sortBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sortBy", sortBy));
        }

        if (sortOrder != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sortOrder", sortOrder));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        if (query != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query", query));
        }

        if (pagePointer != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pagePointer", pagePointer));
        }

        if (numberOfResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("numberOfResults", numberOfResults));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDirectoryValidateBeforeCall(String sortBy, String sortOrder, String filter, String query, String pagePointer, BigDecimal numberOfResults, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sortBy' is set
        if (sortBy == null) {
            throw new ApiException("Missing the required parameter 'sortBy' when calling getDirectory(Async)");
        }

        // verify the required parameter 'sortOrder' is set
        if (sortOrder == null) {
            throw new ApiException("Missing the required parameter 'sortOrder' when calling getDirectory(Async)");
        }

        // verify the required parameter 'filter' is set
        if (filter == null) {
            throw new ApiException("Missing the required parameter 'filter' when calling getDirectory(Async)");
        }

        return getDirectoryCall(sortBy, sortOrder, filter, query, pagePointer, numberOfResults, _callback);

    }

    /**
     * Get the directory
     * Get the directory by a search query in ordered way OauthScopes: READ_SPACE
     * @param sortBy sort the spaces by LAST_CONTENT, NAME, NUMBER_OF_USERS or CREATION_DATE (required)
     * @param sortOrder ascending or descending (required)
     * @param filter filter for spaces (JOINED, REQUESTED, OPEN, CLOSED or NOT_JOINED_REQUESTED) (required)
     * @param query some sort of query (optional)
     * @param pagePointer page pointer, start with nothing and for next query use returned pointer (optional)
     * @param numberOfResults number of results to return, 25 by default. (optional, default to 25)
     * @return DirectoryResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Spaces successfully retrieved. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public DirectoryResult getDirectory(String sortBy, String sortOrder, String filter, String query, String pagePointer, BigDecimal numberOfResults) throws ApiException {
        ApiResponse<DirectoryResult> localVarResp = getDirectoryWithHttpInfo(sortBy, sortOrder, filter, query, pagePointer, numberOfResults);
        return localVarResp.getData();
    }

    /**
     * Get the directory
     * Get the directory by a search query in ordered way OauthScopes: READ_SPACE
     * @param sortBy sort the spaces by LAST_CONTENT, NAME, NUMBER_OF_USERS or CREATION_DATE (required)
     * @param sortOrder ascending or descending (required)
     * @param filter filter for spaces (JOINED, REQUESTED, OPEN, CLOSED or NOT_JOINED_REQUESTED) (required)
     * @param query some sort of query (optional)
     * @param pagePointer page pointer, start with nothing and for next query use returned pointer (optional)
     * @param numberOfResults number of results to return, 25 by default. (optional, default to 25)
     * @return ApiResponse&lt;DirectoryResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Spaces successfully retrieved. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DirectoryResult> getDirectoryWithHttpInfo(String sortBy, String sortOrder, String filter, String query, String pagePointer, BigDecimal numberOfResults) throws ApiException {
        okhttp3.Call localVarCall = getDirectoryValidateBeforeCall(sortBy, sortOrder, filter, query, pagePointer, numberOfResults, null);
        Type localVarReturnType = new TypeToken<DirectoryResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the directory (asynchronously)
     * Get the directory by a search query in ordered way OauthScopes: READ_SPACE
     * @param sortBy sort the spaces by LAST_CONTENT, NAME, NUMBER_OF_USERS or CREATION_DATE (required)
     * @param sortOrder ascending or descending (required)
     * @param filter filter for spaces (JOINED, REQUESTED, OPEN, CLOSED or NOT_JOINED_REQUESTED) (required)
     * @param query some sort of query (optional)
     * @param pagePointer page pointer, start with nothing and for next query use returned pointer (optional)
     * @param numberOfResults number of results to return, 25 by default. (optional, default to 25)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Spaces successfully retrieved. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDirectoryAsync(String sortBy, String sortOrder, String filter, String query, String pagePointer, BigDecimal numberOfResults, final ApiCallback<DirectoryResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDirectoryValidateBeforeCall(sortBy, sortOrder, filter, query, pagePointer, numberOfResults, _callback);
        Type localVarReturnType = new TypeToken<DirectoryResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getFlaggedItems
     * @param searchDirection before or after the time stamp (required)
     * @param timestamp The timestamp according to which you want to retrieve the flagged items (required)
     * @param searchPointer The searchpointer for the search (initially not set). (optional)
     * @param numberOfResults The number of results you want to retrieve. (optional, default to 25)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Flagged items successfully retrieved </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFlaggedItemsCall(String searchDirection, OffsetDateTime timestamp, String searchPointer, BigDecimal numberOfResults, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/spaces/flagged";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (searchDirection != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("searchDirection", searchDirection));
        }

        if (timestamp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timestamp", timestamp));
        }

        if (searchPointer != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("searchPointer", searchPointer));
        }

        if (numberOfResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("numberOfResults", numberOfResults));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFlaggedItemsValidateBeforeCall(String searchDirection, OffsetDateTime timestamp, String searchPointer, BigDecimal numberOfResults, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'searchDirection' is set
        if (searchDirection == null) {
            throw new ApiException("Missing the required parameter 'searchDirection' when calling getFlaggedItems(Async)");
        }

        // verify the required parameter 'timestamp' is set
        if (timestamp == null) {
            throw new ApiException("Missing the required parameter 'timestamp' when calling getFlaggedItems(Async)");
        }

        return getFlaggedItemsCall(searchDirection, timestamp, searchPointer, numberOfResults, _callback);

    }

    /**
     * Get flagged items
     * Get flagged items OauthScopes: READ_SPACE
     * @param searchDirection before or after the time stamp (required)
     * @param timestamp The timestamp according to which you want to retrieve the flagged items (required)
     * @param searchPointer The searchpointer for the search (initially not set). (optional)
     * @param numberOfResults The number of results you want to retrieve. (optional, default to 25)
     * @return FlaggedItemsResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Flagged items successfully retrieved </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public FlaggedItemsResult getFlaggedItems(String searchDirection, OffsetDateTime timestamp, String searchPointer, BigDecimal numberOfResults) throws ApiException {
        ApiResponse<FlaggedItemsResult> localVarResp = getFlaggedItemsWithHttpInfo(searchDirection, timestamp, searchPointer, numberOfResults);
        return localVarResp.getData();
    }

    /**
     * Get flagged items
     * Get flagged items OauthScopes: READ_SPACE
     * @param searchDirection before or after the time stamp (required)
     * @param timestamp The timestamp according to which you want to retrieve the flagged items (required)
     * @param searchPointer The searchpointer for the search (initially not set). (optional)
     * @param numberOfResults The number of results you want to retrieve. (optional, default to 25)
     * @return ApiResponse&lt;FlaggedItemsResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Flagged items successfully retrieved </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FlaggedItemsResult> getFlaggedItemsWithHttpInfo(String searchDirection, OffsetDateTime timestamp, String searchPointer, BigDecimal numberOfResults) throws ApiException {
        okhttp3.Call localVarCall = getFlaggedItemsValidateBeforeCall(searchDirection, timestamp, searchPointer, numberOfResults, null);
        Type localVarReturnType = new TypeToken<FlaggedItemsResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get flagged items (asynchronously)
     * Get flagged items OauthScopes: READ_SPACE
     * @param searchDirection before or after the time stamp (required)
     * @param timestamp The timestamp according to which you want to retrieve the flagged items (required)
     * @param searchPointer The searchpointer for the search (initially not set). (optional)
     * @param numberOfResults The number of results you want to retrieve. (optional, default to 25)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Flagged items successfully retrieved </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFlaggedItemsAsync(String searchDirection, OffsetDateTime timestamp, String searchPointer, BigDecimal numberOfResults, final ApiCallback<FlaggedItemsResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFlaggedItemsValidateBeforeCall(searchDirection, timestamp, searchPointer, numberOfResults, _callback);
        Type localVarReturnType = new TypeToken<FlaggedItemsResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getLikes
     * @param itemId The id of the item to retrieve the likes from (required)
     * @param searchPointer The searchpointer for the search (initially not set). (optional)
     * @param numberOfResults The number of results you want to retrieve. (optional, default to 25)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Likes successfully retrieved </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getLikesCall(String itemId, String searchPointer, BigDecimal numberOfResults, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/spaces/likes/{itemId}"
            .replace("{" + "itemId" + "}", localVarApiClient.escapeString(itemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (searchPointer != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("searchPointer", searchPointer));
        }

        if (numberOfResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("numberOfResults", numberOfResults));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getLikesValidateBeforeCall(String itemId, String searchPointer, BigDecimal numberOfResults, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'itemId' is set
        if (itemId == null) {
            throw new ApiException("Missing the required parameter 'itemId' when calling getLikes(Async)");
        }

        return getLikesCall(itemId, searchPointer, numberOfResults, _callback);

    }

    /**
     * Get the likes of an item
     * Get the likes of an item OauthScopes: READ_SPACE
     * @param itemId The id of the item to retrieve the likes from (required)
     * @param searchPointer The searchpointer for the search (initially not set). (optional)
     * @param numberOfResults The number of results you want to retrieve. (optional, default to 25)
     * @return ParticipantsLikeResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Likes successfully retrieved </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public ParticipantsLikeResult getLikes(String itemId, String searchPointer, BigDecimal numberOfResults) throws ApiException {
        ApiResponse<ParticipantsLikeResult> localVarResp = getLikesWithHttpInfo(itemId, searchPointer, numberOfResults);
        return localVarResp.getData();
    }

    /**
     * Get the likes of an item
     * Get the likes of an item OauthScopes: READ_SPACE
     * @param itemId The id of the item to retrieve the likes from (required)
     * @param searchPointer The searchpointer for the search (initially not set). (optional)
     * @param numberOfResults The number of results you want to retrieve. (optional, default to 25)
     * @return ApiResponse&lt;ParticipantsLikeResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Likes successfully retrieved </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ParticipantsLikeResult> getLikesWithHttpInfo(String itemId, String searchPointer, BigDecimal numberOfResults) throws ApiException {
        okhttp3.Call localVarCall = getLikesValidateBeforeCall(itemId, searchPointer, numberOfResults, null);
        Type localVarReturnType = new TypeToken<ParticipantsLikeResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the likes of an item (asynchronously)
     * Get the likes of an item OauthScopes: READ_SPACE
     * @param itemId The id of the item to retrieve the likes from (required)
     * @param searchPointer The searchpointer for the search (initially not set). (optional)
     * @param numberOfResults The number of results you want to retrieve. (optional, default to 25)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Likes successfully retrieved </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getLikesAsync(String itemId, String searchPointer, BigDecimal numberOfResults, final ApiCallback<ParticipantsLikeResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = getLikesValidateBeforeCall(itemId, searchPointer, numberOfResults, _callback);
        Type localVarReturnType = new TypeToken<ParticipantsLikeResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getParticipantsImportData
     * @param spaceId missing documentation (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> missing documentation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getParticipantsImportDataCall(String spaceId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/spaces/{spaceId}/participant/import/"
            .replace("{" + "spaceId" + "}", localVarApiClient.escapeString(spaceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getParticipantsImportDataValidateBeforeCall(String spaceId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'spaceId' is set
        if (spaceId == null) {
            throw new ApiException("Missing the required parameter 'spaceId' when calling getParticipantsImportData(Async)");
        }

        return getParticipantsImportDataCall(spaceId, _callback);

    }

    /**
     * missing documentation
     * missing documentation OauthScopes: READ_SPACE
     * @param spaceId missing documentation (required)
     * @return ParticipantsImportDataResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> missing documentation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public ParticipantsImportDataResult getParticipantsImportData(String spaceId) throws ApiException {
        ApiResponse<ParticipantsImportDataResult> localVarResp = getParticipantsImportDataWithHttpInfo(spaceId);
        return localVarResp.getData();
    }

    /**
     * missing documentation
     * missing documentation OauthScopes: READ_SPACE
     * @param spaceId missing documentation (required)
     * @return ApiResponse&lt;ParticipantsImportDataResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> missing documentation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ParticipantsImportDataResult> getParticipantsImportDataWithHttpInfo(String spaceId) throws ApiException {
        okhttp3.Call localVarCall = getParticipantsImportDataValidateBeforeCall(spaceId, null);
        Type localVarReturnType = new TypeToken<ParticipantsImportDataResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * missing documentation (asynchronously)
     * missing documentation OauthScopes: READ_SPACE
     * @param spaceId missing documentation (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> missing documentation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getParticipantsImportDataAsync(String spaceId, final ApiCallback<ParticipantsImportDataResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = getParticipantsImportDataValidateBeforeCall(spaceId, _callback);
        Type localVarReturnType = new TypeToken<ParticipantsImportDataResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPendingParticipants
     * @param id The id of the space. (required)
     * @param searchPointer The search pointer (leave empty initially). (optional)
     * @param numberOfResults number of results to return, 25 by default. (optional, default to 25)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Pending participants successfully retrieved </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPendingParticipantsCall(String id, String searchPointer, BigDecimal numberOfResults, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/spaces/{id}/participants/pending"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (searchPointer != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("searchPointer", searchPointer));
        }

        if (numberOfResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("numberOfResults", numberOfResults));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPendingParticipantsValidateBeforeCall(String id, String searchPointer, BigDecimal numberOfResults, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getPendingParticipants(Async)");
        }

        return getPendingParticipantsCall(id, searchPointer, numberOfResults, _callback);

    }

    /**
     * Get the pending participants of a space
     * Get the pending participants of a space OauthScopes: WRITE_SPACE, MANAGE_SPACE
     * @param id The id of the space. (required)
     * @param searchPointer The search pointer (leave empty initially). (optional)
     * @param numberOfResults number of results to return, 25 by default. (optional, default to 25)
     * @return ParticipantsSearchResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Pending participants successfully retrieved </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public ParticipantsSearchResult getPendingParticipants(String id, String searchPointer, BigDecimal numberOfResults) throws ApiException {
        ApiResponse<ParticipantsSearchResult> localVarResp = getPendingParticipantsWithHttpInfo(id, searchPointer, numberOfResults);
        return localVarResp.getData();
    }

    /**
     * Get the pending participants of a space
     * Get the pending participants of a space OauthScopes: WRITE_SPACE, MANAGE_SPACE
     * @param id The id of the space. (required)
     * @param searchPointer The search pointer (leave empty initially). (optional)
     * @param numberOfResults number of results to return, 25 by default. (optional, default to 25)
     * @return ApiResponse&lt;ParticipantsSearchResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Pending participants successfully retrieved </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ParticipantsSearchResult> getPendingParticipantsWithHttpInfo(String id, String searchPointer, BigDecimal numberOfResults) throws ApiException {
        okhttp3.Call localVarCall = getPendingParticipantsValidateBeforeCall(id, searchPointer, numberOfResults, null);
        Type localVarReturnType = new TypeToken<ParticipantsSearchResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the pending participants of a space (asynchronously)
     * Get the pending participants of a space OauthScopes: WRITE_SPACE, MANAGE_SPACE
     * @param id The id of the space. (required)
     * @param searchPointer The search pointer (leave empty initially). (optional)
     * @param numberOfResults number of results to return, 25 by default. (optional, default to 25)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Pending participants successfully retrieved </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPendingParticipantsAsync(String id, String searchPointer, BigDecimal numberOfResults, final ApiCallback<ParticipantsSearchResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPendingParticipantsValidateBeforeCall(id, searchPointer, numberOfResults, _callback);
        Type localVarReturnType = new TypeToken<ParticipantsSearchResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPinnedTopics
     * @param id The id of the space. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Pinned topics successfully retrieved (or none available).  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPinnedTopicsCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/spaces/{id}/pinnedTopics"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPinnedTopicsValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getPinnedTopics(Async)");
        }

        return getPinnedTopicsCall(id, _callback);

    }

    /**
     * Retrieve pinned topics
     * Retrieve pinned topics of a space OauthScopes: READ_SPACE
     * @param id The id of the space. (required)
     * @return List&lt;SpacePinnedTopic&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Pinned topics successfully retrieved (or none available).  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public List<SpacePinnedTopic> getPinnedTopics(String id) throws ApiException {
        ApiResponse<List<SpacePinnedTopic>> localVarResp = getPinnedTopicsWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Retrieve pinned topics
     * Retrieve pinned topics of a space OauthScopes: READ_SPACE
     * @param id The id of the space. (required)
     * @return ApiResponse&lt;List&lt;SpacePinnedTopic&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Pinned topics successfully retrieved (or none available).  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<SpacePinnedTopic>> getPinnedTopicsWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = getPinnedTopicsValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<List<SpacePinnedTopic>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve pinned topics (asynchronously)
     * Retrieve pinned topics of a space OauthScopes: READ_SPACE
     * @param id The id of the space. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Pinned topics successfully retrieved (or none available).  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPinnedTopicsAsync(String id, final ApiCallback<List<SpacePinnedTopic>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPinnedTopicsValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<List<SpacePinnedTopic>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getRecentSearches
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Recent searches successfully retrieved (or none available). </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRecentSearchesCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/spaces/search/recent";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRecentSearchesValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getRecentSearchesCall(_callback);

    }

    /**
     * Retrieve recent space searches
     * Retrieve recent space searches for a user. OauthScopes: READ_SPACE
     * @return List&lt;SpacesSearchTermResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Recent searches successfully retrieved (or none available). </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public List<SpacesSearchTermResult> getRecentSearches() throws ApiException {
        ApiResponse<List<SpacesSearchTermResult>> localVarResp = getRecentSearchesWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Retrieve recent space searches
     * Retrieve recent space searches for a user. OauthScopes: READ_SPACE
     * @return ApiResponse&lt;List&lt;SpacesSearchTermResult&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Recent searches successfully retrieved (or none available). </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<SpacesSearchTermResult>> getRecentSearchesWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getRecentSearchesValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<SpacesSearchTermResult>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve recent space searches (asynchronously)
     * Retrieve recent space searches for a user. OauthScopes: READ_SPACE
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Recent searches successfully retrieved (or none available). </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRecentSearchesAsync(final ApiCallback<List<SpacesSearchTermResult>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRecentSearchesValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<SpacesSearchTermResult>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSpaceParticipants
     * @param id The id of the space. (required)
     * @param sortBy sort the spaces by LAST_CONTENT, NAME, NUMBER_OF_USERS or CREATION_DATE (required)
     * @param sortOrder ascending or descending (required)
     * @param filterType filtertype for participants (ACCESS_TYPE, ROLE or STATE) (required)
     * @param filterValue value for the filter (optional)
     * @param query some sort of query (optional)
     * @param searchPointer The search pointer (leave empty initially). (optional)
     * @param numberOfResults number of results to return, 25 by default. (optional, default to 25)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Participants successfully retrieved </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSpaceParticipantsCall(String id, String sortBy, String sortOrder, String filterType, String filterValue, String query, String searchPointer, BigDecimal numberOfResults, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/spaces/{id}/participants"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sortBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sortBy", sortBy));
        }

        if (sortOrder != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sortOrder", sortOrder));
        }

        if (filterType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filterType", filterType));
        }

        if (filterValue != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filterValue", filterValue));
        }

        if (query != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query", query));
        }

        if (searchPointer != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("searchPointer", searchPointer));
        }

        if (numberOfResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("numberOfResults", numberOfResults));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSpaceParticipantsValidateBeforeCall(String id, String sortBy, String sortOrder, String filterType, String filterValue, String query, String searchPointer, BigDecimal numberOfResults, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getSpaceParticipants(Async)");
        }

        // verify the required parameter 'sortBy' is set
        if (sortBy == null) {
            throw new ApiException("Missing the required parameter 'sortBy' when calling getSpaceParticipants(Async)");
        }

        // verify the required parameter 'sortOrder' is set
        if (sortOrder == null) {
            throw new ApiException("Missing the required parameter 'sortOrder' when calling getSpaceParticipants(Async)");
        }

        // verify the required parameter 'filterType' is set
        if (filterType == null) {
            throw new ApiException("Missing the required parameter 'filterType' when calling getSpaceParticipants(Async)");
        }

        return getSpaceParticipantsCall(id, sortBy, sortOrder, filterType, filterValue, query, searchPointer, numberOfResults, _callback);

    }

    /**
     * Get the participants of a space
     * Get the participants of a space OauthScopes: READ_SPACE
     * @param id The id of the space. (required)
     * @param sortBy sort the spaces by LAST_CONTENT, NAME, NUMBER_OF_USERS or CREATION_DATE (required)
     * @param sortOrder ascending or descending (required)
     * @param filterType filtertype for participants (ACCESS_TYPE, ROLE or STATE) (required)
     * @param filterValue value for the filter (optional)
     * @param query some sort of query (optional)
     * @param searchPointer The search pointer (leave empty initially). (optional)
     * @param numberOfResults number of results to return, 25 by default. (optional, default to 25)
     * @return ParticipantsSearchResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Participants successfully retrieved </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public ParticipantsSearchResult getSpaceParticipants(String id, String sortBy, String sortOrder, String filterType, String filterValue, String query, String searchPointer, BigDecimal numberOfResults) throws ApiException {
        ApiResponse<ParticipantsSearchResult> localVarResp = getSpaceParticipantsWithHttpInfo(id, sortBy, sortOrder, filterType, filterValue, query, searchPointer, numberOfResults);
        return localVarResp.getData();
    }

    /**
     * Get the participants of a space
     * Get the participants of a space OauthScopes: READ_SPACE
     * @param id The id of the space. (required)
     * @param sortBy sort the spaces by LAST_CONTENT, NAME, NUMBER_OF_USERS or CREATION_DATE (required)
     * @param sortOrder ascending or descending (required)
     * @param filterType filtertype for participants (ACCESS_TYPE, ROLE or STATE) (required)
     * @param filterValue value for the filter (optional)
     * @param query some sort of query (optional)
     * @param searchPointer The search pointer (leave empty initially). (optional)
     * @param numberOfResults number of results to return, 25 by default. (optional, default to 25)
     * @return ApiResponse&lt;ParticipantsSearchResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Participants successfully retrieved </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ParticipantsSearchResult> getSpaceParticipantsWithHttpInfo(String id, String sortBy, String sortOrder, String filterType, String filterValue, String query, String searchPointer, BigDecimal numberOfResults) throws ApiException {
        okhttp3.Call localVarCall = getSpaceParticipantsValidateBeforeCall(id, sortBy, sortOrder, filterType, filterValue, query, searchPointer, numberOfResults, null);
        Type localVarReturnType = new TypeToken<ParticipantsSearchResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the participants of a space (asynchronously)
     * Get the participants of a space OauthScopes: READ_SPACE
     * @param id The id of the space. (required)
     * @param sortBy sort the spaces by LAST_CONTENT, NAME, NUMBER_OF_USERS or CREATION_DATE (required)
     * @param sortOrder ascending or descending (required)
     * @param filterType filtertype for participants (ACCESS_TYPE, ROLE or STATE) (required)
     * @param filterValue value for the filter (optional)
     * @param query some sort of query (optional)
     * @param searchPointer The search pointer (leave empty initially). (optional)
     * @param numberOfResults number of results to return, 25 by default. (optional, default to 25)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Participants successfully retrieved </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSpaceParticipantsAsync(String id, String sortBy, String sortOrder, String filterType, String filterValue, String query, String searchPointer, BigDecimal numberOfResults, final ApiCallback<ParticipantsSearchResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSpaceParticipantsValidateBeforeCall(id, sortBy, sortOrder, filterType, filterValue, query, searchPointer, numberOfResults, _callback);
        Type localVarReturnType = new TypeToken<ParticipantsSearchResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSpaceReplies
     * @param spaceId Id of the containing space (required)
     * @param topicId Id of the topic (required)
     * @param searchDirection Search before or after a certain timestamp (required)
     * @param timestamp Timestamp to start the search from (optional)
     * @param numberOfResults The number of results that should be returned (optional, default to 25)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the replies </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSpaceRepliesCall(String spaceId, String topicId, String searchDirection, OffsetDateTime timestamp, BigDecimal numberOfResults, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/spaces/{spaceId}/topic/{topicId}/reply"
            .replace("{" + "spaceId" + "}", localVarApiClient.escapeString(spaceId.toString()))
            .replace("{" + "topicId" + "}", localVarApiClient.escapeString(topicId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (searchDirection != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("searchDirection", searchDirection));
        }

        if (timestamp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timestamp", timestamp));
        }

        if (numberOfResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("numberOfResults", numberOfResults));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSpaceRepliesValidateBeforeCall(String spaceId, String topicId, String searchDirection, OffsetDateTime timestamp, BigDecimal numberOfResults, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'spaceId' is set
        if (spaceId == null) {
            throw new ApiException("Missing the required parameter 'spaceId' when calling getSpaceReplies(Async)");
        }

        // verify the required parameter 'topicId' is set
        if (topicId == null) {
            throw new ApiException("Missing the required parameter 'topicId' when calling getSpaceReplies(Async)");
        }

        // verify the required parameter 'searchDirection' is set
        if (searchDirection == null) {
            throw new ApiException("Missing the required parameter 'searchDirection' when calling getSpaceReplies(Async)");
        }

        return getSpaceRepliesCall(spaceId, topicId, searchDirection, timestamp, numberOfResults, _callback);

    }

    /**
     * Gets space replies
     * Gets a number of Space replies OauthScopes: READ_SPACE
     * @param spaceId Id of the containing space (required)
     * @param topicId Id of the topic (required)
     * @param searchDirection Search before or after a certain timestamp (required)
     * @param timestamp Timestamp to start the search from (optional)
     * @param numberOfResults The number of results that should be returned (optional, default to 25)
     * @return SpaceReply
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the replies </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public SpaceReply getSpaceReplies(String spaceId, String topicId, String searchDirection, OffsetDateTime timestamp, BigDecimal numberOfResults) throws ApiException {
        ApiResponse<SpaceReply> localVarResp = getSpaceRepliesWithHttpInfo(spaceId, topicId, searchDirection, timestamp, numberOfResults);
        return localVarResp.getData();
    }

    /**
     * Gets space replies
     * Gets a number of Space replies OauthScopes: READ_SPACE
     * @param spaceId Id of the containing space (required)
     * @param topicId Id of the topic (required)
     * @param searchDirection Search before or after a certain timestamp (required)
     * @param timestamp Timestamp to start the search from (optional)
     * @param numberOfResults The number of results that should be returned (optional, default to 25)
     * @return ApiResponse&lt;SpaceReply&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the replies </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SpaceReply> getSpaceRepliesWithHttpInfo(String spaceId, String topicId, String searchDirection, OffsetDateTime timestamp, BigDecimal numberOfResults) throws ApiException {
        okhttp3.Call localVarCall = getSpaceRepliesValidateBeforeCall(spaceId, topicId, searchDirection, timestamp, numberOfResults, null);
        Type localVarReturnType = new TypeToken<SpaceReply>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets space replies (asynchronously)
     * Gets a number of Space replies OauthScopes: READ_SPACE
     * @param spaceId Id of the containing space (required)
     * @param topicId Id of the topic (required)
     * @param searchDirection Search before or after a certain timestamp (required)
     * @param timestamp Timestamp to start the search from (optional)
     * @param numberOfResults The number of results that should be returned (optional, default to 25)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the replies </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSpaceRepliesAsync(String spaceId, String topicId, String searchDirection, OffsetDateTime timestamp, BigDecimal numberOfResults, final ApiCallback<SpaceReply> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSpaceRepliesValidateBeforeCall(spaceId, topicId, searchDirection, timestamp, numberOfResults, _callback);
        Type localVarReturnType = new TypeToken<SpaceReply>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSpaceTopics
     * @param spaceId Id of the space (required)
     * @param searchDirection Search before or after a certain timestamp (required)
     * @param timestamp Timestamp to start the search from (optional)
     * @param numberOfResults The number of results that should be returned (optional, default to 25)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the the topics </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSpaceTopicsCall(String spaceId, String searchDirection, OffsetDateTime timestamp, BigDecimal numberOfResults, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/spaces/{spaceId}/topics"
            .replace("{" + "spaceId" + "}", localVarApiClient.escapeString(spaceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (searchDirection != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("searchDirection", searchDirection));
        }

        if (timestamp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timestamp", timestamp));
        }

        if (numberOfResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("numberOfResults", numberOfResults));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSpaceTopicsValidateBeforeCall(String spaceId, String searchDirection, OffsetDateTime timestamp, BigDecimal numberOfResults, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'spaceId' is set
        if (spaceId == null) {
            throw new ApiException("Missing the required parameter 'spaceId' when calling getSpaceTopics(Async)");
        }

        // verify the required parameter 'searchDirection' is set
        if (searchDirection == null) {
            throw new ApiException("Missing the required parameter 'searchDirection' when calling getSpaceTopics(Async)");
        }

        return getSpaceTopicsCall(spaceId, searchDirection, timestamp, numberOfResults, _callback);

    }

    /**
     * Gets space topics
     * Gets a number of Space topics OauthScopes: READ_SPACE
     * @param spaceId Id of the space (required)
     * @param searchDirection Search before or after a certain timestamp (required)
     * @param timestamp Timestamp to start the search from (optional)
     * @param numberOfResults The number of results that should be returned (optional, default to 25)
     * @return List&lt;SpaceTopic&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the the topics </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public List<SpaceTopic> getSpaceTopics(String spaceId, String searchDirection, OffsetDateTime timestamp, BigDecimal numberOfResults) throws ApiException {
        ApiResponse<List<SpaceTopic>> localVarResp = getSpaceTopicsWithHttpInfo(spaceId, searchDirection, timestamp, numberOfResults);
        return localVarResp.getData();
    }

    /**
     * Gets space topics
     * Gets a number of Space topics OauthScopes: READ_SPACE
     * @param spaceId Id of the space (required)
     * @param searchDirection Search before or after a certain timestamp (required)
     * @param timestamp Timestamp to start the search from (optional)
     * @param numberOfResults The number of results that should be returned (optional, default to 25)
     * @return ApiResponse&lt;List&lt;SpaceTopic&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the the topics </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<SpaceTopic>> getSpaceTopicsWithHttpInfo(String spaceId, String searchDirection, OffsetDateTime timestamp, BigDecimal numberOfResults) throws ApiException {
        okhttp3.Call localVarCall = getSpaceTopicsValidateBeforeCall(spaceId, searchDirection, timestamp, numberOfResults, null);
        Type localVarReturnType = new TypeToken<List<SpaceTopic>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets space topics (asynchronously)
     * Gets a number of Space topics OauthScopes: READ_SPACE
     * @param spaceId Id of the space (required)
     * @param searchDirection Search before or after a certain timestamp (required)
     * @param timestamp Timestamp to start the search from (optional)
     * @param numberOfResults The number of results that should be returned (optional, default to 25)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the the topics </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSpaceTopicsAsync(String spaceId, String searchDirection, OffsetDateTime timestamp, BigDecimal numberOfResults, final ApiCallback<List<SpaceTopic>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSpaceTopicsValidateBeforeCall(spaceId, searchDirection, timestamp, numberOfResults, _callback);
        Type localVarReturnType = new TypeToken<List<SpaceTopic>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSpaces
     * @param timestamp a beautiful timestamp (optional)
     * @param numberOfResults the number of results you want (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Spaces successfully retrieved. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSpacesCall(OffsetDateTime timestamp, BigDecimal numberOfResults, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/spaces";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (timestamp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timestamp", timestamp));
        }

        if (numberOfResults != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("numberOfResults", numberOfResults));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSpacesValidateBeforeCall(OffsetDateTime timestamp, BigDecimal numberOfResults, final ApiCallback _callback) throws ApiException {
        return getSpacesCall(timestamp, numberOfResults, _callback);

    }

    /**
     * Get the spaces
     * Get the spaces OauthScopes: READ_SPACE
     * @param timestamp a beautiful timestamp (optional)
     * @param numberOfResults the number of results you want (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Spaces successfully retrieved. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public Object getSpaces(OffsetDateTime timestamp, BigDecimal numberOfResults) throws ApiException {
        ApiResponse<Object> localVarResp = getSpacesWithHttpInfo(timestamp, numberOfResults);
        return localVarResp.getData();
    }

    /**
     * Get the spaces
     * Get the spaces OauthScopes: READ_SPACE
     * @param timestamp a beautiful timestamp (optional)
     * @param numberOfResults the number of results you want (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Spaces successfully retrieved. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> getSpacesWithHttpInfo(OffsetDateTime timestamp, BigDecimal numberOfResults) throws ApiException {
        okhttp3.Call localVarCall = getSpacesValidateBeforeCall(timestamp, numberOfResults, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the spaces (asynchronously)
     * Get the spaces OauthScopes: READ_SPACE
     * @param timestamp a beautiful timestamp (optional)
     * @param numberOfResults the number of results you want (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Spaces successfully retrieved. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSpacesAsync(OffsetDateTime timestamp, BigDecimal numberOfResults, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSpacesValidateBeforeCall(timestamp, numberOfResults, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSpacesByIds
     * @param ids an array of ids (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Spaces successfully retrieved. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSpacesByIdsCall(List<String> ids, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/spaces/ids";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (ids != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "ids", ids));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSpacesByIdsValidateBeforeCall(List<String> ids, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ids' is set
        if (ids == null) {
            throw new ApiException("Missing the required parameter 'ids' when calling getSpacesByIds(Async)");
        }

        return getSpacesByIdsCall(ids, _callback);

    }

    /**
     * Get the spaces by their ids
     * Get the spaces by their ids OauthScopes: READ_SPACE
     * @param ids an array of ids (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Spaces successfully retrieved. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public Object getSpacesByIds(List<String> ids) throws ApiException {
        ApiResponse<Object> localVarResp = getSpacesByIdsWithHttpInfo(ids);
        return localVarResp.getData();
    }

    /**
     * Get the spaces by their ids
     * Get the spaces by their ids OauthScopes: READ_SPACE
     * @param ids an array of ids (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Spaces successfully retrieved. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> getSpacesByIdsWithHttpInfo(List<String> ids) throws ApiException {
        okhttp3.Call localVarCall = getSpacesByIdsValidateBeforeCall(ids, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the spaces by their ids (asynchronously)
     * Get the spaces by their ids OauthScopes: READ_SPACE
     * @param ids an array of ids (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Spaces successfully retrieved. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSpacesByIdsAsync(List<String> ids, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSpacesByIdsValidateBeforeCall(ids, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for grantSpaceAcces
     * @param spaceId Id of the space (required)
     * @param participantId Id of the participant (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> access granted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid parameter </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call grantSpaceAccesCall(String spaceId, String participantId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/spaces/{spaceId}/participant/{participantId}/grant"
            .replace("{" + "spaceId" + "}", localVarApiClient.escapeString(spaceId.toString()))
            .replace("{" + "participantId" + "}", localVarApiClient.escapeString(participantId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call grantSpaceAccesValidateBeforeCall(String spaceId, String participantId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'spaceId' is set
        if (spaceId == null) {
            throw new ApiException("Missing the required parameter 'spaceId' when calling grantSpaceAcces(Async)");
        }

        // verify the required parameter 'participantId' is set
        if (participantId == null) {
            throw new ApiException("Missing the required parameter 'participantId' when calling grantSpaceAcces(Async)");
        }

        return grantSpaceAccesCall(spaceId, participantId, _callback);

    }

    /**
     * grant access for a space
     * grant access for a space OauthScopes: WRITE_SPACE, MANAGE_SPACE
     * @param spaceId Id of the space (required)
     * @param participantId Id of the participant (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> access granted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid parameter </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public void grantSpaceAcces(String spaceId, String participantId) throws ApiException {
        grantSpaceAccesWithHttpInfo(spaceId, participantId);
    }

    /**
     * grant access for a space
     * grant access for a space OauthScopes: WRITE_SPACE, MANAGE_SPACE
     * @param spaceId Id of the space (required)
     * @param participantId Id of the participant (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> access granted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid parameter </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> grantSpaceAccesWithHttpInfo(String spaceId, String participantId) throws ApiException {
        okhttp3.Call localVarCall = grantSpaceAccesValidateBeforeCall(spaceId, participantId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * grant access for a space (asynchronously)
     * grant access for a space OauthScopes: WRITE_SPACE, MANAGE_SPACE
     * @param spaceId Id of the space (required)
     * @param participantId Id of the participant (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> access granted </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid parameter </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call grantSpaceAccesAsync(String spaceId, String participantId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = grantSpaceAccesValidateBeforeCall(spaceId, participantId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for joinSpace
     * @param id The id of the space (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Space successfully joined </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call joinSpaceCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/spaces/{id}/join"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call joinSpaceValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling joinSpace(Async)");
        }

        return joinSpaceCall(id, _callback);

    }

    /**
     * Join a space
     * Join a space OauthScopes: WRITE_SPACE
     * @param id The id of the space (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Space successfully joined </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public Object joinSpace(String id) throws ApiException {
        ApiResponse<Object> localVarResp = joinSpaceWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Join a space
     * Join a space OauthScopes: WRITE_SPACE
     * @param id The id of the space (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Space successfully joined </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> joinSpaceWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = joinSpaceValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Join a space (asynchronously)
     * Join a space OauthScopes: WRITE_SPACE
     * @param id The id of the space (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Space successfully joined </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call joinSpaceAsync(String id, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = joinSpaceValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for leaveSpace
     * @param id The id of the space (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Space successfully left </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call leaveSpaceCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/spaces/{id}/leave"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call leaveSpaceValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling leaveSpace(Async)");
        }

        return leaveSpaceCall(id, _callback);

    }

    /**
     * Leave a space
     * Leave a space OauthScopes: WRITE_SPACE
     * @param id The id of the space (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Space successfully left </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public void leaveSpace(String id) throws ApiException {
        leaveSpaceWithHttpInfo(id);
    }

    /**
     * Leave a space
     * Leave a space OauthScopes: WRITE_SPACE
     * @param id The id of the space (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Space successfully left </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> leaveSpaceWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = leaveSpaceValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Leave a space (asynchronously)
     * Leave a space OauthScopes: WRITE_SPACE
     * @param id The id of the space (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Space successfully left </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call leaveSpaceAsync(String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = leaveSpaceValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for likeSpaceItem
     * @param itemId The id of the item you want to like (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Space item successfully liked </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call likeSpaceItemCall(String itemId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/spaces/like/{itemId}"
            .replace("{" + "itemId" + "}", localVarApiClient.escapeString(itemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call likeSpaceItemValidateBeforeCall(String itemId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'itemId' is set
        if (itemId == null) {
            throw new ApiException("Missing the required parameter 'itemId' when calling likeSpaceItem(Async)");
        }

        return likeSpaceItemCall(itemId, _callback);

    }

    /**
     * Like a space item
     * Like a space item OauthScopes: WRITE_SPACE, UPDATE_SPACE_CONTENT
     * @param itemId The id of the item you want to like (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Space item successfully liked </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public void likeSpaceItem(String itemId) throws ApiException {
        likeSpaceItemWithHttpInfo(itemId);
    }

    /**
     * Like a space item
     * Like a space item OauthScopes: WRITE_SPACE, UPDATE_SPACE_CONTENT
     * @param itemId The id of the item you want to like (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Space item successfully liked </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> likeSpaceItemWithHttpInfo(String itemId) throws ApiException {
        okhttp3.Call localVarCall = likeSpaceItemValidateBeforeCall(itemId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Like a space item (asynchronously)
     * Like a space item OauthScopes: WRITE_SPACE, UPDATE_SPACE_CONTENT
     * @param itemId The id of the item you want to like (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Space item successfully liked </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call likeSpaceItemAsync(String itemId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = likeSpaceItemValidateBeforeCall(itemId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for pinTopic
     * @param topicId The id of the topic (required)
     * @param position The position to pin to (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Topic successfully pinned. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pinTopicCall(String topicId, BigDecimal position, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/spaces/{topicId}/pin"
            .replace("{" + "topicId" + "}", localVarApiClient.escapeString(topicId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (position != null) {
            localVarFormParams.put("position", position);
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pinTopicValidateBeforeCall(String topicId, BigDecimal position, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'topicId' is set
        if (topicId == null) {
            throw new ApiException("Missing the required parameter 'topicId' when calling pinTopic(Async)");
        }

        // verify the required parameter 'position' is set
        if (position == null) {
            throw new ApiException("Missing the required parameter 'position' when calling pinTopic(Async)");
        }

        return pinTopicCall(topicId, position, _callback);

    }

    /**
     * Pin a topic
     * Pin a topic OauthScopes: WRITE_SPACE, MANAGE_SPACE
     * @param topicId The id of the topic (required)
     * @param position The position to pin to (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Topic successfully pinned. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public void pinTopic(String topicId, BigDecimal position) throws ApiException {
        pinTopicWithHttpInfo(topicId, position);
    }

    /**
     * Pin a topic
     * Pin a topic OauthScopes: WRITE_SPACE, MANAGE_SPACE
     * @param topicId The id of the topic (required)
     * @param position The position to pin to (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Topic successfully pinned. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> pinTopicWithHttpInfo(String topicId, BigDecimal position) throws ApiException {
        okhttp3.Call localVarCall = pinTopicValidateBeforeCall(topicId, position, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Pin a topic (asynchronously)
     * Pin a topic OauthScopes: WRITE_SPACE, MANAGE_SPACE
     * @param topicId The id of the topic (required)
     * @param position The position to pin to (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Topic successfully pinned. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pinTopicAsync(String topicId, BigDecimal position, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = pinTopicValidateBeforeCall(topicId, position, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for requestSpaceAcces
     * @param spaceId Id of the space (required)
     * @param reason Reason why the Access has been requested (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> request is recieved </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid parameter </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call requestSpaceAccesCall(String spaceId, String reason, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/spaces/{spaceId}/participant/request"
            .replace("{" + "spaceId" + "}", localVarApiClient.escapeString(spaceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (reason != null) {
            localVarFormParams.put("reason", reason);
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call requestSpaceAccesValidateBeforeCall(String spaceId, String reason, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'spaceId' is set
        if (spaceId == null) {
            throw new ApiException("Missing the required parameter 'spaceId' when calling requestSpaceAcces(Async)");
        }

        return requestSpaceAccesCall(spaceId, reason, _callback);

    }

    /**
     * request access for a space
     * request access for a space OauthScopes: READ_SPACE
     * @param spaceId Id of the space (required)
     * @param reason Reason why the Access has been requested (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> request is recieved </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid parameter </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public void requestSpaceAcces(String spaceId, String reason) throws ApiException {
        requestSpaceAccesWithHttpInfo(spaceId, reason);
    }

    /**
     * request access for a space
     * request access for a space OauthScopes: READ_SPACE
     * @param spaceId Id of the space (required)
     * @param reason Reason why the Access has been requested (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> request is recieved </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid parameter </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> requestSpaceAccesWithHttpInfo(String spaceId, String reason) throws ApiException {
        okhttp3.Call localVarCall = requestSpaceAccesValidateBeforeCall(spaceId, reason, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * request access for a space (asynchronously)
     * request access for a space OauthScopes: READ_SPACE
     * @param spaceId Id of the space (required)
     * @param reason Reason why the Access has been requested (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> request is recieved </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> invalid parameter </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call requestSpaceAccesAsync(String spaceId, String reason, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = requestSpaceAccesValidateBeforeCall(spaceId, reason, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for searchParticipantsToAdd
     * @param id The id of the space (required)
     * @param query The query  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> participants successfully found </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchParticipantsToAddCall(String id, String query, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/spaces/{id}/searchParticipantsToAdd"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (query != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query", query));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchParticipantsToAddValidateBeforeCall(String id, String query, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling searchParticipantsToAdd(Async)");
        }

        // verify the required parameter 'query' is set
        if (query == null) {
            throw new ApiException("Missing the required parameter 'query' when calling searchParticipantsToAdd(Async)");
        }

        return searchParticipantsToAddCall(id, query, _callback);

    }

    /**
     * Finds participants to add to add to a space 
     * Finds participants to add to a space  OauthScopes: WRITE_SPACE, MANAGE_SPACE, ORGANIZE_SPACE
     * @param id The id of the space (required)
     * @param query The query  (required)
     * @return List&lt;AddParticipantsSearchResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> participants successfully found </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public List<AddParticipantsSearchResult> searchParticipantsToAdd(String id, String query) throws ApiException {
        ApiResponse<List<AddParticipantsSearchResult>> localVarResp = searchParticipantsToAddWithHttpInfo(id, query);
        return localVarResp.getData();
    }

    /**
     * Finds participants to add to add to a space 
     * Finds participants to add to a space  OauthScopes: WRITE_SPACE, MANAGE_SPACE, ORGANIZE_SPACE
     * @param id The id of the space (required)
     * @param query The query  (required)
     * @return ApiResponse&lt;List&lt;AddParticipantsSearchResult&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> participants successfully found </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<AddParticipantsSearchResult>> searchParticipantsToAddWithHttpInfo(String id, String query) throws ApiException {
        okhttp3.Call localVarCall = searchParticipantsToAddValidateBeforeCall(id, query, null);
        Type localVarReturnType = new TypeToken<List<AddParticipantsSearchResult>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Finds participants to add to add to a space  (asynchronously)
     * Finds participants to add to a space  OauthScopes: WRITE_SPACE, MANAGE_SPACE, ORGANIZE_SPACE
     * @param id The id of the space (required)
     * @param query The query  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> participants successfully found </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchParticipantsToAddAsync(String id, String query, final ApiCallback<List<AddParticipantsSearchResult>> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchParticipantsToAddValidateBeforeCall(id, query, _callback);
        Type localVarReturnType = new TypeToken<List<AddParticipantsSearchResult>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for searchSpaceParticipants
     * @param id The id of the space. (required)
     * @param query The query to search with. If searchpointer/hasMotre is returned, refine query. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Participants successfully retrieved </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchSpaceParticipantsCall(String id, String query, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/spaces/{id}/searchSpaceParticipants"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (query != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query", query));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchSpaceParticipantsValidateBeforeCall(String id, String query, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling searchSpaceParticipants(Async)");
        }

        // verify the required parameter 'query' is set
        if (query == null) {
            throw new ApiException("Missing the required parameter 'query' when calling searchSpaceParticipants(Async)");
        }

        return searchSpaceParticipantsCall(id, query, _callback);

    }

    /**
     * Get the participants of a space
     * Get the participants of a space OauthScopes: READ_SPACE
     * @param id The id of the space. (required)
     * @param query The query to search with. If searchpointer/hasMotre is returned, refine query. (required)
     * @return List&lt;ParticipantsSearchResultLarge&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Participants successfully retrieved </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public List<ParticipantsSearchResultLarge> searchSpaceParticipants(String id, String query) throws ApiException {
        ApiResponse<List<ParticipantsSearchResultLarge>> localVarResp = searchSpaceParticipantsWithHttpInfo(id, query);
        return localVarResp.getData();
    }

    /**
     * Get the participants of a space
     * Get the participants of a space OauthScopes: READ_SPACE
     * @param id The id of the space. (required)
     * @param query The query to search with. If searchpointer/hasMotre is returned, refine query. (required)
     * @return ApiResponse&lt;List&lt;ParticipantsSearchResultLarge&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Participants successfully retrieved </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ParticipantsSearchResultLarge>> searchSpaceParticipantsWithHttpInfo(String id, String query) throws ApiException {
        okhttp3.Call localVarCall = searchSpaceParticipantsValidateBeforeCall(id, query, null);
        Type localVarReturnType = new TypeToken<List<ParticipantsSearchResultLarge>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the participants of a space (asynchronously)
     * Get the participants of a space OauthScopes: READ_SPACE
     * @param id The id of the space. (required)
     * @param query The query to search with. If searchpointer/hasMotre is returned, refine query. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Participants successfully retrieved </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchSpaceParticipantsAsync(String id, String query, final ApiCallback<List<ParticipantsSearchResultLarge>> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchSpaceParticipantsValidateBeforeCall(id, query, _callback);
        Type localVarReturnType = new TypeToken<List<ParticipantsSearchResultLarge>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for startBasicSpacesSearch
     * @param scope the scope of the search (required)
     * @param searchTerm the term to search for (required)
     * @param startTime the starttime (optional)
     * @param endTime the end time (optional)
     * @param prioritySpaces list of prioritized spaces (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> search successfully executed </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call startBasicSpacesSearchCall(String scope, String searchTerm, OffsetDateTime startTime, OffsetDateTime endTime, List<String> prioritySpaces, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/spaces/search/startBasic";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (scope != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("scope", scope));
        }

        if (searchTerm != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("searchTerm", searchTerm));
        }

        if (startTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startTime", startTime));
        }

        if (endTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endTime", endTime));
        }

        if (prioritySpaces != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "prioritySpaces", prioritySpaces));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call startBasicSpacesSearchValidateBeforeCall(String scope, String searchTerm, OffsetDateTime startTime, OffsetDateTime endTime, List<String> prioritySpaces, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'scope' is set
        if (scope == null) {
            throw new ApiException("Missing the required parameter 'scope' when calling startBasicSpacesSearch(Async)");
        }

        // verify the required parameter 'searchTerm' is set
        if (searchTerm == null) {
            throw new ApiException("Missing the required parameter 'searchTerm' when calling startBasicSpacesSearch(Async)");
        }

        return startBasicSpacesSearchCall(scope, searchTerm, startTime, endTime, prioritySpaces, _callback);

    }

    /**
     * starts a basic search in spaces
     * starts a basic search in spaces OauthScopes: READ_SPACE
     * @param scope the scope of the search (required)
     * @param searchTerm the term to search for (required)
     * @param startTime the starttime (optional)
     * @param endTime the end time (optional)
     * @param prioritySpaces list of prioritized spaces (optional)
     * @return BasicSearchResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> search successfully executed </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public BasicSearchResult startBasicSpacesSearch(String scope, String searchTerm, OffsetDateTime startTime, OffsetDateTime endTime, List<String> prioritySpaces) throws ApiException {
        ApiResponse<BasicSearchResult> localVarResp = startBasicSpacesSearchWithHttpInfo(scope, searchTerm, startTime, endTime, prioritySpaces);
        return localVarResp.getData();
    }

    /**
     * starts a basic search in spaces
     * starts a basic search in spaces OauthScopes: READ_SPACE
     * @param scope the scope of the search (required)
     * @param searchTerm the term to search for (required)
     * @param startTime the starttime (optional)
     * @param endTime the end time (optional)
     * @param prioritySpaces list of prioritized spaces (optional)
     * @return ApiResponse&lt;BasicSearchResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> search successfully executed </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BasicSearchResult> startBasicSpacesSearchWithHttpInfo(String scope, String searchTerm, OffsetDateTime startTime, OffsetDateTime endTime, List<String> prioritySpaces) throws ApiException {
        okhttp3.Call localVarCall = startBasicSpacesSearchValidateBeforeCall(scope, searchTerm, startTime, endTime, prioritySpaces, null);
        Type localVarReturnType = new TypeToken<BasicSearchResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * starts a basic search in spaces (asynchronously)
     * starts a basic search in spaces OauthScopes: READ_SPACE
     * @param scope the scope of the search (required)
     * @param searchTerm the term to search for (required)
     * @param startTime the starttime (optional)
     * @param endTime the end time (optional)
     * @param prioritySpaces list of prioritized spaces (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> search successfully executed </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call startBasicSpacesSearchAsync(String scope, String searchTerm, OffsetDateTime startTime, OffsetDateTime endTime, List<String> prioritySpaces, final ApiCallback<BasicSearchResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = startBasicSpacesSearchValidateBeforeCall(scope, searchTerm, startTime, endTime, prioritySpaces, _callback);
        Type localVarReturnType = new TypeToken<BasicSearchResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for startDetailedSpaceSearch
     * @param scope the scope of the search (required)
     * @param searchTerm the term to search for (required)
     * @param spaceId missing documentation (required)
     * @param startTime the starttime (optional)
     * @param endTime the end time (optional)
     * @param searchId missing documentation (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> search successfully executed </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call startDetailedSpaceSearchCall(String scope, String searchTerm, String spaceId, OffsetDateTime startTime, OffsetDateTime endTime, String searchId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/spaces/search/startDetailed";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (scope != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("scope", scope));
        }

        if (searchTerm != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("searchTerm", searchTerm));
        }

        if (startTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startTime", startTime));
        }

        if (endTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endTime", endTime));
        }

        if (spaceId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("spaceId", spaceId));
        }

        if (searchId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("searchId", searchId));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call startDetailedSpaceSearchValidateBeforeCall(String scope, String searchTerm, String spaceId, OffsetDateTime startTime, OffsetDateTime endTime, String searchId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'scope' is set
        if (scope == null) {
            throw new ApiException("Missing the required parameter 'scope' when calling startDetailedSpaceSearch(Async)");
        }

        // verify the required parameter 'searchTerm' is set
        if (searchTerm == null) {
            throw new ApiException("Missing the required parameter 'searchTerm' when calling startDetailedSpaceSearch(Async)");
        }

        // verify the required parameter 'spaceId' is set
        if (spaceId == null) {
            throw new ApiException("Missing the required parameter 'spaceId' when calling startDetailedSpaceSearch(Async)");
        }

        return startDetailedSpaceSearchCall(scope, searchTerm, spaceId, startTime, endTime, searchId, _callback);

    }

    /**
     * starts a detailed search in a space
     * starts a detailed search in a space OauthScopes: READ_SPACE
     * @param scope the scope of the search (required)
     * @param searchTerm the term to search for (required)
     * @param spaceId missing documentation (required)
     * @param startTime the starttime (optional)
     * @param endTime the end time (optional)
     * @param searchId missing documentation (optional)
     * @return List&lt;SpaceSearchResultDetailedBack&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> search successfully executed </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public List<SpaceSearchResultDetailedBack> startDetailedSpaceSearch(String scope, String searchTerm, String spaceId, OffsetDateTime startTime, OffsetDateTime endTime, String searchId) throws ApiException {
        ApiResponse<List<SpaceSearchResultDetailedBack>> localVarResp = startDetailedSpaceSearchWithHttpInfo(scope, searchTerm, spaceId, startTime, endTime, searchId);
        return localVarResp.getData();
    }

    /**
     * starts a detailed search in a space
     * starts a detailed search in a space OauthScopes: READ_SPACE
     * @param scope the scope of the search (required)
     * @param searchTerm the term to search for (required)
     * @param spaceId missing documentation (required)
     * @param startTime the starttime (optional)
     * @param endTime the end time (optional)
     * @param searchId missing documentation (optional)
     * @return ApiResponse&lt;List&lt;SpaceSearchResultDetailedBack&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> search successfully executed </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<SpaceSearchResultDetailedBack>> startDetailedSpaceSearchWithHttpInfo(String scope, String searchTerm, String spaceId, OffsetDateTime startTime, OffsetDateTime endTime, String searchId) throws ApiException {
        okhttp3.Call localVarCall = startDetailedSpaceSearchValidateBeforeCall(scope, searchTerm, spaceId, startTime, endTime, searchId, null);
        Type localVarReturnType = new TypeToken<List<SpaceSearchResultDetailedBack>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * starts a detailed search in a space (asynchronously)
     * starts a detailed search in a space OauthScopes: READ_SPACE
     * @param scope the scope of the search (required)
     * @param searchTerm the term to search for (required)
     * @param spaceId missing documentation (required)
     * @param startTime the starttime (optional)
     * @param endTime the end time (optional)
     * @param searchId missing documentation (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> search successfully executed </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call startDetailedSpaceSearchAsync(String scope, String searchTerm, String spaceId, OffsetDateTime startTime, OffsetDateTime endTime, String searchId, final ApiCallback<List<SpaceSearchResultDetailedBack>> _callback) throws ApiException {

        okhttp3.Call localVarCall = startDetailedSpaceSearchValidateBeforeCall(scope, searchTerm, spaceId, startTime, endTime, searchId, _callback);
        Type localVarReturnType = new TypeToken<List<SpaceSearchResultDetailedBack>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for unassignLabels
     * @param id The id of the space. (required)
     * @param labelIds missing documentation (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Labels successfully unassigned </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call unassignLabelsCall(String id, List<String> labelIds, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/spaces/{id}/labels/unassign"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (labelIds != null) {
            localVarFormParams.put("labelIds", labelIds);
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call unassignLabelsValidateBeforeCall(String id, List<String> labelIds, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling unassignLabels(Async)");
        }

        // verify the required parameter 'labelIds' is set
        if (labelIds == null) {
            throw new ApiException("Missing the required parameter 'labelIds' when calling unassignLabels(Async)");
        }

        return unassignLabelsCall(id, labelIds, _callback);

    }

    /**
     * Unassign labels
     * Unassign labels from a space OauthScopes: WRITE_SPACE, ORGANIZE_SPACE
     * @param id The id of the space. (required)
     * @param labelIds missing documentation (required)
     * @return List&lt;LabelIds&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Labels successfully unassigned </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public List<LabelIds> unassignLabels(String id, List<String> labelIds) throws ApiException {
        ApiResponse<List<LabelIds>> localVarResp = unassignLabelsWithHttpInfo(id, labelIds);
        return localVarResp.getData();
    }

    /**
     * Unassign labels
     * Unassign labels from a space OauthScopes: WRITE_SPACE, ORGANIZE_SPACE
     * @param id The id of the space. (required)
     * @param labelIds missing documentation (required)
     * @return ApiResponse&lt;List&lt;LabelIds&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Labels successfully unassigned </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<LabelIds>> unassignLabelsWithHttpInfo(String id, List<String> labelIds) throws ApiException {
        okhttp3.Call localVarCall = unassignLabelsValidateBeforeCall(id, labelIds, null);
        Type localVarReturnType = new TypeToken<List<LabelIds>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Unassign labels (asynchronously)
     * Unassign labels from a space OauthScopes: WRITE_SPACE, ORGANIZE_SPACE
     * @param id The id of the space. (required)
     * @param labelIds missing documentation (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Labels successfully unassigned </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call unassignLabelsAsync(String id, List<String> labelIds, final ApiCallback<List<LabelIds>> _callback) throws ApiException {

        okhttp3.Call localVarCall = unassignLabelsValidateBeforeCall(id, labelIds, _callback);
        Type localVarReturnType = new TypeToken<List<LabelIds>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for unflagSpaceItem
     * @param itemId the id of the item you want to unflag (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Space item successfully unflagged. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call unflagSpaceItemCall(String itemId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/spaces/unflag/{itemId}"
            .replace("{" + "itemId" + "}", localVarApiClient.escapeString(itemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call unflagSpaceItemValidateBeforeCall(String itemId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'itemId' is set
        if (itemId == null) {
            throw new ApiException("Missing the required parameter 'itemId' when calling unflagSpaceItem(Async)");
        }

        return unflagSpaceItemCall(itemId, _callback);

    }

    /**
     * Unflag a space item
     * Unflag a space item OauthScopes: WRITE_SPACE, UPDATE_SPACE_CONTENT
     * @param itemId the id of the item you want to unflag (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Space item successfully unflagged. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public void unflagSpaceItem(String itemId) throws ApiException {
        unflagSpaceItemWithHttpInfo(itemId);
    }

    /**
     * Unflag a space item
     * Unflag a space item OauthScopes: WRITE_SPACE, UPDATE_SPACE_CONTENT
     * @param itemId the id of the item you want to unflag (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Space item successfully unflagged. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> unflagSpaceItemWithHttpInfo(String itemId) throws ApiException {
        okhttp3.Call localVarCall = unflagSpaceItemValidateBeforeCall(itemId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Unflag a space item (asynchronously)
     * Unflag a space item OauthScopes: WRITE_SPACE, UPDATE_SPACE_CONTENT
     * @param itemId the id of the item you want to unflag (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Space item successfully unflagged. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call unflagSpaceItemAsync(String itemId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = unflagSpaceItemValidateBeforeCall(itemId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for unlikeSpaceItem
     * @param itemId The id of the item you want to unlike (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Space item successfully unliked. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call unlikeSpaceItemCall(String itemId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/spaces/unlike/{itemId}"
            .replace("{" + "itemId" + "}", localVarApiClient.escapeString(itemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call unlikeSpaceItemValidateBeforeCall(String itemId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'itemId' is set
        if (itemId == null) {
            throw new ApiException("Missing the required parameter 'itemId' when calling unlikeSpaceItem(Async)");
        }

        return unlikeSpaceItemCall(itemId, _callback);

    }

    /**
     * Unlike a space item
     * Unlike a space item OauthScopes: WRITE_SPACE, UPDATE_SPACE_CONTENT
     * @param itemId The id of the item you want to unlike (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Space item successfully unliked. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public void unlikeSpaceItem(String itemId) throws ApiException {
        unlikeSpaceItemWithHttpInfo(itemId);
    }

    /**
     * Unlike a space item
     * Unlike a space item OauthScopes: WRITE_SPACE, UPDATE_SPACE_CONTENT
     * @param itemId The id of the item you want to unlike (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Space item successfully unliked. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> unlikeSpaceItemWithHttpInfo(String itemId) throws ApiException {
        okhttp3.Call localVarCall = unlikeSpaceItemValidateBeforeCall(itemId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Unlike a space item (asynchronously)
     * Unlike a space item OauthScopes: WRITE_SPACE, UPDATE_SPACE_CONTENT
     * @param itemId The id of the item you want to unlike (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Space item successfully unliked. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call unlikeSpaceItemAsync(String itemId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = unlikeSpaceItemValidateBeforeCall(itemId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for unpinTopic
     * @param topicId The id of the topic to unpin (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Topic successfully unpinned. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call unpinTopicCall(String topicId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/spaces/{topicId}/unpin"
            .replace("{" + "topicId" + "}", localVarApiClient.escapeString(topicId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call unpinTopicValidateBeforeCall(String topicId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'topicId' is set
        if (topicId == null) {
            throw new ApiException("Missing the required parameter 'topicId' when calling unpinTopic(Async)");
        }

        return unpinTopicCall(topicId, _callback);

    }

    /**
     * Unpin a topic
     * Unpin a topic OauthScopes: WRITE_SPACE, MANAGE_SPACE
     * @param topicId The id of the topic to unpin (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Topic successfully unpinned. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public void unpinTopic(String topicId) throws ApiException {
        unpinTopicWithHttpInfo(topicId);
    }

    /**
     * Unpin a topic
     * Unpin a topic OauthScopes: WRITE_SPACE, MANAGE_SPACE
     * @param topicId The id of the topic to unpin (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Topic successfully unpinned. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> unpinTopicWithHttpInfo(String topicId) throws ApiException {
        okhttp3.Call localVarCall = unpinTopicValidateBeforeCall(topicId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Unpin a topic (asynchronously)
     * Unpin a topic OauthScopes: WRITE_SPACE, MANAGE_SPACE
     * @param topicId The id of the topic to unpin (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Topic successfully unpinned. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call unpinTopicAsync(String topicId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = unpinTopicValidateBeforeCall(topicId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateParticipantInSpace
     * @param spaceId Id of the space (required)
     * @param role updated role of participant (required)
     * @param userId The id of the participant to update (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Role successfully updated </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateParticipantInSpaceCall(String spaceId, String role, String userId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/spaces/{spaceId}/participant"
            .replace("{" + "spaceId" + "}", localVarApiClient.escapeString(spaceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (role != null) {
            localVarFormParams.put("role", role);
        }

        if (userId != null) {
            localVarFormParams.put("userId", userId);
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateParticipantInSpaceValidateBeforeCall(String spaceId, String role, String userId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'spaceId' is set
        if (spaceId == null) {
            throw new ApiException("Missing the required parameter 'spaceId' when calling updateParticipantInSpace(Async)");
        }

        // verify the required parameter 'role' is set
        if (role == null) {
            throw new ApiException("Missing the required parameter 'role' when calling updateParticipantInSpace(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling updateParticipantInSpace(Async)");
        }

        return updateParticipantInSpaceCall(spaceId, role, userId, _callback);

    }

    /**
     * Update participant
     * Update participant in space OauthScopes: WRITE_SPACE, MANAGE_SPACE, ORGANIZE_SPACE
     * @param spaceId Id of the space (required)
     * @param role updated role of participant (required)
     * @param userId The id of the participant to update (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Role successfully updated </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public void updateParticipantInSpace(String spaceId, String role, String userId) throws ApiException {
        updateParticipantInSpaceWithHttpInfo(spaceId, role, userId);
    }

    /**
     * Update participant
     * Update participant in space OauthScopes: WRITE_SPACE, MANAGE_SPACE, ORGANIZE_SPACE
     * @param spaceId Id of the space (required)
     * @param role updated role of participant (required)
     * @param userId The id of the participant to update (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Role successfully updated </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> updateParticipantInSpaceWithHttpInfo(String spaceId, String role, String userId) throws ApiException {
        okhttp3.Call localVarCall = updateParticipantInSpaceValidateBeforeCall(spaceId, role, userId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update participant (asynchronously)
     * Update participant in space OauthScopes: WRITE_SPACE, MANAGE_SPACE, ORGANIZE_SPACE
     * @param spaceId Id of the space (required)
     * @param role updated role of participant (required)
     * @param userId The id of the participant to update (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Role successfully updated </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateParticipantInSpaceAsync(String spaceId, String role, String userId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateParticipantInSpaceValidateBeforeCall(spaceId, role, userId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateReadTimestamp
     * @param id Id of a space (required)
     * @param timestamp The new timestamp (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Read timestamp successfully updated. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateReadTimestampCall(String id, OffsetDateTime timestamp, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/spaces/{id}/updateTimestamp"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (timestamp != null) {
            localVarFormParams.put("timestamp", timestamp);
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateReadTimestampValidateBeforeCall(String id, OffsetDateTime timestamp, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateReadTimestamp(Async)");
        }

        // verify the required parameter 'timestamp' is set
        if (timestamp == null) {
            throw new ApiException("Missing the required parameter 'timestamp' when calling updateReadTimestamp(Async)");
        }

        return updateReadTimestampCall(id, timestamp, _callback);

    }

    /**
     * Update read timestamp
     * Update read timestamp OauthScopes: READ_SPACE, WRITE_SPACE
     * @param id Id of a space (required)
     * @param timestamp The new timestamp (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Read timestamp successfully updated. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public void updateReadTimestamp(String id, OffsetDateTime timestamp) throws ApiException {
        updateReadTimestampWithHttpInfo(id, timestamp);
    }

    /**
     * Update read timestamp
     * Update read timestamp OauthScopes: READ_SPACE, WRITE_SPACE
     * @param id Id of a space (required)
     * @param timestamp The new timestamp (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Read timestamp successfully updated. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> updateReadTimestampWithHttpInfo(String id, OffsetDateTime timestamp) throws ApiException {
        okhttp3.Call localVarCall = updateReadTimestampValidateBeforeCall(id, timestamp, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update read timestamp (asynchronously)
     * Update read timestamp OauthScopes: READ_SPACE, WRITE_SPACE
     * @param id Id of a space (required)
     * @param timestamp The new timestamp (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Read timestamp successfully updated. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateReadTimestampAsync(String id, OffsetDateTime timestamp, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateReadTimestampValidateBeforeCall(id, timestamp, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateSpace
     * @param id id of the space (required)
     * @param accessModeType Access mode (optional, default to NO_CHANGE)
     * @param description description of the space (optional)
     * @param largePictureBase64 large picture (optional)
     * @param name name of the space (optional)
     * @param ownerId ownerid of the space (optional)
     * @param role role (optional, default to NO_CHANGE)
     * @param smallPictureBase64 small picture (optional)
     * @param status status (optional, default to ENABLED)
     * @param tags tags of the space (optional)
     * @param type type (optional, default to NO_CHANGE)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Space successfully updated. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateSpaceCall(String id, String accessModeType, String description, String largePictureBase64, String name, String ownerId, String role, String smallPictureBase64, String status, List<String> tags, String type, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/spaces/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (accessModeType != null) {
            localVarFormParams.put("accessModeType", accessModeType);
        }

        if (description != null) {
            localVarFormParams.put("description", description);
        }

        if (largePictureBase64 != null) {
            localVarFormParams.put("largePictureBase64", largePictureBase64);
        }

        if (name != null) {
            localVarFormParams.put("name", name);
        }

        if (ownerId != null) {
            localVarFormParams.put("ownerId", ownerId);
        }

        if (role != null) {
            localVarFormParams.put("role", role);
        }

        if (smallPictureBase64 != null) {
            localVarFormParams.put("smallPictureBase64", smallPictureBase64);
        }

        if (status != null) {
            localVarFormParams.put("status", status);
        }

        if (tags != null) {
            localVarFormParams.put("tags", tags);
        }

        if (type != null) {
            localVarFormParams.put("type", type);
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateSpaceValidateBeforeCall(String id, String accessModeType, String description, String largePictureBase64, String name, String ownerId, String role, String smallPictureBase64, String status, List<String> tags, String type, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateSpace(Async)");
        }

        return updateSpaceCall(id, accessModeType, description, largePictureBase64, name, ownerId, role, smallPictureBase64, status, tags, type, _callback);

    }

    /**
     * Update a space
     * Update a space OauthScopes: WRITE_SPACE, UPDATE_SPACE_CONTENT
     * @param id id of the space (required)
     * @param accessModeType Access mode (optional, default to NO_CHANGE)
     * @param description description of the space (optional)
     * @param largePictureBase64 large picture (optional)
     * @param name name of the space (optional)
     * @param ownerId ownerid of the space (optional)
     * @param role role (optional, default to NO_CHANGE)
     * @param smallPictureBase64 small picture (optional)
     * @param status status (optional, default to ENABLED)
     * @param tags tags of the space (optional)
     * @param type type (optional, default to NO_CHANGE)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Space successfully updated. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public Object updateSpace(String id, String accessModeType, String description, String largePictureBase64, String name, String ownerId, String role, String smallPictureBase64, String status, List<String> tags, String type) throws ApiException {
        ApiResponse<Object> localVarResp = updateSpaceWithHttpInfo(id, accessModeType, description, largePictureBase64, name, ownerId, role, smallPictureBase64, status, tags, type);
        return localVarResp.getData();
    }

    /**
     * Update a space
     * Update a space OauthScopes: WRITE_SPACE, UPDATE_SPACE_CONTENT
     * @param id id of the space (required)
     * @param accessModeType Access mode (optional, default to NO_CHANGE)
     * @param description description of the space (optional)
     * @param largePictureBase64 large picture (optional)
     * @param name name of the space (optional)
     * @param ownerId ownerid of the space (optional)
     * @param role role (optional, default to NO_CHANGE)
     * @param smallPictureBase64 small picture (optional)
     * @param status status (optional, default to ENABLED)
     * @param tags tags of the space (optional)
     * @param type type (optional, default to NO_CHANGE)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Space successfully updated. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> updateSpaceWithHttpInfo(String id, String accessModeType, String description, String largePictureBase64, String name, String ownerId, String role, String smallPictureBase64, String status, List<String> tags, String type) throws ApiException {
        okhttp3.Call localVarCall = updateSpaceValidateBeforeCall(id, accessModeType, description, largePictureBase64, name, ownerId, role, smallPictureBase64, status, tags, type, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a space (asynchronously)
     * Update a space OauthScopes: WRITE_SPACE, UPDATE_SPACE_CONTENT
     * @param id id of the space (required)
     * @param accessModeType Access mode (optional, default to NO_CHANGE)
     * @param description description of the space (optional)
     * @param largePictureBase64 large picture (optional)
     * @param name name of the space (optional)
     * @param ownerId ownerid of the space (optional)
     * @param role role (optional, default to NO_CHANGE)
     * @param smallPictureBase64 small picture (optional)
     * @param status status (optional, default to ENABLED)
     * @param tags tags of the space (optional)
     * @param type type (optional, default to NO_CHANGE)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Space successfully updated. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateSpaceAsync(String id, String accessModeType, String description, String largePictureBase64, String name, String ownerId, String role, String smallPictureBase64, String status, List<String> tags, String type, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateSpaceValidateBeforeCall(id, accessModeType, description, largePictureBase64, name, ownerId, role, smallPictureBase64, status, tags, type, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateSpaceReply
     * @param spaceId ID of the space (required)
     * @param topicId ID of the topic (required)
     * @param replyId id of the reply (required)
     * @param attachments the attached files (optional)
     * @param complex complex or not (optional)
     * @param content the content of the reply (optional)
     * @param formMetaData formMetaData of the reply (optional)
     * @param mentionedUsers the mentioned users in the reply (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The updated space reply </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid input </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateSpaceReplyCall(String spaceId, String topicId, String replyId, List<String> attachments, Boolean complex, String content, String formMetaData, List<String> mentionedUsers, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/spaces/{spaceId}/topic/{topicId}/reply/{replyId}"
            .replace("{" + "spaceId" + "}", localVarApiClient.escapeString(spaceId.toString()))
            .replace("{" + "topicId" + "}", localVarApiClient.escapeString(topicId.toString()))
            .replace("{" + "replyId" + "}", localVarApiClient.escapeString(replyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (attachments != null) {
            localVarFormParams.put("attachments", attachments);
        }

        if (complex != null) {
            localVarFormParams.put("complex", complex);
        }

        if (content != null) {
            localVarFormParams.put("content", content);
        }

        if (formMetaData != null) {
            localVarFormParams.put("formMetaData", formMetaData);
        }

        if (mentionedUsers != null) {
            localVarFormParams.put("mentionedUsers", mentionedUsers);
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateSpaceReplyValidateBeforeCall(String spaceId, String topicId, String replyId, List<String> attachments, Boolean complex, String content, String formMetaData, List<String> mentionedUsers, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'spaceId' is set
        if (spaceId == null) {
            throw new ApiException("Missing the required parameter 'spaceId' when calling updateSpaceReply(Async)");
        }

        // verify the required parameter 'topicId' is set
        if (topicId == null) {
            throw new ApiException("Missing the required parameter 'topicId' when calling updateSpaceReply(Async)");
        }

        // verify the required parameter 'replyId' is set
        if (replyId == null) {
            throw new ApiException("Missing the required parameter 'replyId' when calling updateSpaceReply(Async)");
        }

        return updateSpaceReplyCall(spaceId, topicId, replyId, attachments, complex, content, formMetaData, mentionedUsers, _callback);

    }

    /**
     * Updates a space reply
     * Updates a space reply OauthScopes: WRITE_SPACE, UPDATE_SPACE_CONTENT
     * @param spaceId ID of the space (required)
     * @param topicId ID of the topic (required)
     * @param replyId id of the reply (required)
     * @param attachments the attached files (optional)
     * @param complex complex or not (optional)
     * @param content the content of the reply (optional)
     * @param formMetaData formMetaData of the reply (optional)
     * @param mentionedUsers the mentioned users in the reply (optional)
     * @return SpaceReply
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The updated space reply </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid input </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public SpaceReply updateSpaceReply(String spaceId, String topicId, String replyId, List<String> attachments, Boolean complex, String content, String formMetaData, List<String> mentionedUsers) throws ApiException {
        ApiResponse<SpaceReply> localVarResp = updateSpaceReplyWithHttpInfo(spaceId, topicId, replyId, attachments, complex, content, formMetaData, mentionedUsers);
        return localVarResp.getData();
    }

    /**
     * Updates a space reply
     * Updates a space reply OauthScopes: WRITE_SPACE, UPDATE_SPACE_CONTENT
     * @param spaceId ID of the space (required)
     * @param topicId ID of the topic (required)
     * @param replyId id of the reply (required)
     * @param attachments the attached files (optional)
     * @param complex complex or not (optional)
     * @param content the content of the reply (optional)
     * @param formMetaData formMetaData of the reply (optional)
     * @param mentionedUsers the mentioned users in the reply (optional)
     * @return ApiResponse&lt;SpaceReply&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The updated space reply </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid input </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SpaceReply> updateSpaceReplyWithHttpInfo(String spaceId, String topicId, String replyId, List<String> attachments, Boolean complex, String content, String formMetaData, List<String> mentionedUsers) throws ApiException {
        okhttp3.Call localVarCall = updateSpaceReplyValidateBeforeCall(spaceId, topicId, replyId, attachments, complex, content, formMetaData, mentionedUsers, null);
        Type localVarReturnType = new TypeToken<SpaceReply>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates a space reply (asynchronously)
     * Updates a space reply OauthScopes: WRITE_SPACE, UPDATE_SPACE_CONTENT
     * @param spaceId ID of the space (required)
     * @param topicId ID of the topic (required)
     * @param replyId id of the reply (required)
     * @param attachments the attached files (optional)
     * @param complex complex or not (optional)
     * @param content the content of the reply (optional)
     * @param formMetaData formMetaData of the reply (optional)
     * @param mentionedUsers the mentioned users in the reply (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The updated space reply </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid input </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateSpaceReplyAsync(String spaceId, String topicId, String replyId, List<String> attachments, Boolean complex, String content, String formMetaData, List<String> mentionedUsers, final ApiCallback<SpaceReply> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateSpaceReplyValidateBeforeCall(spaceId, topicId, replyId, attachments, complex, content, formMetaData, mentionedUsers, _callback);
        Type localVarReturnType = new TypeToken<SpaceReply>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateSpaceTopic
     * @param spaceId ID of the space (required)
     * @param topicId Id of the topic to update (required)
     * @param attachments the attached files (optional)
     * @param complex complex or not (optional)
     * @param content content of the topic (optional)
     * @param contentTags the content tags (optional)
     * @param formMetaData formMetaData to update (optional)
     * @param mentionedUsers the updated mentioned users (optional)
     * @param subject the subject of the topic (optional)
     * @param tags the tags (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the updated space topic </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Http_bad_request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateSpaceTopicCall(String spaceId, String topicId, List<String> attachments, Boolean complex, String content, List<String> contentTags, String formMetaData, List<String> mentionedUsers, String subject, List<String> tags, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/spaces/{spaceId}/topic/{topicId}"
            .replace("{" + "spaceId" + "}", localVarApiClient.escapeString(spaceId.toString()))
            .replace("{" + "topicId" + "}", localVarApiClient.escapeString(topicId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (attachments != null) {
            localVarFormParams.put("attachments", attachments);
        }

        if (complex != null) {
            localVarFormParams.put("complex", complex);
        }

        if (content != null) {
            localVarFormParams.put("content", content);
        }

        if (contentTags != null) {
            localVarFormParams.put("contentTags", contentTags);
        }

        if (formMetaData != null) {
            localVarFormParams.put("formMetaData", formMetaData);
        }

        if (mentionedUsers != null) {
            localVarFormParams.put("mentionedUsers", mentionedUsers);
        }

        if (subject != null) {
            localVarFormParams.put("subject", subject);
        }

        if (tags != null) {
            localVarFormParams.put("tags", tags);
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateSpaceTopicValidateBeforeCall(String spaceId, String topicId, List<String> attachments, Boolean complex, String content, List<String> contentTags, String formMetaData, List<String> mentionedUsers, String subject, List<String> tags, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'spaceId' is set
        if (spaceId == null) {
            throw new ApiException("Missing the required parameter 'spaceId' when calling updateSpaceTopic(Async)");
        }

        // verify the required parameter 'topicId' is set
        if (topicId == null) {
            throw new ApiException("Missing the required parameter 'topicId' when calling updateSpaceTopic(Async)");
        }

        return updateSpaceTopicCall(spaceId, topicId, attachments, complex, content, contentTags, formMetaData, mentionedUsers, subject, tags, _callback);

    }

    /**
     * Updates a topic
     * Updates a topic OauthScopes: WRITE_SPACE, UPDATE_SPACE_CONTENT
     * @param spaceId ID of the space (required)
     * @param topicId Id of the topic to update (required)
     * @param attachments the attached files (optional)
     * @param complex complex or not (optional)
     * @param content content of the topic (optional)
     * @param contentTags the content tags (optional)
     * @param formMetaData formMetaData to update (optional)
     * @param mentionedUsers the updated mentioned users (optional)
     * @param subject the subject of the topic (optional)
     * @param tags the tags (optional)
     * @return SpaceTopic
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the updated space topic </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Http_bad_request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public SpaceTopic updateSpaceTopic(String spaceId, String topicId, List<String> attachments, Boolean complex, String content, List<String> contentTags, String formMetaData, List<String> mentionedUsers, String subject, List<String> tags) throws ApiException {
        ApiResponse<SpaceTopic> localVarResp = updateSpaceTopicWithHttpInfo(spaceId, topicId, attachments, complex, content, contentTags, formMetaData, mentionedUsers, subject, tags);
        return localVarResp.getData();
    }

    /**
     * Updates a topic
     * Updates a topic OauthScopes: WRITE_SPACE, UPDATE_SPACE_CONTENT
     * @param spaceId ID of the space (required)
     * @param topicId Id of the topic to update (required)
     * @param attachments the attached files (optional)
     * @param complex complex or not (optional)
     * @param content content of the topic (optional)
     * @param contentTags the content tags (optional)
     * @param formMetaData formMetaData to update (optional)
     * @param mentionedUsers the updated mentioned users (optional)
     * @param subject the subject of the topic (optional)
     * @param tags the tags (optional)
     * @return ApiResponse&lt;SpaceTopic&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the updated space topic </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Http_bad_request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SpaceTopic> updateSpaceTopicWithHttpInfo(String spaceId, String topicId, List<String> attachments, Boolean complex, String content, List<String> contentTags, String formMetaData, List<String> mentionedUsers, String subject, List<String> tags) throws ApiException {
        okhttp3.Call localVarCall = updateSpaceTopicValidateBeforeCall(spaceId, topicId, attachments, complex, content, contentTags, formMetaData, mentionedUsers, subject, tags, null);
        Type localVarReturnType = new TypeToken<SpaceTopic>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates a topic (asynchronously)
     * Updates a topic OauthScopes: WRITE_SPACE, UPDATE_SPACE_CONTENT
     * @param spaceId ID of the space (required)
     * @param topicId Id of the topic to update (required)
     * @param attachments the attached files (optional)
     * @param complex complex or not (optional)
     * @param content content of the topic (optional)
     * @param contentTags the content tags (optional)
     * @param formMetaData formMetaData to update (optional)
     * @param mentionedUsers the updated mentioned users (optional)
     * @param subject the subject of the topic (optional)
     * @param tags the tags (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the updated space topic </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Http_bad_request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateSpaceTopicAsync(String spaceId, String topicId, List<String> attachments, Boolean complex, String content, List<String> contentTags, String formMetaData, List<String> mentionedUsers, String subject, List<String> tags, final ApiCallback<SpaceTopic> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateSpaceTopicValidateBeforeCall(spaceId, topicId, attachments, complex, content, contentTags, formMetaData, mentionedUsers, subject, tags, _callback);
        Type localVarReturnType = new TypeToken<SpaceTopic>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateTopicTags
     * @param topicId The id of the topic (required)
     * @param tags The tags to update (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> tags successfully updated </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateTopicTagsCall(String topicId, List<String> tags, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/spaces/topic/{topicId}/updateTags"
            .replace("{" + "topicId" + "}", localVarApiClient.escapeString(topicId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tags != null) {
            localVarFormParams.put("tags", tags);
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateTopicTagsValidateBeforeCall(String topicId, List<String> tags, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'topicId' is set
        if (topicId == null) {
            throw new ApiException("Missing the required parameter 'topicId' when calling updateTopicTags(Async)");
        }

        // verify the required parameter 'tags' is set
        if (tags == null) {
            throw new ApiException("Missing the required parameter 'tags' when calling updateTopicTags(Async)");
        }

        return updateTopicTagsCall(topicId, tags, _callback);

    }

    /**
     * Update tags
     * Update the tags of a topic   OauthScopes: WRITE_SPACE, UPDATE_SPACE_CONTENT
     * @param topicId The id of the topic (required)
     * @param tags The tags to update (required)
     * @return SpaceTopic
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> tags successfully updated </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public SpaceTopic updateTopicTags(String topicId, List<String> tags) throws ApiException {
        ApiResponse<SpaceTopic> localVarResp = updateTopicTagsWithHttpInfo(topicId, tags);
        return localVarResp.getData();
    }

    /**
     * Update tags
     * Update the tags of a topic   OauthScopes: WRITE_SPACE, UPDATE_SPACE_CONTENT
     * @param topicId The id of the topic (required)
     * @param tags The tags to update (required)
     * @return ApiResponse&lt;SpaceTopic&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> tags successfully updated </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SpaceTopic> updateTopicTagsWithHttpInfo(String topicId, List<String> tags) throws ApiException {
        okhttp3.Call localVarCall = updateTopicTagsValidateBeforeCall(topicId, tags, null);
        Type localVarReturnType = new TypeToken<SpaceTopic>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update tags (asynchronously)
     * Update the tags of a topic   OauthScopes: WRITE_SPACE, UPDATE_SPACE_CONTENT
     * @param topicId The id of the topic (required)
     * @param tags The tags to update (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> tags successfully updated </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateTopicTagsAsync(String topicId, List<String> tags, final ApiCallback<SpaceTopic> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateTopicTagsValidateBeforeCall(topicId, tags, _callback);
        Type localVarReturnType = new TypeToken<SpaceTopic>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v2GetTopicWithReplies
     * @param spaceId Id of the topic (required)
     * @param topicId ID of the topic (required)
     * @param numberOfReplies The number of replies (optional, default to 25)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the replies with a topic </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v2GetTopicWithRepliesCall(String spaceId, String topicId, BigDecimal numberOfReplies, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/spaces/{spaceId}/topic/{topicId}"
            .replace("{" + "spaceId" + "}", localVarApiClient.escapeString(spaceId.toString()))
            .replace("{" + "topicId" + "}", localVarApiClient.escapeString(topicId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (numberOfReplies != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("numberOfReplies", numberOfReplies));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v2GetTopicWithRepliesValidateBeforeCall(String spaceId, String topicId, BigDecimal numberOfReplies, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'spaceId' is set
        if (spaceId == null) {
            throw new ApiException("Missing the required parameter 'spaceId' when calling v2GetTopicWithReplies(Async)");
        }

        // verify the required parameter 'topicId' is set
        if (topicId == null) {
            throw new ApiException("Missing the required parameter 'topicId' when calling v2GetTopicWithReplies(Async)");
        }

        return v2GetTopicWithRepliesCall(spaceId, topicId, numberOfReplies, _callback);

    }

    /**
     * Gets space replies and a topic
     * Gets a number of Space replies with a matching topic OauthScopes: READ_SPACE
     * @param spaceId Id of the topic (required)
     * @param topicId ID of the topic (required)
     * @param numberOfReplies The number of replies (optional, default to 25)
     * @return SpaceTopicWithReplies
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the replies with a topic </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public SpaceTopicWithReplies v2GetTopicWithReplies(String spaceId, String topicId, BigDecimal numberOfReplies) throws ApiException {
        ApiResponse<SpaceTopicWithReplies> localVarResp = v2GetTopicWithRepliesWithHttpInfo(spaceId, topicId, numberOfReplies);
        return localVarResp.getData();
    }

    /**
     * Gets space replies and a topic
     * Gets a number of Space replies with a matching topic OauthScopes: READ_SPACE
     * @param spaceId Id of the topic (required)
     * @param topicId ID of the topic (required)
     * @param numberOfReplies The number of replies (optional, default to 25)
     * @return ApiResponse&lt;SpaceTopicWithReplies&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the replies with a topic </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SpaceTopicWithReplies> v2GetTopicWithRepliesWithHttpInfo(String spaceId, String topicId, BigDecimal numberOfReplies) throws ApiException {
        okhttp3.Call localVarCall = v2GetTopicWithRepliesValidateBeforeCall(spaceId, topicId, numberOfReplies, null);
        Type localVarReturnType = new TypeToken<SpaceTopicWithReplies>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets space replies and a topic (asynchronously)
     * Gets a number of Space replies with a matching topic OauthScopes: READ_SPACE
     * @param spaceId Id of the topic (required)
     * @param topicId ID of the topic (required)
     * @param numberOfReplies The number of replies (optional, default to 25)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the replies with a topic </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v2GetTopicWithRepliesAsync(String spaceId, String topicId, BigDecimal numberOfReplies, final ApiCallback<SpaceTopicWithReplies> _callback) throws ApiException {

        okhttp3.Call localVarCall = v2GetTopicWithRepliesValidateBeforeCall(spaceId, topicId, numberOfReplies, _callback);
        Type localVarReturnType = new TypeToken<SpaceTopicWithReplies>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v2RemoveParticipantsFromSpace
     * @param id The id of the space (required)
     * @param userIds The ids of the participants to remove  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> participants successfully removed </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v2RemoveParticipantsFromSpaceCall(String id, List<String> userIds, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/spaces/{id}/participant/remove"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (userIds != null) {
            localVarFormParams.put("userIds", userIds);
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v2RemoveParticipantsFromSpaceValidateBeforeCall(String id, List<String> userIds, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling v2RemoveParticipantsFromSpace(Async)");
        }

        // verify the required parameter 'userIds' is set
        if (userIds == null) {
            throw new ApiException("Missing the required parameter 'userIds' when calling v2RemoveParticipantsFromSpace(Async)");
        }

        return v2RemoveParticipantsFromSpaceCall(id, userIds, _callback);

    }

    /**
     * Removes participants from a space
     * removes Participants from a space OauthScopes: WRITE_SPACE, MANAGE_SPACE, ORGANIZE_SPACE
     * @param id The id of the space (required)
     * @param userIds The ids of the participants to remove  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> participants successfully removed </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public void v2RemoveParticipantsFromSpace(String id, List<String> userIds) throws ApiException {
        v2RemoveParticipantsFromSpaceWithHttpInfo(id, userIds);
    }

    /**
     * Removes participants from a space
     * removes Participants from a space OauthScopes: WRITE_SPACE, MANAGE_SPACE, ORGANIZE_SPACE
     * @param id The id of the space (required)
     * @param userIds The ids of the participants to remove  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> participants successfully removed </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> v2RemoveParticipantsFromSpaceWithHttpInfo(String id, List<String> userIds) throws ApiException {
        okhttp3.Call localVarCall = v2RemoveParticipantsFromSpaceValidateBeforeCall(id, userIds, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Removes participants from a space (asynchronously)
     * removes Participants from a space OauthScopes: WRITE_SPACE, MANAGE_SPACE, ORGANIZE_SPACE
     * @param id The id of the space (required)
     * @param userIds The ids of the participants to remove  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> participants successfully removed </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v2RemoveParticipantsFromSpaceAsync(String id, List<String> userIds, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = v2RemoveParticipantsFromSpaceValidateBeforeCall(id, userIds, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for v2UpdateWelcomeBoxContent
     * @param spaceId Id of the space (required)
     * @param content The new content (required)
     * @param displayWelcomeBox True, false, default:false (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> missing documentation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v2UpdateWelcomeBoxContentCall(String spaceId, String content, Boolean displayWelcomeBox, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/spaces/{spaceId}/welcomebox/{content}"
            .replace("{" + "spaceId" + "}", localVarApiClient.escapeString(spaceId.toString()))
            .replace("{" + "content" + "}", localVarApiClient.escapeString(content.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (displayWelcomeBox != null) {
            localVarFormParams.put("displayWelcomeBox", displayWelcomeBox);
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v2UpdateWelcomeBoxContentValidateBeforeCall(String spaceId, String content, Boolean displayWelcomeBox, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'spaceId' is set
        if (spaceId == null) {
            throw new ApiException("Missing the required parameter 'spaceId' when calling v2UpdateWelcomeBoxContent(Async)");
        }

        // verify the required parameter 'content' is set
        if (content == null) {
            throw new ApiException("Missing the required parameter 'content' when calling v2UpdateWelcomeBoxContent(Async)");
        }

        return v2UpdateWelcomeBoxContentCall(spaceId, content, displayWelcomeBox, _callback);

    }

    /**
     * Update content of welcome box
     * Update content of the welcome box of a space OauthScopes: MANAGE_SPACE, WRITE_SPACE
     * @param spaceId Id of the space (required)
     * @param content The new content (required)
     * @param displayWelcomeBox True, false, default:false (optional, default to false)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> missing documentation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public void v2UpdateWelcomeBoxContent(String spaceId, String content, Boolean displayWelcomeBox) throws ApiException {
        v2UpdateWelcomeBoxContentWithHttpInfo(spaceId, content, displayWelcomeBox);
    }

    /**
     * Update content of welcome box
     * Update content of the welcome box of a space OauthScopes: MANAGE_SPACE, WRITE_SPACE
     * @param spaceId Id of the space (required)
     * @param content The new content (required)
     * @param displayWelcomeBox True, false, default:false (optional, default to false)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> missing documentation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> v2UpdateWelcomeBoxContentWithHttpInfo(String spaceId, String content, Boolean displayWelcomeBox) throws ApiException {
        okhttp3.Call localVarCall = v2UpdateWelcomeBoxContentValidateBeforeCall(spaceId, content, displayWelcomeBox, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update content of welcome box (asynchronously)
     * Update content of the welcome box of a space OauthScopes: MANAGE_SPACE, WRITE_SPACE
     * @param spaceId Id of the space (required)
     * @param content The new content (required)
     * @param displayWelcomeBox True, false, default:false (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> missing documentation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v2UpdateWelcomeBoxContentAsync(String spaceId, String content, Boolean displayWelcomeBox, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = v2UpdateWelcomeBoxContentValidateBeforeCall(spaceId, content, displayWelcomeBox, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
