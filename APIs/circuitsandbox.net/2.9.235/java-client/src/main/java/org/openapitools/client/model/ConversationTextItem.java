/*
 * REST API Version 2
 * Circuit REST API to interact with the Circuit system.  [Learn more about the Circuit Development Community](https://www.circuit.com/web/developers/home)
 *
 * The version of the OpenAPI document: 2.9.235
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Preview;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ConversationTextItem
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:29:23.236704-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ConversationTextItem {
  public static final String SERIALIZED_NAME_CONTENT = "content";
  @SerializedName(SERIALIZED_NAME_CONTENT)
  private String content;

  public static final String SERIALIZED_NAME_CONTENT_TYPE = "contentType";
  @SerializedName(SERIALIZED_NAME_CONTENT_TYPE)
  private String contentType;

  public static final String SERIALIZED_NAME_FORM_META_DATA = "formMetaData";
  @SerializedName(SERIALIZED_NAME_FORM_META_DATA)
  private String formMetaData;

  public static final String SERIALIZED_NAME_IS_WEBHOOK_MESSAGE = "isWebhookMessage";
  @SerializedName(SERIALIZED_NAME_IS_WEBHOOK_MESSAGE)
  private Boolean isWebhookMessage;

  public static final String SERIALIZED_NAME_LIKED_USER_IDS = "likedUserIds";
  @SerializedName(SERIALIZED_NAME_LIKED_USER_IDS)
  private List<String> likedUserIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_PARENT_ID = "parentId";
  @SerializedName(SERIALIZED_NAME_PARENT_ID)
  private String parentId;

  public static final String SERIALIZED_NAME_PREVIEW = "preview";
  @SerializedName(SERIALIZED_NAME_PREVIEW)
  private Preview preview;

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private String state;

  public static final String SERIALIZED_NAME_SUBJECT = "subject";
  @SerializedName(SERIALIZED_NAME_SUBJECT)
  private String subject;

  public ConversationTextItem() {
  }

  public ConversationTextItem content(String content) {
    this.content = content;
    return this;
  }

  /**
   * The content of the text item
   * @return content
   */
  @javax.annotation.Nullable
  public String getContent() {
    return content;
  }

  public void setContent(String content) {
    this.content = content;
  }


  public ConversationTextItem contentType(String contentType) {
    this.contentType = contentType;
    return this;
  }

  /**
   * The type of the text item. It can be one of the following: RICH (with HTML content) or PLAIN (only text)
   * @return contentType
   */
  @javax.annotation.Nullable
  public String getContentType() {
    return contentType;
  }

  public void setContentType(String contentType) {
    this.contentType = contentType;
  }


  public ConversationTextItem formMetaData(String formMetaData) {
    this.formMetaData = formMetaData;
    return this;
  }

  /**
   * The meta data form
   * @return formMetaData
   */
  @javax.annotation.Nullable
  public String getFormMetaData() {
    return formMetaData;
  }

  public void setFormMetaData(String formMetaData) {
    this.formMetaData = formMetaData;
  }


  public ConversationTextItem isWebhookMessage(Boolean isWebhookMessage) {
    this.isWebhookMessage = isWebhookMessage;
    return this;
  }

  /**
   * Is this a webhook message?
   * @return isWebhookMessage
   */
  @javax.annotation.Nullable
  public Boolean getIsWebhookMessage() {
    return isWebhookMessage;
  }

  public void setIsWebhookMessage(Boolean isWebhookMessage) {
    this.isWebhookMessage = isWebhookMessage;
  }


  public ConversationTextItem likedUserIds(List<String> likedUserIds) {
    this.likedUserIds = likedUserIds;
    return this;
  }

  public ConversationTextItem addLikedUserIdsItem(String likedUserIdsItem) {
    if (this.likedUserIds == null) {
      this.likedUserIds = new ArrayList<>();
    }
    this.likedUserIds.add(likedUserIdsItem);
    return this;
  }

  /**
   * Array of IDs of the users who liked the item
   * @return likedUserIds
   */
  @javax.annotation.Nullable
  public List<String> getLikedUserIds() {
    return likedUserIds;
  }

  public void setLikedUserIds(List<String> likedUserIds) {
    this.likedUserIds = likedUserIds;
  }


  public ConversationTextItem parentId(String parentId) {
    this.parentId = parentId;
    return this;
  }

  /**
   * The ID of the parent item of the text item. This field is optional and can be used for thread views
   * @return parentId
   */
  @javax.annotation.Nullable
  public String getParentId() {
    return parentId;
  }

  public void setParentId(String parentId) {
    this.parentId = parentId;
  }


  public ConversationTextItem preview(Preview preview) {
    this.preview = preview;
    return this;
  }

  /**
   * Get preview
   * @return preview
   */
  @javax.annotation.Nullable
  public Preview getPreview() {
    return preview;
  }

  public void setPreview(Preview preview) {
    this.preview = preview;
  }


  public ConversationTextItem state(String state) {
    this.state = state;
    return this;
  }

  /**
   * The state of the text item. It can be one of the following: CREATED (which denotes that it was not modified since its creation), EDITED (which denotes that the creator of this item modified the item) or DELETED (which denotes that the item itself exists but its content was removed)
   * @return state
   */
  @javax.annotation.Nullable
  public String getState() {
    return state;
  }

  public void setState(String state) {
    this.state = state;
  }


  public ConversationTextItem subject(String subject) {
    this.subject = subject;
    return this;
  }

  /**
   * TThe subject of the text item. This field is optional and maybe filled when creating the text item
   * @return subject
   */
  @javax.annotation.Nullable
  public String getSubject() {
    return subject;
  }

  public void setSubject(String subject) {
    this.subject = subject;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConversationTextItem conversationTextItem = (ConversationTextItem) o;
    return Objects.equals(this.content, conversationTextItem.content) &&
        Objects.equals(this.contentType, conversationTextItem.contentType) &&
        Objects.equals(this.formMetaData, conversationTextItem.formMetaData) &&
        Objects.equals(this.isWebhookMessage, conversationTextItem.isWebhookMessage) &&
        Objects.equals(this.likedUserIds, conversationTextItem.likedUserIds) &&
        Objects.equals(this.parentId, conversationTextItem.parentId) &&
        Objects.equals(this.preview, conversationTextItem.preview) &&
        Objects.equals(this.state, conversationTextItem.state) &&
        Objects.equals(this.subject, conversationTextItem.subject);
  }

  @Override
  public int hashCode() {
    return Objects.hash(content, contentType, formMetaData, isWebhookMessage, likedUserIds, parentId, preview, state, subject);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConversationTextItem {\n");
    sb.append("    content: ").append(toIndentedString(content)).append("\n");
    sb.append("    contentType: ").append(toIndentedString(contentType)).append("\n");
    sb.append("    formMetaData: ").append(toIndentedString(formMetaData)).append("\n");
    sb.append("    isWebhookMessage: ").append(toIndentedString(isWebhookMessage)).append("\n");
    sb.append("    likedUserIds: ").append(toIndentedString(likedUserIds)).append("\n");
    sb.append("    parentId: ").append(toIndentedString(parentId)).append("\n");
    sb.append("    preview: ").append(toIndentedString(preview)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    subject: ").append(toIndentedString(subject)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("content");
    openapiFields.add("contentType");
    openapiFields.add("formMetaData");
    openapiFields.add("isWebhookMessage");
    openapiFields.add("likedUserIds");
    openapiFields.add("parentId");
    openapiFields.add("preview");
    openapiFields.add("state");
    openapiFields.add("subject");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ConversationTextItem
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ConversationTextItem.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ConversationTextItem is not found in the empty JSON string", ConversationTextItem.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ConversationTextItem.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ConversationTextItem` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("content") != null && !jsonObj.get("content").isJsonNull()) && !jsonObj.get("content").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `content` to be a primitive type in the JSON string but got `%s`", jsonObj.get("content").toString()));
      }
      if ((jsonObj.get("contentType") != null && !jsonObj.get("contentType").isJsonNull()) && !jsonObj.get("contentType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `contentType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("contentType").toString()));
      }
      if ((jsonObj.get("formMetaData") != null && !jsonObj.get("formMetaData").isJsonNull()) && !jsonObj.get("formMetaData").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `formMetaData` to be a primitive type in the JSON string but got `%s`", jsonObj.get("formMetaData").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("likedUserIds") != null && !jsonObj.get("likedUserIds").isJsonNull() && !jsonObj.get("likedUserIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `likedUserIds` to be an array in the JSON string but got `%s`", jsonObj.get("likedUserIds").toString()));
      }
      if ((jsonObj.get("parentId") != null && !jsonObj.get("parentId").isJsonNull()) && !jsonObj.get("parentId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `parentId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("parentId").toString()));
      }
      // validate the optional field `preview`
      if (jsonObj.get("preview") != null && !jsonObj.get("preview").isJsonNull()) {
        Preview.validateJsonElement(jsonObj.get("preview"));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      if ((jsonObj.get("subject") != null && !jsonObj.get("subject").isJsonNull()) && !jsonObj.get("subject").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subject` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subject").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ConversationTextItem.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ConversationTextItem' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ConversationTextItem> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ConversationTextItem.class));

       return (TypeAdapter<T>) new TypeAdapter<ConversationTextItem>() {
           @Override
           public void write(JsonWriter out, ConversationTextItem value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ConversationTextItem read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ConversationTextItem given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ConversationTextItem
   * @throws IOException if the JSON string is invalid with respect to ConversationTextItem
   */
  public static ConversationTextItem fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ConversationTextItem.class);
  }

  /**
   * Convert an instance of ConversationTextItem to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

