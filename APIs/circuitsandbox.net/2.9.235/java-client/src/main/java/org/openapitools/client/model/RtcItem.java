/*
 * REST API Version 2
 * Circuit REST API to interact with the Circuit system.  [Learn more about the Circuit Development Community](https://www.circuit.com/web/developers/home)
 *
 * The version of the OpenAPI document: 2.9.235
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.RtcEnded;
import org.openapitools.client.model.RtcMoved;
import org.openapitools.client.model.RtcParticipant;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * RtcItem
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:29:23.236704-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RtcItem {
  public static final String SERIALIZED_NAME_ENDED = "ended";
  @SerializedName(SERIALIZED_NAME_ENDED)
  private RtcEnded ended;

  public static final String SERIALIZED_NAME_MISSED = "missed";
  @SerializedName(SERIALIZED_NAME_MISSED)
  private String missed;

  public static final String SERIALIZED_NAME_MOVED = "moved";
  @SerializedName(SERIALIZED_NAME_MOVED)
  private RtcMoved moved;

  public static final String SERIALIZED_NAME_RTC_PARTICIPANTS = "rtcParticipants";
  @SerializedName(SERIALIZED_NAME_RTC_PARTICIPANTS)
  private List<RtcParticipant> rtcParticipants = new ArrayList<>();

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public RtcItem() {
  }

  public RtcItem ended(RtcEnded ended) {
    this.ended = ended;
    return this;
  }

  /**
   * Get ended
   * @return ended
   */
  @javax.annotation.Nullable
  public RtcEnded getEnded() {
    return ended;
  }

  public void setEnded(RtcEnded ended) {
    this.ended = ended;
  }


  public RtcItem missed(String missed) {
    this.missed = missed;
    return this;
  }

  /**
   * Indicates a missed call.
   * @return missed
   */
  @javax.annotation.Nullable
  public String getMissed() {
    return missed;
  }

  public void setMissed(String missed) {
    this.missed = missed;
  }


  public RtcItem moved(RtcMoved moved) {
    this.moved = moved;
    return this;
  }

  /**
   * Get moved
   * @return moved
   */
  @javax.annotation.Nullable
  public RtcMoved getMoved() {
    return moved;
  }

  public void setMoved(RtcMoved moved) {
    this.moved = moved;
  }


  public RtcItem rtcParticipants(List<RtcParticipant> rtcParticipants) {
    this.rtcParticipants = rtcParticipants;
    return this;
  }

  public RtcItem addRtcParticipantsItem(RtcParticipant rtcParticipantsItem) {
    if (this.rtcParticipants == null) {
      this.rtcParticipants = new ArrayList<>();
    }
    this.rtcParticipants.add(rtcParticipantsItem);
    return this;
  }

  /**
   * Participants of the call.
   * @return rtcParticipants
   */
  @javax.annotation.Nullable
  public List<RtcParticipant> getRtcParticipants() {
    return rtcParticipants;
  }

  public void setRtcParticipants(List<RtcParticipant> rtcParticipants) {
    this.rtcParticipants = rtcParticipants;
  }


  public RtcItem type(String type) {
    this.type = type;
    return this;
  }

  /**
   * The type of the RTC item.
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RtcItem rtcItem = (RtcItem) o;
    return Objects.equals(this.ended, rtcItem.ended) &&
        Objects.equals(this.missed, rtcItem.missed) &&
        Objects.equals(this.moved, rtcItem.moved) &&
        Objects.equals(this.rtcParticipants, rtcItem.rtcParticipants) &&
        Objects.equals(this.type, rtcItem.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(ended, missed, moved, rtcParticipants, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RtcItem {\n");
    sb.append("    ended: ").append(toIndentedString(ended)).append("\n");
    sb.append("    missed: ").append(toIndentedString(missed)).append("\n");
    sb.append("    moved: ").append(toIndentedString(moved)).append("\n");
    sb.append("    rtcParticipants: ").append(toIndentedString(rtcParticipants)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ended");
    openapiFields.add("missed");
    openapiFields.add("moved");
    openapiFields.add("rtcParticipants");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RtcItem
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RtcItem.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RtcItem is not found in the empty JSON string", RtcItem.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RtcItem.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RtcItem` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `ended`
      if (jsonObj.get("ended") != null && !jsonObj.get("ended").isJsonNull()) {
        RtcEnded.validateJsonElement(jsonObj.get("ended"));
      }
      if ((jsonObj.get("missed") != null && !jsonObj.get("missed").isJsonNull()) && !jsonObj.get("missed").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `missed` to be a primitive type in the JSON string but got `%s`", jsonObj.get("missed").toString()));
      }
      // validate the optional field `moved`
      if (jsonObj.get("moved") != null && !jsonObj.get("moved").isJsonNull()) {
        RtcMoved.validateJsonElement(jsonObj.get("moved"));
      }
      if (jsonObj.get("rtcParticipants") != null && !jsonObj.get("rtcParticipants").isJsonNull()) {
        JsonArray jsonArrayrtcParticipants = jsonObj.getAsJsonArray("rtcParticipants");
        if (jsonArrayrtcParticipants != null) {
          // ensure the json data is an array
          if (!jsonObj.get("rtcParticipants").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `rtcParticipants` to be an array in the JSON string but got `%s`", jsonObj.get("rtcParticipants").toString()));
          }

          // validate the optional field `rtcParticipants` (array)
          for (int i = 0; i < jsonArrayrtcParticipants.size(); i++) {
            RtcParticipant.validateJsonElement(jsonArrayrtcParticipants.get(i));
          };
        }
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RtcItem.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RtcItem' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RtcItem> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RtcItem.class));

       return (TypeAdapter<T>) new TypeAdapter<RtcItem>() {
           @Override
           public void write(JsonWriter out, RtcItem value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RtcItem read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RtcItem given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RtcItem
   * @throws IOException if the JSON string is invalid with respect to RtcItem
   */
  public static RtcItem fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RtcItem.class);
  }

  /**
   * Convert an instance of RtcItem to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

