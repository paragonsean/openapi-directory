/*
 * REST API Version 2
 * Circuit REST API to interact with the Circuit system.  [Learn more about the Circuit Development Community](https://www.circuit.com/web/developers/home)
 *
 * The version of the OpenAPI document: 2.9.235
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Conversation
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:29:23.236704-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Conversation {
  public static final String SERIALIZED_NAME_AVATAR = "avatar";
  @SerializedName(SERIALIZED_NAME_AVATAR)
  private String avatar;

  public static final String SERIALIZED_NAME_AVATAR_LARGE = "avatarLarge";
  @SerializedName(SERIALIZED_NAME_AVATAR_LARGE)
  private String avatarLarge;

  public static final String SERIALIZED_NAME_CONV_ID = "convId";
  @SerializedName(SERIALIZED_NAME_CONV_ID)
  private String convId;

  public static final String SERIALIZED_NAME_CREATION_TIME = "creationTime";
  @SerializedName(SERIALIZED_NAME_CREATION_TIME)
  private BigDecimal creationTime;

  public static final String SERIALIZED_NAME_CREATOR_ID = "creatorId";
  @SerializedName(SERIALIZED_NAME_CREATOR_ID)
  private String creatorId;

  public static final String SERIALIZED_NAME_CREATOR_TENANT_ID = "creatorTenantId";
  @SerializedName(SERIALIZED_NAME_CREATOR_TENANT_ID)
  private String creatorTenantId;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_IS_GUEST_ACCESS_DISABLED = "isGuestAccessDisabled";
  @SerializedName(SERIALIZED_NAME_IS_GUEST_ACCESS_DISABLED)
  private Boolean isGuestAccessDisabled;

  public static final String SERIALIZED_NAME_IS_MODERATED = "isModerated";
  @SerializedName(SERIALIZED_NAME_IS_MODERATED)
  private Boolean isModerated;

  public static final String SERIALIZED_NAME_MODIFICATION_TIME = "modificationTime";
  @SerializedName(SERIALIZED_NAME_MODIFICATION_TIME)
  private BigDecimal modificationTime;

  public static final String SERIALIZED_NAME_PARTICIPANTS = "participants";
  @SerializedName(SERIALIZED_NAME_PARTICIPANTS)
  private List<String> participants = new ArrayList<>();

  public static final String SERIALIZED_NAME_TOPIC = "topic";
  @SerializedName(SERIALIZED_NAME_TOPIC)
  private String topic;

  public static final String SERIALIZED_NAME_TOPIC_PLACEHOLDER = "topicPlaceholder";
  @SerializedName(SERIALIZED_NAME_TOPIC_PLACEHOLDER)
  private String topicPlaceholder;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public Conversation() {
  }

  public Conversation avatar(String avatar) {
    this.avatar = avatar;
    return this;
  }

  /**
   * The URL of the small avatar image of the conversation
   * @return avatar
   */
  @javax.annotation.Nullable
  public String getAvatar() {
    return avatar;
  }

  public void setAvatar(String avatar) {
    this.avatar = avatar;
  }


  public Conversation avatarLarge(String avatarLarge) {
    this.avatarLarge = avatarLarge;
    return this;
  }

  /**
   * The URL of the large avatar image of the conversation
   * @return avatarLarge
   */
  @javax.annotation.Nullable
  public String getAvatarLarge() {
    return avatarLarge;
  }

  public void setAvatarLarge(String avatarLarge) {
    this.avatarLarge = avatarLarge;
  }


  public Conversation convId(String convId) {
    this.convId = convId;
    return this;
  }

  /**
   * The ID of the conversation
   * @return convId
   */
  @javax.annotation.Nullable
  public String getConvId() {
    return convId;
  }

  public void setConvId(String convId) {
    this.convId = convId;
  }


  public Conversation creationTime(BigDecimal creationTime) {
    this.creationTime = creationTime;
    return this;
  }

  /**
   * UTC timestamp when the conversation was created
   * @return creationTime
   */
  @javax.annotation.Nullable
  public BigDecimal getCreationTime() {
    return creationTime;
  }

  public void setCreationTime(BigDecimal creationTime) {
    this.creationTime = creationTime;
  }


  public Conversation creatorId(String creatorId) {
    this.creatorId = creatorId;
    return this;
  }

  /**
   * The ID of the user who created the conversation
   * @return creatorId
   */
  @javax.annotation.Nullable
  public String getCreatorId() {
    return creatorId;
  }

  public void setCreatorId(String creatorId) {
    this.creatorId = creatorId;
  }


  public Conversation creatorTenantId(String creatorTenantId) {
    this.creatorTenantId = creatorTenantId;
    return this;
  }

  /**
   * The ID of the Circuit domain (tenant) where the creator of the conversation belongs to
   * @return creatorTenantId
   */
  @javax.annotation.Nullable
  public String getCreatorTenantId() {
    return creatorTenantId;
  }

  public void setCreatorTenantId(String creatorTenantId) {
    this.creatorTenantId = creatorTenantId;
  }


  public Conversation description(String description) {
    this.description = description;
    return this;
  }

  /**
   * The description of the conversation. This field is available only for conversations with type COMMUNITY
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public Conversation isGuestAccessDisabled(Boolean isGuestAccessDisabled) {
    this.isGuestAccessDisabled = isGuestAccessDisabled;
    return this;
  }

  /**
   * Indicates whether guest access to the conversation is disabled or not
   * @return isGuestAccessDisabled
   */
  @javax.annotation.Nullable
  public Boolean getIsGuestAccessDisabled() {
    return isGuestAccessDisabled;
  }

  public void setIsGuestAccessDisabled(Boolean isGuestAccessDisabled) {
    this.isGuestAccessDisabled = isGuestAccessDisabled;
  }


  public Conversation isModerated(Boolean isModerated) {
    this.isModerated = isModerated;
    return this;
  }

  /**
   * Indicates whether the conversation is moderated or not. In a moderated conversation only participants who have been assigned the role of a moderator are allowed to add or remove participants into the conversation
   * @return isModerated
   */
  @javax.annotation.Nullable
  public Boolean getIsModerated() {
    return isModerated;
  }

  public void setIsModerated(Boolean isModerated) {
    this.isModerated = isModerated;
  }


  public Conversation modificationTime(BigDecimal modificationTime) {
    this.modificationTime = modificationTime;
    return this;
  }

  /**
   * UTC timestamp when the conversation was modified. A conversation is modified when any of the conversation object fields change but not when conversation items are added or edited
   * @return modificationTime
   */
  @javax.annotation.Nullable
  public BigDecimal getModificationTime() {
    return modificationTime;
  }

  public void setModificationTime(BigDecimal modificationTime) {
    this.modificationTime = modificationTime;
  }


  public Conversation participants(List<String> participants) {
    this.participants = participants;
    return this;
  }

  public Conversation addParticipantsItem(String participantsItem) {
    if (this.participants == null) {
      this.participants = new ArrayList<>();
    }
    this.participants.add(participantsItem);
    return this;
  }

  /**
   * Array of active participants
   * @return participants
   */
  @javax.annotation.Nullable
  public List<String> getParticipants() {
    return participants;
  }

  public void setParticipants(List<String> participants) {
    this.participants = participants;
  }


  public Conversation topic(String topic) {
    this.topic = topic;
    return this;
  }

  /**
   * The title of the conversation. Conversations of type DIRECT cannot have a title
   * @return topic
   */
  @javax.annotation.Nullable
  public String getTopic() {
    return topic;
  }

  public void setTopic(String topic) {
    this.topic = topic;
  }


  public Conversation topicPlaceholder(String topicPlaceholder) {
    this.topicPlaceholder = topicPlaceholder;
    return this;
  }

  /**
   * The title of the conversation. Conversations of type DIRECT cannot have a title
   * @return topicPlaceholder
   */
  @javax.annotation.Nullable
  public String getTopicPlaceholder() {
    return topicPlaceholder;
  }

  public void setTopicPlaceholder(String topicPlaceholder) {
    this.topicPlaceholder = topicPlaceholder;
  }


  public Conversation type(String type) {
    this.type = type;
    return this;
  }

  /**
   * The type of the conversation. It can be one of the following: DIRECT, GROUP, COMMUNITY or LARGE
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Conversation conversation = (Conversation) o;
    return Objects.equals(this.avatar, conversation.avatar) &&
        Objects.equals(this.avatarLarge, conversation.avatarLarge) &&
        Objects.equals(this.convId, conversation.convId) &&
        Objects.equals(this.creationTime, conversation.creationTime) &&
        Objects.equals(this.creatorId, conversation.creatorId) &&
        Objects.equals(this.creatorTenantId, conversation.creatorTenantId) &&
        Objects.equals(this.description, conversation.description) &&
        Objects.equals(this.isGuestAccessDisabled, conversation.isGuestAccessDisabled) &&
        Objects.equals(this.isModerated, conversation.isModerated) &&
        Objects.equals(this.modificationTime, conversation.modificationTime) &&
        Objects.equals(this.participants, conversation.participants) &&
        Objects.equals(this.topic, conversation.topic) &&
        Objects.equals(this.topicPlaceholder, conversation.topicPlaceholder) &&
        Objects.equals(this.type, conversation.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(avatar, avatarLarge, convId, creationTime, creatorId, creatorTenantId, description, isGuestAccessDisabled, isModerated, modificationTime, participants, topic, topicPlaceholder, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Conversation {\n");
    sb.append("    avatar: ").append(toIndentedString(avatar)).append("\n");
    sb.append("    avatarLarge: ").append(toIndentedString(avatarLarge)).append("\n");
    sb.append("    convId: ").append(toIndentedString(convId)).append("\n");
    sb.append("    creationTime: ").append(toIndentedString(creationTime)).append("\n");
    sb.append("    creatorId: ").append(toIndentedString(creatorId)).append("\n");
    sb.append("    creatorTenantId: ").append(toIndentedString(creatorTenantId)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    isGuestAccessDisabled: ").append(toIndentedString(isGuestAccessDisabled)).append("\n");
    sb.append("    isModerated: ").append(toIndentedString(isModerated)).append("\n");
    sb.append("    modificationTime: ").append(toIndentedString(modificationTime)).append("\n");
    sb.append("    participants: ").append(toIndentedString(participants)).append("\n");
    sb.append("    topic: ").append(toIndentedString(topic)).append("\n");
    sb.append("    topicPlaceholder: ").append(toIndentedString(topicPlaceholder)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("avatar");
    openapiFields.add("avatarLarge");
    openapiFields.add("convId");
    openapiFields.add("creationTime");
    openapiFields.add("creatorId");
    openapiFields.add("creatorTenantId");
    openapiFields.add("description");
    openapiFields.add("isGuestAccessDisabled");
    openapiFields.add("isModerated");
    openapiFields.add("modificationTime");
    openapiFields.add("participants");
    openapiFields.add("topic");
    openapiFields.add("topicPlaceholder");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Conversation
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Conversation.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Conversation is not found in the empty JSON string", Conversation.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Conversation.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Conversation` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("avatar") != null && !jsonObj.get("avatar").isJsonNull()) && !jsonObj.get("avatar").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `avatar` to be a primitive type in the JSON string but got `%s`", jsonObj.get("avatar").toString()));
      }
      if ((jsonObj.get("avatarLarge") != null && !jsonObj.get("avatarLarge").isJsonNull()) && !jsonObj.get("avatarLarge").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `avatarLarge` to be a primitive type in the JSON string but got `%s`", jsonObj.get("avatarLarge").toString()));
      }
      if ((jsonObj.get("convId") != null && !jsonObj.get("convId").isJsonNull()) && !jsonObj.get("convId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `convId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("convId").toString()));
      }
      if ((jsonObj.get("creatorId") != null && !jsonObj.get("creatorId").isJsonNull()) && !jsonObj.get("creatorId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `creatorId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("creatorId").toString()));
      }
      if ((jsonObj.get("creatorTenantId") != null && !jsonObj.get("creatorTenantId").isJsonNull()) && !jsonObj.get("creatorTenantId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `creatorTenantId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("creatorTenantId").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("participants") != null && !jsonObj.get("participants").isJsonNull() && !jsonObj.get("participants").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `participants` to be an array in the JSON string but got `%s`", jsonObj.get("participants").toString()));
      }
      if ((jsonObj.get("topic") != null && !jsonObj.get("topic").isJsonNull()) && !jsonObj.get("topic").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `topic` to be a primitive type in the JSON string but got `%s`", jsonObj.get("topic").toString()));
      }
      if ((jsonObj.get("topicPlaceholder") != null && !jsonObj.get("topicPlaceholder").isJsonNull()) && !jsonObj.get("topicPlaceholder").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `topicPlaceholder` to be a primitive type in the JSON string but got `%s`", jsonObj.get("topicPlaceholder").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Conversation.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Conversation' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Conversation> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Conversation.class));

       return (TypeAdapter<T>) new TypeAdapter<Conversation>() {
           @Override
           public void write(JsonWriter out, Conversation value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Conversation read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Conversation given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Conversation
   * @throws IOException if the JSON string is invalid with respect to Conversation
   */
  public static Conversation fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Conversation.class);
  }

  /**
   * Convert an instance of Conversation to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

