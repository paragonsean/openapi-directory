/*
 * REST API Version 2
 * Circuit REST API to interact with the Circuit system.  [Learn more about the Circuit Development Community](https://www.circuit.com/web/developers/home)
 *
 * The version of the OpenAPI document: 2.9.235
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.SharedItem;
import org.openapitools.client.model.SpaceAttachment;
import org.openapitools.client.model.SpaceExternalAttachment;
import org.openapitools.client.model.SpaceItemPreview;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * SpaceItem
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:29:23.236704-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SpaceItem {
  public static final String SERIALIZED_NAME_STATUS = "Status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_ATTACHMENTS = "attachments";
  @SerializedName(SERIALIZED_NAME_ATTACHMENTS)
  private List<SpaceAttachment> attachments = new ArrayList<>();

  public static final String SERIALIZED_NAME_COMPLEX = "complex";
  @SerializedName(SERIALIZED_NAME_COMPLEX)
  private Boolean complex;

  public static final String SERIALIZED_NAME_CONTENT = "content";
  @SerializedName(SERIALIZED_NAME_CONTENT)
  private String content;

  public static final String SERIALIZED_NAME_CREATION_TIME = "creationTime";
  @SerializedName(SERIALIZED_NAME_CREATION_TIME)
  private BigDecimal creationTime;

  public static final String SERIALIZED_NAME_CREATOR_ID = "creatorId";
  @SerializedName(SERIALIZED_NAME_CREATOR_ID)
  private String creatorId;

  public static final String SERIALIZED_NAME_DELETED_BY = "deletedBy";
  @SerializedName(SERIALIZED_NAME_DELETED_BY)
  private String deletedBy;

  public static final String SERIALIZED_NAME_EXTERNAL_ATTACHMENTS = "externalAttachments";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_ATTACHMENTS)
  private List<SpaceExternalAttachment> externalAttachments = new ArrayList<>();

  public static final String SERIALIZED_NAME_FORM_META_DATA = "formMetaData";
  @SerializedName(SERIALIZED_NAME_FORM_META_DATA)
  private String formMetaData;

  public static final String SERIALIZED_NAME_ITEM_ID = "itemId";
  @SerializedName(SERIALIZED_NAME_ITEM_ID)
  private String itemId;

  public static final String SERIALIZED_NAME_MENTIONED_USERS = "mentionedUsers";
  @SerializedName(SERIALIZED_NAME_MENTIONED_USERS)
  private List<String> mentionedUsers = new ArrayList<>();

  public static final String SERIALIZED_NAME_MODIFICATION_TIME = "modificationTime";
  @SerializedName(SERIALIZED_NAME_MODIFICATION_TIME)
  private BigDecimal modificationTime;

  public static final String SERIALIZED_NAME_NUMBER_OF_LIKES = "numberOfLikes";
  @SerializedName(SERIALIZED_NAME_NUMBER_OF_LIKES)
  private BigDecimal numberOfLikes;

  public static final String SERIALIZED_NAME_PREVIEWS = "previews";
  @SerializedName(SERIALIZED_NAME_PREVIEWS)
  private List<SpaceItemPreview> previews = new ArrayList<>();

  public static final String SERIALIZED_NAME_SHARED_ITEMS = "sharedItems";
  @SerializedName(SERIALIZED_NAME_SHARED_ITEMS)
  private List<SharedItem> sharedItems = new ArrayList<>();

  public static final String SERIALIZED_NAME_SPACE_ID = "spaceId";
  @SerializedName(SERIALIZED_NAME_SPACE_ID)
  private String spaceId;

  public static final String SERIALIZED_NAME_TENANT_ID = "tenantId";
  @SerializedName(SERIALIZED_NAME_TENANT_ID)
  private String tenantId;

  public SpaceItem() {
  }

  public SpaceItem status(String status) {
    this.status = status;
    return this;
  }

  /**
   * The Status of this item
   * @return status
   */
  @javax.annotation.Nullable
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }


  public SpaceItem attachments(List<SpaceAttachment> attachments) {
    this.attachments = attachments;
    return this;
  }

  public SpaceItem addAttachmentsItem(SpaceAttachment attachmentsItem) {
    if (this.attachments == null) {
      this.attachments = new ArrayList<>();
    }
    this.attachments.add(attachmentsItem);
    return this;
  }

  /**
   * The list of attachments
   * @return attachments
   */
  @javax.annotation.Nullable
  public List<SpaceAttachment> getAttachments() {
    return attachments;
  }

  public void setAttachments(List<SpaceAttachment> attachments) {
    this.attachments = attachments;
  }


  public SpaceItem complex(Boolean complex) {
    this.complex = complex;
    return this;
  }

  /**
   * Is this item complex
   * @return complex
   */
  @javax.annotation.Nullable
  public Boolean getComplex() {
    return complex;
  }

  public void setComplex(Boolean complex) {
    this.complex = complex;
  }


  public SpaceItem content(String content) {
    this.content = content;
    return this;
  }

  /**
   * The content of this item
   * @return content
   */
  @javax.annotation.Nullable
  public String getContent() {
    return content;
  }

  public void setContent(String content) {
    this.content = content;
  }


  public SpaceItem creationTime(BigDecimal creationTime) {
    this.creationTime = creationTime;
    return this;
  }

  /**
   * The time this item got created
   * @return creationTime
   */
  @javax.annotation.Nullable
  public BigDecimal getCreationTime() {
    return creationTime;
  }

  public void setCreationTime(BigDecimal creationTime) {
    this.creationTime = creationTime;
  }


  public SpaceItem creatorId(String creatorId) {
    this.creatorId = creatorId;
    return this;
  }

  /**
   * The Id of the creator
   * @return creatorId
   */
  @javax.annotation.Nullable
  public String getCreatorId() {
    return creatorId;
  }

  public void setCreatorId(String creatorId) {
    this.creatorId = creatorId;
  }


  public SpaceItem deletedBy(String deletedBy) {
    this.deletedBy = deletedBy;
    return this;
  }

  /**
   * Incase this item got deleted, the id of the deletor
   * @return deletedBy
   */
  @javax.annotation.Nullable
  public String getDeletedBy() {
    return deletedBy;
  }

  public void setDeletedBy(String deletedBy) {
    this.deletedBy = deletedBy;
  }


  public SpaceItem externalAttachments(List<SpaceExternalAttachment> externalAttachments) {
    this.externalAttachments = externalAttachments;
    return this;
  }

  public SpaceItem addExternalAttachmentsItem(SpaceExternalAttachment externalAttachmentsItem) {
    if (this.externalAttachments == null) {
      this.externalAttachments = new ArrayList<>();
    }
    this.externalAttachments.add(externalAttachmentsItem);
    return this;
  }

  /**
   * A list of external attachments
   * @return externalAttachments
   */
  @javax.annotation.Nullable
  public List<SpaceExternalAttachment> getExternalAttachments() {
    return externalAttachments;
  }

  public void setExternalAttachments(List<SpaceExternalAttachment> externalAttachments) {
    this.externalAttachments = externalAttachments;
  }


  public SpaceItem formMetaData(String formMetaData) {
    this.formMetaData = formMetaData;
    return this;
  }

  /**
   * Incase there is FormMetaData
   * @return formMetaData
   */
  @javax.annotation.Nullable
  public String getFormMetaData() {
    return formMetaData;
  }

  public void setFormMetaData(String formMetaData) {
    this.formMetaData = formMetaData;
  }


  public SpaceItem itemId(String itemId) {
    this.itemId = itemId;
    return this;
  }

  /**
   * the Id of this item
   * @return itemId
   */
  @javax.annotation.Nullable
  public String getItemId() {
    return itemId;
  }

  public void setItemId(String itemId) {
    this.itemId = itemId;
  }


  public SpaceItem mentionedUsers(List<String> mentionedUsers) {
    this.mentionedUsers = mentionedUsers;
    return this;
  }

  public SpaceItem addMentionedUsersItem(String mentionedUsersItem) {
    if (this.mentionedUsers == null) {
      this.mentionedUsers = new ArrayList<>();
    }
    this.mentionedUsers.add(mentionedUsersItem);
    return this;
  }

  /**
   * A list of userIds who have been mentioned in this item
   * @return mentionedUsers
   */
  @javax.annotation.Nullable
  public List<String> getMentionedUsers() {
    return mentionedUsers;
  }

  public void setMentionedUsers(List<String> mentionedUsers) {
    this.mentionedUsers = mentionedUsers;
  }


  public SpaceItem modificationTime(BigDecimal modificationTime) {
    this.modificationTime = modificationTime;
    return this;
  }

  /**
   * the time this item got modified
   * @return modificationTime
   */
  @javax.annotation.Nullable
  public BigDecimal getModificationTime() {
    return modificationTime;
  }

  public void setModificationTime(BigDecimal modificationTime) {
    this.modificationTime = modificationTime;
  }


  public SpaceItem numberOfLikes(BigDecimal numberOfLikes) {
    this.numberOfLikes = numberOfLikes;
    return this;
  }

  /**
   * The number of likes
   * @return numberOfLikes
   */
  @javax.annotation.Nullable
  public BigDecimal getNumberOfLikes() {
    return numberOfLikes;
  }

  public void setNumberOfLikes(BigDecimal numberOfLikes) {
    this.numberOfLikes = numberOfLikes;
  }


  public SpaceItem previews(List<SpaceItemPreview> previews) {
    this.previews = previews;
    return this;
  }

  public SpaceItem addPreviewsItem(SpaceItemPreview previewsItem) {
    if (this.previews == null) {
      this.previews = new ArrayList<>();
    }
    this.previews.add(previewsItem);
    return this;
  }

  /**
   * A list of previews
   * @return previews
   */
  @javax.annotation.Nullable
  public List<SpaceItemPreview> getPreviews() {
    return previews;
  }

  public void setPreviews(List<SpaceItemPreview> previews) {
    this.previews = previews;
  }


  public SpaceItem sharedItems(List<SharedItem> sharedItems) {
    this.sharedItems = sharedItems;
    return this;
  }

  public SpaceItem addSharedItemsItem(SharedItem sharedItemsItem) {
    if (this.sharedItems == null) {
      this.sharedItems = new ArrayList<>();
    }
    this.sharedItems.add(sharedItemsItem);
    return this;
  }

  /**
   * missing documentation
   * @return sharedItems
   */
  @javax.annotation.Nullable
  public List<SharedItem> getSharedItems() {
    return sharedItems;
  }

  public void setSharedItems(List<SharedItem> sharedItems) {
    this.sharedItems = sharedItems;
  }


  public SpaceItem spaceId(String spaceId) {
    this.spaceId = spaceId;
    return this;
  }

  /**
   * the Id of the space containing this item
   * @return spaceId
   */
  @javax.annotation.Nullable
  public String getSpaceId() {
    return spaceId;
  }

  public void setSpaceId(String spaceId) {
    this.spaceId = spaceId;
  }


  public SpaceItem tenantId(String tenantId) {
    this.tenantId = tenantId;
    return this;
  }

  /**
   * the Id of the tenant
   * @return tenantId
   */
  @javax.annotation.Nullable
  public String getTenantId() {
    return tenantId;
  }

  public void setTenantId(String tenantId) {
    this.tenantId = tenantId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SpaceItem spaceItem = (SpaceItem) o;
    return Objects.equals(this.status, spaceItem.status) &&
        Objects.equals(this.attachments, spaceItem.attachments) &&
        Objects.equals(this.complex, spaceItem.complex) &&
        Objects.equals(this.content, spaceItem.content) &&
        Objects.equals(this.creationTime, spaceItem.creationTime) &&
        Objects.equals(this.creatorId, spaceItem.creatorId) &&
        Objects.equals(this.deletedBy, spaceItem.deletedBy) &&
        Objects.equals(this.externalAttachments, spaceItem.externalAttachments) &&
        Objects.equals(this.formMetaData, spaceItem.formMetaData) &&
        Objects.equals(this.itemId, spaceItem.itemId) &&
        Objects.equals(this.mentionedUsers, spaceItem.mentionedUsers) &&
        Objects.equals(this.modificationTime, spaceItem.modificationTime) &&
        Objects.equals(this.numberOfLikes, spaceItem.numberOfLikes) &&
        Objects.equals(this.previews, spaceItem.previews) &&
        Objects.equals(this.sharedItems, spaceItem.sharedItems) &&
        Objects.equals(this.spaceId, spaceItem.spaceId) &&
        Objects.equals(this.tenantId, spaceItem.tenantId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(status, attachments, complex, content, creationTime, creatorId, deletedBy, externalAttachments, formMetaData, itemId, mentionedUsers, modificationTime, numberOfLikes, previews, sharedItems, spaceId, tenantId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SpaceItem {\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    attachments: ").append(toIndentedString(attachments)).append("\n");
    sb.append("    complex: ").append(toIndentedString(complex)).append("\n");
    sb.append("    content: ").append(toIndentedString(content)).append("\n");
    sb.append("    creationTime: ").append(toIndentedString(creationTime)).append("\n");
    sb.append("    creatorId: ").append(toIndentedString(creatorId)).append("\n");
    sb.append("    deletedBy: ").append(toIndentedString(deletedBy)).append("\n");
    sb.append("    externalAttachments: ").append(toIndentedString(externalAttachments)).append("\n");
    sb.append("    formMetaData: ").append(toIndentedString(formMetaData)).append("\n");
    sb.append("    itemId: ").append(toIndentedString(itemId)).append("\n");
    sb.append("    mentionedUsers: ").append(toIndentedString(mentionedUsers)).append("\n");
    sb.append("    modificationTime: ").append(toIndentedString(modificationTime)).append("\n");
    sb.append("    numberOfLikes: ").append(toIndentedString(numberOfLikes)).append("\n");
    sb.append("    previews: ").append(toIndentedString(previews)).append("\n");
    sb.append("    sharedItems: ").append(toIndentedString(sharedItems)).append("\n");
    sb.append("    spaceId: ").append(toIndentedString(spaceId)).append("\n");
    sb.append("    tenantId: ").append(toIndentedString(tenantId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Status");
    openapiFields.add("attachments");
    openapiFields.add("complex");
    openapiFields.add("content");
    openapiFields.add("creationTime");
    openapiFields.add("creatorId");
    openapiFields.add("deletedBy");
    openapiFields.add("externalAttachments");
    openapiFields.add("formMetaData");
    openapiFields.add("itemId");
    openapiFields.add("mentionedUsers");
    openapiFields.add("modificationTime");
    openapiFields.add("numberOfLikes");
    openapiFields.add("previews");
    openapiFields.add("sharedItems");
    openapiFields.add("spaceId");
    openapiFields.add("tenantId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SpaceItem
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SpaceItem.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SpaceItem is not found in the empty JSON string", SpaceItem.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SpaceItem.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SpaceItem` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("Status") != null && !jsonObj.get("Status").isJsonNull()) && !jsonObj.get("Status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Status").toString()));
      }
      if (jsonObj.get("attachments") != null && !jsonObj.get("attachments").isJsonNull()) {
        JsonArray jsonArrayattachments = jsonObj.getAsJsonArray("attachments");
        if (jsonArrayattachments != null) {
          // ensure the json data is an array
          if (!jsonObj.get("attachments").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `attachments` to be an array in the JSON string but got `%s`", jsonObj.get("attachments").toString()));
          }

          // validate the optional field `attachments` (array)
          for (int i = 0; i < jsonArrayattachments.size(); i++) {
            SpaceAttachment.validateJsonElement(jsonArrayattachments.get(i));
          };
        }
      }
      if ((jsonObj.get("content") != null && !jsonObj.get("content").isJsonNull()) && !jsonObj.get("content").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `content` to be a primitive type in the JSON string but got `%s`", jsonObj.get("content").toString()));
      }
      if ((jsonObj.get("creatorId") != null && !jsonObj.get("creatorId").isJsonNull()) && !jsonObj.get("creatorId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `creatorId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("creatorId").toString()));
      }
      if ((jsonObj.get("deletedBy") != null && !jsonObj.get("deletedBy").isJsonNull()) && !jsonObj.get("deletedBy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `deletedBy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("deletedBy").toString()));
      }
      if (jsonObj.get("externalAttachments") != null && !jsonObj.get("externalAttachments").isJsonNull()) {
        JsonArray jsonArrayexternalAttachments = jsonObj.getAsJsonArray("externalAttachments");
        if (jsonArrayexternalAttachments != null) {
          // ensure the json data is an array
          if (!jsonObj.get("externalAttachments").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `externalAttachments` to be an array in the JSON string but got `%s`", jsonObj.get("externalAttachments").toString()));
          }

          // validate the optional field `externalAttachments` (array)
          for (int i = 0; i < jsonArrayexternalAttachments.size(); i++) {
            SpaceExternalAttachment.validateJsonElement(jsonArrayexternalAttachments.get(i));
          };
        }
      }
      if ((jsonObj.get("formMetaData") != null && !jsonObj.get("formMetaData").isJsonNull()) && !jsonObj.get("formMetaData").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `formMetaData` to be a primitive type in the JSON string but got `%s`", jsonObj.get("formMetaData").toString()));
      }
      if ((jsonObj.get("itemId") != null && !jsonObj.get("itemId").isJsonNull()) && !jsonObj.get("itemId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `itemId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("itemId").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("mentionedUsers") != null && !jsonObj.get("mentionedUsers").isJsonNull() && !jsonObj.get("mentionedUsers").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `mentionedUsers` to be an array in the JSON string but got `%s`", jsonObj.get("mentionedUsers").toString()));
      }
      if (jsonObj.get("previews") != null && !jsonObj.get("previews").isJsonNull()) {
        JsonArray jsonArraypreviews = jsonObj.getAsJsonArray("previews");
        if (jsonArraypreviews != null) {
          // ensure the json data is an array
          if (!jsonObj.get("previews").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `previews` to be an array in the JSON string but got `%s`", jsonObj.get("previews").toString()));
          }

          // validate the optional field `previews` (array)
          for (int i = 0; i < jsonArraypreviews.size(); i++) {
            SpaceItemPreview.validateJsonElement(jsonArraypreviews.get(i));
          };
        }
      }
      if (jsonObj.get("sharedItems") != null && !jsonObj.get("sharedItems").isJsonNull()) {
        JsonArray jsonArraysharedItems = jsonObj.getAsJsonArray("sharedItems");
        if (jsonArraysharedItems != null) {
          // ensure the json data is an array
          if (!jsonObj.get("sharedItems").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `sharedItems` to be an array in the JSON string but got `%s`", jsonObj.get("sharedItems").toString()));
          }

          // validate the optional field `sharedItems` (array)
          for (int i = 0; i < jsonArraysharedItems.size(); i++) {
            SharedItem.validateJsonElement(jsonArraysharedItems.get(i));
          };
        }
      }
      if ((jsonObj.get("spaceId") != null && !jsonObj.get("spaceId").isJsonNull()) && !jsonObj.get("spaceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `spaceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("spaceId").toString()));
      }
      if ((jsonObj.get("tenantId") != null && !jsonObj.get("tenantId").isJsonNull()) && !jsonObj.get("tenantId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tenantId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tenantId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SpaceItem.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SpaceItem' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SpaceItem> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SpaceItem.class));

       return (TypeAdapter<T>) new TypeAdapter<SpaceItem>() {
           @Override
           public void write(JsonWriter out, SpaceItem value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SpaceItem read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SpaceItem given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SpaceItem
   * @throws IOException if the JSON string is invalid with respect to SpaceItem
   */
  public static SpaceItem fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SpaceItem.class);
  }

  /**
   * Convert an instance of SpaceItem to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

