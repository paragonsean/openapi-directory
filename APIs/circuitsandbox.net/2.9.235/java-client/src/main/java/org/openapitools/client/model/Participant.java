/*
 * REST API Version 2
 * Circuit REST API to interact with the Circuit system.  [Learn more about the Circuit Development Community](https://www.circuit.com/web/developers/home)
 *
 * The version of the OpenAPI document: 2.9.235
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Participant
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:29:23.236704-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Participant {
  public static final String SERIALIZED_NAME_CREATION_TIME = "creationTime";
  @SerializedName(SERIALIZED_NAME_CREATION_TIME)
  private BigDecimal creationTime;

  public static final String SERIALIZED_NAME_LABEL_IDS = "labelIds";
  @SerializedName(SERIALIZED_NAME_LABEL_IDS)
  private List<String> labelIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_LAST_CONTENT_CREATION_TIME = "lastContentCreationTime";
  @SerializedName(SERIALIZED_NAME_LAST_CONTENT_CREATION_TIME)
  private BigDecimal lastContentCreationTime;

  public static final String SERIALIZED_NAME_LAST_READ_TIMESTAMP = "lastReadTimestamp";
  @SerializedName(SERIALIZED_NAME_LAST_READ_TIMESTAMP)
  private BigDecimal lastReadTimestamp;

  public static final String SERIALIZED_NAME_MODIFICATION_TIME = "modificationTime";
  @SerializedName(SERIALIZED_NAME_MODIFICATION_TIME)
  private BigDecimal modificationTime;

  public static final String SERIALIZED_NAME_NUMBER_OF_REPLIES = "numberOfReplies";
  @SerializedName(SERIALIZED_NAME_NUMBER_OF_REPLIES)
  private BigDecimal numberOfReplies;

  public static final String SERIALIZED_NAME_NUMBER_OF_TOPICS = "numberOfTopics";
  @SerializedName(SERIALIZED_NAME_NUMBER_OF_TOPICS)
  private BigDecimal numberOfTopics;

  public static final String SERIALIZED_NAME_ROLE = "role";
  @SerializedName(SERIALIZED_NAME_ROLE)
  private String role;

  public static final String SERIALIZED_NAME_SPACE_ID = "spaceId";
  @SerializedName(SERIALIZED_NAME_SPACE_ID)
  private String spaceId;

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private String state;

  public static final String SERIALIZED_NAME_TENANT_ID = "tenantId";
  @SerializedName(SERIALIZED_NAME_TENANT_ID)
  private String tenantId;

  public static final String SERIALIZED_NAME_USER_ID = "userId";
  @SerializedName(SERIALIZED_NAME_USER_ID)
  private String userId;

  public Participant() {
  }

  public Participant creationTime(BigDecimal creationTime) {
    this.creationTime = creationTime;
    return this;
  }

  /**
   * Time when the participant was added to the space
   * @return creationTime
   */
  @javax.annotation.Nullable
  public BigDecimal getCreationTime() {
    return creationTime;
  }

  public void setCreationTime(BigDecimal creationTime) {
    this.creationTime = creationTime;
  }


  public Participant labelIds(List<String> labelIds) {
    this.labelIds = labelIds;
    return this;
  }

  public Participant addLabelIdsItem(String labelIdsItem) {
    if (this.labelIds == null) {
      this.labelIds = new ArrayList<>();
    }
    this.labelIds.add(labelIdsItem);
    return this;
  }

  /**
   * The list of label IDs of all the labels assigned to the space.
   * @return labelIds
   */
  @javax.annotation.Nullable
  public List<String> getLabelIds() {
    return labelIds;
  }

  public void setLabelIds(List<String> labelIds) {
    this.labelIds = labelIds;
  }


  public Participant lastContentCreationTime(BigDecimal lastContentCreationTime) {
    this.lastContentCreationTime = lastContentCreationTime;
    return this;
  }

  /**
   * Time stamp when user last created content in the space.
   * @return lastContentCreationTime
   */
  @javax.annotation.Nullable
  public BigDecimal getLastContentCreationTime() {
    return lastContentCreationTime;
  }

  public void setLastContentCreationTime(BigDecimal lastContentCreationTime) {
    this.lastContentCreationTime = lastContentCreationTime;
  }


  public Participant lastReadTimestamp(BigDecimal lastReadTimestamp) {
    this.lastReadTimestamp = lastReadTimestamp;
    return this;
  }

  /**
   * Last time stamp when the user read content in this space.
   * @return lastReadTimestamp
   */
  @javax.annotation.Nullable
  public BigDecimal getLastReadTimestamp() {
    return lastReadTimestamp;
  }

  public void setLastReadTimestamp(BigDecimal lastReadTimestamp) {
    this.lastReadTimestamp = lastReadTimestamp;
  }


  public Participant modificationTime(BigDecimal modificationTime) {
    this.modificationTime = modificationTime;
    return this;
  }

  /**
   * Time when the participant was changed last.
   * @return modificationTime
   */
  @javax.annotation.Nullable
  public BigDecimal getModificationTime() {
    return modificationTime;
  }

  public void setModificationTime(BigDecimal modificationTime) {
    this.modificationTime = modificationTime;
  }


  public Participant numberOfReplies(BigDecimal numberOfReplies) {
    this.numberOfReplies = numberOfReplies;
    return this;
  }

  /**
   * Number of replies in the space created by this participant.
   * @return numberOfReplies
   */
  @javax.annotation.Nullable
  public BigDecimal getNumberOfReplies() {
    return numberOfReplies;
  }

  public void setNumberOfReplies(BigDecimal numberOfReplies) {
    this.numberOfReplies = numberOfReplies;
  }


  public Participant numberOfTopics(BigDecimal numberOfTopics) {
    this.numberOfTopics = numberOfTopics;
    return this;
  }

  /**
   * Number of topics in the space created by this participant.
   * @return numberOfTopics
   */
  @javax.annotation.Nullable
  public BigDecimal getNumberOfTopics() {
    return numberOfTopics;
  }

  public void setNumberOfTopics(BigDecimal numberOfTopics) {
    this.numberOfTopics = numberOfTopics;
  }


  public Participant role(String role) {
    this.role = role;
    return this;
  }

  /**
   * The name of the role of the participant.
   * @return role
   */
  @javax.annotation.Nullable
  public String getRole() {
    return role;
  }

  public void setRole(String role) {
    this.role = role;
  }


  public Participant spaceId(String spaceId) {
    this.spaceId = spaceId;
    return this;
  }

  /**
   * The unique ID of the space to which the participant.
   * @return spaceId
   */
  @javax.annotation.Nullable
  public String getSpaceId() {
    return spaceId;
  }

  public void setSpaceId(String spaceId) {
    this.spaceId = spaceId;
  }


  public Participant state(String state) {
    this.state = state;
    return this;
  }

  /**
   * The name of the state of the participant;
   * @return state
   */
  @javax.annotation.Nullable
  public String getState() {
    return state;
  }

  public void setState(String state) {
    this.state = state;
  }


  public Participant tenantId(String tenantId) {
    this.tenantId = tenantId;
    return this;
  }

  /**
   * The unique tenant id of the participant.
   * @return tenantId
   */
  @javax.annotation.Nullable
  public String getTenantId() {
    return tenantId;
  }

  public void setTenantId(String tenantId) {
    this.tenantId = tenantId;
  }


  public Participant userId(String userId) {
    this.userId = userId;
    return this;
  }

  /**
   * The unique user id of the participant.
   * @return userId
   */
  @javax.annotation.Nullable
  public String getUserId() {
    return userId;
  }

  public void setUserId(String userId) {
    this.userId = userId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Participant participant = (Participant) o;
    return Objects.equals(this.creationTime, participant.creationTime) &&
        Objects.equals(this.labelIds, participant.labelIds) &&
        Objects.equals(this.lastContentCreationTime, participant.lastContentCreationTime) &&
        Objects.equals(this.lastReadTimestamp, participant.lastReadTimestamp) &&
        Objects.equals(this.modificationTime, participant.modificationTime) &&
        Objects.equals(this.numberOfReplies, participant.numberOfReplies) &&
        Objects.equals(this.numberOfTopics, participant.numberOfTopics) &&
        Objects.equals(this.role, participant.role) &&
        Objects.equals(this.spaceId, participant.spaceId) &&
        Objects.equals(this.state, participant.state) &&
        Objects.equals(this.tenantId, participant.tenantId) &&
        Objects.equals(this.userId, participant.userId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(creationTime, labelIds, lastContentCreationTime, lastReadTimestamp, modificationTime, numberOfReplies, numberOfTopics, role, spaceId, state, tenantId, userId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Participant {\n");
    sb.append("    creationTime: ").append(toIndentedString(creationTime)).append("\n");
    sb.append("    labelIds: ").append(toIndentedString(labelIds)).append("\n");
    sb.append("    lastContentCreationTime: ").append(toIndentedString(lastContentCreationTime)).append("\n");
    sb.append("    lastReadTimestamp: ").append(toIndentedString(lastReadTimestamp)).append("\n");
    sb.append("    modificationTime: ").append(toIndentedString(modificationTime)).append("\n");
    sb.append("    numberOfReplies: ").append(toIndentedString(numberOfReplies)).append("\n");
    sb.append("    numberOfTopics: ").append(toIndentedString(numberOfTopics)).append("\n");
    sb.append("    role: ").append(toIndentedString(role)).append("\n");
    sb.append("    spaceId: ").append(toIndentedString(spaceId)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    tenantId: ").append(toIndentedString(tenantId)).append("\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("creationTime");
    openapiFields.add("labelIds");
    openapiFields.add("lastContentCreationTime");
    openapiFields.add("lastReadTimestamp");
    openapiFields.add("modificationTime");
    openapiFields.add("numberOfReplies");
    openapiFields.add("numberOfTopics");
    openapiFields.add("role");
    openapiFields.add("spaceId");
    openapiFields.add("state");
    openapiFields.add("tenantId");
    openapiFields.add("userId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Participant
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Participant.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Participant is not found in the empty JSON string", Participant.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Participant.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Participant` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("labelIds") != null && !jsonObj.get("labelIds").isJsonNull() && !jsonObj.get("labelIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `labelIds` to be an array in the JSON string but got `%s`", jsonObj.get("labelIds").toString()));
      }
      if ((jsonObj.get("role") != null && !jsonObj.get("role").isJsonNull()) && !jsonObj.get("role").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `role` to be a primitive type in the JSON string but got `%s`", jsonObj.get("role").toString()));
      }
      if ((jsonObj.get("spaceId") != null && !jsonObj.get("spaceId").isJsonNull()) && !jsonObj.get("spaceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `spaceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("spaceId").toString()));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      if ((jsonObj.get("tenantId") != null && !jsonObj.get("tenantId").isJsonNull()) && !jsonObj.get("tenantId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tenantId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tenantId").toString()));
      }
      if ((jsonObj.get("userId") != null && !jsonObj.get("userId").isJsonNull()) && !jsonObj.get("userId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Participant.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Participant' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Participant> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Participant.class));

       return (TypeAdapter<T>) new TypeAdapter<Participant>() {
           @Override
           public void write(JsonWriter out, Participant value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Participant read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Participant given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Participant
   * @throws IOException if the JSON string is invalid with respect to Participant
   */
  public static Participant fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Participant.class);
  }

  /**
   * Convert an instance of Participant to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

