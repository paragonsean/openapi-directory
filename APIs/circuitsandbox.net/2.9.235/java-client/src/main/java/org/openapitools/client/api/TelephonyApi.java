/*
 * REST API Version 2
 * Circuit REST API to interact with the Circuit system.  [Learn more about the Circuit Development Community](https://www.circuit.com/web/developers/home)
 *
 * The version of the OpenAPI document: 2.9.235
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.math.BigDecimal;
import org.openapitools.client.model.ConversationItem;
import org.openapitools.client.model.V2DistributedClientInfo;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TelephonyApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TelephonyApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TelephonyApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getJournalEntries
     * @param telephonyConversationId The id of the telephony conversation (required)
     * @param timestamp A timestamp, default &#x3D; 0 (optional, default to 0)
     * @param numberOfEntries The number of entries, between 1 and 100, default &#x3D; 25 (optional, default to 25)
     * @param direction The direction (BEFORE||AFTER||BOTH), default &#x3D; AFTER (optional, default to AFTER)
     * @param journalFilter The filter, ALL||MISSED||DIALED||RECEIVED||DIVERTED||VOICEMAILS||UNHERAD_VOICEMAILS. default &#x3D; ALL (optional, default to ALL)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Journal successfully retrieved </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getJournalEntriesCall(String telephonyConversationId, BigDecimal timestamp, BigDecimal numberOfEntries, String direction, String journalFilter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/telephony/{telephonyConversationId}/journal"
            .replace("{" + "telephonyConversationId" + "}", localVarApiClient.escapeString(telephonyConversationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (timestamp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timestamp", timestamp));
        }

        if (numberOfEntries != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("numberOfEntries", numberOfEntries));
        }

        if (direction != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direction", direction));
        }

        if (journalFilter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("journalFilter", journalFilter));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getJournalEntriesValidateBeforeCall(String telephonyConversationId, BigDecimal timestamp, BigDecimal numberOfEntries, String direction, String journalFilter, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'telephonyConversationId' is set
        if (telephonyConversationId == null) {
            throw new ApiException("Missing the required parameter 'telephonyConversationId' when calling getJournalEntries(Async)");
        }

        return getJournalEntriesCall(telephonyConversationId, timestamp, numberOfEntries, direction, journalFilter, _callback);

    }

    /**
     * Get journal
     * Get telephony journal OauthScopes: READ_CONVERSATIONS
     * @param telephonyConversationId The id of the telephony conversation (required)
     * @param timestamp A timestamp, default &#x3D; 0 (optional, default to 0)
     * @param numberOfEntries The number of entries, between 1 and 100, default &#x3D; 25 (optional, default to 25)
     * @param direction The direction (BEFORE||AFTER||BOTH), default &#x3D; AFTER (optional, default to AFTER)
     * @param journalFilter The filter, ALL||MISSED||DIALED||RECEIVED||DIVERTED||VOICEMAILS||UNHERAD_VOICEMAILS. default &#x3D; ALL (optional, default to ALL)
     * @return List&lt;ConversationItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Journal successfully retrieved </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public List<ConversationItem> getJournalEntries(String telephonyConversationId, BigDecimal timestamp, BigDecimal numberOfEntries, String direction, String journalFilter) throws ApiException {
        ApiResponse<List<ConversationItem>> localVarResp = getJournalEntriesWithHttpInfo(telephonyConversationId, timestamp, numberOfEntries, direction, journalFilter);
        return localVarResp.getData();
    }

    /**
     * Get journal
     * Get telephony journal OauthScopes: READ_CONVERSATIONS
     * @param telephonyConversationId The id of the telephony conversation (required)
     * @param timestamp A timestamp, default &#x3D; 0 (optional, default to 0)
     * @param numberOfEntries The number of entries, between 1 and 100, default &#x3D; 25 (optional, default to 25)
     * @param direction The direction (BEFORE||AFTER||BOTH), default &#x3D; AFTER (optional, default to AFTER)
     * @param journalFilter The filter, ALL||MISSED||DIALED||RECEIVED||DIVERTED||VOICEMAILS||UNHERAD_VOICEMAILS. default &#x3D; ALL (optional, default to ALL)
     * @return ApiResponse&lt;List&lt;ConversationItem&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Journal successfully retrieved </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ConversationItem>> getJournalEntriesWithHttpInfo(String telephonyConversationId, BigDecimal timestamp, BigDecimal numberOfEntries, String direction, String journalFilter) throws ApiException {
        okhttp3.Call localVarCall = getJournalEntriesValidateBeforeCall(telephonyConversationId, timestamp, numberOfEntries, direction, journalFilter, null);
        Type localVarReturnType = new TypeToken<List<ConversationItem>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get journal (asynchronously)
     * Get telephony journal OauthScopes: READ_CONVERSATIONS
     * @param telephonyConversationId The id of the telephony conversation (required)
     * @param timestamp A timestamp, default &#x3D; 0 (optional, default to 0)
     * @param numberOfEntries The number of entries, between 1 and 100, default &#x3D; 25 (optional, default to 25)
     * @param direction The direction (BEFORE||AFTER||BOTH), default &#x3D; AFTER (optional, default to AFTER)
     * @param journalFilter The filter, ALL||MISSED||DIALED||RECEIVED||DIVERTED||VOICEMAILS||UNHERAD_VOICEMAILS. default &#x3D; ALL (optional, default to ALL)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Journal successfully retrieved </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getJournalEntriesAsync(String telephonyConversationId, BigDecimal timestamp, BigDecimal numberOfEntries, String direction, String journalFilter, final ApiCallback<List<ConversationItem>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getJournalEntriesValidateBeforeCall(telephonyConversationId, timestamp, numberOfEntries, direction, journalFilter, _callback);
        Type localVarReturnType = new TypeToken<List<ConversationItem>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v2GetDeviceInfos
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Device infos successfully retrieved </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v2GetDeviceInfosCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/telephony/deviceInfos";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v2GetDeviceInfosValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return v2GetDeviceInfosCall(_callback);

    }

    /**
     * Get devices infos
     * Get the device infos of the requesting user OauthScopes: READ_USER_PROFILE
     * @return List&lt;V2DistributedClientInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Device infos successfully retrieved </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public List<V2DistributedClientInfo> v2GetDeviceInfos() throws ApiException {
        ApiResponse<List<V2DistributedClientInfo>> localVarResp = v2GetDeviceInfosWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get devices infos
     * Get the device infos of the requesting user OauthScopes: READ_USER_PROFILE
     * @return ApiResponse&lt;List&lt;V2DistributedClientInfo&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Device infos successfully retrieved </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<V2DistributedClientInfo>> v2GetDeviceInfosWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = v2GetDeviceInfosValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<V2DistributedClientInfo>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get devices infos (asynchronously)
     * Get the device infos of the requesting user OauthScopes: READ_USER_PROFILE
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Device infos successfully retrieved </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v2GetDeviceInfosAsync(final ApiCallback<List<V2DistributedClientInfo>> _callback) throws ApiException {

        okhttp3.Call localVarCall = v2GetDeviceInfosValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<V2DistributedClientInfo>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v2GetTelephonyConversationId
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Telephony conversation id successfully retrieved </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v2GetTelephonyConversationIdCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/telephony/telephonyConversationId";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v2GetTelephonyConversationIdValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return v2GetTelephonyConversationIdCall(_callback);

    }

    /**
     * Get telephony conversation id
     * Get telephony conversation id for requesting client OauthScopes: READ_CONVERSATIONS
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Telephony conversation id successfully retrieved </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public void v2GetTelephonyConversationId() throws ApiException {
        v2GetTelephonyConversationIdWithHttpInfo();
    }

    /**
     * Get telephony conversation id
     * Get telephony conversation id for requesting client OauthScopes: READ_CONVERSATIONS
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Telephony conversation id successfully retrieved </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> v2GetTelephonyConversationIdWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = v2GetTelephonyConversationIdValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Get telephony conversation id (asynchronously)
     * Get telephony conversation id for requesting client OauthScopes: READ_CONVERSATIONS
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Telephony conversation id successfully retrieved </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v2GetTelephonyConversationIdAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = v2GetTelephonyConversationIdValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
