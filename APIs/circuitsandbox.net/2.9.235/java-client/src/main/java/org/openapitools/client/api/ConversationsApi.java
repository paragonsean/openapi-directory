/*
 * REST API Version 2
 * Circuit REST API to interact with the Circuit system.  [Learn more about the Circuit Development Community](https://www.circuit.com/web/developers/home)
 *
 * The version of the OpenAPI document: 2.9.235
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.math.BigDecimal;
import org.openapitools.client.model.Conversation;
import org.openapitools.client.model.ConversationDetails;
import org.openapitools.client.model.ConversationItem;
import org.openapitools.client.model.ConversationParticipantsList;
import org.openapitools.client.model.ConversationSearchResult;
import org.openapitools.client.model.ConversationsPage;
import org.openapitools.client.model.Label;
import java.time.OffsetDateTime;
import org.openapitools.client.model.PinnedTopic;
import org.openapitools.client.model.User;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ConversationsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ConversationsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ConversationsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for addFavorite
     * @param convId The ID of the conversation which will be marked as favorite (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The conversation was successfully marked </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request cannot be fulfilled due to bad syntax: &lt;ul&gt;&lt;li&gt;the conversation does not exist&lt;/li&gt;&lt;li&gt;the user is no participant of the conversation&lt;/li&gt;&lt;li&gt;a field constraint is violated&lt;/li&gt;&lt;/ul&gt; </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addFavoriteCall(String convId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/conversations/{convId}/favorite"
            .replace("{" + "convId" + "}", localVarApiClient.escapeString(convId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addFavoriteValidateBeforeCall(String convId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'convId' is set
        if (convId == null) {
            throw new ApiException("Missing the required parameter 'convId' when calling addFavorite(Async)");
        }

        return addFavoriteCall(convId, _callback);

    }

    /**
     * Adds a conversation to the favorites
     * Adds a conversation to the favorites. Favorites can be displayed in a separate side tab inside of the Circuit client to have a better overview of important conversations. OauthScopes: WRITE_CONVERSATIONS
     * @param convId The ID of the conversation which will be marked as favorite (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The conversation was successfully marked </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request cannot be fulfilled due to bad syntax: &lt;ul&gt;&lt;li&gt;the conversation does not exist&lt;/li&gt;&lt;li&gt;the user is no participant of the conversation&lt;/li&gt;&lt;li&gt;a field constraint is violated&lt;/li&gt;&lt;/ul&gt; </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public void addFavorite(String convId) throws ApiException {
        addFavoriteWithHttpInfo(convId);
    }

    /**
     * Adds a conversation to the favorites
     * Adds a conversation to the favorites. Favorites can be displayed in a separate side tab inside of the Circuit client to have a better overview of important conversations. OauthScopes: WRITE_CONVERSATIONS
     * @param convId The ID of the conversation which will be marked as favorite (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The conversation was successfully marked </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request cannot be fulfilled due to bad syntax: &lt;ul&gt;&lt;li&gt;the conversation does not exist&lt;/li&gt;&lt;li&gt;the user is no participant of the conversation&lt;/li&gt;&lt;li&gt;a field constraint is violated&lt;/li&gt;&lt;/ul&gt; </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> addFavoriteWithHttpInfo(String convId) throws ApiException {
        okhttp3.Call localVarCall = addFavoriteValidateBeforeCall(convId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Adds a conversation to the favorites (asynchronously)
     * Adds a conversation to the favorites. Favorites can be displayed in a separate side tab inside of the Circuit client to have a better overview of important conversations. OauthScopes: WRITE_CONVERSATIONS
     * @param convId The ID of the conversation which will be marked as favorite (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The conversation was successfully marked </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request cannot be fulfilled due to bad syntax: &lt;ul&gt;&lt;li&gt;the conversation does not exist&lt;/li&gt;&lt;li&gt;the user is no participant of the conversation&lt;/li&gt;&lt;li&gt;a field constraint is violated&lt;/li&gt;&lt;/ul&gt; </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addFavoriteAsync(String convId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = addFavoriteValidateBeforeCall(convId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for addLabel
     * @param label The label value to add (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The label was successfully added </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addLabelCall(String label, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/labels";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (label != null) {
            localVarFormParams.put("label", label);
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addLabelValidateBeforeCall(String label, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'label' is set
        if (label == null) {
            throw new ApiException("Missing the required parameter 'label' when calling addLabel(Async)");
        }

        return addLabelCall(label, _callback);

    }

    /**
     * Add a user label
     * Add a label to the list of user labels OauthScopes: WRITE_USER_PROFILE, ORGANIZE_CONVERSATIONS
     * @param label The label value to add (required)
     * @return Label
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The label was successfully added </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public Label addLabel(String label) throws ApiException {
        ApiResponse<Label> localVarResp = addLabelWithHttpInfo(label);
        return localVarResp.getData();
    }

    /**
     * Add a user label
     * Add a label to the list of user labels OauthScopes: WRITE_USER_PROFILE, ORGANIZE_CONVERSATIONS
     * @param label The label value to add (required)
     * @return ApiResponse&lt;Label&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The label was successfully added </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Label> addLabelWithHttpInfo(String label) throws ApiException {
        okhttp3.Call localVarCall = addLabelValidateBeforeCall(label, null);
        Type localVarReturnType = new TypeToken<Label>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add a user label (asynchronously)
     * Add a label to the list of user labels OauthScopes: WRITE_USER_PROFILE, ORGANIZE_CONVERSATIONS
     * @param label The label value to add (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The label was successfully added </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addLabelAsync(String label, final ApiCallback<Label> _callback) throws ApiException {

        okhttp3.Call localVarCall = addLabelValidateBeforeCall(label, _callback);
        Type localVarReturnType = new TypeToken<Label>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for addModerators
     * @param convId The ID of the conversation to which the moderators are added (required)
     * @param moderators The list of moderator ids to add  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The moderators were successfully added </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error reading list of moderators to add </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addModeratorsCall(String convId, List<String> moderators, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/conversations/{convId}/moderators"
            .replace("{" + "convId" + "}", localVarApiClient.escapeString(convId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (moderators != null) {
            localVarFormParams.put("moderators", moderators);
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addModeratorsValidateBeforeCall(String convId, List<String> moderators, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'convId' is set
        if (convId == null) {
            throw new ApiException("Missing the required parameter 'convId' when calling addModerators(Async)");
        }

        // verify the required parameter 'moderators' is set
        if (moderators == null) {
            throw new ApiException("Missing the required parameter 'moderators' when calling addModerators(Async)");
        }

        return addModeratorsCall(convId, moderators, _callback);

    }

    /**
     * Add moderators
     * Adds a list of moderators to a conversation OauthScopes: WRITE_CONVERSATIONS, MANAGE_CONVERSATIONS
     * @param convId The ID of the conversation to which the moderators are added (required)
     * @param moderators The list of moderator ids to add  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The moderators were successfully added </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error reading list of moderators to add </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public void addModerators(String convId, List<String> moderators) throws ApiException {
        addModeratorsWithHttpInfo(convId, moderators);
    }

    /**
     * Add moderators
     * Adds a list of moderators to a conversation OauthScopes: WRITE_CONVERSATIONS, MANAGE_CONVERSATIONS
     * @param convId The ID of the conversation to which the moderators are added (required)
     * @param moderators The list of moderator ids to add  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The moderators were successfully added </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error reading list of moderators to add </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> addModeratorsWithHttpInfo(String convId, List<String> moderators) throws ApiException {
        okhttp3.Call localVarCall = addModeratorsValidateBeforeCall(convId, moderators, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Add moderators (asynchronously)
     * Adds a list of moderators to a conversation OauthScopes: WRITE_CONVERSATIONS, MANAGE_CONVERSATIONS
     * @param convId The ID of the conversation to which the moderators are added (required)
     * @param moderators The list of moderator ids to add  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The moderators were successfully added </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Error reading list of moderators to add </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addModeratorsAsync(String convId, List<String> moderators, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = addModeratorsValidateBeforeCall(convId, moderators, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for addParticipantCommunity
     * @param convId The ID of the conversation to which the participant has to be added. (required)
     * @param participants The IDs or the unique email addresses of the Circuit users that should to be added. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Gets the conversation object to which the participants were added. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request cannot be fulfilled due to bad syntax: &lt;ul&gt;&lt;li&gt;the userIds passed as parameter are not provided in the correct format&lt;/li&gt;&lt;li&gt; or an valid email address&lt;/li&gt;&lt;li&gt;or one or more of the user do not exist&lt;/li&gt;&lt;li&gt;the conversation does not exist&lt;/li&gt;&lt;li&gt;the conversation is not of type COMMUNITY&lt;/li&gt;&lt;li&gt;a field constraint is violated&lt;/li&gt;&lt;/ul&gt; </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addParticipantCommunityCall(String convId, List<String> participants, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/conversations/community/{convId}/participants"
            .replace("{" + "convId" + "}", localVarApiClient.escapeString(convId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (participants != null) {
            localVarFormParams.put("participants", participants);
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addParticipantCommunityValidateBeforeCall(String convId, List<String> participants, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'convId' is set
        if (convId == null) {
            throw new ApiException("Missing the required parameter 'convId' when calling addParticipantCommunity(Async)");
        }

        // verify the required parameter 'participants' is set
        if (participants == null) {
            throw new ApiException("Missing the required parameter 'participants' when calling addParticipantCommunity(Async)");
        }

        return addParticipantCommunityCall(convId, participants, _callback);

    }

    /**
     * Adds participants to a community
     * Adds one or more participants to the given community. This operation can only be performed by a user who is already a member of the community. OauthScopes: WRITE_CONVERSATIONS, MANAGE_CONVERSATIONS
     * @param convId The ID of the conversation to which the participant has to be added. (required)
     * @param participants The IDs or the unique email addresses of the Circuit users that should to be added. (required)
     * @return Conversation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Gets the conversation object to which the participants were added. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request cannot be fulfilled due to bad syntax: &lt;ul&gt;&lt;li&gt;the userIds passed as parameter are not provided in the correct format&lt;/li&gt;&lt;li&gt; or an valid email address&lt;/li&gt;&lt;li&gt;or one or more of the user do not exist&lt;/li&gt;&lt;li&gt;the conversation does not exist&lt;/li&gt;&lt;li&gt;the conversation is not of type COMMUNITY&lt;/li&gt;&lt;li&gt;a field constraint is violated&lt;/li&gt;&lt;/ul&gt; </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public Conversation addParticipantCommunity(String convId, List<String> participants) throws ApiException {
        ApiResponse<Conversation> localVarResp = addParticipantCommunityWithHttpInfo(convId, participants);
        return localVarResp.getData();
    }

    /**
     * Adds participants to a community
     * Adds one or more participants to the given community. This operation can only be performed by a user who is already a member of the community. OauthScopes: WRITE_CONVERSATIONS, MANAGE_CONVERSATIONS
     * @param convId The ID of the conversation to which the participant has to be added. (required)
     * @param participants The IDs or the unique email addresses of the Circuit users that should to be added. (required)
     * @return ApiResponse&lt;Conversation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Gets the conversation object to which the participants were added. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request cannot be fulfilled due to bad syntax: &lt;ul&gt;&lt;li&gt;the userIds passed as parameter are not provided in the correct format&lt;/li&gt;&lt;li&gt; or an valid email address&lt;/li&gt;&lt;li&gt;or one or more of the user do not exist&lt;/li&gt;&lt;li&gt;the conversation does not exist&lt;/li&gt;&lt;li&gt;the conversation is not of type COMMUNITY&lt;/li&gt;&lt;li&gt;a field constraint is violated&lt;/li&gt;&lt;/ul&gt; </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Conversation> addParticipantCommunityWithHttpInfo(String convId, List<String> participants) throws ApiException {
        okhttp3.Call localVarCall = addParticipantCommunityValidateBeforeCall(convId, participants, null);
        Type localVarReturnType = new TypeToken<Conversation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Adds participants to a community (asynchronously)
     * Adds one or more participants to the given community. This operation can only be performed by a user who is already a member of the community. OauthScopes: WRITE_CONVERSATIONS, MANAGE_CONVERSATIONS
     * @param convId The ID of the conversation to which the participant has to be added. (required)
     * @param participants The IDs or the unique email addresses of the Circuit users that should to be added. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Gets the conversation object to which the participants were added. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request cannot be fulfilled due to bad syntax: &lt;ul&gt;&lt;li&gt;the userIds passed as parameter are not provided in the correct format&lt;/li&gt;&lt;li&gt; or an valid email address&lt;/li&gt;&lt;li&gt;or one or more of the user do not exist&lt;/li&gt;&lt;li&gt;the conversation does not exist&lt;/li&gt;&lt;li&gt;the conversation is not of type COMMUNITY&lt;/li&gt;&lt;li&gt;a field constraint is violated&lt;/li&gt;&lt;/ul&gt; </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addParticipantCommunityAsync(String convId, List<String> participants, final ApiCallback<Conversation> _callback) throws ApiException {

        okhttp3.Call localVarCall = addParticipantCommunityValidateBeforeCall(convId, participants, _callback);
        Type localVarReturnType = new TypeToken<Conversation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for addParticipantGroup
     * @param convId The ID of the conversation to which the participant has to be added. (required)
     * @param participants The IDs or the unique email addresses of the Circuit users that should to be added. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Gets the conversation object to which the participants were added. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request cannot be fulfilled due to bad syntax: &lt;ul&gt;&lt;li&gt;the userIds passed as parameter are not provided in the correct format&lt;/li&gt;&lt;li&gt; or an valid email address&lt;/li&gt;&lt;li&gt;or one or more of the user do not exist&lt;/li&gt;&lt;li&gt;the conversation does not exist&lt;/li&gt;&lt;li&gt;the conversation is not of type GROUP&lt;/li&gt;&lt;li&gt;a field constraint is violated&lt;/li&gt;&lt;/ul&gt; </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addParticipantGroupCall(String convId, List<String> participants, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/conversations/group/{convId}/participants"
            .replace("{" + "convId" + "}", localVarApiClient.escapeString(convId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (participants != null) {
            localVarFormParams.put("participants", participants);
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addParticipantGroupValidateBeforeCall(String convId, List<String> participants, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'convId' is set
        if (convId == null) {
            throw new ApiException("Missing the required parameter 'convId' when calling addParticipantGroup(Async)");
        }

        // verify the required parameter 'participants' is set
        if (participants == null) {
            throw new ApiException("Missing the required parameter 'participants' when calling addParticipantGroup(Async)");
        }

        return addParticipantGroupCall(convId, participants, _callback);

    }

    /**
     * Adds participants to a group conversation
     * Adds one or more participants to the given group conversation. This operation can only be performed by a user who is already a member of the conversation. OauthScopes: WRITE_CONVERSATIONS, MANAGE_CONVERSATIONS
     * @param convId The ID of the conversation to which the participant has to be added. (required)
     * @param participants The IDs or the unique email addresses of the Circuit users that should to be added. (required)
     * @return Conversation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Gets the conversation object to which the participants were added. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request cannot be fulfilled due to bad syntax: &lt;ul&gt;&lt;li&gt;the userIds passed as parameter are not provided in the correct format&lt;/li&gt;&lt;li&gt; or an valid email address&lt;/li&gt;&lt;li&gt;or one or more of the user do not exist&lt;/li&gt;&lt;li&gt;the conversation does not exist&lt;/li&gt;&lt;li&gt;the conversation is not of type GROUP&lt;/li&gt;&lt;li&gt;a field constraint is violated&lt;/li&gt;&lt;/ul&gt; </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public Conversation addParticipantGroup(String convId, List<String> participants) throws ApiException {
        ApiResponse<Conversation> localVarResp = addParticipantGroupWithHttpInfo(convId, participants);
        return localVarResp.getData();
    }

    /**
     * Adds participants to a group conversation
     * Adds one or more participants to the given group conversation. This operation can only be performed by a user who is already a member of the conversation. OauthScopes: WRITE_CONVERSATIONS, MANAGE_CONVERSATIONS
     * @param convId The ID of the conversation to which the participant has to be added. (required)
     * @param participants The IDs or the unique email addresses of the Circuit users that should to be added. (required)
     * @return ApiResponse&lt;Conversation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Gets the conversation object to which the participants were added. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request cannot be fulfilled due to bad syntax: &lt;ul&gt;&lt;li&gt;the userIds passed as parameter are not provided in the correct format&lt;/li&gt;&lt;li&gt; or an valid email address&lt;/li&gt;&lt;li&gt;or one or more of the user do not exist&lt;/li&gt;&lt;li&gt;the conversation does not exist&lt;/li&gt;&lt;li&gt;the conversation is not of type GROUP&lt;/li&gt;&lt;li&gt;a field constraint is violated&lt;/li&gt;&lt;/ul&gt; </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Conversation> addParticipantGroupWithHttpInfo(String convId, List<String> participants) throws ApiException {
        okhttp3.Call localVarCall = addParticipantGroupValidateBeforeCall(convId, participants, null);
        Type localVarReturnType = new TypeToken<Conversation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Adds participants to a group conversation (asynchronously)
     * Adds one or more participants to the given group conversation. This operation can only be performed by a user who is already a member of the conversation. OauthScopes: WRITE_CONVERSATIONS, MANAGE_CONVERSATIONS
     * @param convId The ID of the conversation to which the participant has to be added. (required)
     * @param participants The IDs or the unique email addresses of the Circuit users that should to be added. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Gets the conversation object to which the participants were added. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request cannot be fulfilled due to bad syntax: &lt;ul&gt;&lt;li&gt;the userIds passed as parameter are not provided in the correct format&lt;/li&gt;&lt;li&gt; or an valid email address&lt;/li&gt;&lt;li&gt;or one or more of the user do not exist&lt;/li&gt;&lt;li&gt;the conversation does not exist&lt;/li&gt;&lt;li&gt;the conversation is not of type GROUP&lt;/li&gt;&lt;li&gt;a field constraint is violated&lt;/li&gt;&lt;/ul&gt; </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addParticipantGroupAsync(String convId, List<String> participants, final ApiCallback<Conversation> _callback) throws ApiException {

        okhttp3.Call localVarCall = addParticipantGroupValidateBeforeCall(convId, participants, _callback);
        Type localVarReturnType = new TypeToken<Conversation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for addTextItem
     * @param convId The ID of the conversation to which the new item has to be added (required)
     * @param attachments A comma separated list of attachment IDs from the file API. (optional)
     * @param content The actual content of the item, is mandatory unless an attachment is added (optional)
     * @param formMetaData The form meta data of the new text item (optional)
     * @param subject The subject (headline) of the new text item (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Gets the new text item object </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request cannot be fulfilled due to bad syntax: &lt;ul&gt;&lt;li&gt;the conversation does not exist&lt;/li&gt;&lt;li&gt;the user is no participant of the conversation&lt;/li&gt;&lt;li&gt;a field constraint is violated&lt;/li&gt;&lt;/ul&gt; </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addTextItemCall(String convId, List<String> attachments, String content, String formMetaData, String subject, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/conversations/{convId}/messages"
            .replace("{" + "convId" + "}", localVarApiClient.escapeString(convId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (attachments != null) {
            localVarFormParams.put("attachments", attachments);
        }

        if (content != null) {
            localVarFormParams.put("content", content);
        }

        if (formMetaData != null) {
            localVarFormParams.put("formMetaData", formMetaData);
        }

        if (subject != null) {
            localVarFormParams.put("subject", subject);
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addTextItemValidateBeforeCall(String convId, List<String> attachments, String content, String formMetaData, String subject, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'convId' is set
        if (convId == null) {
            throw new ApiException("Missing the required parameter 'convId' when calling addTextItem(Async)");
        }

        return addTextItemCall(convId, attachments, content, formMetaData, subject, _callback);

    }

    /**
     * Adds a message to a conversation
     * Adds a message to the given conversation. This operation can be only performed on behalf of a user who is already a member of the conversation. OauthScopes: WRITE_CONVERSATIONS, CREATE_CONVERSATIONS_CONTENT
     * @param convId The ID of the conversation to which the new item has to be added (required)
     * @param attachments A comma separated list of attachment IDs from the file API. (optional)
     * @param content The actual content of the item, is mandatory unless an attachment is added (optional)
     * @param formMetaData The form meta data of the new text item (optional)
     * @param subject The subject (headline) of the new text item (optional)
     * @return ConversationItem
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Gets the new text item object </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request cannot be fulfilled due to bad syntax: &lt;ul&gt;&lt;li&gt;the conversation does not exist&lt;/li&gt;&lt;li&gt;the user is no participant of the conversation&lt;/li&gt;&lt;li&gt;a field constraint is violated&lt;/li&gt;&lt;/ul&gt; </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public ConversationItem addTextItem(String convId, List<String> attachments, String content, String formMetaData, String subject) throws ApiException {
        ApiResponse<ConversationItem> localVarResp = addTextItemWithHttpInfo(convId, attachments, content, formMetaData, subject);
        return localVarResp.getData();
    }

    /**
     * Adds a message to a conversation
     * Adds a message to the given conversation. This operation can be only performed on behalf of a user who is already a member of the conversation. OauthScopes: WRITE_CONVERSATIONS, CREATE_CONVERSATIONS_CONTENT
     * @param convId The ID of the conversation to which the new item has to be added (required)
     * @param attachments A comma separated list of attachment IDs from the file API. (optional)
     * @param content The actual content of the item, is mandatory unless an attachment is added (optional)
     * @param formMetaData The form meta data of the new text item (optional)
     * @param subject The subject (headline) of the new text item (optional)
     * @return ApiResponse&lt;ConversationItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Gets the new text item object </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request cannot be fulfilled due to bad syntax: &lt;ul&gt;&lt;li&gt;the conversation does not exist&lt;/li&gt;&lt;li&gt;the user is no participant of the conversation&lt;/li&gt;&lt;li&gt;a field constraint is violated&lt;/li&gt;&lt;/ul&gt; </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConversationItem> addTextItemWithHttpInfo(String convId, List<String> attachments, String content, String formMetaData, String subject) throws ApiException {
        okhttp3.Call localVarCall = addTextItemValidateBeforeCall(convId, attachments, content, formMetaData, subject, null);
        Type localVarReturnType = new TypeToken<ConversationItem>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Adds a message to a conversation (asynchronously)
     * Adds a message to the given conversation. This operation can be only performed on behalf of a user who is already a member of the conversation. OauthScopes: WRITE_CONVERSATIONS, CREATE_CONVERSATIONS_CONTENT
     * @param convId The ID of the conversation to which the new item has to be added (required)
     * @param attachments A comma separated list of attachment IDs from the file API. (optional)
     * @param content The actual content of the item, is mandatory unless an attachment is added (optional)
     * @param formMetaData The form meta data of the new text item (optional)
     * @param subject The subject (headline) of the new text item (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Gets the new text item object </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request cannot be fulfilled due to bad syntax: &lt;ul&gt;&lt;li&gt;the conversation does not exist&lt;/li&gt;&lt;li&gt;the user is no participant of the conversation&lt;/li&gt;&lt;li&gt;a field constraint is violated&lt;/li&gt;&lt;/ul&gt; </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addTextItemAsync(String convId, List<String> attachments, String content, String formMetaData, String subject, final ApiCallback<ConversationItem> _callback) throws ApiException {

        okhttp3.Call localVarCall = addTextItemValidateBeforeCall(convId, attachments, content, formMetaData, subject, _callback);
        Type localVarReturnType = new TypeToken<ConversationItem>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for addTextItemWithParent
     * @param convId The ID of the conversation to which the new item has to be added (required)
     * @param itemId The ID of the item to which the new one has to be added as child (required)
     * @param attachments A comma separated list of attachment IDs from the file API. (optional)
     * @param content The actual content of the item (optional)
     * @param formMetaData The form meta data of the new text item (optional)
     * @param subject The subject (headline) of the new text item (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Gets the new text item object </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request cannot be fulfilled due to bad syntax: &lt;ul&gt;&lt;li&gt;the conversation does not exist&lt;/li&gt;&lt;li&gt;the parent item does not exist&lt;/li&gt;&lt;li&gt;the user is no participant of the conversation&lt;/li&gt;&lt;li&gt;a field constraint is violated&lt;/li&gt;&lt;/ul&gt; </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addTextItemWithParentCall(String convId, String itemId, List<String> attachments, String content, String formMetaData, String subject, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/conversations/{convId}/messages/{itemId}"
            .replace("{" + "convId" + "}", localVarApiClient.escapeString(convId.toString()))
            .replace("{" + "itemId" + "}", localVarApiClient.escapeString(itemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (attachments != null) {
            localVarFormParams.put("attachments", attachments);
        }

        if (content != null) {
            localVarFormParams.put("content", content);
        }

        if (formMetaData != null) {
            localVarFormParams.put("formMetaData", formMetaData);
        }

        if (subject != null) {
            localVarFormParams.put("subject", subject);
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addTextItemWithParentValidateBeforeCall(String convId, String itemId, List<String> attachments, String content, String formMetaData, String subject, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'convId' is set
        if (convId == null) {
            throw new ApiException("Missing the required parameter 'convId' when calling addTextItemWithParent(Async)");
        }

        // verify the required parameter 'itemId' is set
        if (itemId == null) {
            throw new ApiException("Missing the required parameter 'itemId' when calling addTextItemWithParent(Async)");
        }

        return addTextItemWithParentCall(convId, itemId, attachments, content, formMetaData, subject, _callback);

    }

    /**
     * Adds a message to an item
     * Adds a message to the existing item. The added message will be a child item of the message with the given itemId. OauthScopes: WRITE_CONVERSATIONS
     * @param convId The ID of the conversation to which the new item has to be added (required)
     * @param itemId The ID of the item to which the new one has to be added as child (required)
     * @param attachments A comma separated list of attachment IDs from the file API. (optional)
     * @param content The actual content of the item (optional)
     * @param formMetaData The form meta data of the new text item (optional)
     * @param subject The subject (headline) of the new text item (optional)
     * @return ConversationItem
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Gets the new text item object </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request cannot be fulfilled due to bad syntax: &lt;ul&gt;&lt;li&gt;the conversation does not exist&lt;/li&gt;&lt;li&gt;the parent item does not exist&lt;/li&gt;&lt;li&gt;the user is no participant of the conversation&lt;/li&gt;&lt;li&gt;a field constraint is violated&lt;/li&gt;&lt;/ul&gt; </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public ConversationItem addTextItemWithParent(String convId, String itemId, List<String> attachments, String content, String formMetaData, String subject) throws ApiException {
        ApiResponse<ConversationItem> localVarResp = addTextItemWithParentWithHttpInfo(convId, itemId, attachments, content, formMetaData, subject);
        return localVarResp.getData();
    }

    /**
     * Adds a message to an item
     * Adds a message to the existing item. The added message will be a child item of the message with the given itemId. OauthScopes: WRITE_CONVERSATIONS
     * @param convId The ID of the conversation to which the new item has to be added (required)
     * @param itemId The ID of the item to which the new one has to be added as child (required)
     * @param attachments A comma separated list of attachment IDs from the file API. (optional)
     * @param content The actual content of the item (optional)
     * @param formMetaData The form meta data of the new text item (optional)
     * @param subject The subject (headline) of the new text item (optional)
     * @return ApiResponse&lt;ConversationItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Gets the new text item object </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request cannot be fulfilled due to bad syntax: &lt;ul&gt;&lt;li&gt;the conversation does not exist&lt;/li&gt;&lt;li&gt;the parent item does not exist&lt;/li&gt;&lt;li&gt;the user is no participant of the conversation&lt;/li&gt;&lt;li&gt;a field constraint is violated&lt;/li&gt;&lt;/ul&gt; </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConversationItem> addTextItemWithParentWithHttpInfo(String convId, String itemId, List<String> attachments, String content, String formMetaData, String subject) throws ApiException {
        okhttp3.Call localVarCall = addTextItemWithParentValidateBeforeCall(convId, itemId, attachments, content, formMetaData, subject, null);
        Type localVarReturnType = new TypeToken<ConversationItem>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Adds a message to an item (asynchronously)
     * Adds a message to the existing item. The added message will be a child item of the message with the given itemId. OauthScopes: WRITE_CONVERSATIONS
     * @param convId The ID of the conversation to which the new item has to be added (required)
     * @param itemId The ID of the item to which the new one has to be added as child (required)
     * @param attachments A comma separated list of attachment IDs from the file API. (optional)
     * @param content The actual content of the item (optional)
     * @param formMetaData The form meta data of the new text item (optional)
     * @param subject The subject (headline) of the new text item (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Gets the new text item object </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request cannot be fulfilled due to bad syntax: &lt;ul&gt;&lt;li&gt;the conversation does not exist&lt;/li&gt;&lt;li&gt;the parent item does not exist&lt;/li&gt;&lt;li&gt;the user is no participant of the conversation&lt;/li&gt;&lt;li&gt;a field constraint is violated&lt;/li&gt;&lt;/ul&gt; </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addTextItemWithParentAsync(String convId, String itemId, List<String> attachments, String content, String formMetaData, String subject, final ApiCallback<ConversationItem> _callback) throws ApiException {

        okhttp3.Call localVarCall = addTextItemWithParentValidateBeforeCall(convId, itemId, attachments, content, formMetaData, subject, _callback);
        Type localVarReturnType = new TypeToken<ConversationItem>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for archiveConversation
     * @param convId The ID of the conversation which will be archived (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The conversation was successfully archived </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request cannot be fulfilled due to bad syntax: &lt;ul&gt;&lt;li&gt;the conversation does not exist&lt;/li&gt;&lt;li&gt;the user is no participant of the conversation&lt;/li&gt;&lt;li&gt;a field constraint is violated&lt;/li&gt;&lt;/ul&gt; </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call archiveConversationCall(String convId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/conversations/{convId}/archive"
            .replace("{" + "convId" + "}", localVarApiClient.escapeString(convId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call archiveConversationValidateBeforeCall(String convId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'convId' is set
        if (convId == null) {
            throw new ApiException("Missing the required parameter 'convId' when calling archiveConversation(Async)");
        }

        return archiveConversationCall(convId, _callback);

    }

    /**
     * Archives conversation
     * Archives a conversation by muting it OauthScopes: WRITE_CONVERSATIONS
     * @param convId The ID of the conversation which will be archived (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The conversation was successfully archived </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request cannot be fulfilled due to bad syntax: &lt;ul&gt;&lt;li&gt;the conversation does not exist&lt;/li&gt;&lt;li&gt;the user is no participant of the conversation&lt;/li&gt;&lt;li&gt;a field constraint is violated&lt;/li&gt;&lt;/ul&gt; </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public void archiveConversation(String convId) throws ApiException {
        archiveConversationWithHttpInfo(convId);
    }

    /**
     * Archives conversation
     * Archives a conversation by muting it OauthScopes: WRITE_CONVERSATIONS
     * @param convId The ID of the conversation which will be archived (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The conversation was successfully archived </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request cannot be fulfilled due to bad syntax: &lt;ul&gt;&lt;li&gt;the conversation does not exist&lt;/li&gt;&lt;li&gt;the user is no participant of the conversation&lt;/li&gt;&lt;li&gt;a field constraint is violated&lt;/li&gt;&lt;/ul&gt; </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> archiveConversationWithHttpInfo(String convId) throws ApiException {
        okhttp3.Call localVarCall = archiveConversationValidateBeforeCall(convId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Archives conversation (asynchronously)
     * Archives a conversation by muting it OauthScopes: WRITE_CONVERSATIONS
     * @param convId The ID of the conversation which will be archived (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The conversation was successfully archived </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request cannot be fulfilled due to bad syntax: &lt;ul&gt;&lt;li&gt;the conversation does not exist&lt;/li&gt;&lt;li&gt;the user is no participant of the conversation&lt;/li&gt;&lt;li&gt;a field constraint is violated&lt;/li&gt;&lt;/ul&gt; </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call archiveConversationAsync(String convId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = archiveConversationValidateBeforeCall(convId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for assignLabel
     * @param convId The ID of the conversation to which the label is added (required)
     * @param label The actual label  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The label was successfully added </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request cannot be fulfilled due to bad syntax: &lt;ul&gt;&lt;li&gt;a field constraint is violated&lt;/li&gt;&lt;li&gt;you reached the maximum of 250 labels&lt;/li&gt;&lt;/ul&gt; </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call assignLabelCall(String convId, String label, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/conversations/{convId}/label"
            .replace("{" + "convId" + "}", localVarApiClient.escapeString(convId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (label != null) {
            localVarFormParams.put("label", label);
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call assignLabelValidateBeforeCall(String convId, String label, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'convId' is set
        if (convId == null) {
            throw new ApiException("Missing the required parameter 'convId' when calling assignLabel(Async)");
        }

        // verify the required parameter 'label' is set
        if (label == null) {
            throw new ApiException("Missing the required parameter 'label' when calling assignLabel(Async)");
        }

        return assignLabelCall(convId, label, _callback);

    }

    /**
     * Adds a label to a conversation
     * Adds a label to a conversation, you can search and organize your conversations based on these labels OauthScopes: WRITE_CONVERSATIONS, ORGANIZE_CONVERSATIONS
     * @param convId The ID of the conversation to which the label is added (required)
     * @param label The actual label  (required)
     * @return Label
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The label was successfully added </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request cannot be fulfilled due to bad syntax: &lt;ul&gt;&lt;li&gt;a field constraint is violated&lt;/li&gt;&lt;li&gt;you reached the maximum of 250 labels&lt;/li&gt;&lt;/ul&gt; </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public Label assignLabel(String convId, String label) throws ApiException {
        ApiResponse<Label> localVarResp = assignLabelWithHttpInfo(convId, label);
        return localVarResp.getData();
    }

    /**
     * Adds a label to a conversation
     * Adds a label to a conversation, you can search and organize your conversations based on these labels OauthScopes: WRITE_CONVERSATIONS, ORGANIZE_CONVERSATIONS
     * @param convId The ID of the conversation to which the label is added (required)
     * @param label The actual label  (required)
     * @return ApiResponse&lt;Label&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The label was successfully added </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request cannot be fulfilled due to bad syntax: &lt;ul&gt;&lt;li&gt;a field constraint is violated&lt;/li&gt;&lt;li&gt;you reached the maximum of 250 labels&lt;/li&gt;&lt;/ul&gt; </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Label> assignLabelWithHttpInfo(String convId, String label) throws ApiException {
        okhttp3.Call localVarCall = assignLabelValidateBeforeCall(convId, label, null);
        Type localVarReturnType = new TypeToken<Label>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Adds a label to a conversation (asynchronously)
     * Adds a label to a conversation, you can search and organize your conversations based on these labels OauthScopes: WRITE_CONVERSATIONS, ORGANIZE_CONVERSATIONS
     * @param convId The ID of the conversation to which the label is added (required)
     * @param label The actual label  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The label was successfully added </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request cannot be fulfilled due to bad syntax: &lt;ul&gt;&lt;li&gt;a field constraint is violated&lt;/li&gt;&lt;li&gt;you reached the maximum of 250 labels&lt;/li&gt;&lt;/ul&gt; </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call assignLabelAsync(String convId, String label, final ApiCallback<Label> _callback) throws ApiException {

        okhttp3.Call localVarCall = assignLabelValidateBeforeCall(convId, label, _callback);
        Type localVarReturnType = new TypeToken<Label>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createCommunityConversation
     * @param topic An optional topic of the conversation. If not set the Circuit client will render the names of the participants as topic of the conversation (the first 4 names will be used) (required)
     * @param description An optional description for the community conversation (optional)
     * @param participants list of participants that will be part of this conversation, specified by the Circuit user ID or the unique email address. At least one participant needs to be added (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The conversation was created successfully and can be accessed via the conversation ID </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request cannot be fulfilled due to bad syntax: &lt;ul&gt;&lt;li&gt;the userIds passed as parameter are not provided in the correct format&lt;/li&gt;&lt;li&gt; or an valid email address&lt;/li&gt;&lt;li&gt;or one or more of the user do not exist&lt;/li&gt;&lt;li&gt;a field constraint is violated&lt;/li&gt;&lt;/ul&gt; </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createCommunityConversationCall(String topic, String description, List<String> participants, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/conversations/community";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (description != null) {
            localVarFormParams.put("description", description);
        }

        if (participants != null) {
            localVarFormParams.put("participants", participants);
        }

        if (topic != null) {
            localVarFormParams.put("topic", topic);
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createCommunityConversationValidateBeforeCall(String topic, String description, List<String> participants, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'topic' is set
        if (topic == null) {
            throw new ApiException("Missing the required parameter 'topic' when calling createCommunityConversation(Async)");
        }

        return createCommunityConversationCall(topic, description, participants, _callback);

    }

    /**
     * Creates a community conversation
     * Creates a community. Communities are open conversations that anyone in a Circuit domain (tenant) can join without having to be added by another user. OauthScopes: WRITE_CONVERSATIONS, MANAGE_CONVERSATIONS
     * @param topic An optional topic of the conversation. If not set the Circuit client will render the names of the participants as topic of the conversation (the first 4 names will be used) (required)
     * @param description An optional description for the community conversation (optional)
     * @param participants list of participants that will be part of this conversation, specified by the Circuit user ID or the unique email address. At least one participant needs to be added (optional)
     * @return Conversation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The conversation was created successfully and can be accessed via the conversation ID </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request cannot be fulfilled due to bad syntax: &lt;ul&gt;&lt;li&gt;the userIds passed as parameter are not provided in the correct format&lt;/li&gt;&lt;li&gt; or an valid email address&lt;/li&gt;&lt;li&gt;or one or more of the user do not exist&lt;/li&gt;&lt;li&gt;a field constraint is violated&lt;/li&gt;&lt;/ul&gt; </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public Conversation createCommunityConversation(String topic, String description, List<String> participants) throws ApiException {
        ApiResponse<Conversation> localVarResp = createCommunityConversationWithHttpInfo(topic, description, participants);
        return localVarResp.getData();
    }

    /**
     * Creates a community conversation
     * Creates a community. Communities are open conversations that anyone in a Circuit domain (tenant) can join without having to be added by another user. OauthScopes: WRITE_CONVERSATIONS, MANAGE_CONVERSATIONS
     * @param topic An optional topic of the conversation. If not set the Circuit client will render the names of the participants as topic of the conversation (the first 4 names will be used) (required)
     * @param description An optional description for the community conversation (optional)
     * @param participants list of participants that will be part of this conversation, specified by the Circuit user ID or the unique email address. At least one participant needs to be added (optional)
     * @return ApiResponse&lt;Conversation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The conversation was created successfully and can be accessed via the conversation ID </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request cannot be fulfilled due to bad syntax: &lt;ul&gt;&lt;li&gt;the userIds passed as parameter are not provided in the correct format&lt;/li&gt;&lt;li&gt; or an valid email address&lt;/li&gt;&lt;li&gt;or one or more of the user do not exist&lt;/li&gt;&lt;li&gt;a field constraint is violated&lt;/li&gt;&lt;/ul&gt; </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Conversation> createCommunityConversationWithHttpInfo(String topic, String description, List<String> participants) throws ApiException {
        okhttp3.Call localVarCall = createCommunityConversationValidateBeforeCall(topic, description, participants, null);
        Type localVarReturnType = new TypeToken<Conversation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates a community conversation (asynchronously)
     * Creates a community. Communities are open conversations that anyone in a Circuit domain (tenant) can join without having to be added by another user. OauthScopes: WRITE_CONVERSATIONS, MANAGE_CONVERSATIONS
     * @param topic An optional topic of the conversation. If not set the Circuit client will render the names of the participants as topic of the conversation (the first 4 names will be used) (required)
     * @param description An optional description for the community conversation (optional)
     * @param participants list of participants that will be part of this conversation, specified by the Circuit user ID or the unique email address. At least one participant needs to be added (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The conversation was created successfully and can be accessed via the conversation ID </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request cannot be fulfilled due to bad syntax: &lt;ul&gt;&lt;li&gt;the userIds passed as parameter are not provided in the correct format&lt;/li&gt;&lt;li&gt; or an valid email address&lt;/li&gt;&lt;li&gt;or one or more of the user do not exist&lt;/li&gt;&lt;li&gt;a field constraint is violated&lt;/li&gt;&lt;/ul&gt; </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createCommunityConversationAsync(String topic, String description, List<String> participants, final ApiCallback<Conversation> _callback) throws ApiException {

        okhttp3.Call localVarCall = createCommunityConversationValidateBeforeCall(topic, description, participants, _callback);
        Type localVarReturnType = new TypeToken<Conversation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createDirectConversation
     * @param participant The participant that will be part of this conversation together with the creator, specified by the Circuit user ID or the unique email address (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The conversation was created successfully and can be accessed via the conversation ID </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request cannot be fulfilled due to bad syntax: &lt;ul&gt;&lt;li&gt;the data format of the passed user does not match either a UUID (user primary key)&lt;/li&gt;&lt;li&gt; or an valid email address&lt;/li&gt;&lt;li&gt;or the user does not exist&lt;/li&gt;&lt;li&gt;or the user is the same who initiates the request&lt;/li&gt;&lt;/ul&gt; </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> A conversation already exists. The response contains this conversation. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createDirectConversationCall(String participant, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/conversations/direct";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (participant != null) {
            localVarFormParams.put("participant", participant);
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createDirectConversationValidateBeforeCall(String participant, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'participant' is set
        if (participant == null) {
            throw new ApiException("Missing the required parameter 'participant' when calling createDirectConversation(Async)");
        }

        return createDirectConversationCall(participant, _callback);

    }

    /**
     * Creates a 1-to-1 conversation
     * Creates a 1-to-1 conversation between the authenticated user and the user with the provided userId. In case there is already an existing 1-to-1 conversation between these users, the endpoint returns the existing conversation. OauthScopes: WRITE_CONVERSATIONS, MANAGE_CONVERSATIONS
     * @param participant The participant that will be part of this conversation together with the creator, specified by the Circuit user ID or the unique email address (required)
     * @return Conversation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The conversation was created successfully and can be accessed via the conversation ID </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request cannot be fulfilled due to bad syntax: &lt;ul&gt;&lt;li&gt;the data format of the passed user does not match either a UUID (user primary key)&lt;/li&gt;&lt;li&gt; or an valid email address&lt;/li&gt;&lt;li&gt;or the user does not exist&lt;/li&gt;&lt;li&gt;or the user is the same who initiates the request&lt;/li&gt;&lt;/ul&gt; </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> A conversation already exists. The response contains this conversation. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public Conversation createDirectConversation(String participant) throws ApiException {
        ApiResponse<Conversation> localVarResp = createDirectConversationWithHttpInfo(participant);
        return localVarResp.getData();
    }

    /**
     * Creates a 1-to-1 conversation
     * Creates a 1-to-1 conversation between the authenticated user and the user with the provided userId. In case there is already an existing 1-to-1 conversation between these users, the endpoint returns the existing conversation. OauthScopes: WRITE_CONVERSATIONS, MANAGE_CONVERSATIONS
     * @param participant The participant that will be part of this conversation together with the creator, specified by the Circuit user ID or the unique email address (required)
     * @return ApiResponse&lt;Conversation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The conversation was created successfully and can be accessed via the conversation ID </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request cannot be fulfilled due to bad syntax: &lt;ul&gt;&lt;li&gt;the data format of the passed user does not match either a UUID (user primary key)&lt;/li&gt;&lt;li&gt; or an valid email address&lt;/li&gt;&lt;li&gt;or the user does not exist&lt;/li&gt;&lt;li&gt;or the user is the same who initiates the request&lt;/li&gt;&lt;/ul&gt; </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> A conversation already exists. The response contains this conversation. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Conversation> createDirectConversationWithHttpInfo(String participant) throws ApiException {
        okhttp3.Call localVarCall = createDirectConversationValidateBeforeCall(participant, null);
        Type localVarReturnType = new TypeToken<Conversation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates a 1-to-1 conversation (asynchronously)
     * Creates a 1-to-1 conversation between the authenticated user and the user with the provided userId. In case there is already an existing 1-to-1 conversation between these users, the endpoint returns the existing conversation. OauthScopes: WRITE_CONVERSATIONS, MANAGE_CONVERSATIONS
     * @param participant The participant that will be part of this conversation together with the creator, specified by the Circuit user ID or the unique email address (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The conversation was created successfully and can be accessed via the conversation ID </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request cannot be fulfilled due to bad syntax: &lt;ul&gt;&lt;li&gt;the data format of the passed user does not match either a UUID (user primary key)&lt;/li&gt;&lt;li&gt; or an valid email address&lt;/li&gt;&lt;li&gt;or the user does not exist&lt;/li&gt;&lt;li&gt;or the user is the same who initiates the request&lt;/li&gt;&lt;/ul&gt; </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> A conversation already exists. The response contains this conversation. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createDirectConversationAsync(String participant, final ApiCallback<Conversation> _callback) throws ApiException {

        okhttp3.Call localVarCall = createDirectConversationValidateBeforeCall(participant, _callback);
        Type localVarReturnType = new TypeToken<Conversation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createGroupConversation
     * @param participants A list of participants that will be part of this conversation, specified by the Circuit user ID or the unique email address. At least one participant needs to be added (required)
     * @param topic An optional topic of the conversation. If not set the Circuit client will render the names of the participants as topic of the conversation (the first 4 names will be used) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The conversation was created successfully and can be accessed via the conversation ID </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request cannot be fulfilled due to bad syntax: &lt;ul&gt;&lt;li&gt;the userIds passed as parameter are not provided in the correct format&lt;/li&gt;&lt;li&gt; or an valid email address&lt;/li&gt;&lt;li&gt;or one or more of the user do not exist&lt;/li&gt;&lt;li&gt;a field constraint is violated&lt;/li&gt;&lt;/ul&gt; </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createGroupConversationCall(List<String> participants, String topic, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/conversations/group";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (participants != null) {
            localVarFormParams.put("participants", participants);
        }

        if (topic != null) {
            localVarFormParams.put("topic", topic);
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createGroupConversationValidateBeforeCall(List<String> participants, String topic, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'participants' is set
        if (participants == null) {
            throw new ApiException("Missing the required parameter 'participants' when calling createGroupConversation(Async)");
        }

        return createGroupConversationCall(participants, topic, _callback);

    }

    /**
     * Creates a group conversation
     * Creates a group conversation between three or more users. The authenticated user is directly added to this conversation. OauthScopes: WRITE_CONVERSATIONS, MANAGE_CONVERSATIONS
     * @param participants A list of participants that will be part of this conversation, specified by the Circuit user ID or the unique email address. At least one participant needs to be added (required)
     * @param topic An optional topic of the conversation. If not set the Circuit client will render the names of the participants as topic of the conversation (the first 4 names will be used) (optional)
     * @return Conversation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The conversation was created successfully and can be accessed via the conversation ID </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request cannot be fulfilled due to bad syntax: &lt;ul&gt;&lt;li&gt;the userIds passed as parameter are not provided in the correct format&lt;/li&gt;&lt;li&gt; or an valid email address&lt;/li&gt;&lt;li&gt;or one or more of the user do not exist&lt;/li&gt;&lt;li&gt;a field constraint is violated&lt;/li&gt;&lt;/ul&gt; </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public Conversation createGroupConversation(List<String> participants, String topic) throws ApiException {
        ApiResponse<Conversation> localVarResp = createGroupConversationWithHttpInfo(participants, topic);
        return localVarResp.getData();
    }

    /**
     * Creates a group conversation
     * Creates a group conversation between three or more users. The authenticated user is directly added to this conversation. OauthScopes: WRITE_CONVERSATIONS, MANAGE_CONVERSATIONS
     * @param participants A list of participants that will be part of this conversation, specified by the Circuit user ID or the unique email address. At least one participant needs to be added (required)
     * @param topic An optional topic of the conversation. If not set the Circuit client will render the names of the participants as topic of the conversation (the first 4 names will be used) (optional)
     * @return ApiResponse&lt;Conversation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The conversation was created successfully and can be accessed via the conversation ID </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request cannot be fulfilled due to bad syntax: &lt;ul&gt;&lt;li&gt;the userIds passed as parameter are not provided in the correct format&lt;/li&gt;&lt;li&gt; or an valid email address&lt;/li&gt;&lt;li&gt;or one or more of the user do not exist&lt;/li&gt;&lt;li&gt;a field constraint is violated&lt;/li&gt;&lt;/ul&gt; </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Conversation> createGroupConversationWithHttpInfo(List<String> participants, String topic) throws ApiException {
        okhttp3.Call localVarCall = createGroupConversationValidateBeforeCall(participants, topic, null);
        Type localVarReturnType = new TypeToken<Conversation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates a group conversation (asynchronously)
     * Creates a group conversation between three or more users. The authenticated user is directly added to this conversation. OauthScopes: WRITE_CONVERSATIONS, MANAGE_CONVERSATIONS
     * @param participants A list of participants that will be part of this conversation, specified by the Circuit user ID or the unique email address. At least one participant needs to be added (required)
     * @param topic An optional topic of the conversation. If not set the Circuit client will render the names of the participants as topic of the conversation (the first 4 names will be used) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The conversation was created successfully and can be accessed via the conversation ID </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request cannot be fulfilled due to bad syntax: &lt;ul&gt;&lt;li&gt;the userIds passed as parameter are not provided in the correct format&lt;/li&gt;&lt;li&gt; or an valid email address&lt;/li&gt;&lt;li&gt;or one or more of the user do not exist&lt;/li&gt;&lt;li&gt;a field constraint is violated&lt;/li&gt;&lt;/ul&gt; </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createGroupConversationAsync(List<String> participants, String topic, final ApiCallback<Conversation> _callback) throws ApiException {

        okhttp3.Call localVarCall = createGroupConversationValidateBeforeCall(participants, topic, _callback);
        Type localVarReturnType = new TypeToken<Conversation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteFavorite
     * @param convId The ID of the conversation which will be unmarked as favorite (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The conversation was successfully unmarked </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request cannot be fulfilled due to bad syntax: &lt;ul&gt;&lt;li&gt;the conversation does not exist&lt;/li&gt;&lt;li&gt;the user is no participant of the conversation&lt;/li&gt;&lt;li&gt;a field constraint is violated&lt;/li&gt;&lt;li&gt;the conversation was not marked before&lt;/li&gt;&lt;/ul&gt; </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteFavoriteCall(String convId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/conversations/{convId}/favorite"
            .replace("{" + "convId" + "}", localVarApiClient.escapeString(convId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteFavoriteValidateBeforeCall(String convId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'convId' is set
        if (convId == null) {
            throw new ApiException("Missing the required parameter 'convId' when calling deleteFavorite(Async)");
        }

        return deleteFavoriteCall(convId, _callback);

    }

    /**
     * Removes a conversation from favorites
     * Removes a conversation from favorites. Favorites can be displayed in a separate side tab inside of the Circuit client to have a better overview of important conversations. OauthScopes: WRITE_CONVERSATIONS
     * @param convId The ID of the conversation which will be unmarked as favorite (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The conversation was successfully unmarked </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request cannot be fulfilled due to bad syntax: &lt;ul&gt;&lt;li&gt;the conversation does not exist&lt;/li&gt;&lt;li&gt;the user is no participant of the conversation&lt;/li&gt;&lt;li&gt;a field constraint is violated&lt;/li&gt;&lt;li&gt;the conversation was not marked before&lt;/li&gt;&lt;/ul&gt; </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public void deleteFavorite(String convId) throws ApiException {
        deleteFavoriteWithHttpInfo(convId);
    }

    /**
     * Removes a conversation from favorites
     * Removes a conversation from favorites. Favorites can be displayed in a separate side tab inside of the Circuit client to have a better overview of important conversations. OauthScopes: WRITE_CONVERSATIONS
     * @param convId The ID of the conversation which will be unmarked as favorite (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The conversation was successfully unmarked </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request cannot be fulfilled due to bad syntax: &lt;ul&gt;&lt;li&gt;the conversation does not exist&lt;/li&gt;&lt;li&gt;the user is no participant of the conversation&lt;/li&gt;&lt;li&gt;a field constraint is violated&lt;/li&gt;&lt;li&gt;the conversation was not marked before&lt;/li&gt;&lt;/ul&gt; </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteFavoriteWithHttpInfo(String convId) throws ApiException {
        okhttp3.Call localVarCall = deleteFavoriteValidateBeforeCall(convId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Removes a conversation from favorites (asynchronously)
     * Removes a conversation from favorites. Favorites can be displayed in a separate side tab inside of the Circuit client to have a better overview of important conversations. OauthScopes: WRITE_CONVERSATIONS
     * @param convId The ID of the conversation which will be unmarked as favorite (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The conversation was successfully unmarked </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request cannot be fulfilled due to bad syntax: &lt;ul&gt;&lt;li&gt;the conversation does not exist&lt;/li&gt;&lt;li&gt;the user is no participant of the conversation&lt;/li&gt;&lt;li&gt;a field constraint is violated&lt;/li&gt;&lt;li&gt;the conversation was not marked before&lt;/li&gt;&lt;/ul&gt; </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteFavoriteAsync(String convId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteFavoriteValidateBeforeCall(convId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteTextItem
     * @param convId The ID of the conversation to which the item belongs (required)
     * @param itemId The ID of the item that will be deleted (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Gets the deleted text item object </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request cannot be fulfilled due to bad syntax: &lt;ul&gt;&lt;li&gt;the conversation does not exist&lt;/li&gt;&lt;li&gt;the item does not exist&lt;/li&gt;&lt;li&gt;the user is no participant of the conversation&lt;/li&gt;&lt;li&gt;a field constraint is violated&lt;/li&gt;&lt;/ul&gt; </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteTextItemCall(String convId, String itemId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/conversations/{convId}/messages/{itemId}"
            .replace("{" + "convId" + "}", localVarApiClient.escapeString(convId.toString()))
            .replace("{" + "itemId" + "}", localVarApiClient.escapeString(itemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteTextItemValidateBeforeCall(String convId, String itemId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'convId' is set
        if (convId == null) {
            throw new ApiException("Missing the required parameter 'convId' when calling deleteTextItem(Async)");
        }

        // verify the required parameter 'itemId' is set
        if (itemId == null) {
            throw new ApiException("Missing the required parameter 'itemId' when calling deleteTextItem(Async)");
        }

        return deleteTextItemCall(convId, itemId, _callback);

    }

    /**
     * Deletes a message from a conversation
     * Marks a message in the given conversation as deleted. Deleted messages are still part of the conversation, but their content is no more visible. This operation can only be performed on behalf of the message&#39;s creator. OauthScopes: WRITE_CONVERSATIONS, DELETE_CONVERSATIONS_CONTENT
     * @param convId The ID of the conversation to which the item belongs (required)
     * @param itemId The ID of the item that will be deleted (required)
     * @return ConversationItem
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Gets the deleted text item object </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request cannot be fulfilled due to bad syntax: &lt;ul&gt;&lt;li&gt;the conversation does not exist&lt;/li&gt;&lt;li&gt;the item does not exist&lt;/li&gt;&lt;li&gt;the user is no participant of the conversation&lt;/li&gt;&lt;li&gt;a field constraint is violated&lt;/li&gt;&lt;/ul&gt; </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public ConversationItem deleteTextItem(String convId, String itemId) throws ApiException {
        ApiResponse<ConversationItem> localVarResp = deleteTextItemWithHttpInfo(convId, itemId);
        return localVarResp.getData();
    }

    /**
     * Deletes a message from a conversation
     * Marks a message in the given conversation as deleted. Deleted messages are still part of the conversation, but their content is no more visible. This operation can only be performed on behalf of the message&#39;s creator. OauthScopes: WRITE_CONVERSATIONS, DELETE_CONVERSATIONS_CONTENT
     * @param convId The ID of the conversation to which the item belongs (required)
     * @param itemId The ID of the item that will be deleted (required)
     * @return ApiResponse&lt;ConversationItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Gets the deleted text item object </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request cannot be fulfilled due to bad syntax: &lt;ul&gt;&lt;li&gt;the conversation does not exist&lt;/li&gt;&lt;li&gt;the item does not exist&lt;/li&gt;&lt;li&gt;the user is no participant of the conversation&lt;/li&gt;&lt;li&gt;a field constraint is violated&lt;/li&gt;&lt;/ul&gt; </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConversationItem> deleteTextItemWithHttpInfo(String convId, String itemId) throws ApiException {
        okhttp3.Call localVarCall = deleteTextItemValidateBeforeCall(convId, itemId, null);
        Type localVarReturnType = new TypeToken<ConversationItem>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Deletes a message from a conversation (asynchronously)
     * Marks a message in the given conversation as deleted. Deleted messages are still part of the conversation, but their content is no more visible. This operation can only be performed on behalf of the message&#39;s creator. OauthScopes: WRITE_CONVERSATIONS, DELETE_CONVERSATIONS_CONTENT
     * @param convId The ID of the conversation to which the item belongs (required)
     * @param itemId The ID of the item that will be deleted (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Gets the deleted text item object </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request cannot be fulfilled due to bad syntax: &lt;ul&gt;&lt;li&gt;the conversation does not exist&lt;/li&gt;&lt;li&gt;the item does not exist&lt;/li&gt;&lt;li&gt;the user is no participant of the conversation&lt;/li&gt;&lt;li&gt;a field constraint is violated&lt;/li&gt;&lt;/ul&gt; </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteTextItemAsync(String convId, String itemId, final ApiCallback<ConversationItem> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteTextItemValidateBeforeCall(convId, itemId, _callback);
        Type localVarReturnType = new TypeToken<ConversationItem>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for flagItem
     * @param convId The ID of the conversation to which the item belongs (required)
     * @param itemId The ID of the item that will be flagged (required)
     * @param itemCreationTime The time when the item was created (optional)
     * @param parentId The ID of the item&#39;s parent (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The item was successful flagged </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request cannot be fulfilled due to bad syntax: &lt;ul&gt;&lt;li&gt;the conversation does not exist&lt;/li&gt;&lt;li&gt;the item does not exist&lt;/li&gt;&lt;li&gt;the user is no participant of the conversation&lt;/li&gt;&lt;li&gt;a field constraint is violated&lt;/li&gt;&lt;/ul&gt; </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call flagItemCall(String convId, String itemId, String itemCreationTime, String parentId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/conversations/{convId}/messages/{itemId}/flag"
            .replace("{" + "convId" + "}", localVarApiClient.escapeString(convId.toString()))
            .replace("{" + "itemId" + "}", localVarApiClient.escapeString(itemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (itemCreationTime != null) {
            localVarFormParams.put("itemCreationTime", itemCreationTime);
        }

        if (parentId != null) {
            localVarFormParams.put("parentId", parentId);
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call flagItemValidateBeforeCall(String convId, String itemId, String itemCreationTime, String parentId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'convId' is set
        if (convId == null) {
            throw new ApiException("Missing the required parameter 'convId' when calling flagItem(Async)");
        }

        // verify the required parameter 'itemId' is set
        if (itemId == null) {
            throw new ApiException("Missing the required parameter 'itemId' when calling flagItem(Async)");
        }

        return flagItemCall(convId, itemId, itemCreationTime, parentId, _callback);

    }

    /**
     * Adds a flag to a message in a conversation
     * Adds a flag to the given message in the given conversation. OauthScopes: WRITE_CONVERSATIONS, ORGANIZE_CONVERSATIONS
     * @param convId The ID of the conversation to which the item belongs (required)
     * @param itemId The ID of the item that will be flagged (required)
     * @param itemCreationTime The time when the item was created (optional)
     * @param parentId The ID of the item&#39;s parent (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The item was successful flagged </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request cannot be fulfilled due to bad syntax: &lt;ul&gt;&lt;li&gt;the conversation does not exist&lt;/li&gt;&lt;li&gt;the item does not exist&lt;/li&gt;&lt;li&gt;the user is no participant of the conversation&lt;/li&gt;&lt;li&gt;a field constraint is violated&lt;/li&gt;&lt;/ul&gt; </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public void flagItem(String convId, String itemId, String itemCreationTime, String parentId) throws ApiException {
        flagItemWithHttpInfo(convId, itemId, itemCreationTime, parentId);
    }

    /**
     * Adds a flag to a message in a conversation
     * Adds a flag to the given message in the given conversation. OauthScopes: WRITE_CONVERSATIONS, ORGANIZE_CONVERSATIONS
     * @param convId The ID of the conversation to which the item belongs (required)
     * @param itemId The ID of the item that will be flagged (required)
     * @param itemCreationTime The time when the item was created (optional)
     * @param parentId The ID of the item&#39;s parent (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The item was successful flagged </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request cannot be fulfilled due to bad syntax: &lt;ul&gt;&lt;li&gt;the conversation does not exist&lt;/li&gt;&lt;li&gt;the item does not exist&lt;/li&gt;&lt;li&gt;the user is no participant of the conversation&lt;/li&gt;&lt;li&gt;a field constraint is violated&lt;/li&gt;&lt;/ul&gt; </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> flagItemWithHttpInfo(String convId, String itemId, String itemCreationTime, String parentId) throws ApiException {
        okhttp3.Call localVarCall = flagItemValidateBeforeCall(convId, itemId, itemCreationTime, parentId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Adds a flag to a message in a conversation (asynchronously)
     * Adds a flag to the given message in the given conversation. OauthScopes: WRITE_CONVERSATIONS, ORGANIZE_CONVERSATIONS
     * @param convId The ID of the conversation to which the item belongs (required)
     * @param itemId The ID of the item that will be flagged (required)
     * @param itemCreationTime The time when the item was created (optional)
     * @param parentId The ID of the item&#39;s parent (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The item was successful flagged </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request cannot be fulfilled due to bad syntax: &lt;ul&gt;&lt;li&gt;the conversation does not exist&lt;/li&gt;&lt;li&gt;the item does not exist&lt;/li&gt;&lt;li&gt;the user is no participant of the conversation&lt;/li&gt;&lt;li&gt;a field constraint is violated&lt;/li&gt;&lt;/ul&gt; </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call flagItemAsync(String convId, String itemId, String itemCreationTime, String parentId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = flagItemValidateBeforeCall(convId, itemId, itemCreationTime, parentId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCommunityConversations
     * @param sort Defines the type of sorting for the community conversations (default is alphabetical) (optional, default to ALPHABETICALLY)
     * @param order Defines the ordering of the conversations (default is ascending) (optional, default to ASCENDING)
     * @param includeOwn If set to false only conversations are returned where the user is no member of, otherwise all community conversations are returned (optional, default to false)
     * @param startIndex The index of the conversation that is the first one that has to be returned. E.g. if a request starts with startIndex 40 and results 20 the conversations 40 to 60 are returned (optional, default to 0)
     * @param results The maximum number of returned results (default 25). The maximum allowed value is 100. (optional, default to 25)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The matching conversations </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request cannot be fulfilled due to bad syntax: &lt;ul&gt;a field constraint is violated&lt;/ul&gt; </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCommunityConversationsCall(String sort, String order, Boolean includeOwn, BigDecimal startIndex, BigDecimal results, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/conversations/community";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order", order));
        }

        if (includeOwn != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeOwn", includeOwn));
        }

        if (startIndex != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startIndex", startIndex));
        }

        if (results != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("results", results));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCommunityConversationsValidateBeforeCall(String sort, String order, Boolean includeOwn, BigDecimal startIndex, BigDecimal results, final ApiCallback _callback) throws ApiException {
        return getCommunityConversationsCall(sort, order, includeOwn, startIndex, results, _callback);

    }

    /**
     * Gets a list of communities
     * Gets a list of communities. This endpoint can be used to explore the communities the authenticated user could join. OauthScopes: READ_CONVERSATIONS
     * @param sort Defines the type of sorting for the community conversations (default is alphabetical) (optional, default to ALPHABETICALLY)
     * @param order Defines the ordering of the conversations (default is ascending) (optional, default to ASCENDING)
     * @param includeOwn If set to false only conversations are returned where the user is no member of, otherwise all community conversations are returned (optional, default to false)
     * @param startIndex The index of the conversation that is the first one that has to be returned. E.g. if a request starts with startIndex 40 and results 20 the conversations 40 to 60 are returned (optional, default to 0)
     * @param results The maximum number of returned results (default 25). The maximum allowed value is 100. (optional, default to 25)
     * @return List&lt;Conversation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The matching conversations </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request cannot be fulfilled due to bad syntax: &lt;ul&gt;a field constraint is violated&lt;/ul&gt; </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public List<Conversation> getCommunityConversations(String sort, String order, Boolean includeOwn, BigDecimal startIndex, BigDecimal results) throws ApiException {
        ApiResponse<List<Conversation>> localVarResp = getCommunityConversationsWithHttpInfo(sort, order, includeOwn, startIndex, results);
        return localVarResp.getData();
    }

    /**
     * Gets a list of communities
     * Gets a list of communities. This endpoint can be used to explore the communities the authenticated user could join. OauthScopes: READ_CONVERSATIONS
     * @param sort Defines the type of sorting for the community conversations (default is alphabetical) (optional, default to ALPHABETICALLY)
     * @param order Defines the ordering of the conversations (default is ascending) (optional, default to ASCENDING)
     * @param includeOwn If set to false only conversations are returned where the user is no member of, otherwise all community conversations are returned (optional, default to false)
     * @param startIndex The index of the conversation that is the first one that has to be returned. E.g. if a request starts with startIndex 40 and results 20 the conversations 40 to 60 are returned (optional, default to 0)
     * @param results The maximum number of returned results (default 25). The maximum allowed value is 100. (optional, default to 25)
     * @return ApiResponse&lt;List&lt;Conversation&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The matching conversations </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request cannot be fulfilled due to bad syntax: &lt;ul&gt;a field constraint is violated&lt;/ul&gt; </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Conversation>> getCommunityConversationsWithHttpInfo(String sort, String order, Boolean includeOwn, BigDecimal startIndex, BigDecimal results) throws ApiException {
        okhttp3.Call localVarCall = getCommunityConversationsValidateBeforeCall(sort, order, includeOwn, startIndex, results, null);
        Type localVarReturnType = new TypeToken<List<Conversation>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets a list of communities (asynchronously)
     * Gets a list of communities. This endpoint can be used to explore the communities the authenticated user could join. OauthScopes: READ_CONVERSATIONS
     * @param sort Defines the type of sorting for the community conversations (default is alphabetical) (optional, default to ALPHABETICALLY)
     * @param order Defines the ordering of the conversations (default is ascending) (optional, default to ASCENDING)
     * @param includeOwn If set to false only conversations are returned where the user is no member of, otherwise all community conversations are returned (optional, default to false)
     * @param startIndex The index of the conversation that is the first one that has to be returned. E.g. if a request starts with startIndex 40 and results 20 the conversations 40 to 60 are returned (optional, default to 0)
     * @param results The maximum number of returned results (default 25). The maximum allowed value is 100. (optional, default to 25)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The matching conversations </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request cannot be fulfilled due to bad syntax: &lt;ul&gt;a field constraint is violated&lt;/ul&gt; </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCommunityConversationsAsync(String sort, String order, Boolean includeOwn, BigDecimal startIndex, BigDecimal results, final ApiCallback<List<Conversation>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCommunityConversationsValidateBeforeCall(sort, order, includeOwn, startIndex, results, _callback);
        Type localVarReturnType = new TypeToken<List<Conversation>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getConversationItems
     * @param convId The ID of the conversation to which the items belong (required)
     * @param modTime The modification time of the item in UTC format. During the query the items before (default) or after this timestamps are returned. In case no timestamp is specified the current server time in UTC is used, i.e. the last 25 modified items are returned (optional)
     * @param direction The direction of the search based on the modification time. Valid values are either BEFORE (default) or AFTER (optional, default to BEFORE)
     * @param results The maximum number of returned results (default 25). The maximum allowed value is 100. (optional, default to 25)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The matching conversation items </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request cannot be fulfilled due to bad syntax: &lt;ul&gt;&lt;li&gt;a field constraint is violated&lt;/li&gt;&lt;/ul&gt; </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getConversationItemsCall(String convId, OffsetDateTime modTime, String direction, BigDecimal results, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/conversations/{convId}/items"
            .replace("{" + "convId" + "}", localVarApiClient.escapeString(convId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (modTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("modTime", modTime));
        }

        if (direction != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direction", direction));
        }

        if (results != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("results", results));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getConversationItemsValidateBeforeCall(String convId, OffsetDateTime modTime, String direction, BigDecimal results, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'convId' is set
        if (convId == null) {
            throw new ApiException("Missing the required parameter 'convId' when calling getConversationItems(Async)");
        }

        return getConversationItemsCall(convId, modTime, direction, results, _callback);

    }

    /**
     * Gets a list of conversation items
     * Gets a list of conversation items. OauthScopes: READ_CONVERSATIONS
     * @param convId The ID of the conversation to which the items belong (required)
     * @param modTime The modification time of the item in UTC format. During the query the items before (default) or after this timestamps are returned. In case no timestamp is specified the current server time in UTC is used, i.e. the last 25 modified items are returned (optional)
     * @param direction The direction of the search based on the modification time. Valid values are either BEFORE (default) or AFTER (optional, default to BEFORE)
     * @param results The maximum number of returned results (default 25). The maximum allowed value is 100. (optional, default to 25)
     * @return List&lt;ConversationItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The matching conversation items </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request cannot be fulfilled due to bad syntax: &lt;ul&gt;&lt;li&gt;a field constraint is violated&lt;/li&gt;&lt;/ul&gt; </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public List<ConversationItem> getConversationItems(String convId, OffsetDateTime modTime, String direction, BigDecimal results) throws ApiException {
        ApiResponse<List<ConversationItem>> localVarResp = getConversationItemsWithHttpInfo(convId, modTime, direction, results);
        return localVarResp.getData();
    }

    /**
     * Gets a list of conversation items
     * Gets a list of conversation items. OauthScopes: READ_CONVERSATIONS
     * @param convId The ID of the conversation to which the items belong (required)
     * @param modTime The modification time of the item in UTC format. During the query the items before (default) or after this timestamps are returned. In case no timestamp is specified the current server time in UTC is used, i.e. the last 25 modified items are returned (optional)
     * @param direction The direction of the search based on the modification time. Valid values are either BEFORE (default) or AFTER (optional, default to BEFORE)
     * @param results The maximum number of returned results (default 25). The maximum allowed value is 100. (optional, default to 25)
     * @return ApiResponse&lt;List&lt;ConversationItem&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The matching conversation items </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request cannot be fulfilled due to bad syntax: &lt;ul&gt;&lt;li&gt;a field constraint is violated&lt;/li&gt;&lt;/ul&gt; </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ConversationItem>> getConversationItemsWithHttpInfo(String convId, OffsetDateTime modTime, String direction, BigDecimal results) throws ApiException {
        okhttp3.Call localVarCall = getConversationItemsValidateBeforeCall(convId, modTime, direction, results, null);
        Type localVarReturnType = new TypeToken<List<ConversationItem>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets a list of conversation items (asynchronously)
     * Gets a list of conversation items. OauthScopes: READ_CONVERSATIONS
     * @param convId The ID of the conversation to which the items belong (required)
     * @param modTime The modification time of the item in UTC format. During the query the items before (default) or after this timestamps are returned. In case no timestamp is specified the current server time in UTC is used, i.e. the last 25 modified items are returned (optional)
     * @param direction The direction of the search based on the modification time. Valid values are either BEFORE (default) or AFTER (optional, default to BEFORE)
     * @param results The maximum number of returned results (default 25). The maximum allowed value is 100. (optional, default to 25)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The matching conversation items </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request cannot be fulfilled due to bad syntax: &lt;ul&gt;&lt;li&gt;a field constraint is violated&lt;/li&gt;&lt;/ul&gt; </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getConversationItemsAsync(String convId, OffsetDateTime modTime, String direction, BigDecimal results, final ApiCallback<List<ConversationItem>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getConversationItemsValidateBeforeCall(convId, modTime, direction, results, _callback);
        Type localVarReturnType = new TypeToken<List<ConversationItem>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getConversationbyId
     * @param convId The ID of the conversation which should be updated (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Gets the conversation object </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request cannot be fulfilled due to bad syntax: &lt;ul&gt;&lt;li&gt;the conversation does not exist&lt;/li&gt;&lt;li&gt;a field constraint is violated&lt;/li&gt;&lt;/ul&gt; </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getConversationbyIdCall(String convId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/conversations/{convId}"
            .replace("{" + "convId" + "}", localVarApiClient.escapeString(convId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getConversationbyIdValidateBeforeCall(String convId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'convId' is set
        if (convId == null) {
            throw new ApiException("Missing the required parameter 'convId' when calling getConversationbyId(Async)");
        }

        return getConversationbyIdCall(convId, _callback);

    }

    /**
     * Gets a conversation
     * Gets a conversation based on the given ID. OauthScopes: READ_CONVERSATIONS
     * @param convId The ID of the conversation which should be updated (required)
     * @return Conversation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Gets the conversation object </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request cannot be fulfilled due to bad syntax: &lt;ul&gt;&lt;li&gt;the conversation does not exist&lt;/li&gt;&lt;li&gt;a field constraint is violated&lt;/li&gt;&lt;/ul&gt; </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public Conversation getConversationbyId(String convId) throws ApiException {
        ApiResponse<Conversation> localVarResp = getConversationbyIdWithHttpInfo(convId);
        return localVarResp.getData();
    }

    /**
     * Gets a conversation
     * Gets a conversation based on the given ID. OauthScopes: READ_CONVERSATIONS
     * @param convId The ID of the conversation which should be updated (required)
     * @return ApiResponse&lt;Conversation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Gets the conversation object </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request cannot be fulfilled due to bad syntax: &lt;ul&gt;&lt;li&gt;the conversation does not exist&lt;/li&gt;&lt;li&gt;a field constraint is violated&lt;/li&gt;&lt;/ul&gt; </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Conversation> getConversationbyIdWithHttpInfo(String convId) throws ApiException {
        okhttp3.Call localVarCall = getConversationbyIdValidateBeforeCall(convId, null);
        Type localVarReturnType = new TypeToken<Conversation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets a conversation (asynchronously)
     * Gets a conversation based on the given ID. OauthScopes: READ_CONVERSATIONS
     * @param convId The ID of the conversation which should be updated (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Gets the conversation object </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request cannot be fulfilled due to bad syntax: &lt;ul&gt;&lt;li&gt;the conversation does not exist&lt;/li&gt;&lt;li&gt;a field constraint is violated&lt;/li&gt;&lt;/ul&gt; </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getConversationbyIdAsync(String convId, final ApiCallback<Conversation> _callback) throws ApiException {

        okhttp3.Call localVarCall = getConversationbyIdValidateBeforeCall(convId, _callback);
        Type localVarReturnType = new TypeToken<Conversation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getConversations
     * @param modTime The modification time of the conversation in UTC format. During the query the conversations before (&lt;i&gt;default&lt;/i&gt;) or after this timestamp are returned. In case no timestamp is specified the current server time in UTC is used, i.e. the last 25 modified conversations are returned (optional)
     * @param direction The direction of the search based on the modification time. Valid values are either BEFORE (default) or AFTER (optional, default to BEFORE)
     * @param results The maximum number of returned results (default 25). The maximum allowed value is 100. (optional, default to 25)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The matching conversations </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request cannot be fulfilled due to bad syntax: &lt;ul&gt;&lt;li&gt;a field constraint is violated&lt;/li&gt;&lt;/ul&gt; </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getConversationsCall(OffsetDateTime modTime, String direction, BigDecimal results, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/conversations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (modTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("modTime", modTime));
        }

        if (direction != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("direction", direction));
        }

        if (results != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("results", results));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getConversationsValidateBeforeCall(OffsetDateTime modTime, String direction, BigDecimal results, final ApiCallback _callback) throws ApiException {
        return getConversationsCall(modTime, direction, results, _callback);

    }

    /**
     * Gets a list of conversations
     * Gets a list of conversations and communities the authenticated user participates in. OauthScopes: READ_CONVERSATIONS
     * @param modTime The modification time of the conversation in UTC format. During the query the conversations before (&lt;i&gt;default&lt;/i&gt;) or after this timestamp are returned. In case no timestamp is specified the current server time in UTC is used, i.e. the last 25 modified conversations are returned (optional)
     * @param direction The direction of the search based on the modification time. Valid values are either BEFORE (default) or AFTER (optional, default to BEFORE)
     * @param results The maximum number of returned results (default 25). The maximum allowed value is 100. (optional, default to 25)
     * @return List&lt;Conversation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The matching conversations </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request cannot be fulfilled due to bad syntax: &lt;ul&gt;&lt;li&gt;a field constraint is violated&lt;/li&gt;&lt;/ul&gt; </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public List<Conversation> getConversations(OffsetDateTime modTime, String direction, BigDecimal results) throws ApiException {
        ApiResponse<List<Conversation>> localVarResp = getConversationsWithHttpInfo(modTime, direction, results);
        return localVarResp.getData();
    }

    /**
     * Gets a list of conversations
     * Gets a list of conversations and communities the authenticated user participates in. OauthScopes: READ_CONVERSATIONS
     * @param modTime The modification time of the conversation in UTC format. During the query the conversations before (&lt;i&gt;default&lt;/i&gt;) or after this timestamp are returned. In case no timestamp is specified the current server time in UTC is used, i.e. the last 25 modified conversations are returned (optional)
     * @param direction The direction of the search based on the modification time. Valid values are either BEFORE (default) or AFTER (optional, default to BEFORE)
     * @param results The maximum number of returned results (default 25). The maximum allowed value is 100. (optional, default to 25)
     * @return ApiResponse&lt;List&lt;Conversation&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The matching conversations </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request cannot be fulfilled due to bad syntax: &lt;ul&gt;&lt;li&gt;a field constraint is violated&lt;/li&gt;&lt;/ul&gt; </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Conversation>> getConversationsWithHttpInfo(OffsetDateTime modTime, String direction, BigDecimal results) throws ApiException {
        okhttp3.Call localVarCall = getConversationsValidateBeforeCall(modTime, direction, results, null);
        Type localVarReturnType = new TypeToken<List<Conversation>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets a list of conversations (asynchronously)
     * Gets a list of conversations and communities the authenticated user participates in. OauthScopes: READ_CONVERSATIONS
     * @param modTime The modification time of the conversation in UTC format. During the query the conversations before (&lt;i&gt;default&lt;/i&gt;) or after this timestamp are returned. In case no timestamp is specified the current server time in UTC is used, i.e. the last 25 modified conversations are returned (optional)
     * @param direction The direction of the search based on the modification time. Valid values are either BEFORE (default) or AFTER (optional, default to BEFORE)
     * @param results The maximum number of returned results (default 25). The maximum allowed value is 100. (optional, default to 25)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The matching conversations </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request cannot be fulfilled due to bad syntax: &lt;ul&gt;&lt;li&gt;a field constraint is violated&lt;/li&gt;&lt;/ul&gt; </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getConversationsAsync(OffsetDateTime modTime, String direction, BigDecimal results, final ApiCallback<List<Conversation>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getConversationsValidateBeforeCall(modTime, direction, results, _callback);
        Type localVarReturnType = new TypeToken<List<Conversation>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getConversationsById
     * @param convIds The array of IDs of the conversations which should be retrieved (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of existing conversations successfully retrieved. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> missing documentation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getConversationsByIdCall(List<String> convIds, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/conversations/byIds";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (convIds != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "convIds", convIds));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getConversationsByIdValidateBeforeCall(List<String> convIds, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'convIds' is set
        if (convIds == null) {
            throw new ApiException("Missing the required parameter 'convIds' when calling getConversationsById(Async)");
        }

        return getConversationsByIdCall(convIds, _callback);

    }

    /**
     * Gets conversations
     * Gets conversation based on the given IDs. OauthScopes: READ_CONVERSATIONS
     * @param convIds The array of IDs of the conversations which should be retrieved (required)
     * @return List&lt;Conversation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of existing conversations successfully retrieved. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> missing documentation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public List<Conversation> getConversationsById(List<String> convIds) throws ApiException {
        ApiResponse<List<Conversation>> localVarResp = getConversationsByIdWithHttpInfo(convIds);
        return localVarResp.getData();
    }

    /**
     * Gets conversations
     * Gets conversation based on the given IDs. OauthScopes: READ_CONVERSATIONS
     * @param convIds The array of IDs of the conversations which should be retrieved (required)
     * @return ApiResponse&lt;List&lt;Conversation&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of existing conversations successfully retrieved. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> missing documentation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Conversation>> getConversationsByIdWithHttpInfo(List<String> convIds) throws ApiException {
        okhttp3.Call localVarCall = getConversationsByIdValidateBeforeCall(convIds, null);
        Type localVarReturnType = new TypeToken<List<Conversation>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets conversations (asynchronously)
     * Gets conversation based on the given IDs. OauthScopes: READ_CONVERSATIONS
     * @param convIds The array of IDs of the conversations which should be retrieved (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of existing conversations successfully retrieved. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> missing documentation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getConversationsByIdAsync(List<String> convIds, final ApiCallback<List<Conversation>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getConversationsByIdValidateBeforeCall(convIds, _callback);
        Type localVarReturnType = new TypeToken<List<Conversation>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getConversationsByLabel
     * @param labelId Id of the label to look for (required)
     * @param nextPagePointer Pointer to the next page of conversations if there are any (optional)
     * @param pageSize Numbers of max conversations per page (optional, default to 25)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of conversations that are tagged with a certain label </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> he request cannot be fulfilled due to bad syntax </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getConversationsByLabelCall(String labelId, String nextPagePointer, BigDecimal pageSize, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/conversations/label/{labelId}"
            .replace("{" + "labelId" + "}", localVarApiClient.escapeString(labelId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (nextPagePointer != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("nextPagePointer", nextPagePointer));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getConversationsByLabelValidateBeforeCall(String labelId, String nextPagePointer, BigDecimal pageSize, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'labelId' is set
        if (labelId == null) {
            throw new ApiException("Missing the required parameter 'labelId' when calling getConversationsByLabel(Async)");
        }

        return getConversationsByLabelCall(labelId, nextPagePointer, pageSize, _callback);

    }

    /**
     * Returns conversations with a certain label
     * Returns conversations with matching labels and paginated  OauthScopes: READ_CONVERSATIONS
     * @param labelId Id of the label to look for (required)
     * @param nextPagePointer Pointer to the next page of conversations if there are any (optional)
     * @param pageSize Numbers of max conversations per page (optional, default to 25)
     * @return ConversationsPage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of conversations that are tagged with a certain label </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> he request cannot be fulfilled due to bad syntax </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public ConversationsPage getConversationsByLabel(String labelId, String nextPagePointer, BigDecimal pageSize) throws ApiException {
        ApiResponse<ConversationsPage> localVarResp = getConversationsByLabelWithHttpInfo(labelId, nextPagePointer, pageSize);
        return localVarResp.getData();
    }

    /**
     * Returns conversations with a certain label
     * Returns conversations with matching labels and paginated  OauthScopes: READ_CONVERSATIONS
     * @param labelId Id of the label to look for (required)
     * @param nextPagePointer Pointer to the next page of conversations if there are any (optional)
     * @param pageSize Numbers of max conversations per page (optional, default to 25)
     * @return ApiResponse&lt;ConversationsPage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of conversations that are tagged with a certain label </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> he request cannot be fulfilled due to bad syntax </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConversationsPage> getConversationsByLabelWithHttpInfo(String labelId, String nextPagePointer, BigDecimal pageSize) throws ApiException {
        okhttp3.Call localVarCall = getConversationsByLabelValidateBeforeCall(labelId, nextPagePointer, pageSize, null);
        Type localVarReturnType = new TypeToken<ConversationsPage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns conversations with a certain label (asynchronously)
     * Returns conversations with matching labels and paginated  OauthScopes: READ_CONVERSATIONS
     * @param labelId Id of the label to look for (required)
     * @param nextPagePointer Pointer to the next page of conversations if there are any (optional)
     * @param pageSize Numbers of max conversations per page (optional, default to 25)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns a list of conversations that are tagged with a certain label </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> he request cannot be fulfilled due to bad syntax </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getConversationsByLabelAsync(String labelId, String nextPagePointer, BigDecimal pageSize, final ApiCallback<ConversationsPage> _callback) throws ApiException {

        okhttp3.Call localVarCall = getConversationsByLabelValidateBeforeCall(labelId, nextPagePointer, pageSize, _callback);
        Type localVarReturnType = new TypeToken<ConversationsPage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDirectConversation
     * @param participant The participant that will be part of this conversation together with the creator, specified by the Circuit user ID or the unique email address (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The conversation was found and can be accessed via the conversation ID </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request cannot be fulfilled due to bad syntax: &lt;ul&gt;&lt;li&gt;the data format of the passed user does not match either a UUID (user primary key)&lt;/li&gt;&lt;li&gt; or an valid email address&lt;/li&gt;&lt;li&gt;or the user does not exist&lt;/li&gt;&lt;li&gt;or the user is the same who initiates the request&lt;/li&gt;&lt;/ul&gt; </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDirectConversationCall(String participant, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/conversations/direct";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (participant != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("participant", participant));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDirectConversationValidateBeforeCall(String participant, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'participant' is set
        if (participant == null) {
            throw new ApiException("Missing the required parameter 'participant' when calling getDirectConversation(Async)");
        }

        return getDirectConversationCall(participant, _callback);

    }

    /**
     * Checks for a 1-to-1 conversation
     * Checks if a 1-to-1 conversation between the authenticated user and the user with the provided userId exists. OauthScopes: READ_CONVERSATIONS
     * @param participant The participant that will be part of this conversation together with the creator, specified by the Circuit user ID or the unique email address (required)
     * @return Conversation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The conversation was found and can be accessed via the conversation ID </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request cannot be fulfilled due to bad syntax: &lt;ul&gt;&lt;li&gt;the data format of the passed user does not match either a UUID (user primary key)&lt;/li&gt;&lt;li&gt; or an valid email address&lt;/li&gt;&lt;li&gt;or the user does not exist&lt;/li&gt;&lt;li&gt;or the user is the same who initiates the request&lt;/li&gt;&lt;/ul&gt; </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public Conversation getDirectConversation(String participant) throws ApiException {
        ApiResponse<Conversation> localVarResp = getDirectConversationWithHttpInfo(participant);
        return localVarResp.getData();
    }

    /**
     * Checks for a 1-to-1 conversation
     * Checks if a 1-to-1 conversation between the authenticated user and the user with the provided userId exists. OauthScopes: READ_CONVERSATIONS
     * @param participant The participant that will be part of this conversation together with the creator, specified by the Circuit user ID or the unique email address (required)
     * @return ApiResponse&lt;Conversation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The conversation was found and can be accessed via the conversation ID </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request cannot be fulfilled due to bad syntax: &lt;ul&gt;&lt;li&gt;the data format of the passed user does not match either a UUID (user primary key)&lt;/li&gt;&lt;li&gt; or an valid email address&lt;/li&gt;&lt;li&gt;or the user does not exist&lt;/li&gt;&lt;li&gt;or the user is the same who initiates the request&lt;/li&gt;&lt;/ul&gt; </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Conversation> getDirectConversationWithHttpInfo(String participant) throws ApiException {
        okhttp3.Call localVarCall = getDirectConversationValidateBeforeCall(participant, null);
        Type localVarReturnType = new TypeToken<Conversation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Checks for a 1-to-1 conversation (asynchronously)
     * Checks if a 1-to-1 conversation between the authenticated user and the user with the provided userId exists. OauthScopes: READ_CONVERSATIONS
     * @param participant The participant that will be part of this conversation together with the creator, specified by the Circuit user ID or the unique email address (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The conversation was found and can be accessed via the conversation ID </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request cannot be fulfilled due to bad syntax: &lt;ul&gt;&lt;li&gt;the data format of the passed user does not match either a UUID (user primary key)&lt;/li&gt;&lt;li&gt; or an valid email address&lt;/li&gt;&lt;li&gt;or the user does not exist&lt;/li&gt;&lt;li&gt;or the user is the same who initiates the request&lt;/li&gt;&lt;/ul&gt; </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDirectConversationAsync(String participant, final ApiCallback<Conversation> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDirectConversationValidateBeforeCall(participant, _callback);
        Type localVarReturnType = new TypeToken<Conversation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getFavoriteConversations
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of marked conversations or an empty response. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request cannot be fulfilled due to bad syntax: &lt;ul&gt;&lt;li&gt;the conversation does not exist&lt;/li&gt;&lt;li&gt;the user is no participant of the conversation&lt;/li&gt;&lt;li&gt;a field constraint is violated&lt;/li&gt;&lt;/ul&gt; </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFavoriteConversationsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/conversations/favorite";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFavoriteConversationsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getFavoriteConversationsCall(_callback);

    }

    /**
     * Gets favorite conversations
     * Gets the conversationIds which are marked as favorites. OauthScopes: READ_CONVERSATIONS
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of marked conversations or an empty response. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request cannot be fulfilled due to bad syntax: &lt;ul&gt;&lt;li&gt;the conversation does not exist&lt;/li&gt;&lt;li&gt;the user is no participant of the conversation&lt;/li&gt;&lt;li&gt;a field constraint is violated&lt;/li&gt;&lt;/ul&gt; </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public List<String> getFavoriteConversations() throws ApiException {
        ApiResponse<List<String>> localVarResp = getFavoriteConversationsWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Gets favorite conversations
     * Gets the conversationIds which are marked as favorites. OauthScopes: READ_CONVERSATIONS
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of marked conversations or an empty response. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request cannot be fulfilled due to bad syntax: &lt;ul&gt;&lt;li&gt;the conversation does not exist&lt;/li&gt;&lt;li&gt;the user is no participant of the conversation&lt;/li&gt;&lt;li&gt;a field constraint is violated&lt;/li&gt;&lt;/ul&gt; </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<String>> getFavoriteConversationsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getFavoriteConversationsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets favorite conversations (asynchronously)
     * Gets the conversationIds which are marked as favorites. OauthScopes: READ_CONVERSATIONS
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of marked conversations or an empty response. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request cannot be fulfilled due to bad syntax: &lt;ul&gt;&lt;li&gt;the conversation does not exist&lt;/li&gt;&lt;li&gt;the user is no participant of the conversation&lt;/li&gt;&lt;li&gt;a field constraint is violated&lt;/li&gt;&lt;/ul&gt; </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFavoriteConversationsAsync(final ApiCallback<List<String>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFavoriteConversationsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getFlagItem
     * @param convId The ID of the conversation to which the item belongs (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Gets the list of flagged items </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request cannot be fulfilled due to bad syntax: &lt;ul&gt;&lt;li&gt;the conversation does not exist&lt;/li&gt;&lt;li&gt;a field constraint is violated&lt;/li&gt;&lt;/ul&gt; </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFlagItemCall(String convId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/conversations/{convId}/messages/flag"
            .replace("{" + "convId" + "}", localVarApiClient.escapeString(convId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFlagItemValidateBeforeCall(String convId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'convId' is set
        if (convId == null) {
            throw new ApiException("Missing the required parameter 'convId' when calling getFlagItem(Async)");
        }

        return getFlagItemCall(convId, _callback);

    }

    /**
     * Gets a list of the flagged messages of a conversation
     * Gets a list of all the flagged messages in the given conversation. OauthScopes: READ_CONVERSATIONS, ORGANIZE_CONVERSATIONS
     * @param convId The ID of the conversation to which the item belongs (required)
     * @return List&lt;ConversationItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Gets the list of flagged items </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request cannot be fulfilled due to bad syntax: &lt;ul&gt;&lt;li&gt;the conversation does not exist&lt;/li&gt;&lt;li&gt;a field constraint is violated&lt;/li&gt;&lt;/ul&gt; </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public List<ConversationItem> getFlagItem(String convId) throws ApiException {
        ApiResponse<List<ConversationItem>> localVarResp = getFlagItemWithHttpInfo(convId);
        return localVarResp.getData();
    }

    /**
     * Gets a list of the flagged messages of a conversation
     * Gets a list of all the flagged messages in the given conversation. OauthScopes: READ_CONVERSATIONS, ORGANIZE_CONVERSATIONS
     * @param convId The ID of the conversation to which the item belongs (required)
     * @return ApiResponse&lt;List&lt;ConversationItem&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Gets the list of flagged items </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request cannot be fulfilled due to bad syntax: &lt;ul&gt;&lt;li&gt;the conversation does not exist&lt;/li&gt;&lt;li&gt;a field constraint is violated&lt;/li&gt;&lt;/ul&gt; </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ConversationItem>> getFlagItemWithHttpInfo(String convId) throws ApiException {
        okhttp3.Call localVarCall = getFlagItemValidateBeforeCall(convId, null);
        Type localVarReturnType = new TypeToken<List<ConversationItem>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets a list of the flagged messages of a conversation (asynchronously)
     * Gets a list of all the flagged messages in the given conversation. OauthScopes: READ_CONVERSATIONS, ORGANIZE_CONVERSATIONS
     * @param convId The ID of the conversation to which the item belongs (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Gets the list of flagged items </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request cannot be fulfilled due to bad syntax: &lt;ul&gt;&lt;li&gt;the conversation does not exist&lt;/li&gt;&lt;li&gt;a field constraint is violated&lt;/li&gt;&lt;/ul&gt; </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFlagItemAsync(String convId, final ApiCallback<List<ConversationItem>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFlagItemValidateBeforeCall(convId, _callback);
        Type localVarReturnType = new TypeToken<List<ConversationItem>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getFlagItemConv
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Gets the list of flagged items </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFlagItemConvCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/conversations/messages/flag";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFlagItemConvValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getFlagItemConvCall(_callback);

    }

    /**
     * Gets a list of the flagged messages
     * Gets a list of all the messages the authenticated user has flagged. This endpoint should be used carefully in case where the authenticated user has a lot of flagged messages. OauthScopes: READ_CONVERSATIONS
     * @return List&lt;ConversationItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Gets the list of flagged items </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public List<ConversationItem> getFlagItemConv() throws ApiException {
        ApiResponse<List<ConversationItem>> localVarResp = getFlagItemConvWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Gets a list of the flagged messages
     * Gets a list of all the messages the authenticated user has flagged. This endpoint should be used carefully in case where the authenticated user has a lot of flagged messages. OauthScopes: READ_CONVERSATIONS
     * @return ApiResponse&lt;List&lt;ConversationItem&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Gets the list of flagged items </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ConversationItem>> getFlagItemConvWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getFlagItemConvValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<ConversationItem>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets a list of the flagged messages (asynchronously)
     * Gets a list of all the messages the authenticated user has flagged. This endpoint should be used carefully in case where the authenticated user has a lot of flagged messages. OauthScopes: READ_CONVERSATIONS
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Gets the list of flagged items </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFlagItemConvAsync(final ApiCallback<List<ConversationItem>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFlagItemConvValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<ConversationItem>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getJoinDetails
     * @param convId The ID of the conversation for which the join details should be returned (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The join details. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request cannot be fulfilled due to bad syntax: &lt;ul&gt;&lt;li&gt;the conversation does not exist&lt;/li&gt;&lt;/ul&gt; </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getJoinDetailsCall(String convId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/conversations/{convId}/conversationdetails"
            .replace("{" + "convId" + "}", localVarApiClient.escapeString(convId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getJoinDetailsValidateBeforeCall(String convId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'convId' is set
        if (convId == null) {
            throw new ApiException("Missing the required parameter 'convId' when calling getJoinDetails(Async)");
        }

        return getJoinDetailsCall(convId, _callback);

    }

    /**
     * Gets the conference details of a conversation
     * Gets the conference details of the given conversation. Conference details include the URL, which is used to join the conference through a web or mobile application, as well as the dial-in phone numbers and conference PIN, which are used to join the conference by phone. OauthScopes: READ_CONVERSATIONS
     * @param convId The ID of the conversation for which the join details should be returned (required)
     * @return ConversationDetails
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The join details. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request cannot be fulfilled due to bad syntax: &lt;ul&gt;&lt;li&gt;the conversation does not exist&lt;/li&gt;&lt;/ul&gt; </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public ConversationDetails getJoinDetails(String convId) throws ApiException {
        ApiResponse<ConversationDetails> localVarResp = getJoinDetailsWithHttpInfo(convId);
        return localVarResp.getData();
    }

    /**
     * Gets the conference details of a conversation
     * Gets the conference details of the given conversation. Conference details include the URL, which is used to join the conference through a web or mobile application, as well as the dial-in phone numbers and conference PIN, which are used to join the conference by phone. OauthScopes: READ_CONVERSATIONS
     * @param convId The ID of the conversation for which the join details should be returned (required)
     * @return ApiResponse&lt;ConversationDetails&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The join details. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request cannot be fulfilled due to bad syntax: &lt;ul&gt;&lt;li&gt;the conversation does not exist&lt;/li&gt;&lt;/ul&gt; </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConversationDetails> getJoinDetailsWithHttpInfo(String convId) throws ApiException {
        okhttp3.Call localVarCall = getJoinDetailsValidateBeforeCall(convId, null);
        Type localVarReturnType = new TypeToken<ConversationDetails>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets the conference details of a conversation (asynchronously)
     * Gets the conference details of the given conversation. Conference details include the URL, which is used to join the conference through a web or mobile application, as well as the dial-in phone numbers and conference PIN, which are used to join the conference by phone. OauthScopes: READ_CONVERSATIONS
     * @param convId The ID of the conversation for which the join details should be returned (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The join details. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request cannot be fulfilled due to bad syntax: &lt;ul&gt;&lt;li&gt;the conversation does not exist&lt;/li&gt;&lt;/ul&gt; </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getJoinDetailsAsync(String convId, final ApiCallback<ConversationDetails> _callback) throws ApiException {

        okhttp3.Call localVarCall = getJoinDetailsValidateBeforeCall(convId, _callback);
        Type localVarReturnType = new TypeToken<ConversationDetails>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getJoinDetailsMultiple
     * @param convIds An array of IDs of the conversations for which the join details should be returned (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The join details. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request cannot be fulfilled due to bad syntax: &lt;ul&gt;&lt;li&gt;the conversation does not exist&lt;/li&gt;&lt;/ul&gt; </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getJoinDetailsMultipleCall(List<String> convIds, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/conversations/conversationdetails";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (convIds != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "convIds", convIds));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getJoinDetailsMultipleValidateBeforeCall(List<String> convIds, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'convIds' is set
        if (convIds == null) {
            throw new ApiException("Missing the required parameter 'convIds' when calling getJoinDetailsMultiple(Async)");
        }

        return getJoinDetailsMultipleCall(convIds, _callback);

    }

    /**
     * Gets the conference details for multiple conversations
     * Gets the conference details of the given conversations. Conference details include the URL, which is used to join the conference through a web or mobile application, as well as the dial-in phone numbers and conference PIN, which are used to join the conference by phone. OauthScopes: READ_CONVERSATIONS
     * @param convIds An array of IDs of the conversations for which the join details should be returned (required)
     * @return List&lt;ConversationDetails&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The join details. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request cannot be fulfilled due to bad syntax: &lt;ul&gt;&lt;li&gt;the conversation does not exist&lt;/li&gt;&lt;/ul&gt; </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public List<ConversationDetails> getJoinDetailsMultiple(List<String> convIds) throws ApiException {
        ApiResponse<List<ConversationDetails>> localVarResp = getJoinDetailsMultipleWithHttpInfo(convIds);
        return localVarResp.getData();
    }

    /**
     * Gets the conference details for multiple conversations
     * Gets the conference details of the given conversations. Conference details include the URL, which is used to join the conference through a web or mobile application, as well as the dial-in phone numbers and conference PIN, which are used to join the conference by phone. OauthScopes: READ_CONVERSATIONS
     * @param convIds An array of IDs of the conversations for which the join details should be returned (required)
     * @return ApiResponse&lt;List&lt;ConversationDetails&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The join details. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request cannot be fulfilled due to bad syntax: &lt;ul&gt;&lt;li&gt;the conversation does not exist&lt;/li&gt;&lt;/ul&gt; </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ConversationDetails>> getJoinDetailsMultipleWithHttpInfo(List<String> convIds) throws ApiException {
        okhttp3.Call localVarCall = getJoinDetailsMultipleValidateBeforeCall(convIds, null);
        Type localVarReturnType = new TypeToken<List<ConversationDetails>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets the conference details for multiple conversations (asynchronously)
     * Gets the conference details of the given conversations. Conference details include the URL, which is used to join the conference through a web or mobile application, as well as the dial-in phone numbers and conference PIN, which are used to join the conference by phone. OauthScopes: READ_CONVERSATIONS
     * @param convIds An array of IDs of the conversations for which the join details should be returned (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The join details. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request cannot be fulfilled due to bad syntax: &lt;ul&gt;&lt;li&gt;the conversation does not exist&lt;/li&gt;&lt;/ul&gt; </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getJoinDetailsMultipleAsync(List<String> convIds, final ApiCallback<List<ConversationDetails>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getJoinDetailsMultipleValidateBeforeCall(convIds, _callback);
        Type localVarReturnType = new TypeToken<List<ConversationDetails>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getParticipantsByConvId
     * @param convId The id of the conversation the participants are searched for. (required)
     * @param pageSize The page size of the hit list (required)
     * @param name Part of name to filter the results (optional)
     * @param type Type of participant to filter the results (optional, default to REGULAR)
     * @param searchPointer Pointer for paged output. Add to consecutive request to get next page (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of conversations and items that match the term </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request cannot be fulfilled due to bad syntax: &lt;ul&gt;&lt;li&gt;the user is no participant of the conversation&lt;/li&gt;&lt;li&gt;a field constraint is violated&lt;/li&gt;&lt;/ul&gt; </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getParticipantsByConvIdCall(String convId, BigDecimal pageSize, String name, String type, String searchPointer, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/conversations/{convId}/participants"
            .replace("{" + "convId" + "}", localVarApiClient.escapeString(convId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (searchPointer != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("searchPointer", searchPointer));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getParticipantsByConvIdValidateBeforeCall(String convId, BigDecimal pageSize, String name, String type, String searchPointer, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'convId' is set
        if (convId == null) {
            throw new ApiException("Missing the required parameter 'convId' when calling getParticipantsByConvId(Async)");
        }

        // verify the required parameter 'pageSize' is set
        if (pageSize == null) {
            throw new ApiException("Missing the required parameter 'pageSize' when calling getParticipantsByConvId(Async)");
        }

        return getParticipantsByConvIdCall(convId, pageSize, name, type, searchPointer, _callback);

    }

    /**
     * Performs a list of participants
     * Performs a search for participants. The max number of participants is configurable. If more participants are available a search pointer is returned for consecutive calls. OauthScopes: READ_CONVERSATIONS
     * @param convId The id of the conversation the participants are searched for. (required)
     * @param pageSize The page size of the hit list (required)
     * @param name Part of name to filter the results (optional)
     * @param type Type of participant to filter the results (optional, default to REGULAR)
     * @param searchPointer Pointer for paged output. Add to consecutive request to get next page (optional)
     * @return List&lt;ConversationParticipantsList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of conversations and items that match the term </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request cannot be fulfilled due to bad syntax: &lt;ul&gt;&lt;li&gt;the user is no participant of the conversation&lt;/li&gt;&lt;li&gt;a field constraint is violated&lt;/li&gt;&lt;/ul&gt; </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public List<ConversationParticipantsList> getParticipantsByConvId(String convId, BigDecimal pageSize, String name, String type, String searchPointer) throws ApiException {
        ApiResponse<List<ConversationParticipantsList>> localVarResp = getParticipantsByConvIdWithHttpInfo(convId, pageSize, name, type, searchPointer);
        return localVarResp.getData();
    }

    /**
     * Performs a list of participants
     * Performs a search for participants. The max number of participants is configurable. If more participants are available a search pointer is returned for consecutive calls. OauthScopes: READ_CONVERSATIONS
     * @param convId The id of the conversation the participants are searched for. (required)
     * @param pageSize The page size of the hit list (required)
     * @param name Part of name to filter the results (optional)
     * @param type Type of participant to filter the results (optional, default to REGULAR)
     * @param searchPointer Pointer for paged output. Add to consecutive request to get next page (optional)
     * @return ApiResponse&lt;List&lt;ConversationParticipantsList&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of conversations and items that match the term </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request cannot be fulfilled due to bad syntax: &lt;ul&gt;&lt;li&gt;the user is no participant of the conversation&lt;/li&gt;&lt;li&gt;a field constraint is violated&lt;/li&gt;&lt;/ul&gt; </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ConversationParticipantsList>> getParticipantsByConvIdWithHttpInfo(String convId, BigDecimal pageSize, String name, String type, String searchPointer) throws ApiException {
        okhttp3.Call localVarCall = getParticipantsByConvIdValidateBeforeCall(convId, pageSize, name, type, searchPointer, null);
        Type localVarReturnType = new TypeToken<List<ConversationParticipantsList>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Performs a list of participants (asynchronously)
     * Performs a search for participants. The max number of participants is configurable. If more participants are available a search pointer is returned for consecutive calls. OauthScopes: READ_CONVERSATIONS
     * @param convId The id of the conversation the participants are searched for. (required)
     * @param pageSize The page size of the hit list (required)
     * @param name Part of name to filter the results (optional)
     * @param type Type of participant to filter the results (optional, default to REGULAR)
     * @param searchPointer Pointer for paged output. Add to consecutive request to get next page (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of conversations and items that match the term </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request cannot be fulfilled due to bad syntax: &lt;ul&gt;&lt;li&gt;the user is no participant of the conversation&lt;/li&gt;&lt;li&gt;a field constraint is violated&lt;/li&gt;&lt;/ul&gt; </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getParticipantsByConvIdAsync(String convId, BigDecimal pageSize, String name, String type, String searchPointer, final ApiCallback<List<ConversationParticipantsList>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getParticipantsByConvIdValidateBeforeCall(convId, pageSize, name, type, searchPointer, _callback);
        Type localVarReturnType = new TypeToken<List<ConversationParticipantsList>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPinnedConversations
     * @param convId ID of the conversation (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The pinned topics </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request cannot be fulfilled due to bad syntax </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPinnedConversationsCall(String convId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/conversations/{convId}/pins"
            .replace("{" + "convId" + "}", localVarApiClient.escapeString(convId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPinnedConversationsValidateBeforeCall(String convId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'convId' is set
        if (convId == null) {
            throw new ApiException("Missing the required parameter 'convId' when calling getPinnedConversations(Async)");
        }

        return getPinnedConversationsCall(convId, _callback);

    }

    /**
     * Returns pinned topics of a conversation
     * Returns pinned topics of a conversation OauthScopes: READ_CONVERSATIONS
     * @param convId ID of the conversation (required)
     * @return List&lt;PinnedTopic&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The pinned topics </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request cannot be fulfilled due to bad syntax </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public List<PinnedTopic> getPinnedConversations(String convId) throws ApiException {
        ApiResponse<List<PinnedTopic>> localVarResp = getPinnedConversationsWithHttpInfo(convId);
        return localVarResp.getData();
    }

    /**
     * Returns pinned topics of a conversation
     * Returns pinned topics of a conversation OauthScopes: READ_CONVERSATIONS
     * @param convId ID of the conversation (required)
     * @return ApiResponse&lt;List&lt;PinnedTopic&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The pinned topics </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request cannot be fulfilled due to bad syntax </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<PinnedTopic>> getPinnedConversationsWithHttpInfo(String convId) throws ApiException {
        okhttp3.Call localVarCall = getPinnedConversationsValidateBeforeCall(convId, null);
        Type localVarReturnType = new TypeToken<List<PinnedTopic>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns pinned topics of a conversation (asynchronously)
     * Returns pinned topics of a conversation OauthScopes: READ_CONVERSATIONS
     * @param convId ID of the conversation (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The pinned topics </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request cannot be fulfilled due to bad syntax </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPinnedConversationsAsync(String convId, final ApiCallback<List<PinnedTopic>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPinnedConversationsValidateBeforeCall(convId, _callback);
        Type localVarReturnType = new TypeToken<List<PinnedTopic>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSingleConversationtem
     * @param itemId The ID of the item that will be returned (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The item was successful returned </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The item with the given id was not found </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSingleConversationtemCall(String itemId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/conversations/messages/{itemId}"
            .replace("{" + "itemId" + "}", localVarApiClient.escapeString(itemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSingleConversationtemValidateBeforeCall(String itemId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'itemId' is set
        if (itemId == null) {
            throw new ApiException("Missing the required parameter 'itemId' when calling getSingleConversationtem(Async)");
        }

        return getSingleConversationtemCall(itemId, _callback);

    }

    /**
     * Returns a text item
     * Returns a text item for a given item id OauthScopes: READ_CONVERSATIONS
     * @param itemId The ID of the item that will be returned (required)
     * @return ConversationItem
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The item was successful returned </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The item with the given id was not found </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public ConversationItem getSingleConversationtem(String itemId) throws ApiException {
        ApiResponse<ConversationItem> localVarResp = getSingleConversationtemWithHttpInfo(itemId);
        return localVarResp.getData();
    }

    /**
     * Returns a text item
     * Returns a text item for a given item id OauthScopes: READ_CONVERSATIONS
     * @param itemId The ID of the item that will be returned (required)
     * @return ApiResponse&lt;ConversationItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The item was successful returned </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The item with the given id was not found </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConversationItem> getSingleConversationtemWithHttpInfo(String itemId) throws ApiException {
        okhttp3.Call localVarCall = getSingleConversationtemValidateBeforeCall(itemId, null);
        Type localVarReturnType = new TypeToken<ConversationItem>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Returns a text item (asynchronously)
     * Returns a text item for a given item id OauthScopes: READ_CONVERSATIONS
     * @param itemId The ID of the item that will be returned (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The item was successful returned </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The item with the given id was not found </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSingleConversationtemAsync(String itemId, final ApiCallback<ConversationItem> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSingleConversationtemValidateBeforeCall(itemId, _callback);
        Type localVarReturnType = new TypeToken<ConversationItem>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for joinCommunityConversation
     * @param convId The ID of the conversation which the user will join (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Gets the conversation object to which the participants was added </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request cannot be fulfilled due to bad syntax: &lt;ul&gt;&lt;li&gt;the userIds passed as parameter are not provided in the correct format&lt;/li&gt;&lt;li&gt; or an valid email address&lt;/li&gt;&lt;li&gt;or one or more of the user do not exist&lt;/li&gt;&lt;li&gt;the conversation does not exist&lt;/li&gt;&lt;li&gt;the conversation is not of type COMMUNITY&lt;/li&gt;&lt;li&gt;a field constraint is violated&lt;/li&gt;&lt;/ul&gt; </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call joinCommunityConversationCall(String convId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/conversations/community/{convId}/join"
            .replace("{" + "convId" + "}", localVarApiClient.escapeString(convId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call joinCommunityConversationValidateBeforeCall(String convId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'convId' is set
        if (convId == null) {
            throw new ApiException("Missing the required parameter 'convId' when calling joinCommunityConversation(Async)");
        }

        return joinCommunityConversationCall(convId, _callback);

    }

    /**
     * Adds the authenticated user to a community
     * Adds the authenticated user to the given community (i.e., allows the user to join this community). Contrary to the operation of adding a new participant, this operation can only be performed by a user who is not yet a member of the community. OauthScopes: WRITE_CONVERSATIONS, MANAGE_CONVERSATIONS
     * @param convId The ID of the conversation which the user will join (required)
     * @return Conversation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Gets the conversation object to which the participants was added </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request cannot be fulfilled due to bad syntax: &lt;ul&gt;&lt;li&gt;the userIds passed as parameter are not provided in the correct format&lt;/li&gt;&lt;li&gt; or an valid email address&lt;/li&gt;&lt;li&gt;or one or more of the user do not exist&lt;/li&gt;&lt;li&gt;the conversation does not exist&lt;/li&gt;&lt;li&gt;the conversation is not of type COMMUNITY&lt;/li&gt;&lt;li&gt;a field constraint is violated&lt;/li&gt;&lt;/ul&gt; </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public Conversation joinCommunityConversation(String convId) throws ApiException {
        ApiResponse<Conversation> localVarResp = joinCommunityConversationWithHttpInfo(convId);
        return localVarResp.getData();
    }

    /**
     * Adds the authenticated user to a community
     * Adds the authenticated user to the given community (i.e., allows the user to join this community). Contrary to the operation of adding a new participant, this operation can only be performed by a user who is not yet a member of the community. OauthScopes: WRITE_CONVERSATIONS, MANAGE_CONVERSATIONS
     * @param convId The ID of the conversation which the user will join (required)
     * @return ApiResponse&lt;Conversation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Gets the conversation object to which the participants was added </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request cannot be fulfilled due to bad syntax: &lt;ul&gt;&lt;li&gt;the userIds passed as parameter are not provided in the correct format&lt;/li&gt;&lt;li&gt; or an valid email address&lt;/li&gt;&lt;li&gt;or one or more of the user do not exist&lt;/li&gt;&lt;li&gt;the conversation does not exist&lt;/li&gt;&lt;li&gt;the conversation is not of type COMMUNITY&lt;/li&gt;&lt;li&gt;a field constraint is violated&lt;/li&gt;&lt;/ul&gt; </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Conversation> joinCommunityConversationWithHttpInfo(String convId) throws ApiException {
        okhttp3.Call localVarCall = joinCommunityConversationValidateBeforeCall(convId, null);
        Type localVarReturnType = new TypeToken<Conversation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Adds the authenticated user to a community (asynchronously)
     * Adds the authenticated user to the given community (i.e., allows the user to join this community). Contrary to the operation of adding a new participant, this operation can only be performed by a user who is not yet a member of the community. OauthScopes: WRITE_CONVERSATIONS, MANAGE_CONVERSATIONS
     * @param convId The ID of the conversation which the user will join (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Gets the conversation object to which the participants was added </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request cannot be fulfilled due to bad syntax: &lt;ul&gt;&lt;li&gt;the userIds passed as parameter are not provided in the correct format&lt;/li&gt;&lt;li&gt; or an valid email address&lt;/li&gt;&lt;li&gt;or one or more of the user do not exist&lt;/li&gt;&lt;li&gt;the conversation does not exist&lt;/li&gt;&lt;li&gt;the conversation is not of type COMMUNITY&lt;/li&gt;&lt;li&gt;a field constraint is violated&lt;/li&gt;&lt;/ul&gt; </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call joinCommunityConversationAsync(String convId, final ApiCallback<Conversation> _callback) throws ApiException {

        okhttp3.Call localVarCall = joinCommunityConversationValidateBeforeCall(convId, _callback);
        Type localVarReturnType = new TypeToken<Conversation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for likeItem
     * @param convId The ID of the conversation to which the item belongs (required)
     * @param itemId The ID of the item that will be liked (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The item was successful liked </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request cannot be fulfilled due to bad syntax: &lt;ul&gt;&lt;li&gt;the conversation does not exist&lt;/li&gt;&lt;li&gt;the item does not exist&lt;/li&gt;&lt;li&gt;the user is no participant of the conversation&lt;/li&gt;&lt;li&gt;a field constraint is violated&lt;/li&gt;&lt;/ul&gt; </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call likeItemCall(String convId, String itemId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/conversations/{convId}/messages/{itemId}/like"
            .replace("{" + "convId" + "}", localVarApiClient.escapeString(convId.toString()))
            .replace("{" + "itemId" + "}", localVarApiClient.escapeString(itemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call likeItemValidateBeforeCall(String convId, String itemId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'convId' is set
        if (convId == null) {
            throw new ApiException("Missing the required parameter 'convId' when calling likeItem(Async)");
        }

        // verify the required parameter 'itemId' is set
        if (itemId == null) {
            throw new ApiException("Missing the required parameter 'itemId' when calling likeItem(Async)");
        }

        return likeItemCall(convId, itemId, _callback);

    }

    /**
     * Adds a \&quot;like\&quot; to a message
     * Adds a \&quot;like\&quot; to the given message in the given conversation OauthScopes: WRITE_CONVERSATIONS, UPDATE_CONVERSATION_CONTENT
     * @param convId The ID of the conversation to which the item belongs (required)
     * @param itemId The ID of the item that will be liked (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The item was successful liked </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request cannot be fulfilled due to bad syntax: &lt;ul&gt;&lt;li&gt;the conversation does not exist&lt;/li&gt;&lt;li&gt;the item does not exist&lt;/li&gt;&lt;li&gt;the user is no participant of the conversation&lt;/li&gt;&lt;li&gt;a field constraint is violated&lt;/li&gt;&lt;/ul&gt; </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public void likeItem(String convId, String itemId) throws ApiException {
        likeItemWithHttpInfo(convId, itemId);
    }

    /**
     * Adds a \&quot;like\&quot; to a message
     * Adds a \&quot;like\&quot; to the given message in the given conversation OauthScopes: WRITE_CONVERSATIONS, UPDATE_CONVERSATION_CONTENT
     * @param convId The ID of the conversation to which the item belongs (required)
     * @param itemId The ID of the item that will be liked (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The item was successful liked </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request cannot be fulfilled due to bad syntax: &lt;ul&gt;&lt;li&gt;the conversation does not exist&lt;/li&gt;&lt;li&gt;the item does not exist&lt;/li&gt;&lt;li&gt;the user is no participant of the conversation&lt;/li&gt;&lt;li&gt;a field constraint is violated&lt;/li&gt;&lt;/ul&gt; </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> likeItemWithHttpInfo(String convId, String itemId) throws ApiException {
        okhttp3.Call localVarCall = likeItemValidateBeforeCall(convId, itemId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Adds a \&quot;like\&quot; to a message (asynchronously)
     * Adds a \&quot;like\&quot; to the given message in the given conversation OauthScopes: WRITE_CONVERSATIONS, UPDATE_CONVERSATION_CONTENT
     * @param convId The ID of the conversation to which the item belongs (required)
     * @param itemId The ID of the item that will be liked (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The item was successful liked </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request cannot be fulfilled due to bad syntax: &lt;ul&gt;&lt;li&gt;the conversation does not exist&lt;/li&gt;&lt;li&gt;the item does not exist&lt;/li&gt;&lt;li&gt;the user is no participant of the conversation&lt;/li&gt;&lt;li&gt;a field constraint is violated&lt;/li&gt;&lt;/ul&gt; </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call likeItemAsync(String convId, String itemId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = likeItemValidateBeforeCall(convId, itemId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for moderateConversation
     * @param convId The ID of the conversation which will be set to moderated state (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The conversation is in moderated mode </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Permission denied </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden to edit this conversation </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call moderateConversationCall(String convId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/conversations/moderate/{convId}"
            .replace("{" + "convId" + "}", localVarApiClient.escapeString(convId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call moderateConversationValidateBeforeCall(String convId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'convId' is set
        if (convId == null) {
            throw new ApiException("Missing the required parameter 'convId' when calling moderateConversation(Async)");
        }

        return moderateConversationCall(convId, _callback);

    }

    /**
     * Set conversation moderated
     * Set a conversation in moderatd mode. Moderators can be added and removed OauthScopes: WRITE_CONVERSATIONS, MODERATE_CONVERSATIONS
     * @param convId The ID of the conversation which will be set to moderated state (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The conversation is in moderated mode </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Permission denied </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden to edit this conversation </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public void moderateConversation(String convId) throws ApiException {
        moderateConversationWithHttpInfo(convId);
    }

    /**
     * Set conversation moderated
     * Set a conversation in moderatd mode. Moderators can be added and removed OauthScopes: WRITE_CONVERSATIONS, MODERATE_CONVERSATIONS
     * @param convId The ID of the conversation which will be set to moderated state (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The conversation is in moderated mode </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Permission denied </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden to edit this conversation </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> moderateConversationWithHttpInfo(String convId) throws ApiException {
        okhttp3.Call localVarCall = moderateConversationValidateBeforeCall(convId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Set conversation moderated (asynchronously)
     * Set a conversation in moderatd mode. Moderators can be added and removed OauthScopes: WRITE_CONVERSATIONS, MODERATE_CONVERSATIONS
     * @param convId The ID of the conversation which will be set to moderated state (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The conversation is in moderated mode </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Permission denied </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden to edit this conversation </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call moderateConversationAsync(String convId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = moderateConversationValidateBeforeCall(convId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for pinAConversation
     * @param convId The ID of the conversation (required)
     * @param itemId The ID of the topic (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the pinned conversation conversation after pinning a topic </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request cannot be fulfilled due to bad syntax </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pinAConversationCall(String convId, String itemId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/conversations/{convId}/pins/{itemId}"
            .replace("{" + "convId" + "}", localVarApiClient.escapeString(convId.toString()))
            .replace("{" + "itemId" + "}", localVarApiClient.escapeString(itemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call pinAConversationValidateBeforeCall(String convId, String itemId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'convId' is set
        if (convId == null) {
            throw new ApiException("Missing the required parameter 'convId' when calling pinAConversation(Async)");
        }

        // verify the required parameter 'itemId' is set
        if (itemId == null) {
            throw new ApiException("Missing the required parameter 'itemId' when calling pinAConversation(Async)");
        }

        return pinAConversationCall(convId, itemId, _callback);

    }

    /**
     * Pins a topic of a conversation
     * Pins a topic of a conversation OauthScopes: READ_CONVERSATIONS
     * @param convId The ID of the conversation (required)
     * @param itemId The ID of the topic (required)
     * @return Conversation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the pinned conversation conversation after pinning a topic </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request cannot be fulfilled due to bad syntax </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public Conversation pinAConversation(String convId, String itemId) throws ApiException {
        ApiResponse<Conversation> localVarResp = pinAConversationWithHttpInfo(convId, itemId);
        return localVarResp.getData();
    }

    /**
     * Pins a topic of a conversation
     * Pins a topic of a conversation OauthScopes: READ_CONVERSATIONS
     * @param convId The ID of the conversation (required)
     * @param itemId The ID of the topic (required)
     * @return ApiResponse&lt;Conversation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the pinned conversation conversation after pinning a topic </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request cannot be fulfilled due to bad syntax </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Conversation> pinAConversationWithHttpInfo(String convId, String itemId) throws ApiException {
        okhttp3.Call localVarCall = pinAConversationValidateBeforeCall(convId, itemId, null);
        Type localVarReturnType = new TypeToken<Conversation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Pins a topic of a conversation (asynchronously)
     * Pins a topic of a conversation OauthScopes: READ_CONVERSATIONS
     * @param convId The ID of the conversation (required)
     * @param itemId The ID of the topic (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the pinned conversation conversation after pinning a topic </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request cannot be fulfilled due to bad syntax </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call pinAConversationAsync(String convId, String itemId, final ApiCallback<Conversation> _callback) throws ApiException {

        okhttp3.Call localVarCall = pinAConversationValidateBeforeCall(convId, itemId, _callback);
        Type localVarReturnType = new TypeToken<Conversation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for removeLabel
     * @param labelId The label value to remove, either the unique ID or the label value (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The label was successfully removed </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request cannot be fulfilled due to bad syntax: &lt;ul&gt;&lt;li&gt;a field constraint is violated&lt;/li&gt;&lt;li&gt;the label does not exist&lt;/li&gt;&lt;/ul&gt; </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeLabelCall(String labelId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/labels/{labelId}"
            .replace("{" + "labelId" + "}", localVarApiClient.escapeString(labelId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeLabelValidateBeforeCall(String labelId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'labelId' is set
        if (labelId == null) {
            throw new ApiException("Missing the required parameter 'labelId' when calling removeLabel(Async)");
        }

        return removeLabelCall(labelId, _callback);

    }

    /**
     * Remove a user label
     * Remove a label from the list of user labels OauthScopes: WRITE_USER_PROFILE, ORGANIZE_CONVERSATIONS
     * @param labelId The label value to remove, either the unique ID or the label value (required)
     * @return Label
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The label was successfully removed </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request cannot be fulfilled due to bad syntax: &lt;ul&gt;&lt;li&gt;a field constraint is violated&lt;/li&gt;&lt;li&gt;the label does not exist&lt;/li&gt;&lt;/ul&gt; </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public Label removeLabel(String labelId) throws ApiException {
        ApiResponse<Label> localVarResp = removeLabelWithHttpInfo(labelId);
        return localVarResp.getData();
    }

    /**
     * Remove a user label
     * Remove a label from the list of user labels OauthScopes: WRITE_USER_PROFILE, ORGANIZE_CONVERSATIONS
     * @param labelId The label value to remove, either the unique ID or the label value (required)
     * @return ApiResponse&lt;Label&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The label was successfully removed </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request cannot be fulfilled due to bad syntax: &lt;ul&gt;&lt;li&gt;a field constraint is violated&lt;/li&gt;&lt;li&gt;the label does not exist&lt;/li&gt;&lt;/ul&gt; </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Label> removeLabelWithHttpInfo(String labelId) throws ApiException {
        okhttp3.Call localVarCall = removeLabelValidateBeforeCall(labelId, null);
        Type localVarReturnType = new TypeToken<Label>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Remove a user label (asynchronously)
     * Remove a label from the list of user labels OauthScopes: WRITE_USER_PROFILE, ORGANIZE_CONVERSATIONS
     * @param labelId The label value to remove, either the unique ID or the label value (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The label was successfully removed </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request cannot be fulfilled due to bad syntax: &lt;ul&gt;&lt;li&gt;a field constraint is violated&lt;/li&gt;&lt;li&gt;the label does not exist&lt;/li&gt;&lt;/ul&gt; </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeLabelAsync(String labelId, final ApiCallback<Label> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeLabelValidateBeforeCall(labelId, _callback);
        Type localVarReturnType = new TypeToken<Label>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for removeModerators
     * @param convId The ID of the conversation where the moderators are removed (required)
     * @param moderators The list of moderator ids to remove (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The moderators were successfully removed </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Failure in moderators list </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeModeratorsCall(String convId, List<String> moderators, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/conversations/{convId}/moderators"
            .replace("{" + "convId" + "}", localVarApiClient.escapeString(convId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (moderators != null) {
            localVarFormParams.put("moderators", moderators);
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeModeratorsValidateBeforeCall(String convId, List<String> moderators, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'convId' is set
        if (convId == null) {
            throw new ApiException("Missing the required parameter 'convId' when calling removeModerators(Async)");
        }

        // verify the required parameter 'moderators' is set
        if (moderators == null) {
            throw new ApiException("Missing the required parameter 'moderators' when calling removeModerators(Async)");
        }

        return removeModeratorsCall(convId, moderators, _callback);

    }

    /**
     * Remove moderators
     * Removes a list of moderators from a conversation OauthScopes: WRITE_CONVERSATIONS, MODERATE_CONVERSATIONS
     * @param convId The ID of the conversation where the moderators are removed (required)
     * @param moderators The list of moderator ids to remove (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The moderators were successfully removed </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Failure in moderators list </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public void removeModerators(String convId, List<String> moderators) throws ApiException {
        removeModeratorsWithHttpInfo(convId, moderators);
    }

    /**
     * Remove moderators
     * Removes a list of moderators from a conversation OauthScopes: WRITE_CONVERSATIONS, MODERATE_CONVERSATIONS
     * @param convId The ID of the conversation where the moderators are removed (required)
     * @param moderators The list of moderator ids to remove (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The moderators were successfully removed </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Failure in moderators list </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> removeModeratorsWithHttpInfo(String convId, List<String> moderators) throws ApiException {
        okhttp3.Call localVarCall = removeModeratorsValidateBeforeCall(convId, moderators, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Remove moderators (asynchronously)
     * Removes a list of moderators from a conversation OauthScopes: WRITE_CONVERSATIONS, MODERATE_CONVERSATIONS
     * @param convId The ID of the conversation where the moderators are removed (required)
     * @param moderators The list of moderator ids to remove (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The moderators were successfully removed </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Failure in moderators list </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeModeratorsAsync(String convId, List<String> moderators, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeModeratorsValidateBeforeCall(convId, moderators, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for removeParticipantCommunity
     * @param convId The ID of the conversation from which the participant have to be removed (required)
     * @param participants The IDs or the unique email addresses of the Circuit users that have to be removed (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Gets the conversation object from which the participants were removed. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request cannot be fulfilled due to bad syntax: &lt;ul&gt;&lt;/li&gt;the userIds passed as parameter are not provided in the correct format&lt;/li&gt;&lt;li&gt; or an valid email address&lt;/li&gt;&lt;li&gt;or one or more of the user do not exist&lt;/li&gt;&lt;li&gt;the conversation does not exist&lt;/li&gt;&lt;li&gt;the conversation is not of type COMMUNITY&lt;/li&gt;&lt;li&gt;a field constraint is violated&lt;/li&gt;&lt;/ul&gt; </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeParticipantCommunityCall(String convId, List<String> participants, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/conversations/community/{convId}/participants"
            .replace("{" + "convId" + "}", localVarApiClient.escapeString(convId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (participants != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "participants", participants));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeParticipantCommunityValidateBeforeCall(String convId, List<String> participants, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'convId' is set
        if (convId == null) {
            throw new ApiException("Missing the required parameter 'convId' when calling removeParticipantCommunity(Async)");
        }

        // verify the required parameter 'participants' is set
        if (participants == null) {
            throw new ApiException("Missing the required parameter 'participants' when calling removeParticipantCommunity(Async)");
        }

        return removeParticipantCommunityCall(convId, participants, _callback);

    }

    /**
     * Removes participants from a community
     * Removes one or more participants from the given community. The last participant of a community cannot be removed. This operation can only be performed by a user who is already a member of the community. OauthScopes: WRITE_CONVERSATIONS, MANAGE_CONVERSATIONS
     * @param convId The ID of the conversation from which the participant have to be removed (required)
     * @param participants The IDs or the unique email addresses of the Circuit users that have to be removed (required)
     * @return Conversation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Gets the conversation object from which the participants were removed. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request cannot be fulfilled due to bad syntax: &lt;ul&gt;&lt;/li&gt;the userIds passed as parameter are not provided in the correct format&lt;/li&gt;&lt;li&gt; or an valid email address&lt;/li&gt;&lt;li&gt;or one or more of the user do not exist&lt;/li&gt;&lt;li&gt;the conversation does not exist&lt;/li&gt;&lt;li&gt;the conversation is not of type COMMUNITY&lt;/li&gt;&lt;li&gt;a field constraint is violated&lt;/li&gt;&lt;/ul&gt; </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public Conversation removeParticipantCommunity(String convId, List<String> participants) throws ApiException {
        ApiResponse<Conversation> localVarResp = removeParticipantCommunityWithHttpInfo(convId, participants);
        return localVarResp.getData();
    }

    /**
     * Removes participants from a community
     * Removes one or more participants from the given community. The last participant of a community cannot be removed. This operation can only be performed by a user who is already a member of the community. OauthScopes: WRITE_CONVERSATIONS, MANAGE_CONVERSATIONS
     * @param convId The ID of the conversation from which the participant have to be removed (required)
     * @param participants The IDs or the unique email addresses of the Circuit users that have to be removed (required)
     * @return ApiResponse&lt;Conversation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Gets the conversation object from which the participants were removed. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request cannot be fulfilled due to bad syntax: &lt;ul&gt;&lt;/li&gt;the userIds passed as parameter are not provided in the correct format&lt;/li&gt;&lt;li&gt; or an valid email address&lt;/li&gt;&lt;li&gt;or one or more of the user do not exist&lt;/li&gt;&lt;li&gt;the conversation does not exist&lt;/li&gt;&lt;li&gt;the conversation is not of type COMMUNITY&lt;/li&gt;&lt;li&gt;a field constraint is violated&lt;/li&gt;&lt;/ul&gt; </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Conversation> removeParticipantCommunityWithHttpInfo(String convId, List<String> participants) throws ApiException {
        okhttp3.Call localVarCall = removeParticipantCommunityValidateBeforeCall(convId, participants, null);
        Type localVarReturnType = new TypeToken<Conversation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Removes participants from a community (asynchronously)
     * Removes one or more participants from the given community. The last participant of a community cannot be removed. This operation can only be performed by a user who is already a member of the community. OauthScopes: WRITE_CONVERSATIONS, MANAGE_CONVERSATIONS
     * @param convId The ID of the conversation from which the participant have to be removed (required)
     * @param participants The IDs or the unique email addresses of the Circuit users that have to be removed (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Gets the conversation object from which the participants were removed. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request cannot be fulfilled due to bad syntax: &lt;ul&gt;&lt;/li&gt;the userIds passed as parameter are not provided in the correct format&lt;/li&gt;&lt;li&gt; or an valid email address&lt;/li&gt;&lt;li&gt;or one or more of the user do not exist&lt;/li&gt;&lt;li&gt;the conversation does not exist&lt;/li&gt;&lt;li&gt;the conversation is not of type COMMUNITY&lt;/li&gt;&lt;li&gt;a field constraint is violated&lt;/li&gt;&lt;/ul&gt; </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeParticipantCommunityAsync(String convId, List<String> participants, final ApiCallback<Conversation> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeParticipantCommunityValidateBeforeCall(convId, participants, _callback);
        Type localVarReturnType = new TypeToken<Conversation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for removeParticipantGroup
     * @param convId The ID of the conversation from which the participant have to be removed (required)
     * @param participants The IDs or the unique email addresses of the Circuit users that have to be removed (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Gets the conversation object from which the participants were removed. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request cannot be fulfilled due to bad syntax: &lt;ul&gt;&lt;li&gt;the userIds passed as parameter are not provided in the correct format&lt;/li&gt;&lt;li&gt; or an valid email address&lt;/li&gt;&lt;li&gt;or one or more of the user do not exist&lt;/li&gt;&lt;li&gt;the conversation does not exist&lt;/li&gt;&lt;li&gt;the conversation is not of type GROUP&lt;/li&gt;&lt;li&gt;a field constraint is violated&lt;/li&gt;&lt;/ul&gt; </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeParticipantGroupCall(String convId, List<String> participants, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/conversations/group/{convId}/participants"
            .replace("{" + "convId" + "}", localVarApiClient.escapeString(convId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (participants != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "participants", participants));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeParticipantGroupValidateBeforeCall(String convId, List<String> participants, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'convId' is set
        if (convId == null) {
            throw new ApiException("Missing the required parameter 'convId' when calling removeParticipantGroup(Async)");
        }

        // verify the required parameter 'participants' is set
        if (participants == null) {
            throw new ApiException("Missing the required parameter 'participants' when calling removeParticipantGroup(Async)");
        }

        return removeParticipantGroupCall(convId, participants, _callback);

    }

    /**
     * Removes participants from a group conversation
     * Removes one or more participants from the given group conversation. The last participant of a group conversation cannot be removed. This operation can only be performed on behalf of a user who is already a member of the conversation. OauthScopes: WRITE_CONVERSATIONS, MANAGE_CONVERSATIONS
     * @param convId The ID of the conversation from which the participant have to be removed (required)
     * @param participants The IDs or the unique email addresses of the Circuit users that have to be removed (required)
     * @return Conversation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Gets the conversation object from which the participants were removed. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request cannot be fulfilled due to bad syntax: &lt;ul&gt;&lt;li&gt;the userIds passed as parameter are not provided in the correct format&lt;/li&gt;&lt;li&gt; or an valid email address&lt;/li&gt;&lt;li&gt;or one or more of the user do not exist&lt;/li&gt;&lt;li&gt;the conversation does not exist&lt;/li&gt;&lt;li&gt;the conversation is not of type GROUP&lt;/li&gt;&lt;li&gt;a field constraint is violated&lt;/li&gt;&lt;/ul&gt; </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public Conversation removeParticipantGroup(String convId, List<String> participants) throws ApiException {
        ApiResponse<Conversation> localVarResp = removeParticipantGroupWithHttpInfo(convId, participants);
        return localVarResp.getData();
    }

    /**
     * Removes participants from a group conversation
     * Removes one or more participants from the given group conversation. The last participant of a group conversation cannot be removed. This operation can only be performed on behalf of a user who is already a member of the conversation. OauthScopes: WRITE_CONVERSATIONS, MANAGE_CONVERSATIONS
     * @param convId The ID of the conversation from which the participant have to be removed (required)
     * @param participants The IDs or the unique email addresses of the Circuit users that have to be removed (required)
     * @return ApiResponse&lt;Conversation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Gets the conversation object from which the participants were removed. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request cannot be fulfilled due to bad syntax: &lt;ul&gt;&lt;li&gt;the userIds passed as parameter are not provided in the correct format&lt;/li&gt;&lt;li&gt; or an valid email address&lt;/li&gt;&lt;li&gt;or one or more of the user do not exist&lt;/li&gt;&lt;li&gt;the conversation does not exist&lt;/li&gt;&lt;li&gt;the conversation is not of type GROUP&lt;/li&gt;&lt;li&gt;a field constraint is violated&lt;/li&gt;&lt;/ul&gt; </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Conversation> removeParticipantGroupWithHttpInfo(String convId, List<String> participants) throws ApiException {
        okhttp3.Call localVarCall = removeParticipantGroupValidateBeforeCall(convId, participants, null);
        Type localVarReturnType = new TypeToken<Conversation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Removes participants from a group conversation (asynchronously)
     * Removes one or more participants from the given group conversation. The last participant of a group conversation cannot be removed. This operation can only be performed on behalf of a user who is already a member of the conversation. OauthScopes: WRITE_CONVERSATIONS, MANAGE_CONVERSATIONS
     * @param convId The ID of the conversation from which the participant have to be removed (required)
     * @param participants The IDs or the unique email addresses of the Circuit users that have to be removed (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Gets the conversation object from which the participants were removed. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request cannot be fulfilled due to bad syntax: &lt;ul&gt;&lt;li&gt;the userIds passed as parameter are not provided in the correct format&lt;/li&gt;&lt;li&gt; or an valid email address&lt;/li&gt;&lt;li&gt;or one or more of the user do not exist&lt;/li&gt;&lt;li&gt;the conversation does not exist&lt;/li&gt;&lt;li&gt;the conversation is not of type GROUP&lt;/li&gt;&lt;li&gt;a field constraint is violated&lt;/li&gt;&lt;/ul&gt; </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeParticipantGroupAsync(String convId, List<String> participants, final ApiCallback<Conversation> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeParticipantGroupValidateBeforeCall(convId, participants, _callback);
        Type localVarReturnType = new TypeToken<Conversation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for resolveInvitationToken
     * @param token The invite token to resolve (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the conversation object that belongs to the invite token if you are member of the conversation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> In case no invitation token was send </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If the token does not exist or you are not member of the conversation  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resolveInvitationTokenCall(String token, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/conversations/resolveinvitetoken";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call resolveInvitationTokenValidateBeforeCall(String token, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling resolveInvitationToken(Async)");
        }

        return resolveInvitationTokenCall(token, _callback);

    }

    /**
     * Resolves an invite token to a conversation
     * Resolves an invite token to a conversation OauthScopes: READ_CONVERSATIONS
     * @param token The invite token to resolve (required)
     * @return Conversation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the conversation object that belongs to the invite token if you are member of the conversation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> In case no invitation token was send </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If the token does not exist or you are not member of the conversation  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public Conversation resolveInvitationToken(String token) throws ApiException {
        ApiResponse<Conversation> localVarResp = resolveInvitationTokenWithHttpInfo(token);
        return localVarResp.getData();
    }

    /**
     * Resolves an invite token to a conversation
     * Resolves an invite token to a conversation OauthScopes: READ_CONVERSATIONS
     * @param token The invite token to resolve (required)
     * @return ApiResponse&lt;Conversation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the conversation object that belongs to the invite token if you are member of the conversation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> In case no invitation token was send </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If the token does not exist or you are not member of the conversation  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Conversation> resolveInvitationTokenWithHttpInfo(String token) throws ApiException {
        okhttp3.Call localVarCall = resolveInvitationTokenValidateBeforeCall(token, null);
        Type localVarReturnType = new TypeToken<Conversation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Resolves an invite token to a conversation (asynchronously)
     * Resolves an invite token to a conversation OauthScopes: READ_CONVERSATIONS
     * @param token The invite token to resolve (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the conversation object that belongs to the invite token if you are member of the conversation </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> In case no invitation token was send </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> If the token does not exist or you are not member of the conversation  </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resolveInvitationTokenAsync(String token, final ApiCallback<Conversation> _callback) throws ApiException {

        okhttp3.Call localVarCall = resolveInvitationTokenValidateBeforeCall(token, _callback);
        Type localVarReturnType = new TypeToken<Conversation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for searchConversations
     * @param term The search term (required)
     * @param includeItemIds Optional parameter to specify if a deep or normal search is executed. In a deep search all matching item IDs inside every conversation are returned (up to a maximum of 100). For a normal search only the conversation IDs are returned. Default is a normal search (without item IDs). (optional, default to false)
     * @param scope The search scope, FILES||PEOPLE||MEMBERS||MESSAGES||SENTBY||ALL||CONVERSATIONS||LABEL||FILTER (optional, default to ALL)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of conversations and items that match the term </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request cannot be fulfilled due to bad syntax: &lt;ul&gt;&lt;li&gt;the user is no participant of the conversation&lt;/li&gt;&lt;li&gt;a field constraint is violated&lt;/li&gt;&lt;/ul&gt; </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchConversationsCall(String term, Boolean includeItemIds, String scope, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/conversations/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (term != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("term", term));
        }

        if (includeItemIds != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeItemIds", includeItemIds));
        }

        if (scope != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("scope", scope));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchConversationsValidateBeforeCall(String term, Boolean includeItemIds, String scope, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'term' is set
        if (term == null) {
            throw new ApiException("Missing the required parameter 'term' when calling searchConversations(Async)");
        }

        return searchConversationsCall(term, includeItemIds, scope, _callback);

    }

    /**
     * Performs a conversation search
     * Performs a search for conversation content. A maximum of 100 conversations is returned. If you hit this limit you should refine the search term. OauthScopes: READ_CONVERSATIONS
     * @param term The search term (required)
     * @param includeItemIds Optional parameter to specify if a deep or normal search is executed. In a deep search all matching item IDs inside every conversation are returned (up to a maximum of 100). For a normal search only the conversation IDs are returned. Default is a normal search (without item IDs). (optional, default to false)
     * @param scope The search scope, FILES||PEOPLE||MEMBERS||MESSAGES||SENTBY||ALL||CONVERSATIONS||LABEL||FILTER (optional, default to ALL)
     * @return ConversationSearchResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of conversations and items that match the term </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request cannot be fulfilled due to bad syntax: &lt;ul&gt;&lt;li&gt;the user is no participant of the conversation&lt;/li&gt;&lt;li&gt;a field constraint is violated&lt;/li&gt;&lt;/ul&gt; </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public ConversationSearchResult searchConversations(String term, Boolean includeItemIds, String scope) throws ApiException {
        ApiResponse<ConversationSearchResult> localVarResp = searchConversationsWithHttpInfo(term, includeItemIds, scope);
        return localVarResp.getData();
    }

    /**
     * Performs a conversation search
     * Performs a search for conversation content. A maximum of 100 conversations is returned. If you hit this limit you should refine the search term. OauthScopes: READ_CONVERSATIONS
     * @param term The search term (required)
     * @param includeItemIds Optional parameter to specify if a deep or normal search is executed. In a deep search all matching item IDs inside every conversation are returned (up to a maximum of 100). For a normal search only the conversation IDs are returned. Default is a normal search (without item IDs). (optional, default to false)
     * @param scope The search scope, FILES||PEOPLE||MEMBERS||MESSAGES||SENTBY||ALL||CONVERSATIONS||LABEL||FILTER (optional, default to ALL)
     * @return ApiResponse&lt;ConversationSearchResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of conversations and items that match the term </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request cannot be fulfilled due to bad syntax: &lt;ul&gt;&lt;li&gt;the user is no participant of the conversation&lt;/li&gt;&lt;li&gt;a field constraint is violated&lt;/li&gt;&lt;/ul&gt; </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConversationSearchResult> searchConversationsWithHttpInfo(String term, Boolean includeItemIds, String scope) throws ApiException {
        okhttp3.Call localVarCall = searchConversationsValidateBeforeCall(term, includeItemIds, scope, null);
        Type localVarReturnType = new TypeToken<ConversationSearchResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Performs a conversation search (asynchronously)
     * Performs a search for conversation content. A maximum of 100 conversations is returned. If you hit this limit you should refine the search term. OauthScopes: READ_CONVERSATIONS
     * @param term The search term (required)
     * @param includeItemIds Optional parameter to specify if a deep or normal search is executed. In a deep search all matching item IDs inside every conversation are returned (up to a maximum of 100). For a normal search only the conversation IDs are returned. Default is a normal search (without item IDs). (optional, default to false)
     * @param scope The search scope, FILES||PEOPLE||MEMBERS||MESSAGES||SENTBY||ALL||CONVERSATIONS||LABEL||FILTER (optional, default to ALL)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list of conversations and items that match the term </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request cannot be fulfilled due to bad syntax: &lt;ul&gt;&lt;li&gt;the user is no participant of the conversation&lt;/li&gt;&lt;li&gt;a field constraint is violated&lt;/li&gt;&lt;/ul&gt; </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchConversationsAsync(String term, Boolean includeItemIds, String scope, final ApiCallback<ConversationSearchResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchConversationsValidateBeforeCall(term, includeItemIds, scope, _callback);
        Type localVarReturnType = new TypeToken<ConversationSearchResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for unFlagItem
     * @param convId The ID of the conversation to which the item belongs (required)
     * @param itemId The ID of the item that will be flagged (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The flagged state of item was successfully removed </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request cannot be fulfilled due to bad syntax: &lt;ul&gt;&lt;li&gt;the conversation does not exist&lt;/li&gt;&lt;li&gt;the item does not exist&lt;/li&gt;&lt;li&gt;the user is no participant of the conversation&lt;/li&gt;&lt;li&gt;a field constraint is violated&lt;/li&gt;&lt;/ul&gt; </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call unFlagItemCall(String convId, String itemId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/conversations/{convId}/messages/{itemId}/flag"
            .replace("{" + "convId" + "}", localVarApiClient.escapeString(convId.toString()))
            .replace("{" + "itemId" + "}", localVarApiClient.escapeString(itemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call unFlagItemValidateBeforeCall(String convId, String itemId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'convId' is set
        if (convId == null) {
            throw new ApiException("Missing the required parameter 'convId' when calling unFlagItem(Async)");
        }

        // verify the required parameter 'itemId' is set
        if (itemId == null) {
            throw new ApiException("Missing the required parameter 'itemId' when calling unFlagItem(Async)");
        }

        return unFlagItemCall(convId, itemId, _callback);

    }

    /**
     * Removes the flag from a message
     * Removes the flag from a given message that is posted to the given conversation. OauthScopes: WRITE_CONVERSATIONS, ORGANIZE_CONVERSATIONS
     * @param convId The ID of the conversation to which the item belongs (required)
     * @param itemId The ID of the item that will be flagged (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The flagged state of item was successfully removed </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request cannot be fulfilled due to bad syntax: &lt;ul&gt;&lt;li&gt;the conversation does not exist&lt;/li&gt;&lt;li&gt;the item does not exist&lt;/li&gt;&lt;li&gt;the user is no participant of the conversation&lt;/li&gt;&lt;li&gt;a field constraint is violated&lt;/li&gt;&lt;/ul&gt; </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public void unFlagItem(String convId, String itemId) throws ApiException {
        unFlagItemWithHttpInfo(convId, itemId);
    }

    /**
     * Removes the flag from a message
     * Removes the flag from a given message that is posted to the given conversation. OauthScopes: WRITE_CONVERSATIONS, ORGANIZE_CONVERSATIONS
     * @param convId The ID of the conversation to which the item belongs (required)
     * @param itemId The ID of the item that will be flagged (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The flagged state of item was successfully removed </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request cannot be fulfilled due to bad syntax: &lt;ul&gt;&lt;li&gt;the conversation does not exist&lt;/li&gt;&lt;li&gt;the item does not exist&lt;/li&gt;&lt;li&gt;the user is no participant of the conversation&lt;/li&gt;&lt;li&gt;a field constraint is violated&lt;/li&gt;&lt;/ul&gt; </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> unFlagItemWithHttpInfo(String convId, String itemId) throws ApiException {
        okhttp3.Call localVarCall = unFlagItemValidateBeforeCall(convId, itemId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Removes the flag from a message (asynchronously)
     * Removes the flag from a given message that is posted to the given conversation. OauthScopes: WRITE_CONVERSATIONS, ORGANIZE_CONVERSATIONS
     * @param convId The ID of the conversation to which the item belongs (required)
     * @param itemId The ID of the item that will be flagged (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The flagged state of item was successfully removed </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request cannot be fulfilled due to bad syntax: &lt;ul&gt;&lt;li&gt;the conversation does not exist&lt;/li&gt;&lt;li&gt;the item does not exist&lt;/li&gt;&lt;li&gt;the user is no participant of the conversation&lt;/li&gt;&lt;li&gt;a field constraint is violated&lt;/li&gt;&lt;/ul&gt; </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call unFlagItemAsync(String convId, String itemId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = unFlagItemValidateBeforeCall(convId, itemId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for unPinAConversation
     * @param convId The ID of the conversation (required)
     * @param itemId The ID of the topic (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the pinned conversation conversation after unpinning a topic </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request cannot be fulfilled due to bad syntax </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call unPinAConversationCall(String convId, String itemId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/conversations/{convId}/pins/{itemId}"
            .replace("{" + "convId" + "}", localVarApiClient.escapeString(convId.toString()))
            .replace("{" + "itemId" + "}", localVarApiClient.escapeString(itemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call unPinAConversationValidateBeforeCall(String convId, String itemId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'convId' is set
        if (convId == null) {
            throw new ApiException("Missing the required parameter 'convId' when calling unPinAConversation(Async)");
        }

        // verify the required parameter 'itemId' is set
        if (itemId == null) {
            throw new ApiException("Missing the required parameter 'itemId' when calling unPinAConversation(Async)");
        }

        return unPinAConversationCall(convId, itemId, _callback);

    }

    /**
     * Unpins a topic of a conversation
     * Unpins a topic of a conversation OauthScopes: READ_CONVERSATIONS
     * @param convId The ID of the conversation (required)
     * @param itemId The ID of the topic (required)
     * @return Conversation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the pinned conversation conversation after unpinning a topic </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request cannot be fulfilled due to bad syntax </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public Conversation unPinAConversation(String convId, String itemId) throws ApiException {
        ApiResponse<Conversation> localVarResp = unPinAConversationWithHttpInfo(convId, itemId);
        return localVarResp.getData();
    }

    /**
     * Unpins a topic of a conversation
     * Unpins a topic of a conversation OauthScopes: READ_CONVERSATIONS
     * @param convId The ID of the conversation (required)
     * @param itemId The ID of the topic (required)
     * @return ApiResponse&lt;Conversation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the pinned conversation conversation after unpinning a topic </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request cannot be fulfilled due to bad syntax </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Conversation> unPinAConversationWithHttpInfo(String convId, String itemId) throws ApiException {
        okhttp3.Call localVarCall = unPinAConversationValidateBeforeCall(convId, itemId, null);
        Type localVarReturnType = new TypeToken<Conversation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Unpins a topic of a conversation (asynchronously)
     * Unpins a topic of a conversation OauthScopes: READ_CONVERSATIONS
     * @param convId The ID of the conversation (required)
     * @param itemId The ID of the topic (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Returns the pinned conversation conversation after unpinning a topic </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request cannot be fulfilled due to bad syntax </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call unPinAConversationAsync(String convId, String itemId, final ApiCallback<Conversation> _callback) throws ApiException {

        okhttp3.Call localVarCall = unPinAConversationValidateBeforeCall(convId, itemId, _callback);
        Type localVarReturnType = new TypeToken<Conversation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for unassignLabel
     * @param convId The ID of the conversation from which the label is removed (required)
     * @param labelId The actual label  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The label was successfully removed </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request cannot be fulfilled due to bad syntax: &lt;ul&gt;&lt;li&gt;a field constraint is violated&lt;/li&gt;&lt;li&gt;the label was not assigned to the conversation&lt;/li&gt;&lt;/ul&gt; </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call unassignLabelCall(String convId, String labelId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/conversations/{convId}/label/{labelId}"
            .replace("{" + "convId" + "}", localVarApiClient.escapeString(convId.toString()))
            .replace("{" + "labelId" + "}", localVarApiClient.escapeString(labelId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call unassignLabelValidateBeforeCall(String convId, String labelId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'convId' is set
        if (convId == null) {
            throw new ApiException("Missing the required parameter 'convId' when calling unassignLabel(Async)");
        }

        // verify the required parameter 'labelId' is set
        if (labelId == null) {
            throw new ApiException("Missing the required parameter 'labelId' when calling unassignLabel(Async)");
        }

        return unassignLabelCall(convId, labelId, _callback);

    }

    /**
     * Removes a label from a conversation
     * Removes a label from a conversation, you can search and organize your conversations based on these labels OauthScopes: WRITE_CONVERSATIONS
     * @param convId The ID of the conversation from which the label is removed (required)
     * @param labelId The actual label  (required)
     * @return Label
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The label was successfully removed </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request cannot be fulfilled due to bad syntax: &lt;ul&gt;&lt;li&gt;a field constraint is violated&lt;/li&gt;&lt;li&gt;the label was not assigned to the conversation&lt;/li&gt;&lt;/ul&gt; </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public Label unassignLabel(String convId, String labelId) throws ApiException {
        ApiResponse<Label> localVarResp = unassignLabelWithHttpInfo(convId, labelId);
        return localVarResp.getData();
    }

    /**
     * Removes a label from a conversation
     * Removes a label from a conversation, you can search and organize your conversations based on these labels OauthScopes: WRITE_CONVERSATIONS
     * @param convId The ID of the conversation from which the label is removed (required)
     * @param labelId The actual label  (required)
     * @return ApiResponse&lt;Label&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The label was successfully removed </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request cannot be fulfilled due to bad syntax: &lt;ul&gt;&lt;li&gt;a field constraint is violated&lt;/li&gt;&lt;li&gt;the label was not assigned to the conversation&lt;/li&gt;&lt;/ul&gt; </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Label> unassignLabelWithHttpInfo(String convId, String labelId) throws ApiException {
        okhttp3.Call localVarCall = unassignLabelValidateBeforeCall(convId, labelId, null);
        Type localVarReturnType = new TypeToken<Label>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Removes a label from a conversation (asynchronously)
     * Removes a label from a conversation, you can search and organize your conversations based on these labels OauthScopes: WRITE_CONVERSATIONS
     * @param convId The ID of the conversation from which the label is removed (required)
     * @param labelId The actual label  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The label was successfully removed </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request cannot be fulfilled due to bad syntax: &lt;ul&gt;&lt;li&gt;a field constraint is violated&lt;/li&gt;&lt;li&gt;the label was not assigned to the conversation&lt;/li&gt;&lt;/ul&gt; </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call unassignLabelAsync(String convId, String labelId, final ApiCallback<Label> _callback) throws ApiException {

        okhttp3.Call localVarCall = unassignLabelValidateBeforeCall(convId, labelId, _callback);
        Type localVarReturnType = new TypeToken<Label>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for undoArchiveConversation
     * @param convId The ID of the conversation which will be unmarked as muted (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The conversation was successfully unmarked </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request cannot be fulfilled due to bad syntax: &lt;ul&gt;&lt;li&gt;the conversation does not exist&lt;/li&gt;&lt;li&gt;the user is no participant of the conversation&lt;/li&gt;&lt;li&gt;a field constraint is violated&lt;/li&gt;&lt;li&gt;the conversation was not marked before&lt;/li&gt;&lt;/ul&gt; </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call undoArchiveConversationCall(String convId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/conversations/{convId}/archive"
            .replace("{" + "convId" + "}", localVarApiClient.escapeString(convId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call undoArchiveConversationValidateBeforeCall(String convId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'convId' is set
        if (convId == null) {
            throw new ApiException("Missing the required parameter 'convId' when calling undoArchiveConversation(Async)");
        }

        return undoArchiveConversationCall(convId, _callback);

    }

    /**
     * Unmute conversation
     * The conversation will no longer be archived but active again OauthScopes: WRITE_CONVERSATIONS
     * @param convId The ID of the conversation which will be unmarked as muted (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The conversation was successfully unmarked </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request cannot be fulfilled due to bad syntax: &lt;ul&gt;&lt;li&gt;the conversation does not exist&lt;/li&gt;&lt;li&gt;the user is no participant of the conversation&lt;/li&gt;&lt;li&gt;a field constraint is violated&lt;/li&gt;&lt;li&gt;the conversation was not marked before&lt;/li&gt;&lt;/ul&gt; </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public void undoArchiveConversation(String convId) throws ApiException {
        undoArchiveConversationWithHttpInfo(convId);
    }

    /**
     * Unmute conversation
     * The conversation will no longer be archived but active again OauthScopes: WRITE_CONVERSATIONS
     * @param convId The ID of the conversation which will be unmarked as muted (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The conversation was successfully unmarked </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request cannot be fulfilled due to bad syntax: &lt;ul&gt;&lt;li&gt;the conversation does not exist&lt;/li&gt;&lt;li&gt;the user is no participant of the conversation&lt;/li&gt;&lt;li&gt;a field constraint is violated&lt;/li&gt;&lt;li&gt;the conversation was not marked before&lt;/li&gt;&lt;/ul&gt; </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> undoArchiveConversationWithHttpInfo(String convId) throws ApiException {
        okhttp3.Call localVarCall = undoArchiveConversationValidateBeforeCall(convId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Unmute conversation (asynchronously)
     * The conversation will no longer be archived but active again OauthScopes: WRITE_CONVERSATIONS
     * @param convId The ID of the conversation which will be unmarked as muted (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The conversation was successfully unmarked </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request cannot be fulfilled due to bad syntax: &lt;ul&gt;&lt;li&gt;the conversation does not exist&lt;/li&gt;&lt;li&gt;the user is no participant of the conversation&lt;/li&gt;&lt;li&gt;a field constraint is violated&lt;/li&gt;&lt;li&gt;the conversation was not marked before&lt;/li&gt;&lt;/ul&gt; </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call undoArchiveConversationAsync(String convId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = undoArchiveConversationValidateBeforeCall(convId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for unlikeItem
     * @param convId The ID of the conversation to which the item belongs (required)
     * @param itemId The ID of the item that will be unliked (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The item was successful unliked </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request cannot be fulfilled due to bad syntax: &lt;ul&gt;&lt;li&gt;the conversation does not exist&lt;/li&gt;&lt;li&gt;the item does not exist&lt;/li&gt;&lt;li&gt;the user is no participant of the conversation&lt;/li&gt;&lt;li&gt;a field constraint is violated&lt;/li&gt;&lt;/ul&gt; </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call unlikeItemCall(String convId, String itemId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/conversations/{convId}/messages/{itemId}/like"
            .replace("{" + "convId" + "}", localVarApiClient.escapeString(convId.toString()))
            .replace("{" + "itemId" + "}", localVarApiClient.escapeString(itemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call unlikeItemValidateBeforeCall(String convId, String itemId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'convId' is set
        if (convId == null) {
            throw new ApiException("Missing the required parameter 'convId' when calling unlikeItem(Async)");
        }

        // verify the required parameter 'itemId' is set
        if (itemId == null) {
            throw new ApiException("Missing the required parameter 'itemId' when calling unlikeItem(Async)");
        }

        return unlikeItemCall(convId, itemId, _callback);

    }

    /**
     * Removes a \&quot;like\&quot; from a message
     * Removes a \&quot;like\&quot; from the given message in the given conversation OauthScopes: WRITE_CONVERSATIONS, UPDATE_CONVERSATION_CONTENT
     * @param convId The ID of the conversation to which the item belongs (required)
     * @param itemId The ID of the item that will be unliked (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The item was successful unliked </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request cannot be fulfilled due to bad syntax: &lt;ul&gt;&lt;li&gt;the conversation does not exist&lt;/li&gt;&lt;li&gt;the item does not exist&lt;/li&gt;&lt;li&gt;the user is no participant of the conversation&lt;/li&gt;&lt;li&gt;a field constraint is violated&lt;/li&gt;&lt;/ul&gt; </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public void unlikeItem(String convId, String itemId) throws ApiException {
        unlikeItemWithHttpInfo(convId, itemId);
    }

    /**
     * Removes a \&quot;like\&quot; from a message
     * Removes a \&quot;like\&quot; from the given message in the given conversation OauthScopes: WRITE_CONVERSATIONS, UPDATE_CONVERSATION_CONTENT
     * @param convId The ID of the conversation to which the item belongs (required)
     * @param itemId The ID of the item that will be unliked (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The item was successful unliked </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request cannot be fulfilled due to bad syntax: &lt;ul&gt;&lt;li&gt;the conversation does not exist&lt;/li&gt;&lt;li&gt;the item does not exist&lt;/li&gt;&lt;li&gt;the user is no participant of the conversation&lt;/li&gt;&lt;li&gt;a field constraint is violated&lt;/li&gt;&lt;/ul&gt; </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> unlikeItemWithHttpInfo(String convId, String itemId) throws ApiException {
        okhttp3.Call localVarCall = unlikeItemValidateBeforeCall(convId, itemId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Removes a \&quot;like\&quot; from a message (asynchronously)
     * Removes a \&quot;like\&quot; from the given message in the given conversation OauthScopes: WRITE_CONVERSATIONS, UPDATE_CONVERSATION_CONTENT
     * @param convId The ID of the conversation to which the item belongs (required)
     * @param itemId The ID of the item that will be unliked (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The item was successful unliked </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request cannot be fulfilled due to bad syntax: &lt;ul&gt;&lt;li&gt;the conversation does not exist&lt;/li&gt;&lt;li&gt;the item does not exist&lt;/li&gt;&lt;li&gt;the user is no participant of the conversation&lt;/li&gt;&lt;li&gt;a field constraint is violated&lt;/li&gt;&lt;/ul&gt; </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call unlikeItemAsync(String convId, String itemId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = unlikeItemValidateBeforeCall(convId, itemId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for unmoderateConversation
     * @param convId The ID of the conversation which will be set to unmoderated state (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The conversation is in unmoderated mode </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Forbidden to edit this conversation </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Permission denied </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call unmoderateConversationCall(String convId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/conversations/unmoderate/{convId}"
            .replace("{" + "convId" + "}", localVarApiClient.escapeString(convId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call unmoderateConversationValidateBeforeCall(String convId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'convId' is set
        if (convId == null) {
            throw new ApiException("Missing the required parameter 'convId' when calling unmoderateConversation(Async)");
        }

        return unmoderateConversationCall(convId, _callback);

    }

    /**
     * Set conversation unmoderated
     * Set a conversation to unmoderatd mode OauthScopes: WRITE_CONVERSATIONS, MODERATE_CONVERSATIONS
     * @param convId The ID of the conversation which will be set to unmoderated state (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The conversation is in unmoderated mode </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Forbidden to edit this conversation </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Permission denied </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public void unmoderateConversation(String convId) throws ApiException {
        unmoderateConversationWithHttpInfo(convId);
    }

    /**
     * Set conversation unmoderated
     * Set a conversation to unmoderatd mode OauthScopes: WRITE_CONVERSATIONS, MODERATE_CONVERSATIONS
     * @param convId The ID of the conversation which will be set to unmoderated state (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The conversation is in unmoderated mode </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Forbidden to edit this conversation </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Permission denied </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> unmoderateConversationWithHttpInfo(String convId) throws ApiException {
        okhttp3.Call localVarCall = unmoderateConversationValidateBeforeCall(convId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Set conversation unmoderated (asynchronously)
     * Set a conversation to unmoderatd mode OauthScopes: WRITE_CONVERSATIONS, MODERATE_CONVERSATIONS
     * @param convId The ID of the conversation which will be set to unmoderated state (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The conversation is in unmoderated mode </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Forbidden to edit this conversation </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Permission denied </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call unmoderateConversationAsync(String convId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = unmoderateConversationValidateBeforeCall(convId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateConversationCommunity
     * @param convId The ID of the conversation which should be updated (required)
     * @param description An optional description for the community conversation (optional)
     * @param topic An optional topic of the conversation. If not set the Circuit client will render the names of the participants as topic of the conversation (the first 4 names will be used) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Gets the updated conversation object with the new topic / description </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request cannot be fulfilled due to bad syntax: &lt;ul&gt;&lt;li&gt;the conversation does not exist&lt;/li&gt;&lt;li&gt;the conversation is not of type COMMUNITY&lt;/li&gt;&lt;li&gt;a field constraint is violated&lt;/li&gt;&lt;/ul&gt; </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateConversationCommunityCall(String convId, String description, String topic, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/conversations/community/{convId}"
            .replace("{" + "convId" + "}", localVarApiClient.escapeString(convId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (description != null) {
            localVarFormParams.put("description", description);
        }

        if (topic != null) {
            localVarFormParams.put("topic", topic);
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateConversationCommunityValidateBeforeCall(String convId, String description, String topic, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'convId' is set
        if (convId == null) {
            throw new ApiException("Missing the required parameter 'convId' when calling updateConversationCommunity(Async)");
        }

        return updateConversationCommunityCall(convId, description, topic, _callback);

    }

    /**
     * Updates the information of a community
     * Updates the information of the given community. OauthScopes: WRITE_CONVERSATIONS, MANAGE_CONVERSATIONS
     * @param convId The ID of the conversation which should be updated (required)
     * @param description An optional description for the community conversation (optional)
     * @param topic An optional topic of the conversation. If not set the Circuit client will render the names of the participants as topic of the conversation (the first 4 names will be used) (optional)
     * @return Conversation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Gets the updated conversation object with the new topic / description </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request cannot be fulfilled due to bad syntax: &lt;ul&gt;&lt;li&gt;the conversation does not exist&lt;/li&gt;&lt;li&gt;the conversation is not of type COMMUNITY&lt;/li&gt;&lt;li&gt;a field constraint is violated&lt;/li&gt;&lt;/ul&gt; </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public Conversation updateConversationCommunity(String convId, String description, String topic) throws ApiException {
        ApiResponse<Conversation> localVarResp = updateConversationCommunityWithHttpInfo(convId, description, topic);
        return localVarResp.getData();
    }

    /**
     * Updates the information of a community
     * Updates the information of the given community. OauthScopes: WRITE_CONVERSATIONS, MANAGE_CONVERSATIONS
     * @param convId The ID of the conversation which should be updated (required)
     * @param description An optional description for the community conversation (optional)
     * @param topic An optional topic of the conversation. If not set the Circuit client will render the names of the participants as topic of the conversation (the first 4 names will be used) (optional)
     * @return ApiResponse&lt;Conversation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Gets the updated conversation object with the new topic / description </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request cannot be fulfilled due to bad syntax: &lt;ul&gt;&lt;li&gt;the conversation does not exist&lt;/li&gt;&lt;li&gt;the conversation is not of type COMMUNITY&lt;/li&gt;&lt;li&gt;a field constraint is violated&lt;/li&gt;&lt;/ul&gt; </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Conversation> updateConversationCommunityWithHttpInfo(String convId, String description, String topic) throws ApiException {
        okhttp3.Call localVarCall = updateConversationCommunityValidateBeforeCall(convId, description, topic, null);
        Type localVarReturnType = new TypeToken<Conversation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates the information of a community (asynchronously)
     * Updates the information of the given community. OauthScopes: WRITE_CONVERSATIONS, MANAGE_CONVERSATIONS
     * @param convId The ID of the conversation which should be updated (required)
     * @param description An optional description for the community conversation (optional)
     * @param topic An optional topic of the conversation. If not set the Circuit client will render the names of the participants as topic of the conversation (the first 4 names will be used) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Gets the updated conversation object with the new topic / description </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request cannot be fulfilled due to bad syntax: &lt;ul&gt;&lt;li&gt;the conversation does not exist&lt;/li&gt;&lt;li&gt;the conversation is not of type COMMUNITY&lt;/li&gt;&lt;li&gt;a field constraint is violated&lt;/li&gt;&lt;/ul&gt; </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateConversationCommunityAsync(String convId, String description, String topic, final ApiCallback<Conversation> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateConversationCommunityValidateBeforeCall(convId, description, topic, _callback);
        Type localVarReturnType = new TypeToken<Conversation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateConversationGroup
     * @param convId The ID of the conversation which should be updated (required)
     * @param topic An optional topic of the conversation. If not set the Circuit client will render the names of the participants as topic of the conversation (the first 4 names will be used) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Gets the updated conversation object with the new topic </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request cannot be fulfilled due to bad syntax: &lt;ul&gt;&lt;li&gt;the conversation does not exist&lt;/li&gt;&lt;li&gt;the conversation is not of type GROUP&lt;/li&gt;&lt;li&gt;a field constraint is violated&lt;/li&gt;&lt;/ul&gt; </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateConversationGroupCall(String convId, String topic, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/conversations/group/{convId}"
            .replace("{" + "convId" + "}", localVarApiClient.escapeString(convId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (topic != null) {
            localVarFormParams.put("topic", topic);
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateConversationGroupValidateBeforeCall(String convId, String topic, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'convId' is set
        if (convId == null) {
            throw new ApiException("Missing the required parameter 'convId' when calling updateConversationGroup(Async)");
        }

        return updateConversationGroupCall(convId, topic, _callback);

    }

    /**
     * Updates the information of a group conversation
     * Updates the information of the given group conversation. OauthScopes: WRITE_CONVERSATIONS, MANAGE_CONVERSATIONS
     * @param convId The ID of the conversation which should be updated (required)
     * @param topic An optional topic of the conversation. If not set the Circuit client will render the names of the participants as topic of the conversation (the first 4 names will be used) (optional)
     * @return Conversation
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Gets the updated conversation object with the new topic </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request cannot be fulfilled due to bad syntax: &lt;ul&gt;&lt;li&gt;the conversation does not exist&lt;/li&gt;&lt;li&gt;the conversation is not of type GROUP&lt;/li&gt;&lt;li&gt;a field constraint is violated&lt;/li&gt;&lt;/ul&gt; </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public Conversation updateConversationGroup(String convId, String topic) throws ApiException {
        ApiResponse<Conversation> localVarResp = updateConversationGroupWithHttpInfo(convId, topic);
        return localVarResp.getData();
    }

    /**
     * Updates the information of a group conversation
     * Updates the information of the given group conversation. OauthScopes: WRITE_CONVERSATIONS, MANAGE_CONVERSATIONS
     * @param convId The ID of the conversation which should be updated (required)
     * @param topic An optional topic of the conversation. If not set the Circuit client will render the names of the participants as topic of the conversation (the first 4 names will be used) (optional)
     * @return ApiResponse&lt;Conversation&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Gets the updated conversation object with the new topic </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request cannot be fulfilled due to bad syntax: &lt;ul&gt;&lt;li&gt;the conversation does not exist&lt;/li&gt;&lt;li&gt;the conversation is not of type GROUP&lt;/li&gt;&lt;li&gt;a field constraint is violated&lt;/li&gt;&lt;/ul&gt; </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Conversation> updateConversationGroupWithHttpInfo(String convId, String topic) throws ApiException {
        okhttp3.Call localVarCall = updateConversationGroupValidateBeforeCall(convId, topic, null);
        Type localVarReturnType = new TypeToken<Conversation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates the information of a group conversation (asynchronously)
     * Updates the information of the given group conversation. OauthScopes: WRITE_CONVERSATIONS, MANAGE_CONVERSATIONS
     * @param convId The ID of the conversation which should be updated (required)
     * @param topic An optional topic of the conversation. If not set the Circuit client will render the names of the participants as topic of the conversation (the first 4 names will be used) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Gets the updated conversation object with the new topic </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request cannot be fulfilled due to bad syntax: &lt;ul&gt;&lt;li&gt;the conversation does not exist&lt;/li&gt;&lt;li&gt;the conversation is not of type GROUP&lt;/li&gt;&lt;li&gt;a field constraint is violated&lt;/li&gt;&lt;/ul&gt; </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateConversationGroupAsync(String convId, String topic, final ApiCallback<Conversation> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateConversationGroupValidateBeforeCall(convId, topic, _callback);
        Type localVarReturnType = new TypeToken<Conversation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateProfile
     * @param firstname The new firstname of the user (optional)
     * @param jobTitle The new job title of the user (optional)
     * @param lastname The new lastname of the user (optional)
     * @param locale The new locale of the user. One of EN_US, DE_DE, EN_GB, ES_ES, FR_FR, IT_IT, RU_RU, ZH_HANS_CN. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The modified user object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request cannot be fulfilled due to bad syntax: &lt;ul&gt;&lt;li&gt;the user does not exist&lt;/li&gt;&lt;li&gt;a field constraint is violated&lt;/li&gt;&lt;/ul&gt; </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateProfileCall(String firstname, String jobTitle, String lastname, String locale, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/users/profile";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (firstname != null) {
            localVarFormParams.put("firstname", firstname);
        }

        if (jobTitle != null) {
            localVarFormParams.put("jobTitle", jobTitle);
        }

        if (lastname != null) {
            localVarFormParams.put("lastname", lastname);
        }

        if (locale != null) {
            localVarFormParams.put("locale", locale);
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateProfileValidateBeforeCall(String firstname, String jobTitle, String lastname, String locale, final ApiCallback _callback) throws ApiException {
        return updateProfileCall(firstname, jobTitle, lastname, locale, _callback);

    }

    /**
     * Updates the user profile
     * Updates the user profile of the authenticated user OauthScopes: WRITE_USER_PROFILE
     * @param firstname The new firstname of the user (optional)
     * @param jobTitle The new job title of the user (optional)
     * @param lastname The new lastname of the user (optional)
     * @param locale The new locale of the user. One of EN_US, DE_DE, EN_GB, ES_ES, FR_FR, IT_IT, RU_RU, ZH_HANS_CN. (optional)
     * @return User
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The modified user object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request cannot be fulfilled due to bad syntax: &lt;ul&gt;&lt;li&gt;the user does not exist&lt;/li&gt;&lt;li&gt;a field constraint is violated&lt;/li&gt;&lt;/ul&gt; </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public User updateProfile(String firstname, String jobTitle, String lastname, String locale) throws ApiException {
        ApiResponse<User> localVarResp = updateProfileWithHttpInfo(firstname, jobTitle, lastname, locale);
        return localVarResp.getData();
    }

    /**
     * Updates the user profile
     * Updates the user profile of the authenticated user OauthScopes: WRITE_USER_PROFILE
     * @param firstname The new firstname of the user (optional)
     * @param jobTitle The new job title of the user (optional)
     * @param lastname The new lastname of the user (optional)
     * @param locale The new locale of the user. One of EN_US, DE_DE, EN_GB, ES_ES, FR_FR, IT_IT, RU_RU, ZH_HANS_CN. (optional)
     * @return ApiResponse&lt;User&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The modified user object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request cannot be fulfilled due to bad syntax: &lt;ul&gt;&lt;li&gt;the user does not exist&lt;/li&gt;&lt;li&gt;a field constraint is violated&lt;/li&gt;&lt;/ul&gt; </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<User> updateProfileWithHttpInfo(String firstname, String jobTitle, String lastname, String locale) throws ApiException {
        okhttp3.Call localVarCall = updateProfileValidateBeforeCall(firstname, jobTitle, lastname, locale, null);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates the user profile (asynchronously)
     * Updates the user profile of the authenticated user OauthScopes: WRITE_USER_PROFILE
     * @param firstname The new firstname of the user (optional)
     * @param jobTitle The new job title of the user (optional)
     * @param lastname The new lastname of the user (optional)
     * @param locale The new locale of the user. One of EN_US, DE_DE, EN_GB, ES_ES, FR_FR, IT_IT, RU_RU, ZH_HANS_CN. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The modified user object. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request cannot be fulfilled due to bad syntax: &lt;ul&gt;&lt;li&gt;the user does not exist&lt;/li&gt;&lt;li&gt;a field constraint is violated&lt;/li&gt;&lt;/ul&gt; </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateProfileAsync(String firstname, String jobTitle, String lastname, String locale, final ApiCallback<User> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateProfileValidateBeforeCall(firstname, jobTitle, lastname, locale, _callback);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateTextItem
     * @param convId The ID of the conversation to which the item belongs (required)
     * @param itemId The ID of the item to update (required)
     * @param attachments A comma separated list of attachment IDs from the file API. (optional)
     * @param content The actual content of the item (optional)
     * @param formMetaData The form meta data of the new text item (optional)
     * @param subject The subject (headline) of the new text item (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Gets the modified text item object </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request cannot be fulfilled due to bad syntax: &lt;ul&gt;&lt;li&gt;the conversation does not exist&lt;/li&gt;&lt;li&gt;the user is no participant of the conversation&lt;/li&gt;&lt;li&gt;a field constraint is violated&lt;/li&gt;&lt;/ul&gt; </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateTextItemCall(String convId, String itemId, List<String> attachments, String content, String formMetaData, String subject, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/conversations/{convId}/messages/{itemId}"
            .replace("{" + "convId" + "}", localVarApiClient.escapeString(convId.toString()))
            .replace("{" + "itemId" + "}", localVarApiClient.escapeString(itemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (attachments != null) {
            localVarFormParams.put("attachments", attachments);
        }

        if (content != null) {
            localVarFormParams.put("content", content);
        }

        if (formMetaData != null) {
            localVarFormParams.put("formMetaData", formMetaData);
        }

        if (subject != null) {
            localVarFormParams.put("subject", subject);
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "oauth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateTextItemValidateBeforeCall(String convId, String itemId, List<String> attachments, String content, String formMetaData, String subject, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'convId' is set
        if (convId == null) {
            throw new ApiException("Missing the required parameter 'convId' when calling updateTextItem(Async)");
        }

        // verify the required parameter 'itemId' is set
        if (itemId == null) {
            throw new ApiException("Missing the required parameter 'itemId' when calling updateTextItem(Async)");
        }

        return updateTextItemCall(convId, itemId, attachments, content, formMetaData, subject, _callback);

    }

    /**
     * Updates a message
     * Updates the content or subject of the existing message. Only the creator of the message is allowed to perform this operation. OauthScopes: WRITE_CONVERSATIONS, UPDATE_CONVERSATION_CONTENT
     * @param convId The ID of the conversation to which the item belongs (required)
     * @param itemId The ID of the item to update (required)
     * @param attachments A comma separated list of attachment IDs from the file API. (optional)
     * @param content The actual content of the item (optional)
     * @param formMetaData The form meta data of the new text item (optional)
     * @param subject The subject (headline) of the new text item (optional)
     * @return ConversationItem
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Gets the modified text item object </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request cannot be fulfilled due to bad syntax: &lt;ul&gt;&lt;li&gt;the conversation does not exist&lt;/li&gt;&lt;li&gt;the user is no participant of the conversation&lt;/li&gt;&lt;li&gt;a field constraint is violated&lt;/li&gt;&lt;/ul&gt; </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public ConversationItem updateTextItem(String convId, String itemId, List<String> attachments, String content, String formMetaData, String subject) throws ApiException {
        ApiResponse<ConversationItem> localVarResp = updateTextItemWithHttpInfo(convId, itemId, attachments, content, formMetaData, subject);
        return localVarResp.getData();
    }

    /**
     * Updates a message
     * Updates the content or subject of the existing message. Only the creator of the message is allowed to perform this operation. OauthScopes: WRITE_CONVERSATIONS, UPDATE_CONVERSATION_CONTENT
     * @param convId The ID of the conversation to which the item belongs (required)
     * @param itemId The ID of the item to update (required)
     * @param attachments A comma separated list of attachment IDs from the file API. (optional)
     * @param content The actual content of the item (optional)
     * @param formMetaData The form meta data of the new text item (optional)
     * @param subject The subject (headline) of the new text item (optional)
     * @return ApiResponse&lt;ConversationItem&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Gets the modified text item object </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request cannot be fulfilled due to bad syntax: &lt;ul&gt;&lt;li&gt;the conversation does not exist&lt;/li&gt;&lt;li&gt;the user is no participant of the conversation&lt;/li&gt;&lt;li&gt;a field constraint is violated&lt;/li&gt;&lt;/ul&gt; </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConversationItem> updateTextItemWithHttpInfo(String convId, String itemId, List<String> attachments, String content, String formMetaData, String subject) throws ApiException {
        okhttp3.Call localVarCall = updateTextItemValidateBeforeCall(convId, itemId, attachments, content, formMetaData, subject, null);
        Type localVarReturnType = new TypeToken<ConversationItem>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates a message (asynchronously)
     * Updates the content or subject of the existing message. Only the creator of the message is allowed to perform this operation. OauthScopes: WRITE_CONVERSATIONS, UPDATE_CONVERSATION_CONTENT
     * @param convId The ID of the conversation to which the item belongs (required)
     * @param itemId The ID of the item to update (required)
     * @param attachments A comma separated list of attachment IDs from the file API. (optional)
     * @param content The actual content of the item (optional)
     * @param formMetaData The form meta data of the new text item (optional)
     * @param subject The subject (headline) of the new text item (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Gets the modified text item object </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The request cannot be fulfilled due to bad syntax: &lt;ul&gt;&lt;li&gt;the conversation does not exist&lt;/li&gt;&lt;li&gt;the user is no participant of the conversation&lt;/li&gt;&lt;li&gt;a field constraint is violated&lt;/li&gt;&lt;/ul&gt; </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> The authentication was not successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> The server encountered an internal error and the operation could not be completed. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> The server is currently unable to receive requests. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateTextItemAsync(String convId, String itemId, List<String> attachments, String content, String formMetaData, String subject, final ApiCallback<ConversationItem> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateTextItemValidateBeforeCall(convId, itemId, attachments, content, formMetaData, subject, _callback);
        Type localVarReturnType = new TypeToken<ConversationItem>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
