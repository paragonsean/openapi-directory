/*
 * REST API Version 2
 * Circuit REST API to interact with the Circuit system.  [Learn more about the Circuit Development Community](https://www.circuit.com/web/developers/home)
 *
 * The version of the OpenAPI document: 2.9.235
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Conversation;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ConversationsPage
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:29:23.236704-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ConversationsPage {
  public static final String SERIALIZED_NAME_CONVERSATION_LIST = "conversationList";
  @SerializedName(SERIALIZED_NAME_CONVERSATION_LIST)
  private List<Conversation> conversationList = new ArrayList<>();

  public static final String SERIALIZED_NAME_HAS_MORE = "hasMore";
  @SerializedName(SERIALIZED_NAME_HAS_MORE)
  private Object hasMore = null;

  public static final String SERIALIZED_NAME_NEXT_PAGE_POINTER = "nextPagePointer";
  @SerializedName(SERIALIZED_NAME_NEXT_PAGE_POINTER)
  private String nextPagePointer;

  public ConversationsPage() {
  }

  public ConversationsPage conversationList(List<Conversation> conversationList) {
    this.conversationList = conversationList;
    return this;
  }

  public ConversationsPage addConversationListItem(Conversation conversationListItem) {
    if (this.conversationList == null) {
      this.conversationList = new ArrayList<>();
    }
    this.conversationList.add(conversationListItem);
    return this;
  }

  /**
   * List of conversations
   * @return conversationList
   */
  @javax.annotation.Nullable
  public List<Conversation> getConversationList() {
    return conversationList;
  }

  public void setConversationList(List<Conversation> conversationList) {
    this.conversationList = conversationList;
  }


  public ConversationsPage hasMore(Object hasMore) {
    this.hasMore = hasMore;
    return this;
  }

  /**
   * Has more pages of conversations
   * @return hasMore
   */
  @javax.annotation.Nullable
  public Object getHasMore() {
    return hasMore;
  }

  public void setHasMore(Object hasMore) {
    this.hasMore = hasMore;
  }


  public ConversationsPage nextPagePointer(String nextPagePointer) {
    this.nextPagePointer = nextPagePointer;
    return this;
  }

  /**
   * Pointer to the next set page of conversations
   * @return nextPagePointer
   */
  @javax.annotation.Nullable
  public String getNextPagePointer() {
    return nextPagePointer;
  }

  public void setNextPagePointer(String nextPagePointer) {
    this.nextPagePointer = nextPagePointer;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConversationsPage conversationsPage = (ConversationsPage) o;
    return Objects.equals(this.conversationList, conversationsPage.conversationList) &&
        Objects.equals(this.hasMore, conversationsPage.hasMore) &&
        Objects.equals(this.nextPagePointer, conversationsPage.nextPagePointer);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(conversationList, hasMore, nextPagePointer);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConversationsPage {\n");
    sb.append("    conversationList: ").append(toIndentedString(conversationList)).append("\n");
    sb.append("    hasMore: ").append(toIndentedString(hasMore)).append("\n");
    sb.append("    nextPagePointer: ").append(toIndentedString(nextPagePointer)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("conversationList");
    openapiFields.add("hasMore");
    openapiFields.add("nextPagePointer");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ConversationsPage
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ConversationsPage.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ConversationsPage is not found in the empty JSON string", ConversationsPage.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ConversationsPage.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ConversationsPage` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("conversationList") != null && !jsonObj.get("conversationList").isJsonNull()) {
        JsonArray jsonArrayconversationList = jsonObj.getAsJsonArray("conversationList");
        if (jsonArrayconversationList != null) {
          // ensure the json data is an array
          if (!jsonObj.get("conversationList").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `conversationList` to be an array in the JSON string but got `%s`", jsonObj.get("conversationList").toString()));
          }

          // validate the optional field `conversationList` (array)
          for (int i = 0; i < jsonArrayconversationList.size(); i++) {
            Conversation.validateJsonElement(jsonArrayconversationList.get(i));
          };
        }
      }
      if ((jsonObj.get("nextPagePointer") != null && !jsonObj.get("nextPagePointer").isJsonNull()) && !jsonObj.get("nextPagePointer").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nextPagePointer` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nextPagePointer").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ConversationsPage.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ConversationsPage' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ConversationsPage> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ConversationsPage.class));

       return (TypeAdapter<T>) new TypeAdapter<ConversationsPage>() {
           @Override
           public void write(JsonWriter out, ConversationsPage value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ConversationsPage read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ConversationsPage given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ConversationsPage
   * @throws IOException if the JSON string is invalid with respect to ConversationsPage
   */
  public static ConversationsPage fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ConversationsPage.class);
  }

  /**
   * Convert an instance of ConversationsPage to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

