/*
 * REST API Version 2
 * Circuit REST API to interact with the Circuit system.  [Learn more about the Circuit Development Community](https://www.circuit.com/web/developers/home)
 *
 * The version of the OpenAPI document: 2.9.235
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Space
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:29:23.236704-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Space {
  public static final String SERIALIZED_NAME_ACCESS_MODE_TYPE = "accessModeType";
  @SerializedName(SERIALIZED_NAME_ACCESS_MODE_TYPE)
  private String accessModeType;

  public static final String SERIALIZED_NAME_CREATION_TIME = "creationTime";
  @SerializedName(SERIALIZED_NAME_CREATION_TIME)
  private BigDecimal creationTime;

  public static final String SERIALIZED_NAME_CREATOR_ID = "creatorId";
  @SerializedName(SERIALIZED_NAME_CREATOR_ID)
  private String creatorId;

  public static final String SERIALIZED_NAME_DEFAULT_ROLE = "defaultRole";
  @SerializedName(SERIALIZED_NAME_DEFAULT_ROLE)
  private String defaultRole;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_LARGE_PICTURE_BASE64 = "largePictureBase64";
  @SerializedName(SERIALIZED_NAME_LARGE_PICTURE_BASE64)
  private String largePictureBase64;

  public static final String SERIALIZED_NAME_LARGE_PICTURE_CONTENT_TYPE = "largePictureContentType";
  @SerializedName(SERIALIZED_NAME_LARGE_PICTURE_CONTENT_TYPE)
  private String largePictureContentType;

  public static final String SERIALIZED_NAME_LARGE_PICTURE_ID = "largePictureId";
  @SerializedName(SERIALIZED_NAME_LARGE_PICTURE_ID)
  private String largePictureId;

  public static final String SERIALIZED_NAME_LAST_CONTENT_CREATION_TIME = "lastContentCreationTime";
  @SerializedName(SERIALIZED_NAME_LAST_CONTENT_CREATION_TIME)
  private BigDecimal lastContentCreationTime;

  public static final String SERIALIZED_NAME_LAST_CONTENT_CREATOR_ID = "lastContentCreatorId";
  @SerializedName(SERIALIZED_NAME_LAST_CONTENT_CREATOR_ID)
  private String lastContentCreatorId;

  public static final String SERIALIZED_NAME_MODIFICATION_TIME = "modificationTime";
  @SerializedName(SERIALIZED_NAME_MODIFICATION_TIME)
  private BigDecimal modificationTime;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NUMBER_OF_EXTERNAL_PARTICIPANTS = "numberOfExternalParticipants";
  @SerializedName(SERIALIZED_NAME_NUMBER_OF_EXTERNAL_PARTICIPANTS)
  private BigDecimal numberOfExternalParticipants;

  public static final String SERIALIZED_NAME_NUMBER_OF_PARTICIPANTS = "numberOfParticipants";
  @SerializedName(SERIALIZED_NAME_NUMBER_OF_PARTICIPANTS)
  private BigDecimal numberOfParticipants;

  public static final String SERIALIZED_NAME_NUMBER_OF_PINNED_TOPICS = "numberOfPinnedTopics";
  @SerializedName(SERIALIZED_NAME_NUMBER_OF_PINNED_TOPICS)
  private BigDecimal numberOfPinnedTopics;

  public static final String SERIALIZED_NAME_NUMBER_OF_REPLIES = "numberOfReplies";
  @SerializedName(SERIALIZED_NAME_NUMBER_OF_REPLIES)
  private BigDecimal numberOfReplies;

  public static final String SERIALIZED_NAME_NUMBER_OF_TOPICS = "numberOfTopics";
  @SerializedName(SERIALIZED_NAME_NUMBER_OF_TOPICS)
  private BigDecimal numberOfTopics;

  public static final String SERIALIZED_NAME_OWNER_ID = "ownerId";
  @SerializedName(SERIALIZED_NAME_OWNER_ID)
  private String ownerId;

  public static final String SERIALIZED_NAME_SMALL_PICTURE_BASE64 = "smallPictureBase64";
  @SerializedName(SERIALIZED_NAME_SMALL_PICTURE_BASE64)
  private String smallPictureBase64;

  public static final String SERIALIZED_NAME_SMALL_PICTURE_CONTENT_TYPE = "smallPictureContentType";
  @SerializedName(SERIALIZED_NAME_SMALL_PICTURE_CONTENT_TYPE)
  private String smallPictureContentType;

  public static final String SERIALIZED_NAME_SMALL_PICTURE_ID = "smallPictureId";
  @SerializedName(SERIALIZED_NAME_SMALL_PICTURE_ID)
  private String smallPictureId;

  public static final String SERIALIZED_NAME_SPACE_ID = "spaceId";
  @SerializedName(SERIALIZED_NAME_SPACE_ID)
  private String spaceId;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List<String> tags = new ArrayList<>();

  public static final String SERIALIZED_NAME_TENANT_ID = "tenantId";
  @SerializedName(SERIALIZED_NAME_TENANT_ID)
  private String tenantId;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public Space() {
  }

  public Space accessModeType(String accessModeType) {
    this.accessModeType = accessModeType;
    return this;
  }

  /**
   * The name of the access mode type of the space.
   * @return accessModeType
   */
  @javax.annotation.Nullable
  public String getAccessModeType() {
    return accessModeType;
  }

  public void setAccessModeType(String accessModeType) {
    this.accessModeType = accessModeType;
  }


  public Space creationTime(BigDecimal creationTime) {
    this.creationTime = creationTime;
    return this;
  }

  /**
   * The space creation time.
   * @return creationTime
   */
  @javax.annotation.Nullable
  public BigDecimal getCreationTime() {
    return creationTime;
  }

  public void setCreationTime(BigDecimal creationTime) {
    this.creationTime = creationTime;
  }


  public Space creatorId(String creatorId) {
    this.creatorId = creatorId;
    return this;
  }

  /**
   * The ID of the space creator.
   * @return creatorId
   */
  @javax.annotation.Nullable
  public String getCreatorId() {
    return creatorId;
  }

  public void setCreatorId(String creatorId) {
    this.creatorId = creatorId;
  }


  public Space defaultRole(String defaultRole) {
    this.defaultRole = defaultRole;
    return this;
  }

  /**
   * The name of the default role of a new participant.
   * @return defaultRole
   */
  @javax.annotation.Nullable
  public String getDefaultRole() {
    return defaultRole;
  }

  public void setDefaultRole(String defaultRole) {
    this.defaultRole = defaultRole;
  }


  public Space description(String description) {
    this.description = description;
    return this;
  }

  /**
   * The space description.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public Space largePictureBase64(String largePictureBase64) {
    this.largePictureBase64 = largePictureBase64;
    return this;
  }

  /**
   * Base64 encoded image that can be set during the creation and the update of a space.
   * @return largePictureBase64
   */
  @javax.annotation.Nullable
  public String getLargePictureBase64() {
    return largePictureBase64;
  }

  public void setLargePictureBase64(String largePictureBase64) {
    this.largePictureBase64 = largePictureBase64;
  }


  public Space largePictureContentType(String largePictureContentType) {
    this.largePictureContentType = largePictureContentType;
    return this;
  }

  /**
   * The content type of the image.
   * @return largePictureContentType
   */
  @javax.annotation.Nullable
  public String getLargePictureContentType() {
    return largePictureContentType;
  }

  public void setLargePictureContentType(String largePictureContentType) {
    this.largePictureContentType = largePictureContentType;
  }


  public Space largePictureId(String largePictureId) {
    this.largePictureId = largePictureId;
    return this;
  }

  /**
   * The file id of the large version of the picture.
   * @return largePictureId
   */
  @javax.annotation.Nullable
  public String getLargePictureId() {
    return largePictureId;
  }

  public void setLargePictureId(String largePictureId) {
    this.largePictureId = largePictureId;
  }


  public Space lastContentCreationTime(BigDecimal lastContentCreationTime) {
    this.lastContentCreationTime = lastContentCreationTime;
    return this;
  }

  /**
   * Time stamp when the last content (topic / reply) was created within this space.
   * @return lastContentCreationTime
   */
  @javax.annotation.Nullable
  public BigDecimal getLastContentCreationTime() {
    return lastContentCreationTime;
  }

  public void setLastContentCreationTime(BigDecimal lastContentCreationTime) {
    this.lastContentCreationTime = lastContentCreationTime;
  }


  public Space lastContentCreatorId(String lastContentCreatorId) {
    this.lastContentCreatorId = lastContentCreatorId;
    return this;
  }

  /**
   * User ID of the user which created the last content.
   * @return lastContentCreatorId
   */
  @javax.annotation.Nullable
  public String getLastContentCreatorId() {
    return lastContentCreatorId;
  }

  public void setLastContentCreatorId(String lastContentCreatorId) {
    this.lastContentCreatorId = lastContentCreatorId;
  }


  public Space modificationTime(BigDecimal modificationTime) {
    this.modificationTime = modificationTime;
    return this;
  }

  /**
   * The space modification time.
   * @return modificationTime
   */
  @javax.annotation.Nullable
  public BigDecimal getModificationTime() {
    return modificationTime;
  }

  public void setModificationTime(BigDecimal modificationTime) {
    this.modificationTime = modificationTime;
  }


  public Space name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The unique space name.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public Space numberOfExternalParticipants(BigDecimal numberOfExternalParticipants) {
    this.numberOfExternalParticipants = numberOfExternalParticipants;
    return this;
  }

  /**
   * Number of external participants in the space.
   * @return numberOfExternalParticipants
   */
  @javax.annotation.Nullable
  public BigDecimal getNumberOfExternalParticipants() {
    return numberOfExternalParticipants;
  }

  public void setNumberOfExternalParticipants(BigDecimal numberOfExternalParticipants) {
    this.numberOfExternalParticipants = numberOfExternalParticipants;
  }


  public Space numberOfParticipants(BigDecimal numberOfParticipants) {
    this.numberOfParticipants = numberOfParticipants;
    return this;
  }

  /**
   * Number of participants in the space.
   * @return numberOfParticipants
   */
  @javax.annotation.Nullable
  public BigDecimal getNumberOfParticipants() {
    return numberOfParticipants;
  }

  public void setNumberOfParticipants(BigDecimal numberOfParticipants) {
    this.numberOfParticipants = numberOfParticipants;
  }


  public Space numberOfPinnedTopics(BigDecimal numberOfPinnedTopics) {
    this.numberOfPinnedTopics = numberOfPinnedTopics;
    return this;
  }

  /**
   * Number of pinned topics in the space.
   * @return numberOfPinnedTopics
   */
  @javax.annotation.Nullable
  public BigDecimal getNumberOfPinnedTopics() {
    return numberOfPinnedTopics;
  }

  public void setNumberOfPinnedTopics(BigDecimal numberOfPinnedTopics) {
    this.numberOfPinnedTopics = numberOfPinnedTopics;
  }


  public Space numberOfReplies(BigDecimal numberOfReplies) {
    this.numberOfReplies = numberOfReplies;
    return this;
  }

  /**
   * Number of replies in the space.
   * @return numberOfReplies
   */
  @javax.annotation.Nullable
  public BigDecimal getNumberOfReplies() {
    return numberOfReplies;
  }

  public void setNumberOfReplies(BigDecimal numberOfReplies) {
    this.numberOfReplies = numberOfReplies;
  }


  public Space numberOfTopics(BigDecimal numberOfTopics) {
    this.numberOfTopics = numberOfTopics;
    return this;
  }

  /**
   * Number of topics in the space.
   * @return numberOfTopics
   */
  @javax.annotation.Nullable
  public BigDecimal getNumberOfTopics() {
    return numberOfTopics;
  }

  public void setNumberOfTopics(BigDecimal numberOfTopics) {
    this.numberOfTopics = numberOfTopics;
  }


  public Space ownerId(String ownerId) {
    this.ownerId = ownerId;
    return this;
  }

  /**
   * The ID of the space owner.
   * @return ownerId
   */
  @javax.annotation.Nullable
  public String getOwnerId() {
    return ownerId;
  }

  public void setOwnerId(String ownerId) {
    this.ownerId = ownerId;
  }


  public Space smallPictureBase64(String smallPictureBase64) {
    this.smallPictureBase64 = smallPictureBase64;
    return this;
  }

  /**
   * Base64 encoded image that can be set during the creation and the update of a space.
   * @return smallPictureBase64
   */
  @javax.annotation.Nullable
  public String getSmallPictureBase64() {
    return smallPictureBase64;
  }

  public void setSmallPictureBase64(String smallPictureBase64) {
    this.smallPictureBase64 = smallPictureBase64;
  }


  public Space smallPictureContentType(String smallPictureContentType) {
    this.smallPictureContentType = smallPictureContentType;
    return this;
  }

  /**
   * The content type of the image.
   * @return smallPictureContentType
   */
  @javax.annotation.Nullable
  public String getSmallPictureContentType() {
    return smallPictureContentType;
  }

  public void setSmallPictureContentType(String smallPictureContentType) {
    this.smallPictureContentType = smallPictureContentType;
  }


  public Space smallPictureId(String smallPictureId) {
    this.smallPictureId = smallPictureId;
    return this;
  }

  /**
   * The file id of the small version of the picture.
   * @return smallPictureId
   */
  @javax.annotation.Nullable
  public String getSmallPictureId() {
    return smallPictureId;
  }

  public void setSmallPictureId(String smallPictureId) {
    this.smallPictureId = smallPictureId;
  }


  public Space spaceId(String spaceId) {
    this.spaceId = spaceId;
    return this;
  }

  /**
   * The unique space ID generated by the backend during the creation of the space.
   * @return spaceId
   */
  @javax.annotation.Nullable
  public String getSpaceId() {
    return spaceId;
  }

  public void setSpaceId(String spaceId) {
    this.spaceId = spaceId;
  }


  public Space status(String status) {
    this.status = status;
    return this;
  }

  /**
   * The name of the status of the space.
   * @return status
   */
  @javax.annotation.Nullable
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }


  public Space tags(List<String> tags) {
    this.tags = tags;
    return this;
  }

  public Space addTagsItem(String tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<>();
    }
    this.tags.add(tagsItem);
    return this;
  }

  /**
   * The list of space tags.
   * @return tags
   */
  @javax.annotation.Nullable
  public List<String> getTags() {
    return tags;
  }

  public void setTags(List<String> tags) {
    this.tags = tags;
  }


  public Space tenantId(String tenantId) {
    this.tenantId = tenantId;
    return this;
  }

  /**
   * The ID of the space tenant.
   * @return tenantId
   */
  @javax.annotation.Nullable
  public String getTenantId() {
    return tenantId;
  }

  public void setTenantId(String tenantId) {
    this.tenantId = tenantId;
  }


  public Space type(String type) {
    this.type = type;
    return this;
  }

  /**
   * The name of the space type.
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Space space = (Space) o;
    return Objects.equals(this.accessModeType, space.accessModeType) &&
        Objects.equals(this.creationTime, space.creationTime) &&
        Objects.equals(this.creatorId, space.creatorId) &&
        Objects.equals(this.defaultRole, space.defaultRole) &&
        Objects.equals(this.description, space.description) &&
        Objects.equals(this.largePictureBase64, space.largePictureBase64) &&
        Objects.equals(this.largePictureContentType, space.largePictureContentType) &&
        Objects.equals(this.largePictureId, space.largePictureId) &&
        Objects.equals(this.lastContentCreationTime, space.lastContentCreationTime) &&
        Objects.equals(this.lastContentCreatorId, space.lastContentCreatorId) &&
        Objects.equals(this.modificationTime, space.modificationTime) &&
        Objects.equals(this.name, space.name) &&
        Objects.equals(this.numberOfExternalParticipants, space.numberOfExternalParticipants) &&
        Objects.equals(this.numberOfParticipants, space.numberOfParticipants) &&
        Objects.equals(this.numberOfPinnedTopics, space.numberOfPinnedTopics) &&
        Objects.equals(this.numberOfReplies, space.numberOfReplies) &&
        Objects.equals(this.numberOfTopics, space.numberOfTopics) &&
        Objects.equals(this.ownerId, space.ownerId) &&
        Objects.equals(this.smallPictureBase64, space.smallPictureBase64) &&
        Objects.equals(this.smallPictureContentType, space.smallPictureContentType) &&
        Objects.equals(this.smallPictureId, space.smallPictureId) &&
        Objects.equals(this.spaceId, space.spaceId) &&
        Objects.equals(this.status, space.status) &&
        Objects.equals(this.tags, space.tags) &&
        Objects.equals(this.tenantId, space.tenantId) &&
        Objects.equals(this.type, space.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accessModeType, creationTime, creatorId, defaultRole, description, largePictureBase64, largePictureContentType, largePictureId, lastContentCreationTime, lastContentCreatorId, modificationTime, name, numberOfExternalParticipants, numberOfParticipants, numberOfPinnedTopics, numberOfReplies, numberOfTopics, ownerId, smallPictureBase64, smallPictureContentType, smallPictureId, spaceId, status, tags, tenantId, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Space {\n");
    sb.append("    accessModeType: ").append(toIndentedString(accessModeType)).append("\n");
    sb.append("    creationTime: ").append(toIndentedString(creationTime)).append("\n");
    sb.append("    creatorId: ").append(toIndentedString(creatorId)).append("\n");
    sb.append("    defaultRole: ").append(toIndentedString(defaultRole)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    largePictureBase64: ").append(toIndentedString(largePictureBase64)).append("\n");
    sb.append("    largePictureContentType: ").append(toIndentedString(largePictureContentType)).append("\n");
    sb.append("    largePictureId: ").append(toIndentedString(largePictureId)).append("\n");
    sb.append("    lastContentCreationTime: ").append(toIndentedString(lastContentCreationTime)).append("\n");
    sb.append("    lastContentCreatorId: ").append(toIndentedString(lastContentCreatorId)).append("\n");
    sb.append("    modificationTime: ").append(toIndentedString(modificationTime)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    numberOfExternalParticipants: ").append(toIndentedString(numberOfExternalParticipants)).append("\n");
    sb.append("    numberOfParticipants: ").append(toIndentedString(numberOfParticipants)).append("\n");
    sb.append("    numberOfPinnedTopics: ").append(toIndentedString(numberOfPinnedTopics)).append("\n");
    sb.append("    numberOfReplies: ").append(toIndentedString(numberOfReplies)).append("\n");
    sb.append("    numberOfTopics: ").append(toIndentedString(numberOfTopics)).append("\n");
    sb.append("    ownerId: ").append(toIndentedString(ownerId)).append("\n");
    sb.append("    smallPictureBase64: ").append(toIndentedString(smallPictureBase64)).append("\n");
    sb.append("    smallPictureContentType: ").append(toIndentedString(smallPictureContentType)).append("\n");
    sb.append("    smallPictureId: ").append(toIndentedString(smallPictureId)).append("\n");
    sb.append("    spaceId: ").append(toIndentedString(spaceId)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    tenantId: ").append(toIndentedString(tenantId)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accessModeType");
    openapiFields.add("creationTime");
    openapiFields.add("creatorId");
    openapiFields.add("defaultRole");
    openapiFields.add("description");
    openapiFields.add("largePictureBase64");
    openapiFields.add("largePictureContentType");
    openapiFields.add("largePictureId");
    openapiFields.add("lastContentCreationTime");
    openapiFields.add("lastContentCreatorId");
    openapiFields.add("modificationTime");
    openapiFields.add("name");
    openapiFields.add("numberOfExternalParticipants");
    openapiFields.add("numberOfParticipants");
    openapiFields.add("numberOfPinnedTopics");
    openapiFields.add("numberOfReplies");
    openapiFields.add("numberOfTopics");
    openapiFields.add("ownerId");
    openapiFields.add("smallPictureBase64");
    openapiFields.add("smallPictureContentType");
    openapiFields.add("smallPictureId");
    openapiFields.add("spaceId");
    openapiFields.add("status");
    openapiFields.add("tags");
    openapiFields.add("tenantId");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Space
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Space.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Space is not found in the empty JSON string", Space.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Space.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Space` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("accessModeType") != null && !jsonObj.get("accessModeType").isJsonNull()) && !jsonObj.get("accessModeType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accessModeType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accessModeType").toString()));
      }
      if ((jsonObj.get("creatorId") != null && !jsonObj.get("creatorId").isJsonNull()) && !jsonObj.get("creatorId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `creatorId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("creatorId").toString()));
      }
      if ((jsonObj.get("defaultRole") != null && !jsonObj.get("defaultRole").isJsonNull()) && !jsonObj.get("defaultRole").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `defaultRole` to be a primitive type in the JSON string but got `%s`", jsonObj.get("defaultRole").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("largePictureBase64") != null && !jsonObj.get("largePictureBase64").isJsonNull()) && !jsonObj.get("largePictureBase64").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `largePictureBase64` to be a primitive type in the JSON string but got `%s`", jsonObj.get("largePictureBase64").toString()));
      }
      if ((jsonObj.get("largePictureContentType") != null && !jsonObj.get("largePictureContentType").isJsonNull()) && !jsonObj.get("largePictureContentType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `largePictureContentType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("largePictureContentType").toString()));
      }
      if ((jsonObj.get("largePictureId") != null && !jsonObj.get("largePictureId").isJsonNull()) && !jsonObj.get("largePictureId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `largePictureId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("largePictureId").toString()));
      }
      if ((jsonObj.get("lastContentCreatorId") != null && !jsonObj.get("lastContentCreatorId").isJsonNull()) && !jsonObj.get("lastContentCreatorId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastContentCreatorId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastContentCreatorId").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("ownerId") != null && !jsonObj.get("ownerId").isJsonNull()) && !jsonObj.get("ownerId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ownerId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ownerId").toString()));
      }
      if ((jsonObj.get("smallPictureBase64") != null && !jsonObj.get("smallPictureBase64").isJsonNull()) && !jsonObj.get("smallPictureBase64").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `smallPictureBase64` to be a primitive type in the JSON string but got `%s`", jsonObj.get("smallPictureBase64").toString()));
      }
      if ((jsonObj.get("smallPictureContentType") != null && !jsonObj.get("smallPictureContentType").isJsonNull()) && !jsonObj.get("smallPictureContentType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `smallPictureContentType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("smallPictureContentType").toString()));
      }
      if ((jsonObj.get("smallPictureId") != null && !jsonObj.get("smallPictureId").isJsonNull()) && !jsonObj.get("smallPictureId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `smallPictureId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("smallPictureId").toString()));
      }
      if ((jsonObj.get("spaceId") != null && !jsonObj.get("spaceId").isJsonNull()) && !jsonObj.get("spaceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `spaceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("spaceId").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("tags") != null && !jsonObj.get("tags").isJsonNull() && !jsonObj.get("tags").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `tags` to be an array in the JSON string but got `%s`", jsonObj.get("tags").toString()));
      }
      if ((jsonObj.get("tenantId") != null && !jsonObj.get("tenantId").isJsonNull()) && !jsonObj.get("tenantId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tenantId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tenantId").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Space.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Space' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Space> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Space.class));

       return (TypeAdapter<T>) new TypeAdapter<Space>() {
           @Override
           public void write(JsonWriter out, Space value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Space read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Space given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Space
   * @throws IOException if the JSON string is invalid with respect to Space
   */
  public static Space fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Space.class);
  }

  /**
   * Convert an instance of Space to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

