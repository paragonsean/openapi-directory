/*
 * REST API Version 2
 * Circuit REST API to interact with the Circuit system.  [Learn more about the Circuit Development Community](https://www.circuit.com/web/developers/home)
 *
 * The version of the OpenAPI document: 2.9.235
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.SpaceItem;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * SpaceTopic
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:29:23.236704-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SpaceTopic {
  public static final String SERIALIZED_NAME_LAST_CONTENT_CREATION_TIME = "lastContentCreationTime";
  @SerializedName(SERIALIZED_NAME_LAST_CONTENT_CREATION_TIME)
  private BigDecimal lastContentCreationTime;

  public static final String SERIALIZED_NAME_LAST_CONTENT_CREATOR_ID = "lastContentCreatorId";
  @SerializedName(SERIALIZED_NAME_LAST_CONTENT_CREATOR_ID)
  private String lastContentCreatorId;

  public static final String SERIALIZED_NAME_NUMBER_OF_REPLIES = "numberOfReplies";
  @SerializedName(SERIALIZED_NAME_NUMBER_OF_REPLIES)
  private BigDecimal numberOfReplies;

  public static final String SERIALIZED_NAME_PINNED = "pinned";
  @SerializedName(SERIALIZED_NAME_PINNED)
  private Boolean pinned;

  public static final String SERIALIZED_NAME_SPACE_ITEM = "spaceItem";
  @SerializedName(SERIALIZED_NAME_SPACE_ITEM)
  private SpaceItem spaceItem;

  public static final String SERIALIZED_NAME_SUBJECT = "subject";
  @SerializedName(SERIALIZED_NAME_SUBJECT)
  private String subject;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List<String> tags = new ArrayList<>();

  public SpaceTopic() {
  }

  public SpaceTopic lastContentCreationTime(BigDecimal lastContentCreationTime) {
    this.lastContentCreationTime = lastContentCreationTime;
    return this;
  }

  /**
   * The last time new content was created
   * @return lastContentCreationTime
   */
  @javax.annotation.Nullable
  public BigDecimal getLastContentCreationTime() {
    return lastContentCreationTime;
  }

  public void setLastContentCreationTime(BigDecimal lastContentCreationTime) {
    this.lastContentCreationTime = lastContentCreationTime;
  }


  public SpaceTopic lastContentCreatorId(String lastContentCreatorId) {
    this.lastContentCreatorId = lastContentCreatorId;
    return this;
  }

  /**
   * The Id of the last content creator
   * @return lastContentCreatorId
   */
  @javax.annotation.Nullable
  public String getLastContentCreatorId() {
    return lastContentCreatorId;
  }

  public void setLastContentCreatorId(String lastContentCreatorId) {
    this.lastContentCreatorId = lastContentCreatorId;
  }


  public SpaceTopic numberOfReplies(BigDecimal numberOfReplies) {
    this.numberOfReplies = numberOfReplies;
    return this;
  }

  /**
   * The number of replies this topic has
   * @return numberOfReplies
   */
  @javax.annotation.Nullable
  public BigDecimal getNumberOfReplies() {
    return numberOfReplies;
  }

  public void setNumberOfReplies(BigDecimal numberOfReplies) {
    this.numberOfReplies = numberOfReplies;
  }


  public SpaceTopic pinned(Boolean pinned) {
    this.pinned = pinned;
    return this;
  }

  /**
   * Is this topic pinned
   * @return pinned
   */
  @javax.annotation.Nullable
  public Boolean getPinned() {
    return pinned;
  }

  public void setPinned(Boolean pinned) {
    this.pinned = pinned;
  }


  public SpaceTopic spaceItem(SpaceItem spaceItem) {
    this.spaceItem = spaceItem;
    return this;
  }

  /**
   * Get spaceItem
   * @return spaceItem
   */
  @javax.annotation.Nullable
  public SpaceItem getSpaceItem() {
    return spaceItem;
  }

  public void setSpaceItem(SpaceItem spaceItem) {
    this.spaceItem = spaceItem;
  }


  public SpaceTopic subject(String subject) {
    this.subject = subject;
    return this;
  }

  /**
   * The subject of this topic
   * @return subject
   */
  @javax.annotation.Nullable
  public String getSubject() {
    return subject;
  }

  public void setSubject(String subject) {
    this.subject = subject;
  }


  public SpaceTopic tags(List<String> tags) {
    this.tags = tags;
    return this;
  }

  public SpaceTopic addTagsItem(String tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<>();
    }
    this.tags.add(tagsItem);
    return this;
  }

  /**
   * The tags 
   * @return tags
   */
  @javax.annotation.Nullable
  public List<String> getTags() {
    return tags;
  }

  public void setTags(List<String> tags) {
    this.tags = tags;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SpaceTopic spaceTopic = (SpaceTopic) o;
    return Objects.equals(this.lastContentCreationTime, spaceTopic.lastContentCreationTime) &&
        Objects.equals(this.lastContentCreatorId, spaceTopic.lastContentCreatorId) &&
        Objects.equals(this.numberOfReplies, spaceTopic.numberOfReplies) &&
        Objects.equals(this.pinned, spaceTopic.pinned) &&
        Objects.equals(this.spaceItem, spaceTopic.spaceItem) &&
        Objects.equals(this.subject, spaceTopic.subject) &&
        Objects.equals(this.tags, spaceTopic.tags);
  }

  @Override
  public int hashCode() {
    return Objects.hash(lastContentCreationTime, lastContentCreatorId, numberOfReplies, pinned, spaceItem, subject, tags);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SpaceTopic {\n");
    sb.append("    lastContentCreationTime: ").append(toIndentedString(lastContentCreationTime)).append("\n");
    sb.append("    lastContentCreatorId: ").append(toIndentedString(lastContentCreatorId)).append("\n");
    sb.append("    numberOfReplies: ").append(toIndentedString(numberOfReplies)).append("\n");
    sb.append("    pinned: ").append(toIndentedString(pinned)).append("\n");
    sb.append("    spaceItem: ").append(toIndentedString(spaceItem)).append("\n");
    sb.append("    subject: ").append(toIndentedString(subject)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("lastContentCreationTime");
    openapiFields.add("lastContentCreatorId");
    openapiFields.add("numberOfReplies");
    openapiFields.add("pinned");
    openapiFields.add("spaceItem");
    openapiFields.add("subject");
    openapiFields.add("tags");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SpaceTopic
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SpaceTopic.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SpaceTopic is not found in the empty JSON string", SpaceTopic.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SpaceTopic.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SpaceTopic` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("lastContentCreatorId") != null && !jsonObj.get("lastContentCreatorId").isJsonNull()) && !jsonObj.get("lastContentCreatorId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastContentCreatorId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastContentCreatorId").toString()));
      }
      // validate the optional field `spaceItem`
      if (jsonObj.get("spaceItem") != null && !jsonObj.get("spaceItem").isJsonNull()) {
        SpaceItem.validateJsonElement(jsonObj.get("spaceItem"));
      }
      if ((jsonObj.get("subject") != null && !jsonObj.get("subject").isJsonNull()) && !jsonObj.get("subject").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subject` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subject").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("tags") != null && !jsonObj.get("tags").isJsonNull() && !jsonObj.get("tags").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `tags` to be an array in the JSON string but got `%s`", jsonObj.get("tags").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SpaceTopic.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SpaceTopic' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SpaceTopic> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SpaceTopic.class));

       return (TypeAdapter<T>) new TypeAdapter<SpaceTopic>() {
           @Override
           public void write(JsonWriter out, SpaceTopic value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SpaceTopic read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SpaceTopic given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SpaceTopic
   * @throws IOException if the JSON string is invalid with respect to SpaceTopic
   */
  public static SpaceTopic fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SpaceTopic.class);
  }

  /**
   * Convert an instance of SpaceTopic to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

