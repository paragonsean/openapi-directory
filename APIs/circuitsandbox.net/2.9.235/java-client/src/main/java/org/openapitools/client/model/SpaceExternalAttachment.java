/*
 * REST API Version 2
 * Circuit REST API to interact with the Circuit system.  [Learn more about the Circuit Development Community](https://www.circuit.com/web/developers/home)
 *
 * The version of the OpenAPI document: 2.9.235
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.SpaceAttachment;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * SpaceExternalAttachment
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:29:23.236704-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SpaceExternalAttachment {
  public static final String SERIALIZED_NAME_ATTACHMENT = "attachment";
  @SerializedName(SERIALIZED_NAME_ATTACHMENT)
  private SpaceAttachment attachment;

  public static final String SERIALIZED_NAME_DOWNLOAD_LOCATION = "downloadLocation";
  @SerializedName(SERIALIZED_NAME_DOWNLOAD_LOCATION)
  private String downloadLocation;

  public static final String SERIALIZED_NAME_PREVIEW_LOCATION = "previewLocation";
  @SerializedName(SERIALIZED_NAME_PREVIEW_LOCATION)
  private String previewLocation;

  public static final String SERIALIZED_NAME_SHARE_LINK_TOKEN = "shareLinkToken";
  @SerializedName(SERIALIZED_NAME_SHARE_LINK_TOKEN)
  private String shareLinkToken;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public SpaceExternalAttachment() {
  }

  public SpaceExternalAttachment attachment(SpaceAttachment attachment) {
    this.attachment = attachment;
    return this;
  }

  /**
   * Get attachment
   * @return attachment
   */
  @javax.annotation.Nullable
  public SpaceAttachment getAttachment() {
    return attachment;
  }

  public void setAttachment(SpaceAttachment attachment) {
    this.attachment = attachment;
  }


  public SpaceExternalAttachment downloadLocation(String downloadLocation) {
    this.downloadLocation = downloadLocation;
    return this;
  }

  /**
   * the location of the download
   * @return downloadLocation
   */
  @javax.annotation.Nullable
  public String getDownloadLocation() {
    return downloadLocation;
  }

  public void setDownloadLocation(String downloadLocation) {
    this.downloadLocation = downloadLocation;
  }


  public SpaceExternalAttachment previewLocation(String previewLocation) {
    this.previewLocation = previewLocation;
    return this;
  }

  /**
   * the location of the preview
   * @return previewLocation
   */
  @javax.annotation.Nullable
  public String getPreviewLocation() {
    return previewLocation;
  }

  public void setPreviewLocation(String previewLocation) {
    this.previewLocation = previewLocation;
  }


  public SpaceExternalAttachment shareLinkToken(String shareLinkToken) {
    this.shareLinkToken = shareLinkToken;
    return this;
  }

  /**
   * The share link token
   * @return shareLinkToken
   */
  @javax.annotation.Nullable
  public String getShareLinkToken() {
    return shareLinkToken;
  }

  public void setShareLinkToken(String shareLinkToken) {
    this.shareLinkToken = shareLinkToken;
  }


  public SpaceExternalAttachment type(String type) {
    this.type = type;
    return this;
  }

  /**
   * the type
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SpaceExternalAttachment spaceExternalAttachment = (SpaceExternalAttachment) o;
    return Objects.equals(this.attachment, spaceExternalAttachment.attachment) &&
        Objects.equals(this.downloadLocation, spaceExternalAttachment.downloadLocation) &&
        Objects.equals(this.previewLocation, spaceExternalAttachment.previewLocation) &&
        Objects.equals(this.shareLinkToken, spaceExternalAttachment.shareLinkToken) &&
        Objects.equals(this.type, spaceExternalAttachment.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(attachment, downloadLocation, previewLocation, shareLinkToken, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SpaceExternalAttachment {\n");
    sb.append("    attachment: ").append(toIndentedString(attachment)).append("\n");
    sb.append("    downloadLocation: ").append(toIndentedString(downloadLocation)).append("\n");
    sb.append("    previewLocation: ").append(toIndentedString(previewLocation)).append("\n");
    sb.append("    shareLinkToken: ").append(toIndentedString(shareLinkToken)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("attachment");
    openapiFields.add("downloadLocation");
    openapiFields.add("previewLocation");
    openapiFields.add("shareLinkToken");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SpaceExternalAttachment
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SpaceExternalAttachment.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SpaceExternalAttachment is not found in the empty JSON string", SpaceExternalAttachment.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SpaceExternalAttachment.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SpaceExternalAttachment` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `attachment`
      if (jsonObj.get("attachment") != null && !jsonObj.get("attachment").isJsonNull()) {
        SpaceAttachment.validateJsonElement(jsonObj.get("attachment"));
      }
      if ((jsonObj.get("downloadLocation") != null && !jsonObj.get("downloadLocation").isJsonNull()) && !jsonObj.get("downloadLocation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `downloadLocation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("downloadLocation").toString()));
      }
      if ((jsonObj.get("previewLocation") != null && !jsonObj.get("previewLocation").isJsonNull()) && !jsonObj.get("previewLocation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `previewLocation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("previewLocation").toString()));
      }
      if ((jsonObj.get("shareLinkToken") != null && !jsonObj.get("shareLinkToken").isJsonNull()) && !jsonObj.get("shareLinkToken").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shareLinkToken` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shareLinkToken").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SpaceExternalAttachment.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SpaceExternalAttachment' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SpaceExternalAttachment> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SpaceExternalAttachment.class));

       return (TypeAdapter<T>) new TypeAdapter<SpaceExternalAttachment>() {
           @Override
           public void write(JsonWriter out, SpaceExternalAttachment value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SpaceExternalAttachment read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SpaceExternalAttachment given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SpaceExternalAttachment
   * @throws IOException if the JSON string is invalid with respect to SpaceExternalAttachment
   */
  public static SpaceExternalAttachment fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SpaceExternalAttachment.class);
  }

  /**
   * Convert an instance of SpaceExternalAttachment to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

