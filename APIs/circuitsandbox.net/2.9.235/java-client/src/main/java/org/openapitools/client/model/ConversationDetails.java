/*
 * REST API Version 2
 * Circuit REST API to interact with the Circuit system.  [Learn more about the Circuit Development Community](https://www.circuit.com/web/developers/home)
 *
 * The version of the OpenAPI document: 2.9.235
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.BridgeNumber;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ConversationDetails
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:29:23.236704-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ConversationDetails {
  public static final String SERIALIZED_NAME_BRIDGE_NUMBERS = "bridgeNumbers";
  @SerializedName(SERIALIZED_NAME_BRIDGE_NUMBERS)
  private List<BridgeNumber> bridgeNumbers = new ArrayList<>();

  public static final String SERIALIZED_NAME_CONV_ID = "convId";
  @SerializedName(SERIALIZED_NAME_CONV_ID)
  private String convId;

  public static final String SERIALIZED_NAME_CONVERSATION_CREATOR_ID = "conversationCreatorId";
  @SerializedName(SERIALIZED_NAME_CONVERSATION_CREATOR_ID)
  private String conversationCreatorId;

  public static final String SERIALIZED_NAME_IS_MODERATION_ALLOWED = "isModerationAllowed";
  @SerializedName(SERIALIZED_NAME_IS_MODERATION_ALLOWED)
  private Boolean isModerationAllowed;

  public static final String SERIALIZED_NAME_IS_RECORDING_ALLOWED = "isRecordingAllowed";
  @SerializedName(SERIALIZED_NAME_IS_RECORDING_ALLOWED)
  private Boolean isRecordingAllowed;

  public static final String SERIALIZED_NAME_LINK = "link";
  @SerializedName(SERIALIZED_NAME_LINK)
  private String link;

  public static final String SERIALIZED_NAME_PIN = "pin";
  @SerializedName(SERIALIZED_NAME_PIN)
  private String pin;

  public ConversationDetails() {
  }

  public ConversationDetails bridgeNumbers(List<BridgeNumber> bridgeNumbers) {
    this.bridgeNumbers = bridgeNumbers;
    return this;
  }

  public ConversationDetails addBridgeNumbersItem(BridgeNumber bridgeNumbersItem) {
    if (this.bridgeNumbers == null) {
      this.bridgeNumbers = new ArrayList<>();
    }
    this.bridgeNumbers.add(bridgeNumbersItem);
    return this;
  }

  /**
   * A list of bridge numbers which can be used to dial in to the real time session via phone
   * @return bridgeNumbers
   */
  @javax.annotation.Nullable
  public List<BridgeNumber> getBridgeNumbers() {
    return bridgeNumbers;
  }

  public void setBridgeNumbers(List<BridgeNumber> bridgeNumbers) {
    this.bridgeNumbers = bridgeNumbers;
  }


  public ConversationDetails convId(String convId) {
    this.convId = convId;
    return this;
  }

  /**
   * missing documentation
   * @return convId
   */
  @javax.annotation.Nullable
  public String getConvId() {
    return convId;
  }

  public void setConvId(String convId) {
    this.convId = convId;
  }


  public ConversationDetails conversationCreatorId(String conversationCreatorId) {
    this.conversationCreatorId = conversationCreatorId;
    return this;
  }

  /**
   * The user ID of the conversation creator
   * @return conversationCreatorId
   */
  @javax.annotation.Nullable
  public String getConversationCreatorId() {
    return conversationCreatorId;
  }

  public void setConversationCreatorId(String conversationCreatorId) {
    this.conversationCreatorId = conversationCreatorId;
  }


  public ConversationDetails isModerationAllowed(Boolean isModerationAllowed) {
    this.isModerationAllowed = isModerationAllowed;
    return this;
  }

  /**
   * Indicates if the conversation is allowed to be moderated
   * @return isModerationAllowed
   */
  @javax.annotation.Nullable
  public Boolean getIsModerationAllowed() {
    return isModerationAllowed;
  }

  public void setIsModerationAllowed(Boolean isModerationAllowed) {
    this.isModerationAllowed = isModerationAllowed;
  }


  public ConversationDetails isRecordingAllowed(Boolean isRecordingAllowed) {
    this.isRecordingAllowed = isRecordingAllowed;
    return this;
  }

  /**
   * Indicates if the conversation is allowed to be recorded
   * @return isRecordingAllowed
   */
  @javax.annotation.Nullable
  public Boolean getIsRecordingAllowed() {
    return isRecordingAllowed;
  }

  public void setIsRecordingAllowed(Boolean isRecordingAllowed) {
    this.isRecordingAllowed = isRecordingAllowed;
  }


  public ConversationDetails link(String link) {
    this.link = link;
    return this;
  }

  /**
   * A link that can be used in a browser to join the session
   * @return link
   */
  @javax.annotation.Nullable
  public String getLink() {
    return link;
  }

  public void setLink(String link) {
    this.link = link;
  }


  public ConversationDetails pin(String pin) {
    this.pin = pin;
    return this;
  }

  /**
   * The PIN to join a real time session via phone
   * @return pin
   */
  @javax.annotation.Nullable
  public String getPin() {
    return pin;
  }

  public void setPin(String pin) {
    this.pin = pin;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConversationDetails conversationDetails = (ConversationDetails) o;
    return Objects.equals(this.bridgeNumbers, conversationDetails.bridgeNumbers) &&
        Objects.equals(this.convId, conversationDetails.convId) &&
        Objects.equals(this.conversationCreatorId, conversationDetails.conversationCreatorId) &&
        Objects.equals(this.isModerationAllowed, conversationDetails.isModerationAllowed) &&
        Objects.equals(this.isRecordingAllowed, conversationDetails.isRecordingAllowed) &&
        Objects.equals(this.link, conversationDetails.link) &&
        Objects.equals(this.pin, conversationDetails.pin);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bridgeNumbers, convId, conversationCreatorId, isModerationAllowed, isRecordingAllowed, link, pin);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConversationDetails {\n");
    sb.append("    bridgeNumbers: ").append(toIndentedString(bridgeNumbers)).append("\n");
    sb.append("    convId: ").append(toIndentedString(convId)).append("\n");
    sb.append("    conversationCreatorId: ").append(toIndentedString(conversationCreatorId)).append("\n");
    sb.append("    isModerationAllowed: ").append(toIndentedString(isModerationAllowed)).append("\n");
    sb.append("    isRecordingAllowed: ").append(toIndentedString(isRecordingAllowed)).append("\n");
    sb.append("    link: ").append(toIndentedString(link)).append("\n");
    sb.append("    pin: ").append(toIndentedString(pin)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("bridgeNumbers");
    openapiFields.add("convId");
    openapiFields.add("conversationCreatorId");
    openapiFields.add("isModerationAllowed");
    openapiFields.add("isRecordingAllowed");
    openapiFields.add("link");
    openapiFields.add("pin");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ConversationDetails
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ConversationDetails.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ConversationDetails is not found in the empty JSON string", ConversationDetails.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ConversationDetails.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ConversationDetails` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("bridgeNumbers") != null && !jsonObj.get("bridgeNumbers").isJsonNull()) {
        JsonArray jsonArraybridgeNumbers = jsonObj.getAsJsonArray("bridgeNumbers");
        if (jsonArraybridgeNumbers != null) {
          // ensure the json data is an array
          if (!jsonObj.get("bridgeNumbers").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `bridgeNumbers` to be an array in the JSON string but got `%s`", jsonObj.get("bridgeNumbers").toString()));
          }

          // validate the optional field `bridgeNumbers` (array)
          for (int i = 0; i < jsonArraybridgeNumbers.size(); i++) {
            BridgeNumber.validateJsonElement(jsonArraybridgeNumbers.get(i));
          };
        }
      }
      if ((jsonObj.get("convId") != null && !jsonObj.get("convId").isJsonNull()) && !jsonObj.get("convId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `convId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("convId").toString()));
      }
      if ((jsonObj.get("conversationCreatorId") != null && !jsonObj.get("conversationCreatorId").isJsonNull()) && !jsonObj.get("conversationCreatorId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `conversationCreatorId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("conversationCreatorId").toString()));
      }
      if ((jsonObj.get("link") != null && !jsonObj.get("link").isJsonNull()) && !jsonObj.get("link").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `link` to be a primitive type in the JSON string but got `%s`", jsonObj.get("link").toString()));
      }
      if ((jsonObj.get("pin") != null && !jsonObj.get("pin").isJsonNull()) && !jsonObj.get("pin").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pin` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pin").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ConversationDetails.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ConversationDetails' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ConversationDetails> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ConversationDetails.class));

       return (TypeAdapter<T>) new TypeAdapter<ConversationDetails>() {
           @Override
           public void write(JsonWriter out, ConversationDetails value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ConversationDetails read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ConversationDetails given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ConversationDetails
   * @throws IOException if the JSON string is invalid with respect to ConversationDetails
   */
  public static ConversationDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ConversationDetails.class);
  }

  /**
   * Convert an instance of ConversationDetails to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

