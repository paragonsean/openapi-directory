/*
 * REST API Version 2
 * Circuit REST API to interact with the Circuit system.  [Learn more about the Circuit Development Community](https://www.circuit.com/web/developers/home)
 *
 * The version of the OpenAPI document: 2.9.235
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.WebHook;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for OutgoingWebhooksApi
 */
@Disabled
public class OutgoingWebhooksApiTest {

    private final OutgoingWebhooksApi api = new OutgoingWebhooksApi();

    /**
     * Registers Presence WebHook registration
     *
     * Registers a webHook that has a presence filter with the given URL and userIds. There is a maximum number of userIds allowed OauthScopes: READ_USER
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addPresenceWebHookTest() throws ApiException {
        String url = null;
        List<String> userIds = null;
        WebHook response = api.addPresenceWebHook(url, userIds);
        // TODO: test validations
    }

    /**
     * Registers a WebHook
     *
     * Registers the webHook with the given filter and callback URL. OauthScopes: READ_CONVERSATIONS, READ_USER
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addWebHookTest() throws ApiException {
        List<String> filter = null;
        String url = null;
        WebHook response = api.addWebHook(filter, url);
        // TODO: test validations
    }

    /**
     * Gets a list of webHooks
     *
     * Gets the list of webHooks registered for this user or API. OauthScopes: READ_CONVERSATIONS, READ_USER
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getWebHookTest() throws ApiException {
        List<WebHook> response = api.getWebHook();
        // TODO: test validations
    }

    /**
     * Gets a webHook
     *
     * Gets the registered webHook with the given ID. OauthScopes: READ_CONVERSATIONS, READ_USER
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getWebHookByIdTest() throws ApiException {
        String id = null;
        WebHook response = api.getWebHookById(id);
        // TODO: test validations
    }

    /**
     * Removes a registered webHook
     *
     * Unregisters the webHook with the given ID. OauthScopes: READ_CONVERSATIONS, READ_USER
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeWebHookTest() throws ApiException {
        String id = null;
        api.removeWebHook(id);
        // TODO: test validations
    }

    /**
     * Removes all webHooks
     *
     * Unregisters all webHooks of the authenticated user OauthScopes: READ_CONVERSATIONS, READ_USER
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeWebHooksTest() throws ApiException {
        api.removeWebHooks();
        // TODO: test validations
    }

    /**
     * Updates a Presence WebHook registration
     *
     * Updates a registration of a webHook that has a presence filter. The update can be performed either on the URL and/or the userIds. The new userIds, if any, will override any existing userIds. OauthScopes: READ_USER
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updatePresenceWebHookTest() throws ApiException {
        String id = null;
        String url = null;
        List<String> userIds = null;
        WebHook response = api.updatePresenceWebHook(id, url, userIds);
        // TODO: test validations
    }

    /**
     * Updates a WebHook registration
     *
     * Updates a webHook registration with the given filter and callback URL. OauthScopes: READ_CONVERSATIONS, READ_USER
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateWebHookTest() throws ApiException {
        String id = null;
        List<String> filter = null;
        String url = null;
        WebHook response = api.updateWebHook(id, filter, url);
        // TODO: test validations
    }

}
