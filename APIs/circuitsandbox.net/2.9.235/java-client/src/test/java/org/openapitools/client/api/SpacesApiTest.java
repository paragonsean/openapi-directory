/*
 * REST API Version 2
 * Circuit REST API to interact with the Circuit system.  [Learn more about the Circuit Development Community](https://www.circuit.com/web/developers/home)
 *
 * The version of the OpenAPI document: 2.9.235
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.AddParticipantsSearchResult;
import org.openapitools.client.model.BasicSearchResult;
import java.math.BigDecimal;
import org.openapitools.client.model.DirectoryResult;
import org.openapitools.client.model.FlaggedItemsResult;
import org.openapitools.client.model.LabelIds;
import java.time.OffsetDateTime;
import org.openapitools.client.model.ParticipantsImportDataResult;
import org.openapitools.client.model.ParticipantsLikeResult;
import org.openapitools.client.model.ParticipantsSearchResult;
import org.openapitools.client.model.ParticipantsSearchResultLarge;
import org.openapitools.client.model.SpacePinnedTopic;
import org.openapitools.client.model.SpaceReply;
import org.openapitools.client.model.SpaceSearchResultDetailedBack;
import org.openapitools.client.model.SpaceTopic;
import org.openapitools.client.model.SpaceTopicWithReplies;
import org.openapitools.client.model.SpacesSearchTermResult;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for SpacesApi
 */
@Disabled
public class SpacesApiTest {

    private final SpacesApi api = new SpacesApi();

    /**
     * Add Participant to Space
     *
     * Add a participant to a space OauthScopes: WRITE_SPACE, MANAGE_SPACE
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addParticipantsToSpaceTest() throws ApiException {
        String id = null;
        String role = null;
        List<String> userId = null;
        List<Object> response = api.addParticipantsToSpace(id, role, userId);
        // TODO: test validations
    }

    /**
     * Add recent search 
     *
     * Add recent search of a client to search controller. OauthScopes: WRITE_SPACE, MANAGE_SPACE, ORGANIZE_SPACE
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addRecentSpaceSearchTest() throws ApiException {
        String scope = null;
        String searchTerm = null;
        OffsetDateTime endTime = null;
        OffsetDateTime startTime = null;
        api.addRecentSpaceSearch(scope, searchTerm, endTime, startTime);
        // TODO: test validations
    }

    /**
     * Assign labels
     *
     * Assign labels to space OauthScopes: WRITE_SPACE, ORGANIZE_SPACE
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void assignLabelsTest() throws ApiException {
        String id = null;
        List<String> labels = null;
        List<LabelIds> response = api.assignLabels(id, labels);
        // TODO: test validations
    }

    /**
     * Cancels a space search of a client.
     *
     * Cancels a space search of a client. OauthScopes: WRITE_SPACE, MANAGE_SPACE
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cancelSpaceSearchTest() throws ApiException {
        String searchId = null;
        api.cancelSpaceSearch(searchId);
        // TODO: test validations
    }

    /**
     * creates a reply to a topic
     *
     * creates a reply to a topic OauthScopes: WRITE_SPACE
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createReplyTest() throws ApiException {
        String spaceId = null;
        String topicId = null;
        List<String> attachments = null;
        Boolean complex = null;
        String content = null;
        String formMetaData = null;
        String mentionedUser = null;
        SpaceReply response = api.createReply(spaceId, topicId, attachments, complex, content, formMetaData, mentionedUser);
        // TODO: test validations
    }

    /**
     * Create a space
     *
     * Create a space OauthScopes: WRITE_SPACE, MANAGE_SPACE, CREATE_SPACE_CONTENT
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createSpaceTest() throws ApiException {
        String accessModeType = null;
        String name = null;
        String role = null;
        String status = null;
        String type = null;
        String description = null;
        String largePictureBase64 = null;
        String smallPictureBase64 = null;
        List<String> tags = null;
        Object response = api.createSpace(accessModeType, name, role, status, type, description, largePictureBase64, smallPictureBase64, tags);
        // TODO: test validations
    }

    /**
     * creates a new space topic
     *
     * creates a new space topic OauthScopes: WRITE_SPACE, MANAGE_SPACE, CREATE_SPACE_CONTENT
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createSpaceTopicTest() throws ApiException {
        String spaceId = null;
        String subject = null;
        List<String> attachments = null;
        Boolean complex = null;
        String content = null;
        List<String> contentTags = null;
        String formMetaData = null;
        String mentionedUser = null;
        List<String> tags = null;
        SpaceTopic response = api.createSpaceTopic(spaceId, subject, attachments, complex, content, contentTags, formMetaData, mentionedUser, tags);
        // TODO: test validations
    }

    /**
     * Delete a space
     *
     * Delete a space OauthScopes: WRITE_SPACE, MANAGE_SPACE, DELETE_SPACE_CONTENT
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteSpaceTest() throws ApiException {
        String id = null;
        api.deleteSpace(id);
        // TODO: test validations
    }

    /**
     * deletes a space item
     *
     * deletes a space item OauthScopes: WRITE_SPACE, DELETE_SPACE_CONTENT
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteSpaceItemTest() throws ApiException {
        String itemId = null;
        api.deleteSpaceItem(itemId);
        // TODO: test validations
    }

    /**
     * Deny access for a space
     *
     * Deny access for a space OauthScopes: WRITE_SPACE, MANAGE_SPACE
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void denySpaceAccesTest() throws ApiException {
        String spaceId = null;
        String participantId = null;
        String reason = null;
        api.denySpaceAcces(spaceId, participantId, reason);
        // TODO: test validations
    }

    /**
     * Space name exists
     *
     * Find out if a space name already exists for non-secret spaces. OauthScopes: READ_SPACE
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void existsSpaceNameTest() throws ApiException {
        String name = null;
        api.existsSpaceName(name);
        // TODO: test validations
    }

    /**
     * flag a space item
     *
     * flag a space item OauthScopes: WRITE_SPACE, UPDATE_SPACE_CONTENT
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void flagSpaceItemTest() throws ApiException {
        String itemId = null;
        api.flagSpaceItem(itemId);
        // TODO: test validations
    }

    /**
     * Get the directory
     *
     * Get the directory by a search query in ordered way OauthScopes: READ_SPACE
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDirectoryTest() throws ApiException {
        String sortBy = null;
        String sortOrder = null;
        String filter = null;
        String query = null;
        String pagePointer = null;
        BigDecimal numberOfResults = null;
        DirectoryResult response = api.getDirectory(sortBy, sortOrder, filter, query, pagePointer, numberOfResults);
        // TODO: test validations
    }

    /**
     * Get flagged items
     *
     * Get flagged items OauthScopes: READ_SPACE
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getFlaggedItemsTest() throws ApiException {
        String searchDirection = null;
        OffsetDateTime timestamp = null;
        String searchPointer = null;
        BigDecimal numberOfResults = null;
        FlaggedItemsResult response = api.getFlaggedItems(searchDirection, timestamp, searchPointer, numberOfResults);
        // TODO: test validations
    }

    /**
     * Get the likes of an item
     *
     * Get the likes of an item OauthScopes: READ_SPACE
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getLikesTest() throws ApiException {
        String itemId = null;
        String searchPointer = null;
        BigDecimal numberOfResults = null;
        ParticipantsLikeResult response = api.getLikes(itemId, searchPointer, numberOfResults);
        // TODO: test validations
    }

    /**
     * missing documentation
     *
     * missing documentation OauthScopes: READ_SPACE
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getParticipantsImportDataTest() throws ApiException {
        String spaceId = null;
        ParticipantsImportDataResult response = api.getParticipantsImportData(spaceId);
        // TODO: test validations
    }

    /**
     * Get the pending participants of a space
     *
     * Get the pending participants of a space OauthScopes: WRITE_SPACE, MANAGE_SPACE
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPendingParticipantsTest() throws ApiException {
        String id = null;
        String searchPointer = null;
        BigDecimal numberOfResults = null;
        ParticipantsSearchResult response = api.getPendingParticipants(id, searchPointer, numberOfResults);
        // TODO: test validations
    }

    /**
     * Retrieve pinned topics
     *
     * Retrieve pinned topics of a space OauthScopes: READ_SPACE
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPinnedTopicsTest() throws ApiException {
        String id = null;
        List<SpacePinnedTopic> response = api.getPinnedTopics(id);
        // TODO: test validations
    }

    /**
     * Retrieve recent space searches
     *
     * Retrieve recent space searches for a user. OauthScopes: READ_SPACE
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getRecentSearchesTest() throws ApiException {
        List<SpacesSearchTermResult> response = api.getRecentSearches();
        // TODO: test validations
    }

    /**
     * Get the participants of a space
     *
     * Get the participants of a space OauthScopes: READ_SPACE
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSpaceParticipantsTest() throws ApiException {
        String id = null;
        String sortBy = null;
        String sortOrder = null;
        String filterType = null;
        String filterValue = null;
        String query = null;
        String searchPointer = null;
        BigDecimal numberOfResults = null;
        ParticipantsSearchResult response = api.getSpaceParticipants(id, sortBy, sortOrder, filterType, filterValue, query, searchPointer, numberOfResults);
        // TODO: test validations
    }

    /**
     * Gets space replies
     *
     * Gets a number of Space replies OauthScopes: READ_SPACE
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSpaceRepliesTest() throws ApiException {
        String spaceId = null;
        String topicId = null;
        String searchDirection = null;
        OffsetDateTime timestamp = null;
        BigDecimal numberOfResults = null;
        SpaceReply response = api.getSpaceReplies(spaceId, topicId, searchDirection, timestamp, numberOfResults);
        // TODO: test validations
    }

    /**
     * Gets space topics
     *
     * Gets a number of Space topics OauthScopes: READ_SPACE
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSpaceTopicsTest() throws ApiException {
        String spaceId = null;
        String searchDirection = null;
        OffsetDateTime timestamp = null;
        BigDecimal numberOfResults = null;
        List<SpaceTopic> response = api.getSpaceTopics(spaceId, searchDirection, timestamp, numberOfResults);
        // TODO: test validations
    }

    /**
     * Get the spaces
     *
     * Get the spaces OauthScopes: READ_SPACE
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSpacesTest() throws ApiException {
        OffsetDateTime timestamp = null;
        BigDecimal numberOfResults = null;
        Object response = api.getSpaces(timestamp, numberOfResults);
        // TODO: test validations
    }

    /**
     * Get the spaces by their ids
     *
     * Get the spaces by their ids OauthScopes: READ_SPACE
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSpacesByIdsTest() throws ApiException {
        List<String> ids = null;
        Object response = api.getSpacesByIds(ids);
        // TODO: test validations
    }

    /**
     * grant access for a space
     *
     * grant access for a space OauthScopes: WRITE_SPACE, MANAGE_SPACE
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void grantSpaceAccesTest() throws ApiException {
        String spaceId = null;
        String participantId = null;
        api.grantSpaceAcces(spaceId, participantId);
        // TODO: test validations
    }

    /**
     * Join a space
     *
     * Join a space OauthScopes: WRITE_SPACE
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void joinSpaceTest() throws ApiException {
        String id = null;
        Object response = api.joinSpace(id);
        // TODO: test validations
    }

    /**
     * Leave a space
     *
     * Leave a space OauthScopes: WRITE_SPACE
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void leaveSpaceTest() throws ApiException {
        String id = null;
        api.leaveSpace(id);
        // TODO: test validations
    }

    /**
     * Like a space item
     *
     * Like a space item OauthScopes: WRITE_SPACE, UPDATE_SPACE_CONTENT
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void likeSpaceItemTest() throws ApiException {
        String itemId = null;
        api.likeSpaceItem(itemId);
        // TODO: test validations
    }

    /**
     * Pin a topic
     *
     * Pin a topic OauthScopes: WRITE_SPACE, MANAGE_SPACE
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pinTopicTest() throws ApiException {
        String topicId = null;
        BigDecimal position = null;
        api.pinTopic(topicId, position);
        // TODO: test validations
    }

    /**
     * request access for a space
     *
     * request access for a space OauthScopes: READ_SPACE
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void requestSpaceAccesTest() throws ApiException {
        String spaceId = null;
        String reason = null;
        api.requestSpaceAcces(spaceId, reason);
        // TODO: test validations
    }

    /**
     * Finds participants to add to add to a space 
     *
     * Finds participants to add to a space  OauthScopes: WRITE_SPACE, MANAGE_SPACE, ORGANIZE_SPACE
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void searchParticipantsToAddTest() throws ApiException {
        String id = null;
        String query = null;
        List<AddParticipantsSearchResult> response = api.searchParticipantsToAdd(id, query);
        // TODO: test validations
    }

    /**
     * Get the participants of a space
     *
     * Get the participants of a space OauthScopes: READ_SPACE
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void searchSpaceParticipantsTest() throws ApiException {
        String id = null;
        String query = null;
        List<ParticipantsSearchResultLarge> response = api.searchSpaceParticipants(id, query);
        // TODO: test validations
    }

    /**
     * starts a basic search in spaces
     *
     * starts a basic search in spaces OauthScopes: READ_SPACE
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void startBasicSpacesSearchTest() throws ApiException {
        String scope = null;
        String searchTerm = null;
        OffsetDateTime startTime = null;
        OffsetDateTime endTime = null;
        List<String> prioritySpaces = null;
        BasicSearchResult response = api.startBasicSpacesSearch(scope, searchTerm, startTime, endTime, prioritySpaces);
        // TODO: test validations
    }

    /**
     * starts a detailed search in a space
     *
     * starts a detailed search in a space OauthScopes: READ_SPACE
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void startDetailedSpaceSearchTest() throws ApiException {
        String scope = null;
        String searchTerm = null;
        String spaceId = null;
        OffsetDateTime startTime = null;
        OffsetDateTime endTime = null;
        String searchId = null;
        List<SpaceSearchResultDetailedBack> response = api.startDetailedSpaceSearch(scope, searchTerm, spaceId, startTime, endTime, searchId);
        // TODO: test validations
    }

    /**
     * Unassign labels
     *
     * Unassign labels from a space OauthScopes: WRITE_SPACE, ORGANIZE_SPACE
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void unassignLabelsTest() throws ApiException {
        String id = null;
        List<String> labelIds = null;
        List<LabelIds> response = api.unassignLabels(id, labelIds);
        // TODO: test validations
    }

    /**
     * Unflag a space item
     *
     * Unflag a space item OauthScopes: WRITE_SPACE, UPDATE_SPACE_CONTENT
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void unflagSpaceItemTest() throws ApiException {
        String itemId = null;
        api.unflagSpaceItem(itemId);
        // TODO: test validations
    }

    /**
     * Unlike a space item
     *
     * Unlike a space item OauthScopes: WRITE_SPACE, UPDATE_SPACE_CONTENT
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void unlikeSpaceItemTest() throws ApiException {
        String itemId = null;
        api.unlikeSpaceItem(itemId);
        // TODO: test validations
    }

    /**
     * Unpin a topic
     *
     * Unpin a topic OauthScopes: WRITE_SPACE, MANAGE_SPACE
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void unpinTopicTest() throws ApiException {
        String topicId = null;
        api.unpinTopic(topicId);
        // TODO: test validations
    }

    /**
     * Update participant
     *
     * Update participant in space OauthScopes: WRITE_SPACE, MANAGE_SPACE, ORGANIZE_SPACE
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateParticipantInSpaceTest() throws ApiException {
        String spaceId = null;
        String role = null;
        String userId = null;
        api.updateParticipantInSpace(spaceId, role, userId);
        // TODO: test validations
    }

    /**
     * Update read timestamp
     *
     * Update read timestamp OauthScopes: READ_SPACE, WRITE_SPACE
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateReadTimestampTest() throws ApiException {
        String id = null;
        OffsetDateTime timestamp = null;
        api.updateReadTimestamp(id, timestamp);
        // TODO: test validations
    }

    /**
     * Update a space
     *
     * Update a space OauthScopes: WRITE_SPACE, UPDATE_SPACE_CONTENT
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateSpaceTest() throws ApiException {
        String id = null;
        String accessModeType = null;
        String description = null;
        String largePictureBase64 = null;
        String name = null;
        String ownerId = null;
        String role = null;
        String smallPictureBase64 = null;
        String status = null;
        List<String> tags = null;
        String type = null;
        Object response = api.updateSpace(id, accessModeType, description, largePictureBase64, name, ownerId, role, smallPictureBase64, status, tags, type);
        // TODO: test validations
    }

    /**
     * Updates a space reply
     *
     * Updates a space reply OauthScopes: WRITE_SPACE, UPDATE_SPACE_CONTENT
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateSpaceReplyTest() throws ApiException {
        String spaceId = null;
        String topicId = null;
        String replyId = null;
        List<String> attachments = null;
        Boolean complex = null;
        String content = null;
        String formMetaData = null;
        List<String> mentionedUsers = null;
        SpaceReply response = api.updateSpaceReply(spaceId, topicId, replyId, attachments, complex, content, formMetaData, mentionedUsers);
        // TODO: test validations
    }

    /**
     * Updates a topic
     *
     * Updates a topic OauthScopes: WRITE_SPACE, UPDATE_SPACE_CONTENT
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateSpaceTopicTest() throws ApiException {
        String spaceId = null;
        String topicId = null;
        List<String> attachments = null;
        Boolean complex = null;
        String content = null;
        List<String> contentTags = null;
        String formMetaData = null;
        List<String> mentionedUsers = null;
        String subject = null;
        List<String> tags = null;
        SpaceTopic response = api.updateSpaceTopic(spaceId, topicId, attachments, complex, content, contentTags, formMetaData, mentionedUsers, subject, tags);
        // TODO: test validations
    }

    /**
     * Update tags
     *
     * Update the tags of a topic   OauthScopes: WRITE_SPACE, UPDATE_SPACE_CONTENT
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateTopicTagsTest() throws ApiException {
        String topicId = null;
        List<String> tags = null;
        SpaceTopic response = api.updateTopicTags(topicId, tags);
        // TODO: test validations
    }

    /**
     * Gets space replies and a topic
     *
     * Gets a number of Space replies with a matching topic OauthScopes: READ_SPACE
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void v2GetTopicWithRepliesTest() throws ApiException {
        String spaceId = null;
        String topicId = null;
        BigDecimal numberOfReplies = null;
        SpaceTopicWithReplies response = api.v2GetTopicWithReplies(spaceId, topicId, numberOfReplies);
        // TODO: test validations
    }

    /**
     * Removes participants from a space
     *
     * removes Participants from a space OauthScopes: WRITE_SPACE, MANAGE_SPACE, ORGANIZE_SPACE
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void v2RemoveParticipantsFromSpaceTest() throws ApiException {
        String id = null;
        List<String> userIds = null;
        api.v2RemoveParticipantsFromSpace(id, userIds);
        // TODO: test validations
    }

    /**
     * Update content of welcome box
     *
     * Update content of the welcome box of a space OauthScopes: MANAGE_SPACE, WRITE_SPACE
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void v2UpdateWelcomeBoxContentTest() throws ApiException {
        String spaceId = null;
        String content = null;
        Boolean displayWelcomeBox = null;
        api.v2UpdateWelcomeBoxContent(spaceId, content, displayWelcomeBox);
        // TODO: test validations
    }

}
