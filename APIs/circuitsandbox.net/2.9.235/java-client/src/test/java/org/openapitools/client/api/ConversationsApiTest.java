/*
 * REST API Version 2
 * Circuit REST API to interact with the Circuit system.  [Learn more about the Circuit Development Community](https://www.circuit.com/web/developers/home)
 *
 * The version of the OpenAPI document: 2.9.235
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import java.math.BigDecimal;
import org.openapitools.client.model.Conversation;
import org.openapitools.client.model.ConversationDetails;
import org.openapitools.client.model.ConversationItem;
import org.openapitools.client.model.ConversationParticipantsList;
import org.openapitools.client.model.ConversationSearchResult;
import org.openapitools.client.model.ConversationsPage;
import org.openapitools.client.model.Label;
import java.time.OffsetDateTime;
import org.openapitools.client.model.PinnedTopic;
import org.openapitools.client.model.User;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ConversationsApi
 */
@Disabled
public class ConversationsApiTest {

    private final ConversationsApi api = new ConversationsApi();

    /**
     * Adds a conversation to the favorites
     *
     * Adds a conversation to the favorites. Favorites can be displayed in a separate side tab inside of the Circuit client to have a better overview of important conversations. OauthScopes: WRITE_CONVERSATIONS
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addFavoriteTest() throws ApiException {
        String convId = null;
        api.addFavorite(convId);
        // TODO: test validations
    }

    /**
     * Add a user label
     *
     * Add a label to the list of user labels OauthScopes: WRITE_USER_PROFILE, ORGANIZE_CONVERSATIONS
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addLabelTest() throws ApiException {
        String label = null;
        Label response = api.addLabel(label);
        // TODO: test validations
    }

    /**
     * Add moderators
     *
     * Adds a list of moderators to a conversation OauthScopes: WRITE_CONVERSATIONS, MANAGE_CONVERSATIONS
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addModeratorsTest() throws ApiException {
        String convId = null;
        List<String> moderators = null;
        api.addModerators(convId, moderators);
        // TODO: test validations
    }

    /**
     * Adds participants to a community
     *
     * Adds one or more participants to the given community. This operation can only be performed by a user who is already a member of the community. OauthScopes: WRITE_CONVERSATIONS, MANAGE_CONVERSATIONS
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addParticipantCommunityTest() throws ApiException {
        String convId = null;
        List<String> participants = null;
        Conversation response = api.addParticipantCommunity(convId, participants);
        // TODO: test validations
    }

    /**
     * Adds participants to a group conversation
     *
     * Adds one or more participants to the given group conversation. This operation can only be performed by a user who is already a member of the conversation. OauthScopes: WRITE_CONVERSATIONS, MANAGE_CONVERSATIONS
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addParticipantGroupTest() throws ApiException {
        String convId = null;
        List<String> participants = null;
        Conversation response = api.addParticipantGroup(convId, participants);
        // TODO: test validations
    }

    /**
     * Adds a message to a conversation
     *
     * Adds a message to the given conversation. This operation can be only performed on behalf of a user who is already a member of the conversation. OauthScopes: WRITE_CONVERSATIONS, CREATE_CONVERSATIONS_CONTENT
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addTextItemTest() throws ApiException {
        String convId = null;
        List<String> attachments = null;
        String content = null;
        String formMetaData = null;
        String subject = null;
        ConversationItem response = api.addTextItem(convId, attachments, content, formMetaData, subject);
        // TODO: test validations
    }

    /**
     * Adds a message to an item
     *
     * Adds a message to the existing item. The added message will be a child item of the message with the given itemId. OauthScopes: WRITE_CONVERSATIONS
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addTextItemWithParentTest() throws ApiException {
        String convId = null;
        String itemId = null;
        List<String> attachments = null;
        String content = null;
        String formMetaData = null;
        String subject = null;
        ConversationItem response = api.addTextItemWithParent(convId, itemId, attachments, content, formMetaData, subject);
        // TODO: test validations
    }

    /**
     * Archives conversation
     *
     * Archives a conversation by muting it OauthScopes: WRITE_CONVERSATIONS
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void archiveConversationTest() throws ApiException {
        String convId = null;
        api.archiveConversation(convId);
        // TODO: test validations
    }

    /**
     * Adds a label to a conversation
     *
     * Adds a label to a conversation, you can search and organize your conversations based on these labels OauthScopes: WRITE_CONVERSATIONS, ORGANIZE_CONVERSATIONS
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void assignLabelTest() throws ApiException {
        String convId = null;
        String label = null;
        Label response = api.assignLabel(convId, label);
        // TODO: test validations
    }

    /**
     * Creates a community conversation
     *
     * Creates a community. Communities are open conversations that anyone in a Circuit domain (tenant) can join without having to be added by another user. OauthScopes: WRITE_CONVERSATIONS, MANAGE_CONVERSATIONS
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createCommunityConversationTest() throws ApiException {
        String topic = null;
        String description = null;
        List<String> participants = null;
        Conversation response = api.createCommunityConversation(topic, description, participants);
        // TODO: test validations
    }

    /**
     * Creates a 1-to-1 conversation
     *
     * Creates a 1-to-1 conversation between the authenticated user and the user with the provided userId. In case there is already an existing 1-to-1 conversation between these users, the endpoint returns the existing conversation. OauthScopes: WRITE_CONVERSATIONS, MANAGE_CONVERSATIONS
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createDirectConversationTest() throws ApiException {
        String participant = null;
        Conversation response = api.createDirectConversation(participant);
        // TODO: test validations
    }

    /**
     * Creates a group conversation
     *
     * Creates a group conversation between three or more users. The authenticated user is directly added to this conversation. OauthScopes: WRITE_CONVERSATIONS, MANAGE_CONVERSATIONS
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createGroupConversationTest() throws ApiException {
        List<String> participants = null;
        String topic = null;
        Conversation response = api.createGroupConversation(participants, topic);
        // TODO: test validations
    }

    /**
     * Removes a conversation from favorites
     *
     * Removes a conversation from favorites. Favorites can be displayed in a separate side tab inside of the Circuit client to have a better overview of important conversations. OauthScopes: WRITE_CONVERSATIONS
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteFavoriteTest() throws ApiException {
        String convId = null;
        api.deleteFavorite(convId);
        // TODO: test validations
    }

    /**
     * Deletes a message from a conversation
     *
     * Marks a message in the given conversation as deleted. Deleted messages are still part of the conversation, but their content is no more visible. This operation can only be performed on behalf of the message&#39;s creator. OauthScopes: WRITE_CONVERSATIONS, DELETE_CONVERSATIONS_CONTENT
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteTextItemTest() throws ApiException {
        String convId = null;
        String itemId = null;
        ConversationItem response = api.deleteTextItem(convId, itemId);
        // TODO: test validations
    }

    /**
     * Adds a flag to a message in a conversation
     *
     * Adds a flag to the given message in the given conversation. OauthScopes: WRITE_CONVERSATIONS, ORGANIZE_CONVERSATIONS
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void flagItemTest() throws ApiException {
        String convId = null;
        String itemId = null;
        String itemCreationTime = null;
        String parentId = null;
        api.flagItem(convId, itemId, itemCreationTime, parentId);
        // TODO: test validations
    }

    /**
     * Gets a list of communities
     *
     * Gets a list of communities. This endpoint can be used to explore the communities the authenticated user could join. OauthScopes: READ_CONVERSATIONS
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCommunityConversationsTest() throws ApiException {
        String sort = null;
        String order = null;
        Boolean includeOwn = null;
        BigDecimal startIndex = null;
        BigDecimal results = null;
        List<Conversation> response = api.getCommunityConversations(sort, order, includeOwn, startIndex, results);
        // TODO: test validations
    }

    /**
     * Gets a list of conversation items
     *
     * Gets a list of conversation items. OauthScopes: READ_CONVERSATIONS
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getConversationItemsTest() throws ApiException {
        String convId = null;
        OffsetDateTime modTime = null;
        String direction = null;
        BigDecimal results = null;
        List<ConversationItem> response = api.getConversationItems(convId, modTime, direction, results);
        // TODO: test validations
    }

    /**
     * Gets a conversation
     *
     * Gets a conversation based on the given ID. OauthScopes: READ_CONVERSATIONS
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getConversationbyIdTest() throws ApiException {
        String convId = null;
        Conversation response = api.getConversationbyId(convId);
        // TODO: test validations
    }

    /**
     * Gets a list of conversations
     *
     * Gets a list of conversations and communities the authenticated user participates in. OauthScopes: READ_CONVERSATIONS
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getConversationsTest() throws ApiException {
        OffsetDateTime modTime = null;
        String direction = null;
        BigDecimal results = null;
        List<Conversation> response = api.getConversations(modTime, direction, results);
        // TODO: test validations
    }

    /**
     * Gets conversations
     *
     * Gets conversation based on the given IDs. OauthScopes: READ_CONVERSATIONS
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getConversationsByIdTest() throws ApiException {
        List<String> convIds = null;
        List<Conversation> response = api.getConversationsById(convIds);
        // TODO: test validations
    }

    /**
     * Returns conversations with a certain label
     *
     * Returns conversations with matching labels and paginated  OauthScopes: READ_CONVERSATIONS
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getConversationsByLabelTest() throws ApiException {
        String labelId = null;
        String nextPagePointer = null;
        BigDecimal pageSize = null;
        ConversationsPage response = api.getConversationsByLabel(labelId, nextPagePointer, pageSize);
        // TODO: test validations
    }

    /**
     * Checks for a 1-to-1 conversation
     *
     * Checks if a 1-to-1 conversation between the authenticated user and the user with the provided userId exists. OauthScopes: READ_CONVERSATIONS
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDirectConversationTest() throws ApiException {
        String participant = null;
        Conversation response = api.getDirectConversation(participant);
        // TODO: test validations
    }

    /**
     * Gets favorite conversations
     *
     * Gets the conversationIds which are marked as favorites. OauthScopes: READ_CONVERSATIONS
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getFavoriteConversationsTest() throws ApiException {
        List<String> response = api.getFavoriteConversations();
        // TODO: test validations
    }

    /**
     * Gets a list of the flagged messages of a conversation
     *
     * Gets a list of all the flagged messages in the given conversation. OauthScopes: READ_CONVERSATIONS, ORGANIZE_CONVERSATIONS
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getFlagItemTest() throws ApiException {
        String convId = null;
        List<ConversationItem> response = api.getFlagItem(convId);
        // TODO: test validations
    }

    /**
     * Gets a list of the flagged messages
     *
     * Gets a list of all the messages the authenticated user has flagged. This endpoint should be used carefully in case where the authenticated user has a lot of flagged messages. OauthScopes: READ_CONVERSATIONS
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getFlagItemConvTest() throws ApiException {
        List<ConversationItem> response = api.getFlagItemConv();
        // TODO: test validations
    }

    /**
     * Gets the conference details of a conversation
     *
     * Gets the conference details of the given conversation. Conference details include the URL, which is used to join the conference through a web or mobile application, as well as the dial-in phone numbers and conference PIN, which are used to join the conference by phone. OauthScopes: READ_CONVERSATIONS
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getJoinDetailsTest() throws ApiException {
        String convId = null;
        ConversationDetails response = api.getJoinDetails(convId);
        // TODO: test validations
    }

    /**
     * Gets the conference details for multiple conversations
     *
     * Gets the conference details of the given conversations. Conference details include the URL, which is used to join the conference through a web or mobile application, as well as the dial-in phone numbers and conference PIN, which are used to join the conference by phone. OauthScopes: READ_CONVERSATIONS
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getJoinDetailsMultipleTest() throws ApiException {
        List<String> convIds = null;
        List<ConversationDetails> response = api.getJoinDetailsMultiple(convIds);
        // TODO: test validations
    }

    /**
     * Performs a list of participants
     *
     * Performs a search for participants. The max number of participants is configurable. If more participants are available a search pointer is returned for consecutive calls. OauthScopes: READ_CONVERSATIONS
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getParticipantsByConvIdTest() throws ApiException {
        String convId = null;
        BigDecimal pageSize = null;
        String name = null;
        String type = null;
        String searchPointer = null;
        List<ConversationParticipantsList> response = api.getParticipantsByConvId(convId, pageSize, name, type, searchPointer);
        // TODO: test validations
    }

    /**
     * Returns pinned topics of a conversation
     *
     * Returns pinned topics of a conversation OauthScopes: READ_CONVERSATIONS
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPinnedConversationsTest() throws ApiException {
        String convId = null;
        List<PinnedTopic> response = api.getPinnedConversations(convId);
        // TODO: test validations
    }

    /**
     * Returns a text item
     *
     * Returns a text item for a given item id OauthScopes: READ_CONVERSATIONS
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSingleConversationtemTest() throws ApiException {
        String itemId = null;
        ConversationItem response = api.getSingleConversationtem(itemId);
        // TODO: test validations
    }

    /**
     * Adds the authenticated user to a community
     *
     * Adds the authenticated user to the given community (i.e., allows the user to join this community). Contrary to the operation of adding a new participant, this operation can only be performed by a user who is not yet a member of the community. OauthScopes: WRITE_CONVERSATIONS, MANAGE_CONVERSATIONS
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void joinCommunityConversationTest() throws ApiException {
        String convId = null;
        Conversation response = api.joinCommunityConversation(convId);
        // TODO: test validations
    }

    /**
     * Adds a \&quot;like\&quot; to a message
     *
     * Adds a \&quot;like\&quot; to the given message in the given conversation OauthScopes: WRITE_CONVERSATIONS, UPDATE_CONVERSATION_CONTENT
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void likeItemTest() throws ApiException {
        String convId = null;
        String itemId = null;
        api.likeItem(convId, itemId);
        // TODO: test validations
    }

    /**
     * Set conversation moderated
     *
     * Set a conversation in moderatd mode. Moderators can be added and removed OauthScopes: WRITE_CONVERSATIONS, MODERATE_CONVERSATIONS
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void moderateConversationTest() throws ApiException {
        String convId = null;
        api.moderateConversation(convId);
        // TODO: test validations
    }

    /**
     * Pins a topic of a conversation
     *
     * Pins a topic of a conversation OauthScopes: READ_CONVERSATIONS
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void pinAConversationTest() throws ApiException {
        String convId = null;
        String itemId = null;
        Conversation response = api.pinAConversation(convId, itemId);
        // TODO: test validations
    }

    /**
     * Remove a user label
     *
     * Remove a label from the list of user labels OauthScopes: WRITE_USER_PROFILE, ORGANIZE_CONVERSATIONS
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeLabelTest() throws ApiException {
        String labelId = null;
        Label response = api.removeLabel(labelId);
        // TODO: test validations
    }

    /**
     * Remove moderators
     *
     * Removes a list of moderators from a conversation OauthScopes: WRITE_CONVERSATIONS, MODERATE_CONVERSATIONS
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeModeratorsTest() throws ApiException {
        String convId = null;
        List<String> moderators = null;
        api.removeModerators(convId, moderators);
        // TODO: test validations
    }

    /**
     * Removes participants from a community
     *
     * Removes one or more participants from the given community. The last participant of a community cannot be removed. This operation can only be performed by a user who is already a member of the community. OauthScopes: WRITE_CONVERSATIONS, MANAGE_CONVERSATIONS
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeParticipantCommunityTest() throws ApiException {
        String convId = null;
        List<String> participants = null;
        Conversation response = api.removeParticipantCommunity(convId, participants);
        // TODO: test validations
    }

    /**
     * Removes participants from a group conversation
     *
     * Removes one or more participants from the given group conversation. The last participant of a group conversation cannot be removed. This operation can only be performed on behalf of a user who is already a member of the conversation. OauthScopes: WRITE_CONVERSATIONS, MANAGE_CONVERSATIONS
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeParticipantGroupTest() throws ApiException {
        String convId = null;
        List<String> participants = null;
        Conversation response = api.removeParticipantGroup(convId, participants);
        // TODO: test validations
    }

    /**
     * Resolves an invite token to a conversation
     *
     * Resolves an invite token to a conversation OauthScopes: READ_CONVERSATIONS
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void resolveInvitationTokenTest() throws ApiException {
        String token = null;
        Conversation response = api.resolveInvitationToken(token);
        // TODO: test validations
    }

    /**
     * Performs a conversation search
     *
     * Performs a search for conversation content. A maximum of 100 conversations is returned. If you hit this limit you should refine the search term. OauthScopes: READ_CONVERSATIONS
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void searchConversationsTest() throws ApiException {
        String term = null;
        Boolean includeItemIds = null;
        String scope = null;
        ConversationSearchResult response = api.searchConversations(term, includeItemIds, scope);
        // TODO: test validations
    }

    /**
     * Removes the flag from a message
     *
     * Removes the flag from a given message that is posted to the given conversation. OauthScopes: WRITE_CONVERSATIONS, ORGANIZE_CONVERSATIONS
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void unFlagItemTest() throws ApiException {
        String convId = null;
        String itemId = null;
        api.unFlagItem(convId, itemId);
        // TODO: test validations
    }

    /**
     * Unpins a topic of a conversation
     *
     * Unpins a topic of a conversation OauthScopes: READ_CONVERSATIONS
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void unPinAConversationTest() throws ApiException {
        String convId = null;
        String itemId = null;
        Conversation response = api.unPinAConversation(convId, itemId);
        // TODO: test validations
    }

    /**
     * Removes a label from a conversation
     *
     * Removes a label from a conversation, you can search and organize your conversations based on these labels OauthScopes: WRITE_CONVERSATIONS
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void unassignLabelTest() throws ApiException {
        String convId = null;
        String labelId = null;
        Label response = api.unassignLabel(convId, labelId);
        // TODO: test validations
    }

    /**
     * Unmute conversation
     *
     * The conversation will no longer be archived but active again OauthScopes: WRITE_CONVERSATIONS
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void undoArchiveConversationTest() throws ApiException {
        String convId = null;
        api.undoArchiveConversation(convId);
        // TODO: test validations
    }

    /**
     * Removes a \&quot;like\&quot; from a message
     *
     * Removes a \&quot;like\&quot; from the given message in the given conversation OauthScopes: WRITE_CONVERSATIONS, UPDATE_CONVERSATION_CONTENT
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void unlikeItemTest() throws ApiException {
        String convId = null;
        String itemId = null;
        api.unlikeItem(convId, itemId);
        // TODO: test validations
    }

    /**
     * Set conversation unmoderated
     *
     * Set a conversation to unmoderatd mode OauthScopes: WRITE_CONVERSATIONS, MODERATE_CONVERSATIONS
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void unmoderateConversationTest() throws ApiException {
        String convId = null;
        api.unmoderateConversation(convId);
        // TODO: test validations
    }

    /**
     * Updates the information of a community
     *
     * Updates the information of the given community. OauthScopes: WRITE_CONVERSATIONS, MANAGE_CONVERSATIONS
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateConversationCommunityTest() throws ApiException {
        String convId = null;
        String description = null;
        String topic = null;
        Conversation response = api.updateConversationCommunity(convId, description, topic);
        // TODO: test validations
    }

    /**
     * Updates the information of a group conversation
     *
     * Updates the information of the given group conversation. OauthScopes: WRITE_CONVERSATIONS, MANAGE_CONVERSATIONS
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateConversationGroupTest() throws ApiException {
        String convId = null;
        String topic = null;
        Conversation response = api.updateConversationGroup(convId, topic);
        // TODO: test validations
    }

    /**
     * Updates the user profile
     *
     * Updates the user profile of the authenticated user OauthScopes: WRITE_USER_PROFILE
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateProfileTest() throws ApiException {
        String firstname = null;
        String jobTitle = null;
        String lastname = null;
        String locale = null;
        User response = api.updateProfile(firstname, jobTitle, lastname, locale);
        // TODO: test validations
    }

    /**
     * Updates a message
     *
     * Updates the content or subject of the existing message. Only the creator of the message is allowed to perform this operation. OauthScopes: WRITE_CONVERSATIONS, UPDATE_CONVERSATION_CONTENT
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateTextItemTest() throws ApiException {
        String convId = null;
        String itemId = null;
        List<String> attachments = null;
        String content = null;
        String formMetaData = null;
        String subject = null;
        ConversationItem response = api.updateTextItem(convId, itemId, attachments, content, formMetaData, subject);
        // TODO: test validations
    }

}
