/*
 * REST API Version 2
 * Circuit REST API to interact with the Circuit system.  [Learn more about the Circuit Development Community](https://www.circuit.com/web/developers/home)
 *
 * The version of the OpenAPI document: 2.9.235
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Label;
import java.time.OffsetDateTime;
import org.openapitools.client.model.Presence;
import org.openapitools.client.model.SupportInfo;
import org.openapitools.client.model.User;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for UsersApi
 */
@Disabled
public class UsersApiTest {

    private final UsersApi api = new UsersApi();

    /**
     * Returns all user labels
     *
     * Returns all labels of the user that were defined either explicit or implicit via assignment to conversations. OauthScopes: READ_USER_PROFILE, ORGANIZE_CONVERSATIONS
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getLabelTest() throws ApiException {
        List<Label> response = api.getLabel();
        // TODO: test validations
    }

    /**
     * Gets the presence status
     *
     * Gets the presence status of the users whose IDs or email addresses are given. OauthScopes: READ_USER
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPresenceTest() throws ApiException {
        List<String> userIds = null;
        List<Presence> response = api.getPresence(userIds);
        // TODO: test validations
    }

    /**
     * Gets the authenticated user&#39;s profile information
     *
     * Gets the authenticated user&#39;s profile information. OauthScopes: READ_USER_PROFILE
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getProfileTest() throws ApiException {
        User response = api.getProfile();
        // TODO: test validations
    }

    /**
     * Gets the support information
     *
     * Gets the support information for the tenant of the requesting user OauthScopes: READ_USER_PROFILE
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSupportInfoTest() throws ApiException {
        SupportInfo response = api.getSupportInfo();
        // TODO: test validations
    }

    /**
     * Get user by email
     *
     * Get user by first or secondary email address OauthScopes: READ_USER_PROFILE
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUserByEmailAddressTest() throws ApiException {
        String emailAddress = null;
        Boolean secondaryLookup = null;
        User response = api.getUserByEmailAddress(emailAddress, secondaryLookup);
        // TODO: test validations
    }

    /**
     * Gets the user&#39;s profile information
     *
     * Gets the profile information of the user with the given ID. OauthScopes: READ_USER
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUserByIdTest() throws ApiException {
        String id = null;
        User response = api.getUserById(id);
        // TODO: test validations
    }

    /**
     * Gets the presence status
     *
     * Gets the presence status of the users whose ID or email address is given. OauthScopes: READ_USER
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUserPresenceTest() throws ApiException {
        String id = null;
        Presence response = api.getUserPresence(id);
        // TODO: test validations
    }

    /**
     * Search for users
     *
     * Search for users based on an email address or username OauthScopes: READ_USER
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void searchUserTest() throws ApiException {
        String name = null;
        List<User> response = api.searchUser(name);
        // TODO: test validations
    }

    /**
     * Search multiple users.
     *
     * Search multiple users given by id or email address. OauthScopes: READ_USER
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void searchUsersListTest() throws ApiException {
        List<String> name = null;
        Boolean returnFullUserInfo = null;
        Boolean secondaryLookup = null;
        List<User> response = api.searchUsersList(name, returnFullUserInfo, secondaryLookup);
        // TODO: test validations
    }

    /**
     * Updates the presence status
     *
     * Updates the presence status of the authenticated user. OauthScopes: WRITE_USER_PROFILE, MANAGE_PRESENCE
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void setUserPresenceTest() throws ApiException {
        String state = null;
        Boolean clearDND = null;
        OffsetDateTime dndUntil = null;
        String statusMessage = null;
        Presence response = api.setUserPresence(state, clearDND, dndUntil, statusMessage);
        // TODO: test validations
    }

}
