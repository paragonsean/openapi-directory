/**
 * REST API Version 2
 * Circuit REST API to interact with the Circuit system.  [Learn more about the Circuit Development Community](https://www.circuit.com/web/developers/home)
 *
 * The version of the OpenAPI document: 2.9.235
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISpaceItemPreview.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISpaceItemPreview::OAISpaceItemPreview(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISpaceItemPreview::OAISpaceItemPreview() {
    this->initializeModel();
}

OAISpaceItemPreview::~OAISpaceItemPreview() {}

void OAISpaceItemPreview::initializeModel() {

    m_description_isSet = false;
    m_description_isValid = false;

    m_html_isSet = false;
    m_html_isValid = false;

    m_image_uri_isSet = false;
    m_image_uri_isValid = false;

    m_provider_isSet = false;
    m_provider_isValid = false;

    m_src_url_isSet = false;
    m_src_url_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAISpaceItemPreview::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISpaceItemPreview::fromJsonObject(QJsonObject json) {

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_html_isValid = ::OpenAPI::fromJsonValue(m_html, json[QString("html")]);
    m_html_isSet = !json[QString("html")].isNull() && m_html_isValid;

    m_image_uri_isValid = ::OpenAPI::fromJsonValue(m_image_uri, json[QString("imageURI")]);
    m_image_uri_isSet = !json[QString("imageURI")].isNull() && m_image_uri_isValid;

    m_provider_isValid = ::OpenAPI::fromJsonValue(m_provider, json[QString("provider")]);
    m_provider_isSet = !json[QString("provider")].isNull() && m_provider_isValid;

    m_src_url_isValid = ::OpenAPI::fromJsonValue(m_src_url, json[QString("srcURL")]);
    m_src_url_isSet = !json[QString("srcURL")].isNull() && m_src_url_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAISpaceItemPreview::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISpaceItemPreview::asJsonObject() const {
    QJsonObject obj;
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_html_isSet) {
        obj.insert(QString("html"), ::OpenAPI::toJsonValue(m_html));
    }
    if (m_image_uri_isSet) {
        obj.insert(QString("imageURI"), ::OpenAPI::toJsonValue(m_image_uri));
    }
    if (m_provider_isSet) {
        obj.insert(QString("provider"), ::OpenAPI::toJsonValue(m_provider));
    }
    if (m_src_url_isSet) {
        obj.insert(QString("srcURL"), ::OpenAPI::toJsonValue(m_src_url));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAISpaceItemPreview::getDescription() const {
    return m_description;
}
void OAISpaceItemPreview::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAISpaceItemPreview::is_description_Set() const{
    return m_description_isSet;
}

bool OAISpaceItemPreview::is_description_Valid() const{
    return m_description_isValid;
}

QString OAISpaceItemPreview::getHtml() const {
    return m_html;
}
void OAISpaceItemPreview::setHtml(const QString &html) {
    m_html = html;
    m_html_isSet = true;
}

bool OAISpaceItemPreview::is_html_Set() const{
    return m_html_isSet;
}

bool OAISpaceItemPreview::is_html_Valid() const{
    return m_html_isValid;
}

QString OAISpaceItemPreview::getImageUri() const {
    return m_image_uri;
}
void OAISpaceItemPreview::setImageUri(const QString &image_uri) {
    m_image_uri = image_uri;
    m_image_uri_isSet = true;
}

bool OAISpaceItemPreview::is_image_uri_Set() const{
    return m_image_uri_isSet;
}

bool OAISpaceItemPreview::is_image_uri_Valid() const{
    return m_image_uri_isValid;
}

QString OAISpaceItemPreview::getProvider() const {
    return m_provider;
}
void OAISpaceItemPreview::setProvider(const QString &provider) {
    m_provider = provider;
    m_provider_isSet = true;
}

bool OAISpaceItemPreview::is_provider_Set() const{
    return m_provider_isSet;
}

bool OAISpaceItemPreview::is_provider_Valid() const{
    return m_provider_isValid;
}

QString OAISpaceItemPreview::getSrcUrl() const {
    return m_src_url;
}
void OAISpaceItemPreview::setSrcUrl(const QString &src_url) {
    m_src_url = src_url;
    m_src_url_isSet = true;
}

bool OAISpaceItemPreview::is_src_url_Set() const{
    return m_src_url_isSet;
}

bool OAISpaceItemPreview::is_src_url_Valid() const{
    return m_src_url_isValid;
}

QString OAISpaceItemPreview::getTitle() const {
    return m_title;
}
void OAISpaceItemPreview::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAISpaceItemPreview::is_title_Set() const{
    return m_title_isSet;
}

bool OAISpaceItemPreview::is_title_Valid() const{
    return m_title_isValid;
}

QString OAISpaceItemPreview::getType() const {
    return m_type;
}
void OAISpaceItemPreview::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAISpaceItemPreview::is_type_Set() const{
    return m_type_isSet;
}

bool OAISpaceItemPreview::is_type_Valid() const{
    return m_type_isValid;
}

bool OAISpaceItemPreview::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_html_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provider_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_src_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISpaceItemPreview::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
