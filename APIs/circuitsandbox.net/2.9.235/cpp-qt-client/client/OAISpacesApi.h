/**
 * REST API Version 2
 * Circuit REST API to interact with the Circuit system.  [Learn more about the Circuit Development Community](https://www.circuit.com/web/developers/home)
 *
 * The version of the OpenAPI document: 2.9.235
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAISpacesApi_H
#define OAI_OAISpacesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAddParticipantsSearchResult.h"
#include "OAIBasicSearchResult.h"
#include "OAIDirectoryResult.h"
#include "OAIFlaggedItemsResult.h"
#include "OAILabelIds.h"
#include "OAIParticipantsImportDataResult.h"
#include "OAIParticipantsLikeResult.h"
#include "OAIParticipantsSearchResult.h"
#include "OAIParticipantsSearchResultLarge.h"
#include "OAISpacePinnedTopic.h"
#include "OAISpaceReply.h"
#include "OAISpaceSearchResultDetailedBack.h"
#include "OAISpaceTopic.h"
#include "OAISpaceTopicWithReplies.h"
#include "OAISpacesSearchTermResult.h"
#include <QJsonValue>
#include <QString>
#include <QDateTime>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAISpacesApi : public QObject {
    Q_OBJECT

public:
    OAISpacesApi(const int timeOut = 0);
    ~OAISpacesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  id QString [required]
    * @param[in]  role QString [required]
    * @param[in]  user_id QList<QString> [required]
    */
    virtual void addParticipantsToSpace(const QString &id, const QString &role, const QList<QString> &user_id);

    /**
    * @param[in]  scope QString [required]
    * @param[in]  search_term QString [required]
    * @param[in]  end_time QDateTime [optional]
    * @param[in]  start_time QDateTime [optional]
    */
    virtual void addRecentSpaceSearch(const QString &scope, const QString &search_term, const ::OpenAPI::OptionalParam<QDateTime> &end_time = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &start_time = ::OpenAPI::OptionalParam<QDateTime>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  labels QList<QString> [required]
    */
    virtual void assignLabels(const QString &id, const QList<QString> &labels);

    /**
    * @param[in]  search_id QString [required]
    */
    virtual void cancelSpaceSearch(const QString &search_id);

    /**
    * @param[in]  space_id QString [required]
    * @param[in]  topic_id QString [required]
    * @param[in]  attachments QList<QString> [optional]
    * @param[in]  complex bool [optional]
    * @param[in]  content QString [optional]
    * @param[in]  form_meta_data QString [optional]
    * @param[in]  mentioned_user QString [optional]
    */
    virtual void createReply(const QString &space_id, const QString &topic_id, const ::OpenAPI::OptionalParam<QList<QString>> &attachments = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &complex = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &content = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &form_meta_data = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &mentioned_user = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  access_mode_type QString [required]
    * @param[in]  name QString [required]
    * @param[in]  role QString [required]
    * @param[in]  status QString [required]
    * @param[in]  type QString [required]
    * @param[in]  description QString [optional]
    * @param[in]  large_picture_base64 QString [optional]
    * @param[in]  small_picture_base64 QString [optional]
    * @param[in]  tags QList<QString> [optional]
    */
    virtual void createSpace(const QString &access_mode_type, const QString &name, const QString &role, const QString &status, const QString &type, const ::OpenAPI::OptionalParam<QString> &description = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &large_picture_base64 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &small_picture_base64 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &tags = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  space_id QString [required]
    * @param[in]  subject QString [required]
    * @param[in]  attachments QList<QString> [optional]
    * @param[in]  complex bool [optional]
    * @param[in]  content QString [optional]
    * @param[in]  content_tags QList<QString> [optional]
    * @param[in]  form_meta_data QString [optional]
    * @param[in]  mentioned_user QString [optional]
    * @param[in]  tags QList<QString> [optional]
    */
    virtual void createSpaceTopic(const QString &space_id, const QString &subject, const ::OpenAPI::OptionalParam<QList<QString>> &attachments = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &complex = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &content = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &content_tags = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &form_meta_data = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &mentioned_user = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &tags = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  id QString [required]
    */
    virtual void deleteSpace(const QString &id);

    /**
    * @param[in]  item_id QString [required]
    */
    virtual void deleteSpaceItem(const QString &item_id);

    /**
    * @param[in]  space_id QString [required]
    * @param[in]  participant_id QString [required]
    * @param[in]  reason QString [optional]
    */
    virtual void denySpaceAcces(const QString &space_id, const QString &participant_id, const ::OpenAPI::OptionalParam<QString> &reason = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  name QString [required]
    */
    virtual void existsSpaceName(const QString &name);

    /**
    * @param[in]  item_id QString [required]
    */
    virtual void flagSpaceItem(const QString &item_id);

    /**
    * @param[in]  sort_by QString [required]
    * @param[in]  sort_order QString [required]
    * @param[in]  filter QString [required]
    * @param[in]  query QString [optional]
    * @param[in]  page_pointer QString [optional]
    * @param[in]  number_of_results double [optional]
    */
    virtual void getDirectory(const QString &sort_by, const QString &sort_order, const QString &filter, const ::OpenAPI::OptionalParam<QString> &query = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &page_pointer = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &number_of_results = ::OpenAPI::OptionalParam<double>());

    /**
    * @param[in]  search_direction QString [required]
    * @param[in]  timestamp QDateTime [required]
    * @param[in]  search_pointer QString [optional]
    * @param[in]  number_of_results double [optional]
    */
    virtual void getFlaggedItems(const QString &search_direction, const QDateTime &timestamp, const ::OpenAPI::OptionalParam<QString> &search_pointer = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &number_of_results = ::OpenAPI::OptionalParam<double>());

    /**
    * @param[in]  item_id QString [required]
    * @param[in]  search_pointer QString [optional]
    * @param[in]  number_of_results double [optional]
    */
    virtual void getLikes(const QString &item_id, const ::OpenAPI::OptionalParam<QString> &search_pointer = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &number_of_results = ::OpenAPI::OptionalParam<double>());

    /**
    * @param[in]  space_id QString [required]
    */
    virtual void getParticipantsImportData(const QString &space_id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  search_pointer QString [optional]
    * @param[in]  number_of_results double [optional]
    */
    virtual void getPendingParticipants(const QString &id, const ::OpenAPI::OptionalParam<QString> &search_pointer = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &number_of_results = ::OpenAPI::OptionalParam<double>());

    /**
    * @param[in]  id QString [required]
    */
    virtual void getPinnedTopics(const QString &id);


    virtual void getRecentSearches();

    /**
    * @param[in]  id QString [required]
    * @param[in]  sort_by QString [required]
    * @param[in]  sort_order QString [required]
    * @param[in]  filter_type QString [required]
    * @param[in]  filter_value QString [optional]
    * @param[in]  query QString [optional]
    * @param[in]  search_pointer QString [optional]
    * @param[in]  number_of_results double [optional]
    */
    virtual void getSpaceParticipants(const QString &id, const QString &sort_by, const QString &sort_order, const QString &filter_type, const ::OpenAPI::OptionalParam<QString> &filter_value = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &query = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &search_pointer = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &number_of_results = ::OpenAPI::OptionalParam<double>());

    /**
    * @param[in]  space_id QString [required]
    * @param[in]  topic_id QString [required]
    * @param[in]  search_direction QString [required]
    * @param[in]  timestamp QDateTime [optional]
    * @param[in]  number_of_results double [optional]
    */
    virtual void getSpaceReplies(const QString &space_id, const QString &topic_id, const QString &search_direction, const ::OpenAPI::OptionalParam<QDateTime> &timestamp = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<double> &number_of_results = ::OpenAPI::OptionalParam<double>());

    /**
    * @param[in]  space_id QString [required]
    * @param[in]  search_direction QString [required]
    * @param[in]  timestamp QDateTime [optional]
    * @param[in]  number_of_results double [optional]
    */
    virtual void getSpaceTopics(const QString &space_id, const QString &search_direction, const ::OpenAPI::OptionalParam<QDateTime> &timestamp = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<double> &number_of_results = ::OpenAPI::OptionalParam<double>());

    /**
    * @param[in]  timestamp QDateTime [optional]
    * @param[in]  number_of_results double [optional]
    */
    virtual void getSpaces(const ::OpenAPI::OptionalParam<QDateTime> &timestamp = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<double> &number_of_results = ::OpenAPI::OptionalParam<double>());

    /**
    * @param[in]  ids QList<QString> [required]
    */
    virtual void getSpacesByIds(const QList<QString> &ids);

    /**
    * @param[in]  space_id QString [required]
    * @param[in]  participant_id QString [required]
    */
    virtual void grantSpaceAcces(const QString &space_id, const QString &participant_id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void joinSpace(const QString &id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void leaveSpace(const QString &id);

    /**
    * @param[in]  item_id QString [required]
    */
    virtual void likeSpaceItem(const QString &item_id);

    /**
    * @param[in]  topic_id QString [required]
    * @param[in]  position double [required]
    */
    virtual void pinTopic(const QString &topic_id, const double &position);

    /**
    * @param[in]  space_id QString [required]
    * @param[in]  reason QString [optional]
    */
    virtual void requestSpaceAcces(const QString &space_id, const ::OpenAPI::OptionalParam<QString> &reason = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  query QString [required]
    */
    virtual void searchParticipantsToAdd(const QString &id, const QString &query);

    /**
    * @param[in]  id QString [required]
    * @param[in]  query QString [required]
    */
    virtual void searchSpaceParticipants(const QString &id, const QString &query);

    /**
    * @param[in]  scope QString [required]
    * @param[in]  search_term QString [required]
    * @param[in]  start_time QDateTime [optional]
    * @param[in]  end_time QDateTime [optional]
    * @param[in]  priority_spaces QList<QString> [optional]
    */
    virtual void startBasicSpacesSearch(const QString &scope, const QString &search_term, const ::OpenAPI::OptionalParam<QDateTime> &start_time = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &end_time = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QList<QString>> &priority_spaces = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  scope QString [required]
    * @param[in]  search_term QString [required]
    * @param[in]  space_id QString [required]
    * @param[in]  start_time QDateTime [optional]
    * @param[in]  end_time QDateTime [optional]
    * @param[in]  search_id QString [optional]
    */
    virtual void startDetailedSpaceSearch(const QString &scope, const QString &search_term, const QString &space_id, const ::OpenAPI::OptionalParam<QDateTime> &start_time = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &end_time = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QString> &search_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  label_ids QList<QString> [required]
    */
    virtual void unassignLabels(const QString &id, const QList<QString> &label_ids);

    /**
    * @param[in]  item_id QString [required]
    */
    virtual void unflagSpaceItem(const QString &item_id);

    /**
    * @param[in]  item_id QString [required]
    */
    virtual void unlikeSpaceItem(const QString &item_id);

    /**
    * @param[in]  topic_id QString [required]
    */
    virtual void unpinTopic(const QString &topic_id);

    /**
    * @param[in]  space_id QString [required]
    * @param[in]  role QString [required]
    * @param[in]  user_id QString [required]
    */
    virtual void updateParticipantInSpace(const QString &space_id, const QString &role, const QString &user_id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  timestamp QDateTime [required]
    */
    virtual void updateReadTimestamp(const QString &id, const QDateTime &timestamp);

    /**
    * @param[in]  id QString [required]
    * @param[in]  access_mode_type QString [optional]
    * @param[in]  description QString [optional]
    * @param[in]  large_picture_base64 QString [optional]
    * @param[in]  name QString [optional]
    * @param[in]  owner_id QString [optional]
    * @param[in]  role QString [optional]
    * @param[in]  small_picture_base64 QString [optional]
    * @param[in]  status QString [optional]
    * @param[in]  tags QList<QString> [optional]
    * @param[in]  type QString [optional]
    */
    virtual void updateSpace(const QString &id, const ::OpenAPI::OptionalParam<QString> &access_mode_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &large_picture_base64 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &owner_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &role = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &small_picture_base64 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &status = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &tags = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  space_id QString [required]
    * @param[in]  topic_id QString [required]
    * @param[in]  reply_id QString [required]
    * @param[in]  attachments QList<QString> [optional]
    * @param[in]  complex bool [optional]
    * @param[in]  content QString [optional]
    * @param[in]  form_meta_data QString [optional]
    * @param[in]  mentioned_users QList<QString> [optional]
    */
    virtual void updateSpaceReply(const QString &space_id, const QString &topic_id, const QString &reply_id, const ::OpenAPI::OptionalParam<QList<QString>> &attachments = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &complex = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &content = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &form_meta_data = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &mentioned_users = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  space_id QString [required]
    * @param[in]  topic_id QString [required]
    * @param[in]  attachments QList<QString> [optional]
    * @param[in]  complex bool [optional]
    * @param[in]  content QString [optional]
    * @param[in]  content_tags QList<QString> [optional]
    * @param[in]  form_meta_data QString [optional]
    * @param[in]  mentioned_users QList<QString> [optional]
    * @param[in]  subject QString [optional]
    * @param[in]  tags QList<QString> [optional]
    */
    virtual void updateSpaceTopic(const QString &space_id, const QString &topic_id, const ::OpenAPI::OptionalParam<QList<QString>> &attachments = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &complex = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &content = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &content_tags = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &form_meta_data = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &mentioned_users = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &subject = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &tags = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  topic_id QString [required]
    * @param[in]  tags QList<QString> [required]
    */
    virtual void updateTopicTags(const QString &topic_id, const QList<QString> &tags);

    /**
    * @param[in]  space_id QString [required]
    * @param[in]  topic_id QString [required]
    * @param[in]  number_of_replies double [optional]
    */
    virtual void v2GetTopicWithReplies(const QString &space_id, const QString &topic_id, const ::OpenAPI::OptionalParam<double> &number_of_replies = ::OpenAPI::OptionalParam<double>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  user_ids QList<QString> [required]
    */
    virtual void v2RemoveParticipantsFromSpace(const QString &id, const QList<QString> &user_ids);

    /**
    * @param[in]  space_id QString [required]
    * @param[in]  content QString [required]
    * @param[in]  display_welcome_box bool [optional]
    */
    virtual void v2UpdateWelcomeBoxContent(const QString &space_id, const QString &content, const ::OpenAPI::OptionalParam<bool> &display_welcome_box = ::OpenAPI::OptionalParam<bool>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void addParticipantsToSpaceCallback(OAIHttpRequestWorker *worker);
    void addRecentSpaceSearchCallback(OAIHttpRequestWorker *worker);
    void assignLabelsCallback(OAIHttpRequestWorker *worker);
    void cancelSpaceSearchCallback(OAIHttpRequestWorker *worker);
    void createReplyCallback(OAIHttpRequestWorker *worker);
    void createSpaceCallback(OAIHttpRequestWorker *worker);
    void createSpaceTopicCallback(OAIHttpRequestWorker *worker);
    void deleteSpaceCallback(OAIHttpRequestWorker *worker);
    void deleteSpaceItemCallback(OAIHttpRequestWorker *worker);
    void denySpaceAccesCallback(OAIHttpRequestWorker *worker);
    void existsSpaceNameCallback(OAIHttpRequestWorker *worker);
    void flagSpaceItemCallback(OAIHttpRequestWorker *worker);
    void getDirectoryCallback(OAIHttpRequestWorker *worker);
    void getFlaggedItemsCallback(OAIHttpRequestWorker *worker);
    void getLikesCallback(OAIHttpRequestWorker *worker);
    void getParticipantsImportDataCallback(OAIHttpRequestWorker *worker);
    void getPendingParticipantsCallback(OAIHttpRequestWorker *worker);
    void getPinnedTopicsCallback(OAIHttpRequestWorker *worker);
    void getRecentSearchesCallback(OAIHttpRequestWorker *worker);
    void getSpaceParticipantsCallback(OAIHttpRequestWorker *worker);
    void getSpaceRepliesCallback(OAIHttpRequestWorker *worker);
    void getSpaceTopicsCallback(OAIHttpRequestWorker *worker);
    void getSpacesCallback(OAIHttpRequestWorker *worker);
    void getSpacesByIdsCallback(OAIHttpRequestWorker *worker);
    void grantSpaceAccesCallback(OAIHttpRequestWorker *worker);
    void joinSpaceCallback(OAIHttpRequestWorker *worker);
    void leaveSpaceCallback(OAIHttpRequestWorker *worker);
    void likeSpaceItemCallback(OAIHttpRequestWorker *worker);
    void pinTopicCallback(OAIHttpRequestWorker *worker);
    void requestSpaceAccesCallback(OAIHttpRequestWorker *worker);
    void searchParticipantsToAddCallback(OAIHttpRequestWorker *worker);
    void searchSpaceParticipantsCallback(OAIHttpRequestWorker *worker);
    void startBasicSpacesSearchCallback(OAIHttpRequestWorker *worker);
    void startDetailedSpaceSearchCallback(OAIHttpRequestWorker *worker);
    void unassignLabelsCallback(OAIHttpRequestWorker *worker);
    void unflagSpaceItemCallback(OAIHttpRequestWorker *worker);
    void unlikeSpaceItemCallback(OAIHttpRequestWorker *worker);
    void unpinTopicCallback(OAIHttpRequestWorker *worker);
    void updateParticipantInSpaceCallback(OAIHttpRequestWorker *worker);
    void updateReadTimestampCallback(OAIHttpRequestWorker *worker);
    void updateSpaceCallback(OAIHttpRequestWorker *worker);
    void updateSpaceReplyCallback(OAIHttpRequestWorker *worker);
    void updateSpaceTopicCallback(OAIHttpRequestWorker *worker);
    void updateTopicTagsCallback(OAIHttpRequestWorker *worker);
    void v2GetTopicWithRepliesCallback(OAIHttpRequestWorker *worker);
    void v2RemoveParticipantsFromSpaceCallback(OAIHttpRequestWorker *worker);
    void v2UpdateWelcomeBoxContentCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void addParticipantsToSpaceSignal(QList<QJsonValue> summary);
    void addRecentSpaceSearchSignal();
    void assignLabelsSignal(QList<OAILabelIds> summary);
    void cancelSpaceSearchSignal();
    void createReplySignal(OAISpaceReply summary);
    void createSpaceSignal(QJsonValue summary);
    void createSpaceTopicSignal(OAISpaceTopic summary);
    void deleteSpaceSignal();
    void deleteSpaceItemSignal();
    void denySpaceAccesSignal();
    void existsSpaceNameSignal();
    void flagSpaceItemSignal();
    void getDirectorySignal(OAIDirectoryResult summary);
    void getFlaggedItemsSignal(OAIFlaggedItemsResult summary);
    void getLikesSignal(OAIParticipantsLikeResult summary);
    void getParticipantsImportDataSignal(OAIParticipantsImportDataResult summary);
    void getPendingParticipantsSignal(OAIParticipantsSearchResult summary);
    void getPinnedTopicsSignal(QList<OAISpacePinnedTopic> summary);
    void getRecentSearchesSignal(QList<OAISpacesSearchTermResult> summary);
    void getSpaceParticipantsSignal(OAIParticipantsSearchResult summary);
    void getSpaceRepliesSignal(OAISpaceReply summary);
    void getSpaceTopicsSignal(QList<OAISpaceTopic> summary);
    void getSpacesSignal(QJsonValue summary);
    void getSpacesByIdsSignal(QJsonValue summary);
    void grantSpaceAccesSignal();
    void joinSpaceSignal(QJsonValue summary);
    void leaveSpaceSignal();
    void likeSpaceItemSignal();
    void pinTopicSignal();
    void requestSpaceAccesSignal();
    void searchParticipantsToAddSignal(QList<OAIAddParticipantsSearchResult> summary);
    void searchSpaceParticipantsSignal(QList<OAIParticipantsSearchResultLarge> summary);
    void startBasicSpacesSearchSignal(OAIBasicSearchResult summary);
    void startDetailedSpaceSearchSignal(QList<OAISpaceSearchResultDetailedBack> summary);
    void unassignLabelsSignal(QList<OAILabelIds> summary);
    void unflagSpaceItemSignal();
    void unlikeSpaceItemSignal();
    void unpinTopicSignal();
    void updateParticipantInSpaceSignal();
    void updateReadTimestampSignal();
    void updateSpaceSignal(QJsonValue summary);
    void updateSpaceReplySignal(OAISpaceReply summary);
    void updateSpaceTopicSignal(OAISpaceTopic summary);
    void updateTopicTagsSignal(OAISpaceTopic summary);
    void v2GetTopicWithRepliesSignal(OAISpaceTopicWithReplies summary);
    void v2RemoveParticipantsFromSpaceSignal();
    void v2UpdateWelcomeBoxContentSignal();


    void addParticipantsToSpaceSignalFull(OAIHttpRequestWorker *worker, QList<QJsonValue> summary);
    void addRecentSpaceSearchSignalFull(OAIHttpRequestWorker *worker);
    void assignLabelsSignalFull(OAIHttpRequestWorker *worker, QList<OAILabelIds> summary);
    void cancelSpaceSearchSignalFull(OAIHttpRequestWorker *worker);
    void createReplySignalFull(OAIHttpRequestWorker *worker, OAISpaceReply summary);
    void createSpaceSignalFull(OAIHttpRequestWorker *worker, QJsonValue summary);
    void createSpaceTopicSignalFull(OAIHttpRequestWorker *worker, OAISpaceTopic summary);
    void deleteSpaceSignalFull(OAIHttpRequestWorker *worker);
    void deleteSpaceItemSignalFull(OAIHttpRequestWorker *worker);
    void denySpaceAccesSignalFull(OAIHttpRequestWorker *worker);
    void existsSpaceNameSignalFull(OAIHttpRequestWorker *worker);
    void flagSpaceItemSignalFull(OAIHttpRequestWorker *worker);
    void getDirectorySignalFull(OAIHttpRequestWorker *worker, OAIDirectoryResult summary);
    void getFlaggedItemsSignalFull(OAIHttpRequestWorker *worker, OAIFlaggedItemsResult summary);
    void getLikesSignalFull(OAIHttpRequestWorker *worker, OAIParticipantsLikeResult summary);
    void getParticipantsImportDataSignalFull(OAIHttpRequestWorker *worker, OAIParticipantsImportDataResult summary);
    void getPendingParticipantsSignalFull(OAIHttpRequestWorker *worker, OAIParticipantsSearchResult summary);
    void getPinnedTopicsSignalFull(OAIHttpRequestWorker *worker, QList<OAISpacePinnedTopic> summary);
    void getRecentSearchesSignalFull(OAIHttpRequestWorker *worker, QList<OAISpacesSearchTermResult> summary);
    void getSpaceParticipantsSignalFull(OAIHttpRequestWorker *worker, OAIParticipantsSearchResult summary);
    void getSpaceRepliesSignalFull(OAIHttpRequestWorker *worker, OAISpaceReply summary);
    void getSpaceTopicsSignalFull(OAIHttpRequestWorker *worker, QList<OAISpaceTopic> summary);
    void getSpacesSignalFull(OAIHttpRequestWorker *worker, QJsonValue summary);
    void getSpacesByIdsSignalFull(OAIHttpRequestWorker *worker, QJsonValue summary);
    void grantSpaceAccesSignalFull(OAIHttpRequestWorker *worker);
    void joinSpaceSignalFull(OAIHttpRequestWorker *worker, QJsonValue summary);
    void leaveSpaceSignalFull(OAIHttpRequestWorker *worker);
    void likeSpaceItemSignalFull(OAIHttpRequestWorker *worker);
    void pinTopicSignalFull(OAIHttpRequestWorker *worker);
    void requestSpaceAccesSignalFull(OAIHttpRequestWorker *worker);
    void searchParticipantsToAddSignalFull(OAIHttpRequestWorker *worker, QList<OAIAddParticipantsSearchResult> summary);
    void searchSpaceParticipantsSignalFull(OAIHttpRequestWorker *worker, QList<OAIParticipantsSearchResultLarge> summary);
    void startBasicSpacesSearchSignalFull(OAIHttpRequestWorker *worker, OAIBasicSearchResult summary);
    void startDetailedSpaceSearchSignalFull(OAIHttpRequestWorker *worker, QList<OAISpaceSearchResultDetailedBack> summary);
    void unassignLabelsSignalFull(OAIHttpRequestWorker *worker, QList<OAILabelIds> summary);
    void unflagSpaceItemSignalFull(OAIHttpRequestWorker *worker);
    void unlikeSpaceItemSignalFull(OAIHttpRequestWorker *worker);
    void unpinTopicSignalFull(OAIHttpRequestWorker *worker);
    void updateParticipantInSpaceSignalFull(OAIHttpRequestWorker *worker);
    void updateReadTimestampSignalFull(OAIHttpRequestWorker *worker);
    void updateSpaceSignalFull(OAIHttpRequestWorker *worker, QJsonValue summary);
    void updateSpaceReplySignalFull(OAIHttpRequestWorker *worker, OAISpaceReply summary);
    void updateSpaceTopicSignalFull(OAIHttpRequestWorker *worker, OAISpaceTopic summary);
    void updateTopicTagsSignalFull(OAIHttpRequestWorker *worker, OAISpaceTopic summary);
    void v2GetTopicWithRepliesSignalFull(OAIHttpRequestWorker *worker, OAISpaceTopicWithReplies summary);
    void v2RemoveParticipantsFromSpaceSignalFull(OAIHttpRequestWorker *worker);
    void v2UpdateWelcomeBoxContentSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use addParticipantsToSpaceSignalError() instead")
    void addParticipantsToSpaceSignalE(QList<QJsonValue> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void addParticipantsToSpaceSignalError(QList<QJsonValue> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addRecentSpaceSearchSignalError() instead")
    void addRecentSpaceSearchSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void addRecentSpaceSearchSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use assignLabelsSignalError() instead")
    void assignLabelsSignalE(QList<OAILabelIds> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void assignLabelsSignalError(QList<OAILabelIds> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cancelSpaceSearchSignalError() instead")
    void cancelSpaceSearchSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void cancelSpaceSearchSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createReplySignalError() instead")
    void createReplySignalE(OAISpaceReply summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createReplySignalError(OAISpaceReply summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createSpaceSignalError() instead")
    void createSpaceSignalE(QJsonValue summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createSpaceSignalError(QJsonValue summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createSpaceTopicSignalError() instead")
    void createSpaceTopicSignalE(OAISpaceTopic summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createSpaceTopicSignalError(OAISpaceTopic summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteSpaceSignalError() instead")
    void deleteSpaceSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteSpaceSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteSpaceItemSignalError() instead")
    void deleteSpaceItemSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteSpaceItemSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use denySpaceAccesSignalError() instead")
    void denySpaceAccesSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void denySpaceAccesSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use existsSpaceNameSignalError() instead")
    void existsSpaceNameSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void existsSpaceNameSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use flagSpaceItemSignalError() instead")
    void flagSpaceItemSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void flagSpaceItemSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDirectorySignalError() instead")
    void getDirectorySignalE(OAIDirectoryResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDirectorySignalError(OAIDirectoryResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getFlaggedItemsSignalError() instead")
    void getFlaggedItemsSignalE(OAIFlaggedItemsResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getFlaggedItemsSignalError(OAIFlaggedItemsResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getLikesSignalError() instead")
    void getLikesSignalE(OAIParticipantsLikeResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getLikesSignalError(OAIParticipantsLikeResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getParticipantsImportDataSignalError() instead")
    void getParticipantsImportDataSignalE(OAIParticipantsImportDataResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getParticipantsImportDataSignalError(OAIParticipantsImportDataResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPendingParticipantsSignalError() instead")
    void getPendingParticipantsSignalE(OAIParticipantsSearchResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPendingParticipantsSignalError(OAIParticipantsSearchResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPinnedTopicsSignalError() instead")
    void getPinnedTopicsSignalE(QList<OAISpacePinnedTopic> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPinnedTopicsSignalError(QList<OAISpacePinnedTopic> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRecentSearchesSignalError() instead")
    void getRecentSearchesSignalE(QList<OAISpacesSearchTermResult> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getRecentSearchesSignalError(QList<OAISpacesSearchTermResult> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSpaceParticipantsSignalError() instead")
    void getSpaceParticipantsSignalE(OAIParticipantsSearchResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSpaceParticipantsSignalError(OAIParticipantsSearchResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSpaceRepliesSignalError() instead")
    void getSpaceRepliesSignalE(OAISpaceReply summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSpaceRepliesSignalError(OAISpaceReply summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSpaceTopicsSignalError() instead")
    void getSpaceTopicsSignalE(QList<OAISpaceTopic> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSpaceTopicsSignalError(QList<OAISpaceTopic> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSpacesSignalError() instead")
    void getSpacesSignalE(QJsonValue summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSpacesSignalError(QJsonValue summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSpacesByIdsSignalError() instead")
    void getSpacesByIdsSignalE(QJsonValue summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSpacesByIdsSignalError(QJsonValue summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use grantSpaceAccesSignalError() instead")
    void grantSpaceAccesSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void grantSpaceAccesSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use joinSpaceSignalError() instead")
    void joinSpaceSignalE(QJsonValue summary, QNetworkReply::NetworkError error_type, QString error_str);
    void joinSpaceSignalError(QJsonValue summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use leaveSpaceSignalError() instead")
    void leaveSpaceSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void leaveSpaceSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use likeSpaceItemSignalError() instead")
    void likeSpaceItemSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void likeSpaceItemSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pinTopicSignalError() instead")
    void pinTopicSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void pinTopicSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use requestSpaceAccesSignalError() instead")
    void requestSpaceAccesSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void requestSpaceAccesSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchParticipantsToAddSignalError() instead")
    void searchParticipantsToAddSignalE(QList<OAIAddParticipantsSearchResult> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void searchParticipantsToAddSignalError(QList<OAIAddParticipantsSearchResult> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchSpaceParticipantsSignalError() instead")
    void searchSpaceParticipantsSignalE(QList<OAIParticipantsSearchResultLarge> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void searchSpaceParticipantsSignalError(QList<OAIParticipantsSearchResultLarge> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use startBasicSpacesSearchSignalError() instead")
    void startBasicSpacesSearchSignalE(OAIBasicSearchResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void startBasicSpacesSearchSignalError(OAIBasicSearchResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use startDetailedSpaceSearchSignalError() instead")
    void startDetailedSpaceSearchSignalE(QList<OAISpaceSearchResultDetailedBack> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void startDetailedSpaceSearchSignalError(QList<OAISpaceSearchResultDetailedBack> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use unassignLabelsSignalError() instead")
    void unassignLabelsSignalE(QList<OAILabelIds> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void unassignLabelsSignalError(QList<OAILabelIds> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use unflagSpaceItemSignalError() instead")
    void unflagSpaceItemSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void unflagSpaceItemSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use unlikeSpaceItemSignalError() instead")
    void unlikeSpaceItemSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void unlikeSpaceItemSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use unpinTopicSignalError() instead")
    void unpinTopicSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void unpinTopicSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateParticipantInSpaceSignalError() instead")
    void updateParticipantInSpaceSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void updateParticipantInSpaceSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateReadTimestampSignalError() instead")
    void updateReadTimestampSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void updateReadTimestampSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateSpaceSignalError() instead")
    void updateSpaceSignalE(QJsonValue summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateSpaceSignalError(QJsonValue summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateSpaceReplySignalError() instead")
    void updateSpaceReplySignalE(OAISpaceReply summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateSpaceReplySignalError(OAISpaceReply summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateSpaceTopicSignalError() instead")
    void updateSpaceTopicSignalE(OAISpaceTopic summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateSpaceTopicSignalError(OAISpaceTopic summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateTopicTagsSignalError() instead")
    void updateTopicTagsSignalE(OAISpaceTopic summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateTopicTagsSignalError(OAISpaceTopic summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v2GetTopicWithRepliesSignalError() instead")
    void v2GetTopicWithRepliesSignalE(OAISpaceTopicWithReplies summary, QNetworkReply::NetworkError error_type, QString error_str);
    void v2GetTopicWithRepliesSignalError(OAISpaceTopicWithReplies summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v2RemoveParticipantsFromSpaceSignalError() instead")
    void v2RemoveParticipantsFromSpaceSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void v2RemoveParticipantsFromSpaceSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v2UpdateWelcomeBoxContentSignalError() instead")
    void v2UpdateWelcomeBoxContentSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void v2UpdateWelcomeBoxContentSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use addParticipantsToSpaceSignalErrorFull() instead")
    void addParticipantsToSpaceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addParticipantsToSpaceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addRecentSpaceSearchSignalErrorFull() instead")
    void addRecentSpaceSearchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addRecentSpaceSearchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use assignLabelsSignalErrorFull() instead")
    void assignLabelsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void assignLabelsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use cancelSpaceSearchSignalErrorFull() instead")
    void cancelSpaceSearchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cancelSpaceSearchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createReplySignalErrorFull() instead")
    void createReplySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createReplySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createSpaceSignalErrorFull() instead")
    void createSpaceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createSpaceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createSpaceTopicSignalErrorFull() instead")
    void createSpaceTopicSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createSpaceTopicSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteSpaceSignalErrorFull() instead")
    void deleteSpaceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteSpaceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteSpaceItemSignalErrorFull() instead")
    void deleteSpaceItemSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteSpaceItemSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use denySpaceAccesSignalErrorFull() instead")
    void denySpaceAccesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void denySpaceAccesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use existsSpaceNameSignalErrorFull() instead")
    void existsSpaceNameSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void existsSpaceNameSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use flagSpaceItemSignalErrorFull() instead")
    void flagSpaceItemSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void flagSpaceItemSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDirectorySignalErrorFull() instead")
    void getDirectorySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDirectorySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getFlaggedItemsSignalErrorFull() instead")
    void getFlaggedItemsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getFlaggedItemsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getLikesSignalErrorFull() instead")
    void getLikesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getLikesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getParticipantsImportDataSignalErrorFull() instead")
    void getParticipantsImportDataSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getParticipantsImportDataSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPendingParticipantsSignalErrorFull() instead")
    void getPendingParticipantsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPendingParticipantsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPinnedTopicsSignalErrorFull() instead")
    void getPinnedTopicsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPinnedTopicsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRecentSearchesSignalErrorFull() instead")
    void getRecentSearchesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getRecentSearchesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSpaceParticipantsSignalErrorFull() instead")
    void getSpaceParticipantsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSpaceParticipantsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSpaceRepliesSignalErrorFull() instead")
    void getSpaceRepliesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSpaceRepliesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSpaceTopicsSignalErrorFull() instead")
    void getSpaceTopicsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSpaceTopicsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSpacesSignalErrorFull() instead")
    void getSpacesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSpacesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSpacesByIdsSignalErrorFull() instead")
    void getSpacesByIdsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSpacesByIdsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use grantSpaceAccesSignalErrorFull() instead")
    void grantSpaceAccesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void grantSpaceAccesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use joinSpaceSignalErrorFull() instead")
    void joinSpaceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void joinSpaceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use leaveSpaceSignalErrorFull() instead")
    void leaveSpaceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void leaveSpaceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use likeSpaceItemSignalErrorFull() instead")
    void likeSpaceItemSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void likeSpaceItemSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pinTopicSignalErrorFull() instead")
    void pinTopicSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pinTopicSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use requestSpaceAccesSignalErrorFull() instead")
    void requestSpaceAccesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void requestSpaceAccesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchParticipantsToAddSignalErrorFull() instead")
    void searchParticipantsToAddSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void searchParticipantsToAddSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchSpaceParticipantsSignalErrorFull() instead")
    void searchSpaceParticipantsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void searchSpaceParticipantsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use startBasicSpacesSearchSignalErrorFull() instead")
    void startBasicSpacesSearchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void startBasicSpacesSearchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use startDetailedSpaceSearchSignalErrorFull() instead")
    void startDetailedSpaceSearchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void startDetailedSpaceSearchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use unassignLabelsSignalErrorFull() instead")
    void unassignLabelsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void unassignLabelsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use unflagSpaceItemSignalErrorFull() instead")
    void unflagSpaceItemSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void unflagSpaceItemSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use unlikeSpaceItemSignalErrorFull() instead")
    void unlikeSpaceItemSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void unlikeSpaceItemSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use unpinTopicSignalErrorFull() instead")
    void unpinTopicSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void unpinTopicSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateParticipantInSpaceSignalErrorFull() instead")
    void updateParticipantInSpaceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateParticipantInSpaceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateReadTimestampSignalErrorFull() instead")
    void updateReadTimestampSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateReadTimestampSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateSpaceSignalErrorFull() instead")
    void updateSpaceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateSpaceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateSpaceReplySignalErrorFull() instead")
    void updateSpaceReplySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateSpaceReplySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateSpaceTopicSignalErrorFull() instead")
    void updateSpaceTopicSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateSpaceTopicSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateTopicTagsSignalErrorFull() instead")
    void updateTopicTagsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateTopicTagsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v2GetTopicWithRepliesSignalErrorFull() instead")
    void v2GetTopicWithRepliesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void v2GetTopicWithRepliesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v2RemoveParticipantsFromSpaceSignalErrorFull() instead")
    void v2RemoveParticipantsFromSpaceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void v2RemoveParticipantsFromSpaceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v2UpdateWelcomeBoxContentSignalErrorFull() instead")
    void v2UpdateWelcomeBoxContentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void v2UpdateWelcomeBoxContentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
