/**
 * REST API Version 2
 * Circuit REST API to interact with the Circuit system.  [Learn more about the Circuit Development Community](https://www.circuit.com/web/developers/home)
 *
 * The version of the OpenAPI document: 2.9.235
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRtcItem.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRtcItem::OAIRtcItem(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRtcItem::OAIRtcItem() {
    this->initializeModel();
}

OAIRtcItem::~OAIRtcItem() {}

void OAIRtcItem::initializeModel() {

    m_ended_isSet = false;
    m_ended_isValid = false;

    m_missed_isSet = false;
    m_missed_isValid = false;

    m_moved_isSet = false;
    m_moved_isValid = false;

    m_rtc_participants_isSet = false;
    m_rtc_participants_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIRtcItem::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRtcItem::fromJsonObject(QJsonObject json) {

    m_ended_isValid = ::OpenAPI::fromJsonValue(m_ended, json[QString("ended")]);
    m_ended_isSet = !json[QString("ended")].isNull() && m_ended_isValid;

    m_missed_isValid = ::OpenAPI::fromJsonValue(m_missed, json[QString("missed")]);
    m_missed_isSet = !json[QString("missed")].isNull() && m_missed_isValid;

    m_moved_isValid = ::OpenAPI::fromJsonValue(m_moved, json[QString("moved")]);
    m_moved_isSet = !json[QString("moved")].isNull() && m_moved_isValid;

    m_rtc_participants_isValid = ::OpenAPI::fromJsonValue(m_rtc_participants, json[QString("rtcParticipants")]);
    m_rtc_participants_isSet = !json[QString("rtcParticipants")].isNull() && m_rtc_participants_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIRtcItem::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRtcItem::asJsonObject() const {
    QJsonObject obj;
    if (m_ended.isSet()) {
        obj.insert(QString("ended"), ::OpenAPI::toJsonValue(m_ended));
    }
    if (m_missed_isSet) {
        obj.insert(QString("missed"), ::OpenAPI::toJsonValue(m_missed));
    }
    if (m_moved.isSet()) {
        obj.insert(QString("moved"), ::OpenAPI::toJsonValue(m_moved));
    }
    if (m_rtc_participants.size() > 0) {
        obj.insert(QString("rtcParticipants"), ::OpenAPI::toJsonValue(m_rtc_participants));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

OAIRtcEnded OAIRtcItem::getEnded() const {
    return m_ended;
}
void OAIRtcItem::setEnded(const OAIRtcEnded &ended) {
    m_ended = ended;
    m_ended_isSet = true;
}

bool OAIRtcItem::is_ended_Set() const{
    return m_ended_isSet;
}

bool OAIRtcItem::is_ended_Valid() const{
    return m_ended_isValid;
}

QString OAIRtcItem::getMissed() const {
    return m_missed;
}
void OAIRtcItem::setMissed(const QString &missed) {
    m_missed = missed;
    m_missed_isSet = true;
}

bool OAIRtcItem::is_missed_Set() const{
    return m_missed_isSet;
}

bool OAIRtcItem::is_missed_Valid() const{
    return m_missed_isValid;
}

OAIRtcMoved OAIRtcItem::getMoved() const {
    return m_moved;
}
void OAIRtcItem::setMoved(const OAIRtcMoved &moved) {
    m_moved = moved;
    m_moved_isSet = true;
}

bool OAIRtcItem::is_moved_Set() const{
    return m_moved_isSet;
}

bool OAIRtcItem::is_moved_Valid() const{
    return m_moved_isValid;
}

QList<OAIRtcParticipant> OAIRtcItem::getRtcParticipants() const {
    return m_rtc_participants;
}
void OAIRtcItem::setRtcParticipants(const QList<OAIRtcParticipant> &rtc_participants) {
    m_rtc_participants = rtc_participants;
    m_rtc_participants_isSet = true;
}

bool OAIRtcItem::is_rtc_participants_Set() const{
    return m_rtc_participants_isSet;
}

bool OAIRtcItem::is_rtc_participants_Valid() const{
    return m_rtc_participants_isValid;
}

QString OAIRtcItem::getType() const {
    return m_type;
}
void OAIRtcItem::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIRtcItem::is_type_Set() const{
    return m_type_isSet;
}

bool OAIRtcItem::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIRtcItem::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_ended.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_missed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_moved.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_rtc_participants.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRtcItem::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
