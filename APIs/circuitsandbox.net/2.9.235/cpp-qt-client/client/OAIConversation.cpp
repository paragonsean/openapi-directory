/**
 * REST API Version 2
 * Circuit REST API to interact with the Circuit system.  [Learn more about the Circuit Development Community](https://www.circuit.com/web/developers/home)
 *
 * The version of the OpenAPI document: 2.9.235
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConversation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConversation::OAIConversation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConversation::OAIConversation() {
    this->initializeModel();
}

OAIConversation::~OAIConversation() {}

void OAIConversation::initializeModel() {

    m_avatar_isSet = false;
    m_avatar_isValid = false;

    m_avatar_large_isSet = false;
    m_avatar_large_isValid = false;

    m_conv_id_isSet = false;
    m_conv_id_isValid = false;

    m_creation_time_isSet = false;
    m_creation_time_isValid = false;

    m_creator_id_isSet = false;
    m_creator_id_isValid = false;

    m_creator_tenant_id_isSet = false;
    m_creator_tenant_id_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_is_guest_access_disabled_isSet = false;
    m_is_guest_access_disabled_isValid = false;

    m_is_moderated_isSet = false;
    m_is_moderated_isValid = false;

    m_modification_time_isSet = false;
    m_modification_time_isValid = false;

    m_participants_isSet = false;
    m_participants_isValid = false;

    m_topic_isSet = false;
    m_topic_isValid = false;

    m_topic_placeholder_isSet = false;
    m_topic_placeholder_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIConversation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIConversation::fromJsonObject(QJsonObject json) {

    m_avatar_isValid = ::OpenAPI::fromJsonValue(m_avatar, json[QString("avatar")]);
    m_avatar_isSet = !json[QString("avatar")].isNull() && m_avatar_isValid;

    m_avatar_large_isValid = ::OpenAPI::fromJsonValue(m_avatar_large, json[QString("avatarLarge")]);
    m_avatar_large_isSet = !json[QString("avatarLarge")].isNull() && m_avatar_large_isValid;

    m_conv_id_isValid = ::OpenAPI::fromJsonValue(m_conv_id, json[QString("convId")]);
    m_conv_id_isSet = !json[QString("convId")].isNull() && m_conv_id_isValid;

    m_creation_time_isValid = ::OpenAPI::fromJsonValue(m_creation_time, json[QString("creationTime")]);
    m_creation_time_isSet = !json[QString("creationTime")].isNull() && m_creation_time_isValid;

    m_creator_id_isValid = ::OpenAPI::fromJsonValue(m_creator_id, json[QString("creatorId")]);
    m_creator_id_isSet = !json[QString("creatorId")].isNull() && m_creator_id_isValid;

    m_creator_tenant_id_isValid = ::OpenAPI::fromJsonValue(m_creator_tenant_id, json[QString("creatorTenantId")]);
    m_creator_tenant_id_isSet = !json[QString("creatorTenantId")].isNull() && m_creator_tenant_id_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_is_guest_access_disabled_isValid = ::OpenAPI::fromJsonValue(m_is_guest_access_disabled, json[QString("isGuestAccessDisabled")]);
    m_is_guest_access_disabled_isSet = !json[QString("isGuestAccessDisabled")].isNull() && m_is_guest_access_disabled_isValid;

    m_is_moderated_isValid = ::OpenAPI::fromJsonValue(m_is_moderated, json[QString("isModerated")]);
    m_is_moderated_isSet = !json[QString("isModerated")].isNull() && m_is_moderated_isValid;

    m_modification_time_isValid = ::OpenAPI::fromJsonValue(m_modification_time, json[QString("modificationTime")]);
    m_modification_time_isSet = !json[QString("modificationTime")].isNull() && m_modification_time_isValid;

    m_participants_isValid = ::OpenAPI::fromJsonValue(m_participants, json[QString("participants")]);
    m_participants_isSet = !json[QString("participants")].isNull() && m_participants_isValid;

    m_topic_isValid = ::OpenAPI::fromJsonValue(m_topic, json[QString("topic")]);
    m_topic_isSet = !json[QString("topic")].isNull() && m_topic_isValid;

    m_topic_placeholder_isValid = ::OpenAPI::fromJsonValue(m_topic_placeholder, json[QString("topicPlaceholder")]);
    m_topic_placeholder_isSet = !json[QString("topicPlaceholder")].isNull() && m_topic_placeholder_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIConversation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIConversation::asJsonObject() const {
    QJsonObject obj;
    if (m_avatar_isSet) {
        obj.insert(QString("avatar"), ::OpenAPI::toJsonValue(m_avatar));
    }
    if (m_avatar_large_isSet) {
        obj.insert(QString("avatarLarge"), ::OpenAPI::toJsonValue(m_avatar_large));
    }
    if (m_conv_id_isSet) {
        obj.insert(QString("convId"), ::OpenAPI::toJsonValue(m_conv_id));
    }
    if (m_creation_time_isSet) {
        obj.insert(QString("creationTime"), ::OpenAPI::toJsonValue(m_creation_time));
    }
    if (m_creator_id_isSet) {
        obj.insert(QString("creatorId"), ::OpenAPI::toJsonValue(m_creator_id));
    }
    if (m_creator_tenant_id_isSet) {
        obj.insert(QString("creatorTenantId"), ::OpenAPI::toJsonValue(m_creator_tenant_id));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_is_guest_access_disabled_isSet) {
        obj.insert(QString("isGuestAccessDisabled"), ::OpenAPI::toJsonValue(m_is_guest_access_disabled));
    }
    if (m_is_moderated_isSet) {
        obj.insert(QString("isModerated"), ::OpenAPI::toJsonValue(m_is_moderated));
    }
    if (m_modification_time_isSet) {
        obj.insert(QString("modificationTime"), ::OpenAPI::toJsonValue(m_modification_time));
    }
    if (m_participants.size() > 0) {
        obj.insert(QString("participants"), ::OpenAPI::toJsonValue(m_participants));
    }
    if (m_topic_isSet) {
        obj.insert(QString("topic"), ::OpenAPI::toJsonValue(m_topic));
    }
    if (m_topic_placeholder_isSet) {
        obj.insert(QString("topicPlaceholder"), ::OpenAPI::toJsonValue(m_topic_placeholder));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIConversation::getAvatar() const {
    return m_avatar;
}
void OAIConversation::setAvatar(const QString &avatar) {
    m_avatar = avatar;
    m_avatar_isSet = true;
}

bool OAIConversation::is_avatar_Set() const{
    return m_avatar_isSet;
}

bool OAIConversation::is_avatar_Valid() const{
    return m_avatar_isValid;
}

QString OAIConversation::getAvatarLarge() const {
    return m_avatar_large;
}
void OAIConversation::setAvatarLarge(const QString &avatar_large) {
    m_avatar_large = avatar_large;
    m_avatar_large_isSet = true;
}

bool OAIConversation::is_avatar_large_Set() const{
    return m_avatar_large_isSet;
}

bool OAIConversation::is_avatar_large_Valid() const{
    return m_avatar_large_isValid;
}

QString OAIConversation::getConvId() const {
    return m_conv_id;
}
void OAIConversation::setConvId(const QString &conv_id) {
    m_conv_id = conv_id;
    m_conv_id_isSet = true;
}

bool OAIConversation::is_conv_id_Set() const{
    return m_conv_id_isSet;
}

bool OAIConversation::is_conv_id_Valid() const{
    return m_conv_id_isValid;
}

double OAIConversation::getCreationTime() const {
    return m_creation_time;
}
void OAIConversation::setCreationTime(const double &creation_time) {
    m_creation_time = creation_time;
    m_creation_time_isSet = true;
}

bool OAIConversation::is_creation_time_Set() const{
    return m_creation_time_isSet;
}

bool OAIConversation::is_creation_time_Valid() const{
    return m_creation_time_isValid;
}

QString OAIConversation::getCreatorId() const {
    return m_creator_id;
}
void OAIConversation::setCreatorId(const QString &creator_id) {
    m_creator_id = creator_id;
    m_creator_id_isSet = true;
}

bool OAIConversation::is_creator_id_Set() const{
    return m_creator_id_isSet;
}

bool OAIConversation::is_creator_id_Valid() const{
    return m_creator_id_isValid;
}

QString OAIConversation::getCreatorTenantId() const {
    return m_creator_tenant_id;
}
void OAIConversation::setCreatorTenantId(const QString &creator_tenant_id) {
    m_creator_tenant_id = creator_tenant_id;
    m_creator_tenant_id_isSet = true;
}

bool OAIConversation::is_creator_tenant_id_Set() const{
    return m_creator_tenant_id_isSet;
}

bool OAIConversation::is_creator_tenant_id_Valid() const{
    return m_creator_tenant_id_isValid;
}

QString OAIConversation::getDescription() const {
    return m_description;
}
void OAIConversation::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIConversation::is_description_Set() const{
    return m_description_isSet;
}

bool OAIConversation::is_description_Valid() const{
    return m_description_isValid;
}

bool OAIConversation::isIsGuestAccessDisabled() const {
    return m_is_guest_access_disabled;
}
void OAIConversation::setIsGuestAccessDisabled(const bool &is_guest_access_disabled) {
    m_is_guest_access_disabled = is_guest_access_disabled;
    m_is_guest_access_disabled_isSet = true;
}

bool OAIConversation::is_is_guest_access_disabled_Set() const{
    return m_is_guest_access_disabled_isSet;
}

bool OAIConversation::is_is_guest_access_disabled_Valid() const{
    return m_is_guest_access_disabled_isValid;
}

bool OAIConversation::isIsModerated() const {
    return m_is_moderated;
}
void OAIConversation::setIsModerated(const bool &is_moderated) {
    m_is_moderated = is_moderated;
    m_is_moderated_isSet = true;
}

bool OAIConversation::is_is_moderated_Set() const{
    return m_is_moderated_isSet;
}

bool OAIConversation::is_is_moderated_Valid() const{
    return m_is_moderated_isValid;
}

double OAIConversation::getModificationTime() const {
    return m_modification_time;
}
void OAIConversation::setModificationTime(const double &modification_time) {
    m_modification_time = modification_time;
    m_modification_time_isSet = true;
}

bool OAIConversation::is_modification_time_Set() const{
    return m_modification_time_isSet;
}

bool OAIConversation::is_modification_time_Valid() const{
    return m_modification_time_isValid;
}

QList<QString> OAIConversation::getParticipants() const {
    return m_participants;
}
void OAIConversation::setParticipants(const QList<QString> &participants) {
    m_participants = participants;
    m_participants_isSet = true;
}

bool OAIConversation::is_participants_Set() const{
    return m_participants_isSet;
}

bool OAIConversation::is_participants_Valid() const{
    return m_participants_isValid;
}

QString OAIConversation::getTopic() const {
    return m_topic;
}
void OAIConversation::setTopic(const QString &topic) {
    m_topic = topic;
    m_topic_isSet = true;
}

bool OAIConversation::is_topic_Set() const{
    return m_topic_isSet;
}

bool OAIConversation::is_topic_Valid() const{
    return m_topic_isValid;
}

QString OAIConversation::getTopicPlaceholder() const {
    return m_topic_placeholder;
}
void OAIConversation::setTopicPlaceholder(const QString &topic_placeholder) {
    m_topic_placeholder = topic_placeholder;
    m_topic_placeholder_isSet = true;
}

bool OAIConversation::is_topic_placeholder_Set() const{
    return m_topic_placeholder_isSet;
}

bool OAIConversation::is_topic_placeholder_Valid() const{
    return m_topic_placeholder_isValid;
}

QString OAIConversation::getType() const {
    return m_type;
}
void OAIConversation::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIConversation::is_type_Set() const{
    return m_type_isSet;
}

bool OAIConversation::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIConversation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_avatar_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_avatar_large_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_conv_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creator_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creator_tenant_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_guest_access_disabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_moderated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_modification_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_participants.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_topic_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_topic_placeholder_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIConversation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
