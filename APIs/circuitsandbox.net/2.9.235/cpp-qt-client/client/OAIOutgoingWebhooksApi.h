/**
 * REST API Version 2
 * Circuit REST API to interact with the Circuit system.  [Learn more about the Circuit Development Community](https://www.circuit.com/web/developers/home)
 *
 * The version of the OpenAPI document: 2.9.235
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIOutgoingWebhooksApi_H
#define OAI_OAIOutgoingWebhooksApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIWebHook.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIOutgoingWebhooksApi : public QObject {
    Q_OBJECT

public:
    OAIOutgoingWebhooksApi(const int timeOut = 0);
    ~OAIOutgoingWebhooksApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  url QString [required]
    * @param[in]  user_ids QList<QString> [required]
    */
    virtual void addPresenceWebHook(const QString &url, const QList<QString> &user_ids);

    /**
    * @param[in]  filter QList<QString> [required]
    * @param[in]  url QString [required]
    */
    virtual void addWebHook(const QList<QString> &filter, const QString &url);


    virtual void getWebHook();

    /**
    * @param[in]  id QString [required]
    */
    virtual void getWebHookById(const QString &id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void removeWebHook(const QString &id);


    virtual void removeWebHooks();

    /**
    * @param[in]  id QString [required]
    * @param[in]  url QString [optional]
    * @param[in]  user_ids QList<QString> [optional]
    */
    virtual void updatePresenceWebHook(const QString &id, const ::OpenAPI::OptionalParam<QString> &url = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &user_ids = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  filter QList<QString> [optional]
    * @param[in]  url QString [optional]
    */
    virtual void updateWebHook(const QString &id, const ::OpenAPI::OptionalParam<QList<QString>> &filter = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &url = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void addPresenceWebHookCallback(OAIHttpRequestWorker *worker);
    void addWebHookCallback(OAIHttpRequestWorker *worker);
    void getWebHookCallback(OAIHttpRequestWorker *worker);
    void getWebHookByIdCallback(OAIHttpRequestWorker *worker);
    void removeWebHookCallback(OAIHttpRequestWorker *worker);
    void removeWebHooksCallback(OAIHttpRequestWorker *worker);
    void updatePresenceWebHookCallback(OAIHttpRequestWorker *worker);
    void updateWebHookCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void addPresenceWebHookSignal(OAIWebHook summary);
    void addWebHookSignal(OAIWebHook summary);
    void getWebHookSignal(QList<OAIWebHook> summary);
    void getWebHookByIdSignal(OAIWebHook summary);
    void removeWebHookSignal();
    void removeWebHooksSignal();
    void updatePresenceWebHookSignal(OAIWebHook summary);
    void updateWebHookSignal(OAIWebHook summary);


    void addPresenceWebHookSignalFull(OAIHttpRequestWorker *worker, OAIWebHook summary);
    void addWebHookSignalFull(OAIHttpRequestWorker *worker, OAIWebHook summary);
    void getWebHookSignalFull(OAIHttpRequestWorker *worker, QList<OAIWebHook> summary);
    void getWebHookByIdSignalFull(OAIHttpRequestWorker *worker, OAIWebHook summary);
    void removeWebHookSignalFull(OAIHttpRequestWorker *worker);
    void removeWebHooksSignalFull(OAIHttpRequestWorker *worker);
    void updatePresenceWebHookSignalFull(OAIHttpRequestWorker *worker, OAIWebHook summary);
    void updateWebHookSignalFull(OAIHttpRequestWorker *worker, OAIWebHook summary);

    Q_DECL_DEPRECATED_X("Use addPresenceWebHookSignalError() instead")
    void addPresenceWebHookSignalE(OAIWebHook summary, QNetworkReply::NetworkError error_type, QString error_str);
    void addPresenceWebHookSignalError(OAIWebHook summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addWebHookSignalError() instead")
    void addWebHookSignalE(OAIWebHook summary, QNetworkReply::NetworkError error_type, QString error_str);
    void addWebHookSignalError(OAIWebHook summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getWebHookSignalError() instead")
    void getWebHookSignalE(QList<OAIWebHook> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getWebHookSignalError(QList<OAIWebHook> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getWebHookByIdSignalError() instead")
    void getWebHookByIdSignalE(OAIWebHook summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getWebHookByIdSignalError(OAIWebHook summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeWebHookSignalError() instead")
    void removeWebHookSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void removeWebHookSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeWebHooksSignalError() instead")
    void removeWebHooksSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void removeWebHooksSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updatePresenceWebHookSignalError() instead")
    void updatePresenceWebHookSignalE(OAIWebHook summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updatePresenceWebHookSignalError(OAIWebHook summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateWebHookSignalError() instead")
    void updateWebHookSignalE(OAIWebHook summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateWebHookSignalError(OAIWebHook summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use addPresenceWebHookSignalErrorFull() instead")
    void addPresenceWebHookSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addPresenceWebHookSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addWebHookSignalErrorFull() instead")
    void addWebHookSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addWebHookSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getWebHookSignalErrorFull() instead")
    void getWebHookSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getWebHookSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getWebHookByIdSignalErrorFull() instead")
    void getWebHookByIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getWebHookByIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeWebHookSignalErrorFull() instead")
    void removeWebHookSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void removeWebHookSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeWebHooksSignalErrorFull() instead")
    void removeWebHooksSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void removeWebHooksSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updatePresenceWebHookSignalErrorFull() instead")
    void updatePresenceWebHookSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updatePresenceWebHookSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateWebHookSignalErrorFull() instead")
    void updateWebHookSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateWebHookSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
