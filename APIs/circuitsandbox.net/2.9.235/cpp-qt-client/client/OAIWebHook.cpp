/**
 * REST API Version 2
 * Circuit REST API to interact with the Circuit system.  [Learn more about the Circuit Development Community](https://www.circuit.com/web/developers/home)
 *
 * The version of the OpenAPI document: 2.9.235
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWebHook.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWebHook::OAIWebHook(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWebHook::OAIWebHook() {
    this->initializeModel();
}

OAIWebHook::~OAIWebHook() {}

void OAIWebHook::initializeModel() {

    m_creation_time_isSet = false;
    m_creation_time_isValid = false;

    m_filter_isSet = false;
    m_filter_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_subscription_ids_isSet = false;
    m_subscription_ids_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;

    m_user_id_isSet = false;
    m_user_id_isValid = false;
}

void OAIWebHook::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWebHook::fromJsonObject(QJsonObject json) {

    m_creation_time_isValid = ::OpenAPI::fromJsonValue(m_creation_time, json[QString("creationTime")]);
    m_creation_time_isSet = !json[QString("creationTime")].isNull() && m_creation_time_isValid;

    m_filter_isValid = ::OpenAPI::fromJsonValue(m_filter, json[QString("filter")]);
    m_filter_isSet = !json[QString("filter")].isNull() && m_filter_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_subscription_ids_isValid = ::OpenAPI::fromJsonValue(m_subscription_ids, json[QString("subscriptionIds")]);
    m_subscription_ids_isSet = !json[QString("subscriptionIds")].isNull() && m_subscription_ids_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;

    m_user_id_isValid = ::OpenAPI::fromJsonValue(m_user_id, json[QString("userId")]);
    m_user_id_isSet = !json[QString("userId")].isNull() && m_user_id_isValid;
}

QString OAIWebHook::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWebHook::asJsonObject() const {
    QJsonObject obj;
    if (m_creation_time_isSet) {
        obj.insert(QString("creationTime"), ::OpenAPI::toJsonValue(m_creation_time));
    }
    if (m_filter.size() > 0) {
        obj.insert(QString("filter"), ::OpenAPI::toJsonValue(m_filter));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_subscription_ids.size() > 0) {
        obj.insert(QString("subscriptionIds"), ::OpenAPI::toJsonValue(m_subscription_ids));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    if (m_user_id_isSet) {
        obj.insert(QString("userId"), ::OpenAPI::toJsonValue(m_user_id));
    }
    return obj;
}

double OAIWebHook::getCreationTime() const {
    return m_creation_time;
}
void OAIWebHook::setCreationTime(const double &creation_time) {
    m_creation_time = creation_time;
    m_creation_time_isSet = true;
}

bool OAIWebHook::is_creation_time_Set() const{
    return m_creation_time_isSet;
}

bool OAIWebHook::is_creation_time_Valid() const{
    return m_creation_time_isValid;
}

QList<QString> OAIWebHook::getFilter() const {
    return m_filter;
}
void OAIWebHook::setFilter(const QList<QString> &filter) {
    m_filter = filter;
    m_filter_isSet = true;
}

bool OAIWebHook::is_filter_Set() const{
    return m_filter_isSet;
}

bool OAIWebHook::is_filter_Valid() const{
    return m_filter_isValid;
}

QString OAIWebHook::getId() const {
    return m_id;
}
void OAIWebHook::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIWebHook::is_id_Set() const{
    return m_id_isSet;
}

bool OAIWebHook::is_id_Valid() const{
    return m_id_isValid;
}

QList<QString> OAIWebHook::getSubscriptionIds() const {
    return m_subscription_ids;
}
void OAIWebHook::setSubscriptionIds(const QList<QString> &subscription_ids) {
    m_subscription_ids = subscription_ids;
    m_subscription_ids_isSet = true;
}

bool OAIWebHook::is_subscription_ids_Set() const{
    return m_subscription_ids_isSet;
}

bool OAIWebHook::is_subscription_ids_Valid() const{
    return m_subscription_ids_isValid;
}

QString OAIWebHook::getType() const {
    return m_type;
}
void OAIWebHook::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIWebHook::is_type_Set() const{
    return m_type_isSet;
}

bool OAIWebHook::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIWebHook::getUrl() const {
    return m_url;
}
void OAIWebHook::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIWebHook::is_url_Set() const{
    return m_url_isSet;
}

bool OAIWebHook::is_url_Valid() const{
    return m_url_isValid;
}

QString OAIWebHook::getUserId() const {
    return m_user_id;
}
void OAIWebHook::setUserId(const QString &user_id) {
    m_user_id = user_id;
    m_user_id_isSet = true;
}

bool OAIWebHook::is_user_id_Set() const{
    return m_user_id_isSet;
}

bool OAIWebHook::is_user_id_Valid() const{
    return m_user_id_isValid;
}

bool OAIWebHook::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_creation_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_filter.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subscription_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWebHook::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
