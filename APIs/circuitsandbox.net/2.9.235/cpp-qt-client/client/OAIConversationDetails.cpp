/**
 * REST API Version 2
 * Circuit REST API to interact with the Circuit system.  [Learn more about the Circuit Development Community](https://www.circuit.com/web/developers/home)
 *
 * The version of the OpenAPI document: 2.9.235
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConversationDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConversationDetails::OAIConversationDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConversationDetails::OAIConversationDetails() {
    this->initializeModel();
}

OAIConversationDetails::~OAIConversationDetails() {}

void OAIConversationDetails::initializeModel() {

    m_bridge_numbers_isSet = false;
    m_bridge_numbers_isValid = false;

    m_conv_id_isSet = false;
    m_conv_id_isValid = false;

    m_conversation_creator_id_isSet = false;
    m_conversation_creator_id_isValid = false;

    m_is_moderation_allowed_isSet = false;
    m_is_moderation_allowed_isValid = false;

    m_is_recording_allowed_isSet = false;
    m_is_recording_allowed_isValid = false;

    m_link_isSet = false;
    m_link_isValid = false;

    m_pin_isSet = false;
    m_pin_isValid = false;
}

void OAIConversationDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIConversationDetails::fromJsonObject(QJsonObject json) {

    m_bridge_numbers_isValid = ::OpenAPI::fromJsonValue(m_bridge_numbers, json[QString("bridgeNumbers")]);
    m_bridge_numbers_isSet = !json[QString("bridgeNumbers")].isNull() && m_bridge_numbers_isValid;

    m_conv_id_isValid = ::OpenAPI::fromJsonValue(m_conv_id, json[QString("convId")]);
    m_conv_id_isSet = !json[QString("convId")].isNull() && m_conv_id_isValid;

    m_conversation_creator_id_isValid = ::OpenAPI::fromJsonValue(m_conversation_creator_id, json[QString("conversationCreatorId")]);
    m_conversation_creator_id_isSet = !json[QString("conversationCreatorId")].isNull() && m_conversation_creator_id_isValid;

    m_is_moderation_allowed_isValid = ::OpenAPI::fromJsonValue(m_is_moderation_allowed, json[QString("isModerationAllowed")]);
    m_is_moderation_allowed_isSet = !json[QString("isModerationAllowed")].isNull() && m_is_moderation_allowed_isValid;

    m_is_recording_allowed_isValid = ::OpenAPI::fromJsonValue(m_is_recording_allowed, json[QString("isRecordingAllowed")]);
    m_is_recording_allowed_isSet = !json[QString("isRecordingAllowed")].isNull() && m_is_recording_allowed_isValid;

    m_link_isValid = ::OpenAPI::fromJsonValue(m_link, json[QString("link")]);
    m_link_isSet = !json[QString("link")].isNull() && m_link_isValid;

    m_pin_isValid = ::OpenAPI::fromJsonValue(m_pin, json[QString("pin")]);
    m_pin_isSet = !json[QString("pin")].isNull() && m_pin_isValid;
}

QString OAIConversationDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIConversationDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_bridge_numbers.size() > 0) {
        obj.insert(QString("bridgeNumbers"), ::OpenAPI::toJsonValue(m_bridge_numbers));
    }
    if (m_conv_id_isSet) {
        obj.insert(QString("convId"), ::OpenAPI::toJsonValue(m_conv_id));
    }
    if (m_conversation_creator_id_isSet) {
        obj.insert(QString("conversationCreatorId"), ::OpenAPI::toJsonValue(m_conversation_creator_id));
    }
    if (m_is_moderation_allowed_isSet) {
        obj.insert(QString("isModerationAllowed"), ::OpenAPI::toJsonValue(m_is_moderation_allowed));
    }
    if (m_is_recording_allowed_isSet) {
        obj.insert(QString("isRecordingAllowed"), ::OpenAPI::toJsonValue(m_is_recording_allowed));
    }
    if (m_link_isSet) {
        obj.insert(QString("link"), ::OpenAPI::toJsonValue(m_link));
    }
    if (m_pin_isSet) {
        obj.insert(QString("pin"), ::OpenAPI::toJsonValue(m_pin));
    }
    return obj;
}

QList<OAIBridgeNumber> OAIConversationDetails::getBridgeNumbers() const {
    return m_bridge_numbers;
}
void OAIConversationDetails::setBridgeNumbers(const QList<OAIBridgeNumber> &bridge_numbers) {
    m_bridge_numbers = bridge_numbers;
    m_bridge_numbers_isSet = true;
}

bool OAIConversationDetails::is_bridge_numbers_Set() const{
    return m_bridge_numbers_isSet;
}

bool OAIConversationDetails::is_bridge_numbers_Valid() const{
    return m_bridge_numbers_isValid;
}

QString OAIConversationDetails::getConvId() const {
    return m_conv_id;
}
void OAIConversationDetails::setConvId(const QString &conv_id) {
    m_conv_id = conv_id;
    m_conv_id_isSet = true;
}

bool OAIConversationDetails::is_conv_id_Set() const{
    return m_conv_id_isSet;
}

bool OAIConversationDetails::is_conv_id_Valid() const{
    return m_conv_id_isValid;
}

QString OAIConversationDetails::getConversationCreatorId() const {
    return m_conversation_creator_id;
}
void OAIConversationDetails::setConversationCreatorId(const QString &conversation_creator_id) {
    m_conversation_creator_id = conversation_creator_id;
    m_conversation_creator_id_isSet = true;
}

bool OAIConversationDetails::is_conversation_creator_id_Set() const{
    return m_conversation_creator_id_isSet;
}

bool OAIConversationDetails::is_conversation_creator_id_Valid() const{
    return m_conversation_creator_id_isValid;
}

bool OAIConversationDetails::isIsModerationAllowed() const {
    return m_is_moderation_allowed;
}
void OAIConversationDetails::setIsModerationAllowed(const bool &is_moderation_allowed) {
    m_is_moderation_allowed = is_moderation_allowed;
    m_is_moderation_allowed_isSet = true;
}

bool OAIConversationDetails::is_is_moderation_allowed_Set() const{
    return m_is_moderation_allowed_isSet;
}

bool OAIConversationDetails::is_is_moderation_allowed_Valid() const{
    return m_is_moderation_allowed_isValid;
}

bool OAIConversationDetails::isIsRecordingAllowed() const {
    return m_is_recording_allowed;
}
void OAIConversationDetails::setIsRecordingAllowed(const bool &is_recording_allowed) {
    m_is_recording_allowed = is_recording_allowed;
    m_is_recording_allowed_isSet = true;
}

bool OAIConversationDetails::is_is_recording_allowed_Set() const{
    return m_is_recording_allowed_isSet;
}

bool OAIConversationDetails::is_is_recording_allowed_Valid() const{
    return m_is_recording_allowed_isValid;
}

QString OAIConversationDetails::getLink() const {
    return m_link;
}
void OAIConversationDetails::setLink(const QString &link) {
    m_link = link;
    m_link_isSet = true;
}

bool OAIConversationDetails::is_link_Set() const{
    return m_link_isSet;
}

bool OAIConversationDetails::is_link_Valid() const{
    return m_link_isValid;
}

QString OAIConversationDetails::getPin() const {
    return m_pin;
}
void OAIConversationDetails::setPin(const QString &pin) {
    m_pin = pin;
    m_pin_isSet = true;
}

bool OAIConversationDetails::is_pin_Set() const{
    return m_pin_isSet;
}

bool OAIConversationDetails::is_pin_Valid() const{
    return m_pin_isValid;
}

bool OAIConversationDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bridge_numbers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_conv_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_conversation_creator_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_moderation_allowed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_recording_allowed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_link_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pin_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIConversationDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
