/**
 * REST API Version 2
 * Circuit REST API to interact with the Circuit system.  [Learn more about the Circuit Development Community](https://www.circuit.com/web/developers/home)
 *
 * The version of the OpenAPI document: 2.9.235
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIV2DistributedClientInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIV2DistributedClientInfo::OAIV2DistributedClientInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIV2DistributedClientInfo::OAIV2DistributedClientInfo() {
    this->initializeModel();
}

OAIV2DistributedClientInfo::~OAIV2DistributedClientInfo() {}

void OAIV2DistributedClientInfo::initializeModel() {

    m_client_id_isSet = false;
    m_client_id_isValid = false;

    m_client_version_isSet = false;
    m_client_version_isValid = false;

    m_device_subtype_isSet = false;
    m_device_subtype_isValid = false;

    m_device_type_isSet = false;
    m_device_type_isValid = false;

    m_hardware_model_isSet = false;
    m_hardware_model_isValid = false;

    m_home_node_isSet = false;
    m_home_node_isValid = false;

    m_manufacturer_isSet = false;
    m_manufacturer_isValid = false;

    m_os_version_isSet = false;
    m_os_version_isValid = false;

    m_user_id_isSet = false;
    m_user_id_isValid = false;
}

void OAIV2DistributedClientInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIV2DistributedClientInfo::fromJsonObject(QJsonObject json) {

    m_client_id_isValid = ::OpenAPI::fromJsonValue(m_client_id, json[QString("clientId")]);
    m_client_id_isSet = !json[QString("clientId")].isNull() && m_client_id_isValid;

    m_client_version_isValid = ::OpenAPI::fromJsonValue(m_client_version, json[QString("clientVersion")]);
    m_client_version_isSet = !json[QString("clientVersion")].isNull() && m_client_version_isValid;

    m_device_subtype_isValid = ::OpenAPI::fromJsonValue(m_device_subtype, json[QString("deviceSubtype")]);
    m_device_subtype_isSet = !json[QString("deviceSubtype")].isNull() && m_device_subtype_isValid;

    m_device_type_isValid = ::OpenAPI::fromJsonValue(m_device_type, json[QString("deviceType")]);
    m_device_type_isSet = !json[QString("deviceType")].isNull() && m_device_type_isValid;

    m_hardware_model_isValid = ::OpenAPI::fromJsonValue(m_hardware_model, json[QString("hardwareModel")]);
    m_hardware_model_isSet = !json[QString("hardwareModel")].isNull() && m_hardware_model_isValid;

    m_home_node_isValid = ::OpenAPI::fromJsonValue(m_home_node, json[QString("homeNode")]);
    m_home_node_isSet = !json[QString("homeNode")].isNull() && m_home_node_isValid;

    m_manufacturer_isValid = ::OpenAPI::fromJsonValue(m_manufacturer, json[QString("manufacturer")]);
    m_manufacturer_isSet = !json[QString("manufacturer")].isNull() && m_manufacturer_isValid;

    m_os_version_isValid = ::OpenAPI::fromJsonValue(m_os_version, json[QString("osVersion")]);
    m_os_version_isSet = !json[QString("osVersion")].isNull() && m_os_version_isValid;

    m_user_id_isValid = ::OpenAPI::fromJsonValue(m_user_id, json[QString("userId")]);
    m_user_id_isSet = !json[QString("userId")].isNull() && m_user_id_isValid;
}

QString OAIV2DistributedClientInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIV2DistributedClientInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_client_id_isSet) {
        obj.insert(QString("clientId"), ::OpenAPI::toJsonValue(m_client_id));
    }
    if (m_client_version_isSet) {
        obj.insert(QString("clientVersion"), ::OpenAPI::toJsonValue(m_client_version));
    }
    if (m_device_subtype_isSet) {
        obj.insert(QString("deviceSubtype"), ::OpenAPI::toJsonValue(m_device_subtype));
    }
    if (m_device_type_isSet) {
        obj.insert(QString("deviceType"), ::OpenAPI::toJsonValue(m_device_type));
    }
    if (m_hardware_model_isSet) {
        obj.insert(QString("hardwareModel"), ::OpenAPI::toJsonValue(m_hardware_model));
    }
    if (m_home_node_isSet) {
        obj.insert(QString("homeNode"), ::OpenAPI::toJsonValue(m_home_node));
    }
    if (m_manufacturer_isSet) {
        obj.insert(QString("manufacturer"), ::OpenAPI::toJsonValue(m_manufacturer));
    }
    if (m_os_version_isSet) {
        obj.insert(QString("osVersion"), ::OpenAPI::toJsonValue(m_os_version));
    }
    if (m_user_id_isSet) {
        obj.insert(QString("userId"), ::OpenAPI::toJsonValue(m_user_id));
    }
    return obj;
}

QString OAIV2DistributedClientInfo::getClientId() const {
    return m_client_id;
}
void OAIV2DistributedClientInfo::setClientId(const QString &client_id) {
    m_client_id = client_id;
    m_client_id_isSet = true;
}

bool OAIV2DistributedClientInfo::is_client_id_Set() const{
    return m_client_id_isSet;
}

bool OAIV2DistributedClientInfo::is_client_id_Valid() const{
    return m_client_id_isValid;
}

QString OAIV2DistributedClientInfo::getClientVersion() const {
    return m_client_version;
}
void OAIV2DistributedClientInfo::setClientVersion(const QString &client_version) {
    m_client_version = client_version;
    m_client_version_isSet = true;
}

bool OAIV2DistributedClientInfo::is_client_version_Set() const{
    return m_client_version_isSet;
}

bool OAIV2DistributedClientInfo::is_client_version_Valid() const{
    return m_client_version_isValid;
}

QString OAIV2DistributedClientInfo::getDeviceSubtype() const {
    return m_device_subtype;
}
void OAIV2DistributedClientInfo::setDeviceSubtype(const QString &device_subtype) {
    m_device_subtype = device_subtype;
    m_device_subtype_isSet = true;
}

bool OAIV2DistributedClientInfo::is_device_subtype_Set() const{
    return m_device_subtype_isSet;
}

bool OAIV2DistributedClientInfo::is_device_subtype_Valid() const{
    return m_device_subtype_isValid;
}

QString OAIV2DistributedClientInfo::getDeviceType() const {
    return m_device_type;
}
void OAIV2DistributedClientInfo::setDeviceType(const QString &device_type) {
    m_device_type = device_type;
    m_device_type_isSet = true;
}

bool OAIV2DistributedClientInfo::is_device_type_Set() const{
    return m_device_type_isSet;
}

bool OAIV2DistributedClientInfo::is_device_type_Valid() const{
    return m_device_type_isValid;
}

QString OAIV2DistributedClientInfo::getHardwareModel() const {
    return m_hardware_model;
}
void OAIV2DistributedClientInfo::setHardwareModel(const QString &hardware_model) {
    m_hardware_model = hardware_model;
    m_hardware_model_isSet = true;
}

bool OAIV2DistributedClientInfo::is_hardware_model_Set() const{
    return m_hardware_model_isSet;
}

bool OAIV2DistributedClientInfo::is_hardware_model_Valid() const{
    return m_hardware_model_isValid;
}

QString OAIV2DistributedClientInfo::getHomeNode() const {
    return m_home_node;
}
void OAIV2DistributedClientInfo::setHomeNode(const QString &home_node) {
    m_home_node = home_node;
    m_home_node_isSet = true;
}

bool OAIV2DistributedClientInfo::is_home_node_Set() const{
    return m_home_node_isSet;
}

bool OAIV2DistributedClientInfo::is_home_node_Valid() const{
    return m_home_node_isValid;
}

QString OAIV2DistributedClientInfo::getManufacturer() const {
    return m_manufacturer;
}
void OAIV2DistributedClientInfo::setManufacturer(const QString &manufacturer) {
    m_manufacturer = manufacturer;
    m_manufacturer_isSet = true;
}

bool OAIV2DistributedClientInfo::is_manufacturer_Set() const{
    return m_manufacturer_isSet;
}

bool OAIV2DistributedClientInfo::is_manufacturer_Valid() const{
    return m_manufacturer_isValid;
}

QString OAIV2DistributedClientInfo::getOsVersion() const {
    return m_os_version;
}
void OAIV2DistributedClientInfo::setOsVersion(const QString &os_version) {
    m_os_version = os_version;
    m_os_version_isSet = true;
}

bool OAIV2DistributedClientInfo::is_os_version_Set() const{
    return m_os_version_isSet;
}

bool OAIV2DistributedClientInfo::is_os_version_Valid() const{
    return m_os_version_isValid;
}

QString OAIV2DistributedClientInfo::getUserId() const {
    return m_user_id;
}
void OAIV2DistributedClientInfo::setUserId(const QString &user_id) {
    m_user_id = user_id;
    m_user_id_isSet = true;
}

bool OAIV2DistributedClientInfo::is_user_id_Set() const{
    return m_user_id_isSet;
}

bool OAIV2DistributedClientInfo::is_user_id_Valid() const{
    return m_user_id_isValid;
}

bool OAIV2DistributedClientInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_client_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_device_subtype_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_device_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hardware_model_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_home_node_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_manufacturer_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_os_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIV2DistributedClientInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
