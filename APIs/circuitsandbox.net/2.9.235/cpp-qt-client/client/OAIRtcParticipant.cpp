/**
 * REST API Version 2
 * Circuit REST API to interact with the Circuit system.  [Learn more about the Circuit Development Community](https://www.circuit.com/web/developers/home)
 *
 * The version of the OpenAPI document: 2.9.235
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRtcParticipant.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRtcParticipant::OAIRtcParticipant(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRtcParticipant::OAIRtcParticipant() {
    this->initializeModel();
}

OAIRtcParticipant::~OAIRtcParticipant() {}

void OAIRtcParticipant::initializeModel() {

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_fully_qualified_number_isSet = false;
    m_fully_qualified_number_isValid = false;

    m_phone_number_isSet = false;
    m_phone_number_isValid = false;

    m_resolved_user_isSet = false;
    m_resolved_user_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_user_id_isSet = false;
    m_user_id_isValid = false;
}

void OAIRtcParticipant::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRtcParticipant::fromJsonObject(QJsonObject json) {

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_fully_qualified_number_isValid = ::OpenAPI::fromJsonValue(m_fully_qualified_number, json[QString("fullyQualifiedNumber")]);
    m_fully_qualified_number_isSet = !json[QString("fullyQualifiedNumber")].isNull() && m_fully_qualified_number_isValid;

    m_phone_number_isValid = ::OpenAPI::fromJsonValue(m_phone_number, json[QString("phoneNumber")]);
    m_phone_number_isSet = !json[QString("phoneNumber")].isNull() && m_phone_number_isValid;

    m_resolved_user_isValid = ::OpenAPI::fromJsonValue(m_resolved_user, json[QString("resolvedUser")]);
    m_resolved_user_isSet = !json[QString("resolvedUser")].isNull() && m_resolved_user_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_user_id_isValid = ::OpenAPI::fromJsonValue(m_user_id, json[QString("userId")]);
    m_user_id_isSet = !json[QString("userId")].isNull() && m_user_id_isValid;
}

QString OAIRtcParticipant::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRtcParticipant::asJsonObject() const {
    QJsonObject obj;
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_fully_qualified_number_isSet) {
        obj.insert(QString("fullyQualifiedNumber"), ::OpenAPI::toJsonValue(m_fully_qualified_number));
    }
    if (m_phone_number_isSet) {
        obj.insert(QString("phoneNumber"), ::OpenAPI::toJsonValue(m_phone_number));
    }
    if (m_resolved_user_isSet) {
        obj.insert(QString("resolvedUser"), ::OpenAPI::toJsonValue(m_resolved_user));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_user_id_isSet) {
        obj.insert(QString("userId"), ::OpenAPI::toJsonValue(m_user_id));
    }
    return obj;
}

QString OAIRtcParticipant::getDisplayName() const {
    return m_display_name;
}
void OAIRtcParticipant::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIRtcParticipant::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIRtcParticipant::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QString OAIRtcParticipant::getFullyQualifiedNumber() const {
    return m_fully_qualified_number;
}
void OAIRtcParticipant::setFullyQualifiedNumber(const QString &fully_qualified_number) {
    m_fully_qualified_number = fully_qualified_number;
    m_fully_qualified_number_isSet = true;
}

bool OAIRtcParticipant::is_fully_qualified_number_Set() const{
    return m_fully_qualified_number_isSet;
}

bool OAIRtcParticipant::is_fully_qualified_number_Valid() const{
    return m_fully_qualified_number_isValid;
}

QString OAIRtcParticipant::getPhoneNumber() const {
    return m_phone_number;
}
void OAIRtcParticipant::setPhoneNumber(const QString &phone_number) {
    m_phone_number = phone_number;
    m_phone_number_isSet = true;
}

bool OAIRtcParticipant::is_phone_number_Set() const{
    return m_phone_number_isSet;
}

bool OAIRtcParticipant::is_phone_number_Valid() const{
    return m_phone_number_isValid;
}

QJsonValue OAIRtcParticipant::getResolvedUser() const {
    return m_resolved_user;
}
void OAIRtcParticipant::setResolvedUser(const QJsonValue &resolved_user) {
    m_resolved_user = resolved_user;
    m_resolved_user_isSet = true;
}

bool OAIRtcParticipant::is_resolved_user_Set() const{
    return m_resolved_user_isSet;
}

bool OAIRtcParticipant::is_resolved_user_Valid() const{
    return m_resolved_user_isValid;
}

QString OAIRtcParticipant::getType() const {
    return m_type;
}
void OAIRtcParticipant::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIRtcParticipant::is_type_Set() const{
    return m_type_isSet;
}

bool OAIRtcParticipant::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIRtcParticipant::getUserId() const {
    return m_user_id;
}
void OAIRtcParticipant::setUserId(const QString &user_id) {
    m_user_id = user_id;
    m_user_id_isSet = true;
}

bool OAIRtcParticipant::is_user_id_Set() const{
    return m_user_id_isSet;
}

bool OAIRtcParticipant::is_user_id_Valid() const{
    return m_user_id_isValid;
}

bool OAIRtcParticipant::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fully_qualified_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_phone_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resolved_user_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRtcParticipant::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
