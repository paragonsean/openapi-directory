/**
 * REST API Version 2
 * Circuit REST API to interact with the Circuit system.  [Learn more about the Circuit Development Community](https://www.circuit.com/web/developers/home)
 *
 * The version of the OpenAPI document: 2.9.235
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUser.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUser::OAIUser(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUser::OAIUser() {
    this->initializeModel();
}

OAIUser::~OAIUser() {}

void OAIUser::initializeModel() {

    m_avatar_isSet = false;
    m_avatar_isValid = false;

    m_avatar_large_isSet = false;
    m_avatar_large_isValid = false;

    m_company_isSet = false;
    m_company_isValid = false;

    m_department_isSet = false;
    m_department_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_email_address_isSet = false;
    m_email_address_isValid = false;

    m_email_addresses_isSet = false;
    m_email_addresses_isValid = false;

    m_first_name_isSet = false;
    m_first_name_isValid = false;

    m_job_title_isSet = false;
    m_job_title_isValid = false;

    m_last_name_isSet = false;
    m_last_name_isValid = false;

    m_locale_isSet = false;
    m_locale_isValid = false;

    m_phone_number_isSet = false;
    m_phone_number_isValid = false;

    m_phone_numbers_isSet = false;
    m_phone_numbers_isValid = false;

    m_primary_tenant_id_isSet = false;
    m_primary_tenant_id_isValid = false;

    m_secondary_email_address_isSet = false;
    m_secondary_email_address_isValid = false;

    m_secondary_tenant_id_isSet = false;
    m_secondary_tenant_id_isValid = false;

    m_user_id_isSet = false;
    m_user_id_isValid = false;

    m_user_state_isSet = false;
    m_user_state_isValid = false;

    m_user_type_isSet = false;
    m_user_type_isValid = false;
}

void OAIUser::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUser::fromJsonObject(QJsonObject json) {

    m_avatar_isValid = ::OpenAPI::fromJsonValue(m_avatar, json[QString("avatar")]);
    m_avatar_isSet = !json[QString("avatar")].isNull() && m_avatar_isValid;

    m_avatar_large_isValid = ::OpenAPI::fromJsonValue(m_avatar_large, json[QString("avatarLarge")]);
    m_avatar_large_isSet = !json[QString("avatarLarge")].isNull() && m_avatar_large_isValid;

    m_company_isValid = ::OpenAPI::fromJsonValue(m_company, json[QString("company")]);
    m_company_isSet = !json[QString("company")].isNull() && m_company_isValid;

    m_department_isValid = ::OpenAPI::fromJsonValue(m_department, json[QString("department")]);
    m_department_isSet = !json[QString("department")].isNull() && m_department_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_email_address_isValid = ::OpenAPI::fromJsonValue(m_email_address, json[QString("emailAddress")]);
    m_email_address_isSet = !json[QString("emailAddress")].isNull() && m_email_address_isValid;

    m_email_addresses_isValid = ::OpenAPI::fromJsonValue(m_email_addresses, json[QString("emailAddresses")]);
    m_email_addresses_isSet = !json[QString("emailAddresses")].isNull() && m_email_addresses_isValid;

    m_first_name_isValid = ::OpenAPI::fromJsonValue(m_first_name, json[QString("firstName")]);
    m_first_name_isSet = !json[QString("firstName")].isNull() && m_first_name_isValid;

    m_job_title_isValid = ::OpenAPI::fromJsonValue(m_job_title, json[QString("jobTitle")]);
    m_job_title_isSet = !json[QString("jobTitle")].isNull() && m_job_title_isValid;

    m_last_name_isValid = ::OpenAPI::fromJsonValue(m_last_name, json[QString("lastName")]);
    m_last_name_isSet = !json[QString("lastName")].isNull() && m_last_name_isValid;

    m_locale_isValid = ::OpenAPI::fromJsonValue(m_locale, json[QString("locale")]);
    m_locale_isSet = !json[QString("locale")].isNull() && m_locale_isValid;

    m_phone_number_isValid = ::OpenAPI::fromJsonValue(m_phone_number, json[QString("phoneNumber")]);
    m_phone_number_isSet = !json[QString("phoneNumber")].isNull() && m_phone_number_isValid;

    m_phone_numbers_isValid = ::OpenAPI::fromJsonValue(m_phone_numbers, json[QString("phoneNumbers")]);
    m_phone_numbers_isSet = !json[QString("phoneNumbers")].isNull() && m_phone_numbers_isValid;

    m_primary_tenant_id_isValid = ::OpenAPI::fromJsonValue(m_primary_tenant_id, json[QString("primaryTenantId")]);
    m_primary_tenant_id_isSet = !json[QString("primaryTenantId")].isNull() && m_primary_tenant_id_isValid;

    m_secondary_email_address_isValid = ::OpenAPI::fromJsonValue(m_secondary_email_address, json[QString("secondaryEmailAddress")]);
    m_secondary_email_address_isSet = !json[QString("secondaryEmailAddress")].isNull() && m_secondary_email_address_isValid;

    m_secondary_tenant_id_isValid = ::OpenAPI::fromJsonValue(m_secondary_tenant_id, json[QString("secondaryTenantId")]);
    m_secondary_tenant_id_isSet = !json[QString("secondaryTenantId")].isNull() && m_secondary_tenant_id_isValid;

    m_user_id_isValid = ::OpenAPI::fromJsonValue(m_user_id, json[QString("userId")]);
    m_user_id_isSet = !json[QString("userId")].isNull() && m_user_id_isValid;

    m_user_state_isValid = ::OpenAPI::fromJsonValue(m_user_state, json[QString("userState")]);
    m_user_state_isSet = !json[QString("userState")].isNull() && m_user_state_isValid;

    m_user_type_isValid = ::OpenAPI::fromJsonValue(m_user_type, json[QString("userType")]);
    m_user_type_isSet = !json[QString("userType")].isNull() && m_user_type_isValid;
}

QString OAIUser::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUser::asJsonObject() const {
    QJsonObject obj;
    if (m_avatar_isSet) {
        obj.insert(QString("avatar"), ::OpenAPI::toJsonValue(m_avatar));
    }
    if (m_avatar_large_isSet) {
        obj.insert(QString("avatarLarge"), ::OpenAPI::toJsonValue(m_avatar_large));
    }
    if (m_company_isSet) {
        obj.insert(QString("company"), ::OpenAPI::toJsonValue(m_company));
    }
    if (m_department_isSet) {
        obj.insert(QString("department"), ::OpenAPI::toJsonValue(m_department));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_email_address_isSet) {
        obj.insert(QString("emailAddress"), ::OpenAPI::toJsonValue(m_email_address));
    }
    if (m_email_addresses.size() > 0) {
        obj.insert(QString("emailAddresses"), ::OpenAPI::toJsonValue(m_email_addresses));
    }
    if (m_first_name_isSet) {
        obj.insert(QString("firstName"), ::OpenAPI::toJsonValue(m_first_name));
    }
    if (m_job_title_isSet) {
        obj.insert(QString("jobTitle"), ::OpenAPI::toJsonValue(m_job_title));
    }
    if (m_last_name_isSet) {
        obj.insert(QString("lastName"), ::OpenAPI::toJsonValue(m_last_name));
    }
    if (m_locale_isSet) {
        obj.insert(QString("locale"), ::OpenAPI::toJsonValue(m_locale));
    }
    if (m_phone_number_isSet) {
        obj.insert(QString("phoneNumber"), ::OpenAPI::toJsonValue(m_phone_number));
    }
    if (m_phone_numbers.size() > 0) {
        obj.insert(QString("phoneNumbers"), ::OpenAPI::toJsonValue(m_phone_numbers));
    }
    if (m_primary_tenant_id_isSet) {
        obj.insert(QString("primaryTenantId"), ::OpenAPI::toJsonValue(m_primary_tenant_id));
    }
    if (m_secondary_email_address_isSet) {
        obj.insert(QString("secondaryEmailAddress"), ::OpenAPI::toJsonValue(m_secondary_email_address));
    }
    if (m_secondary_tenant_id_isSet) {
        obj.insert(QString("secondaryTenantId"), ::OpenAPI::toJsonValue(m_secondary_tenant_id));
    }
    if (m_user_id_isSet) {
        obj.insert(QString("userId"), ::OpenAPI::toJsonValue(m_user_id));
    }
    if (m_user_state_isSet) {
        obj.insert(QString("userState"), ::OpenAPI::toJsonValue(m_user_state));
    }
    if (m_user_type_isSet) {
        obj.insert(QString("userType"), ::OpenAPI::toJsonValue(m_user_type));
    }
    return obj;
}

QString OAIUser::getAvatar() const {
    return m_avatar;
}
void OAIUser::setAvatar(const QString &avatar) {
    m_avatar = avatar;
    m_avatar_isSet = true;
}

bool OAIUser::is_avatar_Set() const{
    return m_avatar_isSet;
}

bool OAIUser::is_avatar_Valid() const{
    return m_avatar_isValid;
}

QString OAIUser::getAvatarLarge() const {
    return m_avatar_large;
}
void OAIUser::setAvatarLarge(const QString &avatar_large) {
    m_avatar_large = avatar_large;
    m_avatar_large_isSet = true;
}

bool OAIUser::is_avatar_large_Set() const{
    return m_avatar_large_isSet;
}

bool OAIUser::is_avatar_large_Valid() const{
    return m_avatar_large_isValid;
}

QString OAIUser::getCompany() const {
    return m_company;
}
void OAIUser::setCompany(const QString &company) {
    m_company = company;
    m_company_isSet = true;
}

bool OAIUser::is_company_Set() const{
    return m_company_isSet;
}

bool OAIUser::is_company_Valid() const{
    return m_company_isValid;
}

QString OAIUser::getDepartment() const {
    return m_department;
}
void OAIUser::setDepartment(const QString &department) {
    m_department = department;
    m_department_isSet = true;
}

bool OAIUser::is_department_Set() const{
    return m_department_isSet;
}

bool OAIUser::is_department_Valid() const{
    return m_department_isValid;
}

QString OAIUser::getDisplayName() const {
    return m_display_name;
}
void OAIUser::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIUser::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIUser::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QString OAIUser::getEmailAddress() const {
    return m_email_address;
}
void OAIUser::setEmailAddress(const QString &email_address) {
    m_email_address = email_address;
    m_email_address_isSet = true;
}

bool OAIUser::is_email_address_Set() const{
    return m_email_address_isSet;
}

bool OAIUser::is_email_address_Valid() const{
    return m_email_address_isValid;
}

QList<OAIUserEmailAddress> OAIUser::getEmailAddresses() const {
    return m_email_addresses;
}
void OAIUser::setEmailAddresses(const QList<OAIUserEmailAddress> &email_addresses) {
    m_email_addresses = email_addresses;
    m_email_addresses_isSet = true;
}

bool OAIUser::is_email_addresses_Set() const{
    return m_email_addresses_isSet;
}

bool OAIUser::is_email_addresses_Valid() const{
    return m_email_addresses_isValid;
}

QString OAIUser::getFirstName() const {
    return m_first_name;
}
void OAIUser::setFirstName(const QString &first_name) {
    m_first_name = first_name;
    m_first_name_isSet = true;
}

bool OAIUser::is_first_name_Set() const{
    return m_first_name_isSet;
}

bool OAIUser::is_first_name_Valid() const{
    return m_first_name_isValid;
}

QString OAIUser::getJobTitle() const {
    return m_job_title;
}
void OAIUser::setJobTitle(const QString &job_title) {
    m_job_title = job_title;
    m_job_title_isSet = true;
}

bool OAIUser::is_job_title_Set() const{
    return m_job_title_isSet;
}

bool OAIUser::is_job_title_Valid() const{
    return m_job_title_isValid;
}

QString OAIUser::getLastName() const {
    return m_last_name;
}
void OAIUser::setLastName(const QString &last_name) {
    m_last_name = last_name;
    m_last_name_isSet = true;
}

bool OAIUser::is_last_name_Set() const{
    return m_last_name_isSet;
}

bool OAIUser::is_last_name_Valid() const{
    return m_last_name_isValid;
}

QString OAIUser::getLocale() const {
    return m_locale;
}
void OAIUser::setLocale(const QString &locale) {
    m_locale = locale;
    m_locale_isSet = true;
}

bool OAIUser::is_locale_Set() const{
    return m_locale_isSet;
}

bool OAIUser::is_locale_Valid() const{
    return m_locale_isValid;
}

QString OAIUser::getPhoneNumber() const {
    return m_phone_number;
}
void OAIUser::setPhoneNumber(const QString &phone_number) {
    m_phone_number = phone_number;
    m_phone_number_isSet = true;
}

bool OAIUser::is_phone_number_Set() const{
    return m_phone_number_isSet;
}

bool OAIUser::is_phone_number_Valid() const{
    return m_phone_number_isValid;
}

QList<OAIUserPhoneNumber> OAIUser::getPhoneNumbers() const {
    return m_phone_numbers;
}
void OAIUser::setPhoneNumbers(const QList<OAIUserPhoneNumber> &phone_numbers) {
    m_phone_numbers = phone_numbers;
    m_phone_numbers_isSet = true;
}

bool OAIUser::is_phone_numbers_Set() const{
    return m_phone_numbers_isSet;
}

bool OAIUser::is_phone_numbers_Valid() const{
    return m_phone_numbers_isValid;
}

QString OAIUser::getPrimaryTenantId() const {
    return m_primary_tenant_id;
}
void OAIUser::setPrimaryTenantId(const QString &primary_tenant_id) {
    m_primary_tenant_id = primary_tenant_id;
    m_primary_tenant_id_isSet = true;
}

bool OAIUser::is_primary_tenant_id_Set() const{
    return m_primary_tenant_id_isSet;
}

bool OAIUser::is_primary_tenant_id_Valid() const{
    return m_primary_tenant_id_isValid;
}

QString OAIUser::getSecondaryEmailAddress() const {
    return m_secondary_email_address;
}
void OAIUser::setSecondaryEmailAddress(const QString &secondary_email_address) {
    m_secondary_email_address = secondary_email_address;
    m_secondary_email_address_isSet = true;
}

bool OAIUser::is_secondary_email_address_Set() const{
    return m_secondary_email_address_isSet;
}

bool OAIUser::is_secondary_email_address_Valid() const{
    return m_secondary_email_address_isValid;
}

QString OAIUser::getSecondaryTenantId() const {
    return m_secondary_tenant_id;
}
void OAIUser::setSecondaryTenantId(const QString &secondary_tenant_id) {
    m_secondary_tenant_id = secondary_tenant_id;
    m_secondary_tenant_id_isSet = true;
}

bool OAIUser::is_secondary_tenant_id_Set() const{
    return m_secondary_tenant_id_isSet;
}

bool OAIUser::is_secondary_tenant_id_Valid() const{
    return m_secondary_tenant_id_isValid;
}

QString OAIUser::getUserId() const {
    return m_user_id;
}
void OAIUser::setUserId(const QString &user_id) {
    m_user_id = user_id;
    m_user_id_isSet = true;
}

bool OAIUser::is_user_id_Set() const{
    return m_user_id_isSet;
}

bool OAIUser::is_user_id_Valid() const{
    return m_user_id_isValid;
}

QString OAIUser::getUserState() const {
    return m_user_state;
}
void OAIUser::setUserState(const QString &user_state) {
    m_user_state = user_state;
    m_user_state_isSet = true;
}

bool OAIUser::is_user_state_Set() const{
    return m_user_state_isSet;
}

bool OAIUser::is_user_state_Valid() const{
    return m_user_state_isValid;
}

QString OAIUser::getUserType() const {
    return m_user_type;
}
void OAIUser::setUserType(const QString &user_type) {
    m_user_type = user_type;
    m_user_type_isSet = true;
}

bool OAIUser::is_user_type_Set() const{
    return m_user_type_isSet;
}

bool OAIUser::is_user_type_Valid() const{
    return m_user_type_isValid;
}

bool OAIUser::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_avatar_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_avatar_large_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_company_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_department_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_addresses.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_first_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_job_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_locale_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_phone_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_phone_numbers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_primary_tenant_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_secondary_email_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_secondary_tenant_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUser::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
