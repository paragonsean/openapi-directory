/**
 * REST API Version 2
 * Circuit REST API to interact with the Circuit system.  [Learn more about the Circuit Development Community](https://www.circuit.com/web/developers/home)
 *
 * The version of the OpenAPI document: 2.9.235
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConversationItem.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConversationItem::OAIConversationItem(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConversationItem::OAIConversationItem() {
    this->initializeModel();
}

OAIConversationItem::~OAIConversationItem() {}

void OAIConversationItem::initializeModel() {

    m_attachments_isSet = false;
    m_attachments_isValid = false;

    m_conv_id_isSet = false;
    m_conv_id_isValid = false;

    m_creation_time_isSet = false;
    m_creation_time_isValid = false;

    m_creator_id_isSet = false;
    m_creator_id_isValid = false;

    m_include_in_unread_count_isSet = false;
    m_include_in_unread_count_isValid = false;

    m_item_id_isSet = false;
    m_item_id_isValid = false;

    m_modification_time_isSet = false;
    m_modification_time_isValid = false;

    m_rtc_isSet = false;
    m_rtc_isValid = false;

    m_system_isSet = false;
    m_system_isValid = false;

    m_text_isSet = false;
    m_text_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIConversationItem::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIConversationItem::fromJsonObject(QJsonObject json) {

    m_attachments_isValid = ::OpenAPI::fromJsonValue(m_attachments, json[QString("attachments")]);
    m_attachments_isSet = !json[QString("attachments")].isNull() && m_attachments_isValid;

    m_conv_id_isValid = ::OpenAPI::fromJsonValue(m_conv_id, json[QString("convId")]);
    m_conv_id_isSet = !json[QString("convId")].isNull() && m_conv_id_isValid;

    m_creation_time_isValid = ::OpenAPI::fromJsonValue(m_creation_time, json[QString("creationTime")]);
    m_creation_time_isSet = !json[QString("creationTime")].isNull() && m_creation_time_isValid;

    m_creator_id_isValid = ::OpenAPI::fromJsonValue(m_creator_id, json[QString("creatorId")]);
    m_creator_id_isSet = !json[QString("creatorId")].isNull() && m_creator_id_isValid;

    m_include_in_unread_count_isValid = ::OpenAPI::fromJsonValue(m_include_in_unread_count, json[QString("includeInUnreadCount")]);
    m_include_in_unread_count_isSet = !json[QString("includeInUnreadCount")].isNull() && m_include_in_unread_count_isValid;

    m_item_id_isValid = ::OpenAPI::fromJsonValue(m_item_id, json[QString("itemId")]);
    m_item_id_isSet = !json[QString("itemId")].isNull() && m_item_id_isValid;

    m_modification_time_isValid = ::OpenAPI::fromJsonValue(m_modification_time, json[QString("modificationTime")]);
    m_modification_time_isSet = !json[QString("modificationTime")].isNull() && m_modification_time_isValid;

    m_rtc_isValid = ::OpenAPI::fromJsonValue(m_rtc, json[QString("rtc")]);
    m_rtc_isSet = !json[QString("rtc")].isNull() && m_rtc_isValid;

    m_system_isValid = ::OpenAPI::fromJsonValue(m_system, json[QString("system")]);
    m_system_isSet = !json[QString("system")].isNull() && m_system_isValid;

    m_text_isValid = ::OpenAPI::fromJsonValue(m_text, json[QString("text")]);
    m_text_isSet = !json[QString("text")].isNull() && m_text_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIConversationItem::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIConversationItem::asJsonObject() const {
    QJsonObject obj;
    if (m_attachments.size() > 0) {
        obj.insert(QString("attachments"), ::OpenAPI::toJsonValue(m_attachments));
    }
    if (m_conv_id_isSet) {
        obj.insert(QString("convId"), ::OpenAPI::toJsonValue(m_conv_id));
    }
    if (m_creation_time_isSet) {
        obj.insert(QString("creationTime"), ::OpenAPI::toJsonValue(m_creation_time));
    }
    if (m_creator_id_isSet) {
        obj.insert(QString("creatorId"), ::OpenAPI::toJsonValue(m_creator_id));
    }
    if (m_include_in_unread_count_isSet) {
        obj.insert(QString("includeInUnreadCount"), ::OpenAPI::toJsonValue(m_include_in_unread_count));
    }
    if (m_item_id_isSet) {
        obj.insert(QString("itemId"), ::OpenAPI::toJsonValue(m_item_id));
    }
    if (m_modification_time_isSet) {
        obj.insert(QString("modificationTime"), ::OpenAPI::toJsonValue(m_modification_time));
    }
    if (m_rtc.isSet()) {
        obj.insert(QString("rtc"), ::OpenAPI::toJsonValue(m_rtc));
    }
    if (m_system.isSet()) {
        obj.insert(QString("system"), ::OpenAPI::toJsonValue(m_system));
    }
    if (m_text.isSet()) {
        obj.insert(QString("text"), ::OpenAPI::toJsonValue(m_text));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QList<OAIAttachment> OAIConversationItem::getAttachments() const {
    return m_attachments;
}
void OAIConversationItem::setAttachments(const QList<OAIAttachment> &attachments) {
    m_attachments = attachments;
    m_attachments_isSet = true;
}

bool OAIConversationItem::is_attachments_Set() const{
    return m_attachments_isSet;
}

bool OAIConversationItem::is_attachments_Valid() const{
    return m_attachments_isValid;
}

QString OAIConversationItem::getConvId() const {
    return m_conv_id;
}
void OAIConversationItem::setConvId(const QString &conv_id) {
    m_conv_id = conv_id;
    m_conv_id_isSet = true;
}

bool OAIConversationItem::is_conv_id_Set() const{
    return m_conv_id_isSet;
}

bool OAIConversationItem::is_conv_id_Valid() const{
    return m_conv_id_isValid;
}

double OAIConversationItem::getCreationTime() const {
    return m_creation_time;
}
void OAIConversationItem::setCreationTime(const double &creation_time) {
    m_creation_time = creation_time;
    m_creation_time_isSet = true;
}

bool OAIConversationItem::is_creation_time_Set() const{
    return m_creation_time_isSet;
}

bool OAIConversationItem::is_creation_time_Valid() const{
    return m_creation_time_isValid;
}

QString OAIConversationItem::getCreatorId() const {
    return m_creator_id;
}
void OAIConversationItem::setCreatorId(const QString &creator_id) {
    m_creator_id = creator_id;
    m_creator_id_isSet = true;
}

bool OAIConversationItem::is_creator_id_Set() const{
    return m_creator_id_isSet;
}

bool OAIConversationItem::is_creator_id_Valid() const{
    return m_creator_id_isValid;
}

bool OAIConversationItem::isIncludeInUnreadCount() const {
    return m_include_in_unread_count;
}
void OAIConversationItem::setIncludeInUnreadCount(const bool &include_in_unread_count) {
    m_include_in_unread_count = include_in_unread_count;
    m_include_in_unread_count_isSet = true;
}

bool OAIConversationItem::is_include_in_unread_count_Set() const{
    return m_include_in_unread_count_isSet;
}

bool OAIConversationItem::is_include_in_unread_count_Valid() const{
    return m_include_in_unread_count_isValid;
}

QString OAIConversationItem::getItemId() const {
    return m_item_id;
}
void OAIConversationItem::setItemId(const QString &item_id) {
    m_item_id = item_id;
    m_item_id_isSet = true;
}

bool OAIConversationItem::is_item_id_Set() const{
    return m_item_id_isSet;
}

bool OAIConversationItem::is_item_id_Valid() const{
    return m_item_id_isValid;
}

double OAIConversationItem::getModificationTime() const {
    return m_modification_time;
}
void OAIConversationItem::setModificationTime(const double &modification_time) {
    m_modification_time = modification_time;
    m_modification_time_isSet = true;
}

bool OAIConversationItem::is_modification_time_Set() const{
    return m_modification_time_isSet;
}

bool OAIConversationItem::is_modification_time_Valid() const{
    return m_modification_time_isValid;
}

OAIRtcItem OAIConversationItem::getRtc() const {
    return m_rtc;
}
void OAIConversationItem::setRtc(const OAIRtcItem &rtc) {
    m_rtc = rtc;
    m_rtc_isSet = true;
}

bool OAIConversationItem::is_rtc_Set() const{
    return m_rtc_isSet;
}

bool OAIConversationItem::is_rtc_Valid() const{
    return m_rtc_isValid;
}

OAISystemItem OAIConversationItem::getSystem() const {
    return m_system;
}
void OAIConversationItem::setSystem(const OAISystemItem &system) {
    m_system = system;
    m_system_isSet = true;
}

bool OAIConversationItem::is_system_Set() const{
    return m_system_isSet;
}

bool OAIConversationItem::is_system_Valid() const{
    return m_system_isValid;
}

OAIConversationTextItem OAIConversationItem::getText() const {
    return m_text;
}
void OAIConversationItem::setText(const OAIConversationTextItem &text) {
    m_text = text;
    m_text_isSet = true;
}

bool OAIConversationItem::is_text_Set() const{
    return m_text_isSet;
}

bool OAIConversationItem::is_text_Valid() const{
    return m_text_isValid;
}

QString OAIConversationItem::getType() const {
    return m_type;
}
void OAIConversationItem::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIConversationItem::is_type_Set() const{
    return m_type_isSet;
}

bool OAIConversationItem::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIConversationItem::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_attachments.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_conv_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creator_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_include_in_unread_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_item_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_modification_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rtc.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_system.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_text.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIConversationItem::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
