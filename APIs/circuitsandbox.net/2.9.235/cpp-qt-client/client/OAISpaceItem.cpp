/**
 * REST API Version 2
 * Circuit REST API to interact with the Circuit system.  [Learn more about the Circuit Development Community](https://www.circuit.com/web/developers/home)
 *
 * The version of the OpenAPI document: 2.9.235
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISpaceItem.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISpaceItem::OAISpaceItem(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISpaceItem::OAISpaceItem() {
    this->initializeModel();
}

OAISpaceItem::~OAISpaceItem() {}

void OAISpaceItem::initializeModel() {

    m_status_isSet = false;
    m_status_isValid = false;

    m_attachments_isSet = false;
    m_attachments_isValid = false;

    m_complex_isSet = false;
    m_complex_isValid = false;

    m_content_isSet = false;
    m_content_isValid = false;

    m_creation_time_isSet = false;
    m_creation_time_isValid = false;

    m_creator_id_isSet = false;
    m_creator_id_isValid = false;

    m_deleted_by_isSet = false;
    m_deleted_by_isValid = false;

    m_external_attachments_isSet = false;
    m_external_attachments_isValid = false;

    m_form_meta_data_isSet = false;
    m_form_meta_data_isValid = false;

    m_item_id_isSet = false;
    m_item_id_isValid = false;

    m_mentioned_users_isSet = false;
    m_mentioned_users_isValid = false;

    m_modification_time_isSet = false;
    m_modification_time_isValid = false;

    m_number_of_likes_isSet = false;
    m_number_of_likes_isValid = false;

    m_previews_isSet = false;
    m_previews_isValid = false;

    m_shared_items_isSet = false;
    m_shared_items_isValid = false;

    m_space_id_isSet = false;
    m_space_id_isValid = false;

    m_tenant_id_isSet = false;
    m_tenant_id_isValid = false;
}

void OAISpaceItem::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISpaceItem::fromJsonObject(QJsonObject json) {

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_attachments_isValid = ::OpenAPI::fromJsonValue(m_attachments, json[QString("attachments")]);
    m_attachments_isSet = !json[QString("attachments")].isNull() && m_attachments_isValid;

    m_complex_isValid = ::OpenAPI::fromJsonValue(m_complex, json[QString("complex")]);
    m_complex_isSet = !json[QString("complex")].isNull() && m_complex_isValid;

    m_content_isValid = ::OpenAPI::fromJsonValue(m_content, json[QString("content")]);
    m_content_isSet = !json[QString("content")].isNull() && m_content_isValid;

    m_creation_time_isValid = ::OpenAPI::fromJsonValue(m_creation_time, json[QString("creationTime")]);
    m_creation_time_isSet = !json[QString("creationTime")].isNull() && m_creation_time_isValid;

    m_creator_id_isValid = ::OpenAPI::fromJsonValue(m_creator_id, json[QString("creatorId")]);
    m_creator_id_isSet = !json[QString("creatorId")].isNull() && m_creator_id_isValid;

    m_deleted_by_isValid = ::OpenAPI::fromJsonValue(m_deleted_by, json[QString("deletedBy")]);
    m_deleted_by_isSet = !json[QString("deletedBy")].isNull() && m_deleted_by_isValid;

    m_external_attachments_isValid = ::OpenAPI::fromJsonValue(m_external_attachments, json[QString("externalAttachments")]);
    m_external_attachments_isSet = !json[QString("externalAttachments")].isNull() && m_external_attachments_isValid;

    m_form_meta_data_isValid = ::OpenAPI::fromJsonValue(m_form_meta_data, json[QString("formMetaData")]);
    m_form_meta_data_isSet = !json[QString("formMetaData")].isNull() && m_form_meta_data_isValid;

    m_item_id_isValid = ::OpenAPI::fromJsonValue(m_item_id, json[QString("itemId")]);
    m_item_id_isSet = !json[QString("itemId")].isNull() && m_item_id_isValid;

    m_mentioned_users_isValid = ::OpenAPI::fromJsonValue(m_mentioned_users, json[QString("mentionedUsers")]);
    m_mentioned_users_isSet = !json[QString("mentionedUsers")].isNull() && m_mentioned_users_isValid;

    m_modification_time_isValid = ::OpenAPI::fromJsonValue(m_modification_time, json[QString("modificationTime")]);
    m_modification_time_isSet = !json[QString("modificationTime")].isNull() && m_modification_time_isValid;

    m_number_of_likes_isValid = ::OpenAPI::fromJsonValue(m_number_of_likes, json[QString("numberOfLikes")]);
    m_number_of_likes_isSet = !json[QString("numberOfLikes")].isNull() && m_number_of_likes_isValid;

    m_previews_isValid = ::OpenAPI::fromJsonValue(m_previews, json[QString("previews")]);
    m_previews_isSet = !json[QString("previews")].isNull() && m_previews_isValid;

    m_shared_items_isValid = ::OpenAPI::fromJsonValue(m_shared_items, json[QString("sharedItems")]);
    m_shared_items_isSet = !json[QString("sharedItems")].isNull() && m_shared_items_isValid;

    m_space_id_isValid = ::OpenAPI::fromJsonValue(m_space_id, json[QString("spaceId")]);
    m_space_id_isSet = !json[QString("spaceId")].isNull() && m_space_id_isValid;

    m_tenant_id_isValid = ::OpenAPI::fromJsonValue(m_tenant_id, json[QString("tenantId")]);
    m_tenant_id_isSet = !json[QString("tenantId")].isNull() && m_tenant_id_isValid;
}

QString OAISpaceItem::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISpaceItem::asJsonObject() const {
    QJsonObject obj;
    if (m_status_isSet) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_attachments.size() > 0) {
        obj.insert(QString("attachments"), ::OpenAPI::toJsonValue(m_attachments));
    }
    if (m_complex_isSet) {
        obj.insert(QString("complex"), ::OpenAPI::toJsonValue(m_complex));
    }
    if (m_content_isSet) {
        obj.insert(QString("content"), ::OpenAPI::toJsonValue(m_content));
    }
    if (m_creation_time_isSet) {
        obj.insert(QString("creationTime"), ::OpenAPI::toJsonValue(m_creation_time));
    }
    if (m_creator_id_isSet) {
        obj.insert(QString("creatorId"), ::OpenAPI::toJsonValue(m_creator_id));
    }
    if (m_deleted_by_isSet) {
        obj.insert(QString("deletedBy"), ::OpenAPI::toJsonValue(m_deleted_by));
    }
    if (m_external_attachments.size() > 0) {
        obj.insert(QString("externalAttachments"), ::OpenAPI::toJsonValue(m_external_attachments));
    }
    if (m_form_meta_data_isSet) {
        obj.insert(QString("formMetaData"), ::OpenAPI::toJsonValue(m_form_meta_data));
    }
    if (m_item_id_isSet) {
        obj.insert(QString("itemId"), ::OpenAPI::toJsonValue(m_item_id));
    }
    if (m_mentioned_users.size() > 0) {
        obj.insert(QString("mentionedUsers"), ::OpenAPI::toJsonValue(m_mentioned_users));
    }
    if (m_modification_time_isSet) {
        obj.insert(QString("modificationTime"), ::OpenAPI::toJsonValue(m_modification_time));
    }
    if (m_number_of_likes_isSet) {
        obj.insert(QString("numberOfLikes"), ::OpenAPI::toJsonValue(m_number_of_likes));
    }
    if (m_previews.size() > 0) {
        obj.insert(QString("previews"), ::OpenAPI::toJsonValue(m_previews));
    }
    if (m_shared_items.size() > 0) {
        obj.insert(QString("sharedItems"), ::OpenAPI::toJsonValue(m_shared_items));
    }
    if (m_space_id_isSet) {
        obj.insert(QString("spaceId"), ::OpenAPI::toJsonValue(m_space_id));
    }
    if (m_tenant_id_isSet) {
        obj.insert(QString("tenantId"), ::OpenAPI::toJsonValue(m_tenant_id));
    }
    return obj;
}

QString OAISpaceItem::getStatus() const {
    return m_status;
}
void OAISpaceItem::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAISpaceItem::is_status_Set() const{
    return m_status_isSet;
}

bool OAISpaceItem::is_status_Valid() const{
    return m_status_isValid;
}

QList<OAISpaceAttachment> OAISpaceItem::getAttachments() const {
    return m_attachments;
}
void OAISpaceItem::setAttachments(const QList<OAISpaceAttachment> &attachments) {
    m_attachments = attachments;
    m_attachments_isSet = true;
}

bool OAISpaceItem::is_attachments_Set() const{
    return m_attachments_isSet;
}

bool OAISpaceItem::is_attachments_Valid() const{
    return m_attachments_isValid;
}

bool OAISpaceItem::isComplex() const {
    return m_complex;
}
void OAISpaceItem::setComplex(const bool &complex) {
    m_complex = complex;
    m_complex_isSet = true;
}

bool OAISpaceItem::is_complex_Set() const{
    return m_complex_isSet;
}

bool OAISpaceItem::is_complex_Valid() const{
    return m_complex_isValid;
}

QString OAISpaceItem::getContent() const {
    return m_content;
}
void OAISpaceItem::setContent(const QString &content) {
    m_content = content;
    m_content_isSet = true;
}

bool OAISpaceItem::is_content_Set() const{
    return m_content_isSet;
}

bool OAISpaceItem::is_content_Valid() const{
    return m_content_isValid;
}

double OAISpaceItem::getCreationTime() const {
    return m_creation_time;
}
void OAISpaceItem::setCreationTime(const double &creation_time) {
    m_creation_time = creation_time;
    m_creation_time_isSet = true;
}

bool OAISpaceItem::is_creation_time_Set() const{
    return m_creation_time_isSet;
}

bool OAISpaceItem::is_creation_time_Valid() const{
    return m_creation_time_isValid;
}

QString OAISpaceItem::getCreatorId() const {
    return m_creator_id;
}
void OAISpaceItem::setCreatorId(const QString &creator_id) {
    m_creator_id = creator_id;
    m_creator_id_isSet = true;
}

bool OAISpaceItem::is_creator_id_Set() const{
    return m_creator_id_isSet;
}

bool OAISpaceItem::is_creator_id_Valid() const{
    return m_creator_id_isValid;
}

QString OAISpaceItem::getDeletedBy() const {
    return m_deleted_by;
}
void OAISpaceItem::setDeletedBy(const QString &deleted_by) {
    m_deleted_by = deleted_by;
    m_deleted_by_isSet = true;
}

bool OAISpaceItem::is_deleted_by_Set() const{
    return m_deleted_by_isSet;
}

bool OAISpaceItem::is_deleted_by_Valid() const{
    return m_deleted_by_isValid;
}

QList<OAISpaceExternalAttachment> OAISpaceItem::getExternalAttachments() const {
    return m_external_attachments;
}
void OAISpaceItem::setExternalAttachments(const QList<OAISpaceExternalAttachment> &external_attachments) {
    m_external_attachments = external_attachments;
    m_external_attachments_isSet = true;
}

bool OAISpaceItem::is_external_attachments_Set() const{
    return m_external_attachments_isSet;
}

bool OAISpaceItem::is_external_attachments_Valid() const{
    return m_external_attachments_isValid;
}

QString OAISpaceItem::getFormMetaData() const {
    return m_form_meta_data;
}
void OAISpaceItem::setFormMetaData(const QString &form_meta_data) {
    m_form_meta_data = form_meta_data;
    m_form_meta_data_isSet = true;
}

bool OAISpaceItem::is_form_meta_data_Set() const{
    return m_form_meta_data_isSet;
}

bool OAISpaceItem::is_form_meta_data_Valid() const{
    return m_form_meta_data_isValid;
}

QString OAISpaceItem::getItemId() const {
    return m_item_id;
}
void OAISpaceItem::setItemId(const QString &item_id) {
    m_item_id = item_id;
    m_item_id_isSet = true;
}

bool OAISpaceItem::is_item_id_Set() const{
    return m_item_id_isSet;
}

bool OAISpaceItem::is_item_id_Valid() const{
    return m_item_id_isValid;
}

QList<QString> OAISpaceItem::getMentionedUsers() const {
    return m_mentioned_users;
}
void OAISpaceItem::setMentionedUsers(const QList<QString> &mentioned_users) {
    m_mentioned_users = mentioned_users;
    m_mentioned_users_isSet = true;
}

bool OAISpaceItem::is_mentioned_users_Set() const{
    return m_mentioned_users_isSet;
}

bool OAISpaceItem::is_mentioned_users_Valid() const{
    return m_mentioned_users_isValid;
}

double OAISpaceItem::getModificationTime() const {
    return m_modification_time;
}
void OAISpaceItem::setModificationTime(const double &modification_time) {
    m_modification_time = modification_time;
    m_modification_time_isSet = true;
}

bool OAISpaceItem::is_modification_time_Set() const{
    return m_modification_time_isSet;
}

bool OAISpaceItem::is_modification_time_Valid() const{
    return m_modification_time_isValid;
}

double OAISpaceItem::getNumberOfLikes() const {
    return m_number_of_likes;
}
void OAISpaceItem::setNumberOfLikes(const double &number_of_likes) {
    m_number_of_likes = number_of_likes;
    m_number_of_likes_isSet = true;
}

bool OAISpaceItem::is_number_of_likes_Set() const{
    return m_number_of_likes_isSet;
}

bool OAISpaceItem::is_number_of_likes_Valid() const{
    return m_number_of_likes_isValid;
}

QList<OAISpaceItemPreview> OAISpaceItem::getPreviews() const {
    return m_previews;
}
void OAISpaceItem::setPreviews(const QList<OAISpaceItemPreview> &previews) {
    m_previews = previews;
    m_previews_isSet = true;
}

bool OAISpaceItem::is_previews_Set() const{
    return m_previews_isSet;
}

bool OAISpaceItem::is_previews_Valid() const{
    return m_previews_isValid;
}

QList<OAISharedItem> OAISpaceItem::getSharedItems() const {
    return m_shared_items;
}
void OAISpaceItem::setSharedItems(const QList<OAISharedItem> &shared_items) {
    m_shared_items = shared_items;
    m_shared_items_isSet = true;
}

bool OAISpaceItem::is_shared_items_Set() const{
    return m_shared_items_isSet;
}

bool OAISpaceItem::is_shared_items_Valid() const{
    return m_shared_items_isValid;
}

QString OAISpaceItem::getSpaceId() const {
    return m_space_id;
}
void OAISpaceItem::setSpaceId(const QString &space_id) {
    m_space_id = space_id;
    m_space_id_isSet = true;
}

bool OAISpaceItem::is_space_id_Set() const{
    return m_space_id_isSet;
}

bool OAISpaceItem::is_space_id_Valid() const{
    return m_space_id_isValid;
}

QString OAISpaceItem::getTenantId() const {
    return m_tenant_id;
}
void OAISpaceItem::setTenantId(const QString &tenant_id) {
    m_tenant_id = tenant_id;
    m_tenant_id_isSet = true;
}

bool OAISpaceItem::is_tenant_id_Set() const{
    return m_tenant_id_isSet;
}

bool OAISpaceItem::is_tenant_id_Valid() const{
    return m_tenant_id_isValid;
}

bool OAISpaceItem::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_attachments.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_complex_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_content_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creator_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deleted_by_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_external_attachments.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_form_meta_data_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_item_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mentioned_users.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_modification_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_of_likes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_previews.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_shared_items.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_space_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tenant_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISpaceItem::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
