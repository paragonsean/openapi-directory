/**
 * REST API Version 2
 * Circuit REST API to interact with the Circuit system.  [Learn more about the Circuit Development Community](https://www.circuit.com/web/developers/home)
 *
 * The version of the OpenAPI document: 2.9.235
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIParticipantsImportDataResult.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIParticipantsImportDataResult::OAIParticipantsImportDataResult(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIParticipantsImportDataResult::OAIParticipantsImportDataResult() {
    this->initializeModel();
}

OAIParticipantsImportDataResult::~OAIParticipantsImportDataResult() {}

void OAIParticipantsImportDataResult::initializeModel() {

    m_actual_number_of_imported_participants_isSet = false;
    m_actual_number_of_imported_participants_isValid = false;

    m_estimated_import_duration_isSet = false;
    m_estimated_import_duration_isValid = false;

    m_import_end_date_isSet = false;
    m_import_end_date_isValid = false;

    m_import_file_id_isSet = false;
    m_import_file_id_isValid = false;

    m_import_file_name_isSet = false;
    m_import_file_name_isValid = false;

    m_import_progress_isSet = false;
    m_import_progress_isValid = false;

    m_import_start_date_isSet = false;
    m_import_start_date_isValid = false;

    m_import_status_isSet = false;
    m_import_status_isValid = false;

    m_planned_number_of_imported_participants_isSet = false;
    m_planned_number_of_imported_participants_isValid = false;

    m_result_file_id_isSet = false;
    m_result_file_id_isValid = false;

    m_result_file_name_isSet = false;
    m_result_file_name_isValid = false;
}

void OAIParticipantsImportDataResult::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIParticipantsImportDataResult::fromJsonObject(QJsonObject json) {

    m_actual_number_of_imported_participants_isValid = ::OpenAPI::fromJsonValue(m_actual_number_of_imported_participants, json[QString("actualNumberOfImportedParticipants")]);
    m_actual_number_of_imported_participants_isSet = !json[QString("actualNumberOfImportedParticipants")].isNull() && m_actual_number_of_imported_participants_isValid;

    m_estimated_import_duration_isValid = ::OpenAPI::fromJsonValue(m_estimated_import_duration, json[QString("estimatedImportDuration")]);
    m_estimated_import_duration_isSet = !json[QString("estimatedImportDuration")].isNull() && m_estimated_import_duration_isValid;

    m_import_end_date_isValid = ::OpenAPI::fromJsonValue(m_import_end_date, json[QString("importEndDate")]);
    m_import_end_date_isSet = !json[QString("importEndDate")].isNull() && m_import_end_date_isValid;

    m_import_file_id_isValid = ::OpenAPI::fromJsonValue(m_import_file_id, json[QString("importFileId")]);
    m_import_file_id_isSet = !json[QString("importFileId")].isNull() && m_import_file_id_isValid;

    m_import_file_name_isValid = ::OpenAPI::fromJsonValue(m_import_file_name, json[QString("importFileName")]);
    m_import_file_name_isSet = !json[QString("importFileName")].isNull() && m_import_file_name_isValid;

    m_import_progress_isValid = ::OpenAPI::fromJsonValue(m_import_progress, json[QString("importProgress")]);
    m_import_progress_isSet = !json[QString("importProgress")].isNull() && m_import_progress_isValid;

    m_import_start_date_isValid = ::OpenAPI::fromJsonValue(m_import_start_date, json[QString("importStartDate")]);
    m_import_start_date_isSet = !json[QString("importStartDate")].isNull() && m_import_start_date_isValid;

    m_import_status_isValid = ::OpenAPI::fromJsonValue(m_import_status, json[QString("importStatus")]);
    m_import_status_isSet = !json[QString("importStatus")].isNull() && m_import_status_isValid;

    m_planned_number_of_imported_participants_isValid = ::OpenAPI::fromJsonValue(m_planned_number_of_imported_participants, json[QString("plannedNumberOfImportedParticipants")]);
    m_planned_number_of_imported_participants_isSet = !json[QString("plannedNumberOfImportedParticipants")].isNull() && m_planned_number_of_imported_participants_isValid;

    m_result_file_id_isValid = ::OpenAPI::fromJsonValue(m_result_file_id, json[QString("resultFileId")]);
    m_result_file_id_isSet = !json[QString("resultFileId")].isNull() && m_result_file_id_isValid;

    m_result_file_name_isValid = ::OpenAPI::fromJsonValue(m_result_file_name, json[QString("resultFileName")]);
    m_result_file_name_isSet = !json[QString("resultFileName")].isNull() && m_result_file_name_isValid;
}

QString OAIParticipantsImportDataResult::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIParticipantsImportDataResult::asJsonObject() const {
    QJsonObject obj;
    if (m_actual_number_of_imported_participants_isSet) {
        obj.insert(QString("actualNumberOfImportedParticipants"), ::OpenAPI::toJsonValue(m_actual_number_of_imported_participants));
    }
    if (m_estimated_import_duration_isSet) {
        obj.insert(QString("estimatedImportDuration"), ::OpenAPI::toJsonValue(m_estimated_import_duration));
    }
    if (m_import_end_date_isSet) {
        obj.insert(QString("importEndDate"), ::OpenAPI::toJsonValue(m_import_end_date));
    }
    if (m_import_file_id_isSet) {
        obj.insert(QString("importFileId"), ::OpenAPI::toJsonValue(m_import_file_id));
    }
    if (m_import_file_name_isSet) {
        obj.insert(QString("importFileName"), ::OpenAPI::toJsonValue(m_import_file_name));
    }
    if (m_import_progress_isSet) {
        obj.insert(QString("importProgress"), ::OpenAPI::toJsonValue(m_import_progress));
    }
    if (m_import_start_date_isSet) {
        obj.insert(QString("importStartDate"), ::OpenAPI::toJsonValue(m_import_start_date));
    }
    if (m_import_status_isSet) {
        obj.insert(QString("importStatus"), ::OpenAPI::toJsonValue(m_import_status));
    }
    if (m_planned_number_of_imported_participants_isSet) {
        obj.insert(QString("plannedNumberOfImportedParticipants"), ::OpenAPI::toJsonValue(m_planned_number_of_imported_participants));
    }
    if (m_result_file_id_isSet) {
        obj.insert(QString("resultFileId"), ::OpenAPI::toJsonValue(m_result_file_id));
    }
    if (m_result_file_name_isSet) {
        obj.insert(QString("resultFileName"), ::OpenAPI::toJsonValue(m_result_file_name));
    }
    return obj;
}

double OAIParticipantsImportDataResult::getActualNumberOfImportedParticipants() const {
    return m_actual_number_of_imported_participants;
}
void OAIParticipantsImportDataResult::setActualNumberOfImportedParticipants(const double &actual_number_of_imported_participants) {
    m_actual_number_of_imported_participants = actual_number_of_imported_participants;
    m_actual_number_of_imported_participants_isSet = true;
}

bool OAIParticipantsImportDataResult::is_actual_number_of_imported_participants_Set() const{
    return m_actual_number_of_imported_participants_isSet;
}

bool OAIParticipantsImportDataResult::is_actual_number_of_imported_participants_Valid() const{
    return m_actual_number_of_imported_participants_isValid;
}

double OAIParticipantsImportDataResult::getEstimatedImportDuration() const {
    return m_estimated_import_duration;
}
void OAIParticipantsImportDataResult::setEstimatedImportDuration(const double &estimated_import_duration) {
    m_estimated_import_duration = estimated_import_duration;
    m_estimated_import_duration_isSet = true;
}

bool OAIParticipantsImportDataResult::is_estimated_import_duration_Set() const{
    return m_estimated_import_duration_isSet;
}

bool OAIParticipantsImportDataResult::is_estimated_import_duration_Valid() const{
    return m_estimated_import_duration_isValid;
}

double OAIParticipantsImportDataResult::getImportEndDate() const {
    return m_import_end_date;
}
void OAIParticipantsImportDataResult::setImportEndDate(const double &import_end_date) {
    m_import_end_date = import_end_date;
    m_import_end_date_isSet = true;
}

bool OAIParticipantsImportDataResult::is_import_end_date_Set() const{
    return m_import_end_date_isSet;
}

bool OAIParticipantsImportDataResult::is_import_end_date_Valid() const{
    return m_import_end_date_isValid;
}

QString OAIParticipantsImportDataResult::getImportFileId() const {
    return m_import_file_id;
}
void OAIParticipantsImportDataResult::setImportFileId(const QString &import_file_id) {
    m_import_file_id = import_file_id;
    m_import_file_id_isSet = true;
}

bool OAIParticipantsImportDataResult::is_import_file_id_Set() const{
    return m_import_file_id_isSet;
}

bool OAIParticipantsImportDataResult::is_import_file_id_Valid() const{
    return m_import_file_id_isValid;
}

QString OAIParticipantsImportDataResult::getImportFileName() const {
    return m_import_file_name;
}
void OAIParticipantsImportDataResult::setImportFileName(const QString &import_file_name) {
    m_import_file_name = import_file_name;
    m_import_file_name_isSet = true;
}

bool OAIParticipantsImportDataResult::is_import_file_name_Set() const{
    return m_import_file_name_isSet;
}

bool OAIParticipantsImportDataResult::is_import_file_name_Valid() const{
    return m_import_file_name_isValid;
}

double OAIParticipantsImportDataResult::getImportProgress() const {
    return m_import_progress;
}
void OAIParticipantsImportDataResult::setImportProgress(const double &import_progress) {
    m_import_progress = import_progress;
    m_import_progress_isSet = true;
}

bool OAIParticipantsImportDataResult::is_import_progress_Set() const{
    return m_import_progress_isSet;
}

bool OAIParticipantsImportDataResult::is_import_progress_Valid() const{
    return m_import_progress_isValid;
}

double OAIParticipantsImportDataResult::getImportStartDate() const {
    return m_import_start_date;
}
void OAIParticipantsImportDataResult::setImportStartDate(const double &import_start_date) {
    m_import_start_date = import_start_date;
    m_import_start_date_isSet = true;
}

bool OAIParticipantsImportDataResult::is_import_start_date_Set() const{
    return m_import_start_date_isSet;
}

bool OAIParticipantsImportDataResult::is_import_start_date_Valid() const{
    return m_import_start_date_isValid;
}

QString OAIParticipantsImportDataResult::getImportStatus() const {
    return m_import_status;
}
void OAIParticipantsImportDataResult::setImportStatus(const QString &import_status) {
    m_import_status = import_status;
    m_import_status_isSet = true;
}

bool OAIParticipantsImportDataResult::is_import_status_Set() const{
    return m_import_status_isSet;
}

bool OAIParticipantsImportDataResult::is_import_status_Valid() const{
    return m_import_status_isValid;
}

double OAIParticipantsImportDataResult::getPlannedNumberOfImportedParticipants() const {
    return m_planned_number_of_imported_participants;
}
void OAIParticipantsImportDataResult::setPlannedNumberOfImportedParticipants(const double &planned_number_of_imported_participants) {
    m_planned_number_of_imported_participants = planned_number_of_imported_participants;
    m_planned_number_of_imported_participants_isSet = true;
}

bool OAIParticipantsImportDataResult::is_planned_number_of_imported_participants_Set() const{
    return m_planned_number_of_imported_participants_isSet;
}

bool OAIParticipantsImportDataResult::is_planned_number_of_imported_participants_Valid() const{
    return m_planned_number_of_imported_participants_isValid;
}

QString OAIParticipantsImportDataResult::getResultFileId() const {
    return m_result_file_id;
}
void OAIParticipantsImportDataResult::setResultFileId(const QString &result_file_id) {
    m_result_file_id = result_file_id;
    m_result_file_id_isSet = true;
}

bool OAIParticipantsImportDataResult::is_result_file_id_Set() const{
    return m_result_file_id_isSet;
}

bool OAIParticipantsImportDataResult::is_result_file_id_Valid() const{
    return m_result_file_id_isValid;
}

QString OAIParticipantsImportDataResult::getResultFileName() const {
    return m_result_file_name;
}
void OAIParticipantsImportDataResult::setResultFileName(const QString &result_file_name) {
    m_result_file_name = result_file_name;
    m_result_file_name_isSet = true;
}

bool OAIParticipantsImportDataResult::is_result_file_name_Set() const{
    return m_result_file_name_isSet;
}

bool OAIParticipantsImportDataResult::is_result_file_name_Valid() const{
    return m_result_file_name_isValid;
}

bool OAIParticipantsImportDataResult::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_actual_number_of_imported_participants_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_estimated_import_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_import_end_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_import_file_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_import_file_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_import_progress_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_import_start_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_import_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_planned_number_of_imported_participants_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_result_file_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_result_file_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIParticipantsImportDataResult::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
