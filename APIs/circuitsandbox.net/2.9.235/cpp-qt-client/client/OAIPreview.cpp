/**
 * REST API Version 2
 * Circuit REST API to interact with the Circuit system.  [Learn more about the Circuit Development Community](https://www.circuit.com/web/developers/home)
 *
 * The version of the OpenAPI document: 2.9.235
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPreview.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPreview::OAIPreview(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPreview::OAIPreview() {
    this->initializeModel();
}

OAIPreview::~OAIPreview() {}

void OAIPreview::initializeModel() {

    m_image_uri_isSet = false;
    m_image_uri_isValid = false;

    m_src_url_isSet = false;
    m_src_url_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIPreview::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPreview::fromJsonObject(QJsonObject json) {

    m_image_uri_isValid = ::OpenAPI::fromJsonValue(m_image_uri, json[QString("imageURI")]);
    m_image_uri_isSet = !json[QString("imageURI")].isNull() && m_image_uri_isValid;

    m_src_url_isValid = ::OpenAPI::fromJsonValue(m_src_url, json[QString("srcURL")]);
    m_src_url_isSet = !json[QString("srcURL")].isNull() && m_src_url_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIPreview::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPreview::asJsonObject() const {
    QJsonObject obj;
    if (m_image_uri_isSet) {
        obj.insert(QString("imageURI"), ::OpenAPI::toJsonValue(m_image_uri));
    }
    if (m_src_url_isSet) {
        obj.insert(QString("srcURL"), ::OpenAPI::toJsonValue(m_src_url));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIPreview::getImageUri() const {
    return m_image_uri;
}
void OAIPreview::setImageUri(const QString &image_uri) {
    m_image_uri = image_uri;
    m_image_uri_isSet = true;
}

bool OAIPreview::is_image_uri_Set() const{
    return m_image_uri_isSet;
}

bool OAIPreview::is_image_uri_Valid() const{
    return m_image_uri_isValid;
}

QString OAIPreview::getSrcUrl() const {
    return m_src_url;
}
void OAIPreview::setSrcUrl(const QString &src_url) {
    m_src_url = src_url;
    m_src_url_isSet = true;
}

bool OAIPreview::is_src_url_Set() const{
    return m_src_url_isSet;
}

bool OAIPreview::is_src_url_Valid() const{
    return m_src_url_isValid;
}

QString OAIPreview::getTitle() const {
    return m_title;
}
void OAIPreview::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIPreview::is_title_Set() const{
    return m_title_isSet;
}

bool OAIPreview::is_title_Valid() const{
    return m_title_isValid;
}

QString OAIPreview::getType() const {
    return m_type;
}
void OAIPreview::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIPreview::is_type_Set() const{
    return m_type_isSet;
}

bool OAIPreview::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIPreview::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_image_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_src_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPreview::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
