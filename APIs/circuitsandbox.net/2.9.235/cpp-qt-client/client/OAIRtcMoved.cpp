/**
 * REST API Version 2
 * Circuit REST API to interact with the Circuit system.  [Learn more about the Circuit Development Community](https://www.circuit.com/web/developers/home)
 *
 * The version of the OpenAPI document: 2.9.235
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRtcMoved.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRtcMoved::OAIRtcMoved(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRtcMoved::OAIRtcMoved() {
    this->initializeModel();
}

OAIRtcMoved::~OAIRtcMoved() {}

void OAIRtcMoved::initializeModel() {

    m_conversation_id_isSet = false;
    m_conversation_id_isValid = false;

    m_direction_isSet = false;
    m_direction_isValid = false;
}

void OAIRtcMoved::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRtcMoved::fromJsonObject(QJsonObject json) {

    m_conversation_id_isValid = ::OpenAPI::fromJsonValue(m_conversation_id, json[QString("conversationId")]);
    m_conversation_id_isSet = !json[QString("conversationId")].isNull() && m_conversation_id_isValid;

    m_direction_isValid = ::OpenAPI::fromJsonValue(m_direction, json[QString("direction")]);
    m_direction_isSet = !json[QString("direction")].isNull() && m_direction_isValid;
}

QString OAIRtcMoved::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRtcMoved::asJsonObject() const {
    QJsonObject obj;
    if (m_conversation_id_isSet) {
        obj.insert(QString("conversationId"), ::OpenAPI::toJsonValue(m_conversation_id));
    }
    if (m_direction_isSet) {
        obj.insert(QString("direction"), ::OpenAPI::toJsonValue(m_direction));
    }
    return obj;
}

QString OAIRtcMoved::getConversationId() const {
    return m_conversation_id;
}
void OAIRtcMoved::setConversationId(const QString &conversation_id) {
    m_conversation_id = conversation_id;
    m_conversation_id_isSet = true;
}

bool OAIRtcMoved::is_conversation_id_Set() const{
    return m_conversation_id_isSet;
}

bool OAIRtcMoved::is_conversation_id_Valid() const{
    return m_conversation_id_isValid;
}

QString OAIRtcMoved::getDirection() const {
    return m_direction;
}
void OAIRtcMoved::setDirection(const QString &direction) {
    m_direction = direction;
    m_direction_isSet = true;
}

bool OAIRtcMoved::is_direction_Set() const{
    return m_direction_isSet;
}

bool OAIRtcMoved::is_direction_Valid() const{
    return m_direction_isValid;
}

bool OAIRtcMoved::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_conversation_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_direction_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRtcMoved::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
