/**
 * REST API Version 2
 * Circuit REST API to interact with the Circuit system.  [Learn more about the Circuit Development Community](https://www.circuit.com/web/developers/home)
 *
 * The version of the OpenAPI document: 2.9.235
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISharedItem.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISharedItem::OAISharedItem(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISharedItem::OAISharedItem() {
    this->initializeModel();
}

OAISharedItem::~OAISharedItem() {}

void OAISharedItem::initializeModel() {

    m_container_id_isSet = false;
    m_container_id_isValid = false;

    m_container_name_isSet = false;
    m_container_name_isValid = false;

    m_container_type_isSet = false;
    m_container_type_isValid = false;

    m_creation_time_isSet = false;
    m_creation_time_isValid = false;

    m_creator_id_isSet = false;
    m_creator_id_isValid = false;

    m_item_id_isSet = false;
    m_item_id_isValid = false;

    m_parent_topic_id_isSet = false;
    m_parent_topic_id_isValid = false;

    m_sub_type_isSet = false;
    m_sub_type_isValid = false;
}

void OAISharedItem::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISharedItem::fromJsonObject(QJsonObject json) {

    m_container_id_isValid = ::OpenAPI::fromJsonValue(m_container_id, json[QString("containerId")]);
    m_container_id_isSet = !json[QString("containerId")].isNull() && m_container_id_isValid;

    m_container_name_isValid = ::OpenAPI::fromJsonValue(m_container_name, json[QString("containerName")]);
    m_container_name_isSet = !json[QString("containerName")].isNull() && m_container_name_isValid;

    m_container_type_isValid = ::OpenAPI::fromJsonValue(m_container_type, json[QString("containerType")]);
    m_container_type_isSet = !json[QString("containerType")].isNull() && m_container_type_isValid;

    m_creation_time_isValid = ::OpenAPI::fromJsonValue(m_creation_time, json[QString("creationTime")]);
    m_creation_time_isSet = !json[QString("creationTime")].isNull() && m_creation_time_isValid;

    m_creator_id_isValid = ::OpenAPI::fromJsonValue(m_creator_id, json[QString("creatorId")]);
    m_creator_id_isSet = !json[QString("creatorId")].isNull() && m_creator_id_isValid;

    m_item_id_isValid = ::OpenAPI::fromJsonValue(m_item_id, json[QString("itemId")]);
    m_item_id_isSet = !json[QString("itemId")].isNull() && m_item_id_isValid;

    m_parent_topic_id_isValid = ::OpenAPI::fromJsonValue(m_parent_topic_id, json[QString("parentTopicId")]);
    m_parent_topic_id_isSet = !json[QString("parentTopicId")].isNull() && m_parent_topic_id_isValid;

    m_sub_type_isValid = ::OpenAPI::fromJsonValue(m_sub_type, json[QString("subType")]);
    m_sub_type_isSet = !json[QString("subType")].isNull() && m_sub_type_isValid;
}

QString OAISharedItem::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISharedItem::asJsonObject() const {
    QJsonObject obj;
    if (m_container_id_isSet) {
        obj.insert(QString("containerId"), ::OpenAPI::toJsonValue(m_container_id));
    }
    if (m_container_name_isSet) {
        obj.insert(QString("containerName"), ::OpenAPI::toJsonValue(m_container_name));
    }
    if (m_container_type_isSet) {
        obj.insert(QString("containerType"), ::OpenAPI::toJsonValue(m_container_type));
    }
    if (m_creation_time_isSet) {
        obj.insert(QString("creationTime"), ::OpenAPI::toJsonValue(m_creation_time));
    }
    if (m_creator_id_isSet) {
        obj.insert(QString("creatorId"), ::OpenAPI::toJsonValue(m_creator_id));
    }
    if (m_item_id_isSet) {
        obj.insert(QString("itemId"), ::OpenAPI::toJsonValue(m_item_id));
    }
    if (m_parent_topic_id_isSet) {
        obj.insert(QString("parentTopicId"), ::OpenAPI::toJsonValue(m_parent_topic_id));
    }
    if (m_sub_type_isSet) {
        obj.insert(QString("subType"), ::OpenAPI::toJsonValue(m_sub_type));
    }
    return obj;
}

QString OAISharedItem::getContainerId() const {
    return m_container_id;
}
void OAISharedItem::setContainerId(const QString &container_id) {
    m_container_id = container_id;
    m_container_id_isSet = true;
}

bool OAISharedItem::is_container_id_Set() const{
    return m_container_id_isSet;
}

bool OAISharedItem::is_container_id_Valid() const{
    return m_container_id_isValid;
}

QString OAISharedItem::getContainerName() const {
    return m_container_name;
}
void OAISharedItem::setContainerName(const QString &container_name) {
    m_container_name = container_name;
    m_container_name_isSet = true;
}

bool OAISharedItem::is_container_name_Set() const{
    return m_container_name_isSet;
}

bool OAISharedItem::is_container_name_Valid() const{
    return m_container_name_isValid;
}

QString OAISharedItem::getContainerType() const {
    return m_container_type;
}
void OAISharedItem::setContainerType(const QString &container_type) {
    m_container_type = container_type;
    m_container_type_isSet = true;
}

bool OAISharedItem::is_container_type_Set() const{
    return m_container_type_isSet;
}

bool OAISharedItem::is_container_type_Valid() const{
    return m_container_type_isValid;
}

double OAISharedItem::getCreationTime() const {
    return m_creation_time;
}
void OAISharedItem::setCreationTime(const double &creation_time) {
    m_creation_time = creation_time;
    m_creation_time_isSet = true;
}

bool OAISharedItem::is_creation_time_Set() const{
    return m_creation_time_isSet;
}

bool OAISharedItem::is_creation_time_Valid() const{
    return m_creation_time_isValid;
}

QString OAISharedItem::getCreatorId() const {
    return m_creator_id;
}
void OAISharedItem::setCreatorId(const QString &creator_id) {
    m_creator_id = creator_id;
    m_creator_id_isSet = true;
}

bool OAISharedItem::is_creator_id_Set() const{
    return m_creator_id_isSet;
}

bool OAISharedItem::is_creator_id_Valid() const{
    return m_creator_id_isValid;
}

QString OAISharedItem::getItemId() const {
    return m_item_id;
}
void OAISharedItem::setItemId(const QString &item_id) {
    m_item_id = item_id;
    m_item_id_isSet = true;
}

bool OAISharedItem::is_item_id_Set() const{
    return m_item_id_isSet;
}

bool OAISharedItem::is_item_id_Valid() const{
    return m_item_id_isValid;
}

QString OAISharedItem::getParentTopicId() const {
    return m_parent_topic_id;
}
void OAISharedItem::setParentTopicId(const QString &parent_topic_id) {
    m_parent_topic_id = parent_topic_id;
    m_parent_topic_id_isSet = true;
}

bool OAISharedItem::is_parent_topic_id_Set() const{
    return m_parent_topic_id_isSet;
}

bool OAISharedItem::is_parent_topic_id_Valid() const{
    return m_parent_topic_id_isValid;
}

QString OAISharedItem::getSubType() const {
    return m_sub_type;
}
void OAISharedItem::setSubType(const QString &sub_type) {
    m_sub_type = sub_type;
    m_sub_type_isSet = true;
}

bool OAISharedItem::is_sub_type_Set() const{
    return m_sub_type_isSet;
}

bool OAISharedItem::is_sub_type_Valid() const{
    return m_sub_type_isValid;
}

bool OAISharedItem::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_container_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_container_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_container_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creator_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_item_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent_topic_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sub_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISharedItem::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
