/**
 * REST API Version 2
 * Circuit REST API to interact with the Circuit system.  [Learn more about the Circuit Development Community](https://www.circuit.com/web/developers/home)
 *
 * The version of the OpenAPI document: 2.9.235
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIParticipantSearchResult.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIParticipantSearchResult::OAIParticipantSearchResult(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIParticipantSearchResult::OAIParticipantSearchResult() {
    this->initializeModel();
}

OAIParticipantSearchResult::~OAIParticipantSearchResult() {}

void OAIParticipantSearchResult::initializeModel() {

    m_creation_time_isSet = false;
    m_creation_time_isValid = false;

    m_first_name_isSet = false;
    m_first_name_isValid = false;

    m_last_name_isSet = false;
    m_last_name_isValid = false;

    m_modification_time_isSet = false;
    m_modification_time_isValid = false;

    m_number_of_replies_isSet = false;
    m_number_of_replies_isValid = false;

    m_number_of_topics_isSet = false;
    m_number_of_topics_isValid = false;

    m_role_isSet = false;
    m_role_isValid = false;

    m_small_image_uri_isSet = false;
    m_small_image_uri_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_tenant_id_isSet = false;
    m_tenant_id_isValid = false;

    m_user_id_isSet = false;
    m_user_id_isValid = false;
}

void OAIParticipantSearchResult::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIParticipantSearchResult::fromJsonObject(QJsonObject json) {

    m_creation_time_isValid = ::OpenAPI::fromJsonValue(m_creation_time, json[QString("creationTime")]);
    m_creation_time_isSet = !json[QString("creationTime")].isNull() && m_creation_time_isValid;

    m_first_name_isValid = ::OpenAPI::fromJsonValue(m_first_name, json[QString("firstName")]);
    m_first_name_isSet = !json[QString("firstName")].isNull() && m_first_name_isValid;

    m_last_name_isValid = ::OpenAPI::fromJsonValue(m_last_name, json[QString("lastName")]);
    m_last_name_isSet = !json[QString("lastName")].isNull() && m_last_name_isValid;

    m_modification_time_isValid = ::OpenAPI::fromJsonValue(m_modification_time, json[QString("modificationTime")]);
    m_modification_time_isSet = !json[QString("modificationTime")].isNull() && m_modification_time_isValid;

    m_number_of_replies_isValid = ::OpenAPI::fromJsonValue(m_number_of_replies, json[QString("numberOfReplies")]);
    m_number_of_replies_isSet = !json[QString("numberOfReplies")].isNull() && m_number_of_replies_isValid;

    m_number_of_topics_isValid = ::OpenAPI::fromJsonValue(m_number_of_topics, json[QString("numberOfTopics")]);
    m_number_of_topics_isSet = !json[QString("numberOfTopics")].isNull() && m_number_of_topics_isValid;

    m_role_isValid = ::OpenAPI::fromJsonValue(m_role, json[QString("role")]);
    m_role_isSet = !json[QString("role")].isNull() && m_role_isValid;

    m_small_image_uri_isValid = ::OpenAPI::fromJsonValue(m_small_image_uri, json[QString("smallImageUri")]);
    m_small_image_uri_isSet = !json[QString("smallImageUri")].isNull() && m_small_image_uri_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_tenant_id_isValid = ::OpenAPI::fromJsonValue(m_tenant_id, json[QString("tenantId")]);
    m_tenant_id_isSet = !json[QString("tenantId")].isNull() && m_tenant_id_isValid;

    m_user_id_isValid = ::OpenAPI::fromJsonValue(m_user_id, json[QString("userId")]);
    m_user_id_isSet = !json[QString("userId")].isNull() && m_user_id_isValid;
}

QString OAIParticipantSearchResult::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIParticipantSearchResult::asJsonObject() const {
    QJsonObject obj;
    if (m_creation_time_isSet) {
        obj.insert(QString("creationTime"), ::OpenAPI::toJsonValue(m_creation_time));
    }
    if (m_first_name_isSet) {
        obj.insert(QString("firstName"), ::OpenAPI::toJsonValue(m_first_name));
    }
    if (m_last_name_isSet) {
        obj.insert(QString("lastName"), ::OpenAPI::toJsonValue(m_last_name));
    }
    if (m_modification_time_isSet) {
        obj.insert(QString("modificationTime"), ::OpenAPI::toJsonValue(m_modification_time));
    }
    if (m_number_of_replies_isSet) {
        obj.insert(QString("numberOfReplies"), ::OpenAPI::toJsonValue(m_number_of_replies));
    }
    if (m_number_of_topics_isSet) {
        obj.insert(QString("numberOfTopics"), ::OpenAPI::toJsonValue(m_number_of_topics));
    }
    if (m_role_isSet) {
        obj.insert(QString("role"), ::OpenAPI::toJsonValue(m_role));
    }
    if (m_small_image_uri_isSet) {
        obj.insert(QString("smallImageUri"), ::OpenAPI::toJsonValue(m_small_image_uri));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_tenant_id_isSet) {
        obj.insert(QString("tenantId"), ::OpenAPI::toJsonValue(m_tenant_id));
    }
    if (m_user_id_isSet) {
        obj.insert(QString("userId"), ::OpenAPI::toJsonValue(m_user_id));
    }
    return obj;
}

double OAIParticipantSearchResult::getCreationTime() const {
    return m_creation_time;
}
void OAIParticipantSearchResult::setCreationTime(const double &creation_time) {
    m_creation_time = creation_time;
    m_creation_time_isSet = true;
}

bool OAIParticipantSearchResult::is_creation_time_Set() const{
    return m_creation_time_isSet;
}

bool OAIParticipantSearchResult::is_creation_time_Valid() const{
    return m_creation_time_isValid;
}

QString OAIParticipantSearchResult::getFirstName() const {
    return m_first_name;
}
void OAIParticipantSearchResult::setFirstName(const QString &first_name) {
    m_first_name = first_name;
    m_first_name_isSet = true;
}

bool OAIParticipantSearchResult::is_first_name_Set() const{
    return m_first_name_isSet;
}

bool OAIParticipantSearchResult::is_first_name_Valid() const{
    return m_first_name_isValid;
}

QString OAIParticipantSearchResult::getLastName() const {
    return m_last_name;
}
void OAIParticipantSearchResult::setLastName(const QString &last_name) {
    m_last_name = last_name;
    m_last_name_isSet = true;
}

bool OAIParticipantSearchResult::is_last_name_Set() const{
    return m_last_name_isSet;
}

bool OAIParticipantSearchResult::is_last_name_Valid() const{
    return m_last_name_isValid;
}

double OAIParticipantSearchResult::getModificationTime() const {
    return m_modification_time;
}
void OAIParticipantSearchResult::setModificationTime(const double &modification_time) {
    m_modification_time = modification_time;
    m_modification_time_isSet = true;
}

bool OAIParticipantSearchResult::is_modification_time_Set() const{
    return m_modification_time_isSet;
}

bool OAIParticipantSearchResult::is_modification_time_Valid() const{
    return m_modification_time_isValid;
}

double OAIParticipantSearchResult::getNumberOfReplies() const {
    return m_number_of_replies;
}
void OAIParticipantSearchResult::setNumberOfReplies(const double &number_of_replies) {
    m_number_of_replies = number_of_replies;
    m_number_of_replies_isSet = true;
}

bool OAIParticipantSearchResult::is_number_of_replies_Set() const{
    return m_number_of_replies_isSet;
}

bool OAIParticipantSearchResult::is_number_of_replies_Valid() const{
    return m_number_of_replies_isValid;
}

double OAIParticipantSearchResult::getNumberOfTopics() const {
    return m_number_of_topics;
}
void OAIParticipantSearchResult::setNumberOfTopics(const double &number_of_topics) {
    m_number_of_topics = number_of_topics;
    m_number_of_topics_isSet = true;
}

bool OAIParticipantSearchResult::is_number_of_topics_Set() const{
    return m_number_of_topics_isSet;
}

bool OAIParticipantSearchResult::is_number_of_topics_Valid() const{
    return m_number_of_topics_isValid;
}

QString OAIParticipantSearchResult::getRole() const {
    return m_role;
}
void OAIParticipantSearchResult::setRole(const QString &role) {
    m_role = role;
    m_role_isSet = true;
}

bool OAIParticipantSearchResult::is_role_Set() const{
    return m_role_isSet;
}

bool OAIParticipantSearchResult::is_role_Valid() const{
    return m_role_isValid;
}

QString OAIParticipantSearchResult::getSmallImageUri() const {
    return m_small_image_uri;
}
void OAIParticipantSearchResult::setSmallImageUri(const QString &small_image_uri) {
    m_small_image_uri = small_image_uri;
    m_small_image_uri_isSet = true;
}

bool OAIParticipantSearchResult::is_small_image_uri_Set() const{
    return m_small_image_uri_isSet;
}

bool OAIParticipantSearchResult::is_small_image_uri_Valid() const{
    return m_small_image_uri_isValid;
}

QString OAIParticipantSearchResult::getState() const {
    return m_state;
}
void OAIParticipantSearchResult::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIParticipantSearchResult::is_state_Set() const{
    return m_state_isSet;
}

bool OAIParticipantSearchResult::is_state_Valid() const{
    return m_state_isValid;
}

QString OAIParticipantSearchResult::getTenantId() const {
    return m_tenant_id;
}
void OAIParticipantSearchResult::setTenantId(const QString &tenant_id) {
    m_tenant_id = tenant_id;
    m_tenant_id_isSet = true;
}

bool OAIParticipantSearchResult::is_tenant_id_Set() const{
    return m_tenant_id_isSet;
}

bool OAIParticipantSearchResult::is_tenant_id_Valid() const{
    return m_tenant_id_isValid;
}

QString OAIParticipantSearchResult::getUserId() const {
    return m_user_id;
}
void OAIParticipantSearchResult::setUserId(const QString &user_id) {
    m_user_id = user_id;
    m_user_id_isSet = true;
}

bool OAIParticipantSearchResult::is_user_id_Set() const{
    return m_user_id_isSet;
}

bool OAIParticipantSearchResult::is_user_id_Valid() const{
    return m_user_id_isValid;
}

bool OAIParticipantSearchResult::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_creation_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_first_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_modification_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_of_replies_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_of_topics_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_role_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_small_image_uri_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tenant_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIParticipantSearchResult::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
