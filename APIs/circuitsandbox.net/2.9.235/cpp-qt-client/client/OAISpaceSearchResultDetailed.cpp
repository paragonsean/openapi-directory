/**
 * REST API Version 2
 * Circuit REST API to interact with the Circuit system.  [Learn more about the Circuit Development Community](https://www.circuit.com/web/developers/home)
 *
 * The version of the OpenAPI document: 2.9.235
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISpaceSearchResultDetailed.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISpaceSearchResultDetailed::OAISpaceSearchResultDetailed(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISpaceSearchResultDetailed::OAISpaceSearchResultDetailed() {
    this->initializeModel();
}

OAISpaceSearchResultDetailed::~OAISpaceSearchResultDetailed() {}

void OAISpaceSearchResultDetailed::initializeModel() {

    m_file_ids_isSet = false;
    m_file_ids_isValid = false;

    m_item_ids_isSet = false;
    m_item_ids_isValid = false;

    m_space_id_isSet = false;
    m_space_id_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAISpaceSearchResultDetailed::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISpaceSearchResultDetailed::fromJsonObject(QJsonObject json) {

    m_file_ids_isValid = ::OpenAPI::fromJsonValue(m_file_ids, json[QString("fileIds")]);
    m_file_ids_isSet = !json[QString("fileIds")].isNull() && m_file_ids_isValid;

    m_item_ids_isValid = ::OpenAPI::fromJsonValue(m_item_ids, json[QString("itemIds")]);
    m_item_ids_isSet = !json[QString("itemIds")].isNull() && m_item_ids_isValid;

    m_space_id_isValid = ::OpenAPI::fromJsonValue(m_space_id, json[QString("spaceId")]);
    m_space_id_isSet = !json[QString("spaceId")].isNull() && m_space_id_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAISpaceSearchResultDetailed::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISpaceSearchResultDetailed::asJsonObject() const {
    QJsonObject obj;
    if (m_file_ids.size() > 0) {
        obj.insert(QString("fileIds"), ::OpenAPI::toJsonValue(m_file_ids));
    }
    if (m_item_ids.size() > 0) {
        obj.insert(QString("itemIds"), ::OpenAPI::toJsonValue(m_item_ids));
    }
    if (m_space_id_isSet) {
        obj.insert(QString("spaceId"), ::OpenAPI::toJsonValue(m_space_id));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

QList<QString> OAISpaceSearchResultDetailed::getFileIds() const {
    return m_file_ids;
}
void OAISpaceSearchResultDetailed::setFileIds(const QList<QString> &file_ids) {
    m_file_ids = file_ids;
    m_file_ids_isSet = true;
}

bool OAISpaceSearchResultDetailed::is_file_ids_Set() const{
    return m_file_ids_isSet;
}

bool OAISpaceSearchResultDetailed::is_file_ids_Valid() const{
    return m_file_ids_isValid;
}

QList<QString> OAISpaceSearchResultDetailed::getItemIds() const {
    return m_item_ids;
}
void OAISpaceSearchResultDetailed::setItemIds(const QList<QString> &item_ids) {
    m_item_ids = item_ids;
    m_item_ids_isSet = true;
}

bool OAISpaceSearchResultDetailed::is_item_ids_Set() const{
    return m_item_ids_isSet;
}

bool OAISpaceSearchResultDetailed::is_item_ids_Valid() const{
    return m_item_ids_isValid;
}

QString OAISpaceSearchResultDetailed::getSpaceId() const {
    return m_space_id;
}
void OAISpaceSearchResultDetailed::setSpaceId(const QString &space_id) {
    m_space_id = space_id;
    m_space_id_isSet = true;
}

bool OAISpaceSearchResultDetailed::is_space_id_Set() const{
    return m_space_id_isSet;
}

bool OAISpaceSearchResultDetailed::is_space_id_Valid() const{
    return m_space_id_isValid;
}

QString OAISpaceSearchResultDetailed::getStatus() const {
    return m_status;
}
void OAISpaceSearchResultDetailed::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAISpaceSearchResultDetailed::is_status_Set() const{
    return m_status_isSet;
}

bool OAISpaceSearchResultDetailed::is_status_Valid() const{
    return m_status_isValid;
}

bool OAISpaceSearchResultDetailed::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_file_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_item_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_space_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISpaceSearchResultDetailed::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
