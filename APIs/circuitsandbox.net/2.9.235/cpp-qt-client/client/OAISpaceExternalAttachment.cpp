/**
 * REST API Version 2
 * Circuit REST API to interact with the Circuit system.  [Learn more about the Circuit Development Community](https://www.circuit.com/web/developers/home)
 *
 * The version of the OpenAPI document: 2.9.235
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISpaceExternalAttachment.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISpaceExternalAttachment::OAISpaceExternalAttachment(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISpaceExternalAttachment::OAISpaceExternalAttachment() {
    this->initializeModel();
}

OAISpaceExternalAttachment::~OAISpaceExternalAttachment() {}

void OAISpaceExternalAttachment::initializeModel() {

    m_attachment_isSet = false;
    m_attachment_isValid = false;

    m_download_location_isSet = false;
    m_download_location_isValid = false;

    m_preview_location_isSet = false;
    m_preview_location_isValid = false;

    m_share_link_token_isSet = false;
    m_share_link_token_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAISpaceExternalAttachment::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISpaceExternalAttachment::fromJsonObject(QJsonObject json) {

    m_attachment_isValid = ::OpenAPI::fromJsonValue(m_attachment, json[QString("attachment")]);
    m_attachment_isSet = !json[QString("attachment")].isNull() && m_attachment_isValid;

    m_download_location_isValid = ::OpenAPI::fromJsonValue(m_download_location, json[QString("downloadLocation")]);
    m_download_location_isSet = !json[QString("downloadLocation")].isNull() && m_download_location_isValid;

    m_preview_location_isValid = ::OpenAPI::fromJsonValue(m_preview_location, json[QString("previewLocation")]);
    m_preview_location_isSet = !json[QString("previewLocation")].isNull() && m_preview_location_isValid;

    m_share_link_token_isValid = ::OpenAPI::fromJsonValue(m_share_link_token, json[QString("shareLinkToken")]);
    m_share_link_token_isSet = !json[QString("shareLinkToken")].isNull() && m_share_link_token_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAISpaceExternalAttachment::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISpaceExternalAttachment::asJsonObject() const {
    QJsonObject obj;
    if (m_attachment.isSet()) {
        obj.insert(QString("attachment"), ::OpenAPI::toJsonValue(m_attachment));
    }
    if (m_download_location_isSet) {
        obj.insert(QString("downloadLocation"), ::OpenAPI::toJsonValue(m_download_location));
    }
    if (m_preview_location_isSet) {
        obj.insert(QString("previewLocation"), ::OpenAPI::toJsonValue(m_preview_location));
    }
    if (m_share_link_token_isSet) {
        obj.insert(QString("shareLinkToken"), ::OpenAPI::toJsonValue(m_share_link_token));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

OAISpaceAttachment OAISpaceExternalAttachment::getAttachment() const {
    return m_attachment;
}
void OAISpaceExternalAttachment::setAttachment(const OAISpaceAttachment &attachment) {
    m_attachment = attachment;
    m_attachment_isSet = true;
}

bool OAISpaceExternalAttachment::is_attachment_Set() const{
    return m_attachment_isSet;
}

bool OAISpaceExternalAttachment::is_attachment_Valid() const{
    return m_attachment_isValid;
}

QString OAISpaceExternalAttachment::getDownloadLocation() const {
    return m_download_location;
}
void OAISpaceExternalAttachment::setDownloadLocation(const QString &download_location) {
    m_download_location = download_location;
    m_download_location_isSet = true;
}

bool OAISpaceExternalAttachment::is_download_location_Set() const{
    return m_download_location_isSet;
}

bool OAISpaceExternalAttachment::is_download_location_Valid() const{
    return m_download_location_isValid;
}

QString OAISpaceExternalAttachment::getPreviewLocation() const {
    return m_preview_location;
}
void OAISpaceExternalAttachment::setPreviewLocation(const QString &preview_location) {
    m_preview_location = preview_location;
    m_preview_location_isSet = true;
}

bool OAISpaceExternalAttachment::is_preview_location_Set() const{
    return m_preview_location_isSet;
}

bool OAISpaceExternalAttachment::is_preview_location_Valid() const{
    return m_preview_location_isValid;
}

QString OAISpaceExternalAttachment::getShareLinkToken() const {
    return m_share_link_token;
}
void OAISpaceExternalAttachment::setShareLinkToken(const QString &share_link_token) {
    m_share_link_token = share_link_token;
    m_share_link_token_isSet = true;
}

bool OAISpaceExternalAttachment::is_share_link_token_Set() const{
    return m_share_link_token_isSet;
}

bool OAISpaceExternalAttachment::is_share_link_token_Valid() const{
    return m_share_link_token_isValid;
}

QString OAISpaceExternalAttachment::getType() const {
    return m_type;
}
void OAISpaceExternalAttachment::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAISpaceExternalAttachment::is_type_Set() const{
    return m_type_isSet;
}

bool OAISpaceExternalAttachment::is_type_Valid() const{
    return m_type_isValid;
}

bool OAISpaceExternalAttachment::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_attachment.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_download_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_preview_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_share_link_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISpaceExternalAttachment::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
