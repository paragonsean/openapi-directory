/**
 * REST API Version 2
 * Circuit REST API to interact with the Circuit system.  [Learn more about the Circuit Development Community](https://www.circuit.com/web/developers/home)
 *
 * The version of the OpenAPI document: 2.9.235
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPresence.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPresence::OAIPresence(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPresence::OAIPresence() {
    this->initializeModel();
}

OAIPresence::~OAIPresence() {}

void OAIPresence::initializeModel() {

    m_dnd_until_isSet = false;
    m_dnd_until_isValid = false;

    m_is_opted_out_isSet = false;
    m_is_opted_out_isValid = false;

    m_latitude_isSet = false;
    m_latitude_isValid = false;

    m_location_text_isSet = false;
    m_location_text_isValid = false;

    m_longitude_isSet = false;
    m_longitude_isValid = false;

    m_mobile_isSet = false;
    m_mobile_isValid = false;

    m_poor_isSet = false;
    m_poor_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_status_message_isSet = false;
    m_status_message_isValid = false;

    m_time_zone_offset_isSet = false;
    m_time_zone_offset_isValid = false;

    m_user_id_isSet = false;
    m_user_id_isValid = false;
}

void OAIPresence::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPresence::fromJsonObject(QJsonObject json) {

    m_dnd_until_isValid = ::OpenAPI::fromJsonValue(m_dnd_until, json[QString("dndUntil")]);
    m_dnd_until_isSet = !json[QString("dndUntil")].isNull() && m_dnd_until_isValid;

    m_is_opted_out_isValid = ::OpenAPI::fromJsonValue(m_is_opted_out, json[QString("isOptedOut")]);
    m_is_opted_out_isSet = !json[QString("isOptedOut")].isNull() && m_is_opted_out_isValid;

    m_latitude_isValid = ::OpenAPI::fromJsonValue(m_latitude, json[QString("latitude")]);
    m_latitude_isSet = !json[QString("latitude")].isNull() && m_latitude_isValid;

    m_location_text_isValid = ::OpenAPI::fromJsonValue(m_location_text, json[QString("locationText")]);
    m_location_text_isSet = !json[QString("locationText")].isNull() && m_location_text_isValid;

    m_longitude_isValid = ::OpenAPI::fromJsonValue(m_longitude, json[QString("longitude")]);
    m_longitude_isSet = !json[QString("longitude")].isNull() && m_longitude_isValid;

    m_mobile_isValid = ::OpenAPI::fromJsonValue(m_mobile, json[QString("mobile")]);
    m_mobile_isSet = !json[QString("mobile")].isNull() && m_mobile_isValid;

    m_poor_isValid = ::OpenAPI::fromJsonValue(m_poor, json[QString("poor")]);
    m_poor_isSet = !json[QString("poor")].isNull() && m_poor_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_status_message_isValid = ::OpenAPI::fromJsonValue(m_status_message, json[QString("statusMessage")]);
    m_status_message_isSet = !json[QString("statusMessage")].isNull() && m_status_message_isValid;

    m_time_zone_offset_isValid = ::OpenAPI::fromJsonValue(m_time_zone_offset, json[QString("timeZoneOffset")]);
    m_time_zone_offset_isSet = !json[QString("timeZoneOffset")].isNull() && m_time_zone_offset_isValid;

    m_user_id_isValid = ::OpenAPI::fromJsonValue(m_user_id, json[QString("userId")]);
    m_user_id_isSet = !json[QString("userId")].isNull() && m_user_id_isValid;
}

QString OAIPresence::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPresence::asJsonObject() const {
    QJsonObject obj;
    if (m_dnd_until_isSet) {
        obj.insert(QString("dndUntil"), ::OpenAPI::toJsonValue(m_dnd_until));
    }
    if (m_is_opted_out_isSet) {
        obj.insert(QString("isOptedOut"), ::OpenAPI::toJsonValue(m_is_opted_out));
    }
    if (m_latitude_isSet) {
        obj.insert(QString("latitude"), ::OpenAPI::toJsonValue(m_latitude));
    }
    if (m_location_text_isSet) {
        obj.insert(QString("locationText"), ::OpenAPI::toJsonValue(m_location_text));
    }
    if (m_longitude_isSet) {
        obj.insert(QString("longitude"), ::OpenAPI::toJsonValue(m_longitude));
    }
    if (m_mobile_isSet) {
        obj.insert(QString("mobile"), ::OpenAPI::toJsonValue(m_mobile));
    }
    if (m_poor_isSet) {
        obj.insert(QString("poor"), ::OpenAPI::toJsonValue(m_poor));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_status_message_isSet) {
        obj.insert(QString("statusMessage"), ::OpenAPI::toJsonValue(m_status_message));
    }
    if (m_time_zone_offset_isSet) {
        obj.insert(QString("timeZoneOffset"), ::OpenAPI::toJsonValue(m_time_zone_offset));
    }
    if (m_user_id_isSet) {
        obj.insert(QString("userId"), ::OpenAPI::toJsonValue(m_user_id));
    }
    return obj;
}

double OAIPresence::getDndUntil() const {
    return m_dnd_until;
}
void OAIPresence::setDndUntil(const double &dnd_until) {
    m_dnd_until = dnd_until;
    m_dnd_until_isSet = true;
}

bool OAIPresence::is_dnd_until_Set() const{
    return m_dnd_until_isSet;
}

bool OAIPresence::is_dnd_until_Valid() const{
    return m_dnd_until_isValid;
}

bool OAIPresence::isIsOptedOut() const {
    return m_is_opted_out;
}
void OAIPresence::setIsOptedOut(const bool &is_opted_out) {
    m_is_opted_out = is_opted_out;
    m_is_opted_out_isSet = true;
}

bool OAIPresence::is_is_opted_out_Set() const{
    return m_is_opted_out_isSet;
}

bool OAIPresence::is_is_opted_out_Valid() const{
    return m_is_opted_out_isValid;
}

float OAIPresence::getLatitude() const {
    return m_latitude;
}
void OAIPresence::setLatitude(const float &latitude) {
    m_latitude = latitude;
    m_latitude_isSet = true;
}

bool OAIPresence::is_latitude_Set() const{
    return m_latitude_isSet;
}

bool OAIPresence::is_latitude_Valid() const{
    return m_latitude_isValid;
}

QString OAIPresence::getLocationText() const {
    return m_location_text;
}
void OAIPresence::setLocationText(const QString &location_text) {
    m_location_text = location_text;
    m_location_text_isSet = true;
}

bool OAIPresence::is_location_text_Set() const{
    return m_location_text_isSet;
}

bool OAIPresence::is_location_text_Valid() const{
    return m_location_text_isValid;
}

float OAIPresence::getLongitude() const {
    return m_longitude;
}
void OAIPresence::setLongitude(const float &longitude) {
    m_longitude = longitude;
    m_longitude_isSet = true;
}

bool OAIPresence::is_longitude_Set() const{
    return m_longitude_isSet;
}

bool OAIPresence::is_longitude_Valid() const{
    return m_longitude_isValid;
}

bool OAIPresence::isMobile() const {
    return m_mobile;
}
void OAIPresence::setMobile(const bool &mobile) {
    m_mobile = mobile;
    m_mobile_isSet = true;
}

bool OAIPresence::is_mobile_Set() const{
    return m_mobile_isSet;
}

bool OAIPresence::is_mobile_Valid() const{
    return m_mobile_isValid;
}

bool OAIPresence::isPoor() const {
    return m_poor;
}
void OAIPresence::setPoor(const bool &poor) {
    m_poor = poor;
    m_poor_isSet = true;
}

bool OAIPresence::is_poor_Set() const{
    return m_poor_isSet;
}

bool OAIPresence::is_poor_Valid() const{
    return m_poor_isValid;
}

QString OAIPresence::getState() const {
    return m_state;
}
void OAIPresence::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIPresence::is_state_Set() const{
    return m_state_isSet;
}

bool OAIPresence::is_state_Valid() const{
    return m_state_isValid;
}

QString OAIPresence::getStatusMessage() const {
    return m_status_message;
}
void OAIPresence::setStatusMessage(const QString &status_message) {
    m_status_message = status_message;
    m_status_message_isSet = true;
}

bool OAIPresence::is_status_message_Set() const{
    return m_status_message_isSet;
}

bool OAIPresence::is_status_message_Valid() const{
    return m_status_message_isValid;
}

double OAIPresence::getTimeZoneOffset() const {
    return m_time_zone_offset;
}
void OAIPresence::setTimeZoneOffset(const double &time_zone_offset) {
    m_time_zone_offset = time_zone_offset;
    m_time_zone_offset_isSet = true;
}

bool OAIPresence::is_time_zone_offset_Set() const{
    return m_time_zone_offset_isSet;
}

bool OAIPresence::is_time_zone_offset_Valid() const{
    return m_time_zone_offset_isValid;
}

QString OAIPresence::getUserId() const {
    return m_user_id;
}
void OAIPresence::setUserId(const QString &user_id) {
    m_user_id = user_id;
    m_user_id_isSet = true;
}

bool OAIPresence::is_user_id_Set() const{
    return m_user_id_isSet;
}

bool OAIPresence::is_user_id_Valid() const{
    return m_user_id_isValid;
}

bool OAIPresence::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_dnd_until_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_opted_out_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_latitude_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_longitude_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mobile_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_poor_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_zone_offset_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPresence::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
