/**
 * REST API Version 2
 * Circuit REST API to interact with the Circuit system.  [Learn more about the Circuit Development Community](https://www.circuit.com/web/developers/home)
 *
 * The version of the OpenAPI document: 2.9.235
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRtcEnded.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRtcEnded::OAIRtcEnded(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRtcEnded::OAIRtcEnded() {
    this->initializeModel();
}

OAIRtcEnded::~OAIRtcEnded() {}

void OAIRtcEnded::initializeModel() {

    m_duration_isSet = false;
    m_duration_isValid = false;

    m_max_number_of_attendees_isSet = false;
    m_max_number_of_attendees_isValid = false;

    m_pick_from_participant_isSet = false;
    m_pick_from_participant_isValid = false;
}

void OAIRtcEnded::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRtcEnded::fromJsonObject(QJsonObject json) {

    m_duration_isValid = ::OpenAPI::fromJsonValue(m_duration, json[QString("duration")]);
    m_duration_isSet = !json[QString("duration")].isNull() && m_duration_isValid;

    m_max_number_of_attendees_isValid = ::OpenAPI::fromJsonValue(m_max_number_of_attendees, json[QString("maxNumberOfAttendees")]);
    m_max_number_of_attendees_isSet = !json[QString("maxNumberOfAttendees")].isNull() && m_max_number_of_attendees_isValid;

    m_pick_from_participant_isValid = ::OpenAPI::fromJsonValue(m_pick_from_participant, json[QString("pickFromParticipant")]);
    m_pick_from_participant_isSet = !json[QString("pickFromParticipant")].isNull() && m_pick_from_participant_isValid;
}

QString OAIRtcEnded::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRtcEnded::asJsonObject() const {
    QJsonObject obj;
    if (m_duration_isSet) {
        obj.insert(QString("duration"), ::OpenAPI::toJsonValue(m_duration));
    }
    if (m_max_number_of_attendees_isSet) {
        obj.insert(QString("maxNumberOfAttendees"), ::OpenAPI::toJsonValue(m_max_number_of_attendees));
    }
    if (m_pick_from_participant_isSet) {
        obj.insert(QString("pickFromParticipant"), ::OpenAPI::toJsonValue(m_pick_from_participant));
    }
    return obj;
}

double OAIRtcEnded::getDuration() const {
    return m_duration;
}
void OAIRtcEnded::setDuration(const double &duration) {
    m_duration = duration;
    m_duration_isSet = true;
}

bool OAIRtcEnded::is_duration_Set() const{
    return m_duration_isSet;
}

bool OAIRtcEnded::is_duration_Valid() const{
    return m_duration_isValid;
}

double OAIRtcEnded::getMaxNumberOfAttendees() const {
    return m_max_number_of_attendees;
}
void OAIRtcEnded::setMaxNumberOfAttendees(const double &max_number_of_attendees) {
    m_max_number_of_attendees = max_number_of_attendees;
    m_max_number_of_attendees_isSet = true;
}

bool OAIRtcEnded::is_max_number_of_attendees_Set() const{
    return m_max_number_of_attendees_isSet;
}

bool OAIRtcEnded::is_max_number_of_attendees_Valid() const{
    return m_max_number_of_attendees_isValid;
}

QString OAIRtcEnded::getPickFromParticipant() const {
    return m_pick_from_participant;
}
void OAIRtcEnded::setPickFromParticipant(const QString &pick_from_participant) {
    m_pick_from_participant = pick_from_participant;
    m_pick_from_participant_isSet = true;
}

bool OAIRtcEnded::is_pick_from_participant_Set() const{
    return m_pick_from_participant_isSet;
}

bool OAIRtcEnded::is_pick_from_participant_Valid() const{
    return m_pick_from_participant_isValid;
}

bool OAIRtcEnded::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_number_of_attendees_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pick_from_participant_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRtcEnded::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
