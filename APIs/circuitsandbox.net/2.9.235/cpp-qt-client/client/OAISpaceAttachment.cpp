/**
 * REST API Version 2
 * Circuit REST API to interact with the Circuit system.  [Learn more about the Circuit Development Community](https://www.circuit.com/web/developers/home)
 *
 * The version of the OpenAPI document: 2.9.235
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISpaceAttachment.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISpaceAttachment::OAISpaceAttachment(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISpaceAttachment::OAISpaceAttachment() {
    this->initializeModel();
}

OAISpaceAttachment::~OAISpaceAttachment() {}

void OAISpaceAttachment::initializeModel() {

    m_creation_time_isSet = false;
    m_creation_time_isValid = false;

    m_creator_id_isSet = false;
    m_creator_id_isValid = false;

    m_file_id_isSet = false;
    m_file_id_isValid = false;

    m_file_name_isSet = false;
    m_file_name_isValid = false;

    m_inline_usage_isSet = false;
    m_inline_usage_isValid = false;

    m_item_id_isSet = false;
    m_item_id_isValid = false;

    m_layout_isSet = false;
    m_layout_isValid = false;

    m_mime_type_isSet = false;
    m_mime_type_isValid = false;

    m_modification_time_isSet = false;
    m_modification_time_isValid = false;

    m_size_isSet = false;
    m_size_isValid = false;

    m_space_id_isSet = false;
    m_space_id_isValid = false;

    m_thumbnail_id_isSet = false;
    m_thumbnail_id_isValid = false;
}

void OAISpaceAttachment::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISpaceAttachment::fromJsonObject(QJsonObject json) {

    m_creation_time_isValid = ::OpenAPI::fromJsonValue(m_creation_time, json[QString("creationTime")]);
    m_creation_time_isSet = !json[QString("creationTime")].isNull() && m_creation_time_isValid;

    m_creator_id_isValid = ::OpenAPI::fromJsonValue(m_creator_id, json[QString("creatorId")]);
    m_creator_id_isSet = !json[QString("creatorId")].isNull() && m_creator_id_isValid;

    m_file_id_isValid = ::OpenAPI::fromJsonValue(m_file_id, json[QString("fileId")]);
    m_file_id_isSet = !json[QString("fileId")].isNull() && m_file_id_isValid;

    m_file_name_isValid = ::OpenAPI::fromJsonValue(m_file_name, json[QString("fileName")]);
    m_file_name_isSet = !json[QString("fileName")].isNull() && m_file_name_isValid;

    m_inline_usage_isValid = ::OpenAPI::fromJsonValue(m_inline_usage, json[QString("inlineUsage")]);
    m_inline_usage_isSet = !json[QString("inlineUsage")].isNull() && m_inline_usage_isValid;

    m_item_id_isValid = ::OpenAPI::fromJsonValue(m_item_id, json[QString("itemId")]);
    m_item_id_isSet = !json[QString("itemId")].isNull() && m_item_id_isValid;

    m_layout_isValid = ::OpenAPI::fromJsonValue(m_layout, json[QString("layout")]);
    m_layout_isSet = !json[QString("layout")].isNull() && m_layout_isValid;

    m_mime_type_isValid = ::OpenAPI::fromJsonValue(m_mime_type, json[QString("mimeType")]);
    m_mime_type_isSet = !json[QString("mimeType")].isNull() && m_mime_type_isValid;

    m_modification_time_isValid = ::OpenAPI::fromJsonValue(m_modification_time, json[QString("modificationTime")]);
    m_modification_time_isSet = !json[QString("modificationTime")].isNull() && m_modification_time_isValid;

    m_size_isValid = ::OpenAPI::fromJsonValue(m_size, json[QString("size")]);
    m_size_isSet = !json[QString("size")].isNull() && m_size_isValid;

    m_space_id_isValid = ::OpenAPI::fromJsonValue(m_space_id, json[QString("spaceId")]);
    m_space_id_isSet = !json[QString("spaceId")].isNull() && m_space_id_isValid;

    m_thumbnail_id_isValid = ::OpenAPI::fromJsonValue(m_thumbnail_id, json[QString("thumbnailId")]);
    m_thumbnail_id_isSet = !json[QString("thumbnailId")].isNull() && m_thumbnail_id_isValid;
}

QString OAISpaceAttachment::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISpaceAttachment::asJsonObject() const {
    QJsonObject obj;
    if (m_creation_time_isSet) {
        obj.insert(QString("creationTime"), ::OpenAPI::toJsonValue(m_creation_time));
    }
    if (m_creator_id_isSet) {
        obj.insert(QString("creatorId"), ::OpenAPI::toJsonValue(m_creator_id));
    }
    if (m_file_id_isSet) {
        obj.insert(QString("fileId"), ::OpenAPI::toJsonValue(m_file_id));
    }
    if (m_file_name_isSet) {
        obj.insert(QString("fileName"), ::OpenAPI::toJsonValue(m_file_name));
    }
    if (m_inline_usage_isSet) {
        obj.insert(QString("inlineUsage"), ::OpenAPI::toJsonValue(m_inline_usage));
    }
    if (m_item_id_isSet) {
        obj.insert(QString("itemId"), ::OpenAPI::toJsonValue(m_item_id));
    }
    if (m_layout_isSet) {
        obj.insert(QString("layout"), ::OpenAPI::toJsonValue(m_layout));
    }
    if (m_mime_type_isSet) {
        obj.insert(QString("mimeType"), ::OpenAPI::toJsonValue(m_mime_type));
    }
    if (m_modification_time_isSet) {
        obj.insert(QString("modificationTime"), ::OpenAPI::toJsonValue(m_modification_time));
    }
    if (m_size_isSet) {
        obj.insert(QString("size"), ::OpenAPI::toJsonValue(m_size));
    }
    if (m_space_id_isSet) {
        obj.insert(QString("spaceId"), ::OpenAPI::toJsonValue(m_space_id));
    }
    if (m_thumbnail_id_isSet) {
        obj.insert(QString("thumbnailId"), ::OpenAPI::toJsonValue(m_thumbnail_id));
    }
    return obj;
}

double OAISpaceAttachment::getCreationTime() const {
    return m_creation_time;
}
void OAISpaceAttachment::setCreationTime(const double &creation_time) {
    m_creation_time = creation_time;
    m_creation_time_isSet = true;
}

bool OAISpaceAttachment::is_creation_time_Set() const{
    return m_creation_time_isSet;
}

bool OAISpaceAttachment::is_creation_time_Valid() const{
    return m_creation_time_isValid;
}

QString OAISpaceAttachment::getCreatorId() const {
    return m_creator_id;
}
void OAISpaceAttachment::setCreatorId(const QString &creator_id) {
    m_creator_id = creator_id;
    m_creator_id_isSet = true;
}

bool OAISpaceAttachment::is_creator_id_Set() const{
    return m_creator_id_isSet;
}

bool OAISpaceAttachment::is_creator_id_Valid() const{
    return m_creator_id_isValid;
}

QString OAISpaceAttachment::getFileId() const {
    return m_file_id;
}
void OAISpaceAttachment::setFileId(const QString &file_id) {
    m_file_id = file_id;
    m_file_id_isSet = true;
}

bool OAISpaceAttachment::is_file_id_Set() const{
    return m_file_id_isSet;
}

bool OAISpaceAttachment::is_file_id_Valid() const{
    return m_file_id_isValid;
}

QString OAISpaceAttachment::getFileName() const {
    return m_file_name;
}
void OAISpaceAttachment::setFileName(const QString &file_name) {
    m_file_name = file_name;
    m_file_name_isSet = true;
}

bool OAISpaceAttachment::is_file_name_Set() const{
    return m_file_name_isSet;
}

bool OAISpaceAttachment::is_file_name_Valid() const{
    return m_file_name_isValid;
}

bool OAISpaceAttachment::isInlineUsage() const {
    return m_inline_usage;
}
void OAISpaceAttachment::setInlineUsage(const bool &inline_usage) {
    m_inline_usage = inline_usage;
    m_inline_usage_isSet = true;
}

bool OAISpaceAttachment::is_inline_usage_Set() const{
    return m_inline_usage_isSet;
}

bool OAISpaceAttachment::is_inline_usage_Valid() const{
    return m_inline_usage_isValid;
}

QString OAISpaceAttachment::getItemId() const {
    return m_item_id;
}
void OAISpaceAttachment::setItemId(const QString &item_id) {
    m_item_id = item_id;
    m_item_id_isSet = true;
}

bool OAISpaceAttachment::is_item_id_Set() const{
    return m_item_id_isSet;
}

bool OAISpaceAttachment::is_item_id_Valid() const{
    return m_item_id_isValid;
}

QString OAISpaceAttachment::getLayout() const {
    return m_layout;
}
void OAISpaceAttachment::setLayout(const QString &layout) {
    m_layout = layout;
    m_layout_isSet = true;
}

bool OAISpaceAttachment::is_layout_Set() const{
    return m_layout_isSet;
}

bool OAISpaceAttachment::is_layout_Valid() const{
    return m_layout_isValid;
}

QString OAISpaceAttachment::getMimeType() const {
    return m_mime_type;
}
void OAISpaceAttachment::setMimeType(const QString &mime_type) {
    m_mime_type = mime_type;
    m_mime_type_isSet = true;
}

bool OAISpaceAttachment::is_mime_type_Set() const{
    return m_mime_type_isSet;
}

bool OAISpaceAttachment::is_mime_type_Valid() const{
    return m_mime_type_isValid;
}

double OAISpaceAttachment::getModificationTime() const {
    return m_modification_time;
}
void OAISpaceAttachment::setModificationTime(const double &modification_time) {
    m_modification_time = modification_time;
    m_modification_time_isSet = true;
}

bool OAISpaceAttachment::is_modification_time_Set() const{
    return m_modification_time_isSet;
}

bool OAISpaceAttachment::is_modification_time_Valid() const{
    return m_modification_time_isValid;
}

double OAISpaceAttachment::getSize() const {
    return m_size;
}
void OAISpaceAttachment::setSize(const double &size) {
    m_size = size;
    m_size_isSet = true;
}

bool OAISpaceAttachment::is_size_Set() const{
    return m_size_isSet;
}

bool OAISpaceAttachment::is_size_Valid() const{
    return m_size_isValid;
}

QString OAISpaceAttachment::getSpaceId() const {
    return m_space_id;
}
void OAISpaceAttachment::setSpaceId(const QString &space_id) {
    m_space_id = space_id;
    m_space_id_isSet = true;
}

bool OAISpaceAttachment::is_space_id_Set() const{
    return m_space_id_isSet;
}

bool OAISpaceAttachment::is_space_id_Valid() const{
    return m_space_id_isValid;
}

QString OAISpaceAttachment::getThumbnailId() const {
    return m_thumbnail_id;
}
void OAISpaceAttachment::setThumbnailId(const QString &thumbnail_id) {
    m_thumbnail_id = thumbnail_id;
    m_thumbnail_id_isSet = true;
}

bool OAISpaceAttachment::is_thumbnail_id_Set() const{
    return m_thumbnail_id_isSet;
}

bool OAISpaceAttachment::is_thumbnail_id_Valid() const{
    return m_thumbnail_id_isValid;
}

bool OAISpaceAttachment::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_creation_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creator_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_file_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_file_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_inline_usage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_item_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_layout_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mime_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_modification_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_space_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_thumbnail_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISpaceAttachment::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
