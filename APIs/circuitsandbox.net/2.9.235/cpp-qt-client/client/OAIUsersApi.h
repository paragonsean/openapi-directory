/**
 * REST API Version 2
 * Circuit REST API to interact with the Circuit system.  [Learn more about the Circuit Development Community](https://www.circuit.com/web/developers/home)
 *
 * The version of the OpenAPI document: 2.9.235
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIUsersApi_H
#define OAI_OAIUsersApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAILabel.h"
#include "OAIPresence.h"
#include "OAISupportInfo.h"
#include "OAIUser.h"
#include <QString>
#include <QDateTime>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIUsersApi : public QObject {
    Q_OBJECT

public:
    OAIUsersApi(const int timeOut = 0);
    ~OAIUsersApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);


    virtual void getLabel();

    /**
    * @param[in]  user_ids QList<QString> [required]
    */
    virtual void getPresence(const QList<QString> &user_ids);


    virtual void getProfile();


    virtual void getSupportInfo();

    /**
    * @param[in]  email_address QString [required]
    * @param[in]  secondary_lookup bool [optional]
    */
    virtual void getUserByEmailAddress(const QString &email_address, const ::OpenAPI::OptionalParam<bool> &secondary_lookup = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  id QString [required]
    */
    virtual void getUserById(const QString &id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void getUserPresence(const QString &id);

    /**
    * @param[in]  name QString [required]
    */
    virtual void searchUser(const QString &name);

    /**
    * @param[in]  name QList<QString> [required]
    * @param[in]  return_full_user_info bool [optional]
    * @param[in]  secondary_lookup bool [optional]
    */
    virtual void searchUsersList(const QList<QString> &name, const ::OpenAPI::OptionalParam<bool> &return_full_user_info = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &secondary_lookup = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  state QString [required]
    * @param[in]  clear_dnd bool [optional]
    * @param[in]  dnd_until QDateTime [optional]
    * @param[in]  status_message QString [optional]
    */
    virtual void setUserPresence(const QString &state, const ::OpenAPI::OptionalParam<bool> &clear_dnd = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QDateTime> &dnd_until = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QString> &status_message = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void getLabelCallback(OAIHttpRequestWorker *worker);
    void getPresenceCallback(OAIHttpRequestWorker *worker);
    void getProfileCallback(OAIHttpRequestWorker *worker);
    void getSupportInfoCallback(OAIHttpRequestWorker *worker);
    void getUserByEmailAddressCallback(OAIHttpRequestWorker *worker);
    void getUserByIdCallback(OAIHttpRequestWorker *worker);
    void getUserPresenceCallback(OAIHttpRequestWorker *worker);
    void searchUserCallback(OAIHttpRequestWorker *worker);
    void searchUsersListCallback(OAIHttpRequestWorker *worker);
    void setUserPresenceCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void getLabelSignal(QList<OAILabel> summary);
    void getPresenceSignal(QList<OAIPresence> summary);
    void getProfileSignal(OAIUser summary);
    void getSupportInfoSignal(OAISupportInfo summary);
    void getUserByEmailAddressSignal(OAIUser summary);
    void getUserByIdSignal(OAIUser summary);
    void getUserPresenceSignal(OAIPresence summary);
    void searchUserSignal(QList<OAIUser> summary);
    void searchUsersListSignal(QList<OAIUser> summary);
    void setUserPresenceSignal(OAIPresence summary);


    void getLabelSignalFull(OAIHttpRequestWorker *worker, QList<OAILabel> summary);
    void getPresenceSignalFull(OAIHttpRequestWorker *worker, QList<OAIPresence> summary);
    void getProfileSignalFull(OAIHttpRequestWorker *worker, OAIUser summary);
    void getSupportInfoSignalFull(OAIHttpRequestWorker *worker, OAISupportInfo summary);
    void getUserByEmailAddressSignalFull(OAIHttpRequestWorker *worker, OAIUser summary);
    void getUserByIdSignalFull(OAIHttpRequestWorker *worker, OAIUser summary);
    void getUserPresenceSignalFull(OAIHttpRequestWorker *worker, OAIPresence summary);
    void searchUserSignalFull(OAIHttpRequestWorker *worker, QList<OAIUser> summary);
    void searchUsersListSignalFull(OAIHttpRequestWorker *worker, QList<OAIUser> summary);
    void setUserPresenceSignalFull(OAIHttpRequestWorker *worker, OAIPresence summary);

    Q_DECL_DEPRECATED_X("Use getLabelSignalError() instead")
    void getLabelSignalE(QList<OAILabel> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getLabelSignalError(QList<OAILabel> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPresenceSignalError() instead")
    void getPresenceSignalE(QList<OAIPresence> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPresenceSignalError(QList<OAIPresence> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getProfileSignalError() instead")
    void getProfileSignalE(OAIUser summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getProfileSignalError(OAIUser summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSupportInfoSignalError() instead")
    void getSupportInfoSignalE(OAISupportInfo summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSupportInfoSignalError(OAISupportInfo summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUserByEmailAddressSignalError() instead")
    void getUserByEmailAddressSignalE(OAIUser summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getUserByEmailAddressSignalError(OAIUser summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUserByIdSignalError() instead")
    void getUserByIdSignalE(OAIUser summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getUserByIdSignalError(OAIUser summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUserPresenceSignalError() instead")
    void getUserPresenceSignalE(OAIPresence summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getUserPresenceSignalError(OAIPresence summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchUserSignalError() instead")
    void searchUserSignalE(QList<OAIUser> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void searchUserSignalError(QList<OAIUser> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchUsersListSignalError() instead")
    void searchUsersListSignalE(QList<OAIUser> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void searchUsersListSignalError(QList<OAIUser> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setUserPresenceSignalError() instead")
    void setUserPresenceSignalE(OAIPresence summary, QNetworkReply::NetworkError error_type, QString error_str);
    void setUserPresenceSignalError(OAIPresence summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use getLabelSignalErrorFull() instead")
    void getLabelSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getLabelSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPresenceSignalErrorFull() instead")
    void getPresenceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPresenceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getProfileSignalErrorFull() instead")
    void getProfileSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getProfileSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSupportInfoSignalErrorFull() instead")
    void getSupportInfoSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSupportInfoSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUserByEmailAddressSignalErrorFull() instead")
    void getUserByEmailAddressSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getUserByEmailAddressSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUserByIdSignalErrorFull() instead")
    void getUserByIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getUserByIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUserPresenceSignalErrorFull() instead")
    void getUserPresenceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getUserPresenceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchUserSignalErrorFull() instead")
    void searchUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void searchUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchUsersListSignalErrorFull() instead")
    void searchUsersListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void searchUsersListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setUserPresenceSignalErrorFull() instead")
    void setUserPresenceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void setUserPresenceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
