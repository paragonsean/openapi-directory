/**
 * REST API Version 2
 * Circuit REST API to interact with the Circuit system.  [Learn more about the Circuit Development Community](https://www.circuit.com/web/developers/home)
 *
 * The version of the OpenAPI document: 2.9.235
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISpace.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISpace::OAISpace(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISpace::OAISpace() {
    this->initializeModel();
}

OAISpace::~OAISpace() {}

void OAISpace::initializeModel() {

    m_access_mode_type_isSet = false;
    m_access_mode_type_isValid = false;

    m_creation_time_isSet = false;
    m_creation_time_isValid = false;

    m_creator_id_isSet = false;
    m_creator_id_isValid = false;

    m_default_role_isSet = false;
    m_default_role_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_large_picture_base64_isSet = false;
    m_large_picture_base64_isValid = false;

    m_large_picture_content_type_isSet = false;
    m_large_picture_content_type_isValid = false;

    m_large_picture_id_isSet = false;
    m_large_picture_id_isValid = false;

    m_last_content_creation_time_isSet = false;
    m_last_content_creation_time_isValid = false;

    m_last_content_creator_id_isSet = false;
    m_last_content_creator_id_isValid = false;

    m_modification_time_isSet = false;
    m_modification_time_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_number_of_external_participants_isSet = false;
    m_number_of_external_participants_isValid = false;

    m_number_of_participants_isSet = false;
    m_number_of_participants_isValid = false;

    m_number_of_pinned_topics_isSet = false;
    m_number_of_pinned_topics_isValid = false;

    m_number_of_replies_isSet = false;
    m_number_of_replies_isValid = false;

    m_number_of_topics_isSet = false;
    m_number_of_topics_isValid = false;

    m_owner_id_isSet = false;
    m_owner_id_isValid = false;

    m_small_picture_base64_isSet = false;
    m_small_picture_base64_isValid = false;

    m_small_picture_content_type_isSet = false;
    m_small_picture_content_type_isValid = false;

    m_small_picture_id_isSet = false;
    m_small_picture_id_isValid = false;

    m_space_id_isSet = false;
    m_space_id_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_tenant_id_isSet = false;
    m_tenant_id_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAISpace::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISpace::fromJsonObject(QJsonObject json) {

    m_access_mode_type_isValid = ::OpenAPI::fromJsonValue(m_access_mode_type, json[QString("accessModeType")]);
    m_access_mode_type_isSet = !json[QString("accessModeType")].isNull() && m_access_mode_type_isValid;

    m_creation_time_isValid = ::OpenAPI::fromJsonValue(m_creation_time, json[QString("creationTime")]);
    m_creation_time_isSet = !json[QString("creationTime")].isNull() && m_creation_time_isValid;

    m_creator_id_isValid = ::OpenAPI::fromJsonValue(m_creator_id, json[QString("creatorId")]);
    m_creator_id_isSet = !json[QString("creatorId")].isNull() && m_creator_id_isValid;

    m_default_role_isValid = ::OpenAPI::fromJsonValue(m_default_role, json[QString("defaultRole")]);
    m_default_role_isSet = !json[QString("defaultRole")].isNull() && m_default_role_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_large_picture_base64_isValid = ::OpenAPI::fromJsonValue(m_large_picture_base64, json[QString("largePictureBase64")]);
    m_large_picture_base64_isSet = !json[QString("largePictureBase64")].isNull() && m_large_picture_base64_isValid;

    m_large_picture_content_type_isValid = ::OpenAPI::fromJsonValue(m_large_picture_content_type, json[QString("largePictureContentType")]);
    m_large_picture_content_type_isSet = !json[QString("largePictureContentType")].isNull() && m_large_picture_content_type_isValid;

    m_large_picture_id_isValid = ::OpenAPI::fromJsonValue(m_large_picture_id, json[QString("largePictureId")]);
    m_large_picture_id_isSet = !json[QString("largePictureId")].isNull() && m_large_picture_id_isValid;

    m_last_content_creation_time_isValid = ::OpenAPI::fromJsonValue(m_last_content_creation_time, json[QString("lastContentCreationTime")]);
    m_last_content_creation_time_isSet = !json[QString("lastContentCreationTime")].isNull() && m_last_content_creation_time_isValid;

    m_last_content_creator_id_isValid = ::OpenAPI::fromJsonValue(m_last_content_creator_id, json[QString("lastContentCreatorId")]);
    m_last_content_creator_id_isSet = !json[QString("lastContentCreatorId")].isNull() && m_last_content_creator_id_isValid;

    m_modification_time_isValid = ::OpenAPI::fromJsonValue(m_modification_time, json[QString("modificationTime")]);
    m_modification_time_isSet = !json[QString("modificationTime")].isNull() && m_modification_time_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_number_of_external_participants_isValid = ::OpenAPI::fromJsonValue(m_number_of_external_participants, json[QString("numberOfExternalParticipants")]);
    m_number_of_external_participants_isSet = !json[QString("numberOfExternalParticipants")].isNull() && m_number_of_external_participants_isValid;

    m_number_of_participants_isValid = ::OpenAPI::fromJsonValue(m_number_of_participants, json[QString("numberOfParticipants")]);
    m_number_of_participants_isSet = !json[QString("numberOfParticipants")].isNull() && m_number_of_participants_isValid;

    m_number_of_pinned_topics_isValid = ::OpenAPI::fromJsonValue(m_number_of_pinned_topics, json[QString("numberOfPinnedTopics")]);
    m_number_of_pinned_topics_isSet = !json[QString("numberOfPinnedTopics")].isNull() && m_number_of_pinned_topics_isValid;

    m_number_of_replies_isValid = ::OpenAPI::fromJsonValue(m_number_of_replies, json[QString("numberOfReplies")]);
    m_number_of_replies_isSet = !json[QString("numberOfReplies")].isNull() && m_number_of_replies_isValid;

    m_number_of_topics_isValid = ::OpenAPI::fromJsonValue(m_number_of_topics, json[QString("numberOfTopics")]);
    m_number_of_topics_isSet = !json[QString("numberOfTopics")].isNull() && m_number_of_topics_isValid;

    m_owner_id_isValid = ::OpenAPI::fromJsonValue(m_owner_id, json[QString("ownerId")]);
    m_owner_id_isSet = !json[QString("ownerId")].isNull() && m_owner_id_isValid;

    m_small_picture_base64_isValid = ::OpenAPI::fromJsonValue(m_small_picture_base64, json[QString("smallPictureBase64")]);
    m_small_picture_base64_isSet = !json[QString("smallPictureBase64")].isNull() && m_small_picture_base64_isValid;

    m_small_picture_content_type_isValid = ::OpenAPI::fromJsonValue(m_small_picture_content_type, json[QString("smallPictureContentType")]);
    m_small_picture_content_type_isSet = !json[QString("smallPictureContentType")].isNull() && m_small_picture_content_type_isValid;

    m_small_picture_id_isValid = ::OpenAPI::fromJsonValue(m_small_picture_id, json[QString("smallPictureId")]);
    m_small_picture_id_isSet = !json[QString("smallPictureId")].isNull() && m_small_picture_id_isValid;

    m_space_id_isValid = ::OpenAPI::fromJsonValue(m_space_id, json[QString("spaceId")]);
    m_space_id_isSet = !json[QString("spaceId")].isNull() && m_space_id_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;

    m_tenant_id_isValid = ::OpenAPI::fromJsonValue(m_tenant_id, json[QString("tenantId")]);
    m_tenant_id_isSet = !json[QString("tenantId")].isNull() && m_tenant_id_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAISpace::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISpace::asJsonObject() const {
    QJsonObject obj;
    if (m_access_mode_type_isSet) {
        obj.insert(QString("accessModeType"), ::OpenAPI::toJsonValue(m_access_mode_type));
    }
    if (m_creation_time_isSet) {
        obj.insert(QString("creationTime"), ::OpenAPI::toJsonValue(m_creation_time));
    }
    if (m_creator_id_isSet) {
        obj.insert(QString("creatorId"), ::OpenAPI::toJsonValue(m_creator_id));
    }
    if (m_default_role_isSet) {
        obj.insert(QString("defaultRole"), ::OpenAPI::toJsonValue(m_default_role));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_large_picture_base64_isSet) {
        obj.insert(QString("largePictureBase64"), ::OpenAPI::toJsonValue(m_large_picture_base64));
    }
    if (m_large_picture_content_type_isSet) {
        obj.insert(QString("largePictureContentType"), ::OpenAPI::toJsonValue(m_large_picture_content_type));
    }
    if (m_large_picture_id_isSet) {
        obj.insert(QString("largePictureId"), ::OpenAPI::toJsonValue(m_large_picture_id));
    }
    if (m_last_content_creation_time_isSet) {
        obj.insert(QString("lastContentCreationTime"), ::OpenAPI::toJsonValue(m_last_content_creation_time));
    }
    if (m_last_content_creator_id_isSet) {
        obj.insert(QString("lastContentCreatorId"), ::OpenAPI::toJsonValue(m_last_content_creator_id));
    }
    if (m_modification_time_isSet) {
        obj.insert(QString("modificationTime"), ::OpenAPI::toJsonValue(m_modification_time));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_number_of_external_participants_isSet) {
        obj.insert(QString("numberOfExternalParticipants"), ::OpenAPI::toJsonValue(m_number_of_external_participants));
    }
    if (m_number_of_participants_isSet) {
        obj.insert(QString("numberOfParticipants"), ::OpenAPI::toJsonValue(m_number_of_participants));
    }
    if (m_number_of_pinned_topics_isSet) {
        obj.insert(QString("numberOfPinnedTopics"), ::OpenAPI::toJsonValue(m_number_of_pinned_topics));
    }
    if (m_number_of_replies_isSet) {
        obj.insert(QString("numberOfReplies"), ::OpenAPI::toJsonValue(m_number_of_replies));
    }
    if (m_number_of_topics_isSet) {
        obj.insert(QString("numberOfTopics"), ::OpenAPI::toJsonValue(m_number_of_topics));
    }
    if (m_owner_id_isSet) {
        obj.insert(QString("ownerId"), ::OpenAPI::toJsonValue(m_owner_id));
    }
    if (m_small_picture_base64_isSet) {
        obj.insert(QString("smallPictureBase64"), ::OpenAPI::toJsonValue(m_small_picture_base64));
    }
    if (m_small_picture_content_type_isSet) {
        obj.insert(QString("smallPictureContentType"), ::OpenAPI::toJsonValue(m_small_picture_content_type));
    }
    if (m_small_picture_id_isSet) {
        obj.insert(QString("smallPictureId"), ::OpenAPI::toJsonValue(m_small_picture_id));
    }
    if (m_space_id_isSet) {
        obj.insert(QString("spaceId"), ::OpenAPI::toJsonValue(m_space_id));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_tenant_id_isSet) {
        obj.insert(QString("tenantId"), ::OpenAPI::toJsonValue(m_tenant_id));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAISpace::getAccessModeType() const {
    return m_access_mode_type;
}
void OAISpace::setAccessModeType(const QString &access_mode_type) {
    m_access_mode_type = access_mode_type;
    m_access_mode_type_isSet = true;
}

bool OAISpace::is_access_mode_type_Set() const{
    return m_access_mode_type_isSet;
}

bool OAISpace::is_access_mode_type_Valid() const{
    return m_access_mode_type_isValid;
}

double OAISpace::getCreationTime() const {
    return m_creation_time;
}
void OAISpace::setCreationTime(const double &creation_time) {
    m_creation_time = creation_time;
    m_creation_time_isSet = true;
}

bool OAISpace::is_creation_time_Set() const{
    return m_creation_time_isSet;
}

bool OAISpace::is_creation_time_Valid() const{
    return m_creation_time_isValid;
}

QString OAISpace::getCreatorId() const {
    return m_creator_id;
}
void OAISpace::setCreatorId(const QString &creator_id) {
    m_creator_id = creator_id;
    m_creator_id_isSet = true;
}

bool OAISpace::is_creator_id_Set() const{
    return m_creator_id_isSet;
}

bool OAISpace::is_creator_id_Valid() const{
    return m_creator_id_isValid;
}

QString OAISpace::getDefaultRole() const {
    return m_default_role;
}
void OAISpace::setDefaultRole(const QString &default_role) {
    m_default_role = default_role;
    m_default_role_isSet = true;
}

bool OAISpace::is_default_role_Set() const{
    return m_default_role_isSet;
}

bool OAISpace::is_default_role_Valid() const{
    return m_default_role_isValid;
}

QString OAISpace::getDescription() const {
    return m_description;
}
void OAISpace::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAISpace::is_description_Set() const{
    return m_description_isSet;
}

bool OAISpace::is_description_Valid() const{
    return m_description_isValid;
}

QString OAISpace::getLargePictureBase64() const {
    return m_large_picture_base64;
}
void OAISpace::setLargePictureBase64(const QString &large_picture_base64) {
    m_large_picture_base64 = large_picture_base64;
    m_large_picture_base64_isSet = true;
}

bool OAISpace::is_large_picture_base64_Set() const{
    return m_large_picture_base64_isSet;
}

bool OAISpace::is_large_picture_base64_Valid() const{
    return m_large_picture_base64_isValid;
}

QString OAISpace::getLargePictureContentType() const {
    return m_large_picture_content_type;
}
void OAISpace::setLargePictureContentType(const QString &large_picture_content_type) {
    m_large_picture_content_type = large_picture_content_type;
    m_large_picture_content_type_isSet = true;
}

bool OAISpace::is_large_picture_content_type_Set() const{
    return m_large_picture_content_type_isSet;
}

bool OAISpace::is_large_picture_content_type_Valid() const{
    return m_large_picture_content_type_isValid;
}

QString OAISpace::getLargePictureId() const {
    return m_large_picture_id;
}
void OAISpace::setLargePictureId(const QString &large_picture_id) {
    m_large_picture_id = large_picture_id;
    m_large_picture_id_isSet = true;
}

bool OAISpace::is_large_picture_id_Set() const{
    return m_large_picture_id_isSet;
}

bool OAISpace::is_large_picture_id_Valid() const{
    return m_large_picture_id_isValid;
}

double OAISpace::getLastContentCreationTime() const {
    return m_last_content_creation_time;
}
void OAISpace::setLastContentCreationTime(const double &last_content_creation_time) {
    m_last_content_creation_time = last_content_creation_time;
    m_last_content_creation_time_isSet = true;
}

bool OAISpace::is_last_content_creation_time_Set() const{
    return m_last_content_creation_time_isSet;
}

bool OAISpace::is_last_content_creation_time_Valid() const{
    return m_last_content_creation_time_isValid;
}

QString OAISpace::getLastContentCreatorId() const {
    return m_last_content_creator_id;
}
void OAISpace::setLastContentCreatorId(const QString &last_content_creator_id) {
    m_last_content_creator_id = last_content_creator_id;
    m_last_content_creator_id_isSet = true;
}

bool OAISpace::is_last_content_creator_id_Set() const{
    return m_last_content_creator_id_isSet;
}

bool OAISpace::is_last_content_creator_id_Valid() const{
    return m_last_content_creator_id_isValid;
}

double OAISpace::getModificationTime() const {
    return m_modification_time;
}
void OAISpace::setModificationTime(const double &modification_time) {
    m_modification_time = modification_time;
    m_modification_time_isSet = true;
}

bool OAISpace::is_modification_time_Set() const{
    return m_modification_time_isSet;
}

bool OAISpace::is_modification_time_Valid() const{
    return m_modification_time_isValid;
}

QString OAISpace::getName() const {
    return m_name;
}
void OAISpace::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAISpace::is_name_Set() const{
    return m_name_isSet;
}

bool OAISpace::is_name_Valid() const{
    return m_name_isValid;
}

double OAISpace::getNumberOfExternalParticipants() const {
    return m_number_of_external_participants;
}
void OAISpace::setNumberOfExternalParticipants(const double &number_of_external_participants) {
    m_number_of_external_participants = number_of_external_participants;
    m_number_of_external_participants_isSet = true;
}

bool OAISpace::is_number_of_external_participants_Set() const{
    return m_number_of_external_participants_isSet;
}

bool OAISpace::is_number_of_external_participants_Valid() const{
    return m_number_of_external_participants_isValid;
}

double OAISpace::getNumberOfParticipants() const {
    return m_number_of_participants;
}
void OAISpace::setNumberOfParticipants(const double &number_of_participants) {
    m_number_of_participants = number_of_participants;
    m_number_of_participants_isSet = true;
}

bool OAISpace::is_number_of_participants_Set() const{
    return m_number_of_participants_isSet;
}

bool OAISpace::is_number_of_participants_Valid() const{
    return m_number_of_participants_isValid;
}

double OAISpace::getNumberOfPinnedTopics() const {
    return m_number_of_pinned_topics;
}
void OAISpace::setNumberOfPinnedTopics(const double &number_of_pinned_topics) {
    m_number_of_pinned_topics = number_of_pinned_topics;
    m_number_of_pinned_topics_isSet = true;
}

bool OAISpace::is_number_of_pinned_topics_Set() const{
    return m_number_of_pinned_topics_isSet;
}

bool OAISpace::is_number_of_pinned_topics_Valid() const{
    return m_number_of_pinned_topics_isValid;
}

double OAISpace::getNumberOfReplies() const {
    return m_number_of_replies;
}
void OAISpace::setNumberOfReplies(const double &number_of_replies) {
    m_number_of_replies = number_of_replies;
    m_number_of_replies_isSet = true;
}

bool OAISpace::is_number_of_replies_Set() const{
    return m_number_of_replies_isSet;
}

bool OAISpace::is_number_of_replies_Valid() const{
    return m_number_of_replies_isValid;
}

double OAISpace::getNumberOfTopics() const {
    return m_number_of_topics;
}
void OAISpace::setNumberOfTopics(const double &number_of_topics) {
    m_number_of_topics = number_of_topics;
    m_number_of_topics_isSet = true;
}

bool OAISpace::is_number_of_topics_Set() const{
    return m_number_of_topics_isSet;
}

bool OAISpace::is_number_of_topics_Valid() const{
    return m_number_of_topics_isValid;
}

QString OAISpace::getOwnerId() const {
    return m_owner_id;
}
void OAISpace::setOwnerId(const QString &owner_id) {
    m_owner_id = owner_id;
    m_owner_id_isSet = true;
}

bool OAISpace::is_owner_id_Set() const{
    return m_owner_id_isSet;
}

bool OAISpace::is_owner_id_Valid() const{
    return m_owner_id_isValid;
}

QString OAISpace::getSmallPictureBase64() const {
    return m_small_picture_base64;
}
void OAISpace::setSmallPictureBase64(const QString &small_picture_base64) {
    m_small_picture_base64 = small_picture_base64;
    m_small_picture_base64_isSet = true;
}

bool OAISpace::is_small_picture_base64_Set() const{
    return m_small_picture_base64_isSet;
}

bool OAISpace::is_small_picture_base64_Valid() const{
    return m_small_picture_base64_isValid;
}

QString OAISpace::getSmallPictureContentType() const {
    return m_small_picture_content_type;
}
void OAISpace::setSmallPictureContentType(const QString &small_picture_content_type) {
    m_small_picture_content_type = small_picture_content_type;
    m_small_picture_content_type_isSet = true;
}

bool OAISpace::is_small_picture_content_type_Set() const{
    return m_small_picture_content_type_isSet;
}

bool OAISpace::is_small_picture_content_type_Valid() const{
    return m_small_picture_content_type_isValid;
}

QString OAISpace::getSmallPictureId() const {
    return m_small_picture_id;
}
void OAISpace::setSmallPictureId(const QString &small_picture_id) {
    m_small_picture_id = small_picture_id;
    m_small_picture_id_isSet = true;
}

bool OAISpace::is_small_picture_id_Set() const{
    return m_small_picture_id_isSet;
}

bool OAISpace::is_small_picture_id_Valid() const{
    return m_small_picture_id_isValid;
}

QString OAISpace::getSpaceId() const {
    return m_space_id;
}
void OAISpace::setSpaceId(const QString &space_id) {
    m_space_id = space_id;
    m_space_id_isSet = true;
}

bool OAISpace::is_space_id_Set() const{
    return m_space_id_isSet;
}

bool OAISpace::is_space_id_Valid() const{
    return m_space_id_isValid;
}

QString OAISpace::getStatus() const {
    return m_status;
}
void OAISpace::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAISpace::is_status_Set() const{
    return m_status_isSet;
}

bool OAISpace::is_status_Valid() const{
    return m_status_isValid;
}

QList<QString> OAISpace::getTags() const {
    return m_tags;
}
void OAISpace::setTags(const QList<QString> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAISpace::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAISpace::is_tags_Valid() const{
    return m_tags_isValid;
}

QString OAISpace::getTenantId() const {
    return m_tenant_id;
}
void OAISpace::setTenantId(const QString &tenant_id) {
    m_tenant_id = tenant_id;
    m_tenant_id_isSet = true;
}

bool OAISpace::is_tenant_id_Set() const{
    return m_tenant_id_isSet;
}

bool OAISpace::is_tenant_id_Valid() const{
    return m_tenant_id_isValid;
}

QString OAISpace::getType() const {
    return m_type;
}
void OAISpace::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAISpace::is_type_Set() const{
    return m_type_isSet;
}

bool OAISpace::is_type_Valid() const{
    return m_type_isValid;
}

bool OAISpace::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_access_mode_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creator_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_default_role_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_large_picture_base64_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_large_picture_content_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_large_picture_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_content_creation_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_content_creator_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_modification_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_of_external_participants_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_of_participants_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_of_pinned_topics_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_of_replies_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_of_topics_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_owner_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_small_picture_base64_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_small_picture_content_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_small_picture_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_space_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_tenant_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISpace::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
