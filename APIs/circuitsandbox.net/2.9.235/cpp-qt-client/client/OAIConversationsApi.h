/**
 * REST API Version 2
 * Circuit REST API to interact with the Circuit system.  [Learn more about the Circuit Development Community](https://www.circuit.com/web/developers/home)
 *
 * The version of the OpenAPI document: 2.9.235
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIConversationsApi_H
#define OAI_OAIConversationsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIConversation.h"
#include "OAIConversationDetails.h"
#include "OAIConversationItem.h"
#include "OAIConversationParticipantsList.h"
#include "OAIConversationSearchResult.h"
#include "OAIConversationsPage.h"
#include "OAILabel.h"
#include "OAIPinnedTopic.h"
#include "OAIUser.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIConversationsApi : public QObject {
    Q_OBJECT

public:
    OAIConversationsApi(const int timeOut = 0);
    ~OAIConversationsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  conv_id QString [required]
    */
    virtual void addFavorite(const QString &conv_id);

    /**
    * @param[in]  label QString [required]
    */
    virtual void addLabel(const QString &label);

    /**
    * @param[in]  conv_id QString [required]
    * @param[in]  moderators QList<QString> [required]
    */
    virtual void addModerators(const QString &conv_id, const QList<QString> &moderators);

    /**
    * @param[in]  conv_id QString [required]
    * @param[in]  participants QList<QString> [required]
    */
    virtual void addParticipantCommunity(const QString &conv_id, const QList<QString> &participants);

    /**
    * @param[in]  conv_id QString [required]
    * @param[in]  participants QList<QString> [required]
    */
    virtual void addParticipantGroup(const QString &conv_id, const QList<QString> &participants);

    /**
    * @param[in]  conv_id QString [required]
    * @param[in]  attachments QList<QString> [optional]
    * @param[in]  content QString [optional]
    * @param[in]  form_meta_data QString [optional]
    * @param[in]  subject QString [optional]
    */
    virtual void addTextItem(const QString &conv_id, const ::OpenAPI::OptionalParam<QList<QString>> &attachments = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &content = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &form_meta_data = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &subject = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  conv_id QString [required]
    * @param[in]  item_id QString [required]
    * @param[in]  attachments QList<QString> [optional]
    * @param[in]  content QString [optional]
    * @param[in]  form_meta_data QString [optional]
    * @param[in]  subject QString [optional]
    */
    virtual void addTextItemWithParent(const QString &conv_id, const QString &item_id, const ::OpenAPI::OptionalParam<QList<QString>> &attachments = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &content = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &form_meta_data = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &subject = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  conv_id QString [required]
    */
    virtual void archiveConversation(const QString &conv_id);

    /**
    * @param[in]  conv_id QString [required]
    * @param[in]  label QString [required]
    */
    virtual void assignLabel(const QString &conv_id, const QString &label);

    /**
    * @param[in]  topic QString [required]
    * @param[in]  description QString [optional]
    * @param[in]  participants QList<QString> [optional]
    */
    virtual void createCommunityConversation(const QString &topic, const ::OpenAPI::OptionalParam<QString> &description = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &participants = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  participant QString [required]
    */
    virtual void createDirectConversation(const QString &participant);

    /**
    * @param[in]  participants QList<QString> [required]
    * @param[in]  topic QString [optional]
    */
    virtual void createGroupConversation(const QList<QString> &participants, const ::OpenAPI::OptionalParam<QString> &topic = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  conv_id QString [required]
    */
    virtual void deleteFavorite(const QString &conv_id);

    /**
    * @param[in]  conv_id QString [required]
    * @param[in]  item_id QString [required]
    */
    virtual void deleteTextItem(const QString &conv_id, const QString &item_id);

    /**
    * @param[in]  conv_id QString [required]
    * @param[in]  item_id QString [required]
    * @param[in]  item_creation_time QString [optional]
    * @param[in]  parent_id QString [optional]
    */
    virtual void flagItem(const QString &conv_id, const QString &item_id, const ::OpenAPI::OptionalParam<QString> &item_creation_time = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &parent_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  sort QString [optional]
    * @param[in]  order QString [optional]
    * @param[in]  include_own bool [optional]
    * @param[in]  start_index double [optional]
    * @param[in]  results double [optional]
    */
    virtual void getCommunityConversations(const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &order = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &include_own = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<double> &start_index = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &results = ::OpenAPI::OptionalParam<double>());

    /**
    * @param[in]  conv_id QString [required]
    * @param[in]  mod_time QDateTime [optional]
    * @param[in]  direction QString [optional]
    * @param[in]  results double [optional]
    */
    virtual void getConversationItems(const QString &conv_id, const ::OpenAPI::OptionalParam<QDateTime> &mod_time = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QString> &direction = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &results = ::OpenAPI::OptionalParam<double>());

    /**
    * @param[in]  conv_id QString [required]
    */
    virtual void getConversationbyId(const QString &conv_id);

    /**
    * @param[in]  mod_time QDateTime [optional]
    * @param[in]  direction QString [optional]
    * @param[in]  results double [optional]
    */
    virtual void getConversations(const ::OpenAPI::OptionalParam<QDateTime> &mod_time = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QString> &direction = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &results = ::OpenAPI::OptionalParam<double>());

    /**
    * @param[in]  conv_ids QList<QString> [required]
    */
    virtual void getConversationsById(const QList<QString> &conv_ids);

    /**
    * @param[in]  label_id QString [required]
    * @param[in]  next_page_pointer QString [optional]
    * @param[in]  page_size double [optional]
    */
    virtual void getConversationsByLabel(const QString &label_id, const ::OpenAPI::OptionalParam<QString> &next_page_pointer = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &page_size = ::OpenAPI::OptionalParam<double>());

    /**
    * @param[in]  participant QString [required]
    */
    virtual void getDirectConversation(const QString &participant);


    virtual void getFavoriteConversations();

    /**
    * @param[in]  conv_id QString [required]
    */
    virtual void getFlagItem(const QString &conv_id);


    virtual void getFlagItemConv();

    /**
    * @param[in]  conv_id QString [required]
    */
    virtual void getJoinDetails(const QString &conv_id);

    /**
    * @param[in]  conv_ids QList<QString> [required]
    */
    virtual void getJoinDetailsMultiple(const QList<QString> &conv_ids);

    /**
    * @param[in]  conv_id QString [required]
    * @param[in]  page_size double [required]
    * @param[in]  name QString [optional]
    * @param[in]  type QString [optional]
    * @param[in]  search_pointer QString [optional]
    */
    virtual void getParticipantsByConvId(const QString &conv_id, const double &page_size, const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &search_pointer = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  conv_id QString [required]
    */
    virtual void getPinnedConversations(const QString &conv_id);

    /**
    * @param[in]  item_id QString [required]
    */
    virtual void getSingleConversationtem(const QString &item_id);

    /**
    * @param[in]  conv_id QString [required]
    */
    virtual void joinCommunityConversation(const QString &conv_id);

    /**
    * @param[in]  conv_id QString [required]
    * @param[in]  item_id QString [required]
    */
    virtual void likeItem(const QString &conv_id, const QString &item_id);

    /**
    * @param[in]  conv_id QString [required]
    */
    virtual void moderateConversation(const QString &conv_id);

    /**
    * @param[in]  conv_id QString [required]
    * @param[in]  item_id QString [required]
    */
    virtual void pinAConversation(const QString &conv_id, const QString &item_id);

    /**
    * @param[in]  label_id QString [required]
    */
    virtual void removeLabel(const QString &label_id);

    /**
    * @param[in]  conv_id QString [required]
    * @param[in]  moderators QList<QString> [required]
    */
    virtual void removeModerators(const QString &conv_id, const QList<QString> &moderators);

    /**
    * @param[in]  conv_id QString [required]
    * @param[in]  participants QList<QString> [required]
    */
    virtual void removeParticipantCommunity(const QString &conv_id, const QList<QString> &participants);

    /**
    * @param[in]  conv_id QString [required]
    * @param[in]  participants QList<QString> [required]
    */
    virtual void removeParticipantGroup(const QString &conv_id, const QList<QString> &participants);

    /**
    * @param[in]  token QString [required]
    */
    virtual void resolveInvitationToken(const QString &token);

    /**
    * @param[in]  term QString [required]
    * @param[in]  include_item_ids bool [optional]
    * @param[in]  scope QString [optional]
    */
    virtual void searchConversations(const QString &term, const ::OpenAPI::OptionalParam<bool> &include_item_ids = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &scope = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  conv_id QString [required]
    * @param[in]  item_id QString [required]
    */
    virtual void unFlagItem(const QString &conv_id, const QString &item_id);

    /**
    * @param[in]  conv_id QString [required]
    * @param[in]  item_id QString [required]
    */
    virtual void unPinAConversation(const QString &conv_id, const QString &item_id);

    /**
    * @param[in]  conv_id QString [required]
    * @param[in]  label_id QString [required]
    */
    virtual void unassignLabel(const QString &conv_id, const QString &label_id);

    /**
    * @param[in]  conv_id QString [required]
    */
    virtual void undoArchiveConversation(const QString &conv_id);

    /**
    * @param[in]  conv_id QString [required]
    * @param[in]  item_id QString [required]
    */
    virtual void unlikeItem(const QString &conv_id, const QString &item_id);

    /**
    * @param[in]  conv_id QString [required]
    */
    virtual void unmoderateConversation(const QString &conv_id);

    /**
    * @param[in]  conv_id QString [required]
    * @param[in]  description QString [optional]
    * @param[in]  topic QString [optional]
    */
    virtual void updateConversationCommunity(const QString &conv_id, const ::OpenAPI::OptionalParam<QString> &description = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &topic = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  conv_id QString [required]
    * @param[in]  topic QString [optional]
    */
    virtual void updateConversationGroup(const QString &conv_id, const ::OpenAPI::OptionalParam<QString> &topic = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  firstname QString [optional]
    * @param[in]  job_title QString [optional]
    * @param[in]  lastname QString [optional]
    * @param[in]  locale QString [optional]
    */
    virtual void updateProfile(const ::OpenAPI::OptionalParam<QString> &firstname = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &job_title = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &lastname = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &locale = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  conv_id QString [required]
    * @param[in]  item_id QString [required]
    * @param[in]  attachments QList<QString> [optional]
    * @param[in]  content QString [optional]
    * @param[in]  form_meta_data QString [optional]
    * @param[in]  subject QString [optional]
    */
    virtual void updateTextItem(const QString &conv_id, const QString &item_id, const ::OpenAPI::OptionalParam<QList<QString>> &attachments = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &content = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &form_meta_data = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &subject = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void addFavoriteCallback(OAIHttpRequestWorker *worker);
    void addLabelCallback(OAIHttpRequestWorker *worker);
    void addModeratorsCallback(OAIHttpRequestWorker *worker);
    void addParticipantCommunityCallback(OAIHttpRequestWorker *worker);
    void addParticipantGroupCallback(OAIHttpRequestWorker *worker);
    void addTextItemCallback(OAIHttpRequestWorker *worker);
    void addTextItemWithParentCallback(OAIHttpRequestWorker *worker);
    void archiveConversationCallback(OAIHttpRequestWorker *worker);
    void assignLabelCallback(OAIHttpRequestWorker *worker);
    void createCommunityConversationCallback(OAIHttpRequestWorker *worker);
    void createDirectConversationCallback(OAIHttpRequestWorker *worker);
    void createGroupConversationCallback(OAIHttpRequestWorker *worker);
    void deleteFavoriteCallback(OAIHttpRequestWorker *worker);
    void deleteTextItemCallback(OAIHttpRequestWorker *worker);
    void flagItemCallback(OAIHttpRequestWorker *worker);
    void getCommunityConversationsCallback(OAIHttpRequestWorker *worker);
    void getConversationItemsCallback(OAIHttpRequestWorker *worker);
    void getConversationbyIdCallback(OAIHttpRequestWorker *worker);
    void getConversationsCallback(OAIHttpRequestWorker *worker);
    void getConversationsByIdCallback(OAIHttpRequestWorker *worker);
    void getConversationsByLabelCallback(OAIHttpRequestWorker *worker);
    void getDirectConversationCallback(OAIHttpRequestWorker *worker);
    void getFavoriteConversationsCallback(OAIHttpRequestWorker *worker);
    void getFlagItemCallback(OAIHttpRequestWorker *worker);
    void getFlagItemConvCallback(OAIHttpRequestWorker *worker);
    void getJoinDetailsCallback(OAIHttpRequestWorker *worker);
    void getJoinDetailsMultipleCallback(OAIHttpRequestWorker *worker);
    void getParticipantsByConvIdCallback(OAIHttpRequestWorker *worker);
    void getPinnedConversationsCallback(OAIHttpRequestWorker *worker);
    void getSingleConversationtemCallback(OAIHttpRequestWorker *worker);
    void joinCommunityConversationCallback(OAIHttpRequestWorker *worker);
    void likeItemCallback(OAIHttpRequestWorker *worker);
    void moderateConversationCallback(OAIHttpRequestWorker *worker);
    void pinAConversationCallback(OAIHttpRequestWorker *worker);
    void removeLabelCallback(OAIHttpRequestWorker *worker);
    void removeModeratorsCallback(OAIHttpRequestWorker *worker);
    void removeParticipantCommunityCallback(OAIHttpRequestWorker *worker);
    void removeParticipantGroupCallback(OAIHttpRequestWorker *worker);
    void resolveInvitationTokenCallback(OAIHttpRequestWorker *worker);
    void searchConversationsCallback(OAIHttpRequestWorker *worker);
    void unFlagItemCallback(OAIHttpRequestWorker *worker);
    void unPinAConversationCallback(OAIHttpRequestWorker *worker);
    void unassignLabelCallback(OAIHttpRequestWorker *worker);
    void undoArchiveConversationCallback(OAIHttpRequestWorker *worker);
    void unlikeItemCallback(OAIHttpRequestWorker *worker);
    void unmoderateConversationCallback(OAIHttpRequestWorker *worker);
    void updateConversationCommunityCallback(OAIHttpRequestWorker *worker);
    void updateConversationGroupCallback(OAIHttpRequestWorker *worker);
    void updateProfileCallback(OAIHttpRequestWorker *worker);
    void updateTextItemCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void addFavoriteSignal();
    void addLabelSignal(OAILabel summary);
    void addModeratorsSignal();
    void addParticipantCommunitySignal(OAIConversation summary);
    void addParticipantGroupSignal(OAIConversation summary);
    void addTextItemSignal(OAIConversationItem summary);
    void addTextItemWithParentSignal(OAIConversationItem summary);
    void archiveConversationSignal();
    void assignLabelSignal(OAILabel summary);
    void createCommunityConversationSignal(OAIConversation summary);
    void createDirectConversationSignal(OAIConversation summary);
    void createGroupConversationSignal(OAIConversation summary);
    void deleteFavoriteSignal();
    void deleteTextItemSignal(OAIConversationItem summary);
    void flagItemSignal();
    void getCommunityConversationsSignal(QList<OAIConversation> summary);
    void getConversationItemsSignal(QList<OAIConversationItem> summary);
    void getConversationbyIdSignal(OAIConversation summary);
    void getConversationsSignal(QList<OAIConversation> summary);
    void getConversationsByIdSignal(QList<OAIConversation> summary);
    void getConversationsByLabelSignal(OAIConversationsPage summary);
    void getDirectConversationSignal(OAIConversation summary);
    void getFavoriteConversationsSignal(QList<String> summary);
    void getFlagItemSignal(QList<OAIConversationItem> summary);
    void getFlagItemConvSignal(QList<OAIConversationItem> summary);
    void getJoinDetailsSignal(OAIConversationDetails summary);
    void getJoinDetailsMultipleSignal(QList<OAIConversationDetails> summary);
    void getParticipantsByConvIdSignal(QList<OAIConversationParticipantsList> summary);
    void getPinnedConversationsSignal(QList<OAIPinnedTopic> summary);
    void getSingleConversationtemSignal(OAIConversationItem summary);
    void joinCommunityConversationSignal(OAIConversation summary);
    void likeItemSignal();
    void moderateConversationSignal();
    void pinAConversationSignal(OAIConversation summary);
    void removeLabelSignal(OAILabel summary);
    void removeModeratorsSignal();
    void removeParticipantCommunitySignal(OAIConversation summary);
    void removeParticipantGroupSignal(OAIConversation summary);
    void resolveInvitationTokenSignal(OAIConversation summary);
    void searchConversationsSignal(OAIConversationSearchResult summary);
    void unFlagItemSignal();
    void unPinAConversationSignal(OAIConversation summary);
    void unassignLabelSignal(OAILabel summary);
    void undoArchiveConversationSignal();
    void unlikeItemSignal();
    void unmoderateConversationSignal();
    void updateConversationCommunitySignal(OAIConversation summary);
    void updateConversationGroupSignal(OAIConversation summary);
    void updateProfileSignal(OAIUser summary);
    void updateTextItemSignal(OAIConversationItem summary);


    void addFavoriteSignalFull(OAIHttpRequestWorker *worker);
    void addLabelSignalFull(OAIHttpRequestWorker *worker, OAILabel summary);
    void addModeratorsSignalFull(OAIHttpRequestWorker *worker);
    void addParticipantCommunitySignalFull(OAIHttpRequestWorker *worker, OAIConversation summary);
    void addParticipantGroupSignalFull(OAIHttpRequestWorker *worker, OAIConversation summary);
    void addTextItemSignalFull(OAIHttpRequestWorker *worker, OAIConversationItem summary);
    void addTextItemWithParentSignalFull(OAIHttpRequestWorker *worker, OAIConversationItem summary);
    void archiveConversationSignalFull(OAIHttpRequestWorker *worker);
    void assignLabelSignalFull(OAIHttpRequestWorker *worker, OAILabel summary);
    void createCommunityConversationSignalFull(OAIHttpRequestWorker *worker, OAIConversation summary);
    void createDirectConversationSignalFull(OAIHttpRequestWorker *worker, OAIConversation summary);
    void createGroupConversationSignalFull(OAIHttpRequestWorker *worker, OAIConversation summary);
    void deleteFavoriteSignalFull(OAIHttpRequestWorker *worker);
    void deleteTextItemSignalFull(OAIHttpRequestWorker *worker, OAIConversationItem summary);
    void flagItemSignalFull(OAIHttpRequestWorker *worker);
    void getCommunityConversationsSignalFull(OAIHttpRequestWorker *worker, QList<OAIConversation> summary);
    void getConversationItemsSignalFull(OAIHttpRequestWorker *worker, QList<OAIConversationItem> summary);
    void getConversationbyIdSignalFull(OAIHttpRequestWorker *worker, OAIConversation summary);
    void getConversationsSignalFull(OAIHttpRequestWorker *worker, QList<OAIConversation> summary);
    void getConversationsByIdSignalFull(OAIHttpRequestWorker *worker, QList<OAIConversation> summary);
    void getConversationsByLabelSignalFull(OAIHttpRequestWorker *worker, OAIConversationsPage summary);
    void getDirectConversationSignalFull(OAIHttpRequestWorker *worker, OAIConversation summary);
    void getFavoriteConversationsSignalFull(OAIHttpRequestWorker *worker, QList<String> summary);
    void getFlagItemSignalFull(OAIHttpRequestWorker *worker, QList<OAIConversationItem> summary);
    void getFlagItemConvSignalFull(OAIHttpRequestWorker *worker, QList<OAIConversationItem> summary);
    void getJoinDetailsSignalFull(OAIHttpRequestWorker *worker, OAIConversationDetails summary);
    void getJoinDetailsMultipleSignalFull(OAIHttpRequestWorker *worker, QList<OAIConversationDetails> summary);
    void getParticipantsByConvIdSignalFull(OAIHttpRequestWorker *worker, QList<OAIConversationParticipantsList> summary);
    void getPinnedConversationsSignalFull(OAIHttpRequestWorker *worker, QList<OAIPinnedTopic> summary);
    void getSingleConversationtemSignalFull(OAIHttpRequestWorker *worker, OAIConversationItem summary);
    void joinCommunityConversationSignalFull(OAIHttpRequestWorker *worker, OAIConversation summary);
    void likeItemSignalFull(OAIHttpRequestWorker *worker);
    void moderateConversationSignalFull(OAIHttpRequestWorker *worker);
    void pinAConversationSignalFull(OAIHttpRequestWorker *worker, OAIConversation summary);
    void removeLabelSignalFull(OAIHttpRequestWorker *worker, OAILabel summary);
    void removeModeratorsSignalFull(OAIHttpRequestWorker *worker);
    void removeParticipantCommunitySignalFull(OAIHttpRequestWorker *worker, OAIConversation summary);
    void removeParticipantGroupSignalFull(OAIHttpRequestWorker *worker, OAIConversation summary);
    void resolveInvitationTokenSignalFull(OAIHttpRequestWorker *worker, OAIConversation summary);
    void searchConversationsSignalFull(OAIHttpRequestWorker *worker, OAIConversationSearchResult summary);
    void unFlagItemSignalFull(OAIHttpRequestWorker *worker);
    void unPinAConversationSignalFull(OAIHttpRequestWorker *worker, OAIConversation summary);
    void unassignLabelSignalFull(OAIHttpRequestWorker *worker, OAILabel summary);
    void undoArchiveConversationSignalFull(OAIHttpRequestWorker *worker);
    void unlikeItemSignalFull(OAIHttpRequestWorker *worker);
    void unmoderateConversationSignalFull(OAIHttpRequestWorker *worker);
    void updateConversationCommunitySignalFull(OAIHttpRequestWorker *worker, OAIConversation summary);
    void updateConversationGroupSignalFull(OAIHttpRequestWorker *worker, OAIConversation summary);
    void updateProfileSignalFull(OAIHttpRequestWorker *worker, OAIUser summary);
    void updateTextItemSignalFull(OAIHttpRequestWorker *worker, OAIConversationItem summary);

    Q_DECL_DEPRECATED_X("Use addFavoriteSignalError() instead")
    void addFavoriteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void addFavoriteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addLabelSignalError() instead")
    void addLabelSignalE(OAILabel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void addLabelSignalError(OAILabel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addModeratorsSignalError() instead")
    void addModeratorsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void addModeratorsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addParticipantCommunitySignalError() instead")
    void addParticipantCommunitySignalE(OAIConversation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void addParticipantCommunitySignalError(OAIConversation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addParticipantGroupSignalError() instead")
    void addParticipantGroupSignalE(OAIConversation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void addParticipantGroupSignalError(OAIConversation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addTextItemSignalError() instead")
    void addTextItemSignalE(OAIConversationItem summary, QNetworkReply::NetworkError error_type, QString error_str);
    void addTextItemSignalError(OAIConversationItem summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addTextItemWithParentSignalError() instead")
    void addTextItemWithParentSignalE(OAIConversationItem summary, QNetworkReply::NetworkError error_type, QString error_str);
    void addTextItemWithParentSignalError(OAIConversationItem summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use archiveConversationSignalError() instead")
    void archiveConversationSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void archiveConversationSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use assignLabelSignalError() instead")
    void assignLabelSignalE(OAILabel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void assignLabelSignalError(OAILabel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createCommunityConversationSignalError() instead")
    void createCommunityConversationSignalE(OAIConversation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createCommunityConversationSignalError(OAIConversation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createDirectConversationSignalError() instead")
    void createDirectConversationSignalE(OAIConversation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createDirectConversationSignalError(OAIConversation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createGroupConversationSignalError() instead")
    void createGroupConversationSignalE(OAIConversation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createGroupConversationSignalError(OAIConversation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteFavoriteSignalError() instead")
    void deleteFavoriteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteFavoriteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteTextItemSignalError() instead")
    void deleteTextItemSignalE(OAIConversationItem summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteTextItemSignalError(OAIConversationItem summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use flagItemSignalError() instead")
    void flagItemSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void flagItemSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCommunityConversationsSignalError() instead")
    void getCommunityConversationsSignalE(QList<OAIConversation> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCommunityConversationsSignalError(QList<OAIConversation> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getConversationItemsSignalError() instead")
    void getConversationItemsSignalE(QList<OAIConversationItem> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getConversationItemsSignalError(QList<OAIConversationItem> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getConversationbyIdSignalError() instead")
    void getConversationbyIdSignalE(OAIConversation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getConversationbyIdSignalError(OAIConversation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getConversationsSignalError() instead")
    void getConversationsSignalE(QList<OAIConversation> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getConversationsSignalError(QList<OAIConversation> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getConversationsByIdSignalError() instead")
    void getConversationsByIdSignalE(QList<OAIConversation> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getConversationsByIdSignalError(QList<OAIConversation> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getConversationsByLabelSignalError() instead")
    void getConversationsByLabelSignalE(OAIConversationsPage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getConversationsByLabelSignalError(OAIConversationsPage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDirectConversationSignalError() instead")
    void getDirectConversationSignalE(OAIConversation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDirectConversationSignalError(OAIConversation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getFavoriteConversationsSignalError() instead")
    void getFavoriteConversationsSignalE(QList<String> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getFavoriteConversationsSignalError(QList<String> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getFlagItemSignalError() instead")
    void getFlagItemSignalE(QList<OAIConversationItem> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getFlagItemSignalError(QList<OAIConversationItem> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getFlagItemConvSignalError() instead")
    void getFlagItemConvSignalE(QList<OAIConversationItem> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getFlagItemConvSignalError(QList<OAIConversationItem> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getJoinDetailsSignalError() instead")
    void getJoinDetailsSignalE(OAIConversationDetails summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getJoinDetailsSignalError(OAIConversationDetails summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getJoinDetailsMultipleSignalError() instead")
    void getJoinDetailsMultipleSignalE(QList<OAIConversationDetails> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getJoinDetailsMultipleSignalError(QList<OAIConversationDetails> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getParticipantsByConvIdSignalError() instead")
    void getParticipantsByConvIdSignalE(QList<OAIConversationParticipantsList> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getParticipantsByConvIdSignalError(QList<OAIConversationParticipantsList> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPinnedConversationsSignalError() instead")
    void getPinnedConversationsSignalE(QList<OAIPinnedTopic> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPinnedConversationsSignalError(QList<OAIPinnedTopic> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSingleConversationtemSignalError() instead")
    void getSingleConversationtemSignalE(OAIConversationItem summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSingleConversationtemSignalError(OAIConversationItem summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use joinCommunityConversationSignalError() instead")
    void joinCommunityConversationSignalE(OAIConversation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void joinCommunityConversationSignalError(OAIConversation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use likeItemSignalError() instead")
    void likeItemSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void likeItemSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use moderateConversationSignalError() instead")
    void moderateConversationSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void moderateConversationSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pinAConversationSignalError() instead")
    void pinAConversationSignalE(OAIConversation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void pinAConversationSignalError(OAIConversation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeLabelSignalError() instead")
    void removeLabelSignalE(OAILabel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void removeLabelSignalError(OAILabel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeModeratorsSignalError() instead")
    void removeModeratorsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void removeModeratorsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeParticipantCommunitySignalError() instead")
    void removeParticipantCommunitySignalE(OAIConversation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void removeParticipantCommunitySignalError(OAIConversation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeParticipantGroupSignalError() instead")
    void removeParticipantGroupSignalE(OAIConversation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void removeParticipantGroupSignalError(OAIConversation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use resolveInvitationTokenSignalError() instead")
    void resolveInvitationTokenSignalE(OAIConversation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void resolveInvitationTokenSignalError(OAIConversation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchConversationsSignalError() instead")
    void searchConversationsSignalE(OAIConversationSearchResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void searchConversationsSignalError(OAIConversationSearchResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use unFlagItemSignalError() instead")
    void unFlagItemSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void unFlagItemSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use unPinAConversationSignalError() instead")
    void unPinAConversationSignalE(OAIConversation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void unPinAConversationSignalError(OAIConversation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use unassignLabelSignalError() instead")
    void unassignLabelSignalE(OAILabel summary, QNetworkReply::NetworkError error_type, QString error_str);
    void unassignLabelSignalError(OAILabel summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use undoArchiveConversationSignalError() instead")
    void undoArchiveConversationSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void undoArchiveConversationSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use unlikeItemSignalError() instead")
    void unlikeItemSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void unlikeItemSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use unmoderateConversationSignalError() instead")
    void unmoderateConversationSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void unmoderateConversationSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateConversationCommunitySignalError() instead")
    void updateConversationCommunitySignalE(OAIConversation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateConversationCommunitySignalError(OAIConversation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateConversationGroupSignalError() instead")
    void updateConversationGroupSignalE(OAIConversation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateConversationGroupSignalError(OAIConversation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateProfileSignalError() instead")
    void updateProfileSignalE(OAIUser summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateProfileSignalError(OAIUser summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateTextItemSignalError() instead")
    void updateTextItemSignalE(OAIConversationItem summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateTextItemSignalError(OAIConversationItem summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use addFavoriteSignalErrorFull() instead")
    void addFavoriteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addFavoriteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addLabelSignalErrorFull() instead")
    void addLabelSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addLabelSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addModeratorsSignalErrorFull() instead")
    void addModeratorsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addModeratorsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addParticipantCommunitySignalErrorFull() instead")
    void addParticipantCommunitySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addParticipantCommunitySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addParticipantGroupSignalErrorFull() instead")
    void addParticipantGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addParticipantGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addTextItemSignalErrorFull() instead")
    void addTextItemSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addTextItemSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addTextItemWithParentSignalErrorFull() instead")
    void addTextItemWithParentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addTextItemWithParentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use archiveConversationSignalErrorFull() instead")
    void archiveConversationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void archiveConversationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use assignLabelSignalErrorFull() instead")
    void assignLabelSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void assignLabelSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createCommunityConversationSignalErrorFull() instead")
    void createCommunityConversationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createCommunityConversationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createDirectConversationSignalErrorFull() instead")
    void createDirectConversationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createDirectConversationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createGroupConversationSignalErrorFull() instead")
    void createGroupConversationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createGroupConversationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteFavoriteSignalErrorFull() instead")
    void deleteFavoriteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteFavoriteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteTextItemSignalErrorFull() instead")
    void deleteTextItemSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteTextItemSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use flagItemSignalErrorFull() instead")
    void flagItemSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void flagItemSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCommunityConversationsSignalErrorFull() instead")
    void getCommunityConversationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCommunityConversationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getConversationItemsSignalErrorFull() instead")
    void getConversationItemsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getConversationItemsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getConversationbyIdSignalErrorFull() instead")
    void getConversationbyIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getConversationbyIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getConversationsSignalErrorFull() instead")
    void getConversationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getConversationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getConversationsByIdSignalErrorFull() instead")
    void getConversationsByIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getConversationsByIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getConversationsByLabelSignalErrorFull() instead")
    void getConversationsByLabelSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getConversationsByLabelSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDirectConversationSignalErrorFull() instead")
    void getDirectConversationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDirectConversationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getFavoriteConversationsSignalErrorFull() instead")
    void getFavoriteConversationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getFavoriteConversationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getFlagItemSignalErrorFull() instead")
    void getFlagItemSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getFlagItemSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getFlagItemConvSignalErrorFull() instead")
    void getFlagItemConvSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getFlagItemConvSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getJoinDetailsSignalErrorFull() instead")
    void getJoinDetailsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getJoinDetailsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getJoinDetailsMultipleSignalErrorFull() instead")
    void getJoinDetailsMultipleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getJoinDetailsMultipleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getParticipantsByConvIdSignalErrorFull() instead")
    void getParticipantsByConvIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getParticipantsByConvIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPinnedConversationsSignalErrorFull() instead")
    void getPinnedConversationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPinnedConversationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSingleConversationtemSignalErrorFull() instead")
    void getSingleConversationtemSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSingleConversationtemSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use joinCommunityConversationSignalErrorFull() instead")
    void joinCommunityConversationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void joinCommunityConversationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use likeItemSignalErrorFull() instead")
    void likeItemSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void likeItemSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use moderateConversationSignalErrorFull() instead")
    void moderateConversationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void moderateConversationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use pinAConversationSignalErrorFull() instead")
    void pinAConversationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void pinAConversationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeLabelSignalErrorFull() instead")
    void removeLabelSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void removeLabelSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeModeratorsSignalErrorFull() instead")
    void removeModeratorsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void removeModeratorsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeParticipantCommunitySignalErrorFull() instead")
    void removeParticipantCommunitySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void removeParticipantCommunitySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeParticipantGroupSignalErrorFull() instead")
    void removeParticipantGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void removeParticipantGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use resolveInvitationTokenSignalErrorFull() instead")
    void resolveInvitationTokenSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void resolveInvitationTokenSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchConversationsSignalErrorFull() instead")
    void searchConversationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void searchConversationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use unFlagItemSignalErrorFull() instead")
    void unFlagItemSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void unFlagItemSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use unPinAConversationSignalErrorFull() instead")
    void unPinAConversationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void unPinAConversationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use unassignLabelSignalErrorFull() instead")
    void unassignLabelSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void unassignLabelSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use undoArchiveConversationSignalErrorFull() instead")
    void undoArchiveConversationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void undoArchiveConversationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use unlikeItemSignalErrorFull() instead")
    void unlikeItemSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void unlikeItemSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use unmoderateConversationSignalErrorFull() instead")
    void unmoderateConversationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void unmoderateConversationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateConversationCommunitySignalErrorFull() instead")
    void updateConversationCommunitySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateConversationCommunitySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateConversationGroupSignalErrorFull() instead")
    void updateConversationGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateConversationGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateProfileSignalErrorFull() instead")
    void updateProfileSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateProfileSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateTextItemSignalErrorFull() instead")
    void updateTextItemSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateTextItemSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
