/**
 * REST API Version 2
 * Circuit REST API to interact with the Circuit system.  [Learn more about the Circuit Development Community](https://www.circuit.com/web/developers/home)
 *
 * The version of the OpenAPI document: 2.9.235
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIIncomingWebhooksApi_H
#define OAI_OAIIncomingWebhooksApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIIncomingWebhook.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIIncomingWebhooksApi : public QObject {
    Q_OBJECT

public:
    OAIIncomingWebhooksApi(const int timeOut = 0);
    ~OAIIncomingWebhooksApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  conversation_id QString [required]
    * @param[in]  name QString [optional]
    * @param[in]  user_id QString [optional]
    * @param[in]  description QString [optional]
    */
    virtual void createIncomingWebhook(const QString &conversation_id, const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &user_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &description = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  webhook_id QString [required]
    */
    virtual void deleteIncomingWebhook(const QString &webhook_id);

    /**
    * @param[in]  user_id QString [required]
    * @param[in]  pagesize double [optional]
    * @param[in]  searchpointer QString [optional]
    */
    virtual void getIncomingWebhookByUser(const QString &user_id, const ::OpenAPI::OptionalParam<double> &pagesize = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &searchpointer = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  webhook_id QString [required]
    * @param[in]  file_url QString [optional]
    * @param[in]  filename QString [optional]
    * @param[in]  markdown bool [optional]
    * @param[in]  subject QString [optional]
    * @param[in]  text QString [optional]
    */
    virtual void postWebhookAsSlackMessage(const QString &webhook_id, const ::OpenAPI::OptionalParam<QString> &file_url = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &filename = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &markdown = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &subject = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &text = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createIncomingWebhookCallback(OAIHttpRequestWorker *worker);
    void deleteIncomingWebhookCallback(OAIHttpRequestWorker *worker);
    void getIncomingWebhookByUserCallback(OAIHttpRequestWorker *worker);
    void postWebhookAsSlackMessageCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createIncomingWebhookSignal(OAIIncomingWebhook summary);
    void deleteIncomingWebhookSignal();
    void getIncomingWebhookByUserSignal(QList<OAIIncomingWebhook> summary);
    void postWebhookAsSlackMessageSignal();


    void createIncomingWebhookSignalFull(OAIHttpRequestWorker *worker, OAIIncomingWebhook summary);
    void deleteIncomingWebhookSignalFull(OAIHttpRequestWorker *worker);
    void getIncomingWebhookByUserSignalFull(OAIHttpRequestWorker *worker, QList<OAIIncomingWebhook> summary);
    void postWebhookAsSlackMessageSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use createIncomingWebhookSignalError() instead")
    void createIncomingWebhookSignalE(OAIIncomingWebhook summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createIncomingWebhookSignalError(OAIIncomingWebhook summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteIncomingWebhookSignalError() instead")
    void deleteIncomingWebhookSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteIncomingWebhookSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getIncomingWebhookByUserSignalError() instead")
    void getIncomingWebhookByUserSignalE(QList<OAIIncomingWebhook> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getIncomingWebhookByUserSignalError(QList<OAIIncomingWebhook> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postWebhookAsSlackMessageSignalError() instead")
    void postWebhookAsSlackMessageSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void postWebhookAsSlackMessageSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createIncomingWebhookSignalErrorFull() instead")
    void createIncomingWebhookSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createIncomingWebhookSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteIncomingWebhookSignalErrorFull() instead")
    void deleteIncomingWebhookSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteIncomingWebhookSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getIncomingWebhookByUserSignalErrorFull() instead")
    void getIncomingWebhookByUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getIncomingWebhookByUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postWebhookAsSlackMessageSignalErrorFull() instead")
    void postWebhookAsSlackMessageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postWebhookAsSlackMessageSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
