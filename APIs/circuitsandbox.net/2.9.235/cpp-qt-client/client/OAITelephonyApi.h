/**
 * REST API Version 2
 * Circuit REST API to interact with the Circuit system.  [Learn more about the Circuit Development Community](https://www.circuit.com/web/developers/home)
 *
 * The version of the OpenAPI document: 2.9.235
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAITelephonyApi_H
#define OAI_OAITelephonyApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIConversationItem.h"
#include "OAIV2DistributedClientInfo.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAITelephonyApi : public QObject {
    Q_OBJECT

public:
    OAITelephonyApi(const int timeOut = 0);
    ~OAITelephonyApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  telephony_conversation_id QString [required]
    * @param[in]  timestamp double [optional]
    * @param[in]  number_of_entries double [optional]
    * @param[in]  direction QString [optional]
    * @param[in]  journal_filter QString [optional]
    */
    virtual void getJournalEntries(const QString &telephony_conversation_id, const ::OpenAPI::OptionalParam<double> &timestamp = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &number_of_entries = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &direction = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &journal_filter = ::OpenAPI::OptionalParam<QString>());


    virtual void v2GetDeviceInfos();


    virtual void v2GetTelephonyConversationId();


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void getJournalEntriesCallback(OAIHttpRequestWorker *worker);
    void v2GetDeviceInfosCallback(OAIHttpRequestWorker *worker);
    void v2GetTelephonyConversationIdCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void getJournalEntriesSignal(QList<OAIConversationItem> summary);
    void v2GetDeviceInfosSignal(QList<OAIV2DistributedClientInfo> summary);
    void v2GetTelephonyConversationIdSignal();


    void getJournalEntriesSignalFull(OAIHttpRequestWorker *worker, QList<OAIConversationItem> summary);
    void v2GetDeviceInfosSignalFull(OAIHttpRequestWorker *worker, QList<OAIV2DistributedClientInfo> summary);
    void v2GetTelephonyConversationIdSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use getJournalEntriesSignalError() instead")
    void getJournalEntriesSignalE(QList<OAIConversationItem> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getJournalEntriesSignalError(QList<OAIConversationItem> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v2GetDeviceInfosSignalError() instead")
    void v2GetDeviceInfosSignalE(QList<OAIV2DistributedClientInfo> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void v2GetDeviceInfosSignalError(QList<OAIV2DistributedClientInfo> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v2GetTelephonyConversationIdSignalError() instead")
    void v2GetTelephonyConversationIdSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void v2GetTelephonyConversationIdSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use getJournalEntriesSignalErrorFull() instead")
    void getJournalEntriesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getJournalEntriesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v2GetDeviceInfosSignalErrorFull() instead")
    void v2GetDeviceInfosSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void v2GetDeviceInfosSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v2GetTelephonyConversationIdSignalErrorFull() instead")
    void v2GetTelephonyConversationIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void v2GetTelephonyConversationIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
