/**
 * REST API Version 2
 * Circuit REST API to interact with the Circuit system.  [Learn more about the Circuit Development Community](https://www.circuit.com/web/developers/home)
 *
 * The version of the OpenAPI document: 2.9.235
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISystemItem.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISystemItem::OAISystemItem(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISystemItem::OAISystemItem() {
    this->initializeModel();
}

OAISystemItem::~OAISystemItem() {}

void OAISystemItem::initializeModel() {

    m_affected_participants_isSet = false;
    m_affected_participants_isValid = false;

    m_new_topic_isSet = false;
    m_new_topic_isValid = false;

    m_old_topic_isSet = false;
    m_old_topic_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAISystemItem::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISystemItem::fromJsonObject(QJsonObject json) {

    m_affected_participants_isValid = ::OpenAPI::fromJsonValue(m_affected_participants, json[QString("affectedParticipants")]);
    m_affected_participants_isSet = !json[QString("affectedParticipants")].isNull() && m_affected_participants_isValid;

    m_new_topic_isValid = ::OpenAPI::fromJsonValue(m_new_topic, json[QString("newTopic")]);
    m_new_topic_isSet = !json[QString("newTopic")].isNull() && m_new_topic_isValid;

    m_old_topic_isValid = ::OpenAPI::fromJsonValue(m_old_topic, json[QString("oldTopic")]);
    m_old_topic_isSet = !json[QString("oldTopic")].isNull() && m_old_topic_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAISystemItem::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISystemItem::asJsonObject() const {
    QJsonObject obj;
    if (m_affected_participants.size() > 0) {
        obj.insert(QString("affectedParticipants"), ::OpenAPI::toJsonValue(m_affected_participants));
    }
    if (m_new_topic_isSet) {
        obj.insert(QString("newTopic"), ::OpenAPI::toJsonValue(m_new_topic));
    }
    if (m_old_topic_isSet) {
        obj.insert(QString("oldTopic"), ::OpenAPI::toJsonValue(m_old_topic));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QList<QString> OAISystemItem::getAffectedParticipants() const {
    return m_affected_participants;
}
void OAISystemItem::setAffectedParticipants(const QList<QString> &affected_participants) {
    m_affected_participants = affected_participants;
    m_affected_participants_isSet = true;
}

bool OAISystemItem::is_affected_participants_Set() const{
    return m_affected_participants_isSet;
}

bool OAISystemItem::is_affected_participants_Valid() const{
    return m_affected_participants_isValid;
}

QString OAISystemItem::getNewTopic() const {
    return m_new_topic;
}
void OAISystemItem::setNewTopic(const QString &new_topic) {
    m_new_topic = new_topic;
    m_new_topic_isSet = true;
}

bool OAISystemItem::is_new_topic_Set() const{
    return m_new_topic_isSet;
}

bool OAISystemItem::is_new_topic_Valid() const{
    return m_new_topic_isValid;
}

QString OAISystemItem::getOldTopic() const {
    return m_old_topic;
}
void OAISystemItem::setOldTopic(const QString &old_topic) {
    m_old_topic = old_topic;
    m_old_topic_isSet = true;
}

bool OAISystemItem::is_old_topic_Set() const{
    return m_old_topic_isSet;
}

bool OAISystemItem::is_old_topic_Valid() const{
    return m_old_topic_isValid;
}

QString OAISystemItem::getType() const {
    return m_type;
}
void OAISystemItem::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAISystemItem::is_type_Set() const{
    return m_type_isSet;
}

bool OAISystemItem::is_type_Valid() const{
    return m_type_isValid;
}

bool OAISystemItem::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_affected_participants.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_new_topic_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_old_topic_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISystemItem::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
