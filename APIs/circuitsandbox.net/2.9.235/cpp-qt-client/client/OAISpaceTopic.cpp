/**
 * REST API Version 2
 * Circuit REST API to interact with the Circuit system.  [Learn more about the Circuit Development Community](https://www.circuit.com/web/developers/home)
 *
 * The version of the OpenAPI document: 2.9.235
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISpaceTopic.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISpaceTopic::OAISpaceTopic(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISpaceTopic::OAISpaceTopic() {
    this->initializeModel();
}

OAISpaceTopic::~OAISpaceTopic() {}

void OAISpaceTopic::initializeModel() {

    m_last_content_creation_time_isSet = false;
    m_last_content_creation_time_isValid = false;

    m_last_content_creator_id_isSet = false;
    m_last_content_creator_id_isValid = false;

    m_number_of_replies_isSet = false;
    m_number_of_replies_isValid = false;

    m_pinned_isSet = false;
    m_pinned_isValid = false;

    m_space_item_isSet = false;
    m_space_item_isValid = false;

    m_subject_isSet = false;
    m_subject_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAISpaceTopic::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISpaceTopic::fromJsonObject(QJsonObject json) {

    m_last_content_creation_time_isValid = ::OpenAPI::fromJsonValue(m_last_content_creation_time, json[QString("lastContentCreationTime")]);
    m_last_content_creation_time_isSet = !json[QString("lastContentCreationTime")].isNull() && m_last_content_creation_time_isValid;

    m_last_content_creator_id_isValid = ::OpenAPI::fromJsonValue(m_last_content_creator_id, json[QString("lastContentCreatorId")]);
    m_last_content_creator_id_isSet = !json[QString("lastContentCreatorId")].isNull() && m_last_content_creator_id_isValid;

    m_number_of_replies_isValid = ::OpenAPI::fromJsonValue(m_number_of_replies, json[QString("numberOfReplies")]);
    m_number_of_replies_isSet = !json[QString("numberOfReplies")].isNull() && m_number_of_replies_isValid;

    m_pinned_isValid = ::OpenAPI::fromJsonValue(m_pinned, json[QString("pinned")]);
    m_pinned_isSet = !json[QString("pinned")].isNull() && m_pinned_isValid;

    m_space_item_isValid = ::OpenAPI::fromJsonValue(m_space_item, json[QString("spaceItem")]);
    m_space_item_isSet = !json[QString("spaceItem")].isNull() && m_space_item_isValid;

    m_subject_isValid = ::OpenAPI::fromJsonValue(m_subject, json[QString("subject")]);
    m_subject_isSet = !json[QString("subject")].isNull() && m_subject_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;
}

QString OAISpaceTopic::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISpaceTopic::asJsonObject() const {
    QJsonObject obj;
    if (m_last_content_creation_time_isSet) {
        obj.insert(QString("lastContentCreationTime"), ::OpenAPI::toJsonValue(m_last_content_creation_time));
    }
    if (m_last_content_creator_id_isSet) {
        obj.insert(QString("lastContentCreatorId"), ::OpenAPI::toJsonValue(m_last_content_creator_id));
    }
    if (m_number_of_replies_isSet) {
        obj.insert(QString("numberOfReplies"), ::OpenAPI::toJsonValue(m_number_of_replies));
    }
    if (m_pinned_isSet) {
        obj.insert(QString("pinned"), ::OpenAPI::toJsonValue(m_pinned));
    }
    if (m_space_item.isSet()) {
        obj.insert(QString("spaceItem"), ::OpenAPI::toJsonValue(m_space_item));
    }
    if (m_subject_isSet) {
        obj.insert(QString("subject"), ::OpenAPI::toJsonValue(m_subject));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

double OAISpaceTopic::getLastContentCreationTime() const {
    return m_last_content_creation_time;
}
void OAISpaceTopic::setLastContentCreationTime(const double &last_content_creation_time) {
    m_last_content_creation_time = last_content_creation_time;
    m_last_content_creation_time_isSet = true;
}

bool OAISpaceTopic::is_last_content_creation_time_Set() const{
    return m_last_content_creation_time_isSet;
}

bool OAISpaceTopic::is_last_content_creation_time_Valid() const{
    return m_last_content_creation_time_isValid;
}

QString OAISpaceTopic::getLastContentCreatorId() const {
    return m_last_content_creator_id;
}
void OAISpaceTopic::setLastContentCreatorId(const QString &last_content_creator_id) {
    m_last_content_creator_id = last_content_creator_id;
    m_last_content_creator_id_isSet = true;
}

bool OAISpaceTopic::is_last_content_creator_id_Set() const{
    return m_last_content_creator_id_isSet;
}

bool OAISpaceTopic::is_last_content_creator_id_Valid() const{
    return m_last_content_creator_id_isValid;
}

double OAISpaceTopic::getNumberOfReplies() const {
    return m_number_of_replies;
}
void OAISpaceTopic::setNumberOfReplies(const double &number_of_replies) {
    m_number_of_replies = number_of_replies;
    m_number_of_replies_isSet = true;
}

bool OAISpaceTopic::is_number_of_replies_Set() const{
    return m_number_of_replies_isSet;
}

bool OAISpaceTopic::is_number_of_replies_Valid() const{
    return m_number_of_replies_isValid;
}

bool OAISpaceTopic::isPinned() const {
    return m_pinned;
}
void OAISpaceTopic::setPinned(const bool &pinned) {
    m_pinned = pinned;
    m_pinned_isSet = true;
}

bool OAISpaceTopic::is_pinned_Set() const{
    return m_pinned_isSet;
}

bool OAISpaceTopic::is_pinned_Valid() const{
    return m_pinned_isValid;
}

OAISpaceItem OAISpaceTopic::getSpaceItem() const {
    return m_space_item;
}
void OAISpaceTopic::setSpaceItem(const OAISpaceItem &space_item) {
    m_space_item = space_item;
    m_space_item_isSet = true;
}

bool OAISpaceTopic::is_space_item_Set() const{
    return m_space_item_isSet;
}

bool OAISpaceTopic::is_space_item_Valid() const{
    return m_space_item_isValid;
}

QString OAISpaceTopic::getSubject() const {
    return m_subject;
}
void OAISpaceTopic::setSubject(const QString &subject) {
    m_subject = subject;
    m_subject_isSet = true;
}

bool OAISpaceTopic::is_subject_Set() const{
    return m_subject_isSet;
}

bool OAISpaceTopic::is_subject_Valid() const{
    return m_subject_isValid;
}

QList<QString> OAISpaceTopic::getTags() const {
    return m_tags;
}
void OAISpaceTopic::setTags(const QList<QString> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAISpaceTopic::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAISpaceTopic::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAISpaceTopic::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_last_content_creation_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_content_creator_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_of_replies_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pinned_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_space_item.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_subject_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISpaceTopic::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
