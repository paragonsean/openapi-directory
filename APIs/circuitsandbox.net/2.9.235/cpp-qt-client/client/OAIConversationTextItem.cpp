/**
 * REST API Version 2
 * Circuit REST API to interact with the Circuit system.  [Learn more about the Circuit Development Community](https://www.circuit.com/web/developers/home)
 *
 * The version of the OpenAPI document: 2.9.235
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConversationTextItem.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConversationTextItem::OAIConversationTextItem(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConversationTextItem::OAIConversationTextItem() {
    this->initializeModel();
}

OAIConversationTextItem::~OAIConversationTextItem() {}

void OAIConversationTextItem::initializeModel() {

    m_content_isSet = false;
    m_content_isValid = false;

    m_content_type_isSet = false;
    m_content_type_isValid = false;

    m_form_meta_data_isSet = false;
    m_form_meta_data_isValid = false;

    m_is_webhook_message_isSet = false;
    m_is_webhook_message_isValid = false;

    m_liked_user_ids_isSet = false;
    m_liked_user_ids_isValid = false;

    m_parent_id_isSet = false;
    m_parent_id_isValid = false;

    m_preview_isSet = false;
    m_preview_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_subject_isSet = false;
    m_subject_isValid = false;
}

void OAIConversationTextItem::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIConversationTextItem::fromJsonObject(QJsonObject json) {

    m_content_isValid = ::OpenAPI::fromJsonValue(m_content, json[QString("content")]);
    m_content_isSet = !json[QString("content")].isNull() && m_content_isValid;

    m_content_type_isValid = ::OpenAPI::fromJsonValue(m_content_type, json[QString("contentType")]);
    m_content_type_isSet = !json[QString("contentType")].isNull() && m_content_type_isValid;

    m_form_meta_data_isValid = ::OpenAPI::fromJsonValue(m_form_meta_data, json[QString("formMetaData")]);
    m_form_meta_data_isSet = !json[QString("formMetaData")].isNull() && m_form_meta_data_isValid;

    m_is_webhook_message_isValid = ::OpenAPI::fromJsonValue(m_is_webhook_message, json[QString("isWebhookMessage")]);
    m_is_webhook_message_isSet = !json[QString("isWebhookMessage")].isNull() && m_is_webhook_message_isValid;

    m_liked_user_ids_isValid = ::OpenAPI::fromJsonValue(m_liked_user_ids, json[QString("likedUserIds")]);
    m_liked_user_ids_isSet = !json[QString("likedUserIds")].isNull() && m_liked_user_ids_isValid;

    m_parent_id_isValid = ::OpenAPI::fromJsonValue(m_parent_id, json[QString("parentId")]);
    m_parent_id_isSet = !json[QString("parentId")].isNull() && m_parent_id_isValid;

    m_preview_isValid = ::OpenAPI::fromJsonValue(m_preview, json[QString("preview")]);
    m_preview_isSet = !json[QString("preview")].isNull() && m_preview_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_subject_isValid = ::OpenAPI::fromJsonValue(m_subject, json[QString("subject")]);
    m_subject_isSet = !json[QString("subject")].isNull() && m_subject_isValid;
}

QString OAIConversationTextItem::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIConversationTextItem::asJsonObject() const {
    QJsonObject obj;
    if (m_content_isSet) {
        obj.insert(QString("content"), ::OpenAPI::toJsonValue(m_content));
    }
    if (m_content_type_isSet) {
        obj.insert(QString("contentType"), ::OpenAPI::toJsonValue(m_content_type));
    }
    if (m_form_meta_data_isSet) {
        obj.insert(QString("formMetaData"), ::OpenAPI::toJsonValue(m_form_meta_data));
    }
    if (m_is_webhook_message_isSet) {
        obj.insert(QString("isWebhookMessage"), ::OpenAPI::toJsonValue(m_is_webhook_message));
    }
    if (m_liked_user_ids.size() > 0) {
        obj.insert(QString("likedUserIds"), ::OpenAPI::toJsonValue(m_liked_user_ids));
    }
    if (m_parent_id_isSet) {
        obj.insert(QString("parentId"), ::OpenAPI::toJsonValue(m_parent_id));
    }
    if (m_preview.isSet()) {
        obj.insert(QString("preview"), ::OpenAPI::toJsonValue(m_preview));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_subject_isSet) {
        obj.insert(QString("subject"), ::OpenAPI::toJsonValue(m_subject));
    }
    return obj;
}

QString OAIConversationTextItem::getContent() const {
    return m_content;
}
void OAIConversationTextItem::setContent(const QString &content) {
    m_content = content;
    m_content_isSet = true;
}

bool OAIConversationTextItem::is_content_Set() const{
    return m_content_isSet;
}

bool OAIConversationTextItem::is_content_Valid() const{
    return m_content_isValid;
}

QString OAIConversationTextItem::getContentType() const {
    return m_content_type;
}
void OAIConversationTextItem::setContentType(const QString &content_type) {
    m_content_type = content_type;
    m_content_type_isSet = true;
}

bool OAIConversationTextItem::is_content_type_Set() const{
    return m_content_type_isSet;
}

bool OAIConversationTextItem::is_content_type_Valid() const{
    return m_content_type_isValid;
}

QString OAIConversationTextItem::getFormMetaData() const {
    return m_form_meta_data;
}
void OAIConversationTextItem::setFormMetaData(const QString &form_meta_data) {
    m_form_meta_data = form_meta_data;
    m_form_meta_data_isSet = true;
}

bool OAIConversationTextItem::is_form_meta_data_Set() const{
    return m_form_meta_data_isSet;
}

bool OAIConversationTextItem::is_form_meta_data_Valid() const{
    return m_form_meta_data_isValid;
}

bool OAIConversationTextItem::isIsWebhookMessage() const {
    return m_is_webhook_message;
}
void OAIConversationTextItem::setIsWebhookMessage(const bool &is_webhook_message) {
    m_is_webhook_message = is_webhook_message;
    m_is_webhook_message_isSet = true;
}

bool OAIConversationTextItem::is_is_webhook_message_Set() const{
    return m_is_webhook_message_isSet;
}

bool OAIConversationTextItem::is_is_webhook_message_Valid() const{
    return m_is_webhook_message_isValid;
}

QList<QString> OAIConversationTextItem::getLikedUserIds() const {
    return m_liked_user_ids;
}
void OAIConversationTextItem::setLikedUserIds(const QList<QString> &liked_user_ids) {
    m_liked_user_ids = liked_user_ids;
    m_liked_user_ids_isSet = true;
}

bool OAIConversationTextItem::is_liked_user_ids_Set() const{
    return m_liked_user_ids_isSet;
}

bool OAIConversationTextItem::is_liked_user_ids_Valid() const{
    return m_liked_user_ids_isValid;
}

QString OAIConversationTextItem::getParentId() const {
    return m_parent_id;
}
void OAIConversationTextItem::setParentId(const QString &parent_id) {
    m_parent_id = parent_id;
    m_parent_id_isSet = true;
}

bool OAIConversationTextItem::is_parent_id_Set() const{
    return m_parent_id_isSet;
}

bool OAIConversationTextItem::is_parent_id_Valid() const{
    return m_parent_id_isValid;
}

OAIPreview OAIConversationTextItem::getPreview() const {
    return m_preview;
}
void OAIConversationTextItem::setPreview(const OAIPreview &preview) {
    m_preview = preview;
    m_preview_isSet = true;
}

bool OAIConversationTextItem::is_preview_Set() const{
    return m_preview_isSet;
}

bool OAIConversationTextItem::is_preview_Valid() const{
    return m_preview_isValid;
}

QString OAIConversationTextItem::getState() const {
    return m_state;
}
void OAIConversationTextItem::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIConversationTextItem::is_state_Set() const{
    return m_state_isSet;
}

bool OAIConversationTextItem::is_state_Valid() const{
    return m_state_isValid;
}

QString OAIConversationTextItem::getSubject() const {
    return m_subject;
}
void OAIConversationTextItem::setSubject(const QString &subject) {
    m_subject = subject;
    m_subject_isSet = true;
}

bool OAIConversationTextItem::is_subject_Set() const{
    return m_subject_isSet;
}

bool OAIConversationTextItem::is_subject_Valid() const{
    return m_subject_isValid;
}

bool OAIConversationTextItem::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_content_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_content_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_form_meta_data_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_webhook_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_liked_user_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_preview.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subject_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIConversationTextItem::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
