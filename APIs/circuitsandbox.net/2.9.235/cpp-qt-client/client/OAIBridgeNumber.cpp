/**
 * REST API Version 2
 * Circuit REST API to interact with the Circuit system.  [Learn more about the Circuit Development Community](https://www.circuit.com/web/developers/home)
 *
 * The version of the OpenAPI document: 2.9.235
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBridgeNumber.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBridgeNumber::OAIBridgeNumber(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBridgeNumber::OAIBridgeNumber() {
    this->initializeModel();
}

OAIBridgeNumber::~OAIBridgeNumber() {}

void OAIBridgeNumber::initializeModel() {

    m_bridge_number_isSet = false;
    m_bridge_number_isValid = false;

    m_country_isSet = false;
    m_country_isValid = false;

    m_is_most_used_isSet = false;
    m_is_most_used_isValid = false;

    m_locale_isSet = false;
    m_locale_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIBridgeNumber::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBridgeNumber::fromJsonObject(QJsonObject json) {

    m_bridge_number_isValid = ::OpenAPI::fromJsonValue(m_bridge_number, json[QString("bridgeNumber")]);
    m_bridge_number_isSet = !json[QString("bridgeNumber")].isNull() && m_bridge_number_isValid;

    m_country_isValid = ::OpenAPI::fromJsonValue(m_country, json[QString("country")]);
    m_country_isSet = !json[QString("country")].isNull() && m_country_isValid;

    m_is_most_used_isValid = ::OpenAPI::fromJsonValue(m_is_most_used, json[QString("isMostUsed")]);
    m_is_most_used_isSet = !json[QString("isMostUsed")].isNull() && m_is_most_used_isValid;

    m_locale_isValid = ::OpenAPI::fromJsonValue(m_locale, json[QString("locale")]);
    m_locale_isSet = !json[QString("locale")].isNull() && m_locale_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIBridgeNumber::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBridgeNumber::asJsonObject() const {
    QJsonObject obj;
    if (m_bridge_number_isSet) {
        obj.insert(QString("bridgeNumber"), ::OpenAPI::toJsonValue(m_bridge_number));
    }
    if (m_country_isSet) {
        obj.insert(QString("country"), ::OpenAPI::toJsonValue(m_country));
    }
    if (m_is_most_used_isSet) {
        obj.insert(QString("isMostUsed"), ::OpenAPI::toJsonValue(m_is_most_used));
    }
    if (m_locale_isSet) {
        obj.insert(QString("locale"), ::OpenAPI::toJsonValue(m_locale));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIBridgeNumber::getBridgeNumber() const {
    return m_bridge_number;
}
void OAIBridgeNumber::setBridgeNumber(const QString &bridge_number) {
    m_bridge_number = bridge_number;
    m_bridge_number_isSet = true;
}

bool OAIBridgeNumber::is_bridge_number_Set() const{
    return m_bridge_number_isSet;
}

bool OAIBridgeNumber::is_bridge_number_Valid() const{
    return m_bridge_number_isValid;
}

QString OAIBridgeNumber::getCountry() const {
    return m_country;
}
void OAIBridgeNumber::setCountry(const QString &country) {
    m_country = country;
    m_country_isSet = true;
}

bool OAIBridgeNumber::is_country_Set() const{
    return m_country_isSet;
}

bool OAIBridgeNumber::is_country_Valid() const{
    return m_country_isValid;
}

bool OAIBridgeNumber::isIsMostUsed() const {
    return m_is_most_used;
}
void OAIBridgeNumber::setIsMostUsed(const bool &is_most_used) {
    m_is_most_used = is_most_used;
    m_is_most_used_isSet = true;
}

bool OAIBridgeNumber::is_is_most_used_Set() const{
    return m_is_most_used_isSet;
}

bool OAIBridgeNumber::is_is_most_used_Valid() const{
    return m_is_most_used_isValid;
}

QString OAIBridgeNumber::getLocale() const {
    return m_locale;
}
void OAIBridgeNumber::setLocale(const QString &locale) {
    m_locale = locale;
    m_locale_isSet = true;
}

bool OAIBridgeNumber::is_locale_Set() const{
    return m_locale_isSet;
}

bool OAIBridgeNumber::is_locale_Valid() const{
    return m_locale_isValid;
}

QString OAIBridgeNumber::getName() const {
    return m_name;
}
void OAIBridgeNumber::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIBridgeNumber::is_name_Set() const{
    return m_name_isSet;
}

bool OAIBridgeNumber::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIBridgeNumber::getType() const {
    return m_type;
}
void OAIBridgeNumber::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIBridgeNumber::is_type_Set() const{
    return m_type_isSet;
}

bool OAIBridgeNumber::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIBridgeNumber::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bridge_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_most_used_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_locale_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBridgeNumber::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
