# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.space_item import SpaceItem
from openapi_server import util


class SpaceTopic(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, last_content_creation_time: float=None, last_content_creator_id: str=None, number_of_replies: float=None, pinned: bool=None, space_item: SpaceItem=None, subject: str=None, tags: List[str]=None):
        """SpaceTopic - a model defined in OpenAPI

        :param last_content_creation_time: The last_content_creation_time of this SpaceTopic.
        :param last_content_creator_id: The last_content_creator_id of this SpaceTopic.
        :param number_of_replies: The number_of_replies of this SpaceTopic.
        :param pinned: The pinned of this SpaceTopic.
        :param space_item: The space_item of this SpaceTopic.
        :param subject: The subject of this SpaceTopic.
        :param tags: The tags of this SpaceTopic.
        """
        self.openapi_types = {
            'last_content_creation_time': float,
            'last_content_creator_id': str,
            'number_of_replies': float,
            'pinned': bool,
            'space_item': SpaceItem,
            'subject': str,
            'tags': List[str]
        }

        self.attribute_map = {
            'last_content_creation_time': 'lastContentCreationTime',
            'last_content_creator_id': 'lastContentCreatorId',
            'number_of_replies': 'numberOfReplies',
            'pinned': 'pinned',
            'space_item': 'spaceItem',
            'subject': 'subject',
            'tags': 'tags'
        }

        self._last_content_creation_time = last_content_creation_time
        self._last_content_creator_id = last_content_creator_id
        self._number_of_replies = number_of_replies
        self._pinned = pinned
        self._space_item = space_item
        self._subject = subject
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SpaceTopic':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SpaceTopic of this SpaceTopic.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def last_content_creation_time(self):
        """Gets the last_content_creation_time of this SpaceTopic.

        The last time new content was created

        :return: The last_content_creation_time of this SpaceTopic.
        :rtype: float
        """
        return self._last_content_creation_time

    @last_content_creation_time.setter
    def last_content_creation_time(self, last_content_creation_time):
        """Sets the last_content_creation_time of this SpaceTopic.

        The last time new content was created

        :param last_content_creation_time: The last_content_creation_time of this SpaceTopic.
        :type last_content_creation_time: float
        """

        self._last_content_creation_time = last_content_creation_time

    @property
    def last_content_creator_id(self):
        """Gets the last_content_creator_id of this SpaceTopic.

        The Id of the last content creator

        :return: The last_content_creator_id of this SpaceTopic.
        :rtype: str
        """
        return self._last_content_creator_id

    @last_content_creator_id.setter
    def last_content_creator_id(self, last_content_creator_id):
        """Sets the last_content_creator_id of this SpaceTopic.

        The Id of the last content creator

        :param last_content_creator_id: The last_content_creator_id of this SpaceTopic.
        :type last_content_creator_id: str
        """

        self._last_content_creator_id = last_content_creator_id

    @property
    def number_of_replies(self):
        """Gets the number_of_replies of this SpaceTopic.

        The number of replies this topic has

        :return: The number_of_replies of this SpaceTopic.
        :rtype: float
        """
        return self._number_of_replies

    @number_of_replies.setter
    def number_of_replies(self, number_of_replies):
        """Sets the number_of_replies of this SpaceTopic.

        The number of replies this topic has

        :param number_of_replies: The number_of_replies of this SpaceTopic.
        :type number_of_replies: float
        """

        self._number_of_replies = number_of_replies

    @property
    def pinned(self):
        """Gets the pinned of this SpaceTopic.

        Is this topic pinned

        :return: The pinned of this SpaceTopic.
        :rtype: bool
        """
        return self._pinned

    @pinned.setter
    def pinned(self, pinned):
        """Sets the pinned of this SpaceTopic.

        Is this topic pinned

        :param pinned: The pinned of this SpaceTopic.
        :type pinned: bool
        """

        self._pinned = pinned

    @property
    def space_item(self):
        """Gets the space_item of this SpaceTopic.


        :return: The space_item of this SpaceTopic.
        :rtype: SpaceItem
        """
        return self._space_item

    @space_item.setter
    def space_item(self, space_item):
        """Sets the space_item of this SpaceTopic.


        :param space_item: The space_item of this SpaceTopic.
        :type space_item: SpaceItem
        """

        self._space_item = space_item

    @property
    def subject(self):
        """Gets the subject of this SpaceTopic.

        The subject of this topic

        :return: The subject of this SpaceTopic.
        :rtype: str
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """Sets the subject of this SpaceTopic.

        The subject of this topic

        :param subject: The subject of this SpaceTopic.
        :type subject: str
        """

        self._subject = subject

    @property
    def tags(self):
        """Gets the tags of this SpaceTopic.

        The tags 

        :return: The tags of this SpaceTopic.
        :rtype: List[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this SpaceTopic.

        The tags 

        :param tags: The tags of this SpaceTopic.
        :type tags: List[str]
        """

        self._tags = tags
