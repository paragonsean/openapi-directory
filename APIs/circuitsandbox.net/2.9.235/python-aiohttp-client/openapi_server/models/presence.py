# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Presence(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, dnd_until: float=None, is_opted_out: bool=None, latitude: float=None, location_text: str=None, longitude: float=None, mobile: bool=None, poor: bool=None, state: str=None, status_message: str=None, time_zone_offset: float=None, user_id: str=None):
        """Presence - a model defined in OpenAPI

        :param dnd_until: The dnd_until of this Presence.
        :param is_opted_out: The is_opted_out of this Presence.
        :param latitude: The latitude of this Presence.
        :param location_text: The location_text of this Presence.
        :param longitude: The longitude of this Presence.
        :param mobile: The mobile of this Presence.
        :param poor: The poor of this Presence.
        :param state: The state of this Presence.
        :param status_message: The status_message of this Presence.
        :param time_zone_offset: The time_zone_offset of this Presence.
        :param user_id: The user_id of this Presence.
        """
        self.openapi_types = {
            'dnd_until': float,
            'is_opted_out': bool,
            'latitude': float,
            'location_text': str,
            'longitude': float,
            'mobile': bool,
            'poor': bool,
            'state': str,
            'status_message': str,
            'time_zone_offset': float,
            'user_id': str
        }

        self.attribute_map = {
            'dnd_until': 'dndUntil',
            'is_opted_out': 'isOptedOut',
            'latitude': 'latitude',
            'location_text': 'locationText',
            'longitude': 'longitude',
            'mobile': 'mobile',
            'poor': 'poor',
            'state': 'state',
            'status_message': 'statusMessage',
            'time_zone_offset': 'timeZoneOffset',
            'user_id': 'userId'
        }

        self._dnd_until = dnd_until
        self._is_opted_out = is_opted_out
        self._latitude = latitude
        self._location_text = location_text
        self._longitude = longitude
        self._mobile = mobile
        self._poor = poor
        self._state = state
        self._status_message = status_message
        self._time_zone_offset = time_zone_offset
        self._user_id = user_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Presence':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Presence of this Presence.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def dnd_until(self):
        """Gets the dnd_until of this Presence.

        Timestamp until the DND state of the user is active

        :return: The dnd_until of this Presence.
        :rtype: float
        """
        return self._dnd_until

    @dnd_until.setter
    def dnd_until(self, dnd_until):
        """Sets the dnd_until of this Presence.

        Timestamp until the DND state of the user is active

        :param dnd_until: The dnd_until of this Presence.
        :type dnd_until: float
        """

        self._dnd_until = dnd_until

    @property
    def is_opted_out(self):
        """Gets the is_opted_out of this Presence.

        Indicates whether the user has opted out of their presence

        :return: The is_opted_out of this Presence.
        :rtype: bool
        """
        return self._is_opted_out

    @is_opted_out.setter
    def is_opted_out(self, is_opted_out):
        """Sets the is_opted_out of this Presence.

        Indicates whether the user has opted out of their presence

        :param is_opted_out: The is_opted_out of this Presence.
        :type is_opted_out: bool
        """

        self._is_opted_out = is_opted_out

    @property
    def latitude(self):
        """Gets the latitude of this Presence.

        The latitude of the geo location of the user

        :return: The latitude of this Presence.
        :rtype: float
        """
        return self._latitude

    @latitude.setter
    def latitude(self, latitude):
        """Sets the latitude of this Presence.

        The latitude of the geo location of the user

        :param latitude: The latitude of this Presence.
        :type latitude: float
        """

        self._latitude = latitude

    @property
    def location_text(self):
        """Gets the location_text of this Presence.

        The geo location of the user in clear text

        :return: The location_text of this Presence.
        :rtype: str
        """
        return self._location_text

    @location_text.setter
    def location_text(self, location_text):
        """Sets the location_text of this Presence.

        The geo location of the user in clear text

        :param location_text: The location_text of this Presence.
        :type location_text: str
        """

        self._location_text = location_text

    @property
    def longitude(self):
        """Gets the longitude of this Presence.

        The longitude of the geo location of the user

        :return: The longitude of this Presence.
        :rtype: float
        """
        return self._longitude

    @longitude.setter
    def longitude(self, longitude):
        """Sets the longitude of this Presence.

        The longitude of the geo location of the user

        :param longitude: The longitude of this Presence.
        :type longitude: float
        """

        self._longitude = longitude

    @property
    def mobile(self):
        """Gets the mobile of this Presence.

        Identifies whether the presence state is based on the state information of a mobile device or not

        :return: The mobile of this Presence.
        :rtype: bool
        """
        return self._mobile

    @mobile.setter
    def mobile(self, mobile):
        """Sets the mobile of this Presence.

        Identifies whether the presence state is based on the state information of a mobile device or not

        :param mobile: The mobile of this Presence.
        :type mobile: bool
        """

        self._mobile = mobile

    @property
    def poor(self):
        """Gets the poor of this Presence.

        n/a

        :return: The poor of this Presence.
        :rtype: bool
        """
        return self._poor

    @poor.setter
    def poor(self, poor):
        """Sets the poor of this Presence.

        n/a

        :param poor: The poor of this Presence.
        :type poor: bool
        """

        self._poor = poor

    @property
    def state(self):
        """Gets the state of this Presence.

        The presence state of the user. It can be one of the following: AVAILABLE, OFFLINE, AWAY, BUSY, or DND (Do-Not-Disturb)

        :return: The state of this Presence.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Presence.

        The presence state of the user. It can be one of the following: AVAILABLE, OFFLINE, AWAY, BUSY, or DND (Do-Not-Disturb)

        :param state: The state of this Presence.
        :type state: str
        """

        self._state = state

    @property
    def status_message(self):
        """Gets the status_message of this Presence.

        A free formed status message of the user

        :return: The status_message of this Presence.
        :rtype: str
        """
        return self._status_message

    @status_message.setter
    def status_message(self, status_message):
        """Sets the status_message of this Presence.

        A free formed status message of the user

        :param status_message: The status_message of this Presence.
        :type status_message: str
        """

        self._status_message = status_message

    @property
    def time_zone_offset(self):
        """Gets the time_zone_offset of this Presence.

        The timezone offset of the user compared to UTC

        :return: The time_zone_offset of this Presence.
        :rtype: float
        """
        return self._time_zone_offset

    @time_zone_offset.setter
    def time_zone_offset(self, time_zone_offset):
        """Sets the time_zone_offset of this Presence.

        The timezone offset of the user compared to UTC

        :param time_zone_offset: The time_zone_offset of this Presence.
        :type time_zone_offset: float
        """

        self._time_zone_offset = time_zone_offset

    @property
    def user_id(self):
        """Gets the user_id of this Presence.

        The ID of the user

        :return: The user_id of this Presence.
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this Presence.

        The ID of the user

        :param user_id: The user_id of this Presence.
        :type user_id: str
        """

        self._user_id = user_id
