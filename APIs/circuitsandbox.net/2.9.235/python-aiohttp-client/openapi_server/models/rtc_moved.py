# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RtcMoved(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, conversation_id: str=None, direction: str=None):
        """RtcMoved - a model defined in OpenAPI

        :param conversation_id: The conversation_id of this RtcMoved.
        :param direction: The direction of this RtcMoved.
        """
        self.openapi_types = {
            'conversation_id': str,
            'direction': str
        }

        self.attribute_map = {
            'conversation_id': 'conversationId',
            'direction': 'direction'
        }

        self._conversation_id = conversation_id
        self._direction = direction

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RtcMoved':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RtcMoved of this RtcMoved.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def conversation_id(self):
        """Gets the conversation_id of this RtcMoved.

        ID of the conversation moved from or to.

        :return: The conversation_id of this RtcMoved.
        :rtype: str
        """
        return self._conversation_id

    @conversation_id.setter
    def conversation_id(self, conversation_id):
        """Sets the conversation_id of this RtcMoved.

        ID of the conversation moved from or to.

        :param conversation_id: The conversation_id of this RtcMoved.
        :type conversation_id: str
        """

        self._conversation_id = conversation_id

    @property
    def direction(self):
        """Gets the direction of this RtcMoved.

        Moved from or to conversation.

        :return: The direction of this RtcMoved.
        :rtype: str
        """
        return self._direction

    @direction.setter
    def direction(self, direction):
        """Sets the direction of this RtcMoved.

        Moved from or to conversation.

        :param direction: The direction of this RtcMoved.
        :type direction: str
        """

        self._direction = direction
