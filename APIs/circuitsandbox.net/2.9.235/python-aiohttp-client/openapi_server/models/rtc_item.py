# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.rtc_ended import RtcEnded
from openapi_server.models.rtc_moved import RtcMoved
from openapi_server.models.rtc_participant import RtcParticipant
from openapi_server import util


class RtcItem(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ended: RtcEnded=None, missed: str=None, moved: RtcMoved=None, rtc_participants: List[RtcParticipant]=None, type: str=None):
        """RtcItem - a model defined in OpenAPI

        :param ended: The ended of this RtcItem.
        :param missed: The missed of this RtcItem.
        :param moved: The moved of this RtcItem.
        :param rtc_participants: The rtc_participants of this RtcItem.
        :param type: The type of this RtcItem.
        """
        self.openapi_types = {
            'ended': RtcEnded,
            'missed': str,
            'moved': RtcMoved,
            'rtc_participants': List[RtcParticipant],
            'type': str
        }

        self.attribute_map = {
            'ended': 'ended',
            'missed': 'missed',
            'moved': 'moved',
            'rtc_participants': 'rtcParticipants',
            'type': 'type'
        }

        self._ended = ended
        self._missed = missed
        self._moved = moved
        self._rtc_participants = rtc_participants
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RtcItem':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RtcItem of this RtcItem.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ended(self):
        """Gets the ended of this RtcItem.


        :return: The ended of this RtcItem.
        :rtype: RtcEnded
        """
        return self._ended

    @ended.setter
    def ended(self, ended):
        """Sets the ended of this RtcItem.


        :param ended: The ended of this RtcItem.
        :type ended: RtcEnded
        """

        self._ended = ended

    @property
    def missed(self):
        """Gets the missed of this RtcItem.

        Indicates a missed call.

        :return: The missed of this RtcItem.
        :rtype: str
        """
        return self._missed

    @missed.setter
    def missed(self, missed):
        """Sets the missed of this RtcItem.

        Indicates a missed call.

        :param missed: The missed of this RtcItem.
        :type missed: str
        """

        self._missed = missed

    @property
    def moved(self):
        """Gets the moved of this RtcItem.


        :return: The moved of this RtcItem.
        :rtype: RtcMoved
        """
        return self._moved

    @moved.setter
    def moved(self, moved):
        """Sets the moved of this RtcItem.


        :param moved: The moved of this RtcItem.
        :type moved: RtcMoved
        """

        self._moved = moved

    @property
    def rtc_participants(self):
        """Gets the rtc_participants of this RtcItem.

        Participants of the call.

        :return: The rtc_participants of this RtcItem.
        :rtype: List[RtcParticipant]
        """
        return self._rtc_participants

    @rtc_participants.setter
    def rtc_participants(self, rtc_participants):
        """Sets the rtc_participants of this RtcItem.

        Participants of the call.

        :param rtc_participants: The rtc_participants of this RtcItem.
        :type rtc_participants: List[RtcParticipant]
        """

        self._rtc_participants = rtc_participants

    @property
    def type(self):
        """Gets the type of this RtcItem.

        The type of the RTC item.

        :return: The type of this RtcItem.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this RtcItem.

        The type of the RTC item.

        :param type: The type of this RtcItem.
        :type type: str
        """

        self._type = type
