# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SharedItem(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, container_id: str=None, container_name: str=None, container_type: str=None, creation_time: float=None, creator_id: str=None, item_id: str=None, parent_topic_id: str=None, sub_type: str=None):
        """SharedItem - a model defined in OpenAPI

        :param container_id: The container_id of this SharedItem.
        :param container_name: The container_name of this SharedItem.
        :param container_type: The container_type of this SharedItem.
        :param creation_time: The creation_time of this SharedItem.
        :param creator_id: The creator_id of this SharedItem.
        :param item_id: The item_id of this SharedItem.
        :param parent_topic_id: The parent_topic_id of this SharedItem.
        :param sub_type: The sub_type of this SharedItem.
        """
        self.openapi_types = {
            'container_id': str,
            'container_name': str,
            'container_type': str,
            'creation_time': float,
            'creator_id': str,
            'item_id': str,
            'parent_topic_id': str,
            'sub_type': str
        }

        self.attribute_map = {
            'container_id': 'containerId',
            'container_name': 'containerName',
            'container_type': 'containerType',
            'creation_time': 'creationTime',
            'creator_id': 'creatorId',
            'item_id': 'itemId',
            'parent_topic_id': 'parentTopicId',
            'sub_type': 'subType'
        }

        self._container_id = container_id
        self._container_name = container_name
        self._container_type = container_type
        self._creation_time = creation_time
        self._creator_id = creator_id
        self._item_id = item_id
        self._parent_topic_id = parent_topic_id
        self._sub_type = sub_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SharedItem':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SharedItem of this SharedItem.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def container_id(self):
        """Gets the container_id of this SharedItem.

        The Id of the container

        :return: The container_id of this SharedItem.
        :rtype: str
        """
        return self._container_id

    @container_id.setter
    def container_id(self, container_id):
        """Sets the container_id of this SharedItem.

        The Id of the container

        :param container_id: The container_id of this SharedItem.
        :type container_id: str
        """

        self._container_id = container_id

    @property
    def container_name(self):
        """Gets the container_name of this SharedItem.

        Name of the container

        :return: The container_name of this SharedItem.
        :rtype: str
        """
        return self._container_name

    @container_name.setter
    def container_name(self, container_name):
        """Sets the container_name of this SharedItem.

        Name of the container

        :param container_name: The container_name of this SharedItem.
        :type container_name: str
        """

        self._container_name = container_name

    @property
    def container_type(self):
        """Gets the container_type of this SharedItem.

        Type of the container

        :return: The container_type of this SharedItem.
        :rtype: str
        """
        return self._container_type

    @container_type.setter
    def container_type(self, container_type):
        """Sets the container_type of this SharedItem.

        Type of the container

        :param container_type: The container_type of this SharedItem.
        :type container_type: str
        """

        self._container_type = container_type

    @property
    def creation_time(self):
        """Gets the creation_time of this SharedItem.

        The time this Item has been created

        :return: The creation_time of this SharedItem.
        :rtype: float
        """
        return self._creation_time

    @creation_time.setter
    def creation_time(self, creation_time):
        """Sets the creation_time of this SharedItem.

        The time this Item has been created

        :param creation_time: The creation_time of this SharedItem.
        :type creation_time: float
        """

        self._creation_time = creation_time

    @property
    def creator_id(self):
        """Gets the creator_id of this SharedItem.

        The Id of the creator

        :return: The creator_id of this SharedItem.
        :rtype: str
        """
        return self._creator_id

    @creator_id.setter
    def creator_id(self, creator_id):
        """Sets the creator_id of this SharedItem.

        The Id of the creator

        :param creator_id: The creator_id of this SharedItem.
        :type creator_id: str
        """

        self._creator_id = creator_id

    @property
    def item_id(self):
        """Gets the item_id of this SharedItem.

        Id of the item

        :return: The item_id of this SharedItem.
        :rtype: str
        """
        return self._item_id

    @item_id.setter
    def item_id(self, item_id):
        """Sets the item_id of this SharedItem.

        Id of the item

        :param item_id: The item_id of this SharedItem.
        :type item_id: str
        """

        self._item_id = item_id

    @property
    def parent_topic_id(self):
        """Gets the parent_topic_id of this SharedItem.

        The Id of the parent topic

        :return: The parent_topic_id of this SharedItem.
        :rtype: str
        """
        return self._parent_topic_id

    @parent_topic_id.setter
    def parent_topic_id(self, parent_topic_id):
        """Sets the parent_topic_id of this SharedItem.

        The Id of the parent topic

        :param parent_topic_id: The parent_topic_id of this SharedItem.
        :type parent_topic_id: str
        """

        self._parent_topic_id = parent_topic_id

    @property
    def sub_type(self):
        """Gets the sub_type of this SharedItem.

        The subtype

        :return: The sub_type of this SharedItem.
        :rtype: str
        """
        return self._sub_type

    @sub_type.setter
    def sub_type(self, sub_type):
        """Sets the sub_type of this SharedItem.

        The subtype

        :param sub_type: The sub_type of this SharedItem.
        :type sub_type: str
        """

        self._sub_type = sub_type
