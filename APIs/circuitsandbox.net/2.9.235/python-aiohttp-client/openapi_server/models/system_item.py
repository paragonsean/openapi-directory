# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SystemItem(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, affected_participants: List[str]=None, new_topic: str=None, old_topic: str=None, type: str=None):
        """SystemItem - a model defined in OpenAPI

        :param affected_participants: The affected_participants of this SystemItem.
        :param new_topic: The new_topic of this SystemItem.
        :param old_topic: The old_topic of this SystemItem.
        :param type: The type of this SystemItem.
        """
        self.openapi_types = {
            'affected_participants': List[str],
            'new_topic': str,
            'old_topic': str,
            'type': str
        }

        self.attribute_map = {
            'affected_participants': 'affectedParticipants',
            'new_topic': 'newTopic',
            'old_topic': 'oldTopic',
            'type': 'type'
        }

        self._affected_participants = affected_participants
        self._new_topic = new_topic
        self._old_topic = old_topic
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SystemItem':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SystemItem of this SystemItem.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def affected_participants(self):
        """Gets the affected_participants of this SystemItem.

        List off affected participants (user ID of the Circuit user) in case the item type PARTICIPANT_ADDED or PARTICIPANT_REMOVED

        :return: The affected_participants of this SystemItem.
        :rtype: List[str]
        """
        return self._affected_participants

    @affected_participants.setter
    def affected_participants(self, affected_participants):
        """Sets the affected_participants of this SystemItem.

        List off affected participants (user ID of the Circuit user) in case the item type PARTICIPANT_ADDED or PARTICIPANT_REMOVED

        :param affected_participants: The affected_participants of this SystemItem.
        :type affected_participants: List[str]
        """

        self._affected_participants = affected_participants

    @property
    def new_topic(self):
        """Gets the new_topic of this SystemItem.

        Filled with the new topic of a conversation if the type of the item is CONVERSATION_RENAMED.

        :return: The new_topic of this SystemItem.
        :rtype: str
        """
        return self._new_topic

    @new_topic.setter
    def new_topic(self, new_topic):
        """Sets the new_topic of this SystemItem.

        Filled with the new topic of a conversation if the type of the item is CONVERSATION_RENAMED.

        :param new_topic: The new_topic of this SystemItem.
        :type new_topic: str
        """

        self._new_topic = new_topic

    @property
    def old_topic(self):
        """Gets the old_topic of this SystemItem.

        Filled with the previous topic of a conversation if the type of the item is CONVERSATION_RENAMED.

        :return: The old_topic of this SystemItem.
        :rtype: str
        """
        return self._old_topic

    @old_topic.setter
    def old_topic(self, old_topic):
        """Sets the old_topic of this SystemItem.

        Filled with the previous topic of a conversation if the type of the item is CONVERSATION_RENAMED.

        :param old_topic: The old_topic of this SystemItem.
        :type old_topic: str
        """

        self._old_topic = old_topic

    @property
    def type(self):
        """Gets the type of this SystemItem.

        The type of the system item

        :return: The type of this SystemItem.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this SystemItem.

        The type of the system item

        :param type: The type of this SystemItem.
        :type type: str
        """

        self._type = type
