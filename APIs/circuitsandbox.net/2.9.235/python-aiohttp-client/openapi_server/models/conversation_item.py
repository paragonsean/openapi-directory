# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.attachment import Attachment
from openapi_server.models.conversation_text_item import ConversationTextItem
from openapi_server.models.rtc_item import RtcItem
from openapi_server.models.system_item import SystemItem
from openapi_server import util


class ConversationItem(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, attachments: List[Attachment]=None, conv_id: str=None, creation_time: float=None, creator_id: str=None, include_in_unread_count: bool=None, item_id: str=None, modification_time: float=None, rtc: RtcItem=None, system: SystemItem=None, text: ConversationTextItem=None, type: str=None):
        """ConversationItem - a model defined in OpenAPI

        :param attachments: The attachments of this ConversationItem.
        :param conv_id: The conv_id of this ConversationItem.
        :param creation_time: The creation_time of this ConversationItem.
        :param creator_id: The creator_id of this ConversationItem.
        :param include_in_unread_count: The include_in_unread_count of this ConversationItem.
        :param item_id: The item_id of this ConversationItem.
        :param modification_time: The modification_time of this ConversationItem.
        :param rtc: The rtc of this ConversationItem.
        :param system: The system of this ConversationItem.
        :param text: The text of this ConversationItem.
        :param type: The type of this ConversationItem.
        """
        self.openapi_types = {
            'attachments': List[Attachment],
            'conv_id': str,
            'creation_time': float,
            'creator_id': str,
            'include_in_unread_count': bool,
            'item_id': str,
            'modification_time': float,
            'rtc': RtcItem,
            'system': SystemItem,
            'text': ConversationTextItem,
            'type': str
        }

        self.attribute_map = {
            'attachments': 'attachments',
            'conv_id': 'convId',
            'creation_time': 'creationTime',
            'creator_id': 'creatorId',
            'include_in_unread_count': 'includeInUnreadCount',
            'item_id': 'itemId',
            'modification_time': 'modificationTime',
            'rtc': 'rtc',
            'system': 'system',
            'text': 'text',
            'type': 'type'
        }

        self._attachments = attachments
        self._conv_id = conv_id
        self._creation_time = creation_time
        self._creator_id = creator_id
        self._include_in_unread_count = include_in_unread_count
        self._item_id = item_id
        self._modification_time = modification_time
        self._rtc = rtc
        self._system = system
        self._text = text
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ConversationItem':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ConversationItem of this ConversationItem.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def attachments(self):
        """Gets the attachments of this ConversationItem.

        Array of files attached to the item

        :return: The attachments of this ConversationItem.
        :rtype: List[Attachment]
        """
        return self._attachments

    @attachments.setter
    def attachments(self, attachments):
        """Sets the attachments of this ConversationItem.

        Array of files attached to the item

        :param attachments: The attachments of this ConversationItem.
        :type attachments: List[Attachment]
        """

        self._attachments = attachments

    @property
    def conv_id(self):
        """Gets the conv_id of this ConversationItem.

        The ID of the conversation the item belongs to

        :return: The conv_id of this ConversationItem.
        :rtype: str
        """
        return self._conv_id

    @conv_id.setter
    def conv_id(self, conv_id):
        """Sets the conv_id of this ConversationItem.

        The ID of the conversation the item belongs to

        :param conv_id: The conv_id of this ConversationItem.
        :type conv_id: str
        """

        self._conv_id = conv_id

    @property
    def creation_time(self):
        """Gets the creation_time of this ConversationItem.

        UTC timestamp when the item was created

        :return: The creation_time of this ConversationItem.
        :rtype: float
        """
        return self._creation_time

    @creation_time.setter
    def creation_time(self, creation_time):
        """Sets the creation_time of this ConversationItem.

        UTC timestamp when the item was created

        :param creation_time: The creation_time of this ConversationItem.
        :type creation_time: float
        """

        self._creation_time = creation_time

    @property
    def creator_id(self):
        """Gets the creator_id of this ConversationItem.

        The ID of the user who created the conversation item

        :return: The creator_id of this ConversationItem.
        :rtype: str
        """
        return self._creator_id

    @creator_id.setter
    def creator_id(self, creator_id):
        """Sets the creator_id of this ConversationItem.

        The ID of the user who created the conversation item

        :param creator_id: The creator_id of this ConversationItem.
        :type creator_id: str
        """

        self._creator_id = creator_id

    @property
    def include_in_unread_count(self):
        """Gets the include_in_unread_count of this ConversationItem.

        Indicates whether the item is included in the unread message count

        :return: The include_in_unread_count of this ConversationItem.
        :rtype: bool
        """
        return self._include_in_unread_count

    @include_in_unread_count.setter
    def include_in_unread_count(self, include_in_unread_count):
        """Sets the include_in_unread_count of this ConversationItem.

        Indicates whether the item is included in the unread message count

        :param include_in_unread_count: The include_in_unread_count of this ConversationItem.
        :type include_in_unread_count: bool
        """

        self._include_in_unread_count = include_in_unread_count

    @property
    def item_id(self):
        """Gets the item_id of this ConversationItem.

        The ID of the item

        :return: The item_id of this ConversationItem.
        :rtype: str
        """
        return self._item_id

    @item_id.setter
    def item_id(self, item_id):
        """Sets the item_id of this ConversationItem.

        The ID of the item

        :param item_id: The item_id of this ConversationItem.
        :type item_id: str
        """

        self._item_id = item_id

    @property
    def modification_time(self):
        """Gets the modification_time of this ConversationItem.

        UTC timestamp when the conversation was modified

        :return: The modification_time of this ConversationItem.
        :rtype: float
        """
        return self._modification_time

    @modification_time.setter
    def modification_time(self, modification_time):
        """Sets the modification_time of this ConversationItem.

        UTC timestamp when the conversation was modified

        :param modification_time: The modification_time of this ConversationItem.
        :type modification_time: float
        """

        self._modification_time = modification_time

    @property
    def rtc(self):
        """Gets the rtc of this ConversationItem.


        :return: The rtc of this ConversationItem.
        :rtype: RtcItem
        """
        return self._rtc

    @rtc.setter
    def rtc(self, rtc):
        """Sets the rtc of this ConversationItem.


        :param rtc: The rtc of this ConversationItem.
        :type rtc: RtcItem
        """

        self._rtc = rtc

    @property
    def system(self):
        """Gets the system of this ConversationItem.


        :return: The system of this ConversationItem.
        :rtype: SystemItem
        """
        return self._system

    @system.setter
    def system(self, system):
        """Sets the system of this ConversationItem.


        :param system: The system of this ConversationItem.
        :type system: SystemItem
        """

        self._system = system

    @property
    def text(self):
        """Gets the text of this ConversationItem.


        :return: The text of this ConversationItem.
        :rtype: ConversationTextItem
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this ConversationItem.


        :param text: The text of this ConversationItem.
        :type text: ConversationTextItem
        """

        self._text = text

    @property
    def type(self):
        """Gets the type of this ConversationItem.

        The type of the conversation item. It can be one of the following TEXT, SYSTEM or RTC

        :return: The type of this ConversationItem.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ConversationItem.

        The type of the conversation item. It can be one of the following TEXT, SYSTEM or RTC

        :param type: The type of this ConversationItem.
        :type type: str
        """

        self._type = type
