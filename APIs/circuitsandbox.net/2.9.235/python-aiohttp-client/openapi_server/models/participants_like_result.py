# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.participants_like import ParticipantsLike
from openapi_server import util


class ParticipantsLikeResult(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, has_more: bool=None, participants: List[ParticipantsLike]=None, search_pointer: str=None):
        """ParticipantsLikeResult - a model defined in OpenAPI

        :param has_more: The has_more of this ParticipantsLikeResult.
        :param participants: The participants of this ParticipantsLikeResult.
        :param search_pointer: The search_pointer of this ParticipantsLikeResult.
        """
        self.openapi_types = {
            'has_more': bool,
            'participants': List[ParticipantsLike],
            'search_pointer': str
        }

        self.attribute_map = {
            'has_more': 'hasMore',
            'participants': 'participants',
            'search_pointer': 'searchPointer'
        }

        self._has_more = has_more
        self._participants = participants
        self._search_pointer = search_pointer

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ParticipantsLikeResult':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ParticipantsLikeResult of this ParticipantsLikeResult.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def has_more(self):
        """Gets the has_more of this ParticipantsLikeResult.

        More results available (true-use searchpointer for next search/false)

        :return: The has_more of this ParticipantsLikeResult.
        :rtype: bool
        """
        return self._has_more

    @has_more.setter
    def has_more(self, has_more):
        """Sets the has_more of this ParticipantsLikeResult.

        More results available (true-use searchpointer for next search/false)

        :param has_more: The has_more of this ParticipantsLikeResult.
        :type has_more: bool
        """

        self._has_more = has_more

    @property
    def participants(self):
        """Gets the participants of this ParticipantsLikeResult.

        A list of participants who like the topic

        :return: The participants of this ParticipantsLikeResult.
        :rtype: List[ParticipantsLike]
        """
        return self._participants

    @participants.setter
    def participants(self, participants):
        """Sets the participants of this ParticipantsLikeResult.

        A list of participants who like the topic

        :param participants: The participants of this ParticipantsLikeResult.
        :type participants: List[ParticipantsLike]
        """

        self._participants = participants

    @property
    def search_pointer(self):
        """Gets the search_pointer of this ParticipantsLikeResult.

        The searchpointer

        :return: The search_pointer of this ParticipantsLikeResult.
        :rtype: str
        """
        return self._search_pointer

    @search_pointer.setter
    def search_pointer(self, search_pointer):
        """Sets the search_pointer of this ParticipantsLikeResult.

        The searchpointer

        :param search_pointer: The search_pointer of this ParticipantsLikeResult.
        :type search_pointer: str
        """

        self._search_pointer = search_pointer
