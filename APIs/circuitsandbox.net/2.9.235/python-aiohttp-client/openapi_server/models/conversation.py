# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Conversation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, avatar: str=None, avatar_large: str=None, conv_id: str=None, creation_time: float=None, creator_id: str=None, creator_tenant_id: str=None, description: str=None, is_guest_access_disabled: bool=None, is_moderated: bool=None, modification_time: float=None, participants: List[str]=None, topic: str=None, topic_placeholder: str=None, type: str=None):
        """Conversation - a model defined in OpenAPI

        :param avatar: The avatar of this Conversation.
        :param avatar_large: The avatar_large of this Conversation.
        :param conv_id: The conv_id of this Conversation.
        :param creation_time: The creation_time of this Conversation.
        :param creator_id: The creator_id of this Conversation.
        :param creator_tenant_id: The creator_tenant_id of this Conversation.
        :param description: The description of this Conversation.
        :param is_guest_access_disabled: The is_guest_access_disabled of this Conversation.
        :param is_moderated: The is_moderated of this Conversation.
        :param modification_time: The modification_time of this Conversation.
        :param participants: The participants of this Conversation.
        :param topic: The topic of this Conversation.
        :param topic_placeholder: The topic_placeholder of this Conversation.
        :param type: The type of this Conversation.
        """
        self.openapi_types = {
            'avatar': str,
            'avatar_large': str,
            'conv_id': str,
            'creation_time': float,
            'creator_id': str,
            'creator_tenant_id': str,
            'description': str,
            'is_guest_access_disabled': bool,
            'is_moderated': bool,
            'modification_time': float,
            'participants': List[str],
            'topic': str,
            'topic_placeholder': str,
            'type': str
        }

        self.attribute_map = {
            'avatar': 'avatar',
            'avatar_large': 'avatarLarge',
            'conv_id': 'convId',
            'creation_time': 'creationTime',
            'creator_id': 'creatorId',
            'creator_tenant_id': 'creatorTenantId',
            'description': 'description',
            'is_guest_access_disabled': 'isGuestAccessDisabled',
            'is_moderated': 'isModerated',
            'modification_time': 'modificationTime',
            'participants': 'participants',
            'topic': 'topic',
            'topic_placeholder': 'topicPlaceholder',
            'type': 'type'
        }

        self._avatar = avatar
        self._avatar_large = avatar_large
        self._conv_id = conv_id
        self._creation_time = creation_time
        self._creator_id = creator_id
        self._creator_tenant_id = creator_tenant_id
        self._description = description
        self._is_guest_access_disabled = is_guest_access_disabled
        self._is_moderated = is_moderated
        self._modification_time = modification_time
        self._participants = participants
        self._topic = topic
        self._topic_placeholder = topic_placeholder
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Conversation':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Conversation of this Conversation.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def avatar(self):
        """Gets the avatar of this Conversation.

        The URL of the small avatar image of the conversation

        :return: The avatar of this Conversation.
        :rtype: str
        """
        return self._avatar

    @avatar.setter
    def avatar(self, avatar):
        """Sets the avatar of this Conversation.

        The URL of the small avatar image of the conversation

        :param avatar: The avatar of this Conversation.
        :type avatar: str
        """

        self._avatar = avatar

    @property
    def avatar_large(self):
        """Gets the avatar_large of this Conversation.

        The URL of the large avatar image of the conversation

        :return: The avatar_large of this Conversation.
        :rtype: str
        """
        return self._avatar_large

    @avatar_large.setter
    def avatar_large(self, avatar_large):
        """Sets the avatar_large of this Conversation.

        The URL of the large avatar image of the conversation

        :param avatar_large: The avatar_large of this Conversation.
        :type avatar_large: str
        """

        self._avatar_large = avatar_large

    @property
    def conv_id(self):
        """Gets the conv_id of this Conversation.

        The ID of the conversation

        :return: The conv_id of this Conversation.
        :rtype: str
        """
        return self._conv_id

    @conv_id.setter
    def conv_id(self, conv_id):
        """Sets the conv_id of this Conversation.

        The ID of the conversation

        :param conv_id: The conv_id of this Conversation.
        :type conv_id: str
        """

        self._conv_id = conv_id

    @property
    def creation_time(self):
        """Gets the creation_time of this Conversation.

        UTC timestamp when the conversation was created

        :return: The creation_time of this Conversation.
        :rtype: float
        """
        return self._creation_time

    @creation_time.setter
    def creation_time(self, creation_time):
        """Sets the creation_time of this Conversation.

        UTC timestamp when the conversation was created

        :param creation_time: The creation_time of this Conversation.
        :type creation_time: float
        """

        self._creation_time = creation_time

    @property
    def creator_id(self):
        """Gets the creator_id of this Conversation.

        The ID of the user who created the conversation

        :return: The creator_id of this Conversation.
        :rtype: str
        """
        return self._creator_id

    @creator_id.setter
    def creator_id(self, creator_id):
        """Sets the creator_id of this Conversation.

        The ID of the user who created the conversation

        :param creator_id: The creator_id of this Conversation.
        :type creator_id: str
        """

        self._creator_id = creator_id

    @property
    def creator_tenant_id(self):
        """Gets the creator_tenant_id of this Conversation.

        The ID of the Circuit domain (tenant) where the creator of the conversation belongs to

        :return: The creator_tenant_id of this Conversation.
        :rtype: str
        """
        return self._creator_tenant_id

    @creator_tenant_id.setter
    def creator_tenant_id(self, creator_tenant_id):
        """Sets the creator_tenant_id of this Conversation.

        The ID of the Circuit domain (tenant) where the creator of the conversation belongs to

        :param creator_tenant_id: The creator_tenant_id of this Conversation.
        :type creator_tenant_id: str
        """

        self._creator_tenant_id = creator_tenant_id

    @property
    def description(self):
        """Gets the description of this Conversation.

        The description of the conversation. This field is available only for conversations with type COMMUNITY

        :return: The description of this Conversation.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Conversation.

        The description of the conversation. This field is available only for conversations with type COMMUNITY

        :param description: The description of this Conversation.
        :type description: str
        """

        self._description = description

    @property
    def is_guest_access_disabled(self):
        """Gets the is_guest_access_disabled of this Conversation.

        Indicates whether guest access to the conversation is disabled or not

        :return: The is_guest_access_disabled of this Conversation.
        :rtype: bool
        """
        return self._is_guest_access_disabled

    @is_guest_access_disabled.setter
    def is_guest_access_disabled(self, is_guest_access_disabled):
        """Sets the is_guest_access_disabled of this Conversation.

        Indicates whether guest access to the conversation is disabled or not

        :param is_guest_access_disabled: The is_guest_access_disabled of this Conversation.
        :type is_guest_access_disabled: bool
        """

        self._is_guest_access_disabled = is_guest_access_disabled

    @property
    def is_moderated(self):
        """Gets the is_moderated of this Conversation.

        Indicates whether the conversation is moderated or not. In a moderated conversation only participants who have been assigned the role of a moderator are allowed to add or remove participants into the conversation

        :return: The is_moderated of this Conversation.
        :rtype: bool
        """
        return self._is_moderated

    @is_moderated.setter
    def is_moderated(self, is_moderated):
        """Sets the is_moderated of this Conversation.

        Indicates whether the conversation is moderated or not. In a moderated conversation only participants who have been assigned the role of a moderator are allowed to add or remove participants into the conversation

        :param is_moderated: The is_moderated of this Conversation.
        :type is_moderated: bool
        """

        self._is_moderated = is_moderated

    @property
    def modification_time(self):
        """Gets the modification_time of this Conversation.

        UTC timestamp when the conversation was modified. A conversation is modified when any of the conversation object fields change but not when conversation items are added or edited

        :return: The modification_time of this Conversation.
        :rtype: float
        """
        return self._modification_time

    @modification_time.setter
    def modification_time(self, modification_time):
        """Sets the modification_time of this Conversation.

        UTC timestamp when the conversation was modified. A conversation is modified when any of the conversation object fields change but not when conversation items are added or edited

        :param modification_time: The modification_time of this Conversation.
        :type modification_time: float
        """

        self._modification_time = modification_time

    @property
    def participants(self):
        """Gets the participants of this Conversation.

        Array of active participants

        :return: The participants of this Conversation.
        :rtype: List[str]
        """
        return self._participants

    @participants.setter
    def participants(self, participants):
        """Sets the participants of this Conversation.

        Array of active participants

        :param participants: The participants of this Conversation.
        :type participants: List[str]
        """

        self._participants = participants

    @property
    def topic(self):
        """Gets the topic of this Conversation.

        The title of the conversation. Conversations of type DIRECT cannot have a title

        :return: The topic of this Conversation.
        :rtype: str
        """
        return self._topic

    @topic.setter
    def topic(self, topic):
        """Sets the topic of this Conversation.

        The title of the conversation. Conversations of type DIRECT cannot have a title

        :param topic: The topic of this Conversation.
        :type topic: str
        """

        self._topic = topic

    @property
    def topic_placeholder(self):
        """Gets the topic_placeholder of this Conversation.

        The title of the conversation. Conversations of type DIRECT cannot have a title

        :return: The topic_placeholder of this Conversation.
        :rtype: str
        """
        return self._topic_placeholder

    @topic_placeholder.setter
    def topic_placeholder(self, topic_placeholder):
        """Sets the topic_placeholder of this Conversation.

        The title of the conversation. Conversations of type DIRECT cannot have a title

        :param topic_placeholder: The topic_placeholder of this Conversation.
        :type topic_placeholder: str
        """

        self._topic_placeholder = topic_placeholder

    @property
    def type(self):
        """Gets the type of this Conversation.

        The type of the conversation. It can be one of the following: DIRECT, GROUP, COMMUNITY or LARGE

        :return: The type of this Conversation.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Conversation.

        The type of the conversation. It can be one of the following: DIRECT, GROUP, COMMUNITY or LARGE

        :param type: The type of this Conversation.
        :type type: str
        """

        self._type = type
