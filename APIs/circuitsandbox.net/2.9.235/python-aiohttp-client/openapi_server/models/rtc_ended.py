# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RtcEnded(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, duration: float=None, max_number_of_attendees: float=None, pick_from_participant: str=None):
        """RtcEnded - a model defined in OpenAPI

        :param duration: The duration of this RtcEnded.
        :param max_number_of_attendees: The max_number_of_attendees of this RtcEnded.
        :param pick_from_participant: The pick_from_participant of this RtcEnded.
        """
        self.openapi_types = {
            'duration': float,
            'max_number_of_attendees': float,
            'pick_from_participant': str
        }

        self.attribute_map = {
            'duration': 'duration',
            'max_number_of_attendees': 'maxNumberOfAttendees',
            'pick_from_participant': 'pickFromParticipant'
        }

        self._duration = duration
        self._max_number_of_attendees = max_number_of_attendees
        self._pick_from_participant = pick_from_participant

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RtcEnded':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RtcEnded of this RtcEnded.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def duration(self):
        """Gets the duration of this RtcEnded.

        The duration of the call.

        :return: The duration of this RtcEnded.
        :rtype: float
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this RtcEnded.

        The duration of the call.

        :param duration: The duration of this RtcEnded.
        :type duration: float
        """

        self._duration = duration

    @property
    def max_number_of_attendees(self):
        """Gets the max_number_of_attendees of this RtcEnded.

        The maximum number of attendees during a call.

        :return: The max_number_of_attendees of this RtcEnded.
        :rtype: float
        """
        return self._max_number_of_attendees

    @max_number_of_attendees.setter
    def max_number_of_attendees(self, max_number_of_attendees):
        """Sets the max_number_of_attendees of this RtcEnded.

        The maximum number of attendees during a call.

        :param max_number_of_attendees: The max_number_of_attendees of this RtcEnded.
        :type max_number_of_attendees: float
        """

        self._max_number_of_attendees = max_number_of_attendees

    @property
    def pick_from_participant(self):
        """Gets the pick_from_participant of this RtcEnded.

        UserID of the pick from participant.

        :return: The pick_from_participant of this RtcEnded.
        :rtype: str
        """
        return self._pick_from_participant

    @pick_from_participant.setter
    def pick_from_participant(self, pick_from_participant):
        """Sets the pick_from_participant of this RtcEnded.

        UserID of the pick from participant.

        :param pick_from_participant: The pick_from_participant of this RtcEnded.
        :type pick_from_participant: str
        """

        self._pick_from_participant = pick_from_participant
