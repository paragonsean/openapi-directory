# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RtcParticipant(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, display_name: str=None, fully_qualified_number: str=None, phone_number: str=None, resolved_user: object=None, type: str=None, user_id: str=None):
        """RtcParticipant - a model defined in OpenAPI

        :param display_name: The display_name of this RtcParticipant.
        :param fully_qualified_number: The fully_qualified_number of this RtcParticipant.
        :param phone_number: The phone_number of this RtcParticipant.
        :param resolved_user: The resolved_user of this RtcParticipant.
        :param type: The type of this RtcParticipant.
        :param user_id: The user_id of this RtcParticipant.
        """
        self.openapi_types = {
            'display_name': str,
            'fully_qualified_number': str,
            'phone_number': str,
            'resolved_user': object,
            'type': str,
            'user_id': str
        }

        self.attribute_map = {
            'display_name': 'displayName',
            'fully_qualified_number': 'fullyQualifiedNumber',
            'phone_number': 'phoneNumber',
            'resolved_user': 'resolvedUser',
            'type': 'type',
            'user_id': 'userId'
        }

        self._display_name = display_name
        self._fully_qualified_number = fully_qualified_number
        self._phone_number = phone_number
        self._resolved_user = resolved_user
        self._type = type
        self._user_id = user_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RtcParticipant':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RtcParticipant of this RtcParticipant.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def display_name(self):
        """Gets the display_name of this RtcParticipant.

        The display name of the participant.

        :return: The display_name of this RtcParticipant.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this RtcParticipant.

        The display name of the participant.

        :param display_name: The display_name of this RtcParticipant.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def fully_qualified_number(self):
        """Gets the fully_qualified_number of this RtcParticipant.

        missing documentation

        :return: The fully_qualified_number of this RtcParticipant.
        :rtype: str
        """
        return self._fully_qualified_number

    @fully_qualified_number.setter
    def fully_qualified_number(self, fully_qualified_number):
        """Sets the fully_qualified_number of this RtcParticipant.

        missing documentation

        :param fully_qualified_number: The fully_qualified_number of this RtcParticipant.
        :type fully_qualified_number: str
        """

        self._fully_qualified_number = fully_qualified_number

    @property
    def phone_number(self):
        """Gets the phone_number of this RtcParticipant.

        missing documentation

        :return: The phone_number of this RtcParticipant.
        :rtype: str
        """
        return self._phone_number

    @phone_number.setter
    def phone_number(self, phone_number):
        """Sets the phone_number of this RtcParticipant.

        missing documentation

        :param phone_number: The phone_number of this RtcParticipant.
        :type phone_number: str
        """

        self._phone_number = phone_number

    @property
    def resolved_user(self):
        """Gets the resolved_user of this RtcParticipant.

        missing documentation

        :return: The resolved_user of this RtcParticipant.
        :rtype: object
        """
        return self._resolved_user

    @resolved_user.setter
    def resolved_user(self, resolved_user):
        """Sets the resolved_user of this RtcParticipant.

        missing documentation

        :param resolved_user: The resolved_user of this RtcParticipant.
        :type resolved_user: object
        """

        self._resolved_user = resolved_user

    @property
    def type(self):
        """Gets the type of this RtcParticipant.

        The RTC type of the participant.

        :return: The type of this RtcParticipant.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this RtcParticipant.

        The RTC type of the participant.

        :param type: The type of this RtcParticipant.
        :type type: str
        """

        self._type = type

    @property
    def user_id(self):
        """Gets the user_id of this RtcParticipant.

        The ID of the participant.

        :return: The user_id of this RtcParticipant.
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this RtcParticipant.

        The ID of the participant.

        :param user_id: The user_id of this RtcParticipant.
        :type user_id: str
        """

        self._user_id = user_id
