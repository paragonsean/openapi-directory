# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.user_email_address import UserEmailAddress
from openapi_server.models.user_phone_number import UserPhoneNumber
from openapi_server import util


class User(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, avatar: str=None, avatar_large: str=None, company: str=None, department: str=None, display_name: str=None, email_address: str=None, email_addresses: List[UserEmailAddress]=None, first_name: str=None, job_title: str=None, last_name: str=None, locale: str=None, phone_number: str=None, phone_numbers: List[UserPhoneNumber]=None, primary_tenant_id: str=None, secondary_email_address: str=None, secondary_tenant_id: str=None, user_id: str=None, user_state: str=None, user_type: str=None):
        """User - a model defined in OpenAPI

        :param avatar: The avatar of this User.
        :param avatar_large: The avatar_large of this User.
        :param company: The company of this User.
        :param department: The department of this User.
        :param display_name: The display_name of this User.
        :param email_address: The email_address of this User.
        :param email_addresses: The email_addresses of this User.
        :param first_name: The first_name of this User.
        :param job_title: The job_title of this User.
        :param last_name: The last_name of this User.
        :param locale: The locale of this User.
        :param phone_number: The phone_number of this User.
        :param phone_numbers: The phone_numbers of this User.
        :param primary_tenant_id: The primary_tenant_id of this User.
        :param secondary_email_address: The secondary_email_address of this User.
        :param secondary_tenant_id: The secondary_tenant_id of this User.
        :param user_id: The user_id of this User.
        :param user_state: The user_state of this User.
        :param user_type: The user_type of this User.
        """
        self.openapi_types = {
            'avatar': str,
            'avatar_large': str,
            'company': str,
            'department': str,
            'display_name': str,
            'email_address': str,
            'email_addresses': List[UserEmailAddress],
            'first_name': str,
            'job_title': str,
            'last_name': str,
            'locale': str,
            'phone_number': str,
            'phone_numbers': List[UserPhoneNumber],
            'primary_tenant_id': str,
            'secondary_email_address': str,
            'secondary_tenant_id': str,
            'user_id': str,
            'user_state': str,
            'user_type': str
        }

        self.attribute_map = {
            'avatar': 'avatar',
            'avatar_large': 'avatarLarge',
            'company': 'company',
            'department': 'department',
            'display_name': 'displayName',
            'email_address': 'emailAddress',
            'email_addresses': 'emailAddresses',
            'first_name': 'firstName',
            'job_title': 'jobTitle',
            'last_name': 'lastName',
            'locale': 'locale',
            'phone_number': 'phoneNumber',
            'phone_numbers': 'phoneNumbers',
            'primary_tenant_id': 'primaryTenantId',
            'secondary_email_address': 'secondaryEmailAddress',
            'secondary_tenant_id': 'secondaryTenantId',
            'user_id': 'userId',
            'user_state': 'userState',
            'user_type': 'userType'
        }

        self._avatar = avatar
        self._avatar_large = avatar_large
        self._company = company
        self._department = department
        self._display_name = display_name
        self._email_address = email_address
        self._email_addresses = email_addresses
        self._first_name = first_name
        self._job_title = job_title
        self._last_name = last_name
        self._locale = locale
        self._phone_number = phone_number
        self._phone_numbers = phone_numbers
        self._primary_tenant_id = primary_tenant_id
        self._secondary_email_address = secondary_email_address
        self._secondary_tenant_id = secondary_tenant_id
        self._user_id = user_id
        self._user_state = user_state
        self._user_type = user_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'User':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The User of this User.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def avatar(self):
        """Gets the avatar of this User.

        The URL of the small avatar picture.

        :return: The avatar of this User.
        :rtype: str
        """
        return self._avatar

    @avatar.setter
    def avatar(self, avatar):
        """Sets the avatar of this User.

        The URL of the small avatar picture.

        :param avatar: The avatar of this User.
        :type avatar: str
        """

        self._avatar = avatar

    @property
    def avatar_large(self):
        """Gets the avatar_large of this User.

        The URL of the large avatar picture.

        :return: The avatar_large of this User.
        :rtype: str
        """
        return self._avatar_large

    @avatar_large.setter
    def avatar_large(self, avatar_large):
        """Sets the avatar_large of this User.

        The URL of the large avatar picture.

        :param avatar_large: The avatar_large of this User.
        :type avatar_large: str
        """

        self._avatar_large = avatar_large

    @property
    def company(self):
        """Gets the company of this User.

        The name of the user's company

        :return: The company of this User.
        :rtype: str
        """
        return self._company

    @company.setter
    def company(self, company):
        """Sets the company of this User.

        The name of the user's company

        :param company: The company of this User.
        :type company: str
        """

        self._company = company

    @property
    def department(self):
        """Gets the department of this User.

        missing documentation

        :return: The department of this User.
        :rtype: str
        """
        return self._department

    @department.setter
    def department(self, department):
        """Sets the department of this User.

        missing documentation

        :param department: The department of this User.
        :type department: str
        """

        self._department = department

    @property
    def display_name(self):
        """Gets the display_name of this User.

        The user's display name

        :return: The display_name of this User.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this User.

        The user's display name

        :param display_name: The display_name of this User.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def email_address(self):
        """Gets the email_address of this User.

        The primary email address of the user

        :return: The email_address of this User.
        :rtype: str
        """
        return self._email_address

    @email_address.setter
    def email_address(self, email_address):
        """Sets the email_address of this User.

        The primary email address of the user

        :param email_address: The email_address of this User.
        :type email_address: str
        """

        self._email_address = email_address

    @property
    def email_addresses(self):
        """Gets the email_addresses of this User.

        additional email addresses of the user

        :return: The email_addresses of this User.
        :rtype: List[UserEmailAddress]
        """
        return self._email_addresses

    @email_addresses.setter
    def email_addresses(self, email_addresses):
        """Sets the email_addresses of this User.

        additional email addresses of the user

        :param email_addresses: The email_addresses of this User.
        :type email_addresses: List[UserEmailAddress]
        """

        self._email_addresses = email_addresses

    @property
    def first_name(self):
        """Gets the first_name of this User.

        The first name of the user

        :return: The first_name of this User.
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this User.

        The first name of the user

        :param first_name: The first_name of this User.
        :type first_name: str
        """

        self._first_name = first_name

    @property
    def job_title(self):
        """Gets the job_title of this User.

        The job title of the user

        :return: The job_title of this User.
        :rtype: str
        """
        return self._job_title

    @job_title.setter
    def job_title(self, job_title):
        """Sets the job_title of this User.

        The job title of the user

        :param job_title: The job_title of this User.
        :type job_title: str
        """

        self._job_title = job_title

    @property
    def last_name(self):
        """Gets the last_name of this User.

        The last name of the user

        :return: The last_name of this User.
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this User.

        The last name of the user

        :param last_name: The last_name of this User.
        :type last_name: str
        """

        self._last_name = last_name

    @property
    def locale(self):
        """Gets the locale of this User.

        The locale of the user. (E.g. en-US, de-DE)

        :return: The locale of this User.
        :rtype: str
        """
        return self._locale

    @locale.setter
    def locale(self, locale):
        """Sets the locale of this User.

        The locale of the user. (E.g. en-US, de-DE)

        :param locale: The locale of this User.
        :type locale: str
        """

        self._locale = locale

    @property
    def phone_number(self):
        """Gets the phone_number of this User.

        provisioned phone number of the user

        :return: The phone_number of this User.
        :rtype: str
        """
        return self._phone_number

    @phone_number.setter
    def phone_number(self, phone_number):
        """Sets the phone_number of this User.

        provisioned phone number of the user

        :param phone_number: The phone_number of this User.
        :type phone_number: str
        """

        self._phone_number = phone_number

    @property
    def phone_numbers(self):
        """Gets the phone_numbers of this User.

        additional phone numbers of the user

        :return: The phone_numbers of this User.
        :rtype: List[UserPhoneNumber]
        """
        return self._phone_numbers

    @phone_numbers.setter
    def phone_numbers(self, phone_numbers):
        """Sets the phone_numbers of this User.

        additional phone numbers of the user

        :param phone_numbers: The phone_numbers of this User.
        :type phone_numbers: List[UserPhoneNumber]
        """

        self._phone_numbers = phone_numbers

    @property
    def primary_tenant_id(self):
        """Gets the primary_tenant_id of this User.

        The primary tenant id

        :return: The primary_tenant_id of this User.
        :rtype: str
        """
        return self._primary_tenant_id

    @primary_tenant_id.setter
    def primary_tenant_id(self, primary_tenant_id):
        """Sets the primary_tenant_id of this User.

        The primary tenant id

        :param primary_tenant_id: The primary_tenant_id of this User.
        :type primary_tenant_id: str
        """

        self._primary_tenant_id = primary_tenant_id

    @property
    def secondary_email_address(self):
        """Gets the secondary_email_address of this User.

        The secondary email address

        :return: The secondary_email_address of this User.
        :rtype: str
        """
        return self._secondary_email_address

    @secondary_email_address.setter
    def secondary_email_address(self, secondary_email_address):
        """Sets the secondary_email_address of this User.

        The secondary email address

        :param secondary_email_address: The secondary_email_address of this User.
        :type secondary_email_address: str
        """

        self._secondary_email_address = secondary_email_address

    @property
    def secondary_tenant_id(self):
        """Gets the secondary_tenant_id of this User.

        The secondary tenant id

        :return: The secondary_tenant_id of this User.
        :rtype: str
        """
        return self._secondary_tenant_id

    @secondary_tenant_id.setter
    def secondary_tenant_id(self, secondary_tenant_id):
        """Sets the secondary_tenant_id of this User.

        The secondary tenant id

        :param secondary_tenant_id: The secondary_tenant_id of this User.
        :type secondary_tenant_id: str
        """

        self._secondary_tenant_id = secondary_tenant_id

    @property
    def user_id(self):
        """Gets the user_id of this User.

        The ID of the user

        :return: The user_id of this User.
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this User.

        The ID of the user

        :param user_id: The user_id of this User.
        :type user_id: str
        """

        self._user_id = user_id

    @property
    def user_state(self):
        """Gets the user_state of this User.

        The state of the user, e.g. deleted

        :return: The user_state of this User.
        :rtype: str
        """
        return self._user_state

    @user_state.setter
    def user_state(self, user_state):
        """Sets the user_state of this User.

        The state of the user, e.g. deleted

        :param user_state: The user_state of this User.
        :type user_state: str
        """

        self._user_state = user_state

    @property
    def user_type(self):
        """Gets the user_type of this User.

        the type of the user

        :return: The user_type of this User.
        :rtype: str
        """
        return self._user_type

    @user_type.setter
    def user_type(self, user_type):
        """Sets the user_type of this User.

        the type of the user

        :param user_type: The user_type of this User.
        :type user_type: str
        """

        self._user_type = user_type
