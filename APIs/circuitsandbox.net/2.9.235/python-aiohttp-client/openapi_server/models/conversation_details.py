# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.bridge_number import BridgeNumber
from openapi_server import util


class ConversationDetails(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bridge_numbers: List[BridgeNumber]=None, conv_id: str=None, conversation_creator_id: str=None, is_moderation_allowed: bool=None, is_recording_allowed: bool=None, link: str=None, pin: str=None):
        """ConversationDetails - a model defined in OpenAPI

        :param bridge_numbers: The bridge_numbers of this ConversationDetails.
        :param conv_id: The conv_id of this ConversationDetails.
        :param conversation_creator_id: The conversation_creator_id of this ConversationDetails.
        :param is_moderation_allowed: The is_moderation_allowed of this ConversationDetails.
        :param is_recording_allowed: The is_recording_allowed of this ConversationDetails.
        :param link: The link of this ConversationDetails.
        :param pin: The pin of this ConversationDetails.
        """
        self.openapi_types = {
            'bridge_numbers': List[BridgeNumber],
            'conv_id': str,
            'conversation_creator_id': str,
            'is_moderation_allowed': bool,
            'is_recording_allowed': bool,
            'link': str,
            'pin': str
        }

        self.attribute_map = {
            'bridge_numbers': 'bridgeNumbers',
            'conv_id': 'convId',
            'conversation_creator_id': 'conversationCreatorId',
            'is_moderation_allowed': 'isModerationAllowed',
            'is_recording_allowed': 'isRecordingAllowed',
            'link': 'link',
            'pin': 'pin'
        }

        self._bridge_numbers = bridge_numbers
        self._conv_id = conv_id
        self._conversation_creator_id = conversation_creator_id
        self._is_moderation_allowed = is_moderation_allowed
        self._is_recording_allowed = is_recording_allowed
        self._link = link
        self._pin = pin

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ConversationDetails':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ConversationDetails of this ConversationDetails.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bridge_numbers(self):
        """Gets the bridge_numbers of this ConversationDetails.

        A list of bridge numbers which can be used to dial in to the real time session via phone

        :return: The bridge_numbers of this ConversationDetails.
        :rtype: List[BridgeNumber]
        """
        return self._bridge_numbers

    @bridge_numbers.setter
    def bridge_numbers(self, bridge_numbers):
        """Sets the bridge_numbers of this ConversationDetails.

        A list of bridge numbers which can be used to dial in to the real time session via phone

        :param bridge_numbers: The bridge_numbers of this ConversationDetails.
        :type bridge_numbers: List[BridgeNumber]
        """

        self._bridge_numbers = bridge_numbers

    @property
    def conv_id(self):
        """Gets the conv_id of this ConversationDetails.

        missing documentation

        :return: The conv_id of this ConversationDetails.
        :rtype: str
        """
        return self._conv_id

    @conv_id.setter
    def conv_id(self, conv_id):
        """Sets the conv_id of this ConversationDetails.

        missing documentation

        :param conv_id: The conv_id of this ConversationDetails.
        :type conv_id: str
        """

        self._conv_id = conv_id

    @property
    def conversation_creator_id(self):
        """Gets the conversation_creator_id of this ConversationDetails.

        The user ID of the conversation creator

        :return: The conversation_creator_id of this ConversationDetails.
        :rtype: str
        """
        return self._conversation_creator_id

    @conversation_creator_id.setter
    def conversation_creator_id(self, conversation_creator_id):
        """Sets the conversation_creator_id of this ConversationDetails.

        The user ID of the conversation creator

        :param conversation_creator_id: The conversation_creator_id of this ConversationDetails.
        :type conversation_creator_id: str
        """

        self._conversation_creator_id = conversation_creator_id

    @property
    def is_moderation_allowed(self):
        """Gets the is_moderation_allowed of this ConversationDetails.

        Indicates if the conversation is allowed to be moderated

        :return: The is_moderation_allowed of this ConversationDetails.
        :rtype: bool
        """
        return self._is_moderation_allowed

    @is_moderation_allowed.setter
    def is_moderation_allowed(self, is_moderation_allowed):
        """Sets the is_moderation_allowed of this ConversationDetails.

        Indicates if the conversation is allowed to be moderated

        :param is_moderation_allowed: The is_moderation_allowed of this ConversationDetails.
        :type is_moderation_allowed: bool
        """

        self._is_moderation_allowed = is_moderation_allowed

    @property
    def is_recording_allowed(self):
        """Gets the is_recording_allowed of this ConversationDetails.

        Indicates if the conversation is allowed to be recorded

        :return: The is_recording_allowed of this ConversationDetails.
        :rtype: bool
        """
        return self._is_recording_allowed

    @is_recording_allowed.setter
    def is_recording_allowed(self, is_recording_allowed):
        """Sets the is_recording_allowed of this ConversationDetails.

        Indicates if the conversation is allowed to be recorded

        :param is_recording_allowed: The is_recording_allowed of this ConversationDetails.
        :type is_recording_allowed: bool
        """

        self._is_recording_allowed = is_recording_allowed

    @property
    def link(self):
        """Gets the link of this ConversationDetails.

        A link that can be used in a browser to join the session

        :return: The link of this ConversationDetails.
        :rtype: str
        """
        return self._link

    @link.setter
    def link(self, link):
        """Sets the link of this ConversationDetails.

        A link that can be used in a browser to join the session

        :param link: The link of this ConversationDetails.
        :type link: str
        """

        self._link = link

    @property
    def pin(self):
        """Gets the pin of this ConversationDetails.

        The PIN to join a real time session via phone

        :return: The pin of this ConversationDetails.
        :rtype: str
        """
        return self._pin

    @pin.setter
    def pin(self, pin):
        """Sets the pin of this ConversationDetails.

        The PIN to join a real time session via phone

        :param pin: The pin of this ConversationDetails.
        :type pin: str
        """

        self._pin = pin
