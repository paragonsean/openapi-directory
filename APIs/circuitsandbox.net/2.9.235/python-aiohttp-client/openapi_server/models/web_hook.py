# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class WebHook(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, creation_time: float=None, filter: List[str]=None, id: str=None, subscription_ids: List[str]=None, type: str=None, url: str=None, user_id: str=None):
        """WebHook - a model defined in OpenAPI

        :param creation_time: The creation_time of this WebHook.
        :param filter: The filter of this WebHook.
        :param id: The id of this WebHook.
        :param subscription_ids: The subscription_ids of this WebHook.
        :param type: The type of this WebHook.
        :param url: The url of this WebHook.
        :param user_id: The user_id of this WebHook.
        """
        self.openapi_types = {
            'creation_time': float,
            'filter': List[str],
            'id': str,
            'subscription_ids': List[str],
            'type': str,
            'url': str,
            'user_id': str
        }

        self.attribute_map = {
            'creation_time': 'creationTime',
            'filter': 'filter',
            'id': 'id',
            'subscription_ids': 'subscriptionIds',
            'type': 'type',
            'url': 'url',
            'user_id': 'userId'
        }

        self._creation_time = creation_time
        self._filter = filter
        self._id = id
        self._subscription_ids = subscription_ids
        self._type = type
        self._url = url
        self._user_id = user_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'WebHook':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The WebHook of this WebHook.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def creation_time(self):
        """Gets the creation_time of this WebHook.

        The time when this WebHook was created. This does not necessary mean the time when an manifest file was created.

        :return: The creation_time of this WebHook.
        :rtype: float
        """
        return self._creation_time

    @creation_time.setter
    def creation_time(self, creation_time):
        """Sets the creation_time of this WebHook.

        The time when this WebHook was created. This does not necessary mean the time when an manifest file was created.

        :param creation_time: The creation_time of this WebHook.
        :type creation_time: float
        """

        self._creation_time = creation_time

    @property
    def filter(self):
        """Gets the filter of this WebHook.

        An optional list of filter parameters for this webhook.

        :return: The filter of this WebHook.
        :rtype: List[str]
        """
        return self._filter

    @filter.setter
    def filter(self, filter):
        """Sets the filter of this WebHook.

        An optional list of filter parameters for this webhook.

        :param filter: The filter of this WebHook.
        :type filter: List[str]
        """

        self._filter = filter

    @property
    def id(self):
        """Gets the id of this WebHook.

        The unique identifier for this webhook. Can be used later to unregister the webhook.

        :return: The id of this WebHook.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this WebHook.

        The unique identifier for this webhook. Can be used later to unregister the webhook.

        :param id: The id of this WebHook.
        :type id: str
        """

        self._id = id

    @property
    def subscription_ids(self):
        """Gets the subscription_ids of this WebHook.

        The optional list of userids for which this webhook is subscribed, i.e. presence events for the user are forwarded to the WebHook callback URL.

        :return: The subscription_ids of this WebHook.
        :rtype: List[str]
        """
        return self._subscription_ids

    @subscription_ids.setter
    def subscription_ids(self, subscription_ids):
        """Sets the subscription_ids of this WebHook.

        The optional list of userids for which this webhook is subscribed, i.e. presence events for the user are forwarded to the WebHook callback URL.

        :param subscription_ids: The subscription_ids of this WebHook.
        :type subscription_ids: List[str]
        """

        self._subscription_ids = subscription_ids

    @property
    def type(self):
        """Gets the type of this WebHook.

        The type of a WebHook. This can either be MANUAL or EXTENSION. While manual WebHooks are only temporary and for development only use, permanent ones (EXTENSION) will bemanaged by the system.

        :return: The type of this WebHook.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this WebHook.

        The type of a WebHook. This can either be MANUAL or EXTENSION. While manual WebHooks are only temporary and for development only use, permanent ones (EXTENSION) will bemanaged by the system.

        :param type: The type of this WebHook.
        :type type: str
        """

        self._type = type

    @property
    def url(self):
        """Gets the url of this WebHook.

        The callback URL of this webhook.

        :return: The url of this WebHook.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this WebHook.

        The callback URL of this webhook.

        :param url: The url of this WebHook.
        :type url: str
        """

        self._url = url

    @property
    def user_id(self):
        """Gets the user_id of this WebHook.

        The user ID for which this webhook is subscribed, i.e. events for this user are forwarded to the WebHook callback URL.

        :return: The user_id of this WebHook.
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this WebHook.

        The user ID for which this webhook is subscribed, i.e. events for this user are forwarded to the WebHook callback URL.

        :param user_id: The user_id of this WebHook.
        :type user_id: str
        """

        self._user_id = user_id
