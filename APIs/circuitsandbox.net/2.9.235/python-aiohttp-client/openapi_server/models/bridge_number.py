# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class BridgeNumber(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bridge_number: str=None, country: str=None, is_most_used: bool=None, locale: str=None, name: str=None, type: str=None):
        """BridgeNumber - a model defined in OpenAPI

        :param bridge_number: The bridge_number of this BridgeNumber.
        :param country: The country of this BridgeNumber.
        :param is_most_used: The is_most_used of this BridgeNumber.
        :param locale: The locale of this BridgeNumber.
        :param name: The name of this BridgeNumber.
        :param type: The type of this BridgeNumber.
        """
        self.openapi_types = {
            'bridge_number': str,
            'country': str,
            'is_most_used': bool,
            'locale': str,
            'name': str,
            'type': str
        }

        self.attribute_map = {
            'bridge_number': 'bridgeNumber',
            'country': 'country',
            'is_most_used': 'isMostUsed',
            'locale': 'locale',
            'name': 'name',
            'type': 'type'
        }

        self._bridge_number = bridge_number
        self._country = country
        self._is_most_used = is_most_used
        self._locale = locale
        self._name = name
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BridgeNumber':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BridgeNumber of this BridgeNumber.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bridge_number(self):
        """Gets the bridge_number of this BridgeNumber.

        The number that has to be called to join the real time session of a conversation

        :return: The bridge_number of this BridgeNumber.
        :rtype: str
        """
        return self._bridge_number

    @bridge_number.setter
    def bridge_number(self, bridge_number):
        """Sets the bridge_number of this BridgeNumber.

        The number that has to be called to join the real time session of a conversation

        :param bridge_number: The bridge_number of this BridgeNumber.
        :type bridge_number: str
        """

        self._bridge_number = bridge_number

    @property
    def country(self):
        """Gets the country of this BridgeNumber.

        The country where the bridge is hosted

        :return: The country of this BridgeNumber.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this BridgeNumber.

        The country where the bridge is hosted

        :param country: The country of this BridgeNumber.
        :type country: str
        """

        self._country = country

    @property
    def is_most_used(self):
        """Gets the is_most_used of this BridgeNumber.

        Is most used

        :return: The is_most_used of this BridgeNumber.
        :rtype: bool
        """
        return self._is_most_used

    @is_most_used.setter
    def is_most_used(self, is_most_used):
        """Sets the is_most_used of this BridgeNumber.

        Is most used

        :param is_most_used: The is_most_used of this BridgeNumber.
        :type is_most_used: bool
        """

        self._is_most_used = is_most_used

    @property
    def locale(self):
        """Gets the locale of this BridgeNumber.

        The locale of the bridge

        :return: The locale of this BridgeNumber.
        :rtype: str
        """
        return self._locale

    @locale.setter
    def locale(self, locale):
        """Sets the locale of this BridgeNumber.

        The locale of the bridge

        :param locale: The locale of this BridgeNumber.
        :type locale: str
        """

        self._locale = locale

    @property
    def name(self):
        """Gets the name of this BridgeNumber.

        The name / identifier of the bridge

        :return: The name of this BridgeNumber.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this BridgeNumber.

        The name / identifier of the bridge

        :param name: The name of this BridgeNumber.
        :type name: str
        """

        self._name = name

    @property
    def type(self):
        """Gets the type of this BridgeNumber.

        Information of the billing for the call, i.e. if the caller has to pay or not for the call

        :return: The type of this BridgeNumber.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this BridgeNumber.

        Information of the billing for the call, i.e. if the caller has to pay or not for the call

        :param type: The type of this BridgeNumber.
        :type type: str
        """

        self._type = type
