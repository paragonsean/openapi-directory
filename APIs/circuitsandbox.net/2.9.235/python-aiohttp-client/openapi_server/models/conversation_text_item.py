# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.preview import Preview
from openapi_server import util


class ConversationTextItem(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, content: str=None, content_type: str=None, form_meta_data: str=None, is_webhook_message: bool=None, liked_user_ids: List[str]=None, parent_id: str=None, preview: Preview=None, state: str=None, subject: str=None):
        """ConversationTextItem - a model defined in OpenAPI

        :param content: The content of this ConversationTextItem.
        :param content_type: The content_type of this ConversationTextItem.
        :param form_meta_data: The form_meta_data of this ConversationTextItem.
        :param is_webhook_message: The is_webhook_message of this ConversationTextItem.
        :param liked_user_ids: The liked_user_ids of this ConversationTextItem.
        :param parent_id: The parent_id of this ConversationTextItem.
        :param preview: The preview of this ConversationTextItem.
        :param state: The state of this ConversationTextItem.
        :param subject: The subject of this ConversationTextItem.
        """
        self.openapi_types = {
            'content': str,
            'content_type': str,
            'form_meta_data': str,
            'is_webhook_message': bool,
            'liked_user_ids': List[str],
            'parent_id': str,
            'preview': Preview,
            'state': str,
            'subject': str
        }

        self.attribute_map = {
            'content': 'content',
            'content_type': 'contentType',
            'form_meta_data': 'formMetaData',
            'is_webhook_message': 'isWebhookMessage',
            'liked_user_ids': 'likedUserIds',
            'parent_id': 'parentId',
            'preview': 'preview',
            'state': 'state',
            'subject': 'subject'
        }

        self._content = content
        self._content_type = content_type
        self._form_meta_data = form_meta_data
        self._is_webhook_message = is_webhook_message
        self._liked_user_ids = liked_user_ids
        self._parent_id = parent_id
        self._preview = preview
        self._state = state
        self._subject = subject

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ConversationTextItem':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ConversationTextItem of this ConversationTextItem.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def content(self):
        """Gets the content of this ConversationTextItem.

        The content of the text item

        :return: The content of this ConversationTextItem.
        :rtype: str
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this ConversationTextItem.

        The content of the text item

        :param content: The content of this ConversationTextItem.
        :type content: str
        """

        self._content = content

    @property
    def content_type(self):
        """Gets the content_type of this ConversationTextItem.

        The type of the text item. It can be one of the following: RICH (with HTML content) or PLAIN (only text)

        :return: The content_type of this ConversationTextItem.
        :rtype: str
        """
        return self._content_type

    @content_type.setter
    def content_type(self, content_type):
        """Sets the content_type of this ConversationTextItem.

        The type of the text item. It can be one of the following: RICH (with HTML content) or PLAIN (only text)

        :param content_type: The content_type of this ConversationTextItem.
        :type content_type: str
        """

        self._content_type = content_type

    @property
    def form_meta_data(self):
        """Gets the form_meta_data of this ConversationTextItem.

        The meta data form

        :return: The form_meta_data of this ConversationTextItem.
        :rtype: str
        """
        return self._form_meta_data

    @form_meta_data.setter
    def form_meta_data(self, form_meta_data):
        """Sets the form_meta_data of this ConversationTextItem.

        The meta data form

        :param form_meta_data: The form_meta_data of this ConversationTextItem.
        :type form_meta_data: str
        """

        self._form_meta_data = form_meta_data

    @property
    def is_webhook_message(self):
        """Gets the is_webhook_message of this ConversationTextItem.

        Is this a webhook message?

        :return: The is_webhook_message of this ConversationTextItem.
        :rtype: bool
        """
        return self._is_webhook_message

    @is_webhook_message.setter
    def is_webhook_message(self, is_webhook_message):
        """Sets the is_webhook_message of this ConversationTextItem.

        Is this a webhook message?

        :param is_webhook_message: The is_webhook_message of this ConversationTextItem.
        :type is_webhook_message: bool
        """

        self._is_webhook_message = is_webhook_message

    @property
    def liked_user_ids(self):
        """Gets the liked_user_ids of this ConversationTextItem.

        Array of IDs of the users who liked the item

        :return: The liked_user_ids of this ConversationTextItem.
        :rtype: List[str]
        """
        return self._liked_user_ids

    @liked_user_ids.setter
    def liked_user_ids(self, liked_user_ids):
        """Sets the liked_user_ids of this ConversationTextItem.

        Array of IDs of the users who liked the item

        :param liked_user_ids: The liked_user_ids of this ConversationTextItem.
        :type liked_user_ids: List[str]
        """

        self._liked_user_ids = liked_user_ids

    @property
    def parent_id(self):
        """Gets the parent_id of this ConversationTextItem.

        The ID of the parent item of the text item. This field is optional and can be used for thread views

        :return: The parent_id of this ConversationTextItem.
        :rtype: str
        """
        return self._parent_id

    @parent_id.setter
    def parent_id(self, parent_id):
        """Sets the parent_id of this ConversationTextItem.

        The ID of the parent item of the text item. This field is optional and can be used for thread views

        :param parent_id: The parent_id of this ConversationTextItem.
        :type parent_id: str
        """

        self._parent_id = parent_id

    @property
    def preview(self):
        """Gets the preview of this ConversationTextItem.


        :return: The preview of this ConversationTextItem.
        :rtype: Preview
        """
        return self._preview

    @preview.setter
    def preview(self, preview):
        """Sets the preview of this ConversationTextItem.


        :param preview: The preview of this ConversationTextItem.
        :type preview: Preview
        """

        self._preview = preview

    @property
    def state(self):
        """Gets the state of this ConversationTextItem.

        The state of the text item. It can be one of the following: CREATED (which denotes that it was not modified since its creation), EDITED (which denotes that the creator of this item modified the item) or DELETED (which denotes that the item itself exists but its content was removed)

        :return: The state of this ConversationTextItem.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this ConversationTextItem.

        The state of the text item. It can be one of the following: CREATED (which denotes that it was not modified since its creation), EDITED (which denotes that the creator of this item modified the item) or DELETED (which denotes that the item itself exists but its content was removed)

        :param state: The state of this ConversationTextItem.
        :type state: str
        """

        self._state = state

    @property
    def subject(self):
        """Gets the subject of this ConversationTextItem.

        TThe subject of the text item. This field is optional and maybe filled when creating the text item

        :return: The subject of this ConversationTextItem.
        :rtype: str
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """Sets the subject of this ConversationTextItem.

        TThe subject of the text item. This field is optional and maybe filled when creating the text item

        :param subject: The subject of this ConversationTextItem.
        :type subject: str
        """

        self._subject = subject
