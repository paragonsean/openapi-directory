# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.conversation_participant import ConversationParticipant
from openapi_server import util


class ConversationParticipantsList(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, has_more: bool=None, participant_list: List[ConversationParticipant]=None, search_pointer: str=None):
        """ConversationParticipantsList - a model defined in OpenAPI

        :param has_more: The has_more of this ConversationParticipantsList.
        :param participant_list: The participant_list of this ConversationParticipantsList.
        :param search_pointer: The search_pointer of this ConversationParticipantsList.
        """
        self.openapi_types = {
            'has_more': bool,
            'participant_list': List[ConversationParticipant],
            'search_pointer': str
        }

        self.attribute_map = {
            'has_more': 'hasMore',
            'participant_list': 'participantList',
            'search_pointer': 'searchPointer'
        }

        self._has_more = has_more
        self._participant_list = participant_list
        self._search_pointer = search_pointer

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ConversationParticipantsList':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ConversationParticipantsList of this ConversationParticipantsList.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def has_more(self):
        """Gets the has_more of this ConversationParticipantsList.

        are more results available, then start another search with finer query

        :return: The has_more of this ConversationParticipantsList.
        :rtype: bool
        """
        return self._has_more

    @has_more.setter
    def has_more(self, has_more):
        """Sets the has_more of this ConversationParticipantsList.

        are more results available, then start another search with finer query

        :param has_more: The has_more of this ConversationParticipantsList.
        :type has_more: bool
        """

        self._has_more = has_more

    @property
    def participant_list(self):
        """Gets the participant_list of this ConversationParticipantsList.

        list of participants

        :return: The participant_list of this ConversationParticipantsList.
        :rtype: List[ConversationParticipant]
        """
        return self._participant_list

    @participant_list.setter
    def participant_list(self, participant_list):
        """Sets the participant_list of this ConversationParticipantsList.

        list of participants

        :param participant_list: The participant_list of this ConversationParticipantsList.
        :type participant_list: List[ConversationParticipant]
        """

        self._participant_list = participant_list

    @property
    def search_pointer(self):
        """Gets the search_pointer of this ConversationParticipantsList.

        pointer for stored search 

        :return: The search_pointer of this ConversationParticipantsList.
        :rtype: str
        """
        return self._search_pointer

    @search_pointer.setter
    def search_pointer(self, search_pointer):
        """Sets the search_pointer of this ConversationParticipantsList.

        pointer for stored search 

        :param search_pointer: The search_pointer of this ConversationParticipantsList.
        :type search_pointer: str
        """

        self._search_pointer = search_pointer
