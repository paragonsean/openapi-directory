/**
 * REST API Version 2
 * Circuit REST API to interact with the Circuit system.  [Learn more about the Circuit Development Community](https://www.circuit.com/web/developers/home)
 *
 * The version of the OpenAPI document: 2.9.235
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.RestApiVersion2);
  }
}(this, function(expect, RestApiVersion2) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new RestApiVersion2.Space();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('Space', function() {
    it('should create an instance of Space', function() {
      // uncomment below and update the code to test Space
      //var instance = new RestApiVersion2.Space();
      //expect(instance).to.be.a(RestApiVersion2.Space);
    });

    it('should have the property accessModeType (base name: "accessModeType")', function() {
      // uncomment below and update the code to test the property accessModeType
      //var instance = new RestApiVersion2.Space();
      //expect(instance).to.be();
    });

    it('should have the property creationTime (base name: "creationTime")', function() {
      // uncomment below and update the code to test the property creationTime
      //var instance = new RestApiVersion2.Space();
      //expect(instance).to.be();
    });

    it('should have the property creatorId (base name: "creatorId")', function() {
      // uncomment below and update the code to test the property creatorId
      //var instance = new RestApiVersion2.Space();
      //expect(instance).to.be();
    });

    it('should have the property defaultRole (base name: "defaultRole")', function() {
      // uncomment below and update the code to test the property defaultRole
      //var instance = new RestApiVersion2.Space();
      //expect(instance).to.be();
    });

    it('should have the property description (base name: "description")', function() {
      // uncomment below and update the code to test the property description
      //var instance = new RestApiVersion2.Space();
      //expect(instance).to.be();
    });

    it('should have the property largePictureBase64 (base name: "largePictureBase64")', function() {
      // uncomment below and update the code to test the property largePictureBase64
      //var instance = new RestApiVersion2.Space();
      //expect(instance).to.be();
    });

    it('should have the property largePictureContentType (base name: "largePictureContentType")', function() {
      // uncomment below and update the code to test the property largePictureContentType
      //var instance = new RestApiVersion2.Space();
      //expect(instance).to.be();
    });

    it('should have the property largePictureId (base name: "largePictureId")', function() {
      // uncomment below and update the code to test the property largePictureId
      //var instance = new RestApiVersion2.Space();
      //expect(instance).to.be();
    });

    it('should have the property lastContentCreationTime (base name: "lastContentCreationTime")', function() {
      // uncomment below and update the code to test the property lastContentCreationTime
      //var instance = new RestApiVersion2.Space();
      //expect(instance).to.be();
    });

    it('should have the property lastContentCreatorId (base name: "lastContentCreatorId")', function() {
      // uncomment below and update the code to test the property lastContentCreatorId
      //var instance = new RestApiVersion2.Space();
      //expect(instance).to.be();
    });

    it('should have the property modificationTime (base name: "modificationTime")', function() {
      // uncomment below and update the code to test the property modificationTime
      //var instance = new RestApiVersion2.Space();
      //expect(instance).to.be();
    });

    it('should have the property name (base name: "name")', function() {
      // uncomment below and update the code to test the property name
      //var instance = new RestApiVersion2.Space();
      //expect(instance).to.be();
    });

    it('should have the property numberOfExternalParticipants (base name: "numberOfExternalParticipants")', function() {
      // uncomment below and update the code to test the property numberOfExternalParticipants
      //var instance = new RestApiVersion2.Space();
      //expect(instance).to.be();
    });

    it('should have the property numberOfParticipants (base name: "numberOfParticipants")', function() {
      // uncomment below and update the code to test the property numberOfParticipants
      //var instance = new RestApiVersion2.Space();
      //expect(instance).to.be();
    });

    it('should have the property numberOfPinnedTopics (base name: "numberOfPinnedTopics")', function() {
      // uncomment below and update the code to test the property numberOfPinnedTopics
      //var instance = new RestApiVersion2.Space();
      //expect(instance).to.be();
    });

    it('should have the property numberOfReplies (base name: "numberOfReplies")', function() {
      // uncomment below and update the code to test the property numberOfReplies
      //var instance = new RestApiVersion2.Space();
      //expect(instance).to.be();
    });

    it('should have the property numberOfTopics (base name: "numberOfTopics")', function() {
      // uncomment below and update the code to test the property numberOfTopics
      //var instance = new RestApiVersion2.Space();
      //expect(instance).to.be();
    });

    it('should have the property ownerId (base name: "ownerId")', function() {
      // uncomment below and update the code to test the property ownerId
      //var instance = new RestApiVersion2.Space();
      //expect(instance).to.be();
    });

    it('should have the property smallPictureBase64 (base name: "smallPictureBase64")', function() {
      // uncomment below and update the code to test the property smallPictureBase64
      //var instance = new RestApiVersion2.Space();
      //expect(instance).to.be();
    });

    it('should have the property smallPictureContentType (base name: "smallPictureContentType")', function() {
      // uncomment below and update the code to test the property smallPictureContentType
      //var instance = new RestApiVersion2.Space();
      //expect(instance).to.be();
    });

    it('should have the property smallPictureId (base name: "smallPictureId")', function() {
      // uncomment below and update the code to test the property smallPictureId
      //var instance = new RestApiVersion2.Space();
      //expect(instance).to.be();
    });

    it('should have the property spaceId (base name: "spaceId")', function() {
      // uncomment below and update the code to test the property spaceId
      //var instance = new RestApiVersion2.Space();
      //expect(instance).to.be();
    });

    it('should have the property status (base name: "status")', function() {
      // uncomment below and update the code to test the property status
      //var instance = new RestApiVersion2.Space();
      //expect(instance).to.be();
    });

    it('should have the property tags (base name: "tags")', function() {
      // uncomment below and update the code to test the property tags
      //var instance = new RestApiVersion2.Space();
      //expect(instance).to.be();
    });

    it('should have the property tenantId (base name: "tenantId")', function() {
      // uncomment below and update the code to test the property tenantId
      //var instance = new RestApiVersion2.Space();
      //expect(instance).to.be();
    });

    it('should have the property type (base name: "type")', function() {
      // uncomment below and update the code to test the property type
      //var instance = new RestApiVersion2.Space();
      //expect(instance).to.be();
    });

  });

}));
