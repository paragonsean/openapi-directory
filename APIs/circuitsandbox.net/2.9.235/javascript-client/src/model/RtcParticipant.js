/**
 * REST API Version 2
 * Circuit REST API to interact with the Circuit system.  [Learn more about the Circuit Development Community](https://www.circuit.com/web/developers/home)
 *
 * The version of the OpenAPI document: 2.9.235
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The RtcParticipant model module.
 * @module model/RtcParticipant
 * @version 2.9.235
 */
class RtcParticipant {
    /**
     * Constructs a new <code>RtcParticipant</code>.
     * @alias module:model/RtcParticipant
     */
    constructor() { 
        
        RtcParticipant.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>RtcParticipant</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RtcParticipant} obj Optional instance to populate.
     * @return {module:model/RtcParticipant} The populated <code>RtcParticipant</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RtcParticipant();

            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('fullyQualifiedNumber')) {
                obj['fullyQualifiedNumber'] = ApiClient.convertToType(data['fullyQualifiedNumber'], 'String');
            }
            if (data.hasOwnProperty('phoneNumber')) {
                obj['phoneNumber'] = ApiClient.convertToType(data['phoneNumber'], 'String');
            }
            if (data.hasOwnProperty('resolvedUser')) {
                obj['resolvedUser'] = ApiClient.convertToType(data['resolvedUser'], Object);
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('userId')) {
                obj['userId'] = ApiClient.convertToType(data['userId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RtcParticipant</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RtcParticipant</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }
        // ensure the json data is a string
        if (data['fullyQualifiedNumber'] && !(typeof data['fullyQualifiedNumber'] === 'string' || data['fullyQualifiedNumber'] instanceof String)) {
            throw new Error("Expected the field `fullyQualifiedNumber` to be a primitive type in the JSON string but got " + data['fullyQualifiedNumber']);
        }
        // ensure the json data is a string
        if (data['phoneNumber'] && !(typeof data['phoneNumber'] === 'string' || data['phoneNumber'] instanceof String)) {
            throw new Error("Expected the field `phoneNumber` to be a primitive type in the JSON string but got " + data['phoneNumber']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is a string
        if (data['userId'] && !(typeof data['userId'] === 'string' || data['userId'] instanceof String)) {
            throw new Error("Expected the field `userId` to be a primitive type in the JSON string but got " + data['userId']);
        }

        return true;
    }


}



/**
 * The display name of the participant.
 * @member {String} displayName
 */
RtcParticipant.prototype['displayName'] = undefined;

/**
 * missing documentation
 * @member {String} fullyQualifiedNumber
 */
RtcParticipant.prototype['fullyQualifiedNumber'] = undefined;

/**
 * missing documentation
 * @member {String} phoneNumber
 */
RtcParticipant.prototype['phoneNumber'] = undefined;

/**
 * missing documentation
 * @member {Object} resolvedUser
 */
RtcParticipant.prototype['resolvedUser'] = undefined;

/**
 * The RTC type of the participant.
 * @member {String} type
 */
RtcParticipant.prototype['type'] = undefined;

/**
 * The ID of the participant.
 * @member {String} userId
 */
RtcParticipant.prototype['userId'] = undefined;






export default RtcParticipant;

