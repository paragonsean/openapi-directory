/**
 * REST API Version 2
 * Circuit REST API to interact with the Circuit system.  [Learn more about the Circuit Development Community](https://www.circuit.com/web/developers/home)
 *
 * The version of the OpenAPI document: 2.9.235
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Attachment from './Attachment';
import ConversationTextItem from './ConversationTextItem';
import RtcItem from './RtcItem';
import SystemItem from './SystemItem';

/**
 * The ConversationItem model module.
 * @module model/ConversationItem
 * @version 2.9.235
 */
class ConversationItem {
    /**
     * Constructs a new <code>ConversationItem</code>.
     * @alias module:model/ConversationItem
     */
    constructor() { 
        
        ConversationItem.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ConversationItem</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ConversationItem} obj Optional instance to populate.
     * @return {module:model/ConversationItem} The populated <code>ConversationItem</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ConversationItem();

            if (data.hasOwnProperty('attachments')) {
                obj['attachments'] = ApiClient.convertToType(data['attachments'], [Attachment]);
            }
            if (data.hasOwnProperty('convId')) {
                obj['convId'] = ApiClient.convertToType(data['convId'], 'String');
            }
            if (data.hasOwnProperty('creationTime')) {
                obj['creationTime'] = ApiClient.convertToType(data['creationTime'], 'Number');
            }
            if (data.hasOwnProperty('creatorId')) {
                obj['creatorId'] = ApiClient.convertToType(data['creatorId'], 'String');
            }
            if (data.hasOwnProperty('includeInUnreadCount')) {
                obj['includeInUnreadCount'] = ApiClient.convertToType(data['includeInUnreadCount'], 'Boolean');
            }
            if (data.hasOwnProperty('itemId')) {
                obj['itemId'] = ApiClient.convertToType(data['itemId'], 'String');
            }
            if (data.hasOwnProperty('modificationTime')) {
                obj['modificationTime'] = ApiClient.convertToType(data['modificationTime'], 'Number');
            }
            if (data.hasOwnProperty('rtc')) {
                obj['rtc'] = RtcItem.constructFromObject(data['rtc']);
            }
            if (data.hasOwnProperty('system')) {
                obj['system'] = SystemItem.constructFromObject(data['system']);
            }
            if (data.hasOwnProperty('text')) {
                obj['text'] = ConversationTextItem.constructFromObject(data['text']);
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ConversationItem</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ConversationItem</code>.
     */
    static validateJSON(data) {
        if (data['attachments']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['attachments'])) {
                throw new Error("Expected the field `attachments` to be an array in the JSON data but got " + data['attachments']);
            }
            // validate the optional field `attachments` (array)
            for (const item of data['attachments']) {
                Attachment.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['convId'] && !(typeof data['convId'] === 'string' || data['convId'] instanceof String)) {
            throw new Error("Expected the field `convId` to be a primitive type in the JSON string but got " + data['convId']);
        }
        // ensure the json data is a string
        if (data['creatorId'] && !(typeof data['creatorId'] === 'string' || data['creatorId'] instanceof String)) {
            throw new Error("Expected the field `creatorId` to be a primitive type in the JSON string but got " + data['creatorId']);
        }
        // ensure the json data is a string
        if (data['itemId'] && !(typeof data['itemId'] === 'string' || data['itemId'] instanceof String)) {
            throw new Error("Expected the field `itemId` to be a primitive type in the JSON string but got " + data['itemId']);
        }
        // validate the optional field `rtc`
        if (data['rtc']) { // data not null
          RtcItem.validateJSON(data['rtc']);
        }
        // validate the optional field `system`
        if (data['system']) { // data not null
          SystemItem.validateJSON(data['system']);
        }
        // validate the optional field `text`
        if (data['text']) { // data not null
          ConversationTextItem.validateJSON(data['text']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}



/**
 * Array of files attached to the item
 * @member {Array.<module:model/Attachment>} attachments
 */
ConversationItem.prototype['attachments'] = undefined;

/**
 * The ID of the conversation the item belongs to
 * @member {String} convId
 */
ConversationItem.prototype['convId'] = undefined;

/**
 * UTC timestamp when the item was created
 * @member {Number} creationTime
 */
ConversationItem.prototype['creationTime'] = undefined;

/**
 * The ID of the user who created the conversation item
 * @member {String} creatorId
 */
ConversationItem.prototype['creatorId'] = undefined;

/**
 * Indicates whether the item is included in the unread message count
 * @member {Boolean} includeInUnreadCount
 */
ConversationItem.prototype['includeInUnreadCount'] = undefined;

/**
 * The ID of the item
 * @member {String} itemId
 */
ConversationItem.prototype['itemId'] = undefined;

/**
 * UTC timestamp when the conversation was modified
 * @member {Number} modificationTime
 */
ConversationItem.prototype['modificationTime'] = undefined;

/**
 * @member {module:model/RtcItem} rtc
 */
ConversationItem.prototype['rtc'] = undefined;

/**
 * @member {module:model/SystemItem} system
 */
ConversationItem.prototype['system'] = undefined;

/**
 * @member {module:model/ConversationTextItem} text
 */
ConversationItem.prototype['text'] = undefined;

/**
 * The type of the conversation item. It can be one of the following TEXT, SYSTEM or RTC
 * @member {String} type
 */
ConversationItem.prototype['type'] = undefined;






export default ConversationItem;

