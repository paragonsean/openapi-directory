/**
 * REST API Version 2
 * Circuit REST API to interact with the Circuit system.  [Learn more about the Circuit Development Community](https://www.circuit.com/web/developers/home)
 *
 * The version of the OpenAPI document: 2.9.235
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The WebHook model module.
 * @module model/WebHook
 * @version 2.9.235
 */
class WebHook {
    /**
     * Constructs a new <code>WebHook</code>.
     * @alias module:model/WebHook
     */
    constructor() { 
        
        WebHook.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>WebHook</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/WebHook} obj Optional instance to populate.
     * @return {module:model/WebHook} The populated <code>WebHook</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new WebHook();

            if (data.hasOwnProperty('creationTime')) {
                obj['creationTime'] = ApiClient.convertToType(data['creationTime'], 'Number');
            }
            if (data.hasOwnProperty('filter')) {
                obj['filter'] = ApiClient.convertToType(data['filter'], ['String']);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('subscriptionIds')) {
                obj['subscriptionIds'] = ApiClient.convertToType(data['subscriptionIds'], ['String']);
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
            if (data.hasOwnProperty('userId')) {
                obj['userId'] = ApiClient.convertToType(data['userId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>WebHook</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>WebHook</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['filter'])) {
            throw new Error("Expected the field `filter` to be an array in the JSON data but got " + data['filter']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['subscriptionIds'])) {
            throw new Error("Expected the field `subscriptionIds` to be an array in the JSON data but got " + data['subscriptionIds']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }
        // ensure the json data is a string
        if (data['userId'] && !(typeof data['userId'] === 'string' || data['userId'] instanceof String)) {
            throw new Error("Expected the field `userId` to be a primitive type in the JSON string but got " + data['userId']);
        }

        return true;
    }


}



/**
 * The time when this WebHook was created. This does not necessary mean the time when an manifest file was created.
 * @member {Number} creationTime
 */
WebHook.prototype['creationTime'] = undefined;

/**
 * An optional list of filter parameters for this webhook.
 * @member {Array.<String>} filter
 */
WebHook.prototype['filter'] = undefined;

/**
 * The unique identifier for this webhook. Can be used later to unregister the webhook.
 * @member {String} id
 */
WebHook.prototype['id'] = undefined;

/**
 * The optional list of userids for which this webhook is subscribed, i.e. presence events for the user are forwarded to the WebHook callback URL.
 * @member {Array.<String>} subscriptionIds
 */
WebHook.prototype['subscriptionIds'] = undefined;

/**
 * The type of a WebHook. This can either be MANUAL or EXTENSION. While manual WebHooks are only temporary and for development only use, permanent ones (EXTENSION) will bemanaged by the system.
 * @member {String} type
 */
WebHook.prototype['type'] = undefined;

/**
 * The callback URL of this webhook.
 * @member {String} url
 */
WebHook.prototype['url'] = undefined;

/**
 * The user ID for which this webhook is subscribed, i.e. events for this user are forwarded to the WebHook callback URL.
 * @member {String} userId
 */
WebHook.prototype['userId'] = undefined;






export default WebHook;

