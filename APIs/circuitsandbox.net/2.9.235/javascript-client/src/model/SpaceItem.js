/**
 * REST API Version 2
 * Circuit REST API to interact with the Circuit system.  [Learn more about the Circuit Development Community](https://www.circuit.com/web/developers/home)
 *
 * The version of the OpenAPI document: 2.9.235
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import SharedItem from './SharedItem';
import SpaceAttachment from './SpaceAttachment';
import SpaceExternalAttachment from './SpaceExternalAttachment';
import SpaceItemPreview from './SpaceItemPreview';

/**
 * The SpaceItem model module.
 * @module model/SpaceItem
 * @version 2.9.235
 */
class SpaceItem {
    /**
     * Constructs a new <code>SpaceItem</code>.
     * @alias module:model/SpaceItem
     */
    constructor() { 
        
        SpaceItem.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SpaceItem</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SpaceItem} obj Optional instance to populate.
     * @return {module:model/SpaceItem} The populated <code>SpaceItem</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SpaceItem();

            if (data.hasOwnProperty('Status')) {
                obj['Status'] = ApiClient.convertToType(data['Status'], 'String');
            }
            if (data.hasOwnProperty('attachments')) {
                obj['attachments'] = ApiClient.convertToType(data['attachments'], [SpaceAttachment]);
            }
            if (data.hasOwnProperty('complex')) {
                obj['complex'] = ApiClient.convertToType(data['complex'], 'Boolean');
            }
            if (data.hasOwnProperty('content')) {
                obj['content'] = ApiClient.convertToType(data['content'], 'String');
            }
            if (data.hasOwnProperty('creationTime')) {
                obj['creationTime'] = ApiClient.convertToType(data['creationTime'], 'Number');
            }
            if (data.hasOwnProperty('creatorId')) {
                obj['creatorId'] = ApiClient.convertToType(data['creatorId'], 'String');
            }
            if (data.hasOwnProperty('deletedBy')) {
                obj['deletedBy'] = ApiClient.convertToType(data['deletedBy'], 'String');
            }
            if (data.hasOwnProperty('externalAttachments')) {
                obj['externalAttachments'] = ApiClient.convertToType(data['externalAttachments'], [SpaceExternalAttachment]);
            }
            if (data.hasOwnProperty('formMetaData')) {
                obj['formMetaData'] = ApiClient.convertToType(data['formMetaData'], 'String');
            }
            if (data.hasOwnProperty('itemId')) {
                obj['itemId'] = ApiClient.convertToType(data['itemId'], 'String');
            }
            if (data.hasOwnProperty('mentionedUsers')) {
                obj['mentionedUsers'] = ApiClient.convertToType(data['mentionedUsers'], ['String']);
            }
            if (data.hasOwnProperty('modificationTime')) {
                obj['modificationTime'] = ApiClient.convertToType(data['modificationTime'], 'Number');
            }
            if (data.hasOwnProperty('numberOfLikes')) {
                obj['numberOfLikes'] = ApiClient.convertToType(data['numberOfLikes'], 'Number');
            }
            if (data.hasOwnProperty('previews')) {
                obj['previews'] = ApiClient.convertToType(data['previews'], [SpaceItemPreview]);
            }
            if (data.hasOwnProperty('sharedItems')) {
                obj['sharedItems'] = ApiClient.convertToType(data['sharedItems'], [SharedItem]);
            }
            if (data.hasOwnProperty('spaceId')) {
                obj['spaceId'] = ApiClient.convertToType(data['spaceId'], 'String');
            }
            if (data.hasOwnProperty('tenantId')) {
                obj['tenantId'] = ApiClient.convertToType(data['tenantId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SpaceItem</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SpaceItem</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['Status'] && !(typeof data['Status'] === 'string' || data['Status'] instanceof String)) {
            throw new Error("Expected the field `Status` to be a primitive type in the JSON string but got " + data['Status']);
        }
        if (data['attachments']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['attachments'])) {
                throw new Error("Expected the field `attachments` to be an array in the JSON data but got " + data['attachments']);
            }
            // validate the optional field `attachments` (array)
            for (const item of data['attachments']) {
                SpaceAttachment.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['content'] && !(typeof data['content'] === 'string' || data['content'] instanceof String)) {
            throw new Error("Expected the field `content` to be a primitive type in the JSON string but got " + data['content']);
        }
        // ensure the json data is a string
        if (data['creatorId'] && !(typeof data['creatorId'] === 'string' || data['creatorId'] instanceof String)) {
            throw new Error("Expected the field `creatorId` to be a primitive type in the JSON string but got " + data['creatorId']);
        }
        // ensure the json data is a string
        if (data['deletedBy'] && !(typeof data['deletedBy'] === 'string' || data['deletedBy'] instanceof String)) {
            throw new Error("Expected the field `deletedBy` to be a primitive type in the JSON string but got " + data['deletedBy']);
        }
        if (data['externalAttachments']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['externalAttachments'])) {
                throw new Error("Expected the field `externalAttachments` to be an array in the JSON data but got " + data['externalAttachments']);
            }
            // validate the optional field `externalAttachments` (array)
            for (const item of data['externalAttachments']) {
                SpaceExternalAttachment.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['formMetaData'] && !(typeof data['formMetaData'] === 'string' || data['formMetaData'] instanceof String)) {
            throw new Error("Expected the field `formMetaData` to be a primitive type in the JSON string but got " + data['formMetaData']);
        }
        // ensure the json data is a string
        if (data['itemId'] && !(typeof data['itemId'] === 'string' || data['itemId'] instanceof String)) {
            throw new Error("Expected the field `itemId` to be a primitive type in the JSON string but got " + data['itemId']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['mentionedUsers'])) {
            throw new Error("Expected the field `mentionedUsers` to be an array in the JSON data but got " + data['mentionedUsers']);
        }
        if (data['previews']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['previews'])) {
                throw new Error("Expected the field `previews` to be an array in the JSON data but got " + data['previews']);
            }
            // validate the optional field `previews` (array)
            for (const item of data['previews']) {
                SpaceItemPreview.validateJSON(item);
            };
        }
        if (data['sharedItems']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['sharedItems'])) {
                throw new Error("Expected the field `sharedItems` to be an array in the JSON data but got " + data['sharedItems']);
            }
            // validate the optional field `sharedItems` (array)
            for (const item of data['sharedItems']) {
                SharedItem.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['spaceId'] && !(typeof data['spaceId'] === 'string' || data['spaceId'] instanceof String)) {
            throw new Error("Expected the field `spaceId` to be a primitive type in the JSON string but got " + data['spaceId']);
        }
        // ensure the json data is a string
        if (data['tenantId'] && !(typeof data['tenantId'] === 'string' || data['tenantId'] instanceof String)) {
            throw new Error("Expected the field `tenantId` to be a primitive type in the JSON string but got " + data['tenantId']);
        }

        return true;
    }


}



/**
 * The Status of this item
 * @member {String} Status
 */
SpaceItem.prototype['Status'] = undefined;

/**
 * The list of attachments
 * @member {Array.<module:model/SpaceAttachment>} attachments
 */
SpaceItem.prototype['attachments'] = undefined;

/**
 * Is this item complex
 * @member {Boolean} complex
 */
SpaceItem.prototype['complex'] = undefined;

/**
 * The content of this item
 * @member {String} content
 */
SpaceItem.prototype['content'] = undefined;

/**
 * The time this item got created
 * @member {Number} creationTime
 */
SpaceItem.prototype['creationTime'] = undefined;

/**
 * The Id of the creator
 * @member {String} creatorId
 */
SpaceItem.prototype['creatorId'] = undefined;

/**
 * Incase this item got deleted, the id of the deletor
 * @member {String} deletedBy
 */
SpaceItem.prototype['deletedBy'] = undefined;

/**
 * A list of external attachments
 * @member {Array.<module:model/SpaceExternalAttachment>} externalAttachments
 */
SpaceItem.prototype['externalAttachments'] = undefined;

/**
 * Incase there is FormMetaData
 * @member {String} formMetaData
 */
SpaceItem.prototype['formMetaData'] = undefined;

/**
 * the Id of this item
 * @member {String} itemId
 */
SpaceItem.prototype['itemId'] = undefined;

/**
 * A list of userIds who have been mentioned in this item
 * @member {Array.<String>} mentionedUsers
 */
SpaceItem.prototype['mentionedUsers'] = undefined;

/**
 * the time this item got modified
 * @member {Number} modificationTime
 */
SpaceItem.prototype['modificationTime'] = undefined;

/**
 * The number of likes
 * @member {Number} numberOfLikes
 */
SpaceItem.prototype['numberOfLikes'] = undefined;

/**
 * A list of previews
 * @member {Array.<module:model/SpaceItemPreview>} previews
 */
SpaceItem.prototype['previews'] = undefined;

/**
 * missing documentation
 * @member {Array.<module:model/SharedItem>} sharedItems
 */
SpaceItem.prototype['sharedItems'] = undefined;

/**
 * the Id of the space containing this item
 * @member {String} spaceId
 */
SpaceItem.prototype['spaceId'] = undefined;

/**
 * the Id of the tenant
 * @member {String} tenantId
 */
SpaceItem.prototype['tenantId'] = undefined;






export default SpaceItem;

