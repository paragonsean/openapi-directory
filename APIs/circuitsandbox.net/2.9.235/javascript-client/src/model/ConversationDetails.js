/**
 * REST API Version 2
 * Circuit REST API to interact with the Circuit system.  [Learn more about the Circuit Development Community](https://www.circuit.com/web/developers/home)
 *
 * The version of the OpenAPI document: 2.9.235
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import BridgeNumber from './BridgeNumber';

/**
 * The ConversationDetails model module.
 * @module model/ConversationDetails
 * @version 2.9.235
 */
class ConversationDetails {
    /**
     * Constructs a new <code>ConversationDetails</code>.
     * @alias module:model/ConversationDetails
     */
    constructor() { 
        
        ConversationDetails.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ConversationDetails</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ConversationDetails} obj Optional instance to populate.
     * @return {module:model/ConversationDetails} The populated <code>ConversationDetails</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ConversationDetails();

            if (data.hasOwnProperty('bridgeNumbers')) {
                obj['bridgeNumbers'] = ApiClient.convertToType(data['bridgeNumbers'], [BridgeNumber]);
            }
            if (data.hasOwnProperty('convId')) {
                obj['convId'] = ApiClient.convertToType(data['convId'], 'String');
            }
            if (data.hasOwnProperty('conversationCreatorId')) {
                obj['conversationCreatorId'] = ApiClient.convertToType(data['conversationCreatorId'], 'String');
            }
            if (data.hasOwnProperty('isModerationAllowed')) {
                obj['isModerationAllowed'] = ApiClient.convertToType(data['isModerationAllowed'], 'Boolean');
            }
            if (data.hasOwnProperty('isRecordingAllowed')) {
                obj['isRecordingAllowed'] = ApiClient.convertToType(data['isRecordingAllowed'], 'Boolean');
            }
            if (data.hasOwnProperty('link')) {
                obj['link'] = ApiClient.convertToType(data['link'], 'String');
            }
            if (data.hasOwnProperty('pin')) {
                obj['pin'] = ApiClient.convertToType(data['pin'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ConversationDetails</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ConversationDetails</code>.
     */
    static validateJSON(data) {
        if (data['bridgeNumbers']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['bridgeNumbers'])) {
                throw new Error("Expected the field `bridgeNumbers` to be an array in the JSON data but got " + data['bridgeNumbers']);
            }
            // validate the optional field `bridgeNumbers` (array)
            for (const item of data['bridgeNumbers']) {
                BridgeNumber.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['convId'] && !(typeof data['convId'] === 'string' || data['convId'] instanceof String)) {
            throw new Error("Expected the field `convId` to be a primitive type in the JSON string but got " + data['convId']);
        }
        // ensure the json data is a string
        if (data['conversationCreatorId'] && !(typeof data['conversationCreatorId'] === 'string' || data['conversationCreatorId'] instanceof String)) {
            throw new Error("Expected the field `conversationCreatorId` to be a primitive type in the JSON string but got " + data['conversationCreatorId']);
        }
        // ensure the json data is a string
        if (data['link'] && !(typeof data['link'] === 'string' || data['link'] instanceof String)) {
            throw new Error("Expected the field `link` to be a primitive type in the JSON string but got " + data['link']);
        }
        // ensure the json data is a string
        if (data['pin'] && !(typeof data['pin'] === 'string' || data['pin'] instanceof String)) {
            throw new Error("Expected the field `pin` to be a primitive type in the JSON string but got " + data['pin']);
        }

        return true;
    }


}



/**
 * A list of bridge numbers which can be used to dial in to the real time session via phone
 * @member {Array.<module:model/BridgeNumber>} bridgeNumbers
 */
ConversationDetails.prototype['bridgeNumbers'] = undefined;

/**
 * missing documentation
 * @member {String} convId
 */
ConversationDetails.prototype['convId'] = undefined;

/**
 * The user ID of the conversation creator
 * @member {String} conversationCreatorId
 */
ConversationDetails.prototype['conversationCreatorId'] = undefined;

/**
 * Indicates if the conversation is allowed to be moderated
 * @member {Boolean} isModerationAllowed
 */
ConversationDetails.prototype['isModerationAllowed'] = undefined;

/**
 * Indicates if the conversation is allowed to be recorded
 * @member {Boolean} isRecordingAllowed
 */
ConversationDetails.prototype['isRecordingAllowed'] = undefined;

/**
 * A link that can be used in a browser to join the session
 * @member {String} link
 */
ConversationDetails.prototype['link'] = undefined;

/**
 * The PIN to join a real time session via phone
 * @member {String} pin
 */
ConversationDetails.prototype['pin'] = undefined;






export default ConversationDetails;

