/**
 * REST API Version 2
 * Circuit REST API to interact with the Circuit system.  [Learn more about the Circuit Development Community](https://www.circuit.com/web/developers/home)
 *
 * The version of the OpenAPI document: 2.9.235
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The SharedItem model module.
 * @module model/SharedItem
 * @version 2.9.235
 */
class SharedItem {
    /**
     * Constructs a new <code>SharedItem</code>.
     * @alias module:model/SharedItem
     */
    constructor() { 
        
        SharedItem.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SharedItem</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SharedItem} obj Optional instance to populate.
     * @return {module:model/SharedItem} The populated <code>SharedItem</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SharedItem();

            if (data.hasOwnProperty('containerId')) {
                obj['containerId'] = ApiClient.convertToType(data['containerId'], 'String');
            }
            if (data.hasOwnProperty('containerName')) {
                obj['containerName'] = ApiClient.convertToType(data['containerName'], 'String');
            }
            if (data.hasOwnProperty('containerType')) {
                obj['containerType'] = ApiClient.convertToType(data['containerType'], 'String');
            }
            if (data.hasOwnProperty('creationTime')) {
                obj['creationTime'] = ApiClient.convertToType(data['creationTime'], 'Number');
            }
            if (data.hasOwnProperty('creatorId')) {
                obj['creatorId'] = ApiClient.convertToType(data['creatorId'], 'String');
            }
            if (data.hasOwnProperty('itemId')) {
                obj['itemId'] = ApiClient.convertToType(data['itemId'], 'String');
            }
            if (data.hasOwnProperty('parentTopicId')) {
                obj['parentTopicId'] = ApiClient.convertToType(data['parentTopicId'], 'String');
            }
            if (data.hasOwnProperty('subType')) {
                obj['subType'] = ApiClient.convertToType(data['subType'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SharedItem</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SharedItem</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['containerId'] && !(typeof data['containerId'] === 'string' || data['containerId'] instanceof String)) {
            throw new Error("Expected the field `containerId` to be a primitive type in the JSON string but got " + data['containerId']);
        }
        // ensure the json data is a string
        if (data['containerName'] && !(typeof data['containerName'] === 'string' || data['containerName'] instanceof String)) {
            throw new Error("Expected the field `containerName` to be a primitive type in the JSON string but got " + data['containerName']);
        }
        // ensure the json data is a string
        if (data['containerType'] && !(typeof data['containerType'] === 'string' || data['containerType'] instanceof String)) {
            throw new Error("Expected the field `containerType` to be a primitive type in the JSON string but got " + data['containerType']);
        }
        // ensure the json data is a string
        if (data['creatorId'] && !(typeof data['creatorId'] === 'string' || data['creatorId'] instanceof String)) {
            throw new Error("Expected the field `creatorId` to be a primitive type in the JSON string but got " + data['creatorId']);
        }
        // ensure the json data is a string
        if (data['itemId'] && !(typeof data['itemId'] === 'string' || data['itemId'] instanceof String)) {
            throw new Error("Expected the field `itemId` to be a primitive type in the JSON string but got " + data['itemId']);
        }
        // ensure the json data is a string
        if (data['parentTopicId'] && !(typeof data['parentTopicId'] === 'string' || data['parentTopicId'] instanceof String)) {
            throw new Error("Expected the field `parentTopicId` to be a primitive type in the JSON string but got " + data['parentTopicId']);
        }
        // ensure the json data is a string
        if (data['subType'] && !(typeof data['subType'] === 'string' || data['subType'] instanceof String)) {
            throw new Error("Expected the field `subType` to be a primitive type in the JSON string but got " + data['subType']);
        }

        return true;
    }


}



/**
 * The Id of the container
 * @member {String} containerId
 */
SharedItem.prototype['containerId'] = undefined;

/**
 * Name of the container
 * @member {String} containerName
 */
SharedItem.prototype['containerName'] = undefined;

/**
 * Type of the container
 * @member {String} containerType
 */
SharedItem.prototype['containerType'] = undefined;

/**
 * The time this Item has been created
 * @member {Number} creationTime
 */
SharedItem.prototype['creationTime'] = undefined;

/**
 * The Id of the creator
 * @member {String} creatorId
 */
SharedItem.prototype['creatorId'] = undefined;

/**
 * Id of the item
 * @member {String} itemId
 */
SharedItem.prototype['itemId'] = undefined;

/**
 * The Id of the parent topic
 * @member {String} parentTopicId
 */
SharedItem.prototype['parentTopicId'] = undefined;

/**
 * The subtype
 * @member {String} subType
 */
SharedItem.prototype['subType'] = undefined;






export default SharedItem;

