/**
 * REST API Version 2
 * Circuit REST API to interact with the Circuit system.  [Learn more about the Circuit Development Community](https://www.circuit.com/web/developers/home)
 *
 * The version of the OpenAPI document: 2.9.235
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The V2DistributedClientInfo model module.
 * @module model/V2DistributedClientInfo
 * @version 2.9.235
 */
class V2DistributedClientInfo {
    /**
     * Constructs a new <code>V2DistributedClientInfo</code>.
     * @alias module:model/V2DistributedClientInfo
     */
    constructor() { 
        
        V2DistributedClientInfo.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>V2DistributedClientInfo</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/V2DistributedClientInfo} obj Optional instance to populate.
     * @return {module:model/V2DistributedClientInfo} The populated <code>V2DistributedClientInfo</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new V2DistributedClientInfo();

            if (data.hasOwnProperty('clientId')) {
                obj['clientId'] = ApiClient.convertToType(data['clientId'], 'String');
            }
            if (data.hasOwnProperty('clientVersion')) {
                obj['clientVersion'] = ApiClient.convertToType(data['clientVersion'], 'String');
            }
            if (data.hasOwnProperty('deviceSubtype')) {
                obj['deviceSubtype'] = ApiClient.convertToType(data['deviceSubtype'], 'String');
            }
            if (data.hasOwnProperty('deviceType')) {
                obj['deviceType'] = ApiClient.convertToType(data['deviceType'], 'String');
            }
            if (data.hasOwnProperty('hardwareModel')) {
                obj['hardwareModel'] = ApiClient.convertToType(data['hardwareModel'], 'String');
            }
            if (data.hasOwnProperty('homeNode')) {
                obj['homeNode'] = ApiClient.convertToType(data['homeNode'], 'String');
            }
            if (data.hasOwnProperty('manufacturer')) {
                obj['manufacturer'] = ApiClient.convertToType(data['manufacturer'], 'String');
            }
            if (data.hasOwnProperty('osVersion')) {
                obj['osVersion'] = ApiClient.convertToType(data['osVersion'], 'String');
            }
            if (data.hasOwnProperty('userId')) {
                obj['userId'] = ApiClient.convertToType(data['userId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>V2DistributedClientInfo</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>V2DistributedClientInfo</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['clientId'] && !(typeof data['clientId'] === 'string' || data['clientId'] instanceof String)) {
            throw new Error("Expected the field `clientId` to be a primitive type in the JSON string but got " + data['clientId']);
        }
        // ensure the json data is a string
        if (data['clientVersion'] && !(typeof data['clientVersion'] === 'string' || data['clientVersion'] instanceof String)) {
            throw new Error("Expected the field `clientVersion` to be a primitive type in the JSON string but got " + data['clientVersion']);
        }
        // ensure the json data is a string
        if (data['deviceSubtype'] && !(typeof data['deviceSubtype'] === 'string' || data['deviceSubtype'] instanceof String)) {
            throw new Error("Expected the field `deviceSubtype` to be a primitive type in the JSON string but got " + data['deviceSubtype']);
        }
        // ensure the json data is a string
        if (data['deviceType'] && !(typeof data['deviceType'] === 'string' || data['deviceType'] instanceof String)) {
            throw new Error("Expected the field `deviceType` to be a primitive type in the JSON string but got " + data['deviceType']);
        }
        // ensure the json data is a string
        if (data['hardwareModel'] && !(typeof data['hardwareModel'] === 'string' || data['hardwareModel'] instanceof String)) {
            throw new Error("Expected the field `hardwareModel` to be a primitive type in the JSON string but got " + data['hardwareModel']);
        }
        // ensure the json data is a string
        if (data['homeNode'] && !(typeof data['homeNode'] === 'string' || data['homeNode'] instanceof String)) {
            throw new Error("Expected the field `homeNode` to be a primitive type in the JSON string but got " + data['homeNode']);
        }
        // ensure the json data is a string
        if (data['manufacturer'] && !(typeof data['manufacturer'] === 'string' || data['manufacturer'] instanceof String)) {
            throw new Error("Expected the field `manufacturer` to be a primitive type in the JSON string but got " + data['manufacturer']);
        }
        // ensure the json data is a string
        if (data['osVersion'] && !(typeof data['osVersion'] === 'string' || data['osVersion'] instanceof String)) {
            throw new Error("Expected the field `osVersion` to be a primitive type in the JSON string but got " + data['osVersion']);
        }
        // ensure the json data is a string
        if (data['userId'] && !(typeof data['userId'] === 'string' || data['userId'] instanceof String)) {
            throw new Error("Expected the field `userId` to be a primitive type in the JSON string but got " + data['userId']);
        }

        return true;
    }


}



/**
 * The client id
 * @member {String} clientId
 */
V2DistributedClientInfo.prototype['clientId'] = undefined;

/**
 * The version of the client
 * @member {String} clientVersion
 */
V2DistributedClientInfo.prototype['clientVersion'] = undefined;

/**
 * The device sub type
 * @member {String} deviceSubtype
 */
V2DistributedClientInfo.prototype['deviceSubtype'] = undefined;

/**
 * The devicetype
 * @member {String} deviceType
 */
V2DistributedClientInfo.prototype['deviceType'] = undefined;

/**
 * The hardware model
 * @member {String} hardwareModel
 */
V2DistributedClientInfo.prototype['hardwareModel'] = undefined;

/**
 * The home node name
 * @member {String} homeNode
 */
V2DistributedClientInfo.prototype['homeNode'] = undefined;

/**
 * The manufacturer
 * @member {String} manufacturer
 */
V2DistributedClientInfo.prototype['manufacturer'] = undefined;

/**
 * The version of the operating system
 * @member {String} osVersion
 */
V2DistributedClientInfo.prototype['osVersion'] = undefined;

/**
 * The user id
 * @member {String} userId
 */
V2DistributedClientInfo.prototype['userId'] = undefined;






export default V2DistributedClientInfo;

