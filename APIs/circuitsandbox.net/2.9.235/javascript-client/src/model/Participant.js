/**
 * REST API Version 2
 * Circuit REST API to interact with the Circuit system.  [Learn more about the Circuit Development Community](https://www.circuit.com/web/developers/home)
 *
 * The version of the OpenAPI document: 2.9.235
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Participant model module.
 * @module model/Participant
 * @version 2.9.235
 */
class Participant {
    /**
     * Constructs a new <code>Participant</code>.
     * @alias module:model/Participant
     */
    constructor() { 
        
        Participant.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Participant</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Participant} obj Optional instance to populate.
     * @return {module:model/Participant} The populated <code>Participant</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Participant();

            if (data.hasOwnProperty('creationTime')) {
                obj['creationTime'] = ApiClient.convertToType(data['creationTime'], 'Number');
            }
            if (data.hasOwnProperty('labelIds')) {
                obj['labelIds'] = ApiClient.convertToType(data['labelIds'], ['String']);
            }
            if (data.hasOwnProperty('lastContentCreationTime')) {
                obj['lastContentCreationTime'] = ApiClient.convertToType(data['lastContentCreationTime'], 'Number');
            }
            if (data.hasOwnProperty('lastReadTimestamp')) {
                obj['lastReadTimestamp'] = ApiClient.convertToType(data['lastReadTimestamp'], 'Number');
            }
            if (data.hasOwnProperty('modificationTime')) {
                obj['modificationTime'] = ApiClient.convertToType(data['modificationTime'], 'Number');
            }
            if (data.hasOwnProperty('numberOfReplies')) {
                obj['numberOfReplies'] = ApiClient.convertToType(data['numberOfReplies'], 'Number');
            }
            if (data.hasOwnProperty('numberOfTopics')) {
                obj['numberOfTopics'] = ApiClient.convertToType(data['numberOfTopics'], 'Number');
            }
            if (data.hasOwnProperty('role')) {
                obj['role'] = ApiClient.convertToType(data['role'], 'String');
            }
            if (data.hasOwnProperty('spaceId')) {
                obj['spaceId'] = ApiClient.convertToType(data['spaceId'], 'String');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('tenantId')) {
                obj['tenantId'] = ApiClient.convertToType(data['tenantId'], 'String');
            }
            if (data.hasOwnProperty('userId')) {
                obj['userId'] = ApiClient.convertToType(data['userId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Participant</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Participant</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['labelIds'])) {
            throw new Error("Expected the field `labelIds` to be an array in the JSON data but got " + data['labelIds']);
        }
        // ensure the json data is a string
        if (data['role'] && !(typeof data['role'] === 'string' || data['role'] instanceof String)) {
            throw new Error("Expected the field `role` to be a primitive type in the JSON string but got " + data['role']);
        }
        // ensure the json data is a string
        if (data['spaceId'] && !(typeof data['spaceId'] === 'string' || data['spaceId'] instanceof String)) {
            throw new Error("Expected the field `spaceId` to be a primitive type in the JSON string but got " + data['spaceId']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }
        // ensure the json data is a string
        if (data['tenantId'] && !(typeof data['tenantId'] === 'string' || data['tenantId'] instanceof String)) {
            throw new Error("Expected the field `tenantId` to be a primitive type in the JSON string but got " + data['tenantId']);
        }
        // ensure the json data is a string
        if (data['userId'] && !(typeof data['userId'] === 'string' || data['userId'] instanceof String)) {
            throw new Error("Expected the field `userId` to be a primitive type in the JSON string but got " + data['userId']);
        }

        return true;
    }


}



/**
 * Time when the participant was added to the space
 * @member {Number} creationTime
 */
Participant.prototype['creationTime'] = undefined;

/**
 * The list of label IDs of all the labels assigned to the space.
 * @member {Array.<String>} labelIds
 */
Participant.prototype['labelIds'] = undefined;

/**
 * Time stamp when user last created content in the space.
 * @member {Number} lastContentCreationTime
 */
Participant.prototype['lastContentCreationTime'] = undefined;

/**
 * Last time stamp when the user read content in this space.
 * @member {Number} lastReadTimestamp
 */
Participant.prototype['lastReadTimestamp'] = undefined;

/**
 * Time when the participant was changed last.
 * @member {Number} modificationTime
 */
Participant.prototype['modificationTime'] = undefined;

/**
 * Number of replies in the space created by this participant.
 * @member {Number} numberOfReplies
 */
Participant.prototype['numberOfReplies'] = undefined;

/**
 * Number of topics in the space created by this participant.
 * @member {Number} numberOfTopics
 */
Participant.prototype['numberOfTopics'] = undefined;

/**
 * The name of the role of the participant.
 * @member {String} role
 */
Participant.prototype['role'] = undefined;

/**
 * The unique ID of the space to which the participant.
 * @member {String} spaceId
 */
Participant.prototype['spaceId'] = undefined;

/**
 * The name of the state of the participant;
 * @member {String} state
 */
Participant.prototype['state'] = undefined;

/**
 * The unique tenant id of the participant.
 * @member {String} tenantId
 */
Participant.prototype['tenantId'] = undefined;

/**
 * The unique user id of the participant.
 * @member {String} userId
 */
Participant.prototype['userId'] = undefined;






export default Participant;

