/**
 * REST API Version 2
 * Circuit REST API to interact with the Circuit system.  [Learn more about the Circuit Development Community](https://www.circuit.com/web/developers/home)
 *
 * The version of the OpenAPI document: 2.9.235
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import UserEmailAddress from './UserEmailAddress';
import UserPhoneNumber from './UserPhoneNumber';

/**
 * The User model module.
 * @module model/User
 * @version 2.9.235
 */
class User {
    /**
     * Constructs a new <code>User</code>.
     * @alias module:model/User
     */
    constructor() { 
        
        User.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>User</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/User} obj Optional instance to populate.
     * @return {module:model/User} The populated <code>User</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new User();

            if (data.hasOwnProperty('avatar')) {
                obj['avatar'] = ApiClient.convertToType(data['avatar'], 'String');
            }
            if (data.hasOwnProperty('avatarLarge')) {
                obj['avatarLarge'] = ApiClient.convertToType(data['avatarLarge'], 'String');
            }
            if (data.hasOwnProperty('company')) {
                obj['company'] = ApiClient.convertToType(data['company'], 'String');
            }
            if (data.hasOwnProperty('department')) {
                obj['department'] = ApiClient.convertToType(data['department'], 'String');
            }
            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('emailAddress')) {
                obj['emailAddress'] = ApiClient.convertToType(data['emailAddress'], 'String');
            }
            if (data.hasOwnProperty('emailAddresses')) {
                obj['emailAddresses'] = ApiClient.convertToType(data['emailAddresses'], [UserEmailAddress]);
            }
            if (data.hasOwnProperty('firstName')) {
                obj['firstName'] = ApiClient.convertToType(data['firstName'], 'String');
            }
            if (data.hasOwnProperty('jobTitle')) {
                obj['jobTitle'] = ApiClient.convertToType(data['jobTitle'], 'String');
            }
            if (data.hasOwnProperty('lastName')) {
                obj['lastName'] = ApiClient.convertToType(data['lastName'], 'String');
            }
            if (data.hasOwnProperty('locale')) {
                obj['locale'] = ApiClient.convertToType(data['locale'], 'String');
            }
            if (data.hasOwnProperty('phoneNumber')) {
                obj['phoneNumber'] = ApiClient.convertToType(data['phoneNumber'], 'String');
            }
            if (data.hasOwnProperty('phoneNumbers')) {
                obj['phoneNumbers'] = ApiClient.convertToType(data['phoneNumbers'], [UserPhoneNumber]);
            }
            if (data.hasOwnProperty('primaryTenantId')) {
                obj['primaryTenantId'] = ApiClient.convertToType(data['primaryTenantId'], 'String');
            }
            if (data.hasOwnProperty('secondaryEmailAddress')) {
                obj['secondaryEmailAddress'] = ApiClient.convertToType(data['secondaryEmailAddress'], 'String');
            }
            if (data.hasOwnProperty('secondaryTenantId')) {
                obj['secondaryTenantId'] = ApiClient.convertToType(data['secondaryTenantId'], 'String');
            }
            if (data.hasOwnProperty('userId')) {
                obj['userId'] = ApiClient.convertToType(data['userId'], 'String');
            }
            if (data.hasOwnProperty('userState')) {
                obj['userState'] = ApiClient.convertToType(data['userState'], 'String');
            }
            if (data.hasOwnProperty('userType')) {
                obj['userType'] = ApiClient.convertToType(data['userType'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>User</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>User</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['avatar'] && !(typeof data['avatar'] === 'string' || data['avatar'] instanceof String)) {
            throw new Error("Expected the field `avatar` to be a primitive type in the JSON string but got " + data['avatar']);
        }
        // ensure the json data is a string
        if (data['avatarLarge'] && !(typeof data['avatarLarge'] === 'string' || data['avatarLarge'] instanceof String)) {
            throw new Error("Expected the field `avatarLarge` to be a primitive type in the JSON string but got " + data['avatarLarge']);
        }
        // ensure the json data is a string
        if (data['company'] && !(typeof data['company'] === 'string' || data['company'] instanceof String)) {
            throw new Error("Expected the field `company` to be a primitive type in the JSON string but got " + data['company']);
        }
        // ensure the json data is a string
        if (data['department'] && !(typeof data['department'] === 'string' || data['department'] instanceof String)) {
            throw new Error("Expected the field `department` to be a primitive type in the JSON string but got " + data['department']);
        }
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }
        // ensure the json data is a string
        if (data['emailAddress'] && !(typeof data['emailAddress'] === 'string' || data['emailAddress'] instanceof String)) {
            throw new Error("Expected the field `emailAddress` to be a primitive type in the JSON string but got " + data['emailAddress']);
        }
        if (data['emailAddresses']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['emailAddresses'])) {
                throw new Error("Expected the field `emailAddresses` to be an array in the JSON data but got " + data['emailAddresses']);
            }
            // validate the optional field `emailAddresses` (array)
            for (const item of data['emailAddresses']) {
                UserEmailAddress.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['firstName'] && !(typeof data['firstName'] === 'string' || data['firstName'] instanceof String)) {
            throw new Error("Expected the field `firstName` to be a primitive type in the JSON string but got " + data['firstName']);
        }
        // ensure the json data is a string
        if (data['jobTitle'] && !(typeof data['jobTitle'] === 'string' || data['jobTitle'] instanceof String)) {
            throw new Error("Expected the field `jobTitle` to be a primitive type in the JSON string but got " + data['jobTitle']);
        }
        // ensure the json data is a string
        if (data['lastName'] && !(typeof data['lastName'] === 'string' || data['lastName'] instanceof String)) {
            throw new Error("Expected the field `lastName` to be a primitive type in the JSON string but got " + data['lastName']);
        }
        // ensure the json data is a string
        if (data['locale'] && !(typeof data['locale'] === 'string' || data['locale'] instanceof String)) {
            throw new Error("Expected the field `locale` to be a primitive type in the JSON string but got " + data['locale']);
        }
        // ensure the json data is a string
        if (data['phoneNumber'] && !(typeof data['phoneNumber'] === 'string' || data['phoneNumber'] instanceof String)) {
            throw new Error("Expected the field `phoneNumber` to be a primitive type in the JSON string but got " + data['phoneNumber']);
        }
        if (data['phoneNumbers']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['phoneNumbers'])) {
                throw new Error("Expected the field `phoneNumbers` to be an array in the JSON data but got " + data['phoneNumbers']);
            }
            // validate the optional field `phoneNumbers` (array)
            for (const item of data['phoneNumbers']) {
                UserPhoneNumber.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['primaryTenantId'] && !(typeof data['primaryTenantId'] === 'string' || data['primaryTenantId'] instanceof String)) {
            throw new Error("Expected the field `primaryTenantId` to be a primitive type in the JSON string but got " + data['primaryTenantId']);
        }
        // ensure the json data is a string
        if (data['secondaryEmailAddress'] && !(typeof data['secondaryEmailAddress'] === 'string' || data['secondaryEmailAddress'] instanceof String)) {
            throw new Error("Expected the field `secondaryEmailAddress` to be a primitive type in the JSON string but got " + data['secondaryEmailAddress']);
        }
        // ensure the json data is a string
        if (data['secondaryTenantId'] && !(typeof data['secondaryTenantId'] === 'string' || data['secondaryTenantId'] instanceof String)) {
            throw new Error("Expected the field `secondaryTenantId` to be a primitive type in the JSON string but got " + data['secondaryTenantId']);
        }
        // ensure the json data is a string
        if (data['userId'] && !(typeof data['userId'] === 'string' || data['userId'] instanceof String)) {
            throw new Error("Expected the field `userId` to be a primitive type in the JSON string but got " + data['userId']);
        }
        // ensure the json data is a string
        if (data['userState'] && !(typeof data['userState'] === 'string' || data['userState'] instanceof String)) {
            throw new Error("Expected the field `userState` to be a primitive type in the JSON string but got " + data['userState']);
        }
        // ensure the json data is a string
        if (data['userType'] && !(typeof data['userType'] === 'string' || data['userType'] instanceof String)) {
            throw new Error("Expected the field `userType` to be a primitive type in the JSON string but got " + data['userType']);
        }

        return true;
    }


}



/**
 * The URL of the small avatar picture.
 * @member {String} avatar
 */
User.prototype['avatar'] = undefined;

/**
 * The URL of the large avatar picture.
 * @member {String} avatarLarge
 */
User.prototype['avatarLarge'] = undefined;

/**
 * The name of the user's company
 * @member {String} company
 */
User.prototype['company'] = undefined;

/**
 * missing documentation
 * @member {String} department
 */
User.prototype['department'] = undefined;

/**
 * The user's display name
 * @member {String} displayName
 */
User.prototype['displayName'] = undefined;

/**
 * The primary email address of the user
 * @member {String} emailAddress
 */
User.prototype['emailAddress'] = undefined;

/**
 * additional email addresses of the user
 * @member {Array.<module:model/UserEmailAddress>} emailAddresses
 */
User.prototype['emailAddresses'] = undefined;

/**
 * The first name of the user
 * @member {String} firstName
 */
User.prototype['firstName'] = undefined;

/**
 * The job title of the user
 * @member {String} jobTitle
 */
User.prototype['jobTitle'] = undefined;

/**
 * The last name of the user
 * @member {String} lastName
 */
User.prototype['lastName'] = undefined;

/**
 * The locale of the user. (E.g. en-US, de-DE)
 * @member {String} locale
 */
User.prototype['locale'] = undefined;

/**
 * provisioned phone number of the user
 * @member {String} phoneNumber
 */
User.prototype['phoneNumber'] = undefined;

/**
 * additional phone numbers of the user
 * @member {Array.<module:model/UserPhoneNumber>} phoneNumbers
 */
User.prototype['phoneNumbers'] = undefined;

/**
 * The primary tenant id
 * @member {String} primaryTenantId
 */
User.prototype['primaryTenantId'] = undefined;

/**
 * The secondary email address
 * @member {String} secondaryEmailAddress
 */
User.prototype['secondaryEmailAddress'] = undefined;

/**
 * The secondary tenant id
 * @member {String} secondaryTenantId
 */
User.prototype['secondaryTenantId'] = undefined;

/**
 * The ID of the user
 * @member {String} userId
 */
User.prototype['userId'] = undefined;

/**
 * The state of the user, e.g. deleted
 * @member {String} userState
 */
User.prototype['userState'] = undefined;

/**
 * the type of the user
 * @member {String} userType
 */
User.prototype['userType'] = undefined;






export default User;

