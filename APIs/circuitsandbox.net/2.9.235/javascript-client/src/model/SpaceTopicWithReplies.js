/**
 * REST API Version 2
 * Circuit REST API to interact with the Circuit system.  [Learn more about the Circuit Development Community](https://www.circuit.com/web/developers/home)
 *
 * The version of the OpenAPI document: 2.9.235
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import SpaceReply from './SpaceReply';
import SpaceTopic from './SpaceTopic';

/**
 * The SpaceTopicWithReplies model module.
 * @module model/SpaceTopicWithReplies
 * @version 2.9.235
 */
class SpaceTopicWithReplies {
    /**
     * Constructs a new <code>SpaceTopicWithReplies</code>.
     * @alias module:model/SpaceTopicWithReplies
     */
    constructor() { 
        
        SpaceTopicWithReplies.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SpaceTopicWithReplies</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SpaceTopicWithReplies} obj Optional instance to populate.
     * @return {module:model/SpaceTopicWithReplies} The populated <code>SpaceTopicWithReplies</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SpaceTopicWithReplies();

            if (data.hasOwnProperty('replies')) {
                obj['replies'] = ApiClient.convertToType(data['replies'], [SpaceReply]);
            }
            if (data.hasOwnProperty('topic')) {
                obj['topic'] = SpaceTopic.constructFromObject(data['topic']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SpaceTopicWithReplies</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SpaceTopicWithReplies</code>.
     */
    static validateJSON(data) {
        if (data['replies']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['replies'])) {
                throw new Error("Expected the field `replies` to be an array in the JSON data but got " + data['replies']);
            }
            // validate the optional field `replies` (array)
            for (const item of data['replies']) {
                SpaceReply.validateJSON(item);
            };
        }
        // validate the optional field `topic`
        if (data['topic']) { // data not null
          SpaceTopic.validateJSON(data['topic']);
        }

        return true;
    }


}



/**
 * A List holding the replies for a topic
 * @member {Array.<module:model/SpaceReply>} replies
 */
SpaceTopicWithReplies.prototype['replies'] = undefined;

/**
 * @member {module:model/SpaceTopic} topic
 */
SpaceTopicWithReplies.prototype['topic'] = undefined;






export default SpaceTopicWithReplies;

