/**
 * REST API Version 2
 * Circuit REST API to interact with the Circuit system.  [Learn more about the Circuit Development Community](https://www.circuit.com/web/developers/home)
 *
 * The version of the OpenAPI document: 2.9.235
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The SystemItem model module.
 * @module model/SystemItem
 * @version 2.9.235
 */
class SystemItem {
    /**
     * Constructs a new <code>SystemItem</code>.
     * @alias module:model/SystemItem
     */
    constructor() { 
        
        SystemItem.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SystemItem</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SystemItem} obj Optional instance to populate.
     * @return {module:model/SystemItem} The populated <code>SystemItem</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SystemItem();

            if (data.hasOwnProperty('affectedParticipants')) {
                obj['affectedParticipants'] = ApiClient.convertToType(data['affectedParticipants'], ['String']);
            }
            if (data.hasOwnProperty('newTopic')) {
                obj['newTopic'] = ApiClient.convertToType(data['newTopic'], 'String');
            }
            if (data.hasOwnProperty('oldTopic')) {
                obj['oldTopic'] = ApiClient.convertToType(data['oldTopic'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SystemItem</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SystemItem</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['affectedParticipants'])) {
            throw new Error("Expected the field `affectedParticipants` to be an array in the JSON data but got " + data['affectedParticipants']);
        }
        // ensure the json data is a string
        if (data['newTopic'] && !(typeof data['newTopic'] === 'string' || data['newTopic'] instanceof String)) {
            throw new Error("Expected the field `newTopic` to be a primitive type in the JSON string but got " + data['newTopic']);
        }
        // ensure the json data is a string
        if (data['oldTopic'] && !(typeof data['oldTopic'] === 'string' || data['oldTopic'] instanceof String)) {
            throw new Error("Expected the field `oldTopic` to be a primitive type in the JSON string but got " + data['oldTopic']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}



/**
 * List off affected participants (user ID of the Circuit user) in case the item type PARTICIPANT_ADDED or PARTICIPANT_REMOVED
 * @member {Array.<String>} affectedParticipants
 */
SystemItem.prototype['affectedParticipants'] = undefined;

/**
 * Filled with the new topic of a conversation if the type of the item is CONVERSATION_RENAMED.
 * @member {String} newTopic
 */
SystemItem.prototype['newTopic'] = undefined;

/**
 * Filled with the previous topic of a conversation if the type of the item is CONVERSATION_RENAMED.
 * @member {String} oldTopic
 */
SystemItem.prototype['oldTopic'] = undefined;

/**
 * The type of the system item
 * @member {String} type
 */
SystemItem.prototype['type'] = undefined;






export default SystemItem;

