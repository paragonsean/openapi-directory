/**
 * REST API Version 2
 * Circuit REST API to interact with the Circuit system.  [Learn more about the Circuit Development Community](https://www.circuit.com/web/developers/home)
 *
 * The version of the OpenAPI document: 2.9.235
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Presence model module.
 * @module model/Presence
 * @version 2.9.235
 */
class Presence {
    /**
     * Constructs a new <code>Presence</code>.
     * @alias module:model/Presence
     */
    constructor() { 
        
        Presence.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Presence</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Presence} obj Optional instance to populate.
     * @return {module:model/Presence} The populated <code>Presence</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Presence();

            if (data.hasOwnProperty('dndUntil')) {
                obj['dndUntil'] = ApiClient.convertToType(data['dndUntil'], 'Number');
            }
            if (data.hasOwnProperty('isOptedOut')) {
                obj['isOptedOut'] = ApiClient.convertToType(data['isOptedOut'], 'Boolean');
            }
            if (data.hasOwnProperty('latitude')) {
                obj['latitude'] = ApiClient.convertToType(data['latitude'], 'Number');
            }
            if (data.hasOwnProperty('locationText')) {
                obj['locationText'] = ApiClient.convertToType(data['locationText'], 'String');
            }
            if (data.hasOwnProperty('longitude')) {
                obj['longitude'] = ApiClient.convertToType(data['longitude'], 'Number');
            }
            if (data.hasOwnProperty('mobile')) {
                obj['mobile'] = ApiClient.convertToType(data['mobile'], 'Boolean');
            }
            if (data.hasOwnProperty('poor')) {
                obj['poor'] = ApiClient.convertToType(data['poor'], 'Boolean');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('statusMessage')) {
                obj['statusMessage'] = ApiClient.convertToType(data['statusMessage'], 'String');
            }
            if (data.hasOwnProperty('timeZoneOffset')) {
                obj['timeZoneOffset'] = ApiClient.convertToType(data['timeZoneOffset'], 'Number');
            }
            if (data.hasOwnProperty('userId')) {
                obj['userId'] = ApiClient.convertToType(data['userId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Presence</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Presence</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['locationText'] && !(typeof data['locationText'] === 'string' || data['locationText'] instanceof String)) {
            throw new Error("Expected the field `locationText` to be a primitive type in the JSON string but got " + data['locationText']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }
        // ensure the json data is a string
        if (data['statusMessage'] && !(typeof data['statusMessage'] === 'string' || data['statusMessage'] instanceof String)) {
            throw new Error("Expected the field `statusMessage` to be a primitive type in the JSON string but got " + data['statusMessage']);
        }
        // ensure the json data is a string
        if (data['userId'] && !(typeof data['userId'] === 'string' || data['userId'] instanceof String)) {
            throw new Error("Expected the field `userId` to be a primitive type in the JSON string but got " + data['userId']);
        }

        return true;
    }


}



/**
 * Timestamp until the DND state of the user is active
 * @member {Number} dndUntil
 */
Presence.prototype['dndUntil'] = undefined;

/**
 * Indicates whether the user has opted out of their presence
 * @member {Boolean} isOptedOut
 */
Presence.prototype['isOptedOut'] = undefined;

/**
 * The latitude of the geo location of the user
 * @member {Number} latitude
 */
Presence.prototype['latitude'] = undefined;

/**
 * The geo location of the user in clear text
 * @member {String} locationText
 */
Presence.prototype['locationText'] = undefined;

/**
 * The longitude of the geo location of the user
 * @member {Number} longitude
 */
Presence.prototype['longitude'] = undefined;

/**
 * Identifies whether the presence state is based on the state information of a mobile device or not
 * @member {Boolean} mobile
 */
Presence.prototype['mobile'] = undefined;

/**
 * n/a
 * @member {Boolean} poor
 */
Presence.prototype['poor'] = undefined;

/**
 * The presence state of the user. It can be one of the following: AVAILABLE, OFFLINE, AWAY, BUSY, or DND (Do-Not-Disturb)
 * @member {String} state
 */
Presence.prototype['state'] = undefined;

/**
 * A free formed status message of the user
 * @member {String} statusMessage
 */
Presence.prototype['statusMessage'] = undefined;

/**
 * The timezone offset of the user compared to UTC
 * @member {Number} timeZoneOffset
 */
Presence.prototype['timeZoneOffset'] = undefined;

/**
 * The ID of the user
 * @member {String} userId
 */
Presence.prototype['userId'] = undefined;






export default Presence;

