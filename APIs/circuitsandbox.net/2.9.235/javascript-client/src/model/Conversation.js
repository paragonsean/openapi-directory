/**
 * REST API Version 2
 * Circuit REST API to interact with the Circuit system.  [Learn more about the Circuit Development Community](https://www.circuit.com/web/developers/home)
 *
 * The version of the OpenAPI document: 2.9.235
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Conversation model module.
 * @module model/Conversation
 * @version 2.9.235
 */
class Conversation {
    /**
     * Constructs a new <code>Conversation</code>.
     * @alias module:model/Conversation
     */
    constructor() { 
        
        Conversation.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Conversation</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Conversation} obj Optional instance to populate.
     * @return {module:model/Conversation} The populated <code>Conversation</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Conversation();

            if (data.hasOwnProperty('avatar')) {
                obj['avatar'] = ApiClient.convertToType(data['avatar'], 'String');
            }
            if (data.hasOwnProperty('avatarLarge')) {
                obj['avatarLarge'] = ApiClient.convertToType(data['avatarLarge'], 'String');
            }
            if (data.hasOwnProperty('convId')) {
                obj['convId'] = ApiClient.convertToType(data['convId'], 'String');
            }
            if (data.hasOwnProperty('creationTime')) {
                obj['creationTime'] = ApiClient.convertToType(data['creationTime'], 'Number');
            }
            if (data.hasOwnProperty('creatorId')) {
                obj['creatorId'] = ApiClient.convertToType(data['creatorId'], 'String');
            }
            if (data.hasOwnProperty('creatorTenantId')) {
                obj['creatorTenantId'] = ApiClient.convertToType(data['creatorTenantId'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('isGuestAccessDisabled')) {
                obj['isGuestAccessDisabled'] = ApiClient.convertToType(data['isGuestAccessDisabled'], 'Boolean');
            }
            if (data.hasOwnProperty('isModerated')) {
                obj['isModerated'] = ApiClient.convertToType(data['isModerated'], 'Boolean');
            }
            if (data.hasOwnProperty('modificationTime')) {
                obj['modificationTime'] = ApiClient.convertToType(data['modificationTime'], 'Number');
            }
            if (data.hasOwnProperty('participants')) {
                obj['participants'] = ApiClient.convertToType(data['participants'], ['String']);
            }
            if (data.hasOwnProperty('topic')) {
                obj['topic'] = ApiClient.convertToType(data['topic'], 'String');
            }
            if (data.hasOwnProperty('topicPlaceholder')) {
                obj['topicPlaceholder'] = ApiClient.convertToType(data['topicPlaceholder'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Conversation</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Conversation</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['avatar'] && !(typeof data['avatar'] === 'string' || data['avatar'] instanceof String)) {
            throw new Error("Expected the field `avatar` to be a primitive type in the JSON string but got " + data['avatar']);
        }
        // ensure the json data is a string
        if (data['avatarLarge'] && !(typeof data['avatarLarge'] === 'string' || data['avatarLarge'] instanceof String)) {
            throw new Error("Expected the field `avatarLarge` to be a primitive type in the JSON string but got " + data['avatarLarge']);
        }
        // ensure the json data is a string
        if (data['convId'] && !(typeof data['convId'] === 'string' || data['convId'] instanceof String)) {
            throw new Error("Expected the field `convId` to be a primitive type in the JSON string but got " + data['convId']);
        }
        // ensure the json data is a string
        if (data['creatorId'] && !(typeof data['creatorId'] === 'string' || data['creatorId'] instanceof String)) {
            throw new Error("Expected the field `creatorId` to be a primitive type in the JSON string but got " + data['creatorId']);
        }
        // ensure the json data is a string
        if (data['creatorTenantId'] && !(typeof data['creatorTenantId'] === 'string' || data['creatorTenantId'] instanceof String)) {
            throw new Error("Expected the field `creatorTenantId` to be a primitive type in the JSON string but got " + data['creatorTenantId']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['participants'])) {
            throw new Error("Expected the field `participants` to be an array in the JSON data but got " + data['participants']);
        }
        // ensure the json data is a string
        if (data['topic'] && !(typeof data['topic'] === 'string' || data['topic'] instanceof String)) {
            throw new Error("Expected the field `topic` to be a primitive type in the JSON string but got " + data['topic']);
        }
        // ensure the json data is a string
        if (data['topicPlaceholder'] && !(typeof data['topicPlaceholder'] === 'string' || data['topicPlaceholder'] instanceof String)) {
            throw new Error("Expected the field `topicPlaceholder` to be a primitive type in the JSON string but got " + data['topicPlaceholder']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}



/**
 * The URL of the small avatar image of the conversation
 * @member {String} avatar
 */
Conversation.prototype['avatar'] = undefined;

/**
 * The URL of the large avatar image of the conversation
 * @member {String} avatarLarge
 */
Conversation.prototype['avatarLarge'] = undefined;

/**
 * The ID of the conversation
 * @member {String} convId
 */
Conversation.prototype['convId'] = undefined;

/**
 * UTC timestamp when the conversation was created
 * @member {Number} creationTime
 */
Conversation.prototype['creationTime'] = undefined;

/**
 * The ID of the user who created the conversation
 * @member {String} creatorId
 */
Conversation.prototype['creatorId'] = undefined;

/**
 * The ID of the Circuit domain (tenant) where the creator of the conversation belongs to
 * @member {String} creatorTenantId
 */
Conversation.prototype['creatorTenantId'] = undefined;

/**
 * The description of the conversation. This field is available only for conversations with type COMMUNITY
 * @member {String} description
 */
Conversation.prototype['description'] = undefined;

/**
 * Indicates whether guest access to the conversation is disabled or not
 * @member {Boolean} isGuestAccessDisabled
 */
Conversation.prototype['isGuestAccessDisabled'] = undefined;

/**
 * Indicates whether the conversation is moderated or not. In a moderated conversation only participants who have been assigned the role of a moderator are allowed to add or remove participants into the conversation
 * @member {Boolean} isModerated
 */
Conversation.prototype['isModerated'] = undefined;

/**
 * UTC timestamp when the conversation was modified. A conversation is modified when any of the conversation object fields change but not when conversation items are added or edited
 * @member {Number} modificationTime
 */
Conversation.prototype['modificationTime'] = undefined;

/**
 * Array of active participants
 * @member {Array.<String>} participants
 */
Conversation.prototype['participants'] = undefined;

/**
 * The title of the conversation. Conversations of type DIRECT cannot have a title
 * @member {String} topic
 */
Conversation.prototype['topic'] = undefined;

/**
 * The title of the conversation. Conversations of type DIRECT cannot have a title
 * @member {String} topicPlaceholder
 */
Conversation.prototype['topicPlaceholder'] = undefined;

/**
 * The type of the conversation. It can be one of the following: DIRECT, GROUP, COMMUNITY or LARGE
 * @member {String} type
 */
Conversation.prototype['type'] = undefined;






export default Conversation;

