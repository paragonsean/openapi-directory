/**
 * REST API Version 2
 * Circuit REST API to interact with the Circuit system.  [Learn more about the Circuit Development Community](https://www.circuit.com/web/developers/home)
 *
 * The version of the OpenAPI document: 2.9.235
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The SpaceAttachment model module.
 * @module model/SpaceAttachment
 * @version 2.9.235
 */
class SpaceAttachment {
    /**
     * Constructs a new <code>SpaceAttachment</code>.
     * @alias module:model/SpaceAttachment
     */
    constructor() { 
        
        SpaceAttachment.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SpaceAttachment</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SpaceAttachment} obj Optional instance to populate.
     * @return {module:model/SpaceAttachment} The populated <code>SpaceAttachment</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SpaceAttachment();

            if (data.hasOwnProperty('creationTime')) {
                obj['creationTime'] = ApiClient.convertToType(data['creationTime'], 'Number');
            }
            if (data.hasOwnProperty('creatorId')) {
                obj['creatorId'] = ApiClient.convertToType(data['creatorId'], 'String');
            }
            if (data.hasOwnProperty('fileId')) {
                obj['fileId'] = ApiClient.convertToType(data['fileId'], 'String');
            }
            if (data.hasOwnProperty('fileName')) {
                obj['fileName'] = ApiClient.convertToType(data['fileName'], 'String');
            }
            if (data.hasOwnProperty('inlineUsage')) {
                obj['inlineUsage'] = ApiClient.convertToType(data['inlineUsage'], 'Boolean');
            }
            if (data.hasOwnProperty('itemId')) {
                obj['itemId'] = ApiClient.convertToType(data['itemId'], 'String');
            }
            if (data.hasOwnProperty('layout')) {
                obj['layout'] = ApiClient.convertToType(data['layout'], 'String');
            }
            if (data.hasOwnProperty('mimeType')) {
                obj['mimeType'] = ApiClient.convertToType(data['mimeType'], 'String');
            }
            if (data.hasOwnProperty('modificationTime')) {
                obj['modificationTime'] = ApiClient.convertToType(data['modificationTime'], 'Number');
            }
            if (data.hasOwnProperty('size')) {
                obj['size'] = ApiClient.convertToType(data['size'], 'Number');
            }
            if (data.hasOwnProperty('spaceId')) {
                obj['spaceId'] = ApiClient.convertToType(data['spaceId'], 'String');
            }
            if (data.hasOwnProperty('thumbnailId')) {
                obj['thumbnailId'] = ApiClient.convertToType(data['thumbnailId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SpaceAttachment</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SpaceAttachment</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['creatorId'] && !(typeof data['creatorId'] === 'string' || data['creatorId'] instanceof String)) {
            throw new Error("Expected the field `creatorId` to be a primitive type in the JSON string but got " + data['creatorId']);
        }
        // ensure the json data is a string
        if (data['fileId'] && !(typeof data['fileId'] === 'string' || data['fileId'] instanceof String)) {
            throw new Error("Expected the field `fileId` to be a primitive type in the JSON string but got " + data['fileId']);
        }
        // ensure the json data is a string
        if (data['fileName'] && !(typeof data['fileName'] === 'string' || data['fileName'] instanceof String)) {
            throw new Error("Expected the field `fileName` to be a primitive type in the JSON string but got " + data['fileName']);
        }
        // ensure the json data is a string
        if (data['itemId'] && !(typeof data['itemId'] === 'string' || data['itemId'] instanceof String)) {
            throw new Error("Expected the field `itemId` to be a primitive type in the JSON string but got " + data['itemId']);
        }
        // ensure the json data is a string
        if (data['layout'] && !(typeof data['layout'] === 'string' || data['layout'] instanceof String)) {
            throw new Error("Expected the field `layout` to be a primitive type in the JSON string but got " + data['layout']);
        }
        // ensure the json data is a string
        if (data['mimeType'] && !(typeof data['mimeType'] === 'string' || data['mimeType'] instanceof String)) {
            throw new Error("Expected the field `mimeType` to be a primitive type in the JSON string but got " + data['mimeType']);
        }
        // ensure the json data is a string
        if (data['spaceId'] && !(typeof data['spaceId'] === 'string' || data['spaceId'] instanceof String)) {
            throw new Error("Expected the field `spaceId` to be a primitive type in the JSON string but got " + data['spaceId']);
        }
        // ensure the json data is a string
        if (data['thumbnailId'] && !(typeof data['thumbnailId'] === 'string' || data['thumbnailId'] instanceof String)) {
            throw new Error("Expected the field `thumbnailId` to be a primitive type in the JSON string but got " + data['thumbnailId']);
        }

        return true;
    }


}



/**
 * time this item has been created
 * @member {Number} creationTime
 */
SpaceAttachment.prototype['creationTime'] = undefined;

/**
 * the id of the creator
 * @member {String} creatorId
 */
SpaceAttachment.prototype['creatorId'] = undefined;

/**
 * the id of the field
 * @member {String} fileId
 */
SpaceAttachment.prototype['fileId'] = undefined;

/**
 * name of the file
 * @member {String} fileName
 */
SpaceAttachment.prototype['fileName'] = undefined;

/**
 * is inline usage allowed
 * @member {Boolean} inlineUsage
 */
SpaceAttachment.prototype['inlineUsage'] = undefined;

/**
 * id of the item
 * @member {String} itemId
 */
SpaceAttachment.prototype['itemId'] = undefined;

/**
 * layout
 * @member {String} layout
 */
SpaceAttachment.prototype['layout'] = undefined;

/**
 * the media type
 * @member {String} mimeType
 */
SpaceAttachment.prototype['mimeType'] = undefined;

/**
 * the time this item has been ben modified
 * @member {Number} modificationTime
 */
SpaceAttachment.prototype['modificationTime'] = undefined;

/**
 * size of this file
 * @member {Number} size
 */
SpaceAttachment.prototype['size'] = undefined;

/**
 * id of the space
 * @member {String} spaceId
 */
SpaceAttachment.prototype['spaceId'] = undefined;

/**
 * the id of the tumbnail
 * @member {String} thumbnailId
 */
SpaceAttachment.prototype['thumbnailId'] = undefined;






export default SpaceAttachment;

