/**
 * REST API Version 2
 * Circuit REST API to interact with the Circuit system.  [Learn more about the Circuit Development Community](https://www.circuit.com/web/developers/home)
 *
 * The version of the OpenAPI document: 2.9.235
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import RtcEnded from './RtcEnded';
import RtcMoved from './RtcMoved';
import RtcParticipant from './RtcParticipant';

/**
 * The RtcItem model module.
 * @module model/RtcItem
 * @version 2.9.235
 */
class RtcItem {
    /**
     * Constructs a new <code>RtcItem</code>.
     * @alias module:model/RtcItem
     */
    constructor() { 
        
        RtcItem.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>RtcItem</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RtcItem} obj Optional instance to populate.
     * @return {module:model/RtcItem} The populated <code>RtcItem</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RtcItem();

            if (data.hasOwnProperty('ended')) {
                obj['ended'] = RtcEnded.constructFromObject(data['ended']);
            }
            if (data.hasOwnProperty('missed')) {
                obj['missed'] = ApiClient.convertToType(data['missed'], 'String');
            }
            if (data.hasOwnProperty('moved')) {
                obj['moved'] = RtcMoved.constructFromObject(data['moved']);
            }
            if (data.hasOwnProperty('rtcParticipants')) {
                obj['rtcParticipants'] = ApiClient.convertToType(data['rtcParticipants'], [RtcParticipant]);
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RtcItem</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RtcItem</code>.
     */
    static validateJSON(data) {
        // validate the optional field `ended`
        if (data['ended']) { // data not null
          RtcEnded.validateJSON(data['ended']);
        }
        // ensure the json data is a string
        if (data['missed'] && !(typeof data['missed'] === 'string' || data['missed'] instanceof String)) {
            throw new Error("Expected the field `missed` to be a primitive type in the JSON string but got " + data['missed']);
        }
        // validate the optional field `moved`
        if (data['moved']) { // data not null
          RtcMoved.validateJSON(data['moved']);
        }
        if (data['rtcParticipants']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['rtcParticipants'])) {
                throw new Error("Expected the field `rtcParticipants` to be an array in the JSON data but got " + data['rtcParticipants']);
            }
            // validate the optional field `rtcParticipants` (array)
            for (const item of data['rtcParticipants']) {
                RtcParticipant.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}



/**
 * @member {module:model/RtcEnded} ended
 */
RtcItem.prototype['ended'] = undefined;

/**
 * Indicates a missed call.
 * @member {String} missed
 */
RtcItem.prototype['missed'] = undefined;

/**
 * @member {module:model/RtcMoved} moved
 */
RtcItem.prototype['moved'] = undefined;

/**
 * Participants of the call.
 * @member {Array.<module:model/RtcParticipant>} rtcParticipants
 */
RtcItem.prototype['rtcParticipants'] = undefined;

/**
 * The type of the RTC item.
 * @member {String} type
 */
RtcItem.prototype['type'] = undefined;






export default RtcItem;

