/**
 * REST API Version 2
 * Circuit REST API to interact with the Circuit system.  [Learn more about the Circuit Development Community](https://www.circuit.com/web/developers/home)
 *
 * The version of the OpenAPI document: 2.9.235
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The BridgeNumber model module.
 * @module model/BridgeNumber
 * @version 2.9.235
 */
class BridgeNumber {
    /**
     * Constructs a new <code>BridgeNumber</code>.
     * @alias module:model/BridgeNumber
     */
    constructor() { 
        
        BridgeNumber.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>BridgeNumber</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/BridgeNumber} obj Optional instance to populate.
     * @return {module:model/BridgeNumber} The populated <code>BridgeNumber</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new BridgeNumber();

            if (data.hasOwnProperty('bridgeNumber')) {
                obj['bridgeNumber'] = ApiClient.convertToType(data['bridgeNumber'], 'String');
            }
            if (data.hasOwnProperty('country')) {
                obj['country'] = ApiClient.convertToType(data['country'], 'String');
            }
            if (data.hasOwnProperty('isMostUsed')) {
                obj['isMostUsed'] = ApiClient.convertToType(data['isMostUsed'], 'Boolean');
            }
            if (data.hasOwnProperty('locale')) {
                obj['locale'] = ApiClient.convertToType(data['locale'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>BridgeNumber</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>BridgeNumber</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['bridgeNumber'] && !(typeof data['bridgeNumber'] === 'string' || data['bridgeNumber'] instanceof String)) {
            throw new Error("Expected the field `bridgeNumber` to be a primitive type in the JSON string but got " + data['bridgeNumber']);
        }
        // ensure the json data is a string
        if (data['country'] && !(typeof data['country'] === 'string' || data['country'] instanceof String)) {
            throw new Error("Expected the field `country` to be a primitive type in the JSON string but got " + data['country']);
        }
        // ensure the json data is a string
        if (data['locale'] && !(typeof data['locale'] === 'string' || data['locale'] instanceof String)) {
            throw new Error("Expected the field `locale` to be a primitive type in the JSON string but got " + data['locale']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}



/**
 * The number that has to be called to join the real time session of a conversation
 * @member {String} bridgeNumber
 */
BridgeNumber.prototype['bridgeNumber'] = undefined;

/**
 * The country where the bridge is hosted
 * @member {String} country
 */
BridgeNumber.prototype['country'] = undefined;

/**
 * Is most used
 * @member {Boolean} isMostUsed
 */
BridgeNumber.prototype['isMostUsed'] = undefined;

/**
 * The locale of the bridge
 * @member {String} locale
 */
BridgeNumber.prototype['locale'] = undefined;

/**
 * The name / identifier of the bridge
 * @member {String} name
 */
BridgeNumber.prototype['name'] = undefined;

/**
 * Information of the billing for the call, i.e. if the caller has to pay or not for the call
 * @member {String} type
 */
BridgeNumber.prototype['type'] = undefined;






export default BridgeNumber;

