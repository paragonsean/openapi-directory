/**
 * REST API Version 2
 * Circuit REST API to interact with the Circuit system.  [Learn more about the Circuit Development Community](https://www.circuit.com/web/developers/home)
 *
 * The version of the OpenAPI document: 2.9.235
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Space model module.
 * @module model/Space
 * @version 2.9.235
 */
class Space {
    /**
     * Constructs a new <code>Space</code>.
     * @alias module:model/Space
     */
    constructor() { 
        
        Space.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Space</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Space} obj Optional instance to populate.
     * @return {module:model/Space} The populated <code>Space</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Space();

            if (data.hasOwnProperty('accessModeType')) {
                obj['accessModeType'] = ApiClient.convertToType(data['accessModeType'], 'String');
            }
            if (data.hasOwnProperty('creationTime')) {
                obj['creationTime'] = ApiClient.convertToType(data['creationTime'], 'Number');
            }
            if (data.hasOwnProperty('creatorId')) {
                obj['creatorId'] = ApiClient.convertToType(data['creatorId'], 'String');
            }
            if (data.hasOwnProperty('defaultRole')) {
                obj['defaultRole'] = ApiClient.convertToType(data['defaultRole'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('largePictureBase64')) {
                obj['largePictureBase64'] = ApiClient.convertToType(data['largePictureBase64'], 'String');
            }
            if (data.hasOwnProperty('largePictureContentType')) {
                obj['largePictureContentType'] = ApiClient.convertToType(data['largePictureContentType'], 'String');
            }
            if (data.hasOwnProperty('largePictureId')) {
                obj['largePictureId'] = ApiClient.convertToType(data['largePictureId'], 'String');
            }
            if (data.hasOwnProperty('lastContentCreationTime')) {
                obj['lastContentCreationTime'] = ApiClient.convertToType(data['lastContentCreationTime'], 'Number');
            }
            if (data.hasOwnProperty('lastContentCreatorId')) {
                obj['lastContentCreatorId'] = ApiClient.convertToType(data['lastContentCreatorId'], 'String');
            }
            if (data.hasOwnProperty('modificationTime')) {
                obj['modificationTime'] = ApiClient.convertToType(data['modificationTime'], 'Number');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('numberOfExternalParticipants')) {
                obj['numberOfExternalParticipants'] = ApiClient.convertToType(data['numberOfExternalParticipants'], 'Number');
            }
            if (data.hasOwnProperty('numberOfParticipants')) {
                obj['numberOfParticipants'] = ApiClient.convertToType(data['numberOfParticipants'], 'Number');
            }
            if (data.hasOwnProperty('numberOfPinnedTopics')) {
                obj['numberOfPinnedTopics'] = ApiClient.convertToType(data['numberOfPinnedTopics'], 'Number');
            }
            if (data.hasOwnProperty('numberOfReplies')) {
                obj['numberOfReplies'] = ApiClient.convertToType(data['numberOfReplies'], 'Number');
            }
            if (data.hasOwnProperty('numberOfTopics')) {
                obj['numberOfTopics'] = ApiClient.convertToType(data['numberOfTopics'], 'Number');
            }
            if (data.hasOwnProperty('ownerId')) {
                obj['ownerId'] = ApiClient.convertToType(data['ownerId'], 'String');
            }
            if (data.hasOwnProperty('smallPictureBase64')) {
                obj['smallPictureBase64'] = ApiClient.convertToType(data['smallPictureBase64'], 'String');
            }
            if (data.hasOwnProperty('smallPictureContentType')) {
                obj['smallPictureContentType'] = ApiClient.convertToType(data['smallPictureContentType'], 'String');
            }
            if (data.hasOwnProperty('smallPictureId')) {
                obj['smallPictureId'] = ApiClient.convertToType(data['smallPictureId'], 'String');
            }
            if (data.hasOwnProperty('spaceId')) {
                obj['spaceId'] = ApiClient.convertToType(data['spaceId'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('tags')) {
                obj['tags'] = ApiClient.convertToType(data['tags'], ['String']);
            }
            if (data.hasOwnProperty('tenantId')) {
                obj['tenantId'] = ApiClient.convertToType(data['tenantId'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Space</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Space</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['accessModeType'] && !(typeof data['accessModeType'] === 'string' || data['accessModeType'] instanceof String)) {
            throw new Error("Expected the field `accessModeType` to be a primitive type in the JSON string but got " + data['accessModeType']);
        }
        // ensure the json data is a string
        if (data['creatorId'] && !(typeof data['creatorId'] === 'string' || data['creatorId'] instanceof String)) {
            throw new Error("Expected the field `creatorId` to be a primitive type in the JSON string but got " + data['creatorId']);
        }
        // ensure the json data is a string
        if (data['defaultRole'] && !(typeof data['defaultRole'] === 'string' || data['defaultRole'] instanceof String)) {
            throw new Error("Expected the field `defaultRole` to be a primitive type in the JSON string but got " + data['defaultRole']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['largePictureBase64'] && !(typeof data['largePictureBase64'] === 'string' || data['largePictureBase64'] instanceof String)) {
            throw new Error("Expected the field `largePictureBase64` to be a primitive type in the JSON string but got " + data['largePictureBase64']);
        }
        // ensure the json data is a string
        if (data['largePictureContentType'] && !(typeof data['largePictureContentType'] === 'string' || data['largePictureContentType'] instanceof String)) {
            throw new Error("Expected the field `largePictureContentType` to be a primitive type in the JSON string but got " + data['largePictureContentType']);
        }
        // ensure the json data is a string
        if (data['largePictureId'] && !(typeof data['largePictureId'] === 'string' || data['largePictureId'] instanceof String)) {
            throw new Error("Expected the field `largePictureId` to be a primitive type in the JSON string but got " + data['largePictureId']);
        }
        // ensure the json data is a string
        if (data['lastContentCreatorId'] && !(typeof data['lastContentCreatorId'] === 'string' || data['lastContentCreatorId'] instanceof String)) {
            throw new Error("Expected the field `lastContentCreatorId` to be a primitive type in the JSON string but got " + data['lastContentCreatorId']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['ownerId'] && !(typeof data['ownerId'] === 'string' || data['ownerId'] instanceof String)) {
            throw new Error("Expected the field `ownerId` to be a primitive type in the JSON string but got " + data['ownerId']);
        }
        // ensure the json data is a string
        if (data['smallPictureBase64'] && !(typeof data['smallPictureBase64'] === 'string' || data['smallPictureBase64'] instanceof String)) {
            throw new Error("Expected the field `smallPictureBase64` to be a primitive type in the JSON string but got " + data['smallPictureBase64']);
        }
        // ensure the json data is a string
        if (data['smallPictureContentType'] && !(typeof data['smallPictureContentType'] === 'string' || data['smallPictureContentType'] instanceof String)) {
            throw new Error("Expected the field `smallPictureContentType` to be a primitive type in the JSON string but got " + data['smallPictureContentType']);
        }
        // ensure the json data is a string
        if (data['smallPictureId'] && !(typeof data['smallPictureId'] === 'string' || data['smallPictureId'] instanceof String)) {
            throw new Error("Expected the field `smallPictureId` to be a primitive type in the JSON string but got " + data['smallPictureId']);
        }
        // ensure the json data is a string
        if (data['spaceId'] && !(typeof data['spaceId'] === 'string' || data['spaceId'] instanceof String)) {
            throw new Error("Expected the field `spaceId` to be a primitive type in the JSON string but got " + data['spaceId']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['tags'])) {
            throw new Error("Expected the field `tags` to be an array in the JSON data but got " + data['tags']);
        }
        // ensure the json data is a string
        if (data['tenantId'] && !(typeof data['tenantId'] === 'string' || data['tenantId'] instanceof String)) {
            throw new Error("Expected the field `tenantId` to be a primitive type in the JSON string but got " + data['tenantId']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}



/**
 * The name of the access mode type of the space.
 * @member {String} accessModeType
 */
Space.prototype['accessModeType'] = undefined;

/**
 * The space creation time.
 * @member {Number} creationTime
 */
Space.prototype['creationTime'] = undefined;

/**
 * The ID of the space creator.
 * @member {String} creatorId
 */
Space.prototype['creatorId'] = undefined;

/**
 * The name of the default role of a new participant.
 * @member {String} defaultRole
 */
Space.prototype['defaultRole'] = undefined;

/**
 * The space description.
 * @member {String} description
 */
Space.prototype['description'] = undefined;

/**
 * Base64 encoded image that can be set during the creation and the update of a space.
 * @member {String} largePictureBase64
 */
Space.prototype['largePictureBase64'] = undefined;

/**
 * The content type of the image.
 * @member {String} largePictureContentType
 */
Space.prototype['largePictureContentType'] = undefined;

/**
 * The file id of the large version of the picture.
 * @member {String} largePictureId
 */
Space.prototype['largePictureId'] = undefined;

/**
 * Time stamp when the last content (topic / reply) was created within this space.
 * @member {Number} lastContentCreationTime
 */
Space.prototype['lastContentCreationTime'] = undefined;

/**
 * User ID of the user which created the last content.
 * @member {String} lastContentCreatorId
 */
Space.prototype['lastContentCreatorId'] = undefined;

/**
 * The space modification time.
 * @member {Number} modificationTime
 */
Space.prototype['modificationTime'] = undefined;

/**
 * The unique space name.
 * @member {String} name
 */
Space.prototype['name'] = undefined;

/**
 * Number of external participants in the space.
 * @member {Number} numberOfExternalParticipants
 */
Space.prototype['numberOfExternalParticipants'] = undefined;

/**
 * Number of participants in the space.
 * @member {Number} numberOfParticipants
 */
Space.prototype['numberOfParticipants'] = undefined;

/**
 * Number of pinned topics in the space.
 * @member {Number} numberOfPinnedTopics
 */
Space.prototype['numberOfPinnedTopics'] = undefined;

/**
 * Number of replies in the space.
 * @member {Number} numberOfReplies
 */
Space.prototype['numberOfReplies'] = undefined;

/**
 * Number of topics in the space.
 * @member {Number} numberOfTopics
 */
Space.prototype['numberOfTopics'] = undefined;

/**
 * The ID of the space owner.
 * @member {String} ownerId
 */
Space.prototype['ownerId'] = undefined;

/**
 * Base64 encoded image that can be set during the creation and the update of a space.
 * @member {String} smallPictureBase64
 */
Space.prototype['smallPictureBase64'] = undefined;

/**
 * The content type of the image.
 * @member {String} smallPictureContentType
 */
Space.prototype['smallPictureContentType'] = undefined;

/**
 * The file id of the small version of the picture.
 * @member {String} smallPictureId
 */
Space.prototype['smallPictureId'] = undefined;

/**
 * The unique space ID generated by the backend during the creation of the space.
 * @member {String} spaceId
 */
Space.prototype['spaceId'] = undefined;

/**
 * The name of the status of the space.
 * @member {String} status
 */
Space.prototype['status'] = undefined;

/**
 * The list of space tags.
 * @member {Array.<String>} tags
 */
Space.prototype['tags'] = undefined;

/**
 * The ID of the space tenant.
 * @member {String} tenantId
 */
Space.prototype['tenantId'] = undefined;

/**
 * The name of the space type.
 * @member {String} type
 */
Space.prototype['type'] = undefined;






export default Space;

