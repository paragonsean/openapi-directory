/**
 * REST API Version 2
 * Circuit REST API to interact with the Circuit system.  [Learn more about the Circuit Development Community](https://www.circuit.com/web/developers/home)
 *
 * The version of the OpenAPI document: 2.9.235
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Preview from './Preview';

/**
 * The ConversationTextItem model module.
 * @module model/ConversationTextItem
 * @version 2.9.235
 */
class ConversationTextItem {
    /**
     * Constructs a new <code>ConversationTextItem</code>.
     * @alias module:model/ConversationTextItem
     */
    constructor() { 
        
        ConversationTextItem.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ConversationTextItem</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ConversationTextItem} obj Optional instance to populate.
     * @return {module:model/ConversationTextItem} The populated <code>ConversationTextItem</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ConversationTextItem();

            if (data.hasOwnProperty('content')) {
                obj['content'] = ApiClient.convertToType(data['content'], 'String');
            }
            if (data.hasOwnProperty('contentType')) {
                obj['contentType'] = ApiClient.convertToType(data['contentType'], 'String');
            }
            if (data.hasOwnProperty('formMetaData')) {
                obj['formMetaData'] = ApiClient.convertToType(data['formMetaData'], 'String');
            }
            if (data.hasOwnProperty('isWebhookMessage')) {
                obj['isWebhookMessage'] = ApiClient.convertToType(data['isWebhookMessage'], 'Boolean');
            }
            if (data.hasOwnProperty('likedUserIds')) {
                obj['likedUserIds'] = ApiClient.convertToType(data['likedUserIds'], ['String']);
            }
            if (data.hasOwnProperty('parentId')) {
                obj['parentId'] = ApiClient.convertToType(data['parentId'], 'String');
            }
            if (data.hasOwnProperty('preview')) {
                obj['preview'] = Preview.constructFromObject(data['preview']);
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('subject')) {
                obj['subject'] = ApiClient.convertToType(data['subject'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ConversationTextItem</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ConversationTextItem</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['content'] && !(typeof data['content'] === 'string' || data['content'] instanceof String)) {
            throw new Error("Expected the field `content` to be a primitive type in the JSON string but got " + data['content']);
        }
        // ensure the json data is a string
        if (data['contentType'] && !(typeof data['contentType'] === 'string' || data['contentType'] instanceof String)) {
            throw new Error("Expected the field `contentType` to be a primitive type in the JSON string but got " + data['contentType']);
        }
        // ensure the json data is a string
        if (data['formMetaData'] && !(typeof data['formMetaData'] === 'string' || data['formMetaData'] instanceof String)) {
            throw new Error("Expected the field `formMetaData` to be a primitive type in the JSON string but got " + data['formMetaData']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['likedUserIds'])) {
            throw new Error("Expected the field `likedUserIds` to be an array in the JSON data but got " + data['likedUserIds']);
        }
        // ensure the json data is a string
        if (data['parentId'] && !(typeof data['parentId'] === 'string' || data['parentId'] instanceof String)) {
            throw new Error("Expected the field `parentId` to be a primitive type in the JSON string but got " + data['parentId']);
        }
        // validate the optional field `preview`
        if (data['preview']) { // data not null
          Preview.validateJSON(data['preview']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }
        // ensure the json data is a string
        if (data['subject'] && !(typeof data['subject'] === 'string' || data['subject'] instanceof String)) {
            throw new Error("Expected the field `subject` to be a primitive type in the JSON string but got " + data['subject']);
        }

        return true;
    }


}



/**
 * The content of the text item
 * @member {String} content
 */
ConversationTextItem.prototype['content'] = undefined;

/**
 * The type of the text item. It can be one of the following: RICH (with HTML content) or PLAIN (only text)
 * @member {String} contentType
 */
ConversationTextItem.prototype['contentType'] = undefined;

/**
 * The meta data form
 * @member {String} formMetaData
 */
ConversationTextItem.prototype['formMetaData'] = undefined;

/**
 * Is this a webhook message?
 * @member {Boolean} isWebhookMessage
 */
ConversationTextItem.prototype['isWebhookMessage'] = undefined;

/**
 * Array of IDs of the users who liked the item
 * @member {Array.<String>} likedUserIds
 */
ConversationTextItem.prototype['likedUserIds'] = undefined;

/**
 * The ID of the parent item of the text item. This field is optional and can be used for thread views
 * @member {String} parentId
 */
ConversationTextItem.prototype['parentId'] = undefined;

/**
 * @member {module:model/Preview} preview
 */
ConversationTextItem.prototype['preview'] = undefined;

/**
 * The state of the text item. It can be one of the following: CREATED (which denotes that it was not modified since its creation), EDITED (which denotes that the creator of this item modified the item) or DELETED (which denotes that the item itself exists but its content was removed)
 * @member {String} state
 */
ConversationTextItem.prototype['state'] = undefined;

/**
 * TThe subject of the text item. This field is optional and maybe filled when creating the text item
 * @member {String} subject
 */
ConversationTextItem.prototype['subject'] = undefined;






export default ConversationTextItem;

