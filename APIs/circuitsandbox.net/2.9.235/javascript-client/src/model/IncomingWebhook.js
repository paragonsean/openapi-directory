/**
 * REST API Version 2
 * Circuit REST API to interact with the Circuit system.  [Learn more about the Circuit Development Community](https://www.circuit.com/web/developers/home)
 *
 * The version of the OpenAPI document: 2.9.235
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The IncomingWebhook model module.
 * @module model/IncomingWebhook
 * @version 2.9.235
 */
class IncomingWebhook {
    /**
     * Constructs a new <code>IncomingWebhook</code>.
     * @alias module:model/IncomingWebhook
     */
    constructor() { 
        
        IncomingWebhook.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>IncomingWebhook</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/IncomingWebhook} obj Optional instance to populate.
     * @return {module:model/IncomingWebhook} The populated <code>IncomingWebhook</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new IncomingWebhook();

            if (data.hasOwnProperty('conversationId')) {
                obj['conversationId'] = ApiClient.convertToType(data['conversationId'], 'String');
            }
            if (data.hasOwnProperty('creationTime')) {
                obj['creationTime'] = ApiClient.convertToType(data['creationTime'], 'Number');
            }
            if (data.hasOwnProperty('creatorId')) {
                obj['creatorId'] = ApiClient.convertToType(data['creatorId'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('modificationTime')) {
                obj['modificationTime'] = ApiClient.convertToType(data['modificationTime'], 'Number');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('tenantId')) {
                obj['tenantId'] = ApiClient.convertToType(data['tenantId'], 'String');
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
            if (data.hasOwnProperty('userId')) {
                obj['userId'] = ApiClient.convertToType(data['userId'], 'String');
            }
            if (data.hasOwnProperty('webhookId')) {
                obj['webhookId'] = ApiClient.convertToType(data['webhookId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>IncomingWebhook</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>IncomingWebhook</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['conversationId'] && !(typeof data['conversationId'] === 'string' || data['conversationId'] instanceof String)) {
            throw new Error("Expected the field `conversationId` to be a primitive type in the JSON string but got " + data['conversationId']);
        }
        // ensure the json data is a string
        if (data['creatorId'] && !(typeof data['creatorId'] === 'string' || data['creatorId'] instanceof String)) {
            throw new Error("Expected the field `creatorId` to be a primitive type in the JSON string but got " + data['creatorId']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // ensure the json data is a string
        if (data['tenantId'] && !(typeof data['tenantId'] === 'string' || data['tenantId'] instanceof String)) {
            throw new Error("Expected the field `tenantId` to be a primitive type in the JSON string but got " + data['tenantId']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }
        // ensure the json data is a string
        if (data['userId'] && !(typeof data['userId'] === 'string' || data['userId'] instanceof String)) {
            throw new Error("Expected the field `userId` to be a primitive type in the JSON string but got " + data['userId']);
        }
        // ensure the json data is a string
        if (data['webhookId'] && !(typeof data['webhookId'] === 'string' || data['webhookId'] instanceof String)) {
            throw new Error("Expected the field `webhookId` to be a primitive type in the JSON string but got " + data['webhookId']);
        }

        return true;
    }


}



/**
 * The conversation where the posts go to
 * @member {String} conversationId
 */
IncomingWebhook.prototype['conversationId'] = undefined;

/**
 * Milliseconds since 1.1.1900 when the hook was created
 * @member {Number} creationTime
 */
IncomingWebhook.prototype['creationTime'] = undefined;

/**
 * Th e user who created the webhook
 * @member {String} creatorId
 */
IncomingWebhook.prototype['creatorId'] = undefined;

/**
 * A short plain text to describe the webhook
 * @member {String} description
 */
IncomingWebhook.prototype['description'] = undefined;

/**
 * Milliseconds since 1.1.1900 when the hook was modified
 * @member {Number} modificationTime
 */
IncomingWebhook.prototype['modificationTime'] = undefined;

/**
 * A name to identify the webhook
 * @member {String} name
 */
IncomingWebhook.prototype['name'] = undefined;

/**
 * Status may be ENABLED or DISABLED. A disabled hook cannot be used
 * @member {String} status
 */
IncomingWebhook.prototype['status'] = undefined;

/**
 * The tenant where the conversation and users belong to
 * @member {String} tenantId
 */
IncomingWebhook.prototype['tenantId'] = undefined;

/**
 * The url where the webhokk can be used
 * @member {String} url
 */
IncomingWebhook.prototype['url'] = undefined;

/**
 * The user who will occur as author of the posts
 * @member {String} userId
 */
IncomingWebhook.prototype['userId'] = undefined;

/**
 * Unique id of the webhook
 * @member {String} webhookId
 */
IncomingWebhook.prototype['webhookId'] = undefined;






export default IncomingWebhook;

