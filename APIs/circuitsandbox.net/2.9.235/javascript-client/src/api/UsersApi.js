/**
 * REST API Version 2
 * Circuit REST API to interact with the Circuit system.  [Learn more about the Circuit Development Community](https://www.circuit.com/web/developers/home)
 *
 * The version of the OpenAPI document: 2.9.235
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Label from '../model/Label';
import Presence from '../model/Presence';
import SupportInfo from '../model/SupportInfo';
import User from '../model/User';

/**
* Users service.
* @module api/UsersApi
* @version 2.9.235
*/
export default class UsersApi {

    /**
    * Constructs a new UsersApi. 
    * @alias module:api/UsersApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getLabel operation.
     * @callback module:api/UsersApi~getLabelCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Label>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns all user labels
     * Returns all labels of the user that were defined either explicit or implicit via assignment to conversations. OauthScopes: READ_USER_PROFILE, ORGANIZE_CONVERSATIONS
     * @param {module:api/UsersApi~getLabelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Label>}
     */
    getLabel(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [Label];
      return this.apiClient.callApi(
        '/users/labels', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPresence operation.
     * @callback module:api/UsersApi~getPresenceCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Presence>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the presence status
     * Gets the presence status of the users whose IDs or email addresses are given. OauthScopes: READ_USER
     * @param {Array.<String>} userIds A list of unique user IDs or email addresses of the users you want to query the presence state for
     * @param {module:api/UsersApi~getPresenceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Presence>}
     */
    getPresence(userIds, callback) {
      let postBody = null;
      // verify the required parameter 'userIds' is set
      if (userIds === undefined || userIds === null) {
        throw new Error("Missing the required parameter 'userIds' when calling getPresence");
      }

      let pathParams = {
      };
      let queryParams = {
        'userIds': this.apiClient.buildCollectionParam(userIds, 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = [Presence];
      return this.apiClient.callApi(
        '/users/presence', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getProfile operation.
     * @callback module:api/UsersApi~getProfileCallback
     * @param {String} error Error message, if any.
     * @param {module:model/User} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the authenticated user's profile information
     * Gets the authenticated user's profile information. OauthScopes: READ_USER_PROFILE
     * @param {module:api/UsersApi~getProfileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/User}
     */
    getProfile(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = User;
      return this.apiClient.callApi(
        '/users/profile', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSupportInfo operation.
     * @callback module:api/UsersApi~getSupportInfoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SupportInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the support information
     * Gets the support information for the tenant of the requesting user OauthScopes: READ_USER_PROFILE
     * @param {module:api/UsersApi~getSupportInfoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SupportInfo}
     */
    getSupportInfo(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = SupportInfo;
      return this.apiClient.callApi(
        '/users/supportinfo', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getUserByEmailAddress operation.
     * @callback module:api/UsersApi~getUserByEmailAddressCallback
     * @param {String} error Error message, if any.
     * @param {module:model/User} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get user by email
     * Get user by first or secondary email address OauthScopes: READ_USER_PROFILE
     * @param {String} emailAddress The main or secondary email address of a user.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [secondaryLookup] secondaryLookup enabled (default = false)
     * @param {module:api/UsersApi~getUserByEmailAddressCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/User}
     */
    getUserByEmailAddress(emailAddress, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'emailAddress' is set
      if (emailAddress === undefined || emailAddress === null) {
        throw new Error("Missing the required parameter 'emailAddress' when calling getUserByEmailAddress");
      }

      let pathParams = {
        'emailAddress': emailAddress
      };
      let queryParams = {
        'secondaryLookup': opts['secondaryLookup']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = User;
      return this.apiClient.callApi(
        '/users/{emailAddress}/getUserByEmail', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getUserById operation.
     * @callback module:api/UsersApi~getUserByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/User} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the user's profile information
     * Gets the profile information of the user with the given ID. OauthScopes: READ_USER
     * @param {String} id The unique ID or the email address of the user to fetch
     * @param {module:api/UsersApi~getUserByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/User}
     */
    getUserById(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getUserById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = User;
      return this.apiClient.callApi(
        '/users/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getUserPresence operation.
     * @callback module:api/UsersApi~getUserPresenceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Presence} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the presence status
     * Gets the presence status of the users whose ID or email address is given. OauthScopes: READ_USER
     * @param {String} id The unique ID or the email address of the user to fetch.
     * @param {module:api/UsersApi~getUserPresenceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Presence}
     */
    getUserPresence(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getUserPresence");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = Presence;
      return this.apiClient.callApi(
        '/users/{id}/presence', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the searchUser operation.
     * @callback module:api/UsersApi~searchUserCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/User>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search for users
     * Search for users based on an email address or username OauthScopes: READ_USER
     * @param {String} name Search for a user by name
     * @param {module:api/UsersApi~searchUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/User>}
     */
    searchUser(name, callback) {
      let postBody = null;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling searchUser");
      }

      let pathParams = {
      };
      let queryParams = {
        'name': name
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = [User];
      return this.apiClient.callApi(
        '/users', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the searchUsersList operation.
     * @callback module:api/UsersApi~searchUsersListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/User>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search multiple users.
     * Search multiple users given by id or email address. OauthScopes: READ_USER
     * @param {Array.<String>} name Multiple email addresses or UUIDs.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [returnFullUserInfo = false)] Boolean, return full user info?
     * @param {Boolean} [secondaryLookup = false)] Boolean, lookup secondary email?
     * @param {module:api/UsersApi~searchUsersListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/User>}
     */
    searchUsersList(name, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling searchUsersList");
      }

      let pathParams = {
      };
      let queryParams = {
        'name': this.apiClient.buildCollectionParam(name, 'multi'),
        'returnFullUserInfo': opts['returnFullUserInfo'],
        'secondaryLookup': opts['secondaryLookup']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = [User];
      return this.apiClient.callApi(
        '/users/list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setUserPresence operation.
     * @callback module:api/UsersApi~setUserPresenceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Presence} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the presence status
     * Updates the presence status of the authenticated user. OauthScopes: WRITE_USER_PROFILE, MANAGE_PRESENCE
     * @param {String} state The user's presence.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [clearDND = false)] Clear the DND of the user.
     * @param {Date} [dndUntil] Timestamp until the DND state of the user is active. This field is mandatory when the state is set to DND.
     * @param {String} [statusMessage] An optional status message that is displayed instead of the location
     * @param {module:api/UsersApi~setUserPresenceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Presence}
     */
    setUserPresence(state, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'state' is set
      if (state === undefined || state === null) {
        throw new Error("Missing the required parameter 'state' when calling setUserPresence");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'clearDND': opts['clearDND'],
        'dndUntil': opts['dndUntil'],
        'state': state,
        'statusMessage': opts['statusMessage']
      };

      let authNames = ['oauth'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'application/xml'];
      let returnType = Presence;
      return this.apiClient.callApi(
        '/users/presence', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
