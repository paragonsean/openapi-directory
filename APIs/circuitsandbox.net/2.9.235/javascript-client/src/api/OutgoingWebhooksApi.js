/**
 * REST API Version 2
 * Circuit REST API to interact with the Circuit system.  [Learn more about the Circuit Development Community](https://www.circuit.com/web/developers/home)
 *
 * The version of the OpenAPI document: 2.9.235
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import WebHook from '../model/WebHook';

/**
* OutgoingWebhooks service.
* @module api/OutgoingWebhooksApi
* @version 2.9.235
*/
export default class OutgoingWebhooksApi {

    /**
    * Constructs a new OutgoingWebhooksApi. 
    * @alias module:api/OutgoingWebhooksApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addPresenceWebHook operation.
     * @callback module:api/OutgoingWebhooksApi~addPresenceWebHookCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WebHook} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Registers Presence WebHook registration
     * Registers a webHook that has a presence filter with the given URL and userIds. There is a maximum number of userIds allowed OauthScopes: READ_USER
     * @param {String} url WebHook callback URL
     * @param {Array.<String>} userIds The IDs of the users to subscribe for their presence
     * @param {module:api/OutgoingWebhooksApi~addPresenceWebHookCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WebHook}
     */
    addPresenceWebHook(url, userIds, callback) {
      let postBody = null;
      // verify the required parameter 'url' is set
      if (url === undefined || url === null) {
        throw new Error("Missing the required parameter 'url' when calling addPresenceWebHook");
      }
      // verify the required parameter 'userIds' is set
      if (userIds === undefined || userIds === null) {
        throw new Error("Missing the required parameter 'userIds' when calling addPresenceWebHook");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'url': url,
        'userIds': this.apiClient.buildCollectionParam(userIds, 'csv')
      };

      let authNames = ['oauth'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'application/xml'];
      let returnType = WebHook;
      return this.apiClient.callApi(
        '/webhooks/presence', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addWebHook operation.
     * @callback module:api/OutgoingWebhooksApi~addWebHookCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WebHook} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Registers a WebHook
     * Registers the webHook with the given filter and callback URL. OauthScopes: READ_CONVERSATIONS, READ_USER
     * @param {Array.<module:model/String>} filter A filter for WebHooks that checks for a list of configured events. This filter will use a regular expression to determine if it is interested in the events or not. The event itself is converted into a string of format AREA.EVENT. Examples: CONVERSATION.CREATE / USER.UPDATE
     * @param {String} url WebHook callback URL
     * @param {module:api/OutgoingWebhooksApi~addWebHookCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WebHook}
     */
    addWebHook(filter, url, callback) {
      let postBody = null;
      // verify the required parameter 'filter' is set
      if (filter === undefined || filter === null) {
        throw new Error("Missing the required parameter 'filter' when calling addWebHook");
      }
      // verify the required parameter 'url' is set
      if (url === undefined || url === null) {
        throw new Error("Missing the required parameter 'url' when calling addWebHook");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'filter': this.apiClient.buildCollectionParam(filter, 'csv'),
        'url': url
      };

      let authNames = ['oauth'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'application/xml'];
      let returnType = WebHook;
      return this.apiClient.callApi(
        '/webhooks', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getWebHook operation.
     * @callback module:api/OutgoingWebhooksApi~getWebHookCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/WebHook>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of webHooks
     * Gets the list of webHooks registered for this user or API. OauthScopes: READ_CONVERSATIONS, READ_USER
     * @param {module:api/OutgoingWebhooksApi~getWebHookCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/WebHook>}
     */
    getWebHook(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [WebHook];
      return this.apiClient.callApi(
        '/webhooks', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getWebHookById operation.
     * @callback module:api/OutgoingWebhooksApi~getWebHookByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WebHook} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a webHook
     * Gets the registered webHook with the given ID. OauthScopes: READ_CONVERSATIONS, READ_USER
     * @param {String} id The unique ID of the webHook to fetch
     * @param {module:api/OutgoingWebhooksApi~getWebHookByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WebHook}
     */
    getWebHookById(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getWebHookById");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = WebHook;
      return this.apiClient.callApi(
        '/webhooks/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the removeWebHook operation.
     * @callback module:api/OutgoingWebhooksApi~removeWebHookCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes a registered webHook
     * Unregisters the webHook with the given ID. OauthScopes: READ_CONVERSATIONS, READ_USER
     * @param {String} id The unique ID of the webHook to remove
     * @param {module:api/OutgoingWebhooksApi~removeWebHookCallback} callback The callback function, accepting three arguments: error, data, response
     */
    removeWebHook(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling removeWebHook");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/webhooks/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the removeWebHooks operation.
     * @callback module:api/OutgoingWebhooksApi~removeWebHooksCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes all webHooks
     * Unregisters all webHooks of the authenticated user OauthScopes: READ_CONVERSATIONS, READ_USER
     * @param {module:api/OutgoingWebhooksApi~removeWebHooksCallback} callback The callback function, accepting three arguments: error, data, response
     */
    removeWebHooks(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/webhooks', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updatePresenceWebHook operation.
     * @callback module:api/OutgoingWebhooksApi~updatePresenceWebHookCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WebHook} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a Presence WebHook registration
     * Updates a registration of a webHook that has a presence filter. The update can be performed either on the URL and/or the userIds. The new userIds, if any, will override any existing userIds. OauthScopes: READ_USER
     * @param {String} id The unique ID of the webHook to update
     * @param {Object} opts Optional parameters
     * @param {String} [url] WebHook callback URL
     * @param {Array.<String>} [userIds] The IDs of the users to subscribe for their presence
     * @param {module:api/OutgoingWebhooksApi~updatePresenceWebHookCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WebHook}
     */
    updatePresenceWebHook(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updatePresenceWebHook");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'url': opts['url'],
        'userIds': this.apiClient.buildCollectionParam(opts['userIds'], 'csv')
      };

      let authNames = ['oauth'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'application/xml'];
      let returnType = WebHook;
      return this.apiClient.callApi(
        '/webhooks/presence/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateWebHook operation.
     * @callback module:api/OutgoingWebhooksApi~updateWebHookCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WebHook} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a WebHook registration
     * Updates a webHook registration with the given filter and callback URL. OauthScopes: READ_CONVERSATIONS, READ_USER
     * @param {String} id The unique ID of the webHook to update
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [filter] A filter for WebHooks that checks for a list of configured events. This filter will use a regular expression to determine if it is interested in the events or not. The event itself is converted into a string of format AREA.EVENT. Examples: CONVERSATION.CREATE / USER.UPDATE
     * @param {String} [url] WebHook callback URL
     * @param {module:api/OutgoingWebhooksApi~updateWebHookCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WebHook}
     */
    updateWebHook(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateWebHook");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'filter': this.apiClient.buildCollectionParam(opts['filter'], 'csv'),
        'url': opts['url']
      };

      let authNames = ['oauth'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'application/xml'];
      let returnType = WebHook;
      return this.apiClient.callApi(
        '/webhooks/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
