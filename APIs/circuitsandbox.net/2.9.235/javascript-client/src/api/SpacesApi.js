/**
 * REST API Version 2
 * Circuit REST API to interact with the Circuit system.  [Learn more about the Circuit Development Community](https://www.circuit.com/web/developers/home)
 *
 * The version of the OpenAPI document: 2.9.235
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AddParticipantsSearchResult from '../model/AddParticipantsSearchResult';
import BasicSearchResult from '../model/BasicSearchResult';
import DirectoryResult from '../model/DirectoryResult';
import FlaggedItemsResult from '../model/FlaggedItemsResult';
import LabelIds from '../model/LabelIds';
import ParticipantsImportDataResult from '../model/ParticipantsImportDataResult';
import ParticipantsLikeResult from '../model/ParticipantsLikeResult';
import ParticipantsSearchResult from '../model/ParticipantsSearchResult';
import ParticipantsSearchResultLarge from '../model/ParticipantsSearchResultLarge';
import SpacePinnedTopic from '../model/SpacePinnedTopic';
import SpaceReply from '../model/SpaceReply';
import SpaceSearchResultDetailedBack from '../model/SpaceSearchResultDetailedBack';
import SpaceTopic from '../model/SpaceTopic';
import SpaceTopicWithReplies from '../model/SpaceTopicWithReplies';
import SpacesSearchTermResult from '../model/SpacesSearchTermResult';

/**
* Spaces service.
* @module api/SpacesApi
* @version 2.9.235
*/
export default class SpacesApi {

    /**
    * Constructs a new SpacesApi. 
    * @alias module:api/SpacesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addParticipantsToSpace operation.
     * @callback module:api/SpacesApi~addParticipantsToSpaceCallback
     * @param {String} error Error message, if any.
     * @param {Array.<Object>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add Participant to Space
     * Add a participant to a space OauthScopes: WRITE_SPACE, MANAGE_SPACE
     * @param {String} id The id of the space
     * @param {module:model/String} role The name of the role of the participant
     * @param {Array.<String>} userId The user id of the participant
     * @param {module:api/SpacesApi~addParticipantsToSpaceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Object>}
     */
    addParticipantsToSpace(id, role, userId, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling addParticipantsToSpace");
      }
      // verify the required parameter 'role' is set
      if (role === undefined || role === null) {
        throw new Error("Missing the required parameter 'role' when calling addParticipantsToSpace");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling addParticipantsToSpace");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'role': role,
        'userId': this.apiClient.buildCollectionParam(userId, 'csv')
      };

      let authNames = ['oauth'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'application/xml'];
      let returnType = [Object];
      return this.apiClient.callApi(
        '/spaces/{id}/participant', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addRecentSpaceSearch operation.
     * @callback module:api/SpacesApi~addRecentSpaceSearchCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add recent search 
     * Add recent search of a client to search controller. OauthScopes: WRITE_SPACE, MANAGE_SPACE, ORGANIZE_SPACE
     * @param {module:model/String} scope The scope of the search.
     * @param {String} searchTerm The term to search for.
     * @param {Object} opts Optional parameters
     * @param {Date} [endTime] The end time.
     * @param {Date} [startTime] The start time.
     * @param {module:api/SpacesApi~addRecentSpaceSearchCallback} callback The callback function, accepting three arguments: error, data, response
     */
    addRecentSpaceSearch(scope, searchTerm, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'scope' is set
      if (scope === undefined || scope === null) {
        throw new Error("Missing the required parameter 'scope' when calling addRecentSpaceSearch");
      }
      // verify the required parameter 'searchTerm' is set
      if (searchTerm === undefined || searchTerm === null) {
        throw new Error("Missing the required parameter 'searchTerm' when calling addRecentSpaceSearch");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'endTime': opts['endTime'],
        'scope': scope,
        'searchTerm': searchTerm,
        'startTime': opts['startTime']
      };

      let authNames = ['oauth'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/spaces/search/add/recent', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the assignLabels operation.
     * @callback module:api/SpacesApi~assignLabelsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/LabelIds>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Assign labels
     * Assign labels to space OauthScopes: WRITE_SPACE, ORGANIZE_SPACE
     * @param {String} id The id of the space.
     * @param {Array.<String>} labels The labels to assign to the space
     * @param {module:api/SpacesApi~assignLabelsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/LabelIds>}
     */
    assignLabels(id, labels, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling assignLabels");
      }
      // verify the required parameter 'labels' is set
      if (labels === undefined || labels === null) {
        throw new Error("Missing the required parameter 'labels' when calling assignLabels");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'labels': this.apiClient.buildCollectionParam(labels, 'csv')
      };

      let authNames = ['oauth'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'application/xml'];
      let returnType = [LabelIds];
      return this.apiClient.callApi(
        '/spaces/{id}/labels/assign', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the cancelSpaceSearch operation.
     * @callback module:api/SpacesApi~cancelSpaceSearchCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Cancels a space search of a client.
     * Cancels a space search of a client. OauthScopes: WRITE_SPACE, MANAGE_SPACE
     * @param {String} searchId The id of the search to cancel
     * @param {module:api/SpacesApi~cancelSpaceSearchCallback} callback The callback function, accepting three arguments: error, data, response
     */
    cancelSpaceSearch(searchId, callback) {
      let postBody = null;
      // verify the required parameter 'searchId' is set
      if (searchId === undefined || searchId === null) {
        throw new Error("Missing the required parameter 'searchId' when calling cancelSpaceSearch");
      }

      let pathParams = {
        'searchId': searchId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/spaces/search/cancel/{searchId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createReply operation.
     * @callback module:api/SpacesApi~createReplyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SpaceReply} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * creates a reply to a topic
     * creates a reply to a topic OauthScopes: WRITE_SPACE
     * @param {String} spaceId ID of the space
     * @param {String} topicId ID of the topic
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [attachments] the attached files
     * @param {Boolean} [complex] complex or not
     * @param {String} [content] Content of the reply
     * @param {String} [formMetaData] formMetaData used in the reply
     * @param {String} [mentionedUser] the user mentioned in the reply
     * @param {module:api/SpacesApi~createReplyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SpaceReply}
     */
    createReply(spaceId, topicId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'spaceId' is set
      if (spaceId === undefined || spaceId === null) {
        throw new Error("Missing the required parameter 'spaceId' when calling createReply");
      }
      // verify the required parameter 'topicId' is set
      if (topicId === undefined || topicId === null) {
        throw new Error("Missing the required parameter 'topicId' when calling createReply");
      }

      let pathParams = {
        'spaceId': spaceId,
        'topicId': topicId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'attachments': this.apiClient.buildCollectionParam(opts['attachments'], 'csv'),
        'complex': opts['complex'],
        'content': opts['content'],
        'formMetaData': opts['formMetaData'],
        'mentionedUser': opts['mentionedUser']
      };

      let authNames = ['oauth'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'application/xml'];
      let returnType = SpaceReply;
      return this.apiClient.callApi(
        '/spaces/{spaceId}/topic/{topicId}/reply', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createSpace operation.
     * @callback module:api/SpacesApi~createSpaceCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a space
     * Create a space OauthScopes: WRITE_SPACE, MANAGE_SPACE, CREATE_SPACE_CONTENT
     * @param {module:model/String} accessModeType Access mode
     * @param {String} name name of the space
     * @param {module:model/String} role role
     * @param {module:model/String} status status
     * @param {module:model/String} type type
     * @param {Object} opts Optional parameters
     * @param {String} [description] description of the space
     * @param {String} [largePictureBase64] large picture
     * @param {String} [smallPictureBase64] small picture
     * @param {Array.<String>} [tags] tags of the space
     * @param {module:api/SpacesApi~createSpaceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    createSpace(accessModeType, name, role, status, type, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'accessModeType' is set
      if (accessModeType === undefined || accessModeType === null) {
        throw new Error("Missing the required parameter 'accessModeType' when calling createSpace");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling createSpace");
      }
      // verify the required parameter 'role' is set
      if (role === undefined || role === null) {
        throw new Error("Missing the required parameter 'role' when calling createSpace");
      }
      // verify the required parameter 'status' is set
      if (status === undefined || status === null) {
        throw new Error("Missing the required parameter 'status' when calling createSpace");
      }
      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new Error("Missing the required parameter 'type' when calling createSpace");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'accessModeType': accessModeType,
        'description': opts['description'],
        'largePictureBase64': opts['largePictureBase64'],
        'name': name,
        'role': role,
        'smallPictureBase64': opts['smallPictureBase64'],
        'status': status,
        'tags': this.apiClient.buildCollectionParam(opts['tags'], 'csv'),
        'type': type
      };

      let authNames = ['oauth'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'application/xml'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/spaces/create', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createSpaceTopic operation.
     * @callback module:api/SpacesApi~createSpaceTopicCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SpaceTopic} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * creates a new space topic
     * creates a new space topic OauthScopes: WRITE_SPACE, MANAGE_SPACE, CREATE_SPACE_CONTENT
     * @param {String} spaceId The ID of the space
     * @param {String} subject The subject of the topic
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [attachments] the attached files
     * @param {Boolean} [complex] complex or not
     * @param {String} [content] The content of this topic
     * @param {Array.<String>} [contentTags] the content tags
     * @param {String} [formMetaData] The formMetaData
     * @param {String} [mentionedUser] A list of mentioned users
     * @param {Array.<String>} [tags] the tags
     * @param {module:api/SpacesApi~createSpaceTopicCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SpaceTopic}
     */
    createSpaceTopic(spaceId, subject, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'spaceId' is set
      if (spaceId === undefined || spaceId === null) {
        throw new Error("Missing the required parameter 'spaceId' when calling createSpaceTopic");
      }
      // verify the required parameter 'subject' is set
      if (subject === undefined || subject === null) {
        throw new Error("Missing the required parameter 'subject' when calling createSpaceTopic");
      }

      let pathParams = {
        'spaceId': spaceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'attachments': this.apiClient.buildCollectionParam(opts['attachments'], 'csv'),
        'complex': opts['complex'],
        'content': opts['content'],
        'contentTags': this.apiClient.buildCollectionParam(opts['contentTags'], 'csv'),
        'formMetaData': opts['formMetaData'],
        'mentionedUser': opts['mentionedUser'],
        'subject': subject,
        'tags': this.apiClient.buildCollectionParam(opts['tags'], 'csv')
      };

      let authNames = ['oauth'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'application/xml'];
      let returnType = SpaceTopic;
      return this.apiClient.callApi(
        '/spaces/{spaceId}/topic', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteSpace operation.
     * @callback module:api/SpacesApi~deleteSpaceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a space
     * Delete a space OauthScopes: WRITE_SPACE, MANAGE_SPACE, DELETE_SPACE_CONTENT
     * @param {String} id id of the space
     * @param {module:api/SpacesApi~deleteSpaceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteSpace(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteSpace");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/spaces/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteSpaceItem operation.
     * @callback module:api/SpacesApi~deleteSpaceItemCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * deletes a space item
     * deletes a space item OauthScopes: WRITE_SPACE, DELETE_SPACE_CONTENT
     * @param {String} itemId the id of the spaceItem
     * @param {module:api/SpacesApi~deleteSpaceItemCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteSpaceItem(itemId, callback) {
      let postBody = null;
      // verify the required parameter 'itemId' is set
      if (itemId === undefined || itemId === null) {
        throw new Error("Missing the required parameter 'itemId' when calling deleteSpaceItem");
      }

      let pathParams = {
        'itemId': itemId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/spaces/item/{itemId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the denySpaceAcces operation.
     * @callback module:api/SpacesApi~denySpaceAccesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deny access for a space
     * Deny access for a space OauthScopes: WRITE_SPACE, MANAGE_SPACE
     * @param {String} spaceId Id of the space
     * @param {String} participantId Id of the participant
     * @param {Object} opts Optional parameters
     * @param {String} [reason] Reason why the request has been denied
     * @param {module:api/SpacesApi~denySpaceAccesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    denySpaceAcces(spaceId, participantId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'spaceId' is set
      if (spaceId === undefined || spaceId === null) {
        throw new Error("Missing the required parameter 'spaceId' when calling denySpaceAcces");
      }
      // verify the required parameter 'participantId' is set
      if (participantId === undefined || participantId === null) {
        throw new Error("Missing the required parameter 'participantId' when calling denySpaceAcces");
      }

      let pathParams = {
        'spaceId': spaceId,
        'participantId': participantId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'reason': opts['reason']
      };

      let authNames = ['oauth'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/spaces/{spaceId}/participant/{participantId}/deny', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the existsSpaceName operation.
     * @callback module:api/SpacesApi~existsSpaceNameCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Space name exists
     * Find out if a space name already exists for non-secret spaces. OauthScopes: READ_SPACE
     * @param {String} name The name to check for existence.
     * @param {module:api/SpacesApi~existsSpaceNameCallback} callback The callback function, accepting three arguments: error, data, response
     */
    existsSpaceName(name, callback) {
      let postBody = null;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling existsSpaceName");
      }

      let pathParams = {
        'name': name
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/spaces/exists/{name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the flagSpaceItem operation.
     * @callback module:api/SpacesApi~flagSpaceItemCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * flag a space item
     * flag a space item OauthScopes: WRITE_SPACE, UPDATE_SPACE_CONTENT
     * @param {String} itemId the id of the item you want to flag
     * @param {module:api/SpacesApi~flagSpaceItemCallback} callback The callback function, accepting three arguments: error, data, response
     */
    flagSpaceItem(itemId, callback) {
      let postBody = null;
      // verify the required parameter 'itemId' is set
      if (itemId === undefined || itemId === null) {
        throw new Error("Missing the required parameter 'itemId' when calling flagSpaceItem");
      }

      let pathParams = {
        'itemId': itemId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/spaces/flag/{itemId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDirectory operation.
     * @callback module:api/SpacesApi~getDirectoryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DirectoryResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the directory
     * Get the directory by a search query in ordered way OauthScopes: READ_SPACE
     * @param {module:model/String} sortBy sort the spaces by LAST_CONTENT, NAME, NUMBER_OF_USERS or CREATION_DATE
     * @param {module:model/String} sortOrder ascending or descending
     * @param {module:model/String} filter filter for spaces (JOINED, REQUESTED, OPEN, CLOSED or NOT_JOINED_REQUESTED)
     * @param {Object} opts Optional parameters
     * @param {String} [query] some sort of query
     * @param {String} [pagePointer] page pointer, start with nothing and for next query use returned pointer
     * @param {Number} [numberOfResults = 25)] number of results to return, 25 by default.
     * @param {module:api/SpacesApi~getDirectoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DirectoryResult}
     */
    getDirectory(sortBy, sortOrder, filter, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'sortBy' is set
      if (sortBy === undefined || sortBy === null) {
        throw new Error("Missing the required parameter 'sortBy' when calling getDirectory");
      }
      // verify the required parameter 'sortOrder' is set
      if (sortOrder === undefined || sortOrder === null) {
        throw new Error("Missing the required parameter 'sortOrder' when calling getDirectory");
      }
      // verify the required parameter 'filter' is set
      if (filter === undefined || filter === null) {
        throw new Error("Missing the required parameter 'filter' when calling getDirectory");
      }

      let pathParams = {
      };
      let queryParams = {
        'sortBy': sortBy,
        'sortOrder': sortOrder,
        'filter': filter,
        'query': opts['query'],
        'pagePointer': opts['pagePointer'],
        'numberOfResults': opts['numberOfResults']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = DirectoryResult;
      return this.apiClient.callApi(
        '/spaces/directory', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getFlaggedItems operation.
     * @callback module:api/SpacesApi~getFlaggedItemsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FlaggedItemsResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get flagged items
     * Get flagged items OauthScopes: READ_SPACE
     * @param {module:model/String} searchDirection before or after the time stamp
     * @param {Date} timestamp The timestamp according to which you want to retrieve the flagged items
     * @param {Object} opts Optional parameters
     * @param {String} [searchPointer] The searchpointer for the search (initially not set).
     * @param {Number} [numberOfResults = 25)] The number of results you want to retrieve.
     * @param {module:api/SpacesApi~getFlaggedItemsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FlaggedItemsResult}
     */
    getFlaggedItems(searchDirection, timestamp, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'searchDirection' is set
      if (searchDirection === undefined || searchDirection === null) {
        throw new Error("Missing the required parameter 'searchDirection' when calling getFlaggedItems");
      }
      // verify the required parameter 'timestamp' is set
      if (timestamp === undefined || timestamp === null) {
        throw new Error("Missing the required parameter 'timestamp' when calling getFlaggedItems");
      }

      let pathParams = {
      };
      let queryParams = {
        'searchDirection': searchDirection,
        'timestamp': timestamp,
        'searchPointer': opts['searchPointer'],
        'numberOfResults': opts['numberOfResults']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = FlaggedItemsResult;
      return this.apiClient.callApi(
        '/spaces/flagged', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getLikes operation.
     * @callback module:api/SpacesApi~getLikesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ParticipantsLikeResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the likes of an item
     * Get the likes of an item OauthScopes: READ_SPACE
     * @param {String} itemId The id of the item to retrieve the likes from
     * @param {Object} opts Optional parameters
     * @param {String} [searchPointer] The searchpointer for the search (initially not set).
     * @param {Number} [numberOfResults = 25)] The number of results you want to retrieve.
     * @param {module:api/SpacesApi~getLikesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ParticipantsLikeResult}
     */
    getLikes(itemId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'itemId' is set
      if (itemId === undefined || itemId === null) {
        throw new Error("Missing the required parameter 'itemId' when calling getLikes");
      }

      let pathParams = {
        'itemId': itemId
      };
      let queryParams = {
        'searchPointer': opts['searchPointer'],
        'numberOfResults': opts['numberOfResults']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = ParticipantsLikeResult;
      return this.apiClient.callApi(
        '/spaces/likes/{itemId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getParticipantsImportData operation.
     * @callback module:api/SpacesApi~getParticipantsImportDataCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ParticipantsImportDataResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * missing documentation
     * missing documentation OauthScopes: READ_SPACE
     * @param {String} spaceId missing documentation
     * @param {module:api/SpacesApi~getParticipantsImportDataCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ParticipantsImportDataResult}
     */
    getParticipantsImportData(spaceId, callback) {
      let postBody = null;
      // verify the required parameter 'spaceId' is set
      if (spaceId === undefined || spaceId === null) {
        throw new Error("Missing the required parameter 'spaceId' when calling getParticipantsImportData");
      }

      let pathParams = {
        'spaceId': spaceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = ParticipantsImportDataResult;
      return this.apiClient.callApi(
        '/spaces/{spaceId}/participant/import/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPendingParticipants operation.
     * @callback module:api/SpacesApi~getPendingParticipantsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ParticipantsSearchResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the pending participants of a space
     * Get the pending participants of a space OauthScopes: WRITE_SPACE, MANAGE_SPACE
     * @param {String} id The id of the space.
     * @param {Object} opts Optional parameters
     * @param {String} [searchPointer] The search pointer (leave empty initially).
     * @param {Number} [numberOfResults = 25)] number of results to return, 25 by default.
     * @param {module:api/SpacesApi~getPendingParticipantsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ParticipantsSearchResult}
     */
    getPendingParticipants(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getPendingParticipants");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'searchPointer': opts['searchPointer'],
        'numberOfResults': opts['numberOfResults']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = ParticipantsSearchResult;
      return this.apiClient.callApi(
        '/spaces/{id}/participants/pending', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPinnedTopics operation.
     * @callback module:api/SpacesApi~getPinnedTopicsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/SpacePinnedTopic>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve pinned topics
     * Retrieve pinned topics of a space OauthScopes: READ_SPACE
     * @param {String} id The id of the space.
     * @param {module:api/SpacesApi~getPinnedTopicsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/SpacePinnedTopic>}
     */
    getPinnedTopics(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getPinnedTopics");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = [SpacePinnedTopic];
      return this.apiClient.callApi(
        '/spaces/{id}/pinnedTopics', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRecentSearches operation.
     * @callback module:api/SpacesApi~getRecentSearchesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/SpacesSearchTermResult>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve recent space searches
     * Retrieve recent space searches for a user. OauthScopes: READ_SPACE
     * @param {module:api/SpacesApi~getRecentSearchesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/SpacesSearchTermResult>}
     */
    getRecentSearches(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [SpacesSearchTermResult];
      return this.apiClient.callApi(
        '/spaces/search/recent', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSpaceParticipants operation.
     * @callback module:api/SpacesApi~getSpaceParticipantsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ParticipantsSearchResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the participants of a space
     * Get the participants of a space OauthScopes: READ_SPACE
     * @param {String} id The id of the space.
     * @param {module:model/String} sortBy sort the spaces by LAST_CONTENT, NAME, NUMBER_OF_USERS or CREATION_DATE
     * @param {module:model/String} sortOrder ascending or descending
     * @param {module:model/String} filterType filtertype for participants (ACCESS_TYPE, ROLE or STATE)
     * @param {Object} opts Optional parameters
     * @param {String} [filterValue] value for the filter
     * @param {String} [query] some sort of query
     * @param {String} [searchPointer] The search pointer (leave empty initially).
     * @param {Number} [numberOfResults = 25)] number of results to return, 25 by default.
     * @param {module:api/SpacesApi~getSpaceParticipantsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ParticipantsSearchResult}
     */
    getSpaceParticipants(id, sortBy, sortOrder, filterType, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getSpaceParticipants");
      }
      // verify the required parameter 'sortBy' is set
      if (sortBy === undefined || sortBy === null) {
        throw new Error("Missing the required parameter 'sortBy' when calling getSpaceParticipants");
      }
      // verify the required parameter 'sortOrder' is set
      if (sortOrder === undefined || sortOrder === null) {
        throw new Error("Missing the required parameter 'sortOrder' when calling getSpaceParticipants");
      }
      // verify the required parameter 'filterType' is set
      if (filterType === undefined || filterType === null) {
        throw new Error("Missing the required parameter 'filterType' when calling getSpaceParticipants");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'sortBy': sortBy,
        'sortOrder': sortOrder,
        'filterType': filterType,
        'filterValue': opts['filterValue'],
        'query': opts['query'],
        'searchPointer': opts['searchPointer'],
        'numberOfResults': opts['numberOfResults']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = ParticipantsSearchResult;
      return this.apiClient.callApi(
        '/spaces/{id}/participants', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSpaceReplies operation.
     * @callback module:api/SpacesApi~getSpaceRepliesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SpaceReply} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets space replies
     * Gets a number of Space replies OauthScopes: READ_SPACE
     * @param {String} spaceId Id of the containing space
     * @param {String} topicId Id of the topic
     * @param {module:model/String} searchDirection Search before or after a certain timestamp
     * @param {Object} opts Optional parameters
     * @param {Date} [timestamp] Timestamp to start the search from
     * @param {Number} [numberOfResults = 25)] The number of results that should be returned
     * @param {module:api/SpacesApi~getSpaceRepliesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SpaceReply}
     */
    getSpaceReplies(spaceId, topicId, searchDirection, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'spaceId' is set
      if (spaceId === undefined || spaceId === null) {
        throw new Error("Missing the required parameter 'spaceId' when calling getSpaceReplies");
      }
      // verify the required parameter 'topicId' is set
      if (topicId === undefined || topicId === null) {
        throw new Error("Missing the required parameter 'topicId' when calling getSpaceReplies");
      }
      // verify the required parameter 'searchDirection' is set
      if (searchDirection === undefined || searchDirection === null) {
        throw new Error("Missing the required parameter 'searchDirection' when calling getSpaceReplies");
      }

      let pathParams = {
        'spaceId': spaceId,
        'topicId': topicId
      };
      let queryParams = {
        'searchDirection': searchDirection,
        'timestamp': opts['timestamp'],
        'numberOfResults': opts['numberOfResults']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = SpaceReply;
      return this.apiClient.callApi(
        '/spaces/{spaceId}/topic/{topicId}/reply', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSpaceTopics operation.
     * @callback module:api/SpacesApi~getSpaceTopicsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/SpaceTopic>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets space topics
     * Gets a number of Space topics OauthScopes: READ_SPACE
     * @param {String} spaceId Id of the space
     * @param {module:model/String} searchDirection Search before or after a certain timestamp
     * @param {Object} opts Optional parameters
     * @param {Date} [timestamp] Timestamp to start the search from
     * @param {Number} [numberOfResults = 25)] The number of results that should be returned
     * @param {module:api/SpacesApi~getSpaceTopicsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/SpaceTopic>}
     */
    getSpaceTopics(spaceId, searchDirection, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'spaceId' is set
      if (spaceId === undefined || spaceId === null) {
        throw new Error("Missing the required parameter 'spaceId' when calling getSpaceTopics");
      }
      // verify the required parameter 'searchDirection' is set
      if (searchDirection === undefined || searchDirection === null) {
        throw new Error("Missing the required parameter 'searchDirection' when calling getSpaceTopics");
      }

      let pathParams = {
        'spaceId': spaceId
      };
      let queryParams = {
        'searchDirection': searchDirection,
        'timestamp': opts['timestamp'],
        'numberOfResults': opts['numberOfResults']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = [SpaceTopic];
      return this.apiClient.callApi(
        '/spaces/{spaceId}/topics', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSpaces operation.
     * @callback module:api/SpacesApi~getSpacesCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the spaces
     * Get the spaces OauthScopes: READ_SPACE
     * @param {Object} opts Optional parameters
     * @param {Date} [timestamp] a beautiful timestamp
     * @param {Number} [numberOfResults] the number of results you want
     * @param {module:api/SpacesApi~getSpacesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getSpaces(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'timestamp': opts['timestamp'],
        'numberOfResults': opts['numberOfResults']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/spaces', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSpacesByIds operation.
     * @callback module:api/SpacesApi~getSpacesByIdsCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the spaces by their ids
     * Get the spaces by their ids OauthScopes: READ_SPACE
     * @param {Array.<String>} ids an array of ids
     * @param {module:api/SpacesApi~getSpacesByIdsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    getSpacesByIds(ids, callback) {
      let postBody = null;
      // verify the required parameter 'ids' is set
      if (ids === undefined || ids === null) {
        throw new Error("Missing the required parameter 'ids' when calling getSpacesByIds");
      }

      let pathParams = {
      };
      let queryParams = {
        'ids': this.apiClient.buildCollectionParam(ids, 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/spaces/ids', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the grantSpaceAcces operation.
     * @callback module:api/SpacesApi~grantSpaceAccesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * grant access for a space
     * grant access for a space OauthScopes: WRITE_SPACE, MANAGE_SPACE
     * @param {String} spaceId Id of the space
     * @param {String} participantId Id of the participant
     * @param {module:api/SpacesApi~grantSpaceAccesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    grantSpaceAcces(spaceId, participantId, callback) {
      let postBody = null;
      // verify the required parameter 'spaceId' is set
      if (spaceId === undefined || spaceId === null) {
        throw new Error("Missing the required parameter 'spaceId' when calling grantSpaceAcces");
      }
      // verify the required parameter 'participantId' is set
      if (participantId === undefined || participantId === null) {
        throw new Error("Missing the required parameter 'participantId' when calling grantSpaceAcces");
      }

      let pathParams = {
        'spaceId': spaceId,
        'participantId': participantId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/spaces/{spaceId}/participant/{participantId}/grant', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the joinSpace operation.
     * @callback module:api/SpacesApi~joinSpaceCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Join a space
     * Join a space OauthScopes: WRITE_SPACE
     * @param {String} id The id of the space
     * @param {module:api/SpacesApi~joinSpaceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    joinSpace(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling joinSpace");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/spaces/{id}/join', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the leaveSpace operation.
     * @callback module:api/SpacesApi~leaveSpaceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Leave a space
     * Leave a space OauthScopes: WRITE_SPACE
     * @param {String} id The id of the space
     * @param {module:api/SpacesApi~leaveSpaceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    leaveSpace(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling leaveSpace");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/spaces/{id}/leave', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the likeSpaceItem operation.
     * @callback module:api/SpacesApi~likeSpaceItemCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Like a space item
     * Like a space item OauthScopes: WRITE_SPACE, UPDATE_SPACE_CONTENT
     * @param {String} itemId The id of the item you want to like
     * @param {module:api/SpacesApi~likeSpaceItemCallback} callback The callback function, accepting three arguments: error, data, response
     */
    likeSpaceItem(itemId, callback) {
      let postBody = null;
      // verify the required parameter 'itemId' is set
      if (itemId === undefined || itemId === null) {
        throw new Error("Missing the required parameter 'itemId' when calling likeSpaceItem");
      }

      let pathParams = {
        'itemId': itemId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/spaces/like/{itemId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pinTopic operation.
     * @callback module:api/SpacesApi~pinTopicCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Pin a topic
     * Pin a topic OauthScopes: WRITE_SPACE, MANAGE_SPACE
     * @param {String} topicId The id of the topic
     * @param {Number} position The position to pin to
     * @param {module:api/SpacesApi~pinTopicCallback} callback The callback function, accepting three arguments: error, data, response
     */
    pinTopic(topicId, position, callback) {
      let postBody = null;
      // verify the required parameter 'topicId' is set
      if (topicId === undefined || topicId === null) {
        throw new Error("Missing the required parameter 'topicId' when calling pinTopic");
      }
      // verify the required parameter 'position' is set
      if (position === undefined || position === null) {
        throw new Error("Missing the required parameter 'position' when calling pinTopic");
      }

      let pathParams = {
        'topicId': topicId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'position': position
      };

      let authNames = ['oauth'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/spaces/{topicId}/pin', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the requestSpaceAcces operation.
     * @callback module:api/SpacesApi~requestSpaceAccesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * request access for a space
     * request access for a space OauthScopes: READ_SPACE
     * @param {String} spaceId Id of the space
     * @param {Object} opts Optional parameters
     * @param {String} [reason] Reason why the Access has been requested
     * @param {module:api/SpacesApi~requestSpaceAccesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    requestSpaceAcces(spaceId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'spaceId' is set
      if (spaceId === undefined || spaceId === null) {
        throw new Error("Missing the required parameter 'spaceId' when calling requestSpaceAcces");
      }

      let pathParams = {
        'spaceId': spaceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'reason': opts['reason']
      };

      let authNames = ['oauth'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/spaces/{spaceId}/participant/request', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the searchParticipantsToAdd operation.
     * @callback module:api/SpacesApi~searchParticipantsToAddCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/AddParticipantsSearchResult>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Finds participants to add to add to a space 
     * Finds participants to add to a space  OauthScopes: WRITE_SPACE, MANAGE_SPACE, ORGANIZE_SPACE
     * @param {String} id The id of the space
     * @param {String} query The query 
     * @param {module:api/SpacesApi~searchParticipantsToAddCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/AddParticipantsSearchResult>}
     */
    searchParticipantsToAdd(id, query, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling searchParticipantsToAdd");
      }
      // verify the required parameter 'query' is set
      if (query === undefined || query === null) {
        throw new Error("Missing the required parameter 'query' when calling searchParticipantsToAdd");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'query': query
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = [AddParticipantsSearchResult];
      return this.apiClient.callApi(
        '/spaces/{id}/searchParticipantsToAdd', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the searchSpaceParticipants operation.
     * @callback module:api/SpacesApi~searchSpaceParticipantsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ParticipantsSearchResultLarge>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the participants of a space
     * Get the participants of a space OauthScopes: READ_SPACE
     * @param {String} id The id of the space.
     * @param {String} query The query to search with. If searchpointer/hasMotre is returned, refine query.
     * @param {module:api/SpacesApi~searchSpaceParticipantsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ParticipantsSearchResultLarge>}
     */
    searchSpaceParticipants(id, query, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling searchSpaceParticipants");
      }
      // verify the required parameter 'query' is set
      if (query === undefined || query === null) {
        throw new Error("Missing the required parameter 'query' when calling searchSpaceParticipants");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'query': query
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = [ParticipantsSearchResultLarge];
      return this.apiClient.callApi(
        '/spaces/{id}/searchSpaceParticipants', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the startBasicSpacesSearch operation.
     * @callback module:api/SpacesApi~startBasicSpacesSearchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BasicSearchResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * starts a basic search in spaces
     * starts a basic search in spaces OauthScopes: READ_SPACE
     * @param {module:model/String} scope the scope of the search
     * @param {String} searchTerm the term to search for
     * @param {Object} opts Optional parameters
     * @param {Date} [startTime] the starttime
     * @param {Date} [endTime] the end time
     * @param {Array.<String>} [prioritySpaces] list of prioritized spaces
     * @param {module:api/SpacesApi~startBasicSpacesSearchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BasicSearchResult}
     */
    startBasicSpacesSearch(scope, searchTerm, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'scope' is set
      if (scope === undefined || scope === null) {
        throw new Error("Missing the required parameter 'scope' when calling startBasicSpacesSearch");
      }
      // verify the required parameter 'searchTerm' is set
      if (searchTerm === undefined || searchTerm === null) {
        throw new Error("Missing the required parameter 'searchTerm' when calling startBasicSpacesSearch");
      }

      let pathParams = {
      };
      let queryParams = {
        'scope': scope,
        'searchTerm': searchTerm,
        'startTime': opts['startTime'],
        'endTime': opts['endTime'],
        'prioritySpaces': this.apiClient.buildCollectionParam(opts['prioritySpaces'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = BasicSearchResult;
      return this.apiClient.callApi(
        '/spaces/search/startBasic', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the startDetailedSpaceSearch operation.
     * @callback module:api/SpacesApi~startDetailedSpaceSearchCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/SpaceSearchResultDetailedBack>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * starts a detailed search in a space
     * starts a detailed search in a space OauthScopes: READ_SPACE
     * @param {module:model/String} scope the scope of the search
     * @param {String} searchTerm the term to search for
     * @param {String} spaceId missing documentation
     * @param {Object} opts Optional parameters
     * @param {Date} [startTime] the starttime
     * @param {Date} [endTime] the end time
     * @param {String} [searchId] missing documentation
     * @param {module:api/SpacesApi~startDetailedSpaceSearchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/SpaceSearchResultDetailedBack>}
     */
    startDetailedSpaceSearch(scope, searchTerm, spaceId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'scope' is set
      if (scope === undefined || scope === null) {
        throw new Error("Missing the required parameter 'scope' when calling startDetailedSpaceSearch");
      }
      // verify the required parameter 'searchTerm' is set
      if (searchTerm === undefined || searchTerm === null) {
        throw new Error("Missing the required parameter 'searchTerm' when calling startDetailedSpaceSearch");
      }
      // verify the required parameter 'spaceId' is set
      if (spaceId === undefined || spaceId === null) {
        throw new Error("Missing the required parameter 'spaceId' when calling startDetailedSpaceSearch");
      }

      let pathParams = {
      };
      let queryParams = {
        'scope': scope,
        'searchTerm': searchTerm,
        'startTime': opts['startTime'],
        'endTime': opts['endTime'],
        'spaceId': spaceId,
        'searchId': opts['searchId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = [SpaceSearchResultDetailedBack];
      return this.apiClient.callApi(
        '/spaces/search/startDetailed', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the unassignLabels operation.
     * @callback module:api/SpacesApi~unassignLabelsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/LabelIds>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Unassign labels
     * Unassign labels from a space OauthScopes: WRITE_SPACE, ORGANIZE_SPACE
     * @param {String} id The id of the space.
     * @param {Array.<String>} labelIds missing documentation
     * @param {module:api/SpacesApi~unassignLabelsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/LabelIds>}
     */
    unassignLabels(id, labelIds, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling unassignLabels");
      }
      // verify the required parameter 'labelIds' is set
      if (labelIds === undefined || labelIds === null) {
        throw new Error("Missing the required parameter 'labelIds' when calling unassignLabels");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'labelIds': this.apiClient.buildCollectionParam(labelIds, 'csv')
      };

      let authNames = ['oauth'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'application/xml'];
      let returnType = [LabelIds];
      return this.apiClient.callApi(
        '/spaces/{id}/labels/unassign', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the unflagSpaceItem operation.
     * @callback module:api/SpacesApi~unflagSpaceItemCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Unflag a space item
     * Unflag a space item OauthScopes: WRITE_SPACE, UPDATE_SPACE_CONTENT
     * @param {String} itemId the id of the item you want to unflag
     * @param {module:api/SpacesApi~unflagSpaceItemCallback} callback The callback function, accepting three arguments: error, data, response
     */
    unflagSpaceItem(itemId, callback) {
      let postBody = null;
      // verify the required parameter 'itemId' is set
      if (itemId === undefined || itemId === null) {
        throw new Error("Missing the required parameter 'itemId' when calling unflagSpaceItem");
      }

      let pathParams = {
        'itemId': itemId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/spaces/unflag/{itemId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the unlikeSpaceItem operation.
     * @callback module:api/SpacesApi~unlikeSpaceItemCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Unlike a space item
     * Unlike a space item OauthScopes: WRITE_SPACE, UPDATE_SPACE_CONTENT
     * @param {String} itemId The id of the item you want to unlike
     * @param {module:api/SpacesApi~unlikeSpaceItemCallback} callback The callback function, accepting three arguments: error, data, response
     */
    unlikeSpaceItem(itemId, callback) {
      let postBody = null;
      // verify the required parameter 'itemId' is set
      if (itemId === undefined || itemId === null) {
        throw new Error("Missing the required parameter 'itemId' when calling unlikeSpaceItem");
      }

      let pathParams = {
        'itemId': itemId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/spaces/unlike/{itemId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the unpinTopic operation.
     * @callback module:api/SpacesApi~unpinTopicCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Unpin a topic
     * Unpin a topic OauthScopes: WRITE_SPACE, MANAGE_SPACE
     * @param {String} topicId The id of the topic to unpin
     * @param {module:api/SpacesApi~unpinTopicCallback} callback The callback function, accepting three arguments: error, data, response
     */
    unpinTopic(topicId, callback) {
      let postBody = null;
      // verify the required parameter 'topicId' is set
      if (topicId === undefined || topicId === null) {
        throw new Error("Missing the required parameter 'topicId' when calling unpinTopic");
      }

      let pathParams = {
        'topicId': topicId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/spaces/{topicId}/unpin', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateParticipantInSpace operation.
     * @callback module:api/SpacesApi~updateParticipantInSpaceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update participant
     * Update participant in space OauthScopes: WRITE_SPACE, MANAGE_SPACE, ORGANIZE_SPACE
     * @param {String} spaceId Id of the space
     * @param {module:model/String} role updated role of participant
     * @param {String} userId The id of the participant to update
     * @param {module:api/SpacesApi~updateParticipantInSpaceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateParticipantInSpace(spaceId, role, userId, callback) {
      let postBody = null;
      // verify the required parameter 'spaceId' is set
      if (spaceId === undefined || spaceId === null) {
        throw new Error("Missing the required parameter 'spaceId' when calling updateParticipantInSpace");
      }
      // verify the required parameter 'role' is set
      if (role === undefined || role === null) {
        throw new Error("Missing the required parameter 'role' when calling updateParticipantInSpace");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling updateParticipantInSpace");
      }

      let pathParams = {
        'spaceId': spaceId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'role': role,
        'userId': userId
      };

      let authNames = ['oauth'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/spaces/{spaceId}/participant', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateReadTimestamp operation.
     * @callback module:api/SpacesApi~updateReadTimestampCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update read timestamp
     * Update read timestamp OauthScopes: READ_SPACE, WRITE_SPACE
     * @param {String} id Id of a space
     * @param {Date} timestamp The new timestamp
     * @param {module:api/SpacesApi~updateReadTimestampCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateReadTimestamp(id, timestamp, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateReadTimestamp");
      }
      // verify the required parameter 'timestamp' is set
      if (timestamp === undefined || timestamp === null) {
        throw new Error("Missing the required parameter 'timestamp' when calling updateReadTimestamp");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'timestamp': timestamp
      };

      let authNames = ['oauth'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/spaces/{id}/updateTimestamp', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateSpace operation.
     * @callback module:api/SpacesApi~updateSpaceCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a space
     * Update a space OauthScopes: WRITE_SPACE, UPDATE_SPACE_CONTENT
     * @param {String} id id of the space
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [accessModeType = 'NO_CHANGE')] Access mode
     * @param {String} [description] description of the space
     * @param {String} [largePictureBase64] large picture
     * @param {String} [name] name of the space
     * @param {String} [ownerId] ownerid of the space
     * @param {module:model/String} [role = 'NO_CHANGE')] role
     * @param {String} [smallPictureBase64] small picture
     * @param {module:model/String} [status = 'ENABLED')] status
     * @param {Array.<String>} [tags] tags of the space
     * @param {module:model/String} [type = 'NO_CHANGE')] type
     * @param {module:api/SpacesApi~updateSpaceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    updateSpace(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updateSpace");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'accessModeType': opts['accessModeType'],
        'description': opts['description'],
        'largePictureBase64': opts['largePictureBase64'],
        'name': opts['name'],
        'ownerId': opts['ownerId'],
        'role': opts['role'],
        'smallPictureBase64': opts['smallPictureBase64'],
        'status': opts['status'],
        'tags': this.apiClient.buildCollectionParam(opts['tags'], 'csv'),
        'type': opts['type']
      };

      let authNames = ['oauth'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'application/xml'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/spaces/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateSpaceReply operation.
     * @callback module:api/SpacesApi~updateSpaceReplyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SpaceReply} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a space reply
     * Updates a space reply OauthScopes: WRITE_SPACE, UPDATE_SPACE_CONTENT
     * @param {String} spaceId ID of the space
     * @param {String} topicId ID of the topic
     * @param {String} replyId id of the reply
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [attachments] the attached files
     * @param {Boolean} [complex] complex or not
     * @param {String} [content] the content of the reply
     * @param {String} [formMetaData] formMetaData of the reply
     * @param {Array.<String>} [mentionedUsers] the mentioned users in the reply
     * @param {module:api/SpacesApi~updateSpaceReplyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SpaceReply}
     */
    updateSpaceReply(spaceId, topicId, replyId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'spaceId' is set
      if (spaceId === undefined || spaceId === null) {
        throw new Error("Missing the required parameter 'spaceId' when calling updateSpaceReply");
      }
      // verify the required parameter 'topicId' is set
      if (topicId === undefined || topicId === null) {
        throw new Error("Missing the required parameter 'topicId' when calling updateSpaceReply");
      }
      // verify the required parameter 'replyId' is set
      if (replyId === undefined || replyId === null) {
        throw new Error("Missing the required parameter 'replyId' when calling updateSpaceReply");
      }

      let pathParams = {
        'spaceId': spaceId,
        'topicId': topicId,
        'replyId': replyId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'attachments': this.apiClient.buildCollectionParam(opts['attachments'], 'csv'),
        'complex': opts['complex'],
        'content': opts['content'],
        'formMetaData': opts['formMetaData'],
        'mentionedUsers': this.apiClient.buildCollectionParam(opts['mentionedUsers'], 'csv')
      };

      let authNames = ['oauth'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'application/xml'];
      let returnType = SpaceReply;
      return this.apiClient.callApi(
        '/spaces/{spaceId}/topic/{topicId}/reply/{replyId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateSpaceTopic operation.
     * @callback module:api/SpacesApi~updateSpaceTopicCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SpaceTopic} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a topic
     * Updates a topic OauthScopes: WRITE_SPACE, UPDATE_SPACE_CONTENT
     * @param {String} spaceId ID of the space
     * @param {String} topicId Id of the topic to update
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [attachments] the attached files
     * @param {Boolean} [complex] complex or not
     * @param {String} [content] content of the topic
     * @param {Array.<String>} [contentTags] the content tags
     * @param {String} [formMetaData] formMetaData to update
     * @param {Array.<String>} [mentionedUsers] the updated mentioned users
     * @param {String} [subject] the subject of the topic
     * @param {Array.<String>} [tags] the tags
     * @param {module:api/SpacesApi~updateSpaceTopicCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SpaceTopic}
     */
    updateSpaceTopic(spaceId, topicId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'spaceId' is set
      if (spaceId === undefined || spaceId === null) {
        throw new Error("Missing the required parameter 'spaceId' when calling updateSpaceTopic");
      }
      // verify the required parameter 'topicId' is set
      if (topicId === undefined || topicId === null) {
        throw new Error("Missing the required parameter 'topicId' when calling updateSpaceTopic");
      }

      let pathParams = {
        'spaceId': spaceId,
        'topicId': topicId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'attachments': this.apiClient.buildCollectionParam(opts['attachments'], 'csv'),
        'complex': opts['complex'],
        'content': opts['content'],
        'contentTags': this.apiClient.buildCollectionParam(opts['contentTags'], 'csv'),
        'formMetaData': opts['formMetaData'],
        'mentionedUsers': this.apiClient.buildCollectionParam(opts['mentionedUsers'], 'csv'),
        'subject': opts['subject'],
        'tags': this.apiClient.buildCollectionParam(opts['tags'], 'csv')
      };

      let authNames = ['oauth'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'application/xml'];
      let returnType = SpaceTopic;
      return this.apiClient.callApi(
        '/spaces/{spaceId}/topic/{topicId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateTopicTags operation.
     * @callback module:api/SpacesApi~updateTopicTagsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SpaceTopic} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update tags
     * Update the tags of a topic   OauthScopes: WRITE_SPACE, UPDATE_SPACE_CONTENT
     * @param {String} topicId The id of the topic
     * @param {Array.<String>} tags The tags to update
     * @param {module:api/SpacesApi~updateTopicTagsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SpaceTopic}
     */
    updateTopicTags(topicId, tags, callback) {
      let postBody = null;
      // verify the required parameter 'topicId' is set
      if (topicId === undefined || topicId === null) {
        throw new Error("Missing the required parameter 'topicId' when calling updateTopicTags");
      }
      // verify the required parameter 'tags' is set
      if (tags === undefined || tags === null) {
        throw new Error("Missing the required parameter 'tags' when calling updateTopicTags");
      }

      let pathParams = {
        'topicId': topicId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'tags': this.apiClient.buildCollectionParam(tags, 'csv')
      };

      let authNames = ['oauth'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'application/xml'];
      let returnType = SpaceTopic;
      return this.apiClient.callApi(
        '/spaces/topic/{topicId}/updateTags', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v2GetTopicWithReplies operation.
     * @callback module:api/SpacesApi~v2GetTopicWithRepliesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SpaceTopicWithReplies} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets space replies and a topic
     * Gets a number of Space replies with a matching topic OauthScopes: READ_SPACE
     * @param {String} spaceId Id of the topic
     * @param {String} topicId ID of the topic
     * @param {Object} opts Optional parameters
     * @param {Number} [numberOfReplies = 25)] The number of replies
     * @param {module:api/SpacesApi~v2GetTopicWithRepliesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SpaceTopicWithReplies}
     */
    v2GetTopicWithReplies(spaceId, topicId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'spaceId' is set
      if (spaceId === undefined || spaceId === null) {
        throw new Error("Missing the required parameter 'spaceId' when calling v2GetTopicWithReplies");
      }
      // verify the required parameter 'topicId' is set
      if (topicId === undefined || topicId === null) {
        throw new Error("Missing the required parameter 'topicId' when calling v2GetTopicWithReplies");
      }

      let pathParams = {
        'spaceId': spaceId,
        'topicId': topicId
      };
      let queryParams = {
        'numberOfReplies': opts['numberOfReplies']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = SpaceTopicWithReplies;
      return this.apiClient.callApi(
        '/spaces/{spaceId}/topic/{topicId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v2RemoveParticipantsFromSpace operation.
     * @callback module:api/SpacesApi~v2RemoveParticipantsFromSpaceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes participants from a space
     * removes Participants from a space OauthScopes: WRITE_SPACE, MANAGE_SPACE, ORGANIZE_SPACE
     * @param {String} id The id of the space
     * @param {Array.<String>} userIds The ids of the participants to remove 
     * @param {module:api/SpacesApi~v2RemoveParticipantsFromSpaceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    v2RemoveParticipantsFromSpace(id, userIds, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling v2RemoveParticipantsFromSpace");
      }
      // verify the required parameter 'userIds' is set
      if (userIds === undefined || userIds === null) {
        throw new Error("Missing the required parameter 'userIds' when calling v2RemoveParticipantsFromSpace");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'userIds': this.apiClient.buildCollectionParam(userIds, 'csv')
      };

      let authNames = ['oauth'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/spaces/{id}/participant/remove', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v2UpdateWelcomeBoxContent operation.
     * @callback module:api/SpacesApi~v2UpdateWelcomeBoxContentCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update content of welcome box
     * Update content of the welcome box of a space OauthScopes: MANAGE_SPACE, WRITE_SPACE
     * @param {String} spaceId Id of the space
     * @param {String} content The new content
     * @param {Object} opts Optional parameters
     * @param {Boolean} [displayWelcomeBox = false)] True, false, default:false
     * @param {module:api/SpacesApi~v2UpdateWelcomeBoxContentCallback} callback The callback function, accepting three arguments: error, data, response
     */
    v2UpdateWelcomeBoxContent(spaceId, content, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'spaceId' is set
      if (spaceId === undefined || spaceId === null) {
        throw new Error("Missing the required parameter 'spaceId' when calling v2UpdateWelcomeBoxContent");
      }
      // verify the required parameter 'content' is set
      if (content === undefined || content === null) {
        throw new Error("Missing the required parameter 'content' when calling v2UpdateWelcomeBoxContent");
      }

      let pathParams = {
        'spaceId': spaceId,
        'content': content
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'displayWelcomeBox': opts['displayWelcomeBox']
      };

      let authNames = ['oauth'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/spaces/{spaceId}/welcomebox/{content}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
