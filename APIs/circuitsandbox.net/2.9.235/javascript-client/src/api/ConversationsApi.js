/**
 * REST API Version 2
 * Circuit REST API to interact with the Circuit system.  [Learn more about the Circuit Development Community](https://www.circuit.com/web/developers/home)
 *
 * The version of the OpenAPI document: 2.9.235
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Conversation from '../model/Conversation';
import ConversationDetails from '../model/ConversationDetails';
import ConversationItem from '../model/ConversationItem';
import ConversationParticipantsList from '../model/ConversationParticipantsList';
import ConversationSearchResult from '../model/ConversationSearchResult';
import ConversationsPage from '../model/ConversationsPage';
import Label from '../model/Label';
import ModelString from '../model/ModelString';
import PinnedTopic from '../model/PinnedTopic';
import User from '../model/User';

/**
* Conversations service.
* @module api/ConversationsApi
* @version 2.9.235
*/
export default class ConversationsApi {

    /**
    * Constructs a new ConversationsApi. 
    * @alias module:api/ConversationsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addFavorite operation.
     * @callback module:api/ConversationsApi~addFavoriteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds a conversation to the favorites
     * Adds a conversation to the favorites. Favorites can be displayed in a separate side tab inside of the Circuit client to have a better overview of important conversations. OauthScopes: WRITE_CONVERSATIONS
     * @param {String} convId The ID of the conversation which will be marked as favorite
     * @param {module:api/ConversationsApi~addFavoriteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    addFavorite(convId, callback) {
      let postBody = null;
      // verify the required parameter 'convId' is set
      if (convId === undefined || convId === null) {
        throw new Error("Missing the required parameter 'convId' when calling addFavorite");
      }

      let pathParams = {
        'convId': convId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/conversations/{convId}/favorite', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addLabel operation.
     * @callback module:api/ConversationsApi~addLabelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Label} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a user label
     * Add a label to the list of user labels OauthScopes: WRITE_USER_PROFILE, ORGANIZE_CONVERSATIONS
     * @param {String} label The label value to add
     * @param {module:api/ConversationsApi~addLabelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Label}
     */
    addLabel(label, callback) {
      let postBody = null;
      // verify the required parameter 'label' is set
      if (label === undefined || label === null) {
        throw new Error("Missing the required parameter 'label' when calling addLabel");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'label': label
      };

      let authNames = ['oauth'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'application/xml'];
      let returnType = Label;
      return this.apiClient.callApi(
        '/users/labels', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addModerators operation.
     * @callback module:api/ConversationsApi~addModeratorsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add moderators
     * Adds a list of moderators to a conversation OauthScopes: WRITE_CONVERSATIONS, MANAGE_CONVERSATIONS
     * @param {String} convId The ID of the conversation to which the moderators are added
     * @param {Array.<String>} moderators The list of moderator ids to add 
     * @param {module:api/ConversationsApi~addModeratorsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    addModerators(convId, moderators, callback) {
      let postBody = null;
      // verify the required parameter 'convId' is set
      if (convId === undefined || convId === null) {
        throw new Error("Missing the required parameter 'convId' when calling addModerators");
      }
      // verify the required parameter 'moderators' is set
      if (moderators === undefined || moderators === null) {
        throw new Error("Missing the required parameter 'moderators' when calling addModerators");
      }

      let pathParams = {
        'convId': convId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'moderators': this.apiClient.buildCollectionParam(moderators, 'csv')
      };

      let authNames = ['oauth'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/conversations/{convId}/moderators', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addParticipantCommunity operation.
     * @callback module:api/ConversationsApi~addParticipantCommunityCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Conversation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds participants to a community
     * Adds one or more participants to the given community. This operation can only be performed by a user who is already a member of the community. OauthScopes: WRITE_CONVERSATIONS, MANAGE_CONVERSATIONS
     * @param {String} convId The ID of the conversation to which the participant has to be added.
     * @param {Array.<String>} participants The IDs or the unique email addresses of the Circuit users that should to be added.
     * @param {module:api/ConversationsApi~addParticipantCommunityCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Conversation}
     */
    addParticipantCommunity(convId, participants, callback) {
      let postBody = null;
      // verify the required parameter 'convId' is set
      if (convId === undefined || convId === null) {
        throw new Error("Missing the required parameter 'convId' when calling addParticipantCommunity");
      }
      // verify the required parameter 'participants' is set
      if (participants === undefined || participants === null) {
        throw new Error("Missing the required parameter 'participants' when calling addParticipantCommunity");
      }

      let pathParams = {
        'convId': convId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'participants': this.apiClient.buildCollectionParam(participants, 'csv')
      };

      let authNames = ['oauth'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'application/xml'];
      let returnType = Conversation;
      return this.apiClient.callApi(
        '/conversations/community/{convId}/participants', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addParticipantGroup operation.
     * @callback module:api/ConversationsApi~addParticipantGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Conversation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds participants to a group conversation
     * Adds one or more participants to the given group conversation. This operation can only be performed by a user who is already a member of the conversation. OauthScopes: WRITE_CONVERSATIONS, MANAGE_CONVERSATIONS
     * @param {String} convId The ID of the conversation to which the participant has to be added.
     * @param {Array.<String>} participants The IDs or the unique email addresses of the Circuit users that should to be added.
     * @param {module:api/ConversationsApi~addParticipantGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Conversation}
     */
    addParticipantGroup(convId, participants, callback) {
      let postBody = null;
      // verify the required parameter 'convId' is set
      if (convId === undefined || convId === null) {
        throw new Error("Missing the required parameter 'convId' when calling addParticipantGroup");
      }
      // verify the required parameter 'participants' is set
      if (participants === undefined || participants === null) {
        throw new Error("Missing the required parameter 'participants' when calling addParticipantGroup");
      }

      let pathParams = {
        'convId': convId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'participants': this.apiClient.buildCollectionParam(participants, 'csv')
      };

      let authNames = ['oauth'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'application/xml'];
      let returnType = Conversation;
      return this.apiClient.callApi(
        '/conversations/group/{convId}/participants', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addTextItem operation.
     * @callback module:api/ConversationsApi~addTextItemCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ConversationItem} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds a message to a conversation
     * Adds a message to the given conversation. This operation can be only performed on behalf of a user who is already a member of the conversation. OauthScopes: WRITE_CONVERSATIONS, CREATE_CONVERSATIONS_CONTENT
     * @param {String} convId The ID of the conversation to which the new item has to be added
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [attachments] A comma separated list of attachment IDs from the file API.
     * @param {String} [content] The actual content of the item, is mandatory unless an attachment is added
     * @param {String} [formMetaData] The form meta data of the new text item
     * @param {String} [subject] The subject (headline) of the new text item
     * @param {module:api/ConversationsApi~addTextItemCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ConversationItem}
     */
    addTextItem(convId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'convId' is set
      if (convId === undefined || convId === null) {
        throw new Error("Missing the required parameter 'convId' when calling addTextItem");
      }

      let pathParams = {
        'convId': convId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'attachments': this.apiClient.buildCollectionParam(opts['attachments'], 'csv'),
        'content': opts['content'],
        'formMetaData': opts['formMetaData'],
        'subject': opts['subject']
      };

      let authNames = ['oauth'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'application/xml'];
      let returnType = ConversationItem;
      return this.apiClient.callApi(
        '/conversations/{convId}/messages', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addTextItemWithParent operation.
     * @callback module:api/ConversationsApi~addTextItemWithParentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ConversationItem} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds a message to an item
     * Adds a message to the existing item. The added message will be a child item of the message with the given itemId. OauthScopes: WRITE_CONVERSATIONS
     * @param {String} convId The ID of the conversation to which the new item has to be added
     * @param {String} itemId The ID of the item to which the new one has to be added as child
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [attachments] A comma separated list of attachment IDs from the file API.
     * @param {String} [content] The actual content of the item
     * @param {String} [formMetaData] The form meta data of the new text item
     * @param {String} [subject] The subject (headline) of the new text item
     * @param {module:api/ConversationsApi~addTextItemWithParentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ConversationItem}
     */
    addTextItemWithParent(convId, itemId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'convId' is set
      if (convId === undefined || convId === null) {
        throw new Error("Missing the required parameter 'convId' when calling addTextItemWithParent");
      }
      // verify the required parameter 'itemId' is set
      if (itemId === undefined || itemId === null) {
        throw new Error("Missing the required parameter 'itemId' when calling addTextItemWithParent");
      }

      let pathParams = {
        'convId': convId,
        'itemId': itemId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'attachments': this.apiClient.buildCollectionParam(opts['attachments'], 'csv'),
        'content': opts['content'],
        'formMetaData': opts['formMetaData'],
        'subject': opts['subject']
      };

      let authNames = ['oauth'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'application/xml'];
      let returnType = ConversationItem;
      return this.apiClient.callApi(
        '/conversations/{convId}/messages/{itemId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the archiveConversation operation.
     * @callback module:api/ConversationsApi~archiveConversationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Archives conversation
     * Archives a conversation by muting it OauthScopes: WRITE_CONVERSATIONS
     * @param {String} convId The ID of the conversation which will be archived
     * @param {module:api/ConversationsApi~archiveConversationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    archiveConversation(convId, callback) {
      let postBody = null;
      // verify the required parameter 'convId' is set
      if (convId === undefined || convId === null) {
        throw new Error("Missing the required parameter 'convId' when calling archiveConversation");
      }

      let pathParams = {
        'convId': convId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/conversations/{convId}/archive', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the assignLabel operation.
     * @callback module:api/ConversationsApi~assignLabelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Label} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds a label to a conversation
     * Adds a label to a conversation, you can search and organize your conversations based on these labels OauthScopes: WRITE_CONVERSATIONS, ORGANIZE_CONVERSATIONS
     * @param {String} convId The ID of the conversation to which the label is added
     * @param {String} label The actual label 
     * @param {module:api/ConversationsApi~assignLabelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Label}
     */
    assignLabel(convId, label, callback) {
      let postBody = null;
      // verify the required parameter 'convId' is set
      if (convId === undefined || convId === null) {
        throw new Error("Missing the required parameter 'convId' when calling assignLabel");
      }
      // verify the required parameter 'label' is set
      if (label === undefined || label === null) {
        throw new Error("Missing the required parameter 'label' when calling assignLabel");
      }

      let pathParams = {
        'convId': convId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'label': label
      };

      let authNames = ['oauth'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'application/xml'];
      let returnType = Label;
      return this.apiClient.callApi(
        '/conversations/{convId}/label', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createCommunityConversation operation.
     * @callback module:api/ConversationsApi~createCommunityConversationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Conversation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a community conversation
     * Creates a community. Communities are open conversations that anyone in a Circuit domain (tenant) can join without having to be added by another user. OauthScopes: WRITE_CONVERSATIONS, MANAGE_CONVERSATIONS
     * @param {String} topic An optional topic of the conversation. If not set the Circuit client will render the names of the participants as topic of the conversation (the first 4 names will be used)
     * @param {Object} opts Optional parameters
     * @param {String} [description] An optional description for the community conversation
     * @param {Array.<String>} [participants] list of participants that will be part of this conversation, specified by the Circuit user ID or the unique email address. At least one participant needs to be added
     * @param {module:api/ConversationsApi~createCommunityConversationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Conversation}
     */
    createCommunityConversation(topic, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'topic' is set
      if (topic === undefined || topic === null) {
        throw new Error("Missing the required parameter 'topic' when calling createCommunityConversation");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'description': opts['description'],
        'participants': this.apiClient.buildCollectionParam(opts['participants'], 'csv'),
        'topic': topic
      };

      let authNames = ['oauth'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'application/xml'];
      let returnType = Conversation;
      return this.apiClient.callApi(
        '/conversations/community', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createDirectConversation operation.
     * @callback module:api/ConversationsApi~createDirectConversationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Conversation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a 1-to-1 conversation
     * Creates a 1-to-1 conversation between the authenticated user and the user with the provided userId. In case there is already an existing 1-to-1 conversation between these users, the endpoint returns the existing conversation. OauthScopes: WRITE_CONVERSATIONS, MANAGE_CONVERSATIONS
     * @param {String} participant The participant that will be part of this conversation together with the creator, specified by the Circuit user ID or the unique email address
     * @param {module:api/ConversationsApi~createDirectConversationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Conversation}
     */
    createDirectConversation(participant, callback) {
      let postBody = null;
      // verify the required parameter 'participant' is set
      if (participant === undefined || participant === null) {
        throw new Error("Missing the required parameter 'participant' when calling createDirectConversation");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'participant': participant
      };

      let authNames = ['oauth'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'application/xml'];
      let returnType = Conversation;
      return this.apiClient.callApi(
        '/conversations/direct', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createGroupConversation operation.
     * @callback module:api/ConversationsApi~createGroupConversationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Conversation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a group conversation
     * Creates a group conversation between three or more users. The authenticated user is directly added to this conversation. OauthScopes: WRITE_CONVERSATIONS, MANAGE_CONVERSATIONS
     * @param {Array.<String>} participants A list of participants that will be part of this conversation, specified by the Circuit user ID or the unique email address. At least one participant needs to be added
     * @param {Object} opts Optional parameters
     * @param {String} [topic] An optional topic of the conversation. If not set the Circuit client will render the names of the participants as topic of the conversation (the first 4 names will be used)
     * @param {module:api/ConversationsApi~createGroupConversationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Conversation}
     */
    createGroupConversation(participants, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'participants' is set
      if (participants === undefined || participants === null) {
        throw new Error("Missing the required parameter 'participants' when calling createGroupConversation");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'participants': this.apiClient.buildCollectionParam(participants, 'csv'),
        'topic': opts['topic']
      };

      let authNames = ['oauth'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'application/xml'];
      let returnType = Conversation;
      return this.apiClient.callApi(
        '/conversations/group', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteFavorite operation.
     * @callback module:api/ConversationsApi~deleteFavoriteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes a conversation from favorites
     * Removes a conversation from favorites. Favorites can be displayed in a separate side tab inside of the Circuit client to have a better overview of important conversations. OauthScopes: WRITE_CONVERSATIONS
     * @param {String} convId The ID of the conversation which will be unmarked as favorite
     * @param {module:api/ConversationsApi~deleteFavoriteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteFavorite(convId, callback) {
      let postBody = null;
      // verify the required parameter 'convId' is set
      if (convId === undefined || convId === null) {
        throw new Error("Missing the required parameter 'convId' when calling deleteFavorite");
      }

      let pathParams = {
        'convId': convId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/conversations/{convId}/favorite', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteTextItem operation.
     * @callback module:api/ConversationsApi~deleteTextItemCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ConversationItem} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a message from a conversation
     * Marks a message in the given conversation as deleted. Deleted messages are still part of the conversation, but their content is no more visible. This operation can only be performed on behalf of the message's creator. OauthScopes: WRITE_CONVERSATIONS, DELETE_CONVERSATIONS_CONTENT
     * @param {String} convId The ID of the conversation to which the item belongs
     * @param {String} itemId The ID of the item that will be deleted
     * @param {module:api/ConversationsApi~deleteTextItemCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ConversationItem}
     */
    deleteTextItem(convId, itemId, callback) {
      let postBody = null;
      // verify the required parameter 'convId' is set
      if (convId === undefined || convId === null) {
        throw new Error("Missing the required parameter 'convId' when calling deleteTextItem");
      }
      // verify the required parameter 'itemId' is set
      if (itemId === undefined || itemId === null) {
        throw new Error("Missing the required parameter 'itemId' when calling deleteTextItem");
      }

      let pathParams = {
        'convId': convId,
        'itemId': itemId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = ConversationItem;
      return this.apiClient.callApi(
        '/conversations/{convId}/messages/{itemId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the flagItem operation.
     * @callback module:api/ConversationsApi~flagItemCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds a flag to a message in a conversation
     * Adds a flag to the given message in the given conversation. OauthScopes: WRITE_CONVERSATIONS, ORGANIZE_CONVERSATIONS
     * @param {String} convId The ID of the conversation to which the item belongs
     * @param {String} itemId The ID of the item that will be flagged
     * @param {Object} opts Optional parameters
     * @param {String} [itemCreationTime] The time when the item was created
     * @param {String} [parentId] The ID of the item's parent
     * @param {module:api/ConversationsApi~flagItemCallback} callback The callback function, accepting three arguments: error, data, response
     */
    flagItem(convId, itemId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'convId' is set
      if (convId === undefined || convId === null) {
        throw new Error("Missing the required parameter 'convId' when calling flagItem");
      }
      // verify the required parameter 'itemId' is set
      if (itemId === undefined || itemId === null) {
        throw new Error("Missing the required parameter 'itemId' when calling flagItem");
      }

      let pathParams = {
        'convId': convId,
        'itemId': itemId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'itemCreationTime': opts['itemCreationTime'],
        'parentId': opts['parentId']
      };

      let authNames = ['oauth'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/conversations/{convId}/messages/{itemId}/flag', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCommunityConversations operation.
     * @callback module:api/ConversationsApi~getCommunityConversationsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Conversation>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of communities
     * Gets a list of communities. This endpoint can be used to explore the communities the authenticated user could join. OauthScopes: READ_CONVERSATIONS
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [sort = 'ALPHABETICALLY')] Defines the type of sorting for the community conversations (default is alphabetical)
     * @param {module:model/String} [order = 'ASCENDING')] Defines the ordering of the conversations (default is ascending)
     * @param {Boolean} [includeOwn = false)] If set to false only conversations are returned where the user is no member of, otherwise all community conversations are returned
     * @param {Number} [startIndex = 0)] The index of the conversation that is the first one that has to be returned. E.g. if a request starts with startIndex 40 and results 20 the conversations 40 to 60 are returned
     * @param {Number} [results = 25)] The maximum number of returned results (default 25). The maximum allowed value is 100.
     * @param {module:api/ConversationsApi~getCommunityConversationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Conversation>}
     */
    getCommunityConversations(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'sort': opts['sort'],
        'order': opts['order'],
        'includeOwn': opts['includeOwn'],
        'startIndex': opts['startIndex'],
        'results': opts['results']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = [Conversation];
      return this.apiClient.callApi(
        '/conversations/community', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getConversationItems operation.
     * @callback module:api/ConversationsApi~getConversationItemsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ConversationItem>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of conversation items
     * Gets a list of conversation items. OauthScopes: READ_CONVERSATIONS
     * @param {String} convId The ID of the conversation to which the items belong
     * @param {Object} opts Optional parameters
     * @param {Date} [modTime] The modification time of the item in UTC format. During the query the items before (default) or after this timestamps are returned. In case no timestamp is specified the current server time in UTC is used, i.e. the last 25 modified items are returned
     * @param {module:model/String} [direction = 'BEFORE')] The direction of the search based on the modification time. Valid values are either BEFORE (default) or AFTER
     * @param {Number} [results = 25)] The maximum number of returned results (default 25). The maximum allowed value is 100.
     * @param {module:api/ConversationsApi~getConversationItemsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ConversationItem>}
     */
    getConversationItems(convId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'convId' is set
      if (convId === undefined || convId === null) {
        throw new Error("Missing the required parameter 'convId' when calling getConversationItems");
      }

      let pathParams = {
        'convId': convId
      };
      let queryParams = {
        'modTime': opts['modTime'],
        'direction': opts['direction'],
        'results': opts['results']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = [ConversationItem];
      return this.apiClient.callApi(
        '/conversations/{convId}/items', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getConversationbyId operation.
     * @callback module:api/ConversationsApi~getConversationbyIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Conversation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a conversation
     * Gets a conversation based on the given ID. OauthScopes: READ_CONVERSATIONS
     * @param {String} convId The ID of the conversation which should be updated
     * @param {module:api/ConversationsApi~getConversationbyIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Conversation}
     */
    getConversationbyId(convId, callback) {
      let postBody = null;
      // verify the required parameter 'convId' is set
      if (convId === undefined || convId === null) {
        throw new Error("Missing the required parameter 'convId' when calling getConversationbyId");
      }

      let pathParams = {
        'convId': convId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = Conversation;
      return this.apiClient.callApi(
        '/conversations/{convId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getConversations operation.
     * @callback module:api/ConversationsApi~getConversationsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Conversation>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of conversations
     * Gets a list of conversations and communities the authenticated user participates in. OauthScopes: READ_CONVERSATIONS
     * @param {Object} opts Optional parameters
     * @param {Date} [modTime] The modification time of the conversation in UTC format. During the query the conversations before (<i>default</i>) or after this timestamp are returned. In case no timestamp is specified the current server time in UTC is used, i.e. the last 25 modified conversations are returned
     * @param {module:model/String} [direction = 'BEFORE')] The direction of the search based on the modification time. Valid values are either BEFORE (default) or AFTER
     * @param {Number} [results = 25)] The maximum number of returned results (default 25). The maximum allowed value is 100.
     * @param {module:api/ConversationsApi~getConversationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Conversation>}
     */
    getConversations(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'modTime': opts['modTime'],
        'direction': opts['direction'],
        'results': opts['results']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = [Conversation];
      return this.apiClient.callApi(
        '/conversations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getConversationsById operation.
     * @callback module:api/ConversationsApi~getConversationsByIdCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Conversation>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets conversations
     * Gets conversation based on the given IDs. OauthScopes: READ_CONVERSATIONS
     * @param {Array.<String>} convIds The array of IDs of the conversations which should be retrieved
     * @param {module:api/ConversationsApi~getConversationsByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Conversation>}
     */
    getConversationsById(convIds, callback) {
      let postBody = null;
      // verify the required parameter 'convIds' is set
      if (convIds === undefined || convIds === null) {
        throw new Error("Missing the required parameter 'convIds' when calling getConversationsById");
      }

      let pathParams = {
      };
      let queryParams = {
        'convIds': this.apiClient.buildCollectionParam(convIds, 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = [Conversation];
      return this.apiClient.callApi(
        '/conversations/byIds', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getConversationsByLabel operation.
     * @callback module:api/ConversationsApi~getConversationsByLabelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ConversationsPage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns conversations with a certain label
     * Returns conversations with matching labels and paginated  OauthScopes: READ_CONVERSATIONS
     * @param {String} labelId Id of the label to look for
     * @param {Object} opts Optional parameters
     * @param {String} [nextPagePointer] Pointer to the next page of conversations if there are any
     * @param {Number} [pageSize = 25)] Numbers of max conversations per page
     * @param {module:api/ConversationsApi~getConversationsByLabelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ConversationsPage}
     */
    getConversationsByLabel(labelId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'labelId' is set
      if (labelId === undefined || labelId === null) {
        throw new Error("Missing the required parameter 'labelId' when calling getConversationsByLabel");
      }

      let pathParams = {
        'labelId': labelId
      };
      let queryParams = {
        'nextPagePointer': opts['nextPagePointer'],
        'pageSize': opts['pageSize']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = ConversationsPage;
      return this.apiClient.callApi(
        '/conversations/label/{labelId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDirectConversation operation.
     * @callback module:api/ConversationsApi~getDirectConversationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Conversation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Checks for a 1-to-1 conversation
     * Checks if a 1-to-1 conversation between the authenticated user and the user with the provided userId exists. OauthScopes: READ_CONVERSATIONS
     * @param {String} participant The participant that will be part of this conversation together with the creator, specified by the Circuit user ID or the unique email address
     * @param {module:api/ConversationsApi~getDirectConversationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Conversation}
     */
    getDirectConversation(participant, callback) {
      let postBody = null;
      // verify the required parameter 'participant' is set
      if (participant === undefined || participant === null) {
        throw new Error("Missing the required parameter 'participant' when calling getDirectConversation");
      }

      let pathParams = {
      };
      let queryParams = {
        'participant': participant
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = Conversation;
      return this.apiClient.callApi(
        '/conversations/direct', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getFavoriteConversations operation.
     * @callback module:api/ConversationsApi~getFavoriteConversationsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ModelString>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets favorite conversations
     * Gets the conversationIds which are marked as favorites. OauthScopes: READ_CONVERSATIONS
     * @param {module:api/ConversationsApi~getFavoriteConversationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ModelString>}
     */
    getFavoriteConversations(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [ModelString];
      return this.apiClient.callApi(
        '/conversations/favorite', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getFlagItem operation.
     * @callback module:api/ConversationsApi~getFlagItemCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ConversationItem>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of the flagged messages of a conversation
     * Gets a list of all the flagged messages in the given conversation. OauthScopes: READ_CONVERSATIONS, ORGANIZE_CONVERSATIONS
     * @param {String} convId The ID of the conversation to which the item belongs
     * @param {module:api/ConversationsApi~getFlagItemCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ConversationItem>}
     */
    getFlagItem(convId, callback) {
      let postBody = null;
      // verify the required parameter 'convId' is set
      if (convId === undefined || convId === null) {
        throw new Error("Missing the required parameter 'convId' when calling getFlagItem");
      }

      let pathParams = {
        'convId': convId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = [ConversationItem];
      return this.apiClient.callApi(
        '/conversations/{convId}/messages/flag', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getFlagItemConv operation.
     * @callback module:api/ConversationsApi~getFlagItemConvCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ConversationItem>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of the flagged messages
     * Gets a list of all the messages the authenticated user has flagged. This endpoint should be used carefully in case where the authenticated user has a lot of flagged messages. OauthScopes: READ_CONVERSATIONS
     * @param {module:api/ConversationsApi~getFlagItemConvCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ConversationItem>}
     */
    getFlagItemConv(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [ConversationItem];
      return this.apiClient.callApi(
        '/conversations/messages/flag', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getJoinDetails operation.
     * @callback module:api/ConversationsApi~getJoinDetailsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ConversationDetails} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the conference details of a conversation
     * Gets the conference details of the given conversation. Conference details include the URL, which is used to join the conference through a web or mobile application, as well as the dial-in phone numbers and conference PIN, which are used to join the conference by phone. OauthScopes: READ_CONVERSATIONS
     * @param {String} convId The ID of the conversation for which the join details should be returned
     * @param {module:api/ConversationsApi~getJoinDetailsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ConversationDetails}
     */
    getJoinDetails(convId, callback) {
      let postBody = null;
      // verify the required parameter 'convId' is set
      if (convId === undefined || convId === null) {
        throw new Error("Missing the required parameter 'convId' when calling getJoinDetails");
      }

      let pathParams = {
        'convId': convId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = ConversationDetails;
      return this.apiClient.callApi(
        '/conversations/{convId}/conversationdetails', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getJoinDetailsMultiple operation.
     * @callback module:api/ConversationsApi~getJoinDetailsMultipleCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ConversationDetails>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the conference details for multiple conversations
     * Gets the conference details of the given conversations. Conference details include the URL, which is used to join the conference through a web or mobile application, as well as the dial-in phone numbers and conference PIN, which are used to join the conference by phone. OauthScopes: READ_CONVERSATIONS
     * @param {Array.<String>} convIds An array of IDs of the conversations for which the join details should be returned
     * @param {module:api/ConversationsApi~getJoinDetailsMultipleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ConversationDetails>}
     */
    getJoinDetailsMultiple(convIds, callback) {
      let postBody = null;
      // verify the required parameter 'convIds' is set
      if (convIds === undefined || convIds === null) {
        throw new Error("Missing the required parameter 'convIds' when calling getJoinDetailsMultiple");
      }

      let pathParams = {
      };
      let queryParams = {
        'convIds': this.apiClient.buildCollectionParam(convIds, 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = [ConversationDetails];
      return this.apiClient.callApi(
        '/conversations/conversationdetails', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getParticipantsByConvId operation.
     * @callback module:api/ConversationsApi~getParticipantsByConvIdCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ConversationParticipantsList>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Performs a list of participants
     * Performs a search for participants. The max number of participants is configurable. If more participants are available a search pointer is returned for consecutive calls. OauthScopes: READ_CONVERSATIONS
     * @param {String} convId The id of the conversation the participants are searched for.
     * @param {Number} pageSize The page size of the hit list
     * @param {Object} opts Optional parameters
     * @param {String} [name] Part of name to filter the results
     * @param {module:model/String} [type = 'REGULAR')] Type of participant to filter the results
     * @param {String} [searchPointer] Pointer for paged output. Add to consecutive request to get next page
     * @param {module:api/ConversationsApi~getParticipantsByConvIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ConversationParticipantsList>}
     */
    getParticipantsByConvId(convId, pageSize, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'convId' is set
      if (convId === undefined || convId === null) {
        throw new Error("Missing the required parameter 'convId' when calling getParticipantsByConvId");
      }
      // verify the required parameter 'pageSize' is set
      if (pageSize === undefined || pageSize === null) {
        throw new Error("Missing the required parameter 'pageSize' when calling getParticipantsByConvId");
      }

      let pathParams = {
        'convId': convId
      };
      let queryParams = {
        'pageSize': pageSize,
        'name': opts['name'],
        'type': opts['type'],
        'searchPointer': opts['searchPointer']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = [ConversationParticipantsList];
      return this.apiClient.callApi(
        '/conversations/{convId}/participants', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPinnedConversations operation.
     * @callback module:api/ConversationsApi~getPinnedConversationsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PinnedTopic>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns pinned topics of a conversation
     * Returns pinned topics of a conversation OauthScopes: READ_CONVERSATIONS
     * @param {String} convId ID of the conversation
     * @param {module:api/ConversationsApi~getPinnedConversationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PinnedTopic>}
     */
    getPinnedConversations(convId, callback) {
      let postBody = null;
      // verify the required parameter 'convId' is set
      if (convId === undefined || convId === null) {
        throw new Error("Missing the required parameter 'convId' when calling getPinnedConversations");
      }

      let pathParams = {
        'convId': convId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = [PinnedTopic];
      return this.apiClient.callApi(
        '/conversations/{convId}/pins', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSingleConversationtem operation.
     * @callback module:api/ConversationsApi~getSingleConversationtemCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ConversationItem} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a text item
     * Returns a text item for a given item id OauthScopes: READ_CONVERSATIONS
     * @param {String} itemId The ID of the item that will be returned
     * @param {module:api/ConversationsApi~getSingleConversationtemCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ConversationItem}
     */
    getSingleConversationtem(itemId, callback) {
      let postBody = null;
      // verify the required parameter 'itemId' is set
      if (itemId === undefined || itemId === null) {
        throw new Error("Missing the required parameter 'itemId' when calling getSingleConversationtem");
      }

      let pathParams = {
        'itemId': itemId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = ConversationItem;
      return this.apiClient.callApi(
        '/conversations/messages/{itemId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the joinCommunityConversation operation.
     * @callback module:api/ConversationsApi~joinCommunityConversationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Conversation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds the authenticated user to a community
     * Adds the authenticated user to the given community (i.e., allows the user to join this community). Contrary to the operation of adding a new participant, this operation can only be performed by a user who is not yet a member of the community. OauthScopes: WRITE_CONVERSATIONS, MANAGE_CONVERSATIONS
     * @param {String} convId The ID of the conversation which the user will join
     * @param {module:api/ConversationsApi~joinCommunityConversationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Conversation}
     */
    joinCommunityConversation(convId, callback) {
      let postBody = null;
      // verify the required parameter 'convId' is set
      if (convId === undefined || convId === null) {
        throw new Error("Missing the required parameter 'convId' when calling joinCommunityConversation");
      }

      let pathParams = {
        'convId': convId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = Conversation;
      return this.apiClient.callApi(
        '/conversations/community/{convId}/join', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the likeItem operation.
     * @callback module:api/ConversationsApi~likeItemCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds a \"like\" to a message
     * Adds a \"like\" to the given message in the given conversation OauthScopes: WRITE_CONVERSATIONS, UPDATE_CONVERSATION_CONTENT
     * @param {String} convId The ID of the conversation to which the item belongs
     * @param {String} itemId The ID of the item that will be liked
     * @param {module:api/ConversationsApi~likeItemCallback} callback The callback function, accepting three arguments: error, data, response
     */
    likeItem(convId, itemId, callback) {
      let postBody = null;
      // verify the required parameter 'convId' is set
      if (convId === undefined || convId === null) {
        throw new Error("Missing the required parameter 'convId' when calling likeItem");
      }
      // verify the required parameter 'itemId' is set
      if (itemId === undefined || itemId === null) {
        throw new Error("Missing the required parameter 'itemId' when calling likeItem");
      }

      let pathParams = {
        'convId': convId,
        'itemId': itemId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/conversations/{convId}/messages/{itemId}/like', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the moderateConversation operation.
     * @callback module:api/ConversationsApi~moderateConversationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set conversation moderated
     * Set a conversation in moderatd mode. Moderators can be added and removed OauthScopes: WRITE_CONVERSATIONS, MODERATE_CONVERSATIONS
     * @param {String} convId The ID of the conversation which will be set to moderated state
     * @param {module:api/ConversationsApi~moderateConversationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    moderateConversation(convId, callback) {
      let postBody = null;
      // verify the required parameter 'convId' is set
      if (convId === undefined || convId === null) {
        throw new Error("Missing the required parameter 'convId' when calling moderateConversation");
      }

      let pathParams = {
        'convId': convId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/conversations/moderate/{convId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the pinAConversation operation.
     * @callback module:api/ConversationsApi~pinAConversationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Conversation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Pins a topic of a conversation
     * Pins a topic of a conversation OauthScopes: READ_CONVERSATIONS
     * @param {String} convId The ID of the conversation
     * @param {String} itemId The ID of the topic
     * @param {module:api/ConversationsApi~pinAConversationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Conversation}
     */
    pinAConversation(convId, itemId, callback) {
      let postBody = null;
      // verify the required parameter 'convId' is set
      if (convId === undefined || convId === null) {
        throw new Error("Missing the required parameter 'convId' when calling pinAConversation");
      }
      // verify the required parameter 'itemId' is set
      if (itemId === undefined || itemId === null) {
        throw new Error("Missing the required parameter 'itemId' when calling pinAConversation");
      }

      let pathParams = {
        'convId': convId,
        'itemId': itemId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = Conversation;
      return this.apiClient.callApi(
        '/conversations/{convId}/pins/{itemId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the removeLabel operation.
     * @callback module:api/ConversationsApi~removeLabelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Label} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove a user label
     * Remove a label from the list of user labels OauthScopes: WRITE_USER_PROFILE, ORGANIZE_CONVERSATIONS
     * @param {String} labelId The label value to remove, either the unique ID or the label value
     * @param {module:api/ConversationsApi~removeLabelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Label}
     */
    removeLabel(labelId, callback) {
      let postBody = null;
      // verify the required parameter 'labelId' is set
      if (labelId === undefined || labelId === null) {
        throw new Error("Missing the required parameter 'labelId' when calling removeLabel");
      }

      let pathParams = {
        'labelId': labelId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = Label;
      return this.apiClient.callApi(
        '/users/labels/{labelId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the removeModerators operation.
     * @callback module:api/ConversationsApi~removeModeratorsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove moderators
     * Removes a list of moderators from a conversation OauthScopes: WRITE_CONVERSATIONS, MODERATE_CONVERSATIONS
     * @param {String} convId The ID of the conversation where the moderators are removed
     * @param {Array.<String>} moderators The list of moderator ids to remove
     * @param {module:api/ConversationsApi~removeModeratorsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    removeModerators(convId, moderators, callback) {
      let postBody = null;
      // verify the required parameter 'convId' is set
      if (convId === undefined || convId === null) {
        throw new Error("Missing the required parameter 'convId' when calling removeModerators");
      }
      // verify the required parameter 'moderators' is set
      if (moderators === undefined || moderators === null) {
        throw new Error("Missing the required parameter 'moderators' when calling removeModerators");
      }

      let pathParams = {
        'convId': convId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'moderators': this.apiClient.buildCollectionParam(moderators, 'csv')
      };

      let authNames = ['oauth'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/conversations/{convId}/moderators', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the removeParticipantCommunity operation.
     * @callback module:api/ConversationsApi~removeParticipantCommunityCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Conversation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes participants from a community
     * Removes one or more participants from the given community. The last participant of a community cannot be removed. This operation can only be performed by a user who is already a member of the community. OauthScopes: WRITE_CONVERSATIONS, MANAGE_CONVERSATIONS
     * @param {String} convId The ID of the conversation from which the participant have to be removed
     * @param {Array.<String>} participants The IDs or the unique email addresses of the Circuit users that have to be removed
     * @param {module:api/ConversationsApi~removeParticipantCommunityCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Conversation}
     */
    removeParticipantCommunity(convId, participants, callback) {
      let postBody = null;
      // verify the required parameter 'convId' is set
      if (convId === undefined || convId === null) {
        throw new Error("Missing the required parameter 'convId' when calling removeParticipantCommunity");
      }
      // verify the required parameter 'participants' is set
      if (participants === undefined || participants === null) {
        throw new Error("Missing the required parameter 'participants' when calling removeParticipantCommunity");
      }

      let pathParams = {
        'convId': convId
      };
      let queryParams = {
        'participants': this.apiClient.buildCollectionParam(participants, 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = Conversation;
      return this.apiClient.callApi(
        '/conversations/community/{convId}/participants', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the removeParticipantGroup operation.
     * @callback module:api/ConversationsApi~removeParticipantGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Conversation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes participants from a group conversation
     * Removes one or more participants from the given group conversation. The last participant of a group conversation cannot be removed. This operation can only be performed on behalf of a user who is already a member of the conversation. OauthScopes: WRITE_CONVERSATIONS, MANAGE_CONVERSATIONS
     * @param {String} convId The ID of the conversation from which the participant have to be removed
     * @param {Array.<String>} participants The IDs or the unique email addresses of the Circuit users that have to be removed
     * @param {module:api/ConversationsApi~removeParticipantGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Conversation}
     */
    removeParticipantGroup(convId, participants, callback) {
      let postBody = null;
      // verify the required parameter 'convId' is set
      if (convId === undefined || convId === null) {
        throw new Error("Missing the required parameter 'convId' when calling removeParticipantGroup");
      }
      // verify the required parameter 'participants' is set
      if (participants === undefined || participants === null) {
        throw new Error("Missing the required parameter 'participants' when calling removeParticipantGroup");
      }

      let pathParams = {
        'convId': convId
      };
      let queryParams = {
        'participants': this.apiClient.buildCollectionParam(participants, 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = Conversation;
      return this.apiClient.callApi(
        '/conversations/group/{convId}/participants', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the resolveInvitationToken operation.
     * @callback module:api/ConversationsApi~resolveInvitationTokenCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Conversation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Resolves an invite token to a conversation
     * Resolves an invite token to a conversation OauthScopes: READ_CONVERSATIONS
     * @param {String} token The invite token to resolve
     * @param {module:api/ConversationsApi~resolveInvitationTokenCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Conversation}
     */
    resolveInvitationToken(token, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling resolveInvitationToken");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = Conversation;
      return this.apiClient.callApi(
        '/conversations/resolveinvitetoken', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the searchConversations operation.
     * @callback module:api/ConversationsApi~searchConversationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ConversationSearchResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Performs a conversation search
     * Performs a search for conversation content. A maximum of 100 conversations is returned. If you hit this limit you should refine the search term. OauthScopes: READ_CONVERSATIONS
     * @param {String} term The search term
     * @param {Object} opts Optional parameters
     * @param {Boolean} [includeItemIds = false)] Optional parameter to specify if a deep or normal search is executed. In a deep search all matching item IDs inside every conversation are returned (up to a maximum of 100). For a normal search only the conversation IDs are returned. Default is a normal search (without item IDs).
     * @param {module:model/String} [scope = 'ALL')] The search scope, FILES||PEOPLE||MEMBERS||MESSAGES||SENTBY||ALL||CONVERSATIONS||LABEL||FILTER
     * @param {module:api/ConversationsApi~searchConversationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ConversationSearchResult}
     */
    searchConversations(term, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'term' is set
      if (term === undefined || term === null) {
        throw new Error("Missing the required parameter 'term' when calling searchConversations");
      }

      let pathParams = {
      };
      let queryParams = {
        'term': term,
        'includeItemIds': opts['includeItemIds'],
        'scope': opts['scope']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = ConversationSearchResult;
      return this.apiClient.callApi(
        '/conversations/search', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the unFlagItem operation.
     * @callback module:api/ConversationsApi~unFlagItemCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes the flag from a message
     * Removes the flag from a given message that is posted to the given conversation. OauthScopes: WRITE_CONVERSATIONS, ORGANIZE_CONVERSATIONS
     * @param {String} convId The ID of the conversation to which the item belongs
     * @param {String} itemId The ID of the item that will be flagged
     * @param {module:api/ConversationsApi~unFlagItemCallback} callback The callback function, accepting three arguments: error, data, response
     */
    unFlagItem(convId, itemId, callback) {
      let postBody = null;
      // verify the required parameter 'convId' is set
      if (convId === undefined || convId === null) {
        throw new Error("Missing the required parameter 'convId' when calling unFlagItem");
      }
      // verify the required parameter 'itemId' is set
      if (itemId === undefined || itemId === null) {
        throw new Error("Missing the required parameter 'itemId' when calling unFlagItem");
      }

      let pathParams = {
        'convId': convId,
        'itemId': itemId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/conversations/{convId}/messages/{itemId}/flag', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the unPinAConversation operation.
     * @callback module:api/ConversationsApi~unPinAConversationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Conversation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Unpins a topic of a conversation
     * Unpins a topic of a conversation OauthScopes: READ_CONVERSATIONS
     * @param {String} convId The ID of the conversation
     * @param {String} itemId The ID of the topic
     * @param {module:api/ConversationsApi~unPinAConversationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Conversation}
     */
    unPinAConversation(convId, itemId, callback) {
      let postBody = null;
      // verify the required parameter 'convId' is set
      if (convId === undefined || convId === null) {
        throw new Error("Missing the required parameter 'convId' when calling unPinAConversation");
      }
      // verify the required parameter 'itemId' is set
      if (itemId === undefined || itemId === null) {
        throw new Error("Missing the required parameter 'itemId' when calling unPinAConversation");
      }

      let pathParams = {
        'convId': convId,
        'itemId': itemId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = Conversation;
      return this.apiClient.callApi(
        '/conversations/{convId}/pins/{itemId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the unassignLabel operation.
     * @callback module:api/ConversationsApi~unassignLabelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Label} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes a label from a conversation
     * Removes a label from a conversation, you can search and organize your conversations based on these labels OauthScopes: WRITE_CONVERSATIONS
     * @param {String} convId The ID of the conversation from which the label is removed
     * @param {String} labelId The actual label 
     * @param {module:api/ConversationsApi~unassignLabelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Label}
     */
    unassignLabel(convId, labelId, callback) {
      let postBody = null;
      // verify the required parameter 'convId' is set
      if (convId === undefined || convId === null) {
        throw new Error("Missing the required parameter 'convId' when calling unassignLabel");
      }
      // verify the required parameter 'labelId' is set
      if (labelId === undefined || labelId === null) {
        throw new Error("Missing the required parameter 'labelId' when calling unassignLabel");
      }

      let pathParams = {
        'convId': convId,
        'labelId': labelId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = Label;
      return this.apiClient.callApi(
        '/conversations/{convId}/label/{labelId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the undoArchiveConversation operation.
     * @callback module:api/ConversationsApi~undoArchiveConversationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Unmute conversation
     * The conversation will no longer be archived but active again OauthScopes: WRITE_CONVERSATIONS
     * @param {String} convId The ID of the conversation which will be unmarked as muted
     * @param {module:api/ConversationsApi~undoArchiveConversationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    undoArchiveConversation(convId, callback) {
      let postBody = null;
      // verify the required parameter 'convId' is set
      if (convId === undefined || convId === null) {
        throw new Error("Missing the required parameter 'convId' when calling undoArchiveConversation");
      }

      let pathParams = {
        'convId': convId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/conversations/{convId}/archive', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the unlikeItem operation.
     * @callback module:api/ConversationsApi~unlikeItemCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes a \"like\" from a message
     * Removes a \"like\" from the given message in the given conversation OauthScopes: WRITE_CONVERSATIONS, UPDATE_CONVERSATION_CONTENT
     * @param {String} convId The ID of the conversation to which the item belongs
     * @param {String} itemId The ID of the item that will be unliked
     * @param {module:api/ConversationsApi~unlikeItemCallback} callback The callback function, accepting three arguments: error, data, response
     */
    unlikeItem(convId, itemId, callback) {
      let postBody = null;
      // verify the required parameter 'convId' is set
      if (convId === undefined || convId === null) {
        throw new Error("Missing the required parameter 'convId' when calling unlikeItem");
      }
      // verify the required parameter 'itemId' is set
      if (itemId === undefined || itemId === null) {
        throw new Error("Missing the required parameter 'itemId' when calling unlikeItem");
      }

      let pathParams = {
        'convId': convId,
        'itemId': itemId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/conversations/{convId}/messages/{itemId}/like', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the unmoderateConversation operation.
     * @callback module:api/ConversationsApi~unmoderateConversationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set conversation unmoderated
     * Set a conversation to unmoderatd mode OauthScopes: WRITE_CONVERSATIONS, MODERATE_CONVERSATIONS
     * @param {String} convId The ID of the conversation which will be set to unmoderated state
     * @param {module:api/ConversationsApi~unmoderateConversationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    unmoderateConversation(convId, callback) {
      let postBody = null;
      // verify the required parameter 'convId' is set
      if (convId === undefined || convId === null) {
        throw new Error("Missing the required parameter 'convId' when calling unmoderateConversation");
      }

      let pathParams = {
        'convId': convId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/conversations/unmoderate/{convId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateConversationCommunity operation.
     * @callback module:api/ConversationsApi~updateConversationCommunityCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Conversation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the information of a community
     * Updates the information of the given community. OauthScopes: WRITE_CONVERSATIONS, MANAGE_CONVERSATIONS
     * @param {String} convId The ID of the conversation which should be updated
     * @param {Object} opts Optional parameters
     * @param {String} [description] An optional description for the community conversation
     * @param {String} [topic] An optional topic of the conversation. If not set the Circuit client will render the names of the participants as topic of the conversation (the first 4 names will be used)
     * @param {module:api/ConversationsApi~updateConversationCommunityCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Conversation}
     */
    updateConversationCommunity(convId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'convId' is set
      if (convId === undefined || convId === null) {
        throw new Error("Missing the required parameter 'convId' when calling updateConversationCommunity");
      }

      let pathParams = {
        'convId': convId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'description': opts['description'],
        'topic': opts['topic']
      };

      let authNames = ['oauth'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'application/xml'];
      let returnType = Conversation;
      return this.apiClient.callApi(
        '/conversations/community/{convId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateConversationGroup operation.
     * @callback module:api/ConversationsApi~updateConversationGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Conversation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the information of a group conversation
     * Updates the information of the given group conversation. OauthScopes: WRITE_CONVERSATIONS, MANAGE_CONVERSATIONS
     * @param {String} convId The ID of the conversation which should be updated
     * @param {Object} opts Optional parameters
     * @param {String} [topic] An optional topic of the conversation. If not set the Circuit client will render the names of the participants as topic of the conversation (the first 4 names will be used)
     * @param {module:api/ConversationsApi~updateConversationGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Conversation}
     */
    updateConversationGroup(convId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'convId' is set
      if (convId === undefined || convId === null) {
        throw new Error("Missing the required parameter 'convId' when calling updateConversationGroup");
      }

      let pathParams = {
        'convId': convId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'topic': opts['topic']
      };

      let authNames = ['oauth'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'application/xml'];
      let returnType = Conversation;
      return this.apiClient.callApi(
        '/conversations/group/{convId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateProfile operation.
     * @callback module:api/ConversationsApi~updateProfileCallback
     * @param {String} error Error message, if any.
     * @param {module:model/User} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the user profile
     * Updates the user profile of the authenticated user OauthScopes: WRITE_USER_PROFILE
     * @param {Object} opts Optional parameters
     * @param {String} [firstname] The new firstname of the user
     * @param {String} [jobTitle] The new job title of the user
     * @param {String} [lastname] The new lastname of the user
     * @param {module:model/String} [locale] The new locale of the user. One of EN_US, DE_DE, EN_GB, ES_ES, FR_FR, IT_IT, RU_RU, ZH_HANS_CN.
     * @param {module:api/ConversationsApi~updateProfileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/User}
     */
    updateProfile(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'firstname': opts['firstname'],
        'jobTitle': opts['jobTitle'],
        'lastname': opts['lastname'],
        'locale': opts['locale']
      };

      let authNames = ['oauth'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'application/xml'];
      let returnType = User;
      return this.apiClient.callApi(
        '/users/profile', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateTextItem operation.
     * @callback module:api/ConversationsApi~updateTextItemCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ConversationItem} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a message
     * Updates the content or subject of the existing message. Only the creator of the message is allowed to perform this operation. OauthScopes: WRITE_CONVERSATIONS, UPDATE_CONVERSATION_CONTENT
     * @param {String} convId The ID of the conversation to which the item belongs
     * @param {String} itemId The ID of the item to update
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [attachments] A comma separated list of attachment IDs from the file API.
     * @param {String} [content] The actual content of the item
     * @param {String} [formMetaData] The form meta data of the new text item
     * @param {String} [subject] The subject (headline) of the new text item
     * @param {module:api/ConversationsApi~updateTextItemCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ConversationItem}
     */
    updateTextItem(convId, itemId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'convId' is set
      if (convId === undefined || convId === null) {
        throw new Error("Missing the required parameter 'convId' when calling updateTextItem");
      }
      // verify the required parameter 'itemId' is set
      if (itemId === undefined || itemId === null) {
        throw new Error("Missing the required parameter 'itemId' when calling updateTextItem");
      }

      let pathParams = {
        'convId': convId,
        'itemId': itemId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'attachments': this.apiClient.buildCollectionParam(opts['attachments'], 'csv'),
        'content': opts['content'],
        'formMetaData': opts['formMetaData'],
        'subject': opts['subject']
      };

      let authNames = ['oauth'];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = ['application/json', 'application/xml'];
      let returnType = ConversationItem;
      return this.apiClient.callApi(
        '/conversations/{convId}/messages/{itemId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
