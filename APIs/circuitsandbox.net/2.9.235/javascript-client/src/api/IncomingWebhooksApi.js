/**
 * REST API Version 2
 * Circuit REST API to interact with the Circuit system.  [Learn more about the Circuit Development Community](https://www.circuit.com/web/developers/home)
 *
 * The version of the OpenAPI document: 2.9.235
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import IncomingWebhook from '../model/IncomingWebhook';

/**
* IncomingWebhooks service.
* @module api/IncomingWebhooksApi
* @version 2.9.235
*/
export default class IncomingWebhooksApi {

    /**
    * Constructs a new IncomingWebhooksApi. 
    * @alias module:api/IncomingWebhooksApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createIncomingWebhook operation.
     * @callback module:api/IncomingWebhooksApi~createIncomingWebhookCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IncomingWebhook} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new webhook for existing conversation.
     * Create a new webhook. Conversation must exist and creater has to be participant. OauthScopes: WRITE_CONVERSATIONS, MANAGE_CONVERSATIONS
     * @param {String} conversationId The id of the conversation.
     * @param {Object} opts Optional parameters
     * @param {String} [name] The name of the webhook
     * @param {String} [userId] The id of the user of the webhook
     * @param {String} [description] A short description of the webhook
     * @param {module:api/IncomingWebhooksApi~createIncomingWebhookCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IncomingWebhook}
     */
    createIncomingWebhook(conversationId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'conversationId' is set
      if (conversationId === undefined || conversationId === null) {
        throw new Error("Missing the required parameter 'conversationId' when calling createIncomingWebhook");
      }

      let pathParams = {
        'conversationId': conversationId
      };
      let queryParams = {
        'name': opts['name'],
        'userId': opts['userId'],
        'description': opts['description']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = IncomingWebhook;
      return this.apiClient.callApi(
        '/webhooks/incoming/create/{conversationId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteIncomingWebhook operation.
     * @callback module:api/IncomingWebhooksApi~deleteIncomingWebhookCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an existing webhook
     * Delete a new webhook. Webhook must exist OauthScopes: WRITE_CONVERSATIONS, MANAGE_CONVERSATIONS
     * @param {String} webhookId The id of the webhook
     * @param {module:api/IncomingWebhooksApi~deleteIncomingWebhookCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteIncomingWebhook(webhookId, callback) {
      let postBody = null;
      // verify the required parameter 'webhookId' is set
      if (webhookId === undefined || webhookId === null) {
        throw new Error("Missing the required parameter 'webhookId' when calling deleteIncomingWebhook");
      }

      let pathParams = {
        'webhookId': webhookId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/webhooks/incoming/{webhookId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getIncomingWebhookByUser operation.
     * @callback module:api/IncomingWebhooksApi~getIncomingWebhookByUserCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/IncomingWebhook>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all webhooks of a special user.
     * Get all webhooks of a special user. OauthScopes: READ_CONVERSATIONS, MANAGE_CONVERSATIONS
     * @param {String} userId The id of the user.
     * @param {Object} opts Optional parameters
     * @param {Number} [pagesize = 25)] Max number of hooks per request. Default is 25
     * @param {String} [searchpointer] Start of search if consequtive call.
     * @param {module:api/IncomingWebhooksApi~getIncomingWebhookByUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/IncomingWebhook>}
     */
    getIncomingWebhookByUser(userId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling getIncomingWebhookByUser");
      }

      let pathParams = {
        'userId': userId
      };
      let queryParams = {
        'pagesize': opts['pagesize'],
        'searchpointer': opts['searchpointer']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['oauth'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = [IncomingWebhook];
      return this.apiClient.callApi(
        '/webhooks/incoming/user/{userId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postWebhookAsSlackMessage operation.
     * @callback module:api/IncomingWebhooksApi~postWebhookAsSlackMessageCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Post text item for conversation via webhook.
     * Post text items to conversations via slack apps.
     * @param {String} webhookId The id of the webhook.
     * @param {Object} opts Optional parameters
     * @param {String} [fileURL] missing documentation
     * @param {String} [filename] missing documentation
     * @param {Boolean} [markdown] missing documentation
     * @param {String} [subject] missing documentation
     * @param {String} [text] The text which will occur in the conversation. May contain formats like *bold* or _italic_
     * @param {module:api/IncomingWebhooksApi~postWebhookAsSlackMessageCallback} callback The callback function, accepting three arguments: error, data, response
     */
    postWebhookAsSlackMessage(webhookId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'webhookId' is set
      if (webhookId === undefined || webhookId === null) {
        throw new Error("Missing the required parameter 'webhookId' when calling postWebhookAsSlackMessage");
      }

      let pathParams = {
        'webhookId': webhookId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'fileURL': opts['fileURL'],
        'filename': opts['filename'],
        'markdown': opts['markdown'],
        'subject': opts['subject'],
        'text': opts['text']
      };

      let authNames = [];
      let contentTypes = ['application/x-www-form-urlencoded'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/webhooks/incoming/{webhookId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
