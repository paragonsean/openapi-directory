/*
 * nextAuth API
 * API for the nextAuth server
 *
 * The version of the OpenAPI document: 2.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import java.io.File;
import org.openapitools.client.model.LoginStatus;
import org.openapitools.client.model.UserContext;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for SessionsApi
 */
@Disabled
public class SessionsApiTest {

    private final SessionsApi api = new SessionsApi();

    /**
     * Generate data for a login qr code
     *
     * Returns the data for a login qr code. Required permission: &#39;sessions&#39;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getQrLoginTest() throws ApiException {
        String serverid = null;
        String xNonce = null;
        String img = null;
        Integer s = null;
        UserContext userContext = null;
        File response = api.getQrLogin(serverid, xNonce, img, s, userContext);
        // TODO: test validations
    }

    /**
     * Check if the user is logged in
     *
     * Based on the browser/webserver session identifier, check if the user is logged in and return the associated username. This also returns additional information: the data for the login qr code and whether or not a loggin can be provoked directly from the server. Required permission: &#39;sessions&#39;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSessionTest() throws ApiException {
        String serverid = null;
        String xNonce = null;
        LoginStatus response = api.getSession(serverid, xNonce);
        // TODO: test validations
    }

    /**
     * Force a logout on the given session
     *
     * Force a logout on the given session. Required permission: &#39;sessions&#39;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void logoutTest() throws ApiException {
        String serverid = null;
        String xNonce = null;
        api.logout(serverid, xNonce);
        // TODO: test validations
    }

    /**
     * Push a login confirmation to the user&#39;s app
     *
     * Push a login to the nextAuth app for the user to confirm, based on last account that successfully logged in for the given session. Required permission: &#39;sessions&#39;. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void provokeLoginTest() throws ApiException {
        String serverid = null;
        String xNonce = null;
        UserContext userContext = null;
        api.provokeLogin(serverid, xNonce, userContext);
        // TODO: test validations
    }

    /**
     * Push a login confirmation to the user&#39;s app
     *
     * Push a login to the nextAuth app for the user to confirm, based on the given account (app instance). Required permission: &#39;sessions&#39; or &#39;accounts&#39;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void provokeLoginOnAccountTest() throws ApiException {
        String serverid = null;
        String xNonce = null;
        Integer accountid = null;
        UserContext userContext = null;
        api.provokeLoginOnAccount(serverid, xNonce, accountid, userContext);
        // TODO: test validations
    }

    /**
     * Push a login confirmation to the user&#39;s app
     *
     * Push a login to the nextAuth app for the user to confirm, based on the given userid. Required permission: &#39;sessions&#39; or &#39;users&#39;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void provokeLoginOnUserTest() throws ApiException {
        String serverid = null;
        String xNonce = null;
        String userid = null;
        UserContext userContext = null;
        api.provokeLoginOnUser(serverid, xNonce, userid, userContext);
        // TODO: test validations
    }

}
