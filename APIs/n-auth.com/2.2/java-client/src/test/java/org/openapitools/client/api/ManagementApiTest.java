/*
 * nextAuth API
 * API for the nextAuth server
 *
 * The version of the OpenAPI document: 2.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ApiKey;
import org.openapitools.client.model.ApiKeys;
import org.openapitools.client.model.GetOrCreateUserRole200Response;
import org.openapitools.client.model.Permissions;
import org.openapitools.client.model.Role;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ManagementApi
 */
@Disabled
public class ManagementApiTest {

    private final ManagementApi api = new ManagementApi();

    /**
     * Create a new API key.
     *
     * Create a new API key. Required permission: global &#39;servers&#39;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createApiKeyTest() throws ApiException {
        String description = null;
        ApiKey response = api.createApiKey(description);
        // TODO: test validations
    }

    /**
     * Get all permissions for the specified server.
     *
     * Returns all permissions. Required permission: &#39;servers&#39;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAllPermissionsTest() throws ApiException {
        String serverid = null;
        Permissions response = api.getAllPermissions(serverid);
        // TODO: test validations
    }

    /**
     * Get all API keys.
     *
     * Get all API keys generated by the current role. Required permission: global &#39;servers&#39;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getApiKeysTest() throws ApiException {
        ApiKeys response = api.getApiKeys();
        // TODO: test validations
    }

    /**
     * Get or create a role for a specific user.
     *
     * Get or create a role for a specific user. Required permission: &#39;users&#39;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrCreateUserRoleTest() throws ApiException {
        String serverid = null;
        String userid = null;
        GetOrCreateUserRole200Response response = api.getOrCreateUserRole(serverid, userid);
        // TODO: test validations
    }

    /**
     * Get all permissions for the specified server and role.
     *
     * Returns all permissions. Required permission: &#39;servers&#39;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPermissionsTest() throws ApiException {
        String serverid = null;
        String roleid = null;
        Permissions response = api.getPermissions(serverid, roleid);
        // TODO: test validations
    }

    /**
     * Get role for a specific user.
     *
     * Get role for a specific user. Required permission: &#39;users&#39;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUserRoleTest() throws ApiException {
        String serverid = null;
        String userid = null;
        Role response = api.getUserRole(serverid, userid);
        // TODO: test validations
    }

    /**
     * Set new permissions for the specified role on a server
     *
     * Set new permissions for the specified role on a server. This overwrites any existing permissions on this server for the specified role. Required permission: &#39;root&#39;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void grantPermissionsTest() throws ApiException {
        String serverid = null;
        String roleid = null;
        List<String> permissions = null;
        api.grantPermissions(serverid, roleid, permissions);
        // TODO: test validations
    }

    /**
     * Revoke all permissions for the specified server and role.
     *
     * Revoke all permissions for the specified server and role. Required permission: &#39;root&#39;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void revokePermissionsTest() throws ApiException {
        String serverid = null;
        String roleid = null;
        api.revokePermissions(serverid, roleid);
        // TODO: test validations
    }

}
