/*
 * nextAuth API
 * API for the nextAuth server
 *
 * The version of the OpenAPI document: 2.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Server;
import org.openapitools.client.model.Servers;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ServersApi
 */
@Disabled
public class ServersApiTest {

    private final ServersApi api = new ServersApi();

    /**
     * Create a new server
     *
     * Create a new server. Required permission: global &#39;createserver&#39;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createServerTest() throws ApiException {
        Server createServerBody = null;
        Server response = api.createServer(createServerBody);
        // TODO: test validations
    }

    /**
     * Delete specific attribute of a specific server
     *
     * Delete attribute with the specified key of a specific server. Required permission: &#39;servers&#39;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteServerAttributeTest() throws ApiException {
        String serverid = null;
        String attributekey = null;
        api.deleteServerAttribute(serverid, attributekey);
        // TODO: test validations
    }

    /**
     * Delete all attributes of a specific server
     *
     * Delete all attributes of a specific server. Required permission: &#39;servers&#39;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteServerAttributesTest() throws ApiException {
        String serverid = null;
        api.deleteServerAttributes(serverid);
        // TODO: test validations
    }

    /**
     * Configuration of a specific server
     *
     * Returns the configuration of a specific server. Required permission: &#39;servers&#39; or &#39;createserver&#39;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getServerTest() throws ApiException {
        String serverid = null;
        Server response = api.getServer(serverid);
        // TODO: test validations
    }

    /**
     * Get all attributes of a specific server
     *
     * Returns an array containing all attributes corresponding to this server. Required permission: &#39;servers&#39;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getServerAttributesTest() throws ApiException {
        String serverid = null;
        String response = api.getServerAttributes(serverid);
        // TODO: test validations
    }

    /**
     * List all your servers
     *
     * List all the servers you have the permissions for. Required permission: &#39;servers&#39;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getServersTest() throws ApiException {
        Integer limit = null;
        Integer marker = null;
        Servers response = api.getServers(limit, marker);
        // TODO: test validations
    }

    /**
     * Set all attributes of a specific server
     *
     * Set the attributes of a specific server. Prior attributes with keys that are not provided in the body of the request will be deleted. Required permission: &#39;servers&#39;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void setServerAttributesTest() throws ApiException {
        String serverid = null;
        Object attributes = null;
        api.setServerAttributes(serverid, attributes);
        // TODO: test validations
    }

    /**
     * Update configuration of a specific server
     *
     * Update the configuration of a specific server. Required permission: &#39;createserver&#39;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateServerTest() throws ApiException {
        String serverid = null;
        Server server = null;
        Server response = api.updateServer(serverid, server);
        // TODO: test validations
    }

    /**
     * Update specified attributes of a specific server
     *
     * Update the specified attributes of a specific server. Prior attributes with keys that are not provided in the body of the request will not be deleted. Required permission: &#39;servers&#39;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateServerAttributesTest() throws ApiException {
        String serverid = null;
        Object attributes = null;
        api.updateServerAttributes(serverid, attributes);
        // TODO: test validations
    }

}
