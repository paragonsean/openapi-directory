/*
 * nextAuth API
 * API for the nextAuth server
 *
 * The version of the OpenAPI document: 2.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Accounts;
import org.openapitools.client.model.Users;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for UsersApi
 */
@Disabled
public class UsersApiTest {

    private final UsersApi api = new UsersApi();

    /**
     * Delete a specific user
     *
     * Delete a user. Required permission: &#39;users&#39;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteUserTest() throws ApiException {
        String serverid = null;
        String userid = null;
        api.deleteUser(serverid, userid);
        // TODO: test validations
    }

    /**
     * Delete all accounts of a specific user
     *
     * Delete all accounts corresponding to this user. The user itself is not deleted. Required permission: &#39;accounts&#39; or &#39;users&#39;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteUserAccountsTest() throws ApiException {
        String serverid = null;
        String userid = null;
        api.deleteUserAccounts(serverid, userid);
        // TODO: test validations
    }

    /**
     * Delete specific attribute of a specific user
     *
     * Delete attribute with the specified key of a specific user. Required permission: &#39;users&#39;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteUserAttributeTest() throws ApiException {
        String serverid = null;
        String userid = null;
        String attributekey = null;
        api.deleteUserAttribute(serverid, userid, attributekey);
        // TODO: test validations
    }

    /**
     * Delete all attributes of a specific user
     *
     * Delete all attributes of a specific user. Required permission: &#39;users&#39;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteUserAttributesTest() throws ApiException {
        String serverid = null;
        String userid = null;
        api.deleteUserAttributes(serverid, userid);
        // TODO: test validations
    }

    /**
     * Get all accounts of a specific user
     *
     * Returns an array containing all accounts corresponding to this user. Required permission: &#39;sessions&#39; or &#39;users&#39;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUserTest() throws ApiException {
        String serverid = null;
        String userid = null;
        Integer limit = null;
        Integer marker = null;
        String sort = null;
        Accounts response = api.getUser(serverid, userid, limit, marker, sort);
        // TODO: test validations
    }

    /**
     * Get all attributes of a specific user
     *
     * Returns an array containing all attributes corresponding to this user. Required permission: &#39;sessions&#39; or &#39;users&#39;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUserAttributesTest() throws ApiException {
        String serverid = null;
        String userid = null;
        String response = api.getUserAttributes(serverid, userid);
        // TODO: test validations
    }

    /**
     * Get all users
     *
     * Returns an array of arrays containing all accounts corresponding to all users. Required permission: &#39;users&#39;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUsersTest() throws ApiException {
        String serverid = null;
        String filter = null;
        String search = null;
        Integer limit = null;
        Integer marker = null;
        String sort = null;
        Users response = api.getUsers(serverid, filter, search, limit, marker, sort);
        // TODO: test validations
    }

    /**
     * Register a userid for the currently logged in account.
     *
     * Register a user for the currently logged in account. You can also directly pass a user name when generating an ENROL qr code. Required permission: &#39;users&#39;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void registerUserTest() throws ApiException {
        String serverid = null;
        String xNonce = null;
        String userid = null;
        api.registerUser(serverid, xNonce, userid);
        // TODO: test validations
    }

    /**
     * Set all attributes of a specific user
     *
     * Set the attributes of a specific user. Prior attributes with keys that are not provided in the body of the request will be deleted. Creates the user if not exists. Required permission: &#39;users&#39;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void setUserAttributesTest() throws ApiException {
        String serverid = null;
        String userid = null;
        Object attributes = null;
        api.setUserAttributes(serverid, userid, attributes);
        // TODO: test validations
    }

    /**
     * Update specified attributes of a specific user
     *
     * Update the specified attributes of a specific user. Prior attributes with keys that are not provided in the body of the request will not be deleted. Required permission: &#39;users&#39;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateUserAttributesTest() throws ApiException {
        String serverid = null;
        String userid = null;
        Object attributes = null;
        api.updateUserAttributes(serverid, userid, attributes);
        // TODO: test validations
    }

}
