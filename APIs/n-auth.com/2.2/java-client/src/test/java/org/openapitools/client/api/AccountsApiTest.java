/*
 * nextAuth API
 * API for the nextAuth server
 *
 * The version of the OpenAPI document: 2.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Account;
import org.openapitools.client.model.Accounts;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AccountsApi
 */
@Disabled
public class AccountsApiTest {

    private final AccountsApi api = new AccountsApi();

    /**
     * Delete specific account
     *
     * Delete an account. Required permission: &#39;accounts&#39;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteAccountTest() throws ApiException {
        String serverid = null;
        Integer accountid = null;
        api.deleteAccount(serverid, accountid);
        // TODO: test validations
    }

    /**
     * Delete all accounts of a specific user
     *
     * Delete all accounts corresponding to this user. The user itself is not deleted. Required permission: &#39;accounts&#39; or &#39;users&#39;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteUserAccounts_0Test() throws ApiException {
        String serverid = null;
        String userid = null;
        api.deleteUserAccounts_0(serverid, userid);
        // TODO: test validations
    }

    /**
     * Get specific account
     *
     * Returns the account. Required permission: &#39;sessions&#39; or &#39;accounts&#39;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAccountTest() throws ApiException {
        String serverid = null;
        Integer accountid = null;
        Account response = api.getAccount(serverid, accountid);
        // TODO: test validations
    }

    /**
     * Get all accounts
     *
     * Returns all account. Required permission &#39;accounts&#39;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAllAccountsTest() throws ApiException {
        String serverid = null;
        String filter = null;
        Integer limit = null;
        Integer marker = null;
        String sort = null;
        Accounts response = api.getAllAccounts(serverid, filter, limit, marker, sort);
        // TODO: test validations
    }

    /**
     * Get all accounts of a specific user
     *
     * Returns an array containing all accounts corresponding to this user. Required permission: &#39;sessions&#39; or &#39;users&#39;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUser_0Test() throws ApiException {
        String serverid = null;
        String userid = null;
        Integer limit = null;
        Integer marker = null;
        String sort = null;
        Accounts response = api.getUser_0(serverid, userid, limit, marker, sort);
        // TODO: test validations
    }

    /**
     * Update specific account
     *
     * Update an account. The only available change is (un)blocking the account. Required permission: &#39;accounts&#39;. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateAccountTest() throws ApiException {
        String serverid = null;
        Integer accountid = null;
        Boolean blocked = null;
        Account response = api.updateAccount(serverid, accountid, blocked);
        // TODO: test validations
    }

    /**
     * Update user of the given account.
     *
     * Update the user of the given account. Required permission: &#39;accounts&#39;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateAccountUserTest() throws ApiException {
        String serverid = null;
        Integer accountid = null;
        String userid = null;
        Account response = api.updateAccountUser(serverid, accountid, userid);
        // TODO: test validations
    }

}
