/*
 * nextAuth API
 * API for the nextAuth server
 *
 * The version of the OpenAPI document: 2.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Transaction;
import org.openapitools.client.model.TransactionId;
import org.openapitools.client.model.TransactionResult;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TransactionsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TransactionsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TransactionsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createTransaction
     * @param serverid Base64 encoded server id (required)
     * @param xNonce Nonce to identify the browser/webserver session (required)
     * @param msg  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> no account associated with this session </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createTransactionCall(String serverid, String xNonce, Transaction msg, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = msg;

        // create path and map variables
        String localVarPath = "/servers/{serverid}/sessions/transactions"
            .replace("{" + "serverid" + "}", localVarApiClient.escapeString(serverid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xNonce != null) {
            localVarHeaderParams.put("X-nonce", localVarApiClient.parameterToString(xNonce));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "role_id" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createTransactionValidateBeforeCall(String serverid, String xNonce, Transaction msg, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serverid' is set
        if (serverid == null) {
            throw new ApiException("Missing the required parameter 'serverid' when calling createTransaction(Async)");
        }

        // verify the required parameter 'xNonce' is set
        if (xNonce == null) {
            throw new ApiException("Missing the required parameter 'xNonce' when calling createTransaction(Async)");
        }

        // verify the required parameter 'msg' is set
        if (msg == null) {
            throw new ApiException("Missing the required parameter 'msg' when calling createTransaction(Async)");
        }

        return createTransactionCall(serverid, xNonce, msg, _callback);

    }

    /**
     * Create a transaction to be approved within the current session.
     * Create a transaction for approval within the current session. Required permission: &#39;sessions&#39;.
     * @param serverid Base64 encoded server id (required)
     * @param xNonce Nonce to identify the browser/webserver session (required)
     * @param msg  (required)
     * @return TransactionId
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> no account associated with this session </td><td>  -  </td></tr>
     </table>
     */
    public TransactionId createTransaction(String serverid, String xNonce, Transaction msg) throws ApiException {
        ApiResponse<TransactionId> localVarResp = createTransactionWithHttpInfo(serverid, xNonce, msg);
        return localVarResp.getData();
    }

    /**
     * Create a transaction to be approved within the current session.
     * Create a transaction for approval within the current session. Required permission: &#39;sessions&#39;.
     * @param serverid Base64 encoded server id (required)
     * @param xNonce Nonce to identify the browser/webserver session (required)
     * @param msg  (required)
     * @return ApiResponse&lt;TransactionId&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> no account associated with this session </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TransactionId> createTransactionWithHttpInfo(String serverid, String xNonce, Transaction msg) throws ApiException {
        okhttp3.Call localVarCall = createTransactionValidateBeforeCall(serverid, xNonce, msg, null);
        Type localVarReturnType = new TypeToken<TransactionId>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a transaction to be approved within the current session. (asynchronously)
     * Create a transaction for approval within the current session. Required permission: &#39;sessions&#39;.
     * @param serverid Base64 encoded server id (required)
     * @param xNonce Nonce to identify the browser/webserver session (required)
     * @param msg  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> no account associated with this session </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createTransactionAsync(String serverid, String xNonce, Transaction msg, final ApiCallback<TransactionId> _callback) throws ApiException {

        okhttp3.Call localVarCall = createTransactionValidateBeforeCall(serverid, xNonce, msg, _callback);
        Type localVarReturnType = new TypeToken<TransactionId>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getTransactionResult
     * @param serverid Base64 encoded server id (required)
     * @param transactionid Base64 encoded transaction id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> no transaction with given id found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTransactionResultCall(String serverid, String transactionid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/servers/{serverid}/transactions/{transactionid}"
            .replace("{" + "serverid" + "}", localVarApiClient.escapeString(serverid.toString()))
            .replace("{" + "transactionid" + "}", localVarApiClient.escapeString(transactionid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "role_id" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTransactionResultValidateBeforeCall(String serverid, String transactionid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serverid' is set
        if (serverid == null) {
            throw new ApiException("Missing the required parameter 'serverid' when calling getTransactionResult(Async)");
        }

        // verify the required parameter 'transactionid' is set
        if (transactionid == null) {
            throw new ApiException("Missing the required parameter 'transactionid' when calling getTransactionResult(Async)");
        }

        return getTransactionResultCall(serverid, transactionid, _callback);

    }

    /**
     * Get transaction result for a given transaction.
     * Get transaction result for a given transaction id. Required permission: &#39;sessions&#39;.
     * @param serverid Base64 encoded server id (required)
     * @param transactionid Base64 encoded transaction id (required)
     * @return TransactionResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> no transaction with given id found </td><td>  -  </td></tr>
     </table>
     */
    public TransactionResult getTransactionResult(String serverid, String transactionid) throws ApiException {
        ApiResponse<TransactionResult> localVarResp = getTransactionResultWithHttpInfo(serverid, transactionid);
        return localVarResp.getData();
    }

    /**
     * Get transaction result for a given transaction.
     * Get transaction result for a given transaction id. Required permission: &#39;sessions&#39;.
     * @param serverid Base64 encoded server id (required)
     * @param transactionid Base64 encoded transaction id (required)
     * @return ApiResponse&lt;TransactionResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> no transaction with given id found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TransactionResult> getTransactionResultWithHttpInfo(String serverid, String transactionid) throws ApiException {
        okhttp3.Call localVarCall = getTransactionResultValidateBeforeCall(serverid, transactionid, null);
        Type localVarReturnType = new TypeToken<TransactionResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get transaction result for a given transaction. (asynchronously)
     * Get transaction result for a given transaction id. Required permission: &#39;sessions&#39;.
     * @param serverid Base64 encoded server id (required)
     * @param transactionid Base64 encoded transaction id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> no transaction with given id found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTransactionResultAsync(String serverid, String transactionid, final ApiCallback<TransactionResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTransactionResultValidateBeforeCall(serverid, transactionid, _callback);
        Type localVarReturnType = new TypeToken<TransactionResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
