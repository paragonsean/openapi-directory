/*
 * nextAuth API
 * API for the nextAuth server
 *
 * The version of the OpenAPI document: 2.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Server;
import org.openapitools.client.model.Servers;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ServersApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ServersApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ServersApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createServer
     * @param createServerBody Server data (note that serverid, serverpk and validtime are generated by the server) (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Server config for newly created server </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createServerCall(Server createServerBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createServerBody;

        // create path and map variables
        String localVarPath = "/servers/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/octet-stream"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "role_id" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createServerValidateBeforeCall(Server createServerBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createServerBody' is set
        if (createServerBody == null) {
            throw new ApiException("Missing the required parameter 'createServerBody' when calling createServer(Async)");
        }

        return createServerCall(createServerBody, _callback);

    }

    /**
     * Create a new server
     * Create a new server. Required permission: global &#39;createserver&#39;.
     * @param createServerBody Server data (note that serverid, serverpk and validtime are generated by the server) (required)
     * @return Server
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Server config for newly created server </td><td>  -  </td></tr>
     </table>
     */
    public Server createServer(Server createServerBody) throws ApiException {
        ApiResponse<Server> localVarResp = createServerWithHttpInfo(createServerBody);
        return localVarResp.getData();
    }

    /**
     * Create a new server
     * Create a new server. Required permission: global &#39;createserver&#39;.
     * @param createServerBody Server data (note that serverid, serverpk and validtime are generated by the server) (required)
     * @return ApiResponse&lt;Server&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Server config for newly created server </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Server> createServerWithHttpInfo(Server createServerBody) throws ApiException {
        okhttp3.Call localVarCall = createServerValidateBeforeCall(createServerBody, null);
        Type localVarReturnType = new TypeToken<Server>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a new server (asynchronously)
     * Create a new server. Required permission: global &#39;createserver&#39;.
     * @param createServerBody Server data (note that serverid, serverpk and validtime are generated by the server) (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Server config for newly created server </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createServerAsync(Server createServerBody, final ApiCallback<Server> _callback) throws ApiException {

        okhttp3.Call localVarCall = createServerValidateBeforeCall(createServerBody, _callback);
        Type localVarReturnType = new TypeToken<Server>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteServerAttribute
     * @param serverid Base64 encoded server id (required)
     * @param attributekey Key of the attribute (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> On successful delete </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Server not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteServerAttributeCall(String serverid, String attributekey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/servers/{serverid}/attributes/{attributekey}"
            .replace("{" + "serverid" + "}", localVarApiClient.escapeString(serverid.toString()))
            .replace("{" + "attributekey" + "}", localVarApiClient.escapeString(attributekey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "role_id" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteServerAttributeValidateBeforeCall(String serverid, String attributekey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serverid' is set
        if (serverid == null) {
            throw new ApiException("Missing the required parameter 'serverid' when calling deleteServerAttribute(Async)");
        }

        // verify the required parameter 'attributekey' is set
        if (attributekey == null) {
            throw new ApiException("Missing the required parameter 'attributekey' when calling deleteServerAttribute(Async)");
        }

        return deleteServerAttributeCall(serverid, attributekey, _callback);

    }

    /**
     * Delete specific attribute of a specific server
     * Delete attribute with the specified key of a specific server. Required permission: &#39;servers&#39;.
     * @param serverid Base64 encoded server id (required)
     * @param attributekey Key of the attribute (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> On successful delete </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Server not found </td><td>  -  </td></tr>
     </table>
     */
    public void deleteServerAttribute(String serverid, String attributekey) throws ApiException {
        deleteServerAttributeWithHttpInfo(serverid, attributekey);
    }

    /**
     * Delete specific attribute of a specific server
     * Delete attribute with the specified key of a specific server. Required permission: &#39;servers&#39;.
     * @param serverid Base64 encoded server id (required)
     * @param attributekey Key of the attribute (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> On successful delete </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Server not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteServerAttributeWithHttpInfo(String serverid, String attributekey) throws ApiException {
        okhttp3.Call localVarCall = deleteServerAttributeValidateBeforeCall(serverid, attributekey, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete specific attribute of a specific server (asynchronously)
     * Delete attribute with the specified key of a specific server. Required permission: &#39;servers&#39;.
     * @param serverid Base64 encoded server id (required)
     * @param attributekey Key of the attribute (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> On successful delete </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Server not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteServerAttributeAsync(String serverid, String attributekey, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteServerAttributeValidateBeforeCall(serverid, attributekey, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteServerAttributes
     * @param serverid Base64 encoded server id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> On successful delete </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteServerAttributesCall(String serverid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/servers/{serverid}/attributes/"
            .replace("{" + "serverid" + "}", localVarApiClient.escapeString(serverid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "role_id" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteServerAttributesValidateBeforeCall(String serverid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serverid' is set
        if (serverid == null) {
            throw new ApiException("Missing the required parameter 'serverid' when calling deleteServerAttributes(Async)");
        }

        return deleteServerAttributesCall(serverid, _callback);

    }

    /**
     * Delete all attributes of a specific server
     * Delete all attributes of a specific server. Required permission: &#39;servers&#39;.
     * @param serverid Base64 encoded server id (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> On successful delete </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User not found </td><td>  -  </td></tr>
     </table>
     */
    public void deleteServerAttributes(String serverid) throws ApiException {
        deleteServerAttributesWithHttpInfo(serverid);
    }

    /**
     * Delete all attributes of a specific server
     * Delete all attributes of a specific server. Required permission: &#39;servers&#39;.
     * @param serverid Base64 encoded server id (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> On successful delete </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteServerAttributesWithHttpInfo(String serverid) throws ApiException {
        okhttp3.Call localVarCall = deleteServerAttributesValidateBeforeCall(serverid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete all attributes of a specific server (asynchronously)
     * Delete all attributes of a specific server. Required permission: &#39;servers&#39;.
     * @param serverid Base64 encoded server id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> On successful delete </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteServerAttributesAsync(String serverid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteServerAttributesValidateBeforeCall(serverid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getServer
     * @param serverid Base64 encoded server id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Server config </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Server not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getServerCall(String serverid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/servers/{serverid}/"
            .replace("{" + "serverid" + "}", localVarApiClient.escapeString(serverid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "role_id" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getServerValidateBeforeCall(String serverid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serverid' is set
        if (serverid == null) {
            throw new ApiException("Missing the required parameter 'serverid' when calling getServer(Async)");
        }

        return getServerCall(serverid, _callback);

    }

    /**
     * Configuration of a specific server
     * Returns the configuration of a specific server. Required permission: &#39;servers&#39; or &#39;createserver&#39;.
     * @param serverid Base64 encoded server id (required)
     * @return Server
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Server config </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Server not found </td><td>  -  </td></tr>
     </table>
     */
    public Server getServer(String serverid) throws ApiException {
        ApiResponse<Server> localVarResp = getServerWithHttpInfo(serverid);
        return localVarResp.getData();
    }

    /**
     * Configuration of a specific server
     * Returns the configuration of a specific server. Required permission: &#39;servers&#39; or &#39;createserver&#39;.
     * @param serverid Base64 encoded server id (required)
     * @return ApiResponse&lt;Server&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Server config </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Server not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Server> getServerWithHttpInfo(String serverid) throws ApiException {
        okhttp3.Call localVarCall = getServerValidateBeforeCall(serverid, null);
        Type localVarReturnType = new TypeToken<Server>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Configuration of a specific server (asynchronously)
     * Returns the configuration of a specific server. Required permission: &#39;servers&#39; or &#39;createserver&#39;.
     * @param serverid Base64 encoded server id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Server config </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Server not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getServerAsync(String serverid, final ApiCallback<Server> _callback) throws ApiException {

        okhttp3.Call localVarCall = getServerValidateBeforeCall(serverid, _callback);
        Type localVarReturnType = new TypeToken<Server>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getServerAttributes
     * @param serverid Base64 encoded server id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of attributes </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Server not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getServerAttributesCall(String serverid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/servers/{serverid}/attributes/"
            .replace("{" + "serverid" + "}", localVarApiClient.escapeString(serverid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "role_id" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getServerAttributesValidateBeforeCall(String serverid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serverid' is set
        if (serverid == null) {
            throw new ApiException("Missing the required parameter 'serverid' when calling getServerAttributes(Async)");
        }

        return getServerAttributesCall(serverid, _callback);

    }

    /**
     * Get all attributes of a specific server
     * Returns an array containing all attributes corresponding to this server. Required permission: &#39;servers&#39;.
     * @param serverid Base64 encoded server id (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of attributes </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Server not found </td><td>  -  </td></tr>
     </table>
     */
    public String getServerAttributes(String serverid) throws ApiException {
        ApiResponse<String> localVarResp = getServerAttributesWithHttpInfo(serverid);
        return localVarResp.getData();
    }

    /**
     * Get all attributes of a specific server
     * Returns an array containing all attributes corresponding to this server. Required permission: &#39;servers&#39;.
     * @param serverid Base64 encoded server id (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of attributes </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Server not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> getServerAttributesWithHttpInfo(String serverid) throws ApiException {
        okhttp3.Call localVarCall = getServerAttributesValidateBeforeCall(serverid, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all attributes of a specific server (asynchronously)
     * Returns an array containing all attributes corresponding to this server. Required permission: &#39;servers&#39;.
     * @param serverid Base64 encoded server id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of attributes </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Server not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getServerAttributesAsync(String serverid, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = getServerAttributesValidateBeforeCall(serverid, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getServers
     * @param limit Limit the number of results (optional)
     * @param marker Offset in the result list (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of servers </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getServersCall(Integer limit, Integer marker, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/servers/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (marker != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("marker", marker));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "role_id" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getServersValidateBeforeCall(Integer limit, Integer marker, final ApiCallback _callback) throws ApiException {
        return getServersCall(limit, marker, _callback);

    }

    /**
     * List all your servers
     * List all the servers you have the permissions for. Required permission: &#39;servers&#39;.
     * @param limit Limit the number of results (optional)
     * @param marker Offset in the result list (optional)
     * @return Servers
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of servers </td><td>  -  </td></tr>
     </table>
     */
    public Servers getServers(Integer limit, Integer marker) throws ApiException {
        ApiResponse<Servers> localVarResp = getServersWithHttpInfo(limit, marker);
        return localVarResp.getData();
    }

    /**
     * List all your servers
     * List all the servers you have the permissions for. Required permission: &#39;servers&#39;.
     * @param limit Limit the number of results (optional)
     * @param marker Offset in the result list (optional)
     * @return ApiResponse&lt;Servers&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of servers </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Servers> getServersWithHttpInfo(Integer limit, Integer marker) throws ApiException {
        okhttp3.Call localVarCall = getServersValidateBeforeCall(limit, marker, null);
        Type localVarReturnType = new TypeToken<Servers>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List all your servers (asynchronously)
     * List all the servers you have the permissions for. Required permission: &#39;servers&#39;.
     * @param limit Limit the number of results (optional)
     * @param marker Offset in the result list (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of servers </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getServersAsync(Integer limit, Integer marker, final ApiCallback<Servers> _callback) throws ApiException {

        okhttp3.Call localVarCall = getServersValidateBeforeCall(limit, marker, _callback);
        Type localVarReturnType = new TypeToken<Servers>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for setServerAttributes
     * @param serverid Base64 encoded server id (required)
     * @param attributes Array of attributes (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Server not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setServerAttributesCall(String serverid, Object attributes, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = attributes;

        // create path and map variables
        String localVarPath = "/servers/{serverid}/attributes/"
            .replace("{" + "serverid" + "}", localVarApiClient.escapeString(serverid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "role_id" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setServerAttributesValidateBeforeCall(String serverid, Object attributes, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serverid' is set
        if (serverid == null) {
            throw new ApiException("Missing the required parameter 'serverid' when calling setServerAttributes(Async)");
        }

        // verify the required parameter 'attributes' is set
        if (attributes == null) {
            throw new ApiException("Missing the required parameter 'attributes' when calling setServerAttributes(Async)");
        }

        return setServerAttributesCall(serverid, attributes, _callback);

    }

    /**
     * Set all attributes of a specific server
     * Set the attributes of a specific server. Prior attributes with keys that are not provided in the body of the request will be deleted. Required permission: &#39;servers&#39;.
     * @param serverid Base64 encoded server id (required)
     * @param attributes Array of attributes (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Server not found </td><td>  -  </td></tr>
     </table>
     */
    public void setServerAttributes(String serverid, Object attributes) throws ApiException {
        setServerAttributesWithHttpInfo(serverid, attributes);
    }

    /**
     * Set all attributes of a specific server
     * Set the attributes of a specific server. Prior attributes with keys that are not provided in the body of the request will be deleted. Required permission: &#39;servers&#39;.
     * @param serverid Base64 encoded server id (required)
     * @param attributes Array of attributes (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Server not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> setServerAttributesWithHttpInfo(String serverid, Object attributes) throws ApiException {
        okhttp3.Call localVarCall = setServerAttributesValidateBeforeCall(serverid, attributes, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Set all attributes of a specific server (asynchronously)
     * Set the attributes of a specific server. Prior attributes with keys that are not provided in the body of the request will be deleted. Required permission: &#39;servers&#39;.
     * @param serverid Base64 encoded server id (required)
     * @param attributes Array of attributes (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Server not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setServerAttributesAsync(String serverid, Object attributes, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = setServerAttributesValidateBeforeCall(serverid, attributes, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateServer
     * @param serverid Base64 encoded server id (required)
     * @param server Server data (note that serverid and serverpk cannot be changed) (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Server config </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Server not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateServerCall(String serverid, Server server, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = server;

        // create path and map variables
        String localVarPath = "/servers/{serverid}/"
            .replace("{" + "serverid" + "}", localVarApiClient.escapeString(serverid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "role_id" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateServerValidateBeforeCall(String serverid, Server server, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serverid' is set
        if (serverid == null) {
            throw new ApiException("Missing the required parameter 'serverid' when calling updateServer(Async)");
        }

        // verify the required parameter 'server' is set
        if (server == null) {
            throw new ApiException("Missing the required parameter 'server' when calling updateServer(Async)");
        }

        return updateServerCall(serverid, server, _callback);

    }

    /**
     * Update configuration of a specific server
     * Update the configuration of a specific server. Required permission: &#39;createserver&#39;.
     * @param serverid Base64 encoded server id (required)
     * @param server Server data (note that serverid and serverpk cannot be changed) (required)
     * @return Server
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Server config </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Server not found </td><td>  -  </td></tr>
     </table>
     */
    public Server updateServer(String serverid, Server server) throws ApiException {
        ApiResponse<Server> localVarResp = updateServerWithHttpInfo(serverid, server);
        return localVarResp.getData();
    }

    /**
     * Update configuration of a specific server
     * Update the configuration of a specific server. Required permission: &#39;createserver&#39;.
     * @param serverid Base64 encoded server id (required)
     * @param server Server data (note that serverid and serverpk cannot be changed) (required)
     * @return ApiResponse&lt;Server&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Server config </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Server not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Server> updateServerWithHttpInfo(String serverid, Server server) throws ApiException {
        okhttp3.Call localVarCall = updateServerValidateBeforeCall(serverid, server, null);
        Type localVarReturnType = new TypeToken<Server>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update configuration of a specific server (asynchronously)
     * Update the configuration of a specific server. Required permission: &#39;createserver&#39;.
     * @param serverid Base64 encoded server id (required)
     * @param server Server data (note that serverid and serverpk cannot be changed) (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Server config </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Server not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateServerAsync(String serverid, Server server, final ApiCallback<Server> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateServerValidateBeforeCall(serverid, server, _callback);
        Type localVarReturnType = new TypeToken<Server>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateServerAttributes
     * @param serverid Base64 encoded server id (required)
     * @param attributes Array of attributes (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> On successful update </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Server not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateServerAttributesCall(String serverid, Object attributes, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = attributes;

        // create path and map variables
        String localVarPath = "/servers/{serverid}/attributes/"
            .replace("{" + "serverid" + "}", localVarApiClient.escapeString(serverid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "role_id" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateServerAttributesValidateBeforeCall(String serverid, Object attributes, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serverid' is set
        if (serverid == null) {
            throw new ApiException("Missing the required parameter 'serverid' when calling updateServerAttributes(Async)");
        }

        // verify the required parameter 'attributes' is set
        if (attributes == null) {
            throw new ApiException("Missing the required parameter 'attributes' when calling updateServerAttributes(Async)");
        }

        return updateServerAttributesCall(serverid, attributes, _callback);

    }

    /**
     * Update specified attributes of a specific server
     * Update the specified attributes of a specific server. Prior attributes with keys that are not provided in the body of the request will not be deleted. Required permission: &#39;servers&#39;.
     * @param serverid Base64 encoded server id (required)
     * @param attributes Array of attributes (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> On successful update </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Server not found </td><td>  -  </td></tr>
     </table>
     */
    public void updateServerAttributes(String serverid, Object attributes) throws ApiException {
        updateServerAttributesWithHttpInfo(serverid, attributes);
    }

    /**
     * Update specified attributes of a specific server
     * Update the specified attributes of a specific server. Prior attributes with keys that are not provided in the body of the request will not be deleted. Required permission: &#39;servers&#39;.
     * @param serverid Base64 encoded server id (required)
     * @param attributes Array of attributes (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> On successful update </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Server not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> updateServerAttributesWithHttpInfo(String serverid, Object attributes) throws ApiException {
        okhttp3.Call localVarCall = updateServerAttributesValidateBeforeCall(serverid, attributes, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update specified attributes of a specific server (asynchronously)
     * Update the specified attributes of a specific server. Prior attributes with keys that are not provided in the body of the request will not be deleted. Required permission: &#39;servers&#39;.
     * @param serverid Base64 encoded server id (required)
     * @param attributes Array of attributes (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> On successful update </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Server not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateServerAttributesAsync(String serverid, Object attributes, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateServerAttributesValidateBeforeCall(serverid, attributes, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
