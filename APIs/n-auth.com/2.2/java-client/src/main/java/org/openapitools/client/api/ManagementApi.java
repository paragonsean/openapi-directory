/*
 * nextAuth API
 * API for the nextAuth server
 *
 * The version of the OpenAPI document: 2.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ApiKey;
import org.openapitools.client.model.ApiKeys;
import org.openapitools.client.model.GetOrCreateUserRole200Response;
import org.openapitools.client.model.Permissions;
import org.openapitools.client.model.Role;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ManagementApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ManagementApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ManagementApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createApiKey
     * @param description Description for the new role (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Newly created apikey (with role and description) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createApiKeyCall(String description, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/apikeys/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (description != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description", description));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "role_id" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createApiKeyValidateBeforeCall(String description, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'description' is set
        if (description == null) {
            throw new ApiException("Missing the required parameter 'description' when calling createApiKey(Async)");
        }

        return createApiKeyCall(description, _callback);

    }

    /**
     * Create a new API key.
     * Create a new API key. Required permission: global &#39;servers&#39;.
     * @param description Description for the new role (required)
     * @return ApiKey
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Newly created apikey (with role and description) </td><td>  -  </td></tr>
     </table>
     */
    public ApiKey createApiKey(String description) throws ApiException {
        ApiResponse<ApiKey> localVarResp = createApiKeyWithHttpInfo(description);
        return localVarResp.getData();
    }

    /**
     * Create a new API key.
     * Create a new API key. Required permission: global &#39;servers&#39;.
     * @param description Description for the new role (required)
     * @return ApiResponse&lt;ApiKey&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Newly created apikey (with role and description) </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiKey> createApiKeyWithHttpInfo(String description) throws ApiException {
        okhttp3.Call localVarCall = createApiKeyValidateBeforeCall(description, null);
        Type localVarReturnType = new TypeToken<ApiKey>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a new API key. (asynchronously)
     * Create a new API key. Required permission: global &#39;servers&#39;.
     * @param description Description for the new role (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Newly created apikey (with role and description) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createApiKeyAsync(String description, final ApiCallback<ApiKey> _callback) throws ApiException {

        okhttp3.Call localVarCall = createApiKeyValidateBeforeCall(description, _callback);
        Type localVarReturnType = new TypeToken<ApiKey>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAllPermissions
     * @param serverid Base64 encoded server id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of roles and permissions </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Server not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllPermissionsCall(String serverid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/servers/{serverid}/permissions/"
            .replace("{" + "serverid" + "}", localVarApiClient.escapeString(serverid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "role_id" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllPermissionsValidateBeforeCall(String serverid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serverid' is set
        if (serverid == null) {
            throw new ApiException("Missing the required parameter 'serverid' when calling getAllPermissions(Async)");
        }

        return getAllPermissionsCall(serverid, _callback);

    }

    /**
     * Get all permissions for the specified server.
     * Returns all permissions. Required permission: &#39;servers&#39;.
     * @param serverid Base64 encoded server id (required)
     * @return Permissions
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of roles and permissions </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Server not found </td><td>  -  </td></tr>
     </table>
     */
    public Permissions getAllPermissions(String serverid) throws ApiException {
        ApiResponse<Permissions> localVarResp = getAllPermissionsWithHttpInfo(serverid);
        return localVarResp.getData();
    }

    /**
     * Get all permissions for the specified server.
     * Returns all permissions. Required permission: &#39;servers&#39;.
     * @param serverid Base64 encoded server id (required)
     * @return ApiResponse&lt;Permissions&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of roles and permissions </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Server not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Permissions> getAllPermissionsWithHttpInfo(String serverid) throws ApiException {
        okhttp3.Call localVarCall = getAllPermissionsValidateBeforeCall(serverid, null);
        Type localVarReturnType = new TypeToken<Permissions>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all permissions for the specified server. (asynchronously)
     * Returns all permissions. Required permission: &#39;servers&#39;.
     * @param serverid Base64 encoded server id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of roles and permissions </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Server not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllPermissionsAsync(String serverid, final ApiCallback<Permissions> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllPermissionsValidateBeforeCall(serverid, _callback);
        Type localVarReturnType = new TypeToken<Permissions>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getApiKeys
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of apikeys (with role and description) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getApiKeysCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/apikeys/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "role_id" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getApiKeysValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getApiKeysCall(_callback);

    }

    /**
     * Get all API keys.
     * Get all API keys generated by the current role. Required permission: global &#39;servers&#39;.
     * @return ApiKeys
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of apikeys (with role and description) </td><td>  -  </td></tr>
     </table>
     */
    public ApiKeys getApiKeys() throws ApiException {
        ApiResponse<ApiKeys> localVarResp = getApiKeysWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get all API keys.
     * Get all API keys generated by the current role. Required permission: global &#39;servers&#39;.
     * @return ApiResponse&lt;ApiKeys&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of apikeys (with role and description) </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiKeys> getApiKeysWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getApiKeysValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<ApiKeys>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all API keys. (asynchronously)
     * Get all API keys generated by the current role. Required permission: global &#39;servers&#39;.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of apikeys (with role and description) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getApiKeysAsync(final ApiCallback<ApiKeys> _callback) throws ApiException {

        okhttp3.Call localVarCall = getApiKeysValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<ApiKeys>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrCreateUserRole
     * @param serverid Base64 encoded server id (required)
     * @param userid User name (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User role (base 64 encoded) </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrCreateUserRoleCall(String serverid, String userid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/servers/{serverid}/users/{userid}/role/"
            .replace("{" + "serverid" + "}", localVarApiClient.escapeString(serverid.toString()))
            .replace("{" + "userid" + "}", localVarApiClient.escapeString(userid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "role_id" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrCreateUserRoleValidateBeforeCall(String serverid, String userid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serverid' is set
        if (serverid == null) {
            throw new ApiException("Missing the required parameter 'serverid' when calling getOrCreateUserRole(Async)");
        }

        // verify the required parameter 'userid' is set
        if (userid == null) {
            throw new ApiException("Missing the required parameter 'userid' when calling getOrCreateUserRole(Async)");
        }

        return getOrCreateUserRoleCall(serverid, userid, _callback);

    }

    /**
     * Get or create a role for a specific user.
     * Get or create a role for a specific user. Required permission: &#39;users&#39;.
     * @param serverid Base64 encoded server id (required)
     * @param userid User name (required)
     * @return GetOrCreateUserRole200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User role (base 64 encoded) </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User not found </td><td>  -  </td></tr>
     </table>
     */
    public GetOrCreateUserRole200Response getOrCreateUserRole(String serverid, String userid) throws ApiException {
        ApiResponse<GetOrCreateUserRole200Response> localVarResp = getOrCreateUserRoleWithHttpInfo(serverid, userid);
        return localVarResp.getData();
    }

    /**
     * Get or create a role for a specific user.
     * Get or create a role for a specific user. Required permission: &#39;users&#39;.
     * @param serverid Base64 encoded server id (required)
     * @param userid User name (required)
     * @return ApiResponse&lt;GetOrCreateUserRole200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User role (base 64 encoded) </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetOrCreateUserRole200Response> getOrCreateUserRoleWithHttpInfo(String serverid, String userid) throws ApiException {
        okhttp3.Call localVarCall = getOrCreateUserRoleValidateBeforeCall(serverid, userid, null);
        Type localVarReturnType = new TypeToken<GetOrCreateUserRole200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get or create a role for a specific user. (asynchronously)
     * Get or create a role for a specific user. Required permission: &#39;users&#39;.
     * @param serverid Base64 encoded server id (required)
     * @param userid User name (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User role (base 64 encoded) </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getOrCreateUserRoleAsync(String serverid, String userid, final ApiCallback<GetOrCreateUserRole200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrCreateUserRoleValidateBeforeCall(serverid, userid, _callback);
        Type localVarReturnType = new TypeToken<GetOrCreateUserRole200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPermissions
     * @param serverid Base64 encoded server id (required)
     * @param roleid Base64 encoded role id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of roles and permissions </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Server or role not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPermissionsCall(String serverid, String roleid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/servers/{serverid}/permissions/{roleid}"
            .replace("{" + "serverid" + "}", localVarApiClient.escapeString(serverid.toString()))
            .replace("{" + "roleid" + "}", localVarApiClient.escapeString(roleid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "role_id" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPermissionsValidateBeforeCall(String serverid, String roleid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serverid' is set
        if (serverid == null) {
            throw new ApiException("Missing the required parameter 'serverid' when calling getPermissions(Async)");
        }

        // verify the required parameter 'roleid' is set
        if (roleid == null) {
            throw new ApiException("Missing the required parameter 'roleid' when calling getPermissions(Async)");
        }

        return getPermissionsCall(serverid, roleid, _callback);

    }

    /**
     * Get all permissions for the specified server and role.
     * Returns all permissions. Required permission: &#39;servers&#39;.
     * @param serverid Base64 encoded server id (required)
     * @param roleid Base64 encoded role id (required)
     * @return Permissions
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of roles and permissions </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Server or role not found </td><td>  -  </td></tr>
     </table>
     */
    public Permissions getPermissions(String serverid, String roleid) throws ApiException {
        ApiResponse<Permissions> localVarResp = getPermissionsWithHttpInfo(serverid, roleid);
        return localVarResp.getData();
    }

    /**
     * Get all permissions for the specified server and role.
     * Returns all permissions. Required permission: &#39;servers&#39;.
     * @param serverid Base64 encoded server id (required)
     * @param roleid Base64 encoded role id (required)
     * @return ApiResponse&lt;Permissions&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of roles and permissions </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Server or role not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Permissions> getPermissionsWithHttpInfo(String serverid, String roleid) throws ApiException {
        okhttp3.Call localVarCall = getPermissionsValidateBeforeCall(serverid, roleid, null);
        Type localVarReturnType = new TypeToken<Permissions>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all permissions for the specified server and role. (asynchronously)
     * Returns all permissions. Required permission: &#39;servers&#39;.
     * @param serverid Base64 encoded server id (required)
     * @param roleid Base64 encoded role id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of roles and permissions </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Server or role not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPermissionsAsync(String serverid, String roleid, final ApiCallback<Permissions> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPermissionsValidateBeforeCall(serverid, roleid, _callback);
        Type localVarReturnType = new TypeToken<Permissions>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getUserRole
     * @param serverid Base64 encoded server id (required)
     * @param userid User name (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User role (base 64 encoded) </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User not found, no role found for user </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUserRoleCall(String serverid, String userid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/servers/{serverid}/users/{userid}/role/"
            .replace("{" + "serverid" + "}", localVarApiClient.escapeString(serverid.toString()))
            .replace("{" + "userid" + "}", localVarApiClient.escapeString(userid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "role_id" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUserRoleValidateBeforeCall(String serverid, String userid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serverid' is set
        if (serverid == null) {
            throw new ApiException("Missing the required parameter 'serverid' when calling getUserRole(Async)");
        }

        // verify the required parameter 'userid' is set
        if (userid == null) {
            throw new ApiException("Missing the required parameter 'userid' when calling getUserRole(Async)");
        }

        return getUserRoleCall(serverid, userid, _callback);

    }

    /**
     * Get role for a specific user.
     * Get role for a specific user. Required permission: &#39;users&#39;.
     * @param serverid Base64 encoded server id (required)
     * @param userid User name (required)
     * @return Role
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User role (base 64 encoded) </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User not found, no role found for user </td><td>  -  </td></tr>
     </table>
     */
    public Role getUserRole(String serverid, String userid) throws ApiException {
        ApiResponse<Role> localVarResp = getUserRoleWithHttpInfo(serverid, userid);
        return localVarResp.getData();
    }

    /**
     * Get role for a specific user.
     * Get role for a specific user. Required permission: &#39;users&#39;.
     * @param serverid Base64 encoded server id (required)
     * @param userid User name (required)
     * @return ApiResponse&lt;Role&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User role (base 64 encoded) </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User not found, no role found for user </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Role> getUserRoleWithHttpInfo(String serverid, String userid) throws ApiException {
        okhttp3.Call localVarCall = getUserRoleValidateBeforeCall(serverid, userid, null);
        Type localVarReturnType = new TypeToken<Role>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get role for a specific user. (asynchronously)
     * Get role for a specific user. Required permission: &#39;users&#39;.
     * @param serverid Base64 encoded server id (required)
     * @param userid User name (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> User role (base 64 encoded) </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User not found, no role found for user </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUserRoleAsync(String serverid, String userid, final ApiCallback<Role> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUserRoleValidateBeforeCall(serverid, userid, _callback);
        Type localVarReturnType = new TypeToken<Role>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for grantPermissions
     * @param serverid Base64 encoded server id (required)
     * @param roleid Base64 encoded role id (required)
     * @param permissions Array of new permissions (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Server or role not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call grantPermissionsCall(String serverid, String roleid, List<String> permissions, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = permissions;

        // create path and map variables
        String localVarPath = "/servers/{serverid}/permissions/{roleid}"
            .replace("{" + "serverid" + "}", localVarApiClient.escapeString(serverid.toString()))
            .replace("{" + "roleid" + "}", localVarApiClient.escapeString(roleid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "role_id" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call grantPermissionsValidateBeforeCall(String serverid, String roleid, List<String> permissions, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serverid' is set
        if (serverid == null) {
            throw new ApiException("Missing the required parameter 'serverid' when calling grantPermissions(Async)");
        }

        // verify the required parameter 'roleid' is set
        if (roleid == null) {
            throw new ApiException("Missing the required parameter 'roleid' when calling grantPermissions(Async)");
        }

        // verify the required parameter 'permissions' is set
        if (permissions == null) {
            throw new ApiException("Missing the required parameter 'permissions' when calling grantPermissions(Async)");
        }

        return grantPermissionsCall(serverid, roleid, permissions, _callback);

    }

    /**
     * Set new permissions for the specified role on a server
     * Set new permissions for the specified role on a server. This overwrites any existing permissions on this server for the specified role. Required permission: &#39;root&#39;.
     * @param serverid Base64 encoded server id (required)
     * @param roleid Base64 encoded role id (required)
     * @param permissions Array of new permissions (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Server or role not found </td><td>  -  </td></tr>
     </table>
     */
    public void grantPermissions(String serverid, String roleid, List<String> permissions) throws ApiException {
        grantPermissionsWithHttpInfo(serverid, roleid, permissions);
    }

    /**
     * Set new permissions for the specified role on a server
     * Set new permissions for the specified role on a server. This overwrites any existing permissions on this server for the specified role. Required permission: &#39;root&#39;.
     * @param serverid Base64 encoded server id (required)
     * @param roleid Base64 encoded role id (required)
     * @param permissions Array of new permissions (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Server or role not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> grantPermissionsWithHttpInfo(String serverid, String roleid, List<String> permissions) throws ApiException {
        okhttp3.Call localVarCall = grantPermissionsValidateBeforeCall(serverid, roleid, permissions, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Set new permissions for the specified role on a server (asynchronously)
     * Set new permissions for the specified role on a server. This overwrites any existing permissions on this server for the specified role. Required permission: &#39;root&#39;.
     * @param serverid Base64 encoded server id (required)
     * @param roleid Base64 encoded role id (required)
     * @param permissions Array of new permissions (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Server or role not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call grantPermissionsAsync(String serverid, String roleid, List<String> permissions, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = grantPermissionsValidateBeforeCall(serverid, roleid, permissions, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for revokePermissions
     * @param serverid Base64 encoded server id (required)
     * @param roleid Base64 encoded role id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Server or role not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call revokePermissionsCall(String serverid, String roleid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/servers/{serverid}/permissions/{roleid}"
            .replace("{" + "serverid" + "}", localVarApiClient.escapeString(serverid.toString()))
            .replace("{" + "roleid" + "}", localVarApiClient.escapeString(roleid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "role_id" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call revokePermissionsValidateBeforeCall(String serverid, String roleid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serverid' is set
        if (serverid == null) {
            throw new ApiException("Missing the required parameter 'serverid' when calling revokePermissions(Async)");
        }

        // verify the required parameter 'roleid' is set
        if (roleid == null) {
            throw new ApiException("Missing the required parameter 'roleid' when calling revokePermissions(Async)");
        }

        return revokePermissionsCall(serverid, roleid, _callback);

    }

    /**
     * Revoke all permissions for the specified server and role.
     * Revoke all permissions for the specified server and role. Required permission: &#39;root&#39;.
     * @param serverid Base64 encoded server id (required)
     * @param roleid Base64 encoded role id (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Server or role not found </td><td>  -  </td></tr>
     </table>
     */
    public void revokePermissions(String serverid, String roleid) throws ApiException {
        revokePermissionsWithHttpInfo(serverid, roleid);
    }

    /**
     * Revoke all permissions for the specified server and role.
     * Revoke all permissions for the specified server and role. Required permission: &#39;root&#39;.
     * @param serverid Base64 encoded server id (required)
     * @param roleid Base64 encoded role id (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Server or role not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> revokePermissionsWithHttpInfo(String serverid, String roleid) throws ApiException {
        okhttp3.Call localVarCall = revokePermissionsValidateBeforeCall(serverid, roleid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Revoke all permissions for the specified server and role. (asynchronously)
     * Revoke all permissions for the specified server and role. Required permission: &#39;root&#39;.
     * @param serverid Base64 encoded server id (required)
     * @param roleid Base64 encoded role id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Server or role not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call revokePermissionsAsync(String serverid, String roleid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = revokePermissionsValidateBeforeCall(serverid, roleid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
