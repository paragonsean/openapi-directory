/*
 * nextAuth API
 * API for the nextAuth server
 *
 * The version of the OpenAPI document: 2.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * LoginStatus
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:57:02.089808-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class LoginStatus {
  public static final String SERIALIZED_NAME_ACCOUNTID = "accountid";
  @SerializedName(SERIALIZED_NAME_ACCOUNTID)
  private Integer accountid;

  public static final String SERIALIZED_NAME_CANPROVOKE = "canprovoke";
  @SerializedName(SERIALIZED_NAME_CANPROVOKE)
  private Boolean canprovoke;

  public static final String SERIALIZED_NAME_HSID = "hsid";
  @SerializedName(SERIALIZED_NAME_HSID)
  private String hsid;

  public static final String SERIALIZED_NAME_LOGGEDIN = "loggedin";
  @SerializedName(SERIALIZED_NAME_LOGGEDIN)
  private Boolean loggedin;

  public static final String SERIALIZED_NAME_LOGINQRDATA = "loginqrdata";
  @SerializedName(SERIALIZED_NAME_LOGINQRDATA)
  private String loginqrdata;

  public static final String SERIALIZED_NAME_PK = "pk";
  @SerializedName(SERIALIZED_NAME_PK)
  private String pk;

  public static final String SERIALIZED_NAME_USERID = "userid";
  @SerializedName(SERIALIZED_NAME_USERID)
  private String userid;

  public LoginStatus() {
  }

  public LoginStatus accountid(Integer accountid) {
    this.accountid = accountid;
    return this;
  }

  /**
   * Account id
   * @return accountid
   */
  @javax.annotation.Nullable
  public Integer getAccountid() {
    return accountid;
  }

  public void setAccountid(Integer accountid) {
    this.accountid = accountid;
  }


  public LoginStatus canprovoke(Boolean canprovoke) {
    this.canprovoke = canprovoke;
    return this;
  }

  /**
   * True if a login can be pushed from the server, false otherwise
   * @return canprovoke
   */
  @javax.annotation.Nullable
  public Boolean getCanprovoke() {
    return canprovoke;
  }

  public void setCanprovoke(Boolean canprovoke) {
    this.canprovoke = canprovoke;
  }


  public LoginStatus hsid(String hsid) {
    this.hsid = hsid;
    return this;
  }

  /**
   * Converted session id, used by the websockets
   * @return hsid
   */
  @javax.annotation.Nullable
  public String getHsid() {
    return hsid;
  }

  public void setHsid(String hsid) {
    this.hsid = hsid;
  }


  public LoginStatus loggedin(Boolean loggedin) {
    this.loggedin = loggedin;
    return this;
  }

  /**
   * True if the user is loggedin, false otherwise
   * @return loggedin
   */
  @javax.annotation.Nullable
  public Boolean getLoggedin() {
    return loggedin;
  }

  public void setLoggedin(Boolean loggedin) {
    this.loggedin = loggedin;
  }


  public LoginStatus loginqrdata(String loginqrdata) {
    this.loginqrdata = loginqrdata;
    return this;
  }

  /**
   * Base64 encoded data that is represented in the login qr code
   * @return loginqrdata
   */
  @javax.annotation.Nullable
  public String getLoginqrdata() {
    return loginqrdata;
  }

  public void setLoginqrdata(String loginqrdata) {
    this.loginqrdata = loginqrdata;
  }


  public LoginStatus pk(String pk) {
    this.pk = pk;
    return this;
  }

  /**
   * Base64 encoded public key of the nextAuth app. This uniquely identifies the account on the nextAuth app, regardless of the username
   * @return pk
   */
  @javax.annotation.Nullable
  public String getPk() {
    return pk;
  }

  public void setPk(String pk) {
    this.pk = pk;
  }


  public LoginStatus userid(String userid) {
    this.userid = userid;
    return this;
  }

  /**
   * User name
   * @return userid
   */
  @javax.annotation.Nullable
  public String getUserid() {
    return userid;
  }

  public void setUserid(String userid) {
    this.userid = userid;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LoginStatus loginStatus = (LoginStatus) o;
    return Objects.equals(this.accountid, loginStatus.accountid) &&
        Objects.equals(this.canprovoke, loginStatus.canprovoke) &&
        Objects.equals(this.hsid, loginStatus.hsid) &&
        Objects.equals(this.loggedin, loginStatus.loggedin) &&
        Objects.equals(this.loginqrdata, loginStatus.loginqrdata) &&
        Objects.equals(this.pk, loginStatus.pk) &&
        Objects.equals(this.userid, loginStatus.userid);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountid, canprovoke, hsid, loggedin, loginqrdata, pk, userid);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LoginStatus {\n");
    sb.append("    accountid: ").append(toIndentedString(accountid)).append("\n");
    sb.append("    canprovoke: ").append(toIndentedString(canprovoke)).append("\n");
    sb.append("    hsid: ").append(toIndentedString(hsid)).append("\n");
    sb.append("    loggedin: ").append(toIndentedString(loggedin)).append("\n");
    sb.append("    loginqrdata: ").append(toIndentedString(loginqrdata)).append("\n");
    sb.append("    pk: ").append(toIndentedString(pk)).append("\n");
    sb.append("    userid: ").append(toIndentedString(userid)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accountid");
    openapiFields.add("canprovoke");
    openapiFields.add("hsid");
    openapiFields.add("loggedin");
    openapiFields.add("loginqrdata");
    openapiFields.add("pk");
    openapiFields.add("userid");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to LoginStatus
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LoginStatus.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LoginStatus is not found in the empty JSON string", LoginStatus.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LoginStatus.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LoginStatus` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("hsid") != null && !jsonObj.get("hsid").isJsonNull()) && !jsonObj.get("hsid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hsid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hsid").toString()));
      }
      if ((jsonObj.get("loginqrdata") != null && !jsonObj.get("loginqrdata").isJsonNull()) && !jsonObj.get("loginqrdata").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `loginqrdata` to be a primitive type in the JSON string but got `%s`", jsonObj.get("loginqrdata").toString()));
      }
      if ((jsonObj.get("pk") != null && !jsonObj.get("pk").isJsonNull()) && !jsonObj.get("pk").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pk` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pk").toString()));
      }
      if ((jsonObj.get("userid") != null && !jsonObj.get("userid").isJsonNull()) && !jsonObj.get("userid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userid").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LoginStatus.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LoginStatus' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LoginStatus> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LoginStatus.class));

       return (TypeAdapter<T>) new TypeAdapter<LoginStatus>() {
           @Override
           public void write(JsonWriter out, LoginStatus value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LoginStatus read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of LoginStatus given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of LoginStatus
   * @throws IOException if the JSON string is invalid with respect to LoginStatus
   */
  public static LoginStatus fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LoginStatus.class);
  }

  /**
   * Convert an instance of LoginStatus to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

