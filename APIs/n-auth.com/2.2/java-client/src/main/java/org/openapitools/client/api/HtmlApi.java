/*
 * nextAuth API
 * API for the nextAuth server
 *
 * The version of the OpenAPI document: 2.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.HtmlFooterBody;
import org.openapitools.client.model.LoginStatus;
import org.openapitools.client.model.UserContext;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class HtmlApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public HtmlApi() {
        this(Configuration.getDefaultApiClient());
    }

    public HtmlApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getHtmlEnrol
     * @param serverid Base64 encoded server id (required)
     * @param xNonce Nonce to identify the browser/webserver session (required)
     * @param name Name to forward to the nextAuth app for this account (optional)
     * @param userid User name to register this user under (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Generated HTML. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getHtmlEnrolCall(String serverid, String xNonce, String name, String userid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/servers/{serverid}/sessions/html/enrol"
            .replace("{" + "serverid" + "}", localVarApiClient.escapeString(serverid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (userid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userid", userid));
        }

        if (xNonce != null) {
            localVarHeaderParams.put("X-nonce", localVarApiClient.parameterToString(xNonce));
        }

        final String[] localVarAccepts = {
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "role_id" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getHtmlEnrolValidateBeforeCall(String serverid, String xNonce, String name, String userid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serverid' is set
        if (serverid == null) {
            throw new ApiException("Missing the required parameter 'serverid' when calling getHtmlEnrol(Async)");
        }

        // verify the required parameter 'xNonce' is set
        if (xNonce == null) {
            throw new ApiException("Missing the required parameter 'xNonce' when calling getHtmlEnrol(Async)");
        }

        return getHtmlEnrolCall(serverid, xNonce, name, userid, _callback);

    }

    /**
     * Generate HTML to enrol a new user
     * Generate HTML to enrol a new user. Required permission: &#39;sessions&#39;. 
     * @param serverid Base64 encoded server id (required)
     * @param xNonce Nonce to identify the browser/webserver session (required)
     * @param name Name to forward to the nextAuth app for this account (optional)
     * @param userid User name to register this user under (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Generated HTML. </td><td>  -  </td></tr>
     </table>
     */
    public String getHtmlEnrol(String serverid, String xNonce, String name, String userid) throws ApiException {
        ApiResponse<String> localVarResp = getHtmlEnrolWithHttpInfo(serverid, xNonce, name, userid);
        return localVarResp.getData();
    }

    /**
     * Generate HTML to enrol a new user
     * Generate HTML to enrol a new user. Required permission: &#39;sessions&#39;. 
     * @param serverid Base64 encoded server id (required)
     * @param xNonce Nonce to identify the browser/webserver session (required)
     * @param name Name to forward to the nextAuth app for this account (optional)
     * @param userid User name to register this user under (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Generated HTML. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> getHtmlEnrolWithHttpInfo(String serverid, String xNonce, String name, String userid) throws ApiException {
        okhttp3.Call localVarCall = getHtmlEnrolValidateBeforeCall(serverid, xNonce, name, userid, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Generate HTML to enrol a new user (asynchronously)
     * Generate HTML to enrol a new user. Required permission: &#39;sessions&#39;. 
     * @param serverid Base64 encoded server id (required)
     * @param xNonce Nonce to identify the browser/webserver session (required)
     * @param name Name to forward to the nextAuth app for this account (optional)
     * @param userid User name to register this user under (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Generated HTML. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getHtmlEnrolAsync(String serverid, String xNonce, String name, String userid, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = getHtmlEnrolValidateBeforeCall(serverid, xNonce, name, userid, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getHtmlFooter
     * @param serverid Base64 encoded server id (required)
     * @param xNonce Nonce to identify the browser/webserver session (required)
     * @param htmlFooterBody Additional sessions that should be monitored through the websocket. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Generated HTML. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getHtmlFooterCall(String serverid, String xNonce, HtmlFooterBody htmlFooterBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = htmlFooterBody;

        // create path and map variables
        String localVarPath = "/servers/{serverid}/sessions/html/footer"
            .replace("{" + "serverid" + "}", localVarApiClient.escapeString(serverid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xNonce != null) {
            localVarHeaderParams.put("X-nonce", localVarApiClient.parameterToString(xNonce));
        }

        final String[] localVarAccepts = {
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "role_id" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getHtmlFooterValidateBeforeCall(String serverid, String xNonce, HtmlFooterBody htmlFooterBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serverid' is set
        if (serverid == null) {
            throw new ApiException("Missing the required parameter 'serverid' when calling getHtmlFooter(Async)");
        }

        // verify the required parameter 'xNonce' is set
        if (xNonce == null) {
            throw new ApiException("Missing the required parameter 'xNonce' when calling getHtmlFooter(Async)");
        }

        return getHtmlFooterCall(serverid, xNonce, htmlFooterBody, _callback);

    }

    /**
     * Generic HTML to add to footer. Required for login/logout/enrol functionality.
     * HTML to add to footer of HTML page. Required permission: &#39;sessions&#39;. 
     * @param serverid Base64 encoded server id (required)
     * @param xNonce Nonce to identify the browser/webserver session (required)
     * @param htmlFooterBody Additional sessions that should be monitored through the websocket. (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Generated HTML. </td><td>  -  </td></tr>
     </table>
     */
    public String getHtmlFooter(String serverid, String xNonce, HtmlFooterBody htmlFooterBody) throws ApiException {
        ApiResponse<String> localVarResp = getHtmlFooterWithHttpInfo(serverid, xNonce, htmlFooterBody);
        return localVarResp.getData();
    }

    /**
     * Generic HTML to add to footer. Required for login/logout/enrol functionality.
     * HTML to add to footer of HTML page. Required permission: &#39;sessions&#39;. 
     * @param serverid Base64 encoded server id (required)
     * @param xNonce Nonce to identify the browser/webserver session (required)
     * @param htmlFooterBody Additional sessions that should be monitored through the websocket. (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Generated HTML. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> getHtmlFooterWithHttpInfo(String serverid, String xNonce, HtmlFooterBody htmlFooterBody) throws ApiException {
        okhttp3.Call localVarCall = getHtmlFooterValidateBeforeCall(serverid, xNonce, htmlFooterBody, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Generic HTML to add to footer. Required for login/logout/enrol functionality. (asynchronously)
     * HTML to add to footer of HTML page. Required permission: &#39;sessions&#39;. 
     * @param serverid Base64 encoded server id (required)
     * @param xNonce Nonce to identify the browser/webserver session (required)
     * @param htmlFooterBody Additional sessions that should be monitored through the websocket. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Generated HTML. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getHtmlFooterAsync(String serverid, String xNonce, HtmlFooterBody htmlFooterBody, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = getHtmlFooterValidateBeforeCall(serverid, xNonce, htmlFooterBody, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getHtmlLogin
     * @param serverid Base64 encoded server id (required)
     * @param xNonce Nonce to identify the browser/webserver session (required)
     * @param userContext Session information to display to user. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Generated HTML. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getHtmlLoginCall(String serverid, String xNonce, UserContext userContext, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = userContext;

        // create path and map variables
        String localVarPath = "/servers/{serverid}/sessions/html/login"
            .replace("{" + "serverid" + "}", localVarApiClient.escapeString(serverid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xNonce != null) {
            localVarHeaderParams.put("X-nonce", localVarApiClient.parameterToString(xNonce));
        }

        final String[] localVarAccepts = {
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "role_id" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getHtmlLoginValidateBeforeCall(String serverid, String xNonce, UserContext userContext, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serverid' is set
        if (serverid == null) {
            throw new ApiException("Missing the required parameter 'serverid' when calling getHtmlLogin(Async)");
        }

        // verify the required parameter 'xNonce' is set
        if (xNonce == null) {
            throw new ApiException("Missing the required parameter 'xNonce' when calling getHtmlLogin(Async)");
        }

        return getHtmlLoginCall(serverid, xNonce, userContext, _callback);

    }

    /**
     * Generate HTML for the login block
     * Generate HTML for the login block. Required permission: &#39;sessions&#39;. 
     * @param serverid Base64 encoded server id (required)
     * @param xNonce Nonce to identify the browser/webserver session (required)
     * @param userContext Session information to display to user. (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Generated HTML. </td><td>  -  </td></tr>
     </table>
     */
    public String getHtmlLogin(String serverid, String xNonce, UserContext userContext) throws ApiException {
        ApiResponse<String> localVarResp = getHtmlLoginWithHttpInfo(serverid, xNonce, userContext);
        return localVarResp.getData();
    }

    /**
     * Generate HTML for the login block
     * Generate HTML for the login block. Required permission: &#39;sessions&#39;. 
     * @param serverid Base64 encoded server id (required)
     * @param xNonce Nonce to identify the browser/webserver session (required)
     * @param userContext Session information to display to user. (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Generated HTML. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> getHtmlLoginWithHttpInfo(String serverid, String xNonce, UserContext userContext) throws ApiException {
        okhttp3.Call localVarCall = getHtmlLoginValidateBeforeCall(serverid, xNonce, userContext, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Generate HTML for the login block (asynchronously)
     * Generate HTML for the login block. Required permission: &#39;sessions&#39;. 
     * @param serverid Base64 encoded server id (required)
     * @param xNonce Nonce to identify the browser/webserver session (required)
     * @param userContext Session information to display to user. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Generated HTML. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getHtmlLoginAsync(String serverid, String xNonce, UserContext userContext, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = getHtmlLoginValidateBeforeCall(serverid, xNonce, userContext, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSession_0
     * @param serverid Base64 encoded server id (required)
     * @param xNonce Nonce to identify the browser/webserver session (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Current login status. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSession_0Call(String serverid, String xNonce, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/servers/{serverid}/sessions/"
            .replace("{" + "serverid" + "}", localVarApiClient.escapeString(serverid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xNonce != null) {
            localVarHeaderParams.put("X-nonce", localVarApiClient.parameterToString(xNonce));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "role_id" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSession_0ValidateBeforeCall(String serverid, String xNonce, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serverid' is set
        if (serverid == null) {
            throw new ApiException("Missing the required parameter 'serverid' when calling getSession_0(Async)");
        }

        // verify the required parameter 'xNonce' is set
        if (xNonce == null) {
            throw new ApiException("Missing the required parameter 'xNonce' when calling getSession_0(Async)");
        }

        return getSession_0Call(serverid, xNonce, _callback);

    }

    /**
     * Check if the user is logged in
     * Based on the browser/webserver session identifier, check if the user is logged in and return the associated username. This also returns additional information: the data for the login qr code and whether or not a loggin can be provoked directly from the server. Required permission: &#39;sessions&#39;.
     * @param serverid Base64 encoded server id (required)
     * @param xNonce Nonce to identify the browser/webserver session (required)
     * @return LoginStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Current login status. </td><td>  -  </td></tr>
     </table>
     */
    public LoginStatus getSession_0(String serverid, String xNonce) throws ApiException {
        ApiResponse<LoginStatus> localVarResp = getSession_0WithHttpInfo(serverid, xNonce);
        return localVarResp.getData();
    }

    /**
     * Check if the user is logged in
     * Based on the browser/webserver session identifier, check if the user is logged in and return the associated username. This also returns additional information: the data for the login qr code and whether or not a loggin can be provoked directly from the server. Required permission: &#39;sessions&#39;.
     * @param serverid Base64 encoded server id (required)
     * @param xNonce Nonce to identify the browser/webserver session (required)
     * @return ApiResponse&lt;LoginStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Current login status. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LoginStatus> getSession_0WithHttpInfo(String serverid, String xNonce) throws ApiException {
        okhttp3.Call localVarCall = getSession_0ValidateBeforeCall(serverid, xNonce, null);
        Type localVarReturnType = new TypeToken<LoginStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Check if the user is logged in (asynchronously)
     * Based on the browser/webserver session identifier, check if the user is logged in and return the associated username. This also returns additional information: the data for the login qr code and whether or not a loggin can be provoked directly from the server. Required permission: &#39;sessions&#39;.
     * @param serverid Base64 encoded server id (required)
     * @param xNonce Nonce to identify the browser/webserver session (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Current login status. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSession_0Async(String serverid, String xNonce, final ApiCallback<LoginStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSession_0ValidateBeforeCall(serverid, xNonce, _callback);
        Type localVarReturnType = new TypeToken<LoginStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for logout_0
     * @param serverid Base64 encoded server id (required)
     * @param xNonce Nonce to identify the browser/webserver session (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call logout_0Call(String serverid, String xNonce, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/servers/{serverid}/sessions/logout"
            .replace("{" + "serverid" + "}", localVarApiClient.escapeString(serverid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xNonce != null) {
            localVarHeaderParams.put("X-nonce", localVarApiClient.parameterToString(xNonce));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "role_id" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call logout_0ValidateBeforeCall(String serverid, String xNonce, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serverid' is set
        if (serverid == null) {
            throw new ApiException("Missing the required parameter 'serverid' when calling logout_0(Async)");
        }

        // verify the required parameter 'xNonce' is set
        if (xNonce == null) {
            throw new ApiException("Missing the required parameter 'xNonce' when calling logout_0(Async)");
        }

        return logout_0Call(serverid, xNonce, _callback);

    }

    /**
     * Force a logout on the given session
     * Force a logout on the given session. Required permission: &#39;sessions&#39;.
     * @param serverid Base64 encoded server id (required)
     * @param xNonce Nonce to identify the browser/webserver session (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok </td><td>  -  </td></tr>
     </table>
     */
    public void logout_0(String serverid, String xNonce) throws ApiException {
        logout_0WithHttpInfo(serverid, xNonce);
    }

    /**
     * Force a logout on the given session
     * Force a logout on the given session. Required permission: &#39;sessions&#39;.
     * @param serverid Base64 encoded server id (required)
     * @param xNonce Nonce to identify the browser/webserver session (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> logout_0WithHttpInfo(String serverid, String xNonce) throws ApiException {
        okhttp3.Call localVarCall = logout_0ValidateBeforeCall(serverid, xNonce, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Force a logout on the given session (asynchronously)
     * Force a logout on the given session. Required permission: &#39;sessions&#39;.
     * @param serverid Base64 encoded server id (required)
     * @param xNonce Nonce to identify the browser/webserver session (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call logout_0Async(String serverid, String xNonce, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = logout_0ValidateBeforeCall(serverid, xNonce, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
