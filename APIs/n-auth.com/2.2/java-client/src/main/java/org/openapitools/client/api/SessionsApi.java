/*
 * nextAuth API
 * API for the nextAuth server
 *
 * The version of the OpenAPI document: 2.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.io.File;
import org.openapitools.client.model.LoginStatus;
import org.openapitools.client.model.UserContext;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SessionsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public SessionsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SessionsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getQrLogin
     * @param serverid Base64 encoded server id (required)
     * @param xNonce Nonce to identify the browser/webserver session (required)
     * @param img \&quot;png\&quot; for a PNG image, not set for raw data in the qr code (optional)
     * @param s size in pixels of the qr code, defaults to 500 (optional)
     * @param userContext Session information to display to user. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Raw byte array containing the login qr code data (either raw or as a PNG image). </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getQrLoginCall(String serverid, String xNonce, String img, Integer s, UserContext userContext, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = userContext;

        // create path and map variables
        String localVarPath = "/servers/{serverid}/sessions/qr/login"
            .replace("{" + "serverid" + "}", localVarApiClient.escapeString(serverid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (img != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("img", img));
        }

        if (s != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("s", s));
        }

        if (xNonce != null) {
            localVarHeaderParams.put("X-nonce", localVarApiClient.parameterToString(xNonce));
        }

        final String[] localVarAccepts = {
            "application/octet-stream"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "role_id" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getQrLoginValidateBeforeCall(String serverid, String xNonce, String img, Integer s, UserContext userContext, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serverid' is set
        if (serverid == null) {
            throw new ApiException("Missing the required parameter 'serverid' when calling getQrLogin(Async)");
        }

        // verify the required parameter 'xNonce' is set
        if (xNonce == null) {
            throw new ApiException("Missing the required parameter 'xNonce' when calling getQrLogin(Async)");
        }

        return getQrLoginCall(serverid, xNonce, img, s, userContext, _callback);

    }

    /**
     * Generate data for a login qr code
     * Returns the data for a login qr code. Required permission: &#39;sessions&#39;.
     * @param serverid Base64 encoded server id (required)
     * @param xNonce Nonce to identify the browser/webserver session (required)
     * @param img \&quot;png\&quot; for a PNG image, not set for raw data in the qr code (optional)
     * @param s size in pixels of the qr code, defaults to 500 (optional)
     * @param userContext Session information to display to user. (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Raw byte array containing the login qr code data (either raw or as a PNG image). </td><td>  -  </td></tr>
     </table>
     */
    public File getQrLogin(String serverid, String xNonce, String img, Integer s, UserContext userContext) throws ApiException {
        ApiResponse<File> localVarResp = getQrLoginWithHttpInfo(serverid, xNonce, img, s, userContext);
        return localVarResp.getData();
    }

    /**
     * Generate data for a login qr code
     * Returns the data for a login qr code. Required permission: &#39;sessions&#39;.
     * @param serverid Base64 encoded server id (required)
     * @param xNonce Nonce to identify the browser/webserver session (required)
     * @param img \&quot;png\&quot; for a PNG image, not set for raw data in the qr code (optional)
     * @param s size in pixels of the qr code, defaults to 500 (optional)
     * @param userContext Session information to display to user. (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Raw byte array containing the login qr code data (either raw or as a PNG image). </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> getQrLoginWithHttpInfo(String serverid, String xNonce, String img, Integer s, UserContext userContext) throws ApiException {
        okhttp3.Call localVarCall = getQrLoginValidateBeforeCall(serverid, xNonce, img, s, userContext, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Generate data for a login qr code (asynchronously)
     * Returns the data for a login qr code. Required permission: &#39;sessions&#39;.
     * @param serverid Base64 encoded server id (required)
     * @param xNonce Nonce to identify the browser/webserver session (required)
     * @param img \&quot;png\&quot; for a PNG image, not set for raw data in the qr code (optional)
     * @param s size in pixels of the qr code, defaults to 500 (optional)
     * @param userContext Session information to display to user. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Raw byte array containing the login qr code data (either raw or as a PNG image). </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getQrLoginAsync(String serverid, String xNonce, String img, Integer s, UserContext userContext, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = getQrLoginValidateBeforeCall(serverid, xNonce, img, s, userContext, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSession
     * @param serverid Base64 encoded server id (required)
     * @param xNonce Nonce to identify the browser/webserver session (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Current login status. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSessionCall(String serverid, String xNonce, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/servers/{serverid}/sessions/"
            .replace("{" + "serverid" + "}", localVarApiClient.escapeString(serverid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xNonce != null) {
            localVarHeaderParams.put("X-nonce", localVarApiClient.parameterToString(xNonce));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "role_id" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSessionValidateBeforeCall(String serverid, String xNonce, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serverid' is set
        if (serverid == null) {
            throw new ApiException("Missing the required parameter 'serverid' when calling getSession(Async)");
        }

        // verify the required parameter 'xNonce' is set
        if (xNonce == null) {
            throw new ApiException("Missing the required parameter 'xNonce' when calling getSession(Async)");
        }

        return getSessionCall(serverid, xNonce, _callback);

    }

    /**
     * Check if the user is logged in
     * Based on the browser/webserver session identifier, check if the user is logged in and return the associated username. This also returns additional information: the data for the login qr code and whether or not a loggin can be provoked directly from the server. Required permission: &#39;sessions&#39;.
     * @param serverid Base64 encoded server id (required)
     * @param xNonce Nonce to identify the browser/webserver session (required)
     * @return LoginStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Current login status. </td><td>  -  </td></tr>
     </table>
     */
    public LoginStatus getSession(String serverid, String xNonce) throws ApiException {
        ApiResponse<LoginStatus> localVarResp = getSessionWithHttpInfo(serverid, xNonce);
        return localVarResp.getData();
    }

    /**
     * Check if the user is logged in
     * Based on the browser/webserver session identifier, check if the user is logged in and return the associated username. This also returns additional information: the data for the login qr code and whether or not a loggin can be provoked directly from the server. Required permission: &#39;sessions&#39;.
     * @param serverid Base64 encoded server id (required)
     * @param xNonce Nonce to identify the browser/webserver session (required)
     * @return ApiResponse&lt;LoginStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Current login status. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LoginStatus> getSessionWithHttpInfo(String serverid, String xNonce) throws ApiException {
        okhttp3.Call localVarCall = getSessionValidateBeforeCall(serverid, xNonce, null);
        Type localVarReturnType = new TypeToken<LoginStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Check if the user is logged in (asynchronously)
     * Based on the browser/webserver session identifier, check if the user is logged in and return the associated username. This also returns additional information: the data for the login qr code and whether or not a loggin can be provoked directly from the server. Required permission: &#39;sessions&#39;.
     * @param serverid Base64 encoded server id (required)
     * @param xNonce Nonce to identify the browser/webserver session (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Current login status. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSessionAsync(String serverid, String xNonce, final ApiCallback<LoginStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSessionValidateBeforeCall(serverid, xNonce, _callback);
        Type localVarReturnType = new TypeToken<LoginStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for logout
     * @param serverid Base64 encoded server id (required)
     * @param xNonce Nonce to identify the browser/webserver session (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call logoutCall(String serverid, String xNonce, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/servers/{serverid}/sessions/logout"
            .replace("{" + "serverid" + "}", localVarApiClient.escapeString(serverid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xNonce != null) {
            localVarHeaderParams.put("X-nonce", localVarApiClient.parameterToString(xNonce));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "role_id" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call logoutValidateBeforeCall(String serverid, String xNonce, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serverid' is set
        if (serverid == null) {
            throw new ApiException("Missing the required parameter 'serverid' when calling logout(Async)");
        }

        // verify the required parameter 'xNonce' is set
        if (xNonce == null) {
            throw new ApiException("Missing the required parameter 'xNonce' when calling logout(Async)");
        }

        return logoutCall(serverid, xNonce, _callback);

    }

    /**
     * Force a logout on the given session
     * Force a logout on the given session. Required permission: &#39;sessions&#39;.
     * @param serverid Base64 encoded server id (required)
     * @param xNonce Nonce to identify the browser/webserver session (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok </td><td>  -  </td></tr>
     </table>
     */
    public void logout(String serverid, String xNonce) throws ApiException {
        logoutWithHttpInfo(serverid, xNonce);
    }

    /**
     * Force a logout on the given session
     * Force a logout on the given session. Required permission: &#39;sessions&#39;.
     * @param serverid Base64 encoded server id (required)
     * @param xNonce Nonce to identify the browser/webserver session (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> logoutWithHttpInfo(String serverid, String xNonce) throws ApiException {
        okhttp3.Call localVarCall = logoutValidateBeforeCall(serverid, xNonce, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Force a logout on the given session (asynchronously)
     * Force a logout on the given session. Required permission: &#39;sessions&#39;.
     * @param serverid Base64 encoded server id (required)
     * @param xNonce Nonce to identify the browser/webserver session (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> ok </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call logoutAsync(String serverid, String xNonce, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = logoutValidateBeforeCall(serverid, xNonce, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for provokeLogin
     * @param serverid Base64 encoded server id (required)
     * @param xNonce Nonce to identify the browser/webserver session (required)
     * @param userContext Session information to display to user. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call provokeLoginCall(String serverid, String xNonce, UserContext userContext, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = userContext;

        // create path and map variables
        String localVarPath = "/servers/{serverid}/sessions/provokelogin"
            .replace("{" + "serverid" + "}", localVarApiClient.escapeString(serverid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xNonce != null) {
            localVarHeaderParams.put("X-nonce", localVarApiClient.parameterToString(xNonce));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "role_id" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call provokeLoginValidateBeforeCall(String serverid, String xNonce, UserContext userContext, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serverid' is set
        if (serverid == null) {
            throw new ApiException("Missing the required parameter 'serverid' when calling provokeLogin(Async)");
        }

        // verify the required parameter 'xNonce' is set
        if (xNonce == null) {
            throw new ApiException("Missing the required parameter 'xNonce' when calling provokeLogin(Async)");
        }

        return provokeLoginCall(serverid, xNonce, userContext, _callback);

    }

    /**
     * Push a login confirmation to the user&#39;s app
     * Push a login to the nextAuth app for the user to confirm, based on last account that successfully logged in for the given session. Required permission: &#39;sessions&#39;. 
     * @param serverid Base64 encoded server id (required)
     * @param xNonce Nonce to identify the browser/webserver session (required)
     * @param userContext Session information to display to user. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void provokeLogin(String serverid, String xNonce, UserContext userContext) throws ApiException {
        provokeLoginWithHttpInfo(serverid, xNonce, userContext);
    }

    /**
     * Push a login confirmation to the user&#39;s app
     * Push a login to the nextAuth app for the user to confirm, based on last account that successfully logged in for the given session. Required permission: &#39;sessions&#39;. 
     * @param serverid Base64 encoded server id (required)
     * @param xNonce Nonce to identify the browser/webserver session (required)
     * @param userContext Session information to display to user. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> provokeLoginWithHttpInfo(String serverid, String xNonce, UserContext userContext) throws ApiException {
        okhttp3.Call localVarCall = provokeLoginValidateBeforeCall(serverid, xNonce, userContext, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Push a login confirmation to the user&#39;s app (asynchronously)
     * Push a login to the nextAuth app for the user to confirm, based on last account that successfully logged in for the given session. Required permission: &#39;sessions&#39;. 
     * @param serverid Base64 encoded server id (required)
     * @param xNonce Nonce to identify the browser/webserver session (required)
     * @param userContext Session information to display to user. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call provokeLoginAsync(String serverid, String xNonce, UserContext userContext, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = provokeLoginValidateBeforeCall(serverid, xNonce, userContext, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for provokeLoginOnAccount
     * @param serverid Base64 encoded server id (required)
     * @param xNonce Base64 encoded nonce to identify the browser/webserver session (required)
     * @param accountid Account id (required)
     * @param userContext Session information to display to user (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call provokeLoginOnAccountCall(String serverid, String xNonce, Integer accountid, UserContext userContext, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = userContext;

        // create path and map variables
        String localVarPath = "/servers/{serverid}/accounts/{accountid}/provokelogin"
            .replace("{" + "serverid" + "}", localVarApiClient.escapeString(serverid.toString()))
            .replace("{" + "accountid" + "}", localVarApiClient.escapeString(accountid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xNonce != null) {
            localVarHeaderParams.put("X-nonce", localVarApiClient.parameterToString(xNonce));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "role_id" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call provokeLoginOnAccountValidateBeforeCall(String serverid, String xNonce, Integer accountid, UserContext userContext, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serverid' is set
        if (serverid == null) {
            throw new ApiException("Missing the required parameter 'serverid' when calling provokeLoginOnAccount(Async)");
        }

        // verify the required parameter 'xNonce' is set
        if (xNonce == null) {
            throw new ApiException("Missing the required parameter 'xNonce' when calling provokeLoginOnAccount(Async)");
        }

        // verify the required parameter 'accountid' is set
        if (accountid == null) {
            throw new ApiException("Missing the required parameter 'accountid' when calling provokeLoginOnAccount(Async)");
        }

        return provokeLoginOnAccountCall(serverid, xNonce, accountid, userContext, _callback);

    }

    /**
     * Push a login confirmation to the user&#39;s app
     * Push a login to the nextAuth app for the user to confirm, based on the given account (app instance). Required permission: &#39;sessions&#39; or &#39;accounts&#39;.
     * @param serverid Base64 encoded server id (required)
     * @param xNonce Base64 encoded nonce to identify the browser/webserver session (required)
     * @param accountid Account id (required)
     * @param userContext Session information to display to user (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void provokeLoginOnAccount(String serverid, String xNonce, Integer accountid, UserContext userContext) throws ApiException {
        provokeLoginOnAccountWithHttpInfo(serverid, xNonce, accountid, userContext);
    }

    /**
     * Push a login confirmation to the user&#39;s app
     * Push a login to the nextAuth app for the user to confirm, based on the given account (app instance). Required permission: &#39;sessions&#39; or &#39;accounts&#39;.
     * @param serverid Base64 encoded server id (required)
     * @param xNonce Base64 encoded nonce to identify the browser/webserver session (required)
     * @param accountid Account id (required)
     * @param userContext Session information to display to user (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> provokeLoginOnAccountWithHttpInfo(String serverid, String xNonce, Integer accountid, UserContext userContext) throws ApiException {
        okhttp3.Call localVarCall = provokeLoginOnAccountValidateBeforeCall(serverid, xNonce, accountid, userContext, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Push a login confirmation to the user&#39;s app (asynchronously)
     * Push a login to the nextAuth app for the user to confirm, based on the given account (app instance). Required permission: &#39;sessions&#39; or &#39;accounts&#39;.
     * @param serverid Base64 encoded server id (required)
     * @param xNonce Base64 encoded nonce to identify the browser/webserver session (required)
     * @param accountid Account id (required)
     * @param userContext Session information to display to user (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call provokeLoginOnAccountAsync(String serverid, String xNonce, Integer accountid, UserContext userContext, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = provokeLoginOnAccountValidateBeforeCall(serverid, xNonce, accountid, userContext, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for provokeLoginOnUser
     * @param serverid Base64 encoded server id (required)
     * @param xNonce Nonce to identify the browser/webserver session (required)
     * @param userid User name (required)
     * @param userContext Session information to display to user. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call provokeLoginOnUserCall(String serverid, String xNonce, String userid, UserContext userContext, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = userContext;

        // create path and map variables
        String localVarPath = "/servers/{serverid}/users/{userid}/provokelogin"
            .replace("{" + "serverid" + "}", localVarApiClient.escapeString(serverid.toString()))
            .replace("{" + "userid" + "}", localVarApiClient.escapeString(userid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xNonce != null) {
            localVarHeaderParams.put("X-nonce", localVarApiClient.parameterToString(xNonce));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "role_id" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call provokeLoginOnUserValidateBeforeCall(String serverid, String xNonce, String userid, UserContext userContext, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serverid' is set
        if (serverid == null) {
            throw new ApiException("Missing the required parameter 'serverid' when calling provokeLoginOnUser(Async)");
        }

        // verify the required parameter 'xNonce' is set
        if (xNonce == null) {
            throw new ApiException("Missing the required parameter 'xNonce' when calling provokeLoginOnUser(Async)");
        }

        // verify the required parameter 'userid' is set
        if (userid == null) {
            throw new ApiException("Missing the required parameter 'userid' when calling provokeLoginOnUser(Async)");
        }

        return provokeLoginOnUserCall(serverid, xNonce, userid, userContext, _callback);

    }

    /**
     * Push a login confirmation to the user&#39;s app
     * Push a login to the nextAuth app for the user to confirm, based on the given userid. Required permission: &#39;sessions&#39; or &#39;users&#39;.
     * @param serverid Base64 encoded server id (required)
     * @param xNonce Nonce to identify the browser/webserver session (required)
     * @param userid User name (required)
     * @param userContext Session information to display to user. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void provokeLoginOnUser(String serverid, String xNonce, String userid, UserContext userContext) throws ApiException {
        provokeLoginOnUserWithHttpInfo(serverid, xNonce, userid, userContext);
    }

    /**
     * Push a login confirmation to the user&#39;s app
     * Push a login to the nextAuth app for the user to confirm, based on the given userid. Required permission: &#39;sessions&#39; or &#39;users&#39;.
     * @param serverid Base64 encoded server id (required)
     * @param xNonce Nonce to identify the browser/webserver session (required)
     * @param userid User name (required)
     * @param userContext Session information to display to user. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> provokeLoginOnUserWithHttpInfo(String serverid, String xNonce, String userid, UserContext userContext) throws ApiException {
        okhttp3.Call localVarCall = provokeLoginOnUserValidateBeforeCall(serverid, xNonce, userid, userContext, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Push a login confirmation to the user&#39;s app (asynchronously)
     * Push a login to the nextAuth app for the user to confirm, based on the given userid. Required permission: &#39;sessions&#39; or &#39;users&#39;.
     * @param serverid Base64 encoded server id (required)
     * @param xNonce Nonce to identify the browser/webserver session (required)
     * @param userid User name (required)
     * @param userContext Session information to display to user. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call provokeLoginOnUserAsync(String serverid, String xNonce, String userid, UserContext userContext, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = provokeLoginOnUserValidateBeforeCall(serverid, xNonce, userid, userContext, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
