/*
 * nextAuth API
 * API for the nextAuth server
 *
 * The version of the OpenAPI document: 2.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Accounts;
import org.openapitools.client.model.Users;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class UsersApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public UsersApi() {
        this(Configuration.getDefaultApiClient());
    }

    public UsersApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for deleteUser
     * @param serverid Base64 encoded server id (required)
     * @param userid User name (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> On successful delete </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteUserCall(String serverid, String userid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/servers/{serverid}/users/{userid}/"
            .replace("{" + "serverid" + "}", localVarApiClient.escapeString(serverid.toString()))
            .replace("{" + "userid" + "}", localVarApiClient.escapeString(userid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "role_id" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteUserValidateBeforeCall(String serverid, String userid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serverid' is set
        if (serverid == null) {
            throw new ApiException("Missing the required parameter 'serverid' when calling deleteUser(Async)");
        }

        // verify the required parameter 'userid' is set
        if (userid == null) {
            throw new ApiException("Missing the required parameter 'userid' when calling deleteUser(Async)");
        }

        return deleteUserCall(serverid, userid, _callback);

    }

    /**
     * Delete a specific user
     * Delete a user. Required permission: &#39;users&#39;.
     * @param serverid Base64 encoded server id (required)
     * @param userid User name (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> On successful delete </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User not found </td><td>  -  </td></tr>
     </table>
     */
    public void deleteUser(String serverid, String userid) throws ApiException {
        deleteUserWithHttpInfo(serverid, userid);
    }

    /**
     * Delete a specific user
     * Delete a user. Required permission: &#39;users&#39;.
     * @param serverid Base64 encoded server id (required)
     * @param userid User name (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> On successful delete </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteUserWithHttpInfo(String serverid, String userid) throws ApiException {
        okhttp3.Call localVarCall = deleteUserValidateBeforeCall(serverid, userid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a specific user (asynchronously)
     * Delete a user. Required permission: &#39;users&#39;.
     * @param serverid Base64 encoded server id (required)
     * @param userid User name (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> On successful delete </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteUserAsync(String serverid, String userid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteUserValidateBeforeCall(serverid, userid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteUserAccounts
     * @param serverid Base64 encoded server id (required)
     * @param userid User name (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> On successful delete </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteUserAccountsCall(String serverid, String userid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/servers/{serverid}/users/{userid}/accounts"
            .replace("{" + "serverid" + "}", localVarApiClient.escapeString(serverid.toString()))
            .replace("{" + "userid" + "}", localVarApiClient.escapeString(userid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "role_id" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteUserAccountsValidateBeforeCall(String serverid, String userid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serverid' is set
        if (serverid == null) {
            throw new ApiException("Missing the required parameter 'serverid' when calling deleteUserAccounts(Async)");
        }

        // verify the required parameter 'userid' is set
        if (userid == null) {
            throw new ApiException("Missing the required parameter 'userid' when calling deleteUserAccounts(Async)");
        }

        return deleteUserAccountsCall(serverid, userid, _callback);

    }

    /**
     * Delete all accounts of a specific user
     * Delete all accounts corresponding to this user. The user itself is not deleted. Required permission: &#39;accounts&#39; or &#39;users&#39;.
     * @param serverid Base64 encoded server id (required)
     * @param userid User name (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> On successful delete </td><td>  -  </td></tr>
     </table>
     */
    public void deleteUserAccounts(String serverid, String userid) throws ApiException {
        deleteUserAccountsWithHttpInfo(serverid, userid);
    }

    /**
     * Delete all accounts of a specific user
     * Delete all accounts corresponding to this user. The user itself is not deleted. Required permission: &#39;accounts&#39; or &#39;users&#39;.
     * @param serverid Base64 encoded server id (required)
     * @param userid User name (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> On successful delete </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteUserAccountsWithHttpInfo(String serverid, String userid) throws ApiException {
        okhttp3.Call localVarCall = deleteUserAccountsValidateBeforeCall(serverid, userid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete all accounts of a specific user (asynchronously)
     * Delete all accounts corresponding to this user. The user itself is not deleted. Required permission: &#39;accounts&#39; or &#39;users&#39;.
     * @param serverid Base64 encoded server id (required)
     * @param userid User name (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> On successful delete </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteUserAccountsAsync(String serverid, String userid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteUserAccountsValidateBeforeCall(serverid, userid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteUserAttribute
     * @param serverid Base64 encoded server id (required)
     * @param userid User name (required)
     * @param attributekey Key of the attribute (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> On successful delete </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteUserAttributeCall(String serverid, String userid, String attributekey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/servers/{serverid}/users/{userid}/attributes/{attributekey}"
            .replace("{" + "serverid" + "}", localVarApiClient.escapeString(serverid.toString()))
            .replace("{" + "userid" + "}", localVarApiClient.escapeString(userid.toString()))
            .replace("{" + "attributekey" + "}", localVarApiClient.escapeString(attributekey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "role_id" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteUserAttributeValidateBeforeCall(String serverid, String userid, String attributekey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serverid' is set
        if (serverid == null) {
            throw new ApiException("Missing the required parameter 'serverid' when calling deleteUserAttribute(Async)");
        }

        // verify the required parameter 'userid' is set
        if (userid == null) {
            throw new ApiException("Missing the required parameter 'userid' when calling deleteUserAttribute(Async)");
        }

        // verify the required parameter 'attributekey' is set
        if (attributekey == null) {
            throw new ApiException("Missing the required parameter 'attributekey' when calling deleteUserAttribute(Async)");
        }

        return deleteUserAttributeCall(serverid, userid, attributekey, _callback);

    }

    /**
     * Delete specific attribute of a specific user
     * Delete attribute with the specified key of a specific user. Required permission: &#39;users&#39;.
     * @param serverid Base64 encoded server id (required)
     * @param userid User name (required)
     * @param attributekey Key of the attribute (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> On successful delete </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User not found </td><td>  -  </td></tr>
     </table>
     */
    public void deleteUserAttribute(String serverid, String userid, String attributekey) throws ApiException {
        deleteUserAttributeWithHttpInfo(serverid, userid, attributekey);
    }

    /**
     * Delete specific attribute of a specific user
     * Delete attribute with the specified key of a specific user. Required permission: &#39;users&#39;.
     * @param serverid Base64 encoded server id (required)
     * @param userid User name (required)
     * @param attributekey Key of the attribute (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> On successful delete </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteUserAttributeWithHttpInfo(String serverid, String userid, String attributekey) throws ApiException {
        okhttp3.Call localVarCall = deleteUserAttributeValidateBeforeCall(serverid, userid, attributekey, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete specific attribute of a specific user (asynchronously)
     * Delete attribute with the specified key of a specific user. Required permission: &#39;users&#39;.
     * @param serverid Base64 encoded server id (required)
     * @param userid User name (required)
     * @param attributekey Key of the attribute (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> On successful delete </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteUserAttributeAsync(String serverid, String userid, String attributekey, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteUserAttributeValidateBeforeCall(serverid, userid, attributekey, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteUserAttributes
     * @param serverid Base64 encoded server id (required)
     * @param userid User name (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> On successful delete </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteUserAttributesCall(String serverid, String userid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/servers/{serverid}/users/{userid}/attributes/"
            .replace("{" + "serverid" + "}", localVarApiClient.escapeString(serverid.toString()))
            .replace("{" + "userid" + "}", localVarApiClient.escapeString(userid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "role_id" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteUserAttributesValidateBeforeCall(String serverid, String userid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serverid' is set
        if (serverid == null) {
            throw new ApiException("Missing the required parameter 'serverid' when calling deleteUserAttributes(Async)");
        }

        // verify the required parameter 'userid' is set
        if (userid == null) {
            throw new ApiException("Missing the required parameter 'userid' when calling deleteUserAttributes(Async)");
        }

        return deleteUserAttributesCall(serverid, userid, _callback);

    }

    /**
     * Delete all attributes of a specific user
     * Delete all attributes of a specific user. Required permission: &#39;users&#39;.
     * @param serverid Base64 encoded server id (required)
     * @param userid User name (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> On successful delete </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User not found </td><td>  -  </td></tr>
     </table>
     */
    public void deleteUserAttributes(String serverid, String userid) throws ApiException {
        deleteUserAttributesWithHttpInfo(serverid, userid);
    }

    /**
     * Delete all attributes of a specific user
     * Delete all attributes of a specific user. Required permission: &#39;users&#39;.
     * @param serverid Base64 encoded server id (required)
     * @param userid User name (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> On successful delete </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteUserAttributesWithHttpInfo(String serverid, String userid) throws ApiException {
        okhttp3.Call localVarCall = deleteUserAttributesValidateBeforeCall(serverid, userid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete all attributes of a specific user (asynchronously)
     * Delete all attributes of a specific user. Required permission: &#39;users&#39;.
     * @param serverid Base64 encoded server id (required)
     * @param userid User name (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> On successful delete </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteUserAttributesAsync(String serverid, String userid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteUserAttributesValidateBeforeCall(serverid, userid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getUser
     * @param serverid Base64 encoded server id (required)
     * @param userid User name (required)
     * @param limit Limit the number of results (optional)
     * @param marker Offset in the result list (optional)
     * @param sort Sort the results by column. You can also specify ascending (default if not specified) or descending, e.g., *column:asc* . You can also sort by multiple columns, e.g., *column1:desc,column2:asc* (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of accounts </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUserCall(String serverid, String userid, Integer limit, Integer marker, String sort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/servers/{serverid}/users/{userid}/accounts"
            .replace("{" + "serverid" + "}", localVarApiClient.escapeString(serverid.toString()))
            .replace("{" + "userid" + "}", localVarApiClient.escapeString(userid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (marker != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("marker", marker));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "role_id" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUserValidateBeforeCall(String serverid, String userid, Integer limit, Integer marker, String sort, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serverid' is set
        if (serverid == null) {
            throw new ApiException("Missing the required parameter 'serverid' when calling getUser(Async)");
        }

        // verify the required parameter 'userid' is set
        if (userid == null) {
            throw new ApiException("Missing the required parameter 'userid' when calling getUser(Async)");
        }

        return getUserCall(serverid, userid, limit, marker, sort, _callback);

    }

    /**
     * Get all accounts of a specific user
     * Returns an array containing all accounts corresponding to this user. Required permission: &#39;sessions&#39; or &#39;users&#39;.
     * @param serverid Base64 encoded server id (required)
     * @param userid User name (required)
     * @param limit Limit the number of results (optional)
     * @param marker Offset in the result list (optional)
     * @param sort Sort the results by column. You can also specify ascending (default if not specified) or descending, e.g., *column:asc* . You can also sort by multiple columns, e.g., *column1:desc,column2:asc* (optional)
     * @return Accounts
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of accounts </td><td>  -  </td></tr>
     </table>
     */
    public Accounts getUser(String serverid, String userid, Integer limit, Integer marker, String sort) throws ApiException {
        ApiResponse<Accounts> localVarResp = getUserWithHttpInfo(serverid, userid, limit, marker, sort);
        return localVarResp.getData();
    }

    /**
     * Get all accounts of a specific user
     * Returns an array containing all accounts corresponding to this user. Required permission: &#39;sessions&#39; or &#39;users&#39;.
     * @param serverid Base64 encoded server id (required)
     * @param userid User name (required)
     * @param limit Limit the number of results (optional)
     * @param marker Offset in the result list (optional)
     * @param sort Sort the results by column. You can also specify ascending (default if not specified) or descending, e.g., *column:asc* . You can also sort by multiple columns, e.g., *column1:desc,column2:asc* (optional)
     * @return ApiResponse&lt;Accounts&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of accounts </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Accounts> getUserWithHttpInfo(String serverid, String userid, Integer limit, Integer marker, String sort) throws ApiException {
        okhttp3.Call localVarCall = getUserValidateBeforeCall(serverid, userid, limit, marker, sort, null);
        Type localVarReturnType = new TypeToken<Accounts>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all accounts of a specific user (asynchronously)
     * Returns an array containing all accounts corresponding to this user. Required permission: &#39;sessions&#39; or &#39;users&#39;.
     * @param serverid Base64 encoded server id (required)
     * @param userid User name (required)
     * @param limit Limit the number of results (optional)
     * @param marker Offset in the result list (optional)
     * @param sort Sort the results by column. You can also specify ascending (default if not specified) or descending, e.g., *column:asc* . You can also sort by multiple columns, e.g., *column1:desc,column2:asc* (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of accounts </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUserAsync(String serverid, String userid, Integer limit, Integer marker, String sort, final ApiCallback<Accounts> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUserValidateBeforeCall(serverid, userid, limit, marker, sort, _callback);
        Type localVarReturnType = new TypeToken<Accounts>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getUserAttributes
     * @param serverid Base64 encoded server id (required)
     * @param userid User name (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of attributes </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUserAttributesCall(String serverid, String userid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/servers/{serverid}/users/{userid}/attributes/"
            .replace("{" + "serverid" + "}", localVarApiClient.escapeString(serverid.toString()))
            .replace("{" + "userid" + "}", localVarApiClient.escapeString(userid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "role_id" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUserAttributesValidateBeforeCall(String serverid, String userid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serverid' is set
        if (serverid == null) {
            throw new ApiException("Missing the required parameter 'serverid' when calling getUserAttributes(Async)");
        }

        // verify the required parameter 'userid' is set
        if (userid == null) {
            throw new ApiException("Missing the required parameter 'userid' when calling getUserAttributes(Async)");
        }

        return getUserAttributesCall(serverid, userid, _callback);

    }

    /**
     * Get all attributes of a specific user
     * Returns an array containing all attributes corresponding to this user. Required permission: &#39;sessions&#39; or &#39;users&#39;.
     * @param serverid Base64 encoded server id (required)
     * @param userid User name (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of attributes </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User not found </td><td>  -  </td></tr>
     </table>
     */
    public String getUserAttributes(String serverid, String userid) throws ApiException {
        ApiResponse<String> localVarResp = getUserAttributesWithHttpInfo(serverid, userid);
        return localVarResp.getData();
    }

    /**
     * Get all attributes of a specific user
     * Returns an array containing all attributes corresponding to this user. Required permission: &#39;sessions&#39; or &#39;users&#39;.
     * @param serverid Base64 encoded server id (required)
     * @param userid User name (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of attributes </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> getUserAttributesWithHttpInfo(String serverid, String userid) throws ApiException {
        okhttp3.Call localVarCall = getUserAttributesValidateBeforeCall(serverid, userid, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all attributes of a specific user (asynchronously)
     * Returns an array containing all attributes corresponding to this user. Required permission: &#39;sessions&#39; or &#39;users&#39;.
     * @param serverid Base64 encoded server id (required)
     * @param userid User name (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of attributes </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUserAttributesAsync(String serverid, String userid, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUserAttributesValidateBeforeCall(serverid, userid, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getUsers
     * @param serverid Base64 encoded server id (required)
     * @param filter Filter users based on an attribute. Takes the format *attributename&#x3D;attributevalue*. You can filter for multiple values at once, e.g. *group&#x3D;in:group1,group2* (optional)
     * @param search Search for a username LIKE %search% (optional)
     * @param limit Limit the number of results (optional)
     * @param marker Offset in the result list (optional)
     * @param sort Sort the results by column. You can also specify ascending (default if not specified) or descending, e.g., *column:asc* . You can also sort by multiple columns, e.g., *column1:desc,column2:asc* (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of users </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUsersCall(String serverid, String filter, String search, Integer limit, Integer marker, String sort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/servers/{serverid}/users/"
            .replace("{" + "serverid" + "}", localVarApiClient.escapeString(serverid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        if (search != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search", search));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (marker != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("marker", marker));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "role_id" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUsersValidateBeforeCall(String serverid, String filter, String search, Integer limit, Integer marker, String sort, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serverid' is set
        if (serverid == null) {
            throw new ApiException("Missing the required parameter 'serverid' when calling getUsers(Async)");
        }

        return getUsersCall(serverid, filter, search, limit, marker, sort, _callback);

    }

    /**
     * Get all users
     * Returns an array of arrays containing all accounts corresponding to all users. Required permission: &#39;users&#39;.
     * @param serverid Base64 encoded server id (required)
     * @param filter Filter users based on an attribute. Takes the format *attributename&#x3D;attributevalue*. You can filter for multiple values at once, e.g. *group&#x3D;in:group1,group2* (optional)
     * @param search Search for a username LIKE %search% (optional)
     * @param limit Limit the number of results (optional)
     * @param marker Offset in the result list (optional)
     * @param sort Sort the results by column. You can also specify ascending (default if not specified) or descending, e.g., *column:asc* . You can also sort by multiple columns, e.g., *column1:desc,column2:asc* (optional)
     * @return Users
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of users </td><td>  -  </td></tr>
     </table>
     */
    public Users getUsers(String serverid, String filter, String search, Integer limit, Integer marker, String sort) throws ApiException {
        ApiResponse<Users> localVarResp = getUsersWithHttpInfo(serverid, filter, search, limit, marker, sort);
        return localVarResp.getData();
    }

    /**
     * Get all users
     * Returns an array of arrays containing all accounts corresponding to all users. Required permission: &#39;users&#39;.
     * @param serverid Base64 encoded server id (required)
     * @param filter Filter users based on an attribute. Takes the format *attributename&#x3D;attributevalue*. You can filter for multiple values at once, e.g. *group&#x3D;in:group1,group2* (optional)
     * @param search Search for a username LIKE %search% (optional)
     * @param limit Limit the number of results (optional)
     * @param marker Offset in the result list (optional)
     * @param sort Sort the results by column. You can also specify ascending (default if not specified) or descending, e.g., *column:asc* . You can also sort by multiple columns, e.g., *column1:desc,column2:asc* (optional)
     * @return ApiResponse&lt;Users&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of users </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Users> getUsersWithHttpInfo(String serverid, String filter, String search, Integer limit, Integer marker, String sort) throws ApiException {
        okhttp3.Call localVarCall = getUsersValidateBeforeCall(serverid, filter, search, limit, marker, sort, null);
        Type localVarReturnType = new TypeToken<Users>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all users (asynchronously)
     * Returns an array of arrays containing all accounts corresponding to all users. Required permission: &#39;users&#39;.
     * @param serverid Base64 encoded server id (required)
     * @param filter Filter users based on an attribute. Takes the format *attributename&#x3D;attributevalue*. You can filter for multiple values at once, e.g. *group&#x3D;in:group1,group2* (optional)
     * @param search Search for a username LIKE %search% (optional)
     * @param limit Limit the number of results (optional)
     * @param marker Offset in the result list (optional)
     * @param sort Sort the results by column. You can also specify ascending (default if not specified) or descending, e.g., *column:asc* . You can also sort by multiple columns, e.g., *column1:desc,column2:asc* (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of users </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUsersAsync(String serverid, String filter, String search, Integer limit, Integer marker, String sort, final ApiCallback<Users> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUsersValidateBeforeCall(serverid, filter, search, limit, marker, sort, _callback);
        Type localVarReturnType = new TypeToken<Users>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for registerUser
     * @param serverid Base64 encoded server id (required)
     * @param xNonce Nonce to identify the browser/webserver session (required)
     * @param userid Username to register (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call registerUserCall(String serverid, String xNonce, String userid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/servers/{serverid}/sessions/registeruser"
            .replace("{" + "serverid" + "}", localVarApiClient.escapeString(serverid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (userid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userid", userid));
        }

        if (xNonce != null) {
            localVarHeaderParams.put("X-nonce", localVarApiClient.parameterToString(xNonce));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "role_id" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call registerUserValidateBeforeCall(String serverid, String xNonce, String userid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serverid' is set
        if (serverid == null) {
            throw new ApiException("Missing the required parameter 'serverid' when calling registerUser(Async)");
        }

        // verify the required parameter 'xNonce' is set
        if (xNonce == null) {
            throw new ApiException("Missing the required parameter 'xNonce' when calling registerUser(Async)");
        }

        // verify the required parameter 'userid' is set
        if (userid == null) {
            throw new ApiException("Missing the required parameter 'userid' when calling registerUser(Async)");
        }

        return registerUserCall(serverid, xNonce, userid, _callback);

    }

    /**
     * Register a userid for the currently logged in account.
     * Register a user for the currently logged in account. You can also directly pass a user name when generating an ENROL qr code. Required permission: &#39;users&#39;.
     * @param serverid Base64 encoded server id (required)
     * @param xNonce Nonce to identify the browser/webserver session (required)
     * @param userid Username to register (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void registerUser(String serverid, String xNonce, String userid) throws ApiException {
        registerUserWithHttpInfo(serverid, xNonce, userid);
    }

    /**
     * Register a userid for the currently logged in account.
     * Register a user for the currently logged in account. You can also directly pass a user name when generating an ENROL qr code. Required permission: &#39;users&#39;.
     * @param serverid Base64 encoded server id (required)
     * @param xNonce Nonce to identify the browser/webserver session (required)
     * @param userid Username to register (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> registerUserWithHttpInfo(String serverid, String xNonce, String userid) throws ApiException {
        okhttp3.Call localVarCall = registerUserValidateBeforeCall(serverid, xNonce, userid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Register a userid for the currently logged in account. (asynchronously)
     * Register a user for the currently logged in account. You can also directly pass a user name when generating an ENROL qr code. Required permission: &#39;users&#39;.
     * @param serverid Base64 encoded server id (required)
     * @param xNonce Nonce to identify the browser/webserver session (required)
     * @param userid Username to register (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call registerUserAsync(String serverid, String xNonce, String userid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = registerUserValidateBeforeCall(serverid, xNonce, userid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for setUserAttributes
     * @param serverid Base64 encoded server id (required)
     * @param userid User name (required)
     * @param attributes Array of attributes (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setUserAttributesCall(String serverid, String userid, Object attributes, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = attributes;

        // create path and map variables
        String localVarPath = "/servers/{serverid}/users/{userid}/attributes/"
            .replace("{" + "serverid" + "}", localVarApiClient.escapeString(serverid.toString()))
            .replace("{" + "userid" + "}", localVarApiClient.escapeString(userid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "role_id" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setUserAttributesValidateBeforeCall(String serverid, String userid, Object attributes, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serverid' is set
        if (serverid == null) {
            throw new ApiException("Missing the required parameter 'serverid' when calling setUserAttributes(Async)");
        }

        // verify the required parameter 'userid' is set
        if (userid == null) {
            throw new ApiException("Missing the required parameter 'userid' when calling setUserAttributes(Async)");
        }

        // verify the required parameter 'attributes' is set
        if (attributes == null) {
            throw new ApiException("Missing the required parameter 'attributes' when calling setUserAttributes(Async)");
        }

        return setUserAttributesCall(serverid, userid, attributes, _callback);

    }

    /**
     * Set all attributes of a specific user
     * Set the attributes of a specific user. Prior attributes with keys that are not provided in the body of the request will be deleted. Creates the user if not exists. Required permission: &#39;users&#39;.
     * @param serverid Base64 encoded server id (required)
     * @param userid User name (required)
     * @param attributes Array of attributes (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void setUserAttributes(String serverid, String userid, Object attributes) throws ApiException {
        setUserAttributesWithHttpInfo(serverid, userid, attributes);
    }

    /**
     * Set all attributes of a specific user
     * Set the attributes of a specific user. Prior attributes with keys that are not provided in the body of the request will be deleted. Creates the user if not exists. Required permission: &#39;users&#39;.
     * @param serverid Base64 encoded server id (required)
     * @param userid User name (required)
     * @param attributes Array of attributes (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> setUserAttributesWithHttpInfo(String serverid, String userid, Object attributes) throws ApiException {
        okhttp3.Call localVarCall = setUserAttributesValidateBeforeCall(serverid, userid, attributes, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Set all attributes of a specific user (asynchronously)
     * Set the attributes of a specific user. Prior attributes with keys that are not provided in the body of the request will be deleted. Creates the user if not exists. Required permission: &#39;users&#39;.
     * @param serverid Base64 encoded server id (required)
     * @param userid User name (required)
     * @param attributes Array of attributes (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setUserAttributesAsync(String serverid, String userid, Object attributes, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = setUserAttributesValidateBeforeCall(serverid, userid, attributes, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateUserAttributes
     * @param serverid Base64 encoded server id (required)
     * @param userid User name (required)
     * @param attributes Array of attributes (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> On successful update </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateUserAttributesCall(String serverid, String userid, Object attributes, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = attributes;

        // create path and map variables
        String localVarPath = "/servers/{serverid}/users/{userid}/attributes/"
            .replace("{" + "serverid" + "}", localVarApiClient.escapeString(serverid.toString()))
            .replace("{" + "userid" + "}", localVarApiClient.escapeString(userid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "role_id" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateUserAttributesValidateBeforeCall(String serverid, String userid, Object attributes, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serverid' is set
        if (serverid == null) {
            throw new ApiException("Missing the required parameter 'serverid' when calling updateUserAttributes(Async)");
        }

        // verify the required parameter 'userid' is set
        if (userid == null) {
            throw new ApiException("Missing the required parameter 'userid' when calling updateUserAttributes(Async)");
        }

        // verify the required parameter 'attributes' is set
        if (attributes == null) {
            throw new ApiException("Missing the required parameter 'attributes' when calling updateUserAttributes(Async)");
        }

        return updateUserAttributesCall(serverid, userid, attributes, _callback);

    }

    /**
     * Update specified attributes of a specific user
     * Update the specified attributes of a specific user. Prior attributes with keys that are not provided in the body of the request will not be deleted. Required permission: &#39;users&#39;.
     * @param serverid Base64 encoded server id (required)
     * @param userid User name (required)
     * @param attributes Array of attributes (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> On successful update </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User not found </td><td>  -  </td></tr>
     </table>
     */
    public void updateUserAttributes(String serverid, String userid, Object attributes) throws ApiException {
        updateUserAttributesWithHttpInfo(serverid, userid, attributes);
    }

    /**
     * Update specified attributes of a specific user
     * Update the specified attributes of a specific user. Prior attributes with keys that are not provided in the body of the request will not be deleted. Required permission: &#39;users&#39;.
     * @param serverid Base64 encoded server id (required)
     * @param userid User name (required)
     * @param attributes Array of attributes (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> On successful update </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> updateUserAttributesWithHttpInfo(String serverid, String userid, Object attributes) throws ApiException {
        okhttp3.Call localVarCall = updateUserAttributesValidateBeforeCall(serverid, userid, attributes, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update specified attributes of a specific user (asynchronously)
     * Update the specified attributes of a specific user. Prior attributes with keys that are not provided in the body of the request will not be deleted. Required permission: &#39;users&#39;.
     * @param serverid Base64 encoded server id (required)
     * @param userid User name (required)
     * @param attributes Array of attributes (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> On successful update </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateUserAttributesAsync(String serverid, String userid, Object attributes, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateUserAttributesValidateBeforeCall(serverid, userid, attributes, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
