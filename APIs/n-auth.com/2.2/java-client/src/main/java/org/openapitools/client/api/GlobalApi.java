/*
 * nextAuth API
 * API for the nextAuth server
 *
 * The version of the OpenAPI document: 2.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;



import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class GlobalApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public GlobalApi() {
        this(Configuration.getDefaultApiClient());
    }

    public GlobalApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for deleteGlobalAttribute
     * @param attributekey Key of the attribute (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> On successful delete </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteGlobalAttributeCall(String attributekey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/attributes/{attributekey}"
            .replace("{" + "attributekey" + "}", localVarApiClient.escapeString(attributekey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "role_id" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteGlobalAttributeValidateBeforeCall(String attributekey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'attributekey' is set
        if (attributekey == null) {
            throw new ApiException("Missing the required parameter 'attributekey' when calling deleteGlobalAttribute(Async)");
        }

        return deleteGlobalAttributeCall(attributekey, _callback);

    }

    /**
     * Delete specific global attribute
     * Delete global attribute with the specified key. Required: global &#39;servers&#39;.
     * @param attributekey Key of the attribute (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> On successful delete </td><td>  -  </td></tr>
     </table>
     */
    public void deleteGlobalAttribute(String attributekey) throws ApiException {
        deleteGlobalAttributeWithHttpInfo(attributekey);
    }

    /**
     * Delete specific global attribute
     * Delete global attribute with the specified key. Required: global &#39;servers&#39;.
     * @param attributekey Key of the attribute (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> On successful delete </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteGlobalAttributeWithHttpInfo(String attributekey) throws ApiException {
        okhttp3.Call localVarCall = deleteGlobalAttributeValidateBeforeCall(attributekey, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete specific global attribute (asynchronously)
     * Delete global attribute with the specified key. Required: global &#39;servers&#39;.
     * @param attributekey Key of the attribute (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> On successful delete </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteGlobalAttributeAsync(String attributekey, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteGlobalAttributeValidateBeforeCall(attributekey, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteGlobalAttributes
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> On successful delete </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteGlobalAttributesCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/attributes/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "role_id" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteGlobalAttributesValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return deleteGlobalAttributesCall(_callback);

    }

    /**
     * Delete all global attributes
     * Delete all global attributes. Required permission: global &#39;servers&#39;.
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> On successful delete </td><td>  -  </td></tr>
     </table>
     */
    public void deleteGlobalAttributes() throws ApiException {
        deleteGlobalAttributesWithHttpInfo();
    }

    /**
     * Delete all global attributes
     * Delete all global attributes. Required permission: global &#39;servers&#39;.
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> On successful delete </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteGlobalAttributesWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = deleteGlobalAttributesValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete all global attributes (asynchronously)
     * Delete all global attributes. Required permission: global &#39;servers&#39;.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> On successful delete </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteGlobalAttributesAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteGlobalAttributesValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteServerPrivilegedAttribute
     * @param serverid Base64 encoded server id (required)
     * @param attributekey Key of the attribute (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> On successful delete </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Server not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteServerPrivilegedAttributeCall(String serverid, String attributekey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/servers/{serverid}/privilegedattributes/{attributekey}"
            .replace("{" + "serverid" + "}", localVarApiClient.escapeString(serverid.toString()))
            .replace("{" + "attributekey" + "}", localVarApiClient.escapeString(attributekey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "role_id" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteServerPrivilegedAttributeValidateBeforeCall(String serverid, String attributekey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serverid' is set
        if (serverid == null) {
            throw new ApiException("Missing the required parameter 'serverid' when calling deleteServerPrivilegedAttribute(Async)");
        }

        // verify the required parameter 'attributekey' is set
        if (attributekey == null) {
            throw new ApiException("Missing the required parameter 'attributekey' when calling deleteServerPrivilegedAttribute(Async)");
        }

        return deleteServerPrivilegedAttributeCall(serverid, attributekey, _callback);

    }

    /**
     * Delete specific privileged attribute of a specific server
     * Delete privileged attribute with the specified key of a specific server. Required permission: global &#39;servers&#39;.
     * @param serverid Base64 encoded server id (required)
     * @param attributekey Key of the attribute (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> On successful delete </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Server not found </td><td>  -  </td></tr>
     </table>
     */
    public void deleteServerPrivilegedAttribute(String serverid, String attributekey) throws ApiException {
        deleteServerPrivilegedAttributeWithHttpInfo(serverid, attributekey);
    }

    /**
     * Delete specific privileged attribute of a specific server
     * Delete privileged attribute with the specified key of a specific server. Required permission: global &#39;servers&#39;.
     * @param serverid Base64 encoded server id (required)
     * @param attributekey Key of the attribute (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> On successful delete </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Server not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteServerPrivilegedAttributeWithHttpInfo(String serverid, String attributekey) throws ApiException {
        okhttp3.Call localVarCall = deleteServerPrivilegedAttributeValidateBeforeCall(serverid, attributekey, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete specific privileged attribute of a specific server (asynchronously)
     * Delete privileged attribute with the specified key of a specific server. Required permission: global &#39;servers&#39;.
     * @param serverid Base64 encoded server id (required)
     * @param attributekey Key of the attribute (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> On successful delete </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Server not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteServerPrivilegedAttributeAsync(String serverid, String attributekey, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteServerPrivilegedAttributeValidateBeforeCall(serverid, attributekey, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteServerPrivilegedAttributes
     * @param serverid Base64 encoded server id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> On successful delete </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteServerPrivilegedAttributesCall(String serverid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/servers/{serverid}/privilegedattributes/"
            .replace("{" + "serverid" + "}", localVarApiClient.escapeString(serverid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "role_id" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteServerPrivilegedAttributesValidateBeforeCall(String serverid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serverid' is set
        if (serverid == null) {
            throw new ApiException("Missing the required parameter 'serverid' when calling deleteServerPrivilegedAttributes(Async)");
        }

        return deleteServerPrivilegedAttributesCall(serverid, _callback);

    }

    /**
     * Delete all privileged attributes of a specific server
     * Delete all privileged attributes of a specific server. Required permission: global &#39;servers&#39;.
     * @param serverid Base64 encoded server id (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> On successful delete </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User not found </td><td>  -  </td></tr>
     </table>
     */
    public void deleteServerPrivilegedAttributes(String serverid) throws ApiException {
        deleteServerPrivilegedAttributesWithHttpInfo(serverid);
    }

    /**
     * Delete all privileged attributes of a specific server
     * Delete all privileged attributes of a specific server. Required permission: global &#39;servers&#39;.
     * @param serverid Base64 encoded server id (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> On successful delete </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteServerPrivilegedAttributesWithHttpInfo(String serverid) throws ApiException {
        okhttp3.Call localVarCall = deleteServerPrivilegedAttributesValidateBeforeCall(serverid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete all privileged attributes of a specific server (asynchronously)
     * Delete all privileged attributes of a specific server. Required permission: global &#39;servers&#39;.
     * @param serverid Base64 encoded server id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> On successful delete </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> User not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteServerPrivilegedAttributesAsync(String serverid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteServerPrivilegedAttributesValidateBeforeCall(serverid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getGlobalAttributes
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of attributes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGlobalAttributesCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/attributes/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "role_id" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getGlobalAttributesValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getGlobalAttributesCall(_callback);

    }

    /**
     * Get all global attributes
     * Returns an array containing all global attributes. Required permission: global &#39;servers&#39;.
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of attributes </td><td>  -  </td></tr>
     </table>
     */
    public String getGlobalAttributes() throws ApiException {
        ApiResponse<String> localVarResp = getGlobalAttributesWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get all global attributes
     * Returns an array containing all global attributes. Required permission: global &#39;servers&#39;.
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of attributes </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> getGlobalAttributesWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getGlobalAttributesValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all global attributes (asynchronously)
     * Returns an array containing all global attributes. Required permission: global &#39;servers&#39;.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of attributes </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getGlobalAttributesAsync(final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = getGlobalAttributesValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getServerPrivilegedAttributes
     * @param serverid Base64 encoded server id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of attributes </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Server not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getServerPrivilegedAttributesCall(String serverid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/servers/{serverid}/privilegedattributes/"
            .replace("{" + "serverid" + "}", localVarApiClient.escapeString(serverid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "role_id" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getServerPrivilegedAttributesValidateBeforeCall(String serverid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serverid' is set
        if (serverid == null) {
            throw new ApiException("Missing the required parameter 'serverid' when calling getServerPrivilegedAttributes(Async)");
        }

        return getServerPrivilegedAttributesCall(serverid, _callback);

    }

    /**
     * Get all privileged attributes of a specific server
     * Returns an array containing all privileged attributes corresponding to this server. Required permission: global &#39;servers&#39;.
     * @param serverid Base64 encoded server id (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of attributes </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Server not found </td><td>  -  </td></tr>
     </table>
     */
    public String getServerPrivilegedAttributes(String serverid) throws ApiException {
        ApiResponse<String> localVarResp = getServerPrivilegedAttributesWithHttpInfo(serverid);
        return localVarResp.getData();
    }

    /**
     * Get all privileged attributes of a specific server
     * Returns an array containing all privileged attributes corresponding to this server. Required permission: global &#39;servers&#39;.
     * @param serverid Base64 encoded server id (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of attributes </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Server not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> getServerPrivilegedAttributesWithHttpInfo(String serverid) throws ApiException {
        okhttp3.Call localVarCall = getServerPrivilegedAttributesValidateBeforeCall(serverid, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all privileged attributes of a specific server (asynchronously)
     * Returns an array containing all privileged attributes corresponding to this server. Required permission: global &#39;servers&#39;.
     * @param serverid Base64 encoded server id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of attributes </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Server not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getServerPrivilegedAttributesAsync(String serverid, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = getServerPrivilegedAttributesValidateBeforeCall(serverid, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for setGlobalAttributes
     * @param attributes Array of attributes (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setGlobalAttributesCall(Object attributes, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = attributes;

        // create path and map variables
        String localVarPath = "/attributes/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "role_id" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setGlobalAttributesValidateBeforeCall(Object attributes, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'attributes' is set
        if (attributes == null) {
            throw new ApiException("Missing the required parameter 'attributes' when calling setGlobalAttributes(Async)");
        }

        return setGlobalAttributesCall(attributes, _callback);

    }

    /**
     * Set all global attributes
     * Set the global attributes. Prior attributes with keys that are not provided in the body of the request will be deleted. Required permission: global &#39;servers&#39;.
     * @param attributes Array of attributes (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void setGlobalAttributes(Object attributes) throws ApiException {
        setGlobalAttributesWithHttpInfo(attributes);
    }

    /**
     * Set all global attributes
     * Set the global attributes. Prior attributes with keys that are not provided in the body of the request will be deleted. Required permission: global &#39;servers&#39;.
     * @param attributes Array of attributes (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> setGlobalAttributesWithHttpInfo(Object attributes) throws ApiException {
        okhttp3.Call localVarCall = setGlobalAttributesValidateBeforeCall(attributes, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Set all global attributes (asynchronously)
     * Set the global attributes. Prior attributes with keys that are not provided in the body of the request will be deleted. Required permission: global &#39;servers&#39;.
     * @param attributes Array of attributes (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setGlobalAttributesAsync(Object attributes, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = setGlobalAttributesValidateBeforeCall(attributes, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for setServerPrivilegedAttributes
     * @param serverid Base64 encoded server id (required)
     * @param attributes Array of attributes (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Server not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setServerPrivilegedAttributesCall(String serverid, Object attributes, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = attributes;

        // create path and map variables
        String localVarPath = "/servers/{serverid}/privilegedattributes/"
            .replace("{" + "serverid" + "}", localVarApiClient.escapeString(serverid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "role_id" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setServerPrivilegedAttributesValidateBeforeCall(String serverid, Object attributes, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serverid' is set
        if (serverid == null) {
            throw new ApiException("Missing the required parameter 'serverid' when calling setServerPrivilegedAttributes(Async)");
        }

        // verify the required parameter 'attributes' is set
        if (attributes == null) {
            throw new ApiException("Missing the required parameter 'attributes' when calling setServerPrivilegedAttributes(Async)");
        }

        return setServerPrivilegedAttributesCall(serverid, attributes, _callback);

    }

    /**
     * Set all privileged attributes of a specific server
     * Set the privileged attributes of a specific server. Prior attributes with keys that are not provided in the body of the request will be deleted. Required permission: global &#39;servers&#39;.
     * @param serverid Base64 encoded server id (required)
     * @param attributes Array of attributes (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Server not found </td><td>  -  </td></tr>
     </table>
     */
    public void setServerPrivilegedAttributes(String serverid, Object attributes) throws ApiException {
        setServerPrivilegedAttributesWithHttpInfo(serverid, attributes);
    }

    /**
     * Set all privileged attributes of a specific server
     * Set the privileged attributes of a specific server. Prior attributes with keys that are not provided in the body of the request will be deleted. Required permission: global &#39;servers&#39;.
     * @param serverid Base64 encoded server id (required)
     * @param attributes Array of attributes (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Server not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> setServerPrivilegedAttributesWithHttpInfo(String serverid, Object attributes) throws ApiException {
        okhttp3.Call localVarCall = setServerPrivilegedAttributesValidateBeforeCall(serverid, attributes, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Set all privileged attributes of a specific server (asynchronously)
     * Set the privileged attributes of a specific server. Prior attributes with keys that are not provided in the body of the request will be deleted. Required permission: global &#39;servers&#39;.
     * @param serverid Base64 encoded server id (required)
     * @param attributes Array of attributes (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Server not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setServerPrivilegedAttributesAsync(String serverid, Object attributes, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = setServerPrivilegedAttributesValidateBeforeCall(serverid, attributes, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateGlobalAttributes
     * @param attributes Array of attributes (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> On successful update </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateGlobalAttributesCall(Object attributes, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = attributes;

        // create path and map variables
        String localVarPath = "/attributes/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "role_id" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateGlobalAttributesValidateBeforeCall(Object attributes, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'attributes' is set
        if (attributes == null) {
            throw new ApiException("Missing the required parameter 'attributes' when calling updateGlobalAttributes(Async)");
        }

        return updateGlobalAttributesCall(attributes, _callback);

    }

    /**
     * Update specified global attributes
     * Update the specified global attributes. Prior attributes with keys that are not provided in the body of the request will not be deleted. Required permission: &#39;servers&#39;.
     * @param attributes Array of attributes (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> On successful update </td><td>  -  </td></tr>
     </table>
     */
    public void updateGlobalAttributes(Object attributes) throws ApiException {
        updateGlobalAttributesWithHttpInfo(attributes);
    }

    /**
     * Update specified global attributes
     * Update the specified global attributes. Prior attributes with keys that are not provided in the body of the request will not be deleted. Required permission: &#39;servers&#39;.
     * @param attributes Array of attributes (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> On successful update </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> updateGlobalAttributesWithHttpInfo(Object attributes) throws ApiException {
        okhttp3.Call localVarCall = updateGlobalAttributesValidateBeforeCall(attributes, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update specified global attributes (asynchronously)
     * Update the specified global attributes. Prior attributes with keys that are not provided in the body of the request will not be deleted. Required permission: &#39;servers&#39;.
     * @param attributes Array of attributes (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> On successful update </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateGlobalAttributesAsync(Object attributes, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateGlobalAttributesValidateBeforeCall(attributes, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateServerPrivilegedAttributes
     * @param serverid Base64 encoded server id (required)
     * @param attributes Array of attributes (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> On successful update </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Server not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateServerPrivilegedAttributesCall(String serverid, Object attributes, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = attributes;

        // create path and map variables
        String localVarPath = "/servers/{serverid}/privilegedattributes/"
            .replace("{" + "serverid" + "}", localVarApiClient.escapeString(serverid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "role_id" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateServerPrivilegedAttributesValidateBeforeCall(String serverid, Object attributes, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serverid' is set
        if (serverid == null) {
            throw new ApiException("Missing the required parameter 'serverid' when calling updateServerPrivilegedAttributes(Async)");
        }

        // verify the required parameter 'attributes' is set
        if (attributes == null) {
            throw new ApiException("Missing the required parameter 'attributes' when calling updateServerPrivilegedAttributes(Async)");
        }

        return updateServerPrivilegedAttributesCall(serverid, attributes, _callback);

    }

    /**
     * Update privileged specified attributes of a specific server
     * Update the specified privileged attributes of a specific server. Prior privileged attributes with keys that are not provided in the body of the request will not be deleted. Required permission: global &#39;servers&#39;.
     * @param serverid Base64 encoded server id (required)
     * @param attributes Array of attributes (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> On successful update </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Server not found </td><td>  -  </td></tr>
     </table>
     */
    public void updateServerPrivilegedAttributes(String serverid, Object attributes) throws ApiException {
        updateServerPrivilegedAttributesWithHttpInfo(serverid, attributes);
    }

    /**
     * Update privileged specified attributes of a specific server
     * Update the specified privileged attributes of a specific server. Prior privileged attributes with keys that are not provided in the body of the request will not be deleted. Required permission: global &#39;servers&#39;.
     * @param serverid Base64 encoded server id (required)
     * @param attributes Array of attributes (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> On successful update </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Server not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> updateServerPrivilegedAttributesWithHttpInfo(String serverid, Object attributes) throws ApiException {
        okhttp3.Call localVarCall = updateServerPrivilegedAttributesValidateBeforeCall(serverid, attributes, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Update privileged specified attributes of a specific server (asynchronously)
     * Update the specified privileged attributes of a specific server. Prior privileged attributes with keys that are not provided in the body of the request will not be deleted. Required permission: global &#39;servers&#39;.
     * @param serverid Base64 encoded server id (required)
     * @param attributes Array of attributes (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> On successful update </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Server not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateServerPrivilegedAttributesAsync(String serverid, Object attributes, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateServerPrivilegedAttributesValidateBeforeCall(serverid, attributes, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
