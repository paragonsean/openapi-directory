/*
 * nextAuth API
 * API for the nextAuth server
 *
 * The version of the OpenAPI document: 2.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Account;
import java.io.File;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class RegistrationApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public RegistrationApi() {
        this(Configuration.getDefaultApiClient());
    }

    public RegistrationApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getQrEnrol
     * @param serverid Base64 encoded server id (required)
     * @param xNonce Nonce to identify the browser/webserver session (required)
     * @param name Name to forward to the nextAuth app for this account (required)
     * @param userid User name to register this user under (optional)
     * @param img &#39;png&#39; for a PNG image, not set for raw data in the qr code (optional)
     * @param s size in pixels of the qr code, defaults to 500 (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Raw byte array containing the enrol qr code data (either raw or as a PNG image). </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getQrEnrolCall(String serverid, String xNonce, String name, String userid, String img, Integer s, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/servers/{serverid}/sessions/qr/enrol"
            .replace("{" + "serverid" + "}", localVarApiClient.escapeString(serverid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (userid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userid", userid));
        }

        if (img != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("img", img));
        }

        if (s != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("s", s));
        }

        if (xNonce != null) {
            localVarHeaderParams.put("X-nonce", localVarApiClient.parameterToString(xNonce));
        }

        final String[] localVarAccepts = {
            "application/octet-stream"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "role_id" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getQrEnrolValidateBeforeCall(String serverid, String xNonce, String name, String userid, String img, Integer s, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serverid' is set
        if (serverid == null) {
            throw new ApiException("Missing the required parameter 'serverid' when calling getQrEnrol(Async)");
        }

        // verify the required parameter 'xNonce' is set
        if (xNonce == null) {
            throw new ApiException("Missing the required parameter 'xNonce' when calling getQrEnrol(Async)");
        }

        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getQrEnrol(Async)");
        }

        return getQrEnrolCall(serverid, xNonce, name, userid, img, s, _callback);

    }

    /**
     * Generate data for an enrol qr code
     * Returns the data for an enrol qr code. Required permission: &#39;sessions&#39;.
     * @param serverid Base64 encoded server id (required)
     * @param xNonce Nonce to identify the browser/webserver session (required)
     * @param name Name to forward to the nextAuth app for this account (required)
     * @param userid User name to register this user under (optional)
     * @param img &#39;png&#39; for a PNG image, not set for raw data in the qr code (optional)
     * @param s size in pixels of the qr code, defaults to 500 (optional)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Raw byte array containing the enrol qr code data (either raw or as a PNG image). </td><td>  -  </td></tr>
     </table>
     */
    public File getQrEnrol(String serverid, String xNonce, String name, String userid, String img, Integer s) throws ApiException {
        ApiResponse<File> localVarResp = getQrEnrolWithHttpInfo(serverid, xNonce, name, userid, img, s);
        return localVarResp.getData();
    }

    /**
     * Generate data for an enrol qr code
     * Returns the data for an enrol qr code. Required permission: &#39;sessions&#39;.
     * @param serverid Base64 encoded server id (required)
     * @param xNonce Nonce to identify the browser/webserver session (required)
     * @param name Name to forward to the nextAuth app for this account (required)
     * @param userid User name to register this user under (optional)
     * @param img &#39;png&#39; for a PNG image, not set for raw data in the qr code (optional)
     * @param s size in pixels of the qr code, defaults to 500 (optional)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Raw byte array containing the enrol qr code data (either raw or as a PNG image). </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> getQrEnrolWithHttpInfo(String serverid, String xNonce, String name, String userid, String img, Integer s) throws ApiException {
        okhttp3.Call localVarCall = getQrEnrolValidateBeforeCall(serverid, xNonce, name, userid, img, s, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Generate data for an enrol qr code (asynchronously)
     * Returns the data for an enrol qr code. Required permission: &#39;sessions&#39;.
     * @param serverid Base64 encoded server id (required)
     * @param xNonce Nonce to identify the browser/webserver session (required)
     * @param name Name to forward to the nextAuth app for this account (required)
     * @param userid User name to register this user under (optional)
     * @param img &#39;png&#39; for a PNG image, not set for raw data in the qr code (optional)
     * @param s size in pixels of the qr code, defaults to 500 (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Raw byte array containing the enrol qr code data (either raw or as a PNG image). </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getQrEnrolAsync(String serverid, String xNonce, String name, String userid, String img, Integer s, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = getQrEnrolValidateBeforeCall(serverid, xNonce, name, userid, img, s, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getServerVash
     * @param serverid Base64 encoded server id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Raw byte array containing the visual hash of this server as a PNG image. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Server not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getServerVashCall(String serverid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/servers/{serverid}/vash"
            .replace("{" + "serverid" + "}", localVarApiClient.escapeString(serverid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/octet-stream"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "role_id" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getServerVashValidateBeforeCall(String serverid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serverid' is set
        if (serverid == null) {
            throw new ApiException("Missing the required parameter 'serverid' when calling getServerVash(Async)");
        }

        return getServerVashCall(serverid, _callback);

    }

    /**
     * Visual hash of this server
     * Returns a PNG of the visual hash corresponding to this server. This visual hash is used during the registration process (optional), for the user to verify that (s)he is registering with the right server in the nextAuth app. For single-server nextAuth-enabled apps (white label or mobile SDK), the public key of the server is typically pinned within the app and hence this visual hash is not displayed to the user. Required permission: &#39;sessions&#39; or &#39;servers&#39;.
     * @param serverid Base64 encoded server id (required)
     * @return File
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Raw byte array containing the visual hash of this server as a PNG image. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Server not found </td><td>  -  </td></tr>
     </table>
     */
    public File getServerVash(String serverid) throws ApiException {
        ApiResponse<File> localVarResp = getServerVashWithHttpInfo(serverid);
        return localVarResp.getData();
    }

    /**
     * Visual hash of this server
     * Returns a PNG of the visual hash corresponding to this server. This visual hash is used during the registration process (optional), for the user to verify that (s)he is registering with the right server in the nextAuth app. For single-server nextAuth-enabled apps (white label or mobile SDK), the public key of the server is typically pinned within the app and hence this visual hash is not displayed to the user. Required permission: &#39;sessions&#39; or &#39;servers&#39;.
     * @param serverid Base64 encoded server id (required)
     * @return ApiResponse&lt;File&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Raw byte array containing the visual hash of this server as a PNG image. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Server not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<File> getServerVashWithHttpInfo(String serverid) throws ApiException {
        okhttp3.Call localVarCall = getServerVashValidateBeforeCall(serverid, null);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Visual hash of this server (asynchronously)
     * Returns a PNG of the visual hash corresponding to this server. This visual hash is used during the registration process (optional), for the user to verify that (s)he is registering with the right server in the nextAuth app. For single-server nextAuth-enabled apps (white label or mobile SDK), the public key of the server is typically pinned within the app and hence this visual hash is not displayed to the user. Required permission: &#39;sessions&#39; or &#39;servers&#39;.
     * @param serverid Base64 encoded server id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Raw byte array containing the visual hash of this server as a PNG image. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Server not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getServerVashAsync(String serverid, final ApiCallback<File> _callback) throws ApiException {

        okhttp3.Call localVarCall = getServerVashValidateBeforeCall(serverid, _callback);
        Type localVarReturnType = new TypeToken<File>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for registerUser_0
     * @param serverid Base64 encoded server id (required)
     * @param xNonce Nonce to identify the browser/webserver session (required)
     * @param userid Username to register (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call registerUser_0Call(String serverid, String xNonce, String userid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/servers/{serverid}/sessions/registeruser"
            .replace("{" + "serverid" + "}", localVarApiClient.escapeString(serverid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (userid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userid", userid));
        }

        if (xNonce != null) {
            localVarHeaderParams.put("X-nonce", localVarApiClient.parameterToString(xNonce));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "role_id" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call registerUser_0ValidateBeforeCall(String serverid, String xNonce, String userid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serverid' is set
        if (serverid == null) {
            throw new ApiException("Missing the required parameter 'serverid' when calling registerUser_0(Async)");
        }

        // verify the required parameter 'xNonce' is set
        if (xNonce == null) {
            throw new ApiException("Missing the required parameter 'xNonce' when calling registerUser_0(Async)");
        }

        // verify the required parameter 'userid' is set
        if (userid == null) {
            throw new ApiException("Missing the required parameter 'userid' when calling registerUser_0(Async)");
        }

        return registerUser_0Call(serverid, xNonce, userid, _callback);

    }

    /**
     * Register a userid for the currently logged in account.
     * Register a user for the currently logged in account. You can also directly pass a user name when generating an ENROL qr code. Required permission: &#39;users&#39;.
     * @param serverid Base64 encoded server id (required)
     * @param xNonce Nonce to identify the browser/webserver session (required)
     * @param userid Username to register (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void registerUser_0(String serverid, String xNonce, String userid) throws ApiException {
        registerUser_0WithHttpInfo(serverid, xNonce, userid);
    }

    /**
     * Register a userid for the currently logged in account.
     * Register a user for the currently logged in account. You can also directly pass a user name when generating an ENROL qr code. Required permission: &#39;users&#39;.
     * @param serverid Base64 encoded server id (required)
     * @param xNonce Nonce to identify the browser/webserver session (required)
     * @param userid Username to register (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> registerUser_0WithHttpInfo(String serverid, String xNonce, String userid) throws ApiException {
        okhttp3.Call localVarCall = registerUser_0ValidateBeforeCall(serverid, xNonce, userid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Register a userid for the currently logged in account. (asynchronously)
     * Register a user for the currently logged in account. You can also directly pass a user name when generating an ENROL qr code. Required permission: &#39;users&#39;.
     * @param serverid Base64 encoded server id (required)
     * @param xNonce Nonce to identify the browser/webserver session (required)
     * @param userid Username to register (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call registerUser_0Async(String serverid, String xNonce, String userid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = registerUser_0ValidateBeforeCall(serverid, xNonce, userid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateAccountUser_0
     * @param serverid Base64 encoded server id (required)
     * @param accountid Account id (required)
     * @param userid User name (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Account after update </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid user name </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Account not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateAccountUser_0Call(String serverid, Integer accountid, String userid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/servers/{serverid}/accounts/{accountid}/user"
            .replace("{" + "serverid" + "}", localVarApiClient.escapeString(serverid.toString()))
            .replace("{" + "accountid" + "}", localVarApiClient.escapeString(accountid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (userid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userid", userid));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "role_id" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateAccountUser_0ValidateBeforeCall(String serverid, Integer accountid, String userid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serverid' is set
        if (serverid == null) {
            throw new ApiException("Missing the required parameter 'serverid' when calling updateAccountUser_0(Async)");
        }

        // verify the required parameter 'accountid' is set
        if (accountid == null) {
            throw new ApiException("Missing the required parameter 'accountid' when calling updateAccountUser_0(Async)");
        }

        // verify the required parameter 'userid' is set
        if (userid == null) {
            throw new ApiException("Missing the required parameter 'userid' when calling updateAccountUser_0(Async)");
        }

        return updateAccountUser_0Call(serverid, accountid, userid, _callback);

    }

    /**
     * Update user of the given account.
     * Update the user of the given account. Required permission: &#39;accounts&#39;.
     * @param serverid Base64 encoded server id (required)
     * @param accountid Account id (required)
     * @param userid User name (required)
     * @return Account
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Account after update </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid user name </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Account not found </td><td>  -  </td></tr>
     </table>
     */
    public Account updateAccountUser_0(String serverid, Integer accountid, String userid) throws ApiException {
        ApiResponse<Account> localVarResp = updateAccountUser_0WithHttpInfo(serverid, accountid, userid);
        return localVarResp.getData();
    }

    /**
     * Update user of the given account.
     * Update the user of the given account. Required permission: &#39;accounts&#39;.
     * @param serverid Base64 encoded server id (required)
     * @param accountid Account id (required)
     * @param userid User name (required)
     * @return ApiResponse&lt;Account&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Account after update </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid user name </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Account not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Account> updateAccountUser_0WithHttpInfo(String serverid, Integer accountid, String userid) throws ApiException {
        okhttp3.Call localVarCall = updateAccountUser_0ValidateBeforeCall(serverid, accountid, userid, null);
        Type localVarReturnType = new TypeToken<Account>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update user of the given account. (asynchronously)
     * Update the user of the given account. Required permission: &#39;accounts&#39;.
     * @param serverid Base64 encoded server id (required)
     * @param accountid Account id (required)
     * @param userid User name (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Account after update </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid user name </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Account not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateAccountUser_0Async(String serverid, Integer accountid, String userid, final ApiCallback<Account> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateAccountUser_0ValidateBeforeCall(serverid, accountid, userid, _callback);
        Type localVarReturnType = new TypeToken<Account>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
