/*
 * nextAuth API
 * API for the nextAuth server
 *
 * The version of the OpenAPI document: 2.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Account;
import org.openapitools.client.model.Accounts;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AccountsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AccountsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AccountsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for deleteAccount
     * @param serverid Base64 encoded server id (required)
     * @param accountid Account id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> On successful delete </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Account not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteAccountCall(String serverid, Integer accountid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/servers/{serverid}/accounts/{accountid}/"
            .replace("{" + "serverid" + "}", localVarApiClient.escapeString(serverid.toString()))
            .replace("{" + "accountid" + "}", localVarApiClient.escapeString(accountid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "role_id" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteAccountValidateBeforeCall(String serverid, Integer accountid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serverid' is set
        if (serverid == null) {
            throw new ApiException("Missing the required parameter 'serverid' when calling deleteAccount(Async)");
        }

        // verify the required parameter 'accountid' is set
        if (accountid == null) {
            throw new ApiException("Missing the required parameter 'accountid' when calling deleteAccount(Async)");
        }

        return deleteAccountCall(serverid, accountid, _callback);

    }

    /**
     * Delete specific account
     * Delete an account. Required permission: &#39;accounts&#39;.
     * @param serverid Base64 encoded server id (required)
     * @param accountid Account id (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> On successful delete </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Account not found </td><td>  -  </td></tr>
     </table>
     */
    public void deleteAccount(String serverid, Integer accountid) throws ApiException {
        deleteAccountWithHttpInfo(serverid, accountid);
    }

    /**
     * Delete specific account
     * Delete an account. Required permission: &#39;accounts&#39;.
     * @param serverid Base64 encoded server id (required)
     * @param accountid Account id (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> On successful delete </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Account not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteAccountWithHttpInfo(String serverid, Integer accountid) throws ApiException {
        okhttp3.Call localVarCall = deleteAccountValidateBeforeCall(serverid, accountid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete specific account (asynchronously)
     * Delete an account. Required permission: &#39;accounts&#39;.
     * @param serverid Base64 encoded server id (required)
     * @param accountid Account id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> On successful delete </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Account not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteAccountAsync(String serverid, Integer accountid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteAccountValidateBeforeCall(serverid, accountid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteUserAccounts_0
     * @param serverid Base64 encoded server id (required)
     * @param userid User name (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> On successful delete </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteUserAccounts_0Call(String serverid, String userid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/servers/{serverid}/users/{userid}/accounts"
            .replace("{" + "serverid" + "}", localVarApiClient.escapeString(serverid.toString()))
            .replace("{" + "userid" + "}", localVarApiClient.escapeString(userid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "role_id" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteUserAccounts_0ValidateBeforeCall(String serverid, String userid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serverid' is set
        if (serverid == null) {
            throw new ApiException("Missing the required parameter 'serverid' when calling deleteUserAccounts_0(Async)");
        }

        // verify the required parameter 'userid' is set
        if (userid == null) {
            throw new ApiException("Missing the required parameter 'userid' when calling deleteUserAccounts_0(Async)");
        }

        return deleteUserAccounts_0Call(serverid, userid, _callback);

    }

    /**
     * Delete all accounts of a specific user
     * Delete all accounts corresponding to this user. The user itself is not deleted. Required permission: &#39;accounts&#39; or &#39;users&#39;.
     * @param serverid Base64 encoded server id (required)
     * @param userid User name (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> On successful delete </td><td>  -  </td></tr>
     </table>
     */
    public void deleteUserAccounts_0(String serverid, String userid) throws ApiException {
        deleteUserAccounts_0WithHttpInfo(serverid, userid);
    }

    /**
     * Delete all accounts of a specific user
     * Delete all accounts corresponding to this user. The user itself is not deleted. Required permission: &#39;accounts&#39; or &#39;users&#39;.
     * @param serverid Base64 encoded server id (required)
     * @param userid User name (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> On successful delete </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteUserAccounts_0WithHttpInfo(String serverid, String userid) throws ApiException {
        okhttp3.Call localVarCall = deleteUserAccounts_0ValidateBeforeCall(serverid, userid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete all accounts of a specific user (asynchronously)
     * Delete all accounts corresponding to this user. The user itself is not deleted. Required permission: &#39;accounts&#39; or &#39;users&#39;.
     * @param serverid Base64 encoded server id (required)
     * @param userid User name (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> On successful delete </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteUserAccounts_0Async(String serverid, String userid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteUserAccounts_0ValidateBeforeCall(serverid, userid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAccount
     * @param serverid Base64 encoded server id (required)
     * @param accountid Account id (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Account </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Account not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAccountCall(String serverid, Integer accountid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/servers/{serverid}/accounts/{accountid}/"
            .replace("{" + "serverid" + "}", localVarApiClient.escapeString(serverid.toString()))
            .replace("{" + "accountid" + "}", localVarApiClient.escapeString(accountid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "role_id" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAccountValidateBeforeCall(String serverid, Integer accountid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serverid' is set
        if (serverid == null) {
            throw new ApiException("Missing the required parameter 'serverid' when calling getAccount(Async)");
        }

        // verify the required parameter 'accountid' is set
        if (accountid == null) {
            throw new ApiException("Missing the required parameter 'accountid' when calling getAccount(Async)");
        }

        return getAccountCall(serverid, accountid, _callback);

    }

    /**
     * Get specific account
     * Returns the account. Required permission: &#39;sessions&#39; or &#39;accounts&#39;.
     * @param serverid Base64 encoded server id (required)
     * @param accountid Account id (required)
     * @return Account
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Account </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Account not found </td><td>  -  </td></tr>
     </table>
     */
    public Account getAccount(String serverid, Integer accountid) throws ApiException {
        ApiResponse<Account> localVarResp = getAccountWithHttpInfo(serverid, accountid);
        return localVarResp.getData();
    }

    /**
     * Get specific account
     * Returns the account. Required permission: &#39;sessions&#39; or &#39;accounts&#39;.
     * @param serverid Base64 encoded server id (required)
     * @param accountid Account id (required)
     * @return ApiResponse&lt;Account&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Account </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Account not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Account> getAccountWithHttpInfo(String serverid, Integer accountid) throws ApiException {
        okhttp3.Call localVarCall = getAccountValidateBeforeCall(serverid, accountid, null);
        Type localVarReturnType = new TypeToken<Account>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get specific account (asynchronously)
     * Returns the account. Required permission: &#39;sessions&#39; or &#39;accounts&#39;.
     * @param serverid Base64 encoded server id (required)
     * @param accountid Account id (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Account </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Account not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAccountAsync(String serverid, Integer accountid, final ApiCallback<Account> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAccountValidateBeforeCall(serverid, accountid, _callback);
        Type localVarReturnType = new TypeToken<Account>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAllAccounts
     * @param serverid Base64 encoded server id (required)
     * @param filter Filter users based on an attribute. Takes the format *attributename&#x3D;attributevalue*. You can filter for multiple values at once, e.g. *group&#x3D;in:group1,group2* (optional)
     * @param limit Limit the number of results (optional)
     * @param marker Offset in the result list (optional)
     * @param sort Sort the results by column. You can also specify ascending (default if not specified) or descending, e.g., *column:asc* . You can also sort by multiple columns, e.g., *column1:desc,column2:asc* (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of accounts </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllAccountsCall(String serverid, String filter, Integer limit, Integer marker, String sort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/servers/{serverid}/accounts/"
            .replace("{" + "serverid" + "}", localVarApiClient.escapeString(serverid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (marker != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("marker", marker));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "role_id" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllAccountsValidateBeforeCall(String serverid, String filter, Integer limit, Integer marker, String sort, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serverid' is set
        if (serverid == null) {
            throw new ApiException("Missing the required parameter 'serverid' when calling getAllAccounts(Async)");
        }

        return getAllAccountsCall(serverid, filter, limit, marker, sort, _callback);

    }

    /**
     * Get all accounts
     * Returns all account. Required permission &#39;accounts&#39;.
     * @param serverid Base64 encoded server id (required)
     * @param filter Filter users based on an attribute. Takes the format *attributename&#x3D;attributevalue*. You can filter for multiple values at once, e.g. *group&#x3D;in:group1,group2* (optional)
     * @param limit Limit the number of results (optional)
     * @param marker Offset in the result list (optional)
     * @param sort Sort the results by column. You can also specify ascending (default if not specified) or descending, e.g., *column:asc* . You can also sort by multiple columns, e.g., *column1:desc,column2:asc* (optional)
     * @return Accounts
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of accounts </td><td>  -  </td></tr>
     </table>
     */
    public Accounts getAllAccounts(String serverid, String filter, Integer limit, Integer marker, String sort) throws ApiException {
        ApiResponse<Accounts> localVarResp = getAllAccountsWithHttpInfo(serverid, filter, limit, marker, sort);
        return localVarResp.getData();
    }

    /**
     * Get all accounts
     * Returns all account. Required permission &#39;accounts&#39;.
     * @param serverid Base64 encoded server id (required)
     * @param filter Filter users based on an attribute. Takes the format *attributename&#x3D;attributevalue*. You can filter for multiple values at once, e.g. *group&#x3D;in:group1,group2* (optional)
     * @param limit Limit the number of results (optional)
     * @param marker Offset in the result list (optional)
     * @param sort Sort the results by column. You can also specify ascending (default if not specified) or descending, e.g., *column:asc* . You can also sort by multiple columns, e.g., *column1:desc,column2:asc* (optional)
     * @return ApiResponse&lt;Accounts&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of accounts </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Accounts> getAllAccountsWithHttpInfo(String serverid, String filter, Integer limit, Integer marker, String sort) throws ApiException {
        okhttp3.Call localVarCall = getAllAccountsValidateBeforeCall(serverid, filter, limit, marker, sort, null);
        Type localVarReturnType = new TypeToken<Accounts>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all accounts (asynchronously)
     * Returns all account. Required permission &#39;accounts&#39;.
     * @param serverid Base64 encoded server id (required)
     * @param filter Filter users based on an attribute. Takes the format *attributename&#x3D;attributevalue*. You can filter for multiple values at once, e.g. *group&#x3D;in:group1,group2* (optional)
     * @param limit Limit the number of results (optional)
     * @param marker Offset in the result list (optional)
     * @param sort Sort the results by column. You can also specify ascending (default if not specified) or descending, e.g., *column:asc* . You can also sort by multiple columns, e.g., *column1:desc,column2:asc* (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of accounts </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllAccountsAsync(String serverid, String filter, Integer limit, Integer marker, String sort, final ApiCallback<Accounts> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllAccountsValidateBeforeCall(serverid, filter, limit, marker, sort, _callback);
        Type localVarReturnType = new TypeToken<Accounts>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getUser_0
     * @param serverid Base64 encoded server id (required)
     * @param userid User name (required)
     * @param limit Limit the number of results (optional)
     * @param marker Offset in the result list (optional)
     * @param sort Sort the results by column. You can also specify ascending (default if not specified) or descending, e.g., *column:asc* . You can also sort by multiple columns, e.g., *column1:desc,column2:asc* (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of accounts </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUser_0Call(String serverid, String userid, Integer limit, Integer marker, String sort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/servers/{serverid}/users/{userid}/accounts"
            .replace("{" + "serverid" + "}", localVarApiClient.escapeString(serverid.toString()))
            .replace("{" + "userid" + "}", localVarApiClient.escapeString(userid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (marker != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("marker", marker));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "role_id" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUser_0ValidateBeforeCall(String serverid, String userid, Integer limit, Integer marker, String sort, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serverid' is set
        if (serverid == null) {
            throw new ApiException("Missing the required parameter 'serverid' when calling getUser_0(Async)");
        }

        // verify the required parameter 'userid' is set
        if (userid == null) {
            throw new ApiException("Missing the required parameter 'userid' when calling getUser_0(Async)");
        }

        return getUser_0Call(serverid, userid, limit, marker, sort, _callback);

    }

    /**
     * Get all accounts of a specific user
     * Returns an array containing all accounts corresponding to this user. Required permission: &#39;sessions&#39; or &#39;users&#39;.
     * @param serverid Base64 encoded server id (required)
     * @param userid User name (required)
     * @param limit Limit the number of results (optional)
     * @param marker Offset in the result list (optional)
     * @param sort Sort the results by column. You can also specify ascending (default if not specified) or descending, e.g., *column:asc* . You can also sort by multiple columns, e.g., *column1:desc,column2:asc* (optional)
     * @return Accounts
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of accounts </td><td>  -  </td></tr>
     </table>
     */
    public Accounts getUser_0(String serverid, String userid, Integer limit, Integer marker, String sort) throws ApiException {
        ApiResponse<Accounts> localVarResp = getUser_0WithHttpInfo(serverid, userid, limit, marker, sort);
        return localVarResp.getData();
    }

    /**
     * Get all accounts of a specific user
     * Returns an array containing all accounts corresponding to this user. Required permission: &#39;sessions&#39; or &#39;users&#39;.
     * @param serverid Base64 encoded server id (required)
     * @param userid User name (required)
     * @param limit Limit the number of results (optional)
     * @param marker Offset in the result list (optional)
     * @param sort Sort the results by column. You can also specify ascending (default if not specified) or descending, e.g., *column:asc* . You can also sort by multiple columns, e.g., *column1:desc,column2:asc* (optional)
     * @return ApiResponse&lt;Accounts&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of accounts </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Accounts> getUser_0WithHttpInfo(String serverid, String userid, Integer limit, Integer marker, String sort) throws ApiException {
        okhttp3.Call localVarCall = getUser_0ValidateBeforeCall(serverid, userid, limit, marker, sort, null);
        Type localVarReturnType = new TypeToken<Accounts>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all accounts of a specific user (asynchronously)
     * Returns an array containing all accounts corresponding to this user. Required permission: &#39;sessions&#39; or &#39;users&#39;.
     * @param serverid Base64 encoded server id (required)
     * @param userid User name (required)
     * @param limit Limit the number of results (optional)
     * @param marker Offset in the result list (optional)
     * @param sort Sort the results by column. You can also specify ascending (default if not specified) or descending, e.g., *column:asc* . You can also sort by multiple columns, e.g., *column1:desc,column2:asc* (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Array of accounts </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUser_0Async(String serverid, String userid, Integer limit, Integer marker, String sort, final ApiCallback<Accounts> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUser_0ValidateBeforeCall(serverid, userid, limit, marker, sort, _callback);
        Type localVarReturnType = new TypeToken<Accounts>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateAccount
     * @param serverid Base64 encoded server id (required)
     * @param accountid Account id (required)
     * @param blocked True if the account is blocked (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Account after update </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Account not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateAccountCall(String serverid, Integer accountid, Boolean blocked, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/servers/{serverid}/accounts/{accountid}/"
            .replace("{" + "serverid" + "}", localVarApiClient.escapeString(serverid.toString()))
            .replace("{" + "accountid" + "}", localVarApiClient.escapeString(accountid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (blocked != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("blocked", blocked));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "role_id" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateAccountValidateBeforeCall(String serverid, Integer accountid, Boolean blocked, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serverid' is set
        if (serverid == null) {
            throw new ApiException("Missing the required parameter 'serverid' when calling updateAccount(Async)");
        }

        // verify the required parameter 'accountid' is set
        if (accountid == null) {
            throw new ApiException("Missing the required parameter 'accountid' when calling updateAccount(Async)");
        }

        // verify the required parameter 'blocked' is set
        if (blocked == null) {
            throw new ApiException("Missing the required parameter 'blocked' when calling updateAccount(Async)");
        }

        return updateAccountCall(serverid, accountid, blocked, _callback);

    }

    /**
     * Update specific account
     * Update an account. The only available change is (un)blocking the account. Required permission: &#39;accounts&#39;. 
     * @param serverid Base64 encoded server id (required)
     * @param accountid Account id (required)
     * @param blocked True if the account is blocked (required)
     * @return Account
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Account after update </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Account not found </td><td>  -  </td></tr>
     </table>
     */
    public Account updateAccount(String serverid, Integer accountid, Boolean blocked) throws ApiException {
        ApiResponse<Account> localVarResp = updateAccountWithHttpInfo(serverid, accountid, blocked);
        return localVarResp.getData();
    }

    /**
     * Update specific account
     * Update an account. The only available change is (un)blocking the account. Required permission: &#39;accounts&#39;. 
     * @param serverid Base64 encoded server id (required)
     * @param accountid Account id (required)
     * @param blocked True if the account is blocked (required)
     * @return ApiResponse&lt;Account&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Account after update </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Account not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Account> updateAccountWithHttpInfo(String serverid, Integer accountid, Boolean blocked) throws ApiException {
        okhttp3.Call localVarCall = updateAccountValidateBeforeCall(serverid, accountid, blocked, null);
        Type localVarReturnType = new TypeToken<Account>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update specific account (asynchronously)
     * Update an account. The only available change is (un)blocking the account. Required permission: &#39;accounts&#39;. 
     * @param serverid Base64 encoded server id (required)
     * @param accountid Account id (required)
     * @param blocked True if the account is blocked (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Account after update </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Account not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateAccountAsync(String serverid, Integer accountid, Boolean blocked, final ApiCallback<Account> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateAccountValidateBeforeCall(serverid, accountid, blocked, _callback);
        Type localVarReturnType = new TypeToken<Account>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateAccountUser
     * @param serverid Base64 encoded server id (required)
     * @param accountid Account id (required)
     * @param userid User name (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Account after update </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid user name </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Account not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateAccountUserCall(String serverid, Integer accountid, String userid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/servers/{serverid}/accounts/{accountid}/user"
            .replace("{" + "serverid" + "}", localVarApiClient.escapeString(serverid.toString()))
            .replace("{" + "accountid" + "}", localVarApiClient.escapeString(accountid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (userid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userid", userid));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key", "role_id" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateAccountUserValidateBeforeCall(String serverid, Integer accountid, String userid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'serverid' is set
        if (serverid == null) {
            throw new ApiException("Missing the required parameter 'serverid' when calling updateAccountUser(Async)");
        }

        // verify the required parameter 'accountid' is set
        if (accountid == null) {
            throw new ApiException("Missing the required parameter 'accountid' when calling updateAccountUser(Async)");
        }

        // verify the required parameter 'userid' is set
        if (userid == null) {
            throw new ApiException("Missing the required parameter 'userid' when calling updateAccountUser(Async)");
        }

        return updateAccountUserCall(serverid, accountid, userid, _callback);

    }

    /**
     * Update user of the given account.
     * Update the user of the given account. Required permission: &#39;accounts&#39;.
     * @param serverid Base64 encoded server id (required)
     * @param accountid Account id (required)
     * @param userid User name (required)
     * @return Account
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Account after update </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid user name </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Account not found </td><td>  -  </td></tr>
     </table>
     */
    public Account updateAccountUser(String serverid, Integer accountid, String userid) throws ApiException {
        ApiResponse<Account> localVarResp = updateAccountUserWithHttpInfo(serverid, accountid, userid);
        return localVarResp.getData();
    }

    /**
     * Update user of the given account.
     * Update the user of the given account. Required permission: &#39;accounts&#39;.
     * @param serverid Base64 encoded server id (required)
     * @param accountid Account id (required)
     * @param userid User name (required)
     * @return ApiResponse&lt;Account&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Account after update </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid user name </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Account not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Account> updateAccountUserWithHttpInfo(String serverid, Integer accountid, String userid) throws ApiException {
        okhttp3.Call localVarCall = updateAccountUserValidateBeforeCall(serverid, accountid, userid, null);
        Type localVarReturnType = new TypeToken<Account>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update user of the given account. (asynchronously)
     * Update the user of the given account. Required permission: &#39;accounts&#39;.
     * @param serverid Base64 encoded server id (required)
     * @param accountid Account id (required)
     * @param userid User name (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Account after update </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid user name </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Account not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateAccountUserAsync(String serverid, Integer accountid, String userid, final ApiCallback<Account> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateAccountUserValidateBeforeCall(serverid, accountid, userid, _callback);
        Type localVarReturnType = new TypeToken<Account>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
