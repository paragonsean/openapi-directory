/**
 * nextAuth API
 * API for the nextAuth server
 *
 * The version of the OpenAPI document: 2.2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIServersApi_H
#define OAI_OAIServersApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIObject.h"
#include "OAIServer.h"
#include "OAIServers.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIServersApi : public QObject {
    Q_OBJECT

public:
    OAIServersApi(const int timeOut = 0);
    ~OAIServersApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  create_server_body OAIServer [required]
    */
    virtual void createServer(const OAIServer &create_server_body);

    /**
    * @param[in]  serverid QString [required]
    * @param[in]  attributekey QString [required]
    */
    virtual void deleteServerAttribute(const QString &serverid, const QString &attributekey);

    /**
    * @param[in]  serverid QString [required]
    */
    virtual void deleteServerAttributes(const QString &serverid);

    /**
    * @param[in]  serverid QString [required]
    */
    virtual void getServer(const QString &serverid);

    /**
    * @param[in]  serverid QString [required]
    */
    virtual void getServerAttributes(const QString &serverid);

    /**
    * @param[in]  limit qint32 [optional]
    * @param[in]  marker qint32 [optional]
    */
    virtual void getServers(const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &marker = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  serverid QString [required]
    * @param[in]  attributes OAIObject [required]
    */
    virtual void setServerAttributes(const QString &serverid, const OAIObject &attributes);

    /**
    * @param[in]  serverid QString [required]
    * @param[in]  server OAIServer [required]
    */
    virtual void updateServer(const QString &serverid, const OAIServer &server);

    /**
    * @param[in]  serverid QString [required]
    * @param[in]  attributes OAIObject [required]
    */
    virtual void updateServerAttributes(const QString &serverid, const OAIObject &attributes);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createServerCallback(OAIHttpRequestWorker *worker);
    void deleteServerAttributeCallback(OAIHttpRequestWorker *worker);
    void deleteServerAttributesCallback(OAIHttpRequestWorker *worker);
    void getServerCallback(OAIHttpRequestWorker *worker);
    void getServerAttributesCallback(OAIHttpRequestWorker *worker);
    void getServersCallback(OAIHttpRequestWorker *worker);
    void setServerAttributesCallback(OAIHttpRequestWorker *worker);
    void updateServerCallback(OAIHttpRequestWorker *worker);
    void updateServerAttributesCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createServerSignal(OAIServer summary);
    void deleteServerAttributeSignal();
    void deleteServerAttributesSignal();
    void getServerSignal(OAIServer summary);
    void getServerAttributesSignal(QString summary);
    void getServersSignal(OAIServers summary);
    void setServerAttributesSignal();
    void updateServerSignal(OAIServer summary);
    void updateServerAttributesSignal();


    void createServerSignalFull(OAIHttpRequestWorker *worker, OAIServer summary);
    void deleteServerAttributeSignalFull(OAIHttpRequestWorker *worker);
    void deleteServerAttributesSignalFull(OAIHttpRequestWorker *worker);
    void getServerSignalFull(OAIHttpRequestWorker *worker, OAIServer summary);
    void getServerAttributesSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void getServersSignalFull(OAIHttpRequestWorker *worker, OAIServers summary);
    void setServerAttributesSignalFull(OAIHttpRequestWorker *worker);
    void updateServerSignalFull(OAIHttpRequestWorker *worker, OAIServer summary);
    void updateServerAttributesSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use createServerSignalError() instead")
    void createServerSignalE(OAIServer summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createServerSignalError(OAIServer summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteServerAttributeSignalError() instead")
    void deleteServerAttributeSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteServerAttributeSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteServerAttributesSignalError() instead")
    void deleteServerAttributesSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteServerAttributesSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getServerSignalError() instead")
    void getServerSignalE(OAIServer summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getServerSignalError(OAIServer summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getServerAttributesSignalError() instead")
    void getServerAttributesSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getServerAttributesSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getServersSignalError() instead")
    void getServersSignalE(OAIServers summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getServersSignalError(OAIServers summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setServerAttributesSignalError() instead")
    void setServerAttributesSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void setServerAttributesSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateServerSignalError() instead")
    void updateServerSignalE(OAIServer summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateServerSignalError(OAIServer summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateServerAttributesSignalError() instead")
    void updateServerAttributesSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void updateServerAttributesSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createServerSignalErrorFull() instead")
    void createServerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createServerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteServerAttributeSignalErrorFull() instead")
    void deleteServerAttributeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteServerAttributeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteServerAttributesSignalErrorFull() instead")
    void deleteServerAttributesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteServerAttributesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getServerSignalErrorFull() instead")
    void getServerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getServerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getServerAttributesSignalErrorFull() instead")
    void getServerAttributesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getServerAttributesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getServersSignalErrorFull() instead")
    void getServersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getServersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setServerAttributesSignalErrorFull() instead")
    void setServerAttributesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void setServerAttributesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateServerSignalErrorFull() instead")
    void updateServerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateServerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateServerAttributesSignalErrorFull() instead")
    void updateServerAttributesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateServerAttributesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
