/**
 * nextAuth API
 * API for the nextAuth server
 *
 * The version of the OpenAPI document: 2.2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILoginStatus.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILoginStatus::OAILoginStatus(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILoginStatus::OAILoginStatus() {
    this->initializeModel();
}

OAILoginStatus::~OAILoginStatus() {}

void OAILoginStatus::initializeModel() {

    m_accountid_isSet = false;
    m_accountid_isValid = false;

    m_canprovoke_isSet = false;
    m_canprovoke_isValid = false;

    m_hsid_isSet = false;
    m_hsid_isValid = false;

    m_loggedin_isSet = false;
    m_loggedin_isValid = false;

    m_loginqrdata_isSet = false;
    m_loginqrdata_isValid = false;

    m_pk_isSet = false;
    m_pk_isValid = false;

    m_userid_isSet = false;
    m_userid_isValid = false;
}

void OAILoginStatus::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILoginStatus::fromJsonObject(QJsonObject json) {

    m_accountid_isValid = ::OpenAPI::fromJsonValue(m_accountid, json[QString("accountid")]);
    m_accountid_isSet = !json[QString("accountid")].isNull() && m_accountid_isValid;

    m_canprovoke_isValid = ::OpenAPI::fromJsonValue(m_canprovoke, json[QString("canprovoke")]);
    m_canprovoke_isSet = !json[QString("canprovoke")].isNull() && m_canprovoke_isValid;

    m_hsid_isValid = ::OpenAPI::fromJsonValue(m_hsid, json[QString("hsid")]);
    m_hsid_isSet = !json[QString("hsid")].isNull() && m_hsid_isValid;

    m_loggedin_isValid = ::OpenAPI::fromJsonValue(m_loggedin, json[QString("loggedin")]);
    m_loggedin_isSet = !json[QString("loggedin")].isNull() && m_loggedin_isValid;

    m_loginqrdata_isValid = ::OpenAPI::fromJsonValue(m_loginqrdata, json[QString("loginqrdata")]);
    m_loginqrdata_isSet = !json[QString("loginqrdata")].isNull() && m_loginqrdata_isValid;

    m_pk_isValid = ::OpenAPI::fromJsonValue(m_pk, json[QString("pk")]);
    m_pk_isSet = !json[QString("pk")].isNull() && m_pk_isValid;

    m_userid_isValid = ::OpenAPI::fromJsonValue(m_userid, json[QString("userid")]);
    m_userid_isSet = !json[QString("userid")].isNull() && m_userid_isValid;
}

QString OAILoginStatus::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILoginStatus::asJsonObject() const {
    QJsonObject obj;
    if (m_accountid_isSet) {
        obj.insert(QString("accountid"), ::OpenAPI::toJsonValue(m_accountid));
    }
    if (m_canprovoke_isSet) {
        obj.insert(QString("canprovoke"), ::OpenAPI::toJsonValue(m_canprovoke));
    }
    if (m_hsid_isSet) {
        obj.insert(QString("hsid"), ::OpenAPI::toJsonValue(m_hsid));
    }
    if (m_loggedin_isSet) {
        obj.insert(QString("loggedin"), ::OpenAPI::toJsonValue(m_loggedin));
    }
    if (m_loginqrdata_isSet) {
        obj.insert(QString("loginqrdata"), ::OpenAPI::toJsonValue(m_loginqrdata));
    }
    if (m_pk_isSet) {
        obj.insert(QString("pk"), ::OpenAPI::toJsonValue(m_pk));
    }
    if (m_userid_isSet) {
        obj.insert(QString("userid"), ::OpenAPI::toJsonValue(m_userid));
    }
    return obj;
}

qint32 OAILoginStatus::getAccountid() const {
    return m_accountid;
}
void OAILoginStatus::setAccountid(const qint32 &accountid) {
    m_accountid = accountid;
    m_accountid_isSet = true;
}

bool OAILoginStatus::is_accountid_Set() const{
    return m_accountid_isSet;
}

bool OAILoginStatus::is_accountid_Valid() const{
    return m_accountid_isValid;
}

bool OAILoginStatus::isCanprovoke() const {
    return m_canprovoke;
}
void OAILoginStatus::setCanprovoke(const bool &canprovoke) {
    m_canprovoke = canprovoke;
    m_canprovoke_isSet = true;
}

bool OAILoginStatus::is_canprovoke_Set() const{
    return m_canprovoke_isSet;
}

bool OAILoginStatus::is_canprovoke_Valid() const{
    return m_canprovoke_isValid;
}

QString OAILoginStatus::getHsid() const {
    return m_hsid;
}
void OAILoginStatus::setHsid(const QString &hsid) {
    m_hsid = hsid;
    m_hsid_isSet = true;
}

bool OAILoginStatus::is_hsid_Set() const{
    return m_hsid_isSet;
}

bool OAILoginStatus::is_hsid_Valid() const{
    return m_hsid_isValid;
}

bool OAILoginStatus::isLoggedin() const {
    return m_loggedin;
}
void OAILoginStatus::setLoggedin(const bool &loggedin) {
    m_loggedin = loggedin;
    m_loggedin_isSet = true;
}

bool OAILoginStatus::is_loggedin_Set() const{
    return m_loggedin_isSet;
}

bool OAILoginStatus::is_loggedin_Valid() const{
    return m_loggedin_isValid;
}

QString OAILoginStatus::getLoginqrdata() const {
    return m_loginqrdata;
}
void OAILoginStatus::setLoginqrdata(const QString &loginqrdata) {
    m_loginqrdata = loginqrdata;
    m_loginqrdata_isSet = true;
}

bool OAILoginStatus::is_loginqrdata_Set() const{
    return m_loginqrdata_isSet;
}

bool OAILoginStatus::is_loginqrdata_Valid() const{
    return m_loginqrdata_isValid;
}

QString OAILoginStatus::getPk() const {
    return m_pk;
}
void OAILoginStatus::setPk(const QString &pk) {
    m_pk = pk;
    m_pk_isSet = true;
}

bool OAILoginStatus::is_pk_Set() const{
    return m_pk_isSet;
}

bool OAILoginStatus::is_pk_Valid() const{
    return m_pk_isValid;
}

QString OAILoginStatus::getUserid() const {
    return m_userid;
}
void OAILoginStatus::setUserid(const QString &userid) {
    m_userid = userid;
    m_userid_isSet = true;
}

bool OAILoginStatus::is_userid_Set() const{
    return m_userid_isSet;
}

bool OAILoginStatus::is_userid_Valid() const{
    return m_userid_isValid;
}

bool OAILoginStatus::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_accountid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_canprovoke_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hsid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_loggedin_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_loginqrdata_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pk_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_userid_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILoginStatus::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
