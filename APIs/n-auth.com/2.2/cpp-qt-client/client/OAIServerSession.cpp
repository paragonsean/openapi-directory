/**
 * nextAuth API
 * API for the nextAuth server
 *
 * The version of the OpenAPI document: 2.2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIServerSession.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIServerSession::OAIServerSession(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIServerSession::OAIServerSession() {
    this->initializeModel();
}

OAIServerSession::~OAIServerSession() {}

void OAIServerSession::initializeModel() {

    m_serverid_isSet = false;
    m_serverid_isValid = false;

    m_sessionid_isSet = false;
    m_sessionid_isValid = false;
}

void OAIServerSession::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIServerSession::fromJsonObject(QJsonObject json) {

    m_serverid_isValid = ::OpenAPI::fromJsonValue(m_serverid, json[QString("serverid")]);
    m_serverid_isSet = !json[QString("serverid")].isNull() && m_serverid_isValid;

    m_sessionid_isValid = ::OpenAPI::fromJsonValue(m_sessionid, json[QString("sessionid")]);
    m_sessionid_isSet = !json[QString("sessionid")].isNull() && m_sessionid_isValid;
}

QString OAIServerSession::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIServerSession::asJsonObject() const {
    QJsonObject obj;
    if (m_serverid_isSet) {
        obj.insert(QString("serverid"), ::OpenAPI::toJsonValue(m_serverid));
    }
    if (m_sessionid_isSet) {
        obj.insert(QString("sessionid"), ::OpenAPI::toJsonValue(m_sessionid));
    }
    return obj;
}

QString OAIServerSession::getServerid() const {
    return m_serverid;
}
void OAIServerSession::setServerid(const QString &serverid) {
    m_serverid = serverid;
    m_serverid_isSet = true;
}

bool OAIServerSession::is_serverid_Set() const{
    return m_serverid_isSet;
}

bool OAIServerSession::is_serverid_Valid() const{
    return m_serverid_isValid;
}

QString OAIServerSession::getSessionid() const {
    return m_sessionid;
}
void OAIServerSession::setSessionid(const QString &sessionid) {
    m_sessionid = sessionid;
    m_sessionid_isSet = true;
}

bool OAIServerSession::is_sessionid_Set() const{
    return m_sessionid_isSet;
}

bool OAIServerSession::is_sessionid_Valid() const{
    return m_sessionid_isValid;
}

bool OAIServerSession::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_serverid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sessionid_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIServerSession::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_serverid_isValid && m_sessionid_isValid && true;
}

} // namespace OpenAPI
