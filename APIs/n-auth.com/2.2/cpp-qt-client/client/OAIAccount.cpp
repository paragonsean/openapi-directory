/**
 * nextAuth API
 * API for the nextAuth server
 *
 * The version of the OpenAPI document: 2.2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAccount.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAccount::OAIAccount(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAccount::OAIAccount() {
    this->initializeModel();
}

OAIAccount::~OAIAccount() {}

void OAIAccount::initializeModel() {

    m_blocked_isSet = false;
    m_blocked_isValid = false;

    m_client_version_isSet = false;
    m_client_version_isValid = false;

    m_created_isSet = false;
    m_created_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_lastlogin_isSet = false;
    m_lastlogin_isValid = false;

    m_lastprovoke_isSet = false;
    m_lastprovoke_isValid = false;

    m_userid_isSet = false;
    m_userid_isValid = false;
}

void OAIAccount::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAccount::fromJsonObject(QJsonObject json) {

    m_blocked_isValid = ::OpenAPI::fromJsonValue(m_blocked, json[QString("blocked")]);
    m_blocked_isSet = !json[QString("blocked")].isNull() && m_blocked_isValid;

    m_client_version_isValid = ::OpenAPI::fromJsonValue(m_client_version, json[QString("clientVersion")]);
    m_client_version_isSet = !json[QString("clientVersion")].isNull() && m_client_version_isValid;

    m_created_isValid = ::OpenAPI::fromJsonValue(m_created, json[QString("created")]);
    m_created_isSet = !json[QString("created")].isNull() && m_created_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_lastlogin_isValid = ::OpenAPI::fromJsonValue(m_lastlogin, json[QString("lastlogin")]);
    m_lastlogin_isSet = !json[QString("lastlogin")].isNull() && m_lastlogin_isValid;

    m_lastprovoke_isValid = ::OpenAPI::fromJsonValue(m_lastprovoke, json[QString("lastprovoke")]);
    m_lastprovoke_isSet = !json[QString("lastprovoke")].isNull() && m_lastprovoke_isValid;

    m_userid_isValid = ::OpenAPI::fromJsonValue(m_userid, json[QString("userid")]);
    m_userid_isSet = !json[QString("userid")].isNull() && m_userid_isValid;
}

QString OAIAccount::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAccount::asJsonObject() const {
    QJsonObject obj;
    if (m_blocked_isSet) {
        obj.insert(QString("blocked"), ::OpenAPI::toJsonValue(m_blocked));
    }
    if (m_client_version_isSet) {
        obj.insert(QString("clientVersion"), ::OpenAPI::toJsonValue(m_client_version));
    }
    if (m_created_isSet) {
        obj.insert(QString("created"), ::OpenAPI::toJsonValue(m_created));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_lastlogin_isSet) {
        obj.insert(QString("lastlogin"), ::OpenAPI::toJsonValue(m_lastlogin));
    }
    if (m_lastprovoke_isSet) {
        obj.insert(QString("lastprovoke"), ::OpenAPI::toJsonValue(m_lastprovoke));
    }
    if (m_userid_isSet) {
        obj.insert(QString("userid"), ::OpenAPI::toJsonValue(m_userid));
    }
    return obj;
}

bool OAIAccount::isBlocked() const {
    return m_blocked;
}
void OAIAccount::setBlocked(const bool &blocked) {
    m_blocked = blocked;
    m_blocked_isSet = true;
}

bool OAIAccount::is_blocked_Set() const{
    return m_blocked_isSet;
}

bool OAIAccount::is_blocked_Valid() const{
    return m_blocked_isValid;
}

QString OAIAccount::getClientVersion() const {
    return m_client_version;
}
void OAIAccount::setClientVersion(const QString &client_version) {
    m_client_version = client_version;
    m_client_version_isSet = true;
}

bool OAIAccount::is_client_version_Set() const{
    return m_client_version_isSet;
}

bool OAIAccount::is_client_version_Valid() const{
    return m_client_version_isValid;
}

qint64 OAIAccount::getCreated() const {
    return m_created;
}
void OAIAccount::setCreated(const qint64 &created) {
    m_created = created;
    m_created_isSet = true;
}

bool OAIAccount::is_created_Set() const{
    return m_created_isSet;
}

bool OAIAccount::is_created_Valid() const{
    return m_created_isValid;
}

QString OAIAccount::getDescription() const {
    return m_description;
}
void OAIAccount::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIAccount::is_description_Set() const{
    return m_description_isSet;
}

bool OAIAccount::is_description_Valid() const{
    return m_description_isValid;
}

qint32 OAIAccount::getId() const {
    return m_id;
}
void OAIAccount::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIAccount::is_id_Set() const{
    return m_id_isSet;
}

bool OAIAccount::is_id_Valid() const{
    return m_id_isValid;
}

qint64 OAIAccount::getLastlogin() const {
    return m_lastlogin;
}
void OAIAccount::setLastlogin(const qint64 &lastlogin) {
    m_lastlogin = lastlogin;
    m_lastlogin_isSet = true;
}

bool OAIAccount::is_lastlogin_Set() const{
    return m_lastlogin_isSet;
}

bool OAIAccount::is_lastlogin_Valid() const{
    return m_lastlogin_isValid;
}

qint64 OAIAccount::getLastprovoke() const {
    return m_lastprovoke;
}
void OAIAccount::setLastprovoke(const qint64 &lastprovoke) {
    m_lastprovoke = lastprovoke;
    m_lastprovoke_isSet = true;
}

bool OAIAccount::is_lastprovoke_Set() const{
    return m_lastprovoke_isSet;
}

bool OAIAccount::is_lastprovoke_Valid() const{
    return m_lastprovoke_isValid;
}

QString OAIAccount::getUserid() const {
    return m_userid;
}
void OAIAccount::setUserid(const QString &userid) {
    m_userid = userid;
    m_userid_isSet = true;
}

bool OAIAccount::is_userid_Set() const{
    return m_userid_isSet;
}

bool OAIAccount::is_userid_Valid() const{
    return m_userid_isValid;
}

bool OAIAccount::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_blocked_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lastlogin_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lastprovoke_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_userid_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAccount::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_description_isValid && m_id_isValid && true;
}

} // namespace OpenAPI
