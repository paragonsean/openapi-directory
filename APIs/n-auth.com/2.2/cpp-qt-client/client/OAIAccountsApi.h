/**
 * nextAuth API
 * API for the nextAuth server
 *
 * The version of the OpenAPI document: 2.2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIAccountsApi_H
#define OAI_OAIAccountsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAccount.h"
#include "OAIAccounts.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIAccountsApi : public QObject {
    Q_OBJECT

public:
    OAIAccountsApi(const int timeOut = 0);
    ~OAIAccountsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  serverid QString [required]
    * @param[in]  accountid qint32 [required]
    */
    virtual void deleteAccount(const QString &serverid, const qint32 &accountid);

    /**
    * @param[in]  serverid QString [required]
    * @param[in]  userid QString [required]
    */
    virtual void deleteUserAccounts(const QString &serverid, const QString &userid);

    /**
    * @param[in]  serverid QString [required]
    * @param[in]  accountid qint32 [required]
    */
    virtual void getAccount(const QString &serverid, const qint32 &accountid);

    /**
    * @param[in]  serverid QString [required]
    * @param[in]  filter QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  marker qint32 [optional]
    * @param[in]  sort QString [optional]
    */
    virtual void getAllAccounts(const QString &serverid, const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &marker = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  serverid QString [required]
    * @param[in]  userid QString [required]
    * @param[in]  limit qint32 [optional]
    * @param[in]  marker qint32 [optional]
    * @param[in]  sort QString [optional]
    */
    virtual void getUser(const QString &serverid, const QString &userid, const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &marker = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  serverid QString [required]
    * @param[in]  accountid qint32 [required]
    * @param[in]  blocked bool [required]
    */
    virtual void updateAccount(const QString &serverid, const qint32 &accountid, const bool &blocked);

    /**
    * @param[in]  serverid QString [required]
    * @param[in]  accountid qint32 [required]
    * @param[in]  userid QString [required]
    */
    virtual void updateAccountUser(const QString &serverid, const qint32 &accountid, const QString &userid);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void deleteAccountCallback(OAIHttpRequestWorker *worker);
    void deleteUserAccountsCallback(OAIHttpRequestWorker *worker);
    void getAccountCallback(OAIHttpRequestWorker *worker);
    void getAllAccountsCallback(OAIHttpRequestWorker *worker);
    void getUserCallback(OAIHttpRequestWorker *worker);
    void updateAccountCallback(OAIHttpRequestWorker *worker);
    void updateAccountUserCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void deleteAccountSignal();
    void deleteUserAccountsSignal();
    void getAccountSignal(OAIAccount summary);
    void getAllAccountsSignal(OAIAccounts summary);
    void getUserSignal(OAIAccounts summary);
    void updateAccountSignal(OAIAccount summary);
    void updateAccountUserSignal(OAIAccount summary);


    void deleteAccountSignalFull(OAIHttpRequestWorker *worker);
    void deleteUserAccountsSignalFull(OAIHttpRequestWorker *worker);
    void getAccountSignalFull(OAIHttpRequestWorker *worker, OAIAccount summary);
    void getAllAccountsSignalFull(OAIHttpRequestWorker *worker, OAIAccounts summary);
    void getUserSignalFull(OAIHttpRequestWorker *worker, OAIAccounts summary);
    void updateAccountSignalFull(OAIHttpRequestWorker *worker, OAIAccount summary);
    void updateAccountUserSignalFull(OAIHttpRequestWorker *worker, OAIAccount summary);

    Q_DECL_DEPRECATED_X("Use deleteAccountSignalError() instead")
    void deleteAccountSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteAccountSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteUserAccountsSignalError() instead")
    void deleteUserAccountsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteUserAccountsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAccountSignalError() instead")
    void getAccountSignalE(OAIAccount summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAccountSignalError(OAIAccount summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAllAccountsSignalError() instead")
    void getAllAccountsSignalE(OAIAccounts summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAllAccountsSignalError(OAIAccounts summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUserSignalError() instead")
    void getUserSignalE(OAIAccounts summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getUserSignalError(OAIAccounts summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateAccountSignalError() instead")
    void updateAccountSignalE(OAIAccount summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateAccountSignalError(OAIAccount summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateAccountUserSignalError() instead")
    void updateAccountUserSignalE(OAIAccount summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateAccountUserSignalError(OAIAccount summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use deleteAccountSignalErrorFull() instead")
    void deleteAccountSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteAccountSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteUserAccountsSignalErrorFull() instead")
    void deleteUserAccountsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteUserAccountsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAccountSignalErrorFull() instead")
    void getAccountSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAccountSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAllAccountsSignalErrorFull() instead")
    void getAllAccountsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAllAccountsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUserSignalErrorFull() instead")
    void getUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateAccountSignalErrorFull() instead")
    void updateAccountSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateAccountSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateAccountUserSignalErrorFull() instead")
    void updateAccountUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateAccountUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
