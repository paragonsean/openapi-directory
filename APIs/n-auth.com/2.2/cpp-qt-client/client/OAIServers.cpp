/**
 * nextAuth API
 * API for the nextAuth server
 *
 * The version of the OpenAPI document: 2.2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIServers.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIServers::OAIServers(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIServers::OAIServers() {
    this->initializeModel();
}

OAIServers::~OAIServers() {}

void OAIServers::initializeModel() {

    m_servers_isSet = false;
    m_servers_isValid = false;

    m_totalnumber_isSet = false;
    m_totalnumber_isValid = false;
}

void OAIServers::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIServers::fromJsonObject(QJsonObject json) {

    m_servers_isValid = ::OpenAPI::fromJsonValue(m_servers, json[QString("servers")]);
    m_servers_isSet = !json[QString("servers")].isNull() && m_servers_isValid;

    m_totalnumber_isValid = ::OpenAPI::fromJsonValue(m_totalnumber, json[QString("totalnumber")]);
    m_totalnumber_isSet = !json[QString("totalnumber")].isNull() && m_totalnumber_isValid;
}

QString OAIServers::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIServers::asJsonObject() const {
    QJsonObject obj;
    if (m_servers.size() > 0) {
        obj.insert(QString("servers"), ::OpenAPI::toJsonValue(m_servers));
    }
    if (m_totalnumber_isSet) {
        obj.insert(QString("totalnumber"), ::OpenAPI::toJsonValue(m_totalnumber));
    }
    return obj;
}

QList<OAIServer> OAIServers::getServers() const {
    return m_servers;
}
void OAIServers::setServers(const QList<OAIServer> &servers) {
    m_servers = servers;
    m_servers_isSet = true;
}

bool OAIServers::is_servers_Set() const{
    return m_servers_isSet;
}

bool OAIServers::is_servers_Valid() const{
    return m_servers_isValid;
}

qint32 OAIServers::getTotalnumber() const {
    return m_totalnumber;
}
void OAIServers::setTotalnumber(const qint32 &totalnumber) {
    m_totalnumber = totalnumber;
    m_totalnumber_isSet = true;
}

bool OAIServers::is_totalnumber_Set() const{
    return m_totalnumber_isSet;
}

bool OAIServers::is_totalnumber_Valid() const{
    return m_totalnumber_isValid;
}

bool OAIServers::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_servers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_totalnumber_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIServers::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_servers_isValid && true;
}

} // namespace OpenAPI
