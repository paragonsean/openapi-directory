/**
 * nextAuth API
 * API for the nextAuth server
 *
 * The version of the OpenAPI document: 2.2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISessionInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISessionInfo::OAISessionInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISessionInfo::OAISessionInfo() {
    this->initializeModel();
}

OAISessionInfo::~OAISessionInfo() {}

void OAISessionInfo::initializeModel() {

    m_info_isSet = false;
    m_info_isValid = false;

    m_ip_isSet = false;
    m_ip_isValid = false;

    m_logo_isSet = false;
    m_logo_isValid = false;

    m_useragent_isSet = false;
    m_useragent_isValid = false;
}

void OAISessionInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISessionInfo::fromJsonObject(QJsonObject json) {

    m_info_isValid = ::OpenAPI::fromJsonValue(m_info, json[QString("info")]);
    m_info_isSet = !json[QString("info")].isNull() && m_info_isValid;

    m_ip_isValid = ::OpenAPI::fromJsonValue(m_ip, json[QString("ip")]);
    m_ip_isSet = !json[QString("ip")].isNull() && m_ip_isValid;

    m_logo_isValid = ::OpenAPI::fromJsonValue(m_logo, json[QString("logo")]);
    m_logo_isSet = !json[QString("logo")].isNull() && m_logo_isValid;

    m_useragent_isValid = ::OpenAPI::fromJsonValue(m_useragent, json[QString("useragent")]);
    m_useragent_isSet = !json[QString("useragent")].isNull() && m_useragent_isValid;
}

QString OAISessionInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISessionInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_info_isSet) {
        obj.insert(QString("info"), ::OpenAPI::toJsonValue(m_info));
    }
    if (m_ip_isSet) {
        obj.insert(QString("ip"), ::OpenAPI::toJsonValue(m_ip));
    }
    if (m_logo_isSet) {
        obj.insert(QString("logo"), ::OpenAPI::toJsonValue(m_logo));
    }
    if (m_useragent_isSet) {
        obj.insert(QString("useragent"), ::OpenAPI::toJsonValue(m_useragent));
    }
    return obj;
}

OAIObject OAISessionInfo::getInfo() const {
    return m_info;
}
void OAISessionInfo::setInfo(const OAIObject &info) {
    m_info = info;
    m_info_isSet = true;
}

bool OAISessionInfo::is_info_Set() const{
    return m_info_isSet;
}

bool OAISessionInfo::is_info_Valid() const{
    return m_info_isValid;
}

QString OAISessionInfo::getIp() const {
    return m_ip;
}
void OAISessionInfo::setIp(const QString &ip) {
    m_ip = ip;
    m_ip_isSet = true;
}

bool OAISessionInfo::is_ip_Set() const{
    return m_ip_isSet;
}

bool OAISessionInfo::is_ip_Valid() const{
    return m_ip_isValid;
}

QByteArray OAISessionInfo::getLogo() const {
    return m_logo;
}
void OAISessionInfo::setLogo(const QByteArray &logo) {
    m_logo = logo;
    m_logo_isSet = true;
}

bool OAISessionInfo::is_logo_Set() const{
    return m_logo_isSet;
}

bool OAISessionInfo::is_logo_Valid() const{
    return m_logo_isValid;
}

QString OAISessionInfo::getUseragent() const {
    return m_useragent;
}
void OAISessionInfo::setUseragent(const QString &useragent) {
    m_useragent = useragent;
    m_useragent_isSet = true;
}

bool OAISessionInfo::is_useragent_Set() const{
    return m_useragent_isSet;
}

bool OAISessionInfo::is_useragent_Valid() const{
    return m_useragent_isValid;
}

bool OAISessionInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_info_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ip_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_logo_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_useragent_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISessionInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
