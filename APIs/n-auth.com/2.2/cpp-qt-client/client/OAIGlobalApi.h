/**
 * nextAuth API
 * API for the nextAuth server
 *
 * The version of the OpenAPI document: 2.2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIGlobalApi_H
#define OAI_OAIGlobalApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIObject.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIGlobalApi : public QObject {
    Q_OBJECT

public:
    OAIGlobalApi(const int timeOut = 0);
    ~OAIGlobalApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  attributekey QString [required]
    */
    virtual void deleteGlobalAttribute(const QString &attributekey);


    virtual void deleteGlobalAttributes();

    /**
    * @param[in]  serverid QString [required]
    * @param[in]  attributekey QString [required]
    */
    virtual void deleteServerPrivilegedAttribute(const QString &serverid, const QString &attributekey);

    /**
    * @param[in]  serverid QString [required]
    */
    virtual void deleteServerPrivilegedAttributes(const QString &serverid);


    virtual void getGlobalAttributes();

    /**
    * @param[in]  serverid QString [required]
    */
    virtual void getServerPrivilegedAttributes(const QString &serverid);

    /**
    * @param[in]  attributes OAIObject [required]
    */
    virtual void setGlobalAttributes(const OAIObject &attributes);

    /**
    * @param[in]  serverid QString [required]
    * @param[in]  attributes OAIObject [required]
    */
    virtual void setServerPrivilegedAttributes(const QString &serverid, const OAIObject &attributes);

    /**
    * @param[in]  attributes OAIObject [required]
    */
    virtual void updateGlobalAttributes(const OAIObject &attributes);

    /**
    * @param[in]  serverid QString [required]
    * @param[in]  attributes OAIObject [required]
    */
    virtual void updateServerPrivilegedAttributes(const QString &serverid, const OAIObject &attributes);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void deleteGlobalAttributeCallback(OAIHttpRequestWorker *worker);
    void deleteGlobalAttributesCallback(OAIHttpRequestWorker *worker);
    void deleteServerPrivilegedAttributeCallback(OAIHttpRequestWorker *worker);
    void deleteServerPrivilegedAttributesCallback(OAIHttpRequestWorker *worker);
    void getGlobalAttributesCallback(OAIHttpRequestWorker *worker);
    void getServerPrivilegedAttributesCallback(OAIHttpRequestWorker *worker);
    void setGlobalAttributesCallback(OAIHttpRequestWorker *worker);
    void setServerPrivilegedAttributesCallback(OAIHttpRequestWorker *worker);
    void updateGlobalAttributesCallback(OAIHttpRequestWorker *worker);
    void updateServerPrivilegedAttributesCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void deleteGlobalAttributeSignal();
    void deleteGlobalAttributesSignal();
    void deleteServerPrivilegedAttributeSignal();
    void deleteServerPrivilegedAttributesSignal();
    void getGlobalAttributesSignal(QString summary);
    void getServerPrivilegedAttributesSignal(QString summary);
    void setGlobalAttributesSignal();
    void setServerPrivilegedAttributesSignal();
    void updateGlobalAttributesSignal();
    void updateServerPrivilegedAttributesSignal();


    void deleteGlobalAttributeSignalFull(OAIHttpRequestWorker *worker);
    void deleteGlobalAttributesSignalFull(OAIHttpRequestWorker *worker);
    void deleteServerPrivilegedAttributeSignalFull(OAIHttpRequestWorker *worker);
    void deleteServerPrivilegedAttributesSignalFull(OAIHttpRequestWorker *worker);
    void getGlobalAttributesSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void getServerPrivilegedAttributesSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void setGlobalAttributesSignalFull(OAIHttpRequestWorker *worker);
    void setServerPrivilegedAttributesSignalFull(OAIHttpRequestWorker *worker);
    void updateGlobalAttributesSignalFull(OAIHttpRequestWorker *worker);
    void updateServerPrivilegedAttributesSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use deleteGlobalAttributeSignalError() instead")
    void deleteGlobalAttributeSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteGlobalAttributeSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteGlobalAttributesSignalError() instead")
    void deleteGlobalAttributesSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteGlobalAttributesSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteServerPrivilegedAttributeSignalError() instead")
    void deleteServerPrivilegedAttributeSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteServerPrivilegedAttributeSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteServerPrivilegedAttributesSignalError() instead")
    void deleteServerPrivilegedAttributesSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteServerPrivilegedAttributesSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getGlobalAttributesSignalError() instead")
    void getGlobalAttributesSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getGlobalAttributesSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getServerPrivilegedAttributesSignalError() instead")
    void getServerPrivilegedAttributesSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getServerPrivilegedAttributesSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setGlobalAttributesSignalError() instead")
    void setGlobalAttributesSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void setGlobalAttributesSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setServerPrivilegedAttributesSignalError() instead")
    void setServerPrivilegedAttributesSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void setServerPrivilegedAttributesSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateGlobalAttributesSignalError() instead")
    void updateGlobalAttributesSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void updateGlobalAttributesSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateServerPrivilegedAttributesSignalError() instead")
    void updateServerPrivilegedAttributesSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void updateServerPrivilegedAttributesSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use deleteGlobalAttributeSignalErrorFull() instead")
    void deleteGlobalAttributeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteGlobalAttributeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteGlobalAttributesSignalErrorFull() instead")
    void deleteGlobalAttributesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteGlobalAttributesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteServerPrivilegedAttributeSignalErrorFull() instead")
    void deleteServerPrivilegedAttributeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteServerPrivilegedAttributeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteServerPrivilegedAttributesSignalErrorFull() instead")
    void deleteServerPrivilegedAttributesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteServerPrivilegedAttributesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getGlobalAttributesSignalErrorFull() instead")
    void getGlobalAttributesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getGlobalAttributesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getServerPrivilegedAttributesSignalErrorFull() instead")
    void getServerPrivilegedAttributesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getServerPrivilegedAttributesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setGlobalAttributesSignalErrorFull() instead")
    void setGlobalAttributesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void setGlobalAttributesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setServerPrivilegedAttributesSignalErrorFull() instead")
    void setServerPrivilegedAttributesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void setServerPrivilegedAttributesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateGlobalAttributesSignalErrorFull() instead")
    void updateGlobalAttributesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateGlobalAttributesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateServerPrivilegedAttributesSignalErrorFull() instead")
    void updateServerPrivilegedAttributesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateServerPrivilegedAttributesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
