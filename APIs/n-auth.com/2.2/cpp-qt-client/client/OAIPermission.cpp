/**
 * nextAuth API
 * API for the nextAuth server
 *
 * The version of the OpenAPI document: 2.2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPermission.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPermission::OAIPermission(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPermission::OAIPermission() {
    this->initializeModel();
}

OAIPermission::~OAIPermission() {}

void OAIPermission::initializeModel() {

    m_acl_isSet = false;
    m_acl_isValid = false;

    m_role_isSet = false;
    m_role_isValid = false;

    m_server_isSet = false;
    m_server_isValid = false;
}

void OAIPermission::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPermission::fromJsonObject(QJsonObject json) {

    m_acl_isValid = ::OpenAPI::fromJsonValue(m_acl, json[QString("acl")]);
    m_acl_isSet = !json[QString("acl")].isNull() && m_acl_isValid;

    m_role_isValid = ::OpenAPI::fromJsonValue(m_role, json[QString("role")]);
    m_role_isSet = !json[QString("role")].isNull() && m_role_isValid;

    m_server_isValid = ::OpenAPI::fromJsonValue(m_server, json[QString("server")]);
    m_server_isSet = !json[QString("server")].isNull() && m_server_isValid;
}

QString OAIPermission::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPermission::asJsonObject() const {
    QJsonObject obj;
    if (m_acl_isSet) {
        obj.insert(QString("acl"), ::OpenAPI::toJsonValue(m_acl));
    }
    if (m_role_isSet) {
        obj.insert(QString("role"), ::OpenAPI::toJsonValue(m_role));
    }
    if (m_server_isSet) {
        obj.insert(QString("server"), ::OpenAPI::toJsonValue(m_server));
    }
    return obj;
}

QString OAIPermission::getAcl() const {
    return m_acl;
}
void OAIPermission::setAcl(const QString &acl) {
    m_acl = acl;
    m_acl_isSet = true;
}

bool OAIPermission::is_acl_Set() const{
    return m_acl_isSet;
}

bool OAIPermission::is_acl_Valid() const{
    return m_acl_isValid;
}

QString OAIPermission::getRole() const {
    return m_role;
}
void OAIPermission::setRole(const QString &role) {
    m_role = role;
    m_role_isSet = true;
}

bool OAIPermission::is_role_Set() const{
    return m_role_isSet;
}

bool OAIPermission::is_role_Valid() const{
    return m_role_isValid;
}

QString OAIPermission::getServer() const {
    return m_server;
}
void OAIPermission::setServer(const QString &server) {
    m_server = server;
    m_server_isSet = true;
}

bool OAIPermission::is_server_Set() const{
    return m_server_isSet;
}

bool OAIPermission::is_server_Valid() const{
    return m_server_isValid;
}

bool OAIPermission::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_acl_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_role_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_server_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPermission::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
