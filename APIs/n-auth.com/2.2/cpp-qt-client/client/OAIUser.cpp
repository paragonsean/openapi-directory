/**
 * nextAuth API
 * API for the nextAuth server
 *
 * The version of the OpenAPI document: 2.2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUser.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUser::OAIUser(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUser::OAIUser() {
    this->initializeModel();
}

OAIUser::~OAIUser() {}

void OAIUser::initializeModel() {

    m_lastlogin_isSet = false;
    m_lastlogin_isValid = false;

    m_numberaccounts_isSet = false;
    m_numberaccounts_isValid = false;

    m_userid_isSet = false;
    m_userid_isValid = false;
}

void OAIUser::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUser::fromJsonObject(QJsonObject json) {

    m_lastlogin_isValid = ::OpenAPI::fromJsonValue(m_lastlogin, json[QString("lastlogin")]);
    m_lastlogin_isSet = !json[QString("lastlogin")].isNull() && m_lastlogin_isValid;

    m_numberaccounts_isValid = ::OpenAPI::fromJsonValue(m_numberaccounts, json[QString("numberaccounts")]);
    m_numberaccounts_isSet = !json[QString("numberaccounts")].isNull() && m_numberaccounts_isValid;

    m_userid_isValid = ::OpenAPI::fromJsonValue(m_userid, json[QString("userid")]);
    m_userid_isSet = !json[QString("userid")].isNull() && m_userid_isValid;
}

QString OAIUser::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUser::asJsonObject() const {
    QJsonObject obj;
    if (m_lastlogin_isSet) {
        obj.insert(QString("lastlogin"), ::OpenAPI::toJsonValue(m_lastlogin));
    }
    if (m_numberaccounts_isSet) {
        obj.insert(QString("numberaccounts"), ::OpenAPI::toJsonValue(m_numberaccounts));
    }
    if (m_userid_isSet) {
        obj.insert(QString("userid"), ::OpenAPI::toJsonValue(m_userid));
    }
    return obj;
}

qint64 OAIUser::getLastlogin() const {
    return m_lastlogin;
}
void OAIUser::setLastlogin(const qint64 &lastlogin) {
    m_lastlogin = lastlogin;
    m_lastlogin_isSet = true;
}

bool OAIUser::is_lastlogin_Set() const{
    return m_lastlogin_isSet;
}

bool OAIUser::is_lastlogin_Valid() const{
    return m_lastlogin_isValid;
}

qint32 OAIUser::getNumberaccounts() const {
    return m_numberaccounts;
}
void OAIUser::setNumberaccounts(const qint32 &numberaccounts) {
    m_numberaccounts = numberaccounts;
    m_numberaccounts_isSet = true;
}

bool OAIUser::is_numberaccounts_Set() const{
    return m_numberaccounts_isSet;
}

bool OAIUser::is_numberaccounts_Valid() const{
    return m_numberaccounts_isValid;
}

QString OAIUser::getUserid() const {
    return m_userid;
}
void OAIUser::setUserid(const QString &userid) {
    m_userid = userid;
    m_userid_isSet = true;
}

bool OAIUser::is_userid_Set() const{
    return m_userid_isSet;
}

bool OAIUser::is_userid_Valid() const{
    return m_userid_isValid;
}

bool OAIUser::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_lastlogin_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_numberaccounts_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_userid_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUser::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_userid_isValid && true;
}

} // namespace OpenAPI
