/**
 * nextAuth API
 * API for the nextAuth server
 *
 * The version of the OpenAPI document: 2.2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIManagementApi_H
#define OAI_OAIManagementApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIApiKey.h"
#include "OAIApiKeys.h"
#include "OAIGetOrCreateUserRole_200_response.h"
#include "OAIPermissions.h"
#include "OAIRole.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIManagementApi : public QObject {
    Q_OBJECT

public:
    OAIManagementApi(const int timeOut = 0);
    ~OAIManagementApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  description QString [required]
    */
    virtual void createApiKey(const QString &description);

    /**
    * @param[in]  serverid QString [required]
    */
    virtual void getAllPermissions(const QString &serverid);


    virtual void getApiKeys();

    /**
    * @param[in]  serverid QString [required]
    * @param[in]  userid QString [required]
    */
    virtual void getOrCreateUserRole(const QString &serverid, const QString &userid);

    /**
    * @param[in]  serverid QString [required]
    * @param[in]  roleid QString [required]
    */
    virtual void getPermissions(const QString &serverid, const QString &roleid);

    /**
    * @param[in]  serverid QString [required]
    * @param[in]  userid QString [required]
    */
    virtual void getUserRole(const QString &serverid, const QString &userid);

    /**
    * @param[in]  serverid QString [required]
    * @param[in]  roleid QString [required]
    * @param[in]  permissions QList<QString> [required]
    */
    virtual void grantPermissions(const QString &serverid, const QString &roleid, const QList<QString> &permissions);

    /**
    * @param[in]  serverid QString [required]
    * @param[in]  roleid QString [required]
    */
    virtual void revokePermissions(const QString &serverid, const QString &roleid);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createApiKeyCallback(OAIHttpRequestWorker *worker);
    void getAllPermissionsCallback(OAIHttpRequestWorker *worker);
    void getApiKeysCallback(OAIHttpRequestWorker *worker);
    void getOrCreateUserRoleCallback(OAIHttpRequestWorker *worker);
    void getPermissionsCallback(OAIHttpRequestWorker *worker);
    void getUserRoleCallback(OAIHttpRequestWorker *worker);
    void grantPermissionsCallback(OAIHttpRequestWorker *worker);
    void revokePermissionsCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createApiKeySignal(OAIApiKey summary);
    void getAllPermissionsSignal(OAIPermissions summary);
    void getApiKeysSignal(OAIApiKeys summary);
    void getOrCreateUserRoleSignal(OAIGetOrCreateUserRole_200_response summary);
    void getPermissionsSignal(OAIPermissions summary);
    void getUserRoleSignal(OAIRole summary);
    void grantPermissionsSignal();
    void revokePermissionsSignal();


    void createApiKeySignalFull(OAIHttpRequestWorker *worker, OAIApiKey summary);
    void getAllPermissionsSignalFull(OAIHttpRequestWorker *worker, OAIPermissions summary);
    void getApiKeysSignalFull(OAIHttpRequestWorker *worker, OAIApiKeys summary);
    void getOrCreateUserRoleSignalFull(OAIHttpRequestWorker *worker, OAIGetOrCreateUserRole_200_response summary);
    void getPermissionsSignalFull(OAIHttpRequestWorker *worker, OAIPermissions summary);
    void getUserRoleSignalFull(OAIHttpRequestWorker *worker, OAIRole summary);
    void grantPermissionsSignalFull(OAIHttpRequestWorker *worker);
    void revokePermissionsSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use createApiKeySignalError() instead")
    void createApiKeySignalE(OAIApiKey summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createApiKeySignalError(OAIApiKey summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAllPermissionsSignalError() instead")
    void getAllPermissionsSignalE(OAIPermissions summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAllPermissionsSignalError(OAIPermissions summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getApiKeysSignalError() instead")
    void getApiKeysSignalE(OAIApiKeys summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getApiKeysSignalError(OAIApiKeys summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrCreateUserRoleSignalError() instead")
    void getOrCreateUserRoleSignalE(OAIGetOrCreateUserRole_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrCreateUserRoleSignalError(OAIGetOrCreateUserRole_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPermissionsSignalError() instead")
    void getPermissionsSignalE(OAIPermissions summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPermissionsSignalError(OAIPermissions summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUserRoleSignalError() instead")
    void getUserRoleSignalE(OAIRole summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getUserRoleSignalError(OAIRole summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use grantPermissionsSignalError() instead")
    void grantPermissionsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void grantPermissionsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use revokePermissionsSignalError() instead")
    void revokePermissionsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void revokePermissionsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createApiKeySignalErrorFull() instead")
    void createApiKeySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createApiKeySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAllPermissionsSignalErrorFull() instead")
    void getAllPermissionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAllPermissionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getApiKeysSignalErrorFull() instead")
    void getApiKeysSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getApiKeysSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrCreateUserRoleSignalErrorFull() instead")
    void getOrCreateUserRoleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrCreateUserRoleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPermissionsSignalErrorFull() instead")
    void getPermissionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPermissionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUserRoleSignalErrorFull() instead")
    void getUserRoleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getUserRoleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use grantPermissionsSignalErrorFull() instead")
    void grantPermissionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void grantPermissionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use revokePermissionsSignalErrorFull() instead")
    void revokePermissionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void revokePermissionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
