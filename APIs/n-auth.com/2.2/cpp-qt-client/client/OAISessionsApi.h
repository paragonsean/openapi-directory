/**
 * nextAuth API
 * API for the nextAuth server
 *
 * The version of the OpenAPI document: 2.2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAISessionsApi_H
#define OAI_OAISessionsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIHttpFileElement.h"
#include "OAILoginStatus.h"
#include "OAIUserContext.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAISessionsApi : public QObject {
    Q_OBJECT

public:
    OAISessionsApi(const int timeOut = 0);
    ~OAISessionsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  serverid QString [required]
    * @param[in]  x_nonce QString [required]
    * @param[in]  img QString [optional]
    * @param[in]  s qint32 [optional]
    * @param[in]  user_context OAIUserContext [optional]
    */
    virtual void getQrLogin(const QString &serverid, const QString &x_nonce, const ::OpenAPI::OptionalParam<QString> &img = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &s = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<OAIUserContext> &user_context = ::OpenAPI::OptionalParam<OAIUserContext>());

    /**
    * @param[in]  serverid QString [required]
    * @param[in]  x_nonce QString [required]
    */
    virtual void getSession(const QString &serverid, const QString &x_nonce);

    /**
    * @param[in]  serverid QString [required]
    * @param[in]  x_nonce QString [required]
    */
    virtual void logout(const QString &serverid, const QString &x_nonce);

    /**
    * @param[in]  serverid QString [required]
    * @param[in]  x_nonce QString [required]
    * @param[in]  user_context OAIUserContext [optional]
    */
    virtual void provokeLogin(const QString &serverid, const QString &x_nonce, const ::OpenAPI::OptionalParam<OAIUserContext> &user_context = ::OpenAPI::OptionalParam<OAIUserContext>());

    /**
    * @param[in]  serverid QString [required]
    * @param[in]  x_nonce QString [required]
    * @param[in]  accountid qint32 [required]
    * @param[in]  user_context OAIUserContext [optional]
    */
    virtual void provokeLoginOnAccount(const QString &serverid, const QString &x_nonce, const qint32 &accountid, const ::OpenAPI::OptionalParam<OAIUserContext> &user_context = ::OpenAPI::OptionalParam<OAIUserContext>());

    /**
    * @param[in]  serverid QString [required]
    * @param[in]  x_nonce QString [required]
    * @param[in]  userid QString [required]
    * @param[in]  user_context OAIUserContext [optional]
    */
    virtual void provokeLoginOnUser(const QString &serverid, const QString &x_nonce, const QString &userid, const ::OpenAPI::OptionalParam<OAIUserContext> &user_context = ::OpenAPI::OptionalParam<OAIUserContext>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void getQrLoginCallback(OAIHttpRequestWorker *worker);
    void getSessionCallback(OAIHttpRequestWorker *worker);
    void logoutCallback(OAIHttpRequestWorker *worker);
    void provokeLoginCallback(OAIHttpRequestWorker *worker);
    void provokeLoginOnAccountCallback(OAIHttpRequestWorker *worker);
    void provokeLoginOnUserCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void getQrLoginSignal(OAIHttpFileElement summary);
    void getSessionSignal(OAILoginStatus summary);
    void logoutSignal();
    void provokeLoginSignal();
    void provokeLoginOnAccountSignal();
    void provokeLoginOnUserSignal();


    void getQrLoginSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void getSessionSignalFull(OAIHttpRequestWorker *worker, OAILoginStatus summary);
    void logoutSignalFull(OAIHttpRequestWorker *worker);
    void provokeLoginSignalFull(OAIHttpRequestWorker *worker);
    void provokeLoginOnAccountSignalFull(OAIHttpRequestWorker *worker);
    void provokeLoginOnUserSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use getQrLoginSignalError() instead")
    void getQrLoginSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getQrLoginSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSessionSignalError() instead")
    void getSessionSignalE(OAILoginStatus summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSessionSignalError(OAILoginStatus summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use logoutSignalError() instead")
    void logoutSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void logoutSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use provokeLoginSignalError() instead")
    void provokeLoginSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void provokeLoginSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use provokeLoginOnAccountSignalError() instead")
    void provokeLoginOnAccountSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void provokeLoginOnAccountSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use provokeLoginOnUserSignalError() instead")
    void provokeLoginOnUserSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void provokeLoginOnUserSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use getQrLoginSignalErrorFull() instead")
    void getQrLoginSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getQrLoginSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSessionSignalErrorFull() instead")
    void getSessionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSessionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use logoutSignalErrorFull() instead")
    void logoutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void logoutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use provokeLoginSignalErrorFull() instead")
    void provokeLoginSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void provokeLoginSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use provokeLoginOnAccountSignalErrorFull() instead")
    void provokeLoginOnAccountSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void provokeLoginOnAccountSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use provokeLoginOnUserSignalErrorFull() instead")
    void provokeLoginOnUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void provokeLoginOnUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
