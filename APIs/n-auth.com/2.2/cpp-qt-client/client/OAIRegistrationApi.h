/**
 * nextAuth API
 * API for the nextAuth server
 *
 * The version of the OpenAPI document: 2.2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIRegistrationApi_H
#define OAI_OAIRegistrationApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAccount.h"
#include "OAIHttpFileElement.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIRegistrationApi : public QObject {
    Q_OBJECT

public:
    OAIRegistrationApi(const int timeOut = 0);
    ~OAIRegistrationApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  serverid QString [required]
    * @param[in]  x_nonce QString [required]
    * @param[in]  name QString [required]
    * @param[in]  userid QString [optional]
    * @param[in]  img QString [optional]
    * @param[in]  s qint32 [optional]
    */
    virtual void getQrEnrol(const QString &serverid, const QString &x_nonce, const QString &name, const ::OpenAPI::OptionalParam<QString> &userid = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &img = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &s = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  serverid QString [required]
    */
    virtual void getServerVash(const QString &serverid);

    /**
    * @param[in]  serverid QString [required]
    * @param[in]  x_nonce QString [required]
    * @param[in]  userid QString [required]
    */
    virtual void registerUser(const QString &serverid, const QString &x_nonce, const QString &userid);

    /**
    * @param[in]  serverid QString [required]
    * @param[in]  accountid qint32 [required]
    * @param[in]  userid QString [required]
    */
    virtual void updateAccountUser(const QString &serverid, const qint32 &accountid, const QString &userid);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void getQrEnrolCallback(OAIHttpRequestWorker *worker);
    void getServerVashCallback(OAIHttpRequestWorker *worker);
    void registerUserCallback(OAIHttpRequestWorker *worker);
    void updateAccountUserCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void getQrEnrolSignal(OAIHttpFileElement summary);
    void getServerVashSignal(OAIHttpFileElement summary);
    void registerUserSignal();
    void updateAccountUserSignal(OAIAccount summary);


    void getQrEnrolSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void getServerVashSignalFull(OAIHttpRequestWorker *worker, OAIHttpFileElement summary);
    void registerUserSignalFull(OAIHttpRequestWorker *worker);
    void updateAccountUserSignalFull(OAIHttpRequestWorker *worker, OAIAccount summary);

    Q_DECL_DEPRECATED_X("Use getQrEnrolSignalError() instead")
    void getQrEnrolSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getQrEnrolSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getServerVashSignalError() instead")
    void getServerVashSignalE(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getServerVashSignalError(OAIHttpFileElement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use registerUserSignalError() instead")
    void registerUserSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void registerUserSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateAccountUserSignalError() instead")
    void updateAccountUserSignalE(OAIAccount summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateAccountUserSignalError(OAIAccount summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use getQrEnrolSignalErrorFull() instead")
    void getQrEnrolSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getQrEnrolSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getServerVashSignalErrorFull() instead")
    void getServerVashSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getServerVashSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use registerUserSignalErrorFull() instead")
    void registerUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void registerUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateAccountUserSignalErrorFull() instead")
    void updateAccountUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateAccountUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
