/**
 * nextAuth API
 * API for the nextAuth server
 *
 * The version of the OpenAPI document: 2.2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIHTMLApi_H
#define OAI_OAIHTMLApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIHtmlFooterBody.h"
#include "OAILoginStatus.h"
#include "OAIUserContext.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIHTMLApi : public QObject {
    Q_OBJECT

public:
    OAIHTMLApi(const int timeOut = 0);
    ~OAIHTMLApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  serverid QString [required]
    * @param[in]  x_nonce QString [required]
    * @param[in]  name QString [optional]
    * @param[in]  userid QString [optional]
    */
    virtual void getHtmlEnrol(const QString &serverid, const QString &x_nonce, const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &userid = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  serverid QString [required]
    * @param[in]  x_nonce QString [required]
    * @param[in]  html_footer_body OAIHtmlFooterBody [optional]
    */
    virtual void getHtmlFooter(const QString &serverid, const QString &x_nonce, const ::OpenAPI::OptionalParam<OAIHtmlFooterBody> &html_footer_body = ::OpenAPI::OptionalParam<OAIHtmlFooterBody>());

    /**
    * @param[in]  serverid QString [required]
    * @param[in]  x_nonce QString [required]
    * @param[in]  user_context OAIUserContext [optional]
    */
    virtual void getHtmlLogin(const QString &serverid, const QString &x_nonce, const ::OpenAPI::OptionalParam<OAIUserContext> &user_context = ::OpenAPI::OptionalParam<OAIUserContext>());

    /**
    * @param[in]  serverid QString [required]
    * @param[in]  x_nonce QString [required]
    */
    virtual void getSession(const QString &serverid, const QString &x_nonce);

    /**
    * @param[in]  serverid QString [required]
    * @param[in]  x_nonce QString [required]
    */
    virtual void logout(const QString &serverid, const QString &x_nonce);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void getHtmlEnrolCallback(OAIHttpRequestWorker *worker);
    void getHtmlFooterCallback(OAIHttpRequestWorker *worker);
    void getHtmlLoginCallback(OAIHttpRequestWorker *worker);
    void getSessionCallback(OAIHttpRequestWorker *worker);
    void logoutCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void getHtmlEnrolSignal(QString summary);
    void getHtmlFooterSignal(QString summary);
    void getHtmlLoginSignal(QString summary);
    void getSessionSignal(OAILoginStatus summary);
    void logoutSignal();


    void getHtmlEnrolSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void getHtmlFooterSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void getHtmlLoginSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void getSessionSignalFull(OAIHttpRequestWorker *worker, OAILoginStatus summary);
    void logoutSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use getHtmlEnrolSignalError() instead")
    void getHtmlEnrolSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getHtmlEnrolSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getHtmlFooterSignalError() instead")
    void getHtmlFooterSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getHtmlFooterSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getHtmlLoginSignalError() instead")
    void getHtmlLoginSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getHtmlLoginSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSessionSignalError() instead")
    void getSessionSignalE(OAILoginStatus summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSessionSignalError(OAILoginStatus summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use logoutSignalError() instead")
    void logoutSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void logoutSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use getHtmlEnrolSignalErrorFull() instead")
    void getHtmlEnrolSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getHtmlEnrolSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getHtmlFooterSignalErrorFull() instead")
    void getHtmlFooterSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getHtmlFooterSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getHtmlLoginSignalErrorFull() instead")
    void getHtmlLoginSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getHtmlLoginSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSessionSignalErrorFull() instead")
    void getSessionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSessionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use logoutSignalErrorFull() instead")
    void logoutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void logoutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
