/**
 * nextAuth API
 * API for the nextAuth server
 *
 * The version of the OpenAPI document: 2.2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIUsersApi_H
#define OAI_OAIUsersApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAccounts.h"
#include "OAIObject.h"
#include "OAIUsers.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIUsersApi : public QObject {
    Q_OBJECT

public:
    OAIUsersApi(const int timeOut = 0);
    ~OAIUsersApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  serverid QString [required]
    * @param[in]  userid QString [required]
    */
    virtual void deleteUser(const QString &serverid, const QString &userid);

    /**
    * @param[in]  serverid QString [required]
    * @param[in]  userid QString [required]
    */
    virtual void deleteUserAccounts(const QString &serverid, const QString &userid);

    /**
    * @param[in]  serverid QString [required]
    * @param[in]  userid QString [required]
    * @param[in]  attributekey QString [required]
    */
    virtual void deleteUserAttribute(const QString &serverid, const QString &userid, const QString &attributekey);

    /**
    * @param[in]  serverid QString [required]
    * @param[in]  userid QString [required]
    */
    virtual void deleteUserAttributes(const QString &serverid, const QString &userid);

    /**
    * @param[in]  serverid QString [required]
    * @param[in]  userid QString [required]
    * @param[in]  limit qint32 [optional]
    * @param[in]  marker qint32 [optional]
    * @param[in]  sort QString [optional]
    */
    virtual void getUser(const QString &serverid, const QString &userid, const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &marker = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  serverid QString [required]
    * @param[in]  userid QString [required]
    */
    virtual void getUserAttributes(const QString &serverid, const QString &userid);

    /**
    * @param[in]  serverid QString [required]
    * @param[in]  filter QString [optional]
    * @param[in]  search QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  marker qint32 [optional]
    * @param[in]  sort QString [optional]
    */
    virtual void getUsers(const QString &serverid, const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &search = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &marker = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  serverid QString [required]
    * @param[in]  x_nonce QString [required]
    * @param[in]  userid QString [required]
    */
    virtual void registerUser(const QString &serverid, const QString &x_nonce, const QString &userid);

    /**
    * @param[in]  serverid QString [required]
    * @param[in]  userid QString [required]
    * @param[in]  attributes OAIObject [required]
    */
    virtual void setUserAttributes(const QString &serverid, const QString &userid, const OAIObject &attributes);

    /**
    * @param[in]  serverid QString [required]
    * @param[in]  userid QString [required]
    * @param[in]  attributes OAIObject [required]
    */
    virtual void updateUserAttributes(const QString &serverid, const QString &userid, const OAIObject &attributes);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void deleteUserCallback(OAIHttpRequestWorker *worker);
    void deleteUserAccountsCallback(OAIHttpRequestWorker *worker);
    void deleteUserAttributeCallback(OAIHttpRequestWorker *worker);
    void deleteUserAttributesCallback(OAIHttpRequestWorker *worker);
    void getUserCallback(OAIHttpRequestWorker *worker);
    void getUserAttributesCallback(OAIHttpRequestWorker *worker);
    void getUsersCallback(OAIHttpRequestWorker *worker);
    void registerUserCallback(OAIHttpRequestWorker *worker);
    void setUserAttributesCallback(OAIHttpRequestWorker *worker);
    void updateUserAttributesCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void deleteUserSignal();
    void deleteUserAccountsSignal();
    void deleteUserAttributeSignal();
    void deleteUserAttributesSignal();
    void getUserSignal(OAIAccounts summary);
    void getUserAttributesSignal(QString summary);
    void getUsersSignal(OAIUsers summary);
    void registerUserSignal();
    void setUserAttributesSignal();
    void updateUserAttributesSignal();


    void deleteUserSignalFull(OAIHttpRequestWorker *worker);
    void deleteUserAccountsSignalFull(OAIHttpRequestWorker *worker);
    void deleteUserAttributeSignalFull(OAIHttpRequestWorker *worker);
    void deleteUserAttributesSignalFull(OAIHttpRequestWorker *worker);
    void getUserSignalFull(OAIHttpRequestWorker *worker, OAIAccounts summary);
    void getUserAttributesSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void getUsersSignalFull(OAIHttpRequestWorker *worker, OAIUsers summary);
    void registerUserSignalFull(OAIHttpRequestWorker *worker);
    void setUserAttributesSignalFull(OAIHttpRequestWorker *worker);
    void updateUserAttributesSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use deleteUserSignalError() instead")
    void deleteUserSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteUserSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteUserAccountsSignalError() instead")
    void deleteUserAccountsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteUserAccountsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteUserAttributeSignalError() instead")
    void deleteUserAttributeSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteUserAttributeSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteUserAttributesSignalError() instead")
    void deleteUserAttributesSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteUserAttributesSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUserSignalError() instead")
    void getUserSignalE(OAIAccounts summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getUserSignalError(OAIAccounts summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUserAttributesSignalError() instead")
    void getUserAttributesSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getUserAttributesSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUsersSignalError() instead")
    void getUsersSignalE(OAIUsers summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getUsersSignalError(OAIUsers summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use registerUserSignalError() instead")
    void registerUserSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void registerUserSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setUserAttributesSignalError() instead")
    void setUserAttributesSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void setUserAttributesSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateUserAttributesSignalError() instead")
    void updateUserAttributesSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void updateUserAttributesSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use deleteUserSignalErrorFull() instead")
    void deleteUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteUserAccountsSignalErrorFull() instead")
    void deleteUserAccountsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteUserAccountsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteUserAttributeSignalErrorFull() instead")
    void deleteUserAttributeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteUserAttributeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteUserAttributesSignalErrorFull() instead")
    void deleteUserAttributesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteUserAttributesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUserSignalErrorFull() instead")
    void getUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUserAttributesSignalErrorFull() instead")
    void getUserAttributesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getUserAttributesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUsersSignalErrorFull() instead")
    void getUsersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getUsersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use registerUserSignalErrorFull() instead")
    void registerUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void registerUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setUserAttributesSignalErrorFull() instead")
    void setUserAttributesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void setUserAttributesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateUserAttributesSignalErrorFull() instead")
    void updateUserAttributesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateUserAttributesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
