/**
 * nextAuth API
 * API for the nextAuth server
 *
 * The version of the OpenAPI document: 2.2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIApiKey.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIApiKey::OAIApiKey(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIApiKey::OAIApiKey() {
    this->initializeModel();
}

OAIApiKey::~OAIApiKey() {}

void OAIApiKey::initializeModel() {

    m_apikey_isSet = false;
    m_apikey_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_role_isSet = false;
    m_role_isValid = false;
}

void OAIApiKey::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIApiKey::fromJsonObject(QJsonObject json) {

    m_apikey_isValid = ::OpenAPI::fromJsonValue(m_apikey, json[QString("apikey")]);
    m_apikey_isSet = !json[QString("apikey")].isNull() && m_apikey_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_role_isValid = ::OpenAPI::fromJsonValue(m_role, json[QString("role")]);
    m_role_isSet = !json[QString("role")].isNull() && m_role_isValid;
}

QString OAIApiKey::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIApiKey::asJsonObject() const {
    QJsonObject obj;
    if (m_apikey_isSet) {
        obj.insert(QString("apikey"), ::OpenAPI::toJsonValue(m_apikey));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_role_isSet) {
        obj.insert(QString("role"), ::OpenAPI::toJsonValue(m_role));
    }
    return obj;
}

QString OAIApiKey::getApikey() const {
    return m_apikey;
}
void OAIApiKey::setApikey(const QString &apikey) {
    m_apikey = apikey;
    m_apikey_isSet = true;
}

bool OAIApiKey::is_apikey_Set() const{
    return m_apikey_isSet;
}

bool OAIApiKey::is_apikey_Valid() const{
    return m_apikey_isValid;
}

QString OAIApiKey::getDescription() const {
    return m_description;
}
void OAIApiKey::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIApiKey::is_description_Set() const{
    return m_description_isSet;
}

bool OAIApiKey::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIApiKey::getRole() const {
    return m_role;
}
void OAIApiKey::setRole(const QString &role) {
    m_role = role;
    m_role_isSet = true;
}

bool OAIApiKey::is_role_Set() const{
    return m_role_isSet;
}

bool OAIApiKey::is_role_Valid() const{
    return m_role_isValid;
}

bool OAIApiKey::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_apikey_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_role_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIApiKey::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
