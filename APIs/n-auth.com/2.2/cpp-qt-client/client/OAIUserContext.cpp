/**
 * nextAuth API
 * API for the nextAuth server
 *
 * The version of the OpenAPI document: 2.2
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUserContext.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUserContext::OAIUserContext(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUserContext::OAIUserContext() {
    this->initializeModel();
}

OAIUserContext::~OAIUserContext() {}

void OAIUserContext::initializeModel() {

    m_announceinfo_isSet = false;
    m_announceinfo_isValid = false;

    m_sessioninfo_isSet = false;
    m_sessioninfo_isValid = false;
}

void OAIUserContext::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUserContext::fromJsonObject(QJsonObject json) {

    m_announceinfo_isValid = ::OpenAPI::fromJsonValue(m_announceinfo, json[QString("announceinfo")]);
    m_announceinfo_isSet = !json[QString("announceinfo")].isNull() && m_announceinfo_isValid;

    m_sessioninfo_isValid = ::OpenAPI::fromJsonValue(m_sessioninfo, json[QString("sessioninfo")]);
    m_sessioninfo_isSet = !json[QString("sessioninfo")].isNull() && m_sessioninfo_isValid;
}

QString OAIUserContext::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUserContext::asJsonObject() const {
    QJsonObject obj;
    if (m_announceinfo.isSet()) {
        obj.insert(QString("announceinfo"), ::OpenAPI::toJsonValue(m_announceinfo));
    }
    if (m_sessioninfo.isSet()) {
        obj.insert(QString("sessioninfo"), ::OpenAPI::toJsonValue(m_sessioninfo));
    }
    return obj;
}

OAISessionInfo OAIUserContext::getAnnounceinfo() const {
    return m_announceinfo;
}
void OAIUserContext::setAnnounceinfo(const OAISessionInfo &announceinfo) {
    m_announceinfo = announceinfo;
    m_announceinfo_isSet = true;
}

bool OAIUserContext::is_announceinfo_Set() const{
    return m_announceinfo_isSet;
}

bool OAIUserContext::is_announceinfo_Valid() const{
    return m_announceinfo_isValid;
}

OAISessionInfo OAIUserContext::getSessioninfo() const {
    return m_sessioninfo;
}
void OAIUserContext::setSessioninfo(const OAISessionInfo &sessioninfo) {
    m_sessioninfo = sessioninfo;
    m_sessioninfo_isSet = true;
}

bool OAIUserContext::is_sessioninfo_Set() const{
    return m_sessioninfo_isSet;
}

bool OAIUserContext::is_sessioninfo_Valid() const{
    return m_sessioninfo_isValid;
}

bool OAIUserContext::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_announceinfo.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sessioninfo.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUserContext::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
