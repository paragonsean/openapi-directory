/**
 * nextAuth API
 * API for the nextAuth server
 *
 * The version of the OpenAPI document: 2.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The LoginStatus model module.
 * @module model/LoginStatus
 * @version 2.2
 */
class LoginStatus {
    /**
     * Constructs a new <code>LoginStatus</code>.
     * @alias module:model/LoginStatus
     */
    constructor() { 
        
        LoginStatus.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>LoginStatus</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/LoginStatus} obj Optional instance to populate.
     * @return {module:model/LoginStatus} The populated <code>LoginStatus</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new LoginStatus();

            if (data.hasOwnProperty('accountid')) {
                obj['accountid'] = ApiClient.convertToType(data['accountid'], 'Number');
            }
            if (data.hasOwnProperty('canprovoke')) {
                obj['canprovoke'] = ApiClient.convertToType(data['canprovoke'], 'Boolean');
            }
            if (data.hasOwnProperty('hsid')) {
                obj['hsid'] = ApiClient.convertToType(data['hsid'], 'String');
            }
            if (data.hasOwnProperty('loggedin')) {
                obj['loggedin'] = ApiClient.convertToType(data['loggedin'], 'Boolean');
            }
            if (data.hasOwnProperty('loginqrdata')) {
                obj['loginqrdata'] = ApiClient.convertToType(data['loginqrdata'], 'String');
            }
            if (data.hasOwnProperty('pk')) {
                obj['pk'] = ApiClient.convertToType(data['pk'], 'String');
            }
            if (data.hasOwnProperty('userid')) {
                obj['userid'] = ApiClient.convertToType(data['userid'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>LoginStatus</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>LoginStatus</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['hsid'] && !(typeof data['hsid'] === 'string' || data['hsid'] instanceof String)) {
            throw new Error("Expected the field `hsid` to be a primitive type in the JSON string but got " + data['hsid']);
        }
        // ensure the json data is a string
        if (data['loginqrdata'] && !(typeof data['loginqrdata'] === 'string' || data['loginqrdata'] instanceof String)) {
            throw new Error("Expected the field `loginqrdata` to be a primitive type in the JSON string but got " + data['loginqrdata']);
        }
        // ensure the json data is a string
        if (data['pk'] && !(typeof data['pk'] === 'string' || data['pk'] instanceof String)) {
            throw new Error("Expected the field `pk` to be a primitive type in the JSON string but got " + data['pk']);
        }
        // ensure the json data is a string
        if (data['userid'] && !(typeof data['userid'] === 'string' || data['userid'] instanceof String)) {
            throw new Error("Expected the field `userid` to be a primitive type in the JSON string but got " + data['userid']);
        }

        return true;
    }


}



/**
 * Account id
 * @member {Number} accountid
 */
LoginStatus.prototype['accountid'] = undefined;

/**
 * True if a login can be pushed from the server, false otherwise
 * @member {Boolean} canprovoke
 */
LoginStatus.prototype['canprovoke'] = undefined;

/**
 * Converted session id, used by the websockets
 * @member {String} hsid
 */
LoginStatus.prototype['hsid'] = undefined;

/**
 * True if the user is loggedin, false otherwise
 * @member {Boolean} loggedin
 */
LoginStatus.prototype['loggedin'] = undefined;

/**
 * Base64 encoded data that is represented in the login qr code
 * @member {String} loginqrdata
 */
LoginStatus.prototype['loginqrdata'] = undefined;

/**
 * Base64 encoded public key of the nextAuth app. This uniquely identifies the account on the nextAuth app, regardless of the username
 * @member {String} pk
 */
LoginStatus.prototype['pk'] = undefined;

/**
 * User name
 * @member {String} userid
 */
LoginStatus.prototype['userid'] = undefined;






export default LoginStatus;

