/**
 * nextAuth API
 * API for the nextAuth server
 *
 * The version of the OpenAPI document: 2.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ServerSession model module.
 * @module model/ServerSession
 * @version 2.2
 */
class ServerSession {
    /**
     * Constructs a new <code>ServerSession</code>.
     * @alias module:model/ServerSession
     * @param serverid {String} Server Id
     * @param sessionid {String} Base64 encoded nonce
     */
    constructor(serverid, sessionid) { 
        
        ServerSession.initialize(this, serverid, sessionid);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, serverid, sessionid) { 
        obj['serverid'] = serverid;
        obj['sessionid'] = sessionid;
    }

    /**
     * Constructs a <code>ServerSession</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ServerSession} obj Optional instance to populate.
     * @return {module:model/ServerSession} The populated <code>ServerSession</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ServerSession();

            if (data.hasOwnProperty('serverid')) {
                obj['serverid'] = ApiClient.convertToType(data['serverid'], 'String');
            }
            if (data.hasOwnProperty('sessionid')) {
                obj['sessionid'] = ApiClient.convertToType(data['sessionid'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ServerSession</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ServerSession</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ServerSession.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['serverid'] && !(typeof data['serverid'] === 'string' || data['serverid'] instanceof String)) {
            throw new Error("Expected the field `serverid` to be a primitive type in the JSON string but got " + data['serverid']);
        }
        // ensure the json data is a string
        if (data['sessionid'] && !(typeof data['sessionid'] === 'string' || data['sessionid'] instanceof String)) {
            throw new Error("Expected the field `sessionid` to be a primitive type in the JSON string but got " + data['sessionid']);
        }

        return true;
    }


}

ServerSession.RequiredProperties = ["serverid", "sessionid"];

/**
 * Server Id
 * @member {String} serverid
 */
ServerSession.prototype['serverid'] = undefined;

/**
 * Base64 encoded nonce
 * @member {String} sessionid
 */
ServerSession.prototype['sessionid'] = undefined;






export default ServerSession;

