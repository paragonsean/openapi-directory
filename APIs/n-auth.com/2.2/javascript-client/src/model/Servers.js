/**
 * nextAuth API
 * API for the nextAuth server
 *
 * The version of the OpenAPI document: 2.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Server from './Server';

/**
 * The Servers model module.
 * @module model/Servers
 * @version 2.2
 */
class Servers {
    /**
     * Constructs a new <code>Servers</code>.
     * @alias module:model/Servers
     * @param servers {Array.<module:model/Server>} Array of servers
     */
    constructor(servers) { 
        
        Servers.initialize(this, servers);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, servers) { 
        obj['servers'] = servers;
    }

    /**
     * Constructs a <code>Servers</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Servers} obj Optional instance to populate.
     * @return {module:model/Servers} The populated <code>Servers</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Servers();

            if (data.hasOwnProperty('servers')) {
                obj['servers'] = ApiClient.convertToType(data['servers'], [Server]);
            }
            if (data.hasOwnProperty('totalnumber')) {
                obj['totalnumber'] = ApiClient.convertToType(data['totalnumber'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Servers</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Servers</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Servers.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['servers']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['servers'])) {
                throw new Error("Expected the field `servers` to be an array in the JSON data but got " + data['servers']);
            }
            // validate the optional field `servers` (array)
            for (const item of data['servers']) {
                Server.validateJSON(item);
            };
        }

        return true;
    }


}

Servers.RequiredProperties = ["servers"];

/**
 * Array of servers
 * @member {Array.<module:model/Server>} servers
 */
Servers.prototype['servers'] = undefined;

/**
 * total number of users
 * @member {Number} totalnumber
 */
Servers.prototype['totalnumber'] = undefined;






export default Servers;

