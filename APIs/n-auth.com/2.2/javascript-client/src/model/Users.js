/**
 * nextAuth API
 * API for the nextAuth server
 *
 * The version of the OpenAPI document: 2.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import User from './User';

/**
 * The Users model module.
 * @module model/Users
 * @version 2.2
 */
class Users {
    /**
     * Constructs a new <code>Users</code>.
     * @alias module:model/Users
     * @param users {Array.<module:model/User>} Array of users
     */
    constructor(users) { 
        
        Users.initialize(this, users);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, users) { 
        obj['users'] = users;
    }

    /**
     * Constructs a <code>Users</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Users} obj Optional instance to populate.
     * @return {module:model/Users} The populated <code>Users</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Users();

            if (data.hasOwnProperty('totalnumber')) {
                obj['totalnumber'] = ApiClient.convertToType(data['totalnumber'], 'Number');
            }
            if (data.hasOwnProperty('users')) {
                obj['users'] = ApiClient.convertToType(data['users'], [User]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Users</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Users</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Users.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['users']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['users'])) {
                throw new Error("Expected the field `users` to be an array in the JSON data but got " + data['users']);
            }
            // validate the optional field `users` (array)
            for (const item of data['users']) {
                User.validateJSON(item);
            };
        }

        return true;
    }


}

Users.RequiredProperties = ["users"];

/**
 * total number of users
 * @member {Number} totalnumber
 */
Users.prototype['totalnumber'] = undefined;

/**
 * Array of users
 * @member {Array.<module:model/User>} users
 */
Users.prototype['users'] = undefined;






export default Users;

