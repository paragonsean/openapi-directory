/**
 * nextAuth API
 * API for the nextAuth server
 *
 * The version of the OpenAPI document: 2.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The SessionInfo model module.
 * @module model/SessionInfo
 * @version 2.2
 */
class SessionInfo {
    /**
     * Constructs a new <code>SessionInfo</code>.
     * @alias module:model/SessionInfo
     */
    constructor() { 
        
        SessionInfo.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SessionInfo</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SessionInfo} obj Optional instance to populate.
     * @return {module:model/SessionInfo} The populated <code>SessionInfo</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SessionInfo();

            if (data.hasOwnProperty('info')) {
                obj['info'] = ApiClient.convertToType(data['info'], Object);
            }
            if (data.hasOwnProperty('ip')) {
                obj['ip'] = ApiClient.convertToType(data['ip'], 'String');
            }
            if (data.hasOwnProperty('logo')) {
                obj['logo'] = ApiClient.convertToType(data['logo'], 'Blob');
            }
            if (data.hasOwnProperty('useragent')) {
                obj['useragent'] = ApiClient.convertToType(data['useragent'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SessionInfo</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SessionInfo</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['ip'] && !(typeof data['ip'] === 'string' || data['ip'] instanceof String)) {
            throw new Error("Expected the field `ip` to be a primitive type in the JSON string but got " + data['ip']);
        }
        // ensure the json data is a string
        if (data['useragent'] && !(typeof data['useragent'] === 'string' || data['useragent'] instanceof String)) {
            throw new Error("Expected the field `useragent` to be a primitive type in the JSON string but got " + data['useragent']);
        }

        return true;
    }


}



/**
 * Information to display to user
 * @member {Object} info
 */
SessionInfo.prototype['info'] = undefined;

/**
 * IP address
 * @member {String} ip
 */
SessionInfo.prototype['ip'] = undefined;

/**
 * Base64 encoded logo
 * @member {Blob} logo
 */
SessionInfo.prototype['logo'] = undefined;

/**
 * User agent of the browser
 * @member {String} useragent
 */
SessionInfo.prototype['useragent'] = undefined;






export default SessionInfo;

