/**
 * nextAuth API
 * API for the nextAuth server
 *
 * The version of the OpenAPI document: 2.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Account model module.
 * @module model/Account
 * @version 2.2
 */
class Account {
    /**
     * Constructs a new <code>Account</code>.
     * @alias module:model/Account
     * @param description {String} Description of the account (e.g. device name)
     * @param id {Number} Account id
     */
    constructor(description, id) { 
        
        Account.initialize(this, description, id);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, description, id) { 
        obj['description'] = description;
        obj['id'] = id;
    }

    /**
     * Constructs a <code>Account</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Account} obj Optional instance to populate.
     * @return {module:model/Account} The populated <code>Account</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Account();

            if (data.hasOwnProperty('blocked')) {
                obj['blocked'] = ApiClient.convertToType(data['blocked'], 'Boolean');
            }
            if (data.hasOwnProperty('clientVersion')) {
                obj['clientVersion'] = ApiClient.convertToType(data['clientVersion'], 'String');
            }
            if (data.hasOwnProperty('created')) {
                obj['created'] = ApiClient.convertToType(data['created'], 'Number');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('lastlogin')) {
                obj['lastlogin'] = ApiClient.convertToType(data['lastlogin'], 'Number');
            }
            if (data.hasOwnProperty('lastprovoke')) {
                obj['lastprovoke'] = ApiClient.convertToType(data['lastprovoke'], 'Number');
            }
            if (data.hasOwnProperty('userid')) {
                obj['userid'] = ApiClient.convertToType(data['userid'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Account</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Account</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Account.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['clientVersion'] && !(typeof data['clientVersion'] === 'string' || data['clientVersion'] instanceof String)) {
            throw new Error("Expected the field `clientVersion` to be a primitive type in the JSON string but got " + data['clientVersion']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['userid'] && !(typeof data['userid'] === 'string' || data['userid'] instanceof String)) {
            throw new Error("Expected the field `userid` to be a primitive type in the JSON string but got " + data['userid']);
        }

        return true;
    }


}

Account.RequiredProperties = ["description", "id"];

/**
 * True if the account is blocked, false otherwise
 * @member {Boolean} blocked
 */
Account.prototype['blocked'] = undefined;

/**
 * Version nextAuth client in the app
 * @member {String} clientVersion
 */
Account.prototype['clientVersion'] = undefined;

/**
 * Timestamp of creation
 * @member {Number} created
 */
Account.prototype['created'] = undefined;

/**
 * Description of the account (e.g. device name)
 * @member {String} description
 */
Account.prototype['description'] = undefined;

/**
 * Account id
 * @member {Number} id
 */
Account.prototype['id'] = undefined;

/**
 * Timestamp of last login
 * @member {Number} lastlogin
 */
Account.prototype['lastlogin'] = undefined;

/**
 * Timestamp of last provoke (push message)
 * @member {Number} lastprovoke
 */
Account.prototype['lastprovoke'] = undefined;

/**
 * User name
 * @member {String} userid
 */
Account.prototype['userid'] = undefined;






export default Account;

