/**
 * nextAuth API
 * API for the nextAuth server
 *
 * The version of the OpenAPI document: 2.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Server model module.
 * @module model/Server
 * @version 2.2
 */
class Server {
    /**
     * Constructs a new <code>Server</code>.
     * @alias module:model/Server
     * @param logo {String} Base 64 encoded logo
     * @param pinTimeout {Number} Time (minutes) since the last time the user entered his PIN, that the user is not requested a PIN at login. -1 means that the user is never asked for a PIN before logging in, 0 means that the user is asked every time he wants to login
     * @param pinTransTimeout {Number} Time (minutes) since the last time the user entered his PIN, that the user is not requested a PIN at transaction approval. -1 means that the user is never asked for a PIN before approving a transaction, 0 means that the user is asked every time he wants to approve a transaction
     * @param pingTime {Number} Time (seconds) that the nextAuth app has before it needs to reply to a ping request from the nextAuth server (continuous authentication)
     * @param serverFlags {Array.<String>} Server flags
     * @param serverName {String} Server name
     * @param serverid {String} Base64 encoded id of the nextAuth server
     * @param serverpk {String} Base64 encoded public key of the nextAuth server
     */
    constructor(logo, pinTimeout, pinTransTimeout, pingTime, serverFlags, serverName, serverid, serverpk) { 
        
        Server.initialize(this, logo, pinTimeout, pinTransTimeout, pingTime, serverFlags, serverName, serverid, serverpk);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, logo, pinTimeout, pinTransTimeout, pingTime, serverFlags, serverName, serverid, serverpk) { 
        obj['logo'] = logo;
        obj['pinTimeout'] = pinTimeout;
        obj['pinTransTimeout'] = pinTransTimeout;
        obj['pingTime'] = pingTime;
        obj['serverFlags'] = serverFlags;
        obj['serverName'] = serverName;
        obj['serverid'] = serverid;
        obj['serverpk'] = serverpk;
    }

    /**
     * Constructs a <code>Server</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Server} obj Optional instance to populate.
     * @return {module:model/Server} The populated <code>Server</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Server();

            if (data.hasOwnProperty('accountCount')) {
                obj['accountCount'] = ApiClient.convertToType(data['accountCount'], 'Number');
            }
            if (data.hasOwnProperty('appandroid')) {
                obj['appandroid'] = ApiClient.convertToType(data['appandroid'], 'String');
            }
            if (data.hasOwnProperty('appios')) {
                obj['appios'] = ApiClient.convertToType(data['appios'], 'String');
            }
            if (data.hasOwnProperty('appname')) {
                obj['appname'] = ApiClient.convertToType(data['appname'], 'String');
            }
            if (data.hasOwnProperty('appurl')) {
                obj['appurl'] = ApiClient.convertToType(data['appurl'], 'String');
            }
            if (data.hasOwnProperty('lastLogin')) {
                obj['lastLogin'] = ApiClient.convertToType(data['lastLogin'], 'Number');
            }
            if (data.hasOwnProperty('logo')) {
                obj['logo'] = ApiClient.convertToType(data['logo'], 'String');
            }
            if (data.hasOwnProperty('owner')) {
                obj['owner'] = ApiClient.convertToType(data['owner'], 'Number');
            }
            if (data.hasOwnProperty('pinTimeout')) {
                obj['pinTimeout'] = ApiClient.convertToType(data['pinTimeout'], 'Number');
            }
            if (data.hasOwnProperty('pinTransTimeout')) {
                obj['pinTransTimeout'] = ApiClient.convertToType(data['pinTransTimeout'], 'Number');
            }
            if (data.hasOwnProperty('pingTime')) {
                obj['pingTime'] = ApiClient.convertToType(data['pingTime'], 'Number');
            }
            if (data.hasOwnProperty('serverFlags')) {
                obj['serverFlags'] = ApiClient.convertToType(data['serverFlags'], ['String']);
            }
            if (data.hasOwnProperty('serverName')) {
                obj['serverName'] = ApiClient.convertToType(data['serverName'], 'String');
            }
            if (data.hasOwnProperty('serverid')) {
                obj['serverid'] = ApiClient.convertToType(data['serverid'], 'String');
            }
            if (data.hasOwnProperty('serverpk')) {
                obj['serverpk'] = ApiClient.convertToType(data['serverpk'], 'String');
            }
            if (data.hasOwnProperty('siteurl')) {
                obj['siteurl'] = ApiClient.convertToType(data['siteurl'], 'String');
            }
            if (data.hasOwnProperty('wsurl')) {
                obj['wsurl'] = ApiClient.convertToType(data['wsurl'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Server</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Server</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Server.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['appandroid'] && !(typeof data['appandroid'] === 'string' || data['appandroid'] instanceof String)) {
            throw new Error("Expected the field `appandroid` to be a primitive type in the JSON string but got " + data['appandroid']);
        }
        // ensure the json data is a string
        if (data['appios'] && !(typeof data['appios'] === 'string' || data['appios'] instanceof String)) {
            throw new Error("Expected the field `appios` to be a primitive type in the JSON string but got " + data['appios']);
        }
        // ensure the json data is a string
        if (data['appname'] && !(typeof data['appname'] === 'string' || data['appname'] instanceof String)) {
            throw new Error("Expected the field `appname` to be a primitive type in the JSON string but got " + data['appname']);
        }
        // ensure the json data is a string
        if (data['appurl'] && !(typeof data['appurl'] === 'string' || data['appurl'] instanceof String)) {
            throw new Error("Expected the field `appurl` to be a primitive type in the JSON string but got " + data['appurl']);
        }
        // ensure the json data is a string
        if (data['logo'] && !(typeof data['logo'] === 'string' || data['logo'] instanceof String)) {
            throw new Error("Expected the field `logo` to be a primitive type in the JSON string but got " + data['logo']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['serverFlags'])) {
            throw new Error("Expected the field `serverFlags` to be an array in the JSON data but got " + data['serverFlags']);
        }
        // ensure the json data is a string
        if (data['serverName'] && !(typeof data['serverName'] === 'string' || data['serverName'] instanceof String)) {
            throw new Error("Expected the field `serverName` to be a primitive type in the JSON string but got " + data['serverName']);
        }
        // ensure the json data is a string
        if (data['serverid'] && !(typeof data['serverid'] === 'string' || data['serverid'] instanceof String)) {
            throw new Error("Expected the field `serverid` to be a primitive type in the JSON string but got " + data['serverid']);
        }
        // ensure the json data is a string
        if (data['serverpk'] && !(typeof data['serverpk'] === 'string' || data['serverpk'] instanceof String)) {
            throw new Error("Expected the field `serverpk` to be a primitive type in the JSON string but got " + data['serverpk']);
        }
        // ensure the json data is a string
        if (data['siteurl'] && !(typeof data['siteurl'] === 'string' || data['siteurl'] instanceof String)) {
            throw new Error("Expected the field `siteurl` to be a primitive type in the JSON string but got " + data['siteurl']);
        }
        // ensure the json data is a string
        if (data['wsurl'] && !(typeof data['wsurl'] === 'string' || data['wsurl'] instanceof String)) {
            throw new Error("Expected the field `wsurl` to be a primitive type in the JSON string but got " + data['wsurl']);
        }

        return true;
    }


}

Server.RequiredProperties = ["logo", "pinTimeout", "pinTransTimeout", "pingTime", "serverFlags", "serverName", "serverid", "serverpk"];

/**
 * Number of accounts registered with this server
 * @member {Number} accountCount
 */
Server.prototype['accountCount'] = undefined;

/**
 * URL of the app in Google Play
 * @member {String} appandroid
 */
Server.prototype['appandroid'] = undefined;

/**
 * URL of the app in the App Store
 * @member {String} appios
 */
Server.prototype['appios'] = undefined;

/**
 * name of the app
 * @member {String} appname
 */
Server.prototype['appname'] = undefined;

/**
 * URL (prefix) to launch the app
 * @member {String} appurl
 */
Server.prototype['appurl'] = undefined;

/**
 * Last login on this server
 * @member {Number} lastLogin
 */
Server.prototype['lastLogin'] = undefined;

/**
 * Base 64 encoded logo
 * @member {String} logo
 */
Server.prototype['logo'] = undefined;

/**
 * Owner id
 * @member {Number} owner
 */
Server.prototype['owner'] = undefined;

/**
 * Time (minutes) since the last time the user entered his PIN, that the user is not requested a PIN at login. -1 means that the user is never asked for a PIN before logging in, 0 means that the user is asked every time he wants to login
 * @member {Number} pinTimeout
 */
Server.prototype['pinTimeout'] = undefined;

/**
 * Time (minutes) since the last time the user entered his PIN, that the user is not requested a PIN at transaction approval. -1 means that the user is never asked for a PIN before approving a transaction, 0 means that the user is asked every time he wants to approve a transaction
 * @member {Number} pinTransTimeout
 */
Server.prototype['pinTransTimeout'] = undefined;

/**
 * Time (seconds) that the nextAuth app has before it needs to reply to a ping request from the nextAuth server (continuous authentication)
 * @member {Number} pingTime
 */
Server.prototype['pingTime'] = undefined;

/**
 * Server flags
 * @member {Array.<String>} serverFlags
 */
Server.prototype['serverFlags'] = undefined;

/**
 * Server name
 * @member {String} serverName
 */
Server.prototype['serverName'] = undefined;

/**
 * Base64 encoded id of the nextAuth server
 * @member {String} serverid
 */
Server.prototype['serverid'] = undefined;

/**
 * Base64 encoded public key of the nextAuth server
 * @member {String} serverpk
 */
Server.prototype['serverpk'] = undefined;

/**
 * URL of the main website
 * @member {String} siteurl
 */
Server.prototype['siteurl'] = undefined;

/**
 * Websocket URL
 * @member {String} wsurl
 */
Server.prototype['wsurl'] = undefined;






export default Server;

