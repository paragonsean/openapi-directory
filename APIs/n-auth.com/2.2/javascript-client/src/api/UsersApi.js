/**
 * nextAuth API
 * API for the nextAuth server
 *
 * The version of the OpenAPI document: 2.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Accounts from '../model/Accounts';
import Users from '../model/Users';

/**
* Users service.
* @module api/UsersApi
* @version 2.2
*/
export default class UsersApi {

    /**
    * Constructs a new UsersApi. 
    * @alias module:api/UsersApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the deleteUser operation.
     * @callback module:api/UsersApi~deleteUserCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a specific user
     * Delete a user. Required permission: 'users'.
     * @param {String} serverid Base64 encoded server id
     * @param {String} userid User name
     * @param {module:api/UsersApi~deleteUserCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteUser(serverid, userid, callback) {
      let postBody = null;
      // verify the required parameter 'serverid' is set
      if (serverid === undefined || serverid === null) {
        throw new Error("Missing the required parameter 'serverid' when calling deleteUser");
      }
      // verify the required parameter 'userid' is set
      if (userid === undefined || userid === null) {
        throw new Error("Missing the required parameter 'userid' when calling deleteUser");
      }

      let pathParams = {
        'serverid': serverid,
        'userid': userid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'role_id'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/servers/{serverid}/users/{userid}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteUserAccounts operation.
     * @callback module:api/UsersApi~deleteUserAccountsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete all accounts of a specific user
     * Delete all accounts corresponding to this user. The user itself is not deleted. Required permission: 'accounts' or 'users'.
     * @param {String} serverid Base64 encoded server id
     * @param {String} userid User name
     * @param {module:api/UsersApi~deleteUserAccountsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteUserAccounts(serverid, userid, callback) {
      let postBody = null;
      // verify the required parameter 'serverid' is set
      if (serverid === undefined || serverid === null) {
        throw new Error("Missing the required parameter 'serverid' when calling deleteUserAccounts");
      }
      // verify the required parameter 'userid' is set
      if (userid === undefined || userid === null) {
        throw new Error("Missing the required parameter 'userid' when calling deleteUserAccounts");
      }

      let pathParams = {
        'serverid': serverid,
        'userid': userid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'role_id'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/servers/{serverid}/users/{userid}/accounts', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteUserAttribute operation.
     * @callback module:api/UsersApi~deleteUserAttributeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete specific attribute of a specific user
     * Delete attribute with the specified key of a specific user. Required permission: 'users'.
     * @param {String} serverid Base64 encoded server id
     * @param {String} userid User name
     * @param {String} attributekey Key of the attribute
     * @param {module:api/UsersApi~deleteUserAttributeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteUserAttribute(serverid, userid, attributekey, callback) {
      let postBody = null;
      // verify the required parameter 'serverid' is set
      if (serverid === undefined || serverid === null) {
        throw new Error("Missing the required parameter 'serverid' when calling deleteUserAttribute");
      }
      // verify the required parameter 'userid' is set
      if (userid === undefined || userid === null) {
        throw new Error("Missing the required parameter 'userid' when calling deleteUserAttribute");
      }
      // verify the required parameter 'attributekey' is set
      if (attributekey === undefined || attributekey === null) {
        throw new Error("Missing the required parameter 'attributekey' when calling deleteUserAttribute");
      }

      let pathParams = {
        'serverid': serverid,
        'userid': userid,
        'attributekey': attributekey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'role_id'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/servers/{serverid}/users/{userid}/attributes/{attributekey}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteUserAttributes operation.
     * @callback module:api/UsersApi~deleteUserAttributesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete all attributes of a specific user
     * Delete all attributes of a specific user. Required permission: 'users'.
     * @param {String} serverid Base64 encoded server id
     * @param {String} userid User name
     * @param {module:api/UsersApi~deleteUserAttributesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteUserAttributes(serverid, userid, callback) {
      let postBody = null;
      // verify the required parameter 'serverid' is set
      if (serverid === undefined || serverid === null) {
        throw new Error("Missing the required parameter 'serverid' when calling deleteUserAttributes");
      }
      // verify the required parameter 'userid' is set
      if (userid === undefined || userid === null) {
        throw new Error("Missing the required parameter 'userid' when calling deleteUserAttributes");
      }

      let pathParams = {
        'serverid': serverid,
        'userid': userid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'role_id'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/servers/{serverid}/users/{userid}/attributes/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getUser operation.
     * @callback module:api/UsersApi~getUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Accounts} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all accounts of a specific user
     * Returns an array containing all accounts corresponding to this user. Required permission: 'sessions' or 'users'.
     * @param {String} serverid Base64 encoded server id
     * @param {String} userid User name
     * @param {Object} opts Optional parameters
     * @param {Number} [limit] Limit the number of results
     * @param {Number} [marker] Offset in the result list
     * @param {String} [sort] Sort the results by column. You can also specify ascending (default if not specified) or descending, e.g., *column:asc* . You can also sort by multiple columns, e.g., *column1:desc,column2:asc*
     * @param {module:api/UsersApi~getUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Accounts}
     */
    getUser(serverid, userid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'serverid' is set
      if (serverid === undefined || serverid === null) {
        throw new Error("Missing the required parameter 'serverid' when calling getUser");
      }
      // verify the required parameter 'userid' is set
      if (userid === undefined || userid === null) {
        throw new Error("Missing the required parameter 'userid' when calling getUser");
      }

      let pathParams = {
        'serverid': serverid,
        'userid': userid
      };
      let queryParams = {
        'limit': opts['limit'],
        'marker': opts['marker'],
        'sort': opts['sort']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'role_id'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Accounts;
      return this.apiClient.callApi(
        '/servers/{serverid}/users/{userid}/accounts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getUserAttributes operation.
     * @callback module:api/UsersApi~getUserAttributesCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all attributes of a specific user
     * Returns an array containing all attributes corresponding to this user. Required permission: 'sessions' or 'users'.
     * @param {String} serverid Base64 encoded server id
     * @param {String} userid User name
     * @param {module:api/UsersApi~getUserAttributesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    getUserAttributes(serverid, userid, callback) {
      let postBody = null;
      // verify the required parameter 'serverid' is set
      if (serverid === undefined || serverid === null) {
        throw new Error("Missing the required parameter 'serverid' when calling getUserAttributes");
      }
      // verify the required parameter 'userid' is set
      if (userid === undefined || userid === null) {
        throw new Error("Missing the required parameter 'userid' when calling getUserAttributes");
      }

      let pathParams = {
        'serverid': serverid,
        'userid': userid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'role_id'];
      let contentTypes = [];
      let accepts = ['text/plain'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/servers/{serverid}/users/{userid}/attributes/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getUsers operation.
     * @callback module:api/UsersApi~getUsersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Users} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all users
     * Returns an array of arrays containing all accounts corresponding to all users. Required permission: 'users'.
     * @param {String} serverid Base64 encoded server id
     * @param {Object} opts Optional parameters
     * @param {String} [filter] Filter users based on an attribute. Takes the format *attributename=attributevalue*. You can filter for multiple values at once, e.g. *group=in:group1,group2*
     * @param {String} [search] Search for a username LIKE %search%
     * @param {Number} [limit] Limit the number of results
     * @param {Number} [marker] Offset in the result list
     * @param {String} [sort] Sort the results by column. You can also specify ascending (default if not specified) or descending, e.g., *column:asc* . You can also sort by multiple columns, e.g., *column1:desc,column2:asc*
     * @param {module:api/UsersApi~getUsersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Users}
     */
    getUsers(serverid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'serverid' is set
      if (serverid === undefined || serverid === null) {
        throw new Error("Missing the required parameter 'serverid' when calling getUsers");
      }

      let pathParams = {
        'serverid': serverid
      };
      let queryParams = {
        'filter': opts['filter'],
        'search': opts['search'],
        'limit': opts['limit'],
        'marker': opts['marker'],
        'sort': opts['sort']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'role_id'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Users;
      return this.apiClient.callApi(
        '/servers/{serverid}/users/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the registerUser operation.
     * @callback module:api/UsersApi~registerUserCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Register a userid for the currently logged in account.
     * Register a user for the currently logged in account. You can also directly pass a user name when generating an ENROL qr code. Required permission: 'users'.
     * @param {String} serverid Base64 encoded server id
     * @param {String} xNonce Nonce to identify the browser/webserver session
     * @param {String} userid Username to register
     * @param {module:api/UsersApi~registerUserCallback} callback The callback function, accepting three arguments: error, data, response
     */
    registerUser(serverid, xNonce, userid, callback) {
      let postBody = null;
      // verify the required parameter 'serverid' is set
      if (serverid === undefined || serverid === null) {
        throw new Error("Missing the required parameter 'serverid' when calling registerUser");
      }
      // verify the required parameter 'xNonce' is set
      if (xNonce === undefined || xNonce === null) {
        throw new Error("Missing the required parameter 'xNonce' when calling registerUser");
      }
      // verify the required parameter 'userid' is set
      if (userid === undefined || userid === null) {
        throw new Error("Missing the required parameter 'userid' when calling registerUser");
      }

      let pathParams = {
        'serverid': serverid
      };
      let queryParams = {
        'userid': userid
      };
      let headerParams = {
        'X-nonce': xNonce
      };
      let formParams = {
      };

      let authNames = ['api_key', 'role_id'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/servers/{serverid}/sessions/registeruser', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setUserAttributes operation.
     * @callback module:api/UsersApi~setUserAttributesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set all attributes of a specific user
     * Set the attributes of a specific user. Prior attributes with keys that are not provided in the body of the request will be deleted. Creates the user if not exists. Required permission: 'users'.
     * @param {String} serverid Base64 encoded server id
     * @param {String} userid User name
     * @param {Object.<String, Object>} attributes Array of attributes
     * @param {module:api/UsersApi~setUserAttributesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    setUserAttributes(serverid, userid, attributes, callback) {
      let postBody = attributes;
      // verify the required parameter 'serverid' is set
      if (serverid === undefined || serverid === null) {
        throw new Error("Missing the required parameter 'serverid' when calling setUserAttributes");
      }
      // verify the required parameter 'userid' is set
      if (userid === undefined || userid === null) {
        throw new Error("Missing the required parameter 'userid' when calling setUserAttributes");
      }
      // verify the required parameter 'attributes' is set
      if (attributes === undefined || attributes === null) {
        throw new Error("Missing the required parameter 'attributes' when calling setUserAttributes");
      }

      let pathParams = {
        'serverid': serverid,
        'userid': userid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'role_id'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/servers/{serverid}/users/{userid}/attributes/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateUserAttributes operation.
     * @callback module:api/UsersApi~updateUserAttributesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update specified attributes of a specific user
     * Update the specified attributes of a specific user. Prior attributes with keys that are not provided in the body of the request will not be deleted. Required permission: 'users'.
     * @param {String} serverid Base64 encoded server id
     * @param {String} userid User name
     * @param {Object.<String, Object>} attributes Array of attributes
     * @param {module:api/UsersApi~updateUserAttributesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateUserAttributes(serverid, userid, attributes, callback) {
      let postBody = attributes;
      // verify the required parameter 'serverid' is set
      if (serverid === undefined || serverid === null) {
        throw new Error("Missing the required parameter 'serverid' when calling updateUserAttributes");
      }
      // verify the required parameter 'userid' is set
      if (userid === undefined || userid === null) {
        throw new Error("Missing the required parameter 'userid' when calling updateUserAttributes");
      }
      // verify the required parameter 'attributes' is set
      if (attributes === undefined || attributes === null) {
        throw new Error("Missing the required parameter 'attributes' when calling updateUserAttributes");
      }

      let pathParams = {
        'serverid': serverid,
        'userid': userid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'role_id'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/servers/{serverid}/users/{userid}/attributes/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
