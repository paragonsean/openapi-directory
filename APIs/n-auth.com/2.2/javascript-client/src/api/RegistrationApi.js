/**
 * nextAuth API
 * API for the nextAuth server
 *
 * The version of the OpenAPI document: 2.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Account from '../model/Account';

/**
* Registration service.
* @module api/RegistrationApi
* @version 2.2
*/
export default class RegistrationApi {

    /**
    * Constructs a new RegistrationApi. 
    * @alias module:api/RegistrationApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getQrEnrol operation.
     * @callback module:api/RegistrationApi~getQrEnrolCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Generate data for an enrol qr code
     * Returns the data for an enrol qr code. Required permission: 'sessions'.
     * @param {String} serverid Base64 encoded server id
     * @param {String} xNonce Nonce to identify the browser/webserver session
     * @param {String} name Name to forward to the nextAuth app for this account
     * @param {Object} opts Optional parameters
     * @param {String} [userid] User name to register this user under
     * @param {String} [img] 'png' for a PNG image, not set for raw data in the qr code
     * @param {Number} [s] size in pixels of the qr code, defaults to 500
     * @param {module:api/RegistrationApi~getQrEnrolCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    getQrEnrol(serverid, xNonce, name, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'serverid' is set
      if (serverid === undefined || serverid === null) {
        throw new Error("Missing the required parameter 'serverid' when calling getQrEnrol");
      }
      // verify the required parameter 'xNonce' is set
      if (xNonce === undefined || xNonce === null) {
        throw new Error("Missing the required parameter 'xNonce' when calling getQrEnrol");
      }
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling getQrEnrol");
      }

      let pathParams = {
        'serverid': serverid
      };
      let queryParams = {
        'name': name,
        'userid': opts['userid'],
        'img': opts['img'],
        's': opts['s']
      };
      let headerParams = {
        'X-nonce': xNonce
      };
      let formParams = {
      };

      let authNames = ['api_key', 'role_id'];
      let contentTypes = [];
      let accepts = ['application/octet-stream'];
      let returnType = File;
      return this.apiClient.callApi(
        '/servers/{serverid}/sessions/qr/enrol', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getServerVash operation.
     * @callback module:api/RegistrationApi~getServerVashCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Visual hash of this server
     * Returns a PNG of the visual hash corresponding to this server. This visual hash is used during the registration process (optional), for the user to verify that (s)he is registering with the right server in the nextAuth app. For single-server nextAuth-enabled apps (white label or mobile SDK), the public key of the server is typically pinned within the app and hence this visual hash is not displayed to the user. Required permission: 'sessions' or 'servers'.
     * @param {String} serverid Base64 encoded server id
     * @param {module:api/RegistrationApi~getServerVashCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    getServerVash(serverid, callback) {
      let postBody = null;
      // verify the required parameter 'serverid' is set
      if (serverid === undefined || serverid === null) {
        throw new Error("Missing the required parameter 'serverid' when calling getServerVash");
      }

      let pathParams = {
        'serverid': serverid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'role_id'];
      let contentTypes = [];
      let accepts = ['application/octet-stream'];
      let returnType = File;
      return this.apiClient.callApi(
        '/servers/{serverid}/vash', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the registerUser_0 operation.
     * @callback module:api/RegistrationApi~registerUser_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Register a userid for the currently logged in account.
     * Register a user for the currently logged in account. You can also directly pass a user name when generating an ENROL qr code. Required permission: 'users'.
     * @param {String} serverid Base64 encoded server id
     * @param {String} xNonce Nonce to identify the browser/webserver session
     * @param {String} userid Username to register
     * @param {module:api/RegistrationApi~registerUser_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    registerUser_0(serverid, xNonce, userid, callback) {
      let postBody = null;
      // verify the required parameter 'serverid' is set
      if (serverid === undefined || serverid === null) {
        throw new Error("Missing the required parameter 'serverid' when calling registerUser_0");
      }
      // verify the required parameter 'xNonce' is set
      if (xNonce === undefined || xNonce === null) {
        throw new Error("Missing the required parameter 'xNonce' when calling registerUser_0");
      }
      // verify the required parameter 'userid' is set
      if (userid === undefined || userid === null) {
        throw new Error("Missing the required parameter 'userid' when calling registerUser_0");
      }

      let pathParams = {
        'serverid': serverid
      };
      let queryParams = {
        'userid': userid
      };
      let headerParams = {
        'X-nonce': xNonce
      };
      let formParams = {
      };

      let authNames = ['api_key', 'role_id'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/servers/{serverid}/sessions/registeruser', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateAccountUser_0 operation.
     * @callback module:api/RegistrationApi~updateAccountUser_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/Account} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update user of the given account.
     * Update the user of the given account. Required permission: 'accounts'.
     * @param {String} serverid Base64 encoded server id
     * @param {Number} accountid Account id
     * @param {String} userid User name
     * @param {module:api/RegistrationApi~updateAccountUser_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Account}
     */
    updateAccountUser_0(serverid, accountid, userid, callback) {
      let postBody = null;
      // verify the required parameter 'serverid' is set
      if (serverid === undefined || serverid === null) {
        throw new Error("Missing the required parameter 'serverid' when calling updateAccountUser_0");
      }
      // verify the required parameter 'accountid' is set
      if (accountid === undefined || accountid === null) {
        throw new Error("Missing the required parameter 'accountid' when calling updateAccountUser_0");
      }
      // verify the required parameter 'userid' is set
      if (userid === undefined || userid === null) {
        throw new Error("Missing the required parameter 'userid' when calling updateAccountUser_0");
      }

      let pathParams = {
        'serverid': serverid,
        'accountid': accountid
      };
      let queryParams = {
        'userid': userid
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'role_id'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Account;
      return this.apiClient.callApi(
        '/servers/{serverid}/accounts/{accountid}/user', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
