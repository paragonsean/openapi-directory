/**
 * nextAuth API
 * API for the nextAuth server
 *
 * The version of the OpenAPI document: 2.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Transaction from '../model/Transaction';
import TransactionId from '../model/TransactionId';
import TransactionResult from '../model/TransactionResult';

/**
* Transactions service.
* @module api/TransactionsApi
* @version 2.2
*/
export default class TransactionsApi {

    /**
    * Constructs a new TransactionsApi. 
    * @alias module:api/TransactionsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createTransaction operation.
     * @callback module:api/TransactionsApi~createTransactionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TransactionId} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a transaction to be approved within the current session.
     * Create a transaction for approval within the current session. Required permission: 'sessions'.
     * @param {String} serverid Base64 encoded server id
     * @param {String} xNonce Nonce to identify the browser/webserver session
     * @param {module:model/Transaction} msg 
     * @param {module:api/TransactionsApi~createTransactionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TransactionId}
     */
    createTransaction(serverid, xNonce, msg, callback) {
      let postBody = msg;
      // verify the required parameter 'serverid' is set
      if (serverid === undefined || serverid === null) {
        throw new Error("Missing the required parameter 'serverid' when calling createTransaction");
      }
      // verify the required parameter 'xNonce' is set
      if (xNonce === undefined || xNonce === null) {
        throw new Error("Missing the required parameter 'xNonce' when calling createTransaction");
      }
      // verify the required parameter 'msg' is set
      if (msg === undefined || msg === null) {
        throw new Error("Missing the required parameter 'msg' when calling createTransaction");
      }

      let pathParams = {
        'serverid': serverid
      };
      let queryParams = {
      };
      let headerParams = {
        'X-nonce': xNonce
      };
      let formParams = {
      };

      let authNames = ['api_key', 'role_id'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TransactionId;
      return this.apiClient.callApi(
        '/servers/{serverid}/sessions/transactions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTransactionResult operation.
     * @callback module:api/TransactionsApi~getTransactionResultCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TransactionResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get transaction result for a given transaction.
     * Get transaction result for a given transaction id. Required permission: 'sessions'.
     * @param {String} serverid Base64 encoded server id
     * @param {String} transactionid Base64 encoded transaction id
     * @param {module:api/TransactionsApi~getTransactionResultCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TransactionResult}
     */
    getTransactionResult(serverid, transactionid, callback) {
      let postBody = null;
      // verify the required parameter 'serverid' is set
      if (serverid === undefined || serverid === null) {
        throw new Error("Missing the required parameter 'serverid' when calling getTransactionResult");
      }
      // verify the required parameter 'transactionid' is set
      if (transactionid === undefined || transactionid === null) {
        throw new Error("Missing the required parameter 'transactionid' when calling getTransactionResult");
      }

      let pathParams = {
        'serverid': serverid,
        'transactionid': transactionid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'role_id'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TransactionResult;
      return this.apiClient.callApi(
        '/servers/{serverid}/transactions/{transactionid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
