/**
 * nextAuth API
 * API for the nextAuth server
 *
 * The version of the OpenAPI document: 2.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import LoginStatus from '../model/LoginStatus';
import UserContext from '../model/UserContext';

/**
* Sessions service.
* @module api/SessionsApi
* @version 2.2
*/
export default class SessionsApi {

    /**
    * Constructs a new SessionsApi. 
    * @alias module:api/SessionsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getQrLogin operation.
     * @callback module:api/SessionsApi~getQrLoginCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Generate data for a login qr code
     * Returns the data for a login qr code. Required permission: 'sessions'.
     * @param {String} serverid Base64 encoded server id
     * @param {String} xNonce Nonce to identify the browser/webserver session
     * @param {Object} opts Optional parameters
     * @param {String} [img] \"png\" for a PNG image, not set for raw data in the qr code
     * @param {Number} [s] size in pixels of the qr code, defaults to 500
     * @param {module:model/UserContext} [userContext] Session information to display to user.
     * @param {module:api/SessionsApi~getQrLoginCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    getQrLogin(serverid, xNonce, opts, callback) {
      opts = opts || {};
      let postBody = opts['userContext'];
      // verify the required parameter 'serverid' is set
      if (serverid === undefined || serverid === null) {
        throw new Error("Missing the required parameter 'serverid' when calling getQrLogin");
      }
      // verify the required parameter 'xNonce' is set
      if (xNonce === undefined || xNonce === null) {
        throw new Error("Missing the required parameter 'xNonce' when calling getQrLogin");
      }

      let pathParams = {
        'serverid': serverid
      };
      let queryParams = {
        'img': opts['img'],
        's': opts['s']
      };
      let headerParams = {
        'X-nonce': xNonce
      };
      let formParams = {
      };

      let authNames = ['api_key', 'role_id'];
      let contentTypes = ['application/json'];
      let accepts = ['application/octet-stream'];
      let returnType = File;
      return this.apiClient.callApi(
        '/servers/{serverid}/sessions/qr/login', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSession operation.
     * @callback module:api/SessionsApi~getSessionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LoginStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Check if the user is logged in
     * Based on the browser/webserver session identifier, check if the user is logged in and return the associated username. This also returns additional information: the data for the login qr code and whether or not a loggin can be provoked directly from the server. Required permission: 'sessions'.
     * @param {String} serverid Base64 encoded server id
     * @param {String} xNonce Nonce to identify the browser/webserver session
     * @param {module:api/SessionsApi~getSessionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LoginStatus}
     */
    getSession(serverid, xNonce, callback) {
      let postBody = null;
      // verify the required parameter 'serverid' is set
      if (serverid === undefined || serverid === null) {
        throw new Error("Missing the required parameter 'serverid' when calling getSession");
      }
      // verify the required parameter 'xNonce' is set
      if (xNonce === undefined || xNonce === null) {
        throw new Error("Missing the required parameter 'xNonce' when calling getSession");
      }

      let pathParams = {
        'serverid': serverid
      };
      let queryParams = {
      };
      let headerParams = {
        'X-nonce': xNonce
      };
      let formParams = {
      };

      let authNames = ['api_key', 'role_id'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LoginStatus;
      return this.apiClient.callApi(
        '/servers/{serverid}/sessions/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the logout operation.
     * @callback module:api/SessionsApi~logoutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Force a logout on the given session
     * Force a logout on the given session. Required permission: 'sessions'.
     * @param {String} serverid Base64 encoded server id
     * @param {String} xNonce Nonce to identify the browser/webserver session
     * @param {module:api/SessionsApi~logoutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    logout(serverid, xNonce, callback) {
      let postBody = null;
      // verify the required parameter 'serverid' is set
      if (serverid === undefined || serverid === null) {
        throw new Error("Missing the required parameter 'serverid' when calling logout");
      }
      // verify the required parameter 'xNonce' is set
      if (xNonce === undefined || xNonce === null) {
        throw new Error("Missing the required parameter 'xNonce' when calling logout");
      }

      let pathParams = {
        'serverid': serverid
      };
      let queryParams = {
      };
      let headerParams = {
        'X-nonce': xNonce
      };
      let formParams = {
      };

      let authNames = ['api_key', 'role_id'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/servers/{serverid}/sessions/logout', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the provokeLogin operation.
     * @callback module:api/SessionsApi~provokeLoginCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Push a login confirmation to the user's app
     * Push a login to the nextAuth app for the user to confirm, based on last account that successfully logged in for the given session. Required permission: 'sessions'. 
     * @param {String} serverid Base64 encoded server id
     * @param {String} xNonce Nonce to identify the browser/webserver session
     * @param {Object} opts Optional parameters
     * @param {module:model/UserContext} [userContext] Session information to display to user.
     * @param {module:api/SessionsApi~provokeLoginCallback} callback The callback function, accepting three arguments: error, data, response
     */
    provokeLogin(serverid, xNonce, opts, callback) {
      opts = opts || {};
      let postBody = opts['userContext'];
      // verify the required parameter 'serverid' is set
      if (serverid === undefined || serverid === null) {
        throw new Error("Missing the required parameter 'serverid' when calling provokeLogin");
      }
      // verify the required parameter 'xNonce' is set
      if (xNonce === undefined || xNonce === null) {
        throw new Error("Missing the required parameter 'xNonce' when calling provokeLogin");
      }

      let pathParams = {
        'serverid': serverid
      };
      let queryParams = {
      };
      let headerParams = {
        'X-nonce': xNonce
      };
      let formParams = {
      };

      let authNames = ['api_key', 'role_id'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/servers/{serverid}/sessions/provokelogin', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the provokeLoginOnAccount operation.
     * @callback module:api/SessionsApi~provokeLoginOnAccountCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Push a login confirmation to the user's app
     * Push a login to the nextAuth app for the user to confirm, based on the given account (app instance). Required permission: 'sessions' or 'accounts'.
     * @param {String} serverid Base64 encoded server id
     * @param {String} xNonce Base64 encoded nonce to identify the browser/webserver session
     * @param {Number} accountid Account id
     * @param {Object} opts Optional parameters
     * @param {module:model/UserContext} [userContext] Session information to display to user
     * @param {module:api/SessionsApi~provokeLoginOnAccountCallback} callback The callback function, accepting three arguments: error, data, response
     */
    provokeLoginOnAccount(serverid, xNonce, accountid, opts, callback) {
      opts = opts || {};
      let postBody = opts['userContext'];
      // verify the required parameter 'serverid' is set
      if (serverid === undefined || serverid === null) {
        throw new Error("Missing the required parameter 'serverid' when calling provokeLoginOnAccount");
      }
      // verify the required parameter 'xNonce' is set
      if (xNonce === undefined || xNonce === null) {
        throw new Error("Missing the required parameter 'xNonce' when calling provokeLoginOnAccount");
      }
      // verify the required parameter 'accountid' is set
      if (accountid === undefined || accountid === null) {
        throw new Error("Missing the required parameter 'accountid' when calling provokeLoginOnAccount");
      }

      let pathParams = {
        'serverid': serverid,
        'accountid': accountid
      };
      let queryParams = {
      };
      let headerParams = {
        'X-nonce': xNonce
      };
      let formParams = {
      };

      let authNames = ['api_key', 'role_id'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/servers/{serverid}/accounts/{accountid}/provokelogin', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the provokeLoginOnUser operation.
     * @callback module:api/SessionsApi~provokeLoginOnUserCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Push a login confirmation to the user's app
     * Push a login to the nextAuth app for the user to confirm, based on the given userid. Required permission: 'sessions' or 'users'.
     * @param {String} serverid Base64 encoded server id
     * @param {String} xNonce Nonce to identify the browser/webserver session
     * @param {String} userid User name
     * @param {Object} opts Optional parameters
     * @param {module:model/UserContext} [userContext] Session information to display to user.
     * @param {module:api/SessionsApi~provokeLoginOnUserCallback} callback The callback function, accepting three arguments: error, data, response
     */
    provokeLoginOnUser(serverid, xNonce, userid, opts, callback) {
      opts = opts || {};
      let postBody = opts['userContext'];
      // verify the required parameter 'serverid' is set
      if (serverid === undefined || serverid === null) {
        throw new Error("Missing the required parameter 'serverid' when calling provokeLoginOnUser");
      }
      // verify the required parameter 'xNonce' is set
      if (xNonce === undefined || xNonce === null) {
        throw new Error("Missing the required parameter 'xNonce' when calling provokeLoginOnUser");
      }
      // verify the required parameter 'userid' is set
      if (userid === undefined || userid === null) {
        throw new Error("Missing the required parameter 'userid' when calling provokeLoginOnUser");
      }

      let pathParams = {
        'serverid': serverid,
        'userid': userid
      };
      let queryParams = {
      };
      let headerParams = {
        'X-nonce': xNonce
      };
      let formParams = {
      };

      let authNames = ['api_key', 'role_id'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/servers/{serverid}/users/{userid}/provokelogin', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
