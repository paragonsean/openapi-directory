/**
 * nextAuth API
 * API for the nextAuth server
 *
 * The version of the OpenAPI document: 2.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";

/**
* Global service.
* @module api/GlobalApi
* @version 2.2
*/
export default class GlobalApi {

    /**
    * Constructs a new GlobalApi. 
    * @alias module:api/GlobalApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the deleteGlobalAttribute operation.
     * @callback module:api/GlobalApi~deleteGlobalAttributeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete specific global attribute
     * Delete global attribute with the specified key. Required: global 'servers'.
     * @param {String} attributekey Key of the attribute
     * @param {module:api/GlobalApi~deleteGlobalAttributeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteGlobalAttribute(attributekey, callback) {
      let postBody = null;
      // verify the required parameter 'attributekey' is set
      if (attributekey === undefined || attributekey === null) {
        throw new Error("Missing the required parameter 'attributekey' when calling deleteGlobalAttribute");
      }

      let pathParams = {
        'attributekey': attributekey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'role_id'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/attributes/{attributekey}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteGlobalAttributes operation.
     * @callback module:api/GlobalApi~deleteGlobalAttributesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete all global attributes
     * Delete all global attributes. Required permission: global 'servers'.
     * @param {module:api/GlobalApi~deleteGlobalAttributesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteGlobalAttributes(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'role_id'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/attributes/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteServerPrivilegedAttribute operation.
     * @callback module:api/GlobalApi~deleteServerPrivilegedAttributeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete specific privileged attribute of a specific server
     * Delete privileged attribute with the specified key of a specific server. Required permission: global 'servers'.
     * @param {String} serverid Base64 encoded server id
     * @param {String} attributekey Key of the attribute
     * @param {module:api/GlobalApi~deleteServerPrivilegedAttributeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteServerPrivilegedAttribute(serverid, attributekey, callback) {
      let postBody = null;
      // verify the required parameter 'serverid' is set
      if (serverid === undefined || serverid === null) {
        throw new Error("Missing the required parameter 'serverid' when calling deleteServerPrivilegedAttribute");
      }
      // verify the required parameter 'attributekey' is set
      if (attributekey === undefined || attributekey === null) {
        throw new Error("Missing the required parameter 'attributekey' when calling deleteServerPrivilegedAttribute");
      }

      let pathParams = {
        'serverid': serverid,
        'attributekey': attributekey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'role_id'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/servers/{serverid}/privilegedattributes/{attributekey}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteServerPrivilegedAttributes operation.
     * @callback module:api/GlobalApi~deleteServerPrivilegedAttributesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete all privileged attributes of a specific server
     * Delete all privileged attributes of a specific server. Required permission: global 'servers'.
     * @param {String} serverid Base64 encoded server id
     * @param {module:api/GlobalApi~deleteServerPrivilegedAttributesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteServerPrivilegedAttributes(serverid, callback) {
      let postBody = null;
      // verify the required parameter 'serverid' is set
      if (serverid === undefined || serverid === null) {
        throw new Error("Missing the required parameter 'serverid' when calling deleteServerPrivilegedAttributes");
      }

      let pathParams = {
        'serverid': serverid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'role_id'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/servers/{serverid}/privilegedattributes/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getGlobalAttributes operation.
     * @callback module:api/GlobalApi~getGlobalAttributesCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all global attributes
     * Returns an array containing all global attributes. Required permission: global 'servers'.
     * @param {module:api/GlobalApi~getGlobalAttributesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    getGlobalAttributes(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'role_id'];
      let contentTypes = [];
      let accepts = ['text/plain'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/attributes/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getServerPrivilegedAttributes operation.
     * @callback module:api/GlobalApi~getServerPrivilegedAttributesCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all privileged attributes of a specific server
     * Returns an array containing all privileged attributes corresponding to this server. Required permission: global 'servers'.
     * @param {String} serverid Base64 encoded server id
     * @param {module:api/GlobalApi~getServerPrivilegedAttributesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    getServerPrivilegedAttributes(serverid, callback) {
      let postBody = null;
      // verify the required parameter 'serverid' is set
      if (serverid === undefined || serverid === null) {
        throw new Error("Missing the required parameter 'serverid' when calling getServerPrivilegedAttributes");
      }

      let pathParams = {
        'serverid': serverid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'role_id'];
      let contentTypes = [];
      let accepts = ['text/plain'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/servers/{serverid}/privilegedattributes/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setGlobalAttributes operation.
     * @callback module:api/GlobalApi~setGlobalAttributesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set all global attributes
     * Set the global attributes. Prior attributes with keys that are not provided in the body of the request will be deleted. Required permission: global 'servers'.
     * @param {Object.<String, Object>} attributes Array of attributes
     * @param {module:api/GlobalApi~setGlobalAttributesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    setGlobalAttributes(attributes, callback) {
      let postBody = attributes;
      // verify the required parameter 'attributes' is set
      if (attributes === undefined || attributes === null) {
        throw new Error("Missing the required parameter 'attributes' when calling setGlobalAttributes");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'role_id'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/attributes/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setServerPrivilegedAttributes operation.
     * @callback module:api/GlobalApi~setServerPrivilegedAttributesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set all privileged attributes of a specific server
     * Set the privileged attributes of a specific server. Prior attributes with keys that are not provided in the body of the request will be deleted. Required permission: global 'servers'.
     * @param {String} serverid Base64 encoded server id
     * @param {Object.<String, Object>} attributes Array of attributes
     * @param {module:api/GlobalApi~setServerPrivilegedAttributesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    setServerPrivilegedAttributes(serverid, attributes, callback) {
      let postBody = attributes;
      // verify the required parameter 'serverid' is set
      if (serverid === undefined || serverid === null) {
        throw new Error("Missing the required parameter 'serverid' when calling setServerPrivilegedAttributes");
      }
      // verify the required parameter 'attributes' is set
      if (attributes === undefined || attributes === null) {
        throw new Error("Missing the required parameter 'attributes' when calling setServerPrivilegedAttributes");
      }

      let pathParams = {
        'serverid': serverid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'role_id'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/servers/{serverid}/privilegedattributes/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateGlobalAttributes operation.
     * @callback module:api/GlobalApi~updateGlobalAttributesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update specified global attributes
     * Update the specified global attributes. Prior attributes with keys that are not provided in the body of the request will not be deleted. Required permission: 'servers'.
     * @param {Object.<String, Object>} attributes Array of attributes
     * @param {module:api/GlobalApi~updateGlobalAttributesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateGlobalAttributes(attributes, callback) {
      let postBody = attributes;
      // verify the required parameter 'attributes' is set
      if (attributes === undefined || attributes === null) {
        throw new Error("Missing the required parameter 'attributes' when calling updateGlobalAttributes");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'role_id'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/attributes/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateServerPrivilegedAttributes operation.
     * @callback module:api/GlobalApi~updateServerPrivilegedAttributesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update privileged specified attributes of a specific server
     * Update the specified privileged attributes of a specific server. Prior privileged attributes with keys that are not provided in the body of the request will not be deleted. Required permission: global 'servers'.
     * @param {String} serverid Base64 encoded server id
     * @param {Object.<String, Object>} attributes Array of attributes
     * @param {module:api/GlobalApi~updateServerPrivilegedAttributesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateServerPrivilegedAttributes(serverid, attributes, callback) {
      let postBody = attributes;
      // verify the required parameter 'serverid' is set
      if (serverid === undefined || serverid === null) {
        throw new Error("Missing the required parameter 'serverid' when calling updateServerPrivilegedAttributes");
      }
      // verify the required parameter 'attributes' is set
      if (attributes === undefined || attributes === null) {
        throw new Error("Missing the required parameter 'attributes' when calling updateServerPrivilegedAttributes");
      }

      let pathParams = {
        'serverid': serverid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'role_id'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/servers/{serverid}/privilegedattributes/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
