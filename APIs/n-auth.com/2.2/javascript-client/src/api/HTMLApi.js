/**
 * nextAuth API
 * API for the nextAuth server
 *
 * The version of the OpenAPI document: 2.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import HtmlFooterBody from '../model/HtmlFooterBody';
import LoginStatus from '../model/LoginStatus';
import UserContext from '../model/UserContext';

/**
* HTML service.
* @module api/HTMLApi
* @version 2.2
*/
export default class HTMLApi {

    /**
    * Constructs a new HTMLApi. 
    * @alias module:api/HTMLApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getHtmlEnrol operation.
     * @callback module:api/HTMLApi~getHtmlEnrolCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Generate HTML to enrol a new user
     * Generate HTML to enrol a new user. Required permission: 'sessions'. 
     * @param {String} serverid Base64 encoded server id
     * @param {String} xNonce Nonce to identify the browser/webserver session
     * @param {Object} opts Optional parameters
     * @param {String} [name] Name to forward to the nextAuth app for this account
     * @param {String} [userid] User name to register this user under
     * @param {module:api/HTMLApi~getHtmlEnrolCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    getHtmlEnrol(serverid, xNonce, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'serverid' is set
      if (serverid === undefined || serverid === null) {
        throw new Error("Missing the required parameter 'serverid' when calling getHtmlEnrol");
      }
      // verify the required parameter 'xNonce' is set
      if (xNonce === undefined || xNonce === null) {
        throw new Error("Missing the required parameter 'xNonce' when calling getHtmlEnrol");
      }

      let pathParams = {
        'serverid': serverid
      };
      let queryParams = {
        'name': opts['name'],
        'userid': opts['userid']
      };
      let headerParams = {
        'X-nonce': xNonce
      };
      let formParams = {
      };

      let authNames = ['api_key', 'role_id'];
      let contentTypes = [];
      let accepts = ['text/html'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/servers/{serverid}/sessions/html/enrol', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getHtmlFooter operation.
     * @callback module:api/HTMLApi~getHtmlFooterCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Generic HTML to add to footer. Required for login/logout/enrol functionality.
     * HTML to add to footer of HTML page. Required permission: 'sessions'. 
     * @param {String} serverid Base64 encoded server id
     * @param {String} xNonce Nonce to identify the browser/webserver session
     * @param {Object} opts Optional parameters
     * @param {module:model/HtmlFooterBody} [htmlFooterBody] Additional sessions that should be monitored through the websocket.
     * @param {module:api/HTMLApi~getHtmlFooterCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    getHtmlFooter(serverid, xNonce, opts, callback) {
      opts = opts || {};
      let postBody = opts['htmlFooterBody'];
      // verify the required parameter 'serverid' is set
      if (serverid === undefined || serverid === null) {
        throw new Error("Missing the required parameter 'serverid' when calling getHtmlFooter");
      }
      // verify the required parameter 'xNonce' is set
      if (xNonce === undefined || xNonce === null) {
        throw new Error("Missing the required parameter 'xNonce' when calling getHtmlFooter");
      }

      let pathParams = {
        'serverid': serverid
      };
      let queryParams = {
      };
      let headerParams = {
        'X-nonce': xNonce
      };
      let formParams = {
      };

      let authNames = ['api_key', 'role_id'];
      let contentTypes = ['application/json'];
      let accepts = ['text/html'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/servers/{serverid}/sessions/html/footer', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getHtmlLogin operation.
     * @callback module:api/HTMLApi~getHtmlLoginCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Generate HTML for the login block
     * Generate HTML for the login block. Required permission: 'sessions'. 
     * @param {String} serverid Base64 encoded server id
     * @param {String} xNonce Nonce to identify the browser/webserver session
     * @param {Object} opts Optional parameters
     * @param {module:model/UserContext} [userContext] Session information to display to user.
     * @param {module:api/HTMLApi~getHtmlLoginCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    getHtmlLogin(serverid, xNonce, opts, callback) {
      opts = opts || {};
      let postBody = opts['userContext'];
      // verify the required parameter 'serverid' is set
      if (serverid === undefined || serverid === null) {
        throw new Error("Missing the required parameter 'serverid' when calling getHtmlLogin");
      }
      // verify the required parameter 'xNonce' is set
      if (xNonce === undefined || xNonce === null) {
        throw new Error("Missing the required parameter 'xNonce' when calling getHtmlLogin");
      }

      let pathParams = {
        'serverid': serverid
      };
      let queryParams = {
      };
      let headerParams = {
        'X-nonce': xNonce
      };
      let formParams = {
      };

      let authNames = ['api_key', 'role_id'];
      let contentTypes = ['application/json'];
      let accepts = ['text/html'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/servers/{serverid}/sessions/html/login', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSession_0 operation.
     * @callback module:api/HTMLApi~getSession_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/LoginStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Check if the user is logged in
     * Based on the browser/webserver session identifier, check if the user is logged in and return the associated username. This also returns additional information: the data for the login qr code and whether or not a loggin can be provoked directly from the server. Required permission: 'sessions'.
     * @param {String} serverid Base64 encoded server id
     * @param {String} xNonce Nonce to identify the browser/webserver session
     * @param {module:api/HTMLApi~getSession_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LoginStatus}
     */
    getSession_0(serverid, xNonce, callback) {
      let postBody = null;
      // verify the required parameter 'serverid' is set
      if (serverid === undefined || serverid === null) {
        throw new Error("Missing the required parameter 'serverid' when calling getSession_0");
      }
      // verify the required parameter 'xNonce' is set
      if (xNonce === undefined || xNonce === null) {
        throw new Error("Missing the required parameter 'xNonce' when calling getSession_0");
      }

      let pathParams = {
        'serverid': serverid
      };
      let queryParams = {
      };
      let headerParams = {
        'X-nonce': xNonce
      };
      let formParams = {
      };

      let authNames = ['api_key', 'role_id'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LoginStatus;
      return this.apiClient.callApi(
        '/servers/{serverid}/sessions/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the logout_0 operation.
     * @callback module:api/HTMLApi~logout_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Force a logout on the given session
     * Force a logout on the given session. Required permission: 'sessions'.
     * @param {String} serverid Base64 encoded server id
     * @param {String} xNonce Nonce to identify the browser/webserver session
     * @param {module:api/HTMLApi~logout_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    logout_0(serverid, xNonce, callback) {
      let postBody = null;
      // verify the required parameter 'serverid' is set
      if (serverid === undefined || serverid === null) {
        throw new Error("Missing the required parameter 'serverid' when calling logout_0");
      }
      // verify the required parameter 'xNonce' is set
      if (xNonce === undefined || xNonce === null) {
        throw new Error("Missing the required parameter 'xNonce' when calling logout_0");
      }

      let pathParams = {
        'serverid': serverid
      };
      let queryParams = {
      };
      let headerParams = {
        'X-nonce': xNonce
      };
      let formParams = {
      };

      let authNames = ['api_key', 'role_id'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/servers/{serverid}/sessions/logout', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
