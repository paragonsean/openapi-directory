/**
 * nextAuth API
 * API for the nextAuth server
 *
 * The version of the OpenAPI document: 2.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Account from '../model/Account';
import Accounts from '../model/Accounts';

/**
* Accounts service.
* @module api/AccountsApi
* @version 2.2
*/
export default class AccountsApi {

    /**
    * Constructs a new AccountsApi. 
    * @alias module:api/AccountsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the deleteAccount operation.
     * @callback module:api/AccountsApi~deleteAccountCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete specific account
     * Delete an account. Required permission: 'accounts'.
     * @param {String} serverid Base64 encoded server id
     * @param {Number} accountid Account id
     * @param {module:api/AccountsApi~deleteAccountCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteAccount(serverid, accountid, callback) {
      let postBody = null;
      // verify the required parameter 'serverid' is set
      if (serverid === undefined || serverid === null) {
        throw new Error("Missing the required parameter 'serverid' when calling deleteAccount");
      }
      // verify the required parameter 'accountid' is set
      if (accountid === undefined || accountid === null) {
        throw new Error("Missing the required parameter 'accountid' when calling deleteAccount");
      }

      let pathParams = {
        'serverid': serverid,
        'accountid': accountid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'role_id'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/servers/{serverid}/accounts/{accountid}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteUserAccounts_0 operation.
     * @callback module:api/AccountsApi~deleteUserAccounts_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete all accounts of a specific user
     * Delete all accounts corresponding to this user. The user itself is not deleted. Required permission: 'accounts' or 'users'.
     * @param {String} serverid Base64 encoded server id
     * @param {String} userid User name
     * @param {module:api/AccountsApi~deleteUserAccounts_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteUserAccounts_0(serverid, userid, callback) {
      let postBody = null;
      // verify the required parameter 'serverid' is set
      if (serverid === undefined || serverid === null) {
        throw new Error("Missing the required parameter 'serverid' when calling deleteUserAccounts_0");
      }
      // verify the required parameter 'userid' is set
      if (userid === undefined || userid === null) {
        throw new Error("Missing the required parameter 'userid' when calling deleteUserAccounts_0");
      }

      let pathParams = {
        'serverid': serverid,
        'userid': userid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'role_id'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/servers/{serverid}/users/{userid}/accounts', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAccount operation.
     * @callback module:api/AccountsApi~getAccountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Account} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get specific account
     * Returns the account. Required permission: 'sessions' or 'accounts'.
     * @param {String} serverid Base64 encoded server id
     * @param {Number} accountid Account id
     * @param {module:api/AccountsApi~getAccountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Account}
     */
    getAccount(serverid, accountid, callback) {
      let postBody = null;
      // verify the required parameter 'serverid' is set
      if (serverid === undefined || serverid === null) {
        throw new Error("Missing the required parameter 'serverid' when calling getAccount");
      }
      // verify the required parameter 'accountid' is set
      if (accountid === undefined || accountid === null) {
        throw new Error("Missing the required parameter 'accountid' when calling getAccount");
      }

      let pathParams = {
        'serverid': serverid,
        'accountid': accountid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'role_id'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Account;
      return this.apiClient.callApi(
        '/servers/{serverid}/accounts/{accountid}/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllAccounts operation.
     * @callback module:api/AccountsApi~getAllAccountsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Accounts} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all accounts
     * Returns all account. Required permission 'accounts'.
     * @param {String} serverid Base64 encoded server id
     * @param {Object} opts Optional parameters
     * @param {String} [filter] Filter users based on an attribute. Takes the format *attributename=attributevalue*. You can filter for multiple values at once, e.g. *group=in:group1,group2*
     * @param {Number} [limit] Limit the number of results
     * @param {Number} [marker] Offset in the result list
     * @param {String} [sort] Sort the results by column. You can also specify ascending (default if not specified) or descending, e.g., *column:asc* . You can also sort by multiple columns, e.g., *column1:desc,column2:asc*
     * @param {module:api/AccountsApi~getAllAccountsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Accounts}
     */
    getAllAccounts(serverid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'serverid' is set
      if (serverid === undefined || serverid === null) {
        throw new Error("Missing the required parameter 'serverid' when calling getAllAccounts");
      }

      let pathParams = {
        'serverid': serverid
      };
      let queryParams = {
        'filter': opts['filter'],
        'limit': opts['limit'],
        'marker': opts['marker'],
        'sort': opts['sort']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'role_id'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Accounts;
      return this.apiClient.callApi(
        '/servers/{serverid}/accounts/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getUser_0 operation.
     * @callback module:api/AccountsApi~getUser_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/Accounts} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all accounts of a specific user
     * Returns an array containing all accounts corresponding to this user. Required permission: 'sessions' or 'users'.
     * @param {String} serverid Base64 encoded server id
     * @param {String} userid User name
     * @param {Object} opts Optional parameters
     * @param {Number} [limit] Limit the number of results
     * @param {Number} [marker] Offset in the result list
     * @param {String} [sort] Sort the results by column. You can also specify ascending (default if not specified) or descending, e.g., *column:asc* . You can also sort by multiple columns, e.g., *column1:desc,column2:asc*
     * @param {module:api/AccountsApi~getUser_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Accounts}
     */
    getUser_0(serverid, userid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'serverid' is set
      if (serverid === undefined || serverid === null) {
        throw new Error("Missing the required parameter 'serverid' when calling getUser_0");
      }
      // verify the required parameter 'userid' is set
      if (userid === undefined || userid === null) {
        throw new Error("Missing the required parameter 'userid' when calling getUser_0");
      }

      let pathParams = {
        'serverid': serverid,
        'userid': userid
      };
      let queryParams = {
        'limit': opts['limit'],
        'marker': opts['marker'],
        'sort': opts['sort']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'role_id'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Accounts;
      return this.apiClient.callApi(
        '/servers/{serverid}/users/{userid}/accounts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateAccount operation.
     * @callback module:api/AccountsApi~updateAccountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Account} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update specific account
     * Update an account. The only available change is (un)blocking the account. Required permission: 'accounts'. 
     * @param {String} serverid Base64 encoded server id
     * @param {Number} accountid Account id
     * @param {Boolean} blocked True if the account is blocked
     * @param {module:api/AccountsApi~updateAccountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Account}
     */
    updateAccount(serverid, accountid, blocked, callback) {
      let postBody = null;
      // verify the required parameter 'serverid' is set
      if (serverid === undefined || serverid === null) {
        throw new Error("Missing the required parameter 'serverid' when calling updateAccount");
      }
      // verify the required parameter 'accountid' is set
      if (accountid === undefined || accountid === null) {
        throw new Error("Missing the required parameter 'accountid' when calling updateAccount");
      }
      // verify the required parameter 'blocked' is set
      if (blocked === undefined || blocked === null) {
        throw new Error("Missing the required parameter 'blocked' when calling updateAccount");
      }

      let pathParams = {
        'serverid': serverid,
        'accountid': accountid
      };
      let queryParams = {
        'blocked': blocked
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'role_id'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Account;
      return this.apiClient.callApi(
        '/servers/{serverid}/accounts/{accountid}/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateAccountUser operation.
     * @callback module:api/AccountsApi~updateAccountUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Account} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update user of the given account.
     * Update the user of the given account. Required permission: 'accounts'.
     * @param {String} serverid Base64 encoded server id
     * @param {Number} accountid Account id
     * @param {String} userid User name
     * @param {module:api/AccountsApi~updateAccountUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Account}
     */
    updateAccountUser(serverid, accountid, userid, callback) {
      let postBody = null;
      // verify the required parameter 'serverid' is set
      if (serverid === undefined || serverid === null) {
        throw new Error("Missing the required parameter 'serverid' when calling updateAccountUser");
      }
      // verify the required parameter 'accountid' is set
      if (accountid === undefined || accountid === null) {
        throw new Error("Missing the required parameter 'accountid' when calling updateAccountUser");
      }
      // verify the required parameter 'userid' is set
      if (userid === undefined || userid === null) {
        throw new Error("Missing the required parameter 'userid' when calling updateAccountUser");
      }

      let pathParams = {
        'serverid': serverid,
        'accountid': accountid
      };
      let queryParams = {
        'userid': userid
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'role_id'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Account;
      return this.apiClient.callApi(
        '/servers/{serverid}/accounts/{accountid}/user', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
