/**
 * nextAuth API
 * API for the nextAuth server
 *
 * The version of the OpenAPI document: 2.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ApiKey from '../model/ApiKey';
import ApiKeys from '../model/ApiKeys';
import GetOrCreateUserRole200Response from '../model/GetOrCreateUserRole200Response';
import Permissions from '../model/Permissions';
import Role from '../model/Role';

/**
* Management service.
* @module api/ManagementApi
* @version 2.2
*/
export default class ManagementApi {

    /**
    * Constructs a new ManagementApi. 
    * @alias module:api/ManagementApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createApiKey operation.
     * @callback module:api/ManagementApi~createApiKeyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiKey} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new API key.
     * Create a new API key. Required permission: global 'servers'.
     * @param {String} description Description for the new role
     * @param {module:api/ManagementApi~createApiKeyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiKey}
     */
    createApiKey(description, callback) {
      let postBody = null;
      // verify the required parameter 'description' is set
      if (description === undefined || description === null) {
        throw new Error("Missing the required parameter 'description' when calling createApiKey");
      }

      let pathParams = {
      };
      let queryParams = {
        'description': description
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'role_id'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ApiKey;
      return this.apiClient.callApi(
        '/apikeys/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllPermissions operation.
     * @callback module:api/ManagementApi~getAllPermissionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Permissions} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all permissions for the specified server.
     * Returns all permissions. Required permission: 'servers'.
     * @param {String} serverid Base64 encoded server id
     * @param {module:api/ManagementApi~getAllPermissionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Permissions}
     */
    getAllPermissions(serverid, callback) {
      let postBody = null;
      // verify the required parameter 'serverid' is set
      if (serverid === undefined || serverid === null) {
        throw new Error("Missing the required parameter 'serverid' when calling getAllPermissions");
      }

      let pathParams = {
        'serverid': serverid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'role_id'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Permissions;
      return this.apiClient.callApi(
        '/servers/{serverid}/permissions/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getApiKeys operation.
     * @callback module:api/ManagementApi~getApiKeysCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiKeys} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all API keys.
     * Get all API keys generated by the current role. Required permission: global 'servers'.
     * @param {module:api/ManagementApi~getApiKeysCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiKeys}
     */
    getApiKeys(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'role_id'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ApiKeys;
      return this.apiClient.callApi(
        '/apikeys/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrCreateUserRole operation.
     * @callback module:api/ManagementApi~getOrCreateUserRoleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetOrCreateUserRole200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get or create a role for a specific user.
     * Get or create a role for a specific user. Required permission: 'users'.
     * @param {String} serverid Base64 encoded server id
     * @param {String} userid User name
     * @param {module:api/ManagementApi~getOrCreateUserRoleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetOrCreateUserRole200Response}
     */
    getOrCreateUserRole(serverid, userid, callback) {
      let postBody = null;
      // verify the required parameter 'serverid' is set
      if (serverid === undefined || serverid === null) {
        throw new Error("Missing the required parameter 'serverid' when calling getOrCreateUserRole");
      }
      // verify the required parameter 'userid' is set
      if (userid === undefined || userid === null) {
        throw new Error("Missing the required parameter 'userid' when calling getOrCreateUserRole");
      }

      let pathParams = {
        'serverid': serverid,
        'userid': userid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'role_id'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetOrCreateUserRole200Response;
      return this.apiClient.callApi(
        '/servers/{serverid}/users/{userid}/role/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPermissions operation.
     * @callback module:api/ManagementApi~getPermissionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Permissions} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all permissions for the specified server and role.
     * Returns all permissions. Required permission: 'servers'.
     * @param {String} serverid Base64 encoded server id
     * @param {String} roleid Base64 encoded role id
     * @param {module:api/ManagementApi~getPermissionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Permissions}
     */
    getPermissions(serverid, roleid, callback) {
      let postBody = null;
      // verify the required parameter 'serverid' is set
      if (serverid === undefined || serverid === null) {
        throw new Error("Missing the required parameter 'serverid' when calling getPermissions");
      }
      // verify the required parameter 'roleid' is set
      if (roleid === undefined || roleid === null) {
        throw new Error("Missing the required parameter 'roleid' when calling getPermissions");
      }

      let pathParams = {
        'serverid': serverid,
        'roleid': roleid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'role_id'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Permissions;
      return this.apiClient.callApi(
        '/servers/{serverid}/permissions/{roleid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getUserRole operation.
     * @callback module:api/ManagementApi~getUserRoleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Role} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get role for a specific user.
     * Get role for a specific user. Required permission: 'users'.
     * @param {String} serverid Base64 encoded server id
     * @param {String} userid User name
     * @param {module:api/ManagementApi~getUserRoleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Role}
     */
    getUserRole(serverid, userid, callback) {
      let postBody = null;
      // verify the required parameter 'serverid' is set
      if (serverid === undefined || serverid === null) {
        throw new Error("Missing the required parameter 'serverid' when calling getUserRole");
      }
      // verify the required parameter 'userid' is set
      if (userid === undefined || userid === null) {
        throw new Error("Missing the required parameter 'userid' when calling getUserRole");
      }

      let pathParams = {
        'serverid': serverid,
        'userid': userid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'role_id'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Role;
      return this.apiClient.callApi(
        '/servers/{serverid}/users/{userid}/role/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the grantPermissions operation.
     * @callback module:api/ManagementApi~grantPermissionsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Set new permissions for the specified role on a server
     * Set new permissions for the specified role on a server. This overwrites any existing permissions on this server for the specified role. Required permission: 'root'.
     * @param {String} serverid Base64 encoded server id
     * @param {String} roleid Base64 encoded role id
     * @param {Array.<String>} permissions Array of new permissions
     * @param {module:api/ManagementApi~grantPermissionsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    grantPermissions(serverid, roleid, permissions, callback) {
      let postBody = permissions;
      // verify the required parameter 'serverid' is set
      if (serverid === undefined || serverid === null) {
        throw new Error("Missing the required parameter 'serverid' when calling grantPermissions");
      }
      // verify the required parameter 'roleid' is set
      if (roleid === undefined || roleid === null) {
        throw new Error("Missing the required parameter 'roleid' when calling grantPermissions");
      }
      // verify the required parameter 'permissions' is set
      if (permissions === undefined || permissions === null) {
        throw new Error("Missing the required parameter 'permissions' when calling grantPermissions");
      }

      let pathParams = {
        'serverid': serverid,
        'roleid': roleid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'role_id'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/servers/{serverid}/permissions/{roleid}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the revokePermissions operation.
     * @callback module:api/ManagementApi~revokePermissionsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Revoke all permissions for the specified server and role.
     * Revoke all permissions for the specified server and role. Required permission: 'root'.
     * @param {String} serverid Base64 encoded server id
     * @param {String} roleid Base64 encoded role id
     * @param {module:api/ManagementApi~revokePermissionsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    revokePermissions(serverid, roleid, callback) {
      let postBody = null;
      // verify the required parameter 'serverid' is set
      if (serverid === undefined || serverid === null) {
        throw new Error("Missing the required parameter 'serverid' when calling revokePermissions");
      }
      // verify the required parameter 'roleid' is set
      if (roleid === undefined || roleid === null) {
        throw new Error("Missing the required parameter 'roleid' when calling revokePermissions");
      }

      let pathParams = {
        'serverid': serverid,
        'roleid': roleid
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key', 'role_id'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/servers/{serverid}/permissions/{roleid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
