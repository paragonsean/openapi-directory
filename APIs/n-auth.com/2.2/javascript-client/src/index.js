/**
 * nextAuth API
 * API for the nextAuth server
 *
 * The version of the OpenAPI document: 2.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from './ApiClient';
import Account from './model/Account';
import Accounts from './model/Accounts';
import ApiKey from './model/ApiKey';
import ApiKeys from './model/ApiKeys';
import GetOrCreateUserRole200Response from './model/GetOrCreateUserRole200Response';
import HtmlFooterBody from './model/HtmlFooterBody';
import LoginStatus from './model/LoginStatus';
import Permission from './model/Permission';
import Permissions from './model/Permissions';
import Role from './model/Role';
import Server from './model/Server';
import ServerSession from './model/ServerSession';
import Servers from './model/Servers';
import SessionInfo from './model/SessionInfo';
import Transaction from './model/Transaction';
import TransactionId from './model/TransactionId';
import TransactionResult from './model/TransactionResult';
import User from './model/User';
import UserContext from './model/UserContext';
import Users from './model/Users';
import AccountsApi from './api/AccountsApi';
import GlobalApi from './api/GlobalApi';
import HTMLApi from './api/HTMLApi';
import ManagementApi from './api/ManagementApi';
import RegistrationApi from './api/RegistrationApi';
import ServersApi from './api/ServersApi';
import SessionsApi from './api/SessionsApi';
import TransactionsApi from './api/TransactionsApi';
import UsersApi from './api/UsersApi';


/**
* API for the nextAuth server.<br>
* The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
* <p>
* An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
* <pre>
* var NextAuthApi = require('index'); // See note below*.
* var xxxSvc = new NextAuthApi.XxxApi(); // Allocate the API class we're going to use.
* var yyyModel = new NextAuthApi.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
* and put the application logic within the callback function.</em>
* </p>
* <p>
* A non-AMD browser application (discouraged) might do something like this:
* <pre>
* var xxxSvc = new NextAuthApi.XxxApi(); // Allocate the API class we're going to use.
* var yyy = new NextAuthApi.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* </p>
* @module index
* @version 2.2
*/
export {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient,

    /**
     * The Account model constructor.
     * @property {module:model/Account}
     */
    Account,

    /**
     * The Accounts model constructor.
     * @property {module:model/Accounts}
     */
    Accounts,

    /**
     * The ApiKey model constructor.
     * @property {module:model/ApiKey}
     */
    ApiKey,

    /**
     * The ApiKeys model constructor.
     * @property {module:model/ApiKeys}
     */
    ApiKeys,

    /**
     * The GetOrCreateUserRole200Response model constructor.
     * @property {module:model/GetOrCreateUserRole200Response}
     */
    GetOrCreateUserRole200Response,

    /**
     * The HtmlFooterBody model constructor.
     * @property {module:model/HtmlFooterBody}
     */
    HtmlFooterBody,

    /**
     * The LoginStatus model constructor.
     * @property {module:model/LoginStatus}
     */
    LoginStatus,

    /**
     * The Permission model constructor.
     * @property {module:model/Permission}
     */
    Permission,

    /**
     * The Permissions model constructor.
     * @property {module:model/Permissions}
     */
    Permissions,

    /**
     * The Role model constructor.
     * @property {module:model/Role}
     */
    Role,

    /**
     * The Server model constructor.
     * @property {module:model/Server}
     */
    Server,

    /**
     * The ServerSession model constructor.
     * @property {module:model/ServerSession}
     */
    ServerSession,

    /**
     * The Servers model constructor.
     * @property {module:model/Servers}
     */
    Servers,

    /**
     * The SessionInfo model constructor.
     * @property {module:model/SessionInfo}
     */
    SessionInfo,

    /**
     * The Transaction model constructor.
     * @property {module:model/Transaction}
     */
    Transaction,

    /**
     * The TransactionId model constructor.
     * @property {module:model/TransactionId}
     */
    TransactionId,

    /**
     * The TransactionResult model constructor.
     * @property {module:model/TransactionResult}
     */
    TransactionResult,

    /**
     * The User model constructor.
     * @property {module:model/User}
     */
    User,

    /**
     * The UserContext model constructor.
     * @property {module:model/UserContext}
     */
    UserContext,

    /**
     * The Users model constructor.
     * @property {module:model/Users}
     */
    Users,

    /**
    * The AccountsApi service constructor.
    * @property {module:api/AccountsApi}
    */
    AccountsApi,

    /**
    * The GlobalApi service constructor.
    * @property {module:api/GlobalApi}
    */
    GlobalApi,

    /**
    * The HTMLApi service constructor.
    * @property {module:api/HTMLApi}
    */
    HTMLApi,

    /**
    * The ManagementApi service constructor.
    * @property {module:api/ManagementApi}
    */
    ManagementApi,

    /**
    * The RegistrationApi service constructor.
    * @property {module:api/RegistrationApi}
    */
    RegistrationApi,

    /**
    * The ServersApi service constructor.
    * @property {module:api/ServersApi}
    */
    ServersApi,

    /**
    * The SessionsApi service constructor.
    * @property {module:api/SessionsApi}
    */
    SessionsApi,

    /**
    * The TransactionsApi service constructor.
    * @property {module:api/TransactionsApi}
    */
    TransactionsApi,

    /**
    * The UsersApi service constructor.
    * @property {module:api/UsersApi}
    */
    UsersApi
};
