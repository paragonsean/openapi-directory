# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class SessionInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, info: object=None, ip: str=None, logo: str=None, useragent: str=None):
        """SessionInfo - a model defined in OpenAPI

        :param info: The info of this SessionInfo.
        :param ip: The ip of this SessionInfo.
        :param logo: The logo of this SessionInfo.
        :param useragent: The useragent of this SessionInfo.
        """
        self.openapi_types = {
            'info': object,
            'ip': str,
            'logo': str,
            'useragent': str
        }

        self.attribute_map = {
            'info': 'info',
            'ip': 'ip',
            'logo': 'logo',
            'useragent': 'useragent'
        }

        self._info = info
        self._ip = ip
        self._logo = logo
        self._useragent = useragent

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SessionInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SessionInfo of this SessionInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def info(self):
        """Gets the info of this SessionInfo.

        Information to display to user

        :return: The info of this SessionInfo.
        :rtype: object
        """
        return self._info

    @info.setter
    def info(self, info):
        """Sets the info of this SessionInfo.

        Information to display to user

        :param info: The info of this SessionInfo.
        :type info: object
        """

        self._info = info

    @property
    def ip(self):
        """Gets the ip of this SessionInfo.

        IP address

        :return: The ip of this SessionInfo.
        :rtype: str
        """
        return self._ip

    @ip.setter
    def ip(self, ip):
        """Sets the ip of this SessionInfo.

        IP address

        :param ip: The ip of this SessionInfo.
        :type ip: str
        """

        self._ip = ip

    @property
    def logo(self):
        """Gets the logo of this SessionInfo.

        Base64 encoded logo

        :return: The logo of this SessionInfo.
        :rtype: str
        """
        return self._logo

    @logo.setter
    def logo(self, logo):
        """Sets the logo of this SessionInfo.

        Base64 encoded logo

        :param logo: The logo of this SessionInfo.
        :type logo: str
        """
        if logo is not None and not re.search(r'^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$', logo):
            raise ValueError("Invalid value for `logo`, must be a follow pattern or equal to `/^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/`")

        self._logo = logo

    @property
    def useragent(self):
        """Gets the useragent of this SessionInfo.

        User agent of the browser

        :return: The useragent of this SessionInfo.
        :rtype: str
        """
        return self._useragent

    @useragent.setter
    def useragent(self, useragent):
        """Sets the useragent of this SessionInfo.

        User agent of the browser

        :param useragent: The useragent of this SessionInfo.
        :type useragent: str
        """

        self._useragent = useragent
