# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.api_key import ApiKey
from openapi_server import util


class ApiKeys(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, apikeys: List[ApiKey]=None):
        """ApiKeys - a model defined in OpenAPI

        :param apikeys: The apikeys of this ApiKeys.
        """
        self.openapi_types = {
            'apikeys': List[ApiKey]
        }

        self.attribute_map = {
            'apikeys': 'apikeys'
        }

        self._apikeys = apikeys

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ApiKeys':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ApiKeys of this ApiKeys.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def apikeys(self):
        """Gets the apikeys of this ApiKeys.

        Array of apikeys

        :return: The apikeys of this ApiKeys.
        :rtype: List[ApiKey]
        """
        return self._apikeys

    @apikeys.setter
    def apikeys(self, apikeys):
        """Sets the apikeys of this ApiKeys.

        Array of apikeys

        :param apikeys: The apikeys of this ApiKeys.
        :type apikeys: List[ApiKey]
        """
        if apikeys is None:
            raise ValueError("Invalid value for `apikeys`, must not be `None`")

        self._apikeys = apikeys
