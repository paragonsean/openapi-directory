# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Server(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_count: int=None, appandroid: str=None, appios: str=None, appname: str=None, appurl: str=None, last_login: int=None, logo: str=None, owner: int=None, pin_timeout: int=None, pin_trans_timeout: int=None, ping_time: int=None, server_flags: List[str]=None, server_name: str=None, serverid: str=None, serverpk: str=None, siteurl: str=None, wsurl: str=None):
        """Server - a model defined in OpenAPI

        :param account_count: The account_count of this Server.
        :param appandroid: The appandroid of this Server.
        :param appios: The appios of this Server.
        :param appname: The appname of this Server.
        :param appurl: The appurl of this Server.
        :param last_login: The last_login of this Server.
        :param logo: The logo of this Server.
        :param owner: The owner of this Server.
        :param pin_timeout: The pin_timeout of this Server.
        :param pin_trans_timeout: The pin_trans_timeout of this Server.
        :param ping_time: The ping_time of this Server.
        :param server_flags: The server_flags of this Server.
        :param server_name: The server_name of this Server.
        :param serverid: The serverid of this Server.
        :param serverpk: The serverpk of this Server.
        :param siteurl: The siteurl of this Server.
        :param wsurl: The wsurl of this Server.
        """
        self.openapi_types = {
            'account_count': int,
            'appandroid': str,
            'appios': str,
            'appname': str,
            'appurl': str,
            'last_login': int,
            'logo': str,
            'owner': int,
            'pin_timeout': int,
            'pin_trans_timeout': int,
            'ping_time': int,
            'server_flags': List[str],
            'server_name': str,
            'serverid': str,
            'serverpk': str,
            'siteurl': str,
            'wsurl': str
        }

        self.attribute_map = {
            'account_count': 'accountCount',
            'appandroid': 'appandroid',
            'appios': 'appios',
            'appname': 'appname',
            'appurl': 'appurl',
            'last_login': 'lastLogin',
            'logo': 'logo',
            'owner': 'owner',
            'pin_timeout': 'pinTimeout',
            'pin_trans_timeout': 'pinTransTimeout',
            'ping_time': 'pingTime',
            'server_flags': 'serverFlags',
            'server_name': 'serverName',
            'serverid': 'serverid',
            'serverpk': 'serverpk',
            'siteurl': 'siteurl',
            'wsurl': 'wsurl'
        }

        self._account_count = account_count
        self._appandroid = appandroid
        self._appios = appios
        self._appname = appname
        self._appurl = appurl
        self._last_login = last_login
        self._logo = logo
        self._owner = owner
        self._pin_timeout = pin_timeout
        self._pin_trans_timeout = pin_trans_timeout
        self._ping_time = ping_time
        self._server_flags = server_flags
        self._server_name = server_name
        self._serverid = serverid
        self._serverpk = serverpk
        self._siteurl = siteurl
        self._wsurl = wsurl

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Server':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Server of this Server.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_count(self):
        """Gets the account_count of this Server.

        Number of accounts registered with this server

        :return: The account_count of this Server.
        :rtype: int
        """
        return self._account_count

    @account_count.setter
    def account_count(self, account_count):
        """Sets the account_count of this Server.

        Number of accounts registered with this server

        :param account_count: The account_count of this Server.
        :type account_count: int
        """

        self._account_count = account_count

    @property
    def appandroid(self):
        """Gets the appandroid of this Server.

        URL of the app in Google Play

        :return: The appandroid of this Server.
        :rtype: str
        """
        return self._appandroid

    @appandroid.setter
    def appandroid(self, appandroid):
        """Sets the appandroid of this Server.

        URL of the app in Google Play

        :param appandroid: The appandroid of this Server.
        :type appandroid: str
        """

        self._appandroid = appandroid

    @property
    def appios(self):
        """Gets the appios of this Server.

        URL of the app in the App Store

        :return: The appios of this Server.
        :rtype: str
        """
        return self._appios

    @appios.setter
    def appios(self, appios):
        """Sets the appios of this Server.

        URL of the app in the App Store

        :param appios: The appios of this Server.
        :type appios: str
        """

        self._appios = appios

    @property
    def appname(self):
        """Gets the appname of this Server.

        name of the app

        :return: The appname of this Server.
        :rtype: str
        """
        return self._appname

    @appname.setter
    def appname(self, appname):
        """Sets the appname of this Server.

        name of the app

        :param appname: The appname of this Server.
        :type appname: str
        """

        self._appname = appname

    @property
    def appurl(self):
        """Gets the appurl of this Server.

        URL (prefix) to launch the app

        :return: The appurl of this Server.
        :rtype: str
        """
        return self._appurl

    @appurl.setter
    def appurl(self, appurl):
        """Sets the appurl of this Server.

        URL (prefix) to launch the app

        :param appurl: The appurl of this Server.
        :type appurl: str
        """

        self._appurl = appurl

    @property
    def last_login(self):
        """Gets the last_login of this Server.

        Last login on this server

        :return: The last_login of this Server.
        :rtype: int
        """
        return self._last_login

    @last_login.setter
    def last_login(self, last_login):
        """Sets the last_login of this Server.

        Last login on this server

        :param last_login: The last_login of this Server.
        :type last_login: int
        """

        self._last_login = last_login

    @property
    def logo(self):
        """Gets the logo of this Server.

        Base 64 encoded logo

        :return: The logo of this Server.
        :rtype: str
        """
        return self._logo

    @logo.setter
    def logo(self, logo):
        """Sets the logo of this Server.

        Base 64 encoded logo

        :param logo: The logo of this Server.
        :type logo: str
        """
        if logo is None:
            raise ValueError("Invalid value for `logo`, must not be `None`")

        self._logo = logo

    @property
    def owner(self):
        """Gets the owner of this Server.

        Owner id

        :return: The owner of this Server.
        :rtype: int
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this Server.

        Owner id

        :param owner: The owner of this Server.
        :type owner: int
        """

        self._owner = owner

    @property
    def pin_timeout(self):
        """Gets the pin_timeout of this Server.

        Time (minutes) since the last time the user entered his PIN, that the user is not requested a PIN at login. -1 means that the user is never asked for a PIN before logging in, 0 means that the user is asked every time he wants to login

        :return: The pin_timeout of this Server.
        :rtype: int
        """
        return self._pin_timeout

    @pin_timeout.setter
    def pin_timeout(self, pin_timeout):
        """Sets the pin_timeout of this Server.

        Time (minutes) since the last time the user entered his PIN, that the user is not requested a PIN at login. -1 means that the user is never asked for a PIN before logging in, 0 means that the user is asked every time he wants to login

        :param pin_timeout: The pin_timeout of this Server.
        :type pin_timeout: int
        """
        if pin_timeout is None:
            raise ValueError("Invalid value for `pin_timeout`, must not be `None`")

        self._pin_timeout = pin_timeout

    @property
    def pin_trans_timeout(self):
        """Gets the pin_trans_timeout of this Server.

        Time (minutes) since the last time the user entered his PIN, that the user is not requested a PIN at transaction approval. -1 means that the user is never asked for a PIN before approving a transaction, 0 means that the user is asked every time he wants to approve a transaction

        :return: The pin_trans_timeout of this Server.
        :rtype: int
        """
        return self._pin_trans_timeout

    @pin_trans_timeout.setter
    def pin_trans_timeout(self, pin_trans_timeout):
        """Sets the pin_trans_timeout of this Server.

        Time (minutes) since the last time the user entered his PIN, that the user is not requested a PIN at transaction approval. -1 means that the user is never asked for a PIN before approving a transaction, 0 means that the user is asked every time he wants to approve a transaction

        :param pin_trans_timeout: The pin_trans_timeout of this Server.
        :type pin_trans_timeout: int
        """
        if pin_trans_timeout is None:
            raise ValueError("Invalid value for `pin_trans_timeout`, must not be `None`")

        self._pin_trans_timeout = pin_trans_timeout

    @property
    def ping_time(self):
        """Gets the ping_time of this Server.

        Time (seconds) that the nextAuth app has before it needs to reply to a ping request from the nextAuth server (continuous authentication)

        :return: The ping_time of this Server.
        :rtype: int
        """
        return self._ping_time

    @ping_time.setter
    def ping_time(self, ping_time):
        """Sets the ping_time of this Server.

        Time (seconds) that the nextAuth app has before it needs to reply to a ping request from the nextAuth server (continuous authentication)

        :param ping_time: The ping_time of this Server.
        :type ping_time: int
        """
        if ping_time is None:
            raise ValueError("Invalid value for `ping_time`, must not be `None`")

        self._ping_time = ping_time

    @property
    def server_flags(self):
        """Gets the server_flags of this Server.

        Server flags

        :return: The server_flags of this Server.
        :rtype: List[str]
        """
        return self._server_flags

    @server_flags.setter
    def server_flags(self, server_flags):
        """Sets the server_flags of this Server.

        Server flags

        :param server_flags: The server_flags of this Server.
        :type server_flags: List[str]
        """
        if server_flags is None:
            raise ValueError("Invalid value for `server_flags`, must not be `None`")

        self._server_flags = server_flags

    @property
    def server_name(self):
        """Gets the server_name of this Server.

        Server name

        :return: The server_name of this Server.
        :rtype: str
        """
        return self._server_name

    @server_name.setter
    def server_name(self, server_name):
        """Sets the server_name of this Server.

        Server name

        :param server_name: The server_name of this Server.
        :type server_name: str
        """
        if server_name is None:
            raise ValueError("Invalid value for `server_name`, must not be `None`")

        self._server_name = server_name

    @property
    def serverid(self):
        """Gets the serverid of this Server.

        Base64 encoded id of the nextAuth server

        :return: The serverid of this Server.
        :rtype: str
        """
        return self._serverid

    @serverid.setter
    def serverid(self, serverid):
        """Sets the serverid of this Server.

        Base64 encoded id of the nextAuth server

        :param serverid: The serverid of this Server.
        :type serverid: str
        """
        if serverid is None:
            raise ValueError("Invalid value for `serverid`, must not be `None`")

        self._serverid = serverid

    @property
    def serverpk(self):
        """Gets the serverpk of this Server.

        Base64 encoded public key of the nextAuth server

        :return: The serverpk of this Server.
        :rtype: str
        """
        return self._serverpk

    @serverpk.setter
    def serverpk(self, serverpk):
        """Sets the serverpk of this Server.

        Base64 encoded public key of the nextAuth server

        :param serverpk: The serverpk of this Server.
        :type serverpk: str
        """
        if serverpk is None:
            raise ValueError("Invalid value for `serverpk`, must not be `None`")

        self._serverpk = serverpk

    @property
    def siteurl(self):
        """Gets the siteurl of this Server.

        URL of the main website

        :return: The siteurl of this Server.
        :rtype: str
        """
        return self._siteurl

    @siteurl.setter
    def siteurl(self, siteurl):
        """Sets the siteurl of this Server.

        URL of the main website

        :param siteurl: The siteurl of this Server.
        :type siteurl: str
        """

        self._siteurl = siteurl

    @property
    def wsurl(self):
        """Gets the wsurl of this Server.

        Websocket URL

        :return: The wsurl of this Server.
        :rtype: str
        """
        return self._wsurl

    @wsurl.setter
    def wsurl(self, wsurl):
        """Sets the wsurl of this Server.

        Websocket URL

        :param wsurl: The wsurl of this Server.
        :type wsurl: str
        """

        self._wsurl = wsurl
