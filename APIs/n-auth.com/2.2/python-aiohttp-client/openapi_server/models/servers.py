# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.server import Server
from openapi_server import util


class Servers(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, servers: List[Server]=None, totalnumber: int=None):
        """Servers - a model defined in OpenAPI

        :param servers: The servers of this Servers.
        :param totalnumber: The totalnumber of this Servers.
        """
        self.openapi_types = {
            'servers': List[Server],
            'totalnumber': int
        }

        self.attribute_map = {
            'servers': 'servers',
            'totalnumber': 'totalnumber'
        }

        self._servers = servers
        self._totalnumber = totalnumber

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Servers':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Servers of this Servers.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def servers(self):
        """Gets the servers of this Servers.

        Array of servers

        :return: The servers of this Servers.
        :rtype: List[Server]
        """
        return self._servers

    @servers.setter
    def servers(self, servers):
        """Sets the servers of this Servers.

        Array of servers

        :param servers: The servers of this Servers.
        :type servers: List[Server]
        """
        if servers is None:
            raise ValueError("Invalid value for `servers`, must not be `None`")

        self._servers = servers

    @property
    def totalnumber(self):
        """Gets the totalnumber of this Servers.

        total number of users

        :return: The totalnumber of this Servers.
        :rtype: int
        """
        return self._totalnumber

    @totalnumber.setter
    def totalnumber(self, totalnumber):
        """Sets the totalnumber of this Servers.

        total number of users

        :param totalnumber: The totalnumber of this Servers.
        :type totalnumber: int
        """

        self._totalnumber = totalnumber
