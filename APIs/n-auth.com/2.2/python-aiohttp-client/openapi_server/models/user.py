# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class User(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, lastlogin: int=None, numberaccounts: int=None, userid: str=None):
        """User - a model defined in OpenAPI

        :param lastlogin: The lastlogin of this User.
        :param numberaccounts: The numberaccounts of this User.
        :param userid: The userid of this User.
        """
        self.openapi_types = {
            'lastlogin': int,
            'numberaccounts': int,
            'userid': str
        }

        self.attribute_map = {
            'lastlogin': 'lastlogin',
            'numberaccounts': 'numberaccounts',
            'userid': 'userid'
        }

        self._lastlogin = lastlogin
        self._numberaccounts = numberaccounts
        self._userid = userid

    @classmethod
    def from_dict(cls, dikt: dict) -> 'User':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The User of this User.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def lastlogin(self):
        """Gets the lastlogin of this User.

        (aggregated) last login over all accounts

        :return: The lastlogin of this User.
        :rtype: int
        """
        return self._lastlogin

    @lastlogin.setter
    def lastlogin(self, lastlogin):
        """Sets the lastlogin of this User.

        (aggregated) last login over all accounts

        :param lastlogin: The lastlogin of this User.
        :type lastlogin: int
        """

        self._lastlogin = lastlogin

    @property
    def numberaccounts(self):
        """Gets the numberaccounts of this User.

        (aggregated) number of accounts

        :return: The numberaccounts of this User.
        :rtype: int
        """
        return self._numberaccounts

    @numberaccounts.setter
    def numberaccounts(self, numberaccounts):
        """Sets the numberaccounts of this User.

        (aggregated) number of accounts

        :param numberaccounts: The numberaccounts of this User.
        :type numberaccounts: int
        """

        self._numberaccounts = numberaccounts

    @property
    def userid(self):
        """Gets the userid of this User.

        User name

        :return: The userid of this User.
        :rtype: str
        """
        return self._userid

    @userid.setter
    def userid(self, userid):
        """Sets the userid of this User.

        User name

        :param userid: The userid of this User.
        :type userid: str
        """
        if userid is None:
            raise ValueError("Invalid value for `userid`, must not be `None`")

        self._userid = userid
