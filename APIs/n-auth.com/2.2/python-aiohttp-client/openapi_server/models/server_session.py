# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ServerSession(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, serverid: str=None, sessionid: str=None):
        """ServerSession - a model defined in OpenAPI

        :param serverid: The serverid of this ServerSession.
        :param sessionid: The sessionid of this ServerSession.
        """
        self.openapi_types = {
            'serverid': str,
            'sessionid': str
        }

        self.attribute_map = {
            'serverid': 'serverid',
            'sessionid': 'sessionid'
        }

        self._serverid = serverid
        self._sessionid = sessionid

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ServerSession':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ServerSession of this ServerSession.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def serverid(self):
        """Gets the serverid of this ServerSession.

        Server Id

        :return: The serverid of this ServerSession.
        :rtype: str
        """
        return self._serverid

    @serverid.setter
    def serverid(self, serverid):
        """Sets the serverid of this ServerSession.

        Server Id

        :param serverid: The serverid of this ServerSession.
        :type serverid: str
        """
        if serverid is None:
            raise ValueError("Invalid value for `serverid`, must not be `None`")

        self._serverid = serverid

    @property
    def sessionid(self):
        """Gets the sessionid of this ServerSession.

        Base64 encoded nonce

        :return: The sessionid of this ServerSession.
        :rtype: str
        """
        return self._sessionid

    @sessionid.setter
    def sessionid(self, sessionid):
        """Sets the sessionid of this ServerSession.

        Base64 encoded nonce

        :param sessionid: The sessionid of this ServerSession.
        :type sessionid: str
        """
        if sessionid is None:
            raise ValueError("Invalid value for `sessionid`, must not be `None`")

        self._sessionid = sessionid
