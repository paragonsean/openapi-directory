# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Permission(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, acl: str=None, role: str=None, server: str=None):
        """Permission - a model defined in OpenAPI

        :param acl: The acl of this Permission.
        :param role: The role of this Permission.
        :param server: The server of this Permission.
        """
        self.openapi_types = {
            'acl': str,
            'role': str,
            'server': str
        }

        self.attribute_map = {
            'acl': 'acl',
            'role': 'role',
            'server': 'server'
        }

        self._acl = acl
        self._role = role
        self._server = server

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Permission':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Permission of this Permission.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def acl(self):
        """Gets the acl of this Permission.

        Comma-seperated list of permissions

        :return: The acl of this Permission.
        :rtype: str
        """
        return self._acl

    @acl.setter
    def acl(self, acl):
        """Sets the acl of this Permission.

        Comma-seperated list of permissions

        :param acl: The acl of this Permission.
        :type acl: str
        """

        self._acl = acl

    @property
    def role(self):
        """Gets the role of this Permission.

        Role id

        :return: The role of this Permission.
        :rtype: str
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this Permission.

        Role id

        :param role: The role of this Permission.
        :type role: str
        """

        self._role = role

    @property
    def server(self):
        """Gets the server of this Permission.

        Base64 encoded server id

        :return: The server of this Permission.
        :rtype: str
        """
        return self._server

    @server.setter
    def server(self, server):
        """Sets the server of this Permission.

        Base64 encoded server id

        :param server: The server of this Permission.
        :type server: str
        """

        self._server = server
