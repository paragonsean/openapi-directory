# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.permission import Permission
from openapi_server import util


class Permissions(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, permissions: List[Permission]=None):
        """Permissions - a model defined in OpenAPI

        :param permissions: The permissions of this Permissions.
        """
        self.openapi_types = {
            'permissions': List[Permission]
        }

        self.attribute_map = {
            'permissions': 'permissions'
        }

        self._permissions = permissions

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Permissions':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Permissions of this Permissions.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def permissions(self):
        """Gets the permissions of this Permissions.

        Array of permissions

        :return: The permissions of this Permissions.
        :rtype: List[Permission]
        """
        return self._permissions

    @permissions.setter
    def permissions(self, permissions):
        """Sets the permissions of this Permissions.

        Array of permissions

        :param permissions: The permissions of this Permissions.
        :type permissions: List[Permission]
        """
        if permissions is None:
            raise ValueError("Invalid value for `permissions`, must not be `None`")

        self._permissions = permissions
