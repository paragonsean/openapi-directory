# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Account(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, blocked: bool=None, client_version: str=None, created: int=None, description: str=None, id: int=None, lastlogin: int=None, lastprovoke: int=None, userid: str=None):
        """Account - a model defined in OpenAPI

        :param blocked: The blocked of this Account.
        :param client_version: The client_version of this Account.
        :param created: The created of this Account.
        :param description: The description of this Account.
        :param id: The id of this Account.
        :param lastlogin: The lastlogin of this Account.
        :param lastprovoke: The lastprovoke of this Account.
        :param userid: The userid of this Account.
        """
        self.openapi_types = {
            'blocked': bool,
            'client_version': str,
            'created': int,
            'description': str,
            'id': int,
            'lastlogin': int,
            'lastprovoke': int,
            'userid': str
        }

        self.attribute_map = {
            'blocked': 'blocked',
            'client_version': 'clientVersion',
            'created': 'created',
            'description': 'description',
            'id': 'id',
            'lastlogin': 'lastlogin',
            'lastprovoke': 'lastprovoke',
            'userid': 'userid'
        }

        self._blocked = blocked
        self._client_version = client_version
        self._created = created
        self._description = description
        self._id = id
        self._lastlogin = lastlogin
        self._lastprovoke = lastprovoke
        self._userid = userid

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Account':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Account of this Account.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def blocked(self):
        """Gets the blocked of this Account.

        True if the account is blocked, false otherwise

        :return: The blocked of this Account.
        :rtype: bool
        """
        return self._blocked

    @blocked.setter
    def blocked(self, blocked):
        """Sets the blocked of this Account.

        True if the account is blocked, false otherwise

        :param blocked: The blocked of this Account.
        :type blocked: bool
        """

        self._blocked = blocked

    @property
    def client_version(self):
        """Gets the client_version of this Account.

        Version nextAuth client in the app

        :return: The client_version of this Account.
        :rtype: str
        """
        return self._client_version

    @client_version.setter
    def client_version(self, client_version):
        """Sets the client_version of this Account.

        Version nextAuth client in the app

        :param client_version: The client_version of this Account.
        :type client_version: str
        """

        self._client_version = client_version

    @property
    def created(self):
        """Gets the created of this Account.

        Timestamp of creation

        :return: The created of this Account.
        :rtype: int
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this Account.

        Timestamp of creation

        :param created: The created of this Account.
        :type created: int
        """

        self._created = created

    @property
    def description(self):
        """Gets the description of this Account.

        Description of the account (e.g. device name)

        :return: The description of this Account.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Account.

        Description of the account (e.g. device name)

        :param description: The description of this Account.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")

        self._description = description

    @property
    def id(self):
        """Gets the id of this Account.

        Account id

        :return: The id of this Account.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Account.

        Account id

        :param id: The id of this Account.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def lastlogin(self):
        """Gets the lastlogin of this Account.

        Timestamp of last login

        :return: The lastlogin of this Account.
        :rtype: int
        """
        return self._lastlogin

    @lastlogin.setter
    def lastlogin(self, lastlogin):
        """Sets the lastlogin of this Account.

        Timestamp of last login

        :param lastlogin: The lastlogin of this Account.
        :type lastlogin: int
        """

        self._lastlogin = lastlogin

    @property
    def lastprovoke(self):
        """Gets the lastprovoke of this Account.

        Timestamp of last provoke (push message)

        :return: The lastprovoke of this Account.
        :rtype: int
        """
        return self._lastprovoke

    @lastprovoke.setter
    def lastprovoke(self, lastprovoke):
        """Sets the lastprovoke of this Account.

        Timestamp of last provoke (push message)

        :param lastprovoke: The lastprovoke of this Account.
        :type lastprovoke: int
        """

        self._lastprovoke = lastprovoke

    @property
    def userid(self):
        """Gets the userid of this Account.

        User name

        :return: The userid of this Account.
        :rtype: str
        """
        return self._userid

    @userid.setter
    def userid(self, userid):
        """Sets the userid of this Account.

        User name

        :param userid: The userid of this Account.
        :type userid: str
        """

        self._userid = userid
