from typing import List, Dict
from aiohttp import web

from openapi_server.models.api_key import ApiKey
from openapi_server.models.api_keys import ApiKeys
from openapi_server.models.get_or_create_user_role200_response import GetOrCreateUserRole200Response
from openapi_server.models.permissions import Permissions
from openapi_server.models.role import Role
from openapi_server import util


async def create_api_key(request: web.Request, description) -> web.Response:
    """Create a new API key.

    Create a new API key. Required permission: global &#39;servers&#39;.

    :param description: Description for the new role
    :type description: str

    """
    return web.Response(status=200)


async def get_all_permissions(request: web.Request, serverid) -> web.Response:
    """Get all permissions for the specified server.

    Returns all permissions. Required permission: &#39;servers&#39;.

    :param serverid: Base64 encoded server id
    :type serverid: str

    """
    return web.Response(status=200)


async def get_api_keys(request: web.Request, ) -> web.Response:
    """Get all API keys.

    Get all API keys generated by the current role. Required permission: global &#39;servers&#39;.


    """
    return web.Response(status=200)


async def get_or_create_user_role(request: web.Request, serverid, userid) -> web.Response:
    """Get or create a role for a specific user.

    Get or create a role for a specific user. Required permission: &#39;users&#39;.

    :param serverid: Base64 encoded server id
    :type serverid: str
    :param userid: User name
    :type userid: str

    """
    return web.Response(status=200)


async def get_permissions(request: web.Request, serverid, roleid) -> web.Response:
    """Get all permissions for the specified server and role.

    Returns all permissions. Required permission: &#39;servers&#39;.

    :param serverid: Base64 encoded server id
    :type serverid: str
    :param roleid: Base64 encoded role id
    :type roleid: str

    """
    return web.Response(status=200)


async def get_user_role(request: web.Request, serverid, userid) -> web.Response:
    """Get role for a specific user.

    Get role for a specific user. Required permission: &#39;users&#39;.

    :param serverid: Base64 encoded server id
    :type serverid: str
    :param userid: User name
    :type userid: str

    """
    return web.Response(status=200)


async def grant_permissions(request: web.Request, serverid, roleid, permissions) -> web.Response:
    """Set new permissions for the specified role on a server

    Set new permissions for the specified role on a server. This overwrites any existing permissions on this server for the specified role. Required permission: &#39;root&#39;.

    :param serverid: Base64 encoded server id
    :type serverid: str
    :param roleid: Base64 encoded role id
    :type roleid: str
    :param permissions: Array of new permissions
    :type permissions: List[str]

    """
    return web.Response(status=200)


async def revoke_permissions(request: web.Request, serverid, roleid) -> web.Response:
    """Revoke all permissions for the specified server and role.

    Revoke all permissions for the specified server and role. Required permission: &#39;root&#39;.

    :param serverid: Base64 encoded server id
    :type serverid: str
    :param roleid: Base64 encoded role id
    :type roleid: str

    """
    return web.Response(status=200)
