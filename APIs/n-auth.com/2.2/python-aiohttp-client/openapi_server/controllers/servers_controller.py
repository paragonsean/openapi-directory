from typing import List, Dict
from aiohttp import web

from openapi_server.models.server import Server
from openapi_server.models.servers import Servers
from openapi_server import util


async def create_server(request: web.Request, create_server_body) -> web.Response:
    """Create a new server

    Create a new server. Required permission: global &#39;createserver&#39;.

    :param create_server_body: Server data (note that serverid, serverpk and validtime are generated by the server)
    :type create_server_body: dict | bytes

    """
    create_server_body = Server.from_dict(create_server_body)
    return web.Response(status=200)


async def delete_server_attribute(request: web.Request, serverid, attributekey) -> web.Response:
    """Delete specific attribute of a specific server

    Delete attribute with the specified key of a specific server. Required permission: &#39;servers&#39;.

    :param serverid: Base64 encoded server id
    :type serverid: str
    :param attributekey: Key of the attribute
    :type attributekey: str

    """
    return web.Response(status=200)


async def delete_server_attributes(request: web.Request, serverid) -> web.Response:
    """Delete all attributes of a specific server

    Delete all attributes of a specific server. Required permission: &#39;servers&#39;.

    :param serverid: Base64 encoded server id
    :type serverid: str

    """
    return web.Response(status=200)


async def get_server(request: web.Request, serverid) -> web.Response:
    """Configuration of a specific server

    Returns the configuration of a specific server. Required permission: &#39;servers&#39; or &#39;createserver&#39;.

    :param serverid: Base64 encoded server id
    :type serverid: str

    """
    return web.Response(status=200)


async def get_server_attributes(request: web.Request, serverid) -> web.Response:
    """Get all attributes of a specific server

    Returns an array containing all attributes corresponding to this server. Required permission: &#39;servers&#39;.

    :param serverid: Base64 encoded server id
    :type serverid: str

    """
    return web.Response(status=200)


async def get_servers(request: web.Request, limit=None, marker=None) -> web.Response:
    """List all your servers

    List all the servers you have the permissions for. Required permission: &#39;servers&#39;.

    :param limit: Limit the number of results
    :type limit: int
    :param marker: Offset in the result list
    :type marker: int

    """
    return web.Response(status=200)


async def set_server_attributes(request: web.Request, serverid, attributes) -> web.Response:
    """Set all attributes of a specific server

    Set the attributes of a specific server. Prior attributes with keys that are not provided in the body of the request will be deleted. Required permission: &#39;servers&#39;.

    :param serverid: Base64 encoded server id
    :type serverid: str
    :param attributes: Array of attributes
    :type attributes: 

    """
    return web.Response(status=200)


async def update_server(request: web.Request, serverid, server) -> web.Response:
    """Update configuration of a specific server

    Update the configuration of a specific server. Required permission: &#39;createserver&#39;.

    :param serverid: Base64 encoded server id
    :type serverid: str
    :param server: Server data (note that serverid and serverpk cannot be changed)
    :type server: dict | bytes

    """
    server = Server.from_dict(server)
    return web.Response(status=200)


async def update_server_attributes(request: web.Request, serverid, attributes) -> web.Response:
    """Update specified attributes of a specific server

    Update the specified attributes of a specific server. Prior attributes with keys that are not provided in the body of the request will not be deleted. Required permission: &#39;servers&#39;.

    :param serverid: Base64 encoded server id
    :type serverid: str
    :param attributes: Array of attributes
    :type attributes: 

    """
    return web.Response(status=200)
