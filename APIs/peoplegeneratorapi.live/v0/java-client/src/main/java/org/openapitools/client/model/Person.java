/*
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Address;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Person
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:30:11.851545-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Person {
  public static final String SERIALIZED_NAME_ADDRESS = "address";
  @SerializedName(SERIALIZED_NAME_ADDRESS)
  private Address address;

  public static final String SERIALIZED_NAME_AGE = "age";
  @SerializedName(SERIALIZED_NAME_AGE)
  private Integer age;

  public static final String SERIALIZED_NAME_BLOOD_TYPE = "bloodType";
  @SerializedName(SERIALIZED_NAME_BLOOD_TYPE)
  private String bloodType;

  public static final String SERIALIZED_NAME_CC_NUMBER = "ccNumber";
  @SerializedName(SERIALIZED_NAME_CC_NUMBER)
  private String ccNumber;

  public static final String SERIALIZED_NAME_CREDIT_SCORE = "creditScore";
  @SerializedName(SERIALIZED_NAME_CREDIT_SCORE)
  private Integer creditScore;

  public static final String SERIALIZED_NAME_DO_B = "doB";
  @SerializedName(SERIALIZED_NAME_DO_B)
  private String doB;

  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private String email;

  public static final String SERIALIZED_NAME_EYE_COLOR = "eyeColor";
  @SerializedName(SERIALIZED_NAME_EYE_COLOR)
  private String eyeColor;

  public static final String SERIALIZED_NAME_GENDER = "gender";
  @SerializedName(SERIALIZED_NAME_GENDER)
  private String gender;

  public static final String SERIALIZED_NAME_GPA = "gpa";
  @SerializedName(SERIALIZED_NAME_GPA)
  private Double gpa;

  public static final String SERIALIZED_NAME_HAS_CHILDREN = "hasChildren";
  @SerializedName(SERIALIZED_NAME_HAS_CHILDREN)
  private Boolean hasChildren;

  public static final String SERIALIZED_NAME_HAS_DEGREE = "hasDegree";
  @SerializedName(SERIALIZED_NAME_HAS_DEGREE)
  private Boolean hasDegree;

  public static final String SERIALIZED_NAME_HEIGHT = "height";
  @SerializedName(SERIALIZED_NAME_HEIGHT)
  private Double height;

  public static final String SERIALIZED_NAME_INCOME_U_S_D = "incomeUSD";
  @SerializedName(SERIALIZED_NAME_INCOME_U_S_D)
  private Integer incomeUSD;

  public static final String SERIALIZED_NAME_JOB = "job";
  @SerializedName(SERIALIZED_NAME_JOB)
  private String job;

  public static final String SERIALIZED_NAME_MARRIED = "married";
  @SerializedName(SERIALIZED_NAME_MARRIED)
  private Boolean married;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_POLITICAL_LEANING = "politicalLeaning";
  @SerializedName(SERIALIZED_NAME_POLITICAL_LEANING)
  private Double politicalLeaning;

  public static final String SERIALIZED_NAME_RELIGION = "religion";
  @SerializedName(SERIALIZED_NAME_RELIGION)
  private String religion;

  public static final String SERIALIZED_NAME_USERNAME = "username";
  @SerializedName(SERIALIZED_NAME_USERNAME)
  private String username;

  public static final String SERIALIZED_NAME_WEIGHT = "weight";
  @SerializedName(SERIALIZED_NAME_WEIGHT)
  private Double weight;

  public Person() {
  }

  public Person address(Address address) {
    this.address = address;
    return this;
  }

  /**
   * Get address
   * @return address
   */
  @javax.annotation.Nullable
  public Address getAddress() {
    return address;
  }

  public void setAddress(Address address) {
    this.address = address;
  }


  public Person age(Integer age) {
    this.age = age;
    return this;
  }

  /**
   * Get age
   * @return age
   */
  @javax.annotation.Nullable
  public Integer getAge() {
    return age;
  }

  public void setAge(Integer age) {
    this.age = age;
  }


  public Person bloodType(String bloodType) {
    this.bloodType = bloodType;
    return this;
  }

  /**
   * Get bloodType
   * @return bloodType
   */
  @javax.annotation.Nullable
  public String getBloodType() {
    return bloodType;
  }

  public void setBloodType(String bloodType) {
    this.bloodType = bloodType;
  }


  public Person ccNumber(String ccNumber) {
    this.ccNumber = ccNumber;
    return this;
  }

  /**
   * Get ccNumber
   * @return ccNumber
   */
  @javax.annotation.Nullable
  public String getCcNumber() {
    return ccNumber;
  }

  public void setCcNumber(String ccNumber) {
    this.ccNumber = ccNumber;
  }


  public Person creditScore(Integer creditScore) {
    this.creditScore = creditScore;
    return this;
  }

  /**
   * Get creditScore
   * @return creditScore
   */
  @javax.annotation.Nullable
  public Integer getCreditScore() {
    return creditScore;
  }

  public void setCreditScore(Integer creditScore) {
    this.creditScore = creditScore;
  }


  public Person doB(String doB) {
    this.doB = doB;
    return this;
  }

  /**
   * Get doB
   * @return doB
   */
  @javax.annotation.Nullable
  public String getDoB() {
    return doB;
  }

  public void setDoB(String doB) {
    this.doB = doB;
  }


  public Person email(String email) {
    this.email = email;
    return this;
  }

  /**
   * Get email
   * @return email
   */
  @javax.annotation.Nullable
  public String getEmail() {
    return email;
  }

  public void setEmail(String email) {
    this.email = email;
  }


  public Person eyeColor(String eyeColor) {
    this.eyeColor = eyeColor;
    return this;
  }

  /**
   * Get eyeColor
   * @return eyeColor
   */
  @javax.annotation.Nullable
  public String getEyeColor() {
    return eyeColor;
  }

  public void setEyeColor(String eyeColor) {
    this.eyeColor = eyeColor;
  }


  public Person gender(String gender) {
    this.gender = gender;
    return this;
  }

  /**
   * Get gender
   * @return gender
   */
  @javax.annotation.Nullable
  public String getGender() {
    return gender;
  }

  public void setGender(String gender) {
    this.gender = gender;
  }


  public Person gpa(Double gpa) {
    this.gpa = gpa;
    return this;
  }

  /**
   * Get gpa
   * @return gpa
   */
  @javax.annotation.Nullable
  public Double getGpa() {
    return gpa;
  }

  public void setGpa(Double gpa) {
    this.gpa = gpa;
  }


  public Person hasChildren(Boolean hasChildren) {
    this.hasChildren = hasChildren;
    return this;
  }

  /**
   * Get hasChildren
   * @return hasChildren
   */
  @javax.annotation.Nullable
  public Boolean getHasChildren() {
    return hasChildren;
  }

  public void setHasChildren(Boolean hasChildren) {
    this.hasChildren = hasChildren;
  }


  public Person hasDegree(Boolean hasDegree) {
    this.hasDegree = hasDegree;
    return this;
  }

  /**
   * Get hasDegree
   * @return hasDegree
   */
  @javax.annotation.Nullable
  public Boolean getHasDegree() {
    return hasDegree;
  }

  public void setHasDegree(Boolean hasDegree) {
    this.hasDegree = hasDegree;
  }


  public Person height(Double height) {
    this.height = height;
    return this;
  }

  /**
   * Get height
   * @return height
   */
  @javax.annotation.Nullable
  public Double getHeight() {
    return height;
  }

  public void setHeight(Double height) {
    this.height = height;
  }


  public Person incomeUSD(Integer incomeUSD) {
    this.incomeUSD = incomeUSD;
    return this;
  }

  /**
   * Get incomeUSD
   * @return incomeUSD
   */
  @javax.annotation.Nullable
  public Integer getIncomeUSD() {
    return incomeUSD;
  }

  public void setIncomeUSD(Integer incomeUSD) {
    this.incomeUSD = incomeUSD;
  }


  public Person job(String job) {
    this.job = job;
    return this;
  }

  /**
   * Get job
   * @return job
   */
  @javax.annotation.Nullable
  public String getJob() {
    return job;
  }

  public void setJob(String job) {
    this.job = job;
  }


  public Person married(Boolean married) {
    this.married = married;
    return this;
  }

  /**
   * Get married
   * @return married
   */
  @javax.annotation.Nullable
  public Boolean getMarried() {
    return married;
  }

  public void setMarried(Boolean married) {
    this.married = married;
  }


  public Person name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public Person politicalLeaning(Double politicalLeaning) {
    this.politicalLeaning = politicalLeaning;
    return this;
  }

  /**
   * Get politicalLeaning
   * @return politicalLeaning
   */
  @javax.annotation.Nullable
  public Double getPoliticalLeaning() {
    return politicalLeaning;
  }

  public void setPoliticalLeaning(Double politicalLeaning) {
    this.politicalLeaning = politicalLeaning;
  }


  public Person religion(String religion) {
    this.religion = religion;
    return this;
  }

  /**
   * Get religion
   * @return religion
   */
  @javax.annotation.Nullable
  public String getReligion() {
    return religion;
  }

  public void setReligion(String religion) {
    this.religion = religion;
  }


  public Person username(String username) {
    this.username = username;
    return this;
  }

  /**
   * Get username
   * @return username
   */
  @javax.annotation.Nullable
  public String getUsername() {
    return username;
  }

  public void setUsername(String username) {
    this.username = username;
  }


  public Person weight(Double weight) {
    this.weight = weight;
    return this;
  }

  /**
   * Get weight
   * @return weight
   */
  @javax.annotation.Nullable
  public Double getWeight() {
    return weight;
  }

  public void setWeight(Double weight) {
    this.weight = weight;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Person person = (Person) o;
    return Objects.equals(this.address, person.address) &&
        Objects.equals(this.age, person.age) &&
        Objects.equals(this.bloodType, person.bloodType) &&
        Objects.equals(this.ccNumber, person.ccNumber) &&
        Objects.equals(this.creditScore, person.creditScore) &&
        Objects.equals(this.doB, person.doB) &&
        Objects.equals(this.email, person.email) &&
        Objects.equals(this.eyeColor, person.eyeColor) &&
        Objects.equals(this.gender, person.gender) &&
        Objects.equals(this.gpa, person.gpa) &&
        Objects.equals(this.hasChildren, person.hasChildren) &&
        Objects.equals(this.hasDegree, person.hasDegree) &&
        Objects.equals(this.height, person.height) &&
        Objects.equals(this.incomeUSD, person.incomeUSD) &&
        Objects.equals(this.job, person.job) &&
        Objects.equals(this.married, person.married) &&
        Objects.equals(this.name, person.name) &&
        Objects.equals(this.politicalLeaning, person.politicalLeaning) &&
        Objects.equals(this.religion, person.religion) &&
        Objects.equals(this.username, person.username) &&
        Objects.equals(this.weight, person.weight);
  }

  @Override
  public int hashCode() {
    return Objects.hash(address, age, bloodType, ccNumber, creditScore, doB, email, eyeColor, gender, gpa, hasChildren, hasDegree, height, incomeUSD, job, married, name, politicalLeaning, religion, username, weight);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Person {\n");
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    age: ").append(toIndentedString(age)).append("\n");
    sb.append("    bloodType: ").append(toIndentedString(bloodType)).append("\n");
    sb.append("    ccNumber: ").append(toIndentedString(ccNumber)).append("\n");
    sb.append("    creditScore: ").append(toIndentedString(creditScore)).append("\n");
    sb.append("    doB: ").append(toIndentedString(doB)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    eyeColor: ").append(toIndentedString(eyeColor)).append("\n");
    sb.append("    gender: ").append(toIndentedString(gender)).append("\n");
    sb.append("    gpa: ").append(toIndentedString(gpa)).append("\n");
    sb.append("    hasChildren: ").append(toIndentedString(hasChildren)).append("\n");
    sb.append("    hasDegree: ").append(toIndentedString(hasDegree)).append("\n");
    sb.append("    height: ").append(toIndentedString(height)).append("\n");
    sb.append("    incomeUSD: ").append(toIndentedString(incomeUSD)).append("\n");
    sb.append("    job: ").append(toIndentedString(job)).append("\n");
    sb.append("    married: ").append(toIndentedString(married)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    politicalLeaning: ").append(toIndentedString(politicalLeaning)).append("\n");
    sb.append("    religion: ").append(toIndentedString(religion)).append("\n");
    sb.append("    username: ").append(toIndentedString(username)).append("\n");
    sb.append("    weight: ").append(toIndentedString(weight)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("address");
    openapiFields.add("age");
    openapiFields.add("bloodType");
    openapiFields.add("ccNumber");
    openapiFields.add("creditScore");
    openapiFields.add("doB");
    openapiFields.add("email");
    openapiFields.add("eyeColor");
    openapiFields.add("gender");
    openapiFields.add("gpa");
    openapiFields.add("hasChildren");
    openapiFields.add("hasDegree");
    openapiFields.add("height");
    openapiFields.add("incomeUSD");
    openapiFields.add("job");
    openapiFields.add("married");
    openapiFields.add("name");
    openapiFields.add("politicalLeaning");
    openapiFields.add("religion");
    openapiFields.add("username");
    openapiFields.add("weight");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Person
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Person.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Person is not found in the empty JSON string", Person.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Person.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Person` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `address`
      if (jsonObj.get("address") != null && !jsonObj.get("address").isJsonNull()) {
        Address.validateJsonElement(jsonObj.get("address"));
      }
      if ((jsonObj.get("bloodType") != null && !jsonObj.get("bloodType").isJsonNull()) && !jsonObj.get("bloodType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bloodType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bloodType").toString()));
      }
      if ((jsonObj.get("ccNumber") != null && !jsonObj.get("ccNumber").isJsonNull()) && !jsonObj.get("ccNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ccNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ccNumber").toString()));
      }
      if ((jsonObj.get("doB") != null && !jsonObj.get("doB").isJsonNull()) && !jsonObj.get("doB").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `doB` to be a primitive type in the JSON string but got `%s`", jsonObj.get("doB").toString()));
      }
      if ((jsonObj.get("email") != null && !jsonObj.get("email").isJsonNull()) && !jsonObj.get("email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email").toString()));
      }
      if ((jsonObj.get("eyeColor") != null && !jsonObj.get("eyeColor").isJsonNull()) && !jsonObj.get("eyeColor").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `eyeColor` to be a primitive type in the JSON string but got `%s`", jsonObj.get("eyeColor").toString()));
      }
      if ((jsonObj.get("gender") != null && !jsonObj.get("gender").isJsonNull()) && !jsonObj.get("gender").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `gender` to be a primitive type in the JSON string but got `%s`", jsonObj.get("gender").toString()));
      }
      if ((jsonObj.get("job") != null && !jsonObj.get("job").isJsonNull()) && !jsonObj.get("job").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `job` to be a primitive type in the JSON string but got `%s`", jsonObj.get("job").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("religion") != null && !jsonObj.get("religion").isJsonNull()) && !jsonObj.get("religion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `religion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("religion").toString()));
      }
      if ((jsonObj.get("username") != null && !jsonObj.get("username").isJsonNull()) && !jsonObj.get("username").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `username` to be a primitive type in the JSON string but got `%s`", jsonObj.get("username").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Person.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Person' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Person> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Person.class));

       return (TypeAdapter<T>) new TypeAdapter<Person>() {
           @Override
           public void write(JsonWriter out, Person value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Person read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Person given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Person
   * @throws IOException if the JSON string is invalid with respect to Person
   */
  public static Person fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Person.class);
  }

  /**
   * Convert an instance of Person to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

