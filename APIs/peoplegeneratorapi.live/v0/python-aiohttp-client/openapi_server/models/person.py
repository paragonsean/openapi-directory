# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.address import Address
from openapi_server import util


class Person(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, address: Address=None, age: int=None, blood_type: str=None, cc_number: str=None, credit_score: int=None, do_b: str=None, email: str=None, eye_color: str=None, gender: str=None, gpa: float=None, has_children: bool=None, has_degree: bool=None, height: float=None, income_usd: int=None, job: str=None, married: bool=None, name: str=None, political_leaning: float=None, religion: str=None, username: str=None, weight: float=None):
        """Person - a model defined in OpenAPI

        :param address: The address of this Person.
        :param age: The age of this Person.
        :param blood_type: The blood_type of this Person.
        :param cc_number: The cc_number of this Person.
        :param credit_score: The credit_score of this Person.
        :param do_b: The do_b of this Person.
        :param email: The email of this Person.
        :param eye_color: The eye_color of this Person.
        :param gender: The gender of this Person.
        :param gpa: The gpa of this Person.
        :param has_children: The has_children of this Person.
        :param has_degree: The has_degree of this Person.
        :param height: The height of this Person.
        :param income_usd: The income_usd of this Person.
        :param job: The job of this Person.
        :param married: The married of this Person.
        :param name: The name of this Person.
        :param political_leaning: The political_leaning of this Person.
        :param religion: The religion of this Person.
        :param username: The username of this Person.
        :param weight: The weight of this Person.
        """
        self.openapi_types = {
            'address': Address,
            'age': int,
            'blood_type': str,
            'cc_number': str,
            'credit_score': int,
            'do_b': str,
            'email': str,
            'eye_color': str,
            'gender': str,
            'gpa': float,
            'has_children': bool,
            'has_degree': bool,
            'height': float,
            'income_usd': int,
            'job': str,
            'married': bool,
            'name': str,
            'political_leaning': float,
            'religion': str,
            'username': str,
            'weight': float
        }

        self.attribute_map = {
            'address': 'address',
            'age': 'age',
            'blood_type': 'bloodType',
            'cc_number': 'ccNumber',
            'credit_score': 'creditScore',
            'do_b': 'doB',
            'email': 'email',
            'eye_color': 'eyeColor',
            'gender': 'gender',
            'gpa': 'gpa',
            'has_children': 'hasChildren',
            'has_degree': 'hasDegree',
            'height': 'height',
            'income_usd': 'incomeUSD',
            'job': 'job',
            'married': 'married',
            'name': 'name',
            'political_leaning': 'politicalLeaning',
            'religion': 'religion',
            'username': 'username',
            'weight': 'weight'
        }

        self._address = address
        self._age = age
        self._blood_type = blood_type
        self._cc_number = cc_number
        self._credit_score = credit_score
        self._do_b = do_b
        self._email = email
        self._eye_color = eye_color
        self._gender = gender
        self._gpa = gpa
        self._has_children = has_children
        self._has_degree = has_degree
        self._height = height
        self._income_usd = income_usd
        self._job = job
        self._married = married
        self._name = name
        self._political_leaning = political_leaning
        self._religion = religion
        self._username = username
        self._weight = weight

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Person':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Person of this Person.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def address(self):
        """Gets the address of this Person.


        :return: The address of this Person.
        :rtype: Address
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this Person.


        :param address: The address of this Person.
        :type address: Address
        """

        self._address = address

    @property
    def age(self):
        """Gets the age of this Person.


        :return: The age of this Person.
        :rtype: int
        """
        return self._age

    @age.setter
    def age(self, age):
        """Sets the age of this Person.


        :param age: The age of this Person.
        :type age: int
        """

        self._age = age

    @property
    def blood_type(self):
        """Gets the blood_type of this Person.


        :return: The blood_type of this Person.
        :rtype: str
        """
        return self._blood_type

    @blood_type.setter
    def blood_type(self, blood_type):
        """Sets the blood_type of this Person.


        :param blood_type: The blood_type of this Person.
        :type blood_type: str
        """

        self._blood_type = blood_type

    @property
    def cc_number(self):
        """Gets the cc_number of this Person.


        :return: The cc_number of this Person.
        :rtype: str
        """
        return self._cc_number

    @cc_number.setter
    def cc_number(self, cc_number):
        """Sets the cc_number of this Person.


        :param cc_number: The cc_number of this Person.
        :type cc_number: str
        """

        self._cc_number = cc_number

    @property
    def credit_score(self):
        """Gets the credit_score of this Person.


        :return: The credit_score of this Person.
        :rtype: int
        """
        return self._credit_score

    @credit_score.setter
    def credit_score(self, credit_score):
        """Sets the credit_score of this Person.


        :param credit_score: The credit_score of this Person.
        :type credit_score: int
        """

        self._credit_score = credit_score

    @property
    def do_b(self):
        """Gets the do_b of this Person.


        :return: The do_b of this Person.
        :rtype: str
        """
        return self._do_b

    @do_b.setter
    def do_b(self, do_b):
        """Sets the do_b of this Person.


        :param do_b: The do_b of this Person.
        :type do_b: str
        """

        self._do_b = do_b

    @property
    def email(self):
        """Gets the email of this Person.


        :return: The email of this Person.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this Person.


        :param email: The email of this Person.
        :type email: str
        """

        self._email = email

    @property
    def eye_color(self):
        """Gets the eye_color of this Person.


        :return: The eye_color of this Person.
        :rtype: str
        """
        return self._eye_color

    @eye_color.setter
    def eye_color(self, eye_color):
        """Sets the eye_color of this Person.


        :param eye_color: The eye_color of this Person.
        :type eye_color: str
        """

        self._eye_color = eye_color

    @property
    def gender(self):
        """Gets the gender of this Person.


        :return: The gender of this Person.
        :rtype: str
        """
        return self._gender

    @gender.setter
    def gender(self, gender):
        """Sets the gender of this Person.


        :param gender: The gender of this Person.
        :type gender: str
        """

        self._gender = gender

    @property
    def gpa(self):
        """Gets the gpa of this Person.


        :return: The gpa of this Person.
        :rtype: float
        """
        return self._gpa

    @gpa.setter
    def gpa(self, gpa):
        """Sets the gpa of this Person.


        :param gpa: The gpa of this Person.
        :type gpa: float
        """

        self._gpa = gpa

    @property
    def has_children(self):
        """Gets the has_children of this Person.


        :return: The has_children of this Person.
        :rtype: bool
        """
        return self._has_children

    @has_children.setter
    def has_children(self, has_children):
        """Sets the has_children of this Person.


        :param has_children: The has_children of this Person.
        :type has_children: bool
        """

        self._has_children = has_children

    @property
    def has_degree(self):
        """Gets the has_degree of this Person.


        :return: The has_degree of this Person.
        :rtype: bool
        """
        return self._has_degree

    @has_degree.setter
    def has_degree(self, has_degree):
        """Sets the has_degree of this Person.


        :param has_degree: The has_degree of this Person.
        :type has_degree: bool
        """

        self._has_degree = has_degree

    @property
    def height(self):
        """Gets the height of this Person.


        :return: The height of this Person.
        :rtype: float
        """
        return self._height

    @height.setter
    def height(self, height):
        """Sets the height of this Person.


        :param height: The height of this Person.
        :type height: float
        """

        self._height = height

    @property
    def income_usd(self):
        """Gets the income_usd of this Person.


        :return: The income_usd of this Person.
        :rtype: int
        """
        return self._income_usd

    @income_usd.setter
    def income_usd(self, income_usd):
        """Sets the income_usd of this Person.


        :param income_usd: The income_usd of this Person.
        :type income_usd: int
        """

        self._income_usd = income_usd

    @property
    def job(self):
        """Gets the job of this Person.


        :return: The job of this Person.
        :rtype: str
        """
        return self._job

    @job.setter
    def job(self, job):
        """Sets the job of this Person.


        :param job: The job of this Person.
        :type job: str
        """

        self._job = job

    @property
    def married(self):
        """Gets the married of this Person.


        :return: The married of this Person.
        :rtype: bool
        """
        return self._married

    @married.setter
    def married(self, married):
        """Sets the married of this Person.


        :param married: The married of this Person.
        :type married: bool
        """

        self._married = married

    @property
    def name(self):
        """Gets the name of this Person.


        :return: The name of this Person.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Person.


        :param name: The name of this Person.
        :type name: str
        """

        self._name = name

    @property
    def political_leaning(self):
        """Gets the political_leaning of this Person.


        :return: The political_leaning of this Person.
        :rtype: float
        """
        return self._political_leaning

    @political_leaning.setter
    def political_leaning(self, political_leaning):
        """Sets the political_leaning of this Person.


        :param political_leaning: The political_leaning of this Person.
        :type political_leaning: float
        """

        self._political_leaning = political_leaning

    @property
    def religion(self):
        """Gets the religion of this Person.


        :return: The religion of this Person.
        :rtype: str
        """
        return self._religion

    @religion.setter
    def religion(self, religion):
        """Sets the religion of this Person.


        :param religion: The religion of this Person.
        :type religion: str
        """

        self._religion = religion

    @property
    def username(self):
        """Gets the username of this Person.


        :return: The username of this Person.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this Person.


        :param username: The username of this Person.
        :type username: str
        """

        self._username = username

    @property
    def weight(self):
        """Gets the weight of this Person.


        :return: The weight of this Person.
        :rtype: float
        """
        return self._weight

    @weight.setter
    def weight(self, weight):
        """Sets the weight of this Person.


        :param weight: The weight of this Person.
        :type weight: float
        """

        self._weight = weight
