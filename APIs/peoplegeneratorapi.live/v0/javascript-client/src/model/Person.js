/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Address from './Address';

/**
 * The Person model module.
 * @module model/Person
 * @version v0
 */
class Person {
    /**
     * Constructs a new <code>Person</code>.
     * @alias module:model/Person
     */
    constructor() { 
        
        Person.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Person</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Person} obj Optional instance to populate.
     * @return {module:model/Person} The populated <code>Person</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Person();

            if (data.hasOwnProperty('address')) {
                obj['address'] = Address.constructFromObject(data['address']);
            }
            if (data.hasOwnProperty('age')) {
                obj['age'] = ApiClient.convertToType(data['age'], 'Number');
            }
            if (data.hasOwnProperty('bloodType')) {
                obj['bloodType'] = ApiClient.convertToType(data['bloodType'], 'String');
            }
            if (data.hasOwnProperty('ccNumber')) {
                obj['ccNumber'] = ApiClient.convertToType(data['ccNumber'], 'String');
            }
            if (data.hasOwnProperty('creditScore')) {
                obj['creditScore'] = ApiClient.convertToType(data['creditScore'], 'Number');
            }
            if (data.hasOwnProperty('doB')) {
                obj['doB'] = ApiClient.convertToType(data['doB'], 'String');
            }
            if (data.hasOwnProperty('email')) {
                obj['email'] = ApiClient.convertToType(data['email'], 'String');
            }
            if (data.hasOwnProperty('eyeColor')) {
                obj['eyeColor'] = ApiClient.convertToType(data['eyeColor'], 'String');
            }
            if (data.hasOwnProperty('gender')) {
                obj['gender'] = ApiClient.convertToType(data['gender'], 'String');
            }
            if (data.hasOwnProperty('gpa')) {
                obj['gpa'] = ApiClient.convertToType(data['gpa'], 'Number');
            }
            if (data.hasOwnProperty('hasChildren')) {
                obj['hasChildren'] = ApiClient.convertToType(data['hasChildren'], 'Boolean');
            }
            if (data.hasOwnProperty('hasDegree')) {
                obj['hasDegree'] = ApiClient.convertToType(data['hasDegree'], 'Boolean');
            }
            if (data.hasOwnProperty('height')) {
                obj['height'] = ApiClient.convertToType(data['height'], 'Number');
            }
            if (data.hasOwnProperty('incomeUSD')) {
                obj['incomeUSD'] = ApiClient.convertToType(data['incomeUSD'], 'Number');
            }
            if (data.hasOwnProperty('job')) {
                obj['job'] = ApiClient.convertToType(data['job'], 'String');
            }
            if (data.hasOwnProperty('married')) {
                obj['married'] = ApiClient.convertToType(data['married'], 'Boolean');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('politicalLeaning')) {
                obj['politicalLeaning'] = ApiClient.convertToType(data['politicalLeaning'], 'Number');
            }
            if (data.hasOwnProperty('religion')) {
                obj['religion'] = ApiClient.convertToType(data['religion'], 'String');
            }
            if (data.hasOwnProperty('username')) {
                obj['username'] = ApiClient.convertToType(data['username'], 'String');
            }
            if (data.hasOwnProperty('weight')) {
                obj['weight'] = ApiClient.convertToType(data['weight'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Person</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Person</code>.
     */
    static validateJSON(data) {
        // validate the optional field `address`
        if (data['address']) { // data not null
          Address.validateJSON(data['address']);
        }
        // ensure the json data is a string
        if (data['bloodType'] && !(typeof data['bloodType'] === 'string' || data['bloodType'] instanceof String)) {
            throw new Error("Expected the field `bloodType` to be a primitive type in the JSON string but got " + data['bloodType']);
        }
        // ensure the json data is a string
        if (data['ccNumber'] && !(typeof data['ccNumber'] === 'string' || data['ccNumber'] instanceof String)) {
            throw new Error("Expected the field `ccNumber` to be a primitive type in the JSON string but got " + data['ccNumber']);
        }
        // ensure the json data is a string
        if (data['doB'] && !(typeof data['doB'] === 'string' || data['doB'] instanceof String)) {
            throw new Error("Expected the field `doB` to be a primitive type in the JSON string but got " + data['doB']);
        }
        // ensure the json data is a string
        if (data['email'] && !(typeof data['email'] === 'string' || data['email'] instanceof String)) {
            throw new Error("Expected the field `email` to be a primitive type in the JSON string but got " + data['email']);
        }
        // ensure the json data is a string
        if (data['eyeColor'] && !(typeof data['eyeColor'] === 'string' || data['eyeColor'] instanceof String)) {
            throw new Error("Expected the field `eyeColor` to be a primitive type in the JSON string but got " + data['eyeColor']);
        }
        // ensure the json data is a string
        if (data['gender'] && !(typeof data['gender'] === 'string' || data['gender'] instanceof String)) {
            throw new Error("Expected the field `gender` to be a primitive type in the JSON string but got " + data['gender']);
        }
        // ensure the json data is a string
        if (data['job'] && !(typeof data['job'] === 'string' || data['job'] instanceof String)) {
            throw new Error("Expected the field `job` to be a primitive type in the JSON string but got " + data['job']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['religion'] && !(typeof data['religion'] === 'string' || data['religion'] instanceof String)) {
            throw new Error("Expected the field `religion` to be a primitive type in the JSON string but got " + data['religion']);
        }
        // ensure the json data is a string
        if (data['username'] && !(typeof data['username'] === 'string' || data['username'] instanceof String)) {
            throw new Error("Expected the field `username` to be a primitive type in the JSON string but got " + data['username']);
        }

        return true;
    }


}



/**
 * @member {module:model/Address} address
 */
Person.prototype['address'] = undefined;

/**
 * @member {Number} age
 */
Person.prototype['age'] = undefined;

/**
 * @member {String} bloodType
 */
Person.prototype['bloodType'] = undefined;

/**
 * @member {String} ccNumber
 */
Person.prototype['ccNumber'] = undefined;

/**
 * @member {Number} creditScore
 */
Person.prototype['creditScore'] = undefined;

/**
 * @member {String} doB
 */
Person.prototype['doB'] = undefined;

/**
 * @member {String} email
 */
Person.prototype['email'] = undefined;

/**
 * @member {String} eyeColor
 */
Person.prototype['eyeColor'] = undefined;

/**
 * @member {String} gender
 */
Person.prototype['gender'] = undefined;

/**
 * @member {Number} gpa
 */
Person.prototype['gpa'] = undefined;

/**
 * @member {Boolean} hasChildren
 */
Person.prototype['hasChildren'] = undefined;

/**
 * @member {Boolean} hasDegree
 */
Person.prototype['hasDegree'] = undefined;

/**
 * @member {Number} height
 */
Person.prototype['height'] = undefined;

/**
 * @member {Number} incomeUSD
 */
Person.prototype['incomeUSD'] = undefined;

/**
 * @member {String} job
 */
Person.prototype['job'] = undefined;

/**
 * @member {Boolean} married
 */
Person.prototype['married'] = undefined;

/**
 * @member {String} name
 */
Person.prototype['name'] = undefined;

/**
 * @member {Number} politicalLeaning
 */
Person.prototype['politicalLeaning'] = undefined;

/**
 * @member {String} religion
 */
Person.prototype['religion'] = undefined;

/**
 * @member {String} username
 */
Person.prototype['username'] = undefined;

/**
 * @member {Number} weight
 */
Person.prototype['weight'] = undefined;






export default Person;

