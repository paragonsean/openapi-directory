/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.OpenApiDefinition);
  }
}(this, function(expect, OpenApiDefinition) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new OpenApiDefinition.PeoplegeneratorapiApplicationApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('PeoplegeneratorapiApplicationApi', function() {
    describe('age', function() {
      it('should call age successfully', function(done) {
        //uncomment below and update the code to test age
        //instance.age(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('age1', function() {
      it('should call age1 successfully', function(done) {
        //uncomment below and update the code to test age1
        //instance.age1(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('bloodtype', function() {
      it('should call bloodtype successfully', function(done) {
        //uncomment below and update the code to test bloodtype
        //instance.bloodtype(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('bloodtype1', function() {
      it('should call bloodtype1 successfully', function(done) {
        //uncomment below and update the code to test bloodtype1
        //instance.bloodtype1(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('creditcardnumber', function() {
      it('should call creditcardnumber successfully', function(done) {
        //uncomment below and update the code to test creditcardnumber
        //instance.creditcardnumber(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('creditcardnumber1', function() {
      it('should call creditcardnumber1 successfully', function(done) {
        //uncomment below and update the code to test creditcardnumber1
        //instance.creditcardnumber1(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('creditscore', function() {
      it('should call creditscore successfully', function(done) {
        //uncomment below and update the code to test creditscore
        //instance.creditscore(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('creditscore1', function() {
      it('should call creditscore1 successfully', function(done) {
        //uncomment below and update the code to test creditscore1
        //instance.creditscore1(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('email', function() {
      it('should call email successfully', function(done) {
        //uncomment below and update the code to test email
        //instance.email(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('email1', function() {
      it('should call email1 successfully', function(done) {
        //uncomment below and update the code to test email1
        //instance.email1(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('eyecolor', function() {
      it('should call eyecolor successfully', function(done) {
        //uncomment below and update the code to test eyecolor
        //instance.eyecolor(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('eyecolor1', function() {
      it('should call eyecolor1 successfully', function(done) {
        //uncomment below and update the code to test eyecolor1
        //instance.eyecolor1(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('gender', function() {
      it('should call gender successfully', function(done) {
        //uncomment below and update the code to test gender
        //instance.gender(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('gender1', function() {
      it('should call gender1 successfully', function(done) {
        //uncomment below and update the code to test gender1
        //instance.gender1(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('generateAddress', function() {
      it('should call generateAddress successfully', function(done) {
        //uncomment below and update the code to test generateAddress
        //instance.generateAddress(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('generateAddress1', function() {
      it('should call generateAddress1 successfully', function(done) {
        //uncomment below and update the code to test generateAddress1
        //instance.generateAddress1(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('generateLifeStory', function() {
      it('should call generateLifeStory successfully', function(done) {
        //uncomment below and update the code to test generateLifeStory
        //instance.generateLifeStory(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('generateLifeStory1', function() {
      it('should call generateLifeStory1 successfully', function(done) {
        //uncomment below and update the code to test generateLifeStory1
        //instance.generateLifeStory1(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getCompressedPerson', function() {
      it('should call getCompressedPerson successfully', function(done) {
        //uncomment below and update the code to test getCompressedPerson
        //instance.getCompressedPerson(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getCompressedPerson1', function() {
      it('should call getCompressedPerson1 successfully', function(done) {
        //uncomment below and update the code to test getCompressedPerson1
        //instance.getCompressedPerson1(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getPerson', function() {
      it('should call getPerson successfully', function(done) {
        //uncomment below and update the code to test getPerson
        //instance.getPerson(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getPerson1', function() {
      it('should call getPerson1 successfully', function(done) {
        //uncomment below and update the code to test getPerson1
        //instance.getPerson1(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('gpa', function() {
      it('should call gpa successfully', function(done) {
        //uncomment below and update the code to test gpa
        //instance.gpa(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('gpa1', function() {
      it('should call gpa1 successfully', function(done) {
        //uncomment below and update the code to test gpa1
        //instance.gpa1(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('haschildren', function() {
      it('should call haschildren successfully', function(done) {
        //uncomment below and update the code to test haschildren
        //instance.haschildren(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('haschildren1', function() {
      it('should call haschildren1 successfully', function(done) {
        //uncomment below and update the code to test haschildren1
        //instance.haschildren1(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('hasdegree', function() {
      it('should call hasdegree successfully', function(done) {
        //uncomment below and update the code to test hasdegree
        //instance.hasdegree(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('hasdegree1', function() {
      it('should call hasdegree1 successfully', function(done) {
        //uncomment below and update the code to test hasdegree1
        //instance.hasdegree1(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('height', function() {
      it('should call height successfully', function(done) {
        //uncomment below and update the code to test height
        //instance.height(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('height1', function() {
      it('should call height1 successfully', function(done) {
        //uncomment below and update the code to test height1
        //instance.height1(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('income', function() {
      it('should call income successfully', function(done) {
        //uncomment below and update the code to test income
        //instance.income(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('income1', function() {
      it('should call income1 successfully', function(done) {
        //uncomment below and update the code to test income1
        //instance.income1(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('job', function() {
      it('should call job successfully', function(done) {
        //uncomment below and update the code to test job
        //instance.job(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('job1', function() {
      it('should call job1 successfully', function(done) {
        //uncomment below and update the code to test job1
        //instance.job1(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('maritalstatus', function() {
      it('should call maritalstatus successfully', function(done) {
        //uncomment below and update the code to test maritalstatus
        //instance.maritalstatus(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('maritalstatus1', function() {
      it('should call maritalstatus1 successfully', function(done) {
        //uncomment below and update the code to test maritalstatus1
        //instance.maritalstatus1(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('name', function() {
      it('should call name successfully', function(done) {
        //uncomment below and update the code to test name
        //instance.name(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('name1', function() {
      it('should call name1 successfully', function(done) {
        //uncomment below and update the code to test name1
        //instance.name1(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('politicalLeaning', function() {
      it('should call politicalLeaning successfully', function(done) {
        //uncomment below and update the code to test politicalLeaning
        //instance.politicalLeaning(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('politicalLeaning1', function() {
      it('should call politicalLeaning1 successfully', function(done) {
        //uncomment below and update the code to test politicalLeaning1
        //instance.politicalLeaning1(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('religion', function() {
      it('should call religion successfully', function(done) {
        //uncomment below and update the code to test religion
        //instance.religion(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('religion1', function() {
      it('should call religion1 successfully', function(done) {
        //uncomment below and update the code to test religion1
        //instance.religion1(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('username', function() {
      it('should call username successfully', function(done) {
        //uncomment below and update the code to test username
        //instance.username(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('username1', function() {
      it('should call username1 successfully', function(done) {
        //uncomment below and update the code to test username1
        //instance.username1(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('weight', function() {
      it('should call weight successfully', function(done) {
        //uncomment below and update the code to test weight
        //instance.weight(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('weight1', function() {
      it('should call weight1 successfully', function(done) {
        //uncomment below and update the code to test weight1
        //instance.weight1(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
