/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIPeoplegeneratorapiApplicationApi_H
#define OAI_OAIPeoplegeneratorapiApplicationApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAddress.h"
#include "OAILifestory.h"
#include "OAIPerson.h"
#include <QByteArray>
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIPeoplegeneratorapiApplicationApi : public QObject {
    Q_OBJECT

public:
    OAIPeoplegeneratorapiApplicationApi(const int timeOut = 0);
    ~OAIPeoplegeneratorapiApplicationApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);


    virtual void age();


    virtual void age1();


    virtual void bloodtype();


    virtual void bloodtype1();


    virtual void creditcardnumber();


    virtual void creditcardnumber1();


    virtual void creditscore();


    virtual void creditscore1();


    virtual void email();


    virtual void email1();


    virtual void eyecolor();


    virtual void eyecolor1();


    virtual void gender();


    virtual void gender1();


    virtual void generateAddress();


    virtual void generateAddress1();


    virtual void generateLifeStory();


    virtual void generateLifeStory1();

    /**
    * @param[in]  number qint32 [required]
    */
    virtual void getCompressedPerson(const qint32 &number);

    /**
    * @param[in]  number qint32 [required]
    */
    virtual void getCompressedPerson1(const qint32 &number);


    virtual void getPerson();


    virtual void getPerson1();


    virtual void gpa();


    virtual void gpa1();


    virtual void haschildren();


    virtual void haschildren1();


    virtual void hasdegree();


    virtual void hasdegree1();


    virtual void height();


    virtual void height1();


    virtual void income();


    virtual void income1();


    virtual void job();


    virtual void job1();


    virtual void maritalstatus();


    virtual void maritalstatus1();


    virtual void name();


    virtual void name1();


    virtual void politicalLeaning();


    virtual void politicalLeaning1();


    virtual void religion();


    virtual void religion1();


    virtual void username();


    virtual void username1();


    virtual void weight();


    virtual void weight1();


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void ageCallback(OAIHttpRequestWorker *worker);
    void age1Callback(OAIHttpRequestWorker *worker);
    void bloodtypeCallback(OAIHttpRequestWorker *worker);
    void bloodtype1Callback(OAIHttpRequestWorker *worker);
    void creditcardnumberCallback(OAIHttpRequestWorker *worker);
    void creditcardnumber1Callback(OAIHttpRequestWorker *worker);
    void creditscoreCallback(OAIHttpRequestWorker *worker);
    void creditscore1Callback(OAIHttpRequestWorker *worker);
    void emailCallback(OAIHttpRequestWorker *worker);
    void email1Callback(OAIHttpRequestWorker *worker);
    void eyecolorCallback(OAIHttpRequestWorker *worker);
    void eyecolor1Callback(OAIHttpRequestWorker *worker);
    void genderCallback(OAIHttpRequestWorker *worker);
    void gender1Callback(OAIHttpRequestWorker *worker);
    void generateAddressCallback(OAIHttpRequestWorker *worker);
    void generateAddress1Callback(OAIHttpRequestWorker *worker);
    void generateLifeStoryCallback(OAIHttpRequestWorker *worker);
    void generateLifeStory1Callback(OAIHttpRequestWorker *worker);
    void getCompressedPersonCallback(OAIHttpRequestWorker *worker);
    void getCompressedPerson1Callback(OAIHttpRequestWorker *worker);
    void getPersonCallback(OAIHttpRequestWorker *worker);
    void getPerson1Callback(OAIHttpRequestWorker *worker);
    void gpaCallback(OAIHttpRequestWorker *worker);
    void gpa1Callback(OAIHttpRequestWorker *worker);
    void haschildrenCallback(OAIHttpRequestWorker *worker);
    void haschildren1Callback(OAIHttpRequestWorker *worker);
    void hasdegreeCallback(OAIHttpRequestWorker *worker);
    void hasdegree1Callback(OAIHttpRequestWorker *worker);
    void heightCallback(OAIHttpRequestWorker *worker);
    void height1Callback(OAIHttpRequestWorker *worker);
    void incomeCallback(OAIHttpRequestWorker *worker);
    void income1Callback(OAIHttpRequestWorker *worker);
    void jobCallback(OAIHttpRequestWorker *worker);
    void job1Callback(OAIHttpRequestWorker *worker);
    void maritalstatusCallback(OAIHttpRequestWorker *worker);
    void maritalstatus1Callback(OAIHttpRequestWorker *worker);
    void nameCallback(OAIHttpRequestWorker *worker);
    void name1Callback(OAIHttpRequestWorker *worker);
    void politicalLeaningCallback(OAIHttpRequestWorker *worker);
    void politicalLeaning1Callback(OAIHttpRequestWorker *worker);
    void religionCallback(OAIHttpRequestWorker *worker);
    void religion1Callback(OAIHttpRequestWorker *worker);
    void usernameCallback(OAIHttpRequestWorker *worker);
    void username1Callback(OAIHttpRequestWorker *worker);
    void weightCallback(OAIHttpRequestWorker *worker);
    void weight1Callback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void ageSignal(qint32 summary);
    void age1Signal(qint32 summary);
    void bloodtypeSignal(QString summary);
    void bloodtype1Signal(QString summary);
    void creditcardnumberSignal(QString summary);
    void creditcardnumber1Signal(QString summary);
    void creditscoreSignal(qint32 summary);
    void creditscore1Signal(qint32 summary);
    void emailSignal(QString summary);
    void email1Signal(QString summary);
    void eyecolorSignal(QString summary);
    void eyecolor1Signal(QString summary);
    void genderSignal(QString summary);
    void gender1Signal(QString summary);
    void generateAddressSignal(OAIAddress summary);
    void generateAddress1Signal(OAIAddress summary);
    void generateLifeStorySignal(OAILifestory summary);
    void generateLifeStory1Signal(OAILifestory summary);
    void getCompressedPersonSignal(QList<QByteArray> summary);
    void getCompressedPerson1Signal(QList<QByteArray> summary);
    void getPersonSignal(OAIPerson summary);
    void getPerson1Signal(OAIPerson summary);
    void gpaSignal(double summary);
    void gpa1Signal(double summary);
    void haschildrenSignal(bool summary);
    void haschildren1Signal(bool summary);
    void hasdegreeSignal(bool summary);
    void hasdegree1Signal(bool summary);
    void heightSignal(double summary);
    void height1Signal(double summary);
    void incomeSignal(qint32 summary);
    void income1Signal(qint32 summary);
    void jobSignal(QString summary);
    void job1Signal(QString summary);
    void maritalstatusSignal(bool summary);
    void maritalstatus1Signal(bool summary);
    void nameSignal(QString summary);
    void name1Signal(QString summary);
    void politicalLeaningSignal(double summary);
    void politicalLeaning1Signal(double summary);
    void religionSignal(QString summary);
    void religion1Signal(QString summary);
    void usernameSignal(QString summary);
    void username1Signal(QString summary);
    void weightSignal(double summary);
    void weight1Signal(double summary);


    void ageSignalFull(OAIHttpRequestWorker *worker, qint32 summary);
    void age1SignalFull(OAIHttpRequestWorker *worker, qint32 summary);
    void bloodtypeSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void bloodtype1SignalFull(OAIHttpRequestWorker *worker, QString summary);
    void creditcardnumberSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void creditcardnumber1SignalFull(OAIHttpRequestWorker *worker, QString summary);
    void creditscoreSignalFull(OAIHttpRequestWorker *worker, qint32 summary);
    void creditscore1SignalFull(OAIHttpRequestWorker *worker, qint32 summary);
    void emailSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void email1SignalFull(OAIHttpRequestWorker *worker, QString summary);
    void eyecolorSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void eyecolor1SignalFull(OAIHttpRequestWorker *worker, QString summary);
    void genderSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void gender1SignalFull(OAIHttpRequestWorker *worker, QString summary);
    void generateAddressSignalFull(OAIHttpRequestWorker *worker, OAIAddress summary);
    void generateAddress1SignalFull(OAIHttpRequestWorker *worker, OAIAddress summary);
    void generateLifeStorySignalFull(OAIHttpRequestWorker *worker, OAILifestory summary);
    void generateLifeStory1SignalFull(OAIHttpRequestWorker *worker, OAILifestory summary);
    void getCompressedPersonSignalFull(OAIHttpRequestWorker *worker, QList<QByteArray> summary);
    void getCompressedPerson1SignalFull(OAIHttpRequestWorker *worker, QList<QByteArray> summary);
    void getPersonSignalFull(OAIHttpRequestWorker *worker, OAIPerson summary);
    void getPerson1SignalFull(OAIHttpRequestWorker *worker, OAIPerson summary);
    void gpaSignalFull(OAIHttpRequestWorker *worker, double summary);
    void gpa1SignalFull(OAIHttpRequestWorker *worker, double summary);
    void haschildrenSignalFull(OAIHttpRequestWorker *worker, bool summary);
    void haschildren1SignalFull(OAIHttpRequestWorker *worker, bool summary);
    void hasdegreeSignalFull(OAIHttpRequestWorker *worker, bool summary);
    void hasdegree1SignalFull(OAIHttpRequestWorker *worker, bool summary);
    void heightSignalFull(OAIHttpRequestWorker *worker, double summary);
    void height1SignalFull(OAIHttpRequestWorker *worker, double summary);
    void incomeSignalFull(OAIHttpRequestWorker *worker, qint32 summary);
    void income1SignalFull(OAIHttpRequestWorker *worker, qint32 summary);
    void jobSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void job1SignalFull(OAIHttpRequestWorker *worker, QString summary);
    void maritalstatusSignalFull(OAIHttpRequestWorker *worker, bool summary);
    void maritalstatus1SignalFull(OAIHttpRequestWorker *worker, bool summary);
    void nameSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void name1SignalFull(OAIHttpRequestWorker *worker, QString summary);
    void politicalLeaningSignalFull(OAIHttpRequestWorker *worker, double summary);
    void politicalLeaning1SignalFull(OAIHttpRequestWorker *worker, double summary);
    void religionSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void religion1SignalFull(OAIHttpRequestWorker *worker, QString summary);
    void usernameSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void username1SignalFull(OAIHttpRequestWorker *worker, QString summary);
    void weightSignalFull(OAIHttpRequestWorker *worker, double summary);
    void weight1SignalFull(OAIHttpRequestWorker *worker, double summary);

    Q_DECL_DEPRECATED_X("Use ageSignalError() instead")
    void ageSignalE(qint32 summary, QNetworkReply::NetworkError error_type, QString error_str);
    void ageSignalError(qint32 summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use age1SignalError() instead")
    void age1SignalE(qint32 summary, QNetworkReply::NetworkError error_type, QString error_str);
    void age1SignalError(qint32 summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use bloodtypeSignalError() instead")
    void bloodtypeSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void bloodtypeSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use bloodtype1SignalError() instead")
    void bloodtype1SignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void bloodtype1SignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use creditcardnumberSignalError() instead")
    void creditcardnumberSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void creditcardnumberSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use creditcardnumber1SignalError() instead")
    void creditcardnumber1SignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void creditcardnumber1SignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use creditscoreSignalError() instead")
    void creditscoreSignalE(qint32 summary, QNetworkReply::NetworkError error_type, QString error_str);
    void creditscoreSignalError(qint32 summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use creditscore1SignalError() instead")
    void creditscore1SignalE(qint32 summary, QNetworkReply::NetworkError error_type, QString error_str);
    void creditscore1SignalError(qint32 summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use emailSignalError() instead")
    void emailSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void emailSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use email1SignalError() instead")
    void email1SignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void email1SignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use eyecolorSignalError() instead")
    void eyecolorSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void eyecolorSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use eyecolor1SignalError() instead")
    void eyecolor1SignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void eyecolor1SignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use genderSignalError() instead")
    void genderSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void genderSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gender1SignalError() instead")
    void gender1SignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gender1SignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use generateAddressSignalError() instead")
    void generateAddressSignalE(OAIAddress summary, QNetworkReply::NetworkError error_type, QString error_str);
    void generateAddressSignalError(OAIAddress summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use generateAddress1SignalError() instead")
    void generateAddress1SignalE(OAIAddress summary, QNetworkReply::NetworkError error_type, QString error_str);
    void generateAddress1SignalError(OAIAddress summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use generateLifeStorySignalError() instead")
    void generateLifeStorySignalE(OAILifestory summary, QNetworkReply::NetworkError error_type, QString error_str);
    void generateLifeStorySignalError(OAILifestory summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use generateLifeStory1SignalError() instead")
    void generateLifeStory1SignalE(OAILifestory summary, QNetworkReply::NetworkError error_type, QString error_str);
    void generateLifeStory1SignalError(OAILifestory summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCompressedPersonSignalError() instead")
    void getCompressedPersonSignalE(QList<QByteArray> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCompressedPersonSignalError(QList<QByteArray> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCompressedPerson1SignalError() instead")
    void getCompressedPerson1SignalE(QList<QByteArray> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCompressedPerson1SignalError(QList<QByteArray> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPersonSignalError() instead")
    void getPersonSignalE(OAIPerson summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPersonSignalError(OAIPerson summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPerson1SignalError() instead")
    void getPerson1SignalE(OAIPerson summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPerson1SignalError(OAIPerson summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gpaSignalError() instead")
    void gpaSignalE(double summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gpaSignalError(double summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gpa1SignalError() instead")
    void gpa1SignalE(double summary, QNetworkReply::NetworkError error_type, QString error_str);
    void gpa1SignalError(double summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use haschildrenSignalError() instead")
    void haschildrenSignalE(bool summary, QNetworkReply::NetworkError error_type, QString error_str);
    void haschildrenSignalError(bool summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use haschildren1SignalError() instead")
    void haschildren1SignalE(bool summary, QNetworkReply::NetworkError error_type, QString error_str);
    void haschildren1SignalError(bool summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use hasdegreeSignalError() instead")
    void hasdegreeSignalE(bool summary, QNetworkReply::NetworkError error_type, QString error_str);
    void hasdegreeSignalError(bool summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use hasdegree1SignalError() instead")
    void hasdegree1SignalE(bool summary, QNetworkReply::NetworkError error_type, QString error_str);
    void hasdegree1SignalError(bool summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use heightSignalError() instead")
    void heightSignalE(double summary, QNetworkReply::NetworkError error_type, QString error_str);
    void heightSignalError(double summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use height1SignalError() instead")
    void height1SignalE(double summary, QNetworkReply::NetworkError error_type, QString error_str);
    void height1SignalError(double summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use incomeSignalError() instead")
    void incomeSignalE(qint32 summary, QNetworkReply::NetworkError error_type, QString error_str);
    void incomeSignalError(qint32 summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use income1SignalError() instead")
    void income1SignalE(qint32 summary, QNetworkReply::NetworkError error_type, QString error_str);
    void income1SignalError(qint32 summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use jobSignalError() instead")
    void jobSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void jobSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use job1SignalError() instead")
    void job1SignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void job1SignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use maritalstatusSignalError() instead")
    void maritalstatusSignalE(bool summary, QNetworkReply::NetworkError error_type, QString error_str);
    void maritalstatusSignalError(bool summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use maritalstatus1SignalError() instead")
    void maritalstatus1SignalE(bool summary, QNetworkReply::NetworkError error_type, QString error_str);
    void maritalstatus1SignalError(bool summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use nameSignalError() instead")
    void nameSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void nameSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use name1SignalError() instead")
    void name1SignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void name1SignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use politicalLeaningSignalError() instead")
    void politicalLeaningSignalE(double summary, QNetworkReply::NetworkError error_type, QString error_str);
    void politicalLeaningSignalError(double summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use politicalLeaning1SignalError() instead")
    void politicalLeaning1SignalE(double summary, QNetworkReply::NetworkError error_type, QString error_str);
    void politicalLeaning1SignalError(double summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use religionSignalError() instead")
    void religionSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void religionSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use religion1SignalError() instead")
    void religion1SignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void religion1SignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usernameSignalError() instead")
    void usernameSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void usernameSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use username1SignalError() instead")
    void username1SignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void username1SignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use weightSignalError() instead")
    void weightSignalE(double summary, QNetworkReply::NetworkError error_type, QString error_str);
    void weightSignalError(double summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use weight1SignalError() instead")
    void weight1SignalE(double summary, QNetworkReply::NetworkError error_type, QString error_str);
    void weight1SignalError(double summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use ageSignalErrorFull() instead")
    void ageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void ageSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use age1SignalErrorFull() instead")
    void age1SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void age1SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use bloodtypeSignalErrorFull() instead")
    void bloodtypeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void bloodtypeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use bloodtype1SignalErrorFull() instead")
    void bloodtype1SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void bloodtype1SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use creditcardnumberSignalErrorFull() instead")
    void creditcardnumberSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void creditcardnumberSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use creditcardnumber1SignalErrorFull() instead")
    void creditcardnumber1SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void creditcardnumber1SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use creditscoreSignalErrorFull() instead")
    void creditscoreSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void creditscoreSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use creditscore1SignalErrorFull() instead")
    void creditscore1SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void creditscore1SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use emailSignalErrorFull() instead")
    void emailSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void emailSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use email1SignalErrorFull() instead")
    void email1SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void email1SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use eyecolorSignalErrorFull() instead")
    void eyecolorSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void eyecolorSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use eyecolor1SignalErrorFull() instead")
    void eyecolor1SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void eyecolor1SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use genderSignalErrorFull() instead")
    void genderSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void genderSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gender1SignalErrorFull() instead")
    void gender1SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gender1SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use generateAddressSignalErrorFull() instead")
    void generateAddressSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void generateAddressSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use generateAddress1SignalErrorFull() instead")
    void generateAddress1SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void generateAddress1SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use generateLifeStorySignalErrorFull() instead")
    void generateLifeStorySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void generateLifeStorySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use generateLifeStory1SignalErrorFull() instead")
    void generateLifeStory1SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void generateLifeStory1SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCompressedPersonSignalErrorFull() instead")
    void getCompressedPersonSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCompressedPersonSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCompressedPerson1SignalErrorFull() instead")
    void getCompressedPerson1SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCompressedPerson1SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPersonSignalErrorFull() instead")
    void getPersonSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPersonSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPerson1SignalErrorFull() instead")
    void getPerson1SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPerson1SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gpaSignalErrorFull() instead")
    void gpaSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gpaSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use gpa1SignalErrorFull() instead")
    void gpa1SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void gpa1SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use haschildrenSignalErrorFull() instead")
    void haschildrenSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void haschildrenSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use haschildren1SignalErrorFull() instead")
    void haschildren1SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void haschildren1SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use hasdegreeSignalErrorFull() instead")
    void hasdegreeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void hasdegreeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use hasdegree1SignalErrorFull() instead")
    void hasdegree1SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void hasdegree1SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use heightSignalErrorFull() instead")
    void heightSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void heightSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use height1SignalErrorFull() instead")
    void height1SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void height1SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use incomeSignalErrorFull() instead")
    void incomeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void incomeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use income1SignalErrorFull() instead")
    void income1SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void income1SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use jobSignalErrorFull() instead")
    void jobSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void jobSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use job1SignalErrorFull() instead")
    void job1SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void job1SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use maritalstatusSignalErrorFull() instead")
    void maritalstatusSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void maritalstatusSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use maritalstatus1SignalErrorFull() instead")
    void maritalstatus1SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void maritalstatus1SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use nameSignalErrorFull() instead")
    void nameSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void nameSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use name1SignalErrorFull() instead")
    void name1SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void name1SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use politicalLeaningSignalErrorFull() instead")
    void politicalLeaningSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void politicalLeaningSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use politicalLeaning1SignalErrorFull() instead")
    void politicalLeaning1SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void politicalLeaning1SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use religionSignalErrorFull() instead")
    void religionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void religionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use religion1SignalErrorFull() instead")
    void religion1SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void religion1SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usernameSignalErrorFull() instead")
    void usernameSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usernameSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use username1SignalErrorFull() instead")
    void username1SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void username1SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use weightSignalErrorFull() instead")
    void weightSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void weightSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use weight1SignalErrorFull() instead")
    void weight1SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void weight1SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
