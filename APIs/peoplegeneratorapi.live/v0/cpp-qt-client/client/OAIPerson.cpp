/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPerson.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPerson::OAIPerson(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPerson::OAIPerson() {
    this->initializeModel();
}

OAIPerson::~OAIPerson() {}

void OAIPerson::initializeModel() {

    m_address_isSet = false;
    m_address_isValid = false;

    m_age_isSet = false;
    m_age_isValid = false;

    m_blood_type_isSet = false;
    m_blood_type_isValid = false;

    m_cc_number_isSet = false;
    m_cc_number_isValid = false;

    m_credit_score_isSet = false;
    m_credit_score_isValid = false;

    m_do_b_isSet = false;
    m_do_b_isValid = false;

    m_email_isSet = false;
    m_email_isValid = false;

    m_eye_color_isSet = false;
    m_eye_color_isValid = false;

    m_gender_isSet = false;
    m_gender_isValid = false;

    m_gpa_isSet = false;
    m_gpa_isValid = false;

    m_has_children_isSet = false;
    m_has_children_isValid = false;

    m_has_degree_isSet = false;
    m_has_degree_isValid = false;

    m_height_isSet = false;
    m_height_isValid = false;

    m_income_usd_isSet = false;
    m_income_usd_isValid = false;

    m_job_isSet = false;
    m_job_isValid = false;

    m_married_isSet = false;
    m_married_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_political_leaning_isSet = false;
    m_political_leaning_isValid = false;

    m_religion_isSet = false;
    m_religion_isValid = false;

    m_username_isSet = false;
    m_username_isValid = false;

    m_weight_isSet = false;
    m_weight_isValid = false;
}

void OAIPerson::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPerson::fromJsonObject(QJsonObject json) {

    m_address_isValid = ::OpenAPI::fromJsonValue(m_address, json[QString("address")]);
    m_address_isSet = !json[QString("address")].isNull() && m_address_isValid;

    m_age_isValid = ::OpenAPI::fromJsonValue(m_age, json[QString("age")]);
    m_age_isSet = !json[QString("age")].isNull() && m_age_isValid;

    m_blood_type_isValid = ::OpenAPI::fromJsonValue(m_blood_type, json[QString("bloodType")]);
    m_blood_type_isSet = !json[QString("bloodType")].isNull() && m_blood_type_isValid;

    m_cc_number_isValid = ::OpenAPI::fromJsonValue(m_cc_number, json[QString("ccNumber")]);
    m_cc_number_isSet = !json[QString("ccNumber")].isNull() && m_cc_number_isValid;

    m_credit_score_isValid = ::OpenAPI::fromJsonValue(m_credit_score, json[QString("creditScore")]);
    m_credit_score_isSet = !json[QString("creditScore")].isNull() && m_credit_score_isValid;

    m_do_b_isValid = ::OpenAPI::fromJsonValue(m_do_b, json[QString("doB")]);
    m_do_b_isSet = !json[QString("doB")].isNull() && m_do_b_isValid;

    m_email_isValid = ::OpenAPI::fromJsonValue(m_email, json[QString("email")]);
    m_email_isSet = !json[QString("email")].isNull() && m_email_isValid;

    m_eye_color_isValid = ::OpenAPI::fromJsonValue(m_eye_color, json[QString("eyeColor")]);
    m_eye_color_isSet = !json[QString("eyeColor")].isNull() && m_eye_color_isValid;

    m_gender_isValid = ::OpenAPI::fromJsonValue(m_gender, json[QString("gender")]);
    m_gender_isSet = !json[QString("gender")].isNull() && m_gender_isValid;

    m_gpa_isValid = ::OpenAPI::fromJsonValue(m_gpa, json[QString("gpa")]);
    m_gpa_isSet = !json[QString("gpa")].isNull() && m_gpa_isValid;

    m_has_children_isValid = ::OpenAPI::fromJsonValue(m_has_children, json[QString("hasChildren")]);
    m_has_children_isSet = !json[QString("hasChildren")].isNull() && m_has_children_isValid;

    m_has_degree_isValid = ::OpenAPI::fromJsonValue(m_has_degree, json[QString("hasDegree")]);
    m_has_degree_isSet = !json[QString("hasDegree")].isNull() && m_has_degree_isValid;

    m_height_isValid = ::OpenAPI::fromJsonValue(m_height, json[QString("height")]);
    m_height_isSet = !json[QString("height")].isNull() && m_height_isValid;

    m_income_usd_isValid = ::OpenAPI::fromJsonValue(m_income_usd, json[QString("incomeUSD")]);
    m_income_usd_isSet = !json[QString("incomeUSD")].isNull() && m_income_usd_isValid;

    m_job_isValid = ::OpenAPI::fromJsonValue(m_job, json[QString("job")]);
    m_job_isSet = !json[QString("job")].isNull() && m_job_isValid;

    m_married_isValid = ::OpenAPI::fromJsonValue(m_married, json[QString("married")]);
    m_married_isSet = !json[QString("married")].isNull() && m_married_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_political_leaning_isValid = ::OpenAPI::fromJsonValue(m_political_leaning, json[QString("politicalLeaning")]);
    m_political_leaning_isSet = !json[QString("politicalLeaning")].isNull() && m_political_leaning_isValid;

    m_religion_isValid = ::OpenAPI::fromJsonValue(m_religion, json[QString("religion")]);
    m_religion_isSet = !json[QString("religion")].isNull() && m_religion_isValid;

    m_username_isValid = ::OpenAPI::fromJsonValue(m_username, json[QString("username")]);
    m_username_isSet = !json[QString("username")].isNull() && m_username_isValid;

    m_weight_isValid = ::OpenAPI::fromJsonValue(m_weight, json[QString("weight")]);
    m_weight_isSet = !json[QString("weight")].isNull() && m_weight_isValid;
}

QString OAIPerson::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPerson::asJsonObject() const {
    QJsonObject obj;
    if (m_address.isSet()) {
        obj.insert(QString("address"), ::OpenAPI::toJsonValue(m_address));
    }
    if (m_age_isSet) {
        obj.insert(QString("age"), ::OpenAPI::toJsonValue(m_age));
    }
    if (m_blood_type_isSet) {
        obj.insert(QString("bloodType"), ::OpenAPI::toJsonValue(m_blood_type));
    }
    if (m_cc_number_isSet) {
        obj.insert(QString("ccNumber"), ::OpenAPI::toJsonValue(m_cc_number));
    }
    if (m_credit_score_isSet) {
        obj.insert(QString("creditScore"), ::OpenAPI::toJsonValue(m_credit_score));
    }
    if (m_do_b_isSet) {
        obj.insert(QString("doB"), ::OpenAPI::toJsonValue(m_do_b));
    }
    if (m_email_isSet) {
        obj.insert(QString("email"), ::OpenAPI::toJsonValue(m_email));
    }
    if (m_eye_color_isSet) {
        obj.insert(QString("eyeColor"), ::OpenAPI::toJsonValue(m_eye_color));
    }
    if (m_gender_isSet) {
        obj.insert(QString("gender"), ::OpenAPI::toJsonValue(m_gender));
    }
    if (m_gpa_isSet) {
        obj.insert(QString("gpa"), ::OpenAPI::toJsonValue(m_gpa));
    }
    if (m_has_children_isSet) {
        obj.insert(QString("hasChildren"), ::OpenAPI::toJsonValue(m_has_children));
    }
    if (m_has_degree_isSet) {
        obj.insert(QString("hasDegree"), ::OpenAPI::toJsonValue(m_has_degree));
    }
    if (m_height_isSet) {
        obj.insert(QString("height"), ::OpenAPI::toJsonValue(m_height));
    }
    if (m_income_usd_isSet) {
        obj.insert(QString("incomeUSD"), ::OpenAPI::toJsonValue(m_income_usd));
    }
    if (m_job_isSet) {
        obj.insert(QString("job"), ::OpenAPI::toJsonValue(m_job));
    }
    if (m_married_isSet) {
        obj.insert(QString("married"), ::OpenAPI::toJsonValue(m_married));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_political_leaning_isSet) {
        obj.insert(QString("politicalLeaning"), ::OpenAPI::toJsonValue(m_political_leaning));
    }
    if (m_religion_isSet) {
        obj.insert(QString("religion"), ::OpenAPI::toJsonValue(m_religion));
    }
    if (m_username_isSet) {
        obj.insert(QString("username"), ::OpenAPI::toJsonValue(m_username));
    }
    if (m_weight_isSet) {
        obj.insert(QString("weight"), ::OpenAPI::toJsonValue(m_weight));
    }
    return obj;
}

OAIAddress OAIPerson::getAddress() const {
    return m_address;
}
void OAIPerson::setAddress(const OAIAddress &address) {
    m_address = address;
    m_address_isSet = true;
}

bool OAIPerson::is_address_Set() const{
    return m_address_isSet;
}

bool OAIPerson::is_address_Valid() const{
    return m_address_isValid;
}

qint32 OAIPerson::getAge() const {
    return m_age;
}
void OAIPerson::setAge(const qint32 &age) {
    m_age = age;
    m_age_isSet = true;
}

bool OAIPerson::is_age_Set() const{
    return m_age_isSet;
}

bool OAIPerson::is_age_Valid() const{
    return m_age_isValid;
}

QString OAIPerson::getBloodType() const {
    return m_blood_type;
}
void OAIPerson::setBloodType(const QString &blood_type) {
    m_blood_type = blood_type;
    m_blood_type_isSet = true;
}

bool OAIPerson::is_blood_type_Set() const{
    return m_blood_type_isSet;
}

bool OAIPerson::is_blood_type_Valid() const{
    return m_blood_type_isValid;
}

QString OAIPerson::getCcNumber() const {
    return m_cc_number;
}
void OAIPerson::setCcNumber(const QString &cc_number) {
    m_cc_number = cc_number;
    m_cc_number_isSet = true;
}

bool OAIPerson::is_cc_number_Set() const{
    return m_cc_number_isSet;
}

bool OAIPerson::is_cc_number_Valid() const{
    return m_cc_number_isValid;
}

qint32 OAIPerson::getCreditScore() const {
    return m_credit_score;
}
void OAIPerson::setCreditScore(const qint32 &credit_score) {
    m_credit_score = credit_score;
    m_credit_score_isSet = true;
}

bool OAIPerson::is_credit_score_Set() const{
    return m_credit_score_isSet;
}

bool OAIPerson::is_credit_score_Valid() const{
    return m_credit_score_isValid;
}

QString OAIPerson::getDoB() const {
    return m_do_b;
}
void OAIPerson::setDoB(const QString &do_b) {
    m_do_b = do_b;
    m_do_b_isSet = true;
}

bool OAIPerson::is_do_b_Set() const{
    return m_do_b_isSet;
}

bool OAIPerson::is_do_b_Valid() const{
    return m_do_b_isValid;
}

QString OAIPerson::getEmail() const {
    return m_email;
}
void OAIPerson::setEmail(const QString &email) {
    m_email = email;
    m_email_isSet = true;
}

bool OAIPerson::is_email_Set() const{
    return m_email_isSet;
}

bool OAIPerson::is_email_Valid() const{
    return m_email_isValid;
}

QString OAIPerson::getEyeColor() const {
    return m_eye_color;
}
void OAIPerson::setEyeColor(const QString &eye_color) {
    m_eye_color = eye_color;
    m_eye_color_isSet = true;
}

bool OAIPerson::is_eye_color_Set() const{
    return m_eye_color_isSet;
}

bool OAIPerson::is_eye_color_Valid() const{
    return m_eye_color_isValid;
}

QString OAIPerson::getGender() const {
    return m_gender;
}
void OAIPerson::setGender(const QString &gender) {
    m_gender = gender;
    m_gender_isSet = true;
}

bool OAIPerson::is_gender_Set() const{
    return m_gender_isSet;
}

bool OAIPerson::is_gender_Valid() const{
    return m_gender_isValid;
}

double OAIPerson::getGpa() const {
    return m_gpa;
}
void OAIPerson::setGpa(const double &gpa) {
    m_gpa = gpa;
    m_gpa_isSet = true;
}

bool OAIPerson::is_gpa_Set() const{
    return m_gpa_isSet;
}

bool OAIPerson::is_gpa_Valid() const{
    return m_gpa_isValid;
}

bool OAIPerson::isHasChildren() const {
    return m_has_children;
}
void OAIPerson::setHasChildren(const bool &has_children) {
    m_has_children = has_children;
    m_has_children_isSet = true;
}

bool OAIPerson::is_has_children_Set() const{
    return m_has_children_isSet;
}

bool OAIPerson::is_has_children_Valid() const{
    return m_has_children_isValid;
}

bool OAIPerson::isHasDegree() const {
    return m_has_degree;
}
void OAIPerson::setHasDegree(const bool &has_degree) {
    m_has_degree = has_degree;
    m_has_degree_isSet = true;
}

bool OAIPerson::is_has_degree_Set() const{
    return m_has_degree_isSet;
}

bool OAIPerson::is_has_degree_Valid() const{
    return m_has_degree_isValid;
}

double OAIPerson::getHeight() const {
    return m_height;
}
void OAIPerson::setHeight(const double &height) {
    m_height = height;
    m_height_isSet = true;
}

bool OAIPerson::is_height_Set() const{
    return m_height_isSet;
}

bool OAIPerson::is_height_Valid() const{
    return m_height_isValid;
}

qint32 OAIPerson::getIncomeUsd() const {
    return m_income_usd;
}
void OAIPerson::setIncomeUsd(const qint32 &income_usd) {
    m_income_usd = income_usd;
    m_income_usd_isSet = true;
}

bool OAIPerson::is_income_usd_Set() const{
    return m_income_usd_isSet;
}

bool OAIPerson::is_income_usd_Valid() const{
    return m_income_usd_isValid;
}

QString OAIPerson::getJob() const {
    return m_job;
}
void OAIPerson::setJob(const QString &job) {
    m_job = job;
    m_job_isSet = true;
}

bool OAIPerson::is_job_Set() const{
    return m_job_isSet;
}

bool OAIPerson::is_job_Valid() const{
    return m_job_isValid;
}

bool OAIPerson::isMarried() const {
    return m_married;
}
void OAIPerson::setMarried(const bool &married) {
    m_married = married;
    m_married_isSet = true;
}

bool OAIPerson::is_married_Set() const{
    return m_married_isSet;
}

bool OAIPerson::is_married_Valid() const{
    return m_married_isValid;
}

QString OAIPerson::getName() const {
    return m_name;
}
void OAIPerson::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIPerson::is_name_Set() const{
    return m_name_isSet;
}

bool OAIPerson::is_name_Valid() const{
    return m_name_isValid;
}

double OAIPerson::getPoliticalLeaning() const {
    return m_political_leaning;
}
void OAIPerson::setPoliticalLeaning(const double &political_leaning) {
    m_political_leaning = political_leaning;
    m_political_leaning_isSet = true;
}

bool OAIPerson::is_political_leaning_Set() const{
    return m_political_leaning_isSet;
}

bool OAIPerson::is_political_leaning_Valid() const{
    return m_political_leaning_isValid;
}

QString OAIPerson::getReligion() const {
    return m_religion;
}
void OAIPerson::setReligion(const QString &religion) {
    m_religion = religion;
    m_religion_isSet = true;
}

bool OAIPerson::is_religion_Set() const{
    return m_religion_isSet;
}

bool OAIPerson::is_religion_Valid() const{
    return m_religion_isValid;
}

QString OAIPerson::getUsername() const {
    return m_username;
}
void OAIPerson::setUsername(const QString &username) {
    m_username = username;
    m_username_isSet = true;
}

bool OAIPerson::is_username_Set() const{
    return m_username_isSet;
}

bool OAIPerson::is_username_Valid() const{
    return m_username_isValid;
}

double OAIPerson::getWeight() const {
    return m_weight;
}
void OAIPerson::setWeight(const double &weight) {
    m_weight = weight;
    m_weight_isSet = true;
}

bool OAIPerson::is_weight_Set() const{
    return m_weight_isSet;
}

bool OAIPerson::is_weight_Valid() const{
    return m_weight_isValid;
}

bool OAIPerson::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_address.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_age_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_blood_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cc_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_credit_score_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_do_b_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_eye_color_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gender_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gpa_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_children_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_degree_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_height_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_income_usd_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_job_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_married_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_political_leaning_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_religion_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_username_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_weight_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPerson::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
