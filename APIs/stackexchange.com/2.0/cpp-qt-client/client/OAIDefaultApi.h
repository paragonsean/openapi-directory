/**
 * StackExchange
 * Stack Exchange is a network of 130+ Q&A communities including Stack Overflow. 
 *
 * The version of the OpenAPI document: 2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDefaultApi_H
#define OAI_OAIDefaultApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAccess_tokens_inner.h"
#include "OAIAccount_merge_inner.h"
#include "OAIAnswers_inner.h"
#include "OAIBadges_inner.h"
#include "OAIComments_inner.h"
#include "OAICreated_comment.h"
#include "OAIError.h"
#include "OAIErrors_inner.h"
#include "OAIEvents_inner.h"
#include "OAIFilters_inner.h"
#include "OAIInbox_items_inner.h"
#include "OAIInbox_items_inner_site.h"
#include "OAIInfo_object.h"
#include "OAINetwork_users_inner.h"
#include "OAINotifications_inner.h"
#include "OAIPosts_inner.h"
#include "OAIPrivileges_inner.h"
#include "OAIQuestion_timeline_events_inner.h"
#include "OAIQuestions_inner.h"
#include "OAIReputation_changes_inner.h"
#include "OAIReputation_history_inner.h"
#include "OAIRevisions_inner.h"
#include "OAISingle_filter.h"
#include "OAISuggested_edits_inner.h"
#include "OAITag_score_objects_inner.h"
#include "OAITag_synonyms_inner.h"
#include "OAITag_wikis_inner.h"
#include "OAITags_inner.h"
#include "OAITop_tag_objects_inner.h"
#include "OAIUser.h"
#include "OAIUser_timeline_objects_inner.h"
#include "OAIUsers_inner.h"
#include "OAIWrite_permissions_inner.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDefaultApi : public QObject {
    Q_OBJECT

public:
    OAIDefaultApi(const int timeOut = 0);
    ~OAIDefaultApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  access_tokens QString [required]
    * @param[in]  pagesize qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  callback QString [optional]
    */
    virtual void accessTokensAccessTokensGet(const QString &access_tokens, const ::OpenAPI::OptionalParam<qint32> &pagesize = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  access_tokens QString [required]
    * @param[in]  pagesize qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  callback QString [optional]
    */
    virtual void accessTokensAccessTokensInvalidateGet(const QString &access_tokens, const ::OpenAPI::OptionalParam<qint32> &pagesize = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  site QString [required]
    * @param[in]  order QString [optional]
    * @param[in]  max QString [optional]
    * @param[in]  min QString [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  fromdate qint32 [optional]
    * @param[in]  todate qint32 [optional]
    * @param[in]  pagesize qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  callback QString [optional]
    */
    virtual void answersGet(const QString &site, const ::OpenAPI::OptionalParam<QString> &order = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &min = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &fromdate = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &todate = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &pagesize = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  ids QString [required]
    * @param[in]  site QString [required]
    * @param[in]  order QString [optional]
    * @param[in]  max QString [optional]
    * @param[in]  min QString [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  fromdate qint32 [optional]
    * @param[in]  todate qint32 [optional]
    * @param[in]  pagesize qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  callback QString [optional]
    */
    virtual void answersIdsCommentsGet(const QString &ids, const QString &site, const ::OpenAPI::OptionalParam<QString> &order = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &min = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &fromdate = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &todate = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &pagesize = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  ids QString [required]
    * @param[in]  site QString [required]
    * @param[in]  order QString [optional]
    * @param[in]  max QString [optional]
    * @param[in]  min QString [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  fromdate qint32 [optional]
    * @param[in]  todate qint32 [optional]
    * @param[in]  pagesize qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  callback QString [optional]
    */
    virtual void answersIdsGet(const QString &ids, const QString &site, const ::OpenAPI::OptionalParam<QString> &order = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &min = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &fromdate = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &todate = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &pagesize = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  access_tokens QString [required]
    * @param[in]  pagesize qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  callback QString [optional]
    */
    virtual void appsAccessTokensDeAuthenticateGet(const QString &access_tokens, const ::OpenAPI::OptionalParam<qint32> &pagesize = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  site QString [required]
    * @param[in]  inname QString [optional]
    * @param[in]  order QString [optional]
    * @param[in]  max QString [optional]
    * @param[in]  min QString [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  fromdate qint32 [optional]
    * @param[in]  todate qint32 [optional]
    * @param[in]  pagesize qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  callback QString [optional]
    */
    virtual void badgesGet(const QString &site, const ::OpenAPI::OptionalParam<QString> &inname = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &order = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &min = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &fromdate = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &todate = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &pagesize = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  ids QString [required]
    * @param[in]  site QString [required]
    * @param[in]  order QString [optional]
    * @param[in]  max QString [optional]
    * @param[in]  min QString [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  fromdate qint32 [optional]
    * @param[in]  todate qint32 [optional]
    * @param[in]  pagesize qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  callback QString [optional]
    */
    virtual void badgesIdsGet(const QString &ids, const QString &site, const ::OpenAPI::OptionalParam<QString> &order = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &min = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &fromdate = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &todate = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &pagesize = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  ids QString [required]
    * @param[in]  site QString [required]
    * @param[in]  fromdate qint32 [optional]
    * @param[in]  todate qint32 [optional]
    * @param[in]  pagesize qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  callback QString [optional]
    */
    virtual void badgesIdsRecipientsGet(const QString &ids, const QString &site, const ::OpenAPI::OptionalParam<qint32> &fromdate = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &todate = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &pagesize = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  site QString [required]
    * @param[in]  inname QString [optional]
    * @param[in]  order QString [optional]
    * @param[in]  max QString [optional]
    * @param[in]  min QString [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  fromdate qint32 [optional]
    * @param[in]  todate qint32 [optional]
    * @param[in]  pagesize qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  callback QString [optional]
    */
    virtual void badgesNameGet(const QString &site, const ::OpenAPI::OptionalParam<QString> &inname = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &order = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &min = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &fromdate = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &todate = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &pagesize = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  site QString [required]
    * @param[in]  fromdate qint32 [optional]
    * @param[in]  todate qint32 [optional]
    * @param[in]  pagesize qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  callback QString [optional]
    */
    virtual void badgesRecipientsGet(const QString &site, const ::OpenAPI::OptionalParam<qint32> &fromdate = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &todate = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &pagesize = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  site QString [required]
    * @param[in]  inname QString [optional]
    * @param[in]  order QString [optional]
    * @param[in]  max QString [optional]
    * @param[in]  min QString [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  fromdate qint32 [optional]
    * @param[in]  todate qint32 [optional]
    * @param[in]  pagesize qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  callback QString [optional]
    */
    virtual void badgesTagsGet(const QString &site, const ::OpenAPI::OptionalParam<QString> &inname = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &order = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &min = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &fromdate = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &todate = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &pagesize = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  site QString [required]
    * @param[in]  order QString [optional]
    * @param[in]  max QString [optional]
    * @param[in]  min QString [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  fromdate qint32 [optional]
    * @param[in]  todate qint32 [optional]
    * @param[in]  pagesize qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  callback QString [optional]
    */
    virtual void commentsGet(const QString &site, const ::OpenAPI::OptionalParam<QString> &order = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &min = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &fromdate = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &todate = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &pagesize = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  site QString [required]
    * @param[in]  filter QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  preview bool [optional]
    */
    virtual void commentsIdDeletePost(const qint32 &id, const QString &site, const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &preview = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  site QString [required]
    * @param[in]  filter QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  body QString [optional]
    * @param[in]  preview bool [optional]
    */
    virtual void commentsIdEditPost(const qint32 &id, const QString &site, const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &body = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &preview = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  ids QString [required]
    * @param[in]  site QString [required]
    * @param[in]  order QString [optional]
    * @param[in]  max QString [optional]
    * @param[in]  min QString [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  fromdate qint32 [optional]
    * @param[in]  todate qint32 [optional]
    * @param[in]  pagesize qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  callback QString [optional]
    */
    virtual void commentsIdsGet(const QString &ids, const QString &site, const ::OpenAPI::OptionalParam<QString> &order = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &min = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &fromdate = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &todate = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &pagesize = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  pagesize qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  callback QString [optional]
    */
    virtual void errorsGet(const ::OpenAPI::OptionalParam<qint32> &pagesize = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id qint32 [required]
    */
    virtual void errorsIdGet(const qint32 &id);

    /**
    * @param[in]  site QString [required]
    * @param[in]  pagesize qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  since qint32 [optional]
    */
    virtual void eventsGet(const QString &site, const ::OpenAPI::OptionalParam<qint32> &pagesize = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &since = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  base QString [optional]
    * @param[in]  exclude QString [optional]
    * @param[in]  include QString [optional]
    * @param[in]  unsafe bool [optional]
    */
    virtual void filtersCreateGet(const ::OpenAPI::OptionalParam<QString> &base = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &exclude = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &include = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &unsafe = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  filters QString [required]
    */
    virtual void filtersFiltersGet(const QString &filters);

    /**
    * @param[in]  pagesize qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  callback QString [optional]
    */
    virtual void inboxGet(const ::OpenAPI::OptionalParam<qint32> &pagesize = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  pagesize qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  since qint32 [optional]
    */
    virtual void inboxUnreadGet(const ::OpenAPI::OptionalParam<qint32> &pagesize = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &since = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  site QString [required]
    */
    virtual void infoGet(const QString &site);

    /**
    * @param[in]  site QString [required]
    * @param[in]  order QString [optional]
    * @param[in]  max QString [optional]
    * @param[in]  min QString [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  fromdate qint32 [optional]
    * @param[in]  todate qint32 [optional]
    * @param[in]  pagesize qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  callback QString [optional]
    */
    virtual void meAnswersGet(const QString &site, const ::OpenAPI::OptionalParam<QString> &order = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &min = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &fromdate = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &todate = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &pagesize = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  pagesize qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  callback QString [optional]
    */
    virtual void meAssociatedGet(const ::OpenAPI::OptionalParam<qint32> &pagesize = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  site QString [required]
    * @param[in]  order QString [optional]
    * @param[in]  max QString [optional]
    * @param[in]  min QString [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  fromdate qint32 [optional]
    * @param[in]  todate qint32 [optional]
    * @param[in]  pagesize qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  callback QString [optional]
    */
    virtual void meBadgesGet(const QString &site, const ::OpenAPI::OptionalParam<QString> &order = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &min = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &fromdate = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &todate = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &pagesize = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  site QString [required]
    * @param[in]  order QString [optional]
    * @param[in]  max QString [optional]
    * @param[in]  min QString [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  fromdate qint32 [optional]
    * @param[in]  todate qint32 [optional]
    * @param[in]  pagesize qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  callback QString [optional]
    */
    virtual void meCommentsGet(const QString &site, const ::OpenAPI::OptionalParam<QString> &order = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &min = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &fromdate = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &todate = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &pagesize = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  to_id qint32 [required]
    * @param[in]  site QString [required]
    * @param[in]  order QString [optional]
    * @param[in]  max QString [optional]
    * @param[in]  min QString [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  fromdate qint32 [optional]
    * @param[in]  todate qint32 [optional]
    * @param[in]  pagesize qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  callback QString [optional]
    */
    virtual void meCommentsToIdGet(const qint32 &to_id, const QString &site, const ::OpenAPI::OptionalParam<QString> &order = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &min = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &fromdate = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &todate = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &pagesize = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  site QString [required]
    * @param[in]  order QString [optional]
    * @param[in]  max QString [optional]
    * @param[in]  min QString [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  fromdate qint32 [optional]
    * @param[in]  todate qint32 [optional]
    * @param[in]  pagesize qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  callback QString [optional]
    */
    virtual void meFavoritesGet(const QString &site, const ::OpenAPI::OptionalParam<QString> &order = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &min = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &fromdate = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &todate = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &pagesize = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  site QString [required]
    * @param[in]  order QString [optional]
    * @param[in]  max QString [optional]
    * @param[in]  min QString [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  fromdate qint32 [optional]
    * @param[in]  todate qint32 [optional]
    * @param[in]  pagesize qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  callback QString [optional]
    */
    virtual void meGet(const QString &site, const ::OpenAPI::OptionalParam<QString> &order = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &min = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &fromdate = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &todate = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &pagesize = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  site QString [required]
    * @param[in]  pagesize qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  callback QString [optional]
    */
    virtual void meInboxGet(const QString &site, const ::OpenAPI::OptionalParam<qint32> &pagesize = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  site QString [required]
    * @param[in]  pagesize qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  since qint32 [optional]
    */
    virtual void meInboxUnreadGet(const QString &site, const ::OpenAPI::OptionalParam<qint32> &pagesize = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &since = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  site QString [required]
    * @param[in]  order QString [optional]
    * @param[in]  max QString [optional]
    * @param[in]  min QString [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  fromdate qint32 [optional]
    * @param[in]  todate qint32 [optional]
    * @param[in]  pagesize qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  callback QString [optional]
    */
    virtual void meMentionedGet(const QString &site, const ::OpenAPI::OptionalParam<QString> &order = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &min = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &fromdate = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &todate = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &pagesize = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  pagesize qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  callback QString [optional]
    */
    virtual void meMergesGet(const ::OpenAPI::OptionalParam<qint32> &pagesize = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  site QString [required]
    * @param[in]  pagesize qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  callback QString [optional]
    */
    virtual void meNotificationsGet(const QString &site, const ::OpenAPI::OptionalParam<qint32> &pagesize = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  site QString [required]
    * @param[in]  pagesize qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  callback QString [optional]
    */
    virtual void meNotificationsUnreadGet(const QString &site, const ::OpenAPI::OptionalParam<qint32> &pagesize = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  site QString [required]
    * @param[in]  pagesize qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  callback QString [optional]
    */
    virtual void mePrivilegesGet(const QString &site, const ::OpenAPI::OptionalParam<qint32> &pagesize = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  site QString [required]
    * @param[in]  order QString [optional]
    * @param[in]  max QString [optional]
    * @param[in]  min QString [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  fromdate qint32 [optional]
    * @param[in]  todate qint32 [optional]
    * @param[in]  pagesize qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  callback QString [optional]
    */
    virtual void meQuestionsFeaturedGet(const QString &site, const ::OpenAPI::OptionalParam<QString> &order = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &min = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &fromdate = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &todate = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &pagesize = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  site QString [required]
    * @param[in]  order QString [optional]
    * @param[in]  max QString [optional]
    * @param[in]  min QString [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  fromdate qint32 [optional]
    * @param[in]  todate qint32 [optional]
    * @param[in]  pagesize qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  callback QString [optional]
    */
    virtual void meQuestionsGet(const QString &site, const ::OpenAPI::OptionalParam<QString> &order = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &min = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &fromdate = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &todate = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &pagesize = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  site QString [required]
    * @param[in]  order QString [optional]
    * @param[in]  max QString [optional]
    * @param[in]  min QString [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  fromdate qint32 [optional]
    * @param[in]  todate qint32 [optional]
    * @param[in]  pagesize qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  callback QString [optional]
    */
    virtual void meQuestionsNoAnswersGet(const QString &site, const ::OpenAPI::OptionalParam<QString> &order = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &min = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &fromdate = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &todate = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &pagesize = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  site QString [required]
    * @param[in]  order QString [optional]
    * @param[in]  max QString [optional]
    * @param[in]  min QString [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  fromdate qint32 [optional]
    * @param[in]  todate qint32 [optional]
    * @param[in]  pagesize qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  callback QString [optional]
    */
    virtual void meQuestionsUnacceptedGet(const QString &site, const ::OpenAPI::OptionalParam<QString> &order = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &min = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &fromdate = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &todate = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &pagesize = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  site QString [required]
    * @param[in]  order QString [optional]
    * @param[in]  max QString [optional]
    * @param[in]  min QString [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  fromdate qint32 [optional]
    * @param[in]  todate qint32 [optional]
    * @param[in]  pagesize qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  callback QString [optional]
    */
    virtual void meQuestionsUnansweredGet(const QString &site, const ::OpenAPI::OptionalParam<QString> &order = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &min = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &fromdate = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &todate = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &pagesize = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  site QString [required]
    * @param[in]  filter QString [optional]
    * @param[in]  callback QString [optional]
    */
    virtual void meReputationGet(const QString &site, const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  site QString [required]
    * @param[in]  pagesize qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  callback QString [optional]
    */
    virtual void meReputationHistoryFullGet(const QString &site, const ::OpenAPI::OptionalParam<qint32> &pagesize = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  site QString [required]
    * @param[in]  pagesize qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  callback QString [optional]
    */
    virtual void meReputationHistoryGet(const QString &site, const ::OpenAPI::OptionalParam<qint32> &pagesize = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  site QString [required]
    * @param[in]  order QString [optional]
    * @param[in]  max QString [optional]
    * @param[in]  min QString [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  fromdate qint32 [optional]
    * @param[in]  todate qint32 [optional]
    * @param[in]  pagesize qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  callback QString [optional]
    */
    virtual void meSuggestedEditsGet(const QString &site, const ::OpenAPI::OptionalParam<QString> &order = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &min = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &fromdate = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &todate = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &pagesize = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  site QString [required]
    * @param[in]  order QString [optional]
    * @param[in]  max QString [optional]
    * @param[in]  min QString [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  fromdate qint32 [optional]
    * @param[in]  todate qint32 [optional]
    * @param[in]  pagesize qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  callback QString [optional]
    */
    virtual void meTagsGet(const QString &site, const ::OpenAPI::OptionalParam<QString> &order = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &min = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &fromdate = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &todate = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &pagesize = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  tags QString [required]
    * @param[in]  site QString [required]
    * @param[in]  order QString [optional]
    * @param[in]  max QString [optional]
    * @param[in]  min QString [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  fromdate qint32 [optional]
    * @param[in]  todate qint32 [optional]
    * @param[in]  pagesize qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  callback QString [optional]
    */
    virtual void meTagsTagsTopAnswersGet(const QString &tags, const QString &site, const ::OpenAPI::OptionalParam<QString> &order = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &min = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &fromdate = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &todate = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &pagesize = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  tags QString [required]
    * @param[in]  site QString [required]
    * @param[in]  order QString [optional]
    * @param[in]  max QString [optional]
    * @param[in]  min QString [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  fromdate qint32 [optional]
    * @param[in]  todate qint32 [optional]
    * @param[in]  pagesize qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  callback QString [optional]
    */
    virtual void meTagsTagsTopQuestionsGet(const QString &tags, const QString &site, const ::OpenAPI::OptionalParam<QString> &order = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &min = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &fromdate = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &todate = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &pagesize = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  site QString [required]
    * @param[in]  fromdate qint32 [optional]
    * @param[in]  todate qint32 [optional]
    * @param[in]  pagesize qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  callback QString [optional]
    */
    virtual void meTimelineGet(const QString &site, const ::OpenAPI::OptionalParam<qint32> &fromdate = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &todate = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &pagesize = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  site QString [required]
    * @param[in]  pagesize qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  callback QString [optional]
    */
    virtual void meTopAnswerTagsGet(const QString &site, const ::OpenAPI::OptionalParam<qint32> &pagesize = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  site QString [required]
    * @param[in]  pagesize qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  callback QString [optional]
    */
    virtual void meTopQuestionTagsGet(const QString &site, const ::OpenAPI::OptionalParam<qint32> &pagesize = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  site QString [required]
    * @param[in]  pagesize qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  callback QString [optional]
    */
    virtual void meWritePermissionsGet(const QString &site, const ::OpenAPI::OptionalParam<qint32> &pagesize = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  pagesize qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  callback QString [optional]
    */
    virtual void notificationsGet(const ::OpenAPI::OptionalParam<qint32> &pagesize = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  pagesize qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  callback QString [optional]
    */
    virtual void notificationsUnreadGet(const ::OpenAPI::OptionalParam<qint32> &pagesize = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  site QString [required]
    * @param[in]  order QString [optional]
    * @param[in]  max QString [optional]
    * @param[in]  min QString [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  fromdate qint32 [optional]
    * @param[in]  todate qint32 [optional]
    * @param[in]  pagesize qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  callback QString [optional]
    */
    virtual void postsGet(const QString &site, const ::OpenAPI::OptionalParam<QString> &order = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &min = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &fromdate = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &todate = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &pagesize = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  site QString [required]
    * @param[in]  filter QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  body QString [optional]
    * @param[in]  preview bool [optional]
    */
    virtual void postsIdCommentsAddPost(const qint32 &id, const QString &site, const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &body = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &preview = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  ids QString [required]
    * @param[in]  site QString [required]
    * @param[in]  order QString [optional]
    * @param[in]  max QString [optional]
    * @param[in]  min QString [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  fromdate qint32 [optional]
    * @param[in]  todate qint32 [optional]
    * @param[in]  pagesize qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  callback QString [optional]
    */
    virtual void postsIdsCommentsGet(const QString &ids, const QString &site, const ::OpenAPI::OptionalParam<QString> &order = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &min = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &fromdate = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &todate = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &pagesize = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  ids QString [required]
    * @param[in]  site QString [required]
    * @param[in]  order QString [optional]
    * @param[in]  max QString [optional]
    * @param[in]  min QString [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  fromdate qint32 [optional]
    * @param[in]  todate qint32 [optional]
    * @param[in]  pagesize qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  callback QString [optional]
    */
    virtual void postsIdsGet(const QString &ids, const QString &site, const ::OpenAPI::OptionalParam<QString> &order = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &min = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &fromdate = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &todate = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &pagesize = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  ids QString [required]
    * @param[in]  site QString [required]
    * @param[in]  fromdate qint32 [optional]
    * @param[in]  todate qint32 [optional]
    * @param[in]  pagesize qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  callback QString [optional]
    */
    virtual void postsIdsRevisionsGet(const QString &ids, const QString &site, const ::OpenAPI::OptionalParam<qint32> &fromdate = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &todate = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &pagesize = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  ids QString [required]
    * @param[in]  site QString [required]
    * @param[in]  order QString [optional]
    * @param[in]  max QString [optional]
    * @param[in]  min QString [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  fromdate qint32 [optional]
    * @param[in]  todate qint32 [optional]
    * @param[in]  pagesize qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  callback QString [optional]
    */
    virtual void postsIdsSuggestedEditsGet(const QString &ids, const QString &site, const ::OpenAPI::OptionalParam<QString> &order = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &min = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &fromdate = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &todate = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &pagesize = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  site QString [required]
    * @param[in]  pagesize qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  callback QString [optional]
    */
    virtual void privilegesGet(const QString &site, const ::OpenAPI::OptionalParam<qint32> &pagesize = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  site QString [required]
    * @param[in]  tagged QString [optional]
    * @param[in]  order QString [optional]
    * @param[in]  max QString [optional]
    * @param[in]  min QString [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  fromdate qint32 [optional]
    * @param[in]  todate qint32 [optional]
    * @param[in]  pagesize qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  callback QString [optional]
    */
    virtual void questionsFeaturedGet(const QString &site, const ::OpenAPI::OptionalParam<QString> &tagged = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &order = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &min = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &fromdate = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &todate = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &pagesize = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  site QString [required]
    * @param[in]  tagged QString [optional]
    * @param[in]  order QString [optional]
    * @param[in]  max QString [optional]
    * @param[in]  min QString [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  fromdate qint32 [optional]
    * @param[in]  todate qint32 [optional]
    * @param[in]  pagesize qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  callback QString [optional]
    */
    virtual void questionsGet(const QString &site, const ::OpenAPI::OptionalParam<QString> &tagged = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &order = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &min = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &fromdate = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &todate = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &pagesize = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  ids QString [required]
    * @param[in]  site QString [required]
    * @param[in]  order QString [optional]
    * @param[in]  max QString [optional]
    * @param[in]  min QString [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  fromdate qint32 [optional]
    * @param[in]  todate qint32 [optional]
    * @param[in]  pagesize qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  callback QString [optional]
    */
    virtual void questionsIdsAnswersGet(const QString &ids, const QString &site, const ::OpenAPI::OptionalParam<QString> &order = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &min = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &fromdate = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &todate = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &pagesize = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  ids QString [required]
    * @param[in]  site QString [required]
    * @param[in]  order QString [optional]
    * @param[in]  max QString [optional]
    * @param[in]  min QString [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  fromdate qint32 [optional]
    * @param[in]  todate qint32 [optional]
    * @param[in]  pagesize qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  callback QString [optional]
    */
    virtual void questionsIdsCommentsGet(const QString &ids, const QString &site, const ::OpenAPI::OptionalParam<QString> &order = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &min = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &fromdate = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &todate = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &pagesize = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  ids QString [required]
    * @param[in]  site QString [required]
    * @param[in]  order QString [optional]
    * @param[in]  max QString [optional]
    * @param[in]  min QString [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  fromdate qint32 [optional]
    * @param[in]  todate qint32 [optional]
    * @param[in]  pagesize qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  callback QString [optional]
    */
    virtual void questionsIdsGet(const QString &ids, const QString &site, const ::OpenAPI::OptionalParam<QString> &order = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &min = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &fromdate = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &todate = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &pagesize = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  ids QString [required]
    * @param[in]  site QString [required]
    * @param[in]  order QString [optional]
    * @param[in]  max QString [optional]
    * @param[in]  min QString [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  fromdate qint32 [optional]
    * @param[in]  todate qint32 [optional]
    * @param[in]  pagesize qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  callback QString [optional]
    */
    virtual void questionsIdsLinkedGet(const QString &ids, const QString &site, const ::OpenAPI::OptionalParam<QString> &order = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &min = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &fromdate = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &todate = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &pagesize = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  ids QString [required]
    * @param[in]  site QString [required]
    * @param[in]  order QString [optional]
    * @param[in]  max QString [optional]
    * @param[in]  min QString [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  fromdate qint32 [optional]
    * @param[in]  todate qint32 [optional]
    * @param[in]  pagesize qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  callback QString [optional]
    */
    virtual void questionsIdsRelatedGet(const QString &ids, const QString &site, const ::OpenAPI::OptionalParam<QString> &order = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &min = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &fromdate = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &todate = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &pagesize = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  ids QString [required]
    * @param[in]  site QString [required]
    * @param[in]  fromdate qint32 [optional]
    * @param[in]  todate qint32 [optional]
    * @param[in]  pagesize qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  callback QString [optional]
    */
    virtual void questionsIdsTimelineGet(const QString &ids, const QString &site, const ::OpenAPI::OptionalParam<qint32> &fromdate = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &todate = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &pagesize = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  site QString [required]
    * @param[in]  tagged QString [optional]
    * @param[in]  order QString [optional]
    * @param[in]  max QString [optional]
    * @param[in]  min QString [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  fromdate qint32 [optional]
    * @param[in]  todate qint32 [optional]
    * @param[in]  pagesize qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  callback QString [optional]
    */
    virtual void questionsNoAnswersGet(const QString &site, const ::OpenAPI::OptionalParam<QString> &tagged = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &order = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &min = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &fromdate = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &todate = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &pagesize = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  site QString [required]
    * @param[in]  tagged QString [optional]
    * @param[in]  order QString [optional]
    * @param[in]  max QString [optional]
    * @param[in]  min QString [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  fromdate qint32 [optional]
    * @param[in]  todate qint32 [optional]
    * @param[in]  pagesize qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  callback QString [optional]
    */
    virtual void questionsUnansweredGet(const QString &site, const ::OpenAPI::OptionalParam<QString> &tagged = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &order = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &min = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &fromdate = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &todate = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &pagesize = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  ids QString [required]
    * @param[in]  site QString [required]
    * @param[in]  fromdate qint32 [optional]
    * @param[in]  todate qint32 [optional]
    * @param[in]  pagesize qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  callback QString [optional]
    */
    virtual void revisionsIdsGet(const QString &ids, const QString &site, const ::OpenAPI::OptionalParam<qint32> &fromdate = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &todate = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &pagesize = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  site QString [required]
    * @param[in]  tagged QString [optional]
    * @param[in]  order QString [optional]
    * @param[in]  max QString [optional]
    * @param[in]  min QString [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  fromdate qint32 [optional]
    * @param[in]  todate qint32 [optional]
    * @param[in]  pagesize qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  accepted QString [optional]
    * @param[in]  answers qint32 [optional]
    * @param[in]  body QString [optional]
    * @param[in]  closed QString [optional]
    * @param[in]  migrated QString [optional]
    * @param[in]  notice QString [optional]
    * @param[in]  nottagged QString [optional]
    * @param[in]  q QString [optional]
    * @param[in]  title QString [optional]
    * @param[in]  url QString [optional]
    * @param[in]  user qint32 [optional]
    * @param[in]  views qint32 [optional]
    * @param[in]  wiki QString [optional]
    */
    virtual void searchAdvancedGet(const QString &site, const ::OpenAPI::OptionalParam<QString> &tagged = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &order = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &min = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &fromdate = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &todate = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &pagesize = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &accepted = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &answers = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &body = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &closed = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &migrated = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &notice = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &nottagged = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &q = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &title = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &url = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &user = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &views = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &wiki = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  site QString [required]
    * @param[in]  tagged QString [optional]
    * @param[in]  order QString [optional]
    * @param[in]  max QString [optional]
    * @param[in]  min QString [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  fromdate qint32 [optional]
    * @param[in]  todate qint32 [optional]
    * @param[in]  pagesize qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  intitle QString [optional]
    * @param[in]  nottagged QString [optional]
    */
    virtual void searchGet(const QString &site, const ::OpenAPI::OptionalParam<QString> &tagged = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &order = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &min = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &fromdate = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &todate = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &pagesize = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &intitle = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &nottagged = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  site QString [required]
    * @param[in]  tagged QString [optional]
    * @param[in]  order QString [optional]
    * @param[in]  max QString [optional]
    * @param[in]  min QString [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  fromdate qint32 [optional]
    * @param[in]  todate qint32 [optional]
    * @param[in]  pagesize qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  nottagged QString [optional]
    * @param[in]  title QString [optional]
    */
    virtual void similarGet(const QString &site, const ::OpenAPI::OptionalParam<QString> &tagged = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &order = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &min = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &fromdate = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &todate = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &pagesize = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &nottagged = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &title = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  pagesize qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  callback QString [optional]
    */
    virtual void sitesGet(const ::OpenAPI::OptionalParam<qint32> &pagesize = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  site QString [required]
    * @param[in]  order QString [optional]
    * @param[in]  max QString [optional]
    * @param[in]  min QString [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  fromdate qint32 [optional]
    * @param[in]  todate qint32 [optional]
    * @param[in]  pagesize qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  callback QString [optional]
    */
    virtual void suggestedEditsGet(const QString &site, const ::OpenAPI::OptionalParam<QString> &order = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &min = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &fromdate = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &todate = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &pagesize = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  ids QString [required]
    * @param[in]  site QString [required]
    * @param[in]  order QString [optional]
    * @param[in]  max QString [optional]
    * @param[in]  min QString [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  fromdate qint32 [optional]
    * @param[in]  todate qint32 [optional]
    * @param[in]  pagesize qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  callback QString [optional]
    */
    virtual void suggestedEditsIdsGet(const QString &ids, const QString &site, const ::OpenAPI::OptionalParam<QString> &order = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &min = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &fromdate = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &todate = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &pagesize = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  site QString [required]
    * @param[in]  inname QString [optional]
    * @param[in]  order QString [optional]
    * @param[in]  max QString [optional]
    * @param[in]  min QString [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  fromdate qint32 [optional]
    * @param[in]  todate qint32 [optional]
    * @param[in]  pagesize qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  callback QString [optional]
    */
    virtual void tagsGet(const QString &site, const ::OpenAPI::OptionalParam<QString> &inname = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &order = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &min = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &fromdate = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &todate = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &pagesize = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  site QString [required]
    * @param[in]  inname QString [optional]
    * @param[in]  order QString [optional]
    * @param[in]  max QString [optional]
    * @param[in]  min QString [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  fromdate qint32 [optional]
    * @param[in]  todate qint32 [optional]
    * @param[in]  pagesize qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  callback QString [optional]
    */
    virtual void tagsModeratorOnlyGet(const QString &site, const ::OpenAPI::OptionalParam<QString> &inname = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &order = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &min = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &fromdate = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &todate = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &pagesize = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  site QString [required]
    * @param[in]  inname QString [optional]
    * @param[in]  order QString [optional]
    * @param[in]  max QString [optional]
    * @param[in]  min QString [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  fromdate qint32 [optional]
    * @param[in]  todate qint32 [optional]
    * @param[in]  pagesize qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  callback QString [optional]
    */
    virtual void tagsRequiredGet(const QString &site, const ::OpenAPI::OptionalParam<QString> &inname = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &order = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &min = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &fromdate = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &todate = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &pagesize = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  site QString [required]
    * @param[in]  order QString [optional]
    * @param[in]  max QString [optional]
    * @param[in]  min QString [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  fromdate qint32 [optional]
    * @param[in]  todate qint32 [optional]
    * @param[in]  pagesize qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  callback QString [optional]
    */
    virtual void tagsSynonymsGet(const QString &site, const ::OpenAPI::OptionalParam<QString> &order = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &min = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &fromdate = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &todate = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &pagesize = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  tag QString [required]
    * @param[in]  period QString [required]
    * @param[in]  site QString [required]
    * @param[in]  pagesize qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  callback QString [optional]
    */
    virtual void tagsTagTopAnswerersPeriodGet(const QString &tag, const QString &period, const QString &site, const ::OpenAPI::OptionalParam<qint32> &pagesize = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  tag QString [required]
    * @param[in]  period QString [required]
    * @param[in]  site QString [required]
    * @param[in]  pagesize qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  callback QString [optional]
    */
    virtual void tagsTagTopAskersPeriodGet(const QString &tag, const QString &period, const QString &site, const ::OpenAPI::OptionalParam<qint32> &pagesize = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  tags QString [required]
    * @param[in]  site QString [required]
    * @param[in]  pagesize qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  callback QString [optional]
    */
    virtual void tagsTagsFaqGet(const QString &tags, const QString &site, const ::OpenAPI::OptionalParam<qint32> &pagesize = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  tags QString [required]
    * @param[in]  site QString [required]
    * @param[in]  order QString [optional]
    * @param[in]  max QString [optional]
    * @param[in]  min QString [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  fromdate qint32 [optional]
    * @param[in]  todate qint32 [optional]
    * @param[in]  pagesize qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  callback QString [optional]
    */
    virtual void tagsTagsInfoGet(const QString &tags, const QString &site, const ::OpenAPI::OptionalParam<QString> &order = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &min = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &fromdate = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &todate = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &pagesize = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  tags QString [required]
    * @param[in]  site QString [required]
    * @param[in]  pagesize qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  callback QString [optional]
    */
    virtual void tagsTagsRelatedGet(const QString &tags, const QString &site, const ::OpenAPI::OptionalParam<qint32> &pagesize = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  tags QString [required]
    * @param[in]  site QString [required]
    * @param[in]  order QString [optional]
    * @param[in]  max QString [optional]
    * @param[in]  min QString [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  fromdate qint32 [optional]
    * @param[in]  todate qint32 [optional]
    * @param[in]  pagesize qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  callback QString [optional]
    */
    virtual void tagsTagsSynonymsGet(const QString &tags, const QString &site, const ::OpenAPI::OptionalParam<QString> &order = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &min = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &fromdate = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &todate = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &pagesize = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  tags QString [required]
    * @param[in]  site QString [required]
    * @param[in]  pagesize qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  callback QString [optional]
    */
    virtual void tagsTagsWikisGet(const QString &tags, const QString &site, const ::OpenAPI::OptionalParam<qint32> &pagesize = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  site QString [required]
    * @param[in]  inname QString [optional]
    * @param[in]  order QString [optional]
    * @param[in]  max QString [optional]
    * @param[in]  min QString [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  fromdate qint32 [optional]
    * @param[in]  todate qint32 [optional]
    * @param[in]  pagesize qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  callback QString [optional]
    */
    virtual void usersGet(const QString &site, const ::OpenAPI::OptionalParam<QString> &inname = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &order = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &min = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &fromdate = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &todate = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &pagesize = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  site QString [required]
    * @param[in]  pagesize qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  callback QString [optional]
    */
    virtual void usersIdInboxGet(const qint32 &id, const QString &site, const ::OpenAPI::OptionalParam<qint32> &pagesize = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  site QString [required]
    * @param[in]  pagesize qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  since qint32 [optional]
    */
    virtual void usersIdInboxUnreadGet(const qint32 &id, const QString &site, const ::OpenAPI::OptionalParam<qint32> &pagesize = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &since = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  site QString [required]
    * @param[in]  pagesize qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  callback QString [optional]
    */
    virtual void usersIdNotificationsGet(const qint32 &id, const QString &site, const ::OpenAPI::OptionalParam<qint32> &pagesize = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  site QString [required]
    * @param[in]  pagesize qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  callback QString [optional]
    */
    virtual void usersIdNotificationsUnreadGet(const qint32 &id, const QString &site, const ::OpenAPI::OptionalParam<qint32> &pagesize = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  site QString [required]
    * @param[in]  pagesize qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  callback QString [optional]
    */
    virtual void usersIdPrivilegesGet(const qint32 &id, const QString &site, const ::OpenAPI::OptionalParam<qint32> &pagesize = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  site QString [required]
    * @param[in]  pagesize qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  callback QString [optional]
    */
    virtual void usersIdReputationHistoryFullGet(const qint32 &id, const QString &site, const ::OpenAPI::OptionalParam<qint32> &pagesize = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  tags QString [required]
    * @param[in]  site QString [required]
    * @param[in]  order QString [optional]
    * @param[in]  max QString [optional]
    * @param[in]  min QString [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  fromdate qint32 [optional]
    * @param[in]  todate qint32 [optional]
    * @param[in]  pagesize qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  callback QString [optional]
    */
    virtual void usersIdTagsTagsTopAnswersGet(const qint32 &id, const QString &tags, const QString &site, const ::OpenAPI::OptionalParam<QString> &order = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &min = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &fromdate = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &todate = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &pagesize = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  tags QString [required]
    * @param[in]  site QString [required]
    * @param[in]  order QString [optional]
    * @param[in]  max QString [optional]
    * @param[in]  min QString [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  fromdate qint32 [optional]
    * @param[in]  todate qint32 [optional]
    * @param[in]  pagesize qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  callback QString [optional]
    */
    virtual void usersIdTagsTagsTopQuestionsGet(const qint32 &id, const QString &tags, const QString &site, const ::OpenAPI::OptionalParam<QString> &order = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &min = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &fromdate = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &todate = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &pagesize = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  site QString [required]
    * @param[in]  pagesize qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  callback QString [optional]
    */
    virtual void usersIdTopAnswerTagsGet(const qint32 &id, const QString &site, const ::OpenAPI::OptionalParam<qint32> &pagesize = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  site QString [required]
    * @param[in]  pagesize qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  callback QString [optional]
    */
    virtual void usersIdTopQuestionTagsGet(const qint32 &id, const QString &site, const ::OpenAPI::OptionalParam<qint32> &pagesize = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  site QString [required]
    * @param[in]  pagesize qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  callback QString [optional]
    */
    virtual void usersIdWritePermissionsGet(const qint32 &id, const QString &site, const ::OpenAPI::OptionalParam<qint32> &pagesize = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  ids QString [required]
    * @param[in]  site QString [required]
    * @param[in]  order QString [optional]
    * @param[in]  max QString [optional]
    * @param[in]  min QString [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  fromdate qint32 [optional]
    * @param[in]  todate qint32 [optional]
    * @param[in]  pagesize qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  callback QString [optional]
    */
    virtual void usersIdsAnswersGet(const QString &ids, const QString &site, const ::OpenAPI::OptionalParam<QString> &order = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &min = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &fromdate = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &todate = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &pagesize = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  ids QString [required]
    * @param[in]  pagesize qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  callback QString [optional]
    */
    virtual void usersIdsAssociatedGet(const QString &ids, const ::OpenAPI::OptionalParam<qint32> &pagesize = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  ids QString [required]
    * @param[in]  site QString [required]
    * @param[in]  order QString [optional]
    * @param[in]  max QString [optional]
    * @param[in]  min QString [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  fromdate qint32 [optional]
    * @param[in]  todate qint32 [optional]
    * @param[in]  pagesize qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  callback QString [optional]
    */
    virtual void usersIdsBadgesGet(const QString &ids, const QString &site, const ::OpenAPI::OptionalParam<QString> &order = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &min = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &fromdate = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &todate = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &pagesize = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  ids QString [required]
    * @param[in]  site QString [required]
    * @param[in]  order QString [optional]
    * @param[in]  max QString [optional]
    * @param[in]  min QString [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  fromdate qint32 [optional]
    * @param[in]  todate qint32 [optional]
    * @param[in]  pagesize qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  callback QString [optional]
    */
    virtual void usersIdsCommentsGet(const QString &ids, const QString &site, const ::OpenAPI::OptionalParam<QString> &order = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &min = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &fromdate = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &todate = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &pagesize = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  ids QString [required]
    * @param[in]  toid qint32 [required]
    * @param[in]  site QString [required]
    * @param[in]  order QString [optional]
    * @param[in]  max QString [optional]
    * @param[in]  min QString [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  fromdate qint32 [optional]
    * @param[in]  todate qint32 [optional]
    * @param[in]  pagesize qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  callback QString [optional]
    */
    virtual void usersIdsCommentsToidGet(const QString &ids, const qint32 &toid, const QString &site, const ::OpenAPI::OptionalParam<QString> &order = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &min = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &fromdate = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &todate = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &pagesize = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  ids QString [required]
    * @param[in]  site QString [required]
    * @param[in]  order QString [optional]
    * @param[in]  max QString [optional]
    * @param[in]  min QString [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  fromdate qint32 [optional]
    * @param[in]  todate qint32 [optional]
    * @param[in]  pagesize qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  callback QString [optional]
    */
    virtual void usersIdsFavoritesGet(const QString &ids, const QString &site, const ::OpenAPI::OptionalParam<QString> &order = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &min = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &fromdate = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &todate = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &pagesize = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  ids QString [required]
    * @param[in]  site QString [required]
    * @param[in]  order QString [optional]
    * @param[in]  max QString [optional]
    * @param[in]  min QString [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  fromdate qint32 [optional]
    * @param[in]  todate qint32 [optional]
    * @param[in]  pagesize qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  callback QString [optional]
    */
    virtual void usersIdsGet(const QString &ids, const QString &site, const ::OpenAPI::OptionalParam<QString> &order = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &min = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &fromdate = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &todate = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &pagesize = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  ids QString [required]
    * @param[in]  site QString [required]
    * @param[in]  order QString [optional]
    * @param[in]  max QString [optional]
    * @param[in]  min QString [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  fromdate qint32 [optional]
    * @param[in]  todate qint32 [optional]
    * @param[in]  pagesize qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  callback QString [optional]
    */
    virtual void usersIdsMentionedGet(const QString &ids, const QString &site, const ::OpenAPI::OptionalParam<QString> &order = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &min = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &fromdate = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &todate = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &pagesize = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  ids QString [required]
    * @param[in]  pagesize qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  callback QString [optional]
    */
    virtual void usersIdsMergesGet(const QString &ids, const ::OpenAPI::OptionalParam<qint32> &pagesize = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  ids QString [required]
    * @param[in]  site QString [required]
    * @param[in]  order QString [optional]
    * @param[in]  max QString [optional]
    * @param[in]  min QString [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  fromdate qint32 [optional]
    * @param[in]  todate qint32 [optional]
    * @param[in]  pagesize qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  callback QString [optional]
    */
    virtual void usersIdsQuestionsFeaturedGet(const QString &ids, const QString &site, const ::OpenAPI::OptionalParam<QString> &order = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &min = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &fromdate = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &todate = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &pagesize = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  ids QString [required]
    * @param[in]  site QString [required]
    * @param[in]  order QString [optional]
    * @param[in]  max QString [optional]
    * @param[in]  min QString [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  fromdate qint32 [optional]
    * @param[in]  todate qint32 [optional]
    * @param[in]  pagesize qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  callback QString [optional]
    */
    virtual void usersIdsQuestionsGet(const QString &ids, const QString &site, const ::OpenAPI::OptionalParam<QString> &order = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &min = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &fromdate = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &todate = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &pagesize = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  ids QString [required]
    * @param[in]  site QString [required]
    * @param[in]  order QString [optional]
    * @param[in]  max QString [optional]
    * @param[in]  min QString [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  fromdate qint32 [optional]
    * @param[in]  todate qint32 [optional]
    * @param[in]  pagesize qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  callback QString [optional]
    */
    virtual void usersIdsQuestionsNoAnswersGet(const QString &ids, const QString &site, const ::OpenAPI::OptionalParam<QString> &order = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &min = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &fromdate = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &todate = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &pagesize = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  ids QString [required]
    * @param[in]  site QString [required]
    * @param[in]  order QString [optional]
    * @param[in]  max QString [optional]
    * @param[in]  min QString [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  fromdate qint32 [optional]
    * @param[in]  todate qint32 [optional]
    * @param[in]  pagesize qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  callback QString [optional]
    */
    virtual void usersIdsQuestionsUnacceptedGet(const QString &ids, const QString &site, const ::OpenAPI::OptionalParam<QString> &order = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &min = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &fromdate = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &todate = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &pagesize = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  ids QString [required]
    * @param[in]  site QString [required]
    * @param[in]  order QString [optional]
    * @param[in]  max QString [optional]
    * @param[in]  min QString [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  fromdate qint32 [optional]
    * @param[in]  todate qint32 [optional]
    * @param[in]  pagesize qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  callback QString [optional]
    */
    virtual void usersIdsQuestionsUnansweredGet(const QString &ids, const QString &site, const ::OpenAPI::OptionalParam<QString> &order = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &min = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &fromdate = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &todate = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &pagesize = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  ids QString [required]
    * @param[in]  site QString [required]
    * @param[in]  fromdate qint32 [optional]
    * @param[in]  todate qint32 [optional]
    * @param[in]  pagesize qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  callback QString [optional]
    */
    virtual void usersIdsReputationGet(const QString &ids, const QString &site, const ::OpenAPI::OptionalParam<qint32> &fromdate = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &todate = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &pagesize = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  ids QString [required]
    * @param[in]  site QString [required]
    * @param[in]  pagesize qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  callback QString [optional]
    */
    virtual void usersIdsReputationHistoryGet(const QString &ids, const QString &site, const ::OpenAPI::OptionalParam<qint32> &pagesize = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  ids QString [required]
    * @param[in]  site QString [required]
    * @param[in]  order QString [optional]
    * @param[in]  max QString [optional]
    * @param[in]  min QString [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  fromdate qint32 [optional]
    * @param[in]  todate qint32 [optional]
    * @param[in]  pagesize qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  callback QString [optional]
    */
    virtual void usersIdsSuggestedEditsGet(const QString &ids, const QString &site, const ::OpenAPI::OptionalParam<QString> &order = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &min = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &fromdate = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &todate = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &pagesize = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  ids QString [required]
    * @param[in]  site QString [required]
    * @param[in]  order QString [optional]
    * @param[in]  max QString [optional]
    * @param[in]  min QString [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  fromdate qint32 [optional]
    * @param[in]  todate qint32 [optional]
    * @param[in]  pagesize qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  callback QString [optional]
    */
    virtual void usersIdsTagsGet(const QString &ids, const QString &site, const ::OpenAPI::OptionalParam<QString> &order = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &min = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &fromdate = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &todate = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &pagesize = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  ids QString [required]
    * @param[in]  site QString [required]
    * @param[in]  fromdate qint32 [optional]
    * @param[in]  todate qint32 [optional]
    * @param[in]  pagesize qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  callback QString [optional]
    */
    virtual void usersIdsTimelineGet(const QString &ids, const QString &site, const ::OpenAPI::OptionalParam<qint32> &fromdate = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &todate = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &pagesize = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  site QString [required]
    * @param[in]  order QString [optional]
    * @param[in]  max QString [optional]
    * @param[in]  min QString [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  fromdate qint32 [optional]
    * @param[in]  todate qint32 [optional]
    * @param[in]  pagesize qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  callback QString [optional]
    */
    virtual void usersModeratorsElectedGet(const QString &site, const ::OpenAPI::OptionalParam<QString> &order = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &min = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &fromdate = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &todate = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &pagesize = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  site QString [required]
    * @param[in]  order QString [optional]
    * @param[in]  max QString [optional]
    * @param[in]  min QString [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  fromdate qint32 [optional]
    * @param[in]  todate qint32 [optional]
    * @param[in]  pagesize qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  callback QString [optional]
    */
    virtual void usersModeratorsGet(const QString &site, const ::OpenAPI::OptionalParam<QString> &order = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &max = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &min = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &fromdate = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &todate = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &pagesize = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void accessTokensAccessTokensGetCallback(OAIHttpRequestWorker *worker);
    void accessTokensAccessTokensInvalidateGetCallback(OAIHttpRequestWorker *worker);
    void answersGetCallback(OAIHttpRequestWorker *worker);
    void answersIdsCommentsGetCallback(OAIHttpRequestWorker *worker);
    void answersIdsGetCallback(OAIHttpRequestWorker *worker);
    void appsAccessTokensDeAuthenticateGetCallback(OAIHttpRequestWorker *worker);
    void badgesGetCallback(OAIHttpRequestWorker *worker);
    void badgesIdsGetCallback(OAIHttpRequestWorker *worker);
    void badgesIdsRecipientsGetCallback(OAIHttpRequestWorker *worker);
    void badgesNameGetCallback(OAIHttpRequestWorker *worker);
    void badgesRecipientsGetCallback(OAIHttpRequestWorker *worker);
    void badgesTagsGetCallback(OAIHttpRequestWorker *worker);
    void commentsGetCallback(OAIHttpRequestWorker *worker);
    void commentsIdDeletePostCallback(OAIHttpRequestWorker *worker);
    void commentsIdEditPostCallback(OAIHttpRequestWorker *worker);
    void commentsIdsGetCallback(OAIHttpRequestWorker *worker);
    void errorsGetCallback(OAIHttpRequestWorker *worker);
    void errorsIdGetCallback(OAIHttpRequestWorker *worker);
    void eventsGetCallback(OAIHttpRequestWorker *worker);
    void filtersCreateGetCallback(OAIHttpRequestWorker *worker);
    void filtersFiltersGetCallback(OAIHttpRequestWorker *worker);
    void inboxGetCallback(OAIHttpRequestWorker *worker);
    void inboxUnreadGetCallback(OAIHttpRequestWorker *worker);
    void infoGetCallback(OAIHttpRequestWorker *worker);
    void meAnswersGetCallback(OAIHttpRequestWorker *worker);
    void meAssociatedGetCallback(OAIHttpRequestWorker *worker);
    void meBadgesGetCallback(OAIHttpRequestWorker *worker);
    void meCommentsGetCallback(OAIHttpRequestWorker *worker);
    void meCommentsToIdGetCallback(OAIHttpRequestWorker *worker);
    void meFavoritesGetCallback(OAIHttpRequestWorker *worker);
    void meGetCallback(OAIHttpRequestWorker *worker);
    void meInboxGetCallback(OAIHttpRequestWorker *worker);
    void meInboxUnreadGetCallback(OAIHttpRequestWorker *worker);
    void meMentionedGetCallback(OAIHttpRequestWorker *worker);
    void meMergesGetCallback(OAIHttpRequestWorker *worker);
    void meNotificationsGetCallback(OAIHttpRequestWorker *worker);
    void meNotificationsUnreadGetCallback(OAIHttpRequestWorker *worker);
    void mePrivilegesGetCallback(OAIHttpRequestWorker *worker);
    void meQuestionsFeaturedGetCallback(OAIHttpRequestWorker *worker);
    void meQuestionsGetCallback(OAIHttpRequestWorker *worker);
    void meQuestionsNoAnswersGetCallback(OAIHttpRequestWorker *worker);
    void meQuestionsUnacceptedGetCallback(OAIHttpRequestWorker *worker);
    void meQuestionsUnansweredGetCallback(OAIHttpRequestWorker *worker);
    void meReputationGetCallback(OAIHttpRequestWorker *worker);
    void meReputationHistoryFullGetCallback(OAIHttpRequestWorker *worker);
    void meReputationHistoryGetCallback(OAIHttpRequestWorker *worker);
    void meSuggestedEditsGetCallback(OAIHttpRequestWorker *worker);
    void meTagsGetCallback(OAIHttpRequestWorker *worker);
    void meTagsTagsTopAnswersGetCallback(OAIHttpRequestWorker *worker);
    void meTagsTagsTopQuestionsGetCallback(OAIHttpRequestWorker *worker);
    void meTimelineGetCallback(OAIHttpRequestWorker *worker);
    void meTopAnswerTagsGetCallback(OAIHttpRequestWorker *worker);
    void meTopQuestionTagsGetCallback(OAIHttpRequestWorker *worker);
    void meWritePermissionsGetCallback(OAIHttpRequestWorker *worker);
    void notificationsGetCallback(OAIHttpRequestWorker *worker);
    void notificationsUnreadGetCallback(OAIHttpRequestWorker *worker);
    void postsGetCallback(OAIHttpRequestWorker *worker);
    void postsIdCommentsAddPostCallback(OAIHttpRequestWorker *worker);
    void postsIdsCommentsGetCallback(OAIHttpRequestWorker *worker);
    void postsIdsGetCallback(OAIHttpRequestWorker *worker);
    void postsIdsRevisionsGetCallback(OAIHttpRequestWorker *worker);
    void postsIdsSuggestedEditsGetCallback(OAIHttpRequestWorker *worker);
    void privilegesGetCallback(OAIHttpRequestWorker *worker);
    void questionsFeaturedGetCallback(OAIHttpRequestWorker *worker);
    void questionsGetCallback(OAIHttpRequestWorker *worker);
    void questionsIdsAnswersGetCallback(OAIHttpRequestWorker *worker);
    void questionsIdsCommentsGetCallback(OAIHttpRequestWorker *worker);
    void questionsIdsGetCallback(OAIHttpRequestWorker *worker);
    void questionsIdsLinkedGetCallback(OAIHttpRequestWorker *worker);
    void questionsIdsRelatedGetCallback(OAIHttpRequestWorker *worker);
    void questionsIdsTimelineGetCallback(OAIHttpRequestWorker *worker);
    void questionsNoAnswersGetCallback(OAIHttpRequestWorker *worker);
    void questionsUnansweredGetCallback(OAIHttpRequestWorker *worker);
    void revisionsIdsGetCallback(OAIHttpRequestWorker *worker);
    void searchAdvancedGetCallback(OAIHttpRequestWorker *worker);
    void searchGetCallback(OAIHttpRequestWorker *worker);
    void similarGetCallback(OAIHttpRequestWorker *worker);
    void sitesGetCallback(OAIHttpRequestWorker *worker);
    void suggestedEditsGetCallback(OAIHttpRequestWorker *worker);
    void suggestedEditsIdsGetCallback(OAIHttpRequestWorker *worker);
    void tagsGetCallback(OAIHttpRequestWorker *worker);
    void tagsModeratorOnlyGetCallback(OAIHttpRequestWorker *worker);
    void tagsRequiredGetCallback(OAIHttpRequestWorker *worker);
    void tagsSynonymsGetCallback(OAIHttpRequestWorker *worker);
    void tagsTagTopAnswerersPeriodGetCallback(OAIHttpRequestWorker *worker);
    void tagsTagTopAskersPeriodGetCallback(OAIHttpRequestWorker *worker);
    void tagsTagsFaqGetCallback(OAIHttpRequestWorker *worker);
    void tagsTagsInfoGetCallback(OAIHttpRequestWorker *worker);
    void tagsTagsRelatedGetCallback(OAIHttpRequestWorker *worker);
    void tagsTagsSynonymsGetCallback(OAIHttpRequestWorker *worker);
    void tagsTagsWikisGetCallback(OAIHttpRequestWorker *worker);
    void usersGetCallback(OAIHttpRequestWorker *worker);
    void usersIdInboxGetCallback(OAIHttpRequestWorker *worker);
    void usersIdInboxUnreadGetCallback(OAIHttpRequestWorker *worker);
    void usersIdNotificationsGetCallback(OAIHttpRequestWorker *worker);
    void usersIdNotificationsUnreadGetCallback(OAIHttpRequestWorker *worker);
    void usersIdPrivilegesGetCallback(OAIHttpRequestWorker *worker);
    void usersIdReputationHistoryFullGetCallback(OAIHttpRequestWorker *worker);
    void usersIdTagsTagsTopAnswersGetCallback(OAIHttpRequestWorker *worker);
    void usersIdTagsTagsTopQuestionsGetCallback(OAIHttpRequestWorker *worker);
    void usersIdTopAnswerTagsGetCallback(OAIHttpRequestWorker *worker);
    void usersIdTopQuestionTagsGetCallback(OAIHttpRequestWorker *worker);
    void usersIdWritePermissionsGetCallback(OAIHttpRequestWorker *worker);
    void usersIdsAnswersGetCallback(OAIHttpRequestWorker *worker);
    void usersIdsAssociatedGetCallback(OAIHttpRequestWorker *worker);
    void usersIdsBadgesGetCallback(OAIHttpRequestWorker *worker);
    void usersIdsCommentsGetCallback(OAIHttpRequestWorker *worker);
    void usersIdsCommentsToidGetCallback(OAIHttpRequestWorker *worker);
    void usersIdsFavoritesGetCallback(OAIHttpRequestWorker *worker);
    void usersIdsGetCallback(OAIHttpRequestWorker *worker);
    void usersIdsMentionedGetCallback(OAIHttpRequestWorker *worker);
    void usersIdsMergesGetCallback(OAIHttpRequestWorker *worker);
    void usersIdsQuestionsFeaturedGetCallback(OAIHttpRequestWorker *worker);
    void usersIdsQuestionsGetCallback(OAIHttpRequestWorker *worker);
    void usersIdsQuestionsNoAnswersGetCallback(OAIHttpRequestWorker *worker);
    void usersIdsQuestionsUnacceptedGetCallback(OAIHttpRequestWorker *worker);
    void usersIdsQuestionsUnansweredGetCallback(OAIHttpRequestWorker *worker);
    void usersIdsReputationGetCallback(OAIHttpRequestWorker *worker);
    void usersIdsReputationHistoryGetCallback(OAIHttpRequestWorker *worker);
    void usersIdsSuggestedEditsGetCallback(OAIHttpRequestWorker *worker);
    void usersIdsTagsGetCallback(OAIHttpRequestWorker *worker);
    void usersIdsTimelineGetCallback(OAIHttpRequestWorker *worker);
    void usersModeratorsElectedGetCallback(OAIHttpRequestWorker *worker);
    void usersModeratorsGetCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void accessTokensAccessTokensGetSignal(QList<OAIAccess_tokens_inner> summary);
    void accessTokensAccessTokensInvalidateGetSignal(QList<OAIAccess_tokens_inner> summary);
    void answersGetSignal(QList<OAIAnswers_inner> summary);
    void answersIdsCommentsGetSignal(QList<OAIComments_inner> summary);
    void answersIdsGetSignal(QList<OAIAnswers_inner> summary);
    void appsAccessTokensDeAuthenticateGetSignal(QList<OAIAccess_tokens_inner> summary);
    void badgesGetSignal(QList<OAIBadges_inner> summary);
    void badgesIdsGetSignal(QList<OAIBadges_inner> summary);
    void badgesIdsRecipientsGetSignal(QList<OAIBadges_inner> summary);
    void badgesNameGetSignal(QList<OAIBadges_inner> summary);
    void badgesRecipientsGetSignal(QList<OAIBadges_inner> summary);
    void badgesTagsGetSignal(QList<OAIBadges_inner> summary);
    void commentsGetSignal(QList<OAIComments_inner> summary);
    void commentsIdDeletePostSignal();
    void commentsIdEditPostSignal(OAICreated_comment summary);
    void commentsIdsGetSignal(QList<OAIComments_inner> summary);
    void errorsGetSignal(QList<OAIErrors_inner> summary);
    void errorsIdGetSignal(OAIError summary);
    void eventsGetSignal(QList<OAIEvents_inner> summary);
    void filtersCreateGetSignal(OAISingle_filter summary);
    void filtersFiltersGetSignal(QList<OAIFilters_inner> summary);
    void inboxGetSignal(QList<OAIInbox_items_inner> summary);
    void inboxUnreadGetSignal(QList<OAIInbox_items_inner> summary);
    void infoGetSignal(OAIInfo_object summary);
    void meAnswersGetSignal(QList<OAIAnswers_inner> summary);
    void meAssociatedGetSignal(QList<OAINetwork_users_inner> summary);
    void meBadgesGetSignal(QList<OAIBadges_inner> summary);
    void meCommentsGetSignal(QList<OAIComments_inner> summary);
    void meCommentsToIdGetSignal(QList<OAIComments_inner> summary);
    void meFavoritesGetSignal(QList<OAIQuestions_inner> summary);
    void meGetSignal(OAIUser summary);
    void meInboxGetSignal(QList<OAIInbox_items_inner> summary);
    void meInboxUnreadGetSignal(QList<OAIInbox_items_inner> summary);
    void meMentionedGetSignal(QList<OAIComments_inner> summary);
    void meMergesGetSignal(QList<OAIAccount_merge_inner> summary);
    void meNotificationsGetSignal(QList<OAINotifications_inner> summary);
    void meNotificationsUnreadGetSignal(QList<OAINotifications_inner> summary);
    void mePrivilegesGetSignal(QList<OAIPrivileges_inner> summary);
    void meQuestionsFeaturedGetSignal(QList<OAIQuestions_inner> summary);
    void meQuestionsGetSignal(QList<OAIQuestions_inner> summary);
    void meQuestionsNoAnswersGetSignal(QList<OAIQuestions_inner> summary);
    void meQuestionsUnacceptedGetSignal(QList<OAIQuestions_inner> summary);
    void meQuestionsUnansweredGetSignal(QList<OAIQuestions_inner> summary);
    void meReputationGetSignal(QList<OAIReputation_changes_inner> summary);
    void meReputationHistoryFullGetSignal(QList<OAIReputation_history_inner> summary);
    void meReputationHistoryGetSignal(QList<OAIReputation_history_inner> summary);
    void meSuggestedEditsGetSignal(QList<OAISuggested_edits_inner> summary);
    void meTagsGetSignal(QList<OAITags_inner> summary);
    void meTagsTagsTopAnswersGetSignal(QList<OAIAnswers_inner> summary);
    void meTagsTagsTopQuestionsGetSignal(QList<OAIQuestions_inner> summary);
    void meTimelineGetSignal(QList<OAIUser_timeline_objects_inner> summary);
    void meTopAnswerTagsGetSignal(QList<OAITop_tag_objects_inner> summary);
    void meTopQuestionTagsGetSignal(QList<OAITop_tag_objects_inner> summary);
    void meWritePermissionsGetSignal(QList<OAIWrite_permissions_inner> summary);
    void notificationsGetSignal(QList<OAINotifications_inner> summary);
    void notificationsUnreadGetSignal(QList<OAINotifications_inner> summary);
    void postsGetSignal(QList<OAIPosts_inner> summary);
    void postsIdCommentsAddPostSignal(OAICreated_comment summary);
    void postsIdsCommentsGetSignal(QList<OAIComments_inner> summary);
    void postsIdsGetSignal(QList<OAIPosts_inner> summary);
    void postsIdsRevisionsGetSignal(QList<OAIRevisions_inner> summary);
    void postsIdsSuggestedEditsGetSignal(QList<OAISuggested_edits_inner> summary);
    void privilegesGetSignal(QList<OAIPrivileges_inner> summary);
    void questionsFeaturedGetSignal(QList<OAIQuestions_inner> summary);
    void questionsGetSignal(QList<OAIQuestions_inner> summary);
    void questionsIdsAnswersGetSignal(QList<OAIAnswers_inner> summary);
    void questionsIdsCommentsGetSignal(QList<OAIComments_inner> summary);
    void questionsIdsGetSignal(QList<OAIQuestions_inner> summary);
    void questionsIdsLinkedGetSignal(QList<OAIQuestions_inner> summary);
    void questionsIdsRelatedGetSignal(QList<OAIQuestions_inner> summary);
    void questionsIdsTimelineGetSignal(QList<OAIQuestion_timeline_events_inner> summary);
    void questionsNoAnswersGetSignal(QList<OAIQuestions_inner> summary);
    void questionsUnansweredGetSignal(QList<OAIQuestions_inner> summary);
    void revisionsIdsGetSignal(QList<OAIRevisions_inner> summary);
    void searchAdvancedGetSignal(QList<OAIQuestions_inner> summary);
    void searchGetSignal(QList<OAIQuestions_inner> summary);
    void similarGetSignal(QList<OAIQuestions_inner> summary);
    void sitesGetSignal(QList<OAIInbox_items_inner_site> summary);
    void suggestedEditsGetSignal(QList<OAISuggested_edits_inner> summary);
    void suggestedEditsIdsGetSignal(QList<OAISuggested_edits_inner> summary);
    void tagsGetSignal(QList<OAITags_inner> summary);
    void tagsModeratorOnlyGetSignal(QList<OAITags_inner> summary);
    void tagsRequiredGetSignal(QList<OAITags_inner> summary);
    void tagsSynonymsGetSignal(QList<OAITag_synonyms_inner> summary);
    void tagsTagTopAnswerersPeriodGetSignal(QList<OAITag_score_objects_inner> summary);
    void tagsTagTopAskersPeriodGetSignal(QList<OAITag_score_objects_inner> summary);
    void tagsTagsFaqGetSignal(QList<OAIQuestions_inner> summary);
    void tagsTagsInfoGetSignal(QList<OAITags_inner> summary);
    void tagsTagsRelatedGetSignal(QList<OAITags_inner> summary);
    void tagsTagsSynonymsGetSignal(QList<OAITag_synonyms_inner> summary);
    void tagsTagsWikisGetSignal(QList<OAITag_wikis_inner> summary);
    void usersGetSignal(QList<OAIUsers_inner> summary);
    void usersIdInboxGetSignal(QList<OAIInbox_items_inner> summary);
    void usersIdInboxUnreadGetSignal(QList<OAIInbox_items_inner> summary);
    void usersIdNotificationsGetSignal(QList<OAINotifications_inner> summary);
    void usersIdNotificationsUnreadGetSignal(QList<OAINotifications_inner> summary);
    void usersIdPrivilegesGetSignal(QList<OAIPrivileges_inner> summary);
    void usersIdReputationHistoryFullGetSignal(QList<OAIReputation_history_inner> summary);
    void usersIdTagsTagsTopAnswersGetSignal(QList<OAIAnswers_inner> summary);
    void usersIdTagsTagsTopQuestionsGetSignal(QList<OAIQuestions_inner> summary);
    void usersIdTopAnswerTagsGetSignal(QList<OAITop_tag_objects_inner> summary);
    void usersIdTopQuestionTagsGetSignal(QList<OAITop_tag_objects_inner> summary);
    void usersIdWritePermissionsGetSignal(QList<OAIWrite_permissions_inner> summary);
    void usersIdsAnswersGetSignal(QList<OAIAnswers_inner> summary);
    void usersIdsAssociatedGetSignal(QList<OAINetwork_users_inner> summary);
    void usersIdsBadgesGetSignal(QList<OAIBadges_inner> summary);
    void usersIdsCommentsGetSignal(QList<OAIComments_inner> summary);
    void usersIdsCommentsToidGetSignal(QList<OAIComments_inner> summary);
    void usersIdsFavoritesGetSignal(QList<OAIQuestions_inner> summary);
    void usersIdsGetSignal(QList<OAIUsers_inner> summary);
    void usersIdsMentionedGetSignal(QList<OAIComments_inner> summary);
    void usersIdsMergesGetSignal(QList<OAIAccount_merge_inner> summary);
    void usersIdsQuestionsFeaturedGetSignal(QList<OAIQuestions_inner> summary);
    void usersIdsQuestionsGetSignal(QList<OAIQuestions_inner> summary);
    void usersIdsQuestionsNoAnswersGetSignal(QList<OAIQuestions_inner> summary);
    void usersIdsQuestionsUnacceptedGetSignal(QList<OAIQuestions_inner> summary);
    void usersIdsQuestionsUnansweredGetSignal(QList<OAIQuestions_inner> summary);
    void usersIdsReputationGetSignal(QList<OAIReputation_changes_inner> summary);
    void usersIdsReputationHistoryGetSignal(QList<OAIReputation_history_inner> summary);
    void usersIdsSuggestedEditsGetSignal(QList<OAISuggested_edits_inner> summary);
    void usersIdsTagsGetSignal(QList<OAITags_inner> summary);
    void usersIdsTimelineGetSignal(QList<OAIUser_timeline_objects_inner> summary);
    void usersModeratorsElectedGetSignal(QList<OAIUsers_inner> summary);
    void usersModeratorsGetSignal(QList<OAIUsers_inner> summary);


    void accessTokensAccessTokensGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIAccess_tokens_inner> summary);
    void accessTokensAccessTokensInvalidateGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIAccess_tokens_inner> summary);
    void answersGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIAnswers_inner> summary);
    void answersIdsCommentsGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIComments_inner> summary);
    void answersIdsGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIAnswers_inner> summary);
    void appsAccessTokensDeAuthenticateGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIAccess_tokens_inner> summary);
    void badgesGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIBadges_inner> summary);
    void badgesIdsGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIBadges_inner> summary);
    void badgesIdsRecipientsGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIBadges_inner> summary);
    void badgesNameGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIBadges_inner> summary);
    void badgesRecipientsGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIBadges_inner> summary);
    void badgesTagsGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIBadges_inner> summary);
    void commentsGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIComments_inner> summary);
    void commentsIdDeletePostSignalFull(OAIHttpRequestWorker *worker);
    void commentsIdEditPostSignalFull(OAIHttpRequestWorker *worker, OAICreated_comment summary);
    void commentsIdsGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIComments_inner> summary);
    void errorsGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIErrors_inner> summary);
    void errorsIdGetSignalFull(OAIHttpRequestWorker *worker, OAIError summary);
    void eventsGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIEvents_inner> summary);
    void filtersCreateGetSignalFull(OAIHttpRequestWorker *worker, OAISingle_filter summary);
    void filtersFiltersGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIFilters_inner> summary);
    void inboxGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIInbox_items_inner> summary);
    void inboxUnreadGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIInbox_items_inner> summary);
    void infoGetSignalFull(OAIHttpRequestWorker *worker, OAIInfo_object summary);
    void meAnswersGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIAnswers_inner> summary);
    void meAssociatedGetSignalFull(OAIHttpRequestWorker *worker, QList<OAINetwork_users_inner> summary);
    void meBadgesGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIBadges_inner> summary);
    void meCommentsGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIComments_inner> summary);
    void meCommentsToIdGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIComments_inner> summary);
    void meFavoritesGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIQuestions_inner> summary);
    void meGetSignalFull(OAIHttpRequestWorker *worker, OAIUser summary);
    void meInboxGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIInbox_items_inner> summary);
    void meInboxUnreadGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIInbox_items_inner> summary);
    void meMentionedGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIComments_inner> summary);
    void meMergesGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIAccount_merge_inner> summary);
    void meNotificationsGetSignalFull(OAIHttpRequestWorker *worker, QList<OAINotifications_inner> summary);
    void meNotificationsUnreadGetSignalFull(OAIHttpRequestWorker *worker, QList<OAINotifications_inner> summary);
    void mePrivilegesGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIPrivileges_inner> summary);
    void meQuestionsFeaturedGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIQuestions_inner> summary);
    void meQuestionsGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIQuestions_inner> summary);
    void meQuestionsNoAnswersGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIQuestions_inner> summary);
    void meQuestionsUnacceptedGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIQuestions_inner> summary);
    void meQuestionsUnansweredGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIQuestions_inner> summary);
    void meReputationGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIReputation_changes_inner> summary);
    void meReputationHistoryFullGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIReputation_history_inner> summary);
    void meReputationHistoryGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIReputation_history_inner> summary);
    void meSuggestedEditsGetSignalFull(OAIHttpRequestWorker *worker, QList<OAISuggested_edits_inner> summary);
    void meTagsGetSignalFull(OAIHttpRequestWorker *worker, QList<OAITags_inner> summary);
    void meTagsTagsTopAnswersGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIAnswers_inner> summary);
    void meTagsTagsTopQuestionsGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIQuestions_inner> summary);
    void meTimelineGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIUser_timeline_objects_inner> summary);
    void meTopAnswerTagsGetSignalFull(OAIHttpRequestWorker *worker, QList<OAITop_tag_objects_inner> summary);
    void meTopQuestionTagsGetSignalFull(OAIHttpRequestWorker *worker, QList<OAITop_tag_objects_inner> summary);
    void meWritePermissionsGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIWrite_permissions_inner> summary);
    void notificationsGetSignalFull(OAIHttpRequestWorker *worker, QList<OAINotifications_inner> summary);
    void notificationsUnreadGetSignalFull(OAIHttpRequestWorker *worker, QList<OAINotifications_inner> summary);
    void postsGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIPosts_inner> summary);
    void postsIdCommentsAddPostSignalFull(OAIHttpRequestWorker *worker, OAICreated_comment summary);
    void postsIdsCommentsGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIComments_inner> summary);
    void postsIdsGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIPosts_inner> summary);
    void postsIdsRevisionsGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIRevisions_inner> summary);
    void postsIdsSuggestedEditsGetSignalFull(OAIHttpRequestWorker *worker, QList<OAISuggested_edits_inner> summary);
    void privilegesGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIPrivileges_inner> summary);
    void questionsFeaturedGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIQuestions_inner> summary);
    void questionsGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIQuestions_inner> summary);
    void questionsIdsAnswersGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIAnswers_inner> summary);
    void questionsIdsCommentsGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIComments_inner> summary);
    void questionsIdsGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIQuestions_inner> summary);
    void questionsIdsLinkedGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIQuestions_inner> summary);
    void questionsIdsRelatedGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIQuestions_inner> summary);
    void questionsIdsTimelineGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIQuestion_timeline_events_inner> summary);
    void questionsNoAnswersGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIQuestions_inner> summary);
    void questionsUnansweredGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIQuestions_inner> summary);
    void revisionsIdsGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIRevisions_inner> summary);
    void searchAdvancedGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIQuestions_inner> summary);
    void searchGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIQuestions_inner> summary);
    void similarGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIQuestions_inner> summary);
    void sitesGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIInbox_items_inner_site> summary);
    void suggestedEditsGetSignalFull(OAIHttpRequestWorker *worker, QList<OAISuggested_edits_inner> summary);
    void suggestedEditsIdsGetSignalFull(OAIHttpRequestWorker *worker, QList<OAISuggested_edits_inner> summary);
    void tagsGetSignalFull(OAIHttpRequestWorker *worker, QList<OAITags_inner> summary);
    void tagsModeratorOnlyGetSignalFull(OAIHttpRequestWorker *worker, QList<OAITags_inner> summary);
    void tagsRequiredGetSignalFull(OAIHttpRequestWorker *worker, QList<OAITags_inner> summary);
    void tagsSynonymsGetSignalFull(OAIHttpRequestWorker *worker, QList<OAITag_synonyms_inner> summary);
    void tagsTagTopAnswerersPeriodGetSignalFull(OAIHttpRequestWorker *worker, QList<OAITag_score_objects_inner> summary);
    void tagsTagTopAskersPeriodGetSignalFull(OAIHttpRequestWorker *worker, QList<OAITag_score_objects_inner> summary);
    void tagsTagsFaqGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIQuestions_inner> summary);
    void tagsTagsInfoGetSignalFull(OAIHttpRequestWorker *worker, QList<OAITags_inner> summary);
    void tagsTagsRelatedGetSignalFull(OAIHttpRequestWorker *worker, QList<OAITags_inner> summary);
    void tagsTagsSynonymsGetSignalFull(OAIHttpRequestWorker *worker, QList<OAITag_synonyms_inner> summary);
    void tagsTagsWikisGetSignalFull(OAIHttpRequestWorker *worker, QList<OAITag_wikis_inner> summary);
    void usersGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIUsers_inner> summary);
    void usersIdInboxGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIInbox_items_inner> summary);
    void usersIdInboxUnreadGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIInbox_items_inner> summary);
    void usersIdNotificationsGetSignalFull(OAIHttpRequestWorker *worker, QList<OAINotifications_inner> summary);
    void usersIdNotificationsUnreadGetSignalFull(OAIHttpRequestWorker *worker, QList<OAINotifications_inner> summary);
    void usersIdPrivilegesGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIPrivileges_inner> summary);
    void usersIdReputationHistoryFullGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIReputation_history_inner> summary);
    void usersIdTagsTagsTopAnswersGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIAnswers_inner> summary);
    void usersIdTagsTagsTopQuestionsGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIQuestions_inner> summary);
    void usersIdTopAnswerTagsGetSignalFull(OAIHttpRequestWorker *worker, QList<OAITop_tag_objects_inner> summary);
    void usersIdTopQuestionTagsGetSignalFull(OAIHttpRequestWorker *worker, QList<OAITop_tag_objects_inner> summary);
    void usersIdWritePermissionsGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIWrite_permissions_inner> summary);
    void usersIdsAnswersGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIAnswers_inner> summary);
    void usersIdsAssociatedGetSignalFull(OAIHttpRequestWorker *worker, QList<OAINetwork_users_inner> summary);
    void usersIdsBadgesGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIBadges_inner> summary);
    void usersIdsCommentsGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIComments_inner> summary);
    void usersIdsCommentsToidGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIComments_inner> summary);
    void usersIdsFavoritesGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIQuestions_inner> summary);
    void usersIdsGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIUsers_inner> summary);
    void usersIdsMentionedGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIComments_inner> summary);
    void usersIdsMergesGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIAccount_merge_inner> summary);
    void usersIdsQuestionsFeaturedGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIQuestions_inner> summary);
    void usersIdsQuestionsGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIQuestions_inner> summary);
    void usersIdsQuestionsNoAnswersGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIQuestions_inner> summary);
    void usersIdsQuestionsUnacceptedGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIQuestions_inner> summary);
    void usersIdsQuestionsUnansweredGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIQuestions_inner> summary);
    void usersIdsReputationGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIReputation_changes_inner> summary);
    void usersIdsReputationHistoryGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIReputation_history_inner> summary);
    void usersIdsSuggestedEditsGetSignalFull(OAIHttpRequestWorker *worker, QList<OAISuggested_edits_inner> summary);
    void usersIdsTagsGetSignalFull(OAIHttpRequestWorker *worker, QList<OAITags_inner> summary);
    void usersIdsTimelineGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIUser_timeline_objects_inner> summary);
    void usersModeratorsElectedGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIUsers_inner> summary);
    void usersModeratorsGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIUsers_inner> summary);

    Q_DECL_DEPRECATED_X("Use accessTokensAccessTokensGetSignalError() instead")
    void accessTokensAccessTokensGetSignalE(QList<OAIAccess_tokens_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void accessTokensAccessTokensGetSignalError(QList<OAIAccess_tokens_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accessTokensAccessTokensInvalidateGetSignalError() instead")
    void accessTokensAccessTokensInvalidateGetSignalE(QList<OAIAccess_tokens_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void accessTokensAccessTokensInvalidateGetSignalError(QList<OAIAccess_tokens_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use answersGetSignalError() instead")
    void answersGetSignalE(QList<OAIAnswers_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void answersGetSignalError(QList<OAIAnswers_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use answersIdsCommentsGetSignalError() instead")
    void answersIdsCommentsGetSignalE(QList<OAIComments_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void answersIdsCommentsGetSignalError(QList<OAIComments_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use answersIdsGetSignalError() instead")
    void answersIdsGetSignalE(QList<OAIAnswers_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void answersIdsGetSignalError(QList<OAIAnswers_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appsAccessTokensDeAuthenticateGetSignalError() instead")
    void appsAccessTokensDeAuthenticateGetSignalE(QList<OAIAccess_tokens_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void appsAccessTokensDeAuthenticateGetSignalError(QList<OAIAccess_tokens_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use badgesGetSignalError() instead")
    void badgesGetSignalE(QList<OAIBadges_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void badgesGetSignalError(QList<OAIBadges_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use badgesIdsGetSignalError() instead")
    void badgesIdsGetSignalE(QList<OAIBadges_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void badgesIdsGetSignalError(QList<OAIBadges_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use badgesIdsRecipientsGetSignalError() instead")
    void badgesIdsRecipientsGetSignalE(QList<OAIBadges_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void badgesIdsRecipientsGetSignalError(QList<OAIBadges_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use badgesNameGetSignalError() instead")
    void badgesNameGetSignalE(QList<OAIBadges_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void badgesNameGetSignalError(QList<OAIBadges_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use badgesRecipientsGetSignalError() instead")
    void badgesRecipientsGetSignalE(QList<OAIBadges_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void badgesRecipientsGetSignalError(QList<OAIBadges_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use badgesTagsGetSignalError() instead")
    void badgesTagsGetSignalE(QList<OAIBadges_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void badgesTagsGetSignalError(QList<OAIBadges_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use commentsGetSignalError() instead")
    void commentsGetSignalE(QList<OAIComments_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void commentsGetSignalError(QList<OAIComments_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use commentsIdDeletePostSignalError() instead")
    void commentsIdDeletePostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void commentsIdDeletePostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use commentsIdEditPostSignalError() instead")
    void commentsIdEditPostSignalE(OAICreated_comment summary, QNetworkReply::NetworkError error_type, QString error_str);
    void commentsIdEditPostSignalError(OAICreated_comment summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use commentsIdsGetSignalError() instead")
    void commentsIdsGetSignalE(QList<OAIComments_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void commentsIdsGetSignalError(QList<OAIComments_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use errorsGetSignalError() instead")
    void errorsGetSignalE(QList<OAIErrors_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void errorsGetSignalError(QList<OAIErrors_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use errorsIdGetSignalError() instead")
    void errorsIdGetSignalE(OAIError summary, QNetworkReply::NetworkError error_type, QString error_str);
    void errorsIdGetSignalError(OAIError summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use eventsGetSignalError() instead")
    void eventsGetSignalE(QList<OAIEvents_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void eventsGetSignalError(QList<OAIEvents_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use filtersCreateGetSignalError() instead")
    void filtersCreateGetSignalE(OAISingle_filter summary, QNetworkReply::NetworkError error_type, QString error_str);
    void filtersCreateGetSignalError(OAISingle_filter summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use filtersFiltersGetSignalError() instead")
    void filtersFiltersGetSignalE(QList<OAIFilters_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void filtersFiltersGetSignalError(QList<OAIFilters_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use inboxGetSignalError() instead")
    void inboxGetSignalE(QList<OAIInbox_items_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void inboxGetSignalError(QList<OAIInbox_items_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use inboxUnreadGetSignalError() instead")
    void inboxUnreadGetSignalE(QList<OAIInbox_items_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void inboxUnreadGetSignalError(QList<OAIInbox_items_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use infoGetSignalError() instead")
    void infoGetSignalE(OAIInfo_object summary, QNetworkReply::NetworkError error_type, QString error_str);
    void infoGetSignalError(OAIInfo_object summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use meAnswersGetSignalError() instead")
    void meAnswersGetSignalE(QList<OAIAnswers_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void meAnswersGetSignalError(QList<OAIAnswers_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use meAssociatedGetSignalError() instead")
    void meAssociatedGetSignalE(QList<OAINetwork_users_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void meAssociatedGetSignalError(QList<OAINetwork_users_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use meBadgesGetSignalError() instead")
    void meBadgesGetSignalE(QList<OAIBadges_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void meBadgesGetSignalError(QList<OAIBadges_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use meCommentsGetSignalError() instead")
    void meCommentsGetSignalE(QList<OAIComments_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void meCommentsGetSignalError(QList<OAIComments_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use meCommentsToIdGetSignalError() instead")
    void meCommentsToIdGetSignalE(QList<OAIComments_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void meCommentsToIdGetSignalError(QList<OAIComments_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use meFavoritesGetSignalError() instead")
    void meFavoritesGetSignalE(QList<OAIQuestions_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void meFavoritesGetSignalError(QList<OAIQuestions_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use meGetSignalError() instead")
    void meGetSignalE(OAIUser summary, QNetworkReply::NetworkError error_type, QString error_str);
    void meGetSignalError(OAIUser summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use meInboxGetSignalError() instead")
    void meInboxGetSignalE(QList<OAIInbox_items_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void meInboxGetSignalError(QList<OAIInbox_items_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use meInboxUnreadGetSignalError() instead")
    void meInboxUnreadGetSignalE(QList<OAIInbox_items_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void meInboxUnreadGetSignalError(QList<OAIInbox_items_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use meMentionedGetSignalError() instead")
    void meMentionedGetSignalE(QList<OAIComments_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void meMentionedGetSignalError(QList<OAIComments_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use meMergesGetSignalError() instead")
    void meMergesGetSignalE(QList<OAIAccount_merge_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void meMergesGetSignalError(QList<OAIAccount_merge_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use meNotificationsGetSignalError() instead")
    void meNotificationsGetSignalE(QList<OAINotifications_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void meNotificationsGetSignalError(QList<OAINotifications_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use meNotificationsUnreadGetSignalError() instead")
    void meNotificationsUnreadGetSignalE(QList<OAINotifications_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void meNotificationsUnreadGetSignalError(QList<OAINotifications_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mePrivilegesGetSignalError() instead")
    void mePrivilegesGetSignalE(QList<OAIPrivileges_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void mePrivilegesGetSignalError(QList<OAIPrivileges_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use meQuestionsFeaturedGetSignalError() instead")
    void meQuestionsFeaturedGetSignalE(QList<OAIQuestions_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void meQuestionsFeaturedGetSignalError(QList<OAIQuestions_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use meQuestionsGetSignalError() instead")
    void meQuestionsGetSignalE(QList<OAIQuestions_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void meQuestionsGetSignalError(QList<OAIQuestions_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use meQuestionsNoAnswersGetSignalError() instead")
    void meQuestionsNoAnswersGetSignalE(QList<OAIQuestions_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void meQuestionsNoAnswersGetSignalError(QList<OAIQuestions_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use meQuestionsUnacceptedGetSignalError() instead")
    void meQuestionsUnacceptedGetSignalE(QList<OAIQuestions_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void meQuestionsUnacceptedGetSignalError(QList<OAIQuestions_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use meQuestionsUnansweredGetSignalError() instead")
    void meQuestionsUnansweredGetSignalE(QList<OAIQuestions_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void meQuestionsUnansweredGetSignalError(QList<OAIQuestions_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use meReputationGetSignalError() instead")
    void meReputationGetSignalE(QList<OAIReputation_changes_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void meReputationGetSignalError(QList<OAIReputation_changes_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use meReputationHistoryFullGetSignalError() instead")
    void meReputationHistoryFullGetSignalE(QList<OAIReputation_history_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void meReputationHistoryFullGetSignalError(QList<OAIReputation_history_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use meReputationHistoryGetSignalError() instead")
    void meReputationHistoryGetSignalE(QList<OAIReputation_history_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void meReputationHistoryGetSignalError(QList<OAIReputation_history_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use meSuggestedEditsGetSignalError() instead")
    void meSuggestedEditsGetSignalE(QList<OAISuggested_edits_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void meSuggestedEditsGetSignalError(QList<OAISuggested_edits_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use meTagsGetSignalError() instead")
    void meTagsGetSignalE(QList<OAITags_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void meTagsGetSignalError(QList<OAITags_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use meTagsTagsTopAnswersGetSignalError() instead")
    void meTagsTagsTopAnswersGetSignalE(QList<OAIAnswers_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void meTagsTagsTopAnswersGetSignalError(QList<OAIAnswers_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use meTagsTagsTopQuestionsGetSignalError() instead")
    void meTagsTagsTopQuestionsGetSignalE(QList<OAIQuestions_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void meTagsTagsTopQuestionsGetSignalError(QList<OAIQuestions_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use meTimelineGetSignalError() instead")
    void meTimelineGetSignalE(QList<OAIUser_timeline_objects_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void meTimelineGetSignalError(QList<OAIUser_timeline_objects_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use meTopAnswerTagsGetSignalError() instead")
    void meTopAnswerTagsGetSignalE(QList<OAITop_tag_objects_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void meTopAnswerTagsGetSignalError(QList<OAITop_tag_objects_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use meTopQuestionTagsGetSignalError() instead")
    void meTopQuestionTagsGetSignalE(QList<OAITop_tag_objects_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void meTopQuestionTagsGetSignalError(QList<OAITop_tag_objects_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use meWritePermissionsGetSignalError() instead")
    void meWritePermissionsGetSignalE(QList<OAIWrite_permissions_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void meWritePermissionsGetSignalError(QList<OAIWrite_permissions_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use notificationsGetSignalError() instead")
    void notificationsGetSignalE(QList<OAINotifications_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void notificationsGetSignalError(QList<OAINotifications_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use notificationsUnreadGetSignalError() instead")
    void notificationsUnreadGetSignalE(QList<OAINotifications_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void notificationsUnreadGetSignalError(QList<OAINotifications_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postsGetSignalError() instead")
    void postsGetSignalE(QList<OAIPosts_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postsGetSignalError(QList<OAIPosts_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postsIdCommentsAddPostSignalError() instead")
    void postsIdCommentsAddPostSignalE(OAICreated_comment summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postsIdCommentsAddPostSignalError(OAICreated_comment summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postsIdsCommentsGetSignalError() instead")
    void postsIdsCommentsGetSignalE(QList<OAIComments_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postsIdsCommentsGetSignalError(QList<OAIComments_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postsIdsGetSignalError() instead")
    void postsIdsGetSignalE(QList<OAIPosts_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postsIdsGetSignalError(QList<OAIPosts_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postsIdsRevisionsGetSignalError() instead")
    void postsIdsRevisionsGetSignalE(QList<OAIRevisions_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postsIdsRevisionsGetSignalError(QList<OAIRevisions_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postsIdsSuggestedEditsGetSignalError() instead")
    void postsIdsSuggestedEditsGetSignalE(QList<OAISuggested_edits_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postsIdsSuggestedEditsGetSignalError(QList<OAISuggested_edits_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use privilegesGetSignalError() instead")
    void privilegesGetSignalE(QList<OAIPrivileges_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void privilegesGetSignalError(QList<OAIPrivileges_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use questionsFeaturedGetSignalError() instead")
    void questionsFeaturedGetSignalE(QList<OAIQuestions_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void questionsFeaturedGetSignalError(QList<OAIQuestions_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use questionsGetSignalError() instead")
    void questionsGetSignalE(QList<OAIQuestions_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void questionsGetSignalError(QList<OAIQuestions_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use questionsIdsAnswersGetSignalError() instead")
    void questionsIdsAnswersGetSignalE(QList<OAIAnswers_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void questionsIdsAnswersGetSignalError(QList<OAIAnswers_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use questionsIdsCommentsGetSignalError() instead")
    void questionsIdsCommentsGetSignalE(QList<OAIComments_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void questionsIdsCommentsGetSignalError(QList<OAIComments_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use questionsIdsGetSignalError() instead")
    void questionsIdsGetSignalE(QList<OAIQuestions_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void questionsIdsGetSignalError(QList<OAIQuestions_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use questionsIdsLinkedGetSignalError() instead")
    void questionsIdsLinkedGetSignalE(QList<OAIQuestions_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void questionsIdsLinkedGetSignalError(QList<OAIQuestions_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use questionsIdsRelatedGetSignalError() instead")
    void questionsIdsRelatedGetSignalE(QList<OAIQuestions_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void questionsIdsRelatedGetSignalError(QList<OAIQuestions_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use questionsIdsTimelineGetSignalError() instead")
    void questionsIdsTimelineGetSignalE(QList<OAIQuestion_timeline_events_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void questionsIdsTimelineGetSignalError(QList<OAIQuestion_timeline_events_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use questionsNoAnswersGetSignalError() instead")
    void questionsNoAnswersGetSignalE(QList<OAIQuestions_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void questionsNoAnswersGetSignalError(QList<OAIQuestions_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use questionsUnansweredGetSignalError() instead")
    void questionsUnansweredGetSignalE(QList<OAIQuestions_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void questionsUnansweredGetSignalError(QList<OAIQuestions_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use revisionsIdsGetSignalError() instead")
    void revisionsIdsGetSignalE(QList<OAIRevisions_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void revisionsIdsGetSignalError(QList<OAIRevisions_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchAdvancedGetSignalError() instead")
    void searchAdvancedGetSignalE(QList<OAIQuestions_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void searchAdvancedGetSignalError(QList<OAIQuestions_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchGetSignalError() instead")
    void searchGetSignalE(QList<OAIQuestions_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void searchGetSignalError(QList<OAIQuestions_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use similarGetSignalError() instead")
    void similarGetSignalE(QList<OAIQuestions_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void similarGetSignalError(QList<OAIQuestions_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesGetSignalError() instead")
    void sitesGetSignalE(QList<OAIInbox_items_inner_site> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesGetSignalError(QList<OAIInbox_items_inner_site> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use suggestedEditsGetSignalError() instead")
    void suggestedEditsGetSignalE(QList<OAISuggested_edits_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void suggestedEditsGetSignalError(QList<OAISuggested_edits_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use suggestedEditsIdsGetSignalError() instead")
    void suggestedEditsIdsGetSignalE(QList<OAISuggested_edits_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void suggestedEditsIdsGetSignalError(QList<OAISuggested_edits_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tagsGetSignalError() instead")
    void tagsGetSignalE(QList<OAITags_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void tagsGetSignalError(QList<OAITags_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tagsModeratorOnlyGetSignalError() instead")
    void tagsModeratorOnlyGetSignalE(QList<OAITags_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void tagsModeratorOnlyGetSignalError(QList<OAITags_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tagsRequiredGetSignalError() instead")
    void tagsRequiredGetSignalE(QList<OAITags_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void tagsRequiredGetSignalError(QList<OAITags_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tagsSynonymsGetSignalError() instead")
    void tagsSynonymsGetSignalE(QList<OAITag_synonyms_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void tagsSynonymsGetSignalError(QList<OAITag_synonyms_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tagsTagTopAnswerersPeriodGetSignalError() instead")
    void tagsTagTopAnswerersPeriodGetSignalE(QList<OAITag_score_objects_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void tagsTagTopAnswerersPeriodGetSignalError(QList<OAITag_score_objects_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tagsTagTopAskersPeriodGetSignalError() instead")
    void tagsTagTopAskersPeriodGetSignalE(QList<OAITag_score_objects_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void tagsTagTopAskersPeriodGetSignalError(QList<OAITag_score_objects_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tagsTagsFaqGetSignalError() instead")
    void tagsTagsFaqGetSignalE(QList<OAIQuestions_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void tagsTagsFaqGetSignalError(QList<OAIQuestions_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tagsTagsInfoGetSignalError() instead")
    void tagsTagsInfoGetSignalE(QList<OAITags_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void tagsTagsInfoGetSignalError(QList<OAITags_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tagsTagsRelatedGetSignalError() instead")
    void tagsTagsRelatedGetSignalE(QList<OAITags_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void tagsTagsRelatedGetSignalError(QList<OAITags_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tagsTagsSynonymsGetSignalError() instead")
    void tagsTagsSynonymsGetSignalE(QList<OAITag_synonyms_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void tagsTagsSynonymsGetSignalError(QList<OAITag_synonyms_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tagsTagsWikisGetSignalError() instead")
    void tagsTagsWikisGetSignalE(QList<OAITag_wikis_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void tagsTagsWikisGetSignalError(QList<OAITag_wikis_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersGetSignalError() instead")
    void usersGetSignalE(QList<OAIUsers_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void usersGetSignalError(QList<OAIUsers_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersIdInboxGetSignalError() instead")
    void usersIdInboxGetSignalE(QList<OAIInbox_items_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void usersIdInboxGetSignalError(QList<OAIInbox_items_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersIdInboxUnreadGetSignalError() instead")
    void usersIdInboxUnreadGetSignalE(QList<OAIInbox_items_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void usersIdInboxUnreadGetSignalError(QList<OAIInbox_items_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersIdNotificationsGetSignalError() instead")
    void usersIdNotificationsGetSignalE(QList<OAINotifications_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void usersIdNotificationsGetSignalError(QList<OAINotifications_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersIdNotificationsUnreadGetSignalError() instead")
    void usersIdNotificationsUnreadGetSignalE(QList<OAINotifications_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void usersIdNotificationsUnreadGetSignalError(QList<OAINotifications_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersIdPrivilegesGetSignalError() instead")
    void usersIdPrivilegesGetSignalE(QList<OAIPrivileges_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void usersIdPrivilegesGetSignalError(QList<OAIPrivileges_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersIdReputationHistoryFullGetSignalError() instead")
    void usersIdReputationHistoryFullGetSignalE(QList<OAIReputation_history_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void usersIdReputationHistoryFullGetSignalError(QList<OAIReputation_history_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersIdTagsTagsTopAnswersGetSignalError() instead")
    void usersIdTagsTagsTopAnswersGetSignalE(QList<OAIAnswers_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void usersIdTagsTagsTopAnswersGetSignalError(QList<OAIAnswers_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersIdTagsTagsTopQuestionsGetSignalError() instead")
    void usersIdTagsTagsTopQuestionsGetSignalE(QList<OAIQuestions_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void usersIdTagsTagsTopQuestionsGetSignalError(QList<OAIQuestions_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersIdTopAnswerTagsGetSignalError() instead")
    void usersIdTopAnswerTagsGetSignalE(QList<OAITop_tag_objects_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void usersIdTopAnswerTagsGetSignalError(QList<OAITop_tag_objects_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersIdTopQuestionTagsGetSignalError() instead")
    void usersIdTopQuestionTagsGetSignalE(QList<OAITop_tag_objects_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void usersIdTopQuestionTagsGetSignalError(QList<OAITop_tag_objects_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersIdWritePermissionsGetSignalError() instead")
    void usersIdWritePermissionsGetSignalE(QList<OAIWrite_permissions_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void usersIdWritePermissionsGetSignalError(QList<OAIWrite_permissions_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersIdsAnswersGetSignalError() instead")
    void usersIdsAnswersGetSignalE(QList<OAIAnswers_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void usersIdsAnswersGetSignalError(QList<OAIAnswers_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersIdsAssociatedGetSignalError() instead")
    void usersIdsAssociatedGetSignalE(QList<OAINetwork_users_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void usersIdsAssociatedGetSignalError(QList<OAINetwork_users_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersIdsBadgesGetSignalError() instead")
    void usersIdsBadgesGetSignalE(QList<OAIBadges_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void usersIdsBadgesGetSignalError(QList<OAIBadges_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersIdsCommentsGetSignalError() instead")
    void usersIdsCommentsGetSignalE(QList<OAIComments_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void usersIdsCommentsGetSignalError(QList<OAIComments_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersIdsCommentsToidGetSignalError() instead")
    void usersIdsCommentsToidGetSignalE(QList<OAIComments_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void usersIdsCommentsToidGetSignalError(QList<OAIComments_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersIdsFavoritesGetSignalError() instead")
    void usersIdsFavoritesGetSignalE(QList<OAIQuestions_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void usersIdsFavoritesGetSignalError(QList<OAIQuestions_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersIdsGetSignalError() instead")
    void usersIdsGetSignalE(QList<OAIUsers_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void usersIdsGetSignalError(QList<OAIUsers_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersIdsMentionedGetSignalError() instead")
    void usersIdsMentionedGetSignalE(QList<OAIComments_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void usersIdsMentionedGetSignalError(QList<OAIComments_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersIdsMergesGetSignalError() instead")
    void usersIdsMergesGetSignalE(QList<OAIAccount_merge_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void usersIdsMergesGetSignalError(QList<OAIAccount_merge_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersIdsQuestionsFeaturedGetSignalError() instead")
    void usersIdsQuestionsFeaturedGetSignalE(QList<OAIQuestions_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void usersIdsQuestionsFeaturedGetSignalError(QList<OAIQuestions_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersIdsQuestionsGetSignalError() instead")
    void usersIdsQuestionsGetSignalE(QList<OAIQuestions_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void usersIdsQuestionsGetSignalError(QList<OAIQuestions_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersIdsQuestionsNoAnswersGetSignalError() instead")
    void usersIdsQuestionsNoAnswersGetSignalE(QList<OAIQuestions_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void usersIdsQuestionsNoAnswersGetSignalError(QList<OAIQuestions_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersIdsQuestionsUnacceptedGetSignalError() instead")
    void usersIdsQuestionsUnacceptedGetSignalE(QList<OAIQuestions_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void usersIdsQuestionsUnacceptedGetSignalError(QList<OAIQuestions_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersIdsQuestionsUnansweredGetSignalError() instead")
    void usersIdsQuestionsUnansweredGetSignalE(QList<OAIQuestions_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void usersIdsQuestionsUnansweredGetSignalError(QList<OAIQuestions_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersIdsReputationGetSignalError() instead")
    void usersIdsReputationGetSignalE(QList<OAIReputation_changes_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void usersIdsReputationGetSignalError(QList<OAIReputation_changes_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersIdsReputationHistoryGetSignalError() instead")
    void usersIdsReputationHistoryGetSignalE(QList<OAIReputation_history_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void usersIdsReputationHistoryGetSignalError(QList<OAIReputation_history_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersIdsSuggestedEditsGetSignalError() instead")
    void usersIdsSuggestedEditsGetSignalE(QList<OAISuggested_edits_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void usersIdsSuggestedEditsGetSignalError(QList<OAISuggested_edits_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersIdsTagsGetSignalError() instead")
    void usersIdsTagsGetSignalE(QList<OAITags_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void usersIdsTagsGetSignalError(QList<OAITags_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersIdsTimelineGetSignalError() instead")
    void usersIdsTimelineGetSignalE(QList<OAIUser_timeline_objects_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void usersIdsTimelineGetSignalError(QList<OAIUser_timeline_objects_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersModeratorsElectedGetSignalError() instead")
    void usersModeratorsElectedGetSignalE(QList<OAIUsers_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void usersModeratorsElectedGetSignalError(QList<OAIUsers_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersModeratorsGetSignalError() instead")
    void usersModeratorsGetSignalE(QList<OAIUsers_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void usersModeratorsGetSignalError(QList<OAIUsers_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use accessTokensAccessTokensGetSignalErrorFull() instead")
    void accessTokensAccessTokensGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void accessTokensAccessTokensGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accessTokensAccessTokensInvalidateGetSignalErrorFull() instead")
    void accessTokensAccessTokensInvalidateGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void accessTokensAccessTokensInvalidateGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use answersGetSignalErrorFull() instead")
    void answersGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void answersGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use answersIdsCommentsGetSignalErrorFull() instead")
    void answersIdsCommentsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void answersIdsCommentsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use answersIdsGetSignalErrorFull() instead")
    void answersIdsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void answersIdsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use appsAccessTokensDeAuthenticateGetSignalErrorFull() instead")
    void appsAccessTokensDeAuthenticateGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void appsAccessTokensDeAuthenticateGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use badgesGetSignalErrorFull() instead")
    void badgesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void badgesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use badgesIdsGetSignalErrorFull() instead")
    void badgesIdsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void badgesIdsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use badgesIdsRecipientsGetSignalErrorFull() instead")
    void badgesIdsRecipientsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void badgesIdsRecipientsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use badgesNameGetSignalErrorFull() instead")
    void badgesNameGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void badgesNameGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use badgesRecipientsGetSignalErrorFull() instead")
    void badgesRecipientsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void badgesRecipientsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use badgesTagsGetSignalErrorFull() instead")
    void badgesTagsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void badgesTagsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use commentsGetSignalErrorFull() instead")
    void commentsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void commentsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use commentsIdDeletePostSignalErrorFull() instead")
    void commentsIdDeletePostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void commentsIdDeletePostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use commentsIdEditPostSignalErrorFull() instead")
    void commentsIdEditPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void commentsIdEditPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use commentsIdsGetSignalErrorFull() instead")
    void commentsIdsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void commentsIdsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use errorsGetSignalErrorFull() instead")
    void errorsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void errorsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use errorsIdGetSignalErrorFull() instead")
    void errorsIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void errorsIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use eventsGetSignalErrorFull() instead")
    void eventsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void eventsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use filtersCreateGetSignalErrorFull() instead")
    void filtersCreateGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void filtersCreateGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use filtersFiltersGetSignalErrorFull() instead")
    void filtersFiltersGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void filtersFiltersGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use inboxGetSignalErrorFull() instead")
    void inboxGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void inboxGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use inboxUnreadGetSignalErrorFull() instead")
    void inboxUnreadGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void inboxUnreadGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use infoGetSignalErrorFull() instead")
    void infoGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void infoGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use meAnswersGetSignalErrorFull() instead")
    void meAnswersGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void meAnswersGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use meAssociatedGetSignalErrorFull() instead")
    void meAssociatedGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void meAssociatedGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use meBadgesGetSignalErrorFull() instead")
    void meBadgesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void meBadgesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use meCommentsGetSignalErrorFull() instead")
    void meCommentsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void meCommentsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use meCommentsToIdGetSignalErrorFull() instead")
    void meCommentsToIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void meCommentsToIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use meFavoritesGetSignalErrorFull() instead")
    void meFavoritesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void meFavoritesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use meGetSignalErrorFull() instead")
    void meGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void meGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use meInboxGetSignalErrorFull() instead")
    void meInboxGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void meInboxGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use meInboxUnreadGetSignalErrorFull() instead")
    void meInboxUnreadGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void meInboxUnreadGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use meMentionedGetSignalErrorFull() instead")
    void meMentionedGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void meMentionedGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use meMergesGetSignalErrorFull() instead")
    void meMergesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void meMergesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use meNotificationsGetSignalErrorFull() instead")
    void meNotificationsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void meNotificationsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use meNotificationsUnreadGetSignalErrorFull() instead")
    void meNotificationsUnreadGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void meNotificationsUnreadGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mePrivilegesGetSignalErrorFull() instead")
    void mePrivilegesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void mePrivilegesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use meQuestionsFeaturedGetSignalErrorFull() instead")
    void meQuestionsFeaturedGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void meQuestionsFeaturedGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use meQuestionsGetSignalErrorFull() instead")
    void meQuestionsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void meQuestionsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use meQuestionsNoAnswersGetSignalErrorFull() instead")
    void meQuestionsNoAnswersGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void meQuestionsNoAnswersGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use meQuestionsUnacceptedGetSignalErrorFull() instead")
    void meQuestionsUnacceptedGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void meQuestionsUnacceptedGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use meQuestionsUnansweredGetSignalErrorFull() instead")
    void meQuestionsUnansweredGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void meQuestionsUnansweredGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use meReputationGetSignalErrorFull() instead")
    void meReputationGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void meReputationGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use meReputationHistoryFullGetSignalErrorFull() instead")
    void meReputationHistoryFullGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void meReputationHistoryFullGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use meReputationHistoryGetSignalErrorFull() instead")
    void meReputationHistoryGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void meReputationHistoryGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use meSuggestedEditsGetSignalErrorFull() instead")
    void meSuggestedEditsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void meSuggestedEditsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use meTagsGetSignalErrorFull() instead")
    void meTagsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void meTagsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use meTagsTagsTopAnswersGetSignalErrorFull() instead")
    void meTagsTagsTopAnswersGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void meTagsTagsTopAnswersGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use meTagsTagsTopQuestionsGetSignalErrorFull() instead")
    void meTagsTagsTopQuestionsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void meTagsTagsTopQuestionsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use meTimelineGetSignalErrorFull() instead")
    void meTimelineGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void meTimelineGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use meTopAnswerTagsGetSignalErrorFull() instead")
    void meTopAnswerTagsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void meTopAnswerTagsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use meTopQuestionTagsGetSignalErrorFull() instead")
    void meTopQuestionTagsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void meTopQuestionTagsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use meWritePermissionsGetSignalErrorFull() instead")
    void meWritePermissionsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void meWritePermissionsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use notificationsGetSignalErrorFull() instead")
    void notificationsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void notificationsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use notificationsUnreadGetSignalErrorFull() instead")
    void notificationsUnreadGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void notificationsUnreadGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postsGetSignalErrorFull() instead")
    void postsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postsIdCommentsAddPostSignalErrorFull() instead")
    void postsIdCommentsAddPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postsIdCommentsAddPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postsIdsCommentsGetSignalErrorFull() instead")
    void postsIdsCommentsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postsIdsCommentsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postsIdsGetSignalErrorFull() instead")
    void postsIdsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postsIdsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postsIdsRevisionsGetSignalErrorFull() instead")
    void postsIdsRevisionsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postsIdsRevisionsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postsIdsSuggestedEditsGetSignalErrorFull() instead")
    void postsIdsSuggestedEditsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postsIdsSuggestedEditsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use privilegesGetSignalErrorFull() instead")
    void privilegesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void privilegesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use questionsFeaturedGetSignalErrorFull() instead")
    void questionsFeaturedGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void questionsFeaturedGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use questionsGetSignalErrorFull() instead")
    void questionsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void questionsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use questionsIdsAnswersGetSignalErrorFull() instead")
    void questionsIdsAnswersGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void questionsIdsAnswersGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use questionsIdsCommentsGetSignalErrorFull() instead")
    void questionsIdsCommentsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void questionsIdsCommentsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use questionsIdsGetSignalErrorFull() instead")
    void questionsIdsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void questionsIdsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use questionsIdsLinkedGetSignalErrorFull() instead")
    void questionsIdsLinkedGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void questionsIdsLinkedGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use questionsIdsRelatedGetSignalErrorFull() instead")
    void questionsIdsRelatedGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void questionsIdsRelatedGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use questionsIdsTimelineGetSignalErrorFull() instead")
    void questionsIdsTimelineGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void questionsIdsTimelineGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use questionsNoAnswersGetSignalErrorFull() instead")
    void questionsNoAnswersGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void questionsNoAnswersGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use questionsUnansweredGetSignalErrorFull() instead")
    void questionsUnansweredGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void questionsUnansweredGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use revisionsIdsGetSignalErrorFull() instead")
    void revisionsIdsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void revisionsIdsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchAdvancedGetSignalErrorFull() instead")
    void searchAdvancedGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void searchAdvancedGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchGetSignalErrorFull() instead")
    void searchGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void searchGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use similarGetSignalErrorFull() instead")
    void similarGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void similarGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sitesGetSignalErrorFull() instead")
    void sitesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sitesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use suggestedEditsGetSignalErrorFull() instead")
    void suggestedEditsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void suggestedEditsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use suggestedEditsIdsGetSignalErrorFull() instead")
    void suggestedEditsIdsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void suggestedEditsIdsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tagsGetSignalErrorFull() instead")
    void tagsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void tagsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tagsModeratorOnlyGetSignalErrorFull() instead")
    void tagsModeratorOnlyGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void tagsModeratorOnlyGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tagsRequiredGetSignalErrorFull() instead")
    void tagsRequiredGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void tagsRequiredGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tagsSynonymsGetSignalErrorFull() instead")
    void tagsSynonymsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void tagsSynonymsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tagsTagTopAnswerersPeriodGetSignalErrorFull() instead")
    void tagsTagTopAnswerersPeriodGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void tagsTagTopAnswerersPeriodGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tagsTagTopAskersPeriodGetSignalErrorFull() instead")
    void tagsTagTopAskersPeriodGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void tagsTagTopAskersPeriodGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tagsTagsFaqGetSignalErrorFull() instead")
    void tagsTagsFaqGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void tagsTagsFaqGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tagsTagsInfoGetSignalErrorFull() instead")
    void tagsTagsInfoGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void tagsTagsInfoGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tagsTagsRelatedGetSignalErrorFull() instead")
    void tagsTagsRelatedGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void tagsTagsRelatedGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tagsTagsSynonymsGetSignalErrorFull() instead")
    void tagsTagsSynonymsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void tagsTagsSynonymsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tagsTagsWikisGetSignalErrorFull() instead")
    void tagsTagsWikisGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void tagsTagsWikisGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersGetSignalErrorFull() instead")
    void usersGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usersGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersIdInboxGetSignalErrorFull() instead")
    void usersIdInboxGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usersIdInboxGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersIdInboxUnreadGetSignalErrorFull() instead")
    void usersIdInboxUnreadGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usersIdInboxUnreadGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersIdNotificationsGetSignalErrorFull() instead")
    void usersIdNotificationsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usersIdNotificationsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersIdNotificationsUnreadGetSignalErrorFull() instead")
    void usersIdNotificationsUnreadGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usersIdNotificationsUnreadGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersIdPrivilegesGetSignalErrorFull() instead")
    void usersIdPrivilegesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usersIdPrivilegesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersIdReputationHistoryFullGetSignalErrorFull() instead")
    void usersIdReputationHistoryFullGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usersIdReputationHistoryFullGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersIdTagsTagsTopAnswersGetSignalErrorFull() instead")
    void usersIdTagsTagsTopAnswersGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usersIdTagsTagsTopAnswersGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersIdTagsTagsTopQuestionsGetSignalErrorFull() instead")
    void usersIdTagsTagsTopQuestionsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usersIdTagsTagsTopQuestionsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersIdTopAnswerTagsGetSignalErrorFull() instead")
    void usersIdTopAnswerTagsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usersIdTopAnswerTagsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersIdTopQuestionTagsGetSignalErrorFull() instead")
    void usersIdTopQuestionTagsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usersIdTopQuestionTagsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersIdWritePermissionsGetSignalErrorFull() instead")
    void usersIdWritePermissionsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usersIdWritePermissionsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersIdsAnswersGetSignalErrorFull() instead")
    void usersIdsAnswersGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usersIdsAnswersGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersIdsAssociatedGetSignalErrorFull() instead")
    void usersIdsAssociatedGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usersIdsAssociatedGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersIdsBadgesGetSignalErrorFull() instead")
    void usersIdsBadgesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usersIdsBadgesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersIdsCommentsGetSignalErrorFull() instead")
    void usersIdsCommentsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usersIdsCommentsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersIdsCommentsToidGetSignalErrorFull() instead")
    void usersIdsCommentsToidGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usersIdsCommentsToidGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersIdsFavoritesGetSignalErrorFull() instead")
    void usersIdsFavoritesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usersIdsFavoritesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersIdsGetSignalErrorFull() instead")
    void usersIdsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usersIdsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersIdsMentionedGetSignalErrorFull() instead")
    void usersIdsMentionedGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usersIdsMentionedGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersIdsMergesGetSignalErrorFull() instead")
    void usersIdsMergesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usersIdsMergesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersIdsQuestionsFeaturedGetSignalErrorFull() instead")
    void usersIdsQuestionsFeaturedGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usersIdsQuestionsFeaturedGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersIdsQuestionsGetSignalErrorFull() instead")
    void usersIdsQuestionsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usersIdsQuestionsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersIdsQuestionsNoAnswersGetSignalErrorFull() instead")
    void usersIdsQuestionsNoAnswersGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usersIdsQuestionsNoAnswersGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersIdsQuestionsUnacceptedGetSignalErrorFull() instead")
    void usersIdsQuestionsUnacceptedGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usersIdsQuestionsUnacceptedGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersIdsQuestionsUnansweredGetSignalErrorFull() instead")
    void usersIdsQuestionsUnansweredGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usersIdsQuestionsUnansweredGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersIdsReputationGetSignalErrorFull() instead")
    void usersIdsReputationGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usersIdsReputationGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersIdsReputationHistoryGetSignalErrorFull() instead")
    void usersIdsReputationHistoryGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usersIdsReputationHistoryGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersIdsSuggestedEditsGetSignalErrorFull() instead")
    void usersIdsSuggestedEditsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usersIdsSuggestedEditsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersIdsTagsGetSignalErrorFull() instead")
    void usersIdsTagsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usersIdsTagsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersIdsTimelineGetSignalErrorFull() instead")
    void usersIdsTimelineGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usersIdsTimelineGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersModeratorsElectedGetSignalErrorFull() instead")
    void usersModeratorsElectedGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usersModeratorsElectedGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usersModeratorsGetSignalErrorFull() instead")
    void usersModeratorsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usersModeratorsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
