/**
 * StackExchange
 * Stack Exchange is a network of 130+ Q&A communities including Stack Overflow. 
 *
 * The version of the OpenAPI document: 2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITag_score_objects_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITag_score_objects_inner::OAITag_score_objects_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITag_score_objects_inner::OAITag_score_objects_inner() {
    this->initializeModel();
}

OAITag_score_objects_inner::~OAITag_score_objects_inner() {}

void OAITag_score_objects_inner::initializeModel() {

    m_post_count_isSet = false;
    m_post_count_isValid = false;

    m_score_isSet = false;
    m_score_isValid = false;

    m_user_isSet = false;
    m_user_isValid = false;
}

void OAITag_score_objects_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITag_score_objects_inner::fromJsonObject(QJsonObject json) {

    m_post_count_isValid = ::OpenAPI::fromJsonValue(m_post_count, json[QString("post_count")]);
    m_post_count_isSet = !json[QString("post_count")].isNull() && m_post_count_isValid;

    m_score_isValid = ::OpenAPI::fromJsonValue(m_score, json[QString("score")]);
    m_score_isSet = !json[QString("score")].isNull() && m_score_isValid;

    m_user_isValid = ::OpenAPI::fromJsonValue(m_user, json[QString("user")]);
    m_user_isSet = !json[QString("user")].isNull() && m_user_isValid;
}

QString OAITag_score_objects_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITag_score_objects_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_post_count_isSet) {
        obj.insert(QString("post_count"), ::OpenAPI::toJsonValue(m_post_count));
    }
    if (m_score_isSet) {
        obj.insert(QString("score"), ::OpenAPI::toJsonValue(m_score));
    }
    if (m_user.isSet()) {
        obj.insert(QString("user"), ::OpenAPI::toJsonValue(m_user));
    }
    return obj;
}

qint32 OAITag_score_objects_inner::getPostCount() const {
    return m_post_count;
}
void OAITag_score_objects_inner::setPostCount(const qint32 &post_count) {
    m_post_count = post_count;
    m_post_count_isSet = true;
}

bool OAITag_score_objects_inner::is_post_count_Set() const{
    return m_post_count_isSet;
}

bool OAITag_score_objects_inner::is_post_count_Valid() const{
    return m_post_count_isValid;
}

qint32 OAITag_score_objects_inner::getScore() const {
    return m_score;
}
void OAITag_score_objects_inner::setScore(const qint32 &score) {
    m_score = score;
    m_score_isSet = true;
}

bool OAITag_score_objects_inner::is_score_Set() const{
    return m_score_isSet;
}

bool OAITag_score_objects_inner::is_score_Valid() const{
    return m_score_isValid;
}

OAIAnswers_inner_last_editor OAITag_score_objects_inner::getUser() const {
    return m_user;
}
void OAITag_score_objects_inner::setUser(const OAIAnswers_inner_last_editor &user) {
    m_user = user;
    m_user_isSet = true;
}

bool OAITag_score_objects_inner::is_user_Set() const{
    return m_user_isSet;
}

bool OAITag_score_objects_inner::is_user_Valid() const{
    return m_user_isValid;
}

bool OAITag_score_objects_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_post_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_score_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITag_score_objects_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
