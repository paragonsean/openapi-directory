/**
 * StackExchange
 * Stack Exchange is a network of 130+ Q&A communities including Stack Overflow. 
 *
 * The version of the OpenAPI document: 2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIError.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIError::OAIError(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIError::OAIError() {
    this->initializeModel();
}

OAIError::~OAIError() {}

void OAIError::initializeModel() {

    m_error_id_isSet = false;
    m_error_id_isValid = false;

    m_error_message_isSet = false;
    m_error_message_isValid = false;

    m_error_name_isSet = false;
    m_error_name_isValid = false;
}

void OAIError::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIError::fromJsonObject(QJsonObject json) {

    m_error_id_isValid = ::OpenAPI::fromJsonValue(m_error_id, json[QString("error_id")]);
    m_error_id_isSet = !json[QString("error_id")].isNull() && m_error_id_isValid;

    m_error_message_isValid = ::OpenAPI::fromJsonValue(m_error_message, json[QString("error_message")]);
    m_error_message_isSet = !json[QString("error_message")].isNull() && m_error_message_isValid;

    m_error_name_isValid = ::OpenAPI::fromJsonValue(m_error_name, json[QString("error_name")]);
    m_error_name_isSet = !json[QString("error_name")].isNull() && m_error_name_isValid;
}

QString OAIError::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIError::asJsonObject() const {
    QJsonObject obj;
    if (m_error_id_isSet) {
        obj.insert(QString("error_id"), ::OpenAPI::toJsonValue(m_error_id));
    }
    if (m_error_message_isSet) {
        obj.insert(QString("error_message"), ::OpenAPI::toJsonValue(m_error_message));
    }
    if (m_error_name_isSet) {
        obj.insert(QString("error_name"), ::OpenAPI::toJsonValue(m_error_name));
    }
    return obj;
}

double OAIError::getErrorId() const {
    return m_error_id;
}
void OAIError::setErrorId(const double &error_id) {
    m_error_id = error_id;
    m_error_id_isSet = true;
}

bool OAIError::is_error_id_Set() const{
    return m_error_id_isSet;
}

bool OAIError::is_error_id_Valid() const{
    return m_error_id_isValid;
}

QString OAIError::getErrorMessage() const {
    return m_error_message;
}
void OAIError::setErrorMessage(const QString &error_message) {
    m_error_message = error_message;
    m_error_message_isSet = true;
}

bool OAIError::is_error_message_Set() const{
    return m_error_message_isSet;
}

bool OAIError::is_error_message_Valid() const{
    return m_error_message_isValid;
}

QString OAIError::getErrorName() const {
    return m_error_name;
}
void OAIError::setErrorName(const QString &error_name) {
    m_error_name = error_name;
    m_error_name_isSet = true;
}

bool OAIError::is_error_name_Set() const{
    return m_error_name_isSet;
}

bool OAIError::is_error_name_Valid() const{
    return m_error_name_isValid;
}

bool OAIError::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_error_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIError::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
