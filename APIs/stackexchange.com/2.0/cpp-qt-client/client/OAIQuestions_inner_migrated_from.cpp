/**
 * StackExchange
 * Stack Exchange is a network of 130+ Q&A communities including Stack Overflow. 
 *
 * The version of the OpenAPI document: 2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIQuestions_inner_migrated_from.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIQuestions_inner_migrated_from::OAIQuestions_inner_migrated_from(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIQuestions_inner_migrated_from::OAIQuestions_inner_migrated_from() {
    this->initializeModel();
}

OAIQuestions_inner_migrated_from::~OAIQuestions_inner_migrated_from() {}

void OAIQuestions_inner_migrated_from::initializeModel() {

    m_on_date_isSet = false;
    m_on_date_isValid = false;

    m_other_site_isSet = false;
    m_other_site_isValid = false;

    m_question_id_isSet = false;
    m_question_id_isValid = false;
}

void OAIQuestions_inner_migrated_from::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIQuestions_inner_migrated_from::fromJsonObject(QJsonObject json) {

    m_on_date_isValid = ::OpenAPI::fromJsonValue(m_on_date, json[QString("on_date")]);
    m_on_date_isSet = !json[QString("on_date")].isNull() && m_on_date_isValid;

    m_other_site_isValid = ::OpenAPI::fromJsonValue(m_other_site, json[QString("other_site")]);
    m_other_site_isSet = !json[QString("other_site")].isNull() && m_other_site_isValid;

    m_question_id_isValid = ::OpenAPI::fromJsonValue(m_question_id, json[QString("question_id")]);
    m_question_id_isSet = !json[QString("question_id")].isNull() && m_question_id_isValid;
}

QString OAIQuestions_inner_migrated_from::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIQuestions_inner_migrated_from::asJsonObject() const {
    QJsonObject obj;
    if (m_on_date_isSet) {
        obj.insert(QString("on_date"), ::OpenAPI::toJsonValue(m_on_date));
    }
    if (m_other_site.isSet()) {
        obj.insert(QString("other_site"), ::OpenAPI::toJsonValue(m_other_site));
    }
    if (m_question_id_isSet) {
        obj.insert(QString("question_id"), ::OpenAPI::toJsonValue(m_question_id));
    }
    return obj;
}

qint32 OAIQuestions_inner_migrated_from::getOnDate() const {
    return m_on_date;
}
void OAIQuestions_inner_migrated_from::setOnDate(const qint32 &on_date) {
    m_on_date = on_date;
    m_on_date_isSet = true;
}

bool OAIQuestions_inner_migrated_from::is_on_date_Set() const{
    return m_on_date_isSet;
}

bool OAIQuestions_inner_migrated_from::is_on_date_Valid() const{
    return m_on_date_isValid;
}

OAIInbox_items_inner_site OAIQuestions_inner_migrated_from::getOtherSite() const {
    return m_other_site;
}
void OAIQuestions_inner_migrated_from::setOtherSite(const OAIInbox_items_inner_site &other_site) {
    m_other_site = other_site;
    m_other_site_isSet = true;
}

bool OAIQuestions_inner_migrated_from::is_other_site_Set() const{
    return m_other_site_isSet;
}

bool OAIQuestions_inner_migrated_from::is_other_site_Valid() const{
    return m_other_site_isValid;
}

qint32 OAIQuestions_inner_migrated_from::getQuestionId() const {
    return m_question_id;
}
void OAIQuestions_inner_migrated_from::setQuestionId(const qint32 &question_id) {
    m_question_id = question_id;
    m_question_id_isSet = true;
}

bool OAIQuestions_inner_migrated_from::is_question_id_Set() const{
    return m_question_id_isSet;
}

bool OAIQuestions_inner_migrated_from::is_question_id_Valid() const{
    return m_question_id_isValid;
}

bool OAIQuestions_inner_migrated_from::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_on_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_other_site.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_question_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIQuestions_inner_migrated_from::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
