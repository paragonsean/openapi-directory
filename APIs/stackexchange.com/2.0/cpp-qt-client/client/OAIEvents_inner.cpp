/**
 * StackExchange
 * Stack Exchange is a network of 130+ Q&A communities including Stack Overflow. 
 *
 * The version of the OpenAPI document: 2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEvents_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEvents_inner::OAIEvents_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEvents_inner::OAIEvents_inner() {
    this->initializeModel();
}

OAIEvents_inner::~OAIEvents_inner() {}

void OAIEvents_inner::initializeModel() {

    m_creation_date_isSet = false;
    m_creation_date_isValid = false;

    m_event_type_isSet = false;
    m_event_type_isValid = false;

    m_excerpt_isSet = false;
    m_excerpt_isValid = false;

    m_link_isSet = false;
    m_link_isValid = false;

    m_the_id_of_the_object__answer_comment_question_or_user_the_event_describes_isSet = false;
    m_the_id_of_the_object__answer_comment_question_or_user_the_event_describes_isValid = false;
}

void OAIEvents_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEvents_inner::fromJsonObject(QJsonObject json) {

    m_creation_date_isValid = ::OpenAPI::fromJsonValue(m_creation_date, json[QString("creation_date")]);
    m_creation_date_isSet = !json[QString("creation_date")].isNull() && m_creation_date_isValid;

    m_event_type_isValid = ::OpenAPI::fromJsonValue(m_event_type, json[QString("event_type")]);
    m_event_type_isSet = !json[QString("event_type")].isNull() && m_event_type_isValid;

    m_excerpt_isValid = ::OpenAPI::fromJsonValue(m_excerpt, json[QString("excerpt")]);
    m_excerpt_isSet = !json[QString("excerpt")].isNull() && m_excerpt_isValid;

    m_link_isValid = ::OpenAPI::fromJsonValue(m_link, json[QString("link")]);
    m_link_isSet = !json[QString("link")].isNull() && m_link_isValid;

    m_the_id_of_the_object__answer_comment_question_or_user_the_event_describes_isValid = ::OpenAPI::fromJsonValue(m_the_id_of_the_object__answer_comment_question_or_user_the_event_describes, json[QString("the id of the object (answer, comment, question, or user) the event describes")]);
    m_the_id_of_the_object__answer_comment_question_or_user_the_event_describes_isSet = !json[QString("the id of the object (answer, comment, question, or user) the event describes")].isNull() && m_the_id_of_the_object__answer_comment_question_or_user_the_event_describes_isValid;
}

QString OAIEvents_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEvents_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_creation_date_isSet) {
        obj.insert(QString("creation_date"), ::OpenAPI::toJsonValue(m_creation_date));
    }
    if (m_event_type_isSet) {
        obj.insert(QString("event_type"), ::OpenAPI::toJsonValue(m_event_type));
    }
    if (m_excerpt_isSet) {
        obj.insert(QString("excerpt"), ::OpenAPI::toJsonValue(m_excerpt));
    }
    if (m_link_isSet) {
        obj.insert(QString("link"), ::OpenAPI::toJsonValue(m_link));
    }
    if (m_the_id_of_the_object__answer_comment_question_or_user_the_event_describes_isSet) {
        obj.insert(QString("the id of the object (answer, comment, question, or user) the event describes"), ::OpenAPI::toJsonValue(m_the_id_of_the_object__answer_comment_question_or_user_the_event_describes));
    }
    return obj;
}

qint32 OAIEvents_inner::getCreationDate() const {
    return m_creation_date;
}
void OAIEvents_inner::setCreationDate(const qint32 &creation_date) {
    m_creation_date = creation_date;
    m_creation_date_isSet = true;
}

bool OAIEvents_inner::is_creation_date_Set() const{
    return m_creation_date_isSet;
}

bool OAIEvents_inner::is_creation_date_Valid() const{
    return m_creation_date_isValid;
}

QString OAIEvents_inner::getEventType() const {
    return m_event_type;
}
void OAIEvents_inner::setEventType(const QString &event_type) {
    m_event_type = event_type;
    m_event_type_isSet = true;
}

bool OAIEvents_inner::is_event_type_Set() const{
    return m_event_type_isSet;
}

bool OAIEvents_inner::is_event_type_Valid() const{
    return m_event_type_isValid;
}

QString OAIEvents_inner::getExcerpt() const {
    return m_excerpt;
}
void OAIEvents_inner::setExcerpt(const QString &excerpt) {
    m_excerpt = excerpt;
    m_excerpt_isSet = true;
}

bool OAIEvents_inner::is_excerpt_Set() const{
    return m_excerpt_isSet;
}

bool OAIEvents_inner::is_excerpt_Valid() const{
    return m_excerpt_isValid;
}

QString OAIEvents_inner::getLink() const {
    return m_link;
}
void OAIEvents_inner::setLink(const QString &link) {
    m_link = link;
    m_link_isSet = true;
}

bool OAIEvents_inner::is_link_Set() const{
    return m_link_isSet;
}

bool OAIEvents_inner::is_link_Valid() const{
    return m_link_isValid;
}

qint32 OAIEvents_inner::getTheIdOfTheObjectAnswerCommentQuestionOrUserTheEventDescribes() const {
    return m_the_id_of_the_object__answer_comment_question_or_user_the_event_describes;
}
void OAIEvents_inner::setTheIdOfTheObjectAnswerCommentQuestionOrUserTheEventDescribes(const qint32 &the_id_of_the_object__answer_comment_question_or_user_the_event_describes) {
    m_the_id_of_the_object__answer_comment_question_or_user_the_event_describes = the_id_of_the_object__answer_comment_question_or_user_the_event_describes;
    m_the_id_of_the_object__answer_comment_question_or_user_the_event_describes_isSet = true;
}

bool OAIEvents_inner::is_the_id_of_the_object__answer_comment_question_or_user_the_event_describes_Set() const{
    return m_the_id_of_the_object__answer_comment_question_or_user_the_event_describes_isSet;
}

bool OAIEvents_inner::is_the_id_of_the_object__answer_comment_question_or_user_the_event_describes_Valid() const{
    return m_the_id_of_the_object__answer_comment_question_or_user_the_event_describes_isValid;
}

bool OAIEvents_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_creation_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_excerpt_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_link_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_the_id_of_the_object__answer_comment_question_or_user_the_event_describes_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEvents_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
