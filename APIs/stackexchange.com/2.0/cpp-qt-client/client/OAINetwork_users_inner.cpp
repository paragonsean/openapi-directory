/**
 * StackExchange
 * Stack Exchange is a network of 130+ Q&A communities including Stack Overflow. 
 *
 * The version of the OpenAPI document: 2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINetwork_users_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINetwork_users_inner::OAINetwork_users_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINetwork_users_inner::OAINetwork_users_inner() {
    this->initializeModel();
}

OAINetwork_users_inner::~OAINetwork_users_inner() {}

void OAINetwork_users_inner::initializeModel() {

    m_account_id_isSet = false;
    m_account_id_isValid = false;

    m_answer_count_isSet = false;
    m_answer_count_isValid = false;

    m_badge_counts_isSet = false;
    m_badge_counts_isValid = false;

    m_creation_date_isSet = false;
    m_creation_date_isValid = false;

    m_last_access_date_isSet = false;
    m_last_access_date_isValid = false;

    m_question_count_isSet = false;
    m_question_count_isValid = false;

    m_reputation_isSet = false;
    m_reputation_isValid = false;

    m_site_name_isSet = false;
    m_site_name_isValid = false;

    m_site_url_isSet = false;
    m_site_url_isValid = false;

    m_top_answers_isSet = false;
    m_top_answers_isValid = false;

    m_top_questions_isSet = false;
    m_top_questions_isValid = false;

    m_user_id_isSet = false;
    m_user_id_isValid = false;

    m_user_type_isSet = false;
    m_user_type_isValid = false;
}

void OAINetwork_users_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINetwork_users_inner::fromJsonObject(QJsonObject json) {

    m_account_id_isValid = ::OpenAPI::fromJsonValue(m_account_id, json[QString("account_id")]);
    m_account_id_isSet = !json[QString("account_id")].isNull() && m_account_id_isValid;

    m_answer_count_isValid = ::OpenAPI::fromJsonValue(m_answer_count, json[QString("answer_count")]);
    m_answer_count_isSet = !json[QString("answer_count")].isNull() && m_answer_count_isValid;

    m_badge_counts_isValid = ::OpenAPI::fromJsonValue(m_badge_counts, json[QString("badge_counts")]);
    m_badge_counts_isSet = !json[QString("badge_counts")].isNull() && m_badge_counts_isValid;

    m_creation_date_isValid = ::OpenAPI::fromJsonValue(m_creation_date, json[QString("creation_date")]);
    m_creation_date_isSet = !json[QString("creation_date")].isNull() && m_creation_date_isValid;

    m_last_access_date_isValid = ::OpenAPI::fromJsonValue(m_last_access_date, json[QString("last_access_date")]);
    m_last_access_date_isSet = !json[QString("last_access_date")].isNull() && m_last_access_date_isValid;

    m_question_count_isValid = ::OpenAPI::fromJsonValue(m_question_count, json[QString("question_count")]);
    m_question_count_isSet = !json[QString("question_count")].isNull() && m_question_count_isValid;

    m_reputation_isValid = ::OpenAPI::fromJsonValue(m_reputation, json[QString("reputation")]);
    m_reputation_isSet = !json[QString("reputation")].isNull() && m_reputation_isValid;

    m_site_name_isValid = ::OpenAPI::fromJsonValue(m_site_name, json[QString("site_name")]);
    m_site_name_isSet = !json[QString("site_name")].isNull() && m_site_name_isValid;

    m_site_url_isValid = ::OpenAPI::fromJsonValue(m_site_url, json[QString("site_url")]);
    m_site_url_isSet = !json[QString("site_url")].isNull() && m_site_url_isValid;

    m_top_answers_isValid = ::OpenAPI::fromJsonValue(m_top_answers, json[QString("top_answers")]);
    m_top_answers_isSet = !json[QString("top_answers")].isNull() && m_top_answers_isValid;

    m_top_questions_isValid = ::OpenAPI::fromJsonValue(m_top_questions, json[QString("top_questions")]);
    m_top_questions_isSet = !json[QString("top_questions")].isNull() && m_top_questions_isValid;

    m_user_id_isValid = ::OpenAPI::fromJsonValue(m_user_id, json[QString("user_id")]);
    m_user_id_isSet = !json[QString("user_id")].isNull() && m_user_id_isValid;

    m_user_type_isValid = ::OpenAPI::fromJsonValue(m_user_type, json[QString("user_type")]);
    m_user_type_isSet = !json[QString("user_type")].isNull() && m_user_type_isValid;
}

QString OAINetwork_users_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINetwork_users_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_account_id_isSet) {
        obj.insert(QString("account_id"), ::OpenAPI::toJsonValue(m_account_id));
    }
    if (m_answer_count_isSet) {
        obj.insert(QString("answer_count"), ::OpenAPI::toJsonValue(m_answer_count));
    }
    if (m_badge_counts.isSet()) {
        obj.insert(QString("badge_counts"), ::OpenAPI::toJsonValue(m_badge_counts));
    }
    if (m_creation_date_isSet) {
        obj.insert(QString("creation_date"), ::OpenAPI::toJsonValue(m_creation_date));
    }
    if (m_last_access_date_isSet) {
        obj.insert(QString("last_access_date"), ::OpenAPI::toJsonValue(m_last_access_date));
    }
    if (m_question_count_isSet) {
        obj.insert(QString("question_count"), ::OpenAPI::toJsonValue(m_question_count));
    }
    if (m_reputation_isSet) {
        obj.insert(QString("reputation"), ::OpenAPI::toJsonValue(m_reputation));
    }
    if (m_site_name_isSet) {
        obj.insert(QString("site_name"), ::OpenAPI::toJsonValue(m_site_name));
    }
    if (m_site_url_isSet) {
        obj.insert(QString("site_url"), ::OpenAPI::toJsonValue(m_site_url));
    }
    if (m_top_answers.size() > 0) {
        obj.insert(QString("top_answers"), ::OpenAPI::toJsonValue(m_top_answers));
    }
    if (m_top_questions.size() > 0) {
        obj.insert(QString("top_questions"), ::OpenAPI::toJsonValue(m_top_questions));
    }
    if (m_user_id_isSet) {
        obj.insert(QString("user_id"), ::OpenAPI::toJsonValue(m_user_id));
    }
    if (m_user_type_isSet) {
        obj.insert(QString("user_type"), ::OpenAPI::toJsonValue(m_user_type));
    }
    return obj;
}

qint32 OAINetwork_users_inner::getAccountId() const {
    return m_account_id;
}
void OAINetwork_users_inner::setAccountId(const qint32 &account_id) {
    m_account_id = account_id;
    m_account_id_isSet = true;
}

bool OAINetwork_users_inner::is_account_id_Set() const{
    return m_account_id_isSet;
}

bool OAINetwork_users_inner::is_account_id_Valid() const{
    return m_account_id_isValid;
}

qint32 OAINetwork_users_inner::getAnswerCount() const {
    return m_answer_count;
}
void OAINetwork_users_inner::setAnswerCount(const qint32 &answer_count) {
    m_answer_count = answer_count;
    m_answer_count_isSet = true;
}

bool OAINetwork_users_inner::is_answer_count_Set() const{
    return m_answer_count_isSet;
}

bool OAINetwork_users_inner::is_answer_count_Valid() const{
    return m_answer_count_isValid;
}

OAIAnswers_inner_last_editor_badge_counts OAINetwork_users_inner::getBadgeCounts() const {
    return m_badge_counts;
}
void OAINetwork_users_inner::setBadgeCounts(const OAIAnswers_inner_last_editor_badge_counts &badge_counts) {
    m_badge_counts = badge_counts;
    m_badge_counts_isSet = true;
}

bool OAINetwork_users_inner::is_badge_counts_Set() const{
    return m_badge_counts_isSet;
}

bool OAINetwork_users_inner::is_badge_counts_Valid() const{
    return m_badge_counts_isValid;
}

qint32 OAINetwork_users_inner::getCreationDate() const {
    return m_creation_date;
}
void OAINetwork_users_inner::setCreationDate(const qint32 &creation_date) {
    m_creation_date = creation_date;
    m_creation_date_isSet = true;
}

bool OAINetwork_users_inner::is_creation_date_Set() const{
    return m_creation_date_isSet;
}

bool OAINetwork_users_inner::is_creation_date_Valid() const{
    return m_creation_date_isValid;
}

qint32 OAINetwork_users_inner::getLastAccessDate() const {
    return m_last_access_date;
}
void OAINetwork_users_inner::setLastAccessDate(const qint32 &last_access_date) {
    m_last_access_date = last_access_date;
    m_last_access_date_isSet = true;
}

bool OAINetwork_users_inner::is_last_access_date_Set() const{
    return m_last_access_date_isSet;
}

bool OAINetwork_users_inner::is_last_access_date_Valid() const{
    return m_last_access_date_isValid;
}

qint32 OAINetwork_users_inner::getQuestionCount() const {
    return m_question_count;
}
void OAINetwork_users_inner::setQuestionCount(const qint32 &question_count) {
    m_question_count = question_count;
    m_question_count_isSet = true;
}

bool OAINetwork_users_inner::is_question_count_Set() const{
    return m_question_count_isSet;
}

bool OAINetwork_users_inner::is_question_count_Valid() const{
    return m_question_count_isValid;
}

qint32 OAINetwork_users_inner::getReputation() const {
    return m_reputation;
}
void OAINetwork_users_inner::setReputation(const qint32 &reputation) {
    m_reputation = reputation;
    m_reputation_isSet = true;
}

bool OAINetwork_users_inner::is_reputation_Set() const{
    return m_reputation_isSet;
}

bool OAINetwork_users_inner::is_reputation_Valid() const{
    return m_reputation_isValid;
}

QString OAINetwork_users_inner::getSiteName() const {
    return m_site_name;
}
void OAINetwork_users_inner::setSiteName(const QString &site_name) {
    m_site_name = site_name;
    m_site_name_isSet = true;
}

bool OAINetwork_users_inner::is_site_name_Set() const{
    return m_site_name_isSet;
}

bool OAINetwork_users_inner::is_site_name_Valid() const{
    return m_site_name_isValid;
}

QString OAINetwork_users_inner::getSiteUrl() const {
    return m_site_url;
}
void OAINetwork_users_inner::setSiteUrl(const QString &site_url) {
    m_site_url = site_url;
    m_site_url_isSet = true;
}

bool OAINetwork_users_inner::is_site_url_Set() const{
    return m_site_url_isSet;
}

bool OAINetwork_users_inner::is_site_url_Valid() const{
    return m_site_url_isValid;
}

QList<QJsonValue> OAINetwork_users_inner::getTopAnswers() const {
    return m_top_answers;
}
void OAINetwork_users_inner::setTopAnswers(const QList<QJsonValue> &top_answers) {
    m_top_answers = top_answers;
    m_top_answers_isSet = true;
}

bool OAINetwork_users_inner::is_top_answers_Set() const{
    return m_top_answers_isSet;
}

bool OAINetwork_users_inner::is_top_answers_Valid() const{
    return m_top_answers_isValid;
}

QList<QJsonValue> OAINetwork_users_inner::getTopQuestions() const {
    return m_top_questions;
}
void OAINetwork_users_inner::setTopQuestions(const QList<QJsonValue> &top_questions) {
    m_top_questions = top_questions;
    m_top_questions_isSet = true;
}

bool OAINetwork_users_inner::is_top_questions_Set() const{
    return m_top_questions_isSet;
}

bool OAINetwork_users_inner::is_top_questions_Valid() const{
    return m_top_questions_isValid;
}

qint32 OAINetwork_users_inner::getUserId() const {
    return m_user_id;
}
void OAINetwork_users_inner::setUserId(const qint32 &user_id) {
    m_user_id = user_id;
    m_user_id_isSet = true;
}

bool OAINetwork_users_inner::is_user_id_Set() const{
    return m_user_id_isSet;
}

bool OAINetwork_users_inner::is_user_id_Valid() const{
    return m_user_id_isValid;
}

QString OAINetwork_users_inner::getUserType() const {
    return m_user_type;
}
void OAINetwork_users_inner::setUserType(const QString &user_type) {
    m_user_type = user_type;
    m_user_type_isSet = true;
}

bool OAINetwork_users_inner::is_user_type_Set() const{
    return m_user_type_isSet;
}

bool OAINetwork_users_inner::is_user_type_Valid() const{
    return m_user_type_isValid;
}

bool OAINetwork_users_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_answer_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_badge_counts.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_access_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_question_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reputation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_site_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_site_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_top_answers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_top_questions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINetwork_users_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
