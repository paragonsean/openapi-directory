/**
 * StackExchange
 * Stack Exchange is a network of 130+ Q&A communities including Stack Overflow. 
 *
 * The version of the OpenAPI document: 2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISingle_filter.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISingle_filter::OAISingle_filter(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISingle_filter::OAISingle_filter() {
    this->initializeModel();
}

OAISingle_filter::~OAISingle_filter() {}

void OAISingle_filter::initializeModel() {

    m_filter_isSet = false;
    m_filter_isValid = false;

    m_filter_type_isSet = false;
    m_filter_type_isValid = false;

    m_included_fields_isSet = false;
    m_included_fields_isValid = false;
}

void OAISingle_filter::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISingle_filter::fromJsonObject(QJsonObject json) {

    m_filter_isValid = ::OpenAPI::fromJsonValue(m_filter, json[QString("filter")]);
    m_filter_isSet = !json[QString("filter")].isNull() && m_filter_isValid;

    m_filter_type_isValid = ::OpenAPI::fromJsonValue(m_filter_type, json[QString("filter_type")]);
    m_filter_type_isSet = !json[QString("filter_type")].isNull() && m_filter_type_isValid;

    m_included_fields_isValid = ::OpenAPI::fromJsonValue(m_included_fields, json[QString("included_fields")]);
    m_included_fields_isSet = !json[QString("included_fields")].isNull() && m_included_fields_isValid;
}

QString OAISingle_filter::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISingle_filter::asJsonObject() const {
    QJsonObject obj;
    if (m_filter_isSet) {
        obj.insert(QString("filter"), ::OpenAPI::toJsonValue(m_filter));
    }
    if (m_filter_type_isSet) {
        obj.insert(QString("filter_type"), ::OpenAPI::toJsonValue(m_filter_type));
    }
    if (m_included_fields.size() > 0) {
        obj.insert(QString("included_fields"), ::OpenAPI::toJsonValue(m_included_fields));
    }
    return obj;
}

QString OAISingle_filter::getFilter() const {
    return m_filter;
}
void OAISingle_filter::setFilter(const QString &filter) {
    m_filter = filter;
    m_filter_isSet = true;
}

bool OAISingle_filter::is_filter_Set() const{
    return m_filter_isSet;
}

bool OAISingle_filter::is_filter_Valid() const{
    return m_filter_isValid;
}

QString OAISingle_filter::getFilterType() const {
    return m_filter_type;
}
void OAISingle_filter::setFilterType(const QString &filter_type) {
    m_filter_type = filter_type;
    m_filter_type_isSet = true;
}

bool OAISingle_filter::is_filter_type_Set() const{
    return m_filter_type_isSet;
}

bool OAISingle_filter::is_filter_type_Valid() const{
    return m_filter_type_isValid;
}

QList<QJsonValue> OAISingle_filter::getIncludedFields() const {
    return m_included_fields;
}
void OAISingle_filter::setIncludedFields(const QList<QJsonValue> &included_fields) {
    m_included_fields = included_fields;
    m_included_fields_isSet = true;
}

bool OAISingle_filter::is_included_fields_Set() const{
    return m_included_fields_isSet;
}

bool OAISingle_filter::is_included_fields_Valid() const{
    return m_included_fields_isValid;
}

bool OAISingle_filter::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_filter_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_filter_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_included_fields.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISingle_filter::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
