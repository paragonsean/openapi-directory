/**
 * StackExchange
 * Stack Exchange is a network of 130+ Q&A communities including Stack Overflow. 
 *
 * The version of the OpenAPI document: 2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInbox_items_inner_site_styling.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInbox_items_inner_site_styling::OAIInbox_items_inner_site_styling(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInbox_items_inner_site_styling::OAIInbox_items_inner_site_styling() {
    this->initializeModel();
}

OAIInbox_items_inner_site_styling::~OAIInbox_items_inner_site_styling() {}

void OAIInbox_items_inner_site_styling::initializeModel() {

    m_link_color_isSet = false;
    m_link_color_isValid = false;

    m_tag_background_color_isSet = false;
    m_tag_background_color_isValid = false;

    m_tag_foreground_color_isSet = false;
    m_tag_foreground_color_isValid = false;
}

void OAIInbox_items_inner_site_styling::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInbox_items_inner_site_styling::fromJsonObject(QJsonObject json) {

    m_link_color_isValid = ::OpenAPI::fromJsonValue(m_link_color, json[QString("link_color")]);
    m_link_color_isSet = !json[QString("link_color")].isNull() && m_link_color_isValid;

    m_tag_background_color_isValid = ::OpenAPI::fromJsonValue(m_tag_background_color, json[QString("tag_background_color")]);
    m_tag_background_color_isSet = !json[QString("tag_background_color")].isNull() && m_tag_background_color_isValid;

    m_tag_foreground_color_isValid = ::OpenAPI::fromJsonValue(m_tag_foreground_color, json[QString("tag_foreground_color")]);
    m_tag_foreground_color_isSet = !json[QString("tag_foreground_color")].isNull() && m_tag_foreground_color_isValid;
}

QString OAIInbox_items_inner_site_styling::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInbox_items_inner_site_styling::asJsonObject() const {
    QJsonObject obj;
    if (m_link_color_isSet) {
        obj.insert(QString("link_color"), ::OpenAPI::toJsonValue(m_link_color));
    }
    if (m_tag_background_color_isSet) {
        obj.insert(QString("tag_background_color"), ::OpenAPI::toJsonValue(m_tag_background_color));
    }
    if (m_tag_foreground_color_isSet) {
        obj.insert(QString("tag_foreground_color"), ::OpenAPI::toJsonValue(m_tag_foreground_color));
    }
    return obj;
}

QString OAIInbox_items_inner_site_styling::getLinkColor() const {
    return m_link_color;
}
void OAIInbox_items_inner_site_styling::setLinkColor(const QString &link_color) {
    m_link_color = link_color;
    m_link_color_isSet = true;
}

bool OAIInbox_items_inner_site_styling::is_link_color_Set() const{
    return m_link_color_isSet;
}

bool OAIInbox_items_inner_site_styling::is_link_color_Valid() const{
    return m_link_color_isValid;
}

QString OAIInbox_items_inner_site_styling::getTagBackgroundColor() const {
    return m_tag_background_color;
}
void OAIInbox_items_inner_site_styling::setTagBackgroundColor(const QString &tag_background_color) {
    m_tag_background_color = tag_background_color;
    m_tag_background_color_isSet = true;
}

bool OAIInbox_items_inner_site_styling::is_tag_background_color_Set() const{
    return m_tag_background_color_isSet;
}

bool OAIInbox_items_inner_site_styling::is_tag_background_color_Valid() const{
    return m_tag_background_color_isValid;
}

QString OAIInbox_items_inner_site_styling::getTagForegroundColor() const {
    return m_tag_foreground_color;
}
void OAIInbox_items_inner_site_styling::setTagForegroundColor(const QString &tag_foreground_color) {
    m_tag_foreground_color = tag_foreground_color;
    m_tag_foreground_color_isSet = true;
}

bool OAIInbox_items_inner_site_styling::is_tag_foreground_color_Set() const{
    return m_tag_foreground_color_isSet;
}

bool OAIInbox_items_inner_site_styling::is_tag_foreground_color_Valid() const{
    return m_tag_foreground_color_isValid;
}

bool OAIInbox_items_inner_site_styling::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_link_color_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tag_background_color_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tag_foreground_color_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInbox_items_inner_site_styling::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
