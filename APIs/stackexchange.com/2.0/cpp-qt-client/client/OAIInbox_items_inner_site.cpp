/**
 * StackExchange
 * Stack Exchange is a network of 130+ Q&A communities including Stack Overflow. 
 *
 * The version of the OpenAPI document: 2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInbox_items_inner_site.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInbox_items_inner_site::OAIInbox_items_inner_site(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInbox_items_inner_site::OAIInbox_items_inner_site() {
    this->initializeModel();
}

OAIInbox_items_inner_site::~OAIInbox_items_inner_site() {}

void OAIInbox_items_inner_site::initializeModel() {

    m_aliases_isSet = false;
    m_aliases_isValid = false;

    m_api_site_parameter_isSet = false;
    m_api_site_parameter_isValid = false;

    m_audience_isSet = false;
    m_audience_isValid = false;

    m_closed_beta_date_isSet = false;
    m_closed_beta_date_isValid = false;

    m_favicon_url_isSet = false;
    m_favicon_url_isValid = false;

    m_high_resolution_icon_url_isSet = false;
    m_high_resolution_icon_url_isValid = false;

    m_icon_url_isSet = false;
    m_icon_url_isValid = false;

    m_launch_date_isSet = false;
    m_launch_date_isValid = false;

    m_logo_url_isSet = false;
    m_logo_url_isValid = false;

    m_markdown_extensions_isSet = false;
    m_markdown_extensions_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_open_beta_date_isSet = false;
    m_open_beta_date_isValid = false;

    m_related_sites_isSet = false;
    m_related_sites_isValid = false;

    m_site_state_isSet = false;
    m_site_state_isValid = false;

    m_site_type_isSet = false;
    m_site_type_isValid = false;

    m_site_url_isSet = false;
    m_site_url_isValid = false;

    m_styling_isSet = false;
    m_styling_isValid = false;

    m_twitter_account_isSet = false;
    m_twitter_account_isValid = false;
}

void OAIInbox_items_inner_site::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInbox_items_inner_site::fromJsonObject(QJsonObject json) {

    m_aliases_isValid = ::OpenAPI::fromJsonValue(m_aliases, json[QString("aliases")]);
    m_aliases_isSet = !json[QString("aliases")].isNull() && m_aliases_isValid;

    m_api_site_parameter_isValid = ::OpenAPI::fromJsonValue(m_api_site_parameter, json[QString("api_site_parameter")]);
    m_api_site_parameter_isSet = !json[QString("api_site_parameter")].isNull() && m_api_site_parameter_isValid;

    m_audience_isValid = ::OpenAPI::fromJsonValue(m_audience, json[QString("audience")]);
    m_audience_isSet = !json[QString("audience")].isNull() && m_audience_isValid;

    m_closed_beta_date_isValid = ::OpenAPI::fromJsonValue(m_closed_beta_date, json[QString("closed_beta_date")]);
    m_closed_beta_date_isSet = !json[QString("closed_beta_date")].isNull() && m_closed_beta_date_isValid;

    m_favicon_url_isValid = ::OpenAPI::fromJsonValue(m_favicon_url, json[QString("favicon_url")]);
    m_favicon_url_isSet = !json[QString("favicon_url")].isNull() && m_favicon_url_isValid;

    m_high_resolution_icon_url_isValid = ::OpenAPI::fromJsonValue(m_high_resolution_icon_url, json[QString("high_resolution_icon_url")]);
    m_high_resolution_icon_url_isSet = !json[QString("high_resolution_icon_url")].isNull() && m_high_resolution_icon_url_isValid;

    m_icon_url_isValid = ::OpenAPI::fromJsonValue(m_icon_url, json[QString("icon_url")]);
    m_icon_url_isSet = !json[QString("icon_url")].isNull() && m_icon_url_isValid;

    m_launch_date_isValid = ::OpenAPI::fromJsonValue(m_launch_date, json[QString("launch_date")]);
    m_launch_date_isSet = !json[QString("launch_date")].isNull() && m_launch_date_isValid;

    m_logo_url_isValid = ::OpenAPI::fromJsonValue(m_logo_url, json[QString("logo_url")]);
    m_logo_url_isSet = !json[QString("logo_url")].isNull() && m_logo_url_isValid;

    m_markdown_extensions_isValid = ::OpenAPI::fromJsonValue(m_markdown_extensions, json[QString("markdown_extensions")]);
    m_markdown_extensions_isSet = !json[QString("markdown_extensions")].isNull() && m_markdown_extensions_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_open_beta_date_isValid = ::OpenAPI::fromJsonValue(m_open_beta_date, json[QString("open_beta_date")]);
    m_open_beta_date_isSet = !json[QString("open_beta_date")].isNull() && m_open_beta_date_isValid;

    m_related_sites_isValid = ::OpenAPI::fromJsonValue(m_related_sites, json[QString("related_sites")]);
    m_related_sites_isSet = !json[QString("related_sites")].isNull() && m_related_sites_isValid;

    m_site_state_isValid = ::OpenAPI::fromJsonValue(m_site_state, json[QString("site_state")]);
    m_site_state_isSet = !json[QString("site_state")].isNull() && m_site_state_isValid;

    m_site_type_isValid = ::OpenAPI::fromJsonValue(m_site_type, json[QString("site_type")]);
    m_site_type_isSet = !json[QString("site_type")].isNull() && m_site_type_isValid;

    m_site_url_isValid = ::OpenAPI::fromJsonValue(m_site_url, json[QString("site_url")]);
    m_site_url_isSet = !json[QString("site_url")].isNull() && m_site_url_isValid;

    m_styling_isValid = ::OpenAPI::fromJsonValue(m_styling, json[QString("styling")]);
    m_styling_isSet = !json[QString("styling")].isNull() && m_styling_isValid;

    m_twitter_account_isValid = ::OpenAPI::fromJsonValue(m_twitter_account, json[QString("twitter_account")]);
    m_twitter_account_isSet = !json[QString("twitter_account")].isNull() && m_twitter_account_isValid;
}

QString OAIInbox_items_inner_site::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInbox_items_inner_site::asJsonObject() const {
    QJsonObject obj;
    if (m_aliases.size() > 0) {
        obj.insert(QString("aliases"), ::OpenAPI::toJsonValue(m_aliases));
    }
    if (m_api_site_parameter_isSet) {
        obj.insert(QString("api_site_parameter"), ::OpenAPI::toJsonValue(m_api_site_parameter));
    }
    if (m_audience_isSet) {
        obj.insert(QString("audience"), ::OpenAPI::toJsonValue(m_audience));
    }
    if (m_closed_beta_date_isSet) {
        obj.insert(QString("closed_beta_date"), ::OpenAPI::toJsonValue(m_closed_beta_date));
    }
    if (m_favicon_url_isSet) {
        obj.insert(QString("favicon_url"), ::OpenAPI::toJsonValue(m_favicon_url));
    }
    if (m_high_resolution_icon_url_isSet) {
        obj.insert(QString("high_resolution_icon_url"), ::OpenAPI::toJsonValue(m_high_resolution_icon_url));
    }
    if (m_icon_url_isSet) {
        obj.insert(QString("icon_url"), ::OpenAPI::toJsonValue(m_icon_url));
    }
    if (m_launch_date_isSet) {
        obj.insert(QString("launch_date"), ::OpenAPI::toJsonValue(m_launch_date));
    }
    if (m_logo_url_isSet) {
        obj.insert(QString("logo_url"), ::OpenAPI::toJsonValue(m_logo_url));
    }
    if (m_markdown_extensions.size() > 0) {
        obj.insert(QString("markdown_extensions"), ::OpenAPI::toJsonValue(m_markdown_extensions));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_open_beta_date_isSet) {
        obj.insert(QString("open_beta_date"), ::OpenAPI::toJsonValue(m_open_beta_date));
    }
    if (m_related_sites.size() > 0) {
        obj.insert(QString("related_sites"), ::OpenAPI::toJsonValue(m_related_sites));
    }
    if (m_site_state_isSet) {
        obj.insert(QString("site_state"), ::OpenAPI::toJsonValue(m_site_state));
    }
    if (m_site_type_isSet) {
        obj.insert(QString("site_type"), ::OpenAPI::toJsonValue(m_site_type));
    }
    if (m_site_url_isSet) {
        obj.insert(QString("site_url"), ::OpenAPI::toJsonValue(m_site_url));
    }
    if (m_styling.isSet()) {
        obj.insert(QString("styling"), ::OpenAPI::toJsonValue(m_styling));
    }
    if (m_twitter_account_isSet) {
        obj.insert(QString("twitter_account"), ::OpenAPI::toJsonValue(m_twitter_account));
    }
    return obj;
}

QList<QJsonValue> OAIInbox_items_inner_site::getAliases() const {
    return m_aliases;
}
void OAIInbox_items_inner_site::setAliases(const QList<QJsonValue> &aliases) {
    m_aliases = aliases;
    m_aliases_isSet = true;
}

bool OAIInbox_items_inner_site::is_aliases_Set() const{
    return m_aliases_isSet;
}

bool OAIInbox_items_inner_site::is_aliases_Valid() const{
    return m_aliases_isValid;
}

QString OAIInbox_items_inner_site::getApiSiteParameter() const {
    return m_api_site_parameter;
}
void OAIInbox_items_inner_site::setApiSiteParameter(const QString &api_site_parameter) {
    m_api_site_parameter = api_site_parameter;
    m_api_site_parameter_isSet = true;
}

bool OAIInbox_items_inner_site::is_api_site_parameter_Set() const{
    return m_api_site_parameter_isSet;
}

bool OAIInbox_items_inner_site::is_api_site_parameter_Valid() const{
    return m_api_site_parameter_isValid;
}

QString OAIInbox_items_inner_site::getAudience() const {
    return m_audience;
}
void OAIInbox_items_inner_site::setAudience(const QString &audience) {
    m_audience = audience;
    m_audience_isSet = true;
}

bool OAIInbox_items_inner_site::is_audience_Set() const{
    return m_audience_isSet;
}

bool OAIInbox_items_inner_site::is_audience_Valid() const{
    return m_audience_isValid;
}

qint32 OAIInbox_items_inner_site::getClosedBetaDate() const {
    return m_closed_beta_date;
}
void OAIInbox_items_inner_site::setClosedBetaDate(const qint32 &closed_beta_date) {
    m_closed_beta_date = closed_beta_date;
    m_closed_beta_date_isSet = true;
}

bool OAIInbox_items_inner_site::is_closed_beta_date_Set() const{
    return m_closed_beta_date_isSet;
}

bool OAIInbox_items_inner_site::is_closed_beta_date_Valid() const{
    return m_closed_beta_date_isValid;
}

QString OAIInbox_items_inner_site::getFaviconUrl() const {
    return m_favicon_url;
}
void OAIInbox_items_inner_site::setFaviconUrl(const QString &favicon_url) {
    m_favicon_url = favicon_url;
    m_favicon_url_isSet = true;
}

bool OAIInbox_items_inner_site::is_favicon_url_Set() const{
    return m_favicon_url_isSet;
}

bool OAIInbox_items_inner_site::is_favicon_url_Valid() const{
    return m_favicon_url_isValid;
}

QString OAIInbox_items_inner_site::getHighResolutionIconUrl() const {
    return m_high_resolution_icon_url;
}
void OAIInbox_items_inner_site::setHighResolutionIconUrl(const QString &high_resolution_icon_url) {
    m_high_resolution_icon_url = high_resolution_icon_url;
    m_high_resolution_icon_url_isSet = true;
}

bool OAIInbox_items_inner_site::is_high_resolution_icon_url_Set() const{
    return m_high_resolution_icon_url_isSet;
}

bool OAIInbox_items_inner_site::is_high_resolution_icon_url_Valid() const{
    return m_high_resolution_icon_url_isValid;
}

QString OAIInbox_items_inner_site::getIconUrl() const {
    return m_icon_url;
}
void OAIInbox_items_inner_site::setIconUrl(const QString &icon_url) {
    m_icon_url = icon_url;
    m_icon_url_isSet = true;
}

bool OAIInbox_items_inner_site::is_icon_url_Set() const{
    return m_icon_url_isSet;
}

bool OAIInbox_items_inner_site::is_icon_url_Valid() const{
    return m_icon_url_isValid;
}

qint32 OAIInbox_items_inner_site::getLaunchDate() const {
    return m_launch_date;
}
void OAIInbox_items_inner_site::setLaunchDate(const qint32 &launch_date) {
    m_launch_date = launch_date;
    m_launch_date_isSet = true;
}

bool OAIInbox_items_inner_site::is_launch_date_Set() const{
    return m_launch_date_isSet;
}

bool OAIInbox_items_inner_site::is_launch_date_Valid() const{
    return m_launch_date_isValid;
}

QString OAIInbox_items_inner_site::getLogoUrl() const {
    return m_logo_url;
}
void OAIInbox_items_inner_site::setLogoUrl(const QString &logo_url) {
    m_logo_url = logo_url;
    m_logo_url_isSet = true;
}

bool OAIInbox_items_inner_site::is_logo_url_Set() const{
    return m_logo_url_isSet;
}

bool OAIInbox_items_inner_site::is_logo_url_Valid() const{
    return m_logo_url_isValid;
}

QList<QJsonValue> OAIInbox_items_inner_site::getMarkdownExtensions() const {
    return m_markdown_extensions;
}
void OAIInbox_items_inner_site::setMarkdownExtensions(const QList<QJsonValue> &markdown_extensions) {
    m_markdown_extensions = markdown_extensions;
    m_markdown_extensions_isSet = true;
}

bool OAIInbox_items_inner_site::is_markdown_extensions_Set() const{
    return m_markdown_extensions_isSet;
}

bool OAIInbox_items_inner_site::is_markdown_extensions_Valid() const{
    return m_markdown_extensions_isValid;
}

QString OAIInbox_items_inner_site::getName() const {
    return m_name;
}
void OAIInbox_items_inner_site::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIInbox_items_inner_site::is_name_Set() const{
    return m_name_isSet;
}

bool OAIInbox_items_inner_site::is_name_Valid() const{
    return m_name_isValid;
}

qint32 OAIInbox_items_inner_site::getOpenBetaDate() const {
    return m_open_beta_date;
}
void OAIInbox_items_inner_site::setOpenBetaDate(const qint32 &open_beta_date) {
    m_open_beta_date = open_beta_date;
    m_open_beta_date_isSet = true;
}

bool OAIInbox_items_inner_site::is_open_beta_date_Set() const{
    return m_open_beta_date_isSet;
}

bool OAIInbox_items_inner_site::is_open_beta_date_Valid() const{
    return m_open_beta_date_isValid;
}

QList<QJsonValue> OAIInbox_items_inner_site::getRelatedSites() const {
    return m_related_sites;
}
void OAIInbox_items_inner_site::setRelatedSites(const QList<QJsonValue> &related_sites) {
    m_related_sites = related_sites;
    m_related_sites_isSet = true;
}

bool OAIInbox_items_inner_site::is_related_sites_Set() const{
    return m_related_sites_isSet;
}

bool OAIInbox_items_inner_site::is_related_sites_Valid() const{
    return m_related_sites_isValid;
}

QString OAIInbox_items_inner_site::getSiteState() const {
    return m_site_state;
}
void OAIInbox_items_inner_site::setSiteState(const QString &site_state) {
    m_site_state = site_state;
    m_site_state_isSet = true;
}

bool OAIInbox_items_inner_site::is_site_state_Set() const{
    return m_site_state_isSet;
}

bool OAIInbox_items_inner_site::is_site_state_Valid() const{
    return m_site_state_isValid;
}

QString OAIInbox_items_inner_site::getSiteType() const {
    return m_site_type;
}
void OAIInbox_items_inner_site::setSiteType(const QString &site_type) {
    m_site_type = site_type;
    m_site_type_isSet = true;
}

bool OAIInbox_items_inner_site::is_site_type_Set() const{
    return m_site_type_isSet;
}

bool OAIInbox_items_inner_site::is_site_type_Valid() const{
    return m_site_type_isValid;
}

QString OAIInbox_items_inner_site::getSiteUrl() const {
    return m_site_url;
}
void OAIInbox_items_inner_site::setSiteUrl(const QString &site_url) {
    m_site_url = site_url;
    m_site_url_isSet = true;
}

bool OAIInbox_items_inner_site::is_site_url_Set() const{
    return m_site_url_isSet;
}

bool OAIInbox_items_inner_site::is_site_url_Valid() const{
    return m_site_url_isValid;
}

OAIInbox_items_inner_site_styling OAIInbox_items_inner_site::getStyling() const {
    return m_styling;
}
void OAIInbox_items_inner_site::setStyling(const OAIInbox_items_inner_site_styling &styling) {
    m_styling = styling;
    m_styling_isSet = true;
}

bool OAIInbox_items_inner_site::is_styling_Set() const{
    return m_styling_isSet;
}

bool OAIInbox_items_inner_site::is_styling_Valid() const{
    return m_styling_isValid;
}

QString OAIInbox_items_inner_site::getTwitterAccount() const {
    return m_twitter_account;
}
void OAIInbox_items_inner_site::setTwitterAccount(const QString &twitter_account) {
    m_twitter_account = twitter_account;
    m_twitter_account_isSet = true;
}

bool OAIInbox_items_inner_site::is_twitter_account_Set() const{
    return m_twitter_account_isSet;
}

bool OAIInbox_items_inner_site::is_twitter_account_Valid() const{
    return m_twitter_account_isValid;
}

bool OAIInbox_items_inner_site::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_aliases.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_api_site_parameter_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_audience_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_closed_beta_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_favicon_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_high_resolution_icon_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_icon_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_launch_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_logo_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_markdown_extensions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_open_beta_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_related_sites.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_site_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_site_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_site_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_styling.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_twitter_account_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInbox_items_inner_site::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
