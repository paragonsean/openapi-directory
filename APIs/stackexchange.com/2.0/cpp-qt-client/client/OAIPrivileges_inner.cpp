/**
 * StackExchange
 * Stack Exchange is a network of 130+ Q&A communities including Stack Overflow. 
 *
 * The version of the OpenAPI document: 2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPrivileges_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPrivileges_inner::OAIPrivileges_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPrivileges_inner::OAIPrivileges_inner() {
    this->initializeModel();
}

OAIPrivileges_inner::~OAIPrivileges_inner() {}

void OAIPrivileges_inner::initializeModel() {

    m_description_isSet = false;
    m_description_isValid = false;

    m_reputation_isSet = false;
    m_reputation_isValid = false;

    m_short_description_isSet = false;
    m_short_description_isValid = false;
}

void OAIPrivileges_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPrivileges_inner::fromJsonObject(QJsonObject json) {

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_reputation_isValid = ::OpenAPI::fromJsonValue(m_reputation, json[QString("reputation")]);
    m_reputation_isSet = !json[QString("reputation")].isNull() && m_reputation_isValid;

    m_short_description_isValid = ::OpenAPI::fromJsonValue(m_short_description, json[QString("short_description")]);
    m_short_description_isSet = !json[QString("short_description")].isNull() && m_short_description_isValid;
}

QString OAIPrivileges_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPrivileges_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_reputation_isSet) {
        obj.insert(QString("reputation"), ::OpenAPI::toJsonValue(m_reputation));
    }
    if (m_short_description_isSet) {
        obj.insert(QString("short_description"), ::OpenAPI::toJsonValue(m_short_description));
    }
    return obj;
}

QString OAIPrivileges_inner::getDescription() const {
    return m_description;
}
void OAIPrivileges_inner::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIPrivileges_inner::is_description_Set() const{
    return m_description_isSet;
}

bool OAIPrivileges_inner::is_description_Valid() const{
    return m_description_isValid;
}

qint32 OAIPrivileges_inner::getReputation() const {
    return m_reputation;
}
void OAIPrivileges_inner::setReputation(const qint32 &reputation) {
    m_reputation = reputation;
    m_reputation_isSet = true;
}

bool OAIPrivileges_inner::is_reputation_Set() const{
    return m_reputation_isSet;
}

bool OAIPrivileges_inner::is_reputation_Valid() const{
    return m_reputation_isValid;
}

QString OAIPrivileges_inner::getShortDescription() const {
    return m_short_description;
}
void OAIPrivileges_inner::setShortDescription(const QString &short_description) {
    m_short_description = short_description;
    m_short_description_isSet = true;
}

bool OAIPrivileges_inner::is_short_description_Set() const{
    return m_short_description_isSet;
}

bool OAIPrivileges_inner::is_short_description_Valid() const{
    return m_short_description_isValid;
}

bool OAIPrivileges_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reputation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_short_description_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPrivileges_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
