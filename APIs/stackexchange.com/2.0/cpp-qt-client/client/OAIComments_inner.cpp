/**
 * StackExchange
 * Stack Exchange is a network of 130+ Q&A communities including Stack Overflow. 
 *
 * The version of the OpenAPI document: 2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIComments_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIComments_inner::OAIComments_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIComments_inner::OAIComments_inner() {
    this->initializeModel();
}

OAIComments_inner::~OAIComments_inner() {}

void OAIComments_inner::initializeModel() {

    m_body_isSet = false;
    m_body_isValid = false;

    m_body_markdown_isSet = false;
    m_body_markdown_isValid = false;

    m_can_flag_isSet = false;
    m_can_flag_isValid = false;

    m_comment_id_isSet = false;
    m_comment_id_isValid = false;

    m_creation_date_isSet = false;
    m_creation_date_isValid = false;

    m_edited_isSet = false;
    m_edited_isValid = false;

    m_link_isSet = false;
    m_link_isValid = false;

    m_owner_isSet = false;
    m_owner_isValid = false;

    m_post_id_isSet = false;
    m_post_id_isValid = false;

    m_post_type_isSet = false;
    m_post_type_isValid = false;

    m_reply_to_user_isSet = false;
    m_reply_to_user_isValid = false;

    m_score_isSet = false;
    m_score_isValid = false;

    m_upvoted_isSet = false;
    m_upvoted_isValid = false;
}

void OAIComments_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIComments_inner::fromJsonObject(QJsonObject json) {

    m_body_isValid = ::OpenAPI::fromJsonValue(m_body, json[QString("body")]);
    m_body_isSet = !json[QString("body")].isNull() && m_body_isValid;

    m_body_markdown_isValid = ::OpenAPI::fromJsonValue(m_body_markdown, json[QString("body_markdown")]);
    m_body_markdown_isSet = !json[QString("body_markdown")].isNull() && m_body_markdown_isValid;

    m_can_flag_isValid = ::OpenAPI::fromJsonValue(m_can_flag, json[QString("can_flag")]);
    m_can_flag_isSet = !json[QString("can_flag")].isNull() && m_can_flag_isValid;

    m_comment_id_isValid = ::OpenAPI::fromJsonValue(m_comment_id, json[QString("comment_id")]);
    m_comment_id_isSet = !json[QString("comment_id")].isNull() && m_comment_id_isValid;

    m_creation_date_isValid = ::OpenAPI::fromJsonValue(m_creation_date, json[QString("creation_date")]);
    m_creation_date_isSet = !json[QString("creation_date")].isNull() && m_creation_date_isValid;

    m_edited_isValid = ::OpenAPI::fromJsonValue(m_edited, json[QString("edited")]);
    m_edited_isSet = !json[QString("edited")].isNull() && m_edited_isValid;

    m_link_isValid = ::OpenAPI::fromJsonValue(m_link, json[QString("link")]);
    m_link_isSet = !json[QString("link")].isNull() && m_link_isValid;

    m_owner_isValid = ::OpenAPI::fromJsonValue(m_owner, json[QString("owner")]);
    m_owner_isSet = !json[QString("owner")].isNull() && m_owner_isValid;

    m_post_id_isValid = ::OpenAPI::fromJsonValue(m_post_id, json[QString("post_id")]);
    m_post_id_isSet = !json[QString("post_id")].isNull() && m_post_id_isValid;

    m_post_type_isValid = ::OpenAPI::fromJsonValue(m_post_type, json[QString("post_type")]);
    m_post_type_isSet = !json[QString("post_type")].isNull() && m_post_type_isValid;

    m_reply_to_user_isValid = ::OpenAPI::fromJsonValue(m_reply_to_user, json[QString("reply_to_user")]);
    m_reply_to_user_isSet = !json[QString("reply_to_user")].isNull() && m_reply_to_user_isValid;

    m_score_isValid = ::OpenAPI::fromJsonValue(m_score, json[QString("score")]);
    m_score_isSet = !json[QString("score")].isNull() && m_score_isValid;

    m_upvoted_isValid = ::OpenAPI::fromJsonValue(m_upvoted, json[QString("upvoted")]);
    m_upvoted_isSet = !json[QString("upvoted")].isNull() && m_upvoted_isValid;
}

QString OAIComments_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIComments_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_body_isSet) {
        obj.insert(QString("body"), ::OpenAPI::toJsonValue(m_body));
    }
    if (m_body_markdown_isSet) {
        obj.insert(QString("body_markdown"), ::OpenAPI::toJsonValue(m_body_markdown));
    }
    if (m_can_flag_isSet) {
        obj.insert(QString("can_flag"), ::OpenAPI::toJsonValue(m_can_flag));
    }
    if (m_comment_id_isSet) {
        obj.insert(QString("comment_id"), ::OpenAPI::toJsonValue(m_comment_id));
    }
    if (m_creation_date_isSet) {
        obj.insert(QString("creation_date"), ::OpenAPI::toJsonValue(m_creation_date));
    }
    if (m_edited_isSet) {
        obj.insert(QString("edited"), ::OpenAPI::toJsonValue(m_edited));
    }
    if (m_link_isSet) {
        obj.insert(QString("link"), ::OpenAPI::toJsonValue(m_link));
    }
    if (m_owner.isSet()) {
        obj.insert(QString("owner"), ::OpenAPI::toJsonValue(m_owner));
    }
    if (m_post_id_isSet) {
        obj.insert(QString("post_id"), ::OpenAPI::toJsonValue(m_post_id));
    }
    if (m_post_type_isSet) {
        obj.insert(QString("post_type"), ::OpenAPI::toJsonValue(m_post_type));
    }
    if (m_reply_to_user.isSet()) {
        obj.insert(QString("reply_to_user"), ::OpenAPI::toJsonValue(m_reply_to_user));
    }
    if (m_score_isSet) {
        obj.insert(QString("score"), ::OpenAPI::toJsonValue(m_score));
    }
    if (m_upvoted_isSet) {
        obj.insert(QString("upvoted"), ::OpenAPI::toJsonValue(m_upvoted));
    }
    return obj;
}

QString OAIComments_inner::getBody() const {
    return m_body;
}
void OAIComments_inner::setBody(const QString &body) {
    m_body = body;
    m_body_isSet = true;
}

bool OAIComments_inner::is_body_Set() const{
    return m_body_isSet;
}

bool OAIComments_inner::is_body_Valid() const{
    return m_body_isValid;
}

QString OAIComments_inner::getBodyMarkdown() const {
    return m_body_markdown;
}
void OAIComments_inner::setBodyMarkdown(const QString &body_markdown) {
    m_body_markdown = body_markdown;
    m_body_markdown_isSet = true;
}

bool OAIComments_inner::is_body_markdown_Set() const{
    return m_body_markdown_isSet;
}

bool OAIComments_inner::is_body_markdown_Valid() const{
    return m_body_markdown_isValid;
}

bool OAIComments_inner::isCanFlag() const {
    return m_can_flag;
}
void OAIComments_inner::setCanFlag(const bool &can_flag) {
    m_can_flag = can_flag;
    m_can_flag_isSet = true;
}

bool OAIComments_inner::is_can_flag_Set() const{
    return m_can_flag_isSet;
}

bool OAIComments_inner::is_can_flag_Valid() const{
    return m_can_flag_isValid;
}

qint32 OAIComments_inner::getCommentId() const {
    return m_comment_id;
}
void OAIComments_inner::setCommentId(const qint32 &comment_id) {
    m_comment_id = comment_id;
    m_comment_id_isSet = true;
}

bool OAIComments_inner::is_comment_id_Set() const{
    return m_comment_id_isSet;
}

bool OAIComments_inner::is_comment_id_Valid() const{
    return m_comment_id_isValid;
}

qint32 OAIComments_inner::getCreationDate() const {
    return m_creation_date;
}
void OAIComments_inner::setCreationDate(const qint32 &creation_date) {
    m_creation_date = creation_date;
    m_creation_date_isSet = true;
}

bool OAIComments_inner::is_creation_date_Set() const{
    return m_creation_date_isSet;
}

bool OAIComments_inner::is_creation_date_Valid() const{
    return m_creation_date_isValid;
}

bool OAIComments_inner::isEdited() const {
    return m_edited;
}
void OAIComments_inner::setEdited(const bool &edited) {
    m_edited = edited;
    m_edited_isSet = true;
}

bool OAIComments_inner::is_edited_Set() const{
    return m_edited_isSet;
}

bool OAIComments_inner::is_edited_Valid() const{
    return m_edited_isValid;
}

QString OAIComments_inner::getLink() const {
    return m_link;
}
void OAIComments_inner::setLink(const QString &link) {
    m_link = link;
    m_link_isSet = true;
}

bool OAIComments_inner::is_link_Set() const{
    return m_link_isSet;
}

bool OAIComments_inner::is_link_Valid() const{
    return m_link_isValid;
}

OAIAnswers_inner_last_editor OAIComments_inner::getOwner() const {
    return m_owner;
}
void OAIComments_inner::setOwner(const OAIAnswers_inner_last_editor &owner) {
    m_owner = owner;
    m_owner_isSet = true;
}

bool OAIComments_inner::is_owner_Set() const{
    return m_owner_isSet;
}

bool OAIComments_inner::is_owner_Valid() const{
    return m_owner_isValid;
}

qint32 OAIComments_inner::getPostId() const {
    return m_post_id;
}
void OAIComments_inner::setPostId(const qint32 &post_id) {
    m_post_id = post_id;
    m_post_id_isSet = true;
}

bool OAIComments_inner::is_post_id_Set() const{
    return m_post_id_isSet;
}

bool OAIComments_inner::is_post_id_Valid() const{
    return m_post_id_isValid;
}

QString OAIComments_inner::getPostType() const {
    return m_post_type;
}
void OAIComments_inner::setPostType(const QString &post_type) {
    m_post_type = post_type;
    m_post_type_isSet = true;
}

bool OAIComments_inner::is_post_type_Set() const{
    return m_post_type_isSet;
}

bool OAIComments_inner::is_post_type_Valid() const{
    return m_post_type_isValid;
}

OAIAnswers_inner_last_editor OAIComments_inner::getReplyToUser() const {
    return m_reply_to_user;
}
void OAIComments_inner::setReplyToUser(const OAIAnswers_inner_last_editor &reply_to_user) {
    m_reply_to_user = reply_to_user;
    m_reply_to_user_isSet = true;
}

bool OAIComments_inner::is_reply_to_user_Set() const{
    return m_reply_to_user_isSet;
}

bool OAIComments_inner::is_reply_to_user_Valid() const{
    return m_reply_to_user_isValid;
}

qint32 OAIComments_inner::getScore() const {
    return m_score;
}
void OAIComments_inner::setScore(const qint32 &score) {
    m_score = score;
    m_score_isSet = true;
}

bool OAIComments_inner::is_score_Set() const{
    return m_score_isSet;
}

bool OAIComments_inner::is_score_Valid() const{
    return m_score_isValid;
}

bool OAIComments_inner::isUpvoted() const {
    return m_upvoted;
}
void OAIComments_inner::setUpvoted(const bool &upvoted) {
    m_upvoted = upvoted;
    m_upvoted_isSet = true;
}

bool OAIComments_inner::is_upvoted_Set() const{
    return m_upvoted_isSet;
}

bool OAIComments_inner::is_upvoted_Valid() const{
    return m_upvoted_isValid;
}

bool OAIComments_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_body_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_body_markdown_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_flag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_comment_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_edited_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_link_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_owner.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_post_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_post_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reply_to_user.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_score_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_upvoted_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIComments_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
