/**
 * StackExchange
 * Stack Exchange is a network of 130+ Q&A communities including Stack Overflow. 
 *
 * The version of the OpenAPI document: 2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITag_wikis_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITag_wikis_inner::OAITag_wikis_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITag_wikis_inner::OAITag_wikis_inner() {
    this->initializeModel();
}

OAITag_wikis_inner::~OAITag_wikis_inner() {}

void OAITag_wikis_inner::initializeModel() {

    m_body_isSet = false;
    m_body_isValid = false;

    m_body_last_edit_date_isSet = false;
    m_body_last_edit_date_isValid = false;

    m_excerpt_isSet = false;
    m_excerpt_isValid = false;

    m_excerpt_last_edit_date_isSet = false;
    m_excerpt_last_edit_date_isValid = false;

    m_last_body_editor_isSet = false;
    m_last_body_editor_isValid = false;

    m_last_excerpt_editor_isSet = false;
    m_last_excerpt_editor_isValid = false;

    m_tag_name_isSet = false;
    m_tag_name_isValid = false;
}

void OAITag_wikis_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITag_wikis_inner::fromJsonObject(QJsonObject json) {

    m_body_isValid = ::OpenAPI::fromJsonValue(m_body, json[QString("body")]);
    m_body_isSet = !json[QString("body")].isNull() && m_body_isValid;

    m_body_last_edit_date_isValid = ::OpenAPI::fromJsonValue(m_body_last_edit_date, json[QString("body_last_edit_date")]);
    m_body_last_edit_date_isSet = !json[QString("body_last_edit_date")].isNull() && m_body_last_edit_date_isValid;

    m_excerpt_isValid = ::OpenAPI::fromJsonValue(m_excerpt, json[QString("excerpt")]);
    m_excerpt_isSet = !json[QString("excerpt")].isNull() && m_excerpt_isValid;

    m_excerpt_last_edit_date_isValid = ::OpenAPI::fromJsonValue(m_excerpt_last_edit_date, json[QString("excerpt_last_edit_date")]);
    m_excerpt_last_edit_date_isSet = !json[QString("excerpt_last_edit_date")].isNull() && m_excerpt_last_edit_date_isValid;

    m_last_body_editor_isValid = ::OpenAPI::fromJsonValue(m_last_body_editor, json[QString("last_body_editor")]);
    m_last_body_editor_isSet = !json[QString("last_body_editor")].isNull() && m_last_body_editor_isValid;

    m_last_excerpt_editor_isValid = ::OpenAPI::fromJsonValue(m_last_excerpt_editor, json[QString("last_excerpt_editor")]);
    m_last_excerpt_editor_isSet = !json[QString("last_excerpt_editor")].isNull() && m_last_excerpt_editor_isValid;

    m_tag_name_isValid = ::OpenAPI::fromJsonValue(m_tag_name, json[QString("tag_name")]);
    m_tag_name_isSet = !json[QString("tag_name")].isNull() && m_tag_name_isValid;
}

QString OAITag_wikis_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITag_wikis_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_body_isSet) {
        obj.insert(QString("body"), ::OpenAPI::toJsonValue(m_body));
    }
    if (m_body_last_edit_date_isSet) {
        obj.insert(QString("body_last_edit_date"), ::OpenAPI::toJsonValue(m_body_last_edit_date));
    }
    if (m_excerpt_isSet) {
        obj.insert(QString("excerpt"), ::OpenAPI::toJsonValue(m_excerpt));
    }
    if (m_excerpt_last_edit_date_isSet) {
        obj.insert(QString("excerpt_last_edit_date"), ::OpenAPI::toJsonValue(m_excerpt_last_edit_date));
    }
    if (m_last_body_editor.isSet()) {
        obj.insert(QString("last_body_editor"), ::OpenAPI::toJsonValue(m_last_body_editor));
    }
    if (m_last_excerpt_editor.isSet()) {
        obj.insert(QString("last_excerpt_editor"), ::OpenAPI::toJsonValue(m_last_excerpt_editor));
    }
    if (m_tag_name_isSet) {
        obj.insert(QString("tag_name"), ::OpenAPI::toJsonValue(m_tag_name));
    }
    return obj;
}

QString OAITag_wikis_inner::getBody() const {
    return m_body;
}
void OAITag_wikis_inner::setBody(const QString &body) {
    m_body = body;
    m_body_isSet = true;
}

bool OAITag_wikis_inner::is_body_Set() const{
    return m_body_isSet;
}

bool OAITag_wikis_inner::is_body_Valid() const{
    return m_body_isValid;
}

qint32 OAITag_wikis_inner::getBodyLastEditDate() const {
    return m_body_last_edit_date;
}
void OAITag_wikis_inner::setBodyLastEditDate(const qint32 &body_last_edit_date) {
    m_body_last_edit_date = body_last_edit_date;
    m_body_last_edit_date_isSet = true;
}

bool OAITag_wikis_inner::is_body_last_edit_date_Set() const{
    return m_body_last_edit_date_isSet;
}

bool OAITag_wikis_inner::is_body_last_edit_date_Valid() const{
    return m_body_last_edit_date_isValid;
}

QString OAITag_wikis_inner::getExcerpt() const {
    return m_excerpt;
}
void OAITag_wikis_inner::setExcerpt(const QString &excerpt) {
    m_excerpt = excerpt;
    m_excerpt_isSet = true;
}

bool OAITag_wikis_inner::is_excerpt_Set() const{
    return m_excerpt_isSet;
}

bool OAITag_wikis_inner::is_excerpt_Valid() const{
    return m_excerpt_isValid;
}

qint32 OAITag_wikis_inner::getExcerptLastEditDate() const {
    return m_excerpt_last_edit_date;
}
void OAITag_wikis_inner::setExcerptLastEditDate(const qint32 &excerpt_last_edit_date) {
    m_excerpt_last_edit_date = excerpt_last_edit_date;
    m_excerpt_last_edit_date_isSet = true;
}

bool OAITag_wikis_inner::is_excerpt_last_edit_date_Set() const{
    return m_excerpt_last_edit_date_isSet;
}

bool OAITag_wikis_inner::is_excerpt_last_edit_date_Valid() const{
    return m_excerpt_last_edit_date_isValid;
}

OAIAnswers_inner_last_editor OAITag_wikis_inner::getLastBodyEditor() const {
    return m_last_body_editor;
}
void OAITag_wikis_inner::setLastBodyEditor(const OAIAnswers_inner_last_editor &last_body_editor) {
    m_last_body_editor = last_body_editor;
    m_last_body_editor_isSet = true;
}

bool OAITag_wikis_inner::is_last_body_editor_Set() const{
    return m_last_body_editor_isSet;
}

bool OAITag_wikis_inner::is_last_body_editor_Valid() const{
    return m_last_body_editor_isValid;
}

OAIAnswers_inner_last_editor OAITag_wikis_inner::getLastExcerptEditor() const {
    return m_last_excerpt_editor;
}
void OAITag_wikis_inner::setLastExcerptEditor(const OAIAnswers_inner_last_editor &last_excerpt_editor) {
    m_last_excerpt_editor = last_excerpt_editor;
    m_last_excerpt_editor_isSet = true;
}

bool OAITag_wikis_inner::is_last_excerpt_editor_Set() const{
    return m_last_excerpt_editor_isSet;
}

bool OAITag_wikis_inner::is_last_excerpt_editor_Valid() const{
    return m_last_excerpt_editor_isValid;
}

QString OAITag_wikis_inner::getTagName() const {
    return m_tag_name;
}
void OAITag_wikis_inner::setTagName(const QString &tag_name) {
    m_tag_name = tag_name;
    m_tag_name_isSet = true;
}

bool OAITag_wikis_inner::is_tag_name_Set() const{
    return m_tag_name_isSet;
}

bool OAITag_wikis_inner::is_tag_name_Valid() const{
    return m_tag_name_isValid;
}

bool OAITag_wikis_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_body_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_body_last_edit_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_excerpt_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_excerpt_last_edit_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_body_editor.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_excerpt_editor.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tag_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITag_wikis_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
