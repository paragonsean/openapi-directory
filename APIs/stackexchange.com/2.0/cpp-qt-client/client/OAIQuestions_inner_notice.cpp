/**
 * StackExchange
 * Stack Exchange is a network of 130+ Q&A communities including Stack Overflow. 
 *
 * The version of the OpenAPI document: 2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIQuestions_inner_notice.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIQuestions_inner_notice::OAIQuestions_inner_notice(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIQuestions_inner_notice::OAIQuestions_inner_notice() {
    this->initializeModel();
}

OAIQuestions_inner_notice::~OAIQuestions_inner_notice() {}

void OAIQuestions_inner_notice::initializeModel() {

    m_body_isSet = false;
    m_body_isValid = false;

    m_creation_date_isSet = false;
    m_creation_date_isValid = false;

    m_owner_user_id_isSet = false;
    m_owner_user_id_isValid = false;
}

void OAIQuestions_inner_notice::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIQuestions_inner_notice::fromJsonObject(QJsonObject json) {

    m_body_isValid = ::OpenAPI::fromJsonValue(m_body, json[QString("body")]);
    m_body_isSet = !json[QString("body")].isNull() && m_body_isValid;

    m_creation_date_isValid = ::OpenAPI::fromJsonValue(m_creation_date, json[QString("creation_date")]);
    m_creation_date_isSet = !json[QString("creation_date")].isNull() && m_creation_date_isValid;

    m_owner_user_id_isValid = ::OpenAPI::fromJsonValue(m_owner_user_id, json[QString("owner_user_id")]);
    m_owner_user_id_isSet = !json[QString("owner_user_id")].isNull() && m_owner_user_id_isValid;
}

QString OAIQuestions_inner_notice::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIQuestions_inner_notice::asJsonObject() const {
    QJsonObject obj;
    if (m_body_isSet) {
        obj.insert(QString("body"), ::OpenAPI::toJsonValue(m_body));
    }
    if (m_creation_date_isSet) {
        obj.insert(QString("creation_date"), ::OpenAPI::toJsonValue(m_creation_date));
    }
    if (m_owner_user_id_isSet) {
        obj.insert(QString("owner_user_id"), ::OpenAPI::toJsonValue(m_owner_user_id));
    }
    return obj;
}

QString OAIQuestions_inner_notice::getBody() const {
    return m_body;
}
void OAIQuestions_inner_notice::setBody(const QString &body) {
    m_body = body;
    m_body_isSet = true;
}

bool OAIQuestions_inner_notice::is_body_Set() const{
    return m_body_isSet;
}

bool OAIQuestions_inner_notice::is_body_Valid() const{
    return m_body_isValid;
}

qint32 OAIQuestions_inner_notice::getCreationDate() const {
    return m_creation_date;
}
void OAIQuestions_inner_notice::setCreationDate(const qint32 &creation_date) {
    m_creation_date = creation_date;
    m_creation_date_isSet = true;
}

bool OAIQuestions_inner_notice::is_creation_date_Set() const{
    return m_creation_date_isSet;
}

bool OAIQuestions_inner_notice::is_creation_date_Valid() const{
    return m_creation_date_isValid;
}

qint32 OAIQuestions_inner_notice::getOwnerUserId() const {
    return m_owner_user_id;
}
void OAIQuestions_inner_notice::setOwnerUserId(const qint32 &owner_user_id) {
    m_owner_user_id = owner_user_id;
    m_owner_user_id_isSet = true;
}

bool OAIQuestions_inner_notice::is_owner_user_id_Set() const{
    return m_owner_user_id_isSet;
}

bool OAIQuestions_inner_notice::is_owner_user_id_Valid() const{
    return m_owner_user_id_isValid;
}

bool OAIQuestions_inner_notice::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_body_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_owner_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIQuestions_inner_notice::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
