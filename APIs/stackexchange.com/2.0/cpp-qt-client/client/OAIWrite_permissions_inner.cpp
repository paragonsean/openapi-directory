/**
 * StackExchange
 * Stack Exchange is a network of 130+ Q&A communities including Stack Overflow. 
 *
 * The version of the OpenAPI document: 2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWrite_permissions_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWrite_permissions_inner::OAIWrite_permissions_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWrite_permissions_inner::OAIWrite_permissions_inner() {
    this->initializeModel();
}

OAIWrite_permissions_inner::~OAIWrite_permissions_inner() {}

void OAIWrite_permissions_inner::initializeModel() {

    m_can_add_isSet = false;
    m_can_add_isValid = false;

    m_can_delete_isSet = false;
    m_can_delete_isValid = false;

    m_can_edit_isSet = false;
    m_can_edit_isValid = false;

    m_max_daily_actions_isSet = false;
    m_max_daily_actions_isValid = false;

    m_min_seconds_between_actions_isSet = false;
    m_min_seconds_between_actions_isValid = false;

    m_object_type_isSet = false;
    m_object_type_isValid = false;

    m_user_id_isSet = false;
    m_user_id_isValid = false;
}

void OAIWrite_permissions_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWrite_permissions_inner::fromJsonObject(QJsonObject json) {

    m_can_add_isValid = ::OpenAPI::fromJsonValue(m_can_add, json[QString("can_add")]);
    m_can_add_isSet = !json[QString("can_add")].isNull() && m_can_add_isValid;

    m_can_delete_isValid = ::OpenAPI::fromJsonValue(m_can_delete, json[QString("can_delete")]);
    m_can_delete_isSet = !json[QString("can_delete")].isNull() && m_can_delete_isValid;

    m_can_edit_isValid = ::OpenAPI::fromJsonValue(m_can_edit, json[QString("can_edit")]);
    m_can_edit_isSet = !json[QString("can_edit")].isNull() && m_can_edit_isValid;

    m_max_daily_actions_isValid = ::OpenAPI::fromJsonValue(m_max_daily_actions, json[QString("max_daily_actions")]);
    m_max_daily_actions_isSet = !json[QString("max_daily_actions")].isNull() && m_max_daily_actions_isValid;

    m_min_seconds_between_actions_isValid = ::OpenAPI::fromJsonValue(m_min_seconds_between_actions, json[QString("min_seconds_between_actions")]);
    m_min_seconds_between_actions_isSet = !json[QString("min_seconds_between_actions")].isNull() && m_min_seconds_between_actions_isValid;

    m_object_type_isValid = ::OpenAPI::fromJsonValue(m_object_type, json[QString("object_type")]);
    m_object_type_isSet = !json[QString("object_type")].isNull() && m_object_type_isValid;

    m_user_id_isValid = ::OpenAPI::fromJsonValue(m_user_id, json[QString("user_id")]);
    m_user_id_isSet = !json[QString("user_id")].isNull() && m_user_id_isValid;
}

QString OAIWrite_permissions_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWrite_permissions_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_can_add_isSet) {
        obj.insert(QString("can_add"), ::OpenAPI::toJsonValue(m_can_add));
    }
    if (m_can_delete_isSet) {
        obj.insert(QString("can_delete"), ::OpenAPI::toJsonValue(m_can_delete));
    }
    if (m_can_edit_isSet) {
        obj.insert(QString("can_edit"), ::OpenAPI::toJsonValue(m_can_edit));
    }
    if (m_max_daily_actions_isSet) {
        obj.insert(QString("max_daily_actions"), ::OpenAPI::toJsonValue(m_max_daily_actions));
    }
    if (m_min_seconds_between_actions_isSet) {
        obj.insert(QString("min_seconds_between_actions"), ::OpenAPI::toJsonValue(m_min_seconds_between_actions));
    }
    if (m_object_type_isSet) {
        obj.insert(QString("object_type"), ::OpenAPI::toJsonValue(m_object_type));
    }
    if (m_user_id_isSet) {
        obj.insert(QString("user_id"), ::OpenAPI::toJsonValue(m_user_id));
    }
    return obj;
}

bool OAIWrite_permissions_inner::isCanAdd() const {
    return m_can_add;
}
void OAIWrite_permissions_inner::setCanAdd(const bool &can_add) {
    m_can_add = can_add;
    m_can_add_isSet = true;
}

bool OAIWrite_permissions_inner::is_can_add_Set() const{
    return m_can_add_isSet;
}

bool OAIWrite_permissions_inner::is_can_add_Valid() const{
    return m_can_add_isValid;
}

bool OAIWrite_permissions_inner::isCanDelete() const {
    return m_can_delete;
}
void OAIWrite_permissions_inner::setCanDelete(const bool &can_delete) {
    m_can_delete = can_delete;
    m_can_delete_isSet = true;
}

bool OAIWrite_permissions_inner::is_can_delete_Set() const{
    return m_can_delete_isSet;
}

bool OAIWrite_permissions_inner::is_can_delete_Valid() const{
    return m_can_delete_isValid;
}

bool OAIWrite_permissions_inner::isCanEdit() const {
    return m_can_edit;
}
void OAIWrite_permissions_inner::setCanEdit(const bool &can_edit) {
    m_can_edit = can_edit;
    m_can_edit_isSet = true;
}

bool OAIWrite_permissions_inner::is_can_edit_Set() const{
    return m_can_edit_isSet;
}

bool OAIWrite_permissions_inner::is_can_edit_Valid() const{
    return m_can_edit_isValid;
}

qint32 OAIWrite_permissions_inner::getMaxDailyActions() const {
    return m_max_daily_actions;
}
void OAIWrite_permissions_inner::setMaxDailyActions(const qint32 &max_daily_actions) {
    m_max_daily_actions = max_daily_actions;
    m_max_daily_actions_isSet = true;
}

bool OAIWrite_permissions_inner::is_max_daily_actions_Set() const{
    return m_max_daily_actions_isSet;
}

bool OAIWrite_permissions_inner::is_max_daily_actions_Valid() const{
    return m_max_daily_actions_isValid;
}

qint32 OAIWrite_permissions_inner::getMinSecondsBetweenActions() const {
    return m_min_seconds_between_actions;
}
void OAIWrite_permissions_inner::setMinSecondsBetweenActions(const qint32 &min_seconds_between_actions) {
    m_min_seconds_between_actions = min_seconds_between_actions;
    m_min_seconds_between_actions_isSet = true;
}

bool OAIWrite_permissions_inner::is_min_seconds_between_actions_Set() const{
    return m_min_seconds_between_actions_isSet;
}

bool OAIWrite_permissions_inner::is_min_seconds_between_actions_Valid() const{
    return m_min_seconds_between_actions_isValid;
}

QString OAIWrite_permissions_inner::getObjectType() const {
    return m_object_type;
}
void OAIWrite_permissions_inner::setObjectType(const QString &object_type) {
    m_object_type = object_type;
    m_object_type_isSet = true;
}

bool OAIWrite_permissions_inner::is_object_type_Set() const{
    return m_object_type_isSet;
}

bool OAIWrite_permissions_inner::is_object_type_Valid() const{
    return m_object_type_isValid;
}

qint32 OAIWrite_permissions_inner::getUserId() const {
    return m_user_id;
}
void OAIWrite_permissions_inner::setUserId(const qint32 &user_id) {
    m_user_id = user_id;
    m_user_id_isSet = true;
}

bool OAIWrite_permissions_inner::is_user_id_Set() const{
    return m_user_id_isSet;
}

bool OAIWrite_permissions_inner::is_user_id_Valid() const{
    return m_user_id_isValid;
}

bool OAIWrite_permissions_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_can_add_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_delete_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_edit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_daily_actions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_seconds_between_actions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_object_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWrite_permissions_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
