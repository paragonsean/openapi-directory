/**
 * StackExchange
 * Stack Exchange is a network of 130+ Q&A communities including Stack Overflow. 
 *
 * The version of the OpenAPI document: 2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUser_timeline_objects_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUser_timeline_objects_inner::OAIUser_timeline_objects_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUser_timeline_objects_inner::OAIUser_timeline_objects_inner() {
    this->initializeModel();
}

OAIUser_timeline_objects_inner::~OAIUser_timeline_objects_inner() {}

void OAIUser_timeline_objects_inner::initializeModel() {

    m_badge_id_isSet = false;
    m_badge_id_isValid = false;

    m_comment_id_isSet = false;
    m_comment_id_isValid = false;

    m_creation_date_isSet = false;
    m_creation_date_isValid = false;

    m_detail_isSet = false;
    m_detail_isValid = false;

    m_link_isSet = false;
    m_link_isValid = false;

    m_post_id_isSet = false;
    m_post_id_isValid = false;

    m_post_type_isSet = false;
    m_post_type_isValid = false;

    m_suggested_edit_id_isSet = false;
    m_suggested_edit_id_isValid = false;

    m_timeline_type_isSet = false;
    m_timeline_type_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_user_id_isSet = false;
    m_user_id_isValid = false;
}

void OAIUser_timeline_objects_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUser_timeline_objects_inner::fromJsonObject(QJsonObject json) {

    m_badge_id_isValid = ::OpenAPI::fromJsonValue(m_badge_id, json[QString("badge_id")]);
    m_badge_id_isSet = !json[QString("badge_id")].isNull() && m_badge_id_isValid;

    m_comment_id_isValid = ::OpenAPI::fromJsonValue(m_comment_id, json[QString("comment_id")]);
    m_comment_id_isSet = !json[QString("comment_id")].isNull() && m_comment_id_isValid;

    m_creation_date_isValid = ::OpenAPI::fromJsonValue(m_creation_date, json[QString("creation_date")]);
    m_creation_date_isSet = !json[QString("creation_date")].isNull() && m_creation_date_isValid;

    m_detail_isValid = ::OpenAPI::fromJsonValue(m_detail, json[QString("detail")]);
    m_detail_isSet = !json[QString("detail")].isNull() && m_detail_isValid;

    m_link_isValid = ::OpenAPI::fromJsonValue(m_link, json[QString("link")]);
    m_link_isSet = !json[QString("link")].isNull() && m_link_isValid;

    m_post_id_isValid = ::OpenAPI::fromJsonValue(m_post_id, json[QString("post_id")]);
    m_post_id_isSet = !json[QString("post_id")].isNull() && m_post_id_isValid;

    m_post_type_isValid = ::OpenAPI::fromJsonValue(m_post_type, json[QString("post_type")]);
    m_post_type_isSet = !json[QString("post_type")].isNull() && m_post_type_isValid;

    m_suggested_edit_id_isValid = ::OpenAPI::fromJsonValue(m_suggested_edit_id, json[QString("suggested_edit_id")]);
    m_suggested_edit_id_isSet = !json[QString("suggested_edit_id")].isNull() && m_suggested_edit_id_isValid;

    m_timeline_type_isValid = ::OpenAPI::fromJsonValue(m_timeline_type, json[QString("timeline_type")]);
    m_timeline_type_isSet = !json[QString("timeline_type")].isNull() && m_timeline_type_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_user_id_isValid = ::OpenAPI::fromJsonValue(m_user_id, json[QString("user_id")]);
    m_user_id_isSet = !json[QString("user_id")].isNull() && m_user_id_isValid;
}

QString OAIUser_timeline_objects_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUser_timeline_objects_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_badge_id_isSet) {
        obj.insert(QString("badge_id"), ::OpenAPI::toJsonValue(m_badge_id));
    }
    if (m_comment_id_isSet) {
        obj.insert(QString("comment_id"), ::OpenAPI::toJsonValue(m_comment_id));
    }
    if (m_creation_date_isSet) {
        obj.insert(QString("creation_date"), ::OpenAPI::toJsonValue(m_creation_date));
    }
    if (m_detail_isSet) {
        obj.insert(QString("detail"), ::OpenAPI::toJsonValue(m_detail));
    }
    if (m_link_isSet) {
        obj.insert(QString("link"), ::OpenAPI::toJsonValue(m_link));
    }
    if (m_post_id_isSet) {
        obj.insert(QString("post_id"), ::OpenAPI::toJsonValue(m_post_id));
    }
    if (m_post_type_isSet) {
        obj.insert(QString("post_type"), ::OpenAPI::toJsonValue(m_post_type));
    }
    if (m_suggested_edit_id_isSet) {
        obj.insert(QString("suggested_edit_id"), ::OpenAPI::toJsonValue(m_suggested_edit_id));
    }
    if (m_timeline_type_isSet) {
        obj.insert(QString("timeline_type"), ::OpenAPI::toJsonValue(m_timeline_type));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_user_id_isSet) {
        obj.insert(QString("user_id"), ::OpenAPI::toJsonValue(m_user_id));
    }
    return obj;
}

qint32 OAIUser_timeline_objects_inner::getBadgeId() const {
    return m_badge_id;
}
void OAIUser_timeline_objects_inner::setBadgeId(const qint32 &badge_id) {
    m_badge_id = badge_id;
    m_badge_id_isSet = true;
}

bool OAIUser_timeline_objects_inner::is_badge_id_Set() const{
    return m_badge_id_isSet;
}

bool OAIUser_timeline_objects_inner::is_badge_id_Valid() const{
    return m_badge_id_isValid;
}

qint32 OAIUser_timeline_objects_inner::getCommentId() const {
    return m_comment_id;
}
void OAIUser_timeline_objects_inner::setCommentId(const qint32 &comment_id) {
    m_comment_id = comment_id;
    m_comment_id_isSet = true;
}

bool OAIUser_timeline_objects_inner::is_comment_id_Set() const{
    return m_comment_id_isSet;
}

bool OAIUser_timeline_objects_inner::is_comment_id_Valid() const{
    return m_comment_id_isValid;
}

qint32 OAIUser_timeline_objects_inner::getCreationDate() const {
    return m_creation_date;
}
void OAIUser_timeline_objects_inner::setCreationDate(const qint32 &creation_date) {
    m_creation_date = creation_date;
    m_creation_date_isSet = true;
}

bool OAIUser_timeline_objects_inner::is_creation_date_Set() const{
    return m_creation_date_isSet;
}

bool OAIUser_timeline_objects_inner::is_creation_date_Valid() const{
    return m_creation_date_isValid;
}

QString OAIUser_timeline_objects_inner::getDetail() const {
    return m_detail;
}
void OAIUser_timeline_objects_inner::setDetail(const QString &detail) {
    m_detail = detail;
    m_detail_isSet = true;
}

bool OAIUser_timeline_objects_inner::is_detail_Set() const{
    return m_detail_isSet;
}

bool OAIUser_timeline_objects_inner::is_detail_Valid() const{
    return m_detail_isValid;
}

QString OAIUser_timeline_objects_inner::getLink() const {
    return m_link;
}
void OAIUser_timeline_objects_inner::setLink(const QString &link) {
    m_link = link;
    m_link_isSet = true;
}

bool OAIUser_timeline_objects_inner::is_link_Set() const{
    return m_link_isSet;
}

bool OAIUser_timeline_objects_inner::is_link_Valid() const{
    return m_link_isValid;
}

qint32 OAIUser_timeline_objects_inner::getPostId() const {
    return m_post_id;
}
void OAIUser_timeline_objects_inner::setPostId(const qint32 &post_id) {
    m_post_id = post_id;
    m_post_id_isSet = true;
}

bool OAIUser_timeline_objects_inner::is_post_id_Set() const{
    return m_post_id_isSet;
}

bool OAIUser_timeline_objects_inner::is_post_id_Valid() const{
    return m_post_id_isValid;
}

QString OAIUser_timeline_objects_inner::getPostType() const {
    return m_post_type;
}
void OAIUser_timeline_objects_inner::setPostType(const QString &post_type) {
    m_post_type = post_type;
    m_post_type_isSet = true;
}

bool OAIUser_timeline_objects_inner::is_post_type_Set() const{
    return m_post_type_isSet;
}

bool OAIUser_timeline_objects_inner::is_post_type_Valid() const{
    return m_post_type_isValid;
}

qint32 OAIUser_timeline_objects_inner::getSuggestedEditId() const {
    return m_suggested_edit_id;
}
void OAIUser_timeline_objects_inner::setSuggestedEditId(const qint32 &suggested_edit_id) {
    m_suggested_edit_id = suggested_edit_id;
    m_suggested_edit_id_isSet = true;
}

bool OAIUser_timeline_objects_inner::is_suggested_edit_id_Set() const{
    return m_suggested_edit_id_isSet;
}

bool OAIUser_timeline_objects_inner::is_suggested_edit_id_Valid() const{
    return m_suggested_edit_id_isValid;
}

QString OAIUser_timeline_objects_inner::getTimelineType() const {
    return m_timeline_type;
}
void OAIUser_timeline_objects_inner::setTimelineType(const QString &timeline_type) {
    m_timeline_type = timeline_type;
    m_timeline_type_isSet = true;
}

bool OAIUser_timeline_objects_inner::is_timeline_type_Set() const{
    return m_timeline_type_isSet;
}

bool OAIUser_timeline_objects_inner::is_timeline_type_Valid() const{
    return m_timeline_type_isValid;
}

QString OAIUser_timeline_objects_inner::getTitle() const {
    return m_title;
}
void OAIUser_timeline_objects_inner::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIUser_timeline_objects_inner::is_title_Set() const{
    return m_title_isSet;
}

bool OAIUser_timeline_objects_inner::is_title_Valid() const{
    return m_title_isValid;
}

qint32 OAIUser_timeline_objects_inner::getUserId() const {
    return m_user_id;
}
void OAIUser_timeline_objects_inner::setUserId(const qint32 &user_id) {
    m_user_id = user_id;
    m_user_id_isSet = true;
}

bool OAIUser_timeline_objects_inner::is_user_id_Set() const{
    return m_user_id_isSet;
}

bool OAIUser_timeline_objects_inner::is_user_id_Valid() const{
    return m_user_id_isValid;
}

bool OAIUser_timeline_objects_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_badge_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_comment_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_detail_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_link_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_post_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_post_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_suggested_edit_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timeline_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUser_timeline_objects_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
