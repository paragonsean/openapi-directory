/**
 * StackExchange
 * Stack Exchange is a network of 130+ Q&A communities including Stack Overflow. 
 *
 * The version of the OpenAPI document: 2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIQuestions_inner_closed_details.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIQuestions_inner_closed_details::OAIQuestions_inner_closed_details(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIQuestions_inner_closed_details::OAIQuestions_inner_closed_details() {
    this->initializeModel();
}

OAIQuestions_inner_closed_details::~OAIQuestions_inner_closed_details() {}

void OAIQuestions_inner_closed_details::initializeModel() {

    m_by_users_isSet = false;
    m_by_users_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_on_hold_isSet = false;
    m_on_hold_isValid = false;

    m_original_questions_isSet = false;
    m_original_questions_isValid = false;

    m_reason_isSet = false;
    m_reason_isValid = false;
}

void OAIQuestions_inner_closed_details::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIQuestions_inner_closed_details::fromJsonObject(QJsonObject json) {

    m_by_users_isValid = ::OpenAPI::fromJsonValue(m_by_users, json[QString("by_users")]);
    m_by_users_isSet = !json[QString("by_users")].isNull() && m_by_users_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_on_hold_isValid = ::OpenAPI::fromJsonValue(m_on_hold, json[QString("on_hold")]);
    m_on_hold_isSet = !json[QString("on_hold")].isNull() && m_on_hold_isValid;

    m_original_questions_isValid = ::OpenAPI::fromJsonValue(m_original_questions, json[QString("original_questions")]);
    m_original_questions_isSet = !json[QString("original_questions")].isNull() && m_original_questions_isValid;

    m_reason_isValid = ::OpenAPI::fromJsonValue(m_reason, json[QString("reason")]);
    m_reason_isSet = !json[QString("reason")].isNull() && m_reason_isValid;
}

QString OAIQuestions_inner_closed_details::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIQuestions_inner_closed_details::asJsonObject() const {
    QJsonObject obj;
    if (m_by_users.size() > 0) {
        obj.insert(QString("by_users"), ::OpenAPI::toJsonValue(m_by_users));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_on_hold_isSet) {
        obj.insert(QString("on_hold"), ::OpenAPI::toJsonValue(m_on_hold));
    }
    if (m_original_questions.size() > 0) {
        obj.insert(QString("original_questions"), ::OpenAPI::toJsonValue(m_original_questions));
    }
    if (m_reason_isSet) {
        obj.insert(QString("reason"), ::OpenAPI::toJsonValue(m_reason));
    }
    return obj;
}

QList<QJsonValue> OAIQuestions_inner_closed_details::getByUsers() const {
    return m_by_users;
}
void OAIQuestions_inner_closed_details::setByUsers(const QList<QJsonValue> &by_users) {
    m_by_users = by_users;
    m_by_users_isSet = true;
}

bool OAIQuestions_inner_closed_details::is_by_users_Set() const{
    return m_by_users_isSet;
}

bool OAIQuestions_inner_closed_details::is_by_users_Valid() const{
    return m_by_users_isValid;
}

QString OAIQuestions_inner_closed_details::getDescription() const {
    return m_description;
}
void OAIQuestions_inner_closed_details::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIQuestions_inner_closed_details::is_description_Set() const{
    return m_description_isSet;
}

bool OAIQuestions_inner_closed_details::is_description_Valid() const{
    return m_description_isValid;
}

bool OAIQuestions_inner_closed_details::isOnHold() const {
    return m_on_hold;
}
void OAIQuestions_inner_closed_details::setOnHold(const bool &on_hold) {
    m_on_hold = on_hold;
    m_on_hold_isSet = true;
}

bool OAIQuestions_inner_closed_details::is_on_hold_Set() const{
    return m_on_hold_isSet;
}

bool OAIQuestions_inner_closed_details::is_on_hold_Valid() const{
    return m_on_hold_isValid;
}

QList<QJsonValue> OAIQuestions_inner_closed_details::getOriginalQuestions() const {
    return m_original_questions;
}
void OAIQuestions_inner_closed_details::setOriginalQuestions(const QList<QJsonValue> &original_questions) {
    m_original_questions = original_questions;
    m_original_questions_isSet = true;
}

bool OAIQuestions_inner_closed_details::is_original_questions_Set() const{
    return m_original_questions_isSet;
}

bool OAIQuestions_inner_closed_details::is_original_questions_Valid() const{
    return m_original_questions_isValid;
}

QString OAIQuestions_inner_closed_details::getReason() const {
    return m_reason;
}
void OAIQuestions_inner_closed_details::setReason(const QString &reason) {
    m_reason = reason;
    m_reason_isSet = true;
}

bool OAIQuestions_inner_closed_details::is_reason_Set() const{
    return m_reason_isSet;
}

bool OAIQuestions_inner_closed_details::is_reason_Valid() const{
    return m_reason_isValid;
}

bool OAIQuestions_inner_closed_details::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_by_users.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_on_hold_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_original_questions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_reason_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIQuestions_inner_closed_details::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
