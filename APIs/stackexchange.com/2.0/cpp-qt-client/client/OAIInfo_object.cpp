/**
 * StackExchange
 * Stack Exchange is a network of 130+ Q&A communities including Stack Overflow. 
 *
 * The version of the OpenAPI document: 2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInfo_object.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInfo_object::OAIInfo_object(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInfo_object::OAIInfo_object() {
    this->initializeModel();
}

OAIInfo_object::~OAIInfo_object() {}

void OAIInfo_object::initializeModel() {

    m_answers_per_minute_isSet = false;
    m_answers_per_minute_isValid = false;

    m_api_revision_isSet = false;
    m_api_revision_isValid = false;

    m_badges_per_minute_isSet = false;
    m_badges_per_minute_isValid = false;

    m_new_active_users_isSet = false;
    m_new_active_users_isValid = false;

    m_questions_per_minute_isSet = false;
    m_questions_per_minute_isValid = false;

    m_site_isSet = false;
    m_site_isValid = false;

    m_total_accepted_isSet = false;
    m_total_accepted_isValid = false;

    m_total_answers_isSet = false;
    m_total_answers_isValid = false;

    m_total_badges_isSet = false;
    m_total_badges_isValid = false;

    m_total_comments_isSet = false;
    m_total_comments_isValid = false;

    m_total_questions_isSet = false;
    m_total_questions_isValid = false;

    m_total_unanswered_isSet = false;
    m_total_unanswered_isValid = false;

    m_total_users_isSet = false;
    m_total_users_isValid = false;

    m_total_votes_isSet = false;
    m_total_votes_isValid = false;
}

void OAIInfo_object::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInfo_object::fromJsonObject(QJsonObject json) {

    m_answers_per_minute_isValid = ::OpenAPI::fromJsonValue(m_answers_per_minute, json[QString("answers_per_minute")]);
    m_answers_per_minute_isSet = !json[QString("answers_per_minute")].isNull() && m_answers_per_minute_isValid;

    m_api_revision_isValid = ::OpenAPI::fromJsonValue(m_api_revision, json[QString("api_revision")]);
    m_api_revision_isSet = !json[QString("api_revision")].isNull() && m_api_revision_isValid;

    m_badges_per_minute_isValid = ::OpenAPI::fromJsonValue(m_badges_per_minute, json[QString("badges_per_minute")]);
    m_badges_per_minute_isSet = !json[QString("badges_per_minute")].isNull() && m_badges_per_minute_isValid;

    m_new_active_users_isValid = ::OpenAPI::fromJsonValue(m_new_active_users, json[QString("new_active_users")]);
    m_new_active_users_isSet = !json[QString("new_active_users")].isNull() && m_new_active_users_isValid;

    m_questions_per_minute_isValid = ::OpenAPI::fromJsonValue(m_questions_per_minute, json[QString("questions_per_minute")]);
    m_questions_per_minute_isSet = !json[QString("questions_per_minute")].isNull() && m_questions_per_minute_isValid;

    m_site_isValid = ::OpenAPI::fromJsonValue(m_site, json[QString("site")]);
    m_site_isSet = !json[QString("site")].isNull() && m_site_isValid;

    m_total_accepted_isValid = ::OpenAPI::fromJsonValue(m_total_accepted, json[QString("total_accepted")]);
    m_total_accepted_isSet = !json[QString("total_accepted")].isNull() && m_total_accepted_isValid;

    m_total_answers_isValid = ::OpenAPI::fromJsonValue(m_total_answers, json[QString("total_answers")]);
    m_total_answers_isSet = !json[QString("total_answers")].isNull() && m_total_answers_isValid;

    m_total_badges_isValid = ::OpenAPI::fromJsonValue(m_total_badges, json[QString("total_badges")]);
    m_total_badges_isSet = !json[QString("total_badges")].isNull() && m_total_badges_isValid;

    m_total_comments_isValid = ::OpenAPI::fromJsonValue(m_total_comments, json[QString("total_comments")]);
    m_total_comments_isSet = !json[QString("total_comments")].isNull() && m_total_comments_isValid;

    m_total_questions_isValid = ::OpenAPI::fromJsonValue(m_total_questions, json[QString("total_questions")]);
    m_total_questions_isSet = !json[QString("total_questions")].isNull() && m_total_questions_isValid;

    m_total_unanswered_isValid = ::OpenAPI::fromJsonValue(m_total_unanswered, json[QString("total_unanswered")]);
    m_total_unanswered_isSet = !json[QString("total_unanswered")].isNull() && m_total_unanswered_isValid;

    m_total_users_isValid = ::OpenAPI::fromJsonValue(m_total_users, json[QString("total_users")]);
    m_total_users_isSet = !json[QString("total_users")].isNull() && m_total_users_isValid;

    m_total_votes_isValid = ::OpenAPI::fromJsonValue(m_total_votes, json[QString("total_votes")]);
    m_total_votes_isSet = !json[QString("total_votes")].isNull() && m_total_votes_isValid;
}

QString OAIInfo_object::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInfo_object::asJsonObject() const {
    QJsonObject obj;
    if (m_answers_per_minute_isSet) {
        obj.insert(QString("answers_per_minute"), ::OpenAPI::toJsonValue(m_answers_per_minute));
    }
    if (m_api_revision_isSet) {
        obj.insert(QString("api_revision"), ::OpenAPI::toJsonValue(m_api_revision));
    }
    if (m_badges_per_minute_isSet) {
        obj.insert(QString("badges_per_minute"), ::OpenAPI::toJsonValue(m_badges_per_minute));
    }
    if (m_new_active_users_isSet) {
        obj.insert(QString("new_active_users"), ::OpenAPI::toJsonValue(m_new_active_users));
    }
    if (m_questions_per_minute_isSet) {
        obj.insert(QString("questions_per_minute"), ::OpenAPI::toJsonValue(m_questions_per_minute));
    }
    if (m_site.isSet()) {
        obj.insert(QString("site"), ::OpenAPI::toJsonValue(m_site));
    }
    if (m_total_accepted_isSet) {
        obj.insert(QString("total_accepted"), ::OpenAPI::toJsonValue(m_total_accepted));
    }
    if (m_total_answers_isSet) {
        obj.insert(QString("total_answers"), ::OpenAPI::toJsonValue(m_total_answers));
    }
    if (m_total_badges_isSet) {
        obj.insert(QString("total_badges"), ::OpenAPI::toJsonValue(m_total_badges));
    }
    if (m_total_comments_isSet) {
        obj.insert(QString("total_comments"), ::OpenAPI::toJsonValue(m_total_comments));
    }
    if (m_total_questions_isSet) {
        obj.insert(QString("total_questions"), ::OpenAPI::toJsonValue(m_total_questions));
    }
    if (m_total_unanswered_isSet) {
        obj.insert(QString("total_unanswered"), ::OpenAPI::toJsonValue(m_total_unanswered));
    }
    if (m_total_users_isSet) {
        obj.insert(QString("total_users"), ::OpenAPI::toJsonValue(m_total_users));
    }
    if (m_total_votes_isSet) {
        obj.insert(QString("total_votes"), ::OpenAPI::toJsonValue(m_total_votes));
    }
    return obj;
}

double OAIInfo_object::getAnswersPerMinute() const {
    return m_answers_per_minute;
}
void OAIInfo_object::setAnswersPerMinute(const double &answers_per_minute) {
    m_answers_per_minute = answers_per_minute;
    m_answers_per_minute_isSet = true;
}

bool OAIInfo_object::is_answers_per_minute_Set() const{
    return m_answers_per_minute_isSet;
}

bool OAIInfo_object::is_answers_per_minute_Valid() const{
    return m_answers_per_minute_isValid;
}

QString OAIInfo_object::getApiRevision() const {
    return m_api_revision;
}
void OAIInfo_object::setApiRevision(const QString &api_revision) {
    m_api_revision = api_revision;
    m_api_revision_isSet = true;
}

bool OAIInfo_object::is_api_revision_Set() const{
    return m_api_revision_isSet;
}

bool OAIInfo_object::is_api_revision_Valid() const{
    return m_api_revision_isValid;
}

double OAIInfo_object::getBadgesPerMinute() const {
    return m_badges_per_minute;
}
void OAIInfo_object::setBadgesPerMinute(const double &badges_per_minute) {
    m_badges_per_minute = badges_per_minute;
    m_badges_per_minute_isSet = true;
}

bool OAIInfo_object::is_badges_per_minute_Set() const{
    return m_badges_per_minute_isSet;
}

bool OAIInfo_object::is_badges_per_minute_Valid() const{
    return m_badges_per_minute_isValid;
}

qint32 OAIInfo_object::getNewActiveUsers() const {
    return m_new_active_users;
}
void OAIInfo_object::setNewActiveUsers(const qint32 &new_active_users) {
    m_new_active_users = new_active_users;
    m_new_active_users_isSet = true;
}

bool OAIInfo_object::is_new_active_users_Set() const{
    return m_new_active_users_isSet;
}

bool OAIInfo_object::is_new_active_users_Valid() const{
    return m_new_active_users_isValid;
}

double OAIInfo_object::getQuestionsPerMinute() const {
    return m_questions_per_minute;
}
void OAIInfo_object::setQuestionsPerMinute(const double &questions_per_minute) {
    m_questions_per_minute = questions_per_minute;
    m_questions_per_minute_isSet = true;
}

bool OAIInfo_object::is_questions_per_minute_Set() const{
    return m_questions_per_minute_isSet;
}

bool OAIInfo_object::is_questions_per_minute_Valid() const{
    return m_questions_per_minute_isValid;
}

OAIInbox_items_inner_site OAIInfo_object::getSite() const {
    return m_site;
}
void OAIInfo_object::setSite(const OAIInbox_items_inner_site &site) {
    m_site = site;
    m_site_isSet = true;
}

bool OAIInfo_object::is_site_Set() const{
    return m_site_isSet;
}

bool OAIInfo_object::is_site_Valid() const{
    return m_site_isValid;
}

qint32 OAIInfo_object::getTotalAccepted() const {
    return m_total_accepted;
}
void OAIInfo_object::setTotalAccepted(const qint32 &total_accepted) {
    m_total_accepted = total_accepted;
    m_total_accepted_isSet = true;
}

bool OAIInfo_object::is_total_accepted_Set() const{
    return m_total_accepted_isSet;
}

bool OAIInfo_object::is_total_accepted_Valid() const{
    return m_total_accepted_isValid;
}

qint32 OAIInfo_object::getTotalAnswers() const {
    return m_total_answers;
}
void OAIInfo_object::setTotalAnswers(const qint32 &total_answers) {
    m_total_answers = total_answers;
    m_total_answers_isSet = true;
}

bool OAIInfo_object::is_total_answers_Set() const{
    return m_total_answers_isSet;
}

bool OAIInfo_object::is_total_answers_Valid() const{
    return m_total_answers_isValid;
}

qint32 OAIInfo_object::getTotalBadges() const {
    return m_total_badges;
}
void OAIInfo_object::setTotalBadges(const qint32 &total_badges) {
    m_total_badges = total_badges;
    m_total_badges_isSet = true;
}

bool OAIInfo_object::is_total_badges_Set() const{
    return m_total_badges_isSet;
}

bool OAIInfo_object::is_total_badges_Valid() const{
    return m_total_badges_isValid;
}

qint32 OAIInfo_object::getTotalComments() const {
    return m_total_comments;
}
void OAIInfo_object::setTotalComments(const qint32 &total_comments) {
    m_total_comments = total_comments;
    m_total_comments_isSet = true;
}

bool OAIInfo_object::is_total_comments_Set() const{
    return m_total_comments_isSet;
}

bool OAIInfo_object::is_total_comments_Valid() const{
    return m_total_comments_isValid;
}

qint32 OAIInfo_object::getTotalQuestions() const {
    return m_total_questions;
}
void OAIInfo_object::setTotalQuestions(const qint32 &total_questions) {
    m_total_questions = total_questions;
    m_total_questions_isSet = true;
}

bool OAIInfo_object::is_total_questions_Set() const{
    return m_total_questions_isSet;
}

bool OAIInfo_object::is_total_questions_Valid() const{
    return m_total_questions_isValid;
}

qint32 OAIInfo_object::getTotalUnanswered() const {
    return m_total_unanswered;
}
void OAIInfo_object::setTotalUnanswered(const qint32 &total_unanswered) {
    m_total_unanswered = total_unanswered;
    m_total_unanswered_isSet = true;
}

bool OAIInfo_object::is_total_unanswered_Set() const{
    return m_total_unanswered_isSet;
}

bool OAIInfo_object::is_total_unanswered_Valid() const{
    return m_total_unanswered_isValid;
}

qint32 OAIInfo_object::getTotalUsers() const {
    return m_total_users;
}
void OAIInfo_object::setTotalUsers(const qint32 &total_users) {
    m_total_users = total_users;
    m_total_users_isSet = true;
}

bool OAIInfo_object::is_total_users_Set() const{
    return m_total_users_isSet;
}

bool OAIInfo_object::is_total_users_Valid() const{
    return m_total_users_isValid;
}

qint32 OAIInfo_object::getTotalVotes() const {
    return m_total_votes;
}
void OAIInfo_object::setTotalVotes(const qint32 &total_votes) {
    m_total_votes = total_votes;
    m_total_votes_isSet = true;
}

bool OAIInfo_object::is_total_votes_Set() const{
    return m_total_votes_isSet;
}

bool OAIInfo_object::is_total_votes_Valid() const{
    return m_total_votes_isValid;
}

bool OAIInfo_object::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_answers_per_minute_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_api_revision_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_badges_per_minute_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_new_active_users_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_questions_per_minute_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_site.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_accepted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_answers_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_badges_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_comments_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_questions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_unanswered_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_users_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_votes_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInfo_object::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
