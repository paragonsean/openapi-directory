/**
 * StackExchange
 * Stack Exchange is a network of 130+ Q&A communities including Stack Overflow. 
 *
 * The version of the OpenAPI document: 2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIInfo_object.h
 *
 * 
 */

#ifndef OAIInfo_object_H
#define OAIInfo_object_H

#include <QJsonObject>

#include "OAIInbox_items_inner_site.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIInbox_items_inner_site;

class OAIInfo_object : public OAIObject {
public:
    OAIInfo_object();
    OAIInfo_object(QString json);
    ~OAIInfo_object() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    double getAnswersPerMinute() const;
    void setAnswersPerMinute(const double &answers_per_minute);
    bool is_answers_per_minute_Set() const;
    bool is_answers_per_minute_Valid() const;

    QString getApiRevision() const;
    void setApiRevision(const QString &api_revision);
    bool is_api_revision_Set() const;
    bool is_api_revision_Valid() const;

    double getBadgesPerMinute() const;
    void setBadgesPerMinute(const double &badges_per_minute);
    bool is_badges_per_minute_Set() const;
    bool is_badges_per_minute_Valid() const;

    qint32 getNewActiveUsers() const;
    void setNewActiveUsers(const qint32 &new_active_users);
    bool is_new_active_users_Set() const;
    bool is_new_active_users_Valid() const;

    double getQuestionsPerMinute() const;
    void setQuestionsPerMinute(const double &questions_per_minute);
    bool is_questions_per_minute_Set() const;
    bool is_questions_per_minute_Valid() const;

    OAIInbox_items_inner_site getSite() const;
    void setSite(const OAIInbox_items_inner_site &site);
    bool is_site_Set() const;
    bool is_site_Valid() const;

    qint32 getTotalAccepted() const;
    void setTotalAccepted(const qint32 &total_accepted);
    bool is_total_accepted_Set() const;
    bool is_total_accepted_Valid() const;

    qint32 getTotalAnswers() const;
    void setTotalAnswers(const qint32 &total_answers);
    bool is_total_answers_Set() const;
    bool is_total_answers_Valid() const;

    qint32 getTotalBadges() const;
    void setTotalBadges(const qint32 &total_badges);
    bool is_total_badges_Set() const;
    bool is_total_badges_Valid() const;

    qint32 getTotalComments() const;
    void setTotalComments(const qint32 &total_comments);
    bool is_total_comments_Set() const;
    bool is_total_comments_Valid() const;

    qint32 getTotalQuestions() const;
    void setTotalQuestions(const qint32 &total_questions);
    bool is_total_questions_Set() const;
    bool is_total_questions_Valid() const;

    qint32 getTotalUnanswered() const;
    void setTotalUnanswered(const qint32 &total_unanswered);
    bool is_total_unanswered_Set() const;
    bool is_total_unanswered_Valid() const;

    qint32 getTotalUsers() const;
    void setTotalUsers(const qint32 &total_users);
    bool is_total_users_Set() const;
    bool is_total_users_Valid() const;

    qint32 getTotalVotes() const;
    void setTotalVotes(const qint32 &total_votes);
    bool is_total_votes_Set() const;
    bool is_total_votes_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    double m_answers_per_minute;
    bool m_answers_per_minute_isSet;
    bool m_answers_per_minute_isValid;

    QString m_api_revision;
    bool m_api_revision_isSet;
    bool m_api_revision_isValid;

    double m_badges_per_minute;
    bool m_badges_per_minute_isSet;
    bool m_badges_per_minute_isValid;

    qint32 m_new_active_users;
    bool m_new_active_users_isSet;
    bool m_new_active_users_isValid;

    double m_questions_per_minute;
    bool m_questions_per_minute_isSet;
    bool m_questions_per_minute_isValid;

    OAIInbox_items_inner_site m_site;
    bool m_site_isSet;
    bool m_site_isValid;

    qint32 m_total_accepted;
    bool m_total_accepted_isSet;
    bool m_total_accepted_isValid;

    qint32 m_total_answers;
    bool m_total_answers_isSet;
    bool m_total_answers_isValid;

    qint32 m_total_badges;
    bool m_total_badges_isSet;
    bool m_total_badges_isValid;

    qint32 m_total_comments;
    bool m_total_comments_isSet;
    bool m_total_comments_isValid;

    qint32 m_total_questions;
    bool m_total_questions_isSet;
    bool m_total_questions_isValid;

    qint32 m_total_unanswered;
    bool m_total_unanswered_isSet;
    bool m_total_unanswered_isValid;

    qint32 m_total_users;
    bool m_total_users_isSet;
    bool m_total_users_isValid;

    qint32 m_total_votes;
    bool m_total_votes_isSet;
    bool m_total_votes_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIInfo_object)

#endif // OAIInfo_object_H
