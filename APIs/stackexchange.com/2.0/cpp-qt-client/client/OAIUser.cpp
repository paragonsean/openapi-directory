/**
 * StackExchange
 * Stack Exchange is a network of 130+ Q&A communities including Stack Overflow. 
 *
 * The version of the OpenAPI document: 2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUser.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUser::OAIUser(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUser::OAIUser() {
    this->initializeModel();
}

OAIUser::~OAIUser() {}

void OAIUser::initializeModel() {

    m_about_me_isSet = false;
    m_about_me_isValid = false;

    m_accept_rate_isSet = false;
    m_accept_rate_isValid = false;

    m_account_id_isSet = false;
    m_account_id_isValid = false;

    m_age_isSet = false;
    m_age_isValid = false;

    m_answer_count_isSet = false;
    m_answer_count_isValid = false;

    m_badge_counts_isSet = false;
    m_badge_counts_isValid = false;

    m_creation_date_isSet = false;
    m_creation_date_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_down_vote_count_isSet = false;
    m_down_vote_count_isValid = false;

    m_is_employee_isSet = false;
    m_is_employee_isValid = false;

    m_last_access_date_isSet = false;
    m_last_access_date_isValid = false;

    m_last_modified_date_isSet = false;
    m_last_modified_date_isValid = false;

    m_link_isSet = false;
    m_link_isValid = false;

    m_location_isSet = false;
    m_location_isValid = false;

    m_profile_image_isSet = false;
    m_profile_image_isValid = false;

    m_question_count_isSet = false;
    m_question_count_isValid = false;

    m_reputation_isSet = false;
    m_reputation_isValid = false;

    m_reputation_change_day_isSet = false;
    m_reputation_change_day_isValid = false;

    m_reputation_change_month_isSet = false;
    m_reputation_change_month_isValid = false;

    m_reputation_change_quarter_isSet = false;
    m_reputation_change_quarter_isValid = false;

    m_reputation_change_week_isSet = false;
    m_reputation_change_week_isValid = false;

    m_reputation_change_year_isSet = false;
    m_reputation_change_year_isValid = false;

    m_timed_penalty_date_isSet = false;
    m_timed_penalty_date_isValid = false;

    m_up_vote_count_isSet = false;
    m_up_vote_count_isValid = false;

    m_user_id_isSet = false;
    m_user_id_isValid = false;

    m_user_type_isSet = false;
    m_user_type_isValid = false;

    m_view_count_isSet = false;
    m_view_count_isValid = false;

    m_website_url_isSet = false;
    m_website_url_isValid = false;
}

void OAIUser::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUser::fromJsonObject(QJsonObject json) {

    m_about_me_isValid = ::OpenAPI::fromJsonValue(m_about_me, json[QString("about_me")]);
    m_about_me_isSet = !json[QString("about_me")].isNull() && m_about_me_isValid;

    m_accept_rate_isValid = ::OpenAPI::fromJsonValue(m_accept_rate, json[QString("accept_rate")]);
    m_accept_rate_isSet = !json[QString("accept_rate")].isNull() && m_accept_rate_isValid;

    m_account_id_isValid = ::OpenAPI::fromJsonValue(m_account_id, json[QString("account_id")]);
    m_account_id_isSet = !json[QString("account_id")].isNull() && m_account_id_isValid;

    m_age_isValid = ::OpenAPI::fromJsonValue(m_age, json[QString("age")]);
    m_age_isSet = !json[QString("age")].isNull() && m_age_isValid;

    m_answer_count_isValid = ::OpenAPI::fromJsonValue(m_answer_count, json[QString("answer_count")]);
    m_answer_count_isSet = !json[QString("answer_count")].isNull() && m_answer_count_isValid;

    m_badge_counts_isValid = ::OpenAPI::fromJsonValue(m_badge_counts, json[QString("badge_counts")]);
    m_badge_counts_isSet = !json[QString("badge_counts")].isNull() && m_badge_counts_isValid;

    m_creation_date_isValid = ::OpenAPI::fromJsonValue(m_creation_date, json[QString("creation_date")]);
    m_creation_date_isSet = !json[QString("creation_date")].isNull() && m_creation_date_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("display_name")]);
    m_display_name_isSet = !json[QString("display_name")].isNull() && m_display_name_isValid;

    m_down_vote_count_isValid = ::OpenAPI::fromJsonValue(m_down_vote_count, json[QString("down_vote_count")]);
    m_down_vote_count_isSet = !json[QString("down_vote_count")].isNull() && m_down_vote_count_isValid;

    m_is_employee_isValid = ::OpenAPI::fromJsonValue(m_is_employee, json[QString("is_employee")]);
    m_is_employee_isSet = !json[QString("is_employee")].isNull() && m_is_employee_isValid;

    m_last_access_date_isValid = ::OpenAPI::fromJsonValue(m_last_access_date, json[QString("last_access_date")]);
    m_last_access_date_isSet = !json[QString("last_access_date")].isNull() && m_last_access_date_isValid;

    m_last_modified_date_isValid = ::OpenAPI::fromJsonValue(m_last_modified_date, json[QString("last_modified_date")]);
    m_last_modified_date_isSet = !json[QString("last_modified_date")].isNull() && m_last_modified_date_isValid;

    m_link_isValid = ::OpenAPI::fromJsonValue(m_link, json[QString("link")]);
    m_link_isSet = !json[QString("link")].isNull() && m_link_isValid;

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;

    m_profile_image_isValid = ::OpenAPI::fromJsonValue(m_profile_image, json[QString("profile_image")]);
    m_profile_image_isSet = !json[QString("profile_image")].isNull() && m_profile_image_isValid;

    m_question_count_isValid = ::OpenAPI::fromJsonValue(m_question_count, json[QString("question_count")]);
    m_question_count_isSet = !json[QString("question_count")].isNull() && m_question_count_isValid;

    m_reputation_isValid = ::OpenAPI::fromJsonValue(m_reputation, json[QString("reputation")]);
    m_reputation_isSet = !json[QString("reputation")].isNull() && m_reputation_isValid;

    m_reputation_change_day_isValid = ::OpenAPI::fromJsonValue(m_reputation_change_day, json[QString("reputation_change_day")]);
    m_reputation_change_day_isSet = !json[QString("reputation_change_day")].isNull() && m_reputation_change_day_isValid;

    m_reputation_change_month_isValid = ::OpenAPI::fromJsonValue(m_reputation_change_month, json[QString("reputation_change_month")]);
    m_reputation_change_month_isSet = !json[QString("reputation_change_month")].isNull() && m_reputation_change_month_isValid;

    m_reputation_change_quarter_isValid = ::OpenAPI::fromJsonValue(m_reputation_change_quarter, json[QString("reputation_change_quarter")]);
    m_reputation_change_quarter_isSet = !json[QString("reputation_change_quarter")].isNull() && m_reputation_change_quarter_isValid;

    m_reputation_change_week_isValid = ::OpenAPI::fromJsonValue(m_reputation_change_week, json[QString("reputation_change_week")]);
    m_reputation_change_week_isSet = !json[QString("reputation_change_week")].isNull() && m_reputation_change_week_isValid;

    m_reputation_change_year_isValid = ::OpenAPI::fromJsonValue(m_reputation_change_year, json[QString("reputation_change_year")]);
    m_reputation_change_year_isSet = !json[QString("reputation_change_year")].isNull() && m_reputation_change_year_isValid;

    m_timed_penalty_date_isValid = ::OpenAPI::fromJsonValue(m_timed_penalty_date, json[QString("timed_penalty_date")]);
    m_timed_penalty_date_isSet = !json[QString("timed_penalty_date")].isNull() && m_timed_penalty_date_isValid;

    m_up_vote_count_isValid = ::OpenAPI::fromJsonValue(m_up_vote_count, json[QString("up_vote_count")]);
    m_up_vote_count_isSet = !json[QString("up_vote_count")].isNull() && m_up_vote_count_isValid;

    m_user_id_isValid = ::OpenAPI::fromJsonValue(m_user_id, json[QString("user_id")]);
    m_user_id_isSet = !json[QString("user_id")].isNull() && m_user_id_isValid;

    m_user_type_isValid = ::OpenAPI::fromJsonValue(m_user_type, json[QString("user_type")]);
    m_user_type_isSet = !json[QString("user_type")].isNull() && m_user_type_isValid;

    m_view_count_isValid = ::OpenAPI::fromJsonValue(m_view_count, json[QString("view_count")]);
    m_view_count_isSet = !json[QString("view_count")].isNull() && m_view_count_isValid;

    m_website_url_isValid = ::OpenAPI::fromJsonValue(m_website_url, json[QString("website_url")]);
    m_website_url_isSet = !json[QString("website_url")].isNull() && m_website_url_isValid;
}

QString OAIUser::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUser::asJsonObject() const {
    QJsonObject obj;
    if (m_about_me_isSet) {
        obj.insert(QString("about_me"), ::OpenAPI::toJsonValue(m_about_me));
    }
    if (m_accept_rate_isSet) {
        obj.insert(QString("accept_rate"), ::OpenAPI::toJsonValue(m_accept_rate));
    }
    if (m_account_id_isSet) {
        obj.insert(QString("account_id"), ::OpenAPI::toJsonValue(m_account_id));
    }
    if (m_age_isSet) {
        obj.insert(QString("age"), ::OpenAPI::toJsonValue(m_age));
    }
    if (m_answer_count_isSet) {
        obj.insert(QString("answer_count"), ::OpenAPI::toJsonValue(m_answer_count));
    }
    if (m_badge_counts.isSet()) {
        obj.insert(QString("badge_counts"), ::OpenAPI::toJsonValue(m_badge_counts));
    }
    if (m_creation_date_isSet) {
        obj.insert(QString("creation_date"), ::OpenAPI::toJsonValue(m_creation_date));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("display_name"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_down_vote_count_isSet) {
        obj.insert(QString("down_vote_count"), ::OpenAPI::toJsonValue(m_down_vote_count));
    }
    if (m_is_employee_isSet) {
        obj.insert(QString("is_employee"), ::OpenAPI::toJsonValue(m_is_employee));
    }
    if (m_last_access_date_isSet) {
        obj.insert(QString("last_access_date"), ::OpenAPI::toJsonValue(m_last_access_date));
    }
    if (m_last_modified_date_isSet) {
        obj.insert(QString("last_modified_date"), ::OpenAPI::toJsonValue(m_last_modified_date));
    }
    if (m_link_isSet) {
        obj.insert(QString("link"), ::OpenAPI::toJsonValue(m_link));
    }
    if (m_location_isSet) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_profile_image_isSet) {
        obj.insert(QString("profile_image"), ::OpenAPI::toJsonValue(m_profile_image));
    }
    if (m_question_count_isSet) {
        obj.insert(QString("question_count"), ::OpenAPI::toJsonValue(m_question_count));
    }
    if (m_reputation_isSet) {
        obj.insert(QString("reputation"), ::OpenAPI::toJsonValue(m_reputation));
    }
    if (m_reputation_change_day_isSet) {
        obj.insert(QString("reputation_change_day"), ::OpenAPI::toJsonValue(m_reputation_change_day));
    }
    if (m_reputation_change_month_isSet) {
        obj.insert(QString("reputation_change_month"), ::OpenAPI::toJsonValue(m_reputation_change_month));
    }
    if (m_reputation_change_quarter_isSet) {
        obj.insert(QString("reputation_change_quarter"), ::OpenAPI::toJsonValue(m_reputation_change_quarter));
    }
    if (m_reputation_change_week_isSet) {
        obj.insert(QString("reputation_change_week"), ::OpenAPI::toJsonValue(m_reputation_change_week));
    }
    if (m_reputation_change_year_isSet) {
        obj.insert(QString("reputation_change_year"), ::OpenAPI::toJsonValue(m_reputation_change_year));
    }
    if (m_timed_penalty_date_isSet) {
        obj.insert(QString("timed_penalty_date"), ::OpenAPI::toJsonValue(m_timed_penalty_date));
    }
    if (m_up_vote_count_isSet) {
        obj.insert(QString("up_vote_count"), ::OpenAPI::toJsonValue(m_up_vote_count));
    }
    if (m_user_id_isSet) {
        obj.insert(QString("user_id"), ::OpenAPI::toJsonValue(m_user_id));
    }
    if (m_user_type_isSet) {
        obj.insert(QString("user_type"), ::OpenAPI::toJsonValue(m_user_type));
    }
    if (m_view_count_isSet) {
        obj.insert(QString("view_count"), ::OpenAPI::toJsonValue(m_view_count));
    }
    if (m_website_url_isSet) {
        obj.insert(QString("website_url"), ::OpenAPI::toJsonValue(m_website_url));
    }
    return obj;
}

QString OAIUser::getAboutMe() const {
    return m_about_me;
}
void OAIUser::setAboutMe(const QString &about_me) {
    m_about_me = about_me;
    m_about_me_isSet = true;
}

bool OAIUser::is_about_me_Set() const{
    return m_about_me_isSet;
}

bool OAIUser::is_about_me_Valid() const{
    return m_about_me_isValid;
}

qint32 OAIUser::getAcceptRate() const {
    return m_accept_rate;
}
void OAIUser::setAcceptRate(const qint32 &accept_rate) {
    m_accept_rate = accept_rate;
    m_accept_rate_isSet = true;
}

bool OAIUser::is_accept_rate_Set() const{
    return m_accept_rate_isSet;
}

bool OAIUser::is_accept_rate_Valid() const{
    return m_accept_rate_isValid;
}

qint32 OAIUser::getAccountId() const {
    return m_account_id;
}
void OAIUser::setAccountId(const qint32 &account_id) {
    m_account_id = account_id;
    m_account_id_isSet = true;
}

bool OAIUser::is_account_id_Set() const{
    return m_account_id_isSet;
}

bool OAIUser::is_account_id_Valid() const{
    return m_account_id_isValid;
}

qint32 OAIUser::getAge() const {
    return m_age;
}
void OAIUser::setAge(const qint32 &age) {
    m_age = age;
    m_age_isSet = true;
}

bool OAIUser::is_age_Set() const{
    return m_age_isSet;
}

bool OAIUser::is_age_Valid() const{
    return m_age_isValid;
}

qint32 OAIUser::getAnswerCount() const {
    return m_answer_count;
}
void OAIUser::setAnswerCount(const qint32 &answer_count) {
    m_answer_count = answer_count;
    m_answer_count_isSet = true;
}

bool OAIUser::is_answer_count_Set() const{
    return m_answer_count_isSet;
}

bool OAIUser::is_answer_count_Valid() const{
    return m_answer_count_isValid;
}

OAIAnswers_inner_last_editor_badge_counts OAIUser::getBadgeCounts() const {
    return m_badge_counts;
}
void OAIUser::setBadgeCounts(const OAIAnswers_inner_last_editor_badge_counts &badge_counts) {
    m_badge_counts = badge_counts;
    m_badge_counts_isSet = true;
}

bool OAIUser::is_badge_counts_Set() const{
    return m_badge_counts_isSet;
}

bool OAIUser::is_badge_counts_Valid() const{
    return m_badge_counts_isValid;
}

qint32 OAIUser::getCreationDate() const {
    return m_creation_date;
}
void OAIUser::setCreationDate(const qint32 &creation_date) {
    m_creation_date = creation_date;
    m_creation_date_isSet = true;
}

bool OAIUser::is_creation_date_Set() const{
    return m_creation_date_isSet;
}

bool OAIUser::is_creation_date_Valid() const{
    return m_creation_date_isValid;
}

QString OAIUser::getDisplayName() const {
    return m_display_name;
}
void OAIUser::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIUser::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIUser::is_display_name_Valid() const{
    return m_display_name_isValid;
}

qint32 OAIUser::getDownVoteCount() const {
    return m_down_vote_count;
}
void OAIUser::setDownVoteCount(const qint32 &down_vote_count) {
    m_down_vote_count = down_vote_count;
    m_down_vote_count_isSet = true;
}

bool OAIUser::is_down_vote_count_Set() const{
    return m_down_vote_count_isSet;
}

bool OAIUser::is_down_vote_count_Valid() const{
    return m_down_vote_count_isValid;
}

bool OAIUser::isIsEmployee() const {
    return m_is_employee;
}
void OAIUser::setIsEmployee(const bool &is_employee) {
    m_is_employee = is_employee;
    m_is_employee_isSet = true;
}

bool OAIUser::is_is_employee_Set() const{
    return m_is_employee_isSet;
}

bool OAIUser::is_is_employee_Valid() const{
    return m_is_employee_isValid;
}

qint32 OAIUser::getLastAccessDate() const {
    return m_last_access_date;
}
void OAIUser::setLastAccessDate(const qint32 &last_access_date) {
    m_last_access_date = last_access_date;
    m_last_access_date_isSet = true;
}

bool OAIUser::is_last_access_date_Set() const{
    return m_last_access_date_isSet;
}

bool OAIUser::is_last_access_date_Valid() const{
    return m_last_access_date_isValid;
}

qint32 OAIUser::getLastModifiedDate() const {
    return m_last_modified_date;
}
void OAIUser::setLastModifiedDate(const qint32 &last_modified_date) {
    m_last_modified_date = last_modified_date;
    m_last_modified_date_isSet = true;
}

bool OAIUser::is_last_modified_date_Set() const{
    return m_last_modified_date_isSet;
}

bool OAIUser::is_last_modified_date_Valid() const{
    return m_last_modified_date_isValid;
}

QString OAIUser::getLink() const {
    return m_link;
}
void OAIUser::setLink(const QString &link) {
    m_link = link;
    m_link_isSet = true;
}

bool OAIUser::is_link_Set() const{
    return m_link_isSet;
}

bool OAIUser::is_link_Valid() const{
    return m_link_isValid;
}

QString OAIUser::getLocation() const {
    return m_location;
}
void OAIUser::setLocation(const QString &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAIUser::is_location_Set() const{
    return m_location_isSet;
}

bool OAIUser::is_location_Valid() const{
    return m_location_isValid;
}

QString OAIUser::getProfileImage() const {
    return m_profile_image;
}
void OAIUser::setProfileImage(const QString &profile_image) {
    m_profile_image = profile_image;
    m_profile_image_isSet = true;
}

bool OAIUser::is_profile_image_Set() const{
    return m_profile_image_isSet;
}

bool OAIUser::is_profile_image_Valid() const{
    return m_profile_image_isValid;
}

qint32 OAIUser::getQuestionCount() const {
    return m_question_count;
}
void OAIUser::setQuestionCount(const qint32 &question_count) {
    m_question_count = question_count;
    m_question_count_isSet = true;
}

bool OAIUser::is_question_count_Set() const{
    return m_question_count_isSet;
}

bool OAIUser::is_question_count_Valid() const{
    return m_question_count_isValid;
}

qint32 OAIUser::getReputation() const {
    return m_reputation;
}
void OAIUser::setReputation(const qint32 &reputation) {
    m_reputation = reputation;
    m_reputation_isSet = true;
}

bool OAIUser::is_reputation_Set() const{
    return m_reputation_isSet;
}

bool OAIUser::is_reputation_Valid() const{
    return m_reputation_isValid;
}

qint32 OAIUser::getReputationChangeDay() const {
    return m_reputation_change_day;
}
void OAIUser::setReputationChangeDay(const qint32 &reputation_change_day) {
    m_reputation_change_day = reputation_change_day;
    m_reputation_change_day_isSet = true;
}

bool OAIUser::is_reputation_change_day_Set() const{
    return m_reputation_change_day_isSet;
}

bool OAIUser::is_reputation_change_day_Valid() const{
    return m_reputation_change_day_isValid;
}

qint32 OAIUser::getReputationChangeMonth() const {
    return m_reputation_change_month;
}
void OAIUser::setReputationChangeMonth(const qint32 &reputation_change_month) {
    m_reputation_change_month = reputation_change_month;
    m_reputation_change_month_isSet = true;
}

bool OAIUser::is_reputation_change_month_Set() const{
    return m_reputation_change_month_isSet;
}

bool OAIUser::is_reputation_change_month_Valid() const{
    return m_reputation_change_month_isValid;
}

qint32 OAIUser::getReputationChangeQuarter() const {
    return m_reputation_change_quarter;
}
void OAIUser::setReputationChangeQuarter(const qint32 &reputation_change_quarter) {
    m_reputation_change_quarter = reputation_change_quarter;
    m_reputation_change_quarter_isSet = true;
}

bool OAIUser::is_reputation_change_quarter_Set() const{
    return m_reputation_change_quarter_isSet;
}

bool OAIUser::is_reputation_change_quarter_Valid() const{
    return m_reputation_change_quarter_isValid;
}

qint32 OAIUser::getReputationChangeWeek() const {
    return m_reputation_change_week;
}
void OAIUser::setReputationChangeWeek(const qint32 &reputation_change_week) {
    m_reputation_change_week = reputation_change_week;
    m_reputation_change_week_isSet = true;
}

bool OAIUser::is_reputation_change_week_Set() const{
    return m_reputation_change_week_isSet;
}

bool OAIUser::is_reputation_change_week_Valid() const{
    return m_reputation_change_week_isValid;
}

qint32 OAIUser::getReputationChangeYear() const {
    return m_reputation_change_year;
}
void OAIUser::setReputationChangeYear(const qint32 &reputation_change_year) {
    m_reputation_change_year = reputation_change_year;
    m_reputation_change_year_isSet = true;
}

bool OAIUser::is_reputation_change_year_Set() const{
    return m_reputation_change_year_isSet;
}

bool OAIUser::is_reputation_change_year_Valid() const{
    return m_reputation_change_year_isValid;
}

qint32 OAIUser::getTimedPenaltyDate() const {
    return m_timed_penalty_date;
}
void OAIUser::setTimedPenaltyDate(const qint32 &timed_penalty_date) {
    m_timed_penalty_date = timed_penalty_date;
    m_timed_penalty_date_isSet = true;
}

bool OAIUser::is_timed_penalty_date_Set() const{
    return m_timed_penalty_date_isSet;
}

bool OAIUser::is_timed_penalty_date_Valid() const{
    return m_timed_penalty_date_isValid;
}

qint32 OAIUser::getUpVoteCount() const {
    return m_up_vote_count;
}
void OAIUser::setUpVoteCount(const qint32 &up_vote_count) {
    m_up_vote_count = up_vote_count;
    m_up_vote_count_isSet = true;
}

bool OAIUser::is_up_vote_count_Set() const{
    return m_up_vote_count_isSet;
}

bool OAIUser::is_up_vote_count_Valid() const{
    return m_up_vote_count_isValid;
}

qint32 OAIUser::getUserId() const {
    return m_user_id;
}
void OAIUser::setUserId(const qint32 &user_id) {
    m_user_id = user_id;
    m_user_id_isSet = true;
}

bool OAIUser::is_user_id_Set() const{
    return m_user_id_isSet;
}

bool OAIUser::is_user_id_Valid() const{
    return m_user_id_isValid;
}

QString OAIUser::getUserType() const {
    return m_user_type;
}
void OAIUser::setUserType(const QString &user_type) {
    m_user_type = user_type;
    m_user_type_isSet = true;
}

bool OAIUser::is_user_type_Set() const{
    return m_user_type_isSet;
}

bool OAIUser::is_user_type_Valid() const{
    return m_user_type_isValid;
}

qint32 OAIUser::getViewCount() const {
    return m_view_count;
}
void OAIUser::setViewCount(const qint32 &view_count) {
    m_view_count = view_count;
    m_view_count_isSet = true;
}

bool OAIUser::is_view_count_Set() const{
    return m_view_count_isSet;
}

bool OAIUser::is_view_count_Valid() const{
    return m_view_count_isValid;
}

QString OAIUser::getWebsiteUrl() const {
    return m_website_url;
}
void OAIUser::setWebsiteUrl(const QString &website_url) {
    m_website_url = website_url;
    m_website_url_isSet = true;
}

bool OAIUser::is_website_url_Set() const{
    return m_website_url_isSet;
}

bool OAIUser::is_website_url_Valid() const{
    return m_website_url_isValid;
}

bool OAIUser::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_about_me_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_accept_rate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_age_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_answer_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_badge_counts.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_down_vote_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_employee_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_access_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_link_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_profile_image_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_question_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reputation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reputation_change_day_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reputation_change_month_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reputation_change_quarter_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reputation_change_week_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reputation_change_year_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timed_penalty_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_up_vote_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_view_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_website_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUser::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
