/**
 * StackExchange
 * Stack Exchange is a network of 130+ Q&A communities including Stack Overflow. 
 *
 * The version of the OpenAPI document: 2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITop_tag_objects_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITop_tag_objects_inner::OAITop_tag_objects_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITop_tag_objects_inner::OAITop_tag_objects_inner() {
    this->initializeModel();
}

OAITop_tag_objects_inner::~OAITop_tag_objects_inner() {}

void OAITop_tag_objects_inner::initializeModel() {

    m_answer_count_isSet = false;
    m_answer_count_isValid = false;

    m_answer_score_isSet = false;
    m_answer_score_isValid = false;

    m_question_count_isSet = false;
    m_question_count_isValid = false;

    m_question_score_isSet = false;
    m_question_score_isValid = false;

    m_tag_name_isSet = false;
    m_tag_name_isValid = false;

    m_user_id_isSet = false;
    m_user_id_isValid = false;
}

void OAITop_tag_objects_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITop_tag_objects_inner::fromJsonObject(QJsonObject json) {

    m_answer_count_isValid = ::OpenAPI::fromJsonValue(m_answer_count, json[QString("answer_count")]);
    m_answer_count_isSet = !json[QString("answer_count")].isNull() && m_answer_count_isValid;

    m_answer_score_isValid = ::OpenAPI::fromJsonValue(m_answer_score, json[QString("answer_score")]);
    m_answer_score_isSet = !json[QString("answer_score")].isNull() && m_answer_score_isValid;

    m_question_count_isValid = ::OpenAPI::fromJsonValue(m_question_count, json[QString("question_count")]);
    m_question_count_isSet = !json[QString("question_count")].isNull() && m_question_count_isValid;

    m_question_score_isValid = ::OpenAPI::fromJsonValue(m_question_score, json[QString("question_score")]);
    m_question_score_isSet = !json[QString("question_score")].isNull() && m_question_score_isValid;

    m_tag_name_isValid = ::OpenAPI::fromJsonValue(m_tag_name, json[QString("tag_name")]);
    m_tag_name_isSet = !json[QString("tag_name")].isNull() && m_tag_name_isValid;

    m_user_id_isValid = ::OpenAPI::fromJsonValue(m_user_id, json[QString("user_id")]);
    m_user_id_isSet = !json[QString("user_id")].isNull() && m_user_id_isValid;
}

QString OAITop_tag_objects_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITop_tag_objects_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_answer_count_isSet) {
        obj.insert(QString("answer_count"), ::OpenAPI::toJsonValue(m_answer_count));
    }
    if (m_answer_score_isSet) {
        obj.insert(QString("answer_score"), ::OpenAPI::toJsonValue(m_answer_score));
    }
    if (m_question_count_isSet) {
        obj.insert(QString("question_count"), ::OpenAPI::toJsonValue(m_question_count));
    }
    if (m_question_score_isSet) {
        obj.insert(QString("question_score"), ::OpenAPI::toJsonValue(m_question_score));
    }
    if (m_tag_name_isSet) {
        obj.insert(QString("tag_name"), ::OpenAPI::toJsonValue(m_tag_name));
    }
    if (m_user_id_isSet) {
        obj.insert(QString("user_id"), ::OpenAPI::toJsonValue(m_user_id));
    }
    return obj;
}

qint32 OAITop_tag_objects_inner::getAnswerCount() const {
    return m_answer_count;
}
void OAITop_tag_objects_inner::setAnswerCount(const qint32 &answer_count) {
    m_answer_count = answer_count;
    m_answer_count_isSet = true;
}

bool OAITop_tag_objects_inner::is_answer_count_Set() const{
    return m_answer_count_isSet;
}

bool OAITop_tag_objects_inner::is_answer_count_Valid() const{
    return m_answer_count_isValid;
}

qint32 OAITop_tag_objects_inner::getAnswerScore() const {
    return m_answer_score;
}
void OAITop_tag_objects_inner::setAnswerScore(const qint32 &answer_score) {
    m_answer_score = answer_score;
    m_answer_score_isSet = true;
}

bool OAITop_tag_objects_inner::is_answer_score_Set() const{
    return m_answer_score_isSet;
}

bool OAITop_tag_objects_inner::is_answer_score_Valid() const{
    return m_answer_score_isValid;
}

qint32 OAITop_tag_objects_inner::getQuestionCount() const {
    return m_question_count;
}
void OAITop_tag_objects_inner::setQuestionCount(const qint32 &question_count) {
    m_question_count = question_count;
    m_question_count_isSet = true;
}

bool OAITop_tag_objects_inner::is_question_count_Set() const{
    return m_question_count_isSet;
}

bool OAITop_tag_objects_inner::is_question_count_Valid() const{
    return m_question_count_isValid;
}

qint32 OAITop_tag_objects_inner::getQuestionScore() const {
    return m_question_score;
}
void OAITop_tag_objects_inner::setQuestionScore(const qint32 &question_score) {
    m_question_score = question_score;
    m_question_score_isSet = true;
}

bool OAITop_tag_objects_inner::is_question_score_Set() const{
    return m_question_score_isSet;
}

bool OAITop_tag_objects_inner::is_question_score_Valid() const{
    return m_question_score_isValid;
}

QString OAITop_tag_objects_inner::getTagName() const {
    return m_tag_name;
}
void OAITop_tag_objects_inner::setTagName(const QString &tag_name) {
    m_tag_name = tag_name;
    m_tag_name_isSet = true;
}

bool OAITop_tag_objects_inner::is_tag_name_Set() const{
    return m_tag_name_isSet;
}

bool OAITop_tag_objects_inner::is_tag_name_Valid() const{
    return m_tag_name_isValid;
}

qint32 OAITop_tag_objects_inner::getUserId() const {
    return m_user_id;
}
void OAITop_tag_objects_inner::setUserId(const qint32 &user_id) {
    m_user_id = user_id;
    m_user_id_isSet = true;
}

bool OAITop_tag_objects_inner::is_user_id_Set() const{
    return m_user_id_isSet;
}

bool OAITop_tag_objects_inner::is_user_id_Valid() const{
    return m_user_id_isValid;
}

bool OAITop_tag_objects_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_answer_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_answer_score_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_question_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_question_score_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tag_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITop_tag_objects_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
