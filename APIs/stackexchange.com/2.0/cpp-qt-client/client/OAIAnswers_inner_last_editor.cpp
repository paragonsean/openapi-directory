/**
 * StackExchange
 * Stack Exchange is a network of 130+ Q&A communities including Stack Overflow. 
 *
 * The version of the OpenAPI document: 2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAnswers_inner_last_editor.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAnswers_inner_last_editor::OAIAnswers_inner_last_editor(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAnswers_inner_last_editor::OAIAnswers_inner_last_editor() {
    this->initializeModel();
}

OAIAnswers_inner_last_editor::~OAIAnswers_inner_last_editor() {}

void OAIAnswers_inner_last_editor::initializeModel() {

    m_accept_rate_isSet = false;
    m_accept_rate_isValid = false;

    m_badge_counts_isSet = false;
    m_badge_counts_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_link_isSet = false;
    m_link_isValid = false;

    m_profile_image_isSet = false;
    m_profile_image_isValid = false;

    m_reputation_isSet = false;
    m_reputation_isValid = false;

    m_user_id_isSet = false;
    m_user_id_isValid = false;

    m_user_type_isSet = false;
    m_user_type_isValid = false;
}

void OAIAnswers_inner_last_editor::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAnswers_inner_last_editor::fromJsonObject(QJsonObject json) {

    m_accept_rate_isValid = ::OpenAPI::fromJsonValue(m_accept_rate, json[QString("accept_rate")]);
    m_accept_rate_isSet = !json[QString("accept_rate")].isNull() && m_accept_rate_isValid;

    m_badge_counts_isValid = ::OpenAPI::fromJsonValue(m_badge_counts, json[QString("badge_counts")]);
    m_badge_counts_isSet = !json[QString("badge_counts")].isNull() && m_badge_counts_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("display_name")]);
    m_display_name_isSet = !json[QString("display_name")].isNull() && m_display_name_isValid;

    m_link_isValid = ::OpenAPI::fromJsonValue(m_link, json[QString("link")]);
    m_link_isSet = !json[QString("link")].isNull() && m_link_isValid;

    m_profile_image_isValid = ::OpenAPI::fromJsonValue(m_profile_image, json[QString("profile_image")]);
    m_profile_image_isSet = !json[QString("profile_image")].isNull() && m_profile_image_isValid;

    m_reputation_isValid = ::OpenAPI::fromJsonValue(m_reputation, json[QString("reputation")]);
    m_reputation_isSet = !json[QString("reputation")].isNull() && m_reputation_isValid;

    m_user_id_isValid = ::OpenAPI::fromJsonValue(m_user_id, json[QString("user_id")]);
    m_user_id_isSet = !json[QString("user_id")].isNull() && m_user_id_isValid;

    m_user_type_isValid = ::OpenAPI::fromJsonValue(m_user_type, json[QString("user_type")]);
    m_user_type_isSet = !json[QString("user_type")].isNull() && m_user_type_isValid;
}

QString OAIAnswers_inner_last_editor::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAnswers_inner_last_editor::asJsonObject() const {
    QJsonObject obj;
    if (m_accept_rate_isSet) {
        obj.insert(QString("accept_rate"), ::OpenAPI::toJsonValue(m_accept_rate));
    }
    if (m_badge_counts.isSet()) {
        obj.insert(QString("badge_counts"), ::OpenAPI::toJsonValue(m_badge_counts));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("display_name"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_link_isSet) {
        obj.insert(QString("link"), ::OpenAPI::toJsonValue(m_link));
    }
    if (m_profile_image_isSet) {
        obj.insert(QString("profile_image"), ::OpenAPI::toJsonValue(m_profile_image));
    }
    if (m_reputation_isSet) {
        obj.insert(QString("reputation"), ::OpenAPI::toJsonValue(m_reputation));
    }
    if (m_user_id_isSet) {
        obj.insert(QString("user_id"), ::OpenAPI::toJsonValue(m_user_id));
    }
    if (m_user_type_isSet) {
        obj.insert(QString("user_type"), ::OpenAPI::toJsonValue(m_user_type));
    }
    return obj;
}

qint32 OAIAnswers_inner_last_editor::getAcceptRate() const {
    return m_accept_rate;
}
void OAIAnswers_inner_last_editor::setAcceptRate(const qint32 &accept_rate) {
    m_accept_rate = accept_rate;
    m_accept_rate_isSet = true;
}

bool OAIAnswers_inner_last_editor::is_accept_rate_Set() const{
    return m_accept_rate_isSet;
}

bool OAIAnswers_inner_last_editor::is_accept_rate_Valid() const{
    return m_accept_rate_isValid;
}

OAIAnswers_inner_last_editor_badge_counts OAIAnswers_inner_last_editor::getBadgeCounts() const {
    return m_badge_counts;
}
void OAIAnswers_inner_last_editor::setBadgeCounts(const OAIAnswers_inner_last_editor_badge_counts &badge_counts) {
    m_badge_counts = badge_counts;
    m_badge_counts_isSet = true;
}

bool OAIAnswers_inner_last_editor::is_badge_counts_Set() const{
    return m_badge_counts_isSet;
}

bool OAIAnswers_inner_last_editor::is_badge_counts_Valid() const{
    return m_badge_counts_isValid;
}

QString OAIAnswers_inner_last_editor::getDisplayName() const {
    return m_display_name;
}
void OAIAnswers_inner_last_editor::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIAnswers_inner_last_editor::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIAnswers_inner_last_editor::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QString OAIAnswers_inner_last_editor::getLink() const {
    return m_link;
}
void OAIAnswers_inner_last_editor::setLink(const QString &link) {
    m_link = link;
    m_link_isSet = true;
}

bool OAIAnswers_inner_last_editor::is_link_Set() const{
    return m_link_isSet;
}

bool OAIAnswers_inner_last_editor::is_link_Valid() const{
    return m_link_isValid;
}

QString OAIAnswers_inner_last_editor::getProfileImage() const {
    return m_profile_image;
}
void OAIAnswers_inner_last_editor::setProfileImage(const QString &profile_image) {
    m_profile_image = profile_image;
    m_profile_image_isSet = true;
}

bool OAIAnswers_inner_last_editor::is_profile_image_Set() const{
    return m_profile_image_isSet;
}

bool OAIAnswers_inner_last_editor::is_profile_image_Valid() const{
    return m_profile_image_isValid;
}

qint32 OAIAnswers_inner_last_editor::getReputation() const {
    return m_reputation;
}
void OAIAnswers_inner_last_editor::setReputation(const qint32 &reputation) {
    m_reputation = reputation;
    m_reputation_isSet = true;
}

bool OAIAnswers_inner_last_editor::is_reputation_Set() const{
    return m_reputation_isSet;
}

bool OAIAnswers_inner_last_editor::is_reputation_Valid() const{
    return m_reputation_isValid;
}

qint32 OAIAnswers_inner_last_editor::getUserId() const {
    return m_user_id;
}
void OAIAnswers_inner_last_editor::setUserId(const qint32 &user_id) {
    m_user_id = user_id;
    m_user_id_isSet = true;
}

bool OAIAnswers_inner_last_editor::is_user_id_Set() const{
    return m_user_id_isSet;
}

bool OAIAnswers_inner_last_editor::is_user_id_Valid() const{
    return m_user_id_isValid;
}

QString OAIAnswers_inner_last_editor::getUserType() const {
    return m_user_type;
}
void OAIAnswers_inner_last_editor::setUserType(const QString &user_type) {
    m_user_type = user_type;
    m_user_type_isSet = true;
}

bool OAIAnswers_inner_last_editor::is_user_type_Set() const{
    return m_user_type_isSet;
}

bool OAIAnswers_inner_last_editor::is_user_type_Valid() const{
    return m_user_type_isValid;
}

bool OAIAnswers_inner_last_editor::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_accept_rate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_badge_counts.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_link_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_profile_image_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reputation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAnswers_inner_last_editor::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
