/**
 * StackExchange
 * Stack Exchange is a network of 130+ Q&A communities including Stack Overflow. 
 *
 * The version of the OpenAPI document: 2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISuggested_edits_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISuggested_edits_inner::OAISuggested_edits_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISuggested_edits_inner::OAISuggested_edits_inner() {
    this->initializeModel();
}

OAISuggested_edits_inner::~OAISuggested_edits_inner() {}

void OAISuggested_edits_inner::initializeModel() {

    m_approval_date_isSet = false;
    m_approval_date_isValid = false;

    m_body_isSet = false;
    m_body_isValid = false;

    m_comment_isSet = false;
    m_comment_isValid = false;

    m_creation_date_isSet = false;
    m_creation_date_isValid = false;

    m_post_id_isSet = false;
    m_post_id_isValid = false;

    m_post_type_isSet = false;
    m_post_type_isValid = false;

    m_proposing_user_isSet = false;
    m_proposing_user_isValid = false;

    m_rejection_date_isSet = false;
    m_rejection_date_isValid = false;

    m_suggested_edit_id_isSet = false;
    m_suggested_edit_id_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;
}

void OAISuggested_edits_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISuggested_edits_inner::fromJsonObject(QJsonObject json) {

    m_approval_date_isValid = ::OpenAPI::fromJsonValue(m_approval_date, json[QString("approval_date")]);
    m_approval_date_isSet = !json[QString("approval_date")].isNull() && m_approval_date_isValid;

    m_body_isValid = ::OpenAPI::fromJsonValue(m_body, json[QString("body")]);
    m_body_isSet = !json[QString("body")].isNull() && m_body_isValid;

    m_comment_isValid = ::OpenAPI::fromJsonValue(m_comment, json[QString("comment")]);
    m_comment_isSet = !json[QString("comment")].isNull() && m_comment_isValid;

    m_creation_date_isValid = ::OpenAPI::fromJsonValue(m_creation_date, json[QString("creation_date")]);
    m_creation_date_isSet = !json[QString("creation_date")].isNull() && m_creation_date_isValid;

    m_post_id_isValid = ::OpenAPI::fromJsonValue(m_post_id, json[QString("post_id")]);
    m_post_id_isSet = !json[QString("post_id")].isNull() && m_post_id_isValid;

    m_post_type_isValid = ::OpenAPI::fromJsonValue(m_post_type, json[QString("post_type")]);
    m_post_type_isSet = !json[QString("post_type")].isNull() && m_post_type_isValid;

    m_proposing_user_isValid = ::OpenAPI::fromJsonValue(m_proposing_user, json[QString("proposing_user")]);
    m_proposing_user_isSet = !json[QString("proposing_user")].isNull() && m_proposing_user_isValid;

    m_rejection_date_isValid = ::OpenAPI::fromJsonValue(m_rejection_date, json[QString("rejection_date")]);
    m_rejection_date_isSet = !json[QString("rejection_date")].isNull() && m_rejection_date_isValid;

    m_suggested_edit_id_isValid = ::OpenAPI::fromJsonValue(m_suggested_edit_id, json[QString("suggested_edit_id")]);
    m_suggested_edit_id_isSet = !json[QString("suggested_edit_id")].isNull() && m_suggested_edit_id_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;
}

QString OAISuggested_edits_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISuggested_edits_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_approval_date_isSet) {
        obj.insert(QString("approval_date"), ::OpenAPI::toJsonValue(m_approval_date));
    }
    if (m_body_isSet) {
        obj.insert(QString("body"), ::OpenAPI::toJsonValue(m_body));
    }
    if (m_comment_isSet) {
        obj.insert(QString("comment"), ::OpenAPI::toJsonValue(m_comment));
    }
    if (m_creation_date_isSet) {
        obj.insert(QString("creation_date"), ::OpenAPI::toJsonValue(m_creation_date));
    }
    if (m_post_id_isSet) {
        obj.insert(QString("post_id"), ::OpenAPI::toJsonValue(m_post_id));
    }
    if (m_post_type_isSet) {
        obj.insert(QString("post_type"), ::OpenAPI::toJsonValue(m_post_type));
    }
    if (m_proposing_user.isSet()) {
        obj.insert(QString("proposing_user"), ::OpenAPI::toJsonValue(m_proposing_user));
    }
    if (m_rejection_date_isSet) {
        obj.insert(QString("rejection_date"), ::OpenAPI::toJsonValue(m_rejection_date));
    }
    if (m_suggested_edit_id_isSet) {
        obj.insert(QString("suggested_edit_id"), ::OpenAPI::toJsonValue(m_suggested_edit_id));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    return obj;
}

qint32 OAISuggested_edits_inner::getApprovalDate() const {
    return m_approval_date;
}
void OAISuggested_edits_inner::setApprovalDate(const qint32 &approval_date) {
    m_approval_date = approval_date;
    m_approval_date_isSet = true;
}

bool OAISuggested_edits_inner::is_approval_date_Set() const{
    return m_approval_date_isSet;
}

bool OAISuggested_edits_inner::is_approval_date_Valid() const{
    return m_approval_date_isValid;
}

QString OAISuggested_edits_inner::getBody() const {
    return m_body;
}
void OAISuggested_edits_inner::setBody(const QString &body) {
    m_body = body;
    m_body_isSet = true;
}

bool OAISuggested_edits_inner::is_body_Set() const{
    return m_body_isSet;
}

bool OAISuggested_edits_inner::is_body_Valid() const{
    return m_body_isValid;
}

QString OAISuggested_edits_inner::getComment() const {
    return m_comment;
}
void OAISuggested_edits_inner::setComment(const QString &comment) {
    m_comment = comment;
    m_comment_isSet = true;
}

bool OAISuggested_edits_inner::is_comment_Set() const{
    return m_comment_isSet;
}

bool OAISuggested_edits_inner::is_comment_Valid() const{
    return m_comment_isValid;
}

qint32 OAISuggested_edits_inner::getCreationDate() const {
    return m_creation_date;
}
void OAISuggested_edits_inner::setCreationDate(const qint32 &creation_date) {
    m_creation_date = creation_date;
    m_creation_date_isSet = true;
}

bool OAISuggested_edits_inner::is_creation_date_Set() const{
    return m_creation_date_isSet;
}

bool OAISuggested_edits_inner::is_creation_date_Valid() const{
    return m_creation_date_isValid;
}

qint32 OAISuggested_edits_inner::getPostId() const {
    return m_post_id;
}
void OAISuggested_edits_inner::setPostId(const qint32 &post_id) {
    m_post_id = post_id;
    m_post_id_isSet = true;
}

bool OAISuggested_edits_inner::is_post_id_Set() const{
    return m_post_id_isSet;
}

bool OAISuggested_edits_inner::is_post_id_Valid() const{
    return m_post_id_isValid;
}

QString OAISuggested_edits_inner::getPostType() const {
    return m_post_type;
}
void OAISuggested_edits_inner::setPostType(const QString &post_type) {
    m_post_type = post_type;
    m_post_type_isSet = true;
}

bool OAISuggested_edits_inner::is_post_type_Set() const{
    return m_post_type_isSet;
}

bool OAISuggested_edits_inner::is_post_type_Valid() const{
    return m_post_type_isValid;
}

OAIAnswers_inner_last_editor OAISuggested_edits_inner::getProposingUser() const {
    return m_proposing_user;
}
void OAISuggested_edits_inner::setProposingUser(const OAIAnswers_inner_last_editor &proposing_user) {
    m_proposing_user = proposing_user;
    m_proposing_user_isSet = true;
}

bool OAISuggested_edits_inner::is_proposing_user_Set() const{
    return m_proposing_user_isSet;
}

bool OAISuggested_edits_inner::is_proposing_user_Valid() const{
    return m_proposing_user_isValid;
}

qint32 OAISuggested_edits_inner::getRejectionDate() const {
    return m_rejection_date;
}
void OAISuggested_edits_inner::setRejectionDate(const qint32 &rejection_date) {
    m_rejection_date = rejection_date;
    m_rejection_date_isSet = true;
}

bool OAISuggested_edits_inner::is_rejection_date_Set() const{
    return m_rejection_date_isSet;
}

bool OAISuggested_edits_inner::is_rejection_date_Valid() const{
    return m_rejection_date_isValid;
}

qint32 OAISuggested_edits_inner::getSuggestedEditId() const {
    return m_suggested_edit_id;
}
void OAISuggested_edits_inner::setSuggestedEditId(const qint32 &suggested_edit_id) {
    m_suggested_edit_id = suggested_edit_id;
    m_suggested_edit_id_isSet = true;
}

bool OAISuggested_edits_inner::is_suggested_edit_id_Set() const{
    return m_suggested_edit_id_isSet;
}

bool OAISuggested_edits_inner::is_suggested_edit_id_Valid() const{
    return m_suggested_edit_id_isValid;
}

QList<QJsonValue> OAISuggested_edits_inner::getTags() const {
    return m_tags;
}
void OAISuggested_edits_inner::setTags(const QList<QJsonValue> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAISuggested_edits_inner::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAISuggested_edits_inner::is_tags_Valid() const{
    return m_tags_isValid;
}

QString OAISuggested_edits_inner::getTitle() const {
    return m_title;
}
void OAISuggested_edits_inner::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAISuggested_edits_inner::is_title_Set() const{
    return m_title_isSet;
}

bool OAISuggested_edits_inner::is_title_Valid() const{
    return m_title_isValid;
}

bool OAISuggested_edits_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_approval_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_body_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_comment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_post_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_post_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_proposing_user.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_rejection_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_suggested_edit_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISuggested_edits_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
