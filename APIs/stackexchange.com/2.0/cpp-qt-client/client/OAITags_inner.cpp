/**
 * StackExchange
 * Stack Exchange is a network of 130+ Q&A communities including Stack Overflow. 
 *
 * The version of the OpenAPI document: 2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITags_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITags_inner::OAITags_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITags_inner::OAITags_inner() {
    this->initializeModel();
}

OAITags_inner::~OAITags_inner() {}

void OAITags_inner::initializeModel() {

    m_count_isSet = false;
    m_count_isValid = false;

    m_has_synonyms_isSet = false;
    m_has_synonyms_isValid = false;

    m_is_moderator_only_isSet = false;
    m_is_moderator_only_isValid = false;

    m_is_required_isSet = false;
    m_is_required_isValid = false;

    m_last_activity_date_isSet = false;
    m_last_activity_date_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_synonyms_isSet = false;
    m_synonyms_isValid = false;

    m_user_id_isSet = false;
    m_user_id_isValid = false;
}

void OAITags_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITags_inner::fromJsonObject(QJsonObject json) {

    m_count_isValid = ::OpenAPI::fromJsonValue(m_count, json[QString("count")]);
    m_count_isSet = !json[QString("count")].isNull() && m_count_isValid;

    m_has_synonyms_isValid = ::OpenAPI::fromJsonValue(m_has_synonyms, json[QString("has_synonyms")]);
    m_has_synonyms_isSet = !json[QString("has_synonyms")].isNull() && m_has_synonyms_isValid;

    m_is_moderator_only_isValid = ::OpenAPI::fromJsonValue(m_is_moderator_only, json[QString("is_moderator_only")]);
    m_is_moderator_only_isSet = !json[QString("is_moderator_only")].isNull() && m_is_moderator_only_isValid;

    m_is_required_isValid = ::OpenAPI::fromJsonValue(m_is_required, json[QString("is_required")]);
    m_is_required_isSet = !json[QString("is_required")].isNull() && m_is_required_isValid;

    m_last_activity_date_isValid = ::OpenAPI::fromJsonValue(m_last_activity_date, json[QString("last_activity_date")]);
    m_last_activity_date_isSet = !json[QString("last_activity_date")].isNull() && m_last_activity_date_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_synonyms_isValid = ::OpenAPI::fromJsonValue(m_synonyms, json[QString("synonyms")]);
    m_synonyms_isSet = !json[QString("synonyms")].isNull() && m_synonyms_isValid;

    m_user_id_isValid = ::OpenAPI::fromJsonValue(m_user_id, json[QString("user_id")]);
    m_user_id_isSet = !json[QString("user_id")].isNull() && m_user_id_isValid;
}

QString OAITags_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITags_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_count_isSet) {
        obj.insert(QString("count"), ::OpenAPI::toJsonValue(m_count));
    }
    if (m_has_synonyms_isSet) {
        obj.insert(QString("has_synonyms"), ::OpenAPI::toJsonValue(m_has_synonyms));
    }
    if (m_is_moderator_only_isSet) {
        obj.insert(QString("is_moderator_only"), ::OpenAPI::toJsonValue(m_is_moderator_only));
    }
    if (m_is_required_isSet) {
        obj.insert(QString("is_required"), ::OpenAPI::toJsonValue(m_is_required));
    }
    if (m_last_activity_date_isSet) {
        obj.insert(QString("last_activity_date"), ::OpenAPI::toJsonValue(m_last_activity_date));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_synonyms.size() > 0) {
        obj.insert(QString("synonyms"), ::OpenAPI::toJsonValue(m_synonyms));
    }
    if (m_user_id_isSet) {
        obj.insert(QString("user_id"), ::OpenAPI::toJsonValue(m_user_id));
    }
    return obj;
}

qint32 OAITags_inner::getCount() const {
    return m_count;
}
void OAITags_inner::setCount(const qint32 &count) {
    m_count = count;
    m_count_isSet = true;
}

bool OAITags_inner::is_count_Set() const{
    return m_count_isSet;
}

bool OAITags_inner::is_count_Valid() const{
    return m_count_isValid;
}

bool OAITags_inner::isHasSynonyms() const {
    return m_has_synonyms;
}
void OAITags_inner::setHasSynonyms(const bool &has_synonyms) {
    m_has_synonyms = has_synonyms;
    m_has_synonyms_isSet = true;
}

bool OAITags_inner::is_has_synonyms_Set() const{
    return m_has_synonyms_isSet;
}

bool OAITags_inner::is_has_synonyms_Valid() const{
    return m_has_synonyms_isValid;
}

bool OAITags_inner::isIsModeratorOnly() const {
    return m_is_moderator_only;
}
void OAITags_inner::setIsModeratorOnly(const bool &is_moderator_only) {
    m_is_moderator_only = is_moderator_only;
    m_is_moderator_only_isSet = true;
}

bool OAITags_inner::is_is_moderator_only_Set() const{
    return m_is_moderator_only_isSet;
}

bool OAITags_inner::is_is_moderator_only_Valid() const{
    return m_is_moderator_only_isValid;
}

bool OAITags_inner::isIsRequired() const {
    return m_is_required;
}
void OAITags_inner::setIsRequired(const bool &is_required) {
    m_is_required = is_required;
    m_is_required_isSet = true;
}

bool OAITags_inner::is_is_required_Set() const{
    return m_is_required_isSet;
}

bool OAITags_inner::is_is_required_Valid() const{
    return m_is_required_isValid;
}

qint32 OAITags_inner::getLastActivityDate() const {
    return m_last_activity_date;
}
void OAITags_inner::setLastActivityDate(const qint32 &last_activity_date) {
    m_last_activity_date = last_activity_date;
    m_last_activity_date_isSet = true;
}

bool OAITags_inner::is_last_activity_date_Set() const{
    return m_last_activity_date_isSet;
}

bool OAITags_inner::is_last_activity_date_Valid() const{
    return m_last_activity_date_isValid;
}

QString OAITags_inner::getName() const {
    return m_name;
}
void OAITags_inner::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAITags_inner::is_name_Set() const{
    return m_name_isSet;
}

bool OAITags_inner::is_name_Valid() const{
    return m_name_isValid;
}

QList<QJsonValue> OAITags_inner::getSynonyms() const {
    return m_synonyms;
}
void OAITags_inner::setSynonyms(const QList<QJsonValue> &synonyms) {
    m_synonyms = synonyms;
    m_synonyms_isSet = true;
}

bool OAITags_inner::is_synonyms_Set() const{
    return m_synonyms_isSet;
}

bool OAITags_inner::is_synonyms_Valid() const{
    return m_synonyms_isValid;
}

qint32 OAITags_inner::getUserId() const {
    return m_user_id;
}
void OAITags_inner::setUserId(const qint32 &user_id) {
    m_user_id = user_id;
    m_user_id_isSet = true;
}

bool OAITags_inner::is_user_id_Set() const{
    return m_user_id_isSet;
}

bool OAITags_inner::is_user_id_Valid() const{
    return m_user_id_isValid;
}

bool OAITags_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_synonyms_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_moderator_only_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_required_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_activity_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_synonyms.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITags_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
