/**
 * StackExchange
 * Stack Exchange is a network of 130+ Q&A communities including Stack Overflow. 
 *
 * The version of the OpenAPI document: 2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIReputation_history_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIReputation_history_inner::OAIReputation_history_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIReputation_history_inner::OAIReputation_history_inner() {
    this->initializeModel();
}

OAIReputation_history_inner::~OAIReputation_history_inner() {}

void OAIReputation_history_inner::initializeModel() {

    m_creation_date_isSet = false;
    m_creation_date_isValid = false;

    m_post_id_isSet = false;
    m_post_id_isValid = false;

    m_reputation_change_isSet = false;
    m_reputation_change_isValid = false;

    m_reputation_history_type_isSet = false;
    m_reputation_history_type_isValid = false;

    m_user_id_isSet = false;
    m_user_id_isValid = false;
}

void OAIReputation_history_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIReputation_history_inner::fromJsonObject(QJsonObject json) {

    m_creation_date_isValid = ::OpenAPI::fromJsonValue(m_creation_date, json[QString("creation_date")]);
    m_creation_date_isSet = !json[QString("creation_date")].isNull() && m_creation_date_isValid;

    m_post_id_isValid = ::OpenAPI::fromJsonValue(m_post_id, json[QString("post_id")]);
    m_post_id_isSet = !json[QString("post_id")].isNull() && m_post_id_isValid;

    m_reputation_change_isValid = ::OpenAPI::fromJsonValue(m_reputation_change, json[QString("reputation_change")]);
    m_reputation_change_isSet = !json[QString("reputation_change")].isNull() && m_reputation_change_isValid;

    m_reputation_history_type_isValid = ::OpenAPI::fromJsonValue(m_reputation_history_type, json[QString("reputation_history_type")]);
    m_reputation_history_type_isSet = !json[QString("reputation_history_type")].isNull() && m_reputation_history_type_isValid;

    m_user_id_isValid = ::OpenAPI::fromJsonValue(m_user_id, json[QString("user_id")]);
    m_user_id_isSet = !json[QString("user_id")].isNull() && m_user_id_isValid;
}

QString OAIReputation_history_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIReputation_history_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_creation_date_isSet) {
        obj.insert(QString("creation_date"), ::OpenAPI::toJsonValue(m_creation_date));
    }
    if (m_post_id_isSet) {
        obj.insert(QString("post_id"), ::OpenAPI::toJsonValue(m_post_id));
    }
    if (m_reputation_change_isSet) {
        obj.insert(QString("reputation_change"), ::OpenAPI::toJsonValue(m_reputation_change));
    }
    if (m_reputation_history_type_isSet) {
        obj.insert(QString("reputation_history_type"), ::OpenAPI::toJsonValue(m_reputation_history_type));
    }
    if (m_user_id_isSet) {
        obj.insert(QString("user_id"), ::OpenAPI::toJsonValue(m_user_id));
    }
    return obj;
}

qint32 OAIReputation_history_inner::getCreationDate() const {
    return m_creation_date;
}
void OAIReputation_history_inner::setCreationDate(const qint32 &creation_date) {
    m_creation_date = creation_date;
    m_creation_date_isSet = true;
}

bool OAIReputation_history_inner::is_creation_date_Set() const{
    return m_creation_date_isSet;
}

bool OAIReputation_history_inner::is_creation_date_Valid() const{
    return m_creation_date_isValid;
}

qint32 OAIReputation_history_inner::getPostId() const {
    return m_post_id;
}
void OAIReputation_history_inner::setPostId(const qint32 &post_id) {
    m_post_id = post_id;
    m_post_id_isSet = true;
}

bool OAIReputation_history_inner::is_post_id_Set() const{
    return m_post_id_isSet;
}

bool OAIReputation_history_inner::is_post_id_Valid() const{
    return m_post_id_isValid;
}

qint32 OAIReputation_history_inner::getReputationChange() const {
    return m_reputation_change;
}
void OAIReputation_history_inner::setReputationChange(const qint32 &reputation_change) {
    m_reputation_change = reputation_change;
    m_reputation_change_isSet = true;
}

bool OAIReputation_history_inner::is_reputation_change_Set() const{
    return m_reputation_change_isSet;
}

bool OAIReputation_history_inner::is_reputation_change_Valid() const{
    return m_reputation_change_isValid;
}

QString OAIReputation_history_inner::getReputationHistoryType() const {
    return m_reputation_history_type;
}
void OAIReputation_history_inner::setReputationHistoryType(const QString &reputation_history_type) {
    m_reputation_history_type = reputation_history_type;
    m_reputation_history_type_isSet = true;
}

bool OAIReputation_history_inner::is_reputation_history_type_Set() const{
    return m_reputation_history_type_isSet;
}

bool OAIReputation_history_inner::is_reputation_history_type_Valid() const{
    return m_reputation_history_type_isValid;
}

qint32 OAIReputation_history_inner::getUserId() const {
    return m_user_id;
}
void OAIReputation_history_inner::setUserId(const qint32 &user_id) {
    m_user_id = user_id;
    m_user_id_isSet = true;
}

bool OAIReputation_history_inner::is_user_id_Set() const{
    return m_user_id_isSet;
}

bool OAIReputation_history_inner::is_user_id_Valid() const{
    return m_user_id_isValid;
}

bool OAIReputation_history_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_creation_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_post_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reputation_change_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reputation_history_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIReputation_history_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
