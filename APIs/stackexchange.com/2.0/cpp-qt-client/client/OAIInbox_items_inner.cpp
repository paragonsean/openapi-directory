/**
 * StackExchange
 * Stack Exchange is a network of 130+ Q&A communities including Stack Overflow. 
 *
 * The version of the OpenAPI document: 2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInbox_items_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInbox_items_inner::OAIInbox_items_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInbox_items_inner::OAIInbox_items_inner() {
    this->initializeModel();
}

OAIInbox_items_inner::~OAIInbox_items_inner() {}

void OAIInbox_items_inner::initializeModel() {

    m_answer_id_isSet = false;
    m_answer_id_isValid = false;

    m_body_isSet = false;
    m_body_isValid = false;

    m_comment_id_isSet = false;
    m_comment_id_isValid = false;

    m_creation_date_isSet = false;
    m_creation_date_isValid = false;

    m_is_unread_isSet = false;
    m_is_unread_isValid = false;

    m_item_type_isSet = false;
    m_item_type_isValid = false;

    m_link_isSet = false;
    m_link_isValid = false;

    m_question_id_isSet = false;
    m_question_id_isValid = false;

    m_site_isSet = false;
    m_site_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;
}

void OAIInbox_items_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInbox_items_inner::fromJsonObject(QJsonObject json) {

    m_answer_id_isValid = ::OpenAPI::fromJsonValue(m_answer_id, json[QString("answer_id")]);
    m_answer_id_isSet = !json[QString("answer_id")].isNull() && m_answer_id_isValid;

    m_body_isValid = ::OpenAPI::fromJsonValue(m_body, json[QString("body")]);
    m_body_isSet = !json[QString("body")].isNull() && m_body_isValid;

    m_comment_id_isValid = ::OpenAPI::fromJsonValue(m_comment_id, json[QString("comment_id")]);
    m_comment_id_isSet = !json[QString("comment_id")].isNull() && m_comment_id_isValid;

    m_creation_date_isValid = ::OpenAPI::fromJsonValue(m_creation_date, json[QString("creation_date")]);
    m_creation_date_isSet = !json[QString("creation_date")].isNull() && m_creation_date_isValid;

    m_is_unread_isValid = ::OpenAPI::fromJsonValue(m_is_unread, json[QString("is_unread")]);
    m_is_unread_isSet = !json[QString("is_unread")].isNull() && m_is_unread_isValid;

    m_item_type_isValid = ::OpenAPI::fromJsonValue(m_item_type, json[QString("item_type")]);
    m_item_type_isSet = !json[QString("item_type")].isNull() && m_item_type_isValid;

    m_link_isValid = ::OpenAPI::fromJsonValue(m_link, json[QString("link")]);
    m_link_isSet = !json[QString("link")].isNull() && m_link_isValid;

    m_question_id_isValid = ::OpenAPI::fromJsonValue(m_question_id, json[QString("question_id")]);
    m_question_id_isSet = !json[QString("question_id")].isNull() && m_question_id_isValid;

    m_site_isValid = ::OpenAPI::fromJsonValue(m_site, json[QString("site")]);
    m_site_isSet = !json[QString("site")].isNull() && m_site_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;
}

QString OAIInbox_items_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInbox_items_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_answer_id_isSet) {
        obj.insert(QString("answer_id"), ::OpenAPI::toJsonValue(m_answer_id));
    }
    if (m_body_isSet) {
        obj.insert(QString("body"), ::OpenAPI::toJsonValue(m_body));
    }
    if (m_comment_id_isSet) {
        obj.insert(QString("comment_id"), ::OpenAPI::toJsonValue(m_comment_id));
    }
    if (m_creation_date_isSet) {
        obj.insert(QString("creation_date"), ::OpenAPI::toJsonValue(m_creation_date));
    }
    if (m_is_unread_isSet) {
        obj.insert(QString("is_unread"), ::OpenAPI::toJsonValue(m_is_unread));
    }
    if (m_item_type_isSet) {
        obj.insert(QString("item_type"), ::OpenAPI::toJsonValue(m_item_type));
    }
    if (m_link_isSet) {
        obj.insert(QString("link"), ::OpenAPI::toJsonValue(m_link));
    }
    if (m_question_id_isSet) {
        obj.insert(QString("question_id"), ::OpenAPI::toJsonValue(m_question_id));
    }
    if (m_site.isSet()) {
        obj.insert(QString("site"), ::OpenAPI::toJsonValue(m_site));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    return obj;
}

qint32 OAIInbox_items_inner::getAnswerId() const {
    return m_answer_id;
}
void OAIInbox_items_inner::setAnswerId(const qint32 &answer_id) {
    m_answer_id = answer_id;
    m_answer_id_isSet = true;
}

bool OAIInbox_items_inner::is_answer_id_Set() const{
    return m_answer_id_isSet;
}

bool OAIInbox_items_inner::is_answer_id_Valid() const{
    return m_answer_id_isValid;
}

QString OAIInbox_items_inner::getBody() const {
    return m_body;
}
void OAIInbox_items_inner::setBody(const QString &body) {
    m_body = body;
    m_body_isSet = true;
}

bool OAIInbox_items_inner::is_body_Set() const{
    return m_body_isSet;
}

bool OAIInbox_items_inner::is_body_Valid() const{
    return m_body_isValid;
}

qint32 OAIInbox_items_inner::getCommentId() const {
    return m_comment_id;
}
void OAIInbox_items_inner::setCommentId(const qint32 &comment_id) {
    m_comment_id = comment_id;
    m_comment_id_isSet = true;
}

bool OAIInbox_items_inner::is_comment_id_Set() const{
    return m_comment_id_isSet;
}

bool OAIInbox_items_inner::is_comment_id_Valid() const{
    return m_comment_id_isValid;
}

qint32 OAIInbox_items_inner::getCreationDate() const {
    return m_creation_date;
}
void OAIInbox_items_inner::setCreationDate(const qint32 &creation_date) {
    m_creation_date = creation_date;
    m_creation_date_isSet = true;
}

bool OAIInbox_items_inner::is_creation_date_Set() const{
    return m_creation_date_isSet;
}

bool OAIInbox_items_inner::is_creation_date_Valid() const{
    return m_creation_date_isValid;
}

bool OAIInbox_items_inner::isIsUnread() const {
    return m_is_unread;
}
void OAIInbox_items_inner::setIsUnread(const bool &is_unread) {
    m_is_unread = is_unread;
    m_is_unread_isSet = true;
}

bool OAIInbox_items_inner::is_is_unread_Set() const{
    return m_is_unread_isSet;
}

bool OAIInbox_items_inner::is_is_unread_Valid() const{
    return m_is_unread_isValid;
}

QString OAIInbox_items_inner::getItemType() const {
    return m_item_type;
}
void OAIInbox_items_inner::setItemType(const QString &item_type) {
    m_item_type = item_type;
    m_item_type_isSet = true;
}

bool OAIInbox_items_inner::is_item_type_Set() const{
    return m_item_type_isSet;
}

bool OAIInbox_items_inner::is_item_type_Valid() const{
    return m_item_type_isValid;
}

QString OAIInbox_items_inner::getLink() const {
    return m_link;
}
void OAIInbox_items_inner::setLink(const QString &link) {
    m_link = link;
    m_link_isSet = true;
}

bool OAIInbox_items_inner::is_link_Set() const{
    return m_link_isSet;
}

bool OAIInbox_items_inner::is_link_Valid() const{
    return m_link_isValid;
}

qint32 OAIInbox_items_inner::getQuestionId() const {
    return m_question_id;
}
void OAIInbox_items_inner::setQuestionId(const qint32 &question_id) {
    m_question_id = question_id;
    m_question_id_isSet = true;
}

bool OAIInbox_items_inner::is_question_id_Set() const{
    return m_question_id_isSet;
}

bool OAIInbox_items_inner::is_question_id_Valid() const{
    return m_question_id_isValid;
}

OAIInbox_items_inner_site OAIInbox_items_inner::getSite() const {
    return m_site;
}
void OAIInbox_items_inner::setSite(const OAIInbox_items_inner_site &site) {
    m_site = site;
    m_site_isSet = true;
}

bool OAIInbox_items_inner::is_site_Set() const{
    return m_site_isSet;
}

bool OAIInbox_items_inner::is_site_Valid() const{
    return m_site_isValid;
}

QString OAIInbox_items_inner::getTitle() const {
    return m_title;
}
void OAIInbox_items_inner::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIInbox_items_inner::is_title_Set() const{
    return m_title_isSet;
}

bool OAIInbox_items_inner::is_title_Valid() const{
    return m_title_isValid;
}

bool OAIInbox_items_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_answer_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_body_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_comment_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_unread_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_item_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_link_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_question_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_site.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInbox_items_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
