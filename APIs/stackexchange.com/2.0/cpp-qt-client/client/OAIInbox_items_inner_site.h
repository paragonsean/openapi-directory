/**
 * StackExchange
 * Stack Exchange is a network of 130+ Q&A communities including Stack Overflow. 
 *
 * The version of the OpenAPI document: 2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIInbox_items_inner_site.h
 *
 * 
 */

#ifndef OAIInbox_items_inner_site_H
#define OAIInbox_items_inner_site_H

#include <QJsonObject>

#include "OAIInbox_items_inner_site_styling.h"
#include <QJsonValue>
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIInbox_items_inner_site_styling;

class OAIInbox_items_inner_site : public OAIObject {
public:
    OAIInbox_items_inner_site();
    OAIInbox_items_inner_site(QString json);
    ~OAIInbox_items_inner_site() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<QJsonValue> getAliases() const;
    void setAliases(const QList<QJsonValue> &aliases);
    bool is_aliases_Set() const;
    bool is_aliases_Valid() const;

    QString getApiSiteParameter() const;
    void setApiSiteParameter(const QString &api_site_parameter);
    bool is_api_site_parameter_Set() const;
    bool is_api_site_parameter_Valid() const;

    QString getAudience() const;
    void setAudience(const QString &audience);
    bool is_audience_Set() const;
    bool is_audience_Valid() const;

    qint32 getClosedBetaDate() const;
    void setClosedBetaDate(const qint32 &closed_beta_date);
    bool is_closed_beta_date_Set() const;
    bool is_closed_beta_date_Valid() const;

    QString getFaviconUrl() const;
    void setFaviconUrl(const QString &favicon_url);
    bool is_favicon_url_Set() const;
    bool is_favicon_url_Valid() const;

    QString getHighResolutionIconUrl() const;
    void setHighResolutionIconUrl(const QString &high_resolution_icon_url);
    bool is_high_resolution_icon_url_Set() const;
    bool is_high_resolution_icon_url_Valid() const;

    QString getIconUrl() const;
    void setIconUrl(const QString &icon_url);
    bool is_icon_url_Set() const;
    bool is_icon_url_Valid() const;

    qint32 getLaunchDate() const;
    void setLaunchDate(const qint32 &launch_date);
    bool is_launch_date_Set() const;
    bool is_launch_date_Valid() const;

    QString getLogoUrl() const;
    void setLogoUrl(const QString &logo_url);
    bool is_logo_url_Set() const;
    bool is_logo_url_Valid() const;

    QList<QJsonValue> getMarkdownExtensions() const;
    void setMarkdownExtensions(const QList<QJsonValue> &markdown_extensions);
    bool is_markdown_extensions_Set() const;
    bool is_markdown_extensions_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    qint32 getOpenBetaDate() const;
    void setOpenBetaDate(const qint32 &open_beta_date);
    bool is_open_beta_date_Set() const;
    bool is_open_beta_date_Valid() const;

    QList<QJsonValue> getRelatedSites() const;
    void setRelatedSites(const QList<QJsonValue> &related_sites);
    bool is_related_sites_Set() const;
    bool is_related_sites_Valid() const;

    QString getSiteState() const;
    void setSiteState(const QString &site_state);
    bool is_site_state_Set() const;
    bool is_site_state_Valid() const;

    QString getSiteType() const;
    void setSiteType(const QString &site_type);
    bool is_site_type_Set() const;
    bool is_site_type_Valid() const;

    QString getSiteUrl() const;
    void setSiteUrl(const QString &site_url);
    bool is_site_url_Set() const;
    bool is_site_url_Valid() const;

    OAIInbox_items_inner_site_styling getStyling() const;
    void setStyling(const OAIInbox_items_inner_site_styling &styling);
    bool is_styling_Set() const;
    bool is_styling_Valid() const;

    QString getTwitterAccount() const;
    void setTwitterAccount(const QString &twitter_account);
    bool is_twitter_account_Set() const;
    bool is_twitter_account_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<QJsonValue> m_aliases;
    bool m_aliases_isSet;
    bool m_aliases_isValid;

    QString m_api_site_parameter;
    bool m_api_site_parameter_isSet;
    bool m_api_site_parameter_isValid;

    QString m_audience;
    bool m_audience_isSet;
    bool m_audience_isValid;

    qint32 m_closed_beta_date;
    bool m_closed_beta_date_isSet;
    bool m_closed_beta_date_isValid;

    QString m_favicon_url;
    bool m_favicon_url_isSet;
    bool m_favicon_url_isValid;

    QString m_high_resolution_icon_url;
    bool m_high_resolution_icon_url_isSet;
    bool m_high_resolution_icon_url_isValid;

    QString m_icon_url;
    bool m_icon_url_isSet;
    bool m_icon_url_isValid;

    qint32 m_launch_date;
    bool m_launch_date_isSet;
    bool m_launch_date_isValid;

    QString m_logo_url;
    bool m_logo_url_isSet;
    bool m_logo_url_isValid;

    QList<QJsonValue> m_markdown_extensions;
    bool m_markdown_extensions_isSet;
    bool m_markdown_extensions_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    qint32 m_open_beta_date;
    bool m_open_beta_date_isSet;
    bool m_open_beta_date_isValid;

    QList<QJsonValue> m_related_sites;
    bool m_related_sites_isSet;
    bool m_related_sites_isValid;

    QString m_site_state;
    bool m_site_state_isSet;
    bool m_site_state_isValid;

    QString m_site_type;
    bool m_site_type_isSet;
    bool m_site_type_isValid;

    QString m_site_url;
    bool m_site_url_isSet;
    bool m_site_url_isValid;

    OAIInbox_items_inner_site_styling m_styling;
    bool m_styling_isSet;
    bool m_styling_isValid;

    QString m_twitter_account;
    bool m_twitter_account_isSet;
    bool m_twitter_account_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIInbox_items_inner_site)

#endif // OAIInbox_items_inner_site_H
