/**
 * StackExchange
 * Stack Exchange is a network of 130+ Q&A communities including Stack Overflow. 
 *
 * The version of the OpenAPI document: 2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBadges_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBadges_inner::OAIBadges_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBadges_inner::OAIBadges_inner() {
    this->initializeModel();
}

OAIBadges_inner::~OAIBadges_inner() {}

void OAIBadges_inner::initializeModel() {

    m_award_count_isSet = false;
    m_award_count_isValid = false;

    m_badge_id_isSet = false;
    m_badge_id_isValid = false;

    m_badge_type_isSet = false;
    m_badge_type_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_link_isSet = false;
    m_link_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_rank_isSet = false;
    m_rank_isValid = false;

    m_user_isSet = false;
    m_user_isValid = false;
}

void OAIBadges_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBadges_inner::fromJsonObject(QJsonObject json) {

    m_award_count_isValid = ::OpenAPI::fromJsonValue(m_award_count, json[QString("award_count")]);
    m_award_count_isSet = !json[QString("award_count")].isNull() && m_award_count_isValid;

    m_badge_id_isValid = ::OpenAPI::fromJsonValue(m_badge_id, json[QString("badge_id")]);
    m_badge_id_isSet = !json[QString("badge_id")].isNull() && m_badge_id_isValid;

    m_badge_type_isValid = ::OpenAPI::fromJsonValue(m_badge_type, json[QString("badge_type")]);
    m_badge_type_isSet = !json[QString("badge_type")].isNull() && m_badge_type_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_link_isValid = ::OpenAPI::fromJsonValue(m_link, json[QString("link")]);
    m_link_isSet = !json[QString("link")].isNull() && m_link_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_rank_isValid = ::OpenAPI::fromJsonValue(m_rank, json[QString("rank")]);
    m_rank_isSet = !json[QString("rank")].isNull() && m_rank_isValid;

    m_user_isValid = ::OpenAPI::fromJsonValue(m_user, json[QString("user")]);
    m_user_isSet = !json[QString("user")].isNull() && m_user_isValid;
}

QString OAIBadges_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBadges_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_award_count_isSet) {
        obj.insert(QString("award_count"), ::OpenAPI::toJsonValue(m_award_count));
    }
    if (m_badge_id_isSet) {
        obj.insert(QString("badge_id"), ::OpenAPI::toJsonValue(m_badge_id));
    }
    if (m_badge_type_isSet) {
        obj.insert(QString("badge_type"), ::OpenAPI::toJsonValue(m_badge_type));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_link_isSet) {
        obj.insert(QString("link"), ::OpenAPI::toJsonValue(m_link));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_rank_isSet) {
        obj.insert(QString("rank"), ::OpenAPI::toJsonValue(m_rank));
    }
    if (m_user.isSet()) {
        obj.insert(QString("user"), ::OpenAPI::toJsonValue(m_user));
    }
    return obj;
}

qint32 OAIBadges_inner::getAwardCount() const {
    return m_award_count;
}
void OAIBadges_inner::setAwardCount(const qint32 &award_count) {
    m_award_count = award_count;
    m_award_count_isSet = true;
}

bool OAIBadges_inner::is_award_count_Set() const{
    return m_award_count_isSet;
}

bool OAIBadges_inner::is_award_count_Valid() const{
    return m_award_count_isValid;
}

qint32 OAIBadges_inner::getBadgeId() const {
    return m_badge_id;
}
void OAIBadges_inner::setBadgeId(const qint32 &badge_id) {
    m_badge_id = badge_id;
    m_badge_id_isSet = true;
}

bool OAIBadges_inner::is_badge_id_Set() const{
    return m_badge_id_isSet;
}

bool OAIBadges_inner::is_badge_id_Valid() const{
    return m_badge_id_isValid;
}

QString OAIBadges_inner::getBadgeType() const {
    return m_badge_type;
}
void OAIBadges_inner::setBadgeType(const QString &badge_type) {
    m_badge_type = badge_type;
    m_badge_type_isSet = true;
}

bool OAIBadges_inner::is_badge_type_Set() const{
    return m_badge_type_isSet;
}

bool OAIBadges_inner::is_badge_type_Valid() const{
    return m_badge_type_isValid;
}

QString OAIBadges_inner::getDescription() const {
    return m_description;
}
void OAIBadges_inner::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIBadges_inner::is_description_Set() const{
    return m_description_isSet;
}

bool OAIBadges_inner::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIBadges_inner::getLink() const {
    return m_link;
}
void OAIBadges_inner::setLink(const QString &link) {
    m_link = link;
    m_link_isSet = true;
}

bool OAIBadges_inner::is_link_Set() const{
    return m_link_isSet;
}

bool OAIBadges_inner::is_link_Valid() const{
    return m_link_isValid;
}

QString OAIBadges_inner::getName() const {
    return m_name;
}
void OAIBadges_inner::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIBadges_inner::is_name_Set() const{
    return m_name_isSet;
}

bool OAIBadges_inner::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIBadges_inner::getRank() const {
    return m_rank;
}
void OAIBadges_inner::setRank(const QString &rank) {
    m_rank = rank;
    m_rank_isSet = true;
}

bool OAIBadges_inner::is_rank_Set() const{
    return m_rank_isSet;
}

bool OAIBadges_inner::is_rank_Valid() const{
    return m_rank_isValid;
}

OAIAnswers_inner_last_editor OAIBadges_inner::getUser() const {
    return m_user;
}
void OAIBadges_inner::setUser(const OAIAnswers_inner_last_editor &user) {
    m_user = user;
    m_user_isSet = true;
}

bool OAIBadges_inner::is_user_Set() const{
    return m_user_isSet;
}

bool OAIBadges_inner::is_user_Valid() const{
    return m_user_isValid;
}

bool OAIBadges_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_award_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_badge_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_badge_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_link_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rank_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBadges_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
