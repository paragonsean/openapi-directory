/**
 * StackExchange
 * Stack Exchange is a network of 130+ Q&A communities including Stack Overflow. 
 *
 * The version of the OpenAPI document: 2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAnswers_inner_last_editor_badge_counts.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAnswers_inner_last_editor_badge_counts::OAIAnswers_inner_last_editor_badge_counts(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAnswers_inner_last_editor_badge_counts::OAIAnswers_inner_last_editor_badge_counts() {
    this->initializeModel();
}

OAIAnswers_inner_last_editor_badge_counts::~OAIAnswers_inner_last_editor_badge_counts() {}

void OAIAnswers_inner_last_editor_badge_counts::initializeModel() {

    m_bronze_isSet = false;
    m_bronze_isValid = false;

    m_gold_isSet = false;
    m_gold_isValid = false;

    m_silver_isSet = false;
    m_silver_isValid = false;
}

void OAIAnswers_inner_last_editor_badge_counts::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAnswers_inner_last_editor_badge_counts::fromJsonObject(QJsonObject json) {

    m_bronze_isValid = ::OpenAPI::fromJsonValue(m_bronze, json[QString("bronze")]);
    m_bronze_isSet = !json[QString("bronze")].isNull() && m_bronze_isValid;

    m_gold_isValid = ::OpenAPI::fromJsonValue(m_gold, json[QString("gold")]);
    m_gold_isSet = !json[QString("gold")].isNull() && m_gold_isValid;

    m_silver_isValid = ::OpenAPI::fromJsonValue(m_silver, json[QString("silver")]);
    m_silver_isSet = !json[QString("silver")].isNull() && m_silver_isValid;
}

QString OAIAnswers_inner_last_editor_badge_counts::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAnswers_inner_last_editor_badge_counts::asJsonObject() const {
    QJsonObject obj;
    if (m_bronze_isSet) {
        obj.insert(QString("bronze"), ::OpenAPI::toJsonValue(m_bronze));
    }
    if (m_gold_isSet) {
        obj.insert(QString("gold"), ::OpenAPI::toJsonValue(m_gold));
    }
    if (m_silver_isSet) {
        obj.insert(QString("silver"), ::OpenAPI::toJsonValue(m_silver));
    }
    return obj;
}

qint32 OAIAnswers_inner_last_editor_badge_counts::getBronze() const {
    return m_bronze;
}
void OAIAnswers_inner_last_editor_badge_counts::setBronze(const qint32 &bronze) {
    m_bronze = bronze;
    m_bronze_isSet = true;
}

bool OAIAnswers_inner_last_editor_badge_counts::is_bronze_Set() const{
    return m_bronze_isSet;
}

bool OAIAnswers_inner_last_editor_badge_counts::is_bronze_Valid() const{
    return m_bronze_isValid;
}

qint32 OAIAnswers_inner_last_editor_badge_counts::getGold() const {
    return m_gold;
}
void OAIAnswers_inner_last_editor_badge_counts::setGold(const qint32 &gold) {
    m_gold = gold;
    m_gold_isSet = true;
}

bool OAIAnswers_inner_last_editor_badge_counts::is_gold_Set() const{
    return m_gold_isSet;
}

bool OAIAnswers_inner_last_editor_badge_counts::is_gold_Valid() const{
    return m_gold_isValid;
}

qint32 OAIAnswers_inner_last_editor_badge_counts::getSilver() const {
    return m_silver;
}
void OAIAnswers_inner_last_editor_badge_counts::setSilver(const qint32 &silver) {
    m_silver = silver;
    m_silver_isSet = true;
}

bool OAIAnswers_inner_last_editor_badge_counts::is_silver_Set() const{
    return m_silver_isSet;
}

bool OAIAnswers_inner_last_editor_badge_counts::is_silver_Valid() const{
    return m_silver_isValid;
}

bool OAIAnswers_inner_last_editor_badge_counts::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bronze_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_gold_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_silver_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAnswers_inner_last_editor_badge_counts::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
