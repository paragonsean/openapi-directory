/**
 * StackExchange
 * Stack Exchange is a network of 130+ Q&A communities including Stack Overflow. 
 *
 * The version of the OpenAPI document: 2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAccess_tokens_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAccess_tokens_inner::OAIAccess_tokens_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAccess_tokens_inner::OAIAccess_tokens_inner() {
    this->initializeModel();
}

OAIAccess_tokens_inner::~OAIAccess_tokens_inner() {}

void OAIAccess_tokens_inner::initializeModel() {

    m_access_token_isSet = false;
    m_access_token_isValid = false;

    m_account_id_isSet = false;
    m_account_id_isValid = false;

    m_expires_on_date_isSet = false;
    m_expires_on_date_isValid = false;

    m_scope_isSet = false;
    m_scope_isValid = false;
}

void OAIAccess_tokens_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAccess_tokens_inner::fromJsonObject(QJsonObject json) {

    m_access_token_isValid = ::OpenAPI::fromJsonValue(m_access_token, json[QString("access_token")]);
    m_access_token_isSet = !json[QString("access_token")].isNull() && m_access_token_isValid;

    m_account_id_isValid = ::OpenAPI::fromJsonValue(m_account_id, json[QString("account_id")]);
    m_account_id_isSet = !json[QString("account_id")].isNull() && m_account_id_isValid;

    m_expires_on_date_isValid = ::OpenAPI::fromJsonValue(m_expires_on_date, json[QString("expires_on_date")]);
    m_expires_on_date_isSet = !json[QString("expires_on_date")].isNull() && m_expires_on_date_isValid;

    m_scope_isValid = ::OpenAPI::fromJsonValue(m_scope, json[QString("scope")]);
    m_scope_isSet = !json[QString("scope")].isNull() && m_scope_isValid;
}

QString OAIAccess_tokens_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAccess_tokens_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_access_token_isSet) {
        obj.insert(QString("access_token"), ::OpenAPI::toJsonValue(m_access_token));
    }
    if (m_account_id_isSet) {
        obj.insert(QString("account_id"), ::OpenAPI::toJsonValue(m_account_id));
    }
    if (m_expires_on_date_isSet) {
        obj.insert(QString("expires_on_date"), ::OpenAPI::toJsonValue(m_expires_on_date));
    }
    if (m_scope.size() > 0) {
        obj.insert(QString("scope"), ::OpenAPI::toJsonValue(m_scope));
    }
    return obj;
}

QString OAIAccess_tokens_inner::getAccessToken() const {
    return m_access_token;
}
void OAIAccess_tokens_inner::setAccessToken(const QString &access_token) {
    m_access_token = access_token;
    m_access_token_isSet = true;
}

bool OAIAccess_tokens_inner::is_access_token_Set() const{
    return m_access_token_isSet;
}

bool OAIAccess_tokens_inner::is_access_token_Valid() const{
    return m_access_token_isValid;
}

qint32 OAIAccess_tokens_inner::getAccountId() const {
    return m_account_id;
}
void OAIAccess_tokens_inner::setAccountId(const qint32 &account_id) {
    m_account_id = account_id;
    m_account_id_isSet = true;
}

bool OAIAccess_tokens_inner::is_account_id_Set() const{
    return m_account_id_isSet;
}

bool OAIAccess_tokens_inner::is_account_id_Valid() const{
    return m_account_id_isValid;
}

qint32 OAIAccess_tokens_inner::getExpiresOnDate() const {
    return m_expires_on_date;
}
void OAIAccess_tokens_inner::setExpiresOnDate(const qint32 &expires_on_date) {
    m_expires_on_date = expires_on_date;
    m_expires_on_date_isSet = true;
}

bool OAIAccess_tokens_inner::is_expires_on_date_Set() const{
    return m_expires_on_date_isSet;
}

bool OAIAccess_tokens_inner::is_expires_on_date_Valid() const{
    return m_expires_on_date_isValid;
}

QList<QJsonValue> OAIAccess_tokens_inner::getScope() const {
    return m_scope;
}
void OAIAccess_tokens_inner::setScope(const QList<QJsonValue> &scope) {
    m_scope = scope;
    m_scope_isSet = true;
}

bool OAIAccess_tokens_inner::is_scope_Set() const{
    return m_scope_isSet;
}

bool OAIAccess_tokens_inner::is_scope_Valid() const{
    return m_scope_isValid;
}

bool OAIAccess_tokens_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_access_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expires_on_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scope.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAccess_tokens_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
