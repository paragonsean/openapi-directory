/**
 * StackExchange
 * Stack Exchange is a network of 130+ Q&A communities including Stack Overflow. 
 *
 * The version of the OpenAPI document: 2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIQuestion_timeline_events_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIQuestion_timeline_events_inner::OAIQuestion_timeline_events_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIQuestion_timeline_events_inner::OAIQuestion_timeline_events_inner() {
    this->initializeModel();
}

OAIQuestion_timeline_events_inner::~OAIQuestion_timeline_events_inner() {}

void OAIQuestion_timeline_events_inner::initializeModel() {

    m_comment_id_isSet = false;
    m_comment_id_isValid = false;

    m_creation_date_isSet = false;
    m_creation_date_isValid = false;

    m_down_vote_count_isSet = false;
    m_down_vote_count_isValid = false;

    m_owner_isSet = false;
    m_owner_isValid = false;

    m_post_id_isSet = false;
    m_post_id_isValid = false;

    m_question_id_isSet = false;
    m_question_id_isValid = false;

    m_revision_guid_isSet = false;
    m_revision_guid_isValid = false;

    m_timeline_type_isSet = false;
    m_timeline_type_isValid = false;

    m_up_vote_count_isSet = false;
    m_up_vote_count_isValid = false;

    m_user_isSet = false;
    m_user_isValid = false;
}

void OAIQuestion_timeline_events_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIQuestion_timeline_events_inner::fromJsonObject(QJsonObject json) {

    m_comment_id_isValid = ::OpenAPI::fromJsonValue(m_comment_id, json[QString("comment_id")]);
    m_comment_id_isSet = !json[QString("comment_id")].isNull() && m_comment_id_isValid;

    m_creation_date_isValid = ::OpenAPI::fromJsonValue(m_creation_date, json[QString("creation_date")]);
    m_creation_date_isSet = !json[QString("creation_date")].isNull() && m_creation_date_isValid;

    m_down_vote_count_isValid = ::OpenAPI::fromJsonValue(m_down_vote_count, json[QString("down_vote_count")]);
    m_down_vote_count_isSet = !json[QString("down_vote_count")].isNull() && m_down_vote_count_isValid;

    m_owner_isValid = ::OpenAPI::fromJsonValue(m_owner, json[QString("owner")]);
    m_owner_isSet = !json[QString("owner")].isNull() && m_owner_isValid;

    m_post_id_isValid = ::OpenAPI::fromJsonValue(m_post_id, json[QString("post_id")]);
    m_post_id_isSet = !json[QString("post_id")].isNull() && m_post_id_isValid;

    m_question_id_isValid = ::OpenAPI::fromJsonValue(m_question_id, json[QString("question_id")]);
    m_question_id_isSet = !json[QString("question_id")].isNull() && m_question_id_isValid;

    m_revision_guid_isValid = ::OpenAPI::fromJsonValue(m_revision_guid, json[QString("revision_guid")]);
    m_revision_guid_isSet = !json[QString("revision_guid")].isNull() && m_revision_guid_isValid;

    m_timeline_type_isValid = ::OpenAPI::fromJsonValue(m_timeline_type, json[QString("timeline_type")]);
    m_timeline_type_isSet = !json[QString("timeline_type")].isNull() && m_timeline_type_isValid;

    m_up_vote_count_isValid = ::OpenAPI::fromJsonValue(m_up_vote_count, json[QString("up_vote_count")]);
    m_up_vote_count_isSet = !json[QString("up_vote_count")].isNull() && m_up_vote_count_isValid;

    m_user_isValid = ::OpenAPI::fromJsonValue(m_user, json[QString("user")]);
    m_user_isSet = !json[QString("user")].isNull() && m_user_isValid;
}

QString OAIQuestion_timeline_events_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIQuestion_timeline_events_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_comment_id_isSet) {
        obj.insert(QString("comment_id"), ::OpenAPI::toJsonValue(m_comment_id));
    }
    if (m_creation_date_isSet) {
        obj.insert(QString("creation_date"), ::OpenAPI::toJsonValue(m_creation_date));
    }
    if (m_down_vote_count_isSet) {
        obj.insert(QString("down_vote_count"), ::OpenAPI::toJsonValue(m_down_vote_count));
    }
    if (m_owner.isSet()) {
        obj.insert(QString("owner"), ::OpenAPI::toJsonValue(m_owner));
    }
    if (m_post_id_isSet) {
        obj.insert(QString("post_id"), ::OpenAPI::toJsonValue(m_post_id));
    }
    if (m_question_id_isSet) {
        obj.insert(QString("question_id"), ::OpenAPI::toJsonValue(m_question_id));
    }
    if (m_revision_guid_isSet) {
        obj.insert(QString("revision_guid"), ::OpenAPI::toJsonValue(m_revision_guid));
    }
    if (m_timeline_type_isSet) {
        obj.insert(QString("timeline_type"), ::OpenAPI::toJsonValue(m_timeline_type));
    }
    if (m_up_vote_count_isSet) {
        obj.insert(QString("up_vote_count"), ::OpenAPI::toJsonValue(m_up_vote_count));
    }
    if (m_user.isSet()) {
        obj.insert(QString("user"), ::OpenAPI::toJsonValue(m_user));
    }
    return obj;
}

qint32 OAIQuestion_timeline_events_inner::getCommentId() const {
    return m_comment_id;
}
void OAIQuestion_timeline_events_inner::setCommentId(const qint32 &comment_id) {
    m_comment_id = comment_id;
    m_comment_id_isSet = true;
}

bool OAIQuestion_timeline_events_inner::is_comment_id_Set() const{
    return m_comment_id_isSet;
}

bool OAIQuestion_timeline_events_inner::is_comment_id_Valid() const{
    return m_comment_id_isValid;
}

qint32 OAIQuestion_timeline_events_inner::getCreationDate() const {
    return m_creation_date;
}
void OAIQuestion_timeline_events_inner::setCreationDate(const qint32 &creation_date) {
    m_creation_date = creation_date;
    m_creation_date_isSet = true;
}

bool OAIQuestion_timeline_events_inner::is_creation_date_Set() const{
    return m_creation_date_isSet;
}

bool OAIQuestion_timeline_events_inner::is_creation_date_Valid() const{
    return m_creation_date_isValid;
}

qint32 OAIQuestion_timeline_events_inner::getDownVoteCount() const {
    return m_down_vote_count;
}
void OAIQuestion_timeline_events_inner::setDownVoteCount(const qint32 &down_vote_count) {
    m_down_vote_count = down_vote_count;
    m_down_vote_count_isSet = true;
}

bool OAIQuestion_timeline_events_inner::is_down_vote_count_Set() const{
    return m_down_vote_count_isSet;
}

bool OAIQuestion_timeline_events_inner::is_down_vote_count_Valid() const{
    return m_down_vote_count_isValid;
}

OAIAnswers_inner_last_editor OAIQuestion_timeline_events_inner::getOwner() const {
    return m_owner;
}
void OAIQuestion_timeline_events_inner::setOwner(const OAIAnswers_inner_last_editor &owner) {
    m_owner = owner;
    m_owner_isSet = true;
}

bool OAIQuestion_timeline_events_inner::is_owner_Set() const{
    return m_owner_isSet;
}

bool OAIQuestion_timeline_events_inner::is_owner_Valid() const{
    return m_owner_isValid;
}

qint32 OAIQuestion_timeline_events_inner::getPostId() const {
    return m_post_id;
}
void OAIQuestion_timeline_events_inner::setPostId(const qint32 &post_id) {
    m_post_id = post_id;
    m_post_id_isSet = true;
}

bool OAIQuestion_timeline_events_inner::is_post_id_Set() const{
    return m_post_id_isSet;
}

bool OAIQuestion_timeline_events_inner::is_post_id_Valid() const{
    return m_post_id_isValid;
}

qint32 OAIQuestion_timeline_events_inner::getQuestionId() const {
    return m_question_id;
}
void OAIQuestion_timeline_events_inner::setQuestionId(const qint32 &question_id) {
    m_question_id = question_id;
    m_question_id_isSet = true;
}

bool OAIQuestion_timeline_events_inner::is_question_id_Set() const{
    return m_question_id_isSet;
}

bool OAIQuestion_timeline_events_inner::is_question_id_Valid() const{
    return m_question_id_isValid;
}

QString OAIQuestion_timeline_events_inner::getRevisionGuid() const {
    return m_revision_guid;
}
void OAIQuestion_timeline_events_inner::setRevisionGuid(const QString &revision_guid) {
    m_revision_guid = revision_guid;
    m_revision_guid_isSet = true;
}

bool OAIQuestion_timeline_events_inner::is_revision_guid_Set() const{
    return m_revision_guid_isSet;
}

bool OAIQuestion_timeline_events_inner::is_revision_guid_Valid() const{
    return m_revision_guid_isValid;
}

QString OAIQuestion_timeline_events_inner::getTimelineType() const {
    return m_timeline_type;
}
void OAIQuestion_timeline_events_inner::setTimelineType(const QString &timeline_type) {
    m_timeline_type = timeline_type;
    m_timeline_type_isSet = true;
}

bool OAIQuestion_timeline_events_inner::is_timeline_type_Set() const{
    return m_timeline_type_isSet;
}

bool OAIQuestion_timeline_events_inner::is_timeline_type_Valid() const{
    return m_timeline_type_isValid;
}

qint32 OAIQuestion_timeline_events_inner::getUpVoteCount() const {
    return m_up_vote_count;
}
void OAIQuestion_timeline_events_inner::setUpVoteCount(const qint32 &up_vote_count) {
    m_up_vote_count = up_vote_count;
    m_up_vote_count_isSet = true;
}

bool OAIQuestion_timeline_events_inner::is_up_vote_count_Set() const{
    return m_up_vote_count_isSet;
}

bool OAIQuestion_timeline_events_inner::is_up_vote_count_Valid() const{
    return m_up_vote_count_isValid;
}

OAIAnswers_inner_last_editor OAIQuestion_timeline_events_inner::getUser() const {
    return m_user;
}
void OAIQuestion_timeline_events_inner::setUser(const OAIAnswers_inner_last_editor &user) {
    m_user = user;
    m_user_isSet = true;
}

bool OAIQuestion_timeline_events_inner::is_user_Set() const{
    return m_user_isSet;
}

bool OAIQuestion_timeline_events_inner::is_user_Valid() const{
    return m_user_isValid;
}

bool OAIQuestion_timeline_events_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_comment_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_down_vote_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_owner.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_post_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_question_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_revision_guid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timeline_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_up_vote_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIQuestion_timeline_events_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
