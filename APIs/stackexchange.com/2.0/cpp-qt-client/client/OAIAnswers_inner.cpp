/**
 * StackExchange
 * Stack Exchange is a network of 130+ Q&A communities including Stack Overflow. 
 *
 * The version of the OpenAPI document: 2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAnswers_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAnswers_inner::OAIAnswers_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAnswers_inner::OAIAnswers_inner() {
    this->initializeModel();
}

OAIAnswers_inner::~OAIAnswers_inner() {}

void OAIAnswers_inner::initializeModel() {

    m_accepted_isSet = false;
    m_accepted_isValid = false;

    m_answer_id_isSet = false;
    m_answer_id_isValid = false;

    m_awarded_bounty_amount_isSet = false;
    m_awarded_bounty_amount_isValid = false;

    m_awarded_bounty_users_isSet = false;
    m_awarded_bounty_users_isValid = false;

    m_body_isSet = false;
    m_body_isValid = false;

    m_body_markdown_isSet = false;
    m_body_markdown_isValid = false;

    m_can_flag_isSet = false;
    m_can_flag_isValid = false;

    m_comment_count_isSet = false;
    m_comment_count_isValid = false;

    m_comments_isSet = false;
    m_comments_isValid = false;

    m_community_owned_date_isSet = false;
    m_community_owned_date_isValid = false;

    m_creation_date_isSet = false;
    m_creation_date_isValid = false;

    m_down_vote_count_isSet = false;
    m_down_vote_count_isValid = false;

    m_downvoted_isSet = false;
    m_downvoted_isValid = false;

    m_is_accepted_isSet = false;
    m_is_accepted_isValid = false;

    m_last_activity_date_isSet = false;
    m_last_activity_date_isValid = false;

    m_last_edit_date_isSet = false;
    m_last_edit_date_isValid = false;

    m_last_editor_isSet = false;
    m_last_editor_isValid = false;

    m_link_isSet = false;
    m_link_isValid = false;

    m_locked_date_isSet = false;
    m_locked_date_isValid = false;

    m_owner_isSet = false;
    m_owner_isValid = false;

    m_question_id_isSet = false;
    m_question_id_isValid = false;

    m_score_isSet = false;
    m_score_isValid = false;

    m_share_link_isSet = false;
    m_share_link_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_up_vote_count_isSet = false;
    m_up_vote_count_isValid = false;

    m_upvoted_isSet = false;
    m_upvoted_isValid = false;
}

void OAIAnswers_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAnswers_inner::fromJsonObject(QJsonObject json) {

    m_accepted_isValid = ::OpenAPI::fromJsonValue(m_accepted, json[QString("accepted")]);
    m_accepted_isSet = !json[QString("accepted")].isNull() && m_accepted_isValid;

    m_answer_id_isValid = ::OpenAPI::fromJsonValue(m_answer_id, json[QString("answer_id")]);
    m_answer_id_isSet = !json[QString("answer_id")].isNull() && m_answer_id_isValid;

    m_awarded_bounty_amount_isValid = ::OpenAPI::fromJsonValue(m_awarded_bounty_amount, json[QString("awarded_bounty_amount")]);
    m_awarded_bounty_amount_isSet = !json[QString("awarded_bounty_amount")].isNull() && m_awarded_bounty_amount_isValid;

    m_awarded_bounty_users_isValid = ::OpenAPI::fromJsonValue(m_awarded_bounty_users, json[QString("awarded_bounty_users")]);
    m_awarded_bounty_users_isSet = !json[QString("awarded_bounty_users")].isNull() && m_awarded_bounty_users_isValid;

    m_body_isValid = ::OpenAPI::fromJsonValue(m_body, json[QString("body")]);
    m_body_isSet = !json[QString("body")].isNull() && m_body_isValid;

    m_body_markdown_isValid = ::OpenAPI::fromJsonValue(m_body_markdown, json[QString("body_markdown")]);
    m_body_markdown_isSet = !json[QString("body_markdown")].isNull() && m_body_markdown_isValid;

    m_can_flag_isValid = ::OpenAPI::fromJsonValue(m_can_flag, json[QString("can_flag")]);
    m_can_flag_isSet = !json[QString("can_flag")].isNull() && m_can_flag_isValid;

    m_comment_count_isValid = ::OpenAPI::fromJsonValue(m_comment_count, json[QString("comment_count")]);
    m_comment_count_isSet = !json[QString("comment_count")].isNull() && m_comment_count_isValid;

    m_comments_isValid = ::OpenAPI::fromJsonValue(m_comments, json[QString("comments")]);
    m_comments_isSet = !json[QString("comments")].isNull() && m_comments_isValid;

    m_community_owned_date_isValid = ::OpenAPI::fromJsonValue(m_community_owned_date, json[QString("community_owned_date")]);
    m_community_owned_date_isSet = !json[QString("community_owned_date")].isNull() && m_community_owned_date_isValid;

    m_creation_date_isValid = ::OpenAPI::fromJsonValue(m_creation_date, json[QString("creation_date")]);
    m_creation_date_isSet = !json[QString("creation_date")].isNull() && m_creation_date_isValid;

    m_down_vote_count_isValid = ::OpenAPI::fromJsonValue(m_down_vote_count, json[QString("down_vote_count")]);
    m_down_vote_count_isSet = !json[QString("down_vote_count")].isNull() && m_down_vote_count_isValid;

    m_downvoted_isValid = ::OpenAPI::fromJsonValue(m_downvoted, json[QString("downvoted")]);
    m_downvoted_isSet = !json[QString("downvoted")].isNull() && m_downvoted_isValid;

    m_is_accepted_isValid = ::OpenAPI::fromJsonValue(m_is_accepted, json[QString("is_accepted")]);
    m_is_accepted_isSet = !json[QString("is_accepted")].isNull() && m_is_accepted_isValid;

    m_last_activity_date_isValid = ::OpenAPI::fromJsonValue(m_last_activity_date, json[QString("last_activity_date")]);
    m_last_activity_date_isSet = !json[QString("last_activity_date")].isNull() && m_last_activity_date_isValid;

    m_last_edit_date_isValid = ::OpenAPI::fromJsonValue(m_last_edit_date, json[QString("last_edit_date")]);
    m_last_edit_date_isSet = !json[QString("last_edit_date")].isNull() && m_last_edit_date_isValid;

    m_last_editor_isValid = ::OpenAPI::fromJsonValue(m_last_editor, json[QString("last_editor")]);
    m_last_editor_isSet = !json[QString("last_editor")].isNull() && m_last_editor_isValid;

    m_link_isValid = ::OpenAPI::fromJsonValue(m_link, json[QString("link")]);
    m_link_isSet = !json[QString("link")].isNull() && m_link_isValid;

    m_locked_date_isValid = ::OpenAPI::fromJsonValue(m_locked_date, json[QString("locked_date")]);
    m_locked_date_isSet = !json[QString("locked_date")].isNull() && m_locked_date_isValid;

    m_owner_isValid = ::OpenAPI::fromJsonValue(m_owner, json[QString("owner")]);
    m_owner_isSet = !json[QString("owner")].isNull() && m_owner_isValid;

    m_question_id_isValid = ::OpenAPI::fromJsonValue(m_question_id, json[QString("question_id")]);
    m_question_id_isSet = !json[QString("question_id")].isNull() && m_question_id_isValid;

    m_score_isValid = ::OpenAPI::fromJsonValue(m_score, json[QString("score")]);
    m_score_isSet = !json[QString("score")].isNull() && m_score_isValid;

    m_share_link_isValid = ::OpenAPI::fromJsonValue(m_share_link, json[QString("share_link")]);
    m_share_link_isSet = !json[QString("share_link")].isNull() && m_share_link_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_up_vote_count_isValid = ::OpenAPI::fromJsonValue(m_up_vote_count, json[QString("up_vote_count")]);
    m_up_vote_count_isSet = !json[QString("up_vote_count")].isNull() && m_up_vote_count_isValid;

    m_upvoted_isValid = ::OpenAPI::fromJsonValue(m_upvoted, json[QString("upvoted")]);
    m_upvoted_isSet = !json[QString("upvoted")].isNull() && m_upvoted_isValid;
}

QString OAIAnswers_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAnswers_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_accepted_isSet) {
        obj.insert(QString("accepted"), ::OpenAPI::toJsonValue(m_accepted));
    }
    if (m_answer_id_isSet) {
        obj.insert(QString("answer_id"), ::OpenAPI::toJsonValue(m_answer_id));
    }
    if (m_awarded_bounty_amount_isSet) {
        obj.insert(QString("awarded_bounty_amount"), ::OpenAPI::toJsonValue(m_awarded_bounty_amount));
    }
    if (m_awarded_bounty_users.size() > 0) {
        obj.insert(QString("awarded_bounty_users"), ::OpenAPI::toJsonValue(m_awarded_bounty_users));
    }
    if (m_body_isSet) {
        obj.insert(QString("body"), ::OpenAPI::toJsonValue(m_body));
    }
    if (m_body_markdown_isSet) {
        obj.insert(QString("body_markdown"), ::OpenAPI::toJsonValue(m_body_markdown));
    }
    if (m_can_flag_isSet) {
        obj.insert(QString("can_flag"), ::OpenAPI::toJsonValue(m_can_flag));
    }
    if (m_comment_count_isSet) {
        obj.insert(QString("comment_count"), ::OpenAPI::toJsonValue(m_comment_count));
    }
    if (m_comments.size() > 0) {
        obj.insert(QString("comments"), ::OpenAPI::toJsonValue(m_comments));
    }
    if (m_community_owned_date_isSet) {
        obj.insert(QString("community_owned_date"), ::OpenAPI::toJsonValue(m_community_owned_date));
    }
    if (m_creation_date_isSet) {
        obj.insert(QString("creation_date"), ::OpenAPI::toJsonValue(m_creation_date));
    }
    if (m_down_vote_count_isSet) {
        obj.insert(QString("down_vote_count"), ::OpenAPI::toJsonValue(m_down_vote_count));
    }
    if (m_downvoted_isSet) {
        obj.insert(QString("downvoted"), ::OpenAPI::toJsonValue(m_downvoted));
    }
    if (m_is_accepted_isSet) {
        obj.insert(QString("is_accepted"), ::OpenAPI::toJsonValue(m_is_accepted));
    }
    if (m_last_activity_date_isSet) {
        obj.insert(QString("last_activity_date"), ::OpenAPI::toJsonValue(m_last_activity_date));
    }
    if (m_last_edit_date_isSet) {
        obj.insert(QString("last_edit_date"), ::OpenAPI::toJsonValue(m_last_edit_date));
    }
    if (m_last_editor.isSet()) {
        obj.insert(QString("last_editor"), ::OpenAPI::toJsonValue(m_last_editor));
    }
    if (m_link_isSet) {
        obj.insert(QString("link"), ::OpenAPI::toJsonValue(m_link));
    }
    if (m_locked_date_isSet) {
        obj.insert(QString("locked_date"), ::OpenAPI::toJsonValue(m_locked_date));
    }
    if (m_owner.isSet()) {
        obj.insert(QString("owner"), ::OpenAPI::toJsonValue(m_owner));
    }
    if (m_question_id_isSet) {
        obj.insert(QString("question_id"), ::OpenAPI::toJsonValue(m_question_id));
    }
    if (m_score_isSet) {
        obj.insert(QString("score"), ::OpenAPI::toJsonValue(m_score));
    }
    if (m_share_link_isSet) {
        obj.insert(QString("share_link"), ::OpenAPI::toJsonValue(m_share_link));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_up_vote_count_isSet) {
        obj.insert(QString("up_vote_count"), ::OpenAPI::toJsonValue(m_up_vote_count));
    }
    if (m_upvoted_isSet) {
        obj.insert(QString("upvoted"), ::OpenAPI::toJsonValue(m_upvoted));
    }
    return obj;
}

bool OAIAnswers_inner::isAccepted() const {
    return m_accepted;
}
void OAIAnswers_inner::setAccepted(const bool &accepted) {
    m_accepted = accepted;
    m_accepted_isSet = true;
}

bool OAIAnswers_inner::is_accepted_Set() const{
    return m_accepted_isSet;
}

bool OAIAnswers_inner::is_accepted_Valid() const{
    return m_accepted_isValid;
}

qint32 OAIAnswers_inner::getAnswerId() const {
    return m_answer_id;
}
void OAIAnswers_inner::setAnswerId(const qint32 &answer_id) {
    m_answer_id = answer_id;
    m_answer_id_isSet = true;
}

bool OAIAnswers_inner::is_answer_id_Set() const{
    return m_answer_id_isSet;
}

bool OAIAnswers_inner::is_answer_id_Valid() const{
    return m_answer_id_isValid;
}

qint32 OAIAnswers_inner::getAwardedBountyAmount() const {
    return m_awarded_bounty_amount;
}
void OAIAnswers_inner::setAwardedBountyAmount(const qint32 &awarded_bounty_amount) {
    m_awarded_bounty_amount = awarded_bounty_amount;
    m_awarded_bounty_amount_isSet = true;
}

bool OAIAnswers_inner::is_awarded_bounty_amount_Set() const{
    return m_awarded_bounty_amount_isSet;
}

bool OAIAnswers_inner::is_awarded_bounty_amount_Valid() const{
    return m_awarded_bounty_amount_isValid;
}

QList<QJsonValue> OAIAnswers_inner::getAwardedBountyUsers() const {
    return m_awarded_bounty_users;
}
void OAIAnswers_inner::setAwardedBountyUsers(const QList<QJsonValue> &awarded_bounty_users) {
    m_awarded_bounty_users = awarded_bounty_users;
    m_awarded_bounty_users_isSet = true;
}

bool OAIAnswers_inner::is_awarded_bounty_users_Set() const{
    return m_awarded_bounty_users_isSet;
}

bool OAIAnswers_inner::is_awarded_bounty_users_Valid() const{
    return m_awarded_bounty_users_isValid;
}

QString OAIAnswers_inner::getBody() const {
    return m_body;
}
void OAIAnswers_inner::setBody(const QString &body) {
    m_body = body;
    m_body_isSet = true;
}

bool OAIAnswers_inner::is_body_Set() const{
    return m_body_isSet;
}

bool OAIAnswers_inner::is_body_Valid() const{
    return m_body_isValid;
}

QString OAIAnswers_inner::getBodyMarkdown() const {
    return m_body_markdown;
}
void OAIAnswers_inner::setBodyMarkdown(const QString &body_markdown) {
    m_body_markdown = body_markdown;
    m_body_markdown_isSet = true;
}

bool OAIAnswers_inner::is_body_markdown_Set() const{
    return m_body_markdown_isSet;
}

bool OAIAnswers_inner::is_body_markdown_Valid() const{
    return m_body_markdown_isValid;
}

bool OAIAnswers_inner::isCanFlag() const {
    return m_can_flag;
}
void OAIAnswers_inner::setCanFlag(const bool &can_flag) {
    m_can_flag = can_flag;
    m_can_flag_isSet = true;
}

bool OAIAnswers_inner::is_can_flag_Set() const{
    return m_can_flag_isSet;
}

bool OAIAnswers_inner::is_can_flag_Valid() const{
    return m_can_flag_isValid;
}

qint32 OAIAnswers_inner::getCommentCount() const {
    return m_comment_count;
}
void OAIAnswers_inner::setCommentCount(const qint32 &comment_count) {
    m_comment_count = comment_count;
    m_comment_count_isSet = true;
}

bool OAIAnswers_inner::is_comment_count_Set() const{
    return m_comment_count_isSet;
}

bool OAIAnswers_inner::is_comment_count_Valid() const{
    return m_comment_count_isValid;
}

QList<QJsonValue> OAIAnswers_inner::getComments() const {
    return m_comments;
}
void OAIAnswers_inner::setComments(const QList<QJsonValue> &comments) {
    m_comments = comments;
    m_comments_isSet = true;
}

bool OAIAnswers_inner::is_comments_Set() const{
    return m_comments_isSet;
}

bool OAIAnswers_inner::is_comments_Valid() const{
    return m_comments_isValid;
}

qint32 OAIAnswers_inner::getCommunityOwnedDate() const {
    return m_community_owned_date;
}
void OAIAnswers_inner::setCommunityOwnedDate(const qint32 &community_owned_date) {
    m_community_owned_date = community_owned_date;
    m_community_owned_date_isSet = true;
}

bool OAIAnswers_inner::is_community_owned_date_Set() const{
    return m_community_owned_date_isSet;
}

bool OAIAnswers_inner::is_community_owned_date_Valid() const{
    return m_community_owned_date_isValid;
}

qint32 OAIAnswers_inner::getCreationDate() const {
    return m_creation_date;
}
void OAIAnswers_inner::setCreationDate(const qint32 &creation_date) {
    m_creation_date = creation_date;
    m_creation_date_isSet = true;
}

bool OAIAnswers_inner::is_creation_date_Set() const{
    return m_creation_date_isSet;
}

bool OAIAnswers_inner::is_creation_date_Valid() const{
    return m_creation_date_isValid;
}

qint32 OAIAnswers_inner::getDownVoteCount() const {
    return m_down_vote_count;
}
void OAIAnswers_inner::setDownVoteCount(const qint32 &down_vote_count) {
    m_down_vote_count = down_vote_count;
    m_down_vote_count_isSet = true;
}

bool OAIAnswers_inner::is_down_vote_count_Set() const{
    return m_down_vote_count_isSet;
}

bool OAIAnswers_inner::is_down_vote_count_Valid() const{
    return m_down_vote_count_isValid;
}

bool OAIAnswers_inner::isDownvoted() const {
    return m_downvoted;
}
void OAIAnswers_inner::setDownvoted(const bool &downvoted) {
    m_downvoted = downvoted;
    m_downvoted_isSet = true;
}

bool OAIAnswers_inner::is_downvoted_Set() const{
    return m_downvoted_isSet;
}

bool OAIAnswers_inner::is_downvoted_Valid() const{
    return m_downvoted_isValid;
}

bool OAIAnswers_inner::isIsAccepted() const {
    return m_is_accepted;
}
void OAIAnswers_inner::setIsAccepted(const bool &is_accepted) {
    m_is_accepted = is_accepted;
    m_is_accepted_isSet = true;
}

bool OAIAnswers_inner::is_is_accepted_Set() const{
    return m_is_accepted_isSet;
}

bool OAIAnswers_inner::is_is_accepted_Valid() const{
    return m_is_accepted_isValid;
}

qint32 OAIAnswers_inner::getLastActivityDate() const {
    return m_last_activity_date;
}
void OAIAnswers_inner::setLastActivityDate(const qint32 &last_activity_date) {
    m_last_activity_date = last_activity_date;
    m_last_activity_date_isSet = true;
}

bool OAIAnswers_inner::is_last_activity_date_Set() const{
    return m_last_activity_date_isSet;
}

bool OAIAnswers_inner::is_last_activity_date_Valid() const{
    return m_last_activity_date_isValid;
}

qint32 OAIAnswers_inner::getLastEditDate() const {
    return m_last_edit_date;
}
void OAIAnswers_inner::setLastEditDate(const qint32 &last_edit_date) {
    m_last_edit_date = last_edit_date;
    m_last_edit_date_isSet = true;
}

bool OAIAnswers_inner::is_last_edit_date_Set() const{
    return m_last_edit_date_isSet;
}

bool OAIAnswers_inner::is_last_edit_date_Valid() const{
    return m_last_edit_date_isValid;
}

OAIAnswers_inner_last_editor OAIAnswers_inner::getLastEditor() const {
    return m_last_editor;
}
void OAIAnswers_inner::setLastEditor(const OAIAnswers_inner_last_editor &last_editor) {
    m_last_editor = last_editor;
    m_last_editor_isSet = true;
}

bool OAIAnswers_inner::is_last_editor_Set() const{
    return m_last_editor_isSet;
}

bool OAIAnswers_inner::is_last_editor_Valid() const{
    return m_last_editor_isValid;
}

QString OAIAnswers_inner::getLink() const {
    return m_link;
}
void OAIAnswers_inner::setLink(const QString &link) {
    m_link = link;
    m_link_isSet = true;
}

bool OAIAnswers_inner::is_link_Set() const{
    return m_link_isSet;
}

bool OAIAnswers_inner::is_link_Valid() const{
    return m_link_isValid;
}

qint32 OAIAnswers_inner::getLockedDate() const {
    return m_locked_date;
}
void OAIAnswers_inner::setLockedDate(const qint32 &locked_date) {
    m_locked_date = locked_date;
    m_locked_date_isSet = true;
}

bool OAIAnswers_inner::is_locked_date_Set() const{
    return m_locked_date_isSet;
}

bool OAIAnswers_inner::is_locked_date_Valid() const{
    return m_locked_date_isValid;
}

OAIAnswers_inner_last_editor OAIAnswers_inner::getOwner() const {
    return m_owner;
}
void OAIAnswers_inner::setOwner(const OAIAnswers_inner_last_editor &owner) {
    m_owner = owner;
    m_owner_isSet = true;
}

bool OAIAnswers_inner::is_owner_Set() const{
    return m_owner_isSet;
}

bool OAIAnswers_inner::is_owner_Valid() const{
    return m_owner_isValid;
}

qint32 OAIAnswers_inner::getQuestionId() const {
    return m_question_id;
}
void OAIAnswers_inner::setQuestionId(const qint32 &question_id) {
    m_question_id = question_id;
    m_question_id_isSet = true;
}

bool OAIAnswers_inner::is_question_id_Set() const{
    return m_question_id_isSet;
}

bool OAIAnswers_inner::is_question_id_Valid() const{
    return m_question_id_isValid;
}

qint32 OAIAnswers_inner::getScore() const {
    return m_score;
}
void OAIAnswers_inner::setScore(const qint32 &score) {
    m_score = score;
    m_score_isSet = true;
}

bool OAIAnswers_inner::is_score_Set() const{
    return m_score_isSet;
}

bool OAIAnswers_inner::is_score_Valid() const{
    return m_score_isValid;
}

QString OAIAnswers_inner::getShareLink() const {
    return m_share_link;
}
void OAIAnswers_inner::setShareLink(const QString &share_link) {
    m_share_link = share_link;
    m_share_link_isSet = true;
}

bool OAIAnswers_inner::is_share_link_Set() const{
    return m_share_link_isSet;
}

bool OAIAnswers_inner::is_share_link_Valid() const{
    return m_share_link_isValid;
}

QList<QJsonValue> OAIAnswers_inner::getTags() const {
    return m_tags;
}
void OAIAnswers_inner::setTags(const QList<QJsonValue> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIAnswers_inner::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIAnswers_inner::is_tags_Valid() const{
    return m_tags_isValid;
}

QString OAIAnswers_inner::getTitle() const {
    return m_title;
}
void OAIAnswers_inner::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIAnswers_inner::is_title_Set() const{
    return m_title_isSet;
}

bool OAIAnswers_inner::is_title_Valid() const{
    return m_title_isValid;
}

qint32 OAIAnswers_inner::getUpVoteCount() const {
    return m_up_vote_count;
}
void OAIAnswers_inner::setUpVoteCount(const qint32 &up_vote_count) {
    m_up_vote_count = up_vote_count;
    m_up_vote_count_isSet = true;
}

bool OAIAnswers_inner::is_up_vote_count_Set() const{
    return m_up_vote_count_isSet;
}

bool OAIAnswers_inner::is_up_vote_count_Valid() const{
    return m_up_vote_count_isValid;
}

bool OAIAnswers_inner::isUpvoted() const {
    return m_upvoted;
}
void OAIAnswers_inner::setUpvoted(const bool &upvoted) {
    m_upvoted = upvoted;
    m_upvoted_isSet = true;
}

bool OAIAnswers_inner::is_upvoted_Set() const{
    return m_upvoted_isSet;
}

bool OAIAnswers_inner::is_upvoted_Valid() const{
    return m_upvoted_isValid;
}

bool OAIAnswers_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_accepted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_answer_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_awarded_bounty_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_awarded_bounty_users.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_body_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_body_markdown_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_flag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_comment_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_comments.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_community_owned_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_down_vote_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_downvoted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_accepted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_activity_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_edit_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_editor.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_link_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_locked_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_owner.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_question_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_score_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_share_link_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_up_vote_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_upvoted_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAnswers_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
