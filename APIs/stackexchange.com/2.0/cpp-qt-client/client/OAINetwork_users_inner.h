/**
 * StackExchange
 * Stack Exchange is a network of 130+ Q&A communities including Stack Overflow. 
 *
 * The version of the OpenAPI document: 2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAINetwork_users_inner.h
 *
 * 
 */

#ifndef OAINetwork_users_inner_H
#define OAINetwork_users_inner_H

#include <QJsonObject>

#include "OAIAnswers_inner_last_editor_badge_counts.h"
#include <QJsonValue>
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIAnswers_inner_last_editor_badge_counts;

class OAINetwork_users_inner : public OAIObject {
public:
    OAINetwork_users_inner();
    OAINetwork_users_inner(QString json);
    ~OAINetwork_users_inner() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getAccountId() const;
    void setAccountId(const qint32 &account_id);
    bool is_account_id_Set() const;
    bool is_account_id_Valid() const;

    qint32 getAnswerCount() const;
    void setAnswerCount(const qint32 &answer_count);
    bool is_answer_count_Set() const;
    bool is_answer_count_Valid() const;

    OAIAnswers_inner_last_editor_badge_counts getBadgeCounts() const;
    void setBadgeCounts(const OAIAnswers_inner_last_editor_badge_counts &badge_counts);
    bool is_badge_counts_Set() const;
    bool is_badge_counts_Valid() const;

    qint32 getCreationDate() const;
    void setCreationDate(const qint32 &creation_date);
    bool is_creation_date_Set() const;
    bool is_creation_date_Valid() const;

    qint32 getLastAccessDate() const;
    void setLastAccessDate(const qint32 &last_access_date);
    bool is_last_access_date_Set() const;
    bool is_last_access_date_Valid() const;

    qint32 getQuestionCount() const;
    void setQuestionCount(const qint32 &question_count);
    bool is_question_count_Set() const;
    bool is_question_count_Valid() const;

    qint32 getReputation() const;
    void setReputation(const qint32 &reputation);
    bool is_reputation_Set() const;
    bool is_reputation_Valid() const;

    QString getSiteName() const;
    void setSiteName(const QString &site_name);
    bool is_site_name_Set() const;
    bool is_site_name_Valid() const;

    QString getSiteUrl() const;
    void setSiteUrl(const QString &site_url);
    bool is_site_url_Set() const;
    bool is_site_url_Valid() const;

    QList<QJsonValue> getTopAnswers() const;
    void setTopAnswers(const QList<QJsonValue> &top_answers);
    bool is_top_answers_Set() const;
    bool is_top_answers_Valid() const;

    QList<QJsonValue> getTopQuestions() const;
    void setTopQuestions(const QList<QJsonValue> &top_questions);
    bool is_top_questions_Set() const;
    bool is_top_questions_Valid() const;

    qint32 getUserId() const;
    void setUserId(const qint32 &user_id);
    bool is_user_id_Set() const;
    bool is_user_id_Valid() const;

    QString getUserType() const;
    void setUserType(const QString &user_type);
    bool is_user_type_Set() const;
    bool is_user_type_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_account_id;
    bool m_account_id_isSet;
    bool m_account_id_isValid;

    qint32 m_answer_count;
    bool m_answer_count_isSet;
    bool m_answer_count_isValid;

    OAIAnswers_inner_last_editor_badge_counts m_badge_counts;
    bool m_badge_counts_isSet;
    bool m_badge_counts_isValid;

    qint32 m_creation_date;
    bool m_creation_date_isSet;
    bool m_creation_date_isValid;

    qint32 m_last_access_date;
    bool m_last_access_date_isSet;
    bool m_last_access_date_isValid;

    qint32 m_question_count;
    bool m_question_count_isSet;
    bool m_question_count_isValid;

    qint32 m_reputation;
    bool m_reputation_isSet;
    bool m_reputation_isValid;

    QString m_site_name;
    bool m_site_name_isSet;
    bool m_site_name_isValid;

    QString m_site_url;
    bool m_site_url_isSet;
    bool m_site_url_isValid;

    QList<QJsonValue> m_top_answers;
    bool m_top_answers_isSet;
    bool m_top_answers_isValid;

    QList<QJsonValue> m_top_questions;
    bool m_top_questions_isSet;
    bool m_top_questions_isValid;

    qint32 m_user_id;
    bool m_user_id_isSet;
    bool m_user_id_isValid;

    QString m_user_type;
    bool m_user_type_isSet;
    bool m_user_type_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAINetwork_users_inner)

#endif // OAINetwork_users_inner_H
