/**
 * StackExchange
 * Stack Exchange is a network of 130+ Q&A communities including Stack Overflow. 
 *
 * The version of the OpenAPI document: 2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRevisions_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRevisions_inner::OAIRevisions_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRevisions_inner::OAIRevisions_inner() {
    this->initializeModel();
}

OAIRevisions_inner::~OAIRevisions_inner() {}

void OAIRevisions_inner::initializeModel() {

    m_body_isSet = false;
    m_body_isValid = false;

    m_comment_isSet = false;
    m_comment_isValid = false;

    m_creation_date_isSet = false;
    m_creation_date_isValid = false;

    m_is_rollback_isSet = false;
    m_is_rollback_isValid = false;

    m_last_body_isSet = false;
    m_last_body_isValid = false;

    m_last_tags_isSet = false;
    m_last_tags_isValid = false;

    m_last_title_isSet = false;
    m_last_title_isValid = false;

    m_post_id_isSet = false;
    m_post_id_isValid = false;

    m_post_type_isSet = false;
    m_post_type_isValid = false;

    m_revision_guid_isSet = false;
    m_revision_guid_isValid = false;

    m_revision_number_isSet = false;
    m_revision_number_isValid = false;

    m_revision_type_isSet = false;
    m_revision_type_isValid = false;

    m_set_community_wiki_isSet = false;
    m_set_community_wiki_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_user_isSet = false;
    m_user_isValid = false;
}

void OAIRevisions_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRevisions_inner::fromJsonObject(QJsonObject json) {

    m_body_isValid = ::OpenAPI::fromJsonValue(m_body, json[QString("body")]);
    m_body_isSet = !json[QString("body")].isNull() && m_body_isValid;

    m_comment_isValid = ::OpenAPI::fromJsonValue(m_comment, json[QString("comment")]);
    m_comment_isSet = !json[QString("comment")].isNull() && m_comment_isValid;

    m_creation_date_isValid = ::OpenAPI::fromJsonValue(m_creation_date, json[QString("creation_date")]);
    m_creation_date_isSet = !json[QString("creation_date")].isNull() && m_creation_date_isValid;

    m_is_rollback_isValid = ::OpenAPI::fromJsonValue(m_is_rollback, json[QString("is_rollback")]);
    m_is_rollback_isSet = !json[QString("is_rollback")].isNull() && m_is_rollback_isValid;

    m_last_body_isValid = ::OpenAPI::fromJsonValue(m_last_body, json[QString("last_body")]);
    m_last_body_isSet = !json[QString("last_body")].isNull() && m_last_body_isValid;

    m_last_tags_isValid = ::OpenAPI::fromJsonValue(m_last_tags, json[QString("last_tags")]);
    m_last_tags_isSet = !json[QString("last_tags")].isNull() && m_last_tags_isValid;

    m_last_title_isValid = ::OpenAPI::fromJsonValue(m_last_title, json[QString("last_title")]);
    m_last_title_isSet = !json[QString("last_title")].isNull() && m_last_title_isValid;

    m_post_id_isValid = ::OpenAPI::fromJsonValue(m_post_id, json[QString("post_id")]);
    m_post_id_isSet = !json[QString("post_id")].isNull() && m_post_id_isValid;

    m_post_type_isValid = ::OpenAPI::fromJsonValue(m_post_type, json[QString("post_type")]);
    m_post_type_isSet = !json[QString("post_type")].isNull() && m_post_type_isValid;

    m_revision_guid_isValid = ::OpenAPI::fromJsonValue(m_revision_guid, json[QString("revision_guid")]);
    m_revision_guid_isSet = !json[QString("revision_guid")].isNull() && m_revision_guid_isValid;

    m_revision_number_isValid = ::OpenAPI::fromJsonValue(m_revision_number, json[QString("revision_number")]);
    m_revision_number_isSet = !json[QString("revision_number")].isNull() && m_revision_number_isValid;

    m_revision_type_isValid = ::OpenAPI::fromJsonValue(m_revision_type, json[QString("revision_type")]);
    m_revision_type_isSet = !json[QString("revision_type")].isNull() && m_revision_type_isValid;

    m_set_community_wiki_isValid = ::OpenAPI::fromJsonValue(m_set_community_wiki, json[QString("set_community_wiki")]);
    m_set_community_wiki_isSet = !json[QString("set_community_wiki")].isNull() && m_set_community_wiki_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_user_isValid = ::OpenAPI::fromJsonValue(m_user, json[QString("user")]);
    m_user_isSet = !json[QString("user")].isNull() && m_user_isValid;
}

QString OAIRevisions_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRevisions_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_body_isSet) {
        obj.insert(QString("body"), ::OpenAPI::toJsonValue(m_body));
    }
    if (m_comment_isSet) {
        obj.insert(QString("comment"), ::OpenAPI::toJsonValue(m_comment));
    }
    if (m_creation_date_isSet) {
        obj.insert(QString("creation_date"), ::OpenAPI::toJsonValue(m_creation_date));
    }
    if (m_is_rollback_isSet) {
        obj.insert(QString("is_rollback"), ::OpenAPI::toJsonValue(m_is_rollback));
    }
    if (m_last_body_isSet) {
        obj.insert(QString("last_body"), ::OpenAPI::toJsonValue(m_last_body));
    }
    if (m_last_tags.size() > 0) {
        obj.insert(QString("last_tags"), ::OpenAPI::toJsonValue(m_last_tags));
    }
    if (m_last_title_isSet) {
        obj.insert(QString("last_title"), ::OpenAPI::toJsonValue(m_last_title));
    }
    if (m_post_id_isSet) {
        obj.insert(QString("post_id"), ::OpenAPI::toJsonValue(m_post_id));
    }
    if (m_post_type_isSet) {
        obj.insert(QString("post_type"), ::OpenAPI::toJsonValue(m_post_type));
    }
    if (m_revision_guid_isSet) {
        obj.insert(QString("revision_guid"), ::OpenAPI::toJsonValue(m_revision_guid));
    }
    if (m_revision_number_isSet) {
        obj.insert(QString("revision_number"), ::OpenAPI::toJsonValue(m_revision_number));
    }
    if (m_revision_type_isSet) {
        obj.insert(QString("revision_type"), ::OpenAPI::toJsonValue(m_revision_type));
    }
    if (m_set_community_wiki_isSet) {
        obj.insert(QString("set_community_wiki"), ::OpenAPI::toJsonValue(m_set_community_wiki));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_user.isSet()) {
        obj.insert(QString("user"), ::OpenAPI::toJsonValue(m_user));
    }
    return obj;
}

QString OAIRevisions_inner::getBody() const {
    return m_body;
}
void OAIRevisions_inner::setBody(const QString &body) {
    m_body = body;
    m_body_isSet = true;
}

bool OAIRevisions_inner::is_body_Set() const{
    return m_body_isSet;
}

bool OAIRevisions_inner::is_body_Valid() const{
    return m_body_isValid;
}

QString OAIRevisions_inner::getComment() const {
    return m_comment;
}
void OAIRevisions_inner::setComment(const QString &comment) {
    m_comment = comment;
    m_comment_isSet = true;
}

bool OAIRevisions_inner::is_comment_Set() const{
    return m_comment_isSet;
}

bool OAIRevisions_inner::is_comment_Valid() const{
    return m_comment_isValid;
}

qint32 OAIRevisions_inner::getCreationDate() const {
    return m_creation_date;
}
void OAIRevisions_inner::setCreationDate(const qint32 &creation_date) {
    m_creation_date = creation_date;
    m_creation_date_isSet = true;
}

bool OAIRevisions_inner::is_creation_date_Set() const{
    return m_creation_date_isSet;
}

bool OAIRevisions_inner::is_creation_date_Valid() const{
    return m_creation_date_isValid;
}

bool OAIRevisions_inner::isIsRollback() const {
    return m_is_rollback;
}
void OAIRevisions_inner::setIsRollback(const bool &is_rollback) {
    m_is_rollback = is_rollback;
    m_is_rollback_isSet = true;
}

bool OAIRevisions_inner::is_is_rollback_Set() const{
    return m_is_rollback_isSet;
}

bool OAIRevisions_inner::is_is_rollback_Valid() const{
    return m_is_rollback_isValid;
}

QString OAIRevisions_inner::getLastBody() const {
    return m_last_body;
}
void OAIRevisions_inner::setLastBody(const QString &last_body) {
    m_last_body = last_body;
    m_last_body_isSet = true;
}

bool OAIRevisions_inner::is_last_body_Set() const{
    return m_last_body_isSet;
}

bool OAIRevisions_inner::is_last_body_Valid() const{
    return m_last_body_isValid;
}

QList<QJsonValue> OAIRevisions_inner::getLastTags() const {
    return m_last_tags;
}
void OAIRevisions_inner::setLastTags(const QList<QJsonValue> &last_tags) {
    m_last_tags = last_tags;
    m_last_tags_isSet = true;
}

bool OAIRevisions_inner::is_last_tags_Set() const{
    return m_last_tags_isSet;
}

bool OAIRevisions_inner::is_last_tags_Valid() const{
    return m_last_tags_isValid;
}

QString OAIRevisions_inner::getLastTitle() const {
    return m_last_title;
}
void OAIRevisions_inner::setLastTitle(const QString &last_title) {
    m_last_title = last_title;
    m_last_title_isSet = true;
}

bool OAIRevisions_inner::is_last_title_Set() const{
    return m_last_title_isSet;
}

bool OAIRevisions_inner::is_last_title_Valid() const{
    return m_last_title_isValid;
}

qint32 OAIRevisions_inner::getPostId() const {
    return m_post_id;
}
void OAIRevisions_inner::setPostId(const qint32 &post_id) {
    m_post_id = post_id;
    m_post_id_isSet = true;
}

bool OAIRevisions_inner::is_post_id_Set() const{
    return m_post_id_isSet;
}

bool OAIRevisions_inner::is_post_id_Valid() const{
    return m_post_id_isValid;
}

QString OAIRevisions_inner::getPostType() const {
    return m_post_type;
}
void OAIRevisions_inner::setPostType(const QString &post_type) {
    m_post_type = post_type;
    m_post_type_isSet = true;
}

bool OAIRevisions_inner::is_post_type_Set() const{
    return m_post_type_isSet;
}

bool OAIRevisions_inner::is_post_type_Valid() const{
    return m_post_type_isValid;
}

QString OAIRevisions_inner::getRevisionGuid() const {
    return m_revision_guid;
}
void OAIRevisions_inner::setRevisionGuid(const QString &revision_guid) {
    m_revision_guid = revision_guid;
    m_revision_guid_isSet = true;
}

bool OAIRevisions_inner::is_revision_guid_Set() const{
    return m_revision_guid_isSet;
}

bool OAIRevisions_inner::is_revision_guid_Valid() const{
    return m_revision_guid_isValid;
}

qint32 OAIRevisions_inner::getRevisionNumber() const {
    return m_revision_number;
}
void OAIRevisions_inner::setRevisionNumber(const qint32 &revision_number) {
    m_revision_number = revision_number;
    m_revision_number_isSet = true;
}

bool OAIRevisions_inner::is_revision_number_Set() const{
    return m_revision_number_isSet;
}

bool OAIRevisions_inner::is_revision_number_Valid() const{
    return m_revision_number_isValid;
}

QString OAIRevisions_inner::getRevisionType() const {
    return m_revision_type;
}
void OAIRevisions_inner::setRevisionType(const QString &revision_type) {
    m_revision_type = revision_type;
    m_revision_type_isSet = true;
}

bool OAIRevisions_inner::is_revision_type_Set() const{
    return m_revision_type_isSet;
}

bool OAIRevisions_inner::is_revision_type_Valid() const{
    return m_revision_type_isValid;
}

bool OAIRevisions_inner::isSetCommunityWiki() const {
    return m_set_community_wiki;
}
void OAIRevisions_inner::setSetCommunityWiki(const bool &set_community_wiki) {
    m_set_community_wiki = set_community_wiki;
    m_set_community_wiki_isSet = true;
}

bool OAIRevisions_inner::is_set_community_wiki_Set() const{
    return m_set_community_wiki_isSet;
}

bool OAIRevisions_inner::is_set_community_wiki_Valid() const{
    return m_set_community_wiki_isValid;
}

QList<QJsonValue> OAIRevisions_inner::getTags() const {
    return m_tags;
}
void OAIRevisions_inner::setTags(const QList<QJsonValue> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIRevisions_inner::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIRevisions_inner::is_tags_Valid() const{
    return m_tags_isValid;
}

QString OAIRevisions_inner::getTitle() const {
    return m_title;
}
void OAIRevisions_inner::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIRevisions_inner::is_title_Set() const{
    return m_title_isSet;
}

bool OAIRevisions_inner::is_title_Valid() const{
    return m_title_isValid;
}

OAIAnswers_inner_last_editor OAIRevisions_inner::getUser() const {
    return m_user;
}
void OAIRevisions_inner::setUser(const OAIAnswers_inner_last_editor &user) {
    m_user = user;
    m_user_isSet = true;
}

bool OAIRevisions_inner::is_user_Set() const{
    return m_user_isSet;
}

bool OAIRevisions_inner::is_user_Valid() const{
    return m_user_isValid;
}

bool OAIRevisions_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_body_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_comment_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_rollback_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_body_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_post_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_post_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_revision_guid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_revision_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_revision_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_set_community_wiki_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRevisions_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
