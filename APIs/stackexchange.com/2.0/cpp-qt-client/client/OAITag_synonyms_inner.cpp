/**
 * StackExchange
 * Stack Exchange is a network of 130+ Q&A communities including Stack Overflow. 
 *
 * The version of the OpenAPI document: 2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITag_synonyms_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITag_synonyms_inner::OAITag_synonyms_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITag_synonyms_inner::OAITag_synonyms_inner() {
    this->initializeModel();
}

OAITag_synonyms_inner::~OAITag_synonyms_inner() {}

void OAITag_synonyms_inner::initializeModel() {

    m_applied_count_isSet = false;
    m_applied_count_isValid = false;

    m_creation_date_isSet = false;
    m_creation_date_isValid = false;

    m_from_tag_isSet = false;
    m_from_tag_isValid = false;

    m_last_applied_date_isSet = false;
    m_last_applied_date_isValid = false;

    m_to_tag_isSet = false;
    m_to_tag_isValid = false;
}

void OAITag_synonyms_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITag_synonyms_inner::fromJsonObject(QJsonObject json) {

    m_applied_count_isValid = ::OpenAPI::fromJsonValue(m_applied_count, json[QString("applied_count")]);
    m_applied_count_isSet = !json[QString("applied_count")].isNull() && m_applied_count_isValid;

    m_creation_date_isValid = ::OpenAPI::fromJsonValue(m_creation_date, json[QString("creation_date")]);
    m_creation_date_isSet = !json[QString("creation_date")].isNull() && m_creation_date_isValid;

    m_from_tag_isValid = ::OpenAPI::fromJsonValue(m_from_tag, json[QString("from_tag")]);
    m_from_tag_isSet = !json[QString("from_tag")].isNull() && m_from_tag_isValid;

    m_last_applied_date_isValid = ::OpenAPI::fromJsonValue(m_last_applied_date, json[QString("last_applied_date")]);
    m_last_applied_date_isSet = !json[QString("last_applied_date")].isNull() && m_last_applied_date_isValid;

    m_to_tag_isValid = ::OpenAPI::fromJsonValue(m_to_tag, json[QString("to_tag")]);
    m_to_tag_isSet = !json[QString("to_tag")].isNull() && m_to_tag_isValid;
}

QString OAITag_synonyms_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITag_synonyms_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_applied_count_isSet) {
        obj.insert(QString("applied_count"), ::OpenAPI::toJsonValue(m_applied_count));
    }
    if (m_creation_date_isSet) {
        obj.insert(QString("creation_date"), ::OpenAPI::toJsonValue(m_creation_date));
    }
    if (m_from_tag_isSet) {
        obj.insert(QString("from_tag"), ::OpenAPI::toJsonValue(m_from_tag));
    }
    if (m_last_applied_date_isSet) {
        obj.insert(QString("last_applied_date"), ::OpenAPI::toJsonValue(m_last_applied_date));
    }
    if (m_to_tag_isSet) {
        obj.insert(QString("to_tag"), ::OpenAPI::toJsonValue(m_to_tag));
    }
    return obj;
}

qint32 OAITag_synonyms_inner::getAppliedCount() const {
    return m_applied_count;
}
void OAITag_synonyms_inner::setAppliedCount(const qint32 &applied_count) {
    m_applied_count = applied_count;
    m_applied_count_isSet = true;
}

bool OAITag_synonyms_inner::is_applied_count_Set() const{
    return m_applied_count_isSet;
}

bool OAITag_synonyms_inner::is_applied_count_Valid() const{
    return m_applied_count_isValid;
}

qint32 OAITag_synonyms_inner::getCreationDate() const {
    return m_creation_date;
}
void OAITag_synonyms_inner::setCreationDate(const qint32 &creation_date) {
    m_creation_date = creation_date;
    m_creation_date_isSet = true;
}

bool OAITag_synonyms_inner::is_creation_date_Set() const{
    return m_creation_date_isSet;
}

bool OAITag_synonyms_inner::is_creation_date_Valid() const{
    return m_creation_date_isValid;
}

QString OAITag_synonyms_inner::getFromTag() const {
    return m_from_tag;
}
void OAITag_synonyms_inner::setFromTag(const QString &from_tag) {
    m_from_tag = from_tag;
    m_from_tag_isSet = true;
}

bool OAITag_synonyms_inner::is_from_tag_Set() const{
    return m_from_tag_isSet;
}

bool OAITag_synonyms_inner::is_from_tag_Valid() const{
    return m_from_tag_isValid;
}

qint32 OAITag_synonyms_inner::getLastAppliedDate() const {
    return m_last_applied_date;
}
void OAITag_synonyms_inner::setLastAppliedDate(const qint32 &last_applied_date) {
    m_last_applied_date = last_applied_date;
    m_last_applied_date_isSet = true;
}

bool OAITag_synonyms_inner::is_last_applied_date_Set() const{
    return m_last_applied_date_isSet;
}

bool OAITag_synonyms_inner::is_last_applied_date_Valid() const{
    return m_last_applied_date_isValid;
}

QString OAITag_synonyms_inner::getToTag() const {
    return m_to_tag;
}
void OAITag_synonyms_inner::setToTag(const QString &to_tag) {
    m_to_tag = to_tag;
    m_to_tag_isSet = true;
}

bool OAITag_synonyms_inner::is_to_tag_Set() const{
    return m_to_tag_isSet;
}

bool OAITag_synonyms_inner::is_to_tag_Valid() const{
    return m_to_tag_isValid;
}

bool OAITag_synonyms_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_applied_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_from_tag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_applied_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_to_tag_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITag_synonyms_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
