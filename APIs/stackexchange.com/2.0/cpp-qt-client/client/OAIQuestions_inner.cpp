/**
 * StackExchange
 * Stack Exchange is a network of 130+ Q&A communities including Stack Overflow. 
 *
 * The version of the OpenAPI document: 2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIQuestions_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIQuestions_inner::OAIQuestions_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIQuestions_inner::OAIQuestions_inner() {
    this->initializeModel();
}

OAIQuestions_inner::~OAIQuestions_inner() {}

void OAIQuestions_inner::initializeModel() {

    m_accepted_answer_id_isSet = false;
    m_accepted_answer_id_isValid = false;

    m_answer_count_isSet = false;
    m_answer_count_isValid = false;

    m_answers_isSet = false;
    m_answers_isValid = false;

    m_body_isSet = false;
    m_body_isValid = false;

    m_body_markdown_isSet = false;
    m_body_markdown_isValid = false;

    m_bounty_amount_isSet = false;
    m_bounty_amount_isValid = false;

    m_bounty_closes_date_isSet = false;
    m_bounty_closes_date_isValid = false;

    m_bounty_user_isSet = false;
    m_bounty_user_isValid = false;

    m_can_close_isSet = false;
    m_can_close_isValid = false;

    m_can_flag_isSet = false;
    m_can_flag_isValid = false;

    m_close_vote_count_isSet = false;
    m_close_vote_count_isValid = false;

    m_closed_date_isSet = false;
    m_closed_date_isValid = false;

    m_closed_details_isSet = false;
    m_closed_details_isValid = false;

    m_closed_reason_isSet = false;
    m_closed_reason_isValid = false;

    m_comment_count_isSet = false;
    m_comment_count_isValid = false;

    m_comments_isSet = false;
    m_comments_isValid = false;

    m_community_owned_date_isSet = false;
    m_community_owned_date_isValid = false;

    m_creation_date_isSet = false;
    m_creation_date_isValid = false;

    m_delete_vote_count_isSet = false;
    m_delete_vote_count_isValid = false;

    m_down_vote_count_isSet = false;
    m_down_vote_count_isValid = false;

    m_downvoted_isSet = false;
    m_downvoted_isValid = false;

    m_favorite_count_isSet = false;
    m_favorite_count_isValid = false;

    m_favorited_isSet = false;
    m_favorited_isValid = false;

    m_is_answered_isSet = false;
    m_is_answered_isValid = false;

    m_last_activity_date_isSet = false;
    m_last_activity_date_isValid = false;

    m_last_edit_date_isSet = false;
    m_last_edit_date_isValid = false;

    m_last_editor_isSet = false;
    m_last_editor_isValid = false;

    m_link_isSet = false;
    m_link_isValid = false;

    m_locked_date_isSet = false;
    m_locked_date_isValid = false;

    m_migrated_from_isSet = false;
    m_migrated_from_isValid = false;

    m_migrated_to_isSet = false;
    m_migrated_to_isValid = false;

    m_notice_isSet = false;
    m_notice_isValid = false;

    m_owner_isSet = false;
    m_owner_isValid = false;

    m_protected_date_isSet = false;
    m_protected_date_isValid = false;

    m_question_id_isSet = false;
    m_question_id_isValid = false;

    m_reopen_vote_count_isSet = false;
    m_reopen_vote_count_isValid = false;

    m_score_isSet = false;
    m_score_isValid = false;

    m_share_link_isSet = false;
    m_share_link_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_up_vote_count_isSet = false;
    m_up_vote_count_isValid = false;

    m_upvoted_isSet = false;
    m_upvoted_isValid = false;

    m_view_count_isSet = false;
    m_view_count_isValid = false;
}

void OAIQuestions_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIQuestions_inner::fromJsonObject(QJsonObject json) {

    m_accepted_answer_id_isValid = ::OpenAPI::fromJsonValue(m_accepted_answer_id, json[QString("accepted_answer_id")]);
    m_accepted_answer_id_isSet = !json[QString("accepted_answer_id")].isNull() && m_accepted_answer_id_isValid;

    m_answer_count_isValid = ::OpenAPI::fromJsonValue(m_answer_count, json[QString("answer_count")]);
    m_answer_count_isSet = !json[QString("answer_count")].isNull() && m_answer_count_isValid;

    m_answers_isValid = ::OpenAPI::fromJsonValue(m_answers, json[QString("answers")]);
    m_answers_isSet = !json[QString("answers")].isNull() && m_answers_isValid;

    m_body_isValid = ::OpenAPI::fromJsonValue(m_body, json[QString("body")]);
    m_body_isSet = !json[QString("body")].isNull() && m_body_isValid;

    m_body_markdown_isValid = ::OpenAPI::fromJsonValue(m_body_markdown, json[QString("body_markdown")]);
    m_body_markdown_isSet = !json[QString("body_markdown")].isNull() && m_body_markdown_isValid;

    m_bounty_amount_isValid = ::OpenAPI::fromJsonValue(m_bounty_amount, json[QString("bounty_amount")]);
    m_bounty_amount_isSet = !json[QString("bounty_amount")].isNull() && m_bounty_amount_isValid;

    m_bounty_closes_date_isValid = ::OpenAPI::fromJsonValue(m_bounty_closes_date, json[QString("bounty_closes_date")]);
    m_bounty_closes_date_isSet = !json[QString("bounty_closes_date")].isNull() && m_bounty_closes_date_isValid;

    m_bounty_user_isValid = ::OpenAPI::fromJsonValue(m_bounty_user, json[QString("bounty_user")]);
    m_bounty_user_isSet = !json[QString("bounty_user")].isNull() && m_bounty_user_isValid;

    m_can_close_isValid = ::OpenAPI::fromJsonValue(m_can_close, json[QString("can_close")]);
    m_can_close_isSet = !json[QString("can_close")].isNull() && m_can_close_isValid;

    m_can_flag_isValid = ::OpenAPI::fromJsonValue(m_can_flag, json[QString("can_flag")]);
    m_can_flag_isSet = !json[QString("can_flag")].isNull() && m_can_flag_isValid;

    m_close_vote_count_isValid = ::OpenAPI::fromJsonValue(m_close_vote_count, json[QString("close_vote_count")]);
    m_close_vote_count_isSet = !json[QString("close_vote_count")].isNull() && m_close_vote_count_isValid;

    m_closed_date_isValid = ::OpenAPI::fromJsonValue(m_closed_date, json[QString("closed_date")]);
    m_closed_date_isSet = !json[QString("closed_date")].isNull() && m_closed_date_isValid;

    m_closed_details_isValid = ::OpenAPI::fromJsonValue(m_closed_details, json[QString("closed_details")]);
    m_closed_details_isSet = !json[QString("closed_details")].isNull() && m_closed_details_isValid;

    m_closed_reason_isValid = ::OpenAPI::fromJsonValue(m_closed_reason, json[QString("closed_reason")]);
    m_closed_reason_isSet = !json[QString("closed_reason")].isNull() && m_closed_reason_isValid;

    m_comment_count_isValid = ::OpenAPI::fromJsonValue(m_comment_count, json[QString("comment_count")]);
    m_comment_count_isSet = !json[QString("comment_count")].isNull() && m_comment_count_isValid;

    m_comments_isValid = ::OpenAPI::fromJsonValue(m_comments, json[QString("comments")]);
    m_comments_isSet = !json[QString("comments")].isNull() && m_comments_isValid;

    m_community_owned_date_isValid = ::OpenAPI::fromJsonValue(m_community_owned_date, json[QString("community_owned_date")]);
    m_community_owned_date_isSet = !json[QString("community_owned_date")].isNull() && m_community_owned_date_isValid;

    m_creation_date_isValid = ::OpenAPI::fromJsonValue(m_creation_date, json[QString("creation_date")]);
    m_creation_date_isSet = !json[QString("creation_date")].isNull() && m_creation_date_isValid;

    m_delete_vote_count_isValid = ::OpenAPI::fromJsonValue(m_delete_vote_count, json[QString("delete_vote_count")]);
    m_delete_vote_count_isSet = !json[QString("delete_vote_count")].isNull() && m_delete_vote_count_isValid;

    m_down_vote_count_isValid = ::OpenAPI::fromJsonValue(m_down_vote_count, json[QString("down_vote_count")]);
    m_down_vote_count_isSet = !json[QString("down_vote_count")].isNull() && m_down_vote_count_isValid;

    m_downvoted_isValid = ::OpenAPI::fromJsonValue(m_downvoted, json[QString("downvoted")]);
    m_downvoted_isSet = !json[QString("downvoted")].isNull() && m_downvoted_isValid;

    m_favorite_count_isValid = ::OpenAPI::fromJsonValue(m_favorite_count, json[QString("favorite_count")]);
    m_favorite_count_isSet = !json[QString("favorite_count")].isNull() && m_favorite_count_isValid;

    m_favorited_isValid = ::OpenAPI::fromJsonValue(m_favorited, json[QString("favorited")]);
    m_favorited_isSet = !json[QString("favorited")].isNull() && m_favorited_isValid;

    m_is_answered_isValid = ::OpenAPI::fromJsonValue(m_is_answered, json[QString("is_answered")]);
    m_is_answered_isSet = !json[QString("is_answered")].isNull() && m_is_answered_isValid;

    m_last_activity_date_isValid = ::OpenAPI::fromJsonValue(m_last_activity_date, json[QString("last_activity_date")]);
    m_last_activity_date_isSet = !json[QString("last_activity_date")].isNull() && m_last_activity_date_isValid;

    m_last_edit_date_isValid = ::OpenAPI::fromJsonValue(m_last_edit_date, json[QString("last_edit_date")]);
    m_last_edit_date_isSet = !json[QString("last_edit_date")].isNull() && m_last_edit_date_isValid;

    m_last_editor_isValid = ::OpenAPI::fromJsonValue(m_last_editor, json[QString("last_editor")]);
    m_last_editor_isSet = !json[QString("last_editor")].isNull() && m_last_editor_isValid;

    m_link_isValid = ::OpenAPI::fromJsonValue(m_link, json[QString("link")]);
    m_link_isSet = !json[QString("link")].isNull() && m_link_isValid;

    m_locked_date_isValid = ::OpenAPI::fromJsonValue(m_locked_date, json[QString("locked_date")]);
    m_locked_date_isSet = !json[QString("locked_date")].isNull() && m_locked_date_isValid;

    m_migrated_from_isValid = ::OpenAPI::fromJsonValue(m_migrated_from, json[QString("migrated_from")]);
    m_migrated_from_isSet = !json[QString("migrated_from")].isNull() && m_migrated_from_isValid;

    m_migrated_to_isValid = ::OpenAPI::fromJsonValue(m_migrated_to, json[QString("migrated_to")]);
    m_migrated_to_isSet = !json[QString("migrated_to")].isNull() && m_migrated_to_isValid;

    m_notice_isValid = ::OpenAPI::fromJsonValue(m_notice, json[QString("notice")]);
    m_notice_isSet = !json[QString("notice")].isNull() && m_notice_isValid;

    m_owner_isValid = ::OpenAPI::fromJsonValue(m_owner, json[QString("owner")]);
    m_owner_isSet = !json[QString("owner")].isNull() && m_owner_isValid;

    m_protected_date_isValid = ::OpenAPI::fromJsonValue(m_protected_date, json[QString("protected_date")]);
    m_protected_date_isSet = !json[QString("protected_date")].isNull() && m_protected_date_isValid;

    m_question_id_isValid = ::OpenAPI::fromJsonValue(m_question_id, json[QString("question_id")]);
    m_question_id_isSet = !json[QString("question_id")].isNull() && m_question_id_isValid;

    m_reopen_vote_count_isValid = ::OpenAPI::fromJsonValue(m_reopen_vote_count, json[QString("reopen_vote_count")]);
    m_reopen_vote_count_isSet = !json[QString("reopen_vote_count")].isNull() && m_reopen_vote_count_isValid;

    m_score_isValid = ::OpenAPI::fromJsonValue(m_score, json[QString("score")]);
    m_score_isSet = !json[QString("score")].isNull() && m_score_isValid;

    m_share_link_isValid = ::OpenAPI::fromJsonValue(m_share_link, json[QString("share_link")]);
    m_share_link_isSet = !json[QString("share_link")].isNull() && m_share_link_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_up_vote_count_isValid = ::OpenAPI::fromJsonValue(m_up_vote_count, json[QString("up_vote_count")]);
    m_up_vote_count_isSet = !json[QString("up_vote_count")].isNull() && m_up_vote_count_isValid;

    m_upvoted_isValid = ::OpenAPI::fromJsonValue(m_upvoted, json[QString("upvoted")]);
    m_upvoted_isSet = !json[QString("upvoted")].isNull() && m_upvoted_isValid;

    m_view_count_isValid = ::OpenAPI::fromJsonValue(m_view_count, json[QString("view_count")]);
    m_view_count_isSet = !json[QString("view_count")].isNull() && m_view_count_isValid;
}

QString OAIQuestions_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIQuestions_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_accepted_answer_id_isSet) {
        obj.insert(QString("accepted_answer_id"), ::OpenAPI::toJsonValue(m_accepted_answer_id));
    }
    if (m_answer_count_isSet) {
        obj.insert(QString("answer_count"), ::OpenAPI::toJsonValue(m_answer_count));
    }
    if (m_answers.size() > 0) {
        obj.insert(QString("answers"), ::OpenAPI::toJsonValue(m_answers));
    }
    if (m_body_isSet) {
        obj.insert(QString("body"), ::OpenAPI::toJsonValue(m_body));
    }
    if (m_body_markdown_isSet) {
        obj.insert(QString("body_markdown"), ::OpenAPI::toJsonValue(m_body_markdown));
    }
    if (m_bounty_amount_isSet) {
        obj.insert(QString("bounty_amount"), ::OpenAPI::toJsonValue(m_bounty_amount));
    }
    if (m_bounty_closes_date_isSet) {
        obj.insert(QString("bounty_closes_date"), ::OpenAPI::toJsonValue(m_bounty_closes_date));
    }
    if (m_bounty_user.isSet()) {
        obj.insert(QString("bounty_user"), ::OpenAPI::toJsonValue(m_bounty_user));
    }
    if (m_can_close_isSet) {
        obj.insert(QString("can_close"), ::OpenAPI::toJsonValue(m_can_close));
    }
    if (m_can_flag_isSet) {
        obj.insert(QString("can_flag"), ::OpenAPI::toJsonValue(m_can_flag));
    }
    if (m_close_vote_count_isSet) {
        obj.insert(QString("close_vote_count"), ::OpenAPI::toJsonValue(m_close_vote_count));
    }
    if (m_closed_date_isSet) {
        obj.insert(QString("closed_date"), ::OpenAPI::toJsonValue(m_closed_date));
    }
    if (m_closed_details.isSet()) {
        obj.insert(QString("closed_details"), ::OpenAPI::toJsonValue(m_closed_details));
    }
    if (m_closed_reason_isSet) {
        obj.insert(QString("closed_reason"), ::OpenAPI::toJsonValue(m_closed_reason));
    }
    if (m_comment_count_isSet) {
        obj.insert(QString("comment_count"), ::OpenAPI::toJsonValue(m_comment_count));
    }
    if (m_comments.size() > 0) {
        obj.insert(QString("comments"), ::OpenAPI::toJsonValue(m_comments));
    }
    if (m_community_owned_date_isSet) {
        obj.insert(QString("community_owned_date"), ::OpenAPI::toJsonValue(m_community_owned_date));
    }
    if (m_creation_date_isSet) {
        obj.insert(QString("creation_date"), ::OpenAPI::toJsonValue(m_creation_date));
    }
    if (m_delete_vote_count_isSet) {
        obj.insert(QString("delete_vote_count"), ::OpenAPI::toJsonValue(m_delete_vote_count));
    }
    if (m_down_vote_count_isSet) {
        obj.insert(QString("down_vote_count"), ::OpenAPI::toJsonValue(m_down_vote_count));
    }
    if (m_downvoted_isSet) {
        obj.insert(QString("downvoted"), ::OpenAPI::toJsonValue(m_downvoted));
    }
    if (m_favorite_count_isSet) {
        obj.insert(QString("favorite_count"), ::OpenAPI::toJsonValue(m_favorite_count));
    }
    if (m_favorited_isSet) {
        obj.insert(QString("favorited"), ::OpenAPI::toJsonValue(m_favorited));
    }
    if (m_is_answered_isSet) {
        obj.insert(QString("is_answered"), ::OpenAPI::toJsonValue(m_is_answered));
    }
    if (m_last_activity_date_isSet) {
        obj.insert(QString("last_activity_date"), ::OpenAPI::toJsonValue(m_last_activity_date));
    }
    if (m_last_edit_date_isSet) {
        obj.insert(QString("last_edit_date"), ::OpenAPI::toJsonValue(m_last_edit_date));
    }
    if (m_last_editor.isSet()) {
        obj.insert(QString("last_editor"), ::OpenAPI::toJsonValue(m_last_editor));
    }
    if (m_link_isSet) {
        obj.insert(QString("link"), ::OpenAPI::toJsonValue(m_link));
    }
    if (m_locked_date_isSet) {
        obj.insert(QString("locked_date"), ::OpenAPI::toJsonValue(m_locked_date));
    }
    if (m_migrated_from.isSet()) {
        obj.insert(QString("migrated_from"), ::OpenAPI::toJsonValue(m_migrated_from));
    }
    if (m_migrated_to.isSet()) {
        obj.insert(QString("migrated_to"), ::OpenAPI::toJsonValue(m_migrated_to));
    }
    if (m_notice.isSet()) {
        obj.insert(QString("notice"), ::OpenAPI::toJsonValue(m_notice));
    }
    if (m_owner.isSet()) {
        obj.insert(QString("owner"), ::OpenAPI::toJsonValue(m_owner));
    }
    if (m_protected_date_isSet) {
        obj.insert(QString("protected_date"), ::OpenAPI::toJsonValue(m_protected_date));
    }
    if (m_question_id_isSet) {
        obj.insert(QString("question_id"), ::OpenAPI::toJsonValue(m_question_id));
    }
    if (m_reopen_vote_count_isSet) {
        obj.insert(QString("reopen_vote_count"), ::OpenAPI::toJsonValue(m_reopen_vote_count));
    }
    if (m_score_isSet) {
        obj.insert(QString("score"), ::OpenAPI::toJsonValue(m_score));
    }
    if (m_share_link_isSet) {
        obj.insert(QString("share_link"), ::OpenAPI::toJsonValue(m_share_link));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_up_vote_count_isSet) {
        obj.insert(QString("up_vote_count"), ::OpenAPI::toJsonValue(m_up_vote_count));
    }
    if (m_upvoted_isSet) {
        obj.insert(QString("upvoted"), ::OpenAPI::toJsonValue(m_upvoted));
    }
    if (m_view_count_isSet) {
        obj.insert(QString("view_count"), ::OpenAPI::toJsonValue(m_view_count));
    }
    return obj;
}

qint32 OAIQuestions_inner::getAcceptedAnswerId() const {
    return m_accepted_answer_id;
}
void OAIQuestions_inner::setAcceptedAnswerId(const qint32 &accepted_answer_id) {
    m_accepted_answer_id = accepted_answer_id;
    m_accepted_answer_id_isSet = true;
}

bool OAIQuestions_inner::is_accepted_answer_id_Set() const{
    return m_accepted_answer_id_isSet;
}

bool OAIQuestions_inner::is_accepted_answer_id_Valid() const{
    return m_accepted_answer_id_isValid;
}

qint32 OAIQuestions_inner::getAnswerCount() const {
    return m_answer_count;
}
void OAIQuestions_inner::setAnswerCount(const qint32 &answer_count) {
    m_answer_count = answer_count;
    m_answer_count_isSet = true;
}

bool OAIQuestions_inner::is_answer_count_Set() const{
    return m_answer_count_isSet;
}

bool OAIQuestions_inner::is_answer_count_Valid() const{
    return m_answer_count_isValid;
}

QList<QJsonValue> OAIQuestions_inner::getAnswers() const {
    return m_answers;
}
void OAIQuestions_inner::setAnswers(const QList<QJsonValue> &answers) {
    m_answers = answers;
    m_answers_isSet = true;
}

bool OAIQuestions_inner::is_answers_Set() const{
    return m_answers_isSet;
}

bool OAIQuestions_inner::is_answers_Valid() const{
    return m_answers_isValid;
}

QString OAIQuestions_inner::getBody() const {
    return m_body;
}
void OAIQuestions_inner::setBody(const QString &body) {
    m_body = body;
    m_body_isSet = true;
}

bool OAIQuestions_inner::is_body_Set() const{
    return m_body_isSet;
}

bool OAIQuestions_inner::is_body_Valid() const{
    return m_body_isValid;
}

QString OAIQuestions_inner::getBodyMarkdown() const {
    return m_body_markdown;
}
void OAIQuestions_inner::setBodyMarkdown(const QString &body_markdown) {
    m_body_markdown = body_markdown;
    m_body_markdown_isSet = true;
}

bool OAIQuestions_inner::is_body_markdown_Set() const{
    return m_body_markdown_isSet;
}

bool OAIQuestions_inner::is_body_markdown_Valid() const{
    return m_body_markdown_isValid;
}

qint32 OAIQuestions_inner::getBountyAmount() const {
    return m_bounty_amount;
}
void OAIQuestions_inner::setBountyAmount(const qint32 &bounty_amount) {
    m_bounty_amount = bounty_amount;
    m_bounty_amount_isSet = true;
}

bool OAIQuestions_inner::is_bounty_amount_Set() const{
    return m_bounty_amount_isSet;
}

bool OAIQuestions_inner::is_bounty_amount_Valid() const{
    return m_bounty_amount_isValid;
}

qint32 OAIQuestions_inner::getBountyClosesDate() const {
    return m_bounty_closes_date;
}
void OAIQuestions_inner::setBountyClosesDate(const qint32 &bounty_closes_date) {
    m_bounty_closes_date = bounty_closes_date;
    m_bounty_closes_date_isSet = true;
}

bool OAIQuestions_inner::is_bounty_closes_date_Set() const{
    return m_bounty_closes_date_isSet;
}

bool OAIQuestions_inner::is_bounty_closes_date_Valid() const{
    return m_bounty_closes_date_isValid;
}

OAIAnswers_inner_last_editor OAIQuestions_inner::getBountyUser() const {
    return m_bounty_user;
}
void OAIQuestions_inner::setBountyUser(const OAIAnswers_inner_last_editor &bounty_user) {
    m_bounty_user = bounty_user;
    m_bounty_user_isSet = true;
}

bool OAIQuestions_inner::is_bounty_user_Set() const{
    return m_bounty_user_isSet;
}

bool OAIQuestions_inner::is_bounty_user_Valid() const{
    return m_bounty_user_isValid;
}

bool OAIQuestions_inner::isCanClose() const {
    return m_can_close;
}
void OAIQuestions_inner::setCanClose(const bool &can_close) {
    m_can_close = can_close;
    m_can_close_isSet = true;
}

bool OAIQuestions_inner::is_can_close_Set() const{
    return m_can_close_isSet;
}

bool OAIQuestions_inner::is_can_close_Valid() const{
    return m_can_close_isValid;
}

bool OAIQuestions_inner::isCanFlag() const {
    return m_can_flag;
}
void OAIQuestions_inner::setCanFlag(const bool &can_flag) {
    m_can_flag = can_flag;
    m_can_flag_isSet = true;
}

bool OAIQuestions_inner::is_can_flag_Set() const{
    return m_can_flag_isSet;
}

bool OAIQuestions_inner::is_can_flag_Valid() const{
    return m_can_flag_isValid;
}

qint32 OAIQuestions_inner::getCloseVoteCount() const {
    return m_close_vote_count;
}
void OAIQuestions_inner::setCloseVoteCount(const qint32 &close_vote_count) {
    m_close_vote_count = close_vote_count;
    m_close_vote_count_isSet = true;
}

bool OAIQuestions_inner::is_close_vote_count_Set() const{
    return m_close_vote_count_isSet;
}

bool OAIQuestions_inner::is_close_vote_count_Valid() const{
    return m_close_vote_count_isValid;
}

qint32 OAIQuestions_inner::getClosedDate() const {
    return m_closed_date;
}
void OAIQuestions_inner::setClosedDate(const qint32 &closed_date) {
    m_closed_date = closed_date;
    m_closed_date_isSet = true;
}

bool OAIQuestions_inner::is_closed_date_Set() const{
    return m_closed_date_isSet;
}

bool OAIQuestions_inner::is_closed_date_Valid() const{
    return m_closed_date_isValid;
}

OAIQuestions_inner_closed_details OAIQuestions_inner::getClosedDetails() const {
    return m_closed_details;
}
void OAIQuestions_inner::setClosedDetails(const OAIQuestions_inner_closed_details &closed_details) {
    m_closed_details = closed_details;
    m_closed_details_isSet = true;
}

bool OAIQuestions_inner::is_closed_details_Set() const{
    return m_closed_details_isSet;
}

bool OAIQuestions_inner::is_closed_details_Valid() const{
    return m_closed_details_isValid;
}

QString OAIQuestions_inner::getClosedReason() const {
    return m_closed_reason;
}
void OAIQuestions_inner::setClosedReason(const QString &closed_reason) {
    m_closed_reason = closed_reason;
    m_closed_reason_isSet = true;
}

bool OAIQuestions_inner::is_closed_reason_Set() const{
    return m_closed_reason_isSet;
}

bool OAIQuestions_inner::is_closed_reason_Valid() const{
    return m_closed_reason_isValid;
}

qint32 OAIQuestions_inner::getCommentCount() const {
    return m_comment_count;
}
void OAIQuestions_inner::setCommentCount(const qint32 &comment_count) {
    m_comment_count = comment_count;
    m_comment_count_isSet = true;
}

bool OAIQuestions_inner::is_comment_count_Set() const{
    return m_comment_count_isSet;
}

bool OAIQuestions_inner::is_comment_count_Valid() const{
    return m_comment_count_isValid;
}

QList<QJsonValue> OAIQuestions_inner::getComments() const {
    return m_comments;
}
void OAIQuestions_inner::setComments(const QList<QJsonValue> &comments) {
    m_comments = comments;
    m_comments_isSet = true;
}

bool OAIQuestions_inner::is_comments_Set() const{
    return m_comments_isSet;
}

bool OAIQuestions_inner::is_comments_Valid() const{
    return m_comments_isValid;
}

qint32 OAIQuestions_inner::getCommunityOwnedDate() const {
    return m_community_owned_date;
}
void OAIQuestions_inner::setCommunityOwnedDate(const qint32 &community_owned_date) {
    m_community_owned_date = community_owned_date;
    m_community_owned_date_isSet = true;
}

bool OAIQuestions_inner::is_community_owned_date_Set() const{
    return m_community_owned_date_isSet;
}

bool OAIQuestions_inner::is_community_owned_date_Valid() const{
    return m_community_owned_date_isValid;
}

qint32 OAIQuestions_inner::getCreationDate() const {
    return m_creation_date;
}
void OAIQuestions_inner::setCreationDate(const qint32 &creation_date) {
    m_creation_date = creation_date;
    m_creation_date_isSet = true;
}

bool OAIQuestions_inner::is_creation_date_Set() const{
    return m_creation_date_isSet;
}

bool OAIQuestions_inner::is_creation_date_Valid() const{
    return m_creation_date_isValid;
}

qint32 OAIQuestions_inner::getDeleteVoteCount() const {
    return m_delete_vote_count;
}
void OAIQuestions_inner::setDeleteVoteCount(const qint32 &delete_vote_count) {
    m_delete_vote_count = delete_vote_count;
    m_delete_vote_count_isSet = true;
}

bool OAIQuestions_inner::is_delete_vote_count_Set() const{
    return m_delete_vote_count_isSet;
}

bool OAIQuestions_inner::is_delete_vote_count_Valid() const{
    return m_delete_vote_count_isValid;
}

qint32 OAIQuestions_inner::getDownVoteCount() const {
    return m_down_vote_count;
}
void OAIQuestions_inner::setDownVoteCount(const qint32 &down_vote_count) {
    m_down_vote_count = down_vote_count;
    m_down_vote_count_isSet = true;
}

bool OAIQuestions_inner::is_down_vote_count_Set() const{
    return m_down_vote_count_isSet;
}

bool OAIQuestions_inner::is_down_vote_count_Valid() const{
    return m_down_vote_count_isValid;
}

bool OAIQuestions_inner::isDownvoted() const {
    return m_downvoted;
}
void OAIQuestions_inner::setDownvoted(const bool &downvoted) {
    m_downvoted = downvoted;
    m_downvoted_isSet = true;
}

bool OAIQuestions_inner::is_downvoted_Set() const{
    return m_downvoted_isSet;
}

bool OAIQuestions_inner::is_downvoted_Valid() const{
    return m_downvoted_isValid;
}

qint32 OAIQuestions_inner::getFavoriteCount() const {
    return m_favorite_count;
}
void OAIQuestions_inner::setFavoriteCount(const qint32 &favorite_count) {
    m_favorite_count = favorite_count;
    m_favorite_count_isSet = true;
}

bool OAIQuestions_inner::is_favorite_count_Set() const{
    return m_favorite_count_isSet;
}

bool OAIQuestions_inner::is_favorite_count_Valid() const{
    return m_favorite_count_isValid;
}

bool OAIQuestions_inner::isFavorited() const {
    return m_favorited;
}
void OAIQuestions_inner::setFavorited(const bool &favorited) {
    m_favorited = favorited;
    m_favorited_isSet = true;
}

bool OAIQuestions_inner::is_favorited_Set() const{
    return m_favorited_isSet;
}

bool OAIQuestions_inner::is_favorited_Valid() const{
    return m_favorited_isValid;
}

bool OAIQuestions_inner::isIsAnswered() const {
    return m_is_answered;
}
void OAIQuestions_inner::setIsAnswered(const bool &is_answered) {
    m_is_answered = is_answered;
    m_is_answered_isSet = true;
}

bool OAIQuestions_inner::is_is_answered_Set() const{
    return m_is_answered_isSet;
}

bool OAIQuestions_inner::is_is_answered_Valid() const{
    return m_is_answered_isValid;
}

qint32 OAIQuestions_inner::getLastActivityDate() const {
    return m_last_activity_date;
}
void OAIQuestions_inner::setLastActivityDate(const qint32 &last_activity_date) {
    m_last_activity_date = last_activity_date;
    m_last_activity_date_isSet = true;
}

bool OAIQuestions_inner::is_last_activity_date_Set() const{
    return m_last_activity_date_isSet;
}

bool OAIQuestions_inner::is_last_activity_date_Valid() const{
    return m_last_activity_date_isValid;
}

qint32 OAIQuestions_inner::getLastEditDate() const {
    return m_last_edit_date;
}
void OAIQuestions_inner::setLastEditDate(const qint32 &last_edit_date) {
    m_last_edit_date = last_edit_date;
    m_last_edit_date_isSet = true;
}

bool OAIQuestions_inner::is_last_edit_date_Set() const{
    return m_last_edit_date_isSet;
}

bool OAIQuestions_inner::is_last_edit_date_Valid() const{
    return m_last_edit_date_isValid;
}

OAIAnswers_inner_last_editor OAIQuestions_inner::getLastEditor() const {
    return m_last_editor;
}
void OAIQuestions_inner::setLastEditor(const OAIAnswers_inner_last_editor &last_editor) {
    m_last_editor = last_editor;
    m_last_editor_isSet = true;
}

bool OAIQuestions_inner::is_last_editor_Set() const{
    return m_last_editor_isSet;
}

bool OAIQuestions_inner::is_last_editor_Valid() const{
    return m_last_editor_isValid;
}

QString OAIQuestions_inner::getLink() const {
    return m_link;
}
void OAIQuestions_inner::setLink(const QString &link) {
    m_link = link;
    m_link_isSet = true;
}

bool OAIQuestions_inner::is_link_Set() const{
    return m_link_isSet;
}

bool OAIQuestions_inner::is_link_Valid() const{
    return m_link_isValid;
}

qint32 OAIQuestions_inner::getLockedDate() const {
    return m_locked_date;
}
void OAIQuestions_inner::setLockedDate(const qint32 &locked_date) {
    m_locked_date = locked_date;
    m_locked_date_isSet = true;
}

bool OAIQuestions_inner::is_locked_date_Set() const{
    return m_locked_date_isSet;
}

bool OAIQuestions_inner::is_locked_date_Valid() const{
    return m_locked_date_isValid;
}

OAIQuestions_inner_migrated_from OAIQuestions_inner::getMigratedFrom() const {
    return m_migrated_from;
}
void OAIQuestions_inner::setMigratedFrom(const OAIQuestions_inner_migrated_from &migrated_from) {
    m_migrated_from = migrated_from;
    m_migrated_from_isSet = true;
}

bool OAIQuestions_inner::is_migrated_from_Set() const{
    return m_migrated_from_isSet;
}

bool OAIQuestions_inner::is_migrated_from_Valid() const{
    return m_migrated_from_isValid;
}

OAIQuestions_inner_migrated_from OAIQuestions_inner::getMigratedTo() const {
    return m_migrated_to;
}
void OAIQuestions_inner::setMigratedTo(const OAIQuestions_inner_migrated_from &migrated_to) {
    m_migrated_to = migrated_to;
    m_migrated_to_isSet = true;
}

bool OAIQuestions_inner::is_migrated_to_Set() const{
    return m_migrated_to_isSet;
}

bool OAIQuestions_inner::is_migrated_to_Valid() const{
    return m_migrated_to_isValid;
}

OAIQuestions_inner_notice OAIQuestions_inner::getNotice() const {
    return m_notice;
}
void OAIQuestions_inner::setNotice(const OAIQuestions_inner_notice &notice) {
    m_notice = notice;
    m_notice_isSet = true;
}

bool OAIQuestions_inner::is_notice_Set() const{
    return m_notice_isSet;
}

bool OAIQuestions_inner::is_notice_Valid() const{
    return m_notice_isValid;
}

OAIAnswers_inner_last_editor OAIQuestions_inner::getOwner() const {
    return m_owner;
}
void OAIQuestions_inner::setOwner(const OAIAnswers_inner_last_editor &owner) {
    m_owner = owner;
    m_owner_isSet = true;
}

bool OAIQuestions_inner::is_owner_Set() const{
    return m_owner_isSet;
}

bool OAIQuestions_inner::is_owner_Valid() const{
    return m_owner_isValid;
}

qint32 OAIQuestions_inner::getProtectedDate() const {
    return m_protected_date;
}
void OAIQuestions_inner::setProtectedDate(const qint32 &protected_date) {
    m_protected_date = protected_date;
    m_protected_date_isSet = true;
}

bool OAIQuestions_inner::is_protected_date_Set() const{
    return m_protected_date_isSet;
}

bool OAIQuestions_inner::is_protected_date_Valid() const{
    return m_protected_date_isValid;
}

qint32 OAIQuestions_inner::getQuestionId() const {
    return m_question_id;
}
void OAIQuestions_inner::setQuestionId(const qint32 &question_id) {
    m_question_id = question_id;
    m_question_id_isSet = true;
}

bool OAIQuestions_inner::is_question_id_Set() const{
    return m_question_id_isSet;
}

bool OAIQuestions_inner::is_question_id_Valid() const{
    return m_question_id_isValid;
}

qint32 OAIQuestions_inner::getReopenVoteCount() const {
    return m_reopen_vote_count;
}
void OAIQuestions_inner::setReopenVoteCount(const qint32 &reopen_vote_count) {
    m_reopen_vote_count = reopen_vote_count;
    m_reopen_vote_count_isSet = true;
}

bool OAIQuestions_inner::is_reopen_vote_count_Set() const{
    return m_reopen_vote_count_isSet;
}

bool OAIQuestions_inner::is_reopen_vote_count_Valid() const{
    return m_reopen_vote_count_isValid;
}

qint32 OAIQuestions_inner::getScore() const {
    return m_score;
}
void OAIQuestions_inner::setScore(const qint32 &score) {
    m_score = score;
    m_score_isSet = true;
}

bool OAIQuestions_inner::is_score_Set() const{
    return m_score_isSet;
}

bool OAIQuestions_inner::is_score_Valid() const{
    return m_score_isValid;
}

QString OAIQuestions_inner::getShareLink() const {
    return m_share_link;
}
void OAIQuestions_inner::setShareLink(const QString &share_link) {
    m_share_link = share_link;
    m_share_link_isSet = true;
}

bool OAIQuestions_inner::is_share_link_Set() const{
    return m_share_link_isSet;
}

bool OAIQuestions_inner::is_share_link_Valid() const{
    return m_share_link_isValid;
}

QList<QJsonValue> OAIQuestions_inner::getTags() const {
    return m_tags;
}
void OAIQuestions_inner::setTags(const QList<QJsonValue> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIQuestions_inner::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIQuestions_inner::is_tags_Valid() const{
    return m_tags_isValid;
}

QString OAIQuestions_inner::getTitle() const {
    return m_title;
}
void OAIQuestions_inner::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIQuestions_inner::is_title_Set() const{
    return m_title_isSet;
}

bool OAIQuestions_inner::is_title_Valid() const{
    return m_title_isValid;
}

qint32 OAIQuestions_inner::getUpVoteCount() const {
    return m_up_vote_count;
}
void OAIQuestions_inner::setUpVoteCount(const qint32 &up_vote_count) {
    m_up_vote_count = up_vote_count;
    m_up_vote_count_isSet = true;
}

bool OAIQuestions_inner::is_up_vote_count_Set() const{
    return m_up_vote_count_isSet;
}

bool OAIQuestions_inner::is_up_vote_count_Valid() const{
    return m_up_vote_count_isValid;
}

bool OAIQuestions_inner::isUpvoted() const {
    return m_upvoted;
}
void OAIQuestions_inner::setUpvoted(const bool &upvoted) {
    m_upvoted = upvoted;
    m_upvoted_isSet = true;
}

bool OAIQuestions_inner::is_upvoted_Set() const{
    return m_upvoted_isSet;
}

bool OAIQuestions_inner::is_upvoted_Valid() const{
    return m_upvoted_isValid;
}

qint32 OAIQuestions_inner::getViewCount() const {
    return m_view_count;
}
void OAIQuestions_inner::setViewCount(const qint32 &view_count) {
    m_view_count = view_count;
    m_view_count_isSet = true;
}

bool OAIQuestions_inner::is_view_count_Set() const{
    return m_view_count_isSet;
}

bool OAIQuestions_inner::is_view_count_Valid() const{
    return m_view_count_isValid;
}

bool OAIQuestions_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_accepted_answer_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_answer_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_answers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_body_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_body_markdown_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bounty_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bounty_closes_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bounty_user.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_close_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_can_flag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_close_vote_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_closed_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_closed_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_closed_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_comment_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_comments.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_community_owned_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creation_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_delete_vote_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_down_vote_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_downvoted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_favorite_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_favorited_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_answered_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_activity_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_edit_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_editor.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_link_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_locked_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_migrated_from.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_migrated_to.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_notice.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_owner.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_protected_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_question_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reopen_vote_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_score_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_share_link_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_up_vote_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_upvoted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_view_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIQuestions_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
