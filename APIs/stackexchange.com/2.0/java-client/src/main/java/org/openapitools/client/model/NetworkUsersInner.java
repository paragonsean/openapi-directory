/*
 * StackExchange
 * Stack Exchange is a network of 130+ Q&A communities including Stack Overflow. 
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AnswersInnerLastEditorBadgeCounts;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * NetworkUsersInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:22:23.461156-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class NetworkUsersInner {
  public static final String SERIALIZED_NAME_ACCOUNT_ID = "account_id";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_ID)
  private Integer accountId;

  public static final String SERIALIZED_NAME_ANSWER_COUNT = "answer_count";
  @SerializedName(SERIALIZED_NAME_ANSWER_COUNT)
  private Integer answerCount;

  public static final String SERIALIZED_NAME_BADGE_COUNTS = "badge_counts";
  @SerializedName(SERIALIZED_NAME_BADGE_COUNTS)
  private AnswersInnerLastEditorBadgeCounts badgeCounts;

  public static final String SERIALIZED_NAME_CREATION_DATE = "creation_date";
  @SerializedName(SERIALIZED_NAME_CREATION_DATE)
  private Integer creationDate;

  public static final String SERIALIZED_NAME_LAST_ACCESS_DATE = "last_access_date";
  @SerializedName(SERIALIZED_NAME_LAST_ACCESS_DATE)
  private Integer lastAccessDate;

  public static final String SERIALIZED_NAME_QUESTION_COUNT = "question_count";
  @SerializedName(SERIALIZED_NAME_QUESTION_COUNT)
  private Integer questionCount;

  public static final String SERIALIZED_NAME_REPUTATION = "reputation";
  @SerializedName(SERIALIZED_NAME_REPUTATION)
  private Integer reputation;

  public static final String SERIALIZED_NAME_SITE_NAME = "site_name";
  @SerializedName(SERIALIZED_NAME_SITE_NAME)
  private String siteName;

  public static final String SERIALIZED_NAME_SITE_URL = "site_url";
  @SerializedName(SERIALIZED_NAME_SITE_URL)
  private String siteUrl;

  public static final String SERIALIZED_NAME_TOP_ANSWERS = "top_answers";
  @SerializedName(SERIALIZED_NAME_TOP_ANSWERS)
  private List<Object> topAnswers = new ArrayList<>();

  public static final String SERIALIZED_NAME_TOP_QUESTIONS = "top_questions";
  @SerializedName(SERIALIZED_NAME_TOP_QUESTIONS)
  private List<Object> topQuestions = new ArrayList<>();

  public static final String SERIALIZED_NAME_USER_ID = "user_id";
  @SerializedName(SERIALIZED_NAME_USER_ID)
  private Integer userId;

  public static final String SERIALIZED_NAME_USER_TYPE = "user_type";
  @SerializedName(SERIALIZED_NAME_USER_TYPE)
  private String userType;

  public NetworkUsersInner() {
  }

  public NetworkUsersInner accountId(Integer accountId) {
    this.accountId = accountId;
    return this;
  }

  /**
   * Get accountId
   * @return accountId
   */
  @javax.annotation.Nullable
  public Integer getAccountId() {
    return accountId;
  }

  public void setAccountId(Integer accountId) {
    this.accountId = accountId;
  }


  public NetworkUsersInner answerCount(Integer answerCount) {
    this.answerCount = answerCount;
    return this;
  }

  /**
   * Get answerCount
   * @return answerCount
   */
  @javax.annotation.Nullable
  public Integer getAnswerCount() {
    return answerCount;
  }

  public void setAnswerCount(Integer answerCount) {
    this.answerCount = answerCount;
  }


  public NetworkUsersInner badgeCounts(AnswersInnerLastEditorBadgeCounts badgeCounts) {
    this.badgeCounts = badgeCounts;
    return this;
  }

  /**
   * Get badgeCounts
   * @return badgeCounts
   */
  @javax.annotation.Nullable
  public AnswersInnerLastEditorBadgeCounts getBadgeCounts() {
    return badgeCounts;
  }

  public void setBadgeCounts(AnswersInnerLastEditorBadgeCounts badgeCounts) {
    this.badgeCounts = badgeCounts;
  }


  public NetworkUsersInner creationDate(Integer creationDate) {
    this.creationDate = creationDate;
    return this;
  }

  /**
   * Get creationDate
   * @return creationDate
   */
  @javax.annotation.Nullable
  public Integer getCreationDate() {
    return creationDate;
  }

  public void setCreationDate(Integer creationDate) {
    this.creationDate = creationDate;
  }


  public NetworkUsersInner lastAccessDate(Integer lastAccessDate) {
    this.lastAccessDate = lastAccessDate;
    return this;
  }

  /**
   * Get lastAccessDate
   * @return lastAccessDate
   */
  @javax.annotation.Nullable
  public Integer getLastAccessDate() {
    return lastAccessDate;
  }

  public void setLastAccessDate(Integer lastAccessDate) {
    this.lastAccessDate = lastAccessDate;
  }


  public NetworkUsersInner questionCount(Integer questionCount) {
    this.questionCount = questionCount;
    return this;
  }

  /**
   * Get questionCount
   * @return questionCount
   */
  @javax.annotation.Nullable
  public Integer getQuestionCount() {
    return questionCount;
  }

  public void setQuestionCount(Integer questionCount) {
    this.questionCount = questionCount;
  }


  public NetworkUsersInner reputation(Integer reputation) {
    this.reputation = reputation;
    return this;
  }

  /**
   * Get reputation
   * @return reputation
   */
  @javax.annotation.Nullable
  public Integer getReputation() {
    return reputation;
  }

  public void setReputation(Integer reputation) {
    this.reputation = reputation;
  }


  public NetworkUsersInner siteName(String siteName) {
    this.siteName = siteName;
    return this;
  }

  /**
   * Get siteName
   * @return siteName
   */
  @javax.annotation.Nullable
  public String getSiteName() {
    return siteName;
  }

  public void setSiteName(String siteName) {
    this.siteName = siteName;
  }


  public NetworkUsersInner siteUrl(String siteUrl) {
    this.siteUrl = siteUrl;
    return this;
  }

  /**
   * Get siteUrl
   * @return siteUrl
   */
  @javax.annotation.Nullable
  public String getSiteUrl() {
    return siteUrl;
  }

  public void setSiteUrl(String siteUrl) {
    this.siteUrl = siteUrl;
  }


  public NetworkUsersInner topAnswers(List<Object> topAnswers) {
    this.topAnswers = topAnswers;
    return this;
  }

  public NetworkUsersInner addTopAnswersItem(Object topAnswersItem) {
    if (this.topAnswers == null) {
      this.topAnswers = new ArrayList<>();
    }
    this.topAnswers.add(topAnswersItem);
    return this;
  }

  /**
   * Get topAnswers
   * @return topAnswers
   */
  @javax.annotation.Nullable
  public List<Object> getTopAnswers() {
    return topAnswers;
  }

  public void setTopAnswers(List<Object> topAnswers) {
    this.topAnswers = topAnswers;
  }


  public NetworkUsersInner topQuestions(List<Object> topQuestions) {
    this.topQuestions = topQuestions;
    return this;
  }

  public NetworkUsersInner addTopQuestionsItem(Object topQuestionsItem) {
    if (this.topQuestions == null) {
      this.topQuestions = new ArrayList<>();
    }
    this.topQuestions.add(topQuestionsItem);
    return this;
  }

  /**
   * Get topQuestions
   * @return topQuestions
   */
  @javax.annotation.Nullable
  public List<Object> getTopQuestions() {
    return topQuestions;
  }

  public void setTopQuestions(List<Object> topQuestions) {
    this.topQuestions = topQuestions;
  }


  public NetworkUsersInner userId(Integer userId) {
    this.userId = userId;
    return this;
  }

  /**
   * Get userId
   * @return userId
   */
  @javax.annotation.Nullable
  public Integer getUserId() {
    return userId;
  }

  public void setUserId(Integer userId) {
    this.userId = userId;
  }


  public NetworkUsersInner userType(String userType) {
    this.userType = userType;
    return this;
  }

  /**
   * Get userType
   * @return userType
   */
  @javax.annotation.Nullable
  public String getUserType() {
    return userType;
  }

  public void setUserType(String userType) {
    this.userType = userType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NetworkUsersInner networkUsersInner = (NetworkUsersInner) o;
    return Objects.equals(this.accountId, networkUsersInner.accountId) &&
        Objects.equals(this.answerCount, networkUsersInner.answerCount) &&
        Objects.equals(this.badgeCounts, networkUsersInner.badgeCounts) &&
        Objects.equals(this.creationDate, networkUsersInner.creationDate) &&
        Objects.equals(this.lastAccessDate, networkUsersInner.lastAccessDate) &&
        Objects.equals(this.questionCount, networkUsersInner.questionCount) &&
        Objects.equals(this.reputation, networkUsersInner.reputation) &&
        Objects.equals(this.siteName, networkUsersInner.siteName) &&
        Objects.equals(this.siteUrl, networkUsersInner.siteUrl) &&
        Objects.equals(this.topAnswers, networkUsersInner.topAnswers) &&
        Objects.equals(this.topQuestions, networkUsersInner.topQuestions) &&
        Objects.equals(this.userId, networkUsersInner.userId) &&
        Objects.equals(this.userType, networkUsersInner.userType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accountId, answerCount, badgeCounts, creationDate, lastAccessDate, questionCount, reputation, siteName, siteUrl, topAnswers, topQuestions, userId, userType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NetworkUsersInner {\n");
    sb.append("    accountId: ").append(toIndentedString(accountId)).append("\n");
    sb.append("    answerCount: ").append(toIndentedString(answerCount)).append("\n");
    sb.append("    badgeCounts: ").append(toIndentedString(badgeCounts)).append("\n");
    sb.append("    creationDate: ").append(toIndentedString(creationDate)).append("\n");
    sb.append("    lastAccessDate: ").append(toIndentedString(lastAccessDate)).append("\n");
    sb.append("    questionCount: ").append(toIndentedString(questionCount)).append("\n");
    sb.append("    reputation: ").append(toIndentedString(reputation)).append("\n");
    sb.append("    siteName: ").append(toIndentedString(siteName)).append("\n");
    sb.append("    siteUrl: ").append(toIndentedString(siteUrl)).append("\n");
    sb.append("    topAnswers: ").append(toIndentedString(topAnswers)).append("\n");
    sb.append("    topQuestions: ").append(toIndentedString(topQuestions)).append("\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("    userType: ").append(toIndentedString(userType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("account_id");
    openapiFields.add("answer_count");
    openapiFields.add("badge_counts");
    openapiFields.add("creation_date");
    openapiFields.add("last_access_date");
    openapiFields.add("question_count");
    openapiFields.add("reputation");
    openapiFields.add("site_name");
    openapiFields.add("site_url");
    openapiFields.add("top_answers");
    openapiFields.add("top_questions");
    openapiFields.add("user_id");
    openapiFields.add("user_type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to NetworkUsersInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!NetworkUsersInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in NetworkUsersInner is not found in the empty JSON string", NetworkUsersInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!NetworkUsersInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `NetworkUsersInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `badge_counts`
      if (jsonObj.get("badge_counts") != null && !jsonObj.get("badge_counts").isJsonNull()) {
        AnswersInnerLastEditorBadgeCounts.validateJsonElement(jsonObj.get("badge_counts"));
      }
      if ((jsonObj.get("site_name") != null && !jsonObj.get("site_name").isJsonNull()) && !jsonObj.get("site_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `site_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("site_name").toString()));
      }
      if ((jsonObj.get("site_url") != null && !jsonObj.get("site_url").isJsonNull()) && !jsonObj.get("site_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `site_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("site_url").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("top_answers") != null && !jsonObj.get("top_answers").isJsonNull() && !jsonObj.get("top_answers").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `top_answers` to be an array in the JSON string but got `%s`", jsonObj.get("top_answers").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("top_questions") != null && !jsonObj.get("top_questions").isJsonNull() && !jsonObj.get("top_questions").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `top_questions` to be an array in the JSON string but got `%s`", jsonObj.get("top_questions").toString()));
      }
      if ((jsonObj.get("user_type") != null && !jsonObj.get("user_type").isJsonNull()) && !jsonObj.get("user_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `user_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("user_type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!NetworkUsersInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'NetworkUsersInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<NetworkUsersInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(NetworkUsersInner.class));

       return (TypeAdapter<T>) new TypeAdapter<NetworkUsersInner>() {
           @Override
           public void write(JsonWriter out, NetworkUsersInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public NetworkUsersInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of NetworkUsersInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of NetworkUsersInner
   * @throws IOException if the JSON string is invalid with respect to NetworkUsersInner
   */
  public static NetworkUsersInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, NetworkUsersInner.class);
  }

  /**
   * Convert an instance of NetworkUsersInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

