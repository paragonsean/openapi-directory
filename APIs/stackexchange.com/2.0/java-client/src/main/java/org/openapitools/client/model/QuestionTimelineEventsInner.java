/*
 * StackExchange
 * Stack Exchange is a network of 130+ Q&A communities including Stack Overflow. 
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.AnswersInnerLastEditor;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * QuestionTimelineEventsInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:22:23.461156-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class QuestionTimelineEventsInner {
  public static final String SERIALIZED_NAME_COMMENT_ID = "comment_id";
  @SerializedName(SERIALIZED_NAME_COMMENT_ID)
  private Integer commentId;

  public static final String SERIALIZED_NAME_CREATION_DATE = "creation_date";
  @SerializedName(SERIALIZED_NAME_CREATION_DATE)
  private Integer creationDate;

  public static final String SERIALIZED_NAME_DOWN_VOTE_COUNT = "down_vote_count";
  @SerializedName(SERIALIZED_NAME_DOWN_VOTE_COUNT)
  private Integer downVoteCount;

  public static final String SERIALIZED_NAME_OWNER = "owner";
  @SerializedName(SERIALIZED_NAME_OWNER)
  private AnswersInnerLastEditor owner;

  public static final String SERIALIZED_NAME_POST_ID = "post_id";
  @SerializedName(SERIALIZED_NAME_POST_ID)
  private Integer postId;

  public static final String SERIALIZED_NAME_QUESTION_ID = "question_id";
  @SerializedName(SERIALIZED_NAME_QUESTION_ID)
  private Integer questionId;

  public static final String SERIALIZED_NAME_REVISION_GUID = "revision_guid";
  @SerializedName(SERIALIZED_NAME_REVISION_GUID)
  private String revisionGuid;

  public static final String SERIALIZED_NAME_TIMELINE_TYPE = "timeline_type";
  @SerializedName(SERIALIZED_NAME_TIMELINE_TYPE)
  private String timelineType;

  public static final String SERIALIZED_NAME_UP_VOTE_COUNT = "up_vote_count";
  @SerializedName(SERIALIZED_NAME_UP_VOTE_COUNT)
  private Integer upVoteCount;

  public static final String SERIALIZED_NAME_USER = "user";
  @SerializedName(SERIALIZED_NAME_USER)
  private AnswersInnerLastEditor user;

  public QuestionTimelineEventsInner() {
  }

  public QuestionTimelineEventsInner commentId(Integer commentId) {
    this.commentId = commentId;
    return this;
  }

  /**
   * Get commentId
   * @return commentId
   */
  @javax.annotation.Nullable
  public Integer getCommentId() {
    return commentId;
  }

  public void setCommentId(Integer commentId) {
    this.commentId = commentId;
  }


  public QuestionTimelineEventsInner creationDate(Integer creationDate) {
    this.creationDate = creationDate;
    return this;
  }

  /**
   * Get creationDate
   * @return creationDate
   */
  @javax.annotation.Nullable
  public Integer getCreationDate() {
    return creationDate;
  }

  public void setCreationDate(Integer creationDate) {
    this.creationDate = creationDate;
  }


  public QuestionTimelineEventsInner downVoteCount(Integer downVoteCount) {
    this.downVoteCount = downVoteCount;
    return this;
  }

  /**
   * Get downVoteCount
   * @return downVoteCount
   */
  @javax.annotation.Nullable
  public Integer getDownVoteCount() {
    return downVoteCount;
  }

  public void setDownVoteCount(Integer downVoteCount) {
    this.downVoteCount = downVoteCount;
  }


  public QuestionTimelineEventsInner owner(AnswersInnerLastEditor owner) {
    this.owner = owner;
    return this;
  }

  /**
   * Get owner
   * @return owner
   */
  @javax.annotation.Nullable
  public AnswersInnerLastEditor getOwner() {
    return owner;
  }

  public void setOwner(AnswersInnerLastEditor owner) {
    this.owner = owner;
  }


  public QuestionTimelineEventsInner postId(Integer postId) {
    this.postId = postId;
    return this;
  }

  /**
   * Get postId
   * @return postId
   */
  @javax.annotation.Nullable
  public Integer getPostId() {
    return postId;
  }

  public void setPostId(Integer postId) {
    this.postId = postId;
  }


  public QuestionTimelineEventsInner questionId(Integer questionId) {
    this.questionId = questionId;
    return this;
  }

  /**
   * Get questionId
   * @return questionId
   */
  @javax.annotation.Nullable
  public Integer getQuestionId() {
    return questionId;
  }

  public void setQuestionId(Integer questionId) {
    this.questionId = questionId;
  }


  public QuestionTimelineEventsInner revisionGuid(String revisionGuid) {
    this.revisionGuid = revisionGuid;
    return this;
  }

  /**
   * Get revisionGuid
   * @return revisionGuid
   */
  @javax.annotation.Nullable
  public String getRevisionGuid() {
    return revisionGuid;
  }

  public void setRevisionGuid(String revisionGuid) {
    this.revisionGuid = revisionGuid;
  }


  public QuestionTimelineEventsInner timelineType(String timelineType) {
    this.timelineType = timelineType;
    return this;
  }

  /**
   * Get timelineType
   * @return timelineType
   */
  @javax.annotation.Nullable
  public String getTimelineType() {
    return timelineType;
  }

  public void setTimelineType(String timelineType) {
    this.timelineType = timelineType;
  }


  public QuestionTimelineEventsInner upVoteCount(Integer upVoteCount) {
    this.upVoteCount = upVoteCount;
    return this;
  }

  /**
   * Get upVoteCount
   * @return upVoteCount
   */
  @javax.annotation.Nullable
  public Integer getUpVoteCount() {
    return upVoteCount;
  }

  public void setUpVoteCount(Integer upVoteCount) {
    this.upVoteCount = upVoteCount;
  }


  public QuestionTimelineEventsInner user(AnswersInnerLastEditor user) {
    this.user = user;
    return this;
  }

  /**
   * Get user
   * @return user
   */
  @javax.annotation.Nullable
  public AnswersInnerLastEditor getUser() {
    return user;
  }

  public void setUser(AnswersInnerLastEditor user) {
    this.user = user;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    QuestionTimelineEventsInner questionTimelineEventsInner = (QuestionTimelineEventsInner) o;
    return Objects.equals(this.commentId, questionTimelineEventsInner.commentId) &&
        Objects.equals(this.creationDate, questionTimelineEventsInner.creationDate) &&
        Objects.equals(this.downVoteCount, questionTimelineEventsInner.downVoteCount) &&
        Objects.equals(this.owner, questionTimelineEventsInner.owner) &&
        Objects.equals(this.postId, questionTimelineEventsInner.postId) &&
        Objects.equals(this.questionId, questionTimelineEventsInner.questionId) &&
        Objects.equals(this.revisionGuid, questionTimelineEventsInner.revisionGuid) &&
        Objects.equals(this.timelineType, questionTimelineEventsInner.timelineType) &&
        Objects.equals(this.upVoteCount, questionTimelineEventsInner.upVoteCount) &&
        Objects.equals(this.user, questionTimelineEventsInner.user);
  }

  @Override
  public int hashCode() {
    return Objects.hash(commentId, creationDate, downVoteCount, owner, postId, questionId, revisionGuid, timelineType, upVoteCount, user);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class QuestionTimelineEventsInner {\n");
    sb.append("    commentId: ").append(toIndentedString(commentId)).append("\n");
    sb.append("    creationDate: ").append(toIndentedString(creationDate)).append("\n");
    sb.append("    downVoteCount: ").append(toIndentedString(downVoteCount)).append("\n");
    sb.append("    owner: ").append(toIndentedString(owner)).append("\n");
    sb.append("    postId: ").append(toIndentedString(postId)).append("\n");
    sb.append("    questionId: ").append(toIndentedString(questionId)).append("\n");
    sb.append("    revisionGuid: ").append(toIndentedString(revisionGuid)).append("\n");
    sb.append("    timelineType: ").append(toIndentedString(timelineType)).append("\n");
    sb.append("    upVoteCount: ").append(toIndentedString(upVoteCount)).append("\n");
    sb.append("    user: ").append(toIndentedString(user)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("comment_id");
    openapiFields.add("creation_date");
    openapiFields.add("down_vote_count");
    openapiFields.add("owner");
    openapiFields.add("post_id");
    openapiFields.add("question_id");
    openapiFields.add("revision_guid");
    openapiFields.add("timeline_type");
    openapiFields.add("up_vote_count");
    openapiFields.add("user");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to QuestionTimelineEventsInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!QuestionTimelineEventsInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in QuestionTimelineEventsInner is not found in the empty JSON string", QuestionTimelineEventsInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!QuestionTimelineEventsInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `QuestionTimelineEventsInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `owner`
      if (jsonObj.get("owner") != null && !jsonObj.get("owner").isJsonNull()) {
        AnswersInnerLastEditor.validateJsonElement(jsonObj.get("owner"));
      }
      if ((jsonObj.get("revision_guid") != null && !jsonObj.get("revision_guid").isJsonNull()) && !jsonObj.get("revision_guid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `revision_guid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("revision_guid").toString()));
      }
      if ((jsonObj.get("timeline_type") != null && !jsonObj.get("timeline_type").isJsonNull()) && !jsonObj.get("timeline_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `timeline_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("timeline_type").toString()));
      }
      // validate the optional field `user`
      if (jsonObj.get("user") != null && !jsonObj.get("user").isJsonNull()) {
        AnswersInnerLastEditor.validateJsonElement(jsonObj.get("user"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!QuestionTimelineEventsInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'QuestionTimelineEventsInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<QuestionTimelineEventsInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(QuestionTimelineEventsInner.class));

       return (TypeAdapter<T>) new TypeAdapter<QuestionTimelineEventsInner>() {
           @Override
           public void write(JsonWriter out, QuestionTimelineEventsInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public QuestionTimelineEventsInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of QuestionTimelineEventsInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of QuestionTimelineEventsInner
   * @throws IOException if the JSON string is invalid with respect to QuestionTimelineEventsInner
   */
  public static QuestionTimelineEventsInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, QuestionTimelineEventsInner.class);
  }

  /**
   * Convert an instance of QuestionTimelineEventsInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

