/*
 * StackExchange
 * Stack Exchange is a network of 130+ Q&A communities including Stack Overflow. 
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AnswersInnerLastEditor;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PostsInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:22:23.461156-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PostsInner {
  public static final String SERIALIZED_NAME_BODY = "body";
  @SerializedName(SERIALIZED_NAME_BODY)
  private String body;

  public static final String SERIALIZED_NAME_BODY_MARKDOWN = "body_markdown";
  @SerializedName(SERIALIZED_NAME_BODY_MARKDOWN)
  private String bodyMarkdown;

  public static final String SERIALIZED_NAME_COMMENT_COUNT = "comment_count";
  @SerializedName(SERIALIZED_NAME_COMMENT_COUNT)
  private Integer commentCount;

  public static final String SERIALIZED_NAME_COMMENTS = "comments";
  @SerializedName(SERIALIZED_NAME_COMMENTS)
  private List<Object> comments = new ArrayList<>();

  public static final String SERIALIZED_NAME_CREATION_DATE = "creation_date";
  @SerializedName(SERIALIZED_NAME_CREATION_DATE)
  private Integer creationDate;

  public static final String SERIALIZED_NAME_DOWN_VOTE_COUNT = "down_vote_count";
  @SerializedName(SERIALIZED_NAME_DOWN_VOTE_COUNT)
  private Integer downVoteCount;

  public static final String SERIALIZED_NAME_DOWNVOTED = "downvoted";
  @SerializedName(SERIALIZED_NAME_DOWNVOTED)
  private Boolean downvoted;

  public static final String SERIALIZED_NAME_LAST_ACTIVITY_DATE = "last_activity_date";
  @SerializedName(SERIALIZED_NAME_LAST_ACTIVITY_DATE)
  private Integer lastActivityDate;

  public static final String SERIALIZED_NAME_LAST_EDIT_DATE = "last_edit_date";
  @SerializedName(SERIALIZED_NAME_LAST_EDIT_DATE)
  private Integer lastEditDate;

  public static final String SERIALIZED_NAME_LAST_EDITOR = "last_editor";
  @SerializedName(SERIALIZED_NAME_LAST_EDITOR)
  private AnswersInnerLastEditor lastEditor;

  public static final String SERIALIZED_NAME_LINK = "link";
  @SerializedName(SERIALIZED_NAME_LINK)
  private String link;

  public static final String SERIALIZED_NAME_OWNER = "owner";
  @SerializedName(SERIALIZED_NAME_OWNER)
  private AnswersInnerLastEditor owner;

  public static final String SERIALIZED_NAME_POST_ID = "post_id";
  @SerializedName(SERIALIZED_NAME_POST_ID)
  private Integer postId;

  public static final String SERIALIZED_NAME_POST_TYPE = "post_type";
  @SerializedName(SERIALIZED_NAME_POST_TYPE)
  private String postType;

  public static final String SERIALIZED_NAME_SCORE = "score";
  @SerializedName(SERIALIZED_NAME_SCORE)
  private Integer score;

  public static final String SERIALIZED_NAME_SHARE_LINK = "share_link";
  @SerializedName(SERIALIZED_NAME_SHARE_LINK)
  private String shareLink;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_UP_VOTE_COUNT = "up_vote_count";
  @SerializedName(SERIALIZED_NAME_UP_VOTE_COUNT)
  private Integer upVoteCount;

  public static final String SERIALIZED_NAME_UPVOTED = "upvoted";
  @SerializedName(SERIALIZED_NAME_UPVOTED)
  private Boolean upvoted;

  public PostsInner() {
  }

  public PostsInner body(String body) {
    this.body = body;
    return this;
  }

  /**
   * Get body
   * @return body
   */
  @javax.annotation.Nullable
  public String getBody() {
    return body;
  }

  public void setBody(String body) {
    this.body = body;
  }


  public PostsInner bodyMarkdown(String bodyMarkdown) {
    this.bodyMarkdown = bodyMarkdown;
    return this;
  }

  /**
   * Get bodyMarkdown
   * @return bodyMarkdown
   */
  @javax.annotation.Nullable
  public String getBodyMarkdown() {
    return bodyMarkdown;
  }

  public void setBodyMarkdown(String bodyMarkdown) {
    this.bodyMarkdown = bodyMarkdown;
  }


  public PostsInner commentCount(Integer commentCount) {
    this.commentCount = commentCount;
    return this;
  }

  /**
   * Get commentCount
   * @return commentCount
   */
  @javax.annotation.Nullable
  public Integer getCommentCount() {
    return commentCount;
  }

  public void setCommentCount(Integer commentCount) {
    this.commentCount = commentCount;
  }


  public PostsInner comments(List<Object> comments) {
    this.comments = comments;
    return this;
  }

  public PostsInner addCommentsItem(Object commentsItem) {
    if (this.comments == null) {
      this.comments = new ArrayList<>();
    }
    this.comments.add(commentsItem);
    return this;
  }

  /**
   * Get comments
   * @return comments
   */
  @javax.annotation.Nullable
  public List<Object> getComments() {
    return comments;
  }

  public void setComments(List<Object> comments) {
    this.comments = comments;
  }


  public PostsInner creationDate(Integer creationDate) {
    this.creationDate = creationDate;
    return this;
  }

  /**
   * Get creationDate
   * @return creationDate
   */
  @javax.annotation.Nullable
  public Integer getCreationDate() {
    return creationDate;
  }

  public void setCreationDate(Integer creationDate) {
    this.creationDate = creationDate;
  }


  public PostsInner downVoteCount(Integer downVoteCount) {
    this.downVoteCount = downVoteCount;
    return this;
  }

  /**
   * Get downVoteCount
   * @return downVoteCount
   */
  @javax.annotation.Nullable
  public Integer getDownVoteCount() {
    return downVoteCount;
  }

  public void setDownVoteCount(Integer downVoteCount) {
    this.downVoteCount = downVoteCount;
  }


  public PostsInner downvoted(Boolean downvoted) {
    this.downvoted = downvoted;
    return this;
  }

  /**
   * Get downvoted
   * @return downvoted
   */
  @javax.annotation.Nullable
  public Boolean getDownvoted() {
    return downvoted;
  }

  public void setDownvoted(Boolean downvoted) {
    this.downvoted = downvoted;
  }


  public PostsInner lastActivityDate(Integer lastActivityDate) {
    this.lastActivityDate = lastActivityDate;
    return this;
  }

  /**
   * Get lastActivityDate
   * @return lastActivityDate
   */
  @javax.annotation.Nullable
  public Integer getLastActivityDate() {
    return lastActivityDate;
  }

  public void setLastActivityDate(Integer lastActivityDate) {
    this.lastActivityDate = lastActivityDate;
  }


  public PostsInner lastEditDate(Integer lastEditDate) {
    this.lastEditDate = lastEditDate;
    return this;
  }

  /**
   * Get lastEditDate
   * @return lastEditDate
   */
  @javax.annotation.Nullable
  public Integer getLastEditDate() {
    return lastEditDate;
  }

  public void setLastEditDate(Integer lastEditDate) {
    this.lastEditDate = lastEditDate;
  }


  public PostsInner lastEditor(AnswersInnerLastEditor lastEditor) {
    this.lastEditor = lastEditor;
    return this;
  }

  /**
   * Get lastEditor
   * @return lastEditor
   */
  @javax.annotation.Nullable
  public AnswersInnerLastEditor getLastEditor() {
    return lastEditor;
  }

  public void setLastEditor(AnswersInnerLastEditor lastEditor) {
    this.lastEditor = lastEditor;
  }


  public PostsInner link(String link) {
    this.link = link;
    return this;
  }

  /**
   * Get link
   * @return link
   */
  @javax.annotation.Nullable
  public String getLink() {
    return link;
  }

  public void setLink(String link) {
    this.link = link;
  }


  public PostsInner owner(AnswersInnerLastEditor owner) {
    this.owner = owner;
    return this;
  }

  /**
   * Get owner
   * @return owner
   */
  @javax.annotation.Nullable
  public AnswersInnerLastEditor getOwner() {
    return owner;
  }

  public void setOwner(AnswersInnerLastEditor owner) {
    this.owner = owner;
  }


  public PostsInner postId(Integer postId) {
    this.postId = postId;
    return this;
  }

  /**
   * Get postId
   * @return postId
   */
  @javax.annotation.Nullable
  public Integer getPostId() {
    return postId;
  }

  public void setPostId(Integer postId) {
    this.postId = postId;
  }


  public PostsInner postType(String postType) {
    this.postType = postType;
    return this;
  }

  /**
   * Get postType
   * @return postType
   */
  @javax.annotation.Nullable
  public String getPostType() {
    return postType;
  }

  public void setPostType(String postType) {
    this.postType = postType;
  }


  public PostsInner score(Integer score) {
    this.score = score;
    return this;
  }

  /**
   * Get score
   * @return score
   */
  @javax.annotation.Nullable
  public Integer getScore() {
    return score;
  }

  public void setScore(Integer score) {
    this.score = score;
  }


  public PostsInner shareLink(String shareLink) {
    this.shareLink = shareLink;
    return this;
  }

  /**
   * Get shareLink
   * @return shareLink
   */
  @javax.annotation.Nullable
  public String getShareLink() {
    return shareLink;
  }

  public void setShareLink(String shareLink) {
    this.shareLink = shareLink;
  }


  public PostsInner title(String title) {
    this.title = title;
    return this;
  }

  /**
   * Get title
   * @return title
   */
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }


  public PostsInner upVoteCount(Integer upVoteCount) {
    this.upVoteCount = upVoteCount;
    return this;
  }

  /**
   * Get upVoteCount
   * @return upVoteCount
   */
  @javax.annotation.Nullable
  public Integer getUpVoteCount() {
    return upVoteCount;
  }

  public void setUpVoteCount(Integer upVoteCount) {
    this.upVoteCount = upVoteCount;
  }


  public PostsInner upvoted(Boolean upvoted) {
    this.upvoted = upvoted;
    return this;
  }

  /**
   * Get upvoted
   * @return upvoted
   */
  @javax.annotation.Nullable
  public Boolean getUpvoted() {
    return upvoted;
  }

  public void setUpvoted(Boolean upvoted) {
    this.upvoted = upvoted;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PostsInner postsInner = (PostsInner) o;
    return Objects.equals(this.body, postsInner.body) &&
        Objects.equals(this.bodyMarkdown, postsInner.bodyMarkdown) &&
        Objects.equals(this.commentCount, postsInner.commentCount) &&
        Objects.equals(this.comments, postsInner.comments) &&
        Objects.equals(this.creationDate, postsInner.creationDate) &&
        Objects.equals(this.downVoteCount, postsInner.downVoteCount) &&
        Objects.equals(this.downvoted, postsInner.downvoted) &&
        Objects.equals(this.lastActivityDate, postsInner.lastActivityDate) &&
        Objects.equals(this.lastEditDate, postsInner.lastEditDate) &&
        Objects.equals(this.lastEditor, postsInner.lastEditor) &&
        Objects.equals(this.link, postsInner.link) &&
        Objects.equals(this.owner, postsInner.owner) &&
        Objects.equals(this.postId, postsInner.postId) &&
        Objects.equals(this.postType, postsInner.postType) &&
        Objects.equals(this.score, postsInner.score) &&
        Objects.equals(this.shareLink, postsInner.shareLink) &&
        Objects.equals(this.title, postsInner.title) &&
        Objects.equals(this.upVoteCount, postsInner.upVoteCount) &&
        Objects.equals(this.upvoted, postsInner.upvoted);
  }

  @Override
  public int hashCode() {
    return Objects.hash(body, bodyMarkdown, commentCount, comments, creationDate, downVoteCount, downvoted, lastActivityDate, lastEditDate, lastEditor, link, owner, postId, postType, score, shareLink, title, upVoteCount, upvoted);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PostsInner {\n");
    sb.append("    body: ").append(toIndentedString(body)).append("\n");
    sb.append("    bodyMarkdown: ").append(toIndentedString(bodyMarkdown)).append("\n");
    sb.append("    commentCount: ").append(toIndentedString(commentCount)).append("\n");
    sb.append("    comments: ").append(toIndentedString(comments)).append("\n");
    sb.append("    creationDate: ").append(toIndentedString(creationDate)).append("\n");
    sb.append("    downVoteCount: ").append(toIndentedString(downVoteCount)).append("\n");
    sb.append("    downvoted: ").append(toIndentedString(downvoted)).append("\n");
    sb.append("    lastActivityDate: ").append(toIndentedString(lastActivityDate)).append("\n");
    sb.append("    lastEditDate: ").append(toIndentedString(lastEditDate)).append("\n");
    sb.append("    lastEditor: ").append(toIndentedString(lastEditor)).append("\n");
    sb.append("    link: ").append(toIndentedString(link)).append("\n");
    sb.append("    owner: ").append(toIndentedString(owner)).append("\n");
    sb.append("    postId: ").append(toIndentedString(postId)).append("\n");
    sb.append("    postType: ").append(toIndentedString(postType)).append("\n");
    sb.append("    score: ").append(toIndentedString(score)).append("\n");
    sb.append("    shareLink: ").append(toIndentedString(shareLink)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    upVoteCount: ").append(toIndentedString(upVoteCount)).append("\n");
    sb.append("    upvoted: ").append(toIndentedString(upvoted)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("body");
    openapiFields.add("body_markdown");
    openapiFields.add("comment_count");
    openapiFields.add("comments");
    openapiFields.add("creation_date");
    openapiFields.add("down_vote_count");
    openapiFields.add("downvoted");
    openapiFields.add("last_activity_date");
    openapiFields.add("last_edit_date");
    openapiFields.add("last_editor");
    openapiFields.add("link");
    openapiFields.add("owner");
    openapiFields.add("post_id");
    openapiFields.add("post_type");
    openapiFields.add("score");
    openapiFields.add("share_link");
    openapiFields.add("title");
    openapiFields.add("up_vote_count");
    openapiFields.add("upvoted");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PostsInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PostsInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PostsInner is not found in the empty JSON string", PostsInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PostsInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PostsInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("body") != null && !jsonObj.get("body").isJsonNull()) && !jsonObj.get("body").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `body` to be a primitive type in the JSON string but got `%s`", jsonObj.get("body").toString()));
      }
      if ((jsonObj.get("body_markdown") != null && !jsonObj.get("body_markdown").isJsonNull()) && !jsonObj.get("body_markdown").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `body_markdown` to be a primitive type in the JSON string but got `%s`", jsonObj.get("body_markdown").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("comments") != null && !jsonObj.get("comments").isJsonNull() && !jsonObj.get("comments").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `comments` to be an array in the JSON string but got `%s`", jsonObj.get("comments").toString()));
      }
      // validate the optional field `last_editor`
      if (jsonObj.get("last_editor") != null && !jsonObj.get("last_editor").isJsonNull()) {
        AnswersInnerLastEditor.validateJsonElement(jsonObj.get("last_editor"));
      }
      if ((jsonObj.get("link") != null && !jsonObj.get("link").isJsonNull()) && !jsonObj.get("link").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `link` to be a primitive type in the JSON string but got `%s`", jsonObj.get("link").toString()));
      }
      // validate the optional field `owner`
      if (jsonObj.get("owner") != null && !jsonObj.get("owner").isJsonNull()) {
        AnswersInnerLastEditor.validateJsonElement(jsonObj.get("owner"));
      }
      if ((jsonObj.get("post_type") != null && !jsonObj.get("post_type").isJsonNull()) && !jsonObj.get("post_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `post_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("post_type").toString()));
      }
      if ((jsonObj.get("share_link") != null && !jsonObj.get("share_link").isJsonNull()) && !jsonObj.get("share_link").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `share_link` to be a primitive type in the JSON string but got `%s`", jsonObj.get("share_link").toString()));
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PostsInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PostsInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PostsInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PostsInner.class));

       return (TypeAdapter<T>) new TypeAdapter<PostsInner>() {
           @Override
           public void write(JsonWriter out, PostsInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PostsInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PostsInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PostsInner
   * @throws IOException if the JSON string is invalid with respect to PostsInner
   */
  public static PostsInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PostsInner.class);
  }

  /**
   * Convert an instance of PostsInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

