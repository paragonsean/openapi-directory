/*
 * StackExchange
 * Stack Exchange is a network of 130+ Q&A communities including Stack Overflow. 
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ReputationChangesInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:22:23.461156-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ReputationChangesInner {
  public static final String SERIALIZED_NAME_LINK = "link";
  @SerializedName(SERIALIZED_NAME_LINK)
  private String link;

  public static final String SERIALIZED_NAME_ON_DATE = "on_date";
  @SerializedName(SERIALIZED_NAME_ON_DATE)
  private Integer onDate;

  public static final String SERIALIZED_NAME_POST_ID = "post_id";
  @SerializedName(SERIALIZED_NAME_POST_ID)
  private Integer postId;

  public static final String SERIALIZED_NAME_POST_TYPE = "post_type";
  @SerializedName(SERIALIZED_NAME_POST_TYPE)
  private String postType;

  public static final String SERIALIZED_NAME_REPUTATION_CHANGE = "reputation_change";
  @SerializedName(SERIALIZED_NAME_REPUTATION_CHANGE)
  private Integer reputationChange;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_USER_ID = "user_id";
  @SerializedName(SERIALIZED_NAME_USER_ID)
  private Integer userId;

  public static final String SERIALIZED_NAME_VOTE_TYPE = "vote_type";
  @SerializedName(SERIALIZED_NAME_VOTE_TYPE)
  private String voteType;

  public ReputationChangesInner() {
  }

  public ReputationChangesInner link(String link) {
    this.link = link;
    return this;
  }

  /**
   * Get link
   * @return link
   */
  @javax.annotation.Nullable
  public String getLink() {
    return link;
  }

  public void setLink(String link) {
    this.link = link;
  }


  public ReputationChangesInner onDate(Integer onDate) {
    this.onDate = onDate;
    return this;
  }

  /**
   * Get onDate
   * @return onDate
   */
  @javax.annotation.Nullable
  public Integer getOnDate() {
    return onDate;
  }

  public void setOnDate(Integer onDate) {
    this.onDate = onDate;
  }


  public ReputationChangesInner postId(Integer postId) {
    this.postId = postId;
    return this;
  }

  /**
   * Get postId
   * @return postId
   */
  @javax.annotation.Nullable
  public Integer getPostId() {
    return postId;
  }

  public void setPostId(Integer postId) {
    this.postId = postId;
  }


  public ReputationChangesInner postType(String postType) {
    this.postType = postType;
    return this;
  }

  /**
   * Get postType
   * @return postType
   */
  @javax.annotation.Nullable
  public String getPostType() {
    return postType;
  }

  public void setPostType(String postType) {
    this.postType = postType;
  }


  public ReputationChangesInner reputationChange(Integer reputationChange) {
    this.reputationChange = reputationChange;
    return this;
  }

  /**
   * Get reputationChange
   * @return reputationChange
   */
  @javax.annotation.Nullable
  public Integer getReputationChange() {
    return reputationChange;
  }

  public void setReputationChange(Integer reputationChange) {
    this.reputationChange = reputationChange;
  }


  public ReputationChangesInner title(String title) {
    this.title = title;
    return this;
  }

  /**
   * Get title
   * @return title
   */
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }


  public ReputationChangesInner userId(Integer userId) {
    this.userId = userId;
    return this;
  }

  /**
   * Get userId
   * @return userId
   */
  @javax.annotation.Nullable
  public Integer getUserId() {
    return userId;
  }

  public void setUserId(Integer userId) {
    this.userId = userId;
  }


  public ReputationChangesInner voteType(String voteType) {
    this.voteType = voteType;
    return this;
  }

  /**
   * Get voteType
   * @return voteType
   */
  @javax.annotation.Nullable
  public String getVoteType() {
    return voteType;
  }

  public void setVoteType(String voteType) {
    this.voteType = voteType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReputationChangesInner reputationChangesInner = (ReputationChangesInner) o;
    return Objects.equals(this.link, reputationChangesInner.link) &&
        Objects.equals(this.onDate, reputationChangesInner.onDate) &&
        Objects.equals(this.postId, reputationChangesInner.postId) &&
        Objects.equals(this.postType, reputationChangesInner.postType) &&
        Objects.equals(this.reputationChange, reputationChangesInner.reputationChange) &&
        Objects.equals(this.title, reputationChangesInner.title) &&
        Objects.equals(this.userId, reputationChangesInner.userId) &&
        Objects.equals(this.voteType, reputationChangesInner.voteType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(link, onDate, postId, postType, reputationChange, title, userId, voteType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReputationChangesInner {\n");
    sb.append("    link: ").append(toIndentedString(link)).append("\n");
    sb.append("    onDate: ").append(toIndentedString(onDate)).append("\n");
    sb.append("    postId: ").append(toIndentedString(postId)).append("\n");
    sb.append("    postType: ").append(toIndentedString(postType)).append("\n");
    sb.append("    reputationChange: ").append(toIndentedString(reputationChange)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("    voteType: ").append(toIndentedString(voteType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("link");
    openapiFields.add("on_date");
    openapiFields.add("post_id");
    openapiFields.add("post_type");
    openapiFields.add("reputation_change");
    openapiFields.add("title");
    openapiFields.add("user_id");
    openapiFields.add("vote_type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ReputationChangesInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ReputationChangesInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ReputationChangesInner is not found in the empty JSON string", ReputationChangesInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ReputationChangesInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ReputationChangesInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("link") != null && !jsonObj.get("link").isJsonNull()) && !jsonObj.get("link").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `link` to be a primitive type in the JSON string but got `%s`", jsonObj.get("link").toString()));
      }
      if ((jsonObj.get("post_type") != null && !jsonObj.get("post_type").isJsonNull()) && !jsonObj.get("post_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `post_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("post_type").toString()));
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      if ((jsonObj.get("vote_type") != null && !jsonObj.get("vote_type").isJsonNull()) && !jsonObj.get("vote_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vote_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vote_type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ReputationChangesInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ReputationChangesInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ReputationChangesInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ReputationChangesInner.class));

       return (TypeAdapter<T>) new TypeAdapter<ReputationChangesInner>() {
           @Override
           public void write(JsonWriter out, ReputationChangesInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ReputationChangesInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ReputationChangesInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ReputationChangesInner
   * @throws IOException if the JSON string is invalid with respect to ReputationChangesInner
   */
  public static ReputationChangesInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ReputationChangesInner.class);
  }

  /**
   * Convert an instance of ReputationChangesInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

