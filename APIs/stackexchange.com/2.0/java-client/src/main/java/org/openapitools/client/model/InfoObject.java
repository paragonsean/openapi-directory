/*
 * StackExchange
 * Stack Exchange is a network of 130+ Q&A communities including Stack Overflow. 
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;
import org.openapitools.client.model.InboxItemsInnerSite;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * InfoObject
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:22:23.461156-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class InfoObject {
  public static final String SERIALIZED_NAME_ANSWERS_PER_MINUTE = "answers_per_minute";
  @SerializedName(SERIALIZED_NAME_ANSWERS_PER_MINUTE)
  private BigDecimal answersPerMinute;

  public static final String SERIALIZED_NAME_API_REVISION = "api_revision";
  @SerializedName(SERIALIZED_NAME_API_REVISION)
  private String apiRevision;

  public static final String SERIALIZED_NAME_BADGES_PER_MINUTE = "badges_per_minute";
  @SerializedName(SERIALIZED_NAME_BADGES_PER_MINUTE)
  private BigDecimal badgesPerMinute;

  public static final String SERIALIZED_NAME_NEW_ACTIVE_USERS = "new_active_users";
  @SerializedName(SERIALIZED_NAME_NEW_ACTIVE_USERS)
  private Integer newActiveUsers;

  public static final String SERIALIZED_NAME_QUESTIONS_PER_MINUTE = "questions_per_minute";
  @SerializedName(SERIALIZED_NAME_QUESTIONS_PER_MINUTE)
  private BigDecimal questionsPerMinute;

  public static final String SERIALIZED_NAME_SITE = "site";
  @SerializedName(SERIALIZED_NAME_SITE)
  private InboxItemsInnerSite site;

  public static final String SERIALIZED_NAME_TOTAL_ACCEPTED = "total_accepted";
  @SerializedName(SERIALIZED_NAME_TOTAL_ACCEPTED)
  private Integer totalAccepted;

  public static final String SERIALIZED_NAME_TOTAL_ANSWERS = "total_answers";
  @SerializedName(SERIALIZED_NAME_TOTAL_ANSWERS)
  private Integer totalAnswers;

  public static final String SERIALIZED_NAME_TOTAL_BADGES = "total_badges";
  @SerializedName(SERIALIZED_NAME_TOTAL_BADGES)
  private Integer totalBadges;

  public static final String SERIALIZED_NAME_TOTAL_COMMENTS = "total_comments";
  @SerializedName(SERIALIZED_NAME_TOTAL_COMMENTS)
  private Integer totalComments;

  public static final String SERIALIZED_NAME_TOTAL_QUESTIONS = "total_questions";
  @SerializedName(SERIALIZED_NAME_TOTAL_QUESTIONS)
  private Integer totalQuestions;

  public static final String SERIALIZED_NAME_TOTAL_UNANSWERED = "total_unanswered";
  @SerializedName(SERIALIZED_NAME_TOTAL_UNANSWERED)
  private Integer totalUnanswered;

  public static final String SERIALIZED_NAME_TOTAL_USERS = "total_users";
  @SerializedName(SERIALIZED_NAME_TOTAL_USERS)
  private Integer totalUsers;

  public static final String SERIALIZED_NAME_TOTAL_VOTES = "total_votes";
  @SerializedName(SERIALIZED_NAME_TOTAL_VOTES)
  private Integer totalVotes;

  public InfoObject() {
  }

  public InfoObject answersPerMinute(BigDecimal answersPerMinute) {
    this.answersPerMinute = answersPerMinute;
    return this;
  }

  /**
   * Get answersPerMinute
   * @return answersPerMinute
   */
  @javax.annotation.Nullable
  public BigDecimal getAnswersPerMinute() {
    return answersPerMinute;
  }

  public void setAnswersPerMinute(BigDecimal answersPerMinute) {
    this.answersPerMinute = answersPerMinute;
  }


  public InfoObject apiRevision(String apiRevision) {
    this.apiRevision = apiRevision;
    return this;
  }

  /**
   * Get apiRevision
   * @return apiRevision
   */
  @javax.annotation.Nullable
  public String getApiRevision() {
    return apiRevision;
  }

  public void setApiRevision(String apiRevision) {
    this.apiRevision = apiRevision;
  }


  public InfoObject badgesPerMinute(BigDecimal badgesPerMinute) {
    this.badgesPerMinute = badgesPerMinute;
    return this;
  }

  /**
   * Get badgesPerMinute
   * @return badgesPerMinute
   */
  @javax.annotation.Nullable
  public BigDecimal getBadgesPerMinute() {
    return badgesPerMinute;
  }

  public void setBadgesPerMinute(BigDecimal badgesPerMinute) {
    this.badgesPerMinute = badgesPerMinute;
  }


  public InfoObject newActiveUsers(Integer newActiveUsers) {
    this.newActiveUsers = newActiveUsers;
    return this;
  }

  /**
   * Get newActiveUsers
   * @return newActiveUsers
   */
  @javax.annotation.Nullable
  public Integer getNewActiveUsers() {
    return newActiveUsers;
  }

  public void setNewActiveUsers(Integer newActiveUsers) {
    this.newActiveUsers = newActiveUsers;
  }


  public InfoObject questionsPerMinute(BigDecimal questionsPerMinute) {
    this.questionsPerMinute = questionsPerMinute;
    return this;
  }

  /**
   * Get questionsPerMinute
   * @return questionsPerMinute
   */
  @javax.annotation.Nullable
  public BigDecimal getQuestionsPerMinute() {
    return questionsPerMinute;
  }

  public void setQuestionsPerMinute(BigDecimal questionsPerMinute) {
    this.questionsPerMinute = questionsPerMinute;
  }


  public InfoObject site(InboxItemsInnerSite site) {
    this.site = site;
    return this;
  }

  /**
   * Get site
   * @return site
   */
  @javax.annotation.Nullable
  public InboxItemsInnerSite getSite() {
    return site;
  }

  public void setSite(InboxItemsInnerSite site) {
    this.site = site;
  }


  public InfoObject totalAccepted(Integer totalAccepted) {
    this.totalAccepted = totalAccepted;
    return this;
  }

  /**
   * Get totalAccepted
   * @return totalAccepted
   */
  @javax.annotation.Nullable
  public Integer getTotalAccepted() {
    return totalAccepted;
  }

  public void setTotalAccepted(Integer totalAccepted) {
    this.totalAccepted = totalAccepted;
  }


  public InfoObject totalAnswers(Integer totalAnswers) {
    this.totalAnswers = totalAnswers;
    return this;
  }

  /**
   * Get totalAnswers
   * @return totalAnswers
   */
  @javax.annotation.Nullable
  public Integer getTotalAnswers() {
    return totalAnswers;
  }

  public void setTotalAnswers(Integer totalAnswers) {
    this.totalAnswers = totalAnswers;
  }


  public InfoObject totalBadges(Integer totalBadges) {
    this.totalBadges = totalBadges;
    return this;
  }

  /**
   * Get totalBadges
   * @return totalBadges
   */
  @javax.annotation.Nullable
  public Integer getTotalBadges() {
    return totalBadges;
  }

  public void setTotalBadges(Integer totalBadges) {
    this.totalBadges = totalBadges;
  }


  public InfoObject totalComments(Integer totalComments) {
    this.totalComments = totalComments;
    return this;
  }

  /**
   * Get totalComments
   * @return totalComments
   */
  @javax.annotation.Nullable
  public Integer getTotalComments() {
    return totalComments;
  }

  public void setTotalComments(Integer totalComments) {
    this.totalComments = totalComments;
  }


  public InfoObject totalQuestions(Integer totalQuestions) {
    this.totalQuestions = totalQuestions;
    return this;
  }

  /**
   * Get totalQuestions
   * @return totalQuestions
   */
  @javax.annotation.Nullable
  public Integer getTotalQuestions() {
    return totalQuestions;
  }

  public void setTotalQuestions(Integer totalQuestions) {
    this.totalQuestions = totalQuestions;
  }


  public InfoObject totalUnanswered(Integer totalUnanswered) {
    this.totalUnanswered = totalUnanswered;
    return this;
  }

  /**
   * Get totalUnanswered
   * @return totalUnanswered
   */
  @javax.annotation.Nullable
  public Integer getTotalUnanswered() {
    return totalUnanswered;
  }

  public void setTotalUnanswered(Integer totalUnanswered) {
    this.totalUnanswered = totalUnanswered;
  }


  public InfoObject totalUsers(Integer totalUsers) {
    this.totalUsers = totalUsers;
    return this;
  }

  /**
   * Get totalUsers
   * @return totalUsers
   */
  @javax.annotation.Nullable
  public Integer getTotalUsers() {
    return totalUsers;
  }

  public void setTotalUsers(Integer totalUsers) {
    this.totalUsers = totalUsers;
  }


  public InfoObject totalVotes(Integer totalVotes) {
    this.totalVotes = totalVotes;
    return this;
  }

  /**
   * Get totalVotes
   * @return totalVotes
   */
  @javax.annotation.Nullable
  public Integer getTotalVotes() {
    return totalVotes;
  }

  public void setTotalVotes(Integer totalVotes) {
    this.totalVotes = totalVotes;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InfoObject infoObject = (InfoObject) o;
    return Objects.equals(this.answersPerMinute, infoObject.answersPerMinute) &&
        Objects.equals(this.apiRevision, infoObject.apiRevision) &&
        Objects.equals(this.badgesPerMinute, infoObject.badgesPerMinute) &&
        Objects.equals(this.newActiveUsers, infoObject.newActiveUsers) &&
        Objects.equals(this.questionsPerMinute, infoObject.questionsPerMinute) &&
        Objects.equals(this.site, infoObject.site) &&
        Objects.equals(this.totalAccepted, infoObject.totalAccepted) &&
        Objects.equals(this.totalAnswers, infoObject.totalAnswers) &&
        Objects.equals(this.totalBadges, infoObject.totalBadges) &&
        Objects.equals(this.totalComments, infoObject.totalComments) &&
        Objects.equals(this.totalQuestions, infoObject.totalQuestions) &&
        Objects.equals(this.totalUnanswered, infoObject.totalUnanswered) &&
        Objects.equals(this.totalUsers, infoObject.totalUsers) &&
        Objects.equals(this.totalVotes, infoObject.totalVotes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(answersPerMinute, apiRevision, badgesPerMinute, newActiveUsers, questionsPerMinute, site, totalAccepted, totalAnswers, totalBadges, totalComments, totalQuestions, totalUnanswered, totalUsers, totalVotes);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InfoObject {\n");
    sb.append("    answersPerMinute: ").append(toIndentedString(answersPerMinute)).append("\n");
    sb.append("    apiRevision: ").append(toIndentedString(apiRevision)).append("\n");
    sb.append("    badgesPerMinute: ").append(toIndentedString(badgesPerMinute)).append("\n");
    sb.append("    newActiveUsers: ").append(toIndentedString(newActiveUsers)).append("\n");
    sb.append("    questionsPerMinute: ").append(toIndentedString(questionsPerMinute)).append("\n");
    sb.append("    site: ").append(toIndentedString(site)).append("\n");
    sb.append("    totalAccepted: ").append(toIndentedString(totalAccepted)).append("\n");
    sb.append("    totalAnswers: ").append(toIndentedString(totalAnswers)).append("\n");
    sb.append("    totalBadges: ").append(toIndentedString(totalBadges)).append("\n");
    sb.append("    totalComments: ").append(toIndentedString(totalComments)).append("\n");
    sb.append("    totalQuestions: ").append(toIndentedString(totalQuestions)).append("\n");
    sb.append("    totalUnanswered: ").append(toIndentedString(totalUnanswered)).append("\n");
    sb.append("    totalUsers: ").append(toIndentedString(totalUsers)).append("\n");
    sb.append("    totalVotes: ").append(toIndentedString(totalVotes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("answers_per_minute");
    openapiFields.add("api_revision");
    openapiFields.add("badges_per_minute");
    openapiFields.add("new_active_users");
    openapiFields.add("questions_per_minute");
    openapiFields.add("site");
    openapiFields.add("total_accepted");
    openapiFields.add("total_answers");
    openapiFields.add("total_badges");
    openapiFields.add("total_comments");
    openapiFields.add("total_questions");
    openapiFields.add("total_unanswered");
    openapiFields.add("total_users");
    openapiFields.add("total_votes");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to InfoObject
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!InfoObject.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in InfoObject is not found in the empty JSON string", InfoObject.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!InfoObject.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `InfoObject` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("api_revision") != null && !jsonObj.get("api_revision").isJsonNull()) && !jsonObj.get("api_revision").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `api_revision` to be a primitive type in the JSON string but got `%s`", jsonObj.get("api_revision").toString()));
      }
      // validate the optional field `site`
      if (jsonObj.get("site") != null && !jsonObj.get("site").isJsonNull()) {
        InboxItemsInnerSite.validateJsonElement(jsonObj.get("site"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!InfoObject.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'InfoObject' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<InfoObject> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(InfoObject.class));

       return (TypeAdapter<T>) new TypeAdapter<InfoObject>() {
           @Override
           public void write(JsonWriter out, InfoObject value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public InfoObject read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of InfoObject given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of InfoObject
   * @throws IOException if the JSON string is invalid with respect to InfoObject
   */
  public static InfoObject fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, InfoObject.class);
  }

  /**
   * Convert an instance of InfoObject to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

