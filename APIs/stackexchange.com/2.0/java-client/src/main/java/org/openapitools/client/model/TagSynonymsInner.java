/*
 * StackExchange
 * Stack Exchange is a network of 130+ Q&A communities including Stack Overflow. 
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * TagSynonymsInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:22:23.461156-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TagSynonymsInner {
  public static final String SERIALIZED_NAME_APPLIED_COUNT = "applied_count";
  @SerializedName(SERIALIZED_NAME_APPLIED_COUNT)
  private Integer appliedCount;

  public static final String SERIALIZED_NAME_CREATION_DATE = "creation_date";
  @SerializedName(SERIALIZED_NAME_CREATION_DATE)
  private Integer creationDate;

  public static final String SERIALIZED_NAME_FROM_TAG = "from_tag";
  @SerializedName(SERIALIZED_NAME_FROM_TAG)
  private String fromTag;

  public static final String SERIALIZED_NAME_LAST_APPLIED_DATE = "last_applied_date";
  @SerializedName(SERIALIZED_NAME_LAST_APPLIED_DATE)
  private Integer lastAppliedDate;

  public static final String SERIALIZED_NAME_TO_TAG = "to_tag";
  @SerializedName(SERIALIZED_NAME_TO_TAG)
  private String toTag;

  public TagSynonymsInner() {
  }

  public TagSynonymsInner appliedCount(Integer appliedCount) {
    this.appliedCount = appliedCount;
    return this;
  }

  /**
   * Get appliedCount
   * @return appliedCount
   */
  @javax.annotation.Nullable
  public Integer getAppliedCount() {
    return appliedCount;
  }

  public void setAppliedCount(Integer appliedCount) {
    this.appliedCount = appliedCount;
  }


  public TagSynonymsInner creationDate(Integer creationDate) {
    this.creationDate = creationDate;
    return this;
  }

  /**
   * Get creationDate
   * @return creationDate
   */
  @javax.annotation.Nullable
  public Integer getCreationDate() {
    return creationDate;
  }

  public void setCreationDate(Integer creationDate) {
    this.creationDate = creationDate;
  }


  public TagSynonymsInner fromTag(String fromTag) {
    this.fromTag = fromTag;
    return this;
  }

  /**
   * Get fromTag
   * @return fromTag
   */
  @javax.annotation.Nullable
  public String getFromTag() {
    return fromTag;
  }

  public void setFromTag(String fromTag) {
    this.fromTag = fromTag;
  }


  public TagSynonymsInner lastAppliedDate(Integer lastAppliedDate) {
    this.lastAppliedDate = lastAppliedDate;
    return this;
  }

  /**
   * Get lastAppliedDate
   * @return lastAppliedDate
   */
  @javax.annotation.Nullable
  public Integer getLastAppliedDate() {
    return lastAppliedDate;
  }

  public void setLastAppliedDate(Integer lastAppliedDate) {
    this.lastAppliedDate = lastAppliedDate;
  }


  public TagSynonymsInner toTag(String toTag) {
    this.toTag = toTag;
    return this;
  }

  /**
   * Get toTag
   * @return toTag
   */
  @javax.annotation.Nullable
  public String getToTag() {
    return toTag;
  }

  public void setToTag(String toTag) {
    this.toTag = toTag;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TagSynonymsInner tagSynonymsInner = (TagSynonymsInner) o;
    return Objects.equals(this.appliedCount, tagSynonymsInner.appliedCount) &&
        Objects.equals(this.creationDate, tagSynonymsInner.creationDate) &&
        Objects.equals(this.fromTag, tagSynonymsInner.fromTag) &&
        Objects.equals(this.lastAppliedDate, tagSynonymsInner.lastAppliedDate) &&
        Objects.equals(this.toTag, tagSynonymsInner.toTag);
  }

  @Override
  public int hashCode() {
    return Objects.hash(appliedCount, creationDate, fromTag, lastAppliedDate, toTag);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TagSynonymsInner {\n");
    sb.append("    appliedCount: ").append(toIndentedString(appliedCount)).append("\n");
    sb.append("    creationDate: ").append(toIndentedString(creationDate)).append("\n");
    sb.append("    fromTag: ").append(toIndentedString(fromTag)).append("\n");
    sb.append("    lastAppliedDate: ").append(toIndentedString(lastAppliedDate)).append("\n");
    sb.append("    toTag: ").append(toIndentedString(toTag)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("applied_count");
    openapiFields.add("creation_date");
    openapiFields.add("from_tag");
    openapiFields.add("last_applied_date");
    openapiFields.add("to_tag");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TagSynonymsInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TagSynonymsInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TagSynonymsInner is not found in the empty JSON string", TagSynonymsInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TagSynonymsInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TagSynonymsInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("from_tag") != null && !jsonObj.get("from_tag").isJsonNull()) && !jsonObj.get("from_tag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `from_tag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("from_tag").toString()));
      }
      if ((jsonObj.get("to_tag") != null && !jsonObj.get("to_tag").isJsonNull()) && !jsonObj.get("to_tag").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `to_tag` to be a primitive type in the JSON string but got `%s`", jsonObj.get("to_tag").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TagSynonymsInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TagSynonymsInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TagSynonymsInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TagSynonymsInner.class));

       return (TypeAdapter<T>) new TypeAdapter<TagSynonymsInner>() {
           @Override
           public void write(JsonWriter out, TagSynonymsInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TagSynonymsInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TagSynonymsInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TagSynonymsInner
   * @throws IOException if the JSON string is invalid with respect to TagSynonymsInner
   */
  public static TagSynonymsInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TagSynonymsInner.class);
  }

  /**
   * Convert an instance of TagSynonymsInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

