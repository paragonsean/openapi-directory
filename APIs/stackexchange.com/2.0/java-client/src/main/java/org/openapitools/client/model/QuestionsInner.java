/*
 * StackExchange
 * Stack Exchange is a network of 130+ Q&A communities including Stack Overflow. 
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AnswersInnerLastEditor;
import org.openapitools.client.model.QuestionsInnerClosedDetails;
import org.openapitools.client.model.QuestionsInnerMigratedFrom;
import org.openapitools.client.model.QuestionsInnerNotice;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * QuestionsInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:22:23.461156-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class QuestionsInner {
  public static final String SERIALIZED_NAME_ACCEPTED_ANSWER_ID = "accepted_answer_id";
  @SerializedName(SERIALIZED_NAME_ACCEPTED_ANSWER_ID)
  private Integer acceptedAnswerId;

  public static final String SERIALIZED_NAME_ANSWER_COUNT = "answer_count";
  @SerializedName(SERIALIZED_NAME_ANSWER_COUNT)
  private Integer answerCount;

  public static final String SERIALIZED_NAME_ANSWERS = "answers";
  @SerializedName(SERIALIZED_NAME_ANSWERS)
  private List<Object> answers = new ArrayList<>();

  public static final String SERIALIZED_NAME_BODY = "body";
  @SerializedName(SERIALIZED_NAME_BODY)
  private String body;

  public static final String SERIALIZED_NAME_BODY_MARKDOWN = "body_markdown";
  @SerializedName(SERIALIZED_NAME_BODY_MARKDOWN)
  private String bodyMarkdown;

  public static final String SERIALIZED_NAME_BOUNTY_AMOUNT = "bounty_amount";
  @SerializedName(SERIALIZED_NAME_BOUNTY_AMOUNT)
  private Integer bountyAmount;

  public static final String SERIALIZED_NAME_BOUNTY_CLOSES_DATE = "bounty_closes_date";
  @SerializedName(SERIALIZED_NAME_BOUNTY_CLOSES_DATE)
  private Integer bountyClosesDate;

  public static final String SERIALIZED_NAME_BOUNTY_USER = "bounty_user";
  @SerializedName(SERIALIZED_NAME_BOUNTY_USER)
  private AnswersInnerLastEditor bountyUser;

  public static final String SERIALIZED_NAME_CAN_CLOSE = "can_close";
  @SerializedName(SERIALIZED_NAME_CAN_CLOSE)
  private Boolean canClose;

  public static final String SERIALIZED_NAME_CAN_FLAG = "can_flag";
  @SerializedName(SERIALIZED_NAME_CAN_FLAG)
  private Boolean canFlag;

  public static final String SERIALIZED_NAME_CLOSE_VOTE_COUNT = "close_vote_count";
  @SerializedName(SERIALIZED_NAME_CLOSE_VOTE_COUNT)
  private Integer closeVoteCount;

  public static final String SERIALIZED_NAME_CLOSED_DATE = "closed_date";
  @SerializedName(SERIALIZED_NAME_CLOSED_DATE)
  private Integer closedDate;

  public static final String SERIALIZED_NAME_CLOSED_DETAILS = "closed_details";
  @SerializedName(SERIALIZED_NAME_CLOSED_DETAILS)
  private QuestionsInnerClosedDetails closedDetails;

  public static final String SERIALIZED_NAME_CLOSED_REASON = "closed_reason";
  @SerializedName(SERIALIZED_NAME_CLOSED_REASON)
  private String closedReason;

  public static final String SERIALIZED_NAME_COMMENT_COUNT = "comment_count";
  @SerializedName(SERIALIZED_NAME_COMMENT_COUNT)
  private Integer commentCount;

  public static final String SERIALIZED_NAME_COMMENTS = "comments";
  @SerializedName(SERIALIZED_NAME_COMMENTS)
  private List<Object> comments = new ArrayList<>();

  public static final String SERIALIZED_NAME_COMMUNITY_OWNED_DATE = "community_owned_date";
  @SerializedName(SERIALIZED_NAME_COMMUNITY_OWNED_DATE)
  private Integer communityOwnedDate;

  public static final String SERIALIZED_NAME_CREATION_DATE = "creation_date";
  @SerializedName(SERIALIZED_NAME_CREATION_DATE)
  private Integer creationDate;

  public static final String SERIALIZED_NAME_DELETE_VOTE_COUNT = "delete_vote_count";
  @SerializedName(SERIALIZED_NAME_DELETE_VOTE_COUNT)
  private Integer deleteVoteCount;

  public static final String SERIALIZED_NAME_DOWN_VOTE_COUNT = "down_vote_count";
  @SerializedName(SERIALIZED_NAME_DOWN_VOTE_COUNT)
  private Integer downVoteCount;

  public static final String SERIALIZED_NAME_DOWNVOTED = "downvoted";
  @SerializedName(SERIALIZED_NAME_DOWNVOTED)
  private Boolean downvoted;

  public static final String SERIALIZED_NAME_FAVORITE_COUNT = "favorite_count";
  @SerializedName(SERIALIZED_NAME_FAVORITE_COUNT)
  private Integer favoriteCount;

  public static final String SERIALIZED_NAME_FAVORITED = "favorited";
  @SerializedName(SERIALIZED_NAME_FAVORITED)
  private Boolean favorited;

  public static final String SERIALIZED_NAME_IS_ANSWERED = "is_answered";
  @SerializedName(SERIALIZED_NAME_IS_ANSWERED)
  private Boolean isAnswered;

  public static final String SERIALIZED_NAME_LAST_ACTIVITY_DATE = "last_activity_date";
  @SerializedName(SERIALIZED_NAME_LAST_ACTIVITY_DATE)
  private Integer lastActivityDate;

  public static final String SERIALIZED_NAME_LAST_EDIT_DATE = "last_edit_date";
  @SerializedName(SERIALIZED_NAME_LAST_EDIT_DATE)
  private Integer lastEditDate;

  public static final String SERIALIZED_NAME_LAST_EDITOR = "last_editor";
  @SerializedName(SERIALIZED_NAME_LAST_EDITOR)
  private AnswersInnerLastEditor lastEditor;

  public static final String SERIALIZED_NAME_LINK = "link";
  @SerializedName(SERIALIZED_NAME_LINK)
  private String link;

  public static final String SERIALIZED_NAME_LOCKED_DATE = "locked_date";
  @SerializedName(SERIALIZED_NAME_LOCKED_DATE)
  private Integer lockedDate;

  public static final String SERIALIZED_NAME_MIGRATED_FROM = "migrated_from";
  @SerializedName(SERIALIZED_NAME_MIGRATED_FROM)
  private QuestionsInnerMigratedFrom migratedFrom;

  public static final String SERIALIZED_NAME_MIGRATED_TO = "migrated_to";
  @SerializedName(SERIALIZED_NAME_MIGRATED_TO)
  private QuestionsInnerMigratedFrom migratedTo;

  public static final String SERIALIZED_NAME_NOTICE = "notice";
  @SerializedName(SERIALIZED_NAME_NOTICE)
  private QuestionsInnerNotice notice;

  public static final String SERIALIZED_NAME_OWNER = "owner";
  @SerializedName(SERIALIZED_NAME_OWNER)
  private AnswersInnerLastEditor owner;

  public static final String SERIALIZED_NAME_PROTECTED_DATE = "protected_date";
  @SerializedName(SERIALIZED_NAME_PROTECTED_DATE)
  private Integer protectedDate;

  public static final String SERIALIZED_NAME_QUESTION_ID = "question_id";
  @SerializedName(SERIALIZED_NAME_QUESTION_ID)
  private Integer questionId;

  public static final String SERIALIZED_NAME_REOPEN_VOTE_COUNT = "reopen_vote_count";
  @SerializedName(SERIALIZED_NAME_REOPEN_VOTE_COUNT)
  private Integer reopenVoteCount;

  public static final String SERIALIZED_NAME_SCORE = "score";
  @SerializedName(SERIALIZED_NAME_SCORE)
  private Integer score;

  public static final String SERIALIZED_NAME_SHARE_LINK = "share_link";
  @SerializedName(SERIALIZED_NAME_SHARE_LINK)
  private String shareLink;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List<Object> tags = new ArrayList<>();

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_UP_VOTE_COUNT = "up_vote_count";
  @SerializedName(SERIALIZED_NAME_UP_VOTE_COUNT)
  private Integer upVoteCount;

  public static final String SERIALIZED_NAME_UPVOTED = "upvoted";
  @SerializedName(SERIALIZED_NAME_UPVOTED)
  private Boolean upvoted;

  public static final String SERIALIZED_NAME_VIEW_COUNT = "view_count";
  @SerializedName(SERIALIZED_NAME_VIEW_COUNT)
  private Integer viewCount;

  public QuestionsInner() {
  }

  public QuestionsInner acceptedAnswerId(Integer acceptedAnswerId) {
    this.acceptedAnswerId = acceptedAnswerId;
    return this;
  }

  /**
   * Get acceptedAnswerId
   * @return acceptedAnswerId
   */
  @javax.annotation.Nullable
  public Integer getAcceptedAnswerId() {
    return acceptedAnswerId;
  }

  public void setAcceptedAnswerId(Integer acceptedAnswerId) {
    this.acceptedAnswerId = acceptedAnswerId;
  }


  public QuestionsInner answerCount(Integer answerCount) {
    this.answerCount = answerCount;
    return this;
  }

  /**
   * Get answerCount
   * @return answerCount
   */
  @javax.annotation.Nullable
  public Integer getAnswerCount() {
    return answerCount;
  }

  public void setAnswerCount(Integer answerCount) {
    this.answerCount = answerCount;
  }


  public QuestionsInner answers(List<Object> answers) {
    this.answers = answers;
    return this;
  }

  public QuestionsInner addAnswersItem(Object answersItem) {
    if (this.answers == null) {
      this.answers = new ArrayList<>();
    }
    this.answers.add(answersItem);
    return this;
  }

  /**
   * Get answers
   * @return answers
   */
  @javax.annotation.Nullable
  public List<Object> getAnswers() {
    return answers;
  }

  public void setAnswers(List<Object> answers) {
    this.answers = answers;
  }


  public QuestionsInner body(String body) {
    this.body = body;
    return this;
  }

  /**
   * Get body
   * @return body
   */
  @javax.annotation.Nullable
  public String getBody() {
    return body;
  }

  public void setBody(String body) {
    this.body = body;
  }


  public QuestionsInner bodyMarkdown(String bodyMarkdown) {
    this.bodyMarkdown = bodyMarkdown;
    return this;
  }

  /**
   * Get bodyMarkdown
   * @return bodyMarkdown
   */
  @javax.annotation.Nullable
  public String getBodyMarkdown() {
    return bodyMarkdown;
  }

  public void setBodyMarkdown(String bodyMarkdown) {
    this.bodyMarkdown = bodyMarkdown;
  }


  public QuestionsInner bountyAmount(Integer bountyAmount) {
    this.bountyAmount = bountyAmount;
    return this;
  }

  /**
   * Get bountyAmount
   * @return bountyAmount
   */
  @javax.annotation.Nullable
  public Integer getBountyAmount() {
    return bountyAmount;
  }

  public void setBountyAmount(Integer bountyAmount) {
    this.bountyAmount = bountyAmount;
  }


  public QuestionsInner bountyClosesDate(Integer bountyClosesDate) {
    this.bountyClosesDate = bountyClosesDate;
    return this;
  }

  /**
   * Get bountyClosesDate
   * @return bountyClosesDate
   */
  @javax.annotation.Nullable
  public Integer getBountyClosesDate() {
    return bountyClosesDate;
  }

  public void setBountyClosesDate(Integer bountyClosesDate) {
    this.bountyClosesDate = bountyClosesDate;
  }


  public QuestionsInner bountyUser(AnswersInnerLastEditor bountyUser) {
    this.bountyUser = bountyUser;
    return this;
  }

  /**
   * Get bountyUser
   * @return bountyUser
   */
  @javax.annotation.Nullable
  public AnswersInnerLastEditor getBountyUser() {
    return bountyUser;
  }

  public void setBountyUser(AnswersInnerLastEditor bountyUser) {
    this.bountyUser = bountyUser;
  }


  public QuestionsInner canClose(Boolean canClose) {
    this.canClose = canClose;
    return this;
  }

  /**
   * Get canClose
   * @return canClose
   */
  @javax.annotation.Nullable
  public Boolean getCanClose() {
    return canClose;
  }

  public void setCanClose(Boolean canClose) {
    this.canClose = canClose;
  }


  public QuestionsInner canFlag(Boolean canFlag) {
    this.canFlag = canFlag;
    return this;
  }

  /**
   * Get canFlag
   * @return canFlag
   */
  @javax.annotation.Nullable
  public Boolean getCanFlag() {
    return canFlag;
  }

  public void setCanFlag(Boolean canFlag) {
    this.canFlag = canFlag;
  }


  public QuestionsInner closeVoteCount(Integer closeVoteCount) {
    this.closeVoteCount = closeVoteCount;
    return this;
  }

  /**
   * Get closeVoteCount
   * @return closeVoteCount
   */
  @javax.annotation.Nullable
  public Integer getCloseVoteCount() {
    return closeVoteCount;
  }

  public void setCloseVoteCount(Integer closeVoteCount) {
    this.closeVoteCount = closeVoteCount;
  }


  public QuestionsInner closedDate(Integer closedDate) {
    this.closedDate = closedDate;
    return this;
  }

  /**
   * Get closedDate
   * @return closedDate
   */
  @javax.annotation.Nullable
  public Integer getClosedDate() {
    return closedDate;
  }

  public void setClosedDate(Integer closedDate) {
    this.closedDate = closedDate;
  }


  public QuestionsInner closedDetails(QuestionsInnerClosedDetails closedDetails) {
    this.closedDetails = closedDetails;
    return this;
  }

  /**
   * Get closedDetails
   * @return closedDetails
   */
  @javax.annotation.Nullable
  public QuestionsInnerClosedDetails getClosedDetails() {
    return closedDetails;
  }

  public void setClosedDetails(QuestionsInnerClosedDetails closedDetails) {
    this.closedDetails = closedDetails;
  }


  public QuestionsInner closedReason(String closedReason) {
    this.closedReason = closedReason;
    return this;
  }

  /**
   * Get closedReason
   * @return closedReason
   */
  @javax.annotation.Nullable
  public String getClosedReason() {
    return closedReason;
  }

  public void setClosedReason(String closedReason) {
    this.closedReason = closedReason;
  }


  public QuestionsInner commentCount(Integer commentCount) {
    this.commentCount = commentCount;
    return this;
  }

  /**
   * Get commentCount
   * @return commentCount
   */
  @javax.annotation.Nullable
  public Integer getCommentCount() {
    return commentCount;
  }

  public void setCommentCount(Integer commentCount) {
    this.commentCount = commentCount;
  }


  public QuestionsInner comments(List<Object> comments) {
    this.comments = comments;
    return this;
  }

  public QuestionsInner addCommentsItem(Object commentsItem) {
    if (this.comments == null) {
      this.comments = new ArrayList<>();
    }
    this.comments.add(commentsItem);
    return this;
  }

  /**
   * Get comments
   * @return comments
   */
  @javax.annotation.Nullable
  public List<Object> getComments() {
    return comments;
  }

  public void setComments(List<Object> comments) {
    this.comments = comments;
  }


  public QuestionsInner communityOwnedDate(Integer communityOwnedDate) {
    this.communityOwnedDate = communityOwnedDate;
    return this;
  }

  /**
   * Get communityOwnedDate
   * @return communityOwnedDate
   */
  @javax.annotation.Nullable
  public Integer getCommunityOwnedDate() {
    return communityOwnedDate;
  }

  public void setCommunityOwnedDate(Integer communityOwnedDate) {
    this.communityOwnedDate = communityOwnedDate;
  }


  public QuestionsInner creationDate(Integer creationDate) {
    this.creationDate = creationDate;
    return this;
  }

  /**
   * Get creationDate
   * @return creationDate
   */
  @javax.annotation.Nullable
  public Integer getCreationDate() {
    return creationDate;
  }

  public void setCreationDate(Integer creationDate) {
    this.creationDate = creationDate;
  }


  public QuestionsInner deleteVoteCount(Integer deleteVoteCount) {
    this.deleteVoteCount = deleteVoteCount;
    return this;
  }

  /**
   * Get deleteVoteCount
   * @return deleteVoteCount
   */
  @javax.annotation.Nullable
  public Integer getDeleteVoteCount() {
    return deleteVoteCount;
  }

  public void setDeleteVoteCount(Integer deleteVoteCount) {
    this.deleteVoteCount = deleteVoteCount;
  }


  public QuestionsInner downVoteCount(Integer downVoteCount) {
    this.downVoteCount = downVoteCount;
    return this;
  }

  /**
   * Get downVoteCount
   * @return downVoteCount
   */
  @javax.annotation.Nullable
  public Integer getDownVoteCount() {
    return downVoteCount;
  }

  public void setDownVoteCount(Integer downVoteCount) {
    this.downVoteCount = downVoteCount;
  }


  public QuestionsInner downvoted(Boolean downvoted) {
    this.downvoted = downvoted;
    return this;
  }

  /**
   * Get downvoted
   * @return downvoted
   */
  @javax.annotation.Nullable
  public Boolean getDownvoted() {
    return downvoted;
  }

  public void setDownvoted(Boolean downvoted) {
    this.downvoted = downvoted;
  }


  public QuestionsInner favoriteCount(Integer favoriteCount) {
    this.favoriteCount = favoriteCount;
    return this;
  }

  /**
   * Get favoriteCount
   * @return favoriteCount
   */
  @javax.annotation.Nullable
  public Integer getFavoriteCount() {
    return favoriteCount;
  }

  public void setFavoriteCount(Integer favoriteCount) {
    this.favoriteCount = favoriteCount;
  }


  public QuestionsInner favorited(Boolean favorited) {
    this.favorited = favorited;
    return this;
  }

  /**
   * Get favorited
   * @return favorited
   */
  @javax.annotation.Nullable
  public Boolean getFavorited() {
    return favorited;
  }

  public void setFavorited(Boolean favorited) {
    this.favorited = favorited;
  }


  public QuestionsInner isAnswered(Boolean isAnswered) {
    this.isAnswered = isAnswered;
    return this;
  }

  /**
   * Get isAnswered
   * @return isAnswered
   */
  @javax.annotation.Nullable
  public Boolean getIsAnswered() {
    return isAnswered;
  }

  public void setIsAnswered(Boolean isAnswered) {
    this.isAnswered = isAnswered;
  }


  public QuestionsInner lastActivityDate(Integer lastActivityDate) {
    this.lastActivityDate = lastActivityDate;
    return this;
  }

  /**
   * Get lastActivityDate
   * @return lastActivityDate
   */
  @javax.annotation.Nullable
  public Integer getLastActivityDate() {
    return lastActivityDate;
  }

  public void setLastActivityDate(Integer lastActivityDate) {
    this.lastActivityDate = lastActivityDate;
  }


  public QuestionsInner lastEditDate(Integer lastEditDate) {
    this.lastEditDate = lastEditDate;
    return this;
  }

  /**
   * Get lastEditDate
   * @return lastEditDate
   */
  @javax.annotation.Nullable
  public Integer getLastEditDate() {
    return lastEditDate;
  }

  public void setLastEditDate(Integer lastEditDate) {
    this.lastEditDate = lastEditDate;
  }


  public QuestionsInner lastEditor(AnswersInnerLastEditor lastEditor) {
    this.lastEditor = lastEditor;
    return this;
  }

  /**
   * Get lastEditor
   * @return lastEditor
   */
  @javax.annotation.Nullable
  public AnswersInnerLastEditor getLastEditor() {
    return lastEditor;
  }

  public void setLastEditor(AnswersInnerLastEditor lastEditor) {
    this.lastEditor = lastEditor;
  }


  public QuestionsInner link(String link) {
    this.link = link;
    return this;
  }

  /**
   * Get link
   * @return link
   */
  @javax.annotation.Nullable
  public String getLink() {
    return link;
  }

  public void setLink(String link) {
    this.link = link;
  }


  public QuestionsInner lockedDate(Integer lockedDate) {
    this.lockedDate = lockedDate;
    return this;
  }

  /**
   * Get lockedDate
   * @return lockedDate
   */
  @javax.annotation.Nullable
  public Integer getLockedDate() {
    return lockedDate;
  }

  public void setLockedDate(Integer lockedDate) {
    this.lockedDate = lockedDate;
  }


  public QuestionsInner migratedFrom(QuestionsInnerMigratedFrom migratedFrom) {
    this.migratedFrom = migratedFrom;
    return this;
  }

  /**
   * Get migratedFrom
   * @return migratedFrom
   */
  @javax.annotation.Nullable
  public QuestionsInnerMigratedFrom getMigratedFrom() {
    return migratedFrom;
  }

  public void setMigratedFrom(QuestionsInnerMigratedFrom migratedFrom) {
    this.migratedFrom = migratedFrom;
  }


  public QuestionsInner migratedTo(QuestionsInnerMigratedFrom migratedTo) {
    this.migratedTo = migratedTo;
    return this;
  }

  /**
   * Get migratedTo
   * @return migratedTo
   */
  @javax.annotation.Nullable
  public QuestionsInnerMigratedFrom getMigratedTo() {
    return migratedTo;
  }

  public void setMigratedTo(QuestionsInnerMigratedFrom migratedTo) {
    this.migratedTo = migratedTo;
  }


  public QuestionsInner notice(QuestionsInnerNotice notice) {
    this.notice = notice;
    return this;
  }

  /**
   * Get notice
   * @return notice
   */
  @javax.annotation.Nullable
  public QuestionsInnerNotice getNotice() {
    return notice;
  }

  public void setNotice(QuestionsInnerNotice notice) {
    this.notice = notice;
  }


  public QuestionsInner owner(AnswersInnerLastEditor owner) {
    this.owner = owner;
    return this;
  }

  /**
   * Get owner
   * @return owner
   */
  @javax.annotation.Nullable
  public AnswersInnerLastEditor getOwner() {
    return owner;
  }

  public void setOwner(AnswersInnerLastEditor owner) {
    this.owner = owner;
  }


  public QuestionsInner protectedDate(Integer protectedDate) {
    this.protectedDate = protectedDate;
    return this;
  }

  /**
   * Get protectedDate
   * @return protectedDate
   */
  @javax.annotation.Nullable
  public Integer getProtectedDate() {
    return protectedDate;
  }

  public void setProtectedDate(Integer protectedDate) {
    this.protectedDate = protectedDate;
  }


  public QuestionsInner questionId(Integer questionId) {
    this.questionId = questionId;
    return this;
  }

  /**
   * Get questionId
   * @return questionId
   */
  @javax.annotation.Nullable
  public Integer getQuestionId() {
    return questionId;
  }

  public void setQuestionId(Integer questionId) {
    this.questionId = questionId;
  }


  public QuestionsInner reopenVoteCount(Integer reopenVoteCount) {
    this.reopenVoteCount = reopenVoteCount;
    return this;
  }

  /**
   * Get reopenVoteCount
   * @return reopenVoteCount
   */
  @javax.annotation.Nullable
  public Integer getReopenVoteCount() {
    return reopenVoteCount;
  }

  public void setReopenVoteCount(Integer reopenVoteCount) {
    this.reopenVoteCount = reopenVoteCount;
  }


  public QuestionsInner score(Integer score) {
    this.score = score;
    return this;
  }

  /**
   * Get score
   * @return score
   */
  @javax.annotation.Nullable
  public Integer getScore() {
    return score;
  }

  public void setScore(Integer score) {
    this.score = score;
  }


  public QuestionsInner shareLink(String shareLink) {
    this.shareLink = shareLink;
    return this;
  }

  /**
   * Get shareLink
   * @return shareLink
   */
  @javax.annotation.Nullable
  public String getShareLink() {
    return shareLink;
  }

  public void setShareLink(String shareLink) {
    this.shareLink = shareLink;
  }


  public QuestionsInner tags(List<Object> tags) {
    this.tags = tags;
    return this;
  }

  public QuestionsInner addTagsItem(Object tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<>();
    }
    this.tags.add(tagsItem);
    return this;
  }

  /**
   * Get tags
   * @return tags
   */
  @javax.annotation.Nullable
  public List<Object> getTags() {
    return tags;
  }

  public void setTags(List<Object> tags) {
    this.tags = tags;
  }


  public QuestionsInner title(String title) {
    this.title = title;
    return this;
  }

  /**
   * Get title
   * @return title
   */
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }


  public QuestionsInner upVoteCount(Integer upVoteCount) {
    this.upVoteCount = upVoteCount;
    return this;
  }

  /**
   * Get upVoteCount
   * @return upVoteCount
   */
  @javax.annotation.Nullable
  public Integer getUpVoteCount() {
    return upVoteCount;
  }

  public void setUpVoteCount(Integer upVoteCount) {
    this.upVoteCount = upVoteCount;
  }


  public QuestionsInner upvoted(Boolean upvoted) {
    this.upvoted = upvoted;
    return this;
  }

  /**
   * Get upvoted
   * @return upvoted
   */
  @javax.annotation.Nullable
  public Boolean getUpvoted() {
    return upvoted;
  }

  public void setUpvoted(Boolean upvoted) {
    this.upvoted = upvoted;
  }


  public QuestionsInner viewCount(Integer viewCount) {
    this.viewCount = viewCount;
    return this;
  }

  /**
   * Get viewCount
   * @return viewCount
   */
  @javax.annotation.Nullable
  public Integer getViewCount() {
    return viewCount;
  }

  public void setViewCount(Integer viewCount) {
    this.viewCount = viewCount;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    QuestionsInner questionsInner = (QuestionsInner) o;
    return Objects.equals(this.acceptedAnswerId, questionsInner.acceptedAnswerId) &&
        Objects.equals(this.answerCount, questionsInner.answerCount) &&
        Objects.equals(this.answers, questionsInner.answers) &&
        Objects.equals(this.body, questionsInner.body) &&
        Objects.equals(this.bodyMarkdown, questionsInner.bodyMarkdown) &&
        Objects.equals(this.bountyAmount, questionsInner.bountyAmount) &&
        Objects.equals(this.bountyClosesDate, questionsInner.bountyClosesDate) &&
        Objects.equals(this.bountyUser, questionsInner.bountyUser) &&
        Objects.equals(this.canClose, questionsInner.canClose) &&
        Objects.equals(this.canFlag, questionsInner.canFlag) &&
        Objects.equals(this.closeVoteCount, questionsInner.closeVoteCount) &&
        Objects.equals(this.closedDate, questionsInner.closedDate) &&
        Objects.equals(this.closedDetails, questionsInner.closedDetails) &&
        Objects.equals(this.closedReason, questionsInner.closedReason) &&
        Objects.equals(this.commentCount, questionsInner.commentCount) &&
        Objects.equals(this.comments, questionsInner.comments) &&
        Objects.equals(this.communityOwnedDate, questionsInner.communityOwnedDate) &&
        Objects.equals(this.creationDate, questionsInner.creationDate) &&
        Objects.equals(this.deleteVoteCount, questionsInner.deleteVoteCount) &&
        Objects.equals(this.downVoteCount, questionsInner.downVoteCount) &&
        Objects.equals(this.downvoted, questionsInner.downvoted) &&
        Objects.equals(this.favoriteCount, questionsInner.favoriteCount) &&
        Objects.equals(this.favorited, questionsInner.favorited) &&
        Objects.equals(this.isAnswered, questionsInner.isAnswered) &&
        Objects.equals(this.lastActivityDate, questionsInner.lastActivityDate) &&
        Objects.equals(this.lastEditDate, questionsInner.lastEditDate) &&
        Objects.equals(this.lastEditor, questionsInner.lastEditor) &&
        Objects.equals(this.link, questionsInner.link) &&
        Objects.equals(this.lockedDate, questionsInner.lockedDate) &&
        Objects.equals(this.migratedFrom, questionsInner.migratedFrom) &&
        Objects.equals(this.migratedTo, questionsInner.migratedTo) &&
        Objects.equals(this.notice, questionsInner.notice) &&
        Objects.equals(this.owner, questionsInner.owner) &&
        Objects.equals(this.protectedDate, questionsInner.protectedDate) &&
        Objects.equals(this.questionId, questionsInner.questionId) &&
        Objects.equals(this.reopenVoteCount, questionsInner.reopenVoteCount) &&
        Objects.equals(this.score, questionsInner.score) &&
        Objects.equals(this.shareLink, questionsInner.shareLink) &&
        Objects.equals(this.tags, questionsInner.tags) &&
        Objects.equals(this.title, questionsInner.title) &&
        Objects.equals(this.upVoteCount, questionsInner.upVoteCount) &&
        Objects.equals(this.upvoted, questionsInner.upvoted) &&
        Objects.equals(this.viewCount, questionsInner.viewCount);
  }

  @Override
  public int hashCode() {
    return Objects.hash(acceptedAnswerId, answerCount, answers, body, bodyMarkdown, bountyAmount, bountyClosesDate, bountyUser, canClose, canFlag, closeVoteCount, closedDate, closedDetails, closedReason, commentCount, comments, communityOwnedDate, creationDate, deleteVoteCount, downVoteCount, downvoted, favoriteCount, favorited, isAnswered, lastActivityDate, lastEditDate, lastEditor, link, lockedDate, migratedFrom, migratedTo, notice, owner, protectedDate, questionId, reopenVoteCount, score, shareLink, tags, title, upVoteCount, upvoted, viewCount);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class QuestionsInner {\n");
    sb.append("    acceptedAnswerId: ").append(toIndentedString(acceptedAnswerId)).append("\n");
    sb.append("    answerCount: ").append(toIndentedString(answerCount)).append("\n");
    sb.append("    answers: ").append(toIndentedString(answers)).append("\n");
    sb.append("    body: ").append(toIndentedString(body)).append("\n");
    sb.append("    bodyMarkdown: ").append(toIndentedString(bodyMarkdown)).append("\n");
    sb.append("    bountyAmount: ").append(toIndentedString(bountyAmount)).append("\n");
    sb.append("    bountyClosesDate: ").append(toIndentedString(bountyClosesDate)).append("\n");
    sb.append("    bountyUser: ").append(toIndentedString(bountyUser)).append("\n");
    sb.append("    canClose: ").append(toIndentedString(canClose)).append("\n");
    sb.append("    canFlag: ").append(toIndentedString(canFlag)).append("\n");
    sb.append("    closeVoteCount: ").append(toIndentedString(closeVoteCount)).append("\n");
    sb.append("    closedDate: ").append(toIndentedString(closedDate)).append("\n");
    sb.append("    closedDetails: ").append(toIndentedString(closedDetails)).append("\n");
    sb.append("    closedReason: ").append(toIndentedString(closedReason)).append("\n");
    sb.append("    commentCount: ").append(toIndentedString(commentCount)).append("\n");
    sb.append("    comments: ").append(toIndentedString(comments)).append("\n");
    sb.append("    communityOwnedDate: ").append(toIndentedString(communityOwnedDate)).append("\n");
    sb.append("    creationDate: ").append(toIndentedString(creationDate)).append("\n");
    sb.append("    deleteVoteCount: ").append(toIndentedString(deleteVoteCount)).append("\n");
    sb.append("    downVoteCount: ").append(toIndentedString(downVoteCount)).append("\n");
    sb.append("    downvoted: ").append(toIndentedString(downvoted)).append("\n");
    sb.append("    favoriteCount: ").append(toIndentedString(favoriteCount)).append("\n");
    sb.append("    favorited: ").append(toIndentedString(favorited)).append("\n");
    sb.append("    isAnswered: ").append(toIndentedString(isAnswered)).append("\n");
    sb.append("    lastActivityDate: ").append(toIndentedString(lastActivityDate)).append("\n");
    sb.append("    lastEditDate: ").append(toIndentedString(lastEditDate)).append("\n");
    sb.append("    lastEditor: ").append(toIndentedString(lastEditor)).append("\n");
    sb.append("    link: ").append(toIndentedString(link)).append("\n");
    sb.append("    lockedDate: ").append(toIndentedString(lockedDate)).append("\n");
    sb.append("    migratedFrom: ").append(toIndentedString(migratedFrom)).append("\n");
    sb.append("    migratedTo: ").append(toIndentedString(migratedTo)).append("\n");
    sb.append("    notice: ").append(toIndentedString(notice)).append("\n");
    sb.append("    owner: ").append(toIndentedString(owner)).append("\n");
    sb.append("    protectedDate: ").append(toIndentedString(protectedDate)).append("\n");
    sb.append("    questionId: ").append(toIndentedString(questionId)).append("\n");
    sb.append("    reopenVoteCount: ").append(toIndentedString(reopenVoteCount)).append("\n");
    sb.append("    score: ").append(toIndentedString(score)).append("\n");
    sb.append("    shareLink: ").append(toIndentedString(shareLink)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    upVoteCount: ").append(toIndentedString(upVoteCount)).append("\n");
    sb.append("    upvoted: ").append(toIndentedString(upvoted)).append("\n");
    sb.append("    viewCount: ").append(toIndentedString(viewCount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accepted_answer_id");
    openapiFields.add("answer_count");
    openapiFields.add("answers");
    openapiFields.add("body");
    openapiFields.add("body_markdown");
    openapiFields.add("bounty_amount");
    openapiFields.add("bounty_closes_date");
    openapiFields.add("bounty_user");
    openapiFields.add("can_close");
    openapiFields.add("can_flag");
    openapiFields.add("close_vote_count");
    openapiFields.add("closed_date");
    openapiFields.add("closed_details");
    openapiFields.add("closed_reason");
    openapiFields.add("comment_count");
    openapiFields.add("comments");
    openapiFields.add("community_owned_date");
    openapiFields.add("creation_date");
    openapiFields.add("delete_vote_count");
    openapiFields.add("down_vote_count");
    openapiFields.add("downvoted");
    openapiFields.add("favorite_count");
    openapiFields.add("favorited");
    openapiFields.add("is_answered");
    openapiFields.add("last_activity_date");
    openapiFields.add("last_edit_date");
    openapiFields.add("last_editor");
    openapiFields.add("link");
    openapiFields.add("locked_date");
    openapiFields.add("migrated_from");
    openapiFields.add("migrated_to");
    openapiFields.add("notice");
    openapiFields.add("owner");
    openapiFields.add("protected_date");
    openapiFields.add("question_id");
    openapiFields.add("reopen_vote_count");
    openapiFields.add("score");
    openapiFields.add("share_link");
    openapiFields.add("tags");
    openapiFields.add("title");
    openapiFields.add("up_vote_count");
    openapiFields.add("upvoted");
    openapiFields.add("view_count");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to QuestionsInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!QuestionsInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in QuestionsInner is not found in the empty JSON string", QuestionsInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!QuestionsInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `QuestionsInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("answers") != null && !jsonObj.get("answers").isJsonNull() && !jsonObj.get("answers").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `answers` to be an array in the JSON string but got `%s`", jsonObj.get("answers").toString()));
      }
      if ((jsonObj.get("body") != null && !jsonObj.get("body").isJsonNull()) && !jsonObj.get("body").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `body` to be a primitive type in the JSON string but got `%s`", jsonObj.get("body").toString()));
      }
      if ((jsonObj.get("body_markdown") != null && !jsonObj.get("body_markdown").isJsonNull()) && !jsonObj.get("body_markdown").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `body_markdown` to be a primitive type in the JSON string but got `%s`", jsonObj.get("body_markdown").toString()));
      }
      // validate the optional field `bounty_user`
      if (jsonObj.get("bounty_user") != null && !jsonObj.get("bounty_user").isJsonNull()) {
        AnswersInnerLastEditor.validateJsonElement(jsonObj.get("bounty_user"));
      }
      // validate the optional field `closed_details`
      if (jsonObj.get("closed_details") != null && !jsonObj.get("closed_details").isJsonNull()) {
        QuestionsInnerClosedDetails.validateJsonElement(jsonObj.get("closed_details"));
      }
      if ((jsonObj.get("closed_reason") != null && !jsonObj.get("closed_reason").isJsonNull()) && !jsonObj.get("closed_reason").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `closed_reason` to be a primitive type in the JSON string but got `%s`", jsonObj.get("closed_reason").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("comments") != null && !jsonObj.get("comments").isJsonNull() && !jsonObj.get("comments").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `comments` to be an array in the JSON string but got `%s`", jsonObj.get("comments").toString()));
      }
      // validate the optional field `last_editor`
      if (jsonObj.get("last_editor") != null && !jsonObj.get("last_editor").isJsonNull()) {
        AnswersInnerLastEditor.validateJsonElement(jsonObj.get("last_editor"));
      }
      if ((jsonObj.get("link") != null && !jsonObj.get("link").isJsonNull()) && !jsonObj.get("link").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `link` to be a primitive type in the JSON string but got `%s`", jsonObj.get("link").toString()));
      }
      // validate the optional field `migrated_from`
      if (jsonObj.get("migrated_from") != null && !jsonObj.get("migrated_from").isJsonNull()) {
        QuestionsInnerMigratedFrom.validateJsonElement(jsonObj.get("migrated_from"));
      }
      // validate the optional field `migrated_to`
      if (jsonObj.get("migrated_to") != null && !jsonObj.get("migrated_to").isJsonNull()) {
        QuestionsInnerMigratedFrom.validateJsonElement(jsonObj.get("migrated_to"));
      }
      // validate the optional field `notice`
      if (jsonObj.get("notice") != null && !jsonObj.get("notice").isJsonNull()) {
        QuestionsInnerNotice.validateJsonElement(jsonObj.get("notice"));
      }
      // validate the optional field `owner`
      if (jsonObj.get("owner") != null && !jsonObj.get("owner").isJsonNull()) {
        AnswersInnerLastEditor.validateJsonElement(jsonObj.get("owner"));
      }
      if ((jsonObj.get("share_link") != null && !jsonObj.get("share_link").isJsonNull()) && !jsonObj.get("share_link").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `share_link` to be a primitive type in the JSON string but got `%s`", jsonObj.get("share_link").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("tags") != null && !jsonObj.get("tags").isJsonNull() && !jsonObj.get("tags").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `tags` to be an array in the JSON string but got `%s`", jsonObj.get("tags").toString()));
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!QuestionsInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'QuestionsInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<QuestionsInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(QuestionsInner.class));

       return (TypeAdapter<T>) new TypeAdapter<QuestionsInner>() {
           @Override
           public void write(JsonWriter out, QuestionsInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public QuestionsInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of QuestionsInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of QuestionsInner
   * @throws IOException if the JSON string is invalid with respect to QuestionsInner
   */
  public static QuestionsInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, QuestionsInner.class);
  }

  /**
   * Convert an instance of QuestionsInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

