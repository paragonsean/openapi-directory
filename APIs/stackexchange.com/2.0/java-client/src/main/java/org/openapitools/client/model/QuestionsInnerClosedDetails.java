/*
 * StackExchange
 * Stack Exchange is a network of 130+ Q&A communities including Stack Overflow. 
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * QuestionsInnerClosedDetails
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:22:23.461156-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class QuestionsInnerClosedDetails {
  public static final String SERIALIZED_NAME_BY_USERS = "by_users";
  @SerializedName(SERIALIZED_NAME_BY_USERS)
  private List<Object> byUsers = new ArrayList<>();

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_ON_HOLD = "on_hold";
  @SerializedName(SERIALIZED_NAME_ON_HOLD)
  private Boolean onHold;

  public static final String SERIALIZED_NAME_ORIGINAL_QUESTIONS = "original_questions";
  @SerializedName(SERIALIZED_NAME_ORIGINAL_QUESTIONS)
  private List<Object> originalQuestions = new ArrayList<>();

  public static final String SERIALIZED_NAME_REASON = "reason";
  @SerializedName(SERIALIZED_NAME_REASON)
  private String reason;

  public QuestionsInnerClosedDetails() {
  }

  public QuestionsInnerClosedDetails byUsers(List<Object> byUsers) {
    this.byUsers = byUsers;
    return this;
  }

  public QuestionsInnerClosedDetails addByUsersItem(Object byUsersItem) {
    if (this.byUsers == null) {
      this.byUsers = new ArrayList<>();
    }
    this.byUsers.add(byUsersItem);
    return this;
  }

  /**
   * Get byUsers
   * @return byUsers
   */
  @javax.annotation.Nullable
  public List<Object> getByUsers() {
    return byUsers;
  }

  public void setByUsers(List<Object> byUsers) {
    this.byUsers = byUsers;
  }


  public QuestionsInnerClosedDetails description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public QuestionsInnerClosedDetails onHold(Boolean onHold) {
    this.onHold = onHold;
    return this;
  }

  /**
   * Get onHold
   * @return onHold
   */
  @javax.annotation.Nullable
  public Boolean getOnHold() {
    return onHold;
  }

  public void setOnHold(Boolean onHold) {
    this.onHold = onHold;
  }


  public QuestionsInnerClosedDetails originalQuestions(List<Object> originalQuestions) {
    this.originalQuestions = originalQuestions;
    return this;
  }

  public QuestionsInnerClosedDetails addOriginalQuestionsItem(Object originalQuestionsItem) {
    if (this.originalQuestions == null) {
      this.originalQuestions = new ArrayList<>();
    }
    this.originalQuestions.add(originalQuestionsItem);
    return this;
  }

  /**
   * Get originalQuestions
   * @return originalQuestions
   */
  @javax.annotation.Nullable
  public List<Object> getOriginalQuestions() {
    return originalQuestions;
  }

  public void setOriginalQuestions(List<Object> originalQuestions) {
    this.originalQuestions = originalQuestions;
  }


  public QuestionsInnerClosedDetails reason(String reason) {
    this.reason = reason;
    return this;
  }

  /**
   * Get reason
   * @return reason
   */
  @javax.annotation.Nullable
  public String getReason() {
    return reason;
  }

  public void setReason(String reason) {
    this.reason = reason;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    QuestionsInnerClosedDetails questionsInnerClosedDetails = (QuestionsInnerClosedDetails) o;
    return Objects.equals(this.byUsers, questionsInnerClosedDetails.byUsers) &&
        Objects.equals(this.description, questionsInnerClosedDetails.description) &&
        Objects.equals(this.onHold, questionsInnerClosedDetails.onHold) &&
        Objects.equals(this.originalQuestions, questionsInnerClosedDetails.originalQuestions) &&
        Objects.equals(this.reason, questionsInnerClosedDetails.reason);
  }

  @Override
  public int hashCode() {
    return Objects.hash(byUsers, description, onHold, originalQuestions, reason);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class QuestionsInnerClosedDetails {\n");
    sb.append("    byUsers: ").append(toIndentedString(byUsers)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    onHold: ").append(toIndentedString(onHold)).append("\n");
    sb.append("    originalQuestions: ").append(toIndentedString(originalQuestions)).append("\n");
    sb.append("    reason: ").append(toIndentedString(reason)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("by_users");
    openapiFields.add("description");
    openapiFields.add("on_hold");
    openapiFields.add("original_questions");
    openapiFields.add("reason");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to QuestionsInnerClosedDetails
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!QuestionsInnerClosedDetails.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in QuestionsInnerClosedDetails is not found in the empty JSON string", QuestionsInnerClosedDetails.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!QuestionsInnerClosedDetails.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `QuestionsInnerClosedDetails` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("by_users") != null && !jsonObj.get("by_users").isJsonNull() && !jsonObj.get("by_users").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `by_users` to be an array in the JSON string but got `%s`", jsonObj.get("by_users").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("original_questions") != null && !jsonObj.get("original_questions").isJsonNull() && !jsonObj.get("original_questions").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `original_questions` to be an array in the JSON string but got `%s`", jsonObj.get("original_questions").toString()));
      }
      if ((jsonObj.get("reason") != null && !jsonObj.get("reason").isJsonNull()) && !jsonObj.get("reason").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reason` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reason").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!QuestionsInnerClosedDetails.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'QuestionsInnerClosedDetails' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<QuestionsInnerClosedDetails> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(QuestionsInnerClosedDetails.class));

       return (TypeAdapter<T>) new TypeAdapter<QuestionsInnerClosedDetails>() {
           @Override
           public void write(JsonWriter out, QuestionsInnerClosedDetails value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public QuestionsInnerClosedDetails read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of QuestionsInnerClosedDetails given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of QuestionsInnerClosedDetails
   * @throws IOException if the JSON string is invalid with respect to QuestionsInnerClosedDetails
   */
  public static QuestionsInnerClosedDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, QuestionsInnerClosedDetails.class);
  }

  /**
   * Convert an instance of QuestionsInnerClosedDetails to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

