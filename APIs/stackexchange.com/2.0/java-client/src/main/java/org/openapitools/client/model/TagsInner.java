/*
 * StackExchange
 * Stack Exchange is a network of 130+ Q&A communities including Stack Overflow. 
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * TagsInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:22:23.461156-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TagsInner {
  public static final String SERIALIZED_NAME_COUNT = "count";
  @SerializedName(SERIALIZED_NAME_COUNT)
  private Integer count;

  public static final String SERIALIZED_NAME_HAS_SYNONYMS = "has_synonyms";
  @SerializedName(SERIALIZED_NAME_HAS_SYNONYMS)
  private Boolean hasSynonyms;

  public static final String SERIALIZED_NAME_IS_MODERATOR_ONLY = "is_moderator_only";
  @SerializedName(SERIALIZED_NAME_IS_MODERATOR_ONLY)
  private Boolean isModeratorOnly;

  public static final String SERIALIZED_NAME_IS_REQUIRED = "is_required";
  @SerializedName(SERIALIZED_NAME_IS_REQUIRED)
  private Boolean isRequired;

  public static final String SERIALIZED_NAME_LAST_ACTIVITY_DATE = "last_activity_date";
  @SerializedName(SERIALIZED_NAME_LAST_ACTIVITY_DATE)
  private Integer lastActivityDate;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_SYNONYMS = "synonyms";
  @SerializedName(SERIALIZED_NAME_SYNONYMS)
  private List<Object> synonyms = new ArrayList<>();

  public static final String SERIALIZED_NAME_USER_ID = "user_id";
  @SerializedName(SERIALIZED_NAME_USER_ID)
  private Integer userId;

  public TagsInner() {
  }

  public TagsInner count(Integer count) {
    this.count = count;
    return this;
  }

  /**
   * Get count
   * @return count
   */
  @javax.annotation.Nullable
  public Integer getCount() {
    return count;
  }

  public void setCount(Integer count) {
    this.count = count;
  }


  public TagsInner hasSynonyms(Boolean hasSynonyms) {
    this.hasSynonyms = hasSynonyms;
    return this;
  }

  /**
   * Get hasSynonyms
   * @return hasSynonyms
   */
  @javax.annotation.Nullable
  public Boolean getHasSynonyms() {
    return hasSynonyms;
  }

  public void setHasSynonyms(Boolean hasSynonyms) {
    this.hasSynonyms = hasSynonyms;
  }


  public TagsInner isModeratorOnly(Boolean isModeratorOnly) {
    this.isModeratorOnly = isModeratorOnly;
    return this;
  }

  /**
   * Get isModeratorOnly
   * @return isModeratorOnly
   */
  @javax.annotation.Nullable
  public Boolean getIsModeratorOnly() {
    return isModeratorOnly;
  }

  public void setIsModeratorOnly(Boolean isModeratorOnly) {
    this.isModeratorOnly = isModeratorOnly;
  }


  public TagsInner isRequired(Boolean isRequired) {
    this.isRequired = isRequired;
    return this;
  }

  /**
   * Get isRequired
   * @return isRequired
   */
  @javax.annotation.Nullable
  public Boolean getIsRequired() {
    return isRequired;
  }

  public void setIsRequired(Boolean isRequired) {
    this.isRequired = isRequired;
  }


  public TagsInner lastActivityDate(Integer lastActivityDate) {
    this.lastActivityDate = lastActivityDate;
    return this;
  }

  /**
   * Get lastActivityDate
   * @return lastActivityDate
   */
  @javax.annotation.Nullable
  public Integer getLastActivityDate() {
    return lastActivityDate;
  }

  public void setLastActivityDate(Integer lastActivityDate) {
    this.lastActivityDate = lastActivityDate;
  }


  public TagsInner name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public TagsInner synonyms(List<Object> synonyms) {
    this.synonyms = synonyms;
    return this;
  }

  public TagsInner addSynonymsItem(Object synonymsItem) {
    if (this.synonyms == null) {
      this.synonyms = new ArrayList<>();
    }
    this.synonyms.add(synonymsItem);
    return this;
  }

  /**
   * Get synonyms
   * @return synonyms
   */
  @javax.annotation.Nullable
  public List<Object> getSynonyms() {
    return synonyms;
  }

  public void setSynonyms(List<Object> synonyms) {
    this.synonyms = synonyms;
  }


  public TagsInner userId(Integer userId) {
    this.userId = userId;
    return this;
  }

  /**
   * Get userId
   * @return userId
   */
  @javax.annotation.Nullable
  public Integer getUserId() {
    return userId;
  }

  public void setUserId(Integer userId) {
    this.userId = userId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TagsInner tagsInner = (TagsInner) o;
    return Objects.equals(this.count, tagsInner.count) &&
        Objects.equals(this.hasSynonyms, tagsInner.hasSynonyms) &&
        Objects.equals(this.isModeratorOnly, tagsInner.isModeratorOnly) &&
        Objects.equals(this.isRequired, tagsInner.isRequired) &&
        Objects.equals(this.lastActivityDate, tagsInner.lastActivityDate) &&
        Objects.equals(this.name, tagsInner.name) &&
        Objects.equals(this.synonyms, tagsInner.synonyms) &&
        Objects.equals(this.userId, tagsInner.userId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(count, hasSynonyms, isModeratorOnly, isRequired, lastActivityDate, name, synonyms, userId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TagsInner {\n");
    sb.append("    count: ").append(toIndentedString(count)).append("\n");
    sb.append("    hasSynonyms: ").append(toIndentedString(hasSynonyms)).append("\n");
    sb.append("    isModeratorOnly: ").append(toIndentedString(isModeratorOnly)).append("\n");
    sb.append("    isRequired: ").append(toIndentedString(isRequired)).append("\n");
    sb.append("    lastActivityDate: ").append(toIndentedString(lastActivityDate)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    synonyms: ").append(toIndentedString(synonyms)).append("\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("count");
    openapiFields.add("has_synonyms");
    openapiFields.add("is_moderator_only");
    openapiFields.add("is_required");
    openapiFields.add("last_activity_date");
    openapiFields.add("name");
    openapiFields.add("synonyms");
    openapiFields.add("user_id");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TagsInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TagsInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TagsInner is not found in the empty JSON string", TagsInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TagsInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TagsInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("synonyms") != null && !jsonObj.get("synonyms").isJsonNull() && !jsonObj.get("synonyms").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `synonyms` to be an array in the JSON string but got `%s`", jsonObj.get("synonyms").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TagsInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TagsInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TagsInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TagsInner.class));

       return (TypeAdapter<T>) new TypeAdapter<TagsInner>() {
           @Override
           public void write(JsonWriter out, TagsInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TagsInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TagsInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TagsInner
   * @throws IOException if the JSON string is invalid with respect to TagsInner
   */
  public static TagsInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TagsInner.class);
  }

  /**
   * Convert an instance of TagsInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

