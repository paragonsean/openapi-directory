/**
 * StackExchange
 * Stack Exchange is a network of 130+ Q&A communities including Stack Overflow. 
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.StackExchange);
  }
}(this, function(expect, StackExchange) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new StackExchange.UserTimelineObjectsInner();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('UserTimelineObjectsInner', function() {
    it('should create an instance of UserTimelineObjectsInner', function() {
      // uncomment below and update the code to test UserTimelineObjectsInner
      //var instance = new StackExchange.UserTimelineObjectsInner();
      //expect(instance).to.be.a(StackExchange.UserTimelineObjectsInner);
    });

    it('should have the property badgeId (base name: "badge_id")', function() {
      // uncomment below and update the code to test the property badgeId
      //var instance = new StackExchange.UserTimelineObjectsInner();
      //expect(instance).to.be();
    });

    it('should have the property commentId (base name: "comment_id")', function() {
      // uncomment below and update the code to test the property commentId
      //var instance = new StackExchange.UserTimelineObjectsInner();
      //expect(instance).to.be();
    });

    it('should have the property creationDate (base name: "creation_date")', function() {
      // uncomment below and update the code to test the property creationDate
      //var instance = new StackExchange.UserTimelineObjectsInner();
      //expect(instance).to.be();
    });

    it('should have the property detail (base name: "detail")', function() {
      // uncomment below and update the code to test the property detail
      //var instance = new StackExchange.UserTimelineObjectsInner();
      //expect(instance).to.be();
    });

    it('should have the property link (base name: "link")', function() {
      // uncomment below and update the code to test the property link
      //var instance = new StackExchange.UserTimelineObjectsInner();
      //expect(instance).to.be();
    });

    it('should have the property postId (base name: "post_id")', function() {
      // uncomment below and update the code to test the property postId
      //var instance = new StackExchange.UserTimelineObjectsInner();
      //expect(instance).to.be();
    });

    it('should have the property postType (base name: "post_type")', function() {
      // uncomment below and update the code to test the property postType
      //var instance = new StackExchange.UserTimelineObjectsInner();
      //expect(instance).to.be();
    });

    it('should have the property suggestedEditId (base name: "suggested_edit_id")', function() {
      // uncomment below and update the code to test the property suggestedEditId
      //var instance = new StackExchange.UserTimelineObjectsInner();
      //expect(instance).to.be();
    });

    it('should have the property timelineType (base name: "timeline_type")', function() {
      // uncomment below and update the code to test the property timelineType
      //var instance = new StackExchange.UserTimelineObjectsInner();
      //expect(instance).to.be();
    });

    it('should have the property title (base name: "title")', function() {
      // uncomment below and update the code to test the property title
      //var instance = new StackExchange.UserTimelineObjectsInner();
      //expect(instance).to.be();
    });

    it('should have the property userId (base name: "user_id")', function() {
      // uncomment below and update the code to test the property userId
      //var instance = new StackExchange.UserTimelineObjectsInner();
      //expect(instance).to.be();
    });

  });

}));
