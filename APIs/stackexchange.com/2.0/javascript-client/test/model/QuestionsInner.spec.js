/**
 * StackExchange
 * Stack Exchange is a network of 130+ Q&A communities including Stack Overflow. 
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.StackExchange);
  }
}(this, function(expect, StackExchange) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new StackExchange.QuestionsInner();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('QuestionsInner', function() {
    it('should create an instance of QuestionsInner', function() {
      // uncomment below and update the code to test QuestionsInner
      //var instance = new StackExchange.QuestionsInner();
      //expect(instance).to.be.a(StackExchange.QuestionsInner);
    });

    it('should have the property acceptedAnswerId (base name: "accepted_answer_id")', function() {
      // uncomment below and update the code to test the property acceptedAnswerId
      //var instance = new StackExchange.QuestionsInner();
      //expect(instance).to.be();
    });

    it('should have the property answerCount (base name: "answer_count")', function() {
      // uncomment below and update the code to test the property answerCount
      //var instance = new StackExchange.QuestionsInner();
      //expect(instance).to.be();
    });

    it('should have the property answers (base name: "answers")', function() {
      // uncomment below and update the code to test the property answers
      //var instance = new StackExchange.QuestionsInner();
      //expect(instance).to.be();
    });

    it('should have the property body (base name: "body")', function() {
      // uncomment below and update the code to test the property body
      //var instance = new StackExchange.QuestionsInner();
      //expect(instance).to.be();
    });

    it('should have the property bodyMarkdown (base name: "body_markdown")', function() {
      // uncomment below and update the code to test the property bodyMarkdown
      //var instance = new StackExchange.QuestionsInner();
      //expect(instance).to.be();
    });

    it('should have the property bountyAmount (base name: "bounty_amount")', function() {
      // uncomment below and update the code to test the property bountyAmount
      //var instance = new StackExchange.QuestionsInner();
      //expect(instance).to.be();
    });

    it('should have the property bountyClosesDate (base name: "bounty_closes_date")', function() {
      // uncomment below and update the code to test the property bountyClosesDate
      //var instance = new StackExchange.QuestionsInner();
      //expect(instance).to.be();
    });

    it('should have the property bountyUser (base name: "bounty_user")', function() {
      // uncomment below and update the code to test the property bountyUser
      //var instance = new StackExchange.QuestionsInner();
      //expect(instance).to.be();
    });

    it('should have the property canClose (base name: "can_close")', function() {
      // uncomment below and update the code to test the property canClose
      //var instance = new StackExchange.QuestionsInner();
      //expect(instance).to.be();
    });

    it('should have the property canFlag (base name: "can_flag")', function() {
      // uncomment below and update the code to test the property canFlag
      //var instance = new StackExchange.QuestionsInner();
      //expect(instance).to.be();
    });

    it('should have the property closeVoteCount (base name: "close_vote_count")', function() {
      // uncomment below and update the code to test the property closeVoteCount
      //var instance = new StackExchange.QuestionsInner();
      //expect(instance).to.be();
    });

    it('should have the property closedDate (base name: "closed_date")', function() {
      // uncomment below and update the code to test the property closedDate
      //var instance = new StackExchange.QuestionsInner();
      //expect(instance).to.be();
    });

    it('should have the property closedDetails (base name: "closed_details")', function() {
      // uncomment below and update the code to test the property closedDetails
      //var instance = new StackExchange.QuestionsInner();
      //expect(instance).to.be();
    });

    it('should have the property closedReason (base name: "closed_reason")', function() {
      // uncomment below and update the code to test the property closedReason
      //var instance = new StackExchange.QuestionsInner();
      //expect(instance).to.be();
    });

    it('should have the property commentCount (base name: "comment_count")', function() {
      // uncomment below and update the code to test the property commentCount
      //var instance = new StackExchange.QuestionsInner();
      //expect(instance).to.be();
    });

    it('should have the property comments (base name: "comments")', function() {
      // uncomment below and update the code to test the property comments
      //var instance = new StackExchange.QuestionsInner();
      //expect(instance).to.be();
    });

    it('should have the property communityOwnedDate (base name: "community_owned_date")', function() {
      // uncomment below and update the code to test the property communityOwnedDate
      //var instance = new StackExchange.QuestionsInner();
      //expect(instance).to.be();
    });

    it('should have the property creationDate (base name: "creation_date")', function() {
      // uncomment below and update the code to test the property creationDate
      //var instance = new StackExchange.QuestionsInner();
      //expect(instance).to.be();
    });

    it('should have the property deleteVoteCount (base name: "delete_vote_count")', function() {
      // uncomment below and update the code to test the property deleteVoteCount
      //var instance = new StackExchange.QuestionsInner();
      //expect(instance).to.be();
    });

    it('should have the property downVoteCount (base name: "down_vote_count")', function() {
      // uncomment below and update the code to test the property downVoteCount
      //var instance = new StackExchange.QuestionsInner();
      //expect(instance).to.be();
    });

    it('should have the property downvoted (base name: "downvoted")', function() {
      // uncomment below and update the code to test the property downvoted
      //var instance = new StackExchange.QuestionsInner();
      //expect(instance).to.be();
    });

    it('should have the property favoriteCount (base name: "favorite_count")', function() {
      // uncomment below and update the code to test the property favoriteCount
      //var instance = new StackExchange.QuestionsInner();
      //expect(instance).to.be();
    });

    it('should have the property favorited (base name: "favorited")', function() {
      // uncomment below and update the code to test the property favorited
      //var instance = new StackExchange.QuestionsInner();
      //expect(instance).to.be();
    });

    it('should have the property isAnswered (base name: "is_answered")', function() {
      // uncomment below and update the code to test the property isAnswered
      //var instance = new StackExchange.QuestionsInner();
      //expect(instance).to.be();
    });

    it('should have the property lastActivityDate (base name: "last_activity_date")', function() {
      // uncomment below and update the code to test the property lastActivityDate
      //var instance = new StackExchange.QuestionsInner();
      //expect(instance).to.be();
    });

    it('should have the property lastEditDate (base name: "last_edit_date")', function() {
      // uncomment below and update the code to test the property lastEditDate
      //var instance = new StackExchange.QuestionsInner();
      //expect(instance).to.be();
    });

    it('should have the property lastEditor (base name: "last_editor")', function() {
      // uncomment below and update the code to test the property lastEditor
      //var instance = new StackExchange.QuestionsInner();
      //expect(instance).to.be();
    });

    it('should have the property link (base name: "link")', function() {
      // uncomment below and update the code to test the property link
      //var instance = new StackExchange.QuestionsInner();
      //expect(instance).to.be();
    });

    it('should have the property lockedDate (base name: "locked_date")', function() {
      // uncomment below and update the code to test the property lockedDate
      //var instance = new StackExchange.QuestionsInner();
      //expect(instance).to.be();
    });

    it('should have the property migratedFrom (base name: "migrated_from")', function() {
      // uncomment below and update the code to test the property migratedFrom
      //var instance = new StackExchange.QuestionsInner();
      //expect(instance).to.be();
    });

    it('should have the property migratedTo (base name: "migrated_to")', function() {
      // uncomment below and update the code to test the property migratedTo
      //var instance = new StackExchange.QuestionsInner();
      //expect(instance).to.be();
    });

    it('should have the property notice (base name: "notice")', function() {
      // uncomment below and update the code to test the property notice
      //var instance = new StackExchange.QuestionsInner();
      //expect(instance).to.be();
    });

    it('should have the property owner (base name: "owner")', function() {
      // uncomment below and update the code to test the property owner
      //var instance = new StackExchange.QuestionsInner();
      //expect(instance).to.be();
    });

    it('should have the property protectedDate (base name: "protected_date")', function() {
      // uncomment below and update the code to test the property protectedDate
      //var instance = new StackExchange.QuestionsInner();
      //expect(instance).to.be();
    });

    it('should have the property questionId (base name: "question_id")', function() {
      // uncomment below and update the code to test the property questionId
      //var instance = new StackExchange.QuestionsInner();
      //expect(instance).to.be();
    });

    it('should have the property reopenVoteCount (base name: "reopen_vote_count")', function() {
      // uncomment below and update the code to test the property reopenVoteCount
      //var instance = new StackExchange.QuestionsInner();
      //expect(instance).to.be();
    });

    it('should have the property score (base name: "score")', function() {
      // uncomment below and update the code to test the property score
      //var instance = new StackExchange.QuestionsInner();
      //expect(instance).to.be();
    });

    it('should have the property shareLink (base name: "share_link")', function() {
      // uncomment below and update the code to test the property shareLink
      //var instance = new StackExchange.QuestionsInner();
      //expect(instance).to.be();
    });

    it('should have the property tags (base name: "tags")', function() {
      // uncomment below and update the code to test the property tags
      //var instance = new StackExchange.QuestionsInner();
      //expect(instance).to.be();
    });

    it('should have the property title (base name: "title")', function() {
      // uncomment below and update the code to test the property title
      //var instance = new StackExchange.QuestionsInner();
      //expect(instance).to.be();
    });

    it('should have the property upVoteCount (base name: "up_vote_count")', function() {
      // uncomment below and update the code to test the property upVoteCount
      //var instance = new StackExchange.QuestionsInner();
      //expect(instance).to.be();
    });

    it('should have the property upvoted (base name: "upvoted")', function() {
      // uncomment below and update the code to test the property upvoted
      //var instance = new StackExchange.QuestionsInner();
      //expect(instance).to.be();
    });

    it('should have the property viewCount (base name: "view_count")', function() {
      // uncomment below and update the code to test the property viewCount
      //var instance = new StackExchange.QuestionsInner();
      //expect(instance).to.be();
    });

  });

}));
