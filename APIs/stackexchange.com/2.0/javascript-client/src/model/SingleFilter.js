/**
 * StackExchange
 * Stack Exchange is a network of 130+ Q&A communities including Stack Overflow. 
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The SingleFilter model module.
 * @module model/SingleFilter
 * @version 2.0
 */
class SingleFilter {
    /**
     * Constructs a new <code>SingleFilter</code>.
     * @alias module:model/SingleFilter
     */
    constructor() { 
        
        SingleFilter.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SingleFilter</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SingleFilter} obj Optional instance to populate.
     * @return {module:model/SingleFilter} The populated <code>SingleFilter</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SingleFilter();

            if (data.hasOwnProperty('filter')) {
                obj['filter'] = ApiClient.convertToType(data['filter'], 'String');
            }
            if (data.hasOwnProperty('filter_type')) {
                obj['filter_type'] = ApiClient.convertToType(data['filter_type'], 'String');
            }
            if (data.hasOwnProperty('included_fields')) {
                obj['included_fields'] = ApiClient.convertToType(data['included_fields'], [Object]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SingleFilter</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SingleFilter</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['filter'] && !(typeof data['filter'] === 'string' || data['filter'] instanceof String)) {
            throw new Error("Expected the field `filter` to be a primitive type in the JSON string but got " + data['filter']);
        }
        // ensure the json data is a string
        if (data['filter_type'] && !(typeof data['filter_type'] === 'string' || data['filter_type'] instanceof String)) {
            throw new Error("Expected the field `filter_type` to be a primitive type in the JSON string but got " + data['filter_type']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['included_fields'])) {
            throw new Error("Expected the field `included_fields` to be an array in the JSON data but got " + data['included_fields']);
        }

        return true;
    }


}



/**
 * @member {String} filter
 */
SingleFilter.prototype['filter'] = undefined;

/**
 * @member {String} filter_type
 */
SingleFilter.prototype['filter_type'] = undefined;

/**
 * @member {Array.<Object>} included_fields
 */
SingleFilter.prototype['included_fields'] = undefined;






export default SingleFilter;

