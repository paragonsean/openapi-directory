/**
 * StackExchange
 * Stack Exchange is a network of 130+ Q&A communities including Stack Overflow. 
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AnswersInnerLastEditor from './AnswersInnerLastEditor';
import QuestionsInnerClosedDetails from './QuestionsInnerClosedDetails';
import QuestionsInnerMigratedFrom from './QuestionsInnerMigratedFrom';
import QuestionsInnerNotice from './QuestionsInnerNotice';

/**
 * The QuestionsInner model module.
 * @module model/QuestionsInner
 * @version 2.0
 */
class QuestionsInner {
    /**
     * Constructs a new <code>QuestionsInner</code>.
     * @alias module:model/QuestionsInner
     */
    constructor() { 
        
        QuestionsInner.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>QuestionsInner</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/QuestionsInner} obj Optional instance to populate.
     * @return {module:model/QuestionsInner} The populated <code>QuestionsInner</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new QuestionsInner();

            if (data.hasOwnProperty('accepted_answer_id')) {
                obj['accepted_answer_id'] = ApiClient.convertToType(data['accepted_answer_id'], 'Number');
            }
            if (data.hasOwnProperty('answer_count')) {
                obj['answer_count'] = ApiClient.convertToType(data['answer_count'], 'Number');
            }
            if (data.hasOwnProperty('answers')) {
                obj['answers'] = ApiClient.convertToType(data['answers'], [Object]);
            }
            if (data.hasOwnProperty('body')) {
                obj['body'] = ApiClient.convertToType(data['body'], 'String');
            }
            if (data.hasOwnProperty('body_markdown')) {
                obj['body_markdown'] = ApiClient.convertToType(data['body_markdown'], 'String');
            }
            if (data.hasOwnProperty('bounty_amount')) {
                obj['bounty_amount'] = ApiClient.convertToType(data['bounty_amount'], 'Number');
            }
            if (data.hasOwnProperty('bounty_closes_date')) {
                obj['bounty_closes_date'] = ApiClient.convertToType(data['bounty_closes_date'], 'Number');
            }
            if (data.hasOwnProperty('bounty_user')) {
                obj['bounty_user'] = AnswersInnerLastEditor.constructFromObject(data['bounty_user']);
            }
            if (data.hasOwnProperty('can_close')) {
                obj['can_close'] = ApiClient.convertToType(data['can_close'], 'Boolean');
            }
            if (data.hasOwnProperty('can_flag')) {
                obj['can_flag'] = ApiClient.convertToType(data['can_flag'], 'Boolean');
            }
            if (data.hasOwnProperty('close_vote_count')) {
                obj['close_vote_count'] = ApiClient.convertToType(data['close_vote_count'], 'Number');
            }
            if (data.hasOwnProperty('closed_date')) {
                obj['closed_date'] = ApiClient.convertToType(data['closed_date'], 'Number');
            }
            if (data.hasOwnProperty('closed_details')) {
                obj['closed_details'] = QuestionsInnerClosedDetails.constructFromObject(data['closed_details']);
            }
            if (data.hasOwnProperty('closed_reason')) {
                obj['closed_reason'] = ApiClient.convertToType(data['closed_reason'], 'String');
            }
            if (data.hasOwnProperty('comment_count')) {
                obj['comment_count'] = ApiClient.convertToType(data['comment_count'], 'Number');
            }
            if (data.hasOwnProperty('comments')) {
                obj['comments'] = ApiClient.convertToType(data['comments'], [Object]);
            }
            if (data.hasOwnProperty('community_owned_date')) {
                obj['community_owned_date'] = ApiClient.convertToType(data['community_owned_date'], 'Number');
            }
            if (data.hasOwnProperty('creation_date')) {
                obj['creation_date'] = ApiClient.convertToType(data['creation_date'], 'Number');
            }
            if (data.hasOwnProperty('delete_vote_count')) {
                obj['delete_vote_count'] = ApiClient.convertToType(data['delete_vote_count'], 'Number');
            }
            if (data.hasOwnProperty('down_vote_count')) {
                obj['down_vote_count'] = ApiClient.convertToType(data['down_vote_count'], 'Number');
            }
            if (data.hasOwnProperty('downvoted')) {
                obj['downvoted'] = ApiClient.convertToType(data['downvoted'], 'Boolean');
            }
            if (data.hasOwnProperty('favorite_count')) {
                obj['favorite_count'] = ApiClient.convertToType(data['favorite_count'], 'Number');
            }
            if (data.hasOwnProperty('favorited')) {
                obj['favorited'] = ApiClient.convertToType(data['favorited'], 'Boolean');
            }
            if (data.hasOwnProperty('is_answered')) {
                obj['is_answered'] = ApiClient.convertToType(data['is_answered'], 'Boolean');
            }
            if (data.hasOwnProperty('last_activity_date')) {
                obj['last_activity_date'] = ApiClient.convertToType(data['last_activity_date'], 'Number');
            }
            if (data.hasOwnProperty('last_edit_date')) {
                obj['last_edit_date'] = ApiClient.convertToType(data['last_edit_date'], 'Number');
            }
            if (data.hasOwnProperty('last_editor')) {
                obj['last_editor'] = AnswersInnerLastEditor.constructFromObject(data['last_editor']);
            }
            if (data.hasOwnProperty('link')) {
                obj['link'] = ApiClient.convertToType(data['link'], 'String');
            }
            if (data.hasOwnProperty('locked_date')) {
                obj['locked_date'] = ApiClient.convertToType(data['locked_date'], 'Number');
            }
            if (data.hasOwnProperty('migrated_from')) {
                obj['migrated_from'] = QuestionsInnerMigratedFrom.constructFromObject(data['migrated_from']);
            }
            if (data.hasOwnProperty('migrated_to')) {
                obj['migrated_to'] = QuestionsInnerMigratedFrom.constructFromObject(data['migrated_to']);
            }
            if (data.hasOwnProperty('notice')) {
                obj['notice'] = QuestionsInnerNotice.constructFromObject(data['notice']);
            }
            if (data.hasOwnProperty('owner')) {
                obj['owner'] = AnswersInnerLastEditor.constructFromObject(data['owner']);
            }
            if (data.hasOwnProperty('protected_date')) {
                obj['protected_date'] = ApiClient.convertToType(data['protected_date'], 'Number');
            }
            if (data.hasOwnProperty('question_id')) {
                obj['question_id'] = ApiClient.convertToType(data['question_id'], 'Number');
            }
            if (data.hasOwnProperty('reopen_vote_count')) {
                obj['reopen_vote_count'] = ApiClient.convertToType(data['reopen_vote_count'], 'Number');
            }
            if (data.hasOwnProperty('score')) {
                obj['score'] = ApiClient.convertToType(data['score'], 'Number');
            }
            if (data.hasOwnProperty('share_link')) {
                obj['share_link'] = ApiClient.convertToType(data['share_link'], 'String');
            }
            if (data.hasOwnProperty('tags')) {
                obj['tags'] = ApiClient.convertToType(data['tags'], [Object]);
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
            if (data.hasOwnProperty('up_vote_count')) {
                obj['up_vote_count'] = ApiClient.convertToType(data['up_vote_count'], 'Number');
            }
            if (data.hasOwnProperty('upvoted')) {
                obj['upvoted'] = ApiClient.convertToType(data['upvoted'], 'Boolean');
            }
            if (data.hasOwnProperty('view_count')) {
                obj['view_count'] = ApiClient.convertToType(data['view_count'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>QuestionsInner</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>QuestionsInner</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['answers'])) {
            throw new Error("Expected the field `answers` to be an array in the JSON data but got " + data['answers']);
        }
        // ensure the json data is a string
        if (data['body'] && !(typeof data['body'] === 'string' || data['body'] instanceof String)) {
            throw new Error("Expected the field `body` to be a primitive type in the JSON string but got " + data['body']);
        }
        // ensure the json data is a string
        if (data['body_markdown'] && !(typeof data['body_markdown'] === 'string' || data['body_markdown'] instanceof String)) {
            throw new Error("Expected the field `body_markdown` to be a primitive type in the JSON string but got " + data['body_markdown']);
        }
        // validate the optional field `bounty_user`
        if (data['bounty_user']) { // data not null
          AnswersInnerLastEditor.validateJSON(data['bounty_user']);
        }
        // validate the optional field `closed_details`
        if (data['closed_details']) { // data not null
          QuestionsInnerClosedDetails.validateJSON(data['closed_details']);
        }
        // ensure the json data is a string
        if (data['closed_reason'] && !(typeof data['closed_reason'] === 'string' || data['closed_reason'] instanceof String)) {
            throw new Error("Expected the field `closed_reason` to be a primitive type in the JSON string but got " + data['closed_reason']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['comments'])) {
            throw new Error("Expected the field `comments` to be an array in the JSON data but got " + data['comments']);
        }
        // validate the optional field `last_editor`
        if (data['last_editor']) { // data not null
          AnswersInnerLastEditor.validateJSON(data['last_editor']);
        }
        // ensure the json data is a string
        if (data['link'] && !(typeof data['link'] === 'string' || data['link'] instanceof String)) {
            throw new Error("Expected the field `link` to be a primitive type in the JSON string but got " + data['link']);
        }
        // validate the optional field `migrated_from`
        if (data['migrated_from']) { // data not null
          QuestionsInnerMigratedFrom.validateJSON(data['migrated_from']);
        }
        // validate the optional field `migrated_to`
        if (data['migrated_to']) { // data not null
          QuestionsInnerMigratedFrom.validateJSON(data['migrated_to']);
        }
        // validate the optional field `notice`
        if (data['notice']) { // data not null
          QuestionsInnerNotice.validateJSON(data['notice']);
        }
        // validate the optional field `owner`
        if (data['owner']) { // data not null
          AnswersInnerLastEditor.validateJSON(data['owner']);
        }
        // ensure the json data is a string
        if (data['share_link'] && !(typeof data['share_link'] === 'string' || data['share_link'] instanceof String)) {
            throw new Error("Expected the field `share_link` to be a primitive type in the JSON string but got " + data['share_link']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['tags'])) {
            throw new Error("Expected the field `tags` to be an array in the JSON data but got " + data['tags']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }

        return true;
    }


}



/**
 * @member {Number} accepted_answer_id
 */
QuestionsInner.prototype['accepted_answer_id'] = undefined;

/**
 * @member {Number} answer_count
 */
QuestionsInner.prototype['answer_count'] = undefined;

/**
 * @member {Array.<Object>} answers
 */
QuestionsInner.prototype['answers'] = undefined;

/**
 * @member {String} body
 */
QuestionsInner.prototype['body'] = undefined;

/**
 * @member {String} body_markdown
 */
QuestionsInner.prototype['body_markdown'] = undefined;

/**
 * @member {Number} bounty_amount
 */
QuestionsInner.prototype['bounty_amount'] = undefined;

/**
 * @member {Number} bounty_closes_date
 */
QuestionsInner.prototype['bounty_closes_date'] = undefined;

/**
 * @member {module:model/AnswersInnerLastEditor} bounty_user
 */
QuestionsInner.prototype['bounty_user'] = undefined;

/**
 * @member {Boolean} can_close
 */
QuestionsInner.prototype['can_close'] = undefined;

/**
 * @member {Boolean} can_flag
 */
QuestionsInner.prototype['can_flag'] = undefined;

/**
 * @member {Number} close_vote_count
 */
QuestionsInner.prototype['close_vote_count'] = undefined;

/**
 * @member {Number} closed_date
 */
QuestionsInner.prototype['closed_date'] = undefined;

/**
 * @member {module:model/QuestionsInnerClosedDetails} closed_details
 */
QuestionsInner.prototype['closed_details'] = undefined;

/**
 * @member {String} closed_reason
 */
QuestionsInner.prototype['closed_reason'] = undefined;

/**
 * @member {Number} comment_count
 */
QuestionsInner.prototype['comment_count'] = undefined;

/**
 * @member {Array.<Object>} comments
 */
QuestionsInner.prototype['comments'] = undefined;

/**
 * @member {Number} community_owned_date
 */
QuestionsInner.prototype['community_owned_date'] = undefined;

/**
 * @member {Number} creation_date
 */
QuestionsInner.prototype['creation_date'] = undefined;

/**
 * @member {Number} delete_vote_count
 */
QuestionsInner.prototype['delete_vote_count'] = undefined;

/**
 * @member {Number} down_vote_count
 */
QuestionsInner.prototype['down_vote_count'] = undefined;

/**
 * @member {Boolean} downvoted
 */
QuestionsInner.prototype['downvoted'] = undefined;

/**
 * @member {Number} favorite_count
 */
QuestionsInner.prototype['favorite_count'] = undefined;

/**
 * @member {Boolean} favorited
 */
QuestionsInner.prototype['favorited'] = undefined;

/**
 * @member {Boolean} is_answered
 */
QuestionsInner.prototype['is_answered'] = undefined;

/**
 * @member {Number} last_activity_date
 */
QuestionsInner.prototype['last_activity_date'] = undefined;

/**
 * @member {Number} last_edit_date
 */
QuestionsInner.prototype['last_edit_date'] = undefined;

/**
 * @member {module:model/AnswersInnerLastEditor} last_editor
 */
QuestionsInner.prototype['last_editor'] = undefined;

/**
 * @member {String} link
 */
QuestionsInner.prototype['link'] = undefined;

/**
 * @member {Number} locked_date
 */
QuestionsInner.prototype['locked_date'] = undefined;

/**
 * @member {module:model/QuestionsInnerMigratedFrom} migrated_from
 */
QuestionsInner.prototype['migrated_from'] = undefined;

/**
 * @member {module:model/QuestionsInnerMigratedFrom} migrated_to
 */
QuestionsInner.prototype['migrated_to'] = undefined;

/**
 * @member {module:model/QuestionsInnerNotice} notice
 */
QuestionsInner.prototype['notice'] = undefined;

/**
 * @member {module:model/AnswersInnerLastEditor} owner
 */
QuestionsInner.prototype['owner'] = undefined;

/**
 * @member {Number} protected_date
 */
QuestionsInner.prototype['protected_date'] = undefined;

/**
 * @member {Number} question_id
 */
QuestionsInner.prototype['question_id'] = undefined;

/**
 * @member {Number} reopen_vote_count
 */
QuestionsInner.prototype['reopen_vote_count'] = undefined;

/**
 * @member {Number} score
 */
QuestionsInner.prototype['score'] = undefined;

/**
 * @member {String} share_link
 */
QuestionsInner.prototype['share_link'] = undefined;

/**
 * @member {Array.<Object>} tags
 */
QuestionsInner.prototype['tags'] = undefined;

/**
 * @member {String} title
 */
QuestionsInner.prototype['title'] = undefined;

/**
 * @member {Number} up_vote_count
 */
QuestionsInner.prototype['up_vote_count'] = undefined;

/**
 * @member {Boolean} upvoted
 */
QuestionsInner.prototype['upvoted'] = undefined;

/**
 * @member {Number} view_count
 */
QuestionsInner.prototype['view_count'] = undefined;






export default QuestionsInner;

