/**
 * StackExchange
 * Stack Exchange is a network of 130+ Q&A communities including Stack Overflow. 
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The TagsInner model module.
 * @module model/TagsInner
 * @version 2.0
 */
class TagsInner {
    /**
     * Constructs a new <code>TagsInner</code>.
     * @alias module:model/TagsInner
     */
    constructor() { 
        
        TagsInner.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>TagsInner</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TagsInner} obj Optional instance to populate.
     * @return {module:model/TagsInner} The populated <code>TagsInner</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TagsInner();

            if (data.hasOwnProperty('count')) {
                obj['count'] = ApiClient.convertToType(data['count'], 'Number');
            }
            if (data.hasOwnProperty('has_synonyms')) {
                obj['has_synonyms'] = ApiClient.convertToType(data['has_synonyms'], 'Boolean');
            }
            if (data.hasOwnProperty('is_moderator_only')) {
                obj['is_moderator_only'] = ApiClient.convertToType(data['is_moderator_only'], 'Boolean');
            }
            if (data.hasOwnProperty('is_required')) {
                obj['is_required'] = ApiClient.convertToType(data['is_required'], 'Boolean');
            }
            if (data.hasOwnProperty('last_activity_date')) {
                obj['last_activity_date'] = ApiClient.convertToType(data['last_activity_date'], 'Number');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('synonyms')) {
                obj['synonyms'] = ApiClient.convertToType(data['synonyms'], [Object]);
            }
            if (data.hasOwnProperty('user_id')) {
                obj['user_id'] = ApiClient.convertToType(data['user_id'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TagsInner</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TagsInner</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['synonyms'])) {
            throw new Error("Expected the field `synonyms` to be an array in the JSON data but got " + data['synonyms']);
        }

        return true;
    }


}



/**
 * @member {Number} count
 */
TagsInner.prototype['count'] = undefined;

/**
 * @member {Boolean} has_synonyms
 */
TagsInner.prototype['has_synonyms'] = undefined;

/**
 * @member {Boolean} is_moderator_only
 */
TagsInner.prototype['is_moderator_only'] = undefined;

/**
 * @member {Boolean} is_required
 */
TagsInner.prototype['is_required'] = undefined;

/**
 * @member {Number} last_activity_date
 */
TagsInner.prototype['last_activity_date'] = undefined;

/**
 * @member {String} name
 */
TagsInner.prototype['name'] = undefined;

/**
 * @member {Array.<Object>} synonyms
 */
TagsInner.prototype['synonyms'] = undefined;

/**
 * @member {Number} user_id
 */
TagsInner.prototype['user_id'] = undefined;






export default TagsInner;

