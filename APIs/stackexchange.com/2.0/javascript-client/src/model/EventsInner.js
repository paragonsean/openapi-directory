/**
 * StackExchange
 * Stack Exchange is a network of 130+ Q&A communities including Stack Overflow. 
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The EventsInner model module.
 * @module model/EventsInner
 * @version 2.0
 */
class EventsInner {
    /**
     * Constructs a new <code>EventsInner</code>.
     * @alias module:model/EventsInner
     */
    constructor() { 
        
        EventsInner.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>EventsInner</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/EventsInner} obj Optional instance to populate.
     * @return {module:model/EventsInner} The populated <code>EventsInner</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new EventsInner();

            if (data.hasOwnProperty('creation_date')) {
                obj['creation_date'] = ApiClient.convertToType(data['creation_date'], 'Number');
            }
            if (data.hasOwnProperty('event_type')) {
                obj['event_type'] = ApiClient.convertToType(data['event_type'], 'String');
            }
            if (data.hasOwnProperty('excerpt')) {
                obj['excerpt'] = ApiClient.convertToType(data['excerpt'], 'String');
            }
            if (data.hasOwnProperty('link')) {
                obj['link'] = ApiClient.convertToType(data['link'], 'String');
            }
            if (data.hasOwnProperty('the id of the object (answer, comment, question, or user) the event describes')) {
                obj['the id of the object (answer, comment, question, or user) the event describes'] = ApiClient.convertToType(data['the id of the object (answer, comment, question, or user) the event describes'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>EventsInner</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>EventsInner</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['event_type'] && !(typeof data['event_type'] === 'string' || data['event_type'] instanceof String)) {
            throw new Error("Expected the field `event_type` to be a primitive type in the JSON string but got " + data['event_type']);
        }
        // ensure the json data is a string
        if (data['excerpt'] && !(typeof data['excerpt'] === 'string' || data['excerpt'] instanceof String)) {
            throw new Error("Expected the field `excerpt` to be a primitive type in the JSON string but got " + data['excerpt']);
        }
        // ensure the json data is a string
        if (data['link'] && !(typeof data['link'] === 'string' || data['link'] instanceof String)) {
            throw new Error("Expected the field `link` to be a primitive type in the JSON string but got " + data['link']);
        }

        return true;
    }


}



/**
 * @member {Number} creation_date
 */
EventsInner.prototype['creation_date'] = undefined;

/**
 * @member {String} event_type
 */
EventsInner.prototype['event_type'] = undefined;

/**
 * @member {String} excerpt
 */
EventsInner.prototype['excerpt'] = undefined;

/**
 * @member {String} link
 */
EventsInner.prototype['link'] = undefined;

/**
 * @member {Number} the id of the object (answer, comment, question, or user) the event describes
 */
EventsInner.prototype['the id of the object (answer, comment, question, or user) the event describes'] = undefined;






export default EventsInner;

