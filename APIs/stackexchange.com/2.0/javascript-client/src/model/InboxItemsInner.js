/**
 * StackExchange
 * Stack Exchange is a network of 130+ Q&A communities including Stack Overflow. 
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import InboxItemsInnerSite from './InboxItemsInnerSite';

/**
 * The InboxItemsInner model module.
 * @module model/InboxItemsInner
 * @version 2.0
 */
class InboxItemsInner {
    /**
     * Constructs a new <code>InboxItemsInner</code>.
     * @alias module:model/InboxItemsInner
     */
    constructor() { 
        
        InboxItemsInner.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>InboxItemsInner</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/InboxItemsInner} obj Optional instance to populate.
     * @return {module:model/InboxItemsInner} The populated <code>InboxItemsInner</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new InboxItemsInner();

            if (data.hasOwnProperty('answer_id')) {
                obj['answer_id'] = ApiClient.convertToType(data['answer_id'], 'Number');
            }
            if (data.hasOwnProperty('body')) {
                obj['body'] = ApiClient.convertToType(data['body'], 'String');
            }
            if (data.hasOwnProperty('comment_id')) {
                obj['comment_id'] = ApiClient.convertToType(data['comment_id'], 'Number');
            }
            if (data.hasOwnProperty('creation_date')) {
                obj['creation_date'] = ApiClient.convertToType(data['creation_date'], 'Number');
            }
            if (data.hasOwnProperty('is_unread')) {
                obj['is_unread'] = ApiClient.convertToType(data['is_unread'], 'Boolean');
            }
            if (data.hasOwnProperty('item_type')) {
                obj['item_type'] = ApiClient.convertToType(data['item_type'], 'String');
            }
            if (data.hasOwnProperty('link')) {
                obj['link'] = ApiClient.convertToType(data['link'], 'String');
            }
            if (data.hasOwnProperty('question_id')) {
                obj['question_id'] = ApiClient.convertToType(data['question_id'], 'Number');
            }
            if (data.hasOwnProperty('site')) {
                obj['site'] = InboxItemsInnerSite.constructFromObject(data['site']);
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>InboxItemsInner</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>InboxItemsInner</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['body'] && !(typeof data['body'] === 'string' || data['body'] instanceof String)) {
            throw new Error("Expected the field `body` to be a primitive type in the JSON string but got " + data['body']);
        }
        // ensure the json data is a string
        if (data['item_type'] && !(typeof data['item_type'] === 'string' || data['item_type'] instanceof String)) {
            throw new Error("Expected the field `item_type` to be a primitive type in the JSON string but got " + data['item_type']);
        }
        // ensure the json data is a string
        if (data['link'] && !(typeof data['link'] === 'string' || data['link'] instanceof String)) {
            throw new Error("Expected the field `link` to be a primitive type in the JSON string but got " + data['link']);
        }
        // validate the optional field `site`
        if (data['site']) { // data not null
          InboxItemsInnerSite.validateJSON(data['site']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }

        return true;
    }


}



/**
 * @member {Number} answer_id
 */
InboxItemsInner.prototype['answer_id'] = undefined;

/**
 * @member {String} body
 */
InboxItemsInner.prototype['body'] = undefined;

/**
 * @member {Number} comment_id
 */
InboxItemsInner.prototype['comment_id'] = undefined;

/**
 * @member {Number} creation_date
 */
InboxItemsInner.prototype['creation_date'] = undefined;

/**
 * @member {Boolean} is_unread
 */
InboxItemsInner.prototype['is_unread'] = undefined;

/**
 * @member {String} item_type
 */
InboxItemsInner.prototype['item_type'] = undefined;

/**
 * @member {String} link
 */
InboxItemsInner.prototype['link'] = undefined;

/**
 * @member {Number} question_id
 */
InboxItemsInner.prototype['question_id'] = undefined;

/**
 * @member {module:model/InboxItemsInnerSite} site
 */
InboxItemsInner.prototype['site'] = undefined;

/**
 * @member {String} title
 */
InboxItemsInner.prototype['title'] = undefined;






export default InboxItemsInner;

