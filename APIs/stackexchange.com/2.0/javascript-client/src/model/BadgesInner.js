/**
 * StackExchange
 * Stack Exchange is a network of 130+ Q&A communities including Stack Overflow. 
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AnswersInnerLastEditor from './AnswersInnerLastEditor';

/**
 * The BadgesInner model module.
 * @module model/BadgesInner
 * @version 2.0
 */
class BadgesInner {
    /**
     * Constructs a new <code>BadgesInner</code>.
     * @alias module:model/BadgesInner
     */
    constructor() { 
        
        BadgesInner.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>BadgesInner</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/BadgesInner} obj Optional instance to populate.
     * @return {module:model/BadgesInner} The populated <code>BadgesInner</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new BadgesInner();

            if (data.hasOwnProperty('award_count')) {
                obj['award_count'] = ApiClient.convertToType(data['award_count'], 'Number');
            }
            if (data.hasOwnProperty('badge_id')) {
                obj['badge_id'] = ApiClient.convertToType(data['badge_id'], 'Number');
            }
            if (data.hasOwnProperty('badge_type')) {
                obj['badge_type'] = ApiClient.convertToType(data['badge_type'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('link')) {
                obj['link'] = ApiClient.convertToType(data['link'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('rank')) {
                obj['rank'] = ApiClient.convertToType(data['rank'], 'String');
            }
            if (data.hasOwnProperty('user')) {
                obj['user'] = AnswersInnerLastEditor.constructFromObject(data['user']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>BadgesInner</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>BadgesInner</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['badge_type'] && !(typeof data['badge_type'] === 'string' || data['badge_type'] instanceof String)) {
            throw new Error("Expected the field `badge_type` to be a primitive type in the JSON string but got " + data['badge_type']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['link'] && !(typeof data['link'] === 'string' || data['link'] instanceof String)) {
            throw new Error("Expected the field `link` to be a primitive type in the JSON string but got " + data['link']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['rank'] && !(typeof data['rank'] === 'string' || data['rank'] instanceof String)) {
            throw new Error("Expected the field `rank` to be a primitive type in the JSON string but got " + data['rank']);
        }
        // validate the optional field `user`
        if (data['user']) { // data not null
          AnswersInnerLastEditor.validateJSON(data['user']);
        }

        return true;
    }


}



/**
 * @member {Number} award_count
 */
BadgesInner.prototype['award_count'] = undefined;

/**
 * @member {Number} badge_id
 */
BadgesInner.prototype['badge_id'] = undefined;

/**
 * @member {String} badge_type
 */
BadgesInner.prototype['badge_type'] = undefined;

/**
 * @member {String} description
 */
BadgesInner.prototype['description'] = undefined;

/**
 * @member {String} link
 */
BadgesInner.prototype['link'] = undefined;

/**
 * @member {String} name
 */
BadgesInner.prototype['name'] = undefined;

/**
 * @member {String} rank
 */
BadgesInner.prototype['rank'] = undefined;

/**
 * @member {module:model/AnswersInnerLastEditor} user
 */
BadgesInner.prototype['user'] = undefined;






export default BadgesInner;

