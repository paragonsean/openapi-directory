/**
 * StackExchange
 * Stack Exchange is a network of 130+ Q&A communities including Stack Overflow. 
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AnswersInnerLastEditor from './AnswersInnerLastEditor';

/**
 * The AnswersInner model module.
 * @module model/AnswersInner
 * @version 2.0
 */
class AnswersInner {
    /**
     * Constructs a new <code>AnswersInner</code>.
     * @alias module:model/AnswersInner
     */
    constructor() { 
        
        AnswersInner.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AnswersInner</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AnswersInner} obj Optional instance to populate.
     * @return {module:model/AnswersInner} The populated <code>AnswersInner</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AnswersInner();

            if (data.hasOwnProperty('accepted')) {
                obj['accepted'] = ApiClient.convertToType(data['accepted'], 'Boolean');
            }
            if (data.hasOwnProperty('answer_id')) {
                obj['answer_id'] = ApiClient.convertToType(data['answer_id'], 'Number');
            }
            if (data.hasOwnProperty('awarded_bounty_amount')) {
                obj['awarded_bounty_amount'] = ApiClient.convertToType(data['awarded_bounty_amount'], 'Number');
            }
            if (data.hasOwnProperty('awarded_bounty_users')) {
                obj['awarded_bounty_users'] = ApiClient.convertToType(data['awarded_bounty_users'], [Object]);
            }
            if (data.hasOwnProperty('body')) {
                obj['body'] = ApiClient.convertToType(data['body'], 'String');
            }
            if (data.hasOwnProperty('body_markdown')) {
                obj['body_markdown'] = ApiClient.convertToType(data['body_markdown'], 'String');
            }
            if (data.hasOwnProperty('can_flag')) {
                obj['can_flag'] = ApiClient.convertToType(data['can_flag'], 'Boolean');
            }
            if (data.hasOwnProperty('comment_count')) {
                obj['comment_count'] = ApiClient.convertToType(data['comment_count'], 'Number');
            }
            if (data.hasOwnProperty('comments')) {
                obj['comments'] = ApiClient.convertToType(data['comments'], [Object]);
            }
            if (data.hasOwnProperty('community_owned_date')) {
                obj['community_owned_date'] = ApiClient.convertToType(data['community_owned_date'], 'Number');
            }
            if (data.hasOwnProperty('creation_date')) {
                obj['creation_date'] = ApiClient.convertToType(data['creation_date'], 'Number');
            }
            if (data.hasOwnProperty('down_vote_count')) {
                obj['down_vote_count'] = ApiClient.convertToType(data['down_vote_count'], 'Number');
            }
            if (data.hasOwnProperty('downvoted')) {
                obj['downvoted'] = ApiClient.convertToType(data['downvoted'], 'Boolean');
            }
            if (data.hasOwnProperty('is_accepted')) {
                obj['is_accepted'] = ApiClient.convertToType(data['is_accepted'], 'Boolean');
            }
            if (data.hasOwnProperty('last_activity_date')) {
                obj['last_activity_date'] = ApiClient.convertToType(data['last_activity_date'], 'Number');
            }
            if (data.hasOwnProperty('last_edit_date')) {
                obj['last_edit_date'] = ApiClient.convertToType(data['last_edit_date'], 'Number');
            }
            if (data.hasOwnProperty('last_editor')) {
                obj['last_editor'] = AnswersInnerLastEditor.constructFromObject(data['last_editor']);
            }
            if (data.hasOwnProperty('link')) {
                obj['link'] = ApiClient.convertToType(data['link'], 'String');
            }
            if (data.hasOwnProperty('locked_date')) {
                obj['locked_date'] = ApiClient.convertToType(data['locked_date'], 'Number');
            }
            if (data.hasOwnProperty('owner')) {
                obj['owner'] = AnswersInnerLastEditor.constructFromObject(data['owner']);
            }
            if (data.hasOwnProperty('question_id')) {
                obj['question_id'] = ApiClient.convertToType(data['question_id'], 'Number');
            }
            if (data.hasOwnProperty('score')) {
                obj['score'] = ApiClient.convertToType(data['score'], 'Number');
            }
            if (data.hasOwnProperty('share_link')) {
                obj['share_link'] = ApiClient.convertToType(data['share_link'], 'String');
            }
            if (data.hasOwnProperty('tags')) {
                obj['tags'] = ApiClient.convertToType(data['tags'], [Object]);
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
            if (data.hasOwnProperty('up_vote_count')) {
                obj['up_vote_count'] = ApiClient.convertToType(data['up_vote_count'], 'Number');
            }
            if (data.hasOwnProperty('upvoted')) {
                obj['upvoted'] = ApiClient.convertToType(data['upvoted'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AnswersInner</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AnswersInner</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['awarded_bounty_users'])) {
            throw new Error("Expected the field `awarded_bounty_users` to be an array in the JSON data but got " + data['awarded_bounty_users']);
        }
        // ensure the json data is a string
        if (data['body'] && !(typeof data['body'] === 'string' || data['body'] instanceof String)) {
            throw new Error("Expected the field `body` to be a primitive type in the JSON string but got " + data['body']);
        }
        // ensure the json data is a string
        if (data['body_markdown'] && !(typeof data['body_markdown'] === 'string' || data['body_markdown'] instanceof String)) {
            throw new Error("Expected the field `body_markdown` to be a primitive type in the JSON string but got " + data['body_markdown']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['comments'])) {
            throw new Error("Expected the field `comments` to be an array in the JSON data but got " + data['comments']);
        }
        // validate the optional field `last_editor`
        if (data['last_editor']) { // data not null
          AnswersInnerLastEditor.validateJSON(data['last_editor']);
        }
        // ensure the json data is a string
        if (data['link'] && !(typeof data['link'] === 'string' || data['link'] instanceof String)) {
            throw new Error("Expected the field `link` to be a primitive type in the JSON string but got " + data['link']);
        }
        // validate the optional field `owner`
        if (data['owner']) { // data not null
          AnswersInnerLastEditor.validateJSON(data['owner']);
        }
        // ensure the json data is a string
        if (data['share_link'] && !(typeof data['share_link'] === 'string' || data['share_link'] instanceof String)) {
            throw new Error("Expected the field `share_link` to be a primitive type in the JSON string but got " + data['share_link']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['tags'])) {
            throw new Error("Expected the field `tags` to be an array in the JSON data but got " + data['tags']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }

        return true;
    }


}



/**
 * @member {Boolean} accepted
 */
AnswersInner.prototype['accepted'] = undefined;

/**
 * @member {Number} answer_id
 */
AnswersInner.prototype['answer_id'] = undefined;

/**
 * @member {Number} awarded_bounty_amount
 */
AnswersInner.prototype['awarded_bounty_amount'] = undefined;

/**
 * @member {Array.<Object>} awarded_bounty_users
 */
AnswersInner.prototype['awarded_bounty_users'] = undefined;

/**
 * @member {String} body
 */
AnswersInner.prototype['body'] = undefined;

/**
 * @member {String} body_markdown
 */
AnswersInner.prototype['body_markdown'] = undefined;

/**
 * @member {Boolean} can_flag
 */
AnswersInner.prototype['can_flag'] = undefined;

/**
 * @member {Number} comment_count
 */
AnswersInner.prototype['comment_count'] = undefined;

/**
 * @member {Array.<Object>} comments
 */
AnswersInner.prototype['comments'] = undefined;

/**
 * @member {Number} community_owned_date
 */
AnswersInner.prototype['community_owned_date'] = undefined;

/**
 * @member {Number} creation_date
 */
AnswersInner.prototype['creation_date'] = undefined;

/**
 * @member {Number} down_vote_count
 */
AnswersInner.prototype['down_vote_count'] = undefined;

/**
 * @member {Boolean} downvoted
 */
AnswersInner.prototype['downvoted'] = undefined;

/**
 * @member {Boolean} is_accepted
 */
AnswersInner.prototype['is_accepted'] = undefined;

/**
 * @member {Number} last_activity_date
 */
AnswersInner.prototype['last_activity_date'] = undefined;

/**
 * @member {Number} last_edit_date
 */
AnswersInner.prototype['last_edit_date'] = undefined;

/**
 * @member {module:model/AnswersInnerLastEditor} last_editor
 */
AnswersInner.prototype['last_editor'] = undefined;

/**
 * @member {String} link
 */
AnswersInner.prototype['link'] = undefined;

/**
 * @member {Number} locked_date
 */
AnswersInner.prototype['locked_date'] = undefined;

/**
 * @member {module:model/AnswersInnerLastEditor} owner
 */
AnswersInner.prototype['owner'] = undefined;

/**
 * @member {Number} question_id
 */
AnswersInner.prototype['question_id'] = undefined;

/**
 * @member {Number} score
 */
AnswersInner.prototype['score'] = undefined;

/**
 * @member {String} share_link
 */
AnswersInner.prototype['share_link'] = undefined;

/**
 * @member {Array.<Object>} tags
 */
AnswersInner.prototype['tags'] = undefined;

/**
 * @member {String} title
 */
AnswersInner.prototype['title'] = undefined;

/**
 * @member {Number} up_vote_count
 */
AnswersInner.prototype['up_vote_count'] = undefined;

/**
 * @member {Boolean} upvoted
 */
AnswersInner.prototype['upvoted'] = undefined;






export default AnswersInner;

