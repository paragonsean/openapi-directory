/**
 * StackExchange
 * Stack Exchange is a network of 130+ Q&A communities including Stack Overflow. 
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AnswersInnerLastEditorBadgeCounts from './AnswersInnerLastEditorBadgeCounts';

/**
 * The UsersInner model module.
 * @module model/UsersInner
 * @version 2.0
 */
class UsersInner {
    /**
     * Constructs a new <code>UsersInner</code>.
     * @alias module:model/UsersInner
     */
    constructor() { 
        
        UsersInner.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>UsersInner</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UsersInner} obj Optional instance to populate.
     * @return {module:model/UsersInner} The populated <code>UsersInner</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UsersInner();

            if (data.hasOwnProperty('about_me')) {
                obj['about_me'] = ApiClient.convertToType(data['about_me'], 'String');
            }
            if (data.hasOwnProperty('accept_rate')) {
                obj['accept_rate'] = ApiClient.convertToType(data['accept_rate'], 'Number');
            }
            if (data.hasOwnProperty('account_id')) {
                obj['account_id'] = ApiClient.convertToType(data['account_id'], 'Number');
            }
            if (data.hasOwnProperty('age')) {
                obj['age'] = ApiClient.convertToType(data['age'], 'Number');
            }
            if (data.hasOwnProperty('answer_count')) {
                obj['answer_count'] = ApiClient.convertToType(data['answer_count'], 'Number');
            }
            if (data.hasOwnProperty('badge_counts')) {
                obj['badge_counts'] = AnswersInnerLastEditorBadgeCounts.constructFromObject(data['badge_counts']);
            }
            if (data.hasOwnProperty('creation_date')) {
                obj['creation_date'] = ApiClient.convertToType(data['creation_date'], 'Number');
            }
            if (data.hasOwnProperty('display_name')) {
                obj['display_name'] = ApiClient.convertToType(data['display_name'], 'String');
            }
            if (data.hasOwnProperty('down_vote_count')) {
                obj['down_vote_count'] = ApiClient.convertToType(data['down_vote_count'], 'Number');
            }
            if (data.hasOwnProperty('is_employee')) {
                obj['is_employee'] = ApiClient.convertToType(data['is_employee'], 'Boolean');
            }
            if (data.hasOwnProperty('last_access_date')) {
                obj['last_access_date'] = ApiClient.convertToType(data['last_access_date'], 'Number');
            }
            if (data.hasOwnProperty('last_modified_date')) {
                obj['last_modified_date'] = ApiClient.convertToType(data['last_modified_date'], 'Number');
            }
            if (data.hasOwnProperty('link')) {
                obj['link'] = ApiClient.convertToType(data['link'], 'String');
            }
            if (data.hasOwnProperty('location')) {
                obj['location'] = ApiClient.convertToType(data['location'], 'String');
            }
            if (data.hasOwnProperty('profile_image')) {
                obj['profile_image'] = ApiClient.convertToType(data['profile_image'], 'String');
            }
            if (data.hasOwnProperty('question_count')) {
                obj['question_count'] = ApiClient.convertToType(data['question_count'], 'Number');
            }
            if (data.hasOwnProperty('reputation')) {
                obj['reputation'] = ApiClient.convertToType(data['reputation'], 'Number');
            }
            if (data.hasOwnProperty('reputation_change_day')) {
                obj['reputation_change_day'] = ApiClient.convertToType(data['reputation_change_day'], 'Number');
            }
            if (data.hasOwnProperty('reputation_change_month')) {
                obj['reputation_change_month'] = ApiClient.convertToType(data['reputation_change_month'], 'Number');
            }
            if (data.hasOwnProperty('reputation_change_quarter')) {
                obj['reputation_change_quarter'] = ApiClient.convertToType(data['reputation_change_quarter'], 'Number');
            }
            if (data.hasOwnProperty('reputation_change_week')) {
                obj['reputation_change_week'] = ApiClient.convertToType(data['reputation_change_week'], 'Number');
            }
            if (data.hasOwnProperty('reputation_change_year')) {
                obj['reputation_change_year'] = ApiClient.convertToType(data['reputation_change_year'], 'Number');
            }
            if (data.hasOwnProperty('timed_penalty_date')) {
                obj['timed_penalty_date'] = ApiClient.convertToType(data['timed_penalty_date'], 'Number');
            }
            if (data.hasOwnProperty('up_vote_count')) {
                obj['up_vote_count'] = ApiClient.convertToType(data['up_vote_count'], 'Number');
            }
            if (data.hasOwnProperty('user_id')) {
                obj['user_id'] = ApiClient.convertToType(data['user_id'], 'Number');
            }
            if (data.hasOwnProperty('user_type')) {
                obj['user_type'] = ApiClient.convertToType(data['user_type'], 'String');
            }
            if (data.hasOwnProperty('view_count')) {
                obj['view_count'] = ApiClient.convertToType(data['view_count'], 'Number');
            }
            if (data.hasOwnProperty('website_url')) {
                obj['website_url'] = ApiClient.convertToType(data['website_url'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>UsersInner</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>UsersInner</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['about_me'] && !(typeof data['about_me'] === 'string' || data['about_me'] instanceof String)) {
            throw new Error("Expected the field `about_me` to be a primitive type in the JSON string but got " + data['about_me']);
        }
        // validate the optional field `badge_counts`
        if (data['badge_counts']) { // data not null
          AnswersInnerLastEditorBadgeCounts.validateJSON(data['badge_counts']);
        }
        // ensure the json data is a string
        if (data['display_name'] && !(typeof data['display_name'] === 'string' || data['display_name'] instanceof String)) {
            throw new Error("Expected the field `display_name` to be a primitive type in the JSON string but got " + data['display_name']);
        }
        // ensure the json data is a string
        if (data['link'] && !(typeof data['link'] === 'string' || data['link'] instanceof String)) {
            throw new Error("Expected the field `link` to be a primitive type in the JSON string but got " + data['link']);
        }
        // ensure the json data is a string
        if (data['location'] && !(typeof data['location'] === 'string' || data['location'] instanceof String)) {
            throw new Error("Expected the field `location` to be a primitive type in the JSON string but got " + data['location']);
        }
        // ensure the json data is a string
        if (data['profile_image'] && !(typeof data['profile_image'] === 'string' || data['profile_image'] instanceof String)) {
            throw new Error("Expected the field `profile_image` to be a primitive type in the JSON string but got " + data['profile_image']);
        }
        // ensure the json data is a string
        if (data['user_type'] && !(typeof data['user_type'] === 'string' || data['user_type'] instanceof String)) {
            throw new Error("Expected the field `user_type` to be a primitive type in the JSON string but got " + data['user_type']);
        }
        // ensure the json data is a string
        if (data['website_url'] && !(typeof data['website_url'] === 'string' || data['website_url'] instanceof String)) {
            throw new Error("Expected the field `website_url` to be a primitive type in the JSON string but got " + data['website_url']);
        }

        return true;
    }


}



/**
 * @member {String} about_me
 */
UsersInner.prototype['about_me'] = undefined;

/**
 * @member {Number} accept_rate
 */
UsersInner.prototype['accept_rate'] = undefined;

/**
 * @member {Number} account_id
 */
UsersInner.prototype['account_id'] = undefined;

/**
 * @member {Number} age
 */
UsersInner.prototype['age'] = undefined;

/**
 * @member {Number} answer_count
 */
UsersInner.prototype['answer_count'] = undefined;

/**
 * @member {module:model/AnswersInnerLastEditorBadgeCounts} badge_counts
 */
UsersInner.prototype['badge_counts'] = undefined;

/**
 * @member {Number} creation_date
 */
UsersInner.prototype['creation_date'] = undefined;

/**
 * @member {String} display_name
 */
UsersInner.prototype['display_name'] = undefined;

/**
 * @member {Number} down_vote_count
 */
UsersInner.prototype['down_vote_count'] = undefined;

/**
 * @member {Boolean} is_employee
 */
UsersInner.prototype['is_employee'] = undefined;

/**
 * @member {Number} last_access_date
 */
UsersInner.prototype['last_access_date'] = undefined;

/**
 * @member {Number} last_modified_date
 */
UsersInner.prototype['last_modified_date'] = undefined;

/**
 * @member {String} link
 */
UsersInner.prototype['link'] = undefined;

/**
 * @member {String} location
 */
UsersInner.prototype['location'] = undefined;

/**
 * @member {String} profile_image
 */
UsersInner.prototype['profile_image'] = undefined;

/**
 * @member {Number} question_count
 */
UsersInner.prototype['question_count'] = undefined;

/**
 * @member {Number} reputation
 */
UsersInner.prototype['reputation'] = undefined;

/**
 * @member {Number} reputation_change_day
 */
UsersInner.prototype['reputation_change_day'] = undefined;

/**
 * @member {Number} reputation_change_month
 */
UsersInner.prototype['reputation_change_month'] = undefined;

/**
 * @member {Number} reputation_change_quarter
 */
UsersInner.prototype['reputation_change_quarter'] = undefined;

/**
 * @member {Number} reputation_change_week
 */
UsersInner.prototype['reputation_change_week'] = undefined;

/**
 * @member {Number} reputation_change_year
 */
UsersInner.prototype['reputation_change_year'] = undefined;

/**
 * @member {Number} timed_penalty_date
 */
UsersInner.prototype['timed_penalty_date'] = undefined;

/**
 * @member {Number} up_vote_count
 */
UsersInner.prototype['up_vote_count'] = undefined;

/**
 * @member {Number} user_id
 */
UsersInner.prototype['user_id'] = undefined;

/**
 * @member {String} user_type
 */
UsersInner.prototype['user_type'] = undefined;

/**
 * @member {Number} view_count
 */
UsersInner.prototype['view_count'] = undefined;

/**
 * @member {String} website_url
 */
UsersInner.prototype['website_url'] = undefined;






export default UsersInner;

