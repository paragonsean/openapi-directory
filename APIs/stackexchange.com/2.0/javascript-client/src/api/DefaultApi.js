/**
 * StackExchange
 * Stack Exchange is a network of 130+ Q&A communities including Stack Overflow. 
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AccessTokensInner from '../model/AccessTokensInner';
import AccountMergeInner from '../model/AccountMergeInner';
import AnswersInner from '../model/AnswersInner';
import BadgesInner from '../model/BadgesInner';
import CommentsInner from '../model/CommentsInner';
import CreatedComment from '../model/CreatedComment';
import Error from '../model/Error';
import ErrorsInner from '../model/ErrorsInner';
import EventsInner from '../model/EventsInner';
import FiltersInner from '../model/FiltersInner';
import InboxItemsInner from '../model/InboxItemsInner';
import InboxItemsInnerSite from '../model/InboxItemsInnerSite';
import InfoObject from '../model/InfoObject';
import NetworkUsersInner from '../model/NetworkUsersInner';
import NotificationsInner from '../model/NotificationsInner';
import PostsInner from '../model/PostsInner';
import PrivilegesInner from '../model/PrivilegesInner';
import QuestionTimelineEventsInner from '../model/QuestionTimelineEventsInner';
import QuestionsInner from '../model/QuestionsInner';
import ReputationChangesInner from '../model/ReputationChangesInner';
import ReputationHistoryInner from '../model/ReputationHistoryInner';
import RevisionsInner from '../model/RevisionsInner';
import SingleFilter from '../model/SingleFilter';
import SuggestedEditsInner from '../model/SuggestedEditsInner';
import TagScoreObjectsInner from '../model/TagScoreObjectsInner';
import TagSynonymsInner from '../model/TagSynonymsInner';
import TagWikisInner from '../model/TagWikisInner';
import TagsInner from '../model/TagsInner';
import TopTagObjectsInner from '../model/TopTagObjectsInner';
import User from '../model/User';
import UserTimelineObjectsInner from '../model/UserTimelineObjectsInner';
import UsersInner from '../model/UsersInner';
import WritePermissionsInner from '../model/WritePermissionsInner';

/**
* Default service.
* @module api/DefaultApi
* @version 2.0
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the accessTokensAccessTokensGet operation.
     * @callback module:api/DefaultApi~accessTokensAccessTokensGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/AccessTokensInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Reads the properties for a set of access tokens.   {accessTokens} can contain up to 20 access tokens. These are obtained by authenticating a user using OAuth 2.0.   This method returns a list of access_tokens. 
     * @param {String} accessTokens String list (semicolon delimited).
     * @param {Object} opts Optional parameters
     * @param {Number} [pagesize] 
     * @param {Number} [page] 
     * @param {String} [filter] #Discussion  The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.  An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.  Filters are immutable and non-expiring. An application can safely \"bake in\" any filters that are created, it is not necessary (or advisable) to create filters at runtime.  The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).  #Safety  Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.  Note that this does not mean that \"safe\" filter is mearly an \"unsafe\" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).  When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the \"safe\" data is the only accessible data it will be returned even in \"unsafe\" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.  #Built In Filters  The following filters are built in:  default, each type documents which fields are returned under the default filter (for example, answers). withbody, which is default plus the *.body fields none, which is empty total, which includes just .total  #Compatibility with V1.x  For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters. 
     * @param {String} [callback] All API responses are JSON, we do support JSONP with the callback query parameter. 
     * @param {module:api/DefaultApi~accessTokensAccessTokensGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/AccessTokensInner>}
     */
    accessTokensAccessTokensGet(accessTokens, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'accessTokens' is set
      if (accessTokens === undefined || accessTokens === null) {
        throw new Error("Missing the required parameter 'accessTokens' when calling accessTokensAccessTokensGet");
      }

      let pathParams = {
        'accessTokens': accessTokens
      };
      let queryParams = {
        'pagesize': opts['pagesize'],
        'page': opts['page'],
        'filter': opts['filter'],
        'callback': opts['callback']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [AccessTokensInner];
      return this.apiClient.callApi(
        '/access-tokens/{accessTokens}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the accessTokensAccessTokensInvalidateGet operation.
     * @callback module:api/DefaultApi~accessTokensAccessTokensInvalidateGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/AccessTokensInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Immediately expires the access tokens passed. This method is meant to allow an application to discard any active access tokens it no longer needs.   {accessTokens} can contain up to 20 access tokens. These are obtained by authenticating a user using OAuth 2.0.   This method returns a list of access_tokens. 
     * @param {String} accessTokens String list (semicolon delimited).
     * @param {Object} opts Optional parameters
     * @param {Number} [pagesize] 
     * @param {Number} [page] 
     * @param {String} [filter] #Discussion  The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.  An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.  Filters are immutable and non-expiring. An application can safely \"bake in\" any filters that are created, it is not necessary (or advisable) to create filters at runtime.  The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).  #Safety  Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.  Note that this does not mean that \"safe\" filter is mearly an \"unsafe\" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).  When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the \"safe\" data is the only accessible data it will be returned even in \"unsafe\" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.  #Built In Filters  The following filters are built in:  default, each type documents which fields are returned under the default filter (for example, answers). withbody, which is default plus the *.body fields none, which is empty total, which includes just .total  #Compatibility with V1.x  For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters. 
     * @param {String} [callback] All API responses are JSON, we do support JSONP with the callback query parameter. 
     * @param {module:api/DefaultApi~accessTokensAccessTokensInvalidateGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/AccessTokensInner>}
     */
    accessTokensAccessTokensInvalidateGet(accessTokens, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'accessTokens' is set
      if (accessTokens === undefined || accessTokens === null) {
        throw new Error("Missing the required parameter 'accessTokens' when calling accessTokensAccessTokensInvalidateGet");
      }

      let pathParams = {
        'accessTokens': accessTokens
      };
      let queryParams = {
        'pagesize': opts['pagesize'],
        'page': opts['page'],
        'filter': opts['filter'],
        'callback': opts['callback']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [AccessTokensInner];
      return this.apiClient.callApi(
        '/access-tokens/{accessTokens}/invalidate', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the answersGet operation.
     * @callback module:api/DefaultApi~answersGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/AnswersInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns all the undeleted answers in the system.   The sorts accepted by this method operate on the follow fields of the answer object:  - activity - last_activity_date  - creation - creation_date  - votes - score   activity is the default sort.    It is possible to create moderately complex queries using sort, min, max, fromdate, and todate.    This method returns a list of answers. 
     * @param {String} site Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. \"stackoverflow.com\"), or a short form identified by api_site_parameter on the site object. 
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [order] 
     * @param {String} [max] sort = activity => date sort = creation => date sort = votes => number 
     * @param {String} [min] sort = activity => date sort = creation => date sort = votes => number 
     * @param {module:model/String} [sort] 
     * @param {Number} [fromdate] Unix date.
     * @param {Number} [todate] Unix date.
     * @param {Number} [pagesize] 
     * @param {Number} [page] 
     * @param {String} [filter] #Discussion  The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.  An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.  Filters are immutable and non-expiring. An application can safely \"bake in\" any filters that are created, it is not necessary (or advisable) to create filters at runtime.  The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).  #Safety  Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.  Note that this does not mean that \"safe\" filter is mearly an \"unsafe\" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).  When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the \"safe\" data is the only accessible data it will be returned even in \"unsafe\" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.  #Built In Filters  The following filters are built in:  default, each type documents which fields are returned under the default filter (for example, answers). withbody, which is default plus the *.body fields none, which is empty total, which includes just .total  #Compatibility with V1.x  For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters. 
     * @param {String} [callback] All API responses are JSON, we do support JSONP with the callback query parameter. 
     * @param {module:api/DefaultApi~answersGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/AnswersInner>}
     */
    answersGet(site, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'site' is set
      if (site === undefined || site === null) {
        throw new Error("Missing the required parameter 'site' when calling answersGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'order': opts['order'],
        'max': opts['max'],
        'min': opts['min'],
        'sort': opts['sort'],
        'fromdate': opts['fromdate'],
        'todate': opts['todate'],
        'pagesize': opts['pagesize'],
        'page': opts['page'],
        'filter': opts['filter'],
        'callback': opts['callback'],
        'site': site
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [AnswersInner];
      return this.apiClient.callApi(
        '/answers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the answersIdsCommentsGet operation.
     * @callback module:api/DefaultApi~answersIdsCommentsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CommentsInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the comments on a set of answers.   If you know that you have an answer id and need the comments, use this method. If you know you have a question id, use /questions/{id}/comments. If you are unsure, use /posts/{id}/comments.   {ids} can contain up to 100 semicolon delimited ids, to find ids programatically look for answer_id on answer objects.   The sorts accepted by this method operate on the follow fields of the comment object:  - creation - creation_date  - votes - score   creation is the default sort.    It is possible to create moderately complex queries using sort, min, max, fromdate, and todate.    This method returns a list of comments. 
     * @param {String} ids Number list (semicolon delimited).
     * @param {String} site Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. \"stackoverflow.com\"), or a short form identified by api_site_parameter on the site object. 
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [order] 
     * @param {String} [max] sort = creation => date sort = votes => number 
     * @param {String} [min] sort = creation => date sort = votes => number 
     * @param {module:model/String} [sort] 
     * @param {Number} [fromdate] Unix date.
     * @param {Number} [todate] Unix date.
     * @param {Number} [pagesize] 
     * @param {Number} [page] 
     * @param {String} [filter] #Discussion  The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.  An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.  Filters are immutable and non-expiring. An application can safely \"bake in\" any filters that are created, it is not necessary (or advisable) to create filters at runtime.  The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).  #Safety  Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.  Note that this does not mean that \"safe\" filter is mearly an \"unsafe\" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).  When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the \"safe\" data is the only accessible data it will be returned even in \"unsafe\" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.  #Built In Filters  The following filters are built in:  default, each type documents which fields are returned under the default filter (for example, answers). withbody, which is default plus the *.body fields none, which is empty total, which includes just .total  #Compatibility with V1.x  For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters. 
     * @param {String} [callback] All API responses are JSON, we do support JSONP with the callback query parameter. 
     * @param {module:api/DefaultApi~answersIdsCommentsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CommentsInner>}
     */
    answersIdsCommentsGet(ids, site, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'ids' is set
      if (ids === undefined || ids === null) {
        throw new Error("Missing the required parameter 'ids' when calling answersIdsCommentsGet");
      }
      // verify the required parameter 'site' is set
      if (site === undefined || site === null) {
        throw new Error("Missing the required parameter 'site' when calling answersIdsCommentsGet");
      }

      let pathParams = {
        'ids': ids
      };
      let queryParams = {
        'order': opts['order'],
        'max': opts['max'],
        'min': opts['min'],
        'sort': opts['sort'],
        'fromdate': opts['fromdate'],
        'todate': opts['todate'],
        'pagesize': opts['pagesize'],
        'page': opts['page'],
        'filter': opts['filter'],
        'callback': opts['callback'],
        'site': site
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [CommentsInner];
      return this.apiClient.callApi(
        '/answers/{ids}/comments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the answersIdsGet operation.
     * @callback module:api/DefaultApi~answersIdsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/AnswersInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the set of answers identified by ids.   This is meant for batch fetcing of questions. A useful trick to poll for updates is to sort by activity, with a minimum date of the last time you polled.   {ids} can contain up to 100 semicolon delimited ids, to find ids programatically look for answer_id on answer objects.   The sorts accepted by this method operate on the follow fields of the answer object:  - activity - last_activity_date  - creation - creation_date  - votes - score   activity is the default sort.    It is possible to create moderately complex queries using sort, min, max, fromdate, and todate.    This method returns a list of answers. 
     * @param {String} ids Number list (semicolon delimited).
     * @param {String} site Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. \"stackoverflow.com\"), or a short form identified by api_site_parameter on the site object. 
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [order] 
     * @param {String} [max] sort = activity => date sort = creation => date sort = votes => number 
     * @param {String} [min] sort = activity => date sort = creation => date sort = votes => number 
     * @param {module:model/String} [sort] 
     * @param {Number} [fromdate] Unix date.
     * @param {Number} [todate] Unix date.
     * @param {Number} [pagesize] 
     * @param {Number} [page] 
     * @param {String} [filter] #Discussion  The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.  An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.  Filters are immutable and non-expiring. An application can safely \"bake in\" any filters that are created, it is not necessary (or advisable) to create filters at runtime.  The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).  #Safety  Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.  Note that this does not mean that \"safe\" filter is mearly an \"unsafe\" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).  When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the \"safe\" data is the only accessible data it will be returned even in \"unsafe\" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.  #Built In Filters  The following filters are built in:  default, each type documents which fields are returned under the default filter (for example, answers). withbody, which is default plus the *.body fields none, which is empty total, which includes just .total  #Compatibility with V1.x  For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters. 
     * @param {String} [callback] All API responses are JSON, we do support JSONP with the callback query parameter. 
     * @param {module:api/DefaultApi~answersIdsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/AnswersInner>}
     */
    answersIdsGet(ids, site, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'ids' is set
      if (ids === undefined || ids === null) {
        throw new Error("Missing the required parameter 'ids' when calling answersIdsGet");
      }
      // verify the required parameter 'site' is set
      if (site === undefined || site === null) {
        throw new Error("Missing the required parameter 'site' when calling answersIdsGet");
      }

      let pathParams = {
        'ids': ids
      };
      let queryParams = {
        'order': opts['order'],
        'max': opts['max'],
        'min': opts['min'],
        'sort': opts['sort'],
        'fromdate': opts['fromdate'],
        'todate': opts['todate'],
        'pagesize': opts['pagesize'],
        'page': opts['page'],
        'filter': opts['filter'],
        'callback': opts['callback'],
        'site': site
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [AnswersInner];
      return this.apiClient.callApi(
        '/answers/{ids}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the appsAccessTokensDeAuthenticateGet operation.
     * @callback module:api/DefaultApi~appsAccessTokensDeAuthenticateGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/AccessTokensInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Passing valid access_tokens to this method causes the application that created them to be de-authorized by the user associated with each access_token. This will remove the application from their apps tab, and cause all other existing access_tokens to be destroyed.   This method is meant for uninstalling applications, recovering from access_token leaks, or simply as a stronger form of /access-tokens/{accessTokens}/invalidate.   Nothing prevents a user from re-authenticate to an application that has de-authenticated itself, the user will be prompted to approve the application again however.   {accessTokens} can contain up to 20 access tokens. These are obtained by authenticating a user using OAuth 2.0.   This method returns a list of access_tokens. 
     * @param {String} accessTokens String list (semicolon delimited).
     * @param {Object} opts Optional parameters
     * @param {Number} [pagesize] 
     * @param {Number} [page] 
     * @param {String} [filter] #Discussion  The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.  An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.  Filters are immutable and non-expiring. An application can safely \"bake in\" any filters that are created, it is not necessary (or advisable) to create filters at runtime.  The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).  #Safety  Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.  Note that this does not mean that \"safe\" filter is mearly an \"unsafe\" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).  When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the \"safe\" data is the only accessible data it will be returned even in \"unsafe\" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.  #Built In Filters  The following filters are built in:  default, each type documents which fields are returned under the default filter (for example, answers). withbody, which is default plus the *.body fields none, which is empty total, which includes just .total  #Compatibility with V1.x  For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters. 
     * @param {String} [callback] All API responses are JSON, we do support JSONP with the callback query parameter. 
     * @param {module:api/DefaultApi~appsAccessTokensDeAuthenticateGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/AccessTokensInner>}
     */
    appsAccessTokensDeAuthenticateGet(accessTokens, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'accessTokens' is set
      if (accessTokens === undefined || accessTokens === null) {
        throw new Error("Missing the required parameter 'accessTokens' when calling appsAccessTokensDeAuthenticateGet");
      }

      let pathParams = {
        'accessTokens': accessTokens
      };
      let queryParams = {
        'pagesize': opts['pagesize'],
        'page': opts['page'],
        'filter': opts['filter'],
        'callback': opts['callback']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [AccessTokensInner];
      return this.apiClient.callApi(
        '/apps/{accessTokens}/de-authenticate', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the badgesGet operation.
     * @callback module:api/DefaultApi~badgesGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/BadgesInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns all the badges in the system.   Badge sorts are a tad complicated. For the purposes of sorting (and min/max) tag_based is considered to be greater than named.   This means that you can get a list of all tag based badges by passing min=tag_based, and conversely all the named badges by passing max=named, with sort=type.   For ranks, bronze is greater than silver which is greater than gold. Along with sort=rank, set max=gold for just gold badges, max=silver&min=silver for just silver, and min=bronze for just bronze.   rank is the default sort.   This method returns a list of badges. 
     * @param {String} site Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. \"stackoverflow.com\"), or a short form identified by api_site_parameter on the site object. 
     * @param {Object} opts Optional parameters
     * @param {String} [inname] 
     * @param {module:model/String} [order] 
     * @param {String} [max] sort = rank => string sort = name => string sort = type => string 
     * @param {String} [min] sort = rank => string sort = name => string sort = type => string 
     * @param {module:model/String} [sort] 
     * @param {Number} [fromdate] Unix date.
     * @param {Number} [todate] Unix date.
     * @param {Number} [pagesize] 
     * @param {Number} [page] 
     * @param {String} [filter] #Discussion  The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.  An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.  Filters are immutable and non-expiring. An application can safely \"bake in\" any filters that are created, it is not necessary (or advisable) to create filters at runtime.  The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).  #Safety  Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.  Note that this does not mean that \"safe\" filter is mearly an \"unsafe\" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).  When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the \"safe\" data is the only accessible data it will be returned even in \"unsafe\" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.  #Built In Filters  The following filters are built in:  default, each type documents which fields are returned under the default filter (for example, answers). withbody, which is default plus the *.body fields none, which is empty total, which includes just .total  #Compatibility with V1.x  For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters. 
     * @param {String} [callback] All API responses are JSON, we do support JSONP with the callback query parameter. 
     * @param {module:api/DefaultApi~badgesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/BadgesInner>}
     */
    badgesGet(site, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'site' is set
      if (site === undefined || site === null) {
        throw new Error("Missing the required parameter 'site' when calling badgesGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'inname': opts['inname'],
        'order': opts['order'],
        'max': opts['max'],
        'min': opts['min'],
        'sort': opts['sort'],
        'fromdate': opts['fromdate'],
        'todate': opts['todate'],
        'pagesize': opts['pagesize'],
        'page': opts['page'],
        'filter': opts['filter'],
        'callback': opts['callback'],
        'site': site
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [BadgesInner];
      return this.apiClient.callApi(
        '/badges', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the badgesIdsGet operation.
     * @callback module:api/DefaultApi~badgesIdsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/BadgesInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the badges identified in id.   Note that badge ids are not constant across sites, and thus should be looked up via the /badges method. A badge id on a single site is, however, guaranteed to be stable.   Badge sorts are a tad complicated. For the purposes of sorting (and min/max) tag_based is considered to be greater than named.   This means that you can get a list of all tag based badges by passing min=tag_based, and conversely all the named badges by passing max=named, with sort=type.   For ranks, bronze is greater than silver which is greater than gold. Along with sort=rank, set max=gold for just gold badges, max=silver&min=silver for just silver, and min=bronze for just bronze.   rank is the default sort.   {ids} can contain up to 100 semicolon delimited ids, to find ids programatically look for badge_id on badge objects.   This method returns a list of badges. 
     * @param {String} ids Number list (semicolon delimited).
     * @param {String} site Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. \"stackoverflow.com\"), or a short form identified by api_site_parameter on the site object. 
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [order] 
     * @param {String} [max] sort = rank => string sort = name => string sort = type => string 
     * @param {String} [min] sort = rank => string sort = name => string sort = type => string 
     * @param {module:model/String} [sort] 
     * @param {Number} [fromdate] Unix date.
     * @param {Number} [todate] Unix date.
     * @param {Number} [pagesize] 
     * @param {Number} [page] 
     * @param {String} [filter] #Discussion  The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.  An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.  Filters are immutable and non-expiring. An application can safely \"bake in\" any filters that are created, it is not necessary (or advisable) to create filters at runtime.  The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).  #Safety  Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.  Note that this does not mean that \"safe\" filter is mearly an \"unsafe\" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).  When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the \"safe\" data is the only accessible data it will be returned even in \"unsafe\" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.  #Built In Filters  The following filters are built in:  default, each type documents which fields are returned under the default filter (for example, answers). withbody, which is default plus the *.body fields none, which is empty total, which includes just .total  #Compatibility with V1.x  For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters. 
     * @param {String} [callback] All API responses are JSON, we do support JSONP with the callback query parameter. 
     * @param {module:api/DefaultApi~badgesIdsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/BadgesInner>}
     */
    badgesIdsGet(ids, site, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'ids' is set
      if (ids === undefined || ids === null) {
        throw new Error("Missing the required parameter 'ids' when calling badgesIdsGet");
      }
      // verify the required parameter 'site' is set
      if (site === undefined || site === null) {
        throw new Error("Missing the required parameter 'site' when calling badgesIdsGet");
      }

      let pathParams = {
        'ids': ids
      };
      let queryParams = {
        'order': opts['order'],
        'max': opts['max'],
        'min': opts['min'],
        'sort': opts['sort'],
        'fromdate': opts['fromdate'],
        'todate': opts['todate'],
        'pagesize': opts['pagesize'],
        'page': opts['page'],
        'filter': opts['filter'],
        'callback': opts['callback'],
        'site': site
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [BadgesInner];
      return this.apiClient.callApi(
        '/badges/{ids}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the badgesIdsRecipientsGet operation.
     * @callback module:api/DefaultApi~badgesIdsRecipientsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/BadgesInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns recently awarded badges in the system, constrained to a certain set of badges.   As these badges have been awarded, they will have the badge.user property set.   {ids} can contain up to 100 semicolon delimited ids, to find ids programatically look for badge_id on badge objects.   This method returns a list of badges. 
     * @param {String} ids Number list (semicolon delimited).
     * @param {String} site Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. \"stackoverflow.com\"), or a short form identified by api_site_parameter on the site object. 
     * @param {Object} opts Optional parameters
     * @param {Number} [fromdate] Unix date.
     * @param {Number} [todate] Unix date.
     * @param {Number} [pagesize] 
     * @param {Number} [page] 
     * @param {String} [filter] #Discussion  The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.  An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.  Filters are immutable and non-expiring. An application can safely \"bake in\" any filters that are created, it is not necessary (or advisable) to create filters at runtime.  The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).  #Safety  Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.  Note that this does not mean that \"safe\" filter is mearly an \"unsafe\" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).  When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the \"safe\" data is the only accessible data it will be returned even in \"unsafe\" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.  #Built In Filters  The following filters are built in:  default, each type documents which fields are returned under the default filter (for example, answers). withbody, which is default plus the *.body fields none, which is empty total, which includes just .total  #Compatibility with V1.x  For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters. 
     * @param {String} [callback] All API responses are JSON, we do support JSONP with the callback query parameter. 
     * @param {module:api/DefaultApi~badgesIdsRecipientsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/BadgesInner>}
     */
    badgesIdsRecipientsGet(ids, site, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'ids' is set
      if (ids === undefined || ids === null) {
        throw new Error("Missing the required parameter 'ids' when calling badgesIdsRecipientsGet");
      }
      // verify the required parameter 'site' is set
      if (site === undefined || site === null) {
        throw new Error("Missing the required parameter 'site' when calling badgesIdsRecipientsGet");
      }

      let pathParams = {
        'ids': ids
      };
      let queryParams = {
        'fromdate': opts['fromdate'],
        'todate': opts['todate'],
        'pagesize': opts['pagesize'],
        'page': opts['page'],
        'filter': opts['filter'],
        'callback': opts['callback'],
        'site': site
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [BadgesInner];
      return this.apiClient.callApi(
        '/badges/{ids}/recipients', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the badgesNameGet operation.
     * @callback module:api/DefaultApi~badgesNameGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/BadgesInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets all explicitly named badges in the system.   A named badged stands in opposition to a tag-based badge. These are referred to as general badges on the sites themselves.   For the rank sort, bronze is greater than silver which is greater than gold. Along with sort=rank, set max=gold for just gold badges, max=silver&min=silver for just silver, and min=bronze for just bronze.   rank is the default sort.   This method returns a list of badges. 
     * @param {String} site Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. \"stackoverflow.com\"), or a short form identified by api_site_parameter on the site object. 
     * @param {Object} opts Optional parameters
     * @param {String} [inname] 
     * @param {module:model/String} [order] 
     * @param {String} [max] sort = rank => string sort = name => string 
     * @param {String} [min] sort = rank => string sort = name => string 
     * @param {module:model/String} [sort] 
     * @param {Number} [fromdate] Unix date.
     * @param {Number} [todate] Unix date.
     * @param {Number} [pagesize] 
     * @param {Number} [page] 
     * @param {String} [filter] #Discussion  The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.  An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.  Filters are immutable and non-expiring. An application can safely \"bake in\" any filters that are created, it is not necessary (or advisable) to create filters at runtime.  The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).  #Safety  Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.  Note that this does not mean that \"safe\" filter is mearly an \"unsafe\" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).  When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the \"safe\" data is the only accessible data it will be returned even in \"unsafe\" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.  #Built In Filters  The following filters are built in:  default, each type documents which fields are returned under the default filter (for example, answers). withbody, which is default plus the *.body fields none, which is empty total, which includes just .total  #Compatibility with V1.x  For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters. 
     * @param {String} [callback] All API responses are JSON, we do support JSONP with the callback query parameter. 
     * @param {module:api/DefaultApi~badgesNameGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/BadgesInner>}
     */
    badgesNameGet(site, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'site' is set
      if (site === undefined || site === null) {
        throw new Error("Missing the required parameter 'site' when calling badgesNameGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'inname': opts['inname'],
        'order': opts['order'],
        'max': opts['max'],
        'min': opts['min'],
        'sort': opts['sort'],
        'fromdate': opts['fromdate'],
        'todate': opts['todate'],
        'pagesize': opts['pagesize'],
        'page': opts['page'],
        'filter': opts['filter'],
        'callback': opts['callback'],
        'site': site
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [BadgesInner];
      return this.apiClient.callApi(
        '/badges/name', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the badgesRecipientsGet operation.
     * @callback module:api/DefaultApi~badgesRecipientsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/BadgesInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns recently awarded badges in the system.   As these badges have been awarded, they will have the badge.user property set.   This method returns a list of badges. 
     * @param {String} site Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. \"stackoverflow.com\"), or a short form identified by api_site_parameter on the site object. 
     * @param {Object} opts Optional parameters
     * @param {Number} [fromdate] Unix date.
     * @param {Number} [todate] Unix date.
     * @param {Number} [pagesize] 
     * @param {Number} [page] 
     * @param {String} [filter] #Discussion  The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.  An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.  Filters are immutable and non-expiring. An application can safely \"bake in\" any filters that are created, it is not necessary (or advisable) to create filters at runtime.  The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).  #Safety  Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.  Note that this does not mean that \"safe\" filter is mearly an \"unsafe\" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).  When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the \"safe\" data is the only accessible data it will be returned even in \"unsafe\" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.  #Built In Filters  The following filters are built in:  default, each type documents which fields are returned under the default filter (for example, answers). withbody, which is default plus the *.body fields none, which is empty total, which includes just .total  #Compatibility with V1.x  For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters. 
     * @param {String} [callback] All API responses are JSON, we do support JSONP with the callback query parameter. 
     * @param {module:api/DefaultApi~badgesRecipientsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/BadgesInner>}
     */
    badgesRecipientsGet(site, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'site' is set
      if (site === undefined || site === null) {
        throw new Error("Missing the required parameter 'site' when calling badgesRecipientsGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'fromdate': opts['fromdate'],
        'todate': opts['todate'],
        'pagesize': opts['pagesize'],
        'page': opts['page'],
        'filter': opts['filter'],
        'callback': opts['callback'],
        'site': site
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [BadgesInner];
      return this.apiClient.callApi(
        '/badges/recipients', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the badgesTagsGet operation.
     * @callback module:api/DefaultApi~badgesTagsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/BadgesInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the badges that are awarded for participation in specific tags.   For the rank sort, bronze is greater than silver which is greater than gold. Along with sort=rank, set max=gold for just gold badges, max=silver&min=silver for just silver, and min=bronze for just bronze.   rank is the default sort.   This method returns a list of badges. 
     * @param {String} site Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. \"stackoverflow.com\"), or a short form identified by api_site_parameter on the site object. 
     * @param {Object} opts Optional parameters
     * @param {String} [inname] 
     * @param {module:model/String} [order] 
     * @param {String} [max] sort = rank => string sort = name => string 
     * @param {String} [min] sort = rank => string sort = name => string 
     * @param {module:model/String} [sort] 
     * @param {Number} [fromdate] Unix date.
     * @param {Number} [todate] Unix date.
     * @param {Number} [pagesize] 
     * @param {Number} [page] 
     * @param {String} [filter] #Discussion  The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.  An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.  Filters are immutable and non-expiring. An application can safely \"bake in\" any filters that are created, it is not necessary (or advisable) to create filters at runtime.  The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).  #Safety  Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.  Note that this does not mean that \"safe\" filter is mearly an \"unsafe\" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).  When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the \"safe\" data is the only accessible data it will be returned even in \"unsafe\" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.  #Built In Filters  The following filters are built in:  default, each type documents which fields are returned under the default filter (for example, answers). withbody, which is default plus the *.body fields none, which is empty total, which includes just .total  #Compatibility with V1.x  For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters. 
     * @param {String} [callback] All API responses are JSON, we do support JSONP with the callback query parameter. 
     * @param {module:api/DefaultApi~badgesTagsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/BadgesInner>}
     */
    badgesTagsGet(site, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'site' is set
      if (site === undefined || site === null) {
        throw new Error("Missing the required parameter 'site' when calling badgesTagsGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'inname': opts['inname'],
        'order': opts['order'],
        'max': opts['max'],
        'min': opts['min'],
        'sort': opts['sort'],
        'fromdate': opts['fromdate'],
        'todate': opts['todate'],
        'pagesize': opts['pagesize'],
        'page': opts['page'],
        'filter': opts['filter'],
        'callback': opts['callback'],
        'site': site
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [BadgesInner];
      return this.apiClient.callApi(
        '/badges/tags', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the commentsGet operation.
     * @callback module:api/DefaultApi~commentsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CommentsInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets all the comments on the site.   If you're filtering for interesting comments (by score, creation date, etc.) make use of the sort paramter with appropriate min and max values.   If you're looking to query conversations between users, instead use the /users/{ids}/mentioned and /users/{ids}/comments/{toid} methods.   The sorts accepted by this method operate on the follow fields of the comment object:  - creation - creation_date  - votes - score   creation is the default sort.    It is possible to create moderately complex queries using sort, min, max, fromdate, and todate.    This method returns a list of comments. 
     * @param {String} site Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. \"stackoverflow.com\"), or a short form identified by api_site_parameter on the site object. 
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [order] 
     * @param {String} [max] sort = creation => date sort = votes => number 
     * @param {String} [min] sort = creation => date sort = votes => number 
     * @param {module:model/String} [sort] 
     * @param {Number} [fromdate] Unix date.
     * @param {Number} [todate] Unix date.
     * @param {Number} [pagesize] 
     * @param {Number} [page] 
     * @param {String} [filter] #Discussion  The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.  An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.  Filters are immutable and non-expiring. An application can safely \"bake in\" any filters that are created, it is not necessary (or advisable) to create filters at runtime.  The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).  #Safety  Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.  Note that this does not mean that \"safe\" filter is mearly an \"unsafe\" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).  When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the \"safe\" data is the only accessible data it will be returned even in \"unsafe\" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.  #Built In Filters  The following filters are built in:  default, each type documents which fields are returned under the default filter (for example, answers). withbody, which is default plus the *.body fields none, which is empty total, which includes just .total  #Compatibility with V1.x  For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters. 
     * @param {String} [callback] All API responses are JSON, we do support JSONP with the callback query parameter. 
     * @param {module:api/DefaultApi~commentsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CommentsInner>}
     */
    commentsGet(site, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'site' is set
      if (site === undefined || site === null) {
        throw new Error("Missing the required parameter 'site' when calling commentsGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'order': opts['order'],
        'max': opts['max'],
        'min': opts['min'],
        'sort': opts['sort'],
        'fromdate': opts['fromdate'],
        'todate': opts['todate'],
        'pagesize': opts['pagesize'],
        'page': opts['page'],
        'filter': opts['filter'],
        'callback': opts['callback'],
        'site': site
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [CommentsInner];
      return this.apiClient.callApi(
        '/comments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the commentsIdDeletePost operation.
     * @callback module:api/DefaultApi~commentsIdDeletePostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a comment.   Use an access_token with write_access to delete a comment.   In practice, this method will never return an object. 
     * @param {Number} id 
     * @param {String} site Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. \"stackoverflow.com\"), or a short form identified by api_site_parameter on the site object. 
     * @param {Object} opts Optional parameters
     * @param {String} [filter] #Discussion  The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.  An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.  Filters are immutable and non-expiring. An application can safely \"bake in\" any filters that are created, it is not necessary (or advisable) to create filters at runtime.  The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).  #Safety  Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.  Note that this does not mean that \"safe\" filter is mearly an \"unsafe\" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).  When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the \"safe\" data is the only accessible data it will be returned even in \"unsafe\" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.  #Built In Filters  The following filters are built in:  default, each type documents which fields are returned under the default filter (for example, answers). withbody, which is default plus the *.body fields none, which is empty total, which includes just .total  #Compatibility with V1.x  For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters. 
     * @param {String} [callback] All API responses are JSON, we do support JSONP with the callback query parameter. 
     * @param {Boolean} [preview] 
     * @param {module:api/DefaultApi~commentsIdDeletePostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    commentsIdDeletePost(id, site, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling commentsIdDeletePost");
      }
      // verify the required parameter 'site' is set
      if (site === undefined || site === null) {
        throw new Error("Missing the required parameter 'site' when calling commentsIdDeletePost");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'filter': opts['filter'],
        'callback': opts['callback'],
        'site': site,
        'preview': opts['preview']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/comments/{id}/delete', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the commentsIdEditPost operation.
     * @callback module:api/DefaultApi~commentsIdEditPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreatedComment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Edit an existing comment.   Use an access_token with write_access to edit an existing comment.   This method return the created comment. 
     * @param {Number} id 
     * @param {String} site Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. \"stackoverflow.com\"), or a short form identified by api_site_parameter on the site object. 
     * @param {Object} opts Optional parameters
     * @param {String} [filter] #Discussion  The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.  An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.  Filters are immutable and non-expiring. An application can safely \"bake in\" any filters that are created, it is not necessary (or advisable) to create filters at runtime.  The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).  #Safety  Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.  Note that this does not mean that \"safe\" filter is mearly an \"unsafe\" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).  When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the \"safe\" data is the only accessible data it will be returned even in \"unsafe\" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.  #Built In Filters  The following filters are built in:  default, each type documents which fields are returned under the default filter (for example, answers). withbody, which is default plus the *.body fields none, which is empty total, which includes just .total  #Compatibility with V1.x  For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters. 
     * @param {String} [callback] All API responses are JSON, we do support JSONP with the callback query parameter. 
     * @param {String} [body] 
     * @param {Boolean} [preview] 
     * @param {module:api/DefaultApi~commentsIdEditPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreatedComment}
     */
    commentsIdEditPost(id, site, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling commentsIdEditPost");
      }
      // verify the required parameter 'site' is set
      if (site === undefined || site === null) {
        throw new Error("Missing the required parameter 'site' when calling commentsIdEditPost");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'filter': opts['filter'],
        'callback': opts['callback'],
        'site': site,
        'body': opts['body'],
        'preview': opts['preview']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = CreatedComment;
      return this.apiClient.callApi(
        '/comments/{id}/edit', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the commentsIdsGet operation.
     * @callback module:api/DefaultApi~commentsIdsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CommentsInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the comments identified in id.   This method is most useful if you have a cache of comment ids obtained through other means (such as /questions/{id}/comments) but suspect the data may be stale.   {ids} can contain up to 100 semicolon delimited ids, to find ids programatically look for comment_id on comment objects.   The sorts accepted by this method operate on the follow fields of the comment object:  - creation - creation_date  - votes - score   creation is the default sort.    It is possible to create moderately complex queries using sort, min, max, fromdate, and todate.    This method returns a list of comments. 
     * @param {String} ids Number list (semicolon delimited).
     * @param {String} site Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. \"stackoverflow.com\"), or a short form identified by api_site_parameter on the site object. 
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [order] 
     * @param {String} [max] sort = creation => date sort = votes => number 
     * @param {String} [min] sort = creation => date sort = votes => number 
     * @param {module:model/String} [sort] 
     * @param {Number} [fromdate] Unix date.
     * @param {Number} [todate] Unix date.
     * @param {Number} [pagesize] 
     * @param {Number} [page] 
     * @param {String} [filter] #Discussion  The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.  An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.  Filters are immutable and non-expiring. An application can safely \"bake in\" any filters that are created, it is not necessary (or advisable) to create filters at runtime.  The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).  #Safety  Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.  Note that this does not mean that \"safe\" filter is mearly an \"unsafe\" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).  When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the \"safe\" data is the only accessible data it will be returned even in \"unsafe\" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.  #Built In Filters  The following filters are built in:  default, each type documents which fields are returned under the default filter (for example, answers). withbody, which is default plus the *.body fields none, which is empty total, which includes just .total  #Compatibility with V1.x  For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters. 
     * @param {String} [callback] All API responses are JSON, we do support JSONP with the callback query parameter. 
     * @param {module:api/DefaultApi~commentsIdsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CommentsInner>}
     */
    commentsIdsGet(ids, site, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'ids' is set
      if (ids === undefined || ids === null) {
        throw new Error("Missing the required parameter 'ids' when calling commentsIdsGet");
      }
      // verify the required parameter 'site' is set
      if (site === undefined || site === null) {
        throw new Error("Missing the required parameter 'site' when calling commentsIdsGet");
      }

      let pathParams = {
        'ids': ids
      };
      let queryParams = {
        'order': opts['order'],
        'max': opts['max'],
        'min': opts['min'],
        'sort': opts['sort'],
        'fromdate': opts['fromdate'],
        'todate': opts['todate'],
        'pagesize': opts['pagesize'],
        'page': opts['page'],
        'filter': opts['filter'],
        'callback': opts['callback'],
        'site': site
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [CommentsInner];
      return this.apiClient.callApi(
        '/comments/{ids}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the errorsGet operation.
     * @callback module:api/DefaultApi~errorsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ErrorsInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the various error codes that can be produced by the API.   This method is provided for discovery, documentation, and testing purposes, it is not expected many applications will consume it during normal operation.   For testing purposes, look into the /errors/{id} method which simulates errors given a code.   This method returns a list of errors. 
     * @param {Object} opts Optional parameters
     * @param {Number} [pagesize] 
     * @param {Number} [page] 
     * @param {String} [filter] #Discussion  The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.  An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.  Filters are immutable and non-expiring. An application can safely \"bake in\" any filters that are created, it is not necessary (or advisable) to create filters at runtime.  The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).  #Safety  Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.  Note that this does not mean that \"safe\" filter is mearly an \"unsafe\" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).  When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the \"safe\" data is the only accessible data it will be returned even in \"unsafe\" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.  #Built In Filters  The following filters are built in:  default, each type documents which fields are returned under the default filter (for example, answers). withbody, which is default plus the *.body fields none, which is empty total, which includes just .total  #Compatibility with V1.x  For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters. 
     * @param {String} [callback] All API responses are JSON, we do support JSONP with the callback query parameter. 
     * @param {module:api/DefaultApi~errorsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ErrorsInner>}
     */
    errorsGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'pagesize': opts['pagesize'],
        'page': opts['page'],
        'filter': opts['filter'],
        'callback': opts['callback']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [ErrorsInner];
      return this.apiClient.callApi(
        '/errors', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the errorsIdGet operation.
     * @callback module:api/DefaultApi~errorsIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Error} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This method allows you to generate an error.   This method is only intended for use when testing an application or library. Unlike other methods in the API, its contract is not frozen, and new error codes may be added at any time.   This method results in an error, which will be expressed with a 400 HTTP status code and setting the error* properties on the wrapper object. 
     * @param {Number} id 
     * @param {module:api/DefaultApi~errorsIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Error}
     */
    errorsIdGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling errorsIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = Error;
      return this.apiClient.callApi(
        '/errors/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the eventsGet operation.
     * @callback module:api/DefaultApi~eventsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/EventsInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a stream of events that have occurred on the site.   The API considers the following \"events\":  - posting a question  - posting an answer  - posting a comment  - editing a post  - creating a user        Events are only accessible for 15 minutes after they occurred, and by default only events in the last 5 minutes are returned. You can specify the age of the oldest event returned by setting the since parameter.   It is advised that developers batch events by ids and make as few subsequent requests to other methods as possible.   This method returns a list of events. 
     * @param {String} site Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. \"stackoverflow.com\"), or a short form identified by api_site_parameter on the site object. 
     * @param {Object} opts Optional parameters
     * @param {Number} [pagesize] 
     * @param {Number} [page] 
     * @param {String} [filter] #Discussion  The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.  An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.  Filters are immutable and non-expiring. An application can safely \"bake in\" any filters that are created, it is not necessary (or advisable) to create filters at runtime.  The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).  #Safety  Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.  Note that this does not mean that \"safe\" filter is mearly an \"unsafe\" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).  When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the \"safe\" data is the only accessible data it will be returned even in \"unsafe\" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.  #Built In Filters  The following filters are built in:  default, each type documents which fields are returned under the default filter (for example, answers). withbody, which is default plus the *.body fields none, which is empty total, which includes just .total  #Compatibility with V1.x  For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters. 
     * @param {String} [callback] All API responses are JSON, we do support JSONP with the callback query parameter. 
     * @param {Number} [since] Unix date.
     * @param {module:api/DefaultApi~eventsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/EventsInner>}
     */
    eventsGet(site, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'site' is set
      if (site === undefined || site === null) {
        throw new Error("Missing the required parameter 'site' when calling eventsGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'pagesize': opts['pagesize'],
        'page': opts['page'],
        'filter': opts['filter'],
        'callback': opts['callback'],
        'site': site,
        'since': opts['since']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [EventsInner];
      return this.apiClient.callApi(
        '/events', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the filtersCreateGet operation.
     * @callback module:api/DefaultApi~filtersCreateGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SingleFilter} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new filter given a list of includes, excludes, a base filter, and whether or not this filter should be \"unsafe\".   Filter \"safety\" is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.   If no base filter is specified, the default filter is assumed. When building a filter from scratch, the none built-in filter is useful.   When the size of the parameters being sent to this method grows to large, problems can occur. This method will accept POST requests to mitigate this.   It is not expected that many applications will call this method at runtime, filters should be pre-calculated and \"baked in\" in the common cases. Furthermore, there are a number of built-in filters which cover common use cases.   This method returns a single filter. 
     * @param {Object} opts Optional parameters
     * @param {String} [base] 
     * @param {String} [exclude] String list (semicolon delimited).
     * @param {String} [include] String list (semicolon delimited).
     * @param {Boolean} [unsafe] 
     * @param {module:api/DefaultApi~filtersCreateGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SingleFilter}
     */
    filtersCreateGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'base': opts['base'],
        'exclude': opts['exclude'],
        'include': opts['include'],
        'unsafe': opts['unsafe']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = SingleFilter;
      return this.apiClient.callApi(
        '/filters/create', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the filtersFiltersGet operation.
     * @callback module:api/DefaultApi~filtersFiltersGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/FiltersInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the fields included by the given filters, and the \"safeness\" of those filters.   It is not expected that this method will be consumed by many applications at runtime, it is provided to aid in debugging.   {filters} can contain up to 20 semicolon delimited filters. Filters are obtained via calls to /filters/create, or by using a built-in filter.   This method returns a list of filters. 
     * @param {String} filters String list (semicolon delimited).
     * @param {module:api/DefaultApi~filtersFiltersGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/FiltersInner>}
     */
    filtersFiltersGet(filters, callback) {
      let postBody = null;
      // verify the required parameter 'filters' is set
      if (filters === undefined || filters === null) {
        throw new Error("Missing the required parameter 'filters' when calling filtersFiltersGet");
      }

      let pathParams = {
        'filters': filters
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [FiltersInner];
      return this.apiClient.callApi(
        '/filters/{filters}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the inboxGet operation.
     * @callback module:api/DefaultApi~inboxGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/InboxItemsInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a user's inbox.   This method requires an access_token, with a scope containing \"read_inbox\".   This method returns a list of inbox items. 
     * @param {Object} opts Optional parameters
     * @param {Number} [pagesize] 
     * @param {Number} [page] 
     * @param {String} [filter] #Discussion  The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.  An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.  Filters are immutable and non-expiring. An application can safely \"bake in\" any filters that are created, it is not necessary (or advisable) to create filters at runtime.  The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).  #Safety  Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.  Note that this does not mean that \"safe\" filter is mearly an \"unsafe\" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).  When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the \"safe\" data is the only accessible data it will be returned even in \"unsafe\" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.  #Built In Filters  The following filters are built in:  default, each type documents which fields are returned under the default filter (for example, answers). withbody, which is default plus the *.body fields none, which is empty total, which includes just .total  #Compatibility with V1.x  For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters. 
     * @param {String} [callback] All API responses are JSON, we do support JSONP with the callback query parameter. 
     * @param {module:api/DefaultApi~inboxGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/InboxItemsInner>}
     */
    inboxGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'pagesize': opts['pagesize'],
        'page': opts['page'],
        'filter': opts['filter'],
        'callback': opts['callback']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [InboxItemsInner];
      return this.apiClient.callApi(
        '/inbox', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the inboxUnreadGet operation.
     * @callback module:api/DefaultApi~inboxUnreadGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/InboxItemsInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the unread items in a user's inbox.   This method requires an access_token, with a scope containing \"read_inbox\".   This method returns a list of inbox items. 
     * @param {Object} opts Optional parameters
     * @param {Number} [pagesize] 
     * @param {Number} [page] 
     * @param {String} [filter] #Discussion  The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.  An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.  Filters are immutable and non-expiring. An application can safely \"bake in\" any filters that are created, it is not necessary (or advisable) to create filters at runtime.  The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).  #Safety  Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.  Note that this does not mean that \"safe\" filter is mearly an \"unsafe\" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).  When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the \"safe\" data is the only accessible data it will be returned even in \"unsafe\" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.  #Built In Filters  The following filters are built in:  default, each type documents which fields are returned under the default filter (for example, answers). withbody, which is default plus the *.body fields none, which is empty total, which includes just .total  #Compatibility with V1.x  For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters. 
     * @param {String} [callback] All API responses are JSON, we do support JSONP with the callback query parameter. 
     * @param {Number} [since] Unix date.
     * @param {module:api/DefaultApi~inboxUnreadGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/InboxItemsInner>}
     */
    inboxUnreadGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'pagesize': opts['pagesize'],
        'page': opts['page'],
        'filter': opts['filter'],
        'callback': opts['callback'],
        'since': opts['since']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [InboxItemsInner];
      return this.apiClient.callApi(
        '/inbox/unread', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the infoGet operation.
     * @callback module:api/DefaultApi~infoGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InfoObject} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a collection of statistics about the site.   Data to facilitate per-site customization, discover related sites, and aggregate statistics is all returned by this method.   This data is cached very aggressively, by design. Query sparingly, ideally no more than once an hour.   This method returns an info object. 
     * @param {String} site Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. \"stackoverflow.com\"), or a short form identified by api_site_parameter on the site object. 
     * @param {module:api/DefaultApi~infoGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InfoObject}
     */
    infoGet(site, callback) {
      let postBody = null;
      // verify the required parameter 'site' is set
      if (site === undefined || site === null) {
        throw new Error("Missing the required parameter 'site' when calling infoGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'site': site
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = InfoObject;
      return this.apiClient.callApi(
        '/info', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the meAnswersGet operation.
     * @callback module:api/DefaultApi~meAnswersGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/AnswersInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the answers owned by the user associated with the given access_token.   This method returns a list of answers. 
     * @param {String} site Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. \"stackoverflow.com\"), or a short form identified by api_site_parameter on the site object. 
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [order] 
     * @param {String} [max] sort = activity => date sort = creation => date sort = votes => number 
     * @param {String} [min] sort = activity => date sort = creation => date sort = votes => number 
     * @param {module:model/String} [sort] 
     * @param {Number} [fromdate] Unix date.
     * @param {Number} [todate] Unix date.
     * @param {Number} [pagesize] 
     * @param {Number} [page] 
     * @param {String} [filter] #Discussion  The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.  An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.  Filters are immutable and non-expiring. An application can safely \"bake in\" any filters that are created, it is not necessary (or advisable) to create filters at runtime.  The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).  #Safety  Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.  Note that this does not mean that \"safe\" filter is mearly an \"unsafe\" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).  When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the \"safe\" data is the only accessible data it will be returned even in \"unsafe\" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.  #Built In Filters  The following filters are built in:  default, each type documents which fields are returned under the default filter (for example, answers). withbody, which is default plus the *.body fields none, which is empty total, which includes just .total  #Compatibility with V1.x  For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters. 
     * @param {String} [callback] All API responses are JSON, we do support JSONP with the callback query parameter. 
     * @param {module:api/DefaultApi~meAnswersGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/AnswersInner>}
     */
    meAnswersGet(site, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'site' is set
      if (site === undefined || site === null) {
        throw new Error("Missing the required parameter 'site' when calling meAnswersGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'order': opts['order'],
        'max': opts['max'],
        'min': opts['min'],
        'sort': opts['sort'],
        'fromdate': opts['fromdate'],
        'todate': opts['todate'],
        'pagesize': opts['pagesize'],
        'page': opts['page'],
        'filter': opts['filter'],
        'callback': opts['callback'],
        'site': site
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [AnswersInner];
      return this.apiClient.callApi(
        '/me/answers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the meAssociatedGet operation.
     * @callback module:api/DefaultApi~meAssociatedGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/NetworkUsersInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns all of a user's associated accounts, given an access_token for them.   This method returns a list of network users. 
     * @param {Object} opts Optional parameters
     * @param {Number} [pagesize] 
     * @param {Number} [page] 
     * @param {String} [filter] #Discussion  The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.  An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.  Filters are immutable and non-expiring. An application can safely \"bake in\" any filters that are created, it is not necessary (or advisable) to create filters at runtime.  The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).  #Safety  Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.  Note that this does not mean that \"safe\" filter is mearly an \"unsafe\" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).  When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the \"safe\" data is the only accessible data it will be returned even in \"unsafe\" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.  #Built In Filters  The following filters are built in:  default, each type documents which fields are returned under the default filter (for example, answers). withbody, which is default plus the *.body fields none, which is empty total, which includes just .total  #Compatibility with V1.x  For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters. 
     * @param {String} [callback] All API responses are JSON, we do support JSONP with the callback query parameter. 
     * @param {module:api/DefaultApi~meAssociatedGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/NetworkUsersInner>}
     */
    meAssociatedGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'pagesize': opts['pagesize'],
        'page': opts['page'],
        'filter': opts['filter'],
        'callback': opts['callback']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [NetworkUsersInner];
      return this.apiClient.callApi(
        '/me/associated', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the meBadgesGet operation.
     * @callback module:api/DefaultApi~meBadgesGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/BadgesInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the badges earned by the user associated with the given access_token.   This method returns a list of badges. 
     * @param {String} site Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. \"stackoverflow.com\"), or a short form identified by api_site_parameter on the site object. 
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [order] 
     * @param {String} [max] sort = rank => string sort = name => string sort = type => string 
     * @param {String} [min] sort = rank => string sort = name => string sort = type => string 
     * @param {module:model/String} [sort] 
     * @param {Number} [fromdate] Unix date.
     * @param {Number} [todate] Unix date.
     * @param {Number} [pagesize] 
     * @param {Number} [page] 
     * @param {String} [filter] #Discussion  The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.  An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.  Filters are immutable and non-expiring. An application can safely \"bake in\" any filters that are created, it is not necessary (or advisable) to create filters at runtime.  The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).  #Safety  Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.  Note that this does not mean that \"safe\" filter is mearly an \"unsafe\" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).  When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the \"safe\" data is the only accessible data it will be returned even in \"unsafe\" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.  #Built In Filters  The following filters are built in:  default, each type documents which fields are returned under the default filter (for example, answers). withbody, which is default plus the *.body fields none, which is empty total, which includes just .total  #Compatibility with V1.x  For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters. 
     * @param {String} [callback] All API responses are JSON, we do support JSONP with the callback query parameter. 
     * @param {module:api/DefaultApi~meBadgesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/BadgesInner>}
     */
    meBadgesGet(site, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'site' is set
      if (site === undefined || site === null) {
        throw new Error("Missing the required parameter 'site' when calling meBadgesGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'order': opts['order'],
        'max': opts['max'],
        'min': opts['min'],
        'sort': opts['sort'],
        'fromdate': opts['fromdate'],
        'todate': opts['todate'],
        'pagesize': opts['pagesize'],
        'page': opts['page'],
        'filter': opts['filter'],
        'callback': opts['callback'],
        'site': site
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [BadgesInner];
      return this.apiClient.callApi(
        '/me/badges', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the meCommentsGet operation.
     * @callback module:api/DefaultApi~meCommentsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CommentsInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the comments owned by the user associated with the given access_token.   This method returns a list of comments. 
     * @param {String} site Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. \"stackoverflow.com\"), or a short form identified by api_site_parameter on the site object. 
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [order] 
     * @param {String} [max] sort = creation => date sort = votes => number 
     * @param {String} [min] sort = creation => date sort = votes => number 
     * @param {module:model/String} [sort] 
     * @param {Number} [fromdate] Unix date.
     * @param {Number} [todate] Unix date.
     * @param {Number} [pagesize] 
     * @param {Number} [page] 
     * @param {String} [filter] #Discussion  The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.  An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.  Filters are immutable and non-expiring. An application can safely \"bake in\" any filters that are created, it is not necessary (or advisable) to create filters at runtime.  The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).  #Safety  Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.  Note that this does not mean that \"safe\" filter is mearly an \"unsafe\" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).  When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the \"safe\" data is the only accessible data it will be returned even in \"unsafe\" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.  #Built In Filters  The following filters are built in:  default, each type documents which fields are returned under the default filter (for example, answers). withbody, which is default plus the *.body fields none, which is empty total, which includes just .total  #Compatibility with V1.x  For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters. 
     * @param {String} [callback] All API responses are JSON, we do support JSONP with the callback query parameter. 
     * @param {module:api/DefaultApi~meCommentsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CommentsInner>}
     */
    meCommentsGet(site, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'site' is set
      if (site === undefined || site === null) {
        throw new Error("Missing the required parameter 'site' when calling meCommentsGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'order': opts['order'],
        'max': opts['max'],
        'min': opts['min'],
        'sort': opts['sort'],
        'fromdate': opts['fromdate'],
        'todate': opts['todate'],
        'pagesize': opts['pagesize'],
        'page': opts['page'],
        'filter': opts['filter'],
        'callback': opts['callback'],
        'site': site
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [CommentsInner];
      return this.apiClient.callApi(
        '/me/comments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the meCommentsToIdGet operation.
     * @callback module:api/DefaultApi~meCommentsToIdGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CommentsInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the comments owned by the user associated with the given access_token that are in reply to the user identified by {toId}.   This method returns a list of comments. 
     * @param {Number} toId 
     * @param {String} site Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. \"stackoverflow.com\"), or a short form identified by api_site_parameter on the site object. 
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [order] 
     * @param {String} [max] sort = creation => date sort = votes => number 
     * @param {String} [min] sort = creation => date sort = votes => number 
     * @param {module:model/String} [sort] 
     * @param {Number} [fromdate] Unix date.
     * @param {Number} [todate] Unix date.
     * @param {Number} [pagesize] 
     * @param {Number} [page] 
     * @param {String} [filter] #Discussion  The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.  An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.  Filters are immutable and non-expiring. An application can safely \"bake in\" any filters that are created, it is not necessary (or advisable) to create filters at runtime.  The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).  #Safety  Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.  Note that this does not mean that \"safe\" filter is mearly an \"unsafe\" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).  When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the \"safe\" data is the only accessible data it will be returned even in \"unsafe\" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.  #Built In Filters  The following filters are built in:  default, each type documents which fields are returned under the default filter (for example, answers). withbody, which is default plus the *.body fields none, which is empty total, which includes just .total  #Compatibility with V1.x  For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters. 
     * @param {String} [callback] All API responses are JSON, we do support JSONP with the callback query parameter. 
     * @param {module:api/DefaultApi~meCommentsToIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CommentsInner>}
     */
    meCommentsToIdGet(toId, site, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'toId' is set
      if (toId === undefined || toId === null) {
        throw new Error("Missing the required parameter 'toId' when calling meCommentsToIdGet");
      }
      // verify the required parameter 'site' is set
      if (site === undefined || site === null) {
        throw new Error("Missing the required parameter 'site' when calling meCommentsToIdGet");
      }

      let pathParams = {
        'toId': toId
      };
      let queryParams = {
        'order': opts['order'],
        'max': opts['max'],
        'min': opts['min'],
        'sort': opts['sort'],
        'fromdate': opts['fromdate'],
        'todate': opts['todate'],
        'pagesize': opts['pagesize'],
        'page': opts['page'],
        'filter': opts['filter'],
        'callback': opts['callback'],
        'site': site
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [CommentsInner];
      return this.apiClient.callApi(
        '/me/comments/{toId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the meFavoritesGet operation.
     * @callback module:api/DefaultApi~meFavoritesGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/QuestionsInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the questions favorites by the user associated with the given access_token.   This method returns a list of questions. 
     * @param {String} site Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. \"stackoverflow.com\"), or a short form identified by api_site_parameter on the site object. 
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [order] 
     * @param {String} [max] sort = activity => date sort = creation => date sort = votes => number sort = added => date 
     * @param {String} [min] sort = activity => date sort = creation => date sort = votes => number sort = added => date 
     * @param {module:model/String} [sort] 
     * @param {Number} [fromdate] Unix date.
     * @param {Number} [todate] Unix date.
     * @param {Number} [pagesize] 
     * @param {Number} [page] 
     * @param {String} [filter] #Discussion  The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.  An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.  Filters are immutable and non-expiring. An application can safely \"bake in\" any filters that are created, it is not necessary (or advisable) to create filters at runtime.  The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).  #Safety  Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.  Note that this does not mean that \"safe\" filter is mearly an \"unsafe\" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).  When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the \"safe\" data is the only accessible data it will be returned even in \"unsafe\" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.  #Built In Filters  The following filters are built in:  default, each type documents which fields are returned under the default filter (for example, answers). withbody, which is default plus the *.body fields none, which is empty total, which includes just .total  #Compatibility with V1.x  For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters. 
     * @param {String} [callback] All API responses are JSON, we do support JSONP with the callback query parameter. 
     * @param {module:api/DefaultApi~meFavoritesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/QuestionsInner>}
     */
    meFavoritesGet(site, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'site' is set
      if (site === undefined || site === null) {
        throw new Error("Missing the required parameter 'site' when calling meFavoritesGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'order': opts['order'],
        'max': opts['max'],
        'min': opts['min'],
        'sort': opts['sort'],
        'fromdate': opts['fromdate'],
        'todate': opts['todate'],
        'pagesize': opts['pagesize'],
        'page': opts['page'],
        'filter': opts['filter'],
        'callback': opts['callback'],
        'site': site
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [QuestionsInner];
      return this.apiClient.callApi(
        '/me/favorites', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the meGet operation.
     * @callback module:api/DefaultApi~meGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/User} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the user associated with the passed access_token.   This method returns a user. 
     * @param {String} site Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. \"stackoverflow.com\"), or a short form identified by api_site_parameter on the site object. 
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [order] 
     * @param {String} [max] sort = reputation => number sort = creation => date sort = name => string sort = modified => date 
     * @param {String} [min] sort = reputation => number sort = creation => date sort = name => string sort = modified => date 
     * @param {module:model/String} [sort] 
     * @param {Number} [fromdate] Unix date.
     * @param {Number} [todate] Unix date.
     * @param {Number} [pagesize] 
     * @param {Number} [page] 
     * @param {String} [filter] #Discussion  The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.  An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.  Filters are immutable and non-expiring. An application can safely \"bake in\" any filters that are created, it is not necessary (or advisable) to create filters at runtime.  The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).  #Safety  Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.  Note that this does not mean that \"safe\" filter is mearly an \"unsafe\" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).  When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the \"safe\" data is the only accessible data it will be returned even in \"unsafe\" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.  #Built In Filters  The following filters are built in:  default, each type documents which fields are returned under the default filter (for example, answers). withbody, which is default plus the *.body fields none, which is empty total, which includes just .total  #Compatibility with V1.x  For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters. 
     * @param {String} [callback] All API responses are JSON, we do support JSONP with the callback query parameter. 
     * @param {module:api/DefaultApi~meGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/User}
     */
    meGet(site, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'site' is set
      if (site === undefined || site === null) {
        throw new Error("Missing the required parameter 'site' when calling meGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'order': opts['order'],
        'max': opts['max'],
        'min': opts['min'],
        'sort': opts['sort'],
        'fromdate': opts['fromdate'],
        'todate': opts['todate'],
        'pagesize': opts['pagesize'],
        'page': opts['page'],
        'filter': opts['filter'],
        'callback': opts['callback'],
        'site': site
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = User;
      return this.apiClient.callApi(
        '/me', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the meInboxGet operation.
     * @callback module:api/DefaultApi~meInboxGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/InboxItemsInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the user identified by access_token's inbox.   This method requires an access_token, with a scope containing \"read_inbox\".   This method returns a list of inbox items. 
     * @param {String} site Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. \"stackoverflow.com\"), or a short form identified by api_site_parameter on the site object. 
     * @param {Object} opts Optional parameters
     * @param {Number} [pagesize] 
     * @param {Number} [page] 
     * @param {String} [filter] #Discussion  The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.  An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.  Filters are immutable and non-expiring. An application can safely \"bake in\" any filters that are created, it is not necessary (or advisable) to create filters at runtime.  The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).  #Safety  Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.  Note that this does not mean that \"safe\" filter is mearly an \"unsafe\" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).  When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the \"safe\" data is the only accessible data it will be returned even in \"unsafe\" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.  #Built In Filters  The following filters are built in:  default, each type documents which fields are returned under the default filter (for example, answers). withbody, which is default plus the *.body fields none, which is empty total, which includes just .total  #Compatibility with V1.x  For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters. 
     * @param {String} [callback] All API responses are JSON, we do support JSONP with the callback query parameter. 
     * @param {module:api/DefaultApi~meInboxGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/InboxItemsInner>}
     */
    meInboxGet(site, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'site' is set
      if (site === undefined || site === null) {
        throw new Error("Missing the required parameter 'site' when calling meInboxGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'pagesize': opts['pagesize'],
        'page': opts['page'],
        'filter': opts['filter'],
        'callback': opts['callback'],
        'site': site
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [InboxItemsInner];
      return this.apiClient.callApi(
        '/me/inbox', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the meInboxUnreadGet operation.
     * @callback module:api/DefaultApi~meInboxUnreadGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/InboxItemsInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the unread items in the user identified by access_token's inbox.   This method requires an access_token, with a scope containing \"read_inbox\".   This method returns a list of inbox items. 
     * @param {String} site Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. \"stackoverflow.com\"), or a short form identified by api_site_parameter on the site object. 
     * @param {Object} opts Optional parameters
     * @param {Number} [pagesize] 
     * @param {Number} [page] 
     * @param {String} [filter] #Discussion  The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.  An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.  Filters are immutable and non-expiring. An application can safely \"bake in\" any filters that are created, it is not necessary (or advisable) to create filters at runtime.  The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).  #Safety  Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.  Note that this does not mean that \"safe\" filter is mearly an \"unsafe\" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).  When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the \"safe\" data is the only accessible data it will be returned even in \"unsafe\" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.  #Built In Filters  The following filters are built in:  default, each type documents which fields are returned under the default filter (for example, answers). withbody, which is default plus the *.body fields none, which is empty total, which includes just .total  #Compatibility with V1.x  For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters. 
     * @param {String} [callback] All API responses are JSON, we do support JSONP with the callback query parameter. 
     * @param {Number} [since] Unix date.
     * @param {module:api/DefaultApi~meInboxUnreadGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/InboxItemsInner>}
     */
    meInboxUnreadGet(site, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'site' is set
      if (site === undefined || site === null) {
        throw new Error("Missing the required parameter 'site' when calling meInboxUnreadGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'pagesize': opts['pagesize'],
        'page': opts['page'],
        'filter': opts['filter'],
        'callback': opts['callback'],
        'site': site,
        'since': opts['since']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [InboxItemsInner];
      return this.apiClient.callApi(
        '/me/inbox/unread', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the meMentionedGet operation.
     * @callback module:api/DefaultApi~meMentionedGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CommentsInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the comments mentioning the user associated with the given access_token.   This method returns a list of comments. 
     * @param {String} site Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. \"stackoverflow.com\"), or a short form identified by api_site_parameter on the site object. 
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [order] 
     * @param {String} [max] sort = creation => date sort = votes => number 
     * @param {String} [min] sort = creation => date sort = votes => number 
     * @param {module:model/String} [sort] 
     * @param {Number} [fromdate] Unix date.
     * @param {Number} [todate] Unix date.
     * @param {Number} [pagesize] 
     * @param {Number} [page] 
     * @param {String} [filter] #Discussion  The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.  An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.  Filters are immutable and non-expiring. An application can safely \"bake in\" any filters that are created, it is not necessary (or advisable) to create filters at runtime.  The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).  #Safety  Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.  Note that this does not mean that \"safe\" filter is mearly an \"unsafe\" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).  When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the \"safe\" data is the only accessible data it will be returned even in \"unsafe\" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.  #Built In Filters  The following filters are built in:  default, each type documents which fields are returned under the default filter (for example, answers). withbody, which is default plus the *.body fields none, which is empty total, which includes just .total  #Compatibility with V1.x  For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters. 
     * @param {String} [callback] All API responses are JSON, we do support JSONP with the callback query parameter. 
     * @param {module:api/DefaultApi~meMentionedGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CommentsInner>}
     */
    meMentionedGet(site, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'site' is set
      if (site === undefined || site === null) {
        throw new Error("Missing the required parameter 'site' when calling meMentionedGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'order': opts['order'],
        'max': opts['max'],
        'min': opts['min'],
        'sort': opts['sort'],
        'fromdate': opts['fromdate'],
        'todate': opts['todate'],
        'pagesize': opts['pagesize'],
        'page': opts['page'],
        'filter': opts['filter'],
        'callback': opts['callback'],
        'site': site
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [CommentsInner];
      return this.apiClient.callApi(
        '/me/mentioned', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the meMergesGet operation.
     * @callback module:api/DefaultApi~meMergesGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/AccountMergeInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a record of merges that have occurred involving a user identified by an access_token.   This method allows you to take now invalid account ids and find what account they've become, or take currently valid account ids and find which ids were equivalent in the past.   This is most useful when confirming that an account_id is in fact \"new\" to an application.   Account merges can happen for a wide range of reasons, applications should not make assumptions that merges have particular causes.   Note that accounts are managed at a network level, users on a site may be merged due to an account level merge but there is no guarantee that a merge has an effect on any particular site.   This method returns a list of account_merge. 
     * @param {Object} opts Optional parameters
     * @param {Number} [pagesize] 
     * @param {Number} [page] 
     * @param {String} [filter] #Discussion  The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.  An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.  Filters are immutable and non-expiring. An application can safely \"bake in\" any filters that are created, it is not necessary (or advisable) to create filters at runtime.  The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).  #Safety  Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.  Note that this does not mean that \"safe\" filter is mearly an \"unsafe\" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).  When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the \"safe\" data is the only accessible data it will be returned even in \"unsafe\" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.  #Built In Filters  The following filters are built in:  default, each type documents which fields are returned under the default filter (for example, answers). withbody, which is default plus the *.body fields none, which is empty total, which includes just .total  #Compatibility with V1.x  For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters. 
     * @param {String} [callback] All API responses are JSON, we do support JSONP with the callback query parameter. 
     * @param {module:api/DefaultApi~meMergesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/AccountMergeInner>}
     */
    meMergesGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'pagesize': opts['pagesize'],
        'page': opts['page'],
        'filter': opts['filter'],
        'callback': opts['callback']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [AccountMergeInner];
      return this.apiClient.callApi(
        '/me/merges', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the meNotificationsGet operation.
     * @callback module:api/DefaultApi~meNotificationsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/NotificationsInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a user's notifications, given an access_token.   This method requires an access_token, with a scope containing \"read_inbox\".   This method returns a list of notifications. 
     * @param {String} site Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. \"stackoverflow.com\"), or a short form identified by api_site_parameter on the site object. 
     * @param {Object} opts Optional parameters
     * @param {Number} [pagesize] 
     * @param {Number} [page] 
     * @param {String} [filter] #Discussion  The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.  An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.  Filters are immutable and non-expiring. An application can safely \"bake in\" any filters that are created, it is not necessary (or advisable) to create filters at runtime.  The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).  #Safety  Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.  Note that this does not mean that \"safe\" filter is mearly an \"unsafe\" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).  When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the \"safe\" data is the only accessible data it will be returned even in \"unsafe\" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.  #Built In Filters  The following filters are built in:  default, each type documents which fields are returned under the default filter (for example, answers). withbody, which is default plus the *.body fields none, which is empty total, which includes just .total  #Compatibility with V1.x  For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters. 
     * @param {String} [callback] All API responses are JSON, we do support JSONP with the callback query parameter. 
     * @param {module:api/DefaultApi~meNotificationsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/NotificationsInner>}
     */
    meNotificationsGet(site, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'site' is set
      if (site === undefined || site === null) {
        throw new Error("Missing the required parameter 'site' when calling meNotificationsGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'pagesize': opts['pagesize'],
        'page': opts['page'],
        'filter': opts['filter'],
        'callback': opts['callback'],
        'site': site
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [NotificationsInner];
      return this.apiClient.callApi(
        '/me/notifications', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the meNotificationsUnreadGet operation.
     * @callback module:api/DefaultApi~meNotificationsUnreadGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/NotificationsInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a user's unread notifications, given an access_token.   This method requires an access_token, with a scope containing \"read_inbox\".   This method returns a list of notifications. 
     * @param {String} site Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. \"stackoverflow.com\"), or a short form identified by api_site_parameter on the site object. 
     * @param {Object} opts Optional parameters
     * @param {Number} [pagesize] 
     * @param {Number} [page] 
     * @param {String} [filter] #Discussion  The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.  An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.  Filters are immutable and non-expiring. An application can safely \"bake in\" any filters that are created, it is not necessary (or advisable) to create filters at runtime.  The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).  #Safety  Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.  Note that this does not mean that \"safe\" filter is mearly an \"unsafe\" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).  When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the \"safe\" data is the only accessible data it will be returned even in \"unsafe\" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.  #Built In Filters  The following filters are built in:  default, each type documents which fields are returned under the default filter (for example, answers). withbody, which is default plus the *.body fields none, which is empty total, which includes just .total  #Compatibility with V1.x  For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters. 
     * @param {String} [callback] All API responses are JSON, we do support JSONP with the callback query parameter. 
     * @param {module:api/DefaultApi~meNotificationsUnreadGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/NotificationsInner>}
     */
    meNotificationsUnreadGet(site, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'site' is set
      if (site === undefined || site === null) {
        throw new Error("Missing the required parameter 'site' when calling meNotificationsUnreadGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'pagesize': opts['pagesize'],
        'page': opts['page'],
        'filter': opts['filter'],
        'callback': opts['callback'],
        'site': site
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [NotificationsInner];
      return this.apiClient.callApi(
        '/me/notifications/unread', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the mePrivilegesGet operation.
     * @callback module:api/DefaultApi~mePrivilegesGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PrivilegesInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the privileges the user identified by access_token has.   This method returns a list of privileges. 
     * @param {String} site Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. \"stackoverflow.com\"), or a short form identified by api_site_parameter on the site object. 
     * @param {Object} opts Optional parameters
     * @param {Number} [pagesize] 
     * @param {Number} [page] 
     * @param {String} [filter] #Discussion  The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.  An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.  Filters are immutable and non-expiring. An application can safely \"bake in\" any filters that are created, it is not necessary (or advisable) to create filters at runtime.  The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).  #Safety  Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.  Note that this does not mean that \"safe\" filter is mearly an \"unsafe\" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).  When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the \"safe\" data is the only accessible data it will be returned even in \"unsafe\" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.  #Built In Filters  The following filters are built in:  default, each type documents which fields are returned under the default filter (for example, answers). withbody, which is default plus the *.body fields none, which is empty total, which includes just .total  #Compatibility with V1.x  For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters. 
     * @param {String} [callback] All API responses are JSON, we do support JSONP with the callback query parameter. 
     * @param {module:api/DefaultApi~mePrivilegesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PrivilegesInner>}
     */
    mePrivilegesGet(site, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'site' is set
      if (site === undefined || site === null) {
        throw new Error("Missing the required parameter 'site' when calling mePrivilegesGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'pagesize': opts['pagesize'],
        'page': opts['page'],
        'filter': opts['filter'],
        'callback': opts['callback'],
        'site': site
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [PrivilegesInner];
      return this.apiClient.callApi(
        '/me/privileges', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the meQuestionsFeaturedGet operation.
     * @callback module:api/DefaultApi~meQuestionsFeaturedGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/QuestionsInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the questions that have active bounties offered by the user associated with the given access_token.   This method returns a list of questions. 
     * @param {String} site Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. \"stackoverflow.com\"), or a short form identified by api_site_parameter on the site object. 
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [order] 
     * @param {String} [max] sort = activity => date sort = creation => date sort = votes => number 
     * @param {String} [min] sort = activity => date sort = creation => date sort = votes => number 
     * @param {module:model/String} [sort] 
     * @param {Number} [fromdate] Unix date.
     * @param {Number} [todate] Unix date.
     * @param {Number} [pagesize] 
     * @param {Number} [page] 
     * @param {String} [filter] #Discussion  The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.  An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.  Filters are immutable and non-expiring. An application can safely \"bake in\" any filters that are created, it is not necessary (or advisable) to create filters at runtime.  The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).  #Safety  Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.  Note that this does not mean that \"safe\" filter is mearly an \"unsafe\" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).  When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the \"safe\" data is the only accessible data it will be returned even in \"unsafe\" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.  #Built In Filters  The following filters are built in:  default, each type documents which fields are returned under the default filter (for example, answers). withbody, which is default plus the *.body fields none, which is empty total, which includes just .total  #Compatibility with V1.x  For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters. 
     * @param {String} [callback] All API responses are JSON, we do support JSONP with the callback query parameter. 
     * @param {module:api/DefaultApi~meQuestionsFeaturedGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/QuestionsInner>}
     */
    meQuestionsFeaturedGet(site, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'site' is set
      if (site === undefined || site === null) {
        throw new Error("Missing the required parameter 'site' when calling meQuestionsFeaturedGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'order': opts['order'],
        'max': opts['max'],
        'min': opts['min'],
        'sort': opts['sort'],
        'fromdate': opts['fromdate'],
        'todate': opts['todate'],
        'pagesize': opts['pagesize'],
        'page': opts['page'],
        'filter': opts['filter'],
        'callback': opts['callback'],
        'site': site
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [QuestionsInner];
      return this.apiClient.callApi(
        '/me/questions/featured', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the meQuestionsGet operation.
     * @callback module:api/DefaultApi~meQuestionsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/QuestionsInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the questions owned by the user associated with the given access_token.   This method returns a list of questions. 
     * @param {String} site Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. \"stackoverflow.com\"), or a short form identified by api_site_parameter on the site object. 
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [order] 
     * @param {String} [max] sort = activity => date sort = creation => date sort = votes => number 
     * @param {String} [min] sort = activity => date sort = creation => date sort = votes => number 
     * @param {module:model/String} [sort] 
     * @param {Number} [fromdate] Unix date.
     * @param {Number} [todate] Unix date.
     * @param {Number} [pagesize] 
     * @param {Number} [page] 
     * @param {String} [filter] #Discussion  The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.  An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.  Filters are immutable and non-expiring. An application can safely \"bake in\" any filters that are created, it is not necessary (or advisable) to create filters at runtime.  The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).  #Safety  Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.  Note that this does not mean that \"safe\" filter is mearly an \"unsafe\" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).  When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the \"safe\" data is the only accessible data it will be returned even in \"unsafe\" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.  #Built In Filters  The following filters are built in:  default, each type documents which fields are returned under the default filter (for example, answers). withbody, which is default plus the *.body fields none, which is empty total, which includes just .total  #Compatibility with V1.x  For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters. 
     * @param {String} [callback] All API responses are JSON, we do support JSONP with the callback query parameter. 
     * @param {module:api/DefaultApi~meQuestionsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/QuestionsInner>}
     */
    meQuestionsGet(site, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'site' is set
      if (site === undefined || site === null) {
        throw new Error("Missing the required parameter 'site' when calling meQuestionsGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'order': opts['order'],
        'max': opts['max'],
        'min': opts['min'],
        'sort': opts['sort'],
        'fromdate': opts['fromdate'],
        'todate': opts['todate'],
        'pagesize': opts['pagesize'],
        'page': opts['page'],
        'filter': opts['filter'],
        'callback': opts['callback'],
        'site': site
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [QuestionsInner];
      return this.apiClient.callApi(
        '/me/questions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the meQuestionsNoAnswersGet operation.
     * @callback module:api/DefaultApi~meQuestionsNoAnswersGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/QuestionsInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the questions owned by the user associated with the given access_token that have no answers.   This method returns a list of questions. 
     * @param {String} site Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. \"stackoverflow.com\"), or a short form identified by api_site_parameter on the site object. 
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [order] 
     * @param {String} [max] sort = activity => date sort = creation => date sort = votes => number 
     * @param {String} [min] sort = activity => date sort = creation => date sort = votes => number 
     * @param {module:model/String} [sort] 
     * @param {Number} [fromdate] Unix date.
     * @param {Number} [todate] Unix date.
     * @param {Number} [pagesize] 
     * @param {Number} [page] 
     * @param {String} [filter] #Discussion  The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.  An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.  Filters are immutable and non-expiring. An application can safely \"bake in\" any filters that are created, it is not necessary (or advisable) to create filters at runtime.  The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).  #Safety  Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.  Note that this does not mean that \"safe\" filter is mearly an \"unsafe\" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).  When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the \"safe\" data is the only accessible data it will be returned even in \"unsafe\" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.  #Built In Filters  The following filters are built in:  default, each type documents which fields are returned under the default filter (for example, answers). withbody, which is default plus the *.body fields none, which is empty total, which includes just .total  #Compatibility with V1.x  For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters. 
     * @param {String} [callback] All API responses are JSON, we do support JSONP with the callback query parameter. 
     * @param {module:api/DefaultApi~meQuestionsNoAnswersGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/QuestionsInner>}
     */
    meQuestionsNoAnswersGet(site, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'site' is set
      if (site === undefined || site === null) {
        throw new Error("Missing the required parameter 'site' when calling meQuestionsNoAnswersGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'order': opts['order'],
        'max': opts['max'],
        'min': opts['min'],
        'sort': opts['sort'],
        'fromdate': opts['fromdate'],
        'todate': opts['todate'],
        'pagesize': opts['pagesize'],
        'page': opts['page'],
        'filter': opts['filter'],
        'callback': opts['callback'],
        'site': site
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [QuestionsInner];
      return this.apiClient.callApi(
        '/me/questions/no-answers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the meQuestionsUnacceptedGet operation.
     * @callback module:api/DefaultApi~meQuestionsUnacceptedGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/QuestionsInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the questions owned by the user associated with the given access_token that have no accepted answer.   This method returns a list of questions. 
     * @param {String} site Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. \"stackoverflow.com\"), or a short form identified by api_site_parameter on the site object. 
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [order] 
     * @param {String} [max] sort = activity => date sort = creation => date sort = votes => number 
     * @param {String} [min] sort = activity => date sort = creation => date sort = votes => number 
     * @param {module:model/String} [sort] 
     * @param {Number} [fromdate] Unix date.
     * @param {Number} [todate] Unix date.
     * @param {Number} [pagesize] 
     * @param {Number} [page] 
     * @param {String} [filter] #Discussion  The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.  An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.  Filters are immutable and non-expiring. An application can safely \"bake in\" any filters that are created, it is not necessary (or advisable) to create filters at runtime.  The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).  #Safety  Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.  Note that this does not mean that \"safe\" filter is mearly an \"unsafe\" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).  When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the \"safe\" data is the only accessible data it will be returned even in \"unsafe\" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.  #Built In Filters  The following filters are built in:  default, each type documents which fields are returned under the default filter (for example, answers). withbody, which is default plus the *.body fields none, which is empty total, which includes just .total  #Compatibility with V1.x  For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters. 
     * @param {String} [callback] All API responses are JSON, we do support JSONP with the callback query parameter. 
     * @param {module:api/DefaultApi~meQuestionsUnacceptedGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/QuestionsInner>}
     */
    meQuestionsUnacceptedGet(site, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'site' is set
      if (site === undefined || site === null) {
        throw new Error("Missing the required parameter 'site' when calling meQuestionsUnacceptedGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'order': opts['order'],
        'max': opts['max'],
        'min': opts['min'],
        'sort': opts['sort'],
        'fromdate': opts['fromdate'],
        'todate': opts['todate'],
        'pagesize': opts['pagesize'],
        'page': opts['page'],
        'filter': opts['filter'],
        'callback': opts['callback'],
        'site': site
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [QuestionsInner];
      return this.apiClient.callApi(
        '/me/questions/unaccepted', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the meQuestionsUnansweredGet operation.
     * @callback module:api/DefaultApi~meQuestionsUnansweredGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/QuestionsInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the questions owned by the user associated with the given access_token that are not considered answered.   This method returns a list of questions. 
     * @param {String} site Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. \"stackoverflow.com\"), or a short form identified by api_site_parameter on the site object. 
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [order] 
     * @param {String} [max] sort = activity => date sort = creation => date sort = votes => number 
     * @param {String} [min] sort = activity => date sort = creation => date sort = votes => number 
     * @param {module:model/String} [sort] 
     * @param {Number} [fromdate] Unix date.
     * @param {Number} [todate] Unix date.
     * @param {Number} [pagesize] 
     * @param {Number} [page] 
     * @param {String} [filter] #Discussion  The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.  An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.  Filters are immutable and non-expiring. An application can safely \"bake in\" any filters that are created, it is not necessary (or advisable) to create filters at runtime.  The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).  #Safety  Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.  Note that this does not mean that \"safe\" filter is mearly an \"unsafe\" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).  When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the \"safe\" data is the only accessible data it will be returned even in \"unsafe\" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.  #Built In Filters  The following filters are built in:  default, each type documents which fields are returned under the default filter (for example, answers). withbody, which is default plus the *.body fields none, which is empty total, which includes just .total  #Compatibility with V1.x  For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters. 
     * @param {String} [callback] All API responses are JSON, we do support JSONP with the callback query parameter. 
     * @param {module:api/DefaultApi~meQuestionsUnansweredGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/QuestionsInner>}
     */
    meQuestionsUnansweredGet(site, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'site' is set
      if (site === undefined || site === null) {
        throw new Error("Missing the required parameter 'site' when calling meQuestionsUnansweredGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'order': opts['order'],
        'max': opts['max'],
        'min': opts['min'],
        'sort': opts['sort'],
        'fromdate': opts['fromdate'],
        'todate': opts['todate'],
        'pagesize': opts['pagesize'],
        'page': opts['page'],
        'filter': opts['filter'],
        'callback': opts['callback'],
        'site': site
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [QuestionsInner];
      return this.apiClient.callApi(
        '/me/questions/unanswered', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the meReputationGet operation.
     * @callback module:api/DefaultApi~meReputationGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ReputationChangesInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the reputation changed for the user associated with the given access_token.   This method returns a list of reputation changes. 
     * @param {String} site Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. \"stackoverflow.com\"), or a short form identified by api_site_parameter on the site object. 
     * @param {Object} opts Optional parameters
     * @param {String} [filter] #Discussion  The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.  An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.  Filters are immutable and non-expiring. An application can safely \"bake in\" any filters that are created, it is not necessary (or advisable) to create filters at runtime.  The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).  #Safety  Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.  Note that this does not mean that \"safe\" filter is mearly an \"unsafe\" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).  When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the \"safe\" data is the only accessible data it will be returned even in \"unsafe\" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.  #Built In Filters  The following filters are built in:  default, each type documents which fields are returned under the default filter (for example, answers). withbody, which is default plus the *.body fields none, which is empty total, which includes just .total  #Compatibility with V1.x  For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters. 
     * @param {String} [callback] All API responses are JSON, we do support JSONP with the callback query parameter. 
     * @param {module:api/DefaultApi~meReputationGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ReputationChangesInner>}
     */
    meReputationGet(site, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'site' is set
      if (site === undefined || site === null) {
        throw new Error("Missing the required parameter 'site' when calling meReputationGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'filter': opts['filter'],
        'callback': opts['callback'],
        'site': site
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [ReputationChangesInner];
      return this.apiClient.callApi(
        '/me/reputation', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the meReputationHistoryFullGet operation.
     * @callback module:api/DefaultApi~meReputationHistoryFullGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ReputationHistoryInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns user's full reputation history, including private events.    This method requires an access_token, with a scope containing \"private_info\".    This method returns a list of reputation_history. 
     * @param {String} site Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. \"stackoverflow.com\"), or a short form identified by api_site_parameter on the site object. 
     * @param {Object} opts Optional parameters
     * @param {Number} [pagesize] 
     * @param {Number} [page] 
     * @param {String} [filter] #Discussion  The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.  An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.  Filters are immutable and non-expiring. An application can safely \"bake in\" any filters that are created, it is not necessary (or advisable) to create filters at runtime.  The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).  #Safety  Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.  Note that this does not mean that \"safe\" filter is mearly an \"unsafe\" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).  When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the \"safe\" data is the only accessible data it will be returned even in \"unsafe\" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.  #Built In Filters  The following filters are built in:  default, each type documents which fields are returned under the default filter (for example, answers). withbody, which is default plus the *.body fields none, which is empty total, which includes just .total  #Compatibility with V1.x  For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters. 
     * @param {String} [callback] All API responses are JSON, we do support JSONP with the callback query parameter. 
     * @param {module:api/DefaultApi~meReputationHistoryFullGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ReputationHistoryInner>}
     */
    meReputationHistoryFullGet(site, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'site' is set
      if (site === undefined || site === null) {
        throw new Error("Missing the required parameter 'site' when calling meReputationHistoryFullGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'pagesize': opts['pagesize'],
        'page': opts['page'],
        'filter': opts['filter'],
        'callback': opts['callback'],
        'site': site
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [ReputationHistoryInner];
      return this.apiClient.callApi(
        '/me/reputation-history/full', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the meReputationHistoryGet operation.
     * @callback module:api/DefaultApi~meReputationHistoryGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ReputationHistoryInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns user's public reputation history.   This method returns a list of reputation_history. 
     * @param {String} site Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. \"stackoverflow.com\"), or a short form identified by api_site_parameter on the site object. 
     * @param {Object} opts Optional parameters
     * @param {Number} [pagesize] 
     * @param {Number} [page] 
     * @param {String} [filter] #Discussion  The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.  An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.  Filters are immutable and non-expiring. An application can safely \"bake in\" any filters that are created, it is not necessary (or advisable) to create filters at runtime.  The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).  #Safety  Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.  Note that this does not mean that \"safe\" filter is mearly an \"unsafe\" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).  When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the \"safe\" data is the only accessible data it will be returned even in \"unsafe\" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.  #Built In Filters  The following filters are built in:  default, each type documents which fields are returned under the default filter (for example, answers). withbody, which is default plus the *.body fields none, which is empty total, which includes just .total  #Compatibility with V1.x  For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters. 
     * @param {String} [callback] All API responses are JSON, we do support JSONP with the callback query parameter. 
     * @param {module:api/DefaultApi~meReputationHistoryGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ReputationHistoryInner>}
     */
    meReputationHistoryGet(site, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'site' is set
      if (site === undefined || site === null) {
        throw new Error("Missing the required parameter 'site' when calling meReputationHistoryGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'pagesize': opts['pagesize'],
        'page': opts['page'],
        'filter': opts['filter'],
        'callback': opts['callback'],
        'site': site
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [ReputationHistoryInner];
      return this.apiClient.callApi(
        '/me/reputation-history', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the meSuggestedEditsGet operation.
     * @callback module:api/DefaultApi~meSuggestedEditsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/SuggestedEditsInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the suggested edits the user identified by access_token has submitted.   This method returns a list of suggested-edits. 
     * @param {String} site Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. \"stackoverflow.com\"), or a short form identified by api_site_parameter on the site object. 
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [order] 
     * @param {String} [max] sort = creation => date sort = approval => date sort = rejection => date 
     * @param {String} [min] sort = creation => date sort = approval => date sort = rejection => date 
     * @param {module:model/String} [sort] 
     * @param {Number} [fromdate] Unix date.
     * @param {Number} [todate] Unix date.
     * @param {Number} [pagesize] 
     * @param {Number} [page] 
     * @param {String} [filter] #Discussion  The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.  An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.  Filters are immutable and non-expiring. An application can safely \"bake in\" any filters that are created, it is not necessary (or advisable) to create filters at runtime.  The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).  #Safety  Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.  Note that this does not mean that \"safe\" filter is mearly an \"unsafe\" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).  When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the \"safe\" data is the only accessible data it will be returned even in \"unsafe\" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.  #Built In Filters  The following filters are built in:  default, each type documents which fields are returned under the default filter (for example, answers). withbody, which is default plus the *.body fields none, which is empty total, which includes just .total  #Compatibility with V1.x  For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters. 
     * @param {String} [callback] All API responses are JSON, we do support JSONP with the callback query parameter. 
     * @param {module:api/DefaultApi~meSuggestedEditsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/SuggestedEditsInner>}
     */
    meSuggestedEditsGet(site, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'site' is set
      if (site === undefined || site === null) {
        throw new Error("Missing the required parameter 'site' when calling meSuggestedEditsGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'order': opts['order'],
        'max': opts['max'],
        'min': opts['min'],
        'sort': opts['sort'],
        'fromdate': opts['fromdate'],
        'todate': opts['todate'],
        'pagesize': opts['pagesize'],
        'page': opts['page'],
        'filter': opts['filter'],
        'callback': opts['callback'],
        'site': site
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [SuggestedEditsInner];
      return this.apiClient.callApi(
        '/me/suggested-edits', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the meTagsGet operation.
     * @callback module:api/DefaultApi~meTagsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TagsInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the tags the user identified by the access_token passed is active in.   This method returns a list of tags. 
     * @param {String} site Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. \"stackoverflow.com\"), or a short form identified by api_site_parameter on the site object. 
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [order] 
     * @param {String} [max] sort = popular => number sort = activity => date sort = name => string 
     * @param {String} [min] sort = popular => number sort = activity => date sort = name => string 
     * @param {module:model/String} [sort] 
     * @param {Number} [fromdate] Unix date.
     * @param {Number} [todate] Unix date.
     * @param {Number} [pagesize] 
     * @param {Number} [page] 
     * @param {String} [filter] #Discussion  The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.  An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.  Filters are immutable and non-expiring. An application can safely \"bake in\" any filters that are created, it is not necessary (or advisable) to create filters at runtime.  The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).  #Safety  Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.  Note that this does not mean that \"safe\" filter is mearly an \"unsafe\" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).  When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the \"safe\" data is the only accessible data it will be returned even in \"unsafe\" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.  #Built In Filters  The following filters are built in:  default, each type documents which fields are returned under the default filter (for example, answers). withbody, which is default plus the *.body fields none, which is empty total, which includes just .total  #Compatibility with V1.x  For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters. 
     * @param {String} [callback] All API responses are JSON, we do support JSONP with the callback query parameter. 
     * @param {module:api/DefaultApi~meTagsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TagsInner>}
     */
    meTagsGet(site, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'site' is set
      if (site === undefined || site === null) {
        throw new Error("Missing the required parameter 'site' when calling meTagsGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'order': opts['order'],
        'max': opts['max'],
        'min': opts['min'],
        'sort': opts['sort'],
        'fromdate': opts['fromdate'],
        'todate': opts['todate'],
        'pagesize': opts['pagesize'],
        'page': opts['page'],
        'filter': opts['filter'],
        'callback': opts['callback'],
        'site': site
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [TagsInner];
      return this.apiClient.callApi(
        '/me/tags', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the meTagsTagsTopAnswersGet operation.
     * @callback module:api/DefaultApi~meTagsTagsTopAnswersGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/AnswersInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the top 30 answers the user associated with the given access_token has posted in response to questions with the given tags.   This method returns a list of answers. 
     * @param {String} tags String list (semicolon delimited).
     * @param {String} site Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. \"stackoverflow.com\"), or a short form identified by api_site_parameter on the site object. 
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [order] 
     * @param {String} [max] sort = activity => date sort = creation => date sort = votes => number 
     * @param {String} [min] sort = activity => date sort = creation => date sort = votes => number 
     * @param {module:model/String} [sort] 
     * @param {Number} [fromdate] Unix date.
     * @param {Number} [todate] Unix date.
     * @param {Number} [pagesize] 
     * @param {Number} [page] 
     * @param {String} [filter] #Discussion  The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.  An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.  Filters are immutable and non-expiring. An application can safely \"bake in\" any filters that are created, it is not necessary (or advisable) to create filters at runtime.  The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).  #Safety  Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.  Note that this does not mean that \"safe\" filter is mearly an \"unsafe\" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).  When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the \"safe\" data is the only accessible data it will be returned even in \"unsafe\" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.  #Built In Filters  The following filters are built in:  default, each type documents which fields are returned under the default filter (for example, answers). withbody, which is default plus the *.body fields none, which is empty total, which includes just .total  #Compatibility with V1.x  For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters. 
     * @param {String} [callback] All API responses are JSON, we do support JSONP with the callback query parameter. 
     * @param {module:api/DefaultApi~meTagsTagsTopAnswersGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/AnswersInner>}
     */
    meTagsTagsTopAnswersGet(tags, site, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'tags' is set
      if (tags === undefined || tags === null) {
        throw new Error("Missing the required parameter 'tags' when calling meTagsTagsTopAnswersGet");
      }
      // verify the required parameter 'site' is set
      if (site === undefined || site === null) {
        throw new Error("Missing the required parameter 'site' when calling meTagsTagsTopAnswersGet");
      }

      let pathParams = {
        'tags': tags
      };
      let queryParams = {
        'order': opts['order'],
        'max': opts['max'],
        'min': opts['min'],
        'sort': opts['sort'],
        'fromdate': opts['fromdate'],
        'todate': opts['todate'],
        'pagesize': opts['pagesize'],
        'page': opts['page'],
        'filter': opts['filter'],
        'callback': opts['callback'],
        'site': site
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [AnswersInner];
      return this.apiClient.callApi(
        '/me/tags/{tags}/top-answers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the meTagsTagsTopQuestionsGet operation.
     * @callback module:api/DefaultApi~meTagsTagsTopQuestionsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/QuestionsInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the top 30 questions the user associated with the given access_token has posted in response to questions with the given tags.   This method returns a list of questions. 
     * @param {String} tags String list (semicolon delimited).
     * @param {String} site Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. \"stackoverflow.com\"), or a short form identified by api_site_parameter on the site object. 
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [order] 
     * @param {String} [max] sort = activity => date sort = creation => date sort = votes => number sort = hot => none sort = week => none sort = month => none sort = relevance => none 
     * @param {String} [min] sort = activity => date sort = creation => date sort = votes => number sort = hot => none sort = week => none sort = month => none sort = relevance => none 
     * @param {module:model/String} [sort] 
     * @param {Number} [fromdate] Unix date.
     * @param {Number} [todate] Unix date.
     * @param {Number} [pagesize] 
     * @param {Number} [page] 
     * @param {String} [filter] #Discussion  The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.  An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.  Filters are immutable and non-expiring. An application can safely \"bake in\" any filters that are created, it is not necessary (or advisable) to create filters at runtime.  The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).  #Safety  Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.  Note that this does not mean that \"safe\" filter is mearly an \"unsafe\" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).  When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the \"safe\" data is the only accessible data it will be returned even in \"unsafe\" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.  #Built In Filters  The following filters are built in:  default, each type documents which fields are returned under the default filter (for example, answers). withbody, which is default plus the *.body fields none, which is empty total, which includes just .total  #Compatibility with V1.x  For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters. 
     * @param {String} [callback] All API responses are JSON, we do support JSONP with the callback query parameter. 
     * @param {module:api/DefaultApi~meTagsTagsTopQuestionsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/QuestionsInner>}
     */
    meTagsTagsTopQuestionsGet(tags, site, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'tags' is set
      if (tags === undefined || tags === null) {
        throw new Error("Missing the required parameter 'tags' when calling meTagsTagsTopQuestionsGet");
      }
      // verify the required parameter 'site' is set
      if (site === undefined || site === null) {
        throw new Error("Missing the required parameter 'site' when calling meTagsTagsTopQuestionsGet");
      }

      let pathParams = {
        'tags': tags
      };
      let queryParams = {
        'order': opts['order'],
        'max': opts['max'],
        'min': opts['min'],
        'sort': opts['sort'],
        'fromdate': opts['fromdate'],
        'todate': opts['todate'],
        'pagesize': opts['pagesize'],
        'page': opts['page'],
        'filter': opts['filter'],
        'callback': opts['callback'],
        'site': site
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [QuestionsInner];
      return this.apiClient.callApi(
        '/me/tags/{tags}/top-questions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the meTimelineGet operation.
     * @callback module:api/DefaultApi~meTimelineGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UserTimelineObjectsInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a subset of the actions the user identified by the passed access_token has taken on the site.   This method returns a list of user timeline objects. 
     * @param {String} site Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. \"stackoverflow.com\"), or a short form identified by api_site_parameter on the site object. 
     * @param {Object} opts Optional parameters
     * @param {Number} [fromdate] Unix date.
     * @param {Number} [todate] Unix date.
     * @param {Number} [pagesize] 
     * @param {Number} [page] 
     * @param {String} [filter] #Discussion  The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.  An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.  Filters are immutable and non-expiring. An application can safely \"bake in\" any filters that are created, it is not necessary (or advisable) to create filters at runtime.  The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).  #Safety  Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.  Note that this does not mean that \"safe\" filter is mearly an \"unsafe\" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).  When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the \"safe\" data is the only accessible data it will be returned even in \"unsafe\" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.  #Built In Filters  The following filters are built in:  default, each type documents which fields are returned under the default filter (for example, answers). withbody, which is default plus the *.body fields none, which is empty total, which includes just .total  #Compatibility with V1.x  For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters. 
     * @param {String} [callback] All API responses are JSON, we do support JSONP with the callback query parameter. 
     * @param {module:api/DefaultApi~meTimelineGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UserTimelineObjectsInner>}
     */
    meTimelineGet(site, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'site' is set
      if (site === undefined || site === null) {
        throw new Error("Missing the required parameter 'site' when calling meTimelineGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'fromdate': opts['fromdate'],
        'todate': opts['todate'],
        'pagesize': opts['pagesize'],
        'page': opts['page'],
        'filter': opts['filter'],
        'callback': opts['callback'],
        'site': site
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [UserTimelineObjectsInner];
      return this.apiClient.callApi(
        '/me/timeline', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the meTopAnswerTagsGet operation.
     * @callback module:api/DefaultApi~meTopAnswerTagsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TopTagObjectsInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the user identified by access_token's top 30 tags by answer score.   This method returns a list of top tag objects. 
     * @param {String} site Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. \"stackoverflow.com\"), or a short form identified by api_site_parameter on the site object. 
     * @param {Object} opts Optional parameters
     * @param {Number} [pagesize] 
     * @param {Number} [page] 
     * @param {String} [filter] #Discussion  The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.  An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.  Filters are immutable and non-expiring. An application can safely \"bake in\" any filters that are created, it is not necessary (or advisable) to create filters at runtime.  The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).  #Safety  Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.  Note that this does not mean that \"safe\" filter is mearly an \"unsafe\" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).  When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the \"safe\" data is the only accessible data it will be returned even in \"unsafe\" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.  #Built In Filters  The following filters are built in:  default, each type documents which fields are returned under the default filter (for example, answers). withbody, which is default plus the *.body fields none, which is empty total, which includes just .total  #Compatibility with V1.x  For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters. 
     * @param {String} [callback] All API responses are JSON, we do support JSONP with the callback query parameter. 
     * @param {module:api/DefaultApi~meTopAnswerTagsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TopTagObjectsInner>}
     */
    meTopAnswerTagsGet(site, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'site' is set
      if (site === undefined || site === null) {
        throw new Error("Missing the required parameter 'site' when calling meTopAnswerTagsGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'pagesize': opts['pagesize'],
        'page': opts['page'],
        'filter': opts['filter'],
        'callback': opts['callback'],
        'site': site
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [TopTagObjectsInner];
      return this.apiClient.callApi(
        '/me/top-answer-tags', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the meTopQuestionTagsGet operation.
     * @callback module:api/DefaultApi~meTopQuestionTagsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TopTagObjectsInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the user identified by access_token's top 30 tags by question score.   This method returns a list of top tag objects. 
     * @param {String} site Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. \"stackoverflow.com\"), or a short form identified by api_site_parameter on the site object. 
     * @param {Object} opts Optional parameters
     * @param {Number} [pagesize] 
     * @param {Number} [page] 
     * @param {String} [filter] #Discussion  The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.  An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.  Filters are immutable and non-expiring. An application can safely \"bake in\" any filters that are created, it is not necessary (or advisable) to create filters at runtime.  The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).  #Safety  Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.  Note that this does not mean that \"safe\" filter is mearly an \"unsafe\" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).  When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the \"safe\" data is the only accessible data it will be returned even in \"unsafe\" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.  #Built In Filters  The following filters are built in:  default, each type documents which fields are returned under the default filter (for example, answers). withbody, which is default plus the *.body fields none, which is empty total, which includes just .total  #Compatibility with V1.x  For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters. 
     * @param {String} [callback] All API responses are JSON, we do support JSONP with the callback query parameter. 
     * @param {module:api/DefaultApi~meTopQuestionTagsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TopTagObjectsInner>}
     */
    meTopQuestionTagsGet(site, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'site' is set
      if (site === undefined || site === null) {
        throw new Error("Missing the required parameter 'site' when calling meTopQuestionTagsGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'pagesize': opts['pagesize'],
        'page': opts['page'],
        'filter': opts['filter'],
        'callback': opts['callback'],
        'site': site
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [TopTagObjectsInner];
      return this.apiClient.callApi(
        '/me/top-question-tags', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the meWritePermissionsGet operation.
     * @callback module:api/DefaultApi~meWritePermissionsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/WritePermissionsInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the write permissions a user has via the api, given an access token.   The Stack Exchange API gives users the ability to create, edit, and delete certain types. This method returns whether the passed user is capable of performing those actions at all, as well as how many times a day they can.   This method does not consider the user's current quota (ie. if they've already exhausted it for today) nor any additional restrictions on write access, such as editing deleted comments.   This method returns a list of write_permissions. 
     * @param {String} site Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. \"stackoverflow.com\"), or a short form identified by api_site_parameter on the site object. 
     * @param {Object} opts Optional parameters
     * @param {Number} [pagesize] 
     * @param {Number} [page] 
     * @param {String} [filter] #Discussion  The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.  An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.  Filters are immutable and non-expiring. An application can safely \"bake in\" any filters that are created, it is not necessary (or advisable) to create filters at runtime.  The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).  #Safety  Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.  Note that this does not mean that \"safe\" filter is mearly an \"unsafe\" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).  When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the \"safe\" data is the only accessible data it will be returned even in \"unsafe\" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.  #Built In Filters  The following filters are built in:  default, each type documents which fields are returned under the default filter (for example, answers). withbody, which is default plus the *.body fields none, which is empty total, which includes just .total  #Compatibility with V1.x  For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters. 
     * @param {String} [callback] All API responses are JSON, we do support JSONP with the callback query parameter. 
     * @param {module:api/DefaultApi~meWritePermissionsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/WritePermissionsInner>}
     */
    meWritePermissionsGet(site, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'site' is set
      if (site === undefined || site === null) {
        throw new Error("Missing the required parameter 'site' when calling meWritePermissionsGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'pagesize': opts['pagesize'],
        'page': opts['page'],
        'filter': opts['filter'],
        'callback': opts['callback'],
        'site': site
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [WritePermissionsInner];
      return this.apiClient.callApi(
        '/me/write-permissions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the notificationsGet operation.
     * @callback module:api/DefaultApi~notificationsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/NotificationsInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a user's notifications.   This method requires an access_token, with a scope containing \"read_inbox\".   This method returns a list of notifications. 
     * @param {Object} opts Optional parameters
     * @param {Number} [pagesize] 
     * @param {Number} [page] 
     * @param {String} [filter] #Discussion  The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.  An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.  Filters are immutable and non-expiring. An application can safely \"bake in\" any filters that are created, it is not necessary (or advisable) to create filters at runtime.  The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).  #Safety  Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.  Note that this does not mean that \"safe\" filter is mearly an \"unsafe\" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).  When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the \"safe\" data is the only accessible data it will be returned even in \"unsafe\" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.  #Built In Filters  The following filters are built in:  default, each type documents which fields are returned under the default filter (for example, answers). withbody, which is default plus the *.body fields none, which is empty total, which includes just .total  #Compatibility with V1.x  For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters. 
     * @param {String} [callback] All API responses are JSON, we do support JSONP with the callback query parameter. 
     * @param {module:api/DefaultApi~notificationsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/NotificationsInner>}
     */
    notificationsGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'pagesize': opts['pagesize'],
        'page': opts['page'],
        'filter': opts['filter'],
        'callback': opts['callback']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [NotificationsInner];
      return this.apiClient.callApi(
        '/notifications', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the notificationsUnreadGet operation.
     * @callback module:api/DefaultApi~notificationsUnreadGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/NotificationsInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a user's unread notifications.   This method requires an access_token, with a scope containing \"read_inbox\".   This method returns a list of notifications. 
     * @param {Object} opts Optional parameters
     * @param {Number} [pagesize] 
     * @param {Number} [page] 
     * @param {String} [filter] #Discussion  The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.  An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.  Filters are immutable and non-expiring. An application can safely \"bake in\" any filters that are created, it is not necessary (or advisable) to create filters at runtime.  The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).  #Safety  Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.  Note that this does not mean that \"safe\" filter is mearly an \"unsafe\" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).  When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the \"safe\" data is the only accessible data it will be returned even in \"unsafe\" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.  #Built In Filters  The following filters are built in:  default, each type documents which fields are returned under the default filter (for example, answers). withbody, which is default plus the *.body fields none, which is empty total, which includes just .total  #Compatibility with V1.x  For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters. 
     * @param {String} [callback] All API responses are JSON, we do support JSONP with the callback query parameter. 
     * @param {module:api/DefaultApi~notificationsUnreadGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/NotificationsInner>}
     */
    notificationsUnreadGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'pagesize': opts['pagesize'],
        'page': opts['page'],
        'filter': opts['filter'],
        'callback': opts['callback']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [NotificationsInner];
      return this.apiClient.callApi(
        '/notifications/unread', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postsGet operation.
     * @callback module:api/DefaultApi~postsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PostsInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetches all posts (questions and answers) on the site.   In many ways this method is the union of /questions and /answers, returning both sets of data albeit only the common fields.   Most applications should use the question or answer specific methods, but /posts is available for those rare cases where any activity is of intereset. Examples of such queries would be: \"all posts on Jan. 1st 2011\" or \"top 10 posts by score of all time\".   The sorts accepted by this method operate on the follow fields of the post object:  - activity - last_activity_date  - creation - creation_date  - votes - score   activity is the default sort.    It is possible to create moderately complex queries using sort, min, max, fromdate, and todate.    This method returns a list of posts. 
     * @param {String} site Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. \"stackoverflow.com\"), or a short form identified by api_site_parameter on the site object. 
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [order] 
     * @param {String} [max] sort = activity => date sort = creation => date sort = votes => number 
     * @param {String} [min] sort = activity => date sort = creation => date sort = votes => number 
     * @param {module:model/String} [sort] 
     * @param {Number} [fromdate] Unix date.
     * @param {Number} [todate] Unix date.
     * @param {Number} [pagesize] 
     * @param {Number} [page] 
     * @param {String} [filter] #Discussion  The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.  An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.  Filters are immutable and non-expiring. An application can safely \"bake in\" any filters that are created, it is not necessary (or advisable) to create filters at runtime.  The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).  #Safety  Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.  Note that this does not mean that \"safe\" filter is mearly an \"unsafe\" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).  When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the \"safe\" data is the only accessible data it will be returned even in \"unsafe\" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.  #Built In Filters  The following filters are built in:  default, each type documents which fields are returned under the default filter (for example, answers). withbody, which is default plus the *.body fields none, which is empty total, which includes just .total  #Compatibility with V1.x  For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters. 
     * @param {String} [callback] All API responses are JSON, we do support JSONP with the callback query parameter. 
     * @param {module:api/DefaultApi~postsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PostsInner>}
     */
    postsGet(site, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'site' is set
      if (site === undefined || site === null) {
        throw new Error("Missing the required parameter 'site' when calling postsGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'order': opts['order'],
        'max': opts['max'],
        'min': opts['min'],
        'sort': opts['sort'],
        'fromdate': opts['fromdate'],
        'todate': opts['todate'],
        'pagesize': opts['pagesize'],
        'page': opts['page'],
        'filter': opts['filter'],
        'callback': opts['callback'],
        'site': site
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [PostsInner];
      return this.apiClient.callApi(
        '/posts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postsIdCommentsAddPost operation.
     * @callback module:api/DefaultApi~postsIdCommentsAddPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreatedComment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new comment.   Use an access_token with write_access to create a new comment on a post.   This method returns the created comment. 
     * @param {Number} id 
     * @param {String} site Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. \"stackoverflow.com\"), or a short form identified by api_site_parameter on the site object. 
     * @param {Object} opts Optional parameters
     * @param {String} [filter] #Discussion  The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.  An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.  Filters are immutable and non-expiring. An application can safely \"bake in\" any filters that are created, it is not necessary (or advisable) to create filters at runtime.  The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).  #Safety  Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.  Note that this does not mean that \"safe\" filter is mearly an \"unsafe\" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).  When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the \"safe\" data is the only accessible data it will be returned even in \"unsafe\" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.  #Built In Filters  The following filters are built in:  default, each type documents which fields are returned under the default filter (for example, answers). withbody, which is default plus the *.body fields none, which is empty total, which includes just .total  #Compatibility with V1.x  For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters. 
     * @param {String} [callback] All API responses are JSON, we do support JSONP with the callback query parameter. 
     * @param {String} [body] 
     * @param {Boolean} [preview] 
     * @param {module:api/DefaultApi~postsIdCommentsAddPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreatedComment}
     */
    postsIdCommentsAddPost(id, site, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling postsIdCommentsAddPost");
      }
      // verify the required parameter 'site' is set
      if (site === undefined || site === null) {
        throw new Error("Missing the required parameter 'site' when calling postsIdCommentsAddPost");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'filter': opts['filter'],
        'callback': opts['callback'],
        'site': site,
        'body': opts['body'],
        'preview': opts['preview']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = CreatedComment;
      return this.apiClient.callApi(
        '/posts/{id}/comments/add', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postsIdsCommentsGet operation.
     * @callback module:api/DefaultApi~postsIdsCommentsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CommentsInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the comments on the posts identified in ids, regardless of the type of the posts.   This method is meant for cases when you are unsure of the type of the post id provided. Generally, this would be due to obtaining the post id directly from a user.   {ids} can contain up to 100 semicolon delimited ids, to find ids programatically look for post_id, answer_id, or question_id on post, answer, and question objects respectively.   The sorts accepted by this method operate on the follow fields of the comment object:  - creation - creation_date  - votes - score   creation is the default sort.    It is possible to create moderately complex queries using sort, min, max, fromdate, and todate.    This method returns a list of comments. 
     * @param {String} ids Number list (semicolon delimited).
     * @param {String} site Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. \"stackoverflow.com\"), or a short form identified by api_site_parameter on the site object. 
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [order] 
     * @param {String} [max] sort = creation => date sort = votes => number 
     * @param {String} [min] sort = creation => date sort = votes => number 
     * @param {module:model/String} [sort] 
     * @param {Number} [fromdate] Unix date.
     * @param {Number} [todate] Unix date.
     * @param {Number} [pagesize] 
     * @param {Number} [page] 
     * @param {String} [filter] #Discussion  The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.  An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.  Filters are immutable and non-expiring. An application can safely \"bake in\" any filters that are created, it is not necessary (or advisable) to create filters at runtime.  The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).  #Safety  Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.  Note that this does not mean that \"safe\" filter is mearly an \"unsafe\" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).  When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the \"safe\" data is the only accessible data it will be returned even in \"unsafe\" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.  #Built In Filters  The following filters are built in:  default, each type documents which fields are returned under the default filter (for example, answers). withbody, which is default plus the *.body fields none, which is empty total, which includes just .total  #Compatibility with V1.x  For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters. 
     * @param {String} [callback] All API responses are JSON, we do support JSONP with the callback query parameter. 
     * @param {module:api/DefaultApi~postsIdsCommentsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CommentsInner>}
     */
    postsIdsCommentsGet(ids, site, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'ids' is set
      if (ids === undefined || ids === null) {
        throw new Error("Missing the required parameter 'ids' when calling postsIdsCommentsGet");
      }
      // verify the required parameter 'site' is set
      if (site === undefined || site === null) {
        throw new Error("Missing the required parameter 'site' when calling postsIdsCommentsGet");
      }

      let pathParams = {
        'ids': ids
      };
      let queryParams = {
        'order': opts['order'],
        'max': opts['max'],
        'min': opts['min'],
        'sort': opts['sort'],
        'fromdate': opts['fromdate'],
        'todate': opts['todate'],
        'pagesize': opts['pagesize'],
        'page': opts['page'],
        'filter': opts['filter'],
        'callback': opts['callback'],
        'site': site
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [CommentsInner];
      return this.apiClient.callApi(
        '/posts/{ids}/comments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postsIdsGet operation.
     * @callback module:api/DefaultApi~postsIdsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PostsInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetches a set of posts by ids.   This method is meant for grabbing an object when unsure whether an id identifies a question or an answer. This is most common with user entered data.   {ids} can contain up to 100 semicolon delimited ids, to find ids programatically look for post_id, answer_id, or question_id on post, answer, and question objects respectively.   The sorts accepted by this method operate on the follow fields of the post object:  - activity - last_activity_date  - creation - creation_date  - votes - score   activity is the default sort.    It is possible to create moderately complex queries using sort, min, max, fromdate, and todate.    This method returns a list of posts. 
     * @param {String} ids Number list (semicolon delimited).
     * @param {String} site Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. \"stackoverflow.com\"), or a short form identified by api_site_parameter on the site object. 
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [order] 
     * @param {String} [max] sort = activity => date sort = creation => date sort = votes => number 
     * @param {String} [min] sort = activity => date sort = creation => date sort = votes => number 
     * @param {module:model/String} [sort] 
     * @param {Number} [fromdate] Unix date.
     * @param {Number} [todate] Unix date.
     * @param {Number} [pagesize] 
     * @param {Number} [page] 
     * @param {String} [filter] #Discussion  The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.  An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.  Filters are immutable and non-expiring. An application can safely \"bake in\" any filters that are created, it is not necessary (or advisable) to create filters at runtime.  The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).  #Safety  Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.  Note that this does not mean that \"safe\" filter is mearly an \"unsafe\" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).  When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the \"safe\" data is the only accessible data it will be returned even in \"unsafe\" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.  #Built In Filters  The following filters are built in:  default, each type documents which fields are returned under the default filter (for example, answers). withbody, which is default plus the *.body fields none, which is empty total, which includes just .total  #Compatibility with V1.x  For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters. 
     * @param {String} [callback] All API responses are JSON, we do support JSONP with the callback query parameter. 
     * @param {module:api/DefaultApi~postsIdsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PostsInner>}
     */
    postsIdsGet(ids, site, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'ids' is set
      if (ids === undefined || ids === null) {
        throw new Error("Missing the required parameter 'ids' when calling postsIdsGet");
      }
      // verify the required parameter 'site' is set
      if (site === undefined || site === null) {
        throw new Error("Missing the required parameter 'site' when calling postsIdsGet");
      }

      let pathParams = {
        'ids': ids
      };
      let queryParams = {
        'order': opts['order'],
        'max': opts['max'],
        'min': opts['min'],
        'sort': opts['sort'],
        'fromdate': opts['fromdate'],
        'todate': opts['todate'],
        'pagesize': opts['pagesize'],
        'page': opts['page'],
        'filter': opts['filter'],
        'callback': opts['callback'],
        'site': site
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [PostsInner];
      return this.apiClient.callApi(
        '/posts/{ids}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postsIdsRevisionsGet operation.
     * @callback module:api/DefaultApi~postsIdsRevisionsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/RevisionsInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns edit revisions for the posts identified in ids.   {ids} can contain up to 100 semicolon delimited ids, to find ids programatically look for post_id, answer_id, or question_id on post, answer, and question objects respectively.   This method returns a list of revisions. 
     * @param {String} ids Number list (semicolon delimited).
     * @param {String} site Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. \"stackoverflow.com\"), or a short form identified by api_site_parameter on the site object. 
     * @param {Object} opts Optional parameters
     * @param {Number} [fromdate] Unix date.
     * @param {Number} [todate] Unix date.
     * @param {Number} [pagesize] 
     * @param {Number} [page] 
     * @param {String} [filter] #Discussion  The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.  An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.  Filters are immutable and non-expiring. An application can safely \"bake in\" any filters that are created, it is not necessary (or advisable) to create filters at runtime.  The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).  #Safety  Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.  Note that this does not mean that \"safe\" filter is mearly an \"unsafe\" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).  When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the \"safe\" data is the only accessible data it will be returned even in \"unsafe\" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.  #Built In Filters  The following filters are built in:  default, each type documents which fields are returned under the default filter (for example, answers). withbody, which is default plus the *.body fields none, which is empty total, which includes just .total  #Compatibility with V1.x  For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters. 
     * @param {String} [callback] All API responses are JSON, we do support JSONP with the callback query parameter. 
     * @param {module:api/DefaultApi~postsIdsRevisionsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/RevisionsInner>}
     */
    postsIdsRevisionsGet(ids, site, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'ids' is set
      if (ids === undefined || ids === null) {
        throw new Error("Missing the required parameter 'ids' when calling postsIdsRevisionsGet");
      }
      // verify the required parameter 'site' is set
      if (site === undefined || site === null) {
        throw new Error("Missing the required parameter 'site' when calling postsIdsRevisionsGet");
      }

      let pathParams = {
        'ids': ids
      };
      let queryParams = {
        'fromdate': opts['fromdate'],
        'todate': opts['todate'],
        'pagesize': opts['pagesize'],
        'page': opts['page'],
        'filter': opts['filter'],
        'callback': opts['callback'],
        'site': site
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [RevisionsInner];
      return this.apiClient.callApi(
        '/posts/{ids}/revisions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postsIdsSuggestedEditsGet operation.
     * @callback module:api/DefaultApi~postsIdsSuggestedEditsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/SuggestedEditsInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns suggsted edits on the posts identified in ids.    - creation - creation_date  - approval - approval_date  - rejection - rejection_date   creation is the default sort.    {ids} can contain up to 100 semicolon delimited ids, to find ids programatically look for post_id, answer_id, or question_id on post, answer, and question objects respectively.    This method returns a list of suggested-edits. 
     * @param {String} ids Number list (semicolon delimited).
     * @param {String} site Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. \"stackoverflow.com\"), or a short form identified by api_site_parameter on the site object. 
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [order] 
     * @param {String} [max] sort = creation => date sort = approval => date sort = rejection => date 
     * @param {String} [min] sort = creation => date sort = approval => date sort = rejection => date 
     * @param {module:model/String} [sort] 
     * @param {Number} [fromdate] Unix date.
     * @param {Number} [todate] Unix date.
     * @param {Number} [pagesize] 
     * @param {Number} [page] 
     * @param {String} [filter] #Discussion  The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.  An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.  Filters are immutable and non-expiring. An application can safely \"bake in\" any filters that are created, it is not necessary (or advisable) to create filters at runtime.  The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).  #Safety  Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.  Note that this does not mean that \"safe\" filter is mearly an \"unsafe\" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).  When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the \"safe\" data is the only accessible data it will be returned even in \"unsafe\" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.  #Built In Filters  The following filters are built in:  default, each type documents which fields are returned under the default filter (for example, answers). withbody, which is default plus the *.body fields none, which is empty total, which includes just .total  #Compatibility with V1.x  For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters. 
     * @param {String} [callback] All API responses are JSON, we do support JSONP with the callback query parameter. 
     * @param {module:api/DefaultApi~postsIdsSuggestedEditsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/SuggestedEditsInner>}
     */
    postsIdsSuggestedEditsGet(ids, site, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'ids' is set
      if (ids === undefined || ids === null) {
        throw new Error("Missing the required parameter 'ids' when calling postsIdsSuggestedEditsGet");
      }
      // verify the required parameter 'site' is set
      if (site === undefined || site === null) {
        throw new Error("Missing the required parameter 'site' when calling postsIdsSuggestedEditsGet");
      }

      let pathParams = {
        'ids': ids
      };
      let queryParams = {
        'order': opts['order'],
        'max': opts['max'],
        'min': opts['min'],
        'sort': opts['sort'],
        'fromdate': opts['fromdate'],
        'todate': opts['todate'],
        'pagesize': opts['pagesize'],
        'page': opts['page'],
        'filter': opts['filter'],
        'callback': opts['callback'],
        'site': site
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [SuggestedEditsInner];
      return this.apiClient.callApi(
        '/posts/{ids}/suggested-edits', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the privilegesGet operation.
     * @callback module:api/DefaultApi~privilegesGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PrivilegesInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the earnable privileges on a site.   Privileges define abilities a user can earn (via reputation) on any Stack Exchange site.   While fairly stable, over time they do change. New ones are introduced with new features, and the reputation requirements change as a site matures.   This method returns a list of privileges. 
     * @param {String} site Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. \"stackoverflow.com\"), or a short form identified by api_site_parameter on the site object. 
     * @param {Object} opts Optional parameters
     * @param {Number} [pagesize] 
     * @param {Number} [page] 
     * @param {String} [filter] #Discussion  The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.  An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.  Filters are immutable and non-expiring. An application can safely \"bake in\" any filters that are created, it is not necessary (or advisable) to create filters at runtime.  The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).  #Safety  Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.  Note that this does not mean that \"safe\" filter is mearly an \"unsafe\" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).  When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the \"safe\" data is the only accessible data it will be returned even in \"unsafe\" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.  #Built In Filters  The following filters are built in:  default, each type documents which fields are returned under the default filter (for example, answers). withbody, which is default plus the *.body fields none, which is empty total, which includes just .total  #Compatibility with V1.x  For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters. 
     * @param {String} [callback] All API responses are JSON, we do support JSONP with the callback query parameter. 
     * @param {module:api/DefaultApi~privilegesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PrivilegesInner>}
     */
    privilegesGet(site, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'site' is set
      if (site === undefined || site === null) {
        throw new Error("Missing the required parameter 'site' when calling privilegesGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'pagesize': opts['pagesize'],
        'page': opts['page'],
        'filter': opts['filter'],
        'callback': opts['callback'],
        'site': site
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [PrivilegesInner];
      return this.apiClient.callApi(
        '/privileges', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the questionsFeaturedGet operation.
     * @callback module:api/DefaultApi~questionsFeaturedGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/QuestionsInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns all the questions with active bounties in the system.   The sorts accepted by this method operate on the follow fields of the question object:  - activity - last_activity_date  - creation - creation_date  - votes - score   activity is the default sort.    It is possible to create moderately complex queries using sort, min, max, fromdate, and todate.    This method returns a list of questions. 
     * @param {String} site Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. \"stackoverflow.com\"), or a short form identified by api_site_parameter on the site object. 
     * @param {Object} opts Optional parameters
     * @param {String} [tagged] String list (semicolon delimited).
     * @param {module:model/String} [order] 
     * @param {String} [max] sort = activity => date sort = creation => date sort = votes => number 
     * @param {String} [min] sort = activity => date sort = creation => date sort = votes => number 
     * @param {module:model/String} [sort] 
     * @param {Number} [fromdate] Unix date.
     * @param {Number} [todate] Unix date.
     * @param {Number} [pagesize] 
     * @param {Number} [page] 
     * @param {String} [filter] #Discussion  The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.  An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.  Filters are immutable and non-expiring. An application can safely \"bake in\" any filters that are created, it is not necessary (or advisable) to create filters at runtime.  The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).  #Safety  Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.  Note that this does not mean that \"safe\" filter is mearly an \"unsafe\" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).  When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the \"safe\" data is the only accessible data it will be returned even in \"unsafe\" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.  #Built In Filters  The following filters are built in:  default, each type documents which fields are returned under the default filter (for example, answers). withbody, which is default plus the *.body fields none, which is empty total, which includes just .total  #Compatibility with V1.x  For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters. 
     * @param {String} [callback] All API responses are JSON, we do support JSONP with the callback query parameter. 
     * @param {module:api/DefaultApi~questionsFeaturedGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/QuestionsInner>}
     */
    questionsFeaturedGet(site, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'site' is set
      if (site === undefined || site === null) {
        throw new Error("Missing the required parameter 'site' when calling questionsFeaturedGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'tagged': opts['tagged'],
        'order': opts['order'],
        'max': opts['max'],
        'min': opts['min'],
        'sort': opts['sort'],
        'fromdate': opts['fromdate'],
        'todate': opts['todate'],
        'pagesize': opts['pagesize'],
        'page': opts['page'],
        'filter': opts['filter'],
        'callback': opts['callback'],
        'site': site
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [QuestionsInner];
      return this.apiClient.callApi(
        '/questions/featured', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the questionsGet operation.
     * @callback module:api/DefaultApi~questionsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/QuestionsInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets all the questions on the site.   This method allows you make fairly flexible queries across the entire corpus of questions on a site. For example, getting all questions asked in the the week of Jan 1st 2011 with scores of 10 or more is a single query with parameters sort=votes&min=10&fromdate=1293840000&todate=1294444800.   To constrain questions returned to those with a set of tags, use the tagged parameter with a semi-colon delimited list of tags. This is an and contraint, passing tagged=c;java will return only those questions with both tags. As such, passing more than 5 tags will always return zero results.   The sorts accepted by this method operate on the follow fields of the question object:  - activity - last_activity_date  - creation - creation_date  - votes - score  - hot - by the formula ordering the hot tab Does not accept min or max  - week - by the formula ordering the week tab Does not accept min or max  - month - by the formula ordering the month tab Does not accept min or max   activity is the default sort.    It is possible to create moderately complex queries using sort, min, max, fromdate, and todate.    This method returns a list of questions. 
     * @param {String} site Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. \"stackoverflow.com\"), or a short form identified by api_site_parameter on the site object. 
     * @param {Object} opts Optional parameters
     * @param {String} [tagged] String list (semicolon delimited).
     * @param {module:model/String} [order] 
     * @param {String} [max] sort = activity => date sort = creation => date sort = votes => number sort = hot => none sort = week => none sort = month => none sort = relevance => none 
     * @param {String} [min] sort = activity => date sort = creation => date sort = votes => number sort = hot => none sort = week => none sort = month => none sort = relevance => none 
     * @param {module:model/String} [sort] 
     * @param {Number} [fromdate] Unix date.
     * @param {Number} [todate] Unix date.
     * @param {Number} [pagesize] 
     * @param {Number} [page] 
     * @param {String} [filter] #Discussion  The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.  An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.  Filters are immutable and non-expiring. An application can safely \"bake in\" any filters that are created, it is not necessary (or advisable) to create filters at runtime.  The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).  #Safety  Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.  Note that this does not mean that \"safe\" filter is mearly an \"unsafe\" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).  When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the \"safe\" data is the only accessible data it will be returned even in \"unsafe\" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.  #Built In Filters  The following filters are built in:  default, each type documents which fields are returned under the default filter (for example, answers). withbody, which is default plus the *.body fields none, which is empty total, which includes just .total  #Compatibility with V1.x  For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters. 
     * @param {String} [callback] All API responses are JSON, we do support JSONP with the callback query parameter. 
     * @param {module:api/DefaultApi~questionsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/QuestionsInner>}
     */
    questionsGet(site, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'site' is set
      if (site === undefined || site === null) {
        throw new Error("Missing the required parameter 'site' when calling questionsGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'tagged': opts['tagged'],
        'order': opts['order'],
        'max': opts['max'],
        'min': opts['min'],
        'sort': opts['sort'],
        'fromdate': opts['fromdate'],
        'todate': opts['todate'],
        'pagesize': opts['pagesize'],
        'page': opts['page'],
        'filter': opts['filter'],
        'callback': opts['callback'],
        'site': site
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [QuestionsInner];
      return this.apiClient.callApi(
        '/questions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the questionsIdsAnswersGet operation.
     * @callback module:api/DefaultApi~questionsIdsAnswersGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/AnswersInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the answers to a set of questions identified in id.   This method is most useful if you have a set of interesting questions, and you wish to obtain all of their answers at once or if you are polling for new or updates answers (in conjunction with sort=activity).   {ids} can contain up to 100 semicolon delimited ids, to find ids programatically look for question_id on question objects.   The sorts accepted by this method operate on the follow fields of the answer object:  - activity - last_activity_date  - creation - creation_date  - votes - score   activity is the default sort.    It is possible to create moderately complex queries using sort, min, max, fromdate, and todate.    This method returns a list of answers. 
     * @param {String} ids Number list (semicolon delimited).
     * @param {String} site Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. \"stackoverflow.com\"), or a short form identified by api_site_parameter on the site object. 
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [order] 
     * @param {String} [max] sort = activity => date sort = creation => date sort = votes => number 
     * @param {String} [min] sort = activity => date sort = creation => date sort = votes => number 
     * @param {module:model/String} [sort] 
     * @param {Number} [fromdate] Unix date.
     * @param {Number} [todate] Unix date.
     * @param {Number} [pagesize] 
     * @param {Number} [page] 
     * @param {String} [filter] #Discussion  The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.  An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.  Filters are immutable and non-expiring. An application can safely \"bake in\" any filters that are created, it is not necessary (or advisable) to create filters at runtime.  The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).  #Safety  Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.  Note that this does not mean that \"safe\" filter is mearly an \"unsafe\" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).  When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the \"safe\" data is the only accessible data it will be returned even in \"unsafe\" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.  #Built In Filters  The following filters are built in:  default, each type documents which fields are returned under the default filter (for example, answers). withbody, which is default plus the *.body fields none, which is empty total, which includes just .total  #Compatibility with V1.x  For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters. 
     * @param {String} [callback] All API responses are JSON, we do support JSONP with the callback query parameter. 
     * @param {module:api/DefaultApi~questionsIdsAnswersGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/AnswersInner>}
     */
    questionsIdsAnswersGet(ids, site, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'ids' is set
      if (ids === undefined || ids === null) {
        throw new Error("Missing the required parameter 'ids' when calling questionsIdsAnswersGet");
      }
      // verify the required parameter 'site' is set
      if (site === undefined || site === null) {
        throw new Error("Missing the required parameter 'site' when calling questionsIdsAnswersGet");
      }

      let pathParams = {
        'ids': ids
      };
      let queryParams = {
        'order': opts['order'],
        'max': opts['max'],
        'min': opts['min'],
        'sort': opts['sort'],
        'fromdate': opts['fromdate'],
        'todate': opts['todate'],
        'pagesize': opts['pagesize'],
        'page': opts['page'],
        'filter': opts['filter'],
        'callback': opts['callback'],
        'site': site
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [AnswersInner];
      return this.apiClient.callApi(
        '/questions/{ids}/answers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the questionsIdsCommentsGet operation.
     * @callback module:api/DefaultApi~questionsIdsCommentsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CommentsInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the comments on a question.   If you know that you have an question id and need the comments, use this method. If you know you have a answer id, use /answers/{ids}/comments. If you are unsure, use /posts/{ids}/comments.   {ids} can contain up to 100 semicolon delimited ids, to find ids programatically look for question_id on question objects.   The sorts accepted by this method operate on the follow fields of the comment object:  - creation - creation_date  - votes - score   creation is the default sort.    It is possible to create moderately complex queries using sort, min, max, fromdate, and todate.    This method returns a list of comments. 
     * @param {String} ids Number list (semicolon delimited).
     * @param {String} site Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. \"stackoverflow.com\"), or a short form identified by api_site_parameter on the site object. 
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [order] 
     * @param {String} [max] sort = creation => date sort = votes => number 
     * @param {String} [min] sort = creation => date sort = votes => number 
     * @param {module:model/String} [sort] 
     * @param {Number} [fromdate] Unix date.
     * @param {Number} [todate] Unix date.
     * @param {Number} [pagesize] 
     * @param {Number} [page] 
     * @param {String} [filter] #Discussion  The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.  An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.  Filters are immutable and non-expiring. An application can safely \"bake in\" any filters that are created, it is not necessary (or advisable) to create filters at runtime.  The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).  #Safety  Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.  Note that this does not mean that \"safe\" filter is mearly an \"unsafe\" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).  When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the \"safe\" data is the only accessible data it will be returned even in \"unsafe\" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.  #Built In Filters  The following filters are built in:  default, each type documents which fields are returned under the default filter (for example, answers). withbody, which is default plus the *.body fields none, which is empty total, which includes just .total  #Compatibility with V1.x  For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters. 
     * @param {String} [callback] All API responses are JSON, we do support JSONP with the callback query parameter. 
     * @param {module:api/DefaultApi~questionsIdsCommentsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CommentsInner>}
     */
    questionsIdsCommentsGet(ids, site, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'ids' is set
      if (ids === undefined || ids === null) {
        throw new Error("Missing the required parameter 'ids' when calling questionsIdsCommentsGet");
      }
      // verify the required parameter 'site' is set
      if (site === undefined || site === null) {
        throw new Error("Missing the required parameter 'site' when calling questionsIdsCommentsGet");
      }

      let pathParams = {
        'ids': ids
      };
      let queryParams = {
        'order': opts['order'],
        'max': opts['max'],
        'min': opts['min'],
        'sort': opts['sort'],
        'fromdate': opts['fromdate'],
        'todate': opts['todate'],
        'pagesize': opts['pagesize'],
        'page': opts['page'],
        'filter': opts['filter'],
        'callback': opts['callback'],
        'site': site
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [CommentsInner];
      return this.apiClient.callApi(
        '/questions/{ids}/comments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the questionsIdsGet operation.
     * @callback module:api/DefaultApi~questionsIdsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/QuestionsInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the questions identified in {ids}.   This is most useful for fetching fresh data when maintaining a cache of question ids, or polling for changes.   {ids} can contain up to 100 semicolon delimited ids, to find ids programatically look for question_id on question objects.   The sorts accepted by this method operate on the follow fields of the question object:  - activity - last_activity_date  - creation - creation_date  - votes - score   activity is the default sort.    It is possible to create moderately complex queries using sort, min, max, fromdate, and todate.    This method returns a list of questions. 
     * @param {String} ids Number list (semicolon delimited).
     * @param {String} site Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. \"stackoverflow.com\"), or a short form identified by api_site_parameter on the site object. 
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [order] 
     * @param {String} [max] sort = activity => date sort = creation => date sort = votes => number 
     * @param {String} [min] sort = activity => date sort = creation => date sort = votes => number 
     * @param {module:model/String} [sort] 
     * @param {Number} [fromdate] Unix date.
     * @param {Number} [todate] Unix date.
     * @param {Number} [pagesize] 
     * @param {Number} [page] 
     * @param {String} [filter] #Discussion  The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.  An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.  Filters are immutable and non-expiring. An application can safely \"bake in\" any filters that are created, it is not necessary (or advisable) to create filters at runtime.  The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).  #Safety  Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.  Note that this does not mean that \"safe\" filter is mearly an \"unsafe\" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).  When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the \"safe\" data is the only accessible data it will be returned even in \"unsafe\" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.  #Built In Filters  The following filters are built in:  default, each type documents which fields are returned under the default filter (for example, answers). withbody, which is default plus the *.body fields none, which is empty total, which includes just .total  #Compatibility with V1.x  For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters. 
     * @param {String} [callback] All API responses are JSON, we do support JSONP with the callback query parameter. 
     * @param {module:api/DefaultApi~questionsIdsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/QuestionsInner>}
     */
    questionsIdsGet(ids, site, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'ids' is set
      if (ids === undefined || ids === null) {
        throw new Error("Missing the required parameter 'ids' when calling questionsIdsGet");
      }
      // verify the required parameter 'site' is set
      if (site === undefined || site === null) {
        throw new Error("Missing the required parameter 'site' when calling questionsIdsGet");
      }

      let pathParams = {
        'ids': ids
      };
      let queryParams = {
        'order': opts['order'],
        'max': opts['max'],
        'min': opts['min'],
        'sort': opts['sort'],
        'fromdate': opts['fromdate'],
        'todate': opts['todate'],
        'pagesize': opts['pagesize'],
        'page': opts['page'],
        'filter': opts['filter'],
        'callback': opts['callback'],
        'site': site
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [QuestionsInner];
      return this.apiClient.callApi(
        '/questions/{ids}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the questionsIdsLinkedGet operation.
     * @callback module:api/DefaultApi~questionsIdsLinkedGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/QuestionsInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets questions which link to those questions identified in {ids}.   This method only considers questions that are linked within a site, and will never return questions from another Stack Exchange site.   A question is considered \"linked\" when it explicitly includes a hyperlink to another question, there are no other heuristics.   {ids} can contain up to 100 semicolon delimited ids, to find ids programatically look for question_id on question objects.   The sorts accepted by this method operate on the follow fields of the question object:  - activity - last_activity_date  - creation - creation_date  - votes - score  - rank - a priority sort by site applies, subject to change at any time Does not accept min or max   activity is the default sort.    It is possible to create moderately complex queries using sort, min, max, fromdate, and todate.    This method returns a list of questions. 
     * @param {String} ids Number list (semicolon delimited).
     * @param {String} site Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. \"stackoverflow.com\"), or a short form identified by api_site_parameter on the site object. 
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [order] 
     * @param {String} [max] sort = activity => date sort = creation => date sort = votes => number sort = rank => none 
     * @param {String} [min] sort = activity => date sort = creation => date sort = votes => number sort = rank => none 
     * @param {module:model/String} [sort] 
     * @param {Number} [fromdate] Unix date.
     * @param {Number} [todate] Unix date.
     * @param {Number} [pagesize] 
     * @param {Number} [page] 
     * @param {String} [filter] #Discussion  The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.  An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.  Filters are immutable and non-expiring. An application can safely \"bake in\" any filters that are created, it is not necessary (or advisable) to create filters at runtime.  The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).  #Safety  Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.  Note that this does not mean that \"safe\" filter is mearly an \"unsafe\" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).  When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the \"safe\" data is the only accessible data it will be returned even in \"unsafe\" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.  #Built In Filters  The following filters are built in:  default, each type documents which fields are returned under the default filter (for example, answers). withbody, which is default plus the *.body fields none, which is empty total, which includes just .total  #Compatibility with V1.x  For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters. 
     * @param {String} [callback] All API responses are JSON, we do support JSONP with the callback query parameter. 
     * @param {module:api/DefaultApi~questionsIdsLinkedGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/QuestionsInner>}
     */
    questionsIdsLinkedGet(ids, site, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'ids' is set
      if (ids === undefined || ids === null) {
        throw new Error("Missing the required parameter 'ids' when calling questionsIdsLinkedGet");
      }
      // verify the required parameter 'site' is set
      if (site === undefined || site === null) {
        throw new Error("Missing the required parameter 'site' when calling questionsIdsLinkedGet");
      }

      let pathParams = {
        'ids': ids
      };
      let queryParams = {
        'order': opts['order'],
        'max': opts['max'],
        'min': opts['min'],
        'sort': opts['sort'],
        'fromdate': opts['fromdate'],
        'todate': opts['todate'],
        'pagesize': opts['pagesize'],
        'page': opts['page'],
        'filter': opts['filter'],
        'callback': opts['callback'],
        'site': site
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [QuestionsInner];
      return this.apiClient.callApi(
        '/questions/{ids}/linked', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the questionsIdsRelatedGet operation.
     * @callback module:api/DefaultApi~questionsIdsRelatedGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/QuestionsInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns questions that the site considers related to those identified in {ids}.   The algorithm for determining if questions are related is not documented, and subject to change at any time. Futhermore, these values are very heavily cached, and may not update immediately after a question has been editted. It is also not guaranteed that a question will be considered related to any number (even non-zero) of questions, and a consumer should be able to handle a variable number of returned questions.   {ids} can contain up to 100 semicolon delimited ids, to find ids programatically look for question_id on question objects.   The sorts accepted by this method operate on the follow fields of the question object:  - activity - last_activity_date  - creation - creation_date  - votes - score  - rank - a priority sort by site applies, subject to change at any time Does not accept min or max   activity is the default sort.    It is possible to create moderately complex queries using sort, min, max, fromdate, and todate.    This method returns a list of questions. 
     * @param {String} ids Number list (semicolon delimited).
     * @param {String} site Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. \"stackoverflow.com\"), or a short form identified by api_site_parameter on the site object. 
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [order] 
     * @param {String} [max] sort = activity => date sort = creation => date sort = votes => number sort = rank => none 
     * @param {String} [min] sort = activity => date sort = creation => date sort = votes => number sort = rank => none 
     * @param {module:model/String} [sort] 
     * @param {Number} [fromdate] Unix date.
     * @param {Number} [todate] Unix date.
     * @param {Number} [pagesize] 
     * @param {Number} [page] 
     * @param {String} [filter] #Discussion  The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.  An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.  Filters are immutable and non-expiring. An application can safely \"bake in\" any filters that are created, it is not necessary (or advisable) to create filters at runtime.  The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).  #Safety  Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.  Note that this does not mean that \"safe\" filter is mearly an \"unsafe\" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).  When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the \"safe\" data is the only accessible data it will be returned even in \"unsafe\" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.  #Built In Filters  The following filters are built in:  default, each type documents which fields are returned under the default filter (for example, answers). withbody, which is default plus the *.body fields none, which is empty total, which includes just .total  #Compatibility with V1.x  For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters. 
     * @param {String} [callback] All API responses are JSON, we do support JSONP with the callback query parameter. 
     * @param {module:api/DefaultApi~questionsIdsRelatedGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/QuestionsInner>}
     */
    questionsIdsRelatedGet(ids, site, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'ids' is set
      if (ids === undefined || ids === null) {
        throw new Error("Missing the required parameter 'ids' when calling questionsIdsRelatedGet");
      }
      // verify the required parameter 'site' is set
      if (site === undefined || site === null) {
        throw new Error("Missing the required parameter 'site' when calling questionsIdsRelatedGet");
      }

      let pathParams = {
        'ids': ids
      };
      let queryParams = {
        'order': opts['order'],
        'max': opts['max'],
        'min': opts['min'],
        'sort': opts['sort'],
        'fromdate': opts['fromdate'],
        'todate': opts['todate'],
        'pagesize': opts['pagesize'],
        'page': opts['page'],
        'filter': opts['filter'],
        'callback': opts['callback'],
        'site': site
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [QuestionsInner];
      return this.apiClient.callApi(
        '/questions/{ids}/related', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the questionsIdsTimelineGet operation.
     * @callback module:api/DefaultApi~questionsIdsTimelineGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/QuestionTimelineEventsInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a subset of the events that have happened to the questions identified in id.   This provides data similar to that found on a question's timeline page.   Voting data is scrubbed to deter inferencing of voter identity.   {ids} can contain up to 100 semicolon delimited ids, to find ids programatically look for question_id on question objects.   This method returns a list of question timeline events. 
     * @param {String} ids Number list (semicolon delimited).
     * @param {String} site Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. \"stackoverflow.com\"), or a short form identified by api_site_parameter on the site object. 
     * @param {Object} opts Optional parameters
     * @param {Number} [fromdate] Unix date.
     * @param {Number} [todate] Unix date.
     * @param {Number} [pagesize] 
     * @param {Number} [page] 
     * @param {String} [filter] #Discussion  The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.  An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.  Filters are immutable and non-expiring. An application can safely \"bake in\" any filters that are created, it is not necessary (or advisable) to create filters at runtime.  The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).  #Safety  Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.  Note that this does not mean that \"safe\" filter is mearly an \"unsafe\" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).  When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the \"safe\" data is the only accessible data it will be returned even in \"unsafe\" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.  #Built In Filters  The following filters are built in:  default, each type documents which fields are returned under the default filter (for example, answers). withbody, which is default plus the *.body fields none, which is empty total, which includes just .total  #Compatibility with V1.x  For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters. 
     * @param {String} [callback] All API responses are JSON, we do support JSONP with the callback query parameter. 
     * @param {module:api/DefaultApi~questionsIdsTimelineGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/QuestionTimelineEventsInner>}
     */
    questionsIdsTimelineGet(ids, site, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'ids' is set
      if (ids === undefined || ids === null) {
        throw new Error("Missing the required parameter 'ids' when calling questionsIdsTimelineGet");
      }
      // verify the required parameter 'site' is set
      if (site === undefined || site === null) {
        throw new Error("Missing the required parameter 'site' when calling questionsIdsTimelineGet");
      }

      let pathParams = {
        'ids': ids
      };
      let queryParams = {
        'fromdate': opts['fromdate'],
        'todate': opts['todate'],
        'pagesize': opts['pagesize'],
        'page': opts['page'],
        'filter': opts['filter'],
        'callback': opts['callback'],
        'site': site
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [QuestionTimelineEventsInner];
      return this.apiClient.callApi(
        '/questions/{ids}/timeline', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the questionsNoAnswersGet operation.
     * @callback module:api/DefaultApi~questionsNoAnswersGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/QuestionsInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns questions which have received no answers.   Compare with /questions/unanswered which mearly returns questions that the sites consider insufficiently well answered.   This method corresponds roughly with the this site tab.   To constrain questions returned to those with a set of tags, use the tagged parameter with a semi-colon delimited list of tags. This is an and contraint, passing tagged=c;java will return only those questions with both tags. As such, passing more than 5 tags will always return zero results.   The sorts accepted by this method operate on the follow fields of the question object:  - activity - last_activity_date  - creation - creation_date  - votes - score   activity is the default sort.    It is possible to create moderately complex queries using sort, min, max, fromdate, and todate.    This method returns a list of questions. 
     * @param {String} site Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. \"stackoverflow.com\"), or a short form identified by api_site_parameter on the site object. 
     * @param {Object} opts Optional parameters
     * @param {String} [tagged] String list (semicolon delimited).
     * @param {module:model/String} [order] 
     * @param {String} [max] sort = activity => date sort = creation => date sort = votes => number 
     * @param {String} [min] sort = activity => date sort = creation => date sort = votes => number 
     * @param {module:model/String} [sort] 
     * @param {Number} [fromdate] Unix date.
     * @param {Number} [todate] Unix date.
     * @param {Number} [pagesize] 
     * @param {Number} [page] 
     * @param {String} [filter] #Discussion  The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.  An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.  Filters are immutable and non-expiring. An application can safely \"bake in\" any filters that are created, it is not necessary (or advisable) to create filters at runtime.  The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).  #Safety  Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.  Note that this does not mean that \"safe\" filter is mearly an \"unsafe\" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).  When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the \"safe\" data is the only accessible data it will be returned even in \"unsafe\" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.  #Built In Filters  The following filters are built in:  default, each type documents which fields are returned under the default filter (for example, answers). withbody, which is default plus the *.body fields none, which is empty total, which includes just .total  #Compatibility with V1.x  For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters. 
     * @param {String} [callback] All API responses are JSON, we do support JSONP with the callback query parameter. 
     * @param {module:api/DefaultApi~questionsNoAnswersGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/QuestionsInner>}
     */
    questionsNoAnswersGet(site, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'site' is set
      if (site === undefined || site === null) {
        throw new Error("Missing the required parameter 'site' when calling questionsNoAnswersGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'tagged': opts['tagged'],
        'order': opts['order'],
        'max': opts['max'],
        'min': opts['min'],
        'sort': opts['sort'],
        'fromdate': opts['fromdate'],
        'todate': opts['todate'],
        'pagesize': opts['pagesize'],
        'page': opts['page'],
        'filter': opts['filter'],
        'callback': opts['callback'],
        'site': site
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [QuestionsInner];
      return this.apiClient.callApi(
        '/questions/no-answers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the questionsUnansweredGet operation.
     * @callback module:api/DefaultApi~questionsUnansweredGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/QuestionsInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns questions the site considers to be unanswered.   Note that just because a question has an answer, that does not mean it is considered answered. While the rules are subject to change, at this time a question must have at least one upvoted answer to be considered answered.   To constrain questions returned to those with a set of tags, use the tagged parameter with a semi-colon delimited list of tags. This is an and contraint, passing tagged=c;java will return only those questions with both tags. As such, passing more than 5 tags will always return zero results.   Compare with /questions/no-answers.   This method corresponds roughly with the unanswered tab.   The sorts accepted by this method operate on the follow fields of the question object:  - activity - last_activity_date  - creation - creation_date  - votes - score   activity is the default sort.    It is possible to create moderately complex queries using sort, min, max, fromdate, and todate.    This method returns a list of questions. 
     * @param {String} site Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. \"stackoverflow.com\"), or a short form identified by api_site_parameter on the site object. 
     * @param {Object} opts Optional parameters
     * @param {String} [tagged] String list (semicolon delimited).
     * @param {module:model/String} [order] 
     * @param {String} [max] sort = activity => date sort = creation => date sort = votes => number 
     * @param {String} [min] sort = activity => date sort = creation => date sort = votes => number 
     * @param {module:model/String} [sort] 
     * @param {Number} [fromdate] Unix date.
     * @param {Number} [todate] Unix date.
     * @param {Number} [pagesize] 
     * @param {Number} [page] 
     * @param {String} [filter] #Discussion  The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.  An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.  Filters are immutable and non-expiring. An application can safely \"bake in\" any filters that are created, it is not necessary (or advisable) to create filters at runtime.  The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).  #Safety  Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.  Note that this does not mean that \"safe\" filter is mearly an \"unsafe\" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).  When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the \"safe\" data is the only accessible data it will be returned even in \"unsafe\" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.  #Built In Filters  The following filters are built in:  default, each type documents which fields are returned under the default filter (for example, answers). withbody, which is default plus the *.body fields none, which is empty total, which includes just .total  #Compatibility with V1.x  For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters. 
     * @param {String} [callback] All API responses are JSON, we do support JSONP with the callback query parameter. 
     * @param {module:api/DefaultApi~questionsUnansweredGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/QuestionsInner>}
     */
    questionsUnansweredGet(site, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'site' is set
      if (site === undefined || site === null) {
        throw new Error("Missing the required parameter 'site' when calling questionsUnansweredGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'tagged': opts['tagged'],
        'order': opts['order'],
        'max': opts['max'],
        'min': opts['min'],
        'sort': opts['sort'],
        'fromdate': opts['fromdate'],
        'todate': opts['todate'],
        'pagesize': opts['pagesize'],
        'page': opts['page'],
        'filter': opts['filter'],
        'callback': opts['callback'],
        'site': site
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [QuestionsInner];
      return this.apiClient.callApi(
        '/questions/unanswered', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the revisionsIdsGet operation.
     * @callback module:api/DefaultApi~revisionsIdsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/RevisionsInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns edit revisions identified by ids in {ids}.   {ids} can contain up to 20 semicolon delimited ids, to find ids programatically look for revision_guid on revision objects. Note that unlike most other id types in the API, revision_guid is a string.   This method returns a list of revisions. 
     * @param {String} ids Guid list (semicolon delimited).
     * @param {String} site Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. \"stackoverflow.com\"), or a short form identified by api_site_parameter on the site object. 
     * @param {Object} opts Optional parameters
     * @param {Number} [fromdate] Unix date.
     * @param {Number} [todate] Unix date.
     * @param {Number} [pagesize] 
     * @param {Number} [page] 
     * @param {String} [filter] #Discussion  The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.  An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.  Filters are immutable and non-expiring. An application can safely \"bake in\" any filters that are created, it is not necessary (or advisable) to create filters at runtime.  The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).  #Safety  Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.  Note that this does not mean that \"safe\" filter is mearly an \"unsafe\" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).  When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the \"safe\" data is the only accessible data it will be returned even in \"unsafe\" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.  #Built In Filters  The following filters are built in:  default, each type documents which fields are returned under the default filter (for example, answers). withbody, which is default plus the *.body fields none, which is empty total, which includes just .total  #Compatibility with V1.x  For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters. 
     * @param {String} [callback] All API responses are JSON, we do support JSONP with the callback query parameter. 
     * @param {module:api/DefaultApi~revisionsIdsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/RevisionsInner>}
     */
    revisionsIdsGet(ids, site, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'ids' is set
      if (ids === undefined || ids === null) {
        throw new Error("Missing the required parameter 'ids' when calling revisionsIdsGet");
      }
      // verify the required parameter 'site' is set
      if (site === undefined || site === null) {
        throw new Error("Missing the required parameter 'site' when calling revisionsIdsGet");
      }

      let pathParams = {
        'ids': ids
      };
      let queryParams = {
        'fromdate': opts['fromdate'],
        'todate': opts['todate'],
        'pagesize': opts['pagesize'],
        'page': opts['page'],
        'filter': opts['filter'],
        'callback': opts['callback'],
        'site': site
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [RevisionsInner];
      return this.apiClient.callApi(
        '/revisions/{ids}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the searchAdvancedGet operation.
     * @callback module:api/DefaultApi~searchAdvancedGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/QuestionsInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Searches a site for any questions which fit the given criteria.   Search criteria are expressed using the following parameters:   - q - a free form text parameter, will match all question properties based on an undocumented algorithm.  - accepted - true to return only questions with accepted answers, false to return only those without. Omit to elide constraint.  - answers - the minimum number of answers returned questions must have.  - body - text which must appear in returned questions' bodies.  - closed - true to return only closed questions, false to return only open ones. Omit to elide constraint.  - migrated - true to return only questions migrated away from a site, false to return only those not. Omit to elide constraint.  - notice - true to return only questions with post notices, false to return only those without. Omit to elide constraint.  - nottagged - a semicolon delimited list of tags, none of which will be present on returned questions.  - tagged - a semicolon delimited list of tags, of which at least one will be present on all returned questions.  - title - text which must appear in returned questions' titles.  - user - the id of the user who must own the questions returned.  - url - a url which must be contained in a post, may include a wildcard.  - views - the minimum number of views returned questions must have.  - wiki - true to return only community wiki questions, false to return only non-community wiki ones. Omit to elide constraint.     At least one additional parameter must be set if nottagged is set, for performance reasons.   The sorts accepted by this method operate on the follow fields of the question object:  - activity - last_activity_date  - creation - creation_date  - votes - score  - relevance - matches the relevance tab on the site itself Does not accept min or max   activity is the default sort.    It is possible to create moderately complex queries using sort, min, max, fromdate, and todate.    This method returns a list of questions. 
     * @param {String} site Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. \"stackoverflow.com\"), or a short form identified by api_site_parameter on the site object. 
     * @param {Object} opts Optional parameters
     * @param {String} [tagged] String list (semicolon delimited).
     * @param {module:model/String} [order] 
     * @param {String} [max] sort = activity => date sort = creation => date sort = votes => number sort = relevance => none 
     * @param {String} [min] sort = activity => date sort = creation => date sort = votes => number sort = relevance => none 
     * @param {module:model/String} [sort] 
     * @param {Number} [fromdate] Unix date.
     * @param {Number} [todate] Unix date.
     * @param {Number} [pagesize] 
     * @param {Number} [page] 
     * @param {String} [filter] #Discussion  The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.  An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.  Filters are immutable and non-expiring. An application can safely \"bake in\" any filters that are created, it is not necessary (or advisable) to create filters at runtime.  The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).  #Safety  Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.  Note that this does not mean that \"safe\" filter is mearly an \"unsafe\" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).  When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the \"safe\" data is the only accessible data it will be returned even in \"unsafe\" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.  #Built In Filters  The following filters are built in:  default, each type documents which fields are returned under the default filter (for example, answers). withbody, which is default plus the *.body fields none, which is empty total, which includes just .total  #Compatibility with V1.x  For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters. 
     * @param {String} [callback] All API responses are JSON, we do support JSONP with the callback query parameter. 
     * @param {module:model/String} [accepted] 
     * @param {Number} [answers] 
     * @param {String} [body] 
     * @param {module:model/String} [closed] 
     * @param {module:model/String} [migrated] 
     * @param {module:model/String} [notice] 
     * @param {String} [nottagged] String list (semicolon delimited).
     * @param {String} [q] 
     * @param {String} [title] 
     * @param {String} [url] 
     * @param {Number} [user] 
     * @param {Number} [views] 
     * @param {module:model/String} [wiki] 
     * @param {module:api/DefaultApi~searchAdvancedGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/QuestionsInner>}
     */
    searchAdvancedGet(site, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'site' is set
      if (site === undefined || site === null) {
        throw new Error("Missing the required parameter 'site' when calling searchAdvancedGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'tagged': opts['tagged'],
        'order': opts['order'],
        'max': opts['max'],
        'min': opts['min'],
        'sort': opts['sort'],
        'fromdate': opts['fromdate'],
        'todate': opts['todate'],
        'pagesize': opts['pagesize'],
        'page': opts['page'],
        'filter': opts['filter'],
        'callback': opts['callback'],
        'site': site,
        'accepted': opts['accepted'],
        'answers': opts['answers'],
        'body': opts['body'],
        'closed': opts['closed'],
        'migrated': opts['migrated'],
        'notice': opts['notice'],
        'nottagged': opts['nottagged'],
        'q': opts['q'],
        'title': opts['title'],
        'url': opts['url'],
        'user': opts['user'],
        'views': opts['views'],
        'wiki': opts['wiki']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [QuestionsInner];
      return this.apiClient.callApi(
        '/search/advanced', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the searchGet operation.
     * @callback module:api/DefaultApi~searchGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/QuestionsInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Searches a site for any questions which fit the given criteria.   This method is intentionally quite limited. For more general searching, you should use a proper internet search engine restricted to the domain of the site in question.   At least one of tagged or intitle must be set on this method. nottagged is only used if tagged is also set, for performance reasons.   tagged and nottagged are semi-colon delimited list of tags. At least 1 tag in tagged will be on each returned question if it is passed, making it the OR equivalent of the AND version of tagged on /questions.   The sorts accepted by this method operate on the follow fields of the question object:  - activity - last_activity_date  - creation - creation_date  - votes - score  - relevance - matches the relevance tab on the site itself Does not accept min or max   activity is the default sort.    It is possible to create moderately complex queries using sort, min, max, fromdate, and todate.    This method returns a list of questions. 
     * @param {String} site Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. \"stackoverflow.com\"), or a short form identified by api_site_parameter on the site object. 
     * @param {Object} opts Optional parameters
     * @param {String} [tagged] String list (semicolon delimited).
     * @param {module:model/String} [order] 
     * @param {String} [max] sort = activity => date sort = creation => date sort = votes => number sort = relevance => none 
     * @param {String} [min] sort = activity => date sort = creation => date sort = votes => number sort = relevance => none 
     * @param {module:model/String} [sort] 
     * @param {Number} [fromdate] Unix date.
     * @param {Number} [todate] Unix date.
     * @param {Number} [pagesize] 
     * @param {Number} [page] 
     * @param {String} [filter] #Discussion  The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.  An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.  Filters are immutable and non-expiring. An application can safely \"bake in\" any filters that are created, it is not necessary (or advisable) to create filters at runtime.  The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).  #Safety  Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.  Note that this does not mean that \"safe\" filter is mearly an \"unsafe\" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).  When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the \"safe\" data is the only accessible data it will be returned even in \"unsafe\" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.  #Built In Filters  The following filters are built in:  default, each type documents which fields are returned under the default filter (for example, answers). withbody, which is default plus the *.body fields none, which is empty total, which includes just .total  #Compatibility with V1.x  For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters. 
     * @param {String} [callback] All API responses are JSON, we do support JSONP with the callback query parameter. 
     * @param {String} [intitle] 
     * @param {String} [nottagged] String list (semicolon delimited).
     * @param {module:api/DefaultApi~searchGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/QuestionsInner>}
     */
    searchGet(site, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'site' is set
      if (site === undefined || site === null) {
        throw new Error("Missing the required parameter 'site' when calling searchGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'tagged': opts['tagged'],
        'order': opts['order'],
        'max': opts['max'],
        'min': opts['min'],
        'sort': opts['sort'],
        'fromdate': opts['fromdate'],
        'todate': opts['todate'],
        'pagesize': opts['pagesize'],
        'page': opts['page'],
        'filter': opts['filter'],
        'callback': opts['callback'],
        'site': site,
        'intitle': opts['intitle'],
        'nottagged': opts['nottagged']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [QuestionsInner];
      return this.apiClient.callApi(
        '/search', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the similarGet operation.
     * @callback module:api/DefaultApi~similarGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/QuestionsInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns questions which are similar to a hypothetical one based on a title and tag combination.   This method is roughly equivalent to a site's related questions suggestion on the ask page.   This method is useful for correlating data outside of a Stack Exchange site with similar content within one.   Note that title must always be passed as a parameter. tagged and nottagged are optional, semi-colon delimited lists of tags.   If tagged is passed it is treated as a preference, there is no guarantee that questions returned will have any of those tags. nottagged is treated as a requirement, no questions will be returned with those tags.   The sorts accepted by this method operate on the follow fields of the question object:  - activity - last_activity_date  - creation - creation_date  - votes - score  - relevance - order by \"how similar\" the questions are, most likely candidate first with a descending order Does not accept min or max   activity is the default sort.    It is possible to create moderately complex queries using sort, min, max, fromdate, and todate.    This method returns a list of questions. 
     * @param {String} site Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. \"stackoverflow.com\"), or a short form identified by api_site_parameter on the site object. 
     * @param {Object} opts Optional parameters
     * @param {String} [tagged] String list (semicolon delimited).
     * @param {module:model/String} [order] 
     * @param {String} [max] sort = activity => date sort = creation => date sort = votes => number sort = relevance => none 
     * @param {String} [min] sort = activity => date sort = creation => date sort = votes => number sort = relevance => none 
     * @param {module:model/String} [sort] 
     * @param {Number} [fromdate] Unix date.
     * @param {Number} [todate] Unix date.
     * @param {Number} [pagesize] 
     * @param {Number} [page] 
     * @param {String} [filter] #Discussion  The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.  An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.  Filters are immutable and non-expiring. An application can safely \"bake in\" any filters that are created, it is not necessary (or advisable) to create filters at runtime.  The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).  #Safety  Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.  Note that this does not mean that \"safe\" filter is mearly an \"unsafe\" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).  When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the \"safe\" data is the only accessible data it will be returned even in \"unsafe\" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.  #Built In Filters  The following filters are built in:  default, each type documents which fields are returned under the default filter (for example, answers). withbody, which is default plus the *.body fields none, which is empty total, which includes just .total  #Compatibility with V1.x  For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters. 
     * @param {String} [callback] All API responses are JSON, we do support JSONP with the callback query parameter. 
     * @param {String} [nottagged] String list (semicolon delimited).
     * @param {String} [title] 
     * @param {module:api/DefaultApi~similarGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/QuestionsInner>}
     */
    similarGet(site, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'site' is set
      if (site === undefined || site === null) {
        throw new Error("Missing the required parameter 'site' when calling similarGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'tagged': opts['tagged'],
        'order': opts['order'],
        'max': opts['max'],
        'min': opts['min'],
        'sort': opts['sort'],
        'fromdate': opts['fromdate'],
        'todate': opts['todate'],
        'pagesize': opts['pagesize'],
        'page': opts['page'],
        'filter': opts['filter'],
        'callback': opts['callback'],
        'site': site,
        'nottagged': opts['nottagged'],
        'title': opts['title']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [QuestionsInner];
      return this.apiClient.callApi(
        '/similar', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sitesGet operation.
     * @callback module:api/DefaultApi~sitesGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/InboxItemsInnerSite>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns all sites in the network.   This method allows for discovery of new sites, and changes to existing ones. Be aware that unlike normal API methods, this method should be fetched very infrequently, it is very unusual for these values to change more than once on any given day. It is suggested that you cache its return for at least one day, unless your app encounters evidence that it has changed (such as from the /info method).   The pagesize parameter for this method is unbounded, in acknowledgement that for many applications repeatedly fetching from /sites would complicate start-up tasks needlessly.   This method returns a list of sites. 
     * @param {Object} opts Optional parameters
     * @param {Number} [pagesize] 
     * @param {Number} [page] 
     * @param {String} [filter] #Discussion  The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.  An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.  Filters are immutable and non-expiring. An application can safely \"bake in\" any filters that are created, it is not necessary (or advisable) to create filters at runtime.  The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).  #Safety  Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.  Note that this does not mean that \"safe\" filter is mearly an \"unsafe\" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).  When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the \"safe\" data is the only accessible data it will be returned even in \"unsafe\" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.  #Built In Filters  The following filters are built in:  default, each type documents which fields are returned under the default filter (for example, answers). withbody, which is default plus the *.body fields none, which is empty total, which includes just .total  #Compatibility with V1.x  For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters. 
     * @param {String} [callback] All API responses are JSON, we do support JSONP with the callback query parameter. 
     * @param {module:api/DefaultApi~sitesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/InboxItemsInnerSite>}
     */
    sitesGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'pagesize': opts['pagesize'],
        'page': opts['page'],
        'filter': opts['filter'],
        'callback': opts['callback']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [InboxItemsInnerSite];
      return this.apiClient.callApi(
        '/sites', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the suggestedEditsGet operation.
     * @callback module:api/DefaultApi~suggestedEditsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/SuggestedEditsInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns all the suggested edits in the systems.   This method returns a list of suggested-edits.   The sorts accepted by this method operate on the follow fields of the suggested_edit object:  - creation - creation_date  - approval - approval_date Does not return unapproved suggested_edits  - rejection - rejection_date Does not return unrejected suggested_edits   creation is the default sort.    It is possible to create moderately complex queries using sort, min, max, fromdate, and todate. 
     * @param {String} site Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. \"stackoverflow.com\"), or a short form identified by api_site_parameter on the site object. 
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [order] 
     * @param {String} [max] sort = creation => date sort = approval => date sort = rejection => date 
     * @param {String} [min] sort = creation => date sort = approval => date sort = rejection => date 
     * @param {module:model/String} [sort] 
     * @param {Number} [fromdate] Unix date.
     * @param {Number} [todate] Unix date.
     * @param {Number} [pagesize] 
     * @param {Number} [page] 
     * @param {String} [filter] #Discussion  The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.  An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.  Filters are immutable and non-expiring. An application can safely \"bake in\" any filters that are created, it is not necessary (or advisable) to create filters at runtime.  The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).  #Safety  Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.  Note that this does not mean that \"safe\" filter is mearly an \"unsafe\" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).  When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the \"safe\" data is the only accessible data it will be returned even in \"unsafe\" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.  #Built In Filters  The following filters are built in:  default, each type documents which fields are returned under the default filter (for example, answers). withbody, which is default plus the *.body fields none, which is empty total, which includes just .total  #Compatibility with V1.x  For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters. 
     * @param {String} [callback] All API responses are JSON, we do support JSONP with the callback query parameter. 
     * @param {module:api/DefaultApi~suggestedEditsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/SuggestedEditsInner>}
     */
    suggestedEditsGet(site, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'site' is set
      if (site === undefined || site === null) {
        throw new Error("Missing the required parameter 'site' when calling suggestedEditsGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'order': opts['order'],
        'max': opts['max'],
        'min': opts['min'],
        'sort': opts['sort'],
        'fromdate': opts['fromdate'],
        'todate': opts['todate'],
        'pagesize': opts['pagesize'],
        'page': opts['page'],
        'filter': opts['filter'],
        'callback': opts['callback'],
        'site': site
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [SuggestedEditsInner];
      return this.apiClient.callApi(
        '/suggested-edits', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the suggestedEditsIdsGet operation.
     * @callback module:api/DefaultApi~suggestedEditsIdsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/SuggestedEditsInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns suggested edits identified in ids.   {ids} can contain up to 100 semicolon delimited ids, to find ids programatically look for suggested_edit_id on suggested_edit objects.   The sorts accepted by this method operate on the follow fields of the suggested_edit object:  - creation - creation_date  - approval - approval_date Does not return unapproved suggested_edits  - rejection - rejection_date Does not return unrejected suggested_edits   creation is the default sort.    It is possible to create moderately complex queries using sort, min, max, fromdate, and todate.    This method returns a list of suggested-edits. 
     * @param {String} ids Number list (semicolon delimited).
     * @param {String} site Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. \"stackoverflow.com\"), or a short form identified by api_site_parameter on the site object. 
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [order] 
     * @param {String} [max] sort = creation => date sort = approval => date sort = rejection => date 
     * @param {String} [min] sort = creation => date sort = approval => date sort = rejection => date 
     * @param {module:model/String} [sort] 
     * @param {Number} [fromdate] Unix date.
     * @param {Number} [todate] Unix date.
     * @param {Number} [pagesize] 
     * @param {Number} [page] 
     * @param {String} [filter] #Discussion  The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.  An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.  Filters are immutable and non-expiring. An application can safely \"bake in\" any filters that are created, it is not necessary (or advisable) to create filters at runtime.  The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).  #Safety  Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.  Note that this does not mean that \"safe\" filter is mearly an \"unsafe\" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).  When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the \"safe\" data is the only accessible data it will be returned even in \"unsafe\" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.  #Built In Filters  The following filters are built in:  default, each type documents which fields are returned under the default filter (for example, answers). withbody, which is default plus the *.body fields none, which is empty total, which includes just .total  #Compatibility with V1.x  For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters. 
     * @param {String} [callback] All API responses are JSON, we do support JSONP with the callback query parameter. 
     * @param {module:api/DefaultApi~suggestedEditsIdsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/SuggestedEditsInner>}
     */
    suggestedEditsIdsGet(ids, site, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'ids' is set
      if (ids === undefined || ids === null) {
        throw new Error("Missing the required parameter 'ids' when calling suggestedEditsIdsGet");
      }
      // verify the required parameter 'site' is set
      if (site === undefined || site === null) {
        throw new Error("Missing the required parameter 'site' when calling suggestedEditsIdsGet");
      }

      let pathParams = {
        'ids': ids
      };
      let queryParams = {
        'order': opts['order'],
        'max': opts['max'],
        'min': opts['min'],
        'sort': opts['sort'],
        'fromdate': opts['fromdate'],
        'todate': opts['todate'],
        'pagesize': opts['pagesize'],
        'page': opts['page'],
        'filter': opts['filter'],
        'callback': opts['callback'],
        'site': site
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [SuggestedEditsInner];
      return this.apiClient.callApi(
        '/suggested-edits/{ids}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tagsGet operation.
     * @callback module:api/DefaultApi~tagsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TagsInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the tags found on a site.   The inname parameter lets a consumer filter down to tags that contain a certain substring. For example, inname=own would return both \"download\" and \"owner\" amongst others.   This method returns a list of tags.   The sorts accepted by this method operate on the follow fields of the tag object:  - popular - count  - activity - the creation_date of the last question asked with the tag  - name - name   popular is the default sort.    It is possible to create moderately complex queries using sort, min, max, fromdate, and todate. 
     * @param {String} site Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. \"stackoverflow.com\"), or a short form identified by api_site_parameter on the site object. 
     * @param {Object} opts Optional parameters
     * @param {String} [inname] 
     * @param {module:model/String} [order] 
     * @param {String} [max] sort = popular => number sort = activity => date sort = name => string 
     * @param {String} [min] sort = popular => number sort = activity => date sort = name => string 
     * @param {module:model/String} [sort] 
     * @param {Number} [fromdate] Unix date.
     * @param {Number} [todate] Unix date.
     * @param {Number} [pagesize] 
     * @param {Number} [page] 
     * @param {String} [filter] #Discussion  The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.  An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.  Filters are immutable and non-expiring. An application can safely \"bake in\" any filters that are created, it is not necessary (or advisable) to create filters at runtime.  The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).  #Safety  Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.  Note that this does not mean that \"safe\" filter is mearly an \"unsafe\" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).  When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the \"safe\" data is the only accessible data it will be returned even in \"unsafe\" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.  #Built In Filters  The following filters are built in:  default, each type documents which fields are returned under the default filter (for example, answers). withbody, which is default plus the *.body fields none, which is empty total, which includes just .total  #Compatibility with V1.x  For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters. 
     * @param {String} [callback] All API responses are JSON, we do support JSONP with the callback query parameter. 
     * @param {module:api/DefaultApi~tagsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TagsInner>}
     */
    tagsGet(site, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'site' is set
      if (site === undefined || site === null) {
        throw new Error("Missing the required parameter 'site' when calling tagsGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'inname': opts['inname'],
        'order': opts['order'],
        'max': opts['max'],
        'min': opts['min'],
        'sort': opts['sort'],
        'fromdate': opts['fromdate'],
        'todate': opts['todate'],
        'pagesize': opts['pagesize'],
        'page': opts['page'],
        'filter': opts['filter'],
        'callback': opts['callback'],
        'site': site
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [TagsInner];
      return this.apiClient.callApi(
        '/tags', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tagsModeratorOnlyGet operation.
     * @callback module:api/DefaultApi~tagsModeratorOnlyGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TagsInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the tags found on a site that only moderators can use.   The inname parameter lets a consumer filter down to tags that contain a certain substring. For example, inname=own would return both \"download\" and \"owner\" amongst others.   This method returns a list of tags.   The sorts accepted by this method operate on the follow fields of the tag object:  - popular - count  - activity - the creation_date of the last question asked with the tag  - name - name   popular is the default sort.    It is possible to create moderately complex queries using sort, min, max, fromdate, and todate. 
     * @param {String} site Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. \"stackoverflow.com\"), or a short form identified by api_site_parameter on the site object. 
     * @param {Object} opts Optional parameters
     * @param {String} [inname] 
     * @param {module:model/String} [order] 
     * @param {String} [max] sort = popular => number sort = activity => date sort = name => string 
     * @param {String} [min] sort = popular => number sort = activity => date sort = name => string 
     * @param {module:model/String} [sort] 
     * @param {Number} [fromdate] Unix date.
     * @param {Number} [todate] Unix date.
     * @param {Number} [pagesize] 
     * @param {Number} [page] 
     * @param {String} [filter] #Discussion  The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.  An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.  Filters are immutable and non-expiring. An application can safely \"bake in\" any filters that are created, it is not necessary (or advisable) to create filters at runtime.  The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).  #Safety  Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.  Note that this does not mean that \"safe\" filter is mearly an \"unsafe\" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).  When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the \"safe\" data is the only accessible data it will be returned even in \"unsafe\" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.  #Built In Filters  The following filters are built in:  default, each type documents which fields are returned under the default filter (for example, answers). withbody, which is default plus the *.body fields none, which is empty total, which includes just .total  #Compatibility with V1.x  For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters. 
     * @param {String} [callback] All API responses are JSON, we do support JSONP with the callback query parameter. 
     * @param {module:api/DefaultApi~tagsModeratorOnlyGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TagsInner>}
     */
    tagsModeratorOnlyGet(site, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'site' is set
      if (site === undefined || site === null) {
        throw new Error("Missing the required parameter 'site' when calling tagsModeratorOnlyGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'inname': opts['inname'],
        'order': opts['order'],
        'max': opts['max'],
        'min': opts['min'],
        'sort': opts['sort'],
        'fromdate': opts['fromdate'],
        'todate': opts['todate'],
        'pagesize': opts['pagesize'],
        'page': opts['page'],
        'filter': opts['filter'],
        'callback': opts['callback'],
        'site': site
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [TagsInner];
      return this.apiClient.callApi(
        '/tags/moderator-only', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tagsRequiredGet operation.
     * @callback module:api/DefaultApi~tagsRequiredGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TagsInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the tags found on a site that fulfill required tag constraints on questions.   The inname parameter lets a consumer filter down to tags that contain a certain substring. For example, inname=own would return both \"download\" and \"owner\" amongst others.   This method returns a list of tags.   The sorts accepted by this method operate on the follow fields of the tag object:  - popular - count  - activity - the creation_date of the last question asked with the tag  - name - name   popular is the default sort.    It is possible to create moderately complex queries using sort, min, max, fromdate, and todate. 
     * @param {String} site Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. \"stackoverflow.com\"), or a short form identified by api_site_parameter on the site object. 
     * @param {Object} opts Optional parameters
     * @param {String} [inname] 
     * @param {module:model/String} [order] 
     * @param {String} [max] sort = popular => number sort = activity => date sort = name => string 
     * @param {String} [min] sort = popular => number sort = activity => date sort = name => string 
     * @param {module:model/String} [sort] 
     * @param {Number} [fromdate] Unix date.
     * @param {Number} [todate] Unix date.
     * @param {Number} [pagesize] 
     * @param {Number} [page] 
     * @param {String} [filter] #Discussion  The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.  An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.  Filters are immutable and non-expiring. An application can safely \"bake in\" any filters that are created, it is not necessary (or advisable) to create filters at runtime.  The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).  #Safety  Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.  Note that this does not mean that \"safe\" filter is mearly an \"unsafe\" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).  When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the \"safe\" data is the only accessible data it will be returned even in \"unsafe\" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.  #Built In Filters  The following filters are built in:  default, each type documents which fields are returned under the default filter (for example, answers). withbody, which is default plus the *.body fields none, which is empty total, which includes just .total  #Compatibility with V1.x  For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters. 
     * @param {String} [callback] All API responses are JSON, we do support JSONP with the callback query parameter. 
     * @param {module:api/DefaultApi~tagsRequiredGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TagsInner>}
     */
    tagsRequiredGet(site, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'site' is set
      if (site === undefined || site === null) {
        throw new Error("Missing the required parameter 'site' when calling tagsRequiredGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'inname': opts['inname'],
        'order': opts['order'],
        'max': opts['max'],
        'min': opts['min'],
        'sort': opts['sort'],
        'fromdate': opts['fromdate'],
        'todate': opts['todate'],
        'pagesize': opts['pagesize'],
        'page': opts['page'],
        'filter': opts['filter'],
        'callback': opts['callback'],
        'site': site
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [TagsInner];
      return this.apiClient.callApi(
        '/tags/required', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tagsSynonymsGet operation.
     * @callback module:api/DefaultApi~tagsSynonymsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TagSynonymsInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns all tag synonyms found a site.   When searching for synonyms of specific tags, it is better to use /tags/{tags}/synonyms over this method.   The sorts accepted by this method operate on the follow fields of the tag_synonym object:  - creation - creation_date  - applied - applied_count  - activity - last_applied_date   creation is the default sort.    It is possible to create moderately complex queries using sort, min, max, fromdate, and todate.    This method returns a list of tag_synonyms. 
     * @param {String} site Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. \"stackoverflow.com\"), or a short form identified by api_site_parameter on the site object. 
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [order] 
     * @param {String} [max] sort = creation => date sort = applied => number sort = activity => date 
     * @param {String} [min] sort = creation => date sort = applied => number sort = activity => date 
     * @param {module:model/String} [sort] 
     * @param {Number} [fromdate] Unix date.
     * @param {Number} [todate] Unix date.
     * @param {Number} [pagesize] 
     * @param {Number} [page] 
     * @param {String} [filter] #Discussion  The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.  An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.  Filters are immutable and non-expiring. An application can safely \"bake in\" any filters that are created, it is not necessary (or advisable) to create filters at runtime.  The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).  #Safety  Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.  Note that this does not mean that \"safe\" filter is mearly an \"unsafe\" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).  When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the \"safe\" data is the only accessible data it will be returned even in \"unsafe\" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.  #Built In Filters  The following filters are built in:  default, each type documents which fields are returned under the default filter (for example, answers). withbody, which is default plus the *.body fields none, which is empty total, which includes just .total  #Compatibility with V1.x  For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters. 
     * @param {String} [callback] All API responses are JSON, we do support JSONP with the callback query parameter. 
     * @param {module:api/DefaultApi~tagsSynonymsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TagSynonymsInner>}
     */
    tagsSynonymsGet(site, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'site' is set
      if (site === undefined || site === null) {
        throw new Error("Missing the required parameter 'site' when calling tagsSynonymsGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'order': opts['order'],
        'max': opts['max'],
        'min': opts['min'],
        'sort': opts['sort'],
        'fromdate': opts['fromdate'],
        'todate': opts['todate'],
        'pagesize': opts['pagesize'],
        'page': opts['page'],
        'filter': opts['filter'],
        'callback': opts['callback'],
        'site': site
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [TagSynonymsInner];
      return this.apiClient.callApi(
        '/tags/synonyms', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tagsTagTopAnswerersPeriodGet operation.
     * @callback module:api/DefaultApi~tagsTagTopAnswerersPeriodGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TagScoreObjectsInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the top 30 answerers active in a single tag, of either all-time or the last 30 days.   This is a view onto the data presented on the tag info page on the sites.   This method returns a list of tag score objects. 
     * @param {String} tag 
     * @param {module:model/String} period 
     * @param {String} site Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. \"stackoverflow.com\"), or a short form identified by api_site_parameter on the site object. 
     * @param {Object} opts Optional parameters
     * @param {Number} [pagesize] 
     * @param {Number} [page] 
     * @param {String} [filter] #Discussion  The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.  An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.  Filters are immutable and non-expiring. An application can safely \"bake in\" any filters that are created, it is not necessary (or advisable) to create filters at runtime.  The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).  #Safety  Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.  Note that this does not mean that \"safe\" filter is mearly an \"unsafe\" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).  When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the \"safe\" data is the only accessible data it will be returned even in \"unsafe\" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.  #Built In Filters  The following filters are built in:  default, each type documents which fields are returned under the default filter (for example, answers). withbody, which is default plus the *.body fields none, which is empty total, which includes just .total  #Compatibility with V1.x  For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters. 
     * @param {String} [callback] All API responses are JSON, we do support JSONP with the callback query parameter. 
     * @param {module:api/DefaultApi~tagsTagTopAnswerersPeriodGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TagScoreObjectsInner>}
     */
    tagsTagTopAnswerersPeriodGet(tag, period, site, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'tag' is set
      if (tag === undefined || tag === null) {
        throw new Error("Missing the required parameter 'tag' when calling tagsTagTopAnswerersPeriodGet");
      }
      // verify the required parameter 'period' is set
      if (period === undefined || period === null) {
        throw new Error("Missing the required parameter 'period' when calling tagsTagTopAnswerersPeriodGet");
      }
      // verify the required parameter 'site' is set
      if (site === undefined || site === null) {
        throw new Error("Missing the required parameter 'site' when calling tagsTagTopAnswerersPeriodGet");
      }

      let pathParams = {
        'tag': tag,
        'period': period
      };
      let queryParams = {
        'pagesize': opts['pagesize'],
        'page': opts['page'],
        'filter': opts['filter'],
        'callback': opts['callback'],
        'site': site
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [TagScoreObjectsInner];
      return this.apiClient.callApi(
        '/tags/{tag}/top-answerers/{period}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tagsTagTopAskersPeriodGet operation.
     * @callback module:api/DefaultApi~tagsTagTopAskersPeriodGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TagScoreObjectsInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the top 30 askers active in a single tag, of either all-time or the last 30 days.   This is a view onto the data presented on the tag info page on the sites.   This method returns a list of tag score objects. 
     * @param {String} tag 
     * @param {module:model/String} period 
     * @param {String} site Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. \"stackoverflow.com\"), or a short form identified by api_site_parameter on the site object. 
     * @param {Object} opts Optional parameters
     * @param {Number} [pagesize] 
     * @param {Number} [page] 
     * @param {String} [filter] #Discussion  The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.  An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.  Filters are immutable and non-expiring. An application can safely \"bake in\" any filters that are created, it is not necessary (or advisable) to create filters at runtime.  The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).  #Safety  Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.  Note that this does not mean that \"safe\" filter is mearly an \"unsafe\" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).  When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the \"safe\" data is the only accessible data it will be returned even in \"unsafe\" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.  #Built In Filters  The following filters are built in:  default, each type documents which fields are returned under the default filter (for example, answers). withbody, which is default plus the *.body fields none, which is empty total, which includes just .total  #Compatibility with V1.x  For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters. 
     * @param {String} [callback] All API responses are JSON, we do support JSONP with the callback query parameter. 
     * @param {module:api/DefaultApi~tagsTagTopAskersPeriodGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TagScoreObjectsInner>}
     */
    tagsTagTopAskersPeriodGet(tag, period, site, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'tag' is set
      if (tag === undefined || tag === null) {
        throw new Error("Missing the required parameter 'tag' when calling tagsTagTopAskersPeriodGet");
      }
      // verify the required parameter 'period' is set
      if (period === undefined || period === null) {
        throw new Error("Missing the required parameter 'period' when calling tagsTagTopAskersPeriodGet");
      }
      // verify the required parameter 'site' is set
      if (site === undefined || site === null) {
        throw new Error("Missing the required parameter 'site' when calling tagsTagTopAskersPeriodGet");
      }

      let pathParams = {
        'tag': tag,
        'period': period
      };
      let queryParams = {
        'pagesize': opts['pagesize'],
        'page': opts['page'],
        'filter': opts['filter'],
        'callback': opts['callback'],
        'site': site
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [TagScoreObjectsInner];
      return this.apiClient.callApi(
        '/tags/{tag}/top-askers/{period}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tagsTagsFaqGet operation.
     * @callback module:api/DefaultApi~tagsTagsFaqGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/QuestionsInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the frequently asked questions for the given set of tags in {tags}.   For a question to be returned, it must have all the tags in {tags} and be considered \"frequently asked\". The exact algorithm for determining whether a question is considered a FAQ is subject to change at any time.   {tags} can contain up to 5 individual tags per request.   This method returns a list of questions. 
     * @param {String} tags String list (semicolon delimited).
     * @param {String} site Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. \"stackoverflow.com\"), or a short form identified by api_site_parameter on the site object. 
     * @param {Object} opts Optional parameters
     * @param {Number} [pagesize] 
     * @param {Number} [page] 
     * @param {String} [filter] #Discussion  The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.  An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.  Filters are immutable and non-expiring. An application can safely \"bake in\" any filters that are created, it is not necessary (or advisable) to create filters at runtime.  The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).  #Safety  Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.  Note that this does not mean that \"safe\" filter is mearly an \"unsafe\" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).  When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the \"safe\" data is the only accessible data it will be returned even in \"unsafe\" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.  #Built In Filters  The following filters are built in:  default, each type documents which fields are returned under the default filter (for example, answers). withbody, which is default plus the *.body fields none, which is empty total, which includes just .total  #Compatibility with V1.x  For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters. 
     * @param {String} [callback] All API responses are JSON, we do support JSONP with the callback query parameter. 
     * @param {module:api/DefaultApi~tagsTagsFaqGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/QuestionsInner>}
     */
    tagsTagsFaqGet(tags, site, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'tags' is set
      if (tags === undefined || tags === null) {
        throw new Error("Missing the required parameter 'tags' when calling tagsTagsFaqGet");
      }
      // verify the required parameter 'site' is set
      if (site === undefined || site === null) {
        throw new Error("Missing the required parameter 'site' when calling tagsTagsFaqGet");
      }

      let pathParams = {
        'tags': tags
      };
      let queryParams = {
        'pagesize': opts['pagesize'],
        'page': opts['page'],
        'filter': opts['filter'],
        'callback': opts['callback'],
        'site': site
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [QuestionsInner];
      return this.apiClient.callApi(
        '/tags/{tags}/faq', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tagsTagsInfoGet operation.
     * @callback module:api/DefaultApi~tagsTagsInfoGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TagsInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns tag objects representing the tags in {tags} found on the site.   This method diverges from the standard naming patterns to avoid to conflicting with existing methods, due to the free form nature of tag names.   This method returns a list of tags.   The sorts accepted by this method operate on the follow fields of the tag object:  - popular - count  - activity - the creation_date of the last question asked with the tag  - name - name   popular is the default sort.    It is possible to create moderately complex queries using sort, min, max, fromdate, and todate. 
     * @param {String} tags String list (semicolon delimited).
     * @param {String} site Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. \"stackoverflow.com\"), or a short form identified by api_site_parameter on the site object. 
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [order] 
     * @param {String} [max] sort = popular => number sort = activity => date sort = name => string 
     * @param {String} [min] sort = popular => number sort = activity => date sort = name => string 
     * @param {module:model/String} [sort] 
     * @param {Number} [fromdate] Unix date.
     * @param {Number} [todate] Unix date.
     * @param {Number} [pagesize] 
     * @param {Number} [page] 
     * @param {String} [filter] #Discussion  The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.  An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.  Filters are immutable and non-expiring. An application can safely \"bake in\" any filters that are created, it is not necessary (or advisable) to create filters at runtime.  The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).  #Safety  Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.  Note that this does not mean that \"safe\" filter is mearly an \"unsafe\" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).  When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the \"safe\" data is the only accessible data it will be returned even in \"unsafe\" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.  #Built In Filters  The following filters are built in:  default, each type documents which fields are returned under the default filter (for example, answers). withbody, which is default plus the *.body fields none, which is empty total, which includes just .total  #Compatibility with V1.x  For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters. 
     * @param {String} [callback] All API responses are JSON, we do support JSONP with the callback query parameter. 
     * @param {module:api/DefaultApi~tagsTagsInfoGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TagsInner>}
     */
    tagsTagsInfoGet(tags, site, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'tags' is set
      if (tags === undefined || tags === null) {
        throw new Error("Missing the required parameter 'tags' when calling tagsTagsInfoGet");
      }
      // verify the required parameter 'site' is set
      if (site === undefined || site === null) {
        throw new Error("Missing the required parameter 'site' when calling tagsTagsInfoGet");
      }

      let pathParams = {
        'tags': tags
      };
      let queryParams = {
        'order': opts['order'],
        'max': opts['max'],
        'min': opts['min'],
        'sort': opts['sort'],
        'fromdate': opts['fromdate'],
        'todate': opts['todate'],
        'pagesize': opts['pagesize'],
        'page': opts['page'],
        'filter': opts['filter'],
        'callback': opts['callback'],
        'site': site
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [TagsInner];
      return this.apiClient.callApi(
        '/tags/{tags}/info', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tagsTagsRelatedGet operation.
     * @callback module:api/DefaultApi~tagsTagsRelatedGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TagsInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the tags that are most related to those in {tags}.   Including multiple tags in {tags} is equivalent to asking for \"tags related to tag #1 and tag #2\" not \"tags related to tag #1 or tag #2\".   count on tag objects returned is the number of question with that tag that also share all those in {tags}.   {tags} can contain up to 4 individual tags per request.   This method returns a list of tags. 
     * @param {String} tags String list (semicolon delimited).
     * @param {String} site Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. \"stackoverflow.com\"), or a short form identified by api_site_parameter on the site object. 
     * @param {Object} opts Optional parameters
     * @param {Number} [pagesize] 
     * @param {Number} [page] 
     * @param {String} [filter] #Discussion  The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.  An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.  Filters are immutable and non-expiring. An application can safely \"bake in\" any filters that are created, it is not necessary (or advisable) to create filters at runtime.  The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).  #Safety  Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.  Note that this does not mean that \"safe\" filter is mearly an \"unsafe\" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).  When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the \"safe\" data is the only accessible data it will be returned even in \"unsafe\" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.  #Built In Filters  The following filters are built in:  default, each type documents which fields are returned under the default filter (for example, answers). withbody, which is default plus the *.body fields none, which is empty total, which includes just .total  #Compatibility with V1.x  For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters. 
     * @param {String} [callback] All API responses are JSON, we do support JSONP with the callback query parameter. 
     * @param {module:api/DefaultApi~tagsTagsRelatedGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TagsInner>}
     */
    tagsTagsRelatedGet(tags, site, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'tags' is set
      if (tags === undefined || tags === null) {
        throw new Error("Missing the required parameter 'tags' when calling tagsTagsRelatedGet");
      }
      // verify the required parameter 'site' is set
      if (site === undefined || site === null) {
        throw new Error("Missing the required parameter 'site' when calling tagsTagsRelatedGet");
      }

      let pathParams = {
        'tags': tags
      };
      let queryParams = {
        'pagesize': opts['pagesize'],
        'page': opts['page'],
        'filter': opts['filter'],
        'callback': opts['callback'],
        'site': site
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [TagsInner];
      return this.apiClient.callApi(
        '/tags/{tags}/related', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tagsTagsSynonymsGet operation.
     * @callback module:api/DefaultApi~tagsTagsSynonymsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TagSynonymsInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets all the synonyms that point to the tags identified in {tags}. If you're looking to discover all the tag synonyms on a site, use the /tags/synonyms methods instead of call this method on all tags.   {tags} can contain up to 20 individual tags per request.   The sorts accepted by this method operate on the follow fields of the tag_synonym object:  - creation - creation_date  - applied - applied_count  - activity - last_applied_date   creation is the default sort.    It is possible to create moderately complex queries using sort, min, max, fromdate, and todate.    This method returns a list of tag synonyms. 
     * @param {String} tags String list (semicolon delimited).
     * @param {String} site Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. \"stackoverflow.com\"), or a short form identified by api_site_parameter on the site object. 
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [order] 
     * @param {String} [max] sort = creation => date sort = applied => number sort = activity => date 
     * @param {String} [min] sort = creation => date sort = applied => number sort = activity => date 
     * @param {module:model/String} [sort] 
     * @param {Number} [fromdate] Unix date.
     * @param {Number} [todate] Unix date.
     * @param {Number} [pagesize] 
     * @param {Number} [page] 
     * @param {String} [filter] #Discussion  The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.  An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.  Filters are immutable and non-expiring. An application can safely \"bake in\" any filters that are created, it is not necessary (or advisable) to create filters at runtime.  The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).  #Safety  Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.  Note that this does not mean that \"safe\" filter is mearly an \"unsafe\" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).  When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the \"safe\" data is the only accessible data it will be returned even in \"unsafe\" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.  #Built In Filters  The following filters are built in:  default, each type documents which fields are returned under the default filter (for example, answers). withbody, which is default plus the *.body fields none, which is empty total, which includes just .total  #Compatibility with V1.x  For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters. 
     * @param {String} [callback] All API responses are JSON, we do support JSONP with the callback query parameter. 
     * @param {module:api/DefaultApi~tagsTagsSynonymsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TagSynonymsInner>}
     */
    tagsTagsSynonymsGet(tags, site, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'tags' is set
      if (tags === undefined || tags === null) {
        throw new Error("Missing the required parameter 'tags' when calling tagsTagsSynonymsGet");
      }
      // verify the required parameter 'site' is set
      if (site === undefined || site === null) {
        throw new Error("Missing the required parameter 'site' when calling tagsTagsSynonymsGet");
      }

      let pathParams = {
        'tags': tags
      };
      let queryParams = {
        'order': opts['order'],
        'max': opts['max'],
        'min': opts['min'],
        'sort': opts['sort'],
        'fromdate': opts['fromdate'],
        'todate': opts['todate'],
        'pagesize': opts['pagesize'],
        'page': opts['page'],
        'filter': opts['filter'],
        'callback': opts['callback'],
        'site': site
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [TagSynonymsInner];
      return this.apiClient.callApi(
        '/tags/{tags}/synonyms', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tagsTagsWikisGet operation.
     * @callback module:api/DefaultApi~tagsTagsWikisGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TagWikisInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the wikis that go with the given set of tags in {tags}.   Be aware that not all tags have wikis.   {tags} can contain up to 20 individual tags per request.   This method returns a list of tag wikis. 
     * @param {String} tags String list (semicolon delimited).
     * @param {String} site Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. \"stackoverflow.com\"), or a short form identified by api_site_parameter on the site object. 
     * @param {Object} opts Optional parameters
     * @param {Number} [pagesize] 
     * @param {Number} [page] 
     * @param {String} [filter] #Discussion  The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.  An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.  Filters are immutable and non-expiring. An application can safely \"bake in\" any filters that are created, it is not necessary (or advisable) to create filters at runtime.  The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).  #Safety  Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.  Note that this does not mean that \"safe\" filter is mearly an \"unsafe\" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).  When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the \"safe\" data is the only accessible data it will be returned even in \"unsafe\" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.  #Built In Filters  The following filters are built in:  default, each type documents which fields are returned under the default filter (for example, answers). withbody, which is default plus the *.body fields none, which is empty total, which includes just .total  #Compatibility with V1.x  For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters. 
     * @param {String} [callback] All API responses are JSON, we do support JSONP with the callback query parameter. 
     * @param {module:api/DefaultApi~tagsTagsWikisGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TagWikisInner>}
     */
    tagsTagsWikisGet(tags, site, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'tags' is set
      if (tags === undefined || tags === null) {
        throw new Error("Missing the required parameter 'tags' when calling tagsTagsWikisGet");
      }
      // verify the required parameter 'site' is set
      if (site === undefined || site === null) {
        throw new Error("Missing the required parameter 'site' when calling tagsTagsWikisGet");
      }

      let pathParams = {
        'tags': tags
      };
      let queryParams = {
        'pagesize': opts['pagesize'],
        'page': opts['page'],
        'filter': opts['filter'],
        'callback': opts['callback'],
        'site': site
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [TagWikisInner];
      return this.apiClient.callApi(
        '/tags/{tags}/wikis', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersGet operation.
     * @callback module:api/DefaultApi~usersGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UsersInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns all users on a site.   This method returns a list of users.   The sorts accepted by this method operate on the follow fields of the user object:  - reputation - reputation  - creation - creation_date  - name - display_name  - modified - last_modified_date   reputation is the default sort.    It is possible to create moderately complex queries using sort, min, max, fromdate, and todate.    The inname parameter lets consumers filter the results down to just those users with a certain substring in their display name. For example, inname=kevin will return all users with both users named simply \"Kevin\" or those with Kevin as one of (or part of) their names; such as \"Kevin Montrose\". 
     * @param {String} site Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. \"stackoverflow.com\"), or a short form identified by api_site_parameter on the site object. 
     * @param {Object} opts Optional parameters
     * @param {String} [inname] 
     * @param {module:model/String} [order] 
     * @param {String} [max] sort = reputation => number sort = creation => date sort = name => string sort = modified => date 
     * @param {String} [min] sort = reputation => number sort = creation => date sort = name => string sort = modified => date 
     * @param {module:model/String} [sort] 
     * @param {Number} [fromdate] Unix date.
     * @param {Number} [todate] Unix date.
     * @param {Number} [pagesize] 
     * @param {Number} [page] 
     * @param {String} [filter] #Discussion  The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.  An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.  Filters are immutable and non-expiring. An application can safely \"bake in\" any filters that are created, it is not necessary (or advisable) to create filters at runtime.  The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).  #Safety  Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.  Note that this does not mean that \"safe\" filter is mearly an \"unsafe\" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).  When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the \"safe\" data is the only accessible data it will be returned even in \"unsafe\" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.  #Built In Filters  The following filters are built in:  default, each type documents which fields are returned under the default filter (for example, answers). withbody, which is default plus the *.body fields none, which is empty total, which includes just .total  #Compatibility with V1.x  For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters. 
     * @param {String} [callback] All API responses are JSON, we do support JSONP with the callback query parameter. 
     * @param {module:api/DefaultApi~usersGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UsersInner>}
     */
    usersGet(site, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'site' is set
      if (site === undefined || site === null) {
        throw new Error("Missing the required parameter 'site' when calling usersGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'inname': opts['inname'],
        'order': opts['order'],
        'max': opts['max'],
        'min': opts['min'],
        'sort': opts['sort'],
        'fromdate': opts['fromdate'],
        'todate': opts['todate'],
        'pagesize': opts['pagesize'],
        'page': opts['page'],
        'filter': opts['filter'],
        'callback': opts['callback'],
        'site': site
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [UsersInner];
      return this.apiClient.callApi(
        '/users', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersIdInboxGet operation.
     * @callback module:api/DefaultApi~usersIdInboxGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/InboxItemsInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a user's inbox.   This method requires an access_token, with a scope containing \"read_inbox\".   This method is effectively an alias for /inbox. It is provided for consumers who make strong assumptions about operating within the context of a single site rather than the Stack Exchange network as a whole.   {id} can contain a single id, to find it programatically look for user_id on user or shallow_user objects.   This method returns a list of inbox items. 
     * @param {Number} id 
     * @param {String} site Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. \"stackoverflow.com\"), or a short form identified by api_site_parameter on the site object. 
     * @param {Object} opts Optional parameters
     * @param {Number} [pagesize] 
     * @param {Number} [page] 
     * @param {String} [filter] #Discussion  The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.  An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.  Filters are immutable and non-expiring. An application can safely \"bake in\" any filters that are created, it is not necessary (or advisable) to create filters at runtime.  The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).  #Safety  Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.  Note that this does not mean that \"safe\" filter is mearly an \"unsafe\" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).  When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the \"safe\" data is the only accessible data it will be returned even in \"unsafe\" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.  #Built In Filters  The following filters are built in:  default, each type documents which fields are returned under the default filter (for example, answers). withbody, which is default plus the *.body fields none, which is empty total, which includes just .total  #Compatibility with V1.x  For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters. 
     * @param {String} [callback] All API responses are JSON, we do support JSONP with the callback query parameter. 
     * @param {module:api/DefaultApi~usersIdInboxGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/InboxItemsInner>}
     */
    usersIdInboxGet(id, site, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling usersIdInboxGet");
      }
      // verify the required parameter 'site' is set
      if (site === undefined || site === null) {
        throw new Error("Missing the required parameter 'site' when calling usersIdInboxGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'pagesize': opts['pagesize'],
        'page': opts['page'],
        'filter': opts['filter'],
        'callback': opts['callback'],
        'site': site
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [InboxItemsInner];
      return this.apiClient.callApi(
        '/users/{id}/inbox', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersIdInboxUnreadGet operation.
     * @callback module:api/DefaultApi~usersIdInboxUnreadGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/InboxItemsInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the unread items in a user's inbox.   This method requires an access_token, with a scope containing \"read_inbox\".   This method is effectively an alias for /inbox/unread. It is provided for consumers who make strong assumptions about operating within the context of a single site rather than the Stack Exchange network as a whole.   {id} can contain a single id, to find it programatically look for user_id on user or shallow_user objects.   This method returns a list of inbox items. 
     * @param {Number} id 
     * @param {String} site Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. \"stackoverflow.com\"), or a short form identified by api_site_parameter on the site object. 
     * @param {Object} opts Optional parameters
     * @param {Number} [pagesize] 
     * @param {Number} [page] 
     * @param {String} [filter] #Discussion  The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.  An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.  Filters are immutable and non-expiring. An application can safely \"bake in\" any filters that are created, it is not necessary (or advisable) to create filters at runtime.  The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).  #Safety  Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.  Note that this does not mean that \"safe\" filter is mearly an \"unsafe\" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).  When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the \"safe\" data is the only accessible data it will be returned even in \"unsafe\" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.  #Built In Filters  The following filters are built in:  default, each type documents which fields are returned under the default filter (for example, answers). withbody, which is default plus the *.body fields none, which is empty total, which includes just .total  #Compatibility with V1.x  For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters. 
     * @param {String} [callback] All API responses are JSON, we do support JSONP with the callback query parameter. 
     * @param {Number} [since] Unix date.
     * @param {module:api/DefaultApi~usersIdInboxUnreadGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/InboxItemsInner>}
     */
    usersIdInboxUnreadGet(id, site, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling usersIdInboxUnreadGet");
      }
      // verify the required parameter 'site' is set
      if (site === undefined || site === null) {
        throw new Error("Missing the required parameter 'site' when calling usersIdInboxUnreadGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'pagesize': opts['pagesize'],
        'page': opts['page'],
        'filter': opts['filter'],
        'callback': opts['callback'],
        'site': site,
        'since': opts['since']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [InboxItemsInner];
      return this.apiClient.callApi(
        '/users/{id}/inbox/unread', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersIdNotificationsGet operation.
     * @callback module:api/DefaultApi~usersIdNotificationsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/NotificationsInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a user's notifications.   This method requires an access_token, with a scope containing \"read_inbox\".   This method returns a list of notifications. 
     * @param {Number} id 
     * @param {String} site Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. \"stackoverflow.com\"), or a short form identified by api_site_parameter on the site object. 
     * @param {Object} opts Optional parameters
     * @param {Number} [pagesize] 
     * @param {Number} [page] 
     * @param {String} [filter] #Discussion  The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.  An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.  Filters are immutable and non-expiring. An application can safely \"bake in\" any filters that are created, it is not necessary (or advisable) to create filters at runtime.  The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).  #Safety  Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.  Note that this does not mean that \"safe\" filter is mearly an \"unsafe\" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).  When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the \"safe\" data is the only accessible data it will be returned even in \"unsafe\" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.  #Built In Filters  The following filters are built in:  default, each type documents which fields are returned under the default filter (for example, answers). withbody, which is default plus the *.body fields none, which is empty total, which includes just .total  #Compatibility with V1.x  For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters. 
     * @param {String} [callback] All API responses are JSON, we do support JSONP with the callback query parameter. 
     * @param {module:api/DefaultApi~usersIdNotificationsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/NotificationsInner>}
     */
    usersIdNotificationsGet(id, site, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling usersIdNotificationsGet");
      }
      // verify the required parameter 'site' is set
      if (site === undefined || site === null) {
        throw new Error("Missing the required parameter 'site' when calling usersIdNotificationsGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'pagesize': opts['pagesize'],
        'page': opts['page'],
        'filter': opts['filter'],
        'callback': opts['callback'],
        'site': site
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [NotificationsInner];
      return this.apiClient.callApi(
        '/users/{id}/notifications', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersIdNotificationsUnreadGet operation.
     * @callback module:api/DefaultApi~usersIdNotificationsUnreadGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/NotificationsInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a user's unread notifications.   This method requires an access_token, with a scope containing \"read_inbox\".   This method returns a list of notifications. 
     * @param {Number} id 
     * @param {String} site Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. \"stackoverflow.com\"), or a short form identified by api_site_parameter on the site object. 
     * @param {Object} opts Optional parameters
     * @param {Number} [pagesize] 
     * @param {Number} [page] 
     * @param {String} [filter] #Discussion  The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.  An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.  Filters are immutable and non-expiring. An application can safely \"bake in\" any filters that are created, it is not necessary (or advisable) to create filters at runtime.  The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).  #Safety  Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.  Note that this does not mean that \"safe\" filter is mearly an \"unsafe\" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).  When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the \"safe\" data is the only accessible data it will be returned even in \"unsafe\" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.  #Built In Filters  The following filters are built in:  default, each type documents which fields are returned under the default filter (for example, answers). withbody, which is default plus the *.body fields none, which is empty total, which includes just .total  #Compatibility with V1.x  For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters. 
     * @param {String} [callback] All API responses are JSON, we do support JSONP with the callback query parameter. 
     * @param {module:api/DefaultApi~usersIdNotificationsUnreadGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/NotificationsInner>}
     */
    usersIdNotificationsUnreadGet(id, site, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling usersIdNotificationsUnreadGet");
      }
      // verify the required parameter 'site' is set
      if (site === undefined || site === null) {
        throw new Error("Missing the required parameter 'site' when calling usersIdNotificationsUnreadGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'pagesize': opts['pagesize'],
        'page': opts['page'],
        'filter': opts['filter'],
        'callback': opts['callback'],
        'site': site
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [NotificationsInner];
      return this.apiClient.callApi(
        '/users/{id}/notifications/unread', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersIdPrivilegesGet operation.
     * @callback module:api/DefaultApi~usersIdPrivilegesGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PrivilegesInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the privileges a user has.   Applications are encouraged to calculate privileges themselves, without repeated queries to this method. A simple check against the results returned by /privileges and user.user_type would be sufficient.   {id} can contain only a single, to find it programatically look for user_id on user or shallow_user objects.   This method returns a list of privileges. 
     * @param {Number} id 
     * @param {String} site Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. \"stackoverflow.com\"), or a short form identified by api_site_parameter on the site object. 
     * @param {Object} opts Optional parameters
     * @param {Number} [pagesize] 
     * @param {Number} [page] 
     * @param {String} [filter] #Discussion  The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.  An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.  Filters are immutable and non-expiring. An application can safely \"bake in\" any filters that are created, it is not necessary (or advisable) to create filters at runtime.  The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).  #Safety  Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.  Note that this does not mean that \"safe\" filter is mearly an \"unsafe\" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).  When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the \"safe\" data is the only accessible data it will be returned even in \"unsafe\" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.  #Built In Filters  The following filters are built in:  default, each type documents which fields are returned under the default filter (for example, answers). withbody, which is default plus the *.body fields none, which is empty total, which includes just .total  #Compatibility with V1.x  For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters. 
     * @param {String} [callback] All API responses are JSON, we do support JSONP with the callback query parameter. 
     * @param {module:api/DefaultApi~usersIdPrivilegesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PrivilegesInner>}
     */
    usersIdPrivilegesGet(id, site, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling usersIdPrivilegesGet");
      }
      // verify the required parameter 'site' is set
      if (site === undefined || site === null) {
        throw new Error("Missing the required parameter 'site' when calling usersIdPrivilegesGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'pagesize': opts['pagesize'],
        'page': opts['page'],
        'filter': opts['filter'],
        'callback': opts['callback'],
        'site': site
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [PrivilegesInner];
      return this.apiClient.callApi(
        '/users/{id}/privileges', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersIdReputationHistoryFullGet operation.
     * @callback module:api/DefaultApi~usersIdReputationHistoryFullGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ReputationHistoryInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a user's full reputation history, including private events.   This method requires an access_token, with a scope containing \"private_info\".   This method returns a list of reputation_history. 
     * @param {Number} id 
     * @param {String} site Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. \"stackoverflow.com\"), or a short form identified by api_site_parameter on the site object. 
     * @param {Object} opts Optional parameters
     * @param {Number} [pagesize] 
     * @param {Number} [page] 
     * @param {String} [filter] #Discussion  The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.  An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.  Filters are immutable and non-expiring. An application can safely \"bake in\" any filters that are created, it is not necessary (or advisable) to create filters at runtime.  The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).  #Safety  Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.  Note that this does not mean that \"safe\" filter is mearly an \"unsafe\" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).  When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the \"safe\" data is the only accessible data it will be returned even in \"unsafe\" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.  #Built In Filters  The following filters are built in:  default, each type documents which fields are returned under the default filter (for example, answers). withbody, which is default plus the *.body fields none, which is empty total, which includes just .total  #Compatibility with V1.x  For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters. 
     * @param {String} [callback] All API responses are JSON, we do support JSONP with the callback query parameter. 
     * @param {module:api/DefaultApi~usersIdReputationHistoryFullGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ReputationHistoryInner>}
     */
    usersIdReputationHistoryFullGet(id, site, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling usersIdReputationHistoryFullGet");
      }
      // verify the required parameter 'site' is set
      if (site === undefined || site === null) {
        throw new Error("Missing the required parameter 'site' when calling usersIdReputationHistoryFullGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'pagesize': opts['pagesize'],
        'page': opts['page'],
        'filter': opts['filter'],
        'callback': opts['callback'],
        'site': site
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [ReputationHistoryInner];
      return this.apiClient.callApi(
        '/users/{id}/reputation-history/full', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersIdTagsTagsTopAnswersGet operation.
     * @callback module:api/DefaultApi~usersIdTagsTagsTopAnswersGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/AnswersInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the top 30 answers a user has posted in response to questions with the given tags.   {id} can contain a single id, to find it programatically look for user_id on user or shallow_user objects. {tags} is limited to 5 tags, passing more will result in an error.   The sorts accepted by this method operate on the follow fields of the answer object:  - activity - last_activity_date  - creation - creation_date  - votes - score   activity is the default sort.    It is possible to create moderately complex queries using sort, min, max, fromdate, and todate.    This method returns a list of answers. 
     * @param {Number} id 
     * @param {String} tags String list (semicolon delimited).
     * @param {String} site Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. \"stackoverflow.com\"), or a short form identified by api_site_parameter on the site object. 
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [order] 
     * @param {String} [max] sort = activity => date sort = creation => date sort = votes => number 
     * @param {String} [min] sort = activity => date sort = creation => date sort = votes => number 
     * @param {module:model/String} [sort] 
     * @param {Number} [fromdate] Unix date.
     * @param {Number} [todate] Unix date.
     * @param {Number} [pagesize] 
     * @param {Number} [page] 
     * @param {String} [filter] #Discussion  The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.  An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.  Filters are immutable and non-expiring. An application can safely \"bake in\" any filters that are created, it is not necessary (or advisable) to create filters at runtime.  The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).  #Safety  Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.  Note that this does not mean that \"safe\" filter is mearly an \"unsafe\" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).  When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the \"safe\" data is the only accessible data it will be returned even in \"unsafe\" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.  #Built In Filters  The following filters are built in:  default, each type documents which fields are returned under the default filter (for example, answers). withbody, which is default plus the *.body fields none, which is empty total, which includes just .total  #Compatibility with V1.x  For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters. 
     * @param {String} [callback] All API responses are JSON, we do support JSONP with the callback query parameter. 
     * @param {module:api/DefaultApi~usersIdTagsTagsTopAnswersGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/AnswersInner>}
     */
    usersIdTagsTagsTopAnswersGet(id, tags, site, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling usersIdTagsTagsTopAnswersGet");
      }
      // verify the required parameter 'tags' is set
      if (tags === undefined || tags === null) {
        throw new Error("Missing the required parameter 'tags' when calling usersIdTagsTagsTopAnswersGet");
      }
      // verify the required parameter 'site' is set
      if (site === undefined || site === null) {
        throw new Error("Missing the required parameter 'site' when calling usersIdTagsTagsTopAnswersGet");
      }

      let pathParams = {
        'id': id,
        'tags': tags
      };
      let queryParams = {
        'order': opts['order'],
        'max': opts['max'],
        'min': opts['min'],
        'sort': opts['sort'],
        'fromdate': opts['fromdate'],
        'todate': opts['todate'],
        'pagesize': opts['pagesize'],
        'page': opts['page'],
        'filter': opts['filter'],
        'callback': opts['callback'],
        'site': site
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [AnswersInner];
      return this.apiClient.callApi(
        '/users/{id}/tags/{tags}/top-answers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersIdTagsTagsTopQuestionsGet operation.
     * @callback module:api/DefaultApi~usersIdTagsTagsTopQuestionsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/QuestionsInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the top 30 questions a user has asked with the given tags.   {id} can contain a single id, to find it programatically look for user_id on user or shallow_user objects. {tags} is limited to 5 tags, passing more will result in an error.   The sorts accepted by this method operate on the follow fields of the question object:  - activity - last_activity_date  - creation - creation_date  - votes - score   activity is the default sort.    It is possible to create moderately complex queries using sort, min, max, fromdate, and todate.    This method returns a list of questions. 
     * @param {Number} id 
     * @param {String} tags String list (semicolon delimited).
     * @param {String} site Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. \"stackoverflow.com\"), or a short form identified by api_site_parameter on the site object. 
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [order] 
     * @param {String} [max] sort = activity => date sort = creation => date sort = votes => number 
     * @param {String} [min] sort = activity => date sort = creation => date sort = votes => number 
     * @param {module:model/String} [sort] 
     * @param {Number} [fromdate] Unix date.
     * @param {Number} [todate] Unix date.
     * @param {Number} [pagesize] 
     * @param {Number} [page] 
     * @param {String} [filter] #Discussion  The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.  An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.  Filters are immutable and non-expiring. An application can safely \"bake in\" any filters that are created, it is not necessary (or advisable) to create filters at runtime.  The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).  #Safety  Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.  Note that this does not mean that \"safe\" filter is mearly an \"unsafe\" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).  When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the \"safe\" data is the only accessible data it will be returned even in \"unsafe\" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.  #Built In Filters  The following filters are built in:  default, each type documents which fields are returned under the default filter (for example, answers). withbody, which is default plus the *.body fields none, which is empty total, which includes just .total  #Compatibility with V1.x  For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters. 
     * @param {String} [callback] All API responses are JSON, we do support JSONP with the callback query parameter. 
     * @param {module:api/DefaultApi~usersIdTagsTagsTopQuestionsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/QuestionsInner>}
     */
    usersIdTagsTagsTopQuestionsGet(id, tags, site, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling usersIdTagsTagsTopQuestionsGet");
      }
      // verify the required parameter 'tags' is set
      if (tags === undefined || tags === null) {
        throw new Error("Missing the required parameter 'tags' when calling usersIdTagsTagsTopQuestionsGet");
      }
      // verify the required parameter 'site' is set
      if (site === undefined || site === null) {
        throw new Error("Missing the required parameter 'site' when calling usersIdTagsTagsTopQuestionsGet");
      }

      let pathParams = {
        'id': id,
        'tags': tags
      };
      let queryParams = {
        'order': opts['order'],
        'max': opts['max'],
        'min': opts['min'],
        'sort': opts['sort'],
        'fromdate': opts['fromdate'],
        'todate': opts['todate'],
        'pagesize': opts['pagesize'],
        'page': opts['page'],
        'filter': opts['filter'],
        'callback': opts['callback'],
        'site': site
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [QuestionsInner];
      return this.apiClient.callApi(
        '/users/{id}/tags/{tags}/top-questions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersIdTopAnswerTagsGet operation.
     * @callback module:api/DefaultApi~usersIdTopAnswerTagsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TopTagObjectsInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a single user's top tags by answer score.   This a subset of the data returned on a user's tags tab.   {id} can contain a single id, to find it programatically look for user_id on user or shallow_user objects.   This method returns a list of top_tag objects. 
     * @param {Number} id 
     * @param {String} site Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. \"stackoverflow.com\"), or a short form identified by api_site_parameter on the site object. 
     * @param {Object} opts Optional parameters
     * @param {Number} [pagesize] 
     * @param {Number} [page] 
     * @param {String} [filter] #Discussion  The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.  An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.  Filters are immutable and non-expiring. An application can safely \"bake in\" any filters that are created, it is not necessary (or advisable) to create filters at runtime.  The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).  #Safety  Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.  Note that this does not mean that \"safe\" filter is mearly an \"unsafe\" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).  When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the \"safe\" data is the only accessible data it will be returned even in \"unsafe\" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.  #Built In Filters  The following filters are built in:  default, each type documents which fields are returned under the default filter (for example, answers). withbody, which is default plus the *.body fields none, which is empty total, which includes just .total  #Compatibility with V1.x  For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters. 
     * @param {String} [callback] All API responses are JSON, we do support JSONP with the callback query parameter. 
     * @param {module:api/DefaultApi~usersIdTopAnswerTagsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TopTagObjectsInner>}
     */
    usersIdTopAnswerTagsGet(id, site, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling usersIdTopAnswerTagsGet");
      }
      // verify the required parameter 'site' is set
      if (site === undefined || site === null) {
        throw new Error("Missing the required parameter 'site' when calling usersIdTopAnswerTagsGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'pagesize': opts['pagesize'],
        'page': opts['page'],
        'filter': opts['filter'],
        'callback': opts['callback'],
        'site': site
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [TopTagObjectsInner];
      return this.apiClient.callApi(
        '/users/{id}/top-answer-tags', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersIdTopQuestionTagsGet operation.
     * @callback module:api/DefaultApi~usersIdTopQuestionTagsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TopTagObjectsInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a single user's top tags by question score.   This a subset of the data returned on a user's tags tab.   {id} can contain a single id, to find it programatically look for user_id on user or shallow_user objects.   This method returns a list of top_tag objects. 
     * @param {Number} id 
     * @param {String} site Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. \"stackoverflow.com\"), or a short form identified by api_site_parameter on the site object. 
     * @param {Object} opts Optional parameters
     * @param {Number} [pagesize] 
     * @param {Number} [page] 
     * @param {String} [filter] #Discussion  The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.  An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.  Filters are immutable and non-expiring. An application can safely \"bake in\" any filters that are created, it is not necessary (or advisable) to create filters at runtime.  The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).  #Safety  Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.  Note that this does not mean that \"safe\" filter is mearly an \"unsafe\" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).  When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the \"safe\" data is the only accessible data it will be returned even in \"unsafe\" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.  #Built In Filters  The following filters are built in:  default, each type documents which fields are returned under the default filter (for example, answers). withbody, which is default plus the *.body fields none, which is empty total, which includes just .total  #Compatibility with V1.x  For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters. 
     * @param {String} [callback] All API responses are JSON, we do support JSONP with the callback query parameter. 
     * @param {module:api/DefaultApi~usersIdTopQuestionTagsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TopTagObjectsInner>}
     */
    usersIdTopQuestionTagsGet(id, site, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling usersIdTopQuestionTagsGet");
      }
      // verify the required parameter 'site' is set
      if (site === undefined || site === null) {
        throw new Error("Missing the required parameter 'site' when calling usersIdTopQuestionTagsGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'pagesize': opts['pagesize'],
        'page': opts['page'],
        'filter': opts['filter'],
        'callback': opts['callback'],
        'site': site
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [TopTagObjectsInner];
      return this.apiClient.callApi(
        '/users/{id}/top-question-tags', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersIdWritePermissionsGet operation.
     * @callback module:api/DefaultApi~usersIdWritePermissionsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/WritePermissionsInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the write permissions a user has via the api.   The Stack Exchange API gives users the ability to create, edit, and delete certain types. This method returns whether the passed user is capable of performing those actions at all, as well as how many times a day they can.   This method does not consider the user's current quota (ie. if they've already exhausted it for today) nor any additional restrictions on write access, such as editing deleted comments.   This method returns a list of write_permissions. 
     * @param {Number} id 
     * @param {String} site Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. \"stackoverflow.com\"), or a short form identified by api_site_parameter on the site object. 
     * @param {Object} opts Optional parameters
     * @param {Number} [pagesize] 
     * @param {Number} [page] 
     * @param {String} [filter] #Discussion  The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.  An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.  Filters are immutable and non-expiring. An application can safely \"bake in\" any filters that are created, it is not necessary (or advisable) to create filters at runtime.  The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).  #Safety  Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.  Note that this does not mean that \"safe\" filter is mearly an \"unsafe\" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).  When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the \"safe\" data is the only accessible data it will be returned even in \"unsafe\" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.  #Built In Filters  The following filters are built in:  default, each type documents which fields are returned under the default filter (for example, answers). withbody, which is default plus the *.body fields none, which is empty total, which includes just .total  #Compatibility with V1.x  For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters. 
     * @param {String} [callback] All API responses are JSON, we do support JSONP with the callback query parameter. 
     * @param {module:api/DefaultApi~usersIdWritePermissionsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/WritePermissionsInner>}
     */
    usersIdWritePermissionsGet(id, site, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling usersIdWritePermissionsGet");
      }
      // verify the required parameter 'site' is set
      if (site === undefined || site === null) {
        throw new Error("Missing the required parameter 'site' when calling usersIdWritePermissionsGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'pagesize': opts['pagesize'],
        'page': opts['page'],
        'filter': opts['filter'],
        'callback': opts['callback'],
        'site': site
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [WritePermissionsInner];
      return this.apiClient.callApi(
        '/users/{id}/write-permissions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersIdsAnswersGet operation.
     * @callback module:api/DefaultApi~usersIdsAnswersGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/AnswersInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the answers the users in {ids} have posted.   {ids} can contain up to 100 semicolon delimited ids, to find ids programatically look for user_id on user or shallow_user objects.   The sorts accepted by this method operate on the follow fields of the answer object:  - activity - last_activity_date  - creation - creation_date  - votes - score   activity is the default sort.    It is possible to create moderately complex queries using sort, min, max, fromdate, and todate.    This method returns a list of answers. 
     * @param {String} ids Number list (semicolon delimited).
     * @param {String} site Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. \"stackoverflow.com\"), or a short form identified by api_site_parameter on the site object. 
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [order] 
     * @param {String} [max] sort = activity => date sort = creation => date sort = votes => number 
     * @param {String} [min] sort = activity => date sort = creation => date sort = votes => number 
     * @param {module:model/String} [sort] 
     * @param {Number} [fromdate] Unix date.
     * @param {Number} [todate] Unix date.
     * @param {Number} [pagesize] 
     * @param {Number} [page] 
     * @param {String} [filter] #Discussion  The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.  An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.  Filters are immutable and non-expiring. An application can safely \"bake in\" any filters that are created, it is not necessary (or advisable) to create filters at runtime.  The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).  #Safety  Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.  Note that this does not mean that \"safe\" filter is mearly an \"unsafe\" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).  When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the \"safe\" data is the only accessible data it will be returned even in \"unsafe\" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.  #Built In Filters  The following filters are built in:  default, each type documents which fields are returned under the default filter (for example, answers). withbody, which is default plus the *.body fields none, which is empty total, which includes just .total  #Compatibility with V1.x  For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters. 
     * @param {String} [callback] All API responses are JSON, we do support JSONP with the callback query parameter. 
     * @param {module:api/DefaultApi~usersIdsAnswersGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/AnswersInner>}
     */
    usersIdsAnswersGet(ids, site, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'ids' is set
      if (ids === undefined || ids === null) {
        throw new Error("Missing the required parameter 'ids' when calling usersIdsAnswersGet");
      }
      // verify the required parameter 'site' is set
      if (site === undefined || site === null) {
        throw new Error("Missing the required parameter 'site' when calling usersIdsAnswersGet");
      }

      let pathParams = {
        'ids': ids
      };
      let queryParams = {
        'order': opts['order'],
        'max': opts['max'],
        'min': opts['min'],
        'sort': opts['sort'],
        'fromdate': opts['fromdate'],
        'todate': opts['todate'],
        'pagesize': opts['pagesize'],
        'page': opts['page'],
        'filter': opts['filter'],
        'callback': opts['callback'],
        'site': site
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [AnswersInner];
      return this.apiClient.callApi(
        '/users/{ids}/answers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersIdsAssociatedGet operation.
     * @callback module:api/DefaultApi~usersIdsAssociatedGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/NetworkUsersInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns all of a user's associated accounts, given their account_ids in {ids}.   {ids} can contain up to 100 semicolon delimited ids, to find ids programatically look for account_id on user objects.   This method returns a list of network_users. 
     * @param {String} ids Number list (semicolon delimited).
     * @param {Object} opts Optional parameters
     * @param {Number} [pagesize] 
     * @param {Number} [page] 
     * @param {String} [filter] #Discussion  The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.  An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.  Filters are immutable and non-expiring. An application can safely \"bake in\" any filters that are created, it is not necessary (or advisable) to create filters at runtime.  The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).  #Safety  Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.  Note that this does not mean that \"safe\" filter is mearly an \"unsafe\" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).  When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the \"safe\" data is the only accessible data it will be returned even in \"unsafe\" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.  #Built In Filters  The following filters are built in:  default, each type documents which fields are returned under the default filter (for example, answers). withbody, which is default plus the *.body fields none, which is empty total, which includes just .total  #Compatibility with V1.x  For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters. 
     * @param {String} [callback] All API responses are JSON, we do support JSONP with the callback query parameter. 
     * @param {module:api/DefaultApi~usersIdsAssociatedGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/NetworkUsersInner>}
     */
    usersIdsAssociatedGet(ids, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'ids' is set
      if (ids === undefined || ids === null) {
        throw new Error("Missing the required parameter 'ids' when calling usersIdsAssociatedGet");
      }

      let pathParams = {
        'ids': ids
      };
      let queryParams = {
        'pagesize': opts['pagesize'],
        'page': opts['page'],
        'filter': opts['filter'],
        'callback': opts['callback']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [NetworkUsersInner];
      return this.apiClient.callApi(
        '/users/{ids}/associated', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersIdsBadgesGet operation.
     * @callback module:api/DefaultApi~usersIdsBadgesGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/BadgesInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the badges the users in {ids} have earned.   Badge sorts are a tad complicated. For the purposes of sorting (and min/max) tag_based is considered to be greater than named.   This means that you can get a list of all tag based badges a user has by passing min=tag_based, and conversely all the named badges by passing max=named, with sort=type.   For ranks, bronze is greater than silver which is greater than gold. Along with sort=rank, set max=gold for just gold badges, max=silver&min=silver for just silver, and min=bronze for just bronze.   rank is the default sort.   {ids} can contain up to 100 semicolon delimited ids, to find ids programatically look for user_id on user or shallow_user objects.   This method returns a list of badges. 
     * @param {String} ids Number list (semicolon delimited).
     * @param {String} site Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. \"stackoverflow.com\"), or a short form identified by api_site_parameter on the site object. 
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [order] 
     * @param {String} [max] sort = rank => string sort = name => string sort = type => string sort = awarded => date 
     * @param {String} [min] sort = rank => string sort = name => string sort = type => string sort = awarded => date 
     * @param {module:model/String} [sort] 
     * @param {Number} [fromdate] Unix date.
     * @param {Number} [todate] Unix date.
     * @param {Number} [pagesize] 
     * @param {Number} [page] 
     * @param {String} [filter] #Discussion  The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.  An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.  Filters are immutable and non-expiring. An application can safely \"bake in\" any filters that are created, it is not necessary (or advisable) to create filters at runtime.  The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).  #Safety  Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.  Note that this does not mean that \"safe\" filter is mearly an \"unsafe\" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).  When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the \"safe\" data is the only accessible data it will be returned even in \"unsafe\" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.  #Built In Filters  The following filters are built in:  default, each type documents which fields are returned under the default filter (for example, answers). withbody, which is default plus the *.body fields none, which is empty total, which includes just .total  #Compatibility with V1.x  For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters. 
     * @param {String} [callback] All API responses are JSON, we do support JSONP with the callback query parameter. 
     * @param {module:api/DefaultApi~usersIdsBadgesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/BadgesInner>}
     */
    usersIdsBadgesGet(ids, site, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'ids' is set
      if (ids === undefined || ids === null) {
        throw new Error("Missing the required parameter 'ids' when calling usersIdsBadgesGet");
      }
      // verify the required parameter 'site' is set
      if (site === undefined || site === null) {
        throw new Error("Missing the required parameter 'site' when calling usersIdsBadgesGet");
      }

      let pathParams = {
        'ids': ids
      };
      let queryParams = {
        'order': opts['order'],
        'max': opts['max'],
        'min': opts['min'],
        'sort': opts['sort'],
        'fromdate': opts['fromdate'],
        'todate': opts['todate'],
        'pagesize': opts['pagesize'],
        'page': opts['page'],
        'filter': opts['filter'],
        'callback': opts['callback'],
        'site': site
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [BadgesInner];
      return this.apiClient.callApi(
        '/users/{ids}/badges', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersIdsCommentsGet operation.
     * @callback module:api/DefaultApi~usersIdsCommentsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CommentsInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the comments posted by users in {ids}.   {ids} can contain up to 100 semicolon delimited ids, to find ids programatically look for user_id on user or shallow_user objects.   The sorts accepted by this method operate on the follow fields of the comment object:  - creation - creation_date  - votes - score   creation is the default sort.    It is possible to create moderately complex queries using sort, min, max, fromdate, and todate.    This method returns a list of comments. 
     * @param {String} ids Number list (semicolon delimited).
     * @param {String} site Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. \"stackoverflow.com\"), or a short form identified by api_site_parameter on the site object. 
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [order] 
     * @param {String} [max] sort = creation => date sort = votes => number 
     * @param {String} [min] sort = creation => date sort = votes => number 
     * @param {module:model/String} [sort] 
     * @param {Number} [fromdate] Unix date.
     * @param {Number} [todate] Unix date.
     * @param {Number} [pagesize] 
     * @param {Number} [page] 
     * @param {String} [filter] #Discussion  The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.  An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.  Filters are immutable and non-expiring. An application can safely \"bake in\" any filters that are created, it is not necessary (or advisable) to create filters at runtime.  The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).  #Safety  Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.  Note that this does not mean that \"safe\" filter is mearly an \"unsafe\" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).  When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the \"safe\" data is the only accessible data it will be returned even in \"unsafe\" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.  #Built In Filters  The following filters are built in:  default, each type documents which fields are returned under the default filter (for example, answers). withbody, which is default plus the *.body fields none, which is empty total, which includes just .total  #Compatibility with V1.x  For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters. 
     * @param {String} [callback] All API responses are JSON, we do support JSONP with the callback query parameter. 
     * @param {module:api/DefaultApi~usersIdsCommentsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CommentsInner>}
     */
    usersIdsCommentsGet(ids, site, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'ids' is set
      if (ids === undefined || ids === null) {
        throw new Error("Missing the required parameter 'ids' when calling usersIdsCommentsGet");
      }
      // verify the required parameter 'site' is set
      if (site === undefined || site === null) {
        throw new Error("Missing the required parameter 'site' when calling usersIdsCommentsGet");
      }

      let pathParams = {
        'ids': ids
      };
      let queryParams = {
        'order': opts['order'],
        'max': opts['max'],
        'min': opts['min'],
        'sort': opts['sort'],
        'fromdate': opts['fromdate'],
        'todate': opts['todate'],
        'pagesize': opts['pagesize'],
        'page': opts['page'],
        'filter': opts['filter'],
        'callback': opts['callback'],
        'site': site
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [CommentsInner];
      return this.apiClient.callApi(
        '/users/{ids}/comments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersIdsCommentsToidGet operation.
     * @callback module:api/DefaultApi~usersIdsCommentsToidGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CommentsInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the comments that the users in {ids} have posted in reply to the single user identified in {toid}.   This method is useful for extracting conversations, especially over time or across multiple posts.   {ids} can contain up to 100 semicolon delimited ids, to find ids programatically look for user_id on user or shallow_user objects. {toid} can contain only 1 id, found in the same manner as those in {ids}.   The sorts accepted by this method operate on the follow fields of the comment object:  - creation - creation_date  - votes - score   creation is the default sort.    It is possible to create moderately complex queries using sort, min, max, fromdate, and todate.    This method returns a list of comments. 
     * @param {String} ids Number list (semicolon delimited).
     * @param {Number} toid 
     * @param {String} site Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. \"stackoverflow.com\"), or a short form identified by api_site_parameter on the site object. 
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [order] 
     * @param {String} [max] sort = creation => date sort = votes => number 
     * @param {String} [min] sort = creation => date sort = votes => number 
     * @param {module:model/String} [sort] 
     * @param {Number} [fromdate] Unix date.
     * @param {Number} [todate] Unix date.
     * @param {Number} [pagesize] 
     * @param {Number} [page] 
     * @param {String} [filter] #Discussion  The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.  An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.  Filters are immutable and non-expiring. An application can safely \"bake in\" any filters that are created, it is not necessary (or advisable) to create filters at runtime.  The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).  #Safety  Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.  Note that this does not mean that \"safe\" filter is mearly an \"unsafe\" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).  When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the \"safe\" data is the only accessible data it will be returned even in \"unsafe\" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.  #Built In Filters  The following filters are built in:  default, each type documents which fields are returned under the default filter (for example, answers). withbody, which is default plus the *.body fields none, which is empty total, which includes just .total  #Compatibility with V1.x  For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters. 
     * @param {String} [callback] All API responses are JSON, we do support JSONP with the callback query parameter. 
     * @param {module:api/DefaultApi~usersIdsCommentsToidGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CommentsInner>}
     */
    usersIdsCommentsToidGet(ids, toid, site, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'ids' is set
      if (ids === undefined || ids === null) {
        throw new Error("Missing the required parameter 'ids' when calling usersIdsCommentsToidGet");
      }
      // verify the required parameter 'toid' is set
      if (toid === undefined || toid === null) {
        throw new Error("Missing the required parameter 'toid' when calling usersIdsCommentsToidGet");
      }
      // verify the required parameter 'site' is set
      if (site === undefined || site === null) {
        throw new Error("Missing the required parameter 'site' when calling usersIdsCommentsToidGet");
      }

      let pathParams = {
        'ids': ids,
        'toid': toid
      };
      let queryParams = {
        'order': opts['order'],
        'max': opts['max'],
        'min': opts['min'],
        'sort': opts['sort'],
        'fromdate': opts['fromdate'],
        'todate': opts['todate'],
        'pagesize': opts['pagesize'],
        'page': opts['page'],
        'filter': opts['filter'],
        'callback': opts['callback'],
        'site': site
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [CommentsInner];
      return this.apiClient.callApi(
        '/users/{ids}/comments/{toid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersIdsFavoritesGet operation.
     * @callback module:api/DefaultApi~usersIdsFavoritesGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/QuestionsInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the questions that users in {ids} have favorited.   This method is effectively a view onto a user's favorites tab.   {ids} can contain up to 100 semicolon delimited ids, to find ids programatically look for user_id on user or shallow_user objects.   The sorts accepted by this method operate on the follow fields of the question object:  - activity - last_activity_date  - creation - creation_date  - votes - score  - added - when the user favorited the question   activity is the default sort.    It is possible to create moderately complex queries using sort, min, max, fromdate, and todate.    This method returns a list of questions. 
     * @param {String} ids Number list (semicolon delimited).
     * @param {String} site Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. \"stackoverflow.com\"), or a short form identified by api_site_parameter on the site object. 
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [order] 
     * @param {String} [max] sort = activity => date sort = creation => date sort = votes => number sort = added => date 
     * @param {String} [min] sort = activity => date sort = creation => date sort = votes => number sort = added => date 
     * @param {module:model/String} [sort] 
     * @param {Number} [fromdate] Unix date.
     * @param {Number} [todate] Unix date.
     * @param {Number} [pagesize] 
     * @param {Number} [page] 
     * @param {String} [filter] #Discussion  The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.  An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.  Filters are immutable and non-expiring. An application can safely \"bake in\" any filters that are created, it is not necessary (or advisable) to create filters at runtime.  The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).  #Safety  Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.  Note that this does not mean that \"safe\" filter is mearly an \"unsafe\" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).  When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the \"safe\" data is the only accessible data it will be returned even in \"unsafe\" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.  #Built In Filters  The following filters are built in:  default, each type documents which fields are returned under the default filter (for example, answers). withbody, which is default plus the *.body fields none, which is empty total, which includes just .total  #Compatibility with V1.x  For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters. 
     * @param {String} [callback] All API responses are JSON, we do support JSONP with the callback query parameter. 
     * @param {module:api/DefaultApi~usersIdsFavoritesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/QuestionsInner>}
     */
    usersIdsFavoritesGet(ids, site, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'ids' is set
      if (ids === undefined || ids === null) {
        throw new Error("Missing the required parameter 'ids' when calling usersIdsFavoritesGet");
      }
      // verify the required parameter 'site' is set
      if (site === undefined || site === null) {
        throw new Error("Missing the required parameter 'site' when calling usersIdsFavoritesGet");
      }

      let pathParams = {
        'ids': ids
      };
      let queryParams = {
        'order': opts['order'],
        'max': opts['max'],
        'min': opts['min'],
        'sort': opts['sort'],
        'fromdate': opts['fromdate'],
        'todate': opts['todate'],
        'pagesize': opts['pagesize'],
        'page': opts['page'],
        'filter': opts['filter'],
        'callback': opts['callback'],
        'site': site
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [QuestionsInner];
      return this.apiClient.callApi(
        '/users/{ids}/favorites', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersIdsGet operation.
     * @callback module:api/DefaultApi~usersIdsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UsersInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the users identified in ids in {ids}.   Typically this method will be called to fetch user profiles when you have obtained user ids from some other source, such as /questions.   {ids} can contain up to 100 semicolon delimited ids, to find ids programatically look for user_id on user or shallow_user objects.   The sorts accepted by this method operate on the follow fields of the user object:  - reputation - reputation  - creation - creation_date  - name - display_name  - modified - last_modified_date   reputation is the default sort.    It is possible to create moderately complex queries using sort, min, max, fromdate, and todate.    This method returns a list of users. 
     * @param {String} ids Number list (semicolon delimited).
     * @param {String} site Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. \"stackoverflow.com\"), or a short form identified by api_site_parameter on the site object. 
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [order] 
     * @param {String} [max] sort = reputation => number sort = creation => date sort = name => string sort = modified => date 
     * @param {String} [min] sort = reputation => number sort = creation => date sort = name => string sort = modified => date 
     * @param {module:model/String} [sort] 
     * @param {Number} [fromdate] Unix date.
     * @param {Number} [todate] Unix date.
     * @param {Number} [pagesize] 
     * @param {Number} [page] 
     * @param {String} [filter] #Discussion  The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.  An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.  Filters are immutable and non-expiring. An application can safely \"bake in\" any filters that are created, it is not necessary (or advisable) to create filters at runtime.  The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).  #Safety  Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.  Note that this does not mean that \"safe\" filter is mearly an \"unsafe\" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).  When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the \"safe\" data is the only accessible data it will be returned even in \"unsafe\" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.  #Built In Filters  The following filters are built in:  default, each type documents which fields are returned under the default filter (for example, answers). withbody, which is default plus the *.body fields none, which is empty total, which includes just .total  #Compatibility with V1.x  For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters. 
     * @param {String} [callback] All API responses are JSON, we do support JSONP with the callback query parameter. 
     * @param {module:api/DefaultApi~usersIdsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UsersInner>}
     */
    usersIdsGet(ids, site, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'ids' is set
      if (ids === undefined || ids === null) {
        throw new Error("Missing the required parameter 'ids' when calling usersIdsGet");
      }
      // verify the required parameter 'site' is set
      if (site === undefined || site === null) {
        throw new Error("Missing the required parameter 'site' when calling usersIdsGet");
      }

      let pathParams = {
        'ids': ids
      };
      let queryParams = {
        'order': opts['order'],
        'max': opts['max'],
        'min': opts['min'],
        'sort': opts['sort'],
        'fromdate': opts['fromdate'],
        'todate': opts['todate'],
        'pagesize': opts['pagesize'],
        'page': opts['page'],
        'filter': opts['filter'],
        'callback': opts['callback'],
        'site': site
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [UsersInner];
      return this.apiClient.callApi(
        '/users/{ids}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersIdsMentionedGet operation.
     * @callback module:api/DefaultApi~usersIdsMentionedGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/CommentsInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets all the comments that the users in {ids} were mentioned in.   Note, to count as a mention the comment must be considered to be \"in reply to\" a user. Most importantly, this means that a comment can only be in reply to a single user.   {ids} can contain up to 100 semicolon delimited ids, to find ids programatically look for user_id on user or shallow_user objects.   The sorts accepted by this method operate on the follow fields of the comment object:  - creation - creation_date  - votes - score   It is possible to create moderately complex queries using sort, min, max, fromdate, and todate.    This method returns a list of comments. 
     * @param {String} ids Number list (semicolon delimited).
     * @param {String} site Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. \"stackoverflow.com\"), or a short form identified by api_site_parameter on the site object. 
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [order] 
     * @param {String} [max] sort = creation => date sort = votes => number 
     * @param {String} [min] sort = creation => date sort = votes => number 
     * @param {module:model/String} [sort] 
     * @param {Number} [fromdate] Unix date.
     * @param {Number} [todate] Unix date.
     * @param {Number} [pagesize] 
     * @param {Number} [page] 
     * @param {String} [filter] #Discussion  The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.  An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.  Filters are immutable and non-expiring. An application can safely \"bake in\" any filters that are created, it is not necessary (or advisable) to create filters at runtime.  The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).  #Safety  Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.  Note that this does not mean that \"safe\" filter is mearly an \"unsafe\" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).  When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the \"safe\" data is the only accessible data it will be returned even in \"unsafe\" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.  #Built In Filters  The following filters are built in:  default, each type documents which fields are returned under the default filter (for example, answers). withbody, which is default plus the *.body fields none, which is empty total, which includes just .total  #Compatibility with V1.x  For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters. 
     * @param {String} [callback] All API responses are JSON, we do support JSONP with the callback query parameter. 
     * @param {module:api/DefaultApi~usersIdsMentionedGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/CommentsInner>}
     */
    usersIdsMentionedGet(ids, site, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'ids' is set
      if (ids === undefined || ids === null) {
        throw new Error("Missing the required parameter 'ids' when calling usersIdsMentionedGet");
      }
      // verify the required parameter 'site' is set
      if (site === undefined || site === null) {
        throw new Error("Missing the required parameter 'site' when calling usersIdsMentionedGet");
      }

      let pathParams = {
        'ids': ids
      };
      let queryParams = {
        'order': opts['order'],
        'max': opts['max'],
        'min': opts['min'],
        'sort': opts['sort'],
        'fromdate': opts['fromdate'],
        'todate': opts['todate'],
        'pagesize': opts['pagesize'],
        'page': opts['page'],
        'filter': opts['filter'],
        'callback': opts['callback'],
        'site': site
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [CommentsInner];
      return this.apiClient.callApi(
        '/users/{ids}/mentioned', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersIdsMergesGet operation.
     * @callback module:api/DefaultApi~usersIdsMergesGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/AccountMergeInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a record of merges that have occurred involving the passed account ids.   This method allows you to take now invalid account ids and find what account they've become, or take currently valid account ids and find which ids were equivalent in the past.   This is most useful when confirming that an account_id is in fact \"new\" to an application.   Account merges can happen for a wide range of reasons, applications should not make assumptions that merges have particular causes.   Note that accounts are managed at a network level, users on a site may be merged due to an account level merge but there is no guarantee that a merge has an effect on any particular site.   This method returns a list of account_merge. 
     * @param {String} ids Number list (semicolon delimited).
     * @param {Object} opts Optional parameters
     * @param {Number} [pagesize] 
     * @param {Number} [page] 
     * @param {String} [filter] #Discussion  The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.  An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.  Filters are immutable and non-expiring. An application can safely \"bake in\" any filters that are created, it is not necessary (or advisable) to create filters at runtime.  The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).  #Safety  Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.  Note that this does not mean that \"safe\" filter is mearly an \"unsafe\" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).  When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the \"safe\" data is the only accessible data it will be returned even in \"unsafe\" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.  #Built In Filters  The following filters are built in:  default, each type documents which fields are returned under the default filter (for example, answers). withbody, which is default plus the *.body fields none, which is empty total, which includes just .total  #Compatibility with V1.x  For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters. 
     * @param {String} [callback] All API responses are JSON, we do support JSONP with the callback query parameter. 
     * @param {module:api/DefaultApi~usersIdsMergesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/AccountMergeInner>}
     */
    usersIdsMergesGet(ids, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'ids' is set
      if (ids === undefined || ids === null) {
        throw new Error("Missing the required parameter 'ids' when calling usersIdsMergesGet");
      }

      let pathParams = {
        'ids': ids
      };
      let queryParams = {
        'pagesize': opts['pagesize'],
        'page': opts['page'],
        'filter': opts['filter'],
        'callback': opts['callback']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [AccountMergeInner];
      return this.apiClient.callApi(
        '/users/{ids}/merges', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersIdsQuestionsFeaturedGet operation.
     * @callback module:api/DefaultApi~usersIdsQuestionsFeaturedGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/QuestionsInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the questions on which the users in {ids} have active bounties.   {ids} can contain up to 100 semicolon delimited ids, to find ids programatically look for user_id on user or shallow_user objects.   The sorts accepted by this method operate on the follow fields of the question object:  - activity - last_activity_date  - creation - creation_date  - votes - score   activity is the default sort.    It is possible to create moderately complex queries using sort, min, max, fromdate, and todate.    This method returns a list of questions. 
     * @param {String} ids Number list (semicolon delimited).
     * @param {String} site Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. \"stackoverflow.com\"), or a short form identified by api_site_parameter on the site object. 
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [order] 
     * @param {String} [max] sort = activity => date sort = creation => date sort = votes => number 
     * @param {String} [min] sort = activity => date sort = creation => date sort = votes => number 
     * @param {module:model/String} [sort] 
     * @param {Number} [fromdate] Unix date.
     * @param {Number} [todate] Unix date.
     * @param {Number} [pagesize] 
     * @param {Number} [page] 
     * @param {String} [filter] #Discussion  The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.  An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.  Filters are immutable and non-expiring. An application can safely \"bake in\" any filters that are created, it is not necessary (or advisable) to create filters at runtime.  The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).  #Safety  Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.  Note that this does not mean that \"safe\" filter is mearly an \"unsafe\" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).  When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the \"safe\" data is the only accessible data it will be returned even in \"unsafe\" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.  #Built In Filters  The following filters are built in:  default, each type documents which fields are returned under the default filter (for example, answers). withbody, which is default plus the *.body fields none, which is empty total, which includes just .total  #Compatibility with V1.x  For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters. 
     * @param {String} [callback] All API responses are JSON, we do support JSONP with the callback query parameter. 
     * @param {module:api/DefaultApi~usersIdsQuestionsFeaturedGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/QuestionsInner>}
     */
    usersIdsQuestionsFeaturedGet(ids, site, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'ids' is set
      if (ids === undefined || ids === null) {
        throw new Error("Missing the required parameter 'ids' when calling usersIdsQuestionsFeaturedGet");
      }
      // verify the required parameter 'site' is set
      if (site === undefined || site === null) {
        throw new Error("Missing the required parameter 'site' when calling usersIdsQuestionsFeaturedGet");
      }

      let pathParams = {
        'ids': ids
      };
      let queryParams = {
        'order': opts['order'],
        'max': opts['max'],
        'min': opts['min'],
        'sort': opts['sort'],
        'fromdate': opts['fromdate'],
        'todate': opts['todate'],
        'pagesize': opts['pagesize'],
        'page': opts['page'],
        'filter': opts['filter'],
        'callback': opts['callback'],
        'site': site
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [QuestionsInner];
      return this.apiClient.callApi(
        '/users/{ids}/questions/featured', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersIdsQuestionsGet operation.
     * @callback module:api/DefaultApi~usersIdsQuestionsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/QuestionsInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the questions asked by the users in {ids}.   {ids} can contain up to 100 semicolon delimited ids, to find ids programatically look for user_id on user or shallow_user objects.   The sorts accepted by this method operate on the follow fields of the question object:  - activity - last_activity_date  - creation - creation_date  - votes - score   activity is the default sort.    It is possible to create moderately complex queries using sort, min, max, fromdate, and todate.    This method returns a list of questions. 
     * @param {String} ids Number list (semicolon delimited).
     * @param {String} site Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. \"stackoverflow.com\"), or a short form identified by api_site_parameter on the site object. 
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [order] 
     * @param {String} [max] sort = activity => date sort = creation => date sort = votes => number 
     * @param {String} [min] sort = activity => date sort = creation => date sort = votes => number 
     * @param {module:model/String} [sort] 
     * @param {Number} [fromdate] Unix date.
     * @param {Number} [todate] Unix date.
     * @param {Number} [pagesize] 
     * @param {Number} [page] 
     * @param {String} [filter] #Discussion  The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.  An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.  Filters are immutable and non-expiring. An application can safely \"bake in\" any filters that are created, it is not necessary (or advisable) to create filters at runtime.  The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).  #Safety  Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.  Note that this does not mean that \"safe\" filter is mearly an \"unsafe\" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).  When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the \"safe\" data is the only accessible data it will be returned even in \"unsafe\" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.  #Built In Filters  The following filters are built in:  default, each type documents which fields are returned under the default filter (for example, answers). withbody, which is default plus the *.body fields none, which is empty total, which includes just .total  #Compatibility with V1.x  For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters. 
     * @param {String} [callback] All API responses are JSON, we do support JSONP with the callback query parameter. 
     * @param {module:api/DefaultApi~usersIdsQuestionsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/QuestionsInner>}
     */
    usersIdsQuestionsGet(ids, site, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'ids' is set
      if (ids === undefined || ids === null) {
        throw new Error("Missing the required parameter 'ids' when calling usersIdsQuestionsGet");
      }
      // verify the required parameter 'site' is set
      if (site === undefined || site === null) {
        throw new Error("Missing the required parameter 'site' when calling usersIdsQuestionsGet");
      }

      let pathParams = {
        'ids': ids
      };
      let queryParams = {
        'order': opts['order'],
        'max': opts['max'],
        'min': opts['min'],
        'sort': opts['sort'],
        'fromdate': opts['fromdate'],
        'todate': opts['todate'],
        'pagesize': opts['pagesize'],
        'page': opts['page'],
        'filter': opts['filter'],
        'callback': opts['callback'],
        'site': site
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [QuestionsInner];
      return this.apiClient.callApi(
        '/users/{ids}/questions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersIdsQuestionsNoAnswersGet operation.
     * @callback module:api/DefaultApi~usersIdsQuestionsNoAnswersGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/QuestionsInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the questions asked by the users in {ids} which have no answers.   Questions returns by this method actually have zero undeleted answers. It is completely disjoint /users/{ids}/questions/unanswered and /users/{ids}/questions/unaccepted, which only return questions with at least one answer, subject to other contraints.   {ids} can contain up to 100 semicolon delimited ids, to find ids programatically look for user_id on user or shallow_user objects.   The sorts accepted by this method operate on the follow fields of the question object:  - activity - last_activity_date  - creation - creation_date  - votes - score   activity is the default sort.    It is possible to create moderately complex queries using sort, min, max, fromdate, and todate.    This method returns a list of questions. 
     * @param {String} ids Number list (semicolon delimited).
     * @param {String} site Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. \"stackoverflow.com\"), or a short form identified by api_site_parameter on the site object. 
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [order] 
     * @param {String} [max] sort = activity => date sort = creation => date sort = votes => number 
     * @param {String} [min] sort = activity => date sort = creation => date sort = votes => number 
     * @param {module:model/String} [sort] 
     * @param {Number} [fromdate] Unix date.
     * @param {Number} [todate] Unix date.
     * @param {Number} [pagesize] 
     * @param {Number} [page] 
     * @param {String} [filter] #Discussion  The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.  An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.  Filters are immutable and non-expiring. An application can safely \"bake in\" any filters that are created, it is not necessary (or advisable) to create filters at runtime.  The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).  #Safety  Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.  Note that this does not mean that \"safe\" filter is mearly an \"unsafe\" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).  When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the \"safe\" data is the only accessible data it will be returned even in \"unsafe\" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.  #Built In Filters  The following filters are built in:  default, each type documents which fields are returned under the default filter (for example, answers). withbody, which is default plus the *.body fields none, which is empty total, which includes just .total  #Compatibility with V1.x  For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters. 
     * @param {String} [callback] All API responses are JSON, we do support JSONP with the callback query parameter. 
     * @param {module:api/DefaultApi~usersIdsQuestionsNoAnswersGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/QuestionsInner>}
     */
    usersIdsQuestionsNoAnswersGet(ids, site, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'ids' is set
      if (ids === undefined || ids === null) {
        throw new Error("Missing the required parameter 'ids' when calling usersIdsQuestionsNoAnswersGet");
      }
      // verify the required parameter 'site' is set
      if (site === undefined || site === null) {
        throw new Error("Missing the required parameter 'site' when calling usersIdsQuestionsNoAnswersGet");
      }

      let pathParams = {
        'ids': ids
      };
      let queryParams = {
        'order': opts['order'],
        'max': opts['max'],
        'min': opts['min'],
        'sort': opts['sort'],
        'fromdate': opts['fromdate'],
        'todate': opts['todate'],
        'pagesize': opts['pagesize'],
        'page': opts['page'],
        'filter': opts['filter'],
        'callback': opts['callback'],
        'site': site
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [QuestionsInner];
      return this.apiClient.callApi(
        '/users/{ids}/questions/no-answers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersIdsQuestionsUnacceptedGet operation.
     * @callback module:api/DefaultApi~usersIdsQuestionsUnacceptedGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/QuestionsInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the questions asked by the users in {ids} which have at least one answer, but no accepted answer.   Questions returned by this method have answers, but the owner has not opted to accept any of them.   {ids} can contain up to 100 semicolon delimited ids, to find ids programatically look for user_id on user or shallow_user objects.   The sorts accepted by this method operate on the follow fields of the question object:  - activity - last_activity_date  - creation - creation_date  - votes - score   activity is the default sort.    It is possible to create moderately complex queries using sort, min, max, fromdate, and todate.    This method returns a list of questions. 
     * @param {String} ids Number list (semicolon delimited).
     * @param {String} site Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. \"stackoverflow.com\"), or a short form identified by api_site_parameter on the site object. 
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [order] 
     * @param {String} [max] sort = activity => date sort = creation => date sort = votes => number 
     * @param {String} [min] sort = activity => date sort = creation => date sort = votes => number 
     * @param {module:model/String} [sort] 
     * @param {Number} [fromdate] Unix date.
     * @param {Number} [todate] Unix date.
     * @param {Number} [pagesize] 
     * @param {Number} [page] 
     * @param {String} [filter] #Discussion  The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.  An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.  Filters are immutable and non-expiring. An application can safely \"bake in\" any filters that are created, it is not necessary (or advisable) to create filters at runtime.  The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).  #Safety  Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.  Note that this does not mean that \"safe\" filter is mearly an \"unsafe\" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).  When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the \"safe\" data is the only accessible data it will be returned even in \"unsafe\" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.  #Built In Filters  The following filters are built in:  default, each type documents which fields are returned under the default filter (for example, answers). withbody, which is default plus the *.body fields none, which is empty total, which includes just .total  #Compatibility with V1.x  For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters. 
     * @param {String} [callback] All API responses are JSON, we do support JSONP with the callback query parameter. 
     * @param {module:api/DefaultApi~usersIdsQuestionsUnacceptedGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/QuestionsInner>}
     */
    usersIdsQuestionsUnacceptedGet(ids, site, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'ids' is set
      if (ids === undefined || ids === null) {
        throw new Error("Missing the required parameter 'ids' when calling usersIdsQuestionsUnacceptedGet");
      }
      // verify the required parameter 'site' is set
      if (site === undefined || site === null) {
        throw new Error("Missing the required parameter 'site' when calling usersIdsQuestionsUnacceptedGet");
      }

      let pathParams = {
        'ids': ids
      };
      let queryParams = {
        'order': opts['order'],
        'max': opts['max'],
        'min': opts['min'],
        'sort': opts['sort'],
        'fromdate': opts['fromdate'],
        'todate': opts['todate'],
        'pagesize': opts['pagesize'],
        'page': opts['page'],
        'filter': opts['filter'],
        'callback': opts['callback'],
        'site': site
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [QuestionsInner];
      return this.apiClient.callApi(
        '/users/{ids}/questions/unaccepted', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersIdsQuestionsUnansweredGet operation.
     * @callback module:api/DefaultApi~usersIdsQuestionsUnansweredGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/QuestionsInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the questions asked by the users in {ids} which the site consideres unanswered, while still having at least one answer posted.   These rules are subject to change, but currently any question without at least one upvoted or accepted answer is considered unanswered.   To get the set of questions that a user probably considers unanswered, the returned questions should be unioned with those returned by /users/{id}/questions/no-answers. These methods are distinct so that truly unanswered (that is, zero posted answers) questions can be easily separated from mearly poorly or inadequately answered ones.   {ids} can contain up to 100 semicolon delimited ids, to find ids programatically look for user_id on user or shallow_user objects.   The sorts accepted by this method operate on the follow fields of the question object:  - activity - last_activity_date  - creation - creation_date  - votes - score   activity is the default sort.    It is possible to create moderately complex queries using sort, min, max, fromdate, and todate.    This method returns a list of questions. 
     * @param {String} ids Number list (semicolon delimited).
     * @param {String} site Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. \"stackoverflow.com\"), or a short form identified by api_site_parameter on the site object. 
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [order] 
     * @param {String} [max] sort = activity => date sort = creation => date sort = votes => number 
     * @param {String} [min] sort = activity => date sort = creation => date sort = votes => number 
     * @param {module:model/String} [sort] 
     * @param {Number} [fromdate] Unix date.
     * @param {Number} [todate] Unix date.
     * @param {Number} [pagesize] 
     * @param {Number} [page] 
     * @param {String} [filter] #Discussion  The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.  An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.  Filters are immutable and non-expiring. An application can safely \"bake in\" any filters that are created, it is not necessary (or advisable) to create filters at runtime.  The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).  #Safety  Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.  Note that this does not mean that \"safe\" filter is mearly an \"unsafe\" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).  When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the \"safe\" data is the only accessible data it will be returned even in \"unsafe\" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.  #Built In Filters  The following filters are built in:  default, each type documents which fields are returned under the default filter (for example, answers). withbody, which is default plus the *.body fields none, which is empty total, which includes just .total  #Compatibility with V1.x  For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters. 
     * @param {String} [callback] All API responses are JSON, we do support JSONP with the callback query parameter. 
     * @param {module:api/DefaultApi~usersIdsQuestionsUnansweredGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/QuestionsInner>}
     */
    usersIdsQuestionsUnansweredGet(ids, site, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'ids' is set
      if (ids === undefined || ids === null) {
        throw new Error("Missing the required parameter 'ids' when calling usersIdsQuestionsUnansweredGet");
      }
      // verify the required parameter 'site' is set
      if (site === undefined || site === null) {
        throw new Error("Missing the required parameter 'site' when calling usersIdsQuestionsUnansweredGet");
      }

      let pathParams = {
        'ids': ids
      };
      let queryParams = {
        'order': opts['order'],
        'max': opts['max'],
        'min': opts['min'],
        'sort': opts['sort'],
        'fromdate': opts['fromdate'],
        'todate': opts['todate'],
        'pagesize': opts['pagesize'],
        'page': opts['page'],
        'filter': opts['filter'],
        'callback': opts['callback'],
        'site': site
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [QuestionsInner];
      return this.apiClient.callApi(
        '/users/{ids}/questions/unanswered', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersIdsReputationGet operation.
     * @callback module:api/DefaultApi~usersIdsReputationGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ReputationChangesInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a subset of the reputation changes for users in {ids}.   Reputation changes are intentionally scrubbed of some data to make it difficult to correlate votes on particular posts with user reputation changes. That being said, this method returns enough data for reasonable display of reputation trends.   {ids} can contain up to 100 semicolon delimited ids, to find ids programatically look for user_id on user or shallow_user objects.   This method returns a list of reputation objects. 
     * @param {String} ids Number list (semicolon delimited).
     * @param {String} site Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. \"stackoverflow.com\"), or a short form identified by api_site_parameter on the site object. 
     * @param {Object} opts Optional parameters
     * @param {Number} [fromdate] Unix date.
     * @param {Number} [todate] Unix date.
     * @param {Number} [pagesize] 
     * @param {Number} [page] 
     * @param {String} [filter] #Discussion  The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.  An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.  Filters are immutable and non-expiring. An application can safely \"bake in\" any filters that are created, it is not necessary (or advisable) to create filters at runtime.  The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).  #Safety  Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.  Note that this does not mean that \"safe\" filter is mearly an \"unsafe\" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).  When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the \"safe\" data is the only accessible data it will be returned even in \"unsafe\" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.  #Built In Filters  The following filters are built in:  default, each type documents which fields are returned under the default filter (for example, answers). withbody, which is default plus the *.body fields none, which is empty total, which includes just .total  #Compatibility with V1.x  For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters. 
     * @param {String} [callback] All API responses are JSON, we do support JSONP with the callback query parameter. 
     * @param {module:api/DefaultApi~usersIdsReputationGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ReputationChangesInner>}
     */
    usersIdsReputationGet(ids, site, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'ids' is set
      if (ids === undefined || ids === null) {
        throw new Error("Missing the required parameter 'ids' when calling usersIdsReputationGet");
      }
      // verify the required parameter 'site' is set
      if (site === undefined || site === null) {
        throw new Error("Missing the required parameter 'site' when calling usersIdsReputationGet");
      }

      let pathParams = {
        'ids': ids
      };
      let queryParams = {
        'fromdate': opts['fromdate'],
        'todate': opts['todate'],
        'pagesize': opts['pagesize'],
        'page': opts['page'],
        'filter': opts['filter'],
        'callback': opts['callback'],
        'site': site
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [ReputationChangesInner];
      return this.apiClient.callApi(
        '/users/{ids}/reputation', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersIdsReputationHistoryGet operation.
     * @callback module:api/DefaultApi~usersIdsReputationHistoryGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ReputationHistoryInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns users' public reputation history.   This method returns a list of reputation_history. 
     * @param {String} ids Number list (semicolon delimited).
     * @param {String} site Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. \"stackoverflow.com\"), or a short form identified by api_site_parameter on the site object. 
     * @param {Object} opts Optional parameters
     * @param {Number} [pagesize] 
     * @param {Number} [page] 
     * @param {String} [filter] #Discussion  The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.  An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.  Filters are immutable and non-expiring. An application can safely \"bake in\" any filters that are created, it is not necessary (or advisable) to create filters at runtime.  The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).  #Safety  Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.  Note that this does not mean that \"safe\" filter is mearly an \"unsafe\" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).  When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the \"safe\" data is the only accessible data it will be returned even in \"unsafe\" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.  #Built In Filters  The following filters are built in:  default, each type documents which fields are returned under the default filter (for example, answers). withbody, which is default plus the *.body fields none, which is empty total, which includes just .total  #Compatibility with V1.x  For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters. 
     * @param {String} [callback] All API responses are JSON, we do support JSONP with the callback query parameter. 
     * @param {module:api/DefaultApi~usersIdsReputationHistoryGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ReputationHistoryInner>}
     */
    usersIdsReputationHistoryGet(ids, site, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'ids' is set
      if (ids === undefined || ids === null) {
        throw new Error("Missing the required parameter 'ids' when calling usersIdsReputationHistoryGet");
      }
      // verify the required parameter 'site' is set
      if (site === undefined || site === null) {
        throw new Error("Missing the required parameter 'site' when calling usersIdsReputationHistoryGet");
      }

      let pathParams = {
        'ids': ids
      };
      let queryParams = {
        'pagesize': opts['pagesize'],
        'page': opts['page'],
        'filter': opts['filter'],
        'callback': opts['callback'],
        'site': site
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [ReputationHistoryInner];
      return this.apiClient.callApi(
        '/users/{ids}/reputation-history', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersIdsSuggestedEditsGet operation.
     * @callback module:api/DefaultApi~usersIdsSuggestedEditsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/SuggestedEditsInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the suggested edits a users in {ids} have submitted.   {ids} can contain up to 100 semicolon delimited ids, to find ids programatically look for user_id on user or shallow_user objects.   The sorts accepted by this method operate on the follow fields of the suggested_edit object:  - creation - creation_date  - approval - approval_date Does not return unapproved suggested_edits  - rejection - rejection_date Does not return unrejected suggested_edits   creation is the default sort.    It is possible to create moderately complex queries using sort, min, max, fromdate, and todate.    This method returns a list of suggested-edits. 
     * @param {String} ids Number list (semicolon delimited).
     * @param {String} site Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. \"stackoverflow.com\"), or a short form identified by api_site_parameter on the site object. 
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [order] 
     * @param {String} [max] sort = creation => date sort = approval => date sort = rejection => date 
     * @param {String} [min] sort = creation => date sort = approval => date sort = rejection => date 
     * @param {module:model/String} [sort] 
     * @param {Number} [fromdate] Unix date.
     * @param {Number} [todate] Unix date.
     * @param {Number} [pagesize] 
     * @param {Number} [page] 
     * @param {String} [filter] #Discussion  The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.  An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.  Filters are immutable and non-expiring. An application can safely \"bake in\" any filters that are created, it is not necessary (or advisable) to create filters at runtime.  The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).  #Safety  Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.  Note that this does not mean that \"safe\" filter is mearly an \"unsafe\" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).  When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the \"safe\" data is the only accessible data it will be returned even in \"unsafe\" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.  #Built In Filters  The following filters are built in:  default, each type documents which fields are returned under the default filter (for example, answers). withbody, which is default plus the *.body fields none, which is empty total, which includes just .total  #Compatibility with V1.x  For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters. 
     * @param {String} [callback] All API responses are JSON, we do support JSONP with the callback query parameter. 
     * @param {module:api/DefaultApi~usersIdsSuggestedEditsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/SuggestedEditsInner>}
     */
    usersIdsSuggestedEditsGet(ids, site, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'ids' is set
      if (ids === undefined || ids === null) {
        throw new Error("Missing the required parameter 'ids' when calling usersIdsSuggestedEditsGet");
      }
      // verify the required parameter 'site' is set
      if (site === undefined || site === null) {
        throw new Error("Missing the required parameter 'site' when calling usersIdsSuggestedEditsGet");
      }

      let pathParams = {
        'ids': ids
      };
      let queryParams = {
        'order': opts['order'],
        'max': opts['max'],
        'min': opts['min'],
        'sort': opts['sort'],
        'fromdate': opts['fromdate'],
        'todate': opts['todate'],
        'pagesize': opts['pagesize'],
        'page': opts['page'],
        'filter': opts['filter'],
        'callback': opts['callback'],
        'site': site
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [SuggestedEditsInner];
      return this.apiClient.callApi(
        '/users/{ids}/suggested-edits', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersIdsTagsGet operation.
     * @callback module:api/DefaultApi~usersIdsTagsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TagsInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the tags the users identified in {ids} have been active in.   This route corresponds roughly to user's stats tab, but does not include tag scores. A subset of tag scores are available (on a single user basis) in /users/{id}/top-answer-tags and /users/{id}/top-question-tags.   {ids} can contain up to 100 semicolon delimited ids, to find ids programatically look for user_id on user or shallow_user objects.   The sorts accepted by this method operate on the follow fields of the tag object:  - popular - count  - activity - the creation_date of the last question asked with the tag  - name - name   popular is the default sort.    It is possible to create moderately complex queries using sort, min, max, fromdate, and todate.    This method returns a list of tags. 
     * @param {String} ids Number list (semicolon delimited).
     * @param {String} site Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. \"stackoverflow.com\"), or a short form identified by api_site_parameter on the site object. 
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [order] 
     * @param {String} [max] sort = popular => number sort = activity => date sort = name => string 
     * @param {String} [min] sort = popular => number sort = activity => date sort = name => string 
     * @param {module:model/String} [sort] 
     * @param {Number} [fromdate] Unix date.
     * @param {Number} [todate] Unix date.
     * @param {Number} [pagesize] 
     * @param {Number} [page] 
     * @param {String} [filter] #Discussion  The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.  An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.  Filters are immutable and non-expiring. An application can safely \"bake in\" any filters that are created, it is not necessary (or advisable) to create filters at runtime.  The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).  #Safety  Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.  Note that this does not mean that \"safe\" filter is mearly an \"unsafe\" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).  When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the \"safe\" data is the only accessible data it will be returned even in \"unsafe\" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.  #Built In Filters  The following filters are built in:  default, each type documents which fields are returned under the default filter (for example, answers). withbody, which is default plus the *.body fields none, which is empty total, which includes just .total  #Compatibility with V1.x  For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters. 
     * @param {String} [callback] All API responses are JSON, we do support JSONP with the callback query parameter. 
     * @param {module:api/DefaultApi~usersIdsTagsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TagsInner>}
     */
    usersIdsTagsGet(ids, site, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'ids' is set
      if (ids === undefined || ids === null) {
        throw new Error("Missing the required parameter 'ids' when calling usersIdsTagsGet");
      }
      // verify the required parameter 'site' is set
      if (site === undefined || site === null) {
        throw new Error("Missing the required parameter 'site' when calling usersIdsTagsGet");
      }

      let pathParams = {
        'ids': ids
      };
      let queryParams = {
        'order': opts['order'],
        'max': opts['max'],
        'min': opts['min'],
        'sort': opts['sort'],
        'fromdate': opts['fromdate'],
        'todate': opts['todate'],
        'pagesize': opts['pagesize'],
        'page': opts['page'],
        'filter': opts['filter'],
        'callback': opts['callback'],
        'site': site
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [TagsInner];
      return this.apiClient.callApi(
        '/users/{ids}/tags', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersIdsTimelineGet operation.
     * @callback module:api/DefaultApi~usersIdsTimelineGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UserTimelineObjectsInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a subset of the actions the users in {ids} have taken on the site.   This method returns users' posts, edits, and earned badges in the order they were accomplished. It is possible to filter to just a window of activity using the fromdate and todate parameters.   {ids} can contain up to 100 semicolon delimited ids, to find ids programatically look for user_id on user or shallow_user objects.   This method returns a list of user timeline objects. 
     * @param {String} ids Number list (semicolon delimited).
     * @param {String} site Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. \"stackoverflow.com\"), or a short form identified by api_site_parameter on the site object. 
     * @param {Object} opts Optional parameters
     * @param {Number} [fromdate] Unix date.
     * @param {Number} [todate] Unix date.
     * @param {Number} [pagesize] 
     * @param {Number} [page] 
     * @param {String} [filter] #Discussion  The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.  An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.  Filters are immutable and non-expiring. An application can safely \"bake in\" any filters that are created, it is not necessary (or advisable) to create filters at runtime.  The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).  #Safety  Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.  Note that this does not mean that \"safe\" filter is mearly an \"unsafe\" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).  When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the \"safe\" data is the only accessible data it will be returned even in \"unsafe\" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.  #Built In Filters  The following filters are built in:  default, each type documents which fields are returned under the default filter (for example, answers). withbody, which is default plus the *.body fields none, which is empty total, which includes just .total  #Compatibility with V1.x  For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters. 
     * @param {String} [callback] All API responses are JSON, we do support JSONP with the callback query parameter. 
     * @param {module:api/DefaultApi~usersIdsTimelineGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UserTimelineObjectsInner>}
     */
    usersIdsTimelineGet(ids, site, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'ids' is set
      if (ids === undefined || ids === null) {
        throw new Error("Missing the required parameter 'ids' when calling usersIdsTimelineGet");
      }
      // verify the required parameter 'site' is set
      if (site === undefined || site === null) {
        throw new Error("Missing the required parameter 'site' when calling usersIdsTimelineGet");
      }

      let pathParams = {
        'ids': ids
      };
      let queryParams = {
        'fromdate': opts['fromdate'],
        'todate': opts['todate'],
        'pagesize': opts['pagesize'],
        'page': opts['page'],
        'filter': opts['filter'],
        'callback': opts['callback'],
        'site': site
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [UserTimelineObjectsInner];
      return this.apiClient.callApi(
        '/users/{ids}/timeline', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersModeratorsElectedGet operation.
     * @callback module:api/DefaultApi~usersModeratorsElectedGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UsersInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns those users on a site who both have moderator powers, and were actually elected.   This method excludes Stack Exchange Inc. employees, unless they were actually elected moderators on a site (which can only have happened prior to their employment).   The sorts accepted by this method operate on the follow fields of the user object:  - reputation - reputation  - creation - creation_date  - name - display_name  - modified - last_modified_date   reputation is the default sort.    It is possible to create moderately complex queries using sort, min, max, fromdate, and todate.    This method returns a list of users. 
     * @param {String} site Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. \"stackoverflow.com\"), or a short form identified by api_site_parameter on the site object. 
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [order] 
     * @param {String} [max] sort = reputation => number sort = creation => date sort = name => string sort = modified => date 
     * @param {String} [min] sort = reputation => number sort = creation => date sort = name => string sort = modified => date 
     * @param {module:model/String} [sort] 
     * @param {Number} [fromdate] Unix date.
     * @param {Number} [todate] Unix date.
     * @param {Number} [pagesize] 
     * @param {Number} [page] 
     * @param {String} [filter] #Discussion  The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.  An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.  Filters are immutable and non-expiring. An application can safely \"bake in\" any filters that are created, it is not necessary (or advisable) to create filters at runtime.  The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).  #Safety  Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.  Note that this does not mean that \"safe\" filter is mearly an \"unsafe\" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).  When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the \"safe\" data is the only accessible data it will be returned even in \"unsafe\" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.  #Built In Filters  The following filters are built in:  default, each type documents which fields are returned under the default filter (for example, answers). withbody, which is default plus the *.body fields none, which is empty total, which includes just .total  #Compatibility with V1.x  For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters. 
     * @param {String} [callback] All API responses are JSON, we do support JSONP with the callback query parameter. 
     * @param {module:api/DefaultApi~usersModeratorsElectedGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UsersInner>}
     */
    usersModeratorsElectedGet(site, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'site' is set
      if (site === undefined || site === null) {
        throw new Error("Missing the required parameter 'site' when calling usersModeratorsElectedGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'order': opts['order'],
        'max': opts['max'],
        'min': opts['min'],
        'sort': opts['sort'],
        'fromdate': opts['fromdate'],
        'todate': opts['todate'],
        'pagesize': opts['pagesize'],
        'page': opts['page'],
        'filter': opts['filter'],
        'callback': opts['callback'],
        'site': site
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [UsersInner];
      return this.apiClient.callApi(
        '/users/moderators/elected', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usersModeratorsGet operation.
     * @callback module:api/DefaultApi~usersModeratorsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UsersInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets those users on a site who can exercise moderation powers.   Note, employees of Stack Exchange Inc. will be returned if they have been granted moderation powers on a site even if they have never been appointed or elected explicitly. This method checks abilities, not the manner in which they were obtained.   The sorts accepted by this method operate on the follow fields of the user object:  - reputation - reputation  - creation - creation_date  - name - display_name  - modified - last_modified_date   reputation is the default sort.    It is possible to create moderately complex queries using sort, min, max, fromdate, and todate.    This method returns a list of users. 
     * @param {String} site Each of these methods operates on a single site at a time, identified by the site parameter. This parameter can be the full domain name (ie. \"stackoverflow.com\"), or a short form identified by api_site_parameter on the site object. 
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [order] 
     * @param {String} [max] sort = reputation => number sort = creation => date sort = name => string sort = modified => date 
     * @param {String} [min] sort = reputation => number sort = creation => date sort = name => string sort = modified => date 
     * @param {module:model/String} [sort] 
     * @param {Number} [fromdate] Unix date.
     * @param {Number} [todate] Unix date.
     * @param {Number} [pagesize] 
     * @param {Number} [page] 
     * @param {String} [filter] #Discussion  The Stack Exchange API allows applications to exclude almost every field returned. For example, if an application did not care about a user's badge counts it could exclude user.badge_counts whenever it calls a method that returns users.  An application excludes fields by creating a filter (via /filter/create) and passing it to a method in the filter parameter.  Filters are immutable and non-expiring. An application can safely \"bake in\" any filters that are created, it is not necessary (or advisable) to create filters at runtime.  The motivation for filters are several fold. Filters allow applications to reduce API responses to just the fields they are concerned with, saving bandwidth. With the list of fields an application is actually concerned with, the API can avoid unneccessary queries thereby decreasing response time (and reducing load on our infrastructure). Finally, filters allow us to be more conservative in what the API returns by default without a proliferation of parameters (as was seen with body, answers, and comments in the 1.x API family).  #Safety  Filters also carry a notion of safety, which is defined as follows. Any string returned as a result of an API call with a safe filter will be inline-able into HTML without script-injection concerns. That is to say, no additional sanitizing (encoding, HTML tag stripping, etc.) will be necessary on returned strings. Applications that wish to handle sanitizing themselves should create an unsafe filter. All filters are safe by default, under the assumption that double-encoding bugs are more desirable than script injections.  Note that this does not mean that \"safe\" filter is mearly an \"unsafe\" one with all fields passed though UrlEncode(...). Many fields can and will contain HTML in all filter types (most notably, the *.body fields).  When using unsafe filters, the API returns the highest fidelity data it can reasonably access for the given request. This means that in cases where the \"safe\" data is the only accessible data it will be returned even in \"unsafe\" filters. Notably the *.body fields are unchanged, as they are stored in that form. Fields that are unchanged between safe and unsafe filters are denoted in their types documentation.  #Built In Filters  The following filters are built in:  default, each type documents which fields are returned under the default filter (for example, answers). withbody, which is default plus the *.body fields none, which is empty total, which includes just .total  #Compatibility with V1.x  For ease of transition from earlier API versions, the filters _b, _ba, _bc, _bca, _a, _ac, and _c are also built in. These are unsafe, and exclude a combination of question and answer body, comments, and answers so as to mimic the body, answers, and comments parameters that have been removed in V2.0. New applications should not use these filters. 
     * @param {String} [callback] All API responses are JSON, we do support JSONP with the callback query parameter. 
     * @param {module:api/DefaultApi~usersModeratorsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UsersInner>}
     */
    usersModeratorsGet(site, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'site' is set
      if (site === undefined || site === null) {
        throw new Error("Missing the required parameter 'site' when calling usersModeratorsGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'order': opts['order'],
        'max': opts['max'],
        'min': opts['min'],
        'sort': opts['sort'],
        'fromdate': opts['fromdate'],
        'todate': opts['todate'],
        'pagesize': opts['pagesize'],
        'page': opts['page'],
        'filter': opts['filter'],
        'callback': opts['callback'],
        'site': site
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [UsersInner];
      return this.apiClient.callApi(
        '/users/moderators', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
