# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TopTagObjectsInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, answer_count: int=None, answer_score: int=None, question_count: int=None, question_score: int=None, tag_name: str=None, user_id: int=None):
        """TopTagObjectsInner - a model defined in OpenAPI

        :param answer_count: The answer_count of this TopTagObjectsInner.
        :param answer_score: The answer_score of this TopTagObjectsInner.
        :param question_count: The question_count of this TopTagObjectsInner.
        :param question_score: The question_score of this TopTagObjectsInner.
        :param tag_name: The tag_name of this TopTagObjectsInner.
        :param user_id: The user_id of this TopTagObjectsInner.
        """
        self.openapi_types = {
            'answer_count': int,
            'answer_score': int,
            'question_count': int,
            'question_score': int,
            'tag_name': str,
            'user_id': int
        }

        self.attribute_map = {
            'answer_count': 'answer_count',
            'answer_score': 'answer_score',
            'question_count': 'question_count',
            'question_score': 'question_score',
            'tag_name': 'tag_name',
            'user_id': 'user_id'
        }

        self._answer_count = answer_count
        self._answer_score = answer_score
        self._question_count = question_count
        self._question_score = question_score
        self._tag_name = tag_name
        self._user_id = user_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TopTagObjectsInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The top_tag_objects_inner of this TopTagObjectsInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def answer_count(self):
        """Gets the answer_count of this TopTagObjectsInner.


        :return: The answer_count of this TopTagObjectsInner.
        :rtype: int
        """
        return self._answer_count

    @answer_count.setter
    def answer_count(self, answer_count):
        """Sets the answer_count of this TopTagObjectsInner.


        :param answer_count: The answer_count of this TopTagObjectsInner.
        :type answer_count: int
        """

        self._answer_count = answer_count

    @property
    def answer_score(self):
        """Gets the answer_score of this TopTagObjectsInner.


        :return: The answer_score of this TopTagObjectsInner.
        :rtype: int
        """
        return self._answer_score

    @answer_score.setter
    def answer_score(self, answer_score):
        """Sets the answer_score of this TopTagObjectsInner.


        :param answer_score: The answer_score of this TopTagObjectsInner.
        :type answer_score: int
        """

        self._answer_score = answer_score

    @property
    def question_count(self):
        """Gets the question_count of this TopTagObjectsInner.


        :return: The question_count of this TopTagObjectsInner.
        :rtype: int
        """
        return self._question_count

    @question_count.setter
    def question_count(self, question_count):
        """Sets the question_count of this TopTagObjectsInner.


        :param question_count: The question_count of this TopTagObjectsInner.
        :type question_count: int
        """

        self._question_count = question_count

    @property
    def question_score(self):
        """Gets the question_score of this TopTagObjectsInner.


        :return: The question_score of this TopTagObjectsInner.
        :rtype: int
        """
        return self._question_score

    @question_score.setter
    def question_score(self, question_score):
        """Sets the question_score of this TopTagObjectsInner.


        :param question_score: The question_score of this TopTagObjectsInner.
        :type question_score: int
        """

        self._question_score = question_score

    @property
    def tag_name(self):
        """Gets the tag_name of this TopTagObjectsInner.


        :return: The tag_name of this TopTagObjectsInner.
        :rtype: str
        """
        return self._tag_name

    @tag_name.setter
    def tag_name(self, tag_name):
        """Sets the tag_name of this TopTagObjectsInner.


        :param tag_name: The tag_name of this TopTagObjectsInner.
        :type tag_name: str
        """

        self._tag_name = tag_name

    @property
    def user_id(self):
        """Gets the user_id of this TopTagObjectsInner.


        :return: The user_id of this TopTagObjectsInner.
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this TopTagObjectsInner.


        :param user_id: The user_id of this TopTagObjectsInner.
        :type user_id: int
        """

        self._user_id = user_id
