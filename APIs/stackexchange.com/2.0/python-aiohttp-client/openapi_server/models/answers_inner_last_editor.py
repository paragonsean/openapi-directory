# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.answers_inner_last_editor_badge_counts import AnswersInnerLastEditorBadgeCounts
from openapi_server import util


class AnswersInnerLastEditor(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, accept_rate: int=None, badge_counts: AnswersInnerLastEditorBadgeCounts=None, display_name: str=None, link: str=None, profile_image: str=None, reputation: int=None, user_id: int=None, user_type: str=None):
        """AnswersInnerLastEditor - a model defined in OpenAPI

        :param accept_rate: The accept_rate of this AnswersInnerLastEditor.
        :param badge_counts: The badge_counts of this AnswersInnerLastEditor.
        :param display_name: The display_name of this AnswersInnerLastEditor.
        :param link: The link of this AnswersInnerLastEditor.
        :param profile_image: The profile_image of this AnswersInnerLastEditor.
        :param reputation: The reputation of this AnswersInnerLastEditor.
        :param user_id: The user_id of this AnswersInnerLastEditor.
        :param user_type: The user_type of this AnswersInnerLastEditor.
        """
        self.openapi_types = {
            'accept_rate': int,
            'badge_counts': AnswersInnerLastEditorBadgeCounts,
            'display_name': str,
            'link': str,
            'profile_image': str,
            'reputation': int,
            'user_id': int,
            'user_type': str
        }

        self.attribute_map = {
            'accept_rate': 'accept_rate',
            'badge_counts': 'badge_counts',
            'display_name': 'display_name',
            'link': 'link',
            'profile_image': 'profile_image',
            'reputation': 'reputation',
            'user_id': 'user_id',
            'user_type': 'user_type'
        }

        self._accept_rate = accept_rate
        self._badge_counts = badge_counts
        self._display_name = display_name
        self._link = link
        self._profile_image = profile_image
        self._reputation = reputation
        self._user_id = user_id
        self._user_type = user_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AnswersInnerLastEditor':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The answers_inner_last_editor of this AnswersInnerLastEditor.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def accept_rate(self):
        """Gets the accept_rate of this AnswersInnerLastEditor.


        :return: The accept_rate of this AnswersInnerLastEditor.
        :rtype: int
        """
        return self._accept_rate

    @accept_rate.setter
    def accept_rate(self, accept_rate):
        """Sets the accept_rate of this AnswersInnerLastEditor.


        :param accept_rate: The accept_rate of this AnswersInnerLastEditor.
        :type accept_rate: int
        """

        self._accept_rate = accept_rate

    @property
    def badge_counts(self):
        """Gets the badge_counts of this AnswersInnerLastEditor.


        :return: The badge_counts of this AnswersInnerLastEditor.
        :rtype: AnswersInnerLastEditorBadgeCounts
        """
        return self._badge_counts

    @badge_counts.setter
    def badge_counts(self, badge_counts):
        """Sets the badge_counts of this AnswersInnerLastEditor.


        :param badge_counts: The badge_counts of this AnswersInnerLastEditor.
        :type badge_counts: AnswersInnerLastEditorBadgeCounts
        """

        self._badge_counts = badge_counts

    @property
    def display_name(self):
        """Gets the display_name of this AnswersInnerLastEditor.


        :return: The display_name of this AnswersInnerLastEditor.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this AnswersInnerLastEditor.


        :param display_name: The display_name of this AnswersInnerLastEditor.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def link(self):
        """Gets the link of this AnswersInnerLastEditor.


        :return: The link of this AnswersInnerLastEditor.
        :rtype: str
        """
        return self._link

    @link.setter
    def link(self, link):
        """Sets the link of this AnswersInnerLastEditor.


        :param link: The link of this AnswersInnerLastEditor.
        :type link: str
        """

        self._link = link

    @property
    def profile_image(self):
        """Gets the profile_image of this AnswersInnerLastEditor.


        :return: The profile_image of this AnswersInnerLastEditor.
        :rtype: str
        """
        return self._profile_image

    @profile_image.setter
    def profile_image(self, profile_image):
        """Sets the profile_image of this AnswersInnerLastEditor.


        :param profile_image: The profile_image of this AnswersInnerLastEditor.
        :type profile_image: str
        """

        self._profile_image = profile_image

    @property
    def reputation(self):
        """Gets the reputation of this AnswersInnerLastEditor.


        :return: The reputation of this AnswersInnerLastEditor.
        :rtype: int
        """
        return self._reputation

    @reputation.setter
    def reputation(self, reputation):
        """Sets the reputation of this AnswersInnerLastEditor.


        :param reputation: The reputation of this AnswersInnerLastEditor.
        :type reputation: int
        """

        self._reputation = reputation

    @property
    def user_id(self):
        """Gets the user_id of this AnswersInnerLastEditor.


        :return: The user_id of this AnswersInnerLastEditor.
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this AnswersInnerLastEditor.


        :param user_id: The user_id of this AnswersInnerLastEditor.
        :type user_id: int
        """

        self._user_id = user_id

    @property
    def user_type(self):
        """Gets the user_type of this AnswersInnerLastEditor.


        :return: The user_type of this AnswersInnerLastEditor.
        :rtype: str
        """
        return self._user_type

    @user_type.setter
    def user_type(self, user_type):
        """Sets the user_type of this AnswersInnerLastEditor.


        :param user_type: The user_type of this AnswersInnerLastEditor.
        :type user_type: str
        """

        self._user_type = user_type
