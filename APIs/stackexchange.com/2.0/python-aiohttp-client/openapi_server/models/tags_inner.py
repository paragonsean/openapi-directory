# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TagsInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, count: int=None, has_synonyms: bool=None, is_moderator_only: bool=None, is_required: bool=None, last_activity_date: int=None, name: str=None, synonyms: List[object]=None, user_id: int=None):
        """TagsInner - a model defined in OpenAPI

        :param count: The count of this TagsInner.
        :param has_synonyms: The has_synonyms of this TagsInner.
        :param is_moderator_only: The is_moderator_only of this TagsInner.
        :param is_required: The is_required of this TagsInner.
        :param last_activity_date: The last_activity_date of this TagsInner.
        :param name: The name of this TagsInner.
        :param synonyms: The synonyms of this TagsInner.
        :param user_id: The user_id of this TagsInner.
        """
        self.openapi_types = {
            'count': int,
            'has_synonyms': bool,
            'is_moderator_only': bool,
            'is_required': bool,
            'last_activity_date': int,
            'name': str,
            'synonyms': List[object],
            'user_id': int
        }

        self.attribute_map = {
            'count': 'count',
            'has_synonyms': 'has_synonyms',
            'is_moderator_only': 'is_moderator_only',
            'is_required': 'is_required',
            'last_activity_date': 'last_activity_date',
            'name': 'name',
            'synonyms': 'synonyms',
            'user_id': 'user_id'
        }

        self._count = count
        self._has_synonyms = has_synonyms
        self._is_moderator_only = is_moderator_only
        self._is_required = is_required
        self._last_activity_date = last_activity_date
        self._name = name
        self._synonyms = synonyms
        self._user_id = user_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TagsInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The tags_inner of this TagsInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def count(self):
        """Gets the count of this TagsInner.


        :return: The count of this TagsInner.
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this TagsInner.


        :param count: The count of this TagsInner.
        :type count: int
        """

        self._count = count

    @property
    def has_synonyms(self):
        """Gets the has_synonyms of this TagsInner.


        :return: The has_synonyms of this TagsInner.
        :rtype: bool
        """
        return self._has_synonyms

    @has_synonyms.setter
    def has_synonyms(self, has_synonyms):
        """Sets the has_synonyms of this TagsInner.


        :param has_synonyms: The has_synonyms of this TagsInner.
        :type has_synonyms: bool
        """

        self._has_synonyms = has_synonyms

    @property
    def is_moderator_only(self):
        """Gets the is_moderator_only of this TagsInner.


        :return: The is_moderator_only of this TagsInner.
        :rtype: bool
        """
        return self._is_moderator_only

    @is_moderator_only.setter
    def is_moderator_only(self, is_moderator_only):
        """Sets the is_moderator_only of this TagsInner.


        :param is_moderator_only: The is_moderator_only of this TagsInner.
        :type is_moderator_only: bool
        """

        self._is_moderator_only = is_moderator_only

    @property
    def is_required(self):
        """Gets the is_required of this TagsInner.


        :return: The is_required of this TagsInner.
        :rtype: bool
        """
        return self._is_required

    @is_required.setter
    def is_required(self, is_required):
        """Sets the is_required of this TagsInner.


        :param is_required: The is_required of this TagsInner.
        :type is_required: bool
        """

        self._is_required = is_required

    @property
    def last_activity_date(self):
        """Gets the last_activity_date of this TagsInner.


        :return: The last_activity_date of this TagsInner.
        :rtype: int
        """
        return self._last_activity_date

    @last_activity_date.setter
    def last_activity_date(self, last_activity_date):
        """Sets the last_activity_date of this TagsInner.


        :param last_activity_date: The last_activity_date of this TagsInner.
        :type last_activity_date: int
        """

        self._last_activity_date = last_activity_date

    @property
    def name(self):
        """Gets the name of this TagsInner.


        :return: The name of this TagsInner.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this TagsInner.


        :param name: The name of this TagsInner.
        :type name: str
        """

        self._name = name

    @property
    def synonyms(self):
        """Gets the synonyms of this TagsInner.


        :return: The synonyms of this TagsInner.
        :rtype: List[object]
        """
        return self._synonyms

    @synonyms.setter
    def synonyms(self, synonyms):
        """Sets the synonyms of this TagsInner.


        :param synonyms: The synonyms of this TagsInner.
        :type synonyms: List[object]
        """

        self._synonyms = synonyms

    @property
    def user_id(self):
        """Gets the user_id of this TagsInner.


        :return: The user_id of this TagsInner.
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this TagsInner.


        :param user_id: The user_id of this TagsInner.
        :type user_id: int
        """

        self._user_id = user_id
