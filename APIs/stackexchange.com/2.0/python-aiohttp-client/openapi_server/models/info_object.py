# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.inbox_items_inner_site import InboxItemsInnerSite
from openapi_server import util


class InfoObject(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, answers_per_minute: float=None, api_revision: str=None, badges_per_minute: float=None, new_active_users: int=None, questions_per_minute: float=None, site: InboxItemsInnerSite=None, total_accepted: int=None, total_answers: int=None, total_badges: int=None, total_comments: int=None, total_questions: int=None, total_unanswered: int=None, total_users: int=None, total_votes: int=None):
        """InfoObject - a model defined in OpenAPI

        :param answers_per_minute: The answers_per_minute of this InfoObject.
        :param api_revision: The api_revision of this InfoObject.
        :param badges_per_minute: The badges_per_minute of this InfoObject.
        :param new_active_users: The new_active_users of this InfoObject.
        :param questions_per_minute: The questions_per_minute of this InfoObject.
        :param site: The site of this InfoObject.
        :param total_accepted: The total_accepted of this InfoObject.
        :param total_answers: The total_answers of this InfoObject.
        :param total_badges: The total_badges of this InfoObject.
        :param total_comments: The total_comments of this InfoObject.
        :param total_questions: The total_questions of this InfoObject.
        :param total_unanswered: The total_unanswered of this InfoObject.
        :param total_users: The total_users of this InfoObject.
        :param total_votes: The total_votes of this InfoObject.
        """
        self.openapi_types = {
            'answers_per_minute': float,
            'api_revision': str,
            'badges_per_minute': float,
            'new_active_users': int,
            'questions_per_minute': float,
            'site': InboxItemsInnerSite,
            'total_accepted': int,
            'total_answers': int,
            'total_badges': int,
            'total_comments': int,
            'total_questions': int,
            'total_unanswered': int,
            'total_users': int,
            'total_votes': int
        }

        self.attribute_map = {
            'answers_per_minute': 'answers_per_minute',
            'api_revision': 'api_revision',
            'badges_per_minute': 'badges_per_minute',
            'new_active_users': 'new_active_users',
            'questions_per_minute': 'questions_per_minute',
            'site': 'site',
            'total_accepted': 'total_accepted',
            'total_answers': 'total_answers',
            'total_badges': 'total_badges',
            'total_comments': 'total_comments',
            'total_questions': 'total_questions',
            'total_unanswered': 'total_unanswered',
            'total_users': 'total_users',
            'total_votes': 'total_votes'
        }

        self._answers_per_minute = answers_per_minute
        self._api_revision = api_revision
        self._badges_per_minute = badges_per_minute
        self._new_active_users = new_active_users
        self._questions_per_minute = questions_per_minute
        self._site = site
        self._total_accepted = total_accepted
        self._total_answers = total_answers
        self._total_badges = total_badges
        self._total_comments = total_comments
        self._total_questions = total_questions
        self._total_unanswered = total_unanswered
        self._total_users = total_users
        self._total_votes = total_votes

    @classmethod
    def from_dict(cls, dikt: dict) -> 'InfoObject':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The info_object of this InfoObject.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def answers_per_minute(self):
        """Gets the answers_per_minute of this InfoObject.


        :return: The answers_per_minute of this InfoObject.
        :rtype: float
        """
        return self._answers_per_minute

    @answers_per_minute.setter
    def answers_per_minute(self, answers_per_minute):
        """Sets the answers_per_minute of this InfoObject.


        :param answers_per_minute: The answers_per_minute of this InfoObject.
        :type answers_per_minute: float
        """

        self._answers_per_minute = answers_per_minute

    @property
    def api_revision(self):
        """Gets the api_revision of this InfoObject.


        :return: The api_revision of this InfoObject.
        :rtype: str
        """
        return self._api_revision

    @api_revision.setter
    def api_revision(self, api_revision):
        """Sets the api_revision of this InfoObject.


        :param api_revision: The api_revision of this InfoObject.
        :type api_revision: str
        """

        self._api_revision = api_revision

    @property
    def badges_per_minute(self):
        """Gets the badges_per_minute of this InfoObject.


        :return: The badges_per_minute of this InfoObject.
        :rtype: float
        """
        return self._badges_per_minute

    @badges_per_minute.setter
    def badges_per_minute(self, badges_per_minute):
        """Sets the badges_per_minute of this InfoObject.


        :param badges_per_minute: The badges_per_minute of this InfoObject.
        :type badges_per_minute: float
        """

        self._badges_per_minute = badges_per_minute

    @property
    def new_active_users(self):
        """Gets the new_active_users of this InfoObject.


        :return: The new_active_users of this InfoObject.
        :rtype: int
        """
        return self._new_active_users

    @new_active_users.setter
    def new_active_users(self, new_active_users):
        """Sets the new_active_users of this InfoObject.


        :param new_active_users: The new_active_users of this InfoObject.
        :type new_active_users: int
        """

        self._new_active_users = new_active_users

    @property
    def questions_per_minute(self):
        """Gets the questions_per_minute of this InfoObject.


        :return: The questions_per_minute of this InfoObject.
        :rtype: float
        """
        return self._questions_per_minute

    @questions_per_minute.setter
    def questions_per_minute(self, questions_per_minute):
        """Sets the questions_per_minute of this InfoObject.


        :param questions_per_minute: The questions_per_minute of this InfoObject.
        :type questions_per_minute: float
        """

        self._questions_per_minute = questions_per_minute

    @property
    def site(self):
        """Gets the site of this InfoObject.


        :return: The site of this InfoObject.
        :rtype: InboxItemsInnerSite
        """
        return self._site

    @site.setter
    def site(self, site):
        """Sets the site of this InfoObject.


        :param site: The site of this InfoObject.
        :type site: InboxItemsInnerSite
        """

        self._site = site

    @property
    def total_accepted(self):
        """Gets the total_accepted of this InfoObject.


        :return: The total_accepted of this InfoObject.
        :rtype: int
        """
        return self._total_accepted

    @total_accepted.setter
    def total_accepted(self, total_accepted):
        """Sets the total_accepted of this InfoObject.


        :param total_accepted: The total_accepted of this InfoObject.
        :type total_accepted: int
        """

        self._total_accepted = total_accepted

    @property
    def total_answers(self):
        """Gets the total_answers of this InfoObject.


        :return: The total_answers of this InfoObject.
        :rtype: int
        """
        return self._total_answers

    @total_answers.setter
    def total_answers(self, total_answers):
        """Sets the total_answers of this InfoObject.


        :param total_answers: The total_answers of this InfoObject.
        :type total_answers: int
        """

        self._total_answers = total_answers

    @property
    def total_badges(self):
        """Gets the total_badges of this InfoObject.


        :return: The total_badges of this InfoObject.
        :rtype: int
        """
        return self._total_badges

    @total_badges.setter
    def total_badges(self, total_badges):
        """Sets the total_badges of this InfoObject.


        :param total_badges: The total_badges of this InfoObject.
        :type total_badges: int
        """

        self._total_badges = total_badges

    @property
    def total_comments(self):
        """Gets the total_comments of this InfoObject.


        :return: The total_comments of this InfoObject.
        :rtype: int
        """
        return self._total_comments

    @total_comments.setter
    def total_comments(self, total_comments):
        """Sets the total_comments of this InfoObject.


        :param total_comments: The total_comments of this InfoObject.
        :type total_comments: int
        """

        self._total_comments = total_comments

    @property
    def total_questions(self):
        """Gets the total_questions of this InfoObject.


        :return: The total_questions of this InfoObject.
        :rtype: int
        """
        return self._total_questions

    @total_questions.setter
    def total_questions(self, total_questions):
        """Sets the total_questions of this InfoObject.


        :param total_questions: The total_questions of this InfoObject.
        :type total_questions: int
        """

        self._total_questions = total_questions

    @property
    def total_unanswered(self):
        """Gets the total_unanswered of this InfoObject.


        :return: The total_unanswered of this InfoObject.
        :rtype: int
        """
        return self._total_unanswered

    @total_unanswered.setter
    def total_unanswered(self, total_unanswered):
        """Sets the total_unanswered of this InfoObject.


        :param total_unanswered: The total_unanswered of this InfoObject.
        :type total_unanswered: int
        """

        self._total_unanswered = total_unanswered

    @property
    def total_users(self):
        """Gets the total_users of this InfoObject.


        :return: The total_users of this InfoObject.
        :rtype: int
        """
        return self._total_users

    @total_users.setter
    def total_users(self, total_users):
        """Sets the total_users of this InfoObject.


        :param total_users: The total_users of this InfoObject.
        :type total_users: int
        """

        self._total_users = total_users

    @property
    def total_votes(self):
        """Gets the total_votes of this InfoObject.


        :return: The total_votes of this InfoObject.
        :rtype: int
        """
        return self._total_votes

    @total_votes.setter
    def total_votes(self, total_votes):
        """Sets the total_votes of this InfoObject.


        :param total_votes: The total_votes of this InfoObject.
        :type total_votes: int
        """

        self._total_votes = total_votes
