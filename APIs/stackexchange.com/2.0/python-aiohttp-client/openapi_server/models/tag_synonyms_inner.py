# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TagSynonymsInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, applied_count: int=None, creation_date: int=None, from_tag: str=None, last_applied_date: int=None, to_tag: str=None):
        """TagSynonymsInner - a model defined in OpenAPI

        :param applied_count: The applied_count of this TagSynonymsInner.
        :param creation_date: The creation_date of this TagSynonymsInner.
        :param from_tag: The from_tag of this TagSynonymsInner.
        :param last_applied_date: The last_applied_date of this TagSynonymsInner.
        :param to_tag: The to_tag of this TagSynonymsInner.
        """
        self.openapi_types = {
            'applied_count': int,
            'creation_date': int,
            'from_tag': str,
            'last_applied_date': int,
            'to_tag': str
        }

        self.attribute_map = {
            'applied_count': 'applied_count',
            'creation_date': 'creation_date',
            'from_tag': 'from_tag',
            'last_applied_date': 'last_applied_date',
            'to_tag': 'to_tag'
        }

        self._applied_count = applied_count
        self._creation_date = creation_date
        self._from_tag = from_tag
        self._last_applied_date = last_applied_date
        self._to_tag = to_tag

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TagSynonymsInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The tag_synonyms_inner of this TagSynonymsInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def applied_count(self):
        """Gets the applied_count of this TagSynonymsInner.


        :return: The applied_count of this TagSynonymsInner.
        :rtype: int
        """
        return self._applied_count

    @applied_count.setter
    def applied_count(self, applied_count):
        """Sets the applied_count of this TagSynonymsInner.


        :param applied_count: The applied_count of this TagSynonymsInner.
        :type applied_count: int
        """

        self._applied_count = applied_count

    @property
    def creation_date(self):
        """Gets the creation_date of this TagSynonymsInner.


        :return: The creation_date of this TagSynonymsInner.
        :rtype: int
        """
        return self._creation_date

    @creation_date.setter
    def creation_date(self, creation_date):
        """Sets the creation_date of this TagSynonymsInner.


        :param creation_date: The creation_date of this TagSynonymsInner.
        :type creation_date: int
        """

        self._creation_date = creation_date

    @property
    def from_tag(self):
        """Gets the from_tag of this TagSynonymsInner.


        :return: The from_tag of this TagSynonymsInner.
        :rtype: str
        """
        return self._from_tag

    @from_tag.setter
    def from_tag(self, from_tag):
        """Sets the from_tag of this TagSynonymsInner.


        :param from_tag: The from_tag of this TagSynonymsInner.
        :type from_tag: str
        """

        self._from_tag = from_tag

    @property
    def last_applied_date(self):
        """Gets the last_applied_date of this TagSynonymsInner.


        :return: The last_applied_date of this TagSynonymsInner.
        :rtype: int
        """
        return self._last_applied_date

    @last_applied_date.setter
    def last_applied_date(self, last_applied_date):
        """Sets the last_applied_date of this TagSynonymsInner.


        :param last_applied_date: The last_applied_date of this TagSynonymsInner.
        :type last_applied_date: int
        """

        self._last_applied_date = last_applied_date

    @property
    def to_tag(self):
        """Gets the to_tag of this TagSynonymsInner.


        :return: The to_tag of this TagSynonymsInner.
        :rtype: str
        """
        return self._to_tag

    @to_tag.setter
    def to_tag(self, to_tag):
        """Sets the to_tag of this TagSynonymsInner.


        :param to_tag: The to_tag of this TagSynonymsInner.
        :type to_tag: str
        """

        self._to_tag = to_tag
