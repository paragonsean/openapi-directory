# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.answers_inner_last_editor import AnswersInnerLastEditor
from openapi_server.models.questions_inner_closed_details import QuestionsInnerClosedDetails
from openapi_server.models.questions_inner_migrated_from import QuestionsInnerMigratedFrom
from openapi_server.models.questions_inner_notice import QuestionsInnerNotice
from openapi_server import util


class QuestionsInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, accepted_answer_id: int=None, answer_count: int=None, answers: List[object]=None, body: str=None, body_markdown: str=None, bounty_amount: int=None, bounty_closes_date: int=None, bounty_user: AnswersInnerLastEditor=None, can_close: bool=None, can_flag: bool=None, close_vote_count: int=None, closed_date: int=None, closed_details: QuestionsInnerClosedDetails=None, closed_reason: str=None, comment_count: int=None, comments: List[object]=None, community_owned_date: int=None, creation_date: int=None, delete_vote_count: int=None, down_vote_count: int=None, downvoted: bool=None, favorite_count: int=None, favorited: bool=None, is_answered: bool=None, last_activity_date: int=None, last_edit_date: int=None, last_editor: AnswersInnerLastEditor=None, link: str=None, locked_date: int=None, migrated_from: QuestionsInnerMigratedFrom=None, migrated_to: QuestionsInnerMigratedFrom=None, notice: QuestionsInnerNotice=None, owner: AnswersInnerLastEditor=None, protected_date: int=None, question_id: int=None, reopen_vote_count: int=None, score: int=None, share_link: str=None, tags: List[object]=None, title: str=None, up_vote_count: int=None, upvoted: bool=None, view_count: int=None):
        """QuestionsInner - a model defined in OpenAPI

        :param accepted_answer_id: The accepted_answer_id of this QuestionsInner.
        :param answer_count: The answer_count of this QuestionsInner.
        :param answers: The answers of this QuestionsInner.
        :param body: The body of this QuestionsInner.
        :param body_markdown: The body_markdown of this QuestionsInner.
        :param bounty_amount: The bounty_amount of this QuestionsInner.
        :param bounty_closes_date: The bounty_closes_date of this QuestionsInner.
        :param bounty_user: The bounty_user of this QuestionsInner.
        :param can_close: The can_close of this QuestionsInner.
        :param can_flag: The can_flag of this QuestionsInner.
        :param close_vote_count: The close_vote_count of this QuestionsInner.
        :param closed_date: The closed_date of this QuestionsInner.
        :param closed_details: The closed_details of this QuestionsInner.
        :param closed_reason: The closed_reason of this QuestionsInner.
        :param comment_count: The comment_count of this QuestionsInner.
        :param comments: The comments of this QuestionsInner.
        :param community_owned_date: The community_owned_date of this QuestionsInner.
        :param creation_date: The creation_date of this QuestionsInner.
        :param delete_vote_count: The delete_vote_count of this QuestionsInner.
        :param down_vote_count: The down_vote_count of this QuestionsInner.
        :param downvoted: The downvoted of this QuestionsInner.
        :param favorite_count: The favorite_count of this QuestionsInner.
        :param favorited: The favorited of this QuestionsInner.
        :param is_answered: The is_answered of this QuestionsInner.
        :param last_activity_date: The last_activity_date of this QuestionsInner.
        :param last_edit_date: The last_edit_date of this QuestionsInner.
        :param last_editor: The last_editor of this QuestionsInner.
        :param link: The link of this QuestionsInner.
        :param locked_date: The locked_date of this QuestionsInner.
        :param migrated_from: The migrated_from of this QuestionsInner.
        :param migrated_to: The migrated_to of this QuestionsInner.
        :param notice: The notice of this QuestionsInner.
        :param owner: The owner of this QuestionsInner.
        :param protected_date: The protected_date of this QuestionsInner.
        :param question_id: The question_id of this QuestionsInner.
        :param reopen_vote_count: The reopen_vote_count of this QuestionsInner.
        :param score: The score of this QuestionsInner.
        :param share_link: The share_link of this QuestionsInner.
        :param tags: The tags of this QuestionsInner.
        :param title: The title of this QuestionsInner.
        :param up_vote_count: The up_vote_count of this QuestionsInner.
        :param upvoted: The upvoted of this QuestionsInner.
        :param view_count: The view_count of this QuestionsInner.
        """
        self.openapi_types = {
            'accepted_answer_id': int,
            'answer_count': int,
            'answers': List[object],
            'body': str,
            'body_markdown': str,
            'bounty_amount': int,
            'bounty_closes_date': int,
            'bounty_user': AnswersInnerLastEditor,
            'can_close': bool,
            'can_flag': bool,
            'close_vote_count': int,
            'closed_date': int,
            'closed_details': QuestionsInnerClosedDetails,
            'closed_reason': str,
            'comment_count': int,
            'comments': List[object],
            'community_owned_date': int,
            'creation_date': int,
            'delete_vote_count': int,
            'down_vote_count': int,
            'downvoted': bool,
            'favorite_count': int,
            'favorited': bool,
            'is_answered': bool,
            'last_activity_date': int,
            'last_edit_date': int,
            'last_editor': AnswersInnerLastEditor,
            'link': str,
            'locked_date': int,
            'migrated_from': QuestionsInnerMigratedFrom,
            'migrated_to': QuestionsInnerMigratedFrom,
            'notice': QuestionsInnerNotice,
            'owner': AnswersInnerLastEditor,
            'protected_date': int,
            'question_id': int,
            'reopen_vote_count': int,
            'score': int,
            'share_link': str,
            'tags': List[object],
            'title': str,
            'up_vote_count': int,
            'upvoted': bool,
            'view_count': int
        }

        self.attribute_map = {
            'accepted_answer_id': 'accepted_answer_id',
            'answer_count': 'answer_count',
            'answers': 'answers',
            'body': 'body',
            'body_markdown': 'body_markdown',
            'bounty_amount': 'bounty_amount',
            'bounty_closes_date': 'bounty_closes_date',
            'bounty_user': 'bounty_user',
            'can_close': 'can_close',
            'can_flag': 'can_flag',
            'close_vote_count': 'close_vote_count',
            'closed_date': 'closed_date',
            'closed_details': 'closed_details',
            'closed_reason': 'closed_reason',
            'comment_count': 'comment_count',
            'comments': 'comments',
            'community_owned_date': 'community_owned_date',
            'creation_date': 'creation_date',
            'delete_vote_count': 'delete_vote_count',
            'down_vote_count': 'down_vote_count',
            'downvoted': 'downvoted',
            'favorite_count': 'favorite_count',
            'favorited': 'favorited',
            'is_answered': 'is_answered',
            'last_activity_date': 'last_activity_date',
            'last_edit_date': 'last_edit_date',
            'last_editor': 'last_editor',
            'link': 'link',
            'locked_date': 'locked_date',
            'migrated_from': 'migrated_from',
            'migrated_to': 'migrated_to',
            'notice': 'notice',
            'owner': 'owner',
            'protected_date': 'protected_date',
            'question_id': 'question_id',
            'reopen_vote_count': 'reopen_vote_count',
            'score': 'score',
            'share_link': 'share_link',
            'tags': 'tags',
            'title': 'title',
            'up_vote_count': 'up_vote_count',
            'upvoted': 'upvoted',
            'view_count': 'view_count'
        }

        self._accepted_answer_id = accepted_answer_id
        self._answer_count = answer_count
        self._answers = answers
        self._body = body
        self._body_markdown = body_markdown
        self._bounty_amount = bounty_amount
        self._bounty_closes_date = bounty_closes_date
        self._bounty_user = bounty_user
        self._can_close = can_close
        self._can_flag = can_flag
        self._close_vote_count = close_vote_count
        self._closed_date = closed_date
        self._closed_details = closed_details
        self._closed_reason = closed_reason
        self._comment_count = comment_count
        self._comments = comments
        self._community_owned_date = community_owned_date
        self._creation_date = creation_date
        self._delete_vote_count = delete_vote_count
        self._down_vote_count = down_vote_count
        self._downvoted = downvoted
        self._favorite_count = favorite_count
        self._favorited = favorited
        self._is_answered = is_answered
        self._last_activity_date = last_activity_date
        self._last_edit_date = last_edit_date
        self._last_editor = last_editor
        self._link = link
        self._locked_date = locked_date
        self._migrated_from = migrated_from
        self._migrated_to = migrated_to
        self._notice = notice
        self._owner = owner
        self._protected_date = protected_date
        self._question_id = question_id
        self._reopen_vote_count = reopen_vote_count
        self._score = score
        self._share_link = share_link
        self._tags = tags
        self._title = title
        self._up_vote_count = up_vote_count
        self._upvoted = upvoted
        self._view_count = view_count

    @classmethod
    def from_dict(cls, dikt: dict) -> 'QuestionsInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The questions_inner of this QuestionsInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def accepted_answer_id(self):
        """Gets the accepted_answer_id of this QuestionsInner.


        :return: The accepted_answer_id of this QuestionsInner.
        :rtype: int
        """
        return self._accepted_answer_id

    @accepted_answer_id.setter
    def accepted_answer_id(self, accepted_answer_id):
        """Sets the accepted_answer_id of this QuestionsInner.


        :param accepted_answer_id: The accepted_answer_id of this QuestionsInner.
        :type accepted_answer_id: int
        """

        self._accepted_answer_id = accepted_answer_id

    @property
    def answer_count(self):
        """Gets the answer_count of this QuestionsInner.


        :return: The answer_count of this QuestionsInner.
        :rtype: int
        """
        return self._answer_count

    @answer_count.setter
    def answer_count(self, answer_count):
        """Sets the answer_count of this QuestionsInner.


        :param answer_count: The answer_count of this QuestionsInner.
        :type answer_count: int
        """

        self._answer_count = answer_count

    @property
    def answers(self):
        """Gets the answers of this QuestionsInner.


        :return: The answers of this QuestionsInner.
        :rtype: List[object]
        """
        return self._answers

    @answers.setter
    def answers(self, answers):
        """Sets the answers of this QuestionsInner.


        :param answers: The answers of this QuestionsInner.
        :type answers: List[object]
        """

        self._answers = answers

    @property
    def body(self):
        """Gets the body of this QuestionsInner.


        :return: The body of this QuestionsInner.
        :rtype: str
        """
        return self._body

    @body.setter
    def body(self, body):
        """Sets the body of this QuestionsInner.


        :param body: The body of this QuestionsInner.
        :type body: str
        """

        self._body = body

    @property
    def body_markdown(self):
        """Gets the body_markdown of this QuestionsInner.


        :return: The body_markdown of this QuestionsInner.
        :rtype: str
        """
        return self._body_markdown

    @body_markdown.setter
    def body_markdown(self, body_markdown):
        """Sets the body_markdown of this QuestionsInner.


        :param body_markdown: The body_markdown of this QuestionsInner.
        :type body_markdown: str
        """

        self._body_markdown = body_markdown

    @property
    def bounty_amount(self):
        """Gets the bounty_amount of this QuestionsInner.


        :return: The bounty_amount of this QuestionsInner.
        :rtype: int
        """
        return self._bounty_amount

    @bounty_amount.setter
    def bounty_amount(self, bounty_amount):
        """Sets the bounty_amount of this QuestionsInner.


        :param bounty_amount: The bounty_amount of this QuestionsInner.
        :type bounty_amount: int
        """

        self._bounty_amount = bounty_amount

    @property
    def bounty_closes_date(self):
        """Gets the bounty_closes_date of this QuestionsInner.


        :return: The bounty_closes_date of this QuestionsInner.
        :rtype: int
        """
        return self._bounty_closes_date

    @bounty_closes_date.setter
    def bounty_closes_date(self, bounty_closes_date):
        """Sets the bounty_closes_date of this QuestionsInner.


        :param bounty_closes_date: The bounty_closes_date of this QuestionsInner.
        :type bounty_closes_date: int
        """

        self._bounty_closes_date = bounty_closes_date

    @property
    def bounty_user(self):
        """Gets the bounty_user of this QuestionsInner.


        :return: The bounty_user of this QuestionsInner.
        :rtype: AnswersInnerLastEditor
        """
        return self._bounty_user

    @bounty_user.setter
    def bounty_user(self, bounty_user):
        """Sets the bounty_user of this QuestionsInner.


        :param bounty_user: The bounty_user of this QuestionsInner.
        :type bounty_user: AnswersInnerLastEditor
        """

        self._bounty_user = bounty_user

    @property
    def can_close(self):
        """Gets the can_close of this QuestionsInner.


        :return: The can_close of this QuestionsInner.
        :rtype: bool
        """
        return self._can_close

    @can_close.setter
    def can_close(self, can_close):
        """Sets the can_close of this QuestionsInner.


        :param can_close: The can_close of this QuestionsInner.
        :type can_close: bool
        """

        self._can_close = can_close

    @property
    def can_flag(self):
        """Gets the can_flag of this QuestionsInner.


        :return: The can_flag of this QuestionsInner.
        :rtype: bool
        """
        return self._can_flag

    @can_flag.setter
    def can_flag(self, can_flag):
        """Sets the can_flag of this QuestionsInner.


        :param can_flag: The can_flag of this QuestionsInner.
        :type can_flag: bool
        """

        self._can_flag = can_flag

    @property
    def close_vote_count(self):
        """Gets the close_vote_count of this QuestionsInner.


        :return: The close_vote_count of this QuestionsInner.
        :rtype: int
        """
        return self._close_vote_count

    @close_vote_count.setter
    def close_vote_count(self, close_vote_count):
        """Sets the close_vote_count of this QuestionsInner.


        :param close_vote_count: The close_vote_count of this QuestionsInner.
        :type close_vote_count: int
        """

        self._close_vote_count = close_vote_count

    @property
    def closed_date(self):
        """Gets the closed_date of this QuestionsInner.


        :return: The closed_date of this QuestionsInner.
        :rtype: int
        """
        return self._closed_date

    @closed_date.setter
    def closed_date(self, closed_date):
        """Sets the closed_date of this QuestionsInner.


        :param closed_date: The closed_date of this QuestionsInner.
        :type closed_date: int
        """

        self._closed_date = closed_date

    @property
    def closed_details(self):
        """Gets the closed_details of this QuestionsInner.


        :return: The closed_details of this QuestionsInner.
        :rtype: QuestionsInnerClosedDetails
        """
        return self._closed_details

    @closed_details.setter
    def closed_details(self, closed_details):
        """Sets the closed_details of this QuestionsInner.


        :param closed_details: The closed_details of this QuestionsInner.
        :type closed_details: QuestionsInnerClosedDetails
        """

        self._closed_details = closed_details

    @property
    def closed_reason(self):
        """Gets the closed_reason of this QuestionsInner.


        :return: The closed_reason of this QuestionsInner.
        :rtype: str
        """
        return self._closed_reason

    @closed_reason.setter
    def closed_reason(self, closed_reason):
        """Sets the closed_reason of this QuestionsInner.


        :param closed_reason: The closed_reason of this QuestionsInner.
        :type closed_reason: str
        """

        self._closed_reason = closed_reason

    @property
    def comment_count(self):
        """Gets the comment_count of this QuestionsInner.


        :return: The comment_count of this QuestionsInner.
        :rtype: int
        """
        return self._comment_count

    @comment_count.setter
    def comment_count(self, comment_count):
        """Sets the comment_count of this QuestionsInner.


        :param comment_count: The comment_count of this QuestionsInner.
        :type comment_count: int
        """

        self._comment_count = comment_count

    @property
    def comments(self):
        """Gets the comments of this QuestionsInner.


        :return: The comments of this QuestionsInner.
        :rtype: List[object]
        """
        return self._comments

    @comments.setter
    def comments(self, comments):
        """Sets the comments of this QuestionsInner.


        :param comments: The comments of this QuestionsInner.
        :type comments: List[object]
        """

        self._comments = comments

    @property
    def community_owned_date(self):
        """Gets the community_owned_date of this QuestionsInner.


        :return: The community_owned_date of this QuestionsInner.
        :rtype: int
        """
        return self._community_owned_date

    @community_owned_date.setter
    def community_owned_date(self, community_owned_date):
        """Sets the community_owned_date of this QuestionsInner.


        :param community_owned_date: The community_owned_date of this QuestionsInner.
        :type community_owned_date: int
        """

        self._community_owned_date = community_owned_date

    @property
    def creation_date(self):
        """Gets the creation_date of this QuestionsInner.


        :return: The creation_date of this QuestionsInner.
        :rtype: int
        """
        return self._creation_date

    @creation_date.setter
    def creation_date(self, creation_date):
        """Sets the creation_date of this QuestionsInner.


        :param creation_date: The creation_date of this QuestionsInner.
        :type creation_date: int
        """

        self._creation_date = creation_date

    @property
    def delete_vote_count(self):
        """Gets the delete_vote_count of this QuestionsInner.


        :return: The delete_vote_count of this QuestionsInner.
        :rtype: int
        """
        return self._delete_vote_count

    @delete_vote_count.setter
    def delete_vote_count(self, delete_vote_count):
        """Sets the delete_vote_count of this QuestionsInner.


        :param delete_vote_count: The delete_vote_count of this QuestionsInner.
        :type delete_vote_count: int
        """

        self._delete_vote_count = delete_vote_count

    @property
    def down_vote_count(self):
        """Gets the down_vote_count of this QuestionsInner.


        :return: The down_vote_count of this QuestionsInner.
        :rtype: int
        """
        return self._down_vote_count

    @down_vote_count.setter
    def down_vote_count(self, down_vote_count):
        """Sets the down_vote_count of this QuestionsInner.


        :param down_vote_count: The down_vote_count of this QuestionsInner.
        :type down_vote_count: int
        """

        self._down_vote_count = down_vote_count

    @property
    def downvoted(self):
        """Gets the downvoted of this QuestionsInner.


        :return: The downvoted of this QuestionsInner.
        :rtype: bool
        """
        return self._downvoted

    @downvoted.setter
    def downvoted(self, downvoted):
        """Sets the downvoted of this QuestionsInner.


        :param downvoted: The downvoted of this QuestionsInner.
        :type downvoted: bool
        """

        self._downvoted = downvoted

    @property
    def favorite_count(self):
        """Gets the favorite_count of this QuestionsInner.


        :return: The favorite_count of this QuestionsInner.
        :rtype: int
        """
        return self._favorite_count

    @favorite_count.setter
    def favorite_count(self, favorite_count):
        """Sets the favorite_count of this QuestionsInner.


        :param favorite_count: The favorite_count of this QuestionsInner.
        :type favorite_count: int
        """

        self._favorite_count = favorite_count

    @property
    def favorited(self):
        """Gets the favorited of this QuestionsInner.


        :return: The favorited of this QuestionsInner.
        :rtype: bool
        """
        return self._favorited

    @favorited.setter
    def favorited(self, favorited):
        """Sets the favorited of this QuestionsInner.


        :param favorited: The favorited of this QuestionsInner.
        :type favorited: bool
        """

        self._favorited = favorited

    @property
    def is_answered(self):
        """Gets the is_answered of this QuestionsInner.


        :return: The is_answered of this QuestionsInner.
        :rtype: bool
        """
        return self._is_answered

    @is_answered.setter
    def is_answered(self, is_answered):
        """Sets the is_answered of this QuestionsInner.


        :param is_answered: The is_answered of this QuestionsInner.
        :type is_answered: bool
        """

        self._is_answered = is_answered

    @property
    def last_activity_date(self):
        """Gets the last_activity_date of this QuestionsInner.


        :return: The last_activity_date of this QuestionsInner.
        :rtype: int
        """
        return self._last_activity_date

    @last_activity_date.setter
    def last_activity_date(self, last_activity_date):
        """Sets the last_activity_date of this QuestionsInner.


        :param last_activity_date: The last_activity_date of this QuestionsInner.
        :type last_activity_date: int
        """

        self._last_activity_date = last_activity_date

    @property
    def last_edit_date(self):
        """Gets the last_edit_date of this QuestionsInner.


        :return: The last_edit_date of this QuestionsInner.
        :rtype: int
        """
        return self._last_edit_date

    @last_edit_date.setter
    def last_edit_date(self, last_edit_date):
        """Sets the last_edit_date of this QuestionsInner.


        :param last_edit_date: The last_edit_date of this QuestionsInner.
        :type last_edit_date: int
        """

        self._last_edit_date = last_edit_date

    @property
    def last_editor(self):
        """Gets the last_editor of this QuestionsInner.


        :return: The last_editor of this QuestionsInner.
        :rtype: AnswersInnerLastEditor
        """
        return self._last_editor

    @last_editor.setter
    def last_editor(self, last_editor):
        """Sets the last_editor of this QuestionsInner.


        :param last_editor: The last_editor of this QuestionsInner.
        :type last_editor: AnswersInnerLastEditor
        """

        self._last_editor = last_editor

    @property
    def link(self):
        """Gets the link of this QuestionsInner.


        :return: The link of this QuestionsInner.
        :rtype: str
        """
        return self._link

    @link.setter
    def link(self, link):
        """Sets the link of this QuestionsInner.


        :param link: The link of this QuestionsInner.
        :type link: str
        """

        self._link = link

    @property
    def locked_date(self):
        """Gets the locked_date of this QuestionsInner.


        :return: The locked_date of this QuestionsInner.
        :rtype: int
        """
        return self._locked_date

    @locked_date.setter
    def locked_date(self, locked_date):
        """Sets the locked_date of this QuestionsInner.


        :param locked_date: The locked_date of this QuestionsInner.
        :type locked_date: int
        """

        self._locked_date = locked_date

    @property
    def migrated_from(self):
        """Gets the migrated_from of this QuestionsInner.


        :return: The migrated_from of this QuestionsInner.
        :rtype: QuestionsInnerMigratedFrom
        """
        return self._migrated_from

    @migrated_from.setter
    def migrated_from(self, migrated_from):
        """Sets the migrated_from of this QuestionsInner.


        :param migrated_from: The migrated_from of this QuestionsInner.
        :type migrated_from: QuestionsInnerMigratedFrom
        """

        self._migrated_from = migrated_from

    @property
    def migrated_to(self):
        """Gets the migrated_to of this QuestionsInner.


        :return: The migrated_to of this QuestionsInner.
        :rtype: QuestionsInnerMigratedFrom
        """
        return self._migrated_to

    @migrated_to.setter
    def migrated_to(self, migrated_to):
        """Sets the migrated_to of this QuestionsInner.


        :param migrated_to: The migrated_to of this QuestionsInner.
        :type migrated_to: QuestionsInnerMigratedFrom
        """

        self._migrated_to = migrated_to

    @property
    def notice(self):
        """Gets the notice of this QuestionsInner.


        :return: The notice of this QuestionsInner.
        :rtype: QuestionsInnerNotice
        """
        return self._notice

    @notice.setter
    def notice(self, notice):
        """Sets the notice of this QuestionsInner.


        :param notice: The notice of this QuestionsInner.
        :type notice: QuestionsInnerNotice
        """

        self._notice = notice

    @property
    def owner(self):
        """Gets the owner of this QuestionsInner.


        :return: The owner of this QuestionsInner.
        :rtype: AnswersInnerLastEditor
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this QuestionsInner.


        :param owner: The owner of this QuestionsInner.
        :type owner: AnswersInnerLastEditor
        """

        self._owner = owner

    @property
    def protected_date(self):
        """Gets the protected_date of this QuestionsInner.


        :return: The protected_date of this QuestionsInner.
        :rtype: int
        """
        return self._protected_date

    @protected_date.setter
    def protected_date(self, protected_date):
        """Sets the protected_date of this QuestionsInner.


        :param protected_date: The protected_date of this QuestionsInner.
        :type protected_date: int
        """

        self._protected_date = protected_date

    @property
    def question_id(self):
        """Gets the question_id of this QuestionsInner.


        :return: The question_id of this QuestionsInner.
        :rtype: int
        """
        return self._question_id

    @question_id.setter
    def question_id(self, question_id):
        """Sets the question_id of this QuestionsInner.


        :param question_id: The question_id of this QuestionsInner.
        :type question_id: int
        """

        self._question_id = question_id

    @property
    def reopen_vote_count(self):
        """Gets the reopen_vote_count of this QuestionsInner.


        :return: The reopen_vote_count of this QuestionsInner.
        :rtype: int
        """
        return self._reopen_vote_count

    @reopen_vote_count.setter
    def reopen_vote_count(self, reopen_vote_count):
        """Sets the reopen_vote_count of this QuestionsInner.


        :param reopen_vote_count: The reopen_vote_count of this QuestionsInner.
        :type reopen_vote_count: int
        """

        self._reopen_vote_count = reopen_vote_count

    @property
    def score(self):
        """Gets the score of this QuestionsInner.


        :return: The score of this QuestionsInner.
        :rtype: int
        """
        return self._score

    @score.setter
    def score(self, score):
        """Sets the score of this QuestionsInner.


        :param score: The score of this QuestionsInner.
        :type score: int
        """

        self._score = score

    @property
    def share_link(self):
        """Gets the share_link of this QuestionsInner.


        :return: The share_link of this QuestionsInner.
        :rtype: str
        """
        return self._share_link

    @share_link.setter
    def share_link(self, share_link):
        """Sets the share_link of this QuestionsInner.


        :param share_link: The share_link of this QuestionsInner.
        :type share_link: str
        """

        self._share_link = share_link

    @property
    def tags(self):
        """Gets the tags of this QuestionsInner.


        :return: The tags of this QuestionsInner.
        :rtype: List[object]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this QuestionsInner.


        :param tags: The tags of this QuestionsInner.
        :type tags: List[object]
        """

        self._tags = tags

    @property
    def title(self):
        """Gets the title of this QuestionsInner.


        :return: The title of this QuestionsInner.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this QuestionsInner.


        :param title: The title of this QuestionsInner.
        :type title: str
        """

        self._title = title

    @property
    def up_vote_count(self):
        """Gets the up_vote_count of this QuestionsInner.


        :return: The up_vote_count of this QuestionsInner.
        :rtype: int
        """
        return self._up_vote_count

    @up_vote_count.setter
    def up_vote_count(self, up_vote_count):
        """Sets the up_vote_count of this QuestionsInner.


        :param up_vote_count: The up_vote_count of this QuestionsInner.
        :type up_vote_count: int
        """

        self._up_vote_count = up_vote_count

    @property
    def upvoted(self):
        """Gets the upvoted of this QuestionsInner.


        :return: The upvoted of this QuestionsInner.
        :rtype: bool
        """
        return self._upvoted

    @upvoted.setter
    def upvoted(self, upvoted):
        """Sets the upvoted of this QuestionsInner.


        :param upvoted: The upvoted of this QuestionsInner.
        :type upvoted: bool
        """

        self._upvoted = upvoted

    @property
    def view_count(self):
        """Gets the view_count of this QuestionsInner.


        :return: The view_count of this QuestionsInner.
        :rtype: int
        """
        return self._view_count

    @view_count.setter
    def view_count(self, view_count):
        """Sets the view_count of this QuestionsInner.


        :param view_count: The view_count of this QuestionsInner.
        :type view_count: int
        """

        self._view_count = view_count
