# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class EventsInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, creation_date: int=None, event_type: str=None, excerpt: str=None, link: str=None, the_id_of_the_object__answer_comment_question_or_user_the_event_describes: int=None):
        """EventsInner - a model defined in OpenAPI

        :param creation_date: The creation_date of this EventsInner.
        :param event_type: The event_type of this EventsInner.
        :param excerpt: The excerpt of this EventsInner.
        :param link: The link of this EventsInner.
        :param the_id_of_the_object__answer_comment_question_or_user_the_event_describes: The the_id_of_the_object__answer_comment_question_or_user_the_event_describes of this EventsInner.
        """
        self.openapi_types = {
            'creation_date': int,
            'event_type': str,
            'excerpt': str,
            'link': str,
            'the_id_of_the_object__answer_comment_question_or_user_the_event_describes': int
        }

        self.attribute_map = {
            'creation_date': 'creation_date',
            'event_type': 'event_type',
            'excerpt': 'excerpt',
            'link': 'link',
            'the_id_of_the_object__answer_comment_question_or_user_the_event_describes': 'the id of the object (answer, comment, question, or user) the event describes'
        }

        self._creation_date = creation_date
        self._event_type = event_type
        self._excerpt = excerpt
        self._link = link
        self._the_id_of_the_object__answer_comment_question_or_user_the_event_describes = the_id_of_the_object__answer_comment_question_or_user_the_event_describes

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EventsInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The events_inner of this EventsInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def creation_date(self):
        """Gets the creation_date of this EventsInner.


        :return: The creation_date of this EventsInner.
        :rtype: int
        """
        return self._creation_date

    @creation_date.setter
    def creation_date(self, creation_date):
        """Sets the creation_date of this EventsInner.


        :param creation_date: The creation_date of this EventsInner.
        :type creation_date: int
        """

        self._creation_date = creation_date

    @property
    def event_type(self):
        """Gets the event_type of this EventsInner.


        :return: The event_type of this EventsInner.
        :rtype: str
        """
        return self._event_type

    @event_type.setter
    def event_type(self, event_type):
        """Sets the event_type of this EventsInner.


        :param event_type: The event_type of this EventsInner.
        :type event_type: str
        """

        self._event_type = event_type

    @property
    def excerpt(self):
        """Gets the excerpt of this EventsInner.


        :return: The excerpt of this EventsInner.
        :rtype: str
        """
        return self._excerpt

    @excerpt.setter
    def excerpt(self, excerpt):
        """Sets the excerpt of this EventsInner.


        :param excerpt: The excerpt of this EventsInner.
        :type excerpt: str
        """

        self._excerpt = excerpt

    @property
    def link(self):
        """Gets the link of this EventsInner.


        :return: The link of this EventsInner.
        :rtype: str
        """
        return self._link

    @link.setter
    def link(self, link):
        """Sets the link of this EventsInner.


        :param link: The link of this EventsInner.
        :type link: str
        """

        self._link = link

    @property
    def the_id_of_the_object__answer_comment_question_or_user_the_event_describes(self):
        """Gets the the_id_of_the_object__answer_comment_question_or_user_the_event_describes of this EventsInner.


        :return: The the_id_of_the_object__answer_comment_question_or_user_the_event_describes of this EventsInner.
        :rtype: int
        """
        return self._the_id_of_the_object__answer_comment_question_or_user_the_event_describes

    @the_id_of_the_object__answer_comment_question_or_user_the_event_describes.setter
    def the_id_of_the_object__answer_comment_question_or_user_the_event_describes(self, the_id_of_the_object__answer_comment_question_or_user_the_event_describes):
        """Sets the the_id_of_the_object__answer_comment_question_or_user_the_event_describes of this EventsInner.


        :param the_id_of_the_object__answer_comment_question_or_user_the_event_describes: The the_id_of_the_object__answer_comment_question_or_user_the_event_describes of this EventsInner.
        :type the_id_of_the_object__answer_comment_question_or_user_the_event_describes: int
        """

        self._the_id_of_the_object__answer_comment_question_or_user_the_event_describes = the_id_of_the_object__answer_comment_question_or_user_the_event_describes
