# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.answers_inner_last_editor import AnswersInnerLastEditor
from openapi_server import util


class BadgesInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, award_count: int=None, badge_id: int=None, badge_type: str=None, description: str=None, link: str=None, name: str=None, rank: str=None, user: AnswersInnerLastEditor=None):
        """BadgesInner - a model defined in OpenAPI

        :param award_count: The award_count of this BadgesInner.
        :param badge_id: The badge_id of this BadgesInner.
        :param badge_type: The badge_type of this BadgesInner.
        :param description: The description of this BadgesInner.
        :param link: The link of this BadgesInner.
        :param name: The name of this BadgesInner.
        :param rank: The rank of this BadgesInner.
        :param user: The user of this BadgesInner.
        """
        self.openapi_types = {
            'award_count': int,
            'badge_id': int,
            'badge_type': str,
            'description': str,
            'link': str,
            'name': str,
            'rank': str,
            'user': AnswersInnerLastEditor
        }

        self.attribute_map = {
            'award_count': 'award_count',
            'badge_id': 'badge_id',
            'badge_type': 'badge_type',
            'description': 'description',
            'link': 'link',
            'name': 'name',
            'rank': 'rank',
            'user': 'user'
        }

        self._award_count = award_count
        self._badge_id = badge_id
        self._badge_type = badge_type
        self._description = description
        self._link = link
        self._name = name
        self._rank = rank
        self._user = user

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BadgesInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The badges_inner of this BadgesInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def award_count(self):
        """Gets the award_count of this BadgesInner.


        :return: The award_count of this BadgesInner.
        :rtype: int
        """
        return self._award_count

    @award_count.setter
    def award_count(self, award_count):
        """Sets the award_count of this BadgesInner.


        :param award_count: The award_count of this BadgesInner.
        :type award_count: int
        """

        self._award_count = award_count

    @property
    def badge_id(self):
        """Gets the badge_id of this BadgesInner.


        :return: The badge_id of this BadgesInner.
        :rtype: int
        """
        return self._badge_id

    @badge_id.setter
    def badge_id(self, badge_id):
        """Sets the badge_id of this BadgesInner.


        :param badge_id: The badge_id of this BadgesInner.
        :type badge_id: int
        """

        self._badge_id = badge_id

    @property
    def badge_type(self):
        """Gets the badge_type of this BadgesInner.


        :return: The badge_type of this BadgesInner.
        :rtype: str
        """
        return self._badge_type

    @badge_type.setter
    def badge_type(self, badge_type):
        """Sets the badge_type of this BadgesInner.


        :param badge_type: The badge_type of this BadgesInner.
        :type badge_type: str
        """

        self._badge_type = badge_type

    @property
    def description(self):
        """Gets the description of this BadgesInner.


        :return: The description of this BadgesInner.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this BadgesInner.


        :param description: The description of this BadgesInner.
        :type description: str
        """

        self._description = description

    @property
    def link(self):
        """Gets the link of this BadgesInner.


        :return: The link of this BadgesInner.
        :rtype: str
        """
        return self._link

    @link.setter
    def link(self, link):
        """Sets the link of this BadgesInner.


        :param link: The link of this BadgesInner.
        :type link: str
        """

        self._link = link

    @property
    def name(self):
        """Gets the name of this BadgesInner.


        :return: The name of this BadgesInner.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this BadgesInner.


        :param name: The name of this BadgesInner.
        :type name: str
        """

        self._name = name

    @property
    def rank(self):
        """Gets the rank of this BadgesInner.


        :return: The rank of this BadgesInner.
        :rtype: str
        """
        return self._rank

    @rank.setter
    def rank(self, rank):
        """Sets the rank of this BadgesInner.


        :param rank: The rank of this BadgesInner.
        :type rank: str
        """

        self._rank = rank

    @property
    def user(self):
        """Gets the user of this BadgesInner.


        :return: The user of this BadgesInner.
        :rtype: AnswersInnerLastEditor
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this BadgesInner.


        :param user: The user of this BadgesInner.
        :type user: AnswersInnerLastEditor
        """

        self._user = user
