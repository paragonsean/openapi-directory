# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.answers_inner_last_editor import AnswersInnerLastEditor
from openapi_server import util


class CreatedComment(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, body: str=None, body_markdown: str=None, can_flag: bool=None, comment_id: int=None, creation_date: int=None, edited: bool=None, link: str=None, owner: AnswersInnerLastEditor=None, post_id: int=None, post_type: str=None, reply_to_user: AnswersInnerLastEditor=None, score: int=None, upvoted: bool=None):
        """CreatedComment - a model defined in OpenAPI

        :param body: The body of this CreatedComment.
        :param body_markdown: The body_markdown of this CreatedComment.
        :param can_flag: The can_flag of this CreatedComment.
        :param comment_id: The comment_id of this CreatedComment.
        :param creation_date: The creation_date of this CreatedComment.
        :param edited: The edited of this CreatedComment.
        :param link: The link of this CreatedComment.
        :param owner: The owner of this CreatedComment.
        :param post_id: The post_id of this CreatedComment.
        :param post_type: The post_type of this CreatedComment.
        :param reply_to_user: The reply_to_user of this CreatedComment.
        :param score: The score of this CreatedComment.
        :param upvoted: The upvoted of this CreatedComment.
        """
        self.openapi_types = {
            'body': str,
            'body_markdown': str,
            'can_flag': bool,
            'comment_id': int,
            'creation_date': int,
            'edited': bool,
            'link': str,
            'owner': AnswersInnerLastEditor,
            'post_id': int,
            'post_type': str,
            'reply_to_user': AnswersInnerLastEditor,
            'score': int,
            'upvoted': bool
        }

        self.attribute_map = {
            'body': 'body',
            'body_markdown': 'body_markdown',
            'can_flag': 'can_flag',
            'comment_id': 'comment_id',
            'creation_date': 'creation_date',
            'edited': 'edited',
            'link': 'link',
            'owner': 'owner',
            'post_id': 'post_id',
            'post_type': 'post_type',
            'reply_to_user': 'reply_to_user',
            'score': 'score',
            'upvoted': 'upvoted'
        }

        self._body = body
        self._body_markdown = body_markdown
        self._can_flag = can_flag
        self._comment_id = comment_id
        self._creation_date = creation_date
        self._edited = edited
        self._link = link
        self._owner = owner
        self._post_id = post_id
        self._post_type = post_type
        self._reply_to_user = reply_to_user
        self._score = score
        self._upvoted = upvoted

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreatedComment':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The created_comment of this CreatedComment.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def body(self):
        """Gets the body of this CreatedComment.


        :return: The body of this CreatedComment.
        :rtype: str
        """
        return self._body

    @body.setter
    def body(self, body):
        """Sets the body of this CreatedComment.


        :param body: The body of this CreatedComment.
        :type body: str
        """

        self._body = body

    @property
    def body_markdown(self):
        """Gets the body_markdown of this CreatedComment.


        :return: The body_markdown of this CreatedComment.
        :rtype: str
        """
        return self._body_markdown

    @body_markdown.setter
    def body_markdown(self, body_markdown):
        """Sets the body_markdown of this CreatedComment.


        :param body_markdown: The body_markdown of this CreatedComment.
        :type body_markdown: str
        """

        self._body_markdown = body_markdown

    @property
    def can_flag(self):
        """Gets the can_flag of this CreatedComment.


        :return: The can_flag of this CreatedComment.
        :rtype: bool
        """
        return self._can_flag

    @can_flag.setter
    def can_flag(self, can_flag):
        """Sets the can_flag of this CreatedComment.


        :param can_flag: The can_flag of this CreatedComment.
        :type can_flag: bool
        """

        self._can_flag = can_flag

    @property
    def comment_id(self):
        """Gets the comment_id of this CreatedComment.


        :return: The comment_id of this CreatedComment.
        :rtype: int
        """
        return self._comment_id

    @comment_id.setter
    def comment_id(self, comment_id):
        """Sets the comment_id of this CreatedComment.


        :param comment_id: The comment_id of this CreatedComment.
        :type comment_id: int
        """

        self._comment_id = comment_id

    @property
    def creation_date(self):
        """Gets the creation_date of this CreatedComment.


        :return: The creation_date of this CreatedComment.
        :rtype: int
        """
        return self._creation_date

    @creation_date.setter
    def creation_date(self, creation_date):
        """Sets the creation_date of this CreatedComment.


        :param creation_date: The creation_date of this CreatedComment.
        :type creation_date: int
        """

        self._creation_date = creation_date

    @property
    def edited(self):
        """Gets the edited of this CreatedComment.


        :return: The edited of this CreatedComment.
        :rtype: bool
        """
        return self._edited

    @edited.setter
    def edited(self, edited):
        """Sets the edited of this CreatedComment.


        :param edited: The edited of this CreatedComment.
        :type edited: bool
        """

        self._edited = edited

    @property
    def link(self):
        """Gets the link of this CreatedComment.


        :return: The link of this CreatedComment.
        :rtype: str
        """
        return self._link

    @link.setter
    def link(self, link):
        """Sets the link of this CreatedComment.


        :param link: The link of this CreatedComment.
        :type link: str
        """

        self._link = link

    @property
    def owner(self):
        """Gets the owner of this CreatedComment.


        :return: The owner of this CreatedComment.
        :rtype: AnswersInnerLastEditor
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this CreatedComment.


        :param owner: The owner of this CreatedComment.
        :type owner: AnswersInnerLastEditor
        """

        self._owner = owner

    @property
    def post_id(self):
        """Gets the post_id of this CreatedComment.


        :return: The post_id of this CreatedComment.
        :rtype: int
        """
        return self._post_id

    @post_id.setter
    def post_id(self, post_id):
        """Sets the post_id of this CreatedComment.


        :param post_id: The post_id of this CreatedComment.
        :type post_id: int
        """

        self._post_id = post_id

    @property
    def post_type(self):
        """Gets the post_type of this CreatedComment.


        :return: The post_type of this CreatedComment.
        :rtype: str
        """
        return self._post_type

    @post_type.setter
    def post_type(self, post_type):
        """Sets the post_type of this CreatedComment.


        :param post_type: The post_type of this CreatedComment.
        :type post_type: str
        """

        self._post_type = post_type

    @property
    def reply_to_user(self):
        """Gets the reply_to_user of this CreatedComment.


        :return: The reply_to_user of this CreatedComment.
        :rtype: AnswersInnerLastEditor
        """
        return self._reply_to_user

    @reply_to_user.setter
    def reply_to_user(self, reply_to_user):
        """Sets the reply_to_user of this CreatedComment.


        :param reply_to_user: The reply_to_user of this CreatedComment.
        :type reply_to_user: AnswersInnerLastEditor
        """

        self._reply_to_user = reply_to_user

    @property
    def score(self):
        """Gets the score of this CreatedComment.


        :return: The score of this CreatedComment.
        :rtype: int
        """
        return self._score

    @score.setter
    def score(self, score):
        """Sets the score of this CreatedComment.


        :param score: The score of this CreatedComment.
        :type score: int
        """

        self._score = score

    @property
    def upvoted(self):
        """Gets the upvoted of this CreatedComment.


        :return: The upvoted of this CreatedComment.
        :rtype: bool
        """
        return self._upvoted

    @upvoted.setter
    def upvoted(self, upvoted):
        """Sets the upvoted of this CreatedComment.


        :param upvoted: The upvoted of this CreatedComment.
        :type upvoted: bool
        """

        self._upvoted = upvoted
