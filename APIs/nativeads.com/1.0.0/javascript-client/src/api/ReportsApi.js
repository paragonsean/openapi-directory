/**
 * Native Ads Publisher API
 * This is a Native Ads Publisher API it provides same functionality as Native Ads Publisher Account GUI. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ModelError from '../model/ModelError';
import ReportsDailyResponse from '../model/ReportsDailyResponse';
import ReportsWebsiteResponse from '../model/ReportsWebsiteResponse';
import ReportsWidgetResponse from '../model/ReportsWidgetResponse';

/**
* Reports service.
* @module api/ReportsApi
* @version 1.0.0
*/
export default class ReportsApi {

    /**
    * Constructs a new ReportsApi. 
    * @alias module:api/ReportsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the publisherReportsDailyGet operation.
     * @callback module:api/ReportsApi~publisherReportsDailyGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ReportsDailyResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns publisher statistics split by date
     * @param {String} token Native Ads Publisher API authentication token
     * @param {Date} startDate start date in format YYYY-MM-DD
     * @param {Date} endDate end date in format YYYY-MM-DD
     * @param {Number} limit maximum number of results per page
     * @param {Number} page page number
     * @param {module:api/ReportsApi~publisherReportsDailyGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ReportsDailyResponse}
     */
    publisherReportsDailyGet(token, startDate, endDate, limit, page, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling publisherReportsDailyGet");
      }
      // verify the required parameter 'startDate' is set
      if (startDate === undefined || startDate === null) {
        throw new Error("Missing the required parameter 'startDate' when calling publisherReportsDailyGet");
      }
      // verify the required parameter 'endDate' is set
      if (endDate === undefined || endDate === null) {
        throw new Error("Missing the required parameter 'endDate' when calling publisherReportsDailyGet");
      }
      // verify the required parameter 'limit' is set
      if (limit === undefined || limit === null) {
        throw new Error("Missing the required parameter 'limit' when calling publisherReportsDailyGet");
      }
      // verify the required parameter 'page' is set
      if (page === undefined || page === null) {
        throw new Error("Missing the required parameter 'page' when calling publisherReportsDailyGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'startDate': startDate,
        'endDate': endDate,
        'limit': limit,
        'page': page
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ReportsDailyResponse;
      return this.apiClient.callApi(
        '/publisher/reports/daily', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the publisherReportsWebsiteGet operation.
     * @callback module:api/ReportsApi~publisherReportsWebsiteGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ReportsWebsiteResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns publisher statistics split by website
     * @param {String} token Native Ads Publisher API authentication token
     * @param {Date} startDate start date in format YYYY-MM-DD
     * @param {Date} endDate end date in format YYYY-MM-DD
     * @param {Number} limit maximum number of results per page
     * @param {Number} page page number
     * @param {module:api/ReportsApi~publisherReportsWebsiteGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ReportsWebsiteResponse}
     */
    publisherReportsWebsiteGet(token, startDate, endDate, limit, page, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling publisherReportsWebsiteGet");
      }
      // verify the required parameter 'startDate' is set
      if (startDate === undefined || startDate === null) {
        throw new Error("Missing the required parameter 'startDate' when calling publisherReportsWebsiteGet");
      }
      // verify the required parameter 'endDate' is set
      if (endDate === undefined || endDate === null) {
        throw new Error("Missing the required parameter 'endDate' when calling publisherReportsWebsiteGet");
      }
      // verify the required parameter 'limit' is set
      if (limit === undefined || limit === null) {
        throw new Error("Missing the required parameter 'limit' when calling publisherReportsWebsiteGet");
      }
      // verify the required parameter 'page' is set
      if (page === undefined || page === null) {
        throw new Error("Missing the required parameter 'page' when calling publisherReportsWebsiteGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'startDate': startDate,
        'endDate': endDate,
        'limit': limit,
        'page': page
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ReportsWebsiteResponse;
      return this.apiClient.callApi(
        '/publisher/reports/website', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the publisherReportsWidgetGet operation.
     * @callback module:api/ReportsApi~publisherReportsWidgetGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ReportsWidgetResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns publisher statistics split by widget
     * @param {String} token Native Ads Publisher API authentication token
     * @param {Date} startDate start date in format YYYY-MM-DD
     * @param {Date} endDate end date in format YYYY-MM-DD
     * @param {Number} limit maximum number of results per page
     * @param {Number} page page number
     * @param {module:api/ReportsApi~publisherReportsWidgetGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ReportsWidgetResponse}
     */
    publisherReportsWidgetGet(token, startDate, endDate, limit, page, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling publisherReportsWidgetGet");
      }
      // verify the required parameter 'startDate' is set
      if (startDate === undefined || startDate === null) {
        throw new Error("Missing the required parameter 'startDate' when calling publisherReportsWidgetGet");
      }
      // verify the required parameter 'endDate' is set
      if (endDate === undefined || endDate === null) {
        throw new Error("Missing the required parameter 'endDate' when calling publisherReportsWidgetGet");
      }
      // verify the required parameter 'limit' is set
      if (limit === undefined || limit === null) {
        throw new Error("Missing the required parameter 'limit' when calling publisherReportsWidgetGet");
      }
      // verify the required parameter 'page' is set
      if (page === undefined || page === null) {
        throw new Error("Missing the required parameter 'page' when calling publisherReportsWidgetGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'token': token,
        'startDate': startDate,
        'endDate': endDate,
        'limit': limit,
        'page': page
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ReportsWidgetResponse;
      return this.apiClient.callApi(
        '/publisher/reports/widget', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
