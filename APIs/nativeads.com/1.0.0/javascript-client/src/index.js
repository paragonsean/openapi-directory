/**
 * Native Ads Publisher API
 * This is a Native Ads Publisher API it provides same functionality as Native Ads Publisher Account GUI. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from './ApiClient';
import AuthResponse from './model/AuthResponse';
import ModelError from './model/ModelError';
import ReportsDailyItem from './model/ReportsDailyItem';
import ReportsDailyResponse from './model/ReportsDailyResponse';
import ReportsWebsiteItem from './model/ReportsWebsiteItem';
import ReportsWebsiteResponse from './model/ReportsWebsiteResponse';
import ReportsWidgetItem from './model/ReportsWidgetItem';
import ReportsWidgetResponse from './model/ReportsWidgetResponse';
import Totals from './model/Totals';
import AuthApi from './api/AuthApi';
import ReportsApi from './api/ReportsApi';


/**
* This is a Native Ads Publisher API it provides same functionality as Native Ads Publisher Account GUI. .<br>
* The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
* <p>
* An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
* <pre>
* var NativeAdsPublisherApi = require('index'); // See note below*.
* var xxxSvc = new NativeAdsPublisherApi.XxxApi(); // Allocate the API class we're going to use.
* var yyyModel = new NativeAdsPublisherApi.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
* and put the application logic within the callback function.</em>
* </p>
* <p>
* A non-AMD browser application (discouraged) might do something like this:
* <pre>
* var xxxSvc = new NativeAdsPublisherApi.XxxApi(); // Allocate the API class we're going to use.
* var yyy = new NativeAdsPublisherApi.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* </p>
* @module index
* @version 1.0.0
*/
export {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient,

    /**
     * The AuthResponse model constructor.
     * @property {module:model/AuthResponse}
     */
    AuthResponse,

    /**
     * The ModelError model constructor.
     * @property {module:model/ModelError}
     */
    ModelError,

    /**
     * The ReportsDailyItem model constructor.
     * @property {module:model/ReportsDailyItem}
     */
    ReportsDailyItem,

    /**
     * The ReportsDailyResponse model constructor.
     * @property {module:model/ReportsDailyResponse}
     */
    ReportsDailyResponse,

    /**
     * The ReportsWebsiteItem model constructor.
     * @property {module:model/ReportsWebsiteItem}
     */
    ReportsWebsiteItem,

    /**
     * The ReportsWebsiteResponse model constructor.
     * @property {module:model/ReportsWebsiteResponse}
     */
    ReportsWebsiteResponse,

    /**
     * The ReportsWidgetItem model constructor.
     * @property {module:model/ReportsWidgetItem}
     */
    ReportsWidgetItem,

    /**
     * The ReportsWidgetResponse model constructor.
     * @property {module:model/ReportsWidgetResponse}
     */
    ReportsWidgetResponse,

    /**
     * The Totals model constructor.
     * @property {module:model/Totals}
     */
    Totals,

    /**
    * The AuthApi service constructor.
    * @property {module:api/AuthApi}
    */
    AuthApi,

    /**
    * The ReportsApi service constructor.
    * @property {module:api/ReportsApi}
    */
    ReportsApi
};
