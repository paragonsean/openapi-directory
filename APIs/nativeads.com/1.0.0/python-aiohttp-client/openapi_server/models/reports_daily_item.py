# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ReportsDailyItem(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, clicks: str=None, cpc: str=None, ctr: str=None, _date: str=None, earnings: str=None, impressions: str=None, net_ecpm: str=None, rpm: str=None):
        """ReportsDailyItem - a model defined in OpenAPI

        :param clicks: The clicks of this ReportsDailyItem.
        :param cpc: The cpc of this ReportsDailyItem.
        :param ctr: The ctr of this ReportsDailyItem.
        :param _date: The _date of this ReportsDailyItem.
        :param earnings: The earnings of this ReportsDailyItem.
        :param impressions: The impressions of this ReportsDailyItem.
        :param net_ecpm: The net_ecpm of this ReportsDailyItem.
        :param rpm: The rpm of this ReportsDailyItem.
        """
        self.openapi_types = {
            'clicks': str,
            'cpc': str,
            'ctr': str,
            '_date': str,
            'earnings': str,
            'impressions': str,
            'net_ecpm': str,
            'rpm': str
        }

        self.attribute_map = {
            'clicks': 'clicks',
            'cpc': 'cpc',
            'ctr': 'ctr',
            '_date': 'date',
            'earnings': 'earnings',
            'impressions': 'impressions',
            'net_ecpm': 'net_ecpm',
            'rpm': 'rpm'
        }

        self._clicks = clicks
        self._cpc = cpc
        self._ctr = ctr
        self.__date = _date
        self._earnings = earnings
        self._impressions = impressions
        self._net_ecpm = net_ecpm
        self._rpm = rpm

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ReportsDailyItem':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The reportsDailyItem of this ReportsDailyItem.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def clicks(self):
        """Gets the clicks of this ReportsDailyItem.


        :return: The clicks of this ReportsDailyItem.
        :rtype: str
        """
        return self._clicks

    @clicks.setter
    def clicks(self, clicks):
        """Sets the clicks of this ReportsDailyItem.


        :param clicks: The clicks of this ReportsDailyItem.
        :type clicks: str
        """

        self._clicks = clicks

    @property
    def cpc(self):
        """Gets the cpc of this ReportsDailyItem.


        :return: The cpc of this ReportsDailyItem.
        :rtype: str
        """
        return self._cpc

    @cpc.setter
    def cpc(self, cpc):
        """Sets the cpc of this ReportsDailyItem.


        :param cpc: The cpc of this ReportsDailyItem.
        :type cpc: str
        """

        self._cpc = cpc

    @property
    def ctr(self):
        """Gets the ctr of this ReportsDailyItem.


        :return: The ctr of this ReportsDailyItem.
        :rtype: str
        """
        return self._ctr

    @ctr.setter
    def ctr(self, ctr):
        """Sets the ctr of this ReportsDailyItem.


        :param ctr: The ctr of this ReportsDailyItem.
        :type ctr: str
        """

        self._ctr = ctr

    @property
    def _date(self):
        """Gets the _date of this ReportsDailyItem.


        :return: The _date of this ReportsDailyItem.
        :rtype: str
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this ReportsDailyItem.


        :param _date: The _date of this ReportsDailyItem.
        :type _date: str
        """

        self.__date = _date

    @property
    def earnings(self):
        """Gets the earnings of this ReportsDailyItem.


        :return: The earnings of this ReportsDailyItem.
        :rtype: str
        """
        return self._earnings

    @earnings.setter
    def earnings(self, earnings):
        """Sets the earnings of this ReportsDailyItem.


        :param earnings: The earnings of this ReportsDailyItem.
        :type earnings: str
        """

        self._earnings = earnings

    @property
    def impressions(self):
        """Gets the impressions of this ReportsDailyItem.


        :return: The impressions of this ReportsDailyItem.
        :rtype: str
        """
        return self._impressions

    @impressions.setter
    def impressions(self, impressions):
        """Sets the impressions of this ReportsDailyItem.


        :param impressions: The impressions of this ReportsDailyItem.
        :type impressions: str
        """

        self._impressions = impressions

    @property
    def net_ecpm(self):
        """Gets the net_ecpm of this ReportsDailyItem.


        :return: The net_ecpm of this ReportsDailyItem.
        :rtype: str
        """
        return self._net_ecpm

    @net_ecpm.setter
    def net_ecpm(self, net_ecpm):
        """Sets the net_ecpm of this ReportsDailyItem.


        :param net_ecpm: The net_ecpm of this ReportsDailyItem.
        :type net_ecpm: str
        """

        self._net_ecpm = net_ecpm

    @property
    def rpm(self):
        """Gets the rpm of this ReportsDailyItem.


        :return: The rpm of this ReportsDailyItem.
        :rtype: str
        """
        return self._rpm

    @rpm.setter
    def rpm(self, rpm):
        """Sets the rpm of this ReportsDailyItem.


        :param rpm: The rpm of this ReportsDailyItem.
        :type rpm: str
        """

        self._rpm = rpm
