/**
 * Native Ads Publisher API
 * This is a Native Ads Publisher API it provides same functionality as Native Ads Publisher Account GUI. 
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIReportsDailyResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIReportsDailyResponse::OAIReportsDailyResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIReportsDailyResponse::OAIReportsDailyResponse() {
    this->initializeModel();
}

OAIReportsDailyResponse::~OAIReportsDailyResponse() {}

void OAIReportsDailyResponse::initializeModel() {

    m_items_isSet = false;
    m_items_isValid = false;

    m_success_isSet = false;
    m_success_isValid = false;

    m_total_count_isSet = false;
    m_total_count_isValid = false;

    m_totals_isSet = false;
    m_totals_isValid = false;
}

void OAIReportsDailyResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIReportsDailyResponse::fromJsonObject(QJsonObject json) {

    m_items_isValid = ::OpenAPI::fromJsonValue(m_items, json[QString("items")]);
    m_items_isSet = !json[QString("items")].isNull() && m_items_isValid;

    m_success_isValid = ::OpenAPI::fromJsonValue(m_success, json[QString("success")]);
    m_success_isSet = !json[QString("success")].isNull() && m_success_isValid;

    m_total_count_isValid = ::OpenAPI::fromJsonValue(m_total_count, json[QString("total_count")]);
    m_total_count_isSet = !json[QString("total_count")].isNull() && m_total_count_isValid;

    m_totals_isValid = ::OpenAPI::fromJsonValue(m_totals, json[QString("totals")]);
    m_totals_isSet = !json[QString("totals")].isNull() && m_totals_isValid;
}

QString OAIReportsDailyResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIReportsDailyResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_items.size() > 0) {
        obj.insert(QString("items"), ::OpenAPI::toJsonValue(m_items));
    }
    if (m_success_isSet) {
        obj.insert(QString("success"), ::OpenAPI::toJsonValue(m_success));
    }
    if (m_total_count_isSet) {
        obj.insert(QString("total_count"), ::OpenAPI::toJsonValue(m_total_count));
    }
    if (m_totals.isSet()) {
        obj.insert(QString("totals"), ::OpenAPI::toJsonValue(m_totals));
    }
    return obj;
}

QList<OAIReportsDailyItem> OAIReportsDailyResponse::getItems() const {
    return m_items;
}
void OAIReportsDailyResponse::setItems(const QList<OAIReportsDailyItem> &items) {
    m_items = items;
    m_items_isSet = true;
}

bool OAIReportsDailyResponse::is_items_Set() const{
    return m_items_isSet;
}

bool OAIReportsDailyResponse::is_items_Valid() const{
    return m_items_isValid;
}

bool OAIReportsDailyResponse::isSuccess() const {
    return m_success;
}
void OAIReportsDailyResponse::setSuccess(const bool &success) {
    m_success = success;
    m_success_isSet = true;
}

bool OAIReportsDailyResponse::is_success_Set() const{
    return m_success_isSet;
}

bool OAIReportsDailyResponse::is_success_Valid() const{
    return m_success_isValid;
}

qint32 OAIReportsDailyResponse::getTotalCount() const {
    return m_total_count;
}
void OAIReportsDailyResponse::setTotalCount(const qint32 &total_count) {
    m_total_count = total_count;
    m_total_count_isSet = true;
}

bool OAIReportsDailyResponse::is_total_count_Set() const{
    return m_total_count_isSet;
}

bool OAIReportsDailyResponse::is_total_count_Valid() const{
    return m_total_count_isValid;
}

OAITotals OAIReportsDailyResponse::getTotals() const {
    return m_totals;
}
void OAIReportsDailyResponse::setTotals(const OAITotals &totals) {
    m_totals = totals;
    m_totals_isSet = true;
}

bool OAIReportsDailyResponse::is_totals_Set() const{
    return m_totals_isSet;
}

bool OAIReportsDailyResponse::is_totals_Valid() const{
    return m_totals_isValid;
}

bool OAIReportsDailyResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_items.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_success_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_totals.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIReportsDailyResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
