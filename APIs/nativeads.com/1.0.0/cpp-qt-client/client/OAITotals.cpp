/**
 * Native Ads Publisher API
 * This is a Native Ads Publisher API it provides same functionality as Native Ads Publisher Account GUI. 
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITotals.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITotals::OAITotals(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITotals::OAITotals() {
    this->initializeModel();
}

OAITotals::~OAITotals() {}

void OAITotals::initializeModel() {

    m_total_clicks_isSet = false;
    m_total_clicks_isValid = false;

    m_total_cpc_isSet = false;
    m_total_cpc_isValid = false;

    m_total_ctr_isSet = false;
    m_total_ctr_isValid = false;

    m_total_earnings_isSet = false;
    m_total_earnings_isValid = false;

    m_total_impressions_isSet = false;
    m_total_impressions_isValid = false;

    m_total_net_ecpm_isSet = false;
    m_total_net_ecpm_isValid = false;

    m_total_rpm_isSet = false;
    m_total_rpm_isValid = false;
}

void OAITotals::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITotals::fromJsonObject(QJsonObject json) {

    m_total_clicks_isValid = ::OpenAPI::fromJsonValue(m_total_clicks, json[QString("total_clicks")]);
    m_total_clicks_isSet = !json[QString("total_clicks")].isNull() && m_total_clicks_isValid;

    m_total_cpc_isValid = ::OpenAPI::fromJsonValue(m_total_cpc, json[QString("total_cpc")]);
    m_total_cpc_isSet = !json[QString("total_cpc")].isNull() && m_total_cpc_isValid;

    m_total_ctr_isValid = ::OpenAPI::fromJsonValue(m_total_ctr, json[QString("total_ctr")]);
    m_total_ctr_isSet = !json[QString("total_ctr")].isNull() && m_total_ctr_isValid;

    m_total_earnings_isValid = ::OpenAPI::fromJsonValue(m_total_earnings, json[QString("total_earnings")]);
    m_total_earnings_isSet = !json[QString("total_earnings")].isNull() && m_total_earnings_isValid;

    m_total_impressions_isValid = ::OpenAPI::fromJsonValue(m_total_impressions, json[QString("total_impressions")]);
    m_total_impressions_isSet = !json[QString("total_impressions")].isNull() && m_total_impressions_isValid;

    m_total_net_ecpm_isValid = ::OpenAPI::fromJsonValue(m_total_net_ecpm, json[QString("total_net_ecpm")]);
    m_total_net_ecpm_isSet = !json[QString("total_net_ecpm")].isNull() && m_total_net_ecpm_isValid;

    m_total_rpm_isValid = ::OpenAPI::fromJsonValue(m_total_rpm, json[QString("total_rpm")]);
    m_total_rpm_isSet = !json[QString("total_rpm")].isNull() && m_total_rpm_isValid;
}

QString OAITotals::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITotals::asJsonObject() const {
    QJsonObject obj;
    if (m_total_clicks_isSet) {
        obj.insert(QString("total_clicks"), ::OpenAPI::toJsonValue(m_total_clicks));
    }
    if (m_total_cpc_isSet) {
        obj.insert(QString("total_cpc"), ::OpenAPI::toJsonValue(m_total_cpc));
    }
    if (m_total_ctr_isSet) {
        obj.insert(QString("total_ctr"), ::OpenAPI::toJsonValue(m_total_ctr));
    }
    if (m_total_earnings_isSet) {
        obj.insert(QString("total_earnings"), ::OpenAPI::toJsonValue(m_total_earnings));
    }
    if (m_total_impressions_isSet) {
        obj.insert(QString("total_impressions"), ::OpenAPI::toJsonValue(m_total_impressions));
    }
    if (m_total_net_ecpm_isSet) {
        obj.insert(QString("total_net_ecpm"), ::OpenAPI::toJsonValue(m_total_net_ecpm));
    }
    if (m_total_rpm_isSet) {
        obj.insert(QString("total_rpm"), ::OpenAPI::toJsonValue(m_total_rpm));
    }
    return obj;
}

QString OAITotals::getTotalClicks() const {
    return m_total_clicks;
}
void OAITotals::setTotalClicks(const QString &total_clicks) {
    m_total_clicks = total_clicks;
    m_total_clicks_isSet = true;
}

bool OAITotals::is_total_clicks_Set() const{
    return m_total_clicks_isSet;
}

bool OAITotals::is_total_clicks_Valid() const{
    return m_total_clicks_isValid;
}

QString OAITotals::getTotalCpc() const {
    return m_total_cpc;
}
void OAITotals::setTotalCpc(const QString &total_cpc) {
    m_total_cpc = total_cpc;
    m_total_cpc_isSet = true;
}

bool OAITotals::is_total_cpc_Set() const{
    return m_total_cpc_isSet;
}

bool OAITotals::is_total_cpc_Valid() const{
    return m_total_cpc_isValid;
}

QString OAITotals::getTotalCtr() const {
    return m_total_ctr;
}
void OAITotals::setTotalCtr(const QString &total_ctr) {
    m_total_ctr = total_ctr;
    m_total_ctr_isSet = true;
}

bool OAITotals::is_total_ctr_Set() const{
    return m_total_ctr_isSet;
}

bool OAITotals::is_total_ctr_Valid() const{
    return m_total_ctr_isValid;
}

QString OAITotals::getTotalEarnings() const {
    return m_total_earnings;
}
void OAITotals::setTotalEarnings(const QString &total_earnings) {
    m_total_earnings = total_earnings;
    m_total_earnings_isSet = true;
}

bool OAITotals::is_total_earnings_Set() const{
    return m_total_earnings_isSet;
}

bool OAITotals::is_total_earnings_Valid() const{
    return m_total_earnings_isValid;
}

QString OAITotals::getTotalImpressions() const {
    return m_total_impressions;
}
void OAITotals::setTotalImpressions(const QString &total_impressions) {
    m_total_impressions = total_impressions;
    m_total_impressions_isSet = true;
}

bool OAITotals::is_total_impressions_Set() const{
    return m_total_impressions_isSet;
}

bool OAITotals::is_total_impressions_Valid() const{
    return m_total_impressions_isValid;
}

QString OAITotals::getTotalNetEcpm() const {
    return m_total_net_ecpm;
}
void OAITotals::setTotalNetEcpm(const QString &total_net_ecpm) {
    m_total_net_ecpm = total_net_ecpm;
    m_total_net_ecpm_isSet = true;
}

bool OAITotals::is_total_net_ecpm_Set() const{
    return m_total_net_ecpm_isSet;
}

bool OAITotals::is_total_net_ecpm_Valid() const{
    return m_total_net_ecpm_isValid;
}

QString OAITotals::getTotalRpm() const {
    return m_total_rpm;
}
void OAITotals::setTotalRpm(const QString &total_rpm) {
    m_total_rpm = total_rpm;
    m_total_rpm_isSet = true;
}

bool OAITotals::is_total_rpm_Set() const{
    return m_total_rpm_isSet;
}

bool OAITotals::is_total_rpm_Valid() const{
    return m_total_rpm_isValid;
}

bool OAITotals::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_total_clicks_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_cpc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_ctr_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_earnings_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_impressions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_net_ecpm_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_rpm_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITotals::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
