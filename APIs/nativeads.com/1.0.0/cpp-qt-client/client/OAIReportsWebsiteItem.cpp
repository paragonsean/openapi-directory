/**
 * Native Ads Publisher API
 * This is a Native Ads Publisher API it provides same functionality as Native Ads Publisher Account GUI. 
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIReportsWebsiteItem.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIReportsWebsiteItem::OAIReportsWebsiteItem(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIReportsWebsiteItem::OAIReportsWebsiteItem() {
    this->initializeModel();
}

OAIReportsWebsiteItem::~OAIReportsWebsiteItem() {}

void OAIReportsWebsiteItem::initializeModel() {

    m_clicks_isSet = false;
    m_clicks_isValid = false;

    m_cpc_isSet = false;
    m_cpc_isValid = false;

    m_ctr_isSet = false;
    m_ctr_isValid = false;

    m_date_isSet = false;
    m_date_isValid = false;

    m_earnings_isSet = false;
    m_earnings_isValid = false;

    m_impressions_isSet = false;
    m_impressions_isValid = false;

    m_net_ecpm_isSet = false;
    m_net_ecpm_isValid = false;

    m_rpm_isSet = false;
    m_rpm_isValid = false;
}

void OAIReportsWebsiteItem::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIReportsWebsiteItem::fromJsonObject(QJsonObject json) {

    m_clicks_isValid = ::OpenAPI::fromJsonValue(m_clicks, json[QString("clicks")]);
    m_clicks_isSet = !json[QString("clicks")].isNull() && m_clicks_isValid;

    m_cpc_isValid = ::OpenAPI::fromJsonValue(m_cpc, json[QString("cpc")]);
    m_cpc_isSet = !json[QString("cpc")].isNull() && m_cpc_isValid;

    m_ctr_isValid = ::OpenAPI::fromJsonValue(m_ctr, json[QString("ctr")]);
    m_ctr_isSet = !json[QString("ctr")].isNull() && m_ctr_isValid;

    m_date_isValid = ::OpenAPI::fromJsonValue(m_date, json[QString("date")]);
    m_date_isSet = !json[QString("date")].isNull() && m_date_isValid;

    m_earnings_isValid = ::OpenAPI::fromJsonValue(m_earnings, json[QString("earnings")]);
    m_earnings_isSet = !json[QString("earnings")].isNull() && m_earnings_isValid;

    m_impressions_isValid = ::OpenAPI::fromJsonValue(m_impressions, json[QString("impressions")]);
    m_impressions_isSet = !json[QString("impressions")].isNull() && m_impressions_isValid;

    m_net_ecpm_isValid = ::OpenAPI::fromJsonValue(m_net_ecpm, json[QString("net_ecpm")]);
    m_net_ecpm_isSet = !json[QString("net_ecpm")].isNull() && m_net_ecpm_isValid;

    m_rpm_isValid = ::OpenAPI::fromJsonValue(m_rpm, json[QString("rpm")]);
    m_rpm_isSet = !json[QString("rpm")].isNull() && m_rpm_isValid;
}

QString OAIReportsWebsiteItem::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIReportsWebsiteItem::asJsonObject() const {
    QJsonObject obj;
    if (m_clicks_isSet) {
        obj.insert(QString("clicks"), ::OpenAPI::toJsonValue(m_clicks));
    }
    if (m_cpc_isSet) {
        obj.insert(QString("cpc"), ::OpenAPI::toJsonValue(m_cpc));
    }
    if (m_ctr_isSet) {
        obj.insert(QString("ctr"), ::OpenAPI::toJsonValue(m_ctr));
    }
    if (m_date_isSet) {
        obj.insert(QString("date"), ::OpenAPI::toJsonValue(m_date));
    }
    if (m_earnings_isSet) {
        obj.insert(QString("earnings"), ::OpenAPI::toJsonValue(m_earnings));
    }
    if (m_impressions_isSet) {
        obj.insert(QString("impressions"), ::OpenAPI::toJsonValue(m_impressions));
    }
    if (m_net_ecpm_isSet) {
        obj.insert(QString("net_ecpm"), ::OpenAPI::toJsonValue(m_net_ecpm));
    }
    if (m_rpm_isSet) {
        obj.insert(QString("rpm"), ::OpenAPI::toJsonValue(m_rpm));
    }
    return obj;
}

QString OAIReportsWebsiteItem::getClicks() const {
    return m_clicks;
}
void OAIReportsWebsiteItem::setClicks(const QString &clicks) {
    m_clicks = clicks;
    m_clicks_isSet = true;
}

bool OAIReportsWebsiteItem::is_clicks_Set() const{
    return m_clicks_isSet;
}

bool OAIReportsWebsiteItem::is_clicks_Valid() const{
    return m_clicks_isValid;
}

QString OAIReportsWebsiteItem::getCpc() const {
    return m_cpc;
}
void OAIReportsWebsiteItem::setCpc(const QString &cpc) {
    m_cpc = cpc;
    m_cpc_isSet = true;
}

bool OAIReportsWebsiteItem::is_cpc_Set() const{
    return m_cpc_isSet;
}

bool OAIReportsWebsiteItem::is_cpc_Valid() const{
    return m_cpc_isValid;
}

QString OAIReportsWebsiteItem::getCtr() const {
    return m_ctr;
}
void OAIReportsWebsiteItem::setCtr(const QString &ctr) {
    m_ctr = ctr;
    m_ctr_isSet = true;
}

bool OAIReportsWebsiteItem::is_ctr_Set() const{
    return m_ctr_isSet;
}

bool OAIReportsWebsiteItem::is_ctr_Valid() const{
    return m_ctr_isValid;
}

QString OAIReportsWebsiteItem::getDate() const {
    return m_date;
}
void OAIReportsWebsiteItem::setDate(const QString &date) {
    m_date = date;
    m_date_isSet = true;
}

bool OAIReportsWebsiteItem::is_date_Set() const{
    return m_date_isSet;
}

bool OAIReportsWebsiteItem::is_date_Valid() const{
    return m_date_isValid;
}

QString OAIReportsWebsiteItem::getEarnings() const {
    return m_earnings;
}
void OAIReportsWebsiteItem::setEarnings(const QString &earnings) {
    m_earnings = earnings;
    m_earnings_isSet = true;
}

bool OAIReportsWebsiteItem::is_earnings_Set() const{
    return m_earnings_isSet;
}

bool OAIReportsWebsiteItem::is_earnings_Valid() const{
    return m_earnings_isValid;
}

QString OAIReportsWebsiteItem::getImpressions() const {
    return m_impressions;
}
void OAIReportsWebsiteItem::setImpressions(const QString &impressions) {
    m_impressions = impressions;
    m_impressions_isSet = true;
}

bool OAIReportsWebsiteItem::is_impressions_Set() const{
    return m_impressions_isSet;
}

bool OAIReportsWebsiteItem::is_impressions_Valid() const{
    return m_impressions_isValid;
}

QString OAIReportsWebsiteItem::getNetEcpm() const {
    return m_net_ecpm;
}
void OAIReportsWebsiteItem::setNetEcpm(const QString &net_ecpm) {
    m_net_ecpm = net_ecpm;
    m_net_ecpm_isSet = true;
}

bool OAIReportsWebsiteItem::is_net_ecpm_Set() const{
    return m_net_ecpm_isSet;
}

bool OAIReportsWebsiteItem::is_net_ecpm_Valid() const{
    return m_net_ecpm_isValid;
}

QString OAIReportsWebsiteItem::getRpm() const {
    return m_rpm;
}
void OAIReportsWebsiteItem::setRpm(const QString &rpm) {
    m_rpm = rpm;
    m_rpm_isSet = true;
}

bool OAIReportsWebsiteItem::is_rpm_Set() const{
    return m_rpm_isSet;
}

bool OAIReportsWebsiteItem::is_rpm_Valid() const{
    return m_rpm_isValid;
}

bool OAIReportsWebsiteItem::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_clicks_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cpc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ctr_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_earnings_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_impressions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_net_ecpm_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rpm_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIReportsWebsiteItem::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
