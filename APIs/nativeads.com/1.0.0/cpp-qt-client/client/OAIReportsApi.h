/**
 * Native Ads Publisher API
 * This is a Native Ads Publisher API it provides same functionality as Native Ads Publisher Account GUI. 
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIReportsApi_H
#define OAI_OAIReportsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIModelError.h"
#include "OAIReportsDailyResponse.h"
#include "OAIReportsWebsiteResponse.h"
#include "OAIReportsWidgetResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIReportsApi : public QObject {
    Q_OBJECT

public:
    OAIReportsApi(const int timeOut = 0);
    ~OAIReportsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  token QString [required]
    * @param[in]  start_date QDate [required]
    * @param[in]  end_date QDate [required]
    * @param[in]  limit qint32 [required]
    * @param[in]  page qint32 [required]
    */
    virtual void publisherReportsDailyGet(const QString &token, const QDate &start_date, const QDate &end_date, const qint32 &limit, const qint32 &page);

    /**
    * @param[in]  token QString [required]
    * @param[in]  start_date QDate [required]
    * @param[in]  end_date QDate [required]
    * @param[in]  limit qint32 [required]
    * @param[in]  page qint32 [required]
    */
    virtual void publisherReportsWebsiteGet(const QString &token, const QDate &start_date, const QDate &end_date, const qint32 &limit, const qint32 &page);

    /**
    * @param[in]  token QString [required]
    * @param[in]  start_date QDate [required]
    * @param[in]  end_date QDate [required]
    * @param[in]  limit qint32 [required]
    * @param[in]  page qint32 [required]
    */
    virtual void publisherReportsWidgetGet(const QString &token, const QDate &start_date, const QDate &end_date, const qint32 &limit, const qint32 &page);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void publisherReportsDailyGetCallback(OAIHttpRequestWorker *worker);
    void publisherReportsWebsiteGetCallback(OAIHttpRequestWorker *worker);
    void publisherReportsWidgetGetCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void publisherReportsDailyGetSignal(OAIReportsDailyResponse summary);
    void publisherReportsWebsiteGetSignal(OAIReportsWebsiteResponse summary);
    void publisherReportsWidgetGetSignal(OAIReportsWidgetResponse summary);


    void publisherReportsDailyGetSignalFull(OAIHttpRequestWorker *worker, OAIReportsDailyResponse summary);
    void publisherReportsWebsiteGetSignalFull(OAIHttpRequestWorker *worker, OAIReportsWebsiteResponse summary);
    void publisherReportsWidgetGetSignalFull(OAIHttpRequestWorker *worker, OAIReportsWidgetResponse summary);

    Q_DECL_DEPRECATED_X("Use publisherReportsDailyGetSignalError() instead")
    void publisherReportsDailyGetSignalE(OAIReportsDailyResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void publisherReportsDailyGetSignalError(OAIReportsDailyResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use publisherReportsWebsiteGetSignalError() instead")
    void publisherReportsWebsiteGetSignalE(OAIReportsWebsiteResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void publisherReportsWebsiteGetSignalError(OAIReportsWebsiteResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use publisherReportsWidgetGetSignalError() instead")
    void publisherReportsWidgetGetSignalE(OAIReportsWidgetResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void publisherReportsWidgetGetSignalError(OAIReportsWidgetResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use publisherReportsDailyGetSignalErrorFull() instead")
    void publisherReportsDailyGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void publisherReportsDailyGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use publisherReportsWebsiteGetSignalErrorFull() instead")
    void publisherReportsWebsiteGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void publisherReportsWebsiteGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use publisherReportsWidgetGetSignalErrorFull() instead")
    void publisherReportsWidgetGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void publisherReportsWidgetGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
