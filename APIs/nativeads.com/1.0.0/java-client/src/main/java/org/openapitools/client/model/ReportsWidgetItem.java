/*
 * Native Ads Publisher API
 * This is a Native Ads Publisher API it provides same functionality as Native Ads Publisher Account GUI. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ReportsWidgetItem
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:58:20.189109-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ReportsWidgetItem {
  public static final String SERIALIZED_NAME_CAMPAIGN = "campaign";
  @SerializedName(SERIALIZED_NAME_CAMPAIGN)
  private String campaign;

  public static final String SERIALIZED_NAME_CAMPAIGN_ID = "campaign_id";
  @SerializedName(SERIALIZED_NAME_CAMPAIGN_ID)
  private String campaignId;

  public static final String SERIALIZED_NAME_CLICKS = "clicks";
  @SerializedName(SERIALIZED_NAME_CLICKS)
  private String clicks;

  public static final String SERIALIZED_NAME_CPC = "cpc";
  @SerializedName(SERIALIZED_NAME_CPC)
  private String cpc;

  public static final String SERIALIZED_NAME_CTR = "ctr";
  @SerializedName(SERIALIZED_NAME_CTR)
  private String ctr;

  public static final String SERIALIZED_NAME_EARNINGS = "earnings";
  @SerializedName(SERIALIZED_NAME_EARNINGS)
  private String earnings;

  public static final String SERIALIZED_NAME_IMPRESSIONS = "impressions";
  @SerializedName(SERIALIZED_NAME_IMPRESSIONS)
  private String impressions;

  public static final String SERIALIZED_NAME_NET_ECPM = "net_ecpm";
  @SerializedName(SERIALIZED_NAME_NET_ECPM)
  private String netEcpm;

  public static final String SERIALIZED_NAME_RPM = "rpm";
  @SerializedName(SERIALIZED_NAME_RPM)
  private String rpm;

  public ReportsWidgetItem() {
  }

  public ReportsWidgetItem campaign(String campaign) {
    this.campaign = campaign;
    return this;
  }

  /**
   * widget name
   * @return campaign
   */
  @javax.annotation.Nullable
  public String getCampaign() {
    return campaign;
  }

  public void setCampaign(String campaign) {
    this.campaign = campaign;
  }


  public ReportsWidgetItem campaignId(String campaignId) {
    this.campaignId = campaignId;
    return this;
  }

  /**
   * widget id
   * @return campaignId
   */
  @javax.annotation.Nullable
  public String getCampaignId() {
    return campaignId;
  }

  public void setCampaignId(String campaignId) {
    this.campaignId = campaignId;
  }


  public ReportsWidgetItem clicks(String clicks) {
    this.clicks = clicks;
    return this;
  }

  /**
   * Get clicks
   * @return clicks
   */
  @javax.annotation.Nullable
  public String getClicks() {
    return clicks;
  }

  public void setClicks(String clicks) {
    this.clicks = clicks;
  }


  public ReportsWidgetItem cpc(String cpc) {
    this.cpc = cpc;
    return this;
  }

  /**
   * Get cpc
   * @return cpc
   */
  @javax.annotation.Nullable
  public String getCpc() {
    return cpc;
  }

  public void setCpc(String cpc) {
    this.cpc = cpc;
  }


  public ReportsWidgetItem ctr(String ctr) {
    this.ctr = ctr;
    return this;
  }

  /**
   * Get ctr
   * @return ctr
   */
  @javax.annotation.Nullable
  public String getCtr() {
    return ctr;
  }

  public void setCtr(String ctr) {
    this.ctr = ctr;
  }


  public ReportsWidgetItem earnings(String earnings) {
    this.earnings = earnings;
    return this;
  }

  /**
   * Get earnings
   * @return earnings
   */
  @javax.annotation.Nullable
  public String getEarnings() {
    return earnings;
  }

  public void setEarnings(String earnings) {
    this.earnings = earnings;
  }


  public ReportsWidgetItem impressions(String impressions) {
    this.impressions = impressions;
    return this;
  }

  /**
   * Get impressions
   * @return impressions
   */
  @javax.annotation.Nullable
  public String getImpressions() {
    return impressions;
  }

  public void setImpressions(String impressions) {
    this.impressions = impressions;
  }


  public ReportsWidgetItem netEcpm(String netEcpm) {
    this.netEcpm = netEcpm;
    return this;
  }

  /**
   * Get netEcpm
   * @return netEcpm
   */
  @javax.annotation.Nullable
  public String getNetEcpm() {
    return netEcpm;
  }

  public void setNetEcpm(String netEcpm) {
    this.netEcpm = netEcpm;
  }


  public ReportsWidgetItem rpm(String rpm) {
    this.rpm = rpm;
    return this;
  }

  /**
   * Get rpm
   * @return rpm
   */
  @javax.annotation.Nullable
  public String getRpm() {
    return rpm;
  }

  public void setRpm(String rpm) {
    this.rpm = rpm;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReportsWidgetItem reportsWidgetItem = (ReportsWidgetItem) o;
    return Objects.equals(this.campaign, reportsWidgetItem.campaign) &&
        Objects.equals(this.campaignId, reportsWidgetItem.campaignId) &&
        Objects.equals(this.clicks, reportsWidgetItem.clicks) &&
        Objects.equals(this.cpc, reportsWidgetItem.cpc) &&
        Objects.equals(this.ctr, reportsWidgetItem.ctr) &&
        Objects.equals(this.earnings, reportsWidgetItem.earnings) &&
        Objects.equals(this.impressions, reportsWidgetItem.impressions) &&
        Objects.equals(this.netEcpm, reportsWidgetItem.netEcpm) &&
        Objects.equals(this.rpm, reportsWidgetItem.rpm);
  }

  @Override
  public int hashCode() {
    return Objects.hash(campaign, campaignId, clicks, cpc, ctr, earnings, impressions, netEcpm, rpm);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReportsWidgetItem {\n");
    sb.append("    campaign: ").append(toIndentedString(campaign)).append("\n");
    sb.append("    campaignId: ").append(toIndentedString(campaignId)).append("\n");
    sb.append("    clicks: ").append(toIndentedString(clicks)).append("\n");
    sb.append("    cpc: ").append(toIndentedString(cpc)).append("\n");
    sb.append("    ctr: ").append(toIndentedString(ctr)).append("\n");
    sb.append("    earnings: ").append(toIndentedString(earnings)).append("\n");
    sb.append("    impressions: ").append(toIndentedString(impressions)).append("\n");
    sb.append("    netEcpm: ").append(toIndentedString(netEcpm)).append("\n");
    sb.append("    rpm: ").append(toIndentedString(rpm)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("campaign");
    openapiFields.add("campaign_id");
    openapiFields.add("clicks");
    openapiFields.add("cpc");
    openapiFields.add("ctr");
    openapiFields.add("earnings");
    openapiFields.add("impressions");
    openapiFields.add("net_ecpm");
    openapiFields.add("rpm");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ReportsWidgetItem
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ReportsWidgetItem.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ReportsWidgetItem is not found in the empty JSON string", ReportsWidgetItem.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ReportsWidgetItem.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ReportsWidgetItem` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("campaign") != null && !jsonObj.get("campaign").isJsonNull()) && !jsonObj.get("campaign").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `campaign` to be a primitive type in the JSON string but got `%s`", jsonObj.get("campaign").toString()));
      }
      if ((jsonObj.get("campaign_id") != null && !jsonObj.get("campaign_id").isJsonNull()) && !jsonObj.get("campaign_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `campaign_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("campaign_id").toString()));
      }
      if ((jsonObj.get("clicks") != null && !jsonObj.get("clicks").isJsonNull()) && !jsonObj.get("clicks").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `clicks` to be a primitive type in the JSON string but got `%s`", jsonObj.get("clicks").toString()));
      }
      if ((jsonObj.get("cpc") != null && !jsonObj.get("cpc").isJsonNull()) && !jsonObj.get("cpc").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cpc` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cpc").toString()));
      }
      if ((jsonObj.get("ctr") != null && !jsonObj.get("ctr").isJsonNull()) && !jsonObj.get("ctr").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ctr` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ctr").toString()));
      }
      if ((jsonObj.get("earnings") != null && !jsonObj.get("earnings").isJsonNull()) && !jsonObj.get("earnings").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `earnings` to be a primitive type in the JSON string but got `%s`", jsonObj.get("earnings").toString()));
      }
      if ((jsonObj.get("impressions") != null && !jsonObj.get("impressions").isJsonNull()) && !jsonObj.get("impressions").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `impressions` to be a primitive type in the JSON string but got `%s`", jsonObj.get("impressions").toString()));
      }
      if ((jsonObj.get("net_ecpm") != null && !jsonObj.get("net_ecpm").isJsonNull()) && !jsonObj.get("net_ecpm").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `net_ecpm` to be a primitive type in the JSON string but got `%s`", jsonObj.get("net_ecpm").toString()));
      }
      if ((jsonObj.get("rpm") != null && !jsonObj.get("rpm").isJsonNull()) && !jsonObj.get("rpm").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rpm` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rpm").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ReportsWidgetItem.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ReportsWidgetItem' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ReportsWidgetItem> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ReportsWidgetItem.class));

       return (TypeAdapter<T>) new TypeAdapter<ReportsWidgetItem>() {
           @Override
           public void write(JsonWriter out, ReportsWidgetItem value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ReportsWidgetItem read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ReportsWidgetItem given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ReportsWidgetItem
   * @throws IOException if the JSON string is invalid with respect to ReportsWidgetItem
   */
  public static ReportsWidgetItem fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ReportsWidgetItem.class);
  }

  /**
   * Convert an instance of ReportsWidgetItem to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

