/*
 * Native Ads Publisher API
 * This is a Native Ads Publisher API it provides same functionality as Native Ads Publisher Account GUI. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.time.LocalDate;
import org.openapitools.client.model.ModelError;
import org.openapitools.client.model.ReportsDailyResponse;
import org.openapitools.client.model.ReportsWebsiteResponse;
import org.openapitools.client.model.ReportsWidgetResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ReportsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ReportsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ReportsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for publisherReportsDailyGet
     * @param token Native Ads Publisher API authentication token (required)
     * @param startDate start date in format YYYY-MM-DD (required)
     * @param endDate end date in format YYYY-MM-DD (required)
     * @param limit maximum number of results per page (required)
     * @param page page number (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> report response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> error message </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call publisherReportsDailyGetCall(String token, LocalDate startDate, LocalDate endDate, Integer limit, Integer page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/publisher/reports/daily";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (startDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startDate", startDate));
        }

        if (endDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endDate", endDate));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call publisherReportsDailyGetValidateBeforeCall(String token, LocalDate startDate, LocalDate endDate, Integer limit, Integer page, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling publisherReportsDailyGet(Async)");
        }

        // verify the required parameter 'startDate' is set
        if (startDate == null) {
            throw new ApiException("Missing the required parameter 'startDate' when calling publisherReportsDailyGet(Async)");
        }

        // verify the required parameter 'endDate' is set
        if (endDate == null) {
            throw new ApiException("Missing the required parameter 'endDate' when calling publisherReportsDailyGet(Async)");
        }

        // verify the required parameter 'limit' is set
        if (limit == null) {
            throw new ApiException("Missing the required parameter 'limit' when calling publisherReportsDailyGet(Async)");
        }

        // verify the required parameter 'page' is set
        if (page == null) {
            throw new ApiException("Missing the required parameter 'page' when calling publisherReportsDailyGet(Async)");
        }

        return publisherReportsDailyGetCall(token, startDate, endDate, limit, page, _callback);

    }

    /**
     * 
     * Returns publisher statistics split by date
     * @param token Native Ads Publisher API authentication token (required)
     * @param startDate start date in format YYYY-MM-DD (required)
     * @param endDate end date in format YYYY-MM-DD (required)
     * @param limit maximum number of results per page (required)
     * @param page page number (required)
     * @return ReportsDailyResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> report response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> error message </td><td>  -  </td></tr>
     </table>
     */
    public ReportsDailyResponse publisherReportsDailyGet(String token, LocalDate startDate, LocalDate endDate, Integer limit, Integer page) throws ApiException {
        ApiResponse<ReportsDailyResponse> localVarResp = publisherReportsDailyGetWithHttpInfo(token, startDate, endDate, limit, page);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns publisher statistics split by date
     * @param token Native Ads Publisher API authentication token (required)
     * @param startDate start date in format YYYY-MM-DD (required)
     * @param endDate end date in format YYYY-MM-DD (required)
     * @param limit maximum number of results per page (required)
     * @param page page number (required)
     * @return ApiResponse&lt;ReportsDailyResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> report response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> error message </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ReportsDailyResponse> publisherReportsDailyGetWithHttpInfo(String token, LocalDate startDate, LocalDate endDate, Integer limit, Integer page) throws ApiException {
        okhttp3.Call localVarCall = publisherReportsDailyGetValidateBeforeCall(token, startDate, endDate, limit, page, null);
        Type localVarReturnType = new TypeToken<ReportsDailyResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns publisher statistics split by date
     * @param token Native Ads Publisher API authentication token (required)
     * @param startDate start date in format YYYY-MM-DD (required)
     * @param endDate end date in format YYYY-MM-DD (required)
     * @param limit maximum number of results per page (required)
     * @param page page number (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> report response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> error message </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call publisherReportsDailyGetAsync(String token, LocalDate startDate, LocalDate endDate, Integer limit, Integer page, final ApiCallback<ReportsDailyResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = publisherReportsDailyGetValidateBeforeCall(token, startDate, endDate, limit, page, _callback);
        Type localVarReturnType = new TypeToken<ReportsDailyResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for publisherReportsWebsiteGet
     * @param token Native Ads Publisher API authentication token (required)
     * @param startDate start date in format YYYY-MM-DD (required)
     * @param endDate end date in format YYYY-MM-DD (required)
     * @param limit maximum number of results per page (required)
     * @param page page number (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> report response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> authentication error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call publisherReportsWebsiteGetCall(String token, LocalDate startDate, LocalDate endDate, Integer limit, Integer page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/publisher/reports/website";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (startDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startDate", startDate));
        }

        if (endDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endDate", endDate));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call publisherReportsWebsiteGetValidateBeforeCall(String token, LocalDate startDate, LocalDate endDate, Integer limit, Integer page, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling publisherReportsWebsiteGet(Async)");
        }

        // verify the required parameter 'startDate' is set
        if (startDate == null) {
            throw new ApiException("Missing the required parameter 'startDate' when calling publisherReportsWebsiteGet(Async)");
        }

        // verify the required parameter 'endDate' is set
        if (endDate == null) {
            throw new ApiException("Missing the required parameter 'endDate' when calling publisherReportsWebsiteGet(Async)");
        }

        // verify the required parameter 'limit' is set
        if (limit == null) {
            throw new ApiException("Missing the required parameter 'limit' when calling publisherReportsWebsiteGet(Async)");
        }

        // verify the required parameter 'page' is set
        if (page == null) {
            throw new ApiException("Missing the required parameter 'page' when calling publisherReportsWebsiteGet(Async)");
        }

        return publisherReportsWebsiteGetCall(token, startDate, endDate, limit, page, _callback);

    }

    /**
     * 
     * Returns publisher statistics split by website
     * @param token Native Ads Publisher API authentication token (required)
     * @param startDate start date in format YYYY-MM-DD (required)
     * @param endDate end date in format YYYY-MM-DD (required)
     * @param limit maximum number of results per page (required)
     * @param page page number (required)
     * @return ReportsWebsiteResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> report response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> authentication error </td><td>  -  </td></tr>
     </table>
     */
    public ReportsWebsiteResponse publisherReportsWebsiteGet(String token, LocalDate startDate, LocalDate endDate, Integer limit, Integer page) throws ApiException {
        ApiResponse<ReportsWebsiteResponse> localVarResp = publisherReportsWebsiteGetWithHttpInfo(token, startDate, endDate, limit, page);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns publisher statistics split by website
     * @param token Native Ads Publisher API authentication token (required)
     * @param startDate start date in format YYYY-MM-DD (required)
     * @param endDate end date in format YYYY-MM-DD (required)
     * @param limit maximum number of results per page (required)
     * @param page page number (required)
     * @return ApiResponse&lt;ReportsWebsiteResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> report response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> authentication error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ReportsWebsiteResponse> publisherReportsWebsiteGetWithHttpInfo(String token, LocalDate startDate, LocalDate endDate, Integer limit, Integer page) throws ApiException {
        okhttp3.Call localVarCall = publisherReportsWebsiteGetValidateBeforeCall(token, startDate, endDate, limit, page, null);
        Type localVarReturnType = new TypeToken<ReportsWebsiteResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns publisher statistics split by website
     * @param token Native Ads Publisher API authentication token (required)
     * @param startDate start date in format YYYY-MM-DD (required)
     * @param endDate end date in format YYYY-MM-DD (required)
     * @param limit maximum number of results per page (required)
     * @param page page number (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> report response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> authentication error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call publisherReportsWebsiteGetAsync(String token, LocalDate startDate, LocalDate endDate, Integer limit, Integer page, final ApiCallback<ReportsWebsiteResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = publisherReportsWebsiteGetValidateBeforeCall(token, startDate, endDate, limit, page, _callback);
        Type localVarReturnType = new TypeToken<ReportsWebsiteResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for publisherReportsWidgetGet
     * @param token Native Ads Publisher API authentication token (required)
     * @param startDate start date in format YYYY-MM-DD (required)
     * @param endDate end date in format YYYY-MM-DD (required)
     * @param limit maximum number of results per page (required)
     * @param page page number (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> report response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> authentication error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call publisherReportsWidgetGetCall(String token, LocalDate startDate, LocalDate endDate, Integer limit, Integer page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/publisher/reports/widget";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (token != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("token", token));
        }

        if (startDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startDate", startDate));
        }

        if (endDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endDate", endDate));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call publisherReportsWidgetGetValidateBeforeCall(String token, LocalDate startDate, LocalDate endDate, Integer limit, Integer page, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling publisherReportsWidgetGet(Async)");
        }

        // verify the required parameter 'startDate' is set
        if (startDate == null) {
            throw new ApiException("Missing the required parameter 'startDate' when calling publisherReportsWidgetGet(Async)");
        }

        // verify the required parameter 'endDate' is set
        if (endDate == null) {
            throw new ApiException("Missing the required parameter 'endDate' when calling publisherReportsWidgetGet(Async)");
        }

        // verify the required parameter 'limit' is set
        if (limit == null) {
            throw new ApiException("Missing the required parameter 'limit' when calling publisherReportsWidgetGet(Async)");
        }

        // verify the required parameter 'page' is set
        if (page == null) {
            throw new ApiException("Missing the required parameter 'page' when calling publisherReportsWidgetGet(Async)");
        }

        return publisherReportsWidgetGetCall(token, startDate, endDate, limit, page, _callback);

    }

    /**
     * 
     * Returns publisher statistics split by widget
     * @param token Native Ads Publisher API authentication token (required)
     * @param startDate start date in format YYYY-MM-DD (required)
     * @param endDate end date in format YYYY-MM-DD (required)
     * @param limit maximum number of results per page (required)
     * @param page page number (required)
     * @return ReportsWidgetResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> report response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> authentication error </td><td>  -  </td></tr>
     </table>
     */
    public ReportsWidgetResponse publisherReportsWidgetGet(String token, LocalDate startDate, LocalDate endDate, Integer limit, Integer page) throws ApiException {
        ApiResponse<ReportsWidgetResponse> localVarResp = publisherReportsWidgetGetWithHttpInfo(token, startDate, endDate, limit, page);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns publisher statistics split by widget
     * @param token Native Ads Publisher API authentication token (required)
     * @param startDate start date in format YYYY-MM-DD (required)
     * @param endDate end date in format YYYY-MM-DD (required)
     * @param limit maximum number of results per page (required)
     * @param page page number (required)
     * @return ApiResponse&lt;ReportsWidgetResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> report response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> authentication error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ReportsWidgetResponse> publisherReportsWidgetGetWithHttpInfo(String token, LocalDate startDate, LocalDate endDate, Integer limit, Integer page) throws ApiException {
        okhttp3.Call localVarCall = publisherReportsWidgetGetValidateBeforeCall(token, startDate, endDate, limit, page, null);
        Type localVarReturnType = new TypeToken<ReportsWidgetResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns publisher statistics split by widget
     * @param token Native Ads Publisher API authentication token (required)
     * @param startDate start date in format YYYY-MM-DD (required)
     * @param endDate end date in format YYYY-MM-DD (required)
     * @param limit maximum number of results per page (required)
     * @param page page number (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> report response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> authentication error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call publisherReportsWidgetGetAsync(String token, LocalDate startDate, LocalDate endDate, Integer limit, Integer page, final ApiCallback<ReportsWidgetResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = publisherReportsWidgetGetValidateBeforeCall(token, startDate, endDate, limit, page, _callback);
        Type localVarReturnType = new TypeToken<ReportsWidgetResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
