/**
 * IBANAPI OpenApi Documentation
 * IBANAPI OpenApi documentation
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: samy@ibanapi.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIBANResult.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIBANResult::OAIIBANResult(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIBANResult::OAIIBANResult() {
    this->initializeModel();
}

OAIIBANResult::~OAIIBANResult() {}

void OAIIBANResult::initializeModel() {

    m_data_isSet = false;
    m_data_isValid = false;

    m_expremental_isSet = false;
    m_expremental_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;

    m_result_isSet = false;
    m_result_isValid = false;

    m_validations_isSet = false;
    m_validations_isValid = false;
}

void OAIIBANResult::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIBANResult::fromJsonObject(QJsonObject json) {

    m_data_isValid = ::OpenAPI::fromJsonValue(m_data, json[QString("data")]);
    m_data_isSet = !json[QString("data")].isNull() && m_data_isValid;

    m_expremental_isValid = ::OpenAPI::fromJsonValue(m_expremental, json[QString("expremental")]);
    m_expremental_isSet = !json[QString("expremental")].isNull() && m_expremental_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;

    m_result_isValid = ::OpenAPI::fromJsonValue(m_result, json[QString("result")]);
    m_result_isSet = !json[QString("result")].isNull() && m_result_isValid;

    m_validations_isValid = ::OpenAPI::fromJsonValue(m_validations, json[QString("validations")]);
    m_validations_isSet = !json[QString("validations")].isNull() && m_validations_isValid;
}

QString OAIIBANResult::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIBANResult::asJsonObject() const {
    QJsonObject obj;
    if (m_data_isSet) {
        obj.insert(QString("data"), ::OpenAPI::toJsonValue(m_data));
    }
    if (m_expremental_isSet) {
        obj.insert(QString("expremental"), ::OpenAPI::toJsonValue(m_expremental));
    }
    if (m_message_isSet) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_result_isSet) {
        obj.insert(QString("result"), ::OpenAPI::toJsonValue(m_result));
    }
    if (m_validations.size() > 0) {
        obj.insert(QString("validations"), ::OpenAPI::toJsonValue(m_validations));
    }
    return obj;
}

OAIObject OAIIBANResult::getData() const {
    return m_data;
}
void OAIIBANResult::setData(const OAIObject &data) {
    m_data = data;
    m_data_isSet = true;
}

bool OAIIBANResult::is_data_Set() const{
    return m_data_isSet;
}

bool OAIIBANResult::is_data_Valid() const{
    return m_data_isValid;
}

qint32 OAIIBANResult::getExpremental() const {
    return m_expremental;
}
void OAIIBANResult::setExpremental(const qint32 &expremental) {
    m_expremental = expremental;
    m_expremental_isSet = true;
}

bool OAIIBANResult::is_expremental_Set() const{
    return m_expremental_isSet;
}

bool OAIIBANResult::is_expremental_Valid() const{
    return m_expremental_isValid;
}

QString OAIIBANResult::getMessage() const {
    return m_message;
}
void OAIIBANResult::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAIIBANResult::is_message_Set() const{
    return m_message_isSet;
}

bool OAIIBANResult::is_message_Valid() const{
    return m_message_isValid;
}

qint32 OAIIBANResult::getResult() const {
    return m_result;
}
void OAIIBANResult::setResult(const qint32 &result) {
    m_result = result;
    m_result_isSet = true;
}

bool OAIIBANResult::is_result_Set() const{
    return m_result_isSet;
}

bool OAIIBANResult::is_result_Valid() const{
    return m_result_isValid;
}

QList<QJsonValue> OAIIBANResult::getValidations() const {
    return m_validations;
}
void OAIIBANResult::setValidations(const QList<QJsonValue> &validations) {
    m_validations = validations;
    m_validations_isSet = true;
}

bool OAIIBANResult::is_validations_Set() const{
    return m_validations_isSet;
}

bool OAIIBANResult::is_validations_Valid() const{
    return m_validations_isValid;
}

bool OAIIBANResult::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_data_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expremental_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_result_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_validations.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIBANResult::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
