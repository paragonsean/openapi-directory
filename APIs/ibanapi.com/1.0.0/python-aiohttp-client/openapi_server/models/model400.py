# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Model400(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, data: object=None, message: str=None, result: int=None):
        """Model400 - a model defined in OpenAPI

        :param data: The data of this Model400.
        :param message: The message of this Model400.
        :param result: The result of this Model400.
        """
        self.openapi_types = {
            'data': object,
            'message': str,
            'result': int
        }

        self.attribute_map = {
            'data': 'data',
            'message': 'message',
            'result': 'result'
        }

        self._data = data
        self._message = message
        self._result = result

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Model400':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The 400 of this Model400.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def data(self):
        """Gets the data of this Model400.


        :return: The data of this Model400.
        :rtype: object
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this Model400.


        :param data: The data of this Model400.
        :type data: object
        """

        self._data = data

    @property
    def message(self):
        """Gets the message of this Model400.


        :return: The message of this Model400.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this Model400.


        :param message: The message of this Model400.
        :type message: str
        """

        self._message = message

    @property
    def result(self):
        """Gets the result of this Model400.


        :return: The result of this Model400.
        :rtype: int
        """
        return self._result

    @result.setter
    def result(self, result):
        """Sets the result of this Model400.


        :param result: The result of this Model400.
        :type result: int
        """

        self._result = result
