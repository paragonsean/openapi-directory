/*
 * IBANAPI OpenApi Documentation
 * IBANAPI OpenApi documentation
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: samy@ibanapi.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.BalanceResponse;
import org.openapitools.client.model.IBANResult;
import org.openapitools.client.model.IBANResultBasic;
import org.openapitools.client.model.Model400;
import org.openapitools.client.model.Model401;
import org.openapitools.client.model.Model403;
import org.openapitools.client.model.Model422;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class IbanapiApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public IbanapiApi() {
        this(Configuration.getDefaultApiClient());
    }

    public IbanapiApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getBalance
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> SUCCESS </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Your balance is exhausted or bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Package expired or account was blocked </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid API Key </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> API key is missing </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBalanceCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/balance";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key_security" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getBalanceValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getBalanceCall(_callback);

    }

    /**
     * Get Account Balance
     * Returns the account balance and expiry
     * @return BalanceResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> SUCCESS </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Your balance is exhausted or bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Package expired or account was blocked </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid API Key </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> API key is missing </td><td>  -  </td></tr>
     </table>
     */
    public BalanceResponse getBalance() throws ApiException {
        ApiResponse<BalanceResponse> localVarResp = getBalanceWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get Account Balance
     * Returns the account balance and expiry
     * @return ApiResponse&lt;BalanceResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> SUCCESS </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Your balance is exhausted or bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Package expired or account was blocked </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid API Key </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> API key is missing </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BalanceResponse> getBalanceWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getBalanceValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<BalanceResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Account Balance (asynchronously)
     * Returns the account balance and expiry
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> SUCCESS </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Your balance is exhausted or bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Package expired or account was blocked </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid API Key </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> API key is missing </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getBalanceAsync(final ApiCallback<BalanceResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getBalanceValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<BalanceResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for validateIBAN
     * @param iban The IBAN (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Valid IBAN response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Your balance is exhausted or bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Package expired or account was blocked </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid API Key </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> API key is missing </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call validateIBANCall(String iban, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/validate";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (iban != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("iban", iban));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key_security" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call validateIBANValidateBeforeCall(String iban, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'iban' is set
        if (iban == null) {
            throw new ApiException("Missing the required parameter 'iban' when calling validateIBAN(Async)");
        }

        return validateIBANCall(iban, _callback);

    }

    /**
     * Validate IBAN
     * Returns the validation results
     * @param iban The IBAN (required)
     * @return IBANResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Valid IBAN response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Your balance is exhausted or bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Package expired or account was blocked </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid API Key </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> API key is missing </td><td>  -  </td></tr>
     </table>
     */
    public IBANResult validateIBAN(String iban) throws ApiException {
        ApiResponse<IBANResult> localVarResp = validateIBANWithHttpInfo(iban);
        return localVarResp.getData();
    }

    /**
     * Validate IBAN
     * Returns the validation results
     * @param iban The IBAN (required)
     * @return ApiResponse&lt;IBANResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Valid IBAN response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Your balance is exhausted or bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Package expired or account was blocked </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid API Key </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> API key is missing </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<IBANResult> validateIBANWithHttpInfo(String iban) throws ApiException {
        okhttp3.Call localVarCall = validateIBANValidateBeforeCall(iban, null);
        Type localVarReturnType = new TypeToken<IBANResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Validate IBAN (asynchronously)
     * Returns the validation results
     * @param iban The IBAN (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Valid IBAN response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Your balance is exhausted or bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Package expired or account was blocked </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid API Key </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> API key is missing </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call validateIBANAsync(String iban, final ApiCallback<IBANResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = validateIBANValidateBeforeCall(iban, _callback);
        Type localVarReturnType = new TypeToken<IBANResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for validateIBANBasic
     * @param iban The IBAN (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Valid IBAN response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Your balance is exhausted or bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Package expired or account was blocked </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid API Key </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> API key is missing </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call validateIBANBasicCall(String iban, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/validate-basic";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (iban != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("iban", iban));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key_security" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call validateIBANBasicValidateBeforeCall(String iban, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'iban' is set
        if (iban == null) {
            throw new ApiException("Missing the required parameter 'iban' when calling validateIBANBasic(Async)");
        }

        return validateIBANBasicCall(iban, _callback);

    }

    /**
     * Validate IBAN Basic
     * Returns the basic validation results
     * @param iban The IBAN (required)
     * @return IBANResultBasic
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Valid IBAN response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Your balance is exhausted or bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Package expired or account was blocked </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid API Key </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> API key is missing </td><td>  -  </td></tr>
     </table>
     */
    public IBANResultBasic validateIBANBasic(String iban) throws ApiException {
        ApiResponse<IBANResultBasic> localVarResp = validateIBANBasicWithHttpInfo(iban);
        return localVarResp.getData();
    }

    /**
     * Validate IBAN Basic
     * Returns the basic validation results
     * @param iban The IBAN (required)
     * @return ApiResponse&lt;IBANResultBasic&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Valid IBAN response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Your balance is exhausted or bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Package expired or account was blocked </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid API Key </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> API key is missing </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<IBANResultBasic> validateIBANBasicWithHttpInfo(String iban) throws ApiException {
        okhttp3.Call localVarCall = validateIBANBasicValidateBeforeCall(iban, null);
        Type localVarReturnType = new TypeToken<IBANResultBasic>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Validate IBAN Basic (asynchronously)
     * Returns the basic validation results
     * @param iban The IBAN (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Valid IBAN response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Your balance is exhausted or bad request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Package expired or account was blocked </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Invalid API Key </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> API key is missing </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call validateIBANBasicAsync(String iban, final ApiCallback<IBANResultBasic> _callback) throws ApiException {

        okhttp3.Call localVarCall = validateIBANBasicValidateBeforeCall(iban, _callback);
        Type localVarReturnType = new TypeToken<IBANResultBasic>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
