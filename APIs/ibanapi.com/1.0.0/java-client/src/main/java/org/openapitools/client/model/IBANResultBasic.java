/*
 * IBANAPI OpenApi Documentation
 * IBANAPI OpenApi documentation
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: samy@ibanapi.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * IBANResultBasic
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:23:24.178718-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class IBANResultBasic {
  public static final String SERIALIZED_NAME_DATA = "data";
  @SerializedName(SERIALIZED_NAME_DATA)
  private Object data;

  public static final String SERIALIZED_NAME_EXPREMENTAL = "expremental";
  @SerializedName(SERIALIZED_NAME_EXPREMENTAL)
  private Integer expremental;

  public static final String SERIALIZED_NAME_MESSAGE = "message";
  @SerializedName(SERIALIZED_NAME_MESSAGE)
  private String message;

  public static final String SERIALIZED_NAME_RESULT = "result";
  @SerializedName(SERIALIZED_NAME_RESULT)
  private Integer result;

  public static final String SERIALIZED_NAME_VALIDATIONS = "validations";
  @SerializedName(SERIALIZED_NAME_VALIDATIONS)
  private List<Object> validations = new ArrayList<>();

  public IBANResultBasic() {
  }

  public IBANResultBasic data(Object data) {
    this.data = data;
    return this;
  }

  /**
   * Get data
   * @return data
   */
  @javax.annotation.Nullable
  public Object getData() {
    return data;
  }

  public void setData(Object data) {
    this.data = data;
  }


  public IBANResultBasic expremental(Integer expremental) {
    this.expremental = expremental;
    return this;
  }

  /**
   * Get expremental
   * @return expremental
   */
  @javax.annotation.Nullable
  public Integer getExpremental() {
    return expremental;
  }

  public void setExpremental(Integer expremental) {
    this.expremental = expremental;
  }


  public IBANResultBasic message(String message) {
    this.message = message;
    return this;
  }

  /**
   * Get message
   * @return message
   */
  @javax.annotation.Nullable
  public String getMessage() {
    return message;
  }

  public void setMessage(String message) {
    this.message = message;
  }


  public IBANResultBasic result(Integer result) {
    this.result = result;
    return this;
  }

  /**
   * Get result
   * @return result
   */
  @javax.annotation.Nullable
  public Integer getResult() {
    return result;
  }

  public void setResult(Integer result) {
    this.result = result;
  }


  public IBANResultBasic validations(List<Object> validations) {
    this.validations = validations;
    return this;
  }

  public IBANResultBasic addValidationsItem(Object validationsItem) {
    if (this.validations == null) {
      this.validations = new ArrayList<>();
    }
    this.validations.add(validationsItem);
    return this;
  }

  /**
   * Get validations
   * @return validations
   */
  @javax.annotation.Nullable
  public List<Object> getValidations() {
    return validations;
  }

  public void setValidations(List<Object> validations) {
    this.validations = validations;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IBANResultBasic ibANResultBasic = (IBANResultBasic) o;
    return Objects.equals(this.data, ibANResultBasic.data) &&
        Objects.equals(this.expremental, ibANResultBasic.expremental) &&
        Objects.equals(this.message, ibANResultBasic.message) &&
        Objects.equals(this.result, ibANResultBasic.result) &&
        Objects.equals(this.validations, ibANResultBasic.validations);
  }

  @Override
  public int hashCode() {
    return Objects.hash(data, expremental, message, result, validations);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IBANResultBasic {\n");
    sb.append("    data: ").append(toIndentedString(data)).append("\n");
    sb.append("    expremental: ").append(toIndentedString(expremental)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    result: ").append(toIndentedString(result)).append("\n");
    sb.append("    validations: ").append(toIndentedString(validations)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("data");
    openapiFields.add("expremental");
    openapiFields.add("message");
    openapiFields.add("result");
    openapiFields.add("validations");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to IBANResultBasic
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!IBANResultBasic.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in IBANResultBasic is not found in the empty JSON string", IBANResultBasic.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!IBANResultBasic.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `IBANResultBasic` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("message") != null && !jsonObj.get("message").isJsonNull()) && !jsonObj.get("message").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `message` to be a primitive type in the JSON string but got `%s`", jsonObj.get("message").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("validations") != null && !jsonObj.get("validations").isJsonNull() && !jsonObj.get("validations").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `validations` to be an array in the JSON string but got `%s`", jsonObj.get("validations").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!IBANResultBasic.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'IBANResultBasic' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<IBANResultBasic> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(IBANResultBasic.class));

       return (TypeAdapter<T>) new TypeAdapter<IBANResultBasic>() {
           @Override
           public void write(JsonWriter out, IBANResultBasic value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public IBANResultBasic read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of IBANResultBasic given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of IBANResultBasic
   * @throws IOException if the JSON string is invalid with respect to IBANResultBasic
   */
  public static IBANResultBasic fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IBANResultBasic.class);
  }

  /**
   * Convert an instance of IBANResultBasic to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

