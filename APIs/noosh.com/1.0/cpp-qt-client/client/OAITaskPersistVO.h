/**
 * Noosh API application
 * Full description of Noosh API
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAITaskPersistVO.h
 *
 * Java type: com.noosh.domain.nooshapi.persist.vo.TaskPersistVO
 */

#ifndef OAITaskPersistVO_H
#define OAITaskPersistVO_H

#include <QJsonObject>

#include <QDate>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAITaskPersistVO : public OAIObject {
public:
    OAITaskPersistVO();
    OAITaskPersistVO(QString json);
    ~OAITaskPersistVO() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    double getActualDuration() const;
    void setActualDuration(const double &actual_duration);
    bool is_actual_duration_Set() const;
    bool is_actual_duration_Valid() const;

    double getActualDurationHour() const;
    void setActualDurationHour(const double &actual_duration_hour);
    bool is_actual_duration_hour_Set() const;
    bool is_actual_duration_hour_Valid() const;

    QDate getActualEndDate() const;
    void setActualEndDate(const QDate &actual_end_date);
    bool is_actual_end_date_Set() const;
    bool is_actual_end_date_Valid() const;

    QDate getActualStartDate() const;
    void setActualStartDate(const QDate &actual_start_date);
    bool is_actual_start_date_Set() const;
    bool is_actual_start_date_Valid() const;

    qint64 getAssignToUserId() const;
    void setAssignToUserId(const qint64 &assign_to_user_id);
    bool is_assign_to_user_id_Set() const;
    bool is_assign_to_user_id_Valid() const;

    QString getComments() const;
    void setComments(const QString &comments);
    bool is_comments_Set() const;
    bool is_comments_Valid() const;

    QString getContributors() const;
    void setContributors(const QString &contributors);
    bool is_contributors_Set() const;
    bool is_contributors_Valid() const;

    qint64 getCustomStatusId() const;
    void setCustomStatusId(const qint64 &custom_status_id);
    bool is_custom_status_id_Set() const;
    bool is_custom_status_id_Valid() const;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    qint64 getPercentageComplete() const;
    void setPercentageComplete(const qint64 &percentage_complete);
    bool is_percentage_complete_Set() const;
    bool is_percentage_complete_Valid() const;

    qint64 getPriority() const;
    void setPriority(const qint64 &priority);
    bool is_priority_Set() const;
    bool is_priority_Valid() const;

    double getRevisedDuration() const;
    void setRevisedDuration(const double &revised_duration);
    bool is_revised_duration_Set() const;
    bool is_revised_duration_Valid() const;

    double getRevisedDurationHour() const;
    void setRevisedDurationHour(const double &revised_duration_hour);
    bool is_revised_duration_hour_Set() const;
    bool is_revised_duration_hour_Valid() const;

    QDate getRevisedEndDate() const;
    void setRevisedEndDate(const QDate &revised_end_date);
    bool is_revised_end_date_Set() const;
    bool is_revised_end_date_Valid() const;

    QDate getRevisedStartDate() const;
    void setRevisedStartDate(const QDate &revised_start_date);
    bool is_revised_start_date_Set() const;
    bool is_revised_start_date_Valid() const;

    qint64 getStatusId() const;
    void setStatusId(const qint64 &status_id);
    bool is_status_id_Set() const;
    bool is_status_id_Valid() const;

    qint64 getTaskId() const;
    void setTaskId(const qint64 &task_id);
    bool is_task_id_Set() const;
    bool is_task_id_Valid() const;

    qint64 getTaskTypeId() const;
    void setTaskTypeId(const qint64 &task_type_id);
    bool is_task_type_id_Set() const;
    bool is_task_type_id_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    double m_actual_duration;
    bool m_actual_duration_isSet;
    bool m_actual_duration_isValid;

    double m_actual_duration_hour;
    bool m_actual_duration_hour_isSet;
    bool m_actual_duration_hour_isValid;

    QDate m_actual_end_date;
    bool m_actual_end_date_isSet;
    bool m_actual_end_date_isValid;

    QDate m_actual_start_date;
    bool m_actual_start_date_isSet;
    bool m_actual_start_date_isValid;

    qint64 m_assign_to_user_id;
    bool m_assign_to_user_id_isSet;
    bool m_assign_to_user_id_isValid;

    QString m_comments;
    bool m_comments_isSet;
    bool m_comments_isValid;

    QString m_contributors;
    bool m_contributors_isSet;
    bool m_contributors_isValid;

    qint64 m_custom_status_id;
    bool m_custom_status_id_isSet;
    bool m_custom_status_id_isValid;

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    qint64 m_percentage_complete;
    bool m_percentage_complete_isSet;
    bool m_percentage_complete_isValid;

    qint64 m_priority;
    bool m_priority_isSet;
    bool m_priority_isValid;

    double m_revised_duration;
    bool m_revised_duration_isSet;
    bool m_revised_duration_isValid;

    double m_revised_duration_hour;
    bool m_revised_duration_hour_isSet;
    bool m_revised_duration_hour_isValid;

    QDate m_revised_end_date;
    bool m_revised_end_date_isSet;
    bool m_revised_end_date_isValid;

    QDate m_revised_start_date;
    bool m_revised_start_date_isSet;
    bool m_revised_start_date_isValid;

    qint64 m_status_id;
    bool m_status_id_isSet;
    bool m_status_id_isValid;

    qint64 m_task_id;
    bool m_task_id_isSet;
    bool m_task_id_isValid;

    qint64 m_task_type_id;
    bool m_task_type_id_isSet;
    bool m_task_type_id_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAITaskPersistVO)

#endif // OAITaskPersistVO_H
