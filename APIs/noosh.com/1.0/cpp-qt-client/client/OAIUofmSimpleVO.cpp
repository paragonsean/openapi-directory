/**
 * Noosh API application
 * Full description of Noosh API
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUofmSimpleVO.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUofmSimpleVO::OAIUofmSimpleVO(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUofmSimpleVO::OAIUofmSimpleVO() {
    this->initializeModel();
}

OAIUofmSimpleVO::~OAIUofmSimpleVO() {}

void OAIUofmSimpleVO::initializeModel() {

    m_is_default_isSet = false;
    m_is_default_isValid = false;

    m_uofm_id_isSet = false;
    m_uofm_id_isValid = false;

    m_uofm_name_isSet = false;
    m_uofm_name_isValid = false;
}

void OAIUofmSimpleVO::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUofmSimpleVO::fromJsonObject(QJsonObject json) {

    m_is_default_isValid = ::OpenAPI::fromJsonValue(m_is_default, json[QString("is_default")]);
    m_is_default_isSet = !json[QString("is_default")].isNull() && m_is_default_isValid;

    m_uofm_id_isValid = ::OpenAPI::fromJsonValue(m_uofm_id, json[QString("uofm_id")]);
    m_uofm_id_isSet = !json[QString("uofm_id")].isNull() && m_uofm_id_isValid;

    m_uofm_name_isValid = ::OpenAPI::fromJsonValue(m_uofm_name, json[QString("uofm_name")]);
    m_uofm_name_isSet = !json[QString("uofm_name")].isNull() && m_uofm_name_isValid;
}

QString OAIUofmSimpleVO::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUofmSimpleVO::asJsonObject() const {
    QJsonObject obj;
    if (m_is_default_isSet) {
        obj.insert(QString("is_default"), ::OpenAPI::toJsonValue(m_is_default));
    }
    if (m_uofm_id_isSet) {
        obj.insert(QString("uofm_id"), ::OpenAPI::toJsonValue(m_uofm_id));
    }
    if (m_uofm_name_isSet) {
        obj.insert(QString("uofm_name"), ::OpenAPI::toJsonValue(m_uofm_name));
    }
    return obj;
}

bool OAIUofmSimpleVO::isIsDefault() const {
    return m_is_default;
}
void OAIUofmSimpleVO::setIsDefault(const bool &is_default) {
    m_is_default = is_default;
    m_is_default_isSet = true;
}

bool OAIUofmSimpleVO::is_is_default_Set() const{
    return m_is_default_isSet;
}

bool OAIUofmSimpleVO::is_is_default_Valid() const{
    return m_is_default_isValid;
}

qint64 OAIUofmSimpleVO::getUofmId() const {
    return m_uofm_id;
}
void OAIUofmSimpleVO::setUofmId(const qint64 &uofm_id) {
    m_uofm_id = uofm_id;
    m_uofm_id_isSet = true;
}

bool OAIUofmSimpleVO::is_uofm_id_Set() const{
    return m_uofm_id_isSet;
}

bool OAIUofmSimpleVO::is_uofm_id_Valid() const{
    return m_uofm_id_isValid;
}

QString OAIUofmSimpleVO::getUofmName() const {
    return m_uofm_name;
}
void OAIUofmSimpleVO::setUofmName(const QString &uofm_name) {
    m_uofm_name = uofm_name;
    m_uofm_name_isSet = true;
}

bool OAIUofmSimpleVO::is_uofm_name_Set() const{
    return m_uofm_name_isSet;
}

bool OAIUofmSimpleVO::is_uofm_name_Valid() const{
    return m_uofm_name_isValid;
}

bool OAIUofmSimpleVO::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_is_default_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uofm_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uofm_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUofmSimpleVO::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
