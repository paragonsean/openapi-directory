/**
 * Noosh API application
 * Full description of Noosh API
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIQuotePriceDetailVO.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIQuotePriceDetailVO::OAIQuotePriceDetailVO(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIQuotePriceDetailVO::OAIQuotePriceDetailVO() {
    this->initializeModel();
}

OAIQuotePriceDetailVO::~OAIQuotePriceDetailVO() {}

void OAIQuotePriceDetailVO::initializeModel() {

    m_breakouts_isSet = false;
    m_breakouts_isValid = false;

    m_cost_isSet = false;
    m_cost_isValid = false;

    m_custom_fields_isSet = false;
    m_custom_fields_isValid = false;

    m_fixed_isSet = false;
    m_fixed_isValid = false;

    m_is_chosen_isSet = false;
    m_is_chosen_isValid = false;

    m_is_included_isSet = false;
    m_is_included_isValid = false;

    m_is_quoted_isSet = false;
    m_is_quoted_isValid = false;

    m_parent_price_id_isSet = false;
    m_parent_price_id_isValid = false;

    m_price_id_isSet = false;
    m_price_id_isValid = false;

    m_quantity_isSet = false;
    m_quantity_isValid = false;

    m_sell_price_isSet = false;
    m_sell_price_isValid = false;

    m_shipping_isSet = false;
    m_shipping_isValid = false;

    m_source_isSet = false;
    m_source_isValid = false;

    m_supplier_isSet = false;
    m_supplier_isValid = false;

    m_tax_isSet = false;
    m_tax_isValid = false;

    m_total_isSet = false;
    m_total_isValid = false;

    m_transactional_cost_isSet = false;
    m_transactional_cost_isValid = false;

    m_transactional_fixed_isSet = false;
    m_transactional_fixed_isValid = false;

    m_transactional_sell_price_isSet = false;
    m_transactional_sell_price_isValid = false;

    m_transactional_shipping_isSet = false;
    m_transactional_shipping_isValid = false;

    m_transactional_tax_isSet = false;
    m_transactional_tax_isValid = false;

    m_transactional_total_isSet = false;
    m_transactional_total_isValid = false;

    m_transactional_variable_isSet = false;
    m_transactional_variable_isValid = false;

    m_variable_isSet = false;
    m_variable_isValid = false;

    m_variable_percent_isSet = false;
    m_variable_percent_isValid = false;
}

void OAIQuotePriceDetailVO::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIQuotePriceDetailVO::fromJsonObject(QJsonObject json) {

    m_breakouts_isValid = ::OpenAPI::fromJsonValue(m_breakouts, json[QString("breakouts")]);
    m_breakouts_isSet = !json[QString("breakouts")].isNull() && m_breakouts_isValid;

    m_cost_isValid = ::OpenAPI::fromJsonValue(m_cost, json[QString("cost")]);
    m_cost_isSet = !json[QString("cost")].isNull() && m_cost_isValid;

    m_custom_fields_isValid = ::OpenAPI::fromJsonValue(m_custom_fields, json[QString("custom_fields")]);
    m_custom_fields_isSet = !json[QString("custom_fields")].isNull() && m_custom_fields_isValid;

    m_fixed_isValid = ::OpenAPI::fromJsonValue(m_fixed, json[QString("fixed")]);
    m_fixed_isSet = !json[QString("fixed")].isNull() && m_fixed_isValid;

    m_is_chosen_isValid = ::OpenAPI::fromJsonValue(m_is_chosen, json[QString("is_chosen")]);
    m_is_chosen_isSet = !json[QString("is_chosen")].isNull() && m_is_chosen_isValid;

    m_is_included_isValid = ::OpenAPI::fromJsonValue(m_is_included, json[QString("is_included")]);
    m_is_included_isSet = !json[QString("is_included")].isNull() && m_is_included_isValid;

    m_is_quoted_isValid = ::OpenAPI::fromJsonValue(m_is_quoted, json[QString("is_quoted")]);
    m_is_quoted_isSet = !json[QString("is_quoted")].isNull() && m_is_quoted_isValid;

    m_parent_price_id_isValid = ::OpenAPI::fromJsonValue(m_parent_price_id, json[QString("parent_price_id")]);
    m_parent_price_id_isSet = !json[QString("parent_price_id")].isNull() && m_parent_price_id_isValid;

    m_price_id_isValid = ::OpenAPI::fromJsonValue(m_price_id, json[QString("price_id")]);
    m_price_id_isSet = !json[QString("price_id")].isNull() && m_price_id_isValid;

    m_quantity_isValid = ::OpenAPI::fromJsonValue(m_quantity, json[QString("quantity")]);
    m_quantity_isSet = !json[QString("quantity")].isNull() && m_quantity_isValid;

    m_sell_price_isValid = ::OpenAPI::fromJsonValue(m_sell_price, json[QString("sell_price")]);
    m_sell_price_isSet = !json[QString("sell_price")].isNull() && m_sell_price_isValid;

    m_shipping_isValid = ::OpenAPI::fromJsonValue(m_shipping, json[QString("shipping")]);
    m_shipping_isSet = !json[QString("shipping")].isNull() && m_shipping_isValid;

    m_source_isValid = ::OpenAPI::fromJsonValue(m_source, json[QString("source")]);
    m_source_isSet = !json[QString("source")].isNull() && m_source_isValid;

    m_supplier_isValid = ::OpenAPI::fromJsonValue(m_supplier, json[QString("supplier")]);
    m_supplier_isSet = !json[QString("supplier")].isNull() && m_supplier_isValid;

    m_tax_isValid = ::OpenAPI::fromJsonValue(m_tax, json[QString("tax")]);
    m_tax_isSet = !json[QString("tax")].isNull() && m_tax_isValid;

    m_total_isValid = ::OpenAPI::fromJsonValue(m_total, json[QString("total")]);
    m_total_isSet = !json[QString("total")].isNull() && m_total_isValid;

    m_transactional_cost_isValid = ::OpenAPI::fromJsonValue(m_transactional_cost, json[QString("transactional_cost")]);
    m_transactional_cost_isSet = !json[QString("transactional_cost")].isNull() && m_transactional_cost_isValid;

    m_transactional_fixed_isValid = ::OpenAPI::fromJsonValue(m_transactional_fixed, json[QString("transactional_fixed")]);
    m_transactional_fixed_isSet = !json[QString("transactional_fixed")].isNull() && m_transactional_fixed_isValid;

    m_transactional_sell_price_isValid = ::OpenAPI::fromJsonValue(m_transactional_sell_price, json[QString("transactional_sell_price")]);
    m_transactional_sell_price_isSet = !json[QString("transactional_sell_price")].isNull() && m_transactional_sell_price_isValid;

    m_transactional_shipping_isValid = ::OpenAPI::fromJsonValue(m_transactional_shipping, json[QString("transactional_shipping")]);
    m_transactional_shipping_isSet = !json[QString("transactional_shipping")].isNull() && m_transactional_shipping_isValid;

    m_transactional_tax_isValid = ::OpenAPI::fromJsonValue(m_transactional_tax, json[QString("transactional_tax")]);
    m_transactional_tax_isSet = !json[QString("transactional_tax")].isNull() && m_transactional_tax_isValid;

    m_transactional_total_isValid = ::OpenAPI::fromJsonValue(m_transactional_total, json[QString("transactional_total")]);
    m_transactional_total_isSet = !json[QString("transactional_total")].isNull() && m_transactional_total_isValid;

    m_transactional_variable_isValid = ::OpenAPI::fromJsonValue(m_transactional_variable, json[QString("transactional_variable")]);
    m_transactional_variable_isSet = !json[QString("transactional_variable")].isNull() && m_transactional_variable_isValid;

    m_variable_isValid = ::OpenAPI::fromJsonValue(m_variable, json[QString("variable")]);
    m_variable_isSet = !json[QString("variable")].isNull() && m_variable_isValid;

    m_variable_percent_isValid = ::OpenAPI::fromJsonValue(m_variable_percent, json[QString("variable_percent")]);
    m_variable_percent_isSet = !json[QString("variable_percent")].isNull() && m_variable_percent_isValid;
}

QString OAIQuotePriceDetailVO::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIQuotePriceDetailVO::asJsonObject() const {
    QJsonObject obj;
    if (m_breakouts.size() > 0) {
        obj.insert(QString("breakouts"), ::OpenAPI::toJsonValue(m_breakouts));
    }
    if (m_cost_isSet) {
        obj.insert(QString("cost"), ::OpenAPI::toJsonValue(m_cost));
    }
    if (m_custom_fields.size() > 0) {
        obj.insert(QString("custom_fields"), ::OpenAPI::toJsonValue(m_custom_fields));
    }
    if (m_fixed_isSet) {
        obj.insert(QString("fixed"), ::OpenAPI::toJsonValue(m_fixed));
    }
    if (m_is_chosen_isSet) {
        obj.insert(QString("is_chosen"), ::OpenAPI::toJsonValue(m_is_chosen));
    }
    if (m_is_included_isSet) {
        obj.insert(QString("is_included"), ::OpenAPI::toJsonValue(m_is_included));
    }
    if (m_is_quoted_isSet) {
        obj.insert(QString("is_quoted"), ::OpenAPI::toJsonValue(m_is_quoted));
    }
    if (m_parent_price_id_isSet) {
        obj.insert(QString("parent_price_id"), ::OpenAPI::toJsonValue(m_parent_price_id));
    }
    if (m_price_id_isSet) {
        obj.insert(QString("price_id"), ::OpenAPI::toJsonValue(m_price_id));
    }
    if (m_quantity_isSet) {
        obj.insert(QString("quantity"), ::OpenAPI::toJsonValue(m_quantity));
    }
    if (m_sell_price_isSet) {
        obj.insert(QString("sell_price"), ::OpenAPI::toJsonValue(m_sell_price));
    }
    if (m_shipping_isSet) {
        obj.insert(QString("shipping"), ::OpenAPI::toJsonValue(m_shipping));
    }
    if (m_source_isSet) {
        obj.insert(QString("source"), ::OpenAPI::toJsonValue(m_source));
    }
    if (m_supplier_isSet) {
        obj.insert(QString("supplier"), ::OpenAPI::toJsonValue(m_supplier));
    }
    if (m_tax_isSet) {
        obj.insert(QString("tax"), ::OpenAPI::toJsonValue(m_tax));
    }
    if (m_total_isSet) {
        obj.insert(QString("total"), ::OpenAPI::toJsonValue(m_total));
    }
    if (m_transactional_cost_isSet) {
        obj.insert(QString("transactional_cost"), ::OpenAPI::toJsonValue(m_transactional_cost));
    }
    if (m_transactional_fixed_isSet) {
        obj.insert(QString("transactional_fixed"), ::OpenAPI::toJsonValue(m_transactional_fixed));
    }
    if (m_transactional_sell_price_isSet) {
        obj.insert(QString("transactional_sell_price"), ::OpenAPI::toJsonValue(m_transactional_sell_price));
    }
    if (m_transactional_shipping_isSet) {
        obj.insert(QString("transactional_shipping"), ::OpenAPI::toJsonValue(m_transactional_shipping));
    }
    if (m_transactional_tax_isSet) {
        obj.insert(QString("transactional_tax"), ::OpenAPI::toJsonValue(m_transactional_tax));
    }
    if (m_transactional_total_isSet) {
        obj.insert(QString("transactional_total"), ::OpenAPI::toJsonValue(m_transactional_total));
    }
    if (m_transactional_variable_isSet) {
        obj.insert(QString("transactional_variable"), ::OpenAPI::toJsonValue(m_transactional_variable));
    }
    if (m_variable_isSet) {
        obj.insert(QString("variable"), ::OpenAPI::toJsonValue(m_variable));
    }
    if (m_variable_percent_isSet) {
        obj.insert(QString("variable_percent"), ::OpenAPI::toJsonValue(m_variable_percent));
    }
    return obj;
}

QList<OAIBreakoutVO> OAIQuotePriceDetailVO::getBreakouts() const {
    return m_breakouts;
}
void OAIQuotePriceDetailVO::setBreakouts(const QList<OAIBreakoutVO> &breakouts) {
    m_breakouts = breakouts;
    m_breakouts_isSet = true;
}

bool OAIQuotePriceDetailVO::is_breakouts_Set() const{
    return m_breakouts_isSet;
}

bool OAIQuotePriceDetailVO::is_breakouts_Valid() const{
    return m_breakouts_isValid;
}

QJsonValue OAIQuotePriceDetailVO::getCost() const {
    return m_cost;
}
void OAIQuotePriceDetailVO::setCost(const QJsonValue &cost) {
    m_cost = cost;
    m_cost_isSet = true;
}

bool OAIQuotePriceDetailVO::is_cost_Set() const{
    return m_cost_isSet;
}

bool OAIQuotePriceDetailVO::is_cost_Valid() const{
    return m_cost_isValid;
}

QList<OAIPropertyPaAndAttVO> OAIQuotePriceDetailVO::getCustomFields() const {
    return m_custom_fields;
}
void OAIQuotePriceDetailVO::setCustomFields(const QList<OAIPropertyPaAndAttVO> &custom_fields) {
    m_custom_fields = custom_fields;
    m_custom_fields_isSet = true;
}

bool OAIQuotePriceDetailVO::is_custom_fields_Set() const{
    return m_custom_fields_isSet;
}

bool OAIQuotePriceDetailVO::is_custom_fields_Valid() const{
    return m_custom_fields_isValid;
}

QJsonValue OAIQuotePriceDetailVO::getFixed() const {
    return m_fixed;
}
void OAIQuotePriceDetailVO::setFixed(const QJsonValue &fixed) {
    m_fixed = fixed;
    m_fixed_isSet = true;
}

bool OAIQuotePriceDetailVO::is_fixed_Set() const{
    return m_fixed_isSet;
}

bool OAIQuotePriceDetailVO::is_fixed_Valid() const{
    return m_fixed_isValid;
}

bool OAIQuotePriceDetailVO::isIsChosen() const {
    return m_is_chosen;
}
void OAIQuotePriceDetailVO::setIsChosen(const bool &is_chosen) {
    m_is_chosen = is_chosen;
    m_is_chosen_isSet = true;
}

bool OAIQuotePriceDetailVO::is_is_chosen_Set() const{
    return m_is_chosen_isSet;
}

bool OAIQuotePriceDetailVO::is_is_chosen_Valid() const{
    return m_is_chosen_isValid;
}

bool OAIQuotePriceDetailVO::isIsIncluded() const {
    return m_is_included;
}
void OAIQuotePriceDetailVO::setIsIncluded(const bool &is_included) {
    m_is_included = is_included;
    m_is_included_isSet = true;
}

bool OAIQuotePriceDetailVO::is_is_included_Set() const{
    return m_is_included_isSet;
}

bool OAIQuotePriceDetailVO::is_is_included_Valid() const{
    return m_is_included_isValid;
}

bool OAIQuotePriceDetailVO::isIsQuoted() const {
    return m_is_quoted;
}
void OAIQuotePriceDetailVO::setIsQuoted(const bool &is_quoted) {
    m_is_quoted = is_quoted;
    m_is_quoted_isSet = true;
}

bool OAIQuotePriceDetailVO::is_is_quoted_Set() const{
    return m_is_quoted_isSet;
}

bool OAIQuotePriceDetailVO::is_is_quoted_Valid() const{
    return m_is_quoted_isValid;
}

qint64 OAIQuotePriceDetailVO::getParentPriceId() const {
    return m_parent_price_id;
}
void OAIQuotePriceDetailVO::setParentPriceId(const qint64 &parent_price_id) {
    m_parent_price_id = parent_price_id;
    m_parent_price_id_isSet = true;
}

bool OAIQuotePriceDetailVO::is_parent_price_id_Set() const{
    return m_parent_price_id_isSet;
}

bool OAIQuotePriceDetailVO::is_parent_price_id_Valid() const{
    return m_parent_price_id_isValid;
}

qint64 OAIQuotePriceDetailVO::getPriceId() const {
    return m_price_id;
}
void OAIQuotePriceDetailVO::setPriceId(const qint64 &price_id) {
    m_price_id = price_id;
    m_price_id_isSet = true;
}

bool OAIQuotePriceDetailVO::is_price_id_Set() const{
    return m_price_id_isSet;
}

bool OAIQuotePriceDetailVO::is_price_id_Valid() const{
    return m_price_id_isValid;
}

QJsonValue OAIQuotePriceDetailVO::getQuantity() const {
    return m_quantity;
}
void OAIQuotePriceDetailVO::setQuantity(const QJsonValue &quantity) {
    m_quantity = quantity;
    m_quantity_isSet = true;
}

bool OAIQuotePriceDetailVO::is_quantity_Set() const{
    return m_quantity_isSet;
}

bool OAIQuotePriceDetailVO::is_quantity_Valid() const{
    return m_quantity_isValid;
}

QJsonValue OAIQuotePriceDetailVO::getSellPrice() const {
    return m_sell_price;
}
void OAIQuotePriceDetailVO::setSellPrice(const QJsonValue &sell_price) {
    m_sell_price = sell_price;
    m_sell_price_isSet = true;
}

bool OAIQuotePriceDetailVO::is_sell_price_Set() const{
    return m_sell_price_isSet;
}

bool OAIQuotePriceDetailVO::is_sell_price_Valid() const{
    return m_sell_price_isValid;
}

QJsonValue OAIQuotePriceDetailVO::getShipping() const {
    return m_shipping;
}
void OAIQuotePriceDetailVO::setShipping(const QJsonValue &shipping) {
    m_shipping = shipping;
    m_shipping_isSet = true;
}

bool OAIQuotePriceDetailVO::is_shipping_Set() const{
    return m_shipping_isSet;
}

bool OAIQuotePriceDetailVO::is_shipping_Valid() const{
    return m_shipping_isValid;
}

QJsonValue OAIQuotePriceDetailVO::getSource() const {
    return m_source;
}
void OAIQuotePriceDetailVO::setSource(const QJsonValue &source) {
    m_source = source;
    m_source_isSet = true;
}

bool OAIQuotePriceDetailVO::is_source_Set() const{
    return m_source_isSet;
}

bool OAIQuotePriceDetailVO::is_source_Valid() const{
    return m_source_isValid;
}

QString OAIQuotePriceDetailVO::getSupplier() const {
    return m_supplier;
}
void OAIQuotePriceDetailVO::setSupplier(const QString &supplier) {
    m_supplier = supplier;
    m_supplier_isSet = true;
}

bool OAIQuotePriceDetailVO::is_supplier_Set() const{
    return m_supplier_isSet;
}

bool OAIQuotePriceDetailVO::is_supplier_Valid() const{
    return m_supplier_isValid;
}

QJsonValue OAIQuotePriceDetailVO::getTax() const {
    return m_tax;
}
void OAIQuotePriceDetailVO::setTax(const QJsonValue &tax) {
    m_tax = tax;
    m_tax_isSet = true;
}

bool OAIQuotePriceDetailVO::is_tax_Set() const{
    return m_tax_isSet;
}

bool OAIQuotePriceDetailVO::is_tax_Valid() const{
    return m_tax_isValid;
}

QJsonValue OAIQuotePriceDetailVO::getTotal() const {
    return m_total;
}
void OAIQuotePriceDetailVO::setTotal(const QJsonValue &total) {
    m_total = total;
    m_total_isSet = true;
}

bool OAIQuotePriceDetailVO::is_total_Set() const{
    return m_total_isSet;
}

bool OAIQuotePriceDetailVO::is_total_Valid() const{
    return m_total_isValid;
}

QJsonValue OAIQuotePriceDetailVO::getTransactionalCost() const {
    return m_transactional_cost;
}
void OAIQuotePriceDetailVO::setTransactionalCost(const QJsonValue &transactional_cost) {
    m_transactional_cost = transactional_cost;
    m_transactional_cost_isSet = true;
}

bool OAIQuotePriceDetailVO::is_transactional_cost_Set() const{
    return m_transactional_cost_isSet;
}

bool OAIQuotePriceDetailVO::is_transactional_cost_Valid() const{
    return m_transactional_cost_isValid;
}

QJsonValue OAIQuotePriceDetailVO::getTransactionalFixed() const {
    return m_transactional_fixed;
}
void OAIQuotePriceDetailVO::setTransactionalFixed(const QJsonValue &transactional_fixed) {
    m_transactional_fixed = transactional_fixed;
    m_transactional_fixed_isSet = true;
}

bool OAIQuotePriceDetailVO::is_transactional_fixed_Set() const{
    return m_transactional_fixed_isSet;
}

bool OAIQuotePriceDetailVO::is_transactional_fixed_Valid() const{
    return m_transactional_fixed_isValid;
}

QJsonValue OAIQuotePriceDetailVO::getTransactionalSellPrice() const {
    return m_transactional_sell_price;
}
void OAIQuotePriceDetailVO::setTransactionalSellPrice(const QJsonValue &transactional_sell_price) {
    m_transactional_sell_price = transactional_sell_price;
    m_transactional_sell_price_isSet = true;
}

bool OAIQuotePriceDetailVO::is_transactional_sell_price_Set() const{
    return m_transactional_sell_price_isSet;
}

bool OAIQuotePriceDetailVO::is_transactional_sell_price_Valid() const{
    return m_transactional_sell_price_isValid;
}

QJsonValue OAIQuotePriceDetailVO::getTransactionalShipping() const {
    return m_transactional_shipping;
}
void OAIQuotePriceDetailVO::setTransactionalShipping(const QJsonValue &transactional_shipping) {
    m_transactional_shipping = transactional_shipping;
    m_transactional_shipping_isSet = true;
}

bool OAIQuotePriceDetailVO::is_transactional_shipping_Set() const{
    return m_transactional_shipping_isSet;
}

bool OAIQuotePriceDetailVO::is_transactional_shipping_Valid() const{
    return m_transactional_shipping_isValid;
}

QJsonValue OAIQuotePriceDetailVO::getTransactionalTax() const {
    return m_transactional_tax;
}
void OAIQuotePriceDetailVO::setTransactionalTax(const QJsonValue &transactional_tax) {
    m_transactional_tax = transactional_tax;
    m_transactional_tax_isSet = true;
}

bool OAIQuotePriceDetailVO::is_transactional_tax_Set() const{
    return m_transactional_tax_isSet;
}

bool OAIQuotePriceDetailVO::is_transactional_tax_Valid() const{
    return m_transactional_tax_isValid;
}

QJsonValue OAIQuotePriceDetailVO::getTransactionalTotal() const {
    return m_transactional_total;
}
void OAIQuotePriceDetailVO::setTransactionalTotal(const QJsonValue &transactional_total) {
    m_transactional_total = transactional_total;
    m_transactional_total_isSet = true;
}

bool OAIQuotePriceDetailVO::is_transactional_total_Set() const{
    return m_transactional_total_isSet;
}

bool OAIQuotePriceDetailVO::is_transactional_total_Valid() const{
    return m_transactional_total_isValid;
}

QJsonValue OAIQuotePriceDetailVO::getTransactionalVariable() const {
    return m_transactional_variable;
}
void OAIQuotePriceDetailVO::setTransactionalVariable(const QJsonValue &transactional_variable) {
    m_transactional_variable = transactional_variable;
    m_transactional_variable_isSet = true;
}

bool OAIQuotePriceDetailVO::is_transactional_variable_Set() const{
    return m_transactional_variable_isSet;
}

bool OAIQuotePriceDetailVO::is_transactional_variable_Valid() const{
    return m_transactional_variable_isValid;
}

QJsonValue OAIQuotePriceDetailVO::getVariable() const {
    return m_variable;
}
void OAIQuotePriceDetailVO::setVariable(const QJsonValue &variable) {
    m_variable = variable;
    m_variable_isSet = true;
}

bool OAIQuotePriceDetailVO::is_variable_Set() const{
    return m_variable_isSet;
}

bool OAIQuotePriceDetailVO::is_variable_Valid() const{
    return m_variable_isValid;
}

QJsonValue OAIQuotePriceDetailVO::getVariablePercent() const {
    return m_variable_percent;
}
void OAIQuotePriceDetailVO::setVariablePercent(const QJsonValue &variable_percent) {
    m_variable_percent = variable_percent;
    m_variable_percent_isSet = true;
}

bool OAIQuotePriceDetailVO::is_variable_percent_Set() const{
    return m_variable_percent_isSet;
}

bool OAIQuotePriceDetailVO::is_variable_percent_Valid() const{
    return m_variable_percent_isValid;
}

bool OAIQuotePriceDetailVO::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_breakouts.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_cost_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_fields.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_fixed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_chosen_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_included_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_quoted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent_price_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_price_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quantity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sell_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shipping_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_supplier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tax_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transactional_cost_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transactional_fixed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transactional_sell_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transactional_shipping_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transactional_tax_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transactional_total_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transactional_variable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_variable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_variable_percent_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIQuotePriceDetailVO::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
