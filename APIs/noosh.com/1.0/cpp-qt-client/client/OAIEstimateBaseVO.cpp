/**
 * Noosh API application
 * Full description of Noosh API
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEstimateBaseVO.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEstimateBaseVO::OAIEstimateBaseVO(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEstimateBaseVO::OAIEstimateBaseVO() {
    this->initializeModel();
}

OAIEstimateBaseVO::~OAIEstimateBaseVO() {}

void OAIEstimateBaseVO::initializeModel() {

    m_create_date_isSet = false;
    m_create_date_isValid = false;

    m_currency_isSet = false;
    m_currency_isValid = false;

    m_estimate_id_isSet = false;
    m_estimate_id_isValid = false;

    m_estimate_title_isSet = false;
    m_estimate_title_isValid = false;

    m_expiration_date_isSet = false;
    m_expiration_date_isValid = false;

    m_project_isSet = false;
    m_project_isValid = false;

    m_rfe_isSet = false;
    m_rfe_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_submit_date_isSet = false;
    m_submit_date_isValid = false;

    m_supplier_workgroup_isSet = false;
    m_supplier_workgroup_isValid = false;

    m_transactional_currency_isSet = false;
    m_transactional_currency_isValid = false;
}

void OAIEstimateBaseVO::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEstimateBaseVO::fromJsonObject(QJsonObject json) {

    m_create_date_isValid = ::OpenAPI::fromJsonValue(m_create_date, json[QString("create_date")]);
    m_create_date_isSet = !json[QString("create_date")].isNull() && m_create_date_isValid;

    m_currency_isValid = ::OpenAPI::fromJsonValue(m_currency, json[QString("currency")]);
    m_currency_isSet = !json[QString("currency")].isNull() && m_currency_isValid;

    m_estimate_id_isValid = ::OpenAPI::fromJsonValue(m_estimate_id, json[QString("estimate_id")]);
    m_estimate_id_isSet = !json[QString("estimate_id")].isNull() && m_estimate_id_isValid;

    m_estimate_title_isValid = ::OpenAPI::fromJsonValue(m_estimate_title, json[QString("estimate_title")]);
    m_estimate_title_isSet = !json[QString("estimate_title")].isNull() && m_estimate_title_isValid;

    m_expiration_date_isValid = ::OpenAPI::fromJsonValue(m_expiration_date, json[QString("expiration_date")]);
    m_expiration_date_isSet = !json[QString("expiration_date")].isNull() && m_expiration_date_isValid;

    m_project_isValid = ::OpenAPI::fromJsonValue(m_project, json[QString("project")]);
    m_project_isSet = !json[QString("project")].isNull() && m_project_isValid;

    m_rfe_isValid = ::OpenAPI::fromJsonValue(m_rfe, json[QString("rfe")]);
    m_rfe_isSet = !json[QString("rfe")].isNull() && m_rfe_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_submit_date_isValid = ::OpenAPI::fromJsonValue(m_submit_date, json[QString("submit_date")]);
    m_submit_date_isSet = !json[QString("submit_date")].isNull() && m_submit_date_isValid;

    m_supplier_workgroup_isValid = ::OpenAPI::fromJsonValue(m_supplier_workgroup, json[QString("supplier_workgroup")]);
    m_supplier_workgroup_isSet = !json[QString("supplier_workgroup")].isNull() && m_supplier_workgroup_isValid;

    m_transactional_currency_isValid = ::OpenAPI::fromJsonValue(m_transactional_currency, json[QString("transactional_currency")]);
    m_transactional_currency_isSet = !json[QString("transactional_currency")].isNull() && m_transactional_currency_isValid;
}

QString OAIEstimateBaseVO::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEstimateBaseVO::asJsonObject() const {
    QJsonObject obj;
    if (m_create_date_isSet) {
        obj.insert(QString("create_date"), ::OpenAPI::toJsonValue(m_create_date));
    }
    if (m_currency_isSet) {
        obj.insert(QString("currency"), ::OpenAPI::toJsonValue(m_currency));
    }
    if (m_estimate_id_isSet) {
        obj.insert(QString("estimate_id"), ::OpenAPI::toJsonValue(m_estimate_id));
    }
    if (m_estimate_title_isSet) {
        obj.insert(QString("estimate_title"), ::OpenAPI::toJsonValue(m_estimate_title));
    }
    if (m_expiration_date_isSet) {
        obj.insert(QString("expiration_date"), ::OpenAPI::toJsonValue(m_expiration_date));
    }
    if (m_project.isSet()) {
        obj.insert(QString("project"), ::OpenAPI::toJsonValue(m_project));
    }
    if (m_rfe.isSet()) {
        obj.insert(QString("rfe"), ::OpenAPI::toJsonValue(m_rfe));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_submit_date_isSet) {
        obj.insert(QString("submit_date"), ::OpenAPI::toJsonValue(m_submit_date));
    }
    if (m_supplier_workgroup.isSet()) {
        obj.insert(QString("supplier_workgroup"), ::OpenAPI::toJsonValue(m_supplier_workgroup));
    }
    if (m_transactional_currency_isSet) {
        obj.insert(QString("transactional_currency"), ::OpenAPI::toJsonValue(m_transactional_currency));
    }
    return obj;
}

QDate OAIEstimateBaseVO::getCreateDate() const {
    return m_create_date;
}
void OAIEstimateBaseVO::setCreateDate(const QDate &create_date) {
    m_create_date = create_date;
    m_create_date_isSet = true;
}

bool OAIEstimateBaseVO::is_create_date_Set() const{
    return m_create_date_isSet;
}

bool OAIEstimateBaseVO::is_create_date_Valid() const{
    return m_create_date_isValid;
}

QString OAIEstimateBaseVO::getCurrency() const {
    return m_currency;
}
void OAIEstimateBaseVO::setCurrency(const QString &currency) {
    m_currency = currency;
    m_currency_isSet = true;
}

bool OAIEstimateBaseVO::is_currency_Set() const{
    return m_currency_isSet;
}

bool OAIEstimateBaseVO::is_currency_Valid() const{
    return m_currency_isValid;
}

qint64 OAIEstimateBaseVO::getEstimateId() const {
    return m_estimate_id;
}
void OAIEstimateBaseVO::setEstimateId(const qint64 &estimate_id) {
    m_estimate_id = estimate_id;
    m_estimate_id_isSet = true;
}

bool OAIEstimateBaseVO::is_estimate_id_Set() const{
    return m_estimate_id_isSet;
}

bool OAIEstimateBaseVO::is_estimate_id_Valid() const{
    return m_estimate_id_isValid;
}

QString OAIEstimateBaseVO::getEstimateTitle() const {
    return m_estimate_title;
}
void OAIEstimateBaseVO::setEstimateTitle(const QString &estimate_title) {
    m_estimate_title = estimate_title;
    m_estimate_title_isSet = true;
}

bool OAIEstimateBaseVO::is_estimate_title_Set() const{
    return m_estimate_title_isSet;
}

bool OAIEstimateBaseVO::is_estimate_title_Valid() const{
    return m_estimate_title_isValid;
}

QDate OAIEstimateBaseVO::getExpirationDate() const {
    return m_expiration_date;
}
void OAIEstimateBaseVO::setExpirationDate(const QDate &expiration_date) {
    m_expiration_date = expiration_date;
    m_expiration_date_isSet = true;
}

bool OAIEstimateBaseVO::is_expiration_date_Set() const{
    return m_expiration_date_isSet;
}

bool OAIEstimateBaseVO::is_expiration_date_Valid() const{
    return m_expiration_date_isValid;
}

OAIProjectBaseVO OAIEstimateBaseVO::getProject() const {
    return m_project;
}
void OAIEstimateBaseVO::setProject(const OAIProjectBaseVO &project) {
    m_project = project;
    m_project_isSet = true;
}

bool OAIEstimateBaseVO::is_project_Set() const{
    return m_project_isSet;
}

bool OAIEstimateBaseVO::is_project_Valid() const{
    return m_project_isValid;
}

OAIRfeBaseVO OAIEstimateBaseVO::getRfe() const {
    return m_rfe;
}
void OAIEstimateBaseVO::setRfe(const OAIRfeBaseVO &rfe) {
    m_rfe = rfe;
    m_rfe_isSet = true;
}

bool OAIEstimateBaseVO::is_rfe_Set() const{
    return m_rfe_isSet;
}

bool OAIEstimateBaseVO::is_rfe_Valid() const{
    return m_rfe_isValid;
}

QString OAIEstimateBaseVO::getStatus() const {
    return m_status;
}
void OAIEstimateBaseVO::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIEstimateBaseVO::is_status_Set() const{
    return m_status_isSet;
}

bool OAIEstimateBaseVO::is_status_Valid() const{
    return m_status_isValid;
}

QDate OAIEstimateBaseVO::getSubmitDate() const {
    return m_submit_date;
}
void OAIEstimateBaseVO::setSubmitDate(const QDate &submit_date) {
    m_submit_date = submit_date;
    m_submit_date_isSet = true;
}

bool OAIEstimateBaseVO::is_submit_date_Set() const{
    return m_submit_date_isSet;
}

bool OAIEstimateBaseVO::is_submit_date_Valid() const{
    return m_submit_date_isValid;
}

OAIWorkgroupBaseVO OAIEstimateBaseVO::getSupplierWorkgroup() const {
    return m_supplier_workgroup;
}
void OAIEstimateBaseVO::setSupplierWorkgroup(const OAIWorkgroupBaseVO &supplier_workgroup) {
    m_supplier_workgroup = supplier_workgroup;
    m_supplier_workgroup_isSet = true;
}

bool OAIEstimateBaseVO::is_supplier_workgroup_Set() const{
    return m_supplier_workgroup_isSet;
}

bool OAIEstimateBaseVO::is_supplier_workgroup_Valid() const{
    return m_supplier_workgroup_isValid;
}

QString OAIEstimateBaseVO::getTransactionalCurrency() const {
    return m_transactional_currency;
}
void OAIEstimateBaseVO::setTransactionalCurrency(const QString &transactional_currency) {
    m_transactional_currency = transactional_currency;
    m_transactional_currency_isSet = true;
}

bool OAIEstimateBaseVO::is_transactional_currency_Set() const{
    return m_transactional_currency_isSet;
}

bool OAIEstimateBaseVO::is_transactional_currency_Valid() const{
    return m_transactional_currency_isValid;
}

bool OAIEstimateBaseVO::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_create_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_estimate_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_estimate_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expiration_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_project.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_rfe.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_submit_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_supplier_workgroup.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_transactional_currency_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEstimateBaseVO::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
