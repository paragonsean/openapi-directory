/**
 * Noosh API application
 * Full description of Noosh API
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRfeDetailsVO.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRfeDetailsVO::OAIRfeDetailsVO(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRfeDetailsVO::OAIRfeDetailsVO() {
    this->initializeModel();
}

OAIRfeDetailsVO::~OAIRfeDetailsVO() {}

void OAIRfeDetailsVO::initializeModel() {

    m_description_isSet = false;
    m_description_isValid = false;

    m_details_isSet = false;
    m_details_isValid = false;

    m_estimate_due_date_isSet = false;
    m_estimate_due_date_isValid = false;

    m_estimators_isSet = false;
    m_estimators_isValid = false;

    m_itemized_tax_and_shipping_isSet = false;
    m_itemized_tax_and_shipping_isValid = false;

    m_proposed_order_completion_date_isSet = false;
    m_proposed_order_completion_date_isValid = false;

    m_reference_number_isSet = false;
    m_reference_number_isValid = false;

    m_requestor_isSet = false;
    m_requestor_isValid = false;

    m_rfe_id_isSet = false;
    m_rfe_id_isValid = false;

    m_rfe_items_isSet = false;
    m_rfe_items_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_submitted_date_isSet = false;
    m_submitted_date_isValid = false;

    m_supplier_estimates_isSet = false;
    m_supplier_estimates_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;
}

void OAIRfeDetailsVO::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRfeDetailsVO::fromJsonObject(QJsonObject json) {

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_details_isValid = ::OpenAPI::fromJsonValue(m_details, json[QString("details")]);
    m_details_isSet = !json[QString("details")].isNull() && m_details_isValid;

    m_estimate_due_date_isValid = ::OpenAPI::fromJsonValue(m_estimate_due_date, json[QString("estimate_due_date")]);
    m_estimate_due_date_isSet = !json[QString("estimate_due_date")].isNull() && m_estimate_due_date_isValid;

    m_estimators_isValid = ::OpenAPI::fromJsonValue(m_estimators, json[QString("estimators")]);
    m_estimators_isSet = !json[QString("estimators")].isNull() && m_estimators_isValid;

    m_itemized_tax_and_shipping_isValid = ::OpenAPI::fromJsonValue(m_itemized_tax_and_shipping, json[QString("itemized_tax_and_shipping")]);
    m_itemized_tax_and_shipping_isSet = !json[QString("itemized_tax_and_shipping")].isNull() && m_itemized_tax_and_shipping_isValid;

    m_proposed_order_completion_date_isValid = ::OpenAPI::fromJsonValue(m_proposed_order_completion_date, json[QString("proposed_order_completion_date")]);
    m_proposed_order_completion_date_isSet = !json[QString("proposed_order_completion_date")].isNull() && m_proposed_order_completion_date_isValid;

    m_reference_number_isValid = ::OpenAPI::fromJsonValue(m_reference_number, json[QString("reference_number")]);
    m_reference_number_isSet = !json[QString("reference_number")].isNull() && m_reference_number_isValid;

    m_requestor_isValid = ::OpenAPI::fromJsonValue(m_requestor, json[QString("requestor")]);
    m_requestor_isSet = !json[QString("requestor")].isNull() && m_requestor_isValid;

    m_rfe_id_isValid = ::OpenAPI::fromJsonValue(m_rfe_id, json[QString("rfe_id")]);
    m_rfe_id_isSet = !json[QString("rfe_id")].isNull() && m_rfe_id_isValid;

    m_rfe_items_isValid = ::OpenAPI::fromJsonValue(m_rfe_items, json[QString("rfe_items")]);
    m_rfe_items_isSet = !json[QString("rfe_items")].isNull() && m_rfe_items_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_submitted_date_isValid = ::OpenAPI::fromJsonValue(m_submitted_date, json[QString("submitted_date")]);
    m_submitted_date_isSet = !json[QString("submitted_date")].isNull() && m_submitted_date_isValid;

    m_supplier_estimates_isValid = ::OpenAPI::fromJsonValue(m_supplier_estimates, json[QString("supplier_estimates")]);
    m_supplier_estimates_isSet = !json[QString("supplier_estimates")].isNull() && m_supplier_estimates_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;
}

QString OAIRfeDetailsVO::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRfeDetailsVO::asJsonObject() const {
    QJsonObject obj;
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_details_isSet) {
        obj.insert(QString("details"), ::OpenAPI::toJsonValue(m_details));
    }
    if (m_estimate_due_date_isSet) {
        obj.insert(QString("estimate_due_date"), ::OpenAPI::toJsonValue(m_estimate_due_date));
    }
    if (m_estimators.size() > 0) {
        obj.insert(QString("estimators"), ::OpenAPI::toJsonValue(m_estimators));
    }
    if (m_itemized_tax_and_shipping_isSet) {
        obj.insert(QString("itemized_tax_and_shipping"), ::OpenAPI::toJsonValue(m_itemized_tax_and_shipping));
    }
    if (m_proposed_order_completion_date_isSet) {
        obj.insert(QString("proposed_order_completion_date"), ::OpenAPI::toJsonValue(m_proposed_order_completion_date));
    }
    if (m_reference_number_isSet) {
        obj.insert(QString("reference_number"), ::OpenAPI::toJsonValue(m_reference_number));
    }
    if (m_requestor_isSet) {
        obj.insert(QString("requestor"), ::OpenAPI::toJsonValue(m_requestor));
    }
    if (m_rfe_id_isSet) {
        obj.insert(QString("rfe_id"), ::OpenAPI::toJsonValue(m_rfe_id));
    }
    if (m_rfe_items.size() > 0) {
        obj.insert(QString("rfe_items"), ::OpenAPI::toJsonValue(m_rfe_items));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_submitted_date_isSet) {
        obj.insert(QString("submitted_date"), ::OpenAPI::toJsonValue(m_submitted_date));
    }
    if (m_supplier_estimates.size() > 0) {
        obj.insert(QString("supplier_estimates"), ::OpenAPI::toJsonValue(m_supplier_estimates));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    return obj;
}

QString OAIRfeDetailsVO::getDescription() const {
    return m_description;
}
void OAIRfeDetailsVO::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIRfeDetailsVO::is_description_Set() const{
    return m_description_isSet;
}

bool OAIRfeDetailsVO::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIRfeDetailsVO::getDetails() const {
    return m_details;
}
void OAIRfeDetailsVO::setDetails(const QString &details) {
    m_details = details;
    m_details_isSet = true;
}

bool OAIRfeDetailsVO::is_details_Set() const{
    return m_details_isSet;
}

bool OAIRfeDetailsVO::is_details_Valid() const{
    return m_details_isValid;
}

QDate OAIRfeDetailsVO::getEstimateDueDate() const {
    return m_estimate_due_date;
}
void OAIRfeDetailsVO::setEstimateDueDate(const QDate &estimate_due_date) {
    m_estimate_due_date = estimate_due_date;
    m_estimate_due_date_isSet = true;
}

bool OAIRfeDetailsVO::is_estimate_due_date_Set() const{
    return m_estimate_due_date_isSet;
}

bool OAIRfeDetailsVO::is_estimate_due_date_Valid() const{
    return m_estimate_due_date_isValid;
}

QList<QString> OAIRfeDetailsVO::getEstimators() const {
    return m_estimators;
}
void OAIRfeDetailsVO::setEstimators(const QList<QString> &estimators) {
    m_estimators = estimators;
    m_estimators_isSet = true;
}

bool OAIRfeDetailsVO::is_estimators_Set() const{
    return m_estimators_isSet;
}

bool OAIRfeDetailsVO::is_estimators_Valid() const{
    return m_estimators_isValid;
}

qint32 OAIRfeDetailsVO::getItemizedTaxAndShipping() const {
    return m_itemized_tax_and_shipping;
}
void OAIRfeDetailsVO::setItemizedTaxAndShipping(const qint32 &itemized_tax_and_shipping) {
    m_itemized_tax_and_shipping = itemized_tax_and_shipping;
    m_itemized_tax_and_shipping_isSet = true;
}

bool OAIRfeDetailsVO::is_itemized_tax_and_shipping_Set() const{
    return m_itemized_tax_and_shipping_isSet;
}

bool OAIRfeDetailsVO::is_itemized_tax_and_shipping_Valid() const{
    return m_itemized_tax_and_shipping_isValid;
}

QDate OAIRfeDetailsVO::getProposedOrderCompletionDate() const {
    return m_proposed_order_completion_date;
}
void OAIRfeDetailsVO::setProposedOrderCompletionDate(const QDate &proposed_order_completion_date) {
    m_proposed_order_completion_date = proposed_order_completion_date;
    m_proposed_order_completion_date_isSet = true;
}

bool OAIRfeDetailsVO::is_proposed_order_completion_date_Set() const{
    return m_proposed_order_completion_date_isSet;
}

bool OAIRfeDetailsVO::is_proposed_order_completion_date_Valid() const{
    return m_proposed_order_completion_date_isValid;
}

QString OAIRfeDetailsVO::getReferenceNumber() const {
    return m_reference_number;
}
void OAIRfeDetailsVO::setReferenceNumber(const QString &reference_number) {
    m_reference_number = reference_number;
    m_reference_number_isSet = true;
}

bool OAIRfeDetailsVO::is_reference_number_Set() const{
    return m_reference_number_isSet;
}

bool OAIRfeDetailsVO::is_reference_number_Valid() const{
    return m_reference_number_isValid;
}

QString OAIRfeDetailsVO::getRequestor() const {
    return m_requestor;
}
void OAIRfeDetailsVO::setRequestor(const QString &requestor) {
    m_requestor = requestor;
    m_requestor_isSet = true;
}

bool OAIRfeDetailsVO::is_requestor_Set() const{
    return m_requestor_isSet;
}

bool OAIRfeDetailsVO::is_requestor_Valid() const{
    return m_requestor_isValid;
}

qint64 OAIRfeDetailsVO::getRfeId() const {
    return m_rfe_id;
}
void OAIRfeDetailsVO::setRfeId(const qint64 &rfe_id) {
    m_rfe_id = rfe_id;
    m_rfe_id_isSet = true;
}

bool OAIRfeDetailsVO::is_rfe_id_Set() const{
    return m_rfe_id_isSet;
}

bool OAIRfeDetailsVO::is_rfe_id_Valid() const{
    return m_rfe_id_isValid;
}

QList<OAIRfeItemSimpleEXTVO> OAIRfeDetailsVO::getRfeItems() const {
    return m_rfe_items;
}
void OAIRfeDetailsVO::setRfeItems(const QList<OAIRfeItemSimpleEXTVO> &rfe_items) {
    m_rfe_items = rfe_items;
    m_rfe_items_isSet = true;
}

bool OAIRfeDetailsVO::is_rfe_items_Set() const{
    return m_rfe_items_isSet;
}

bool OAIRfeDetailsVO::is_rfe_items_Valid() const{
    return m_rfe_items_isValid;
}

QString OAIRfeDetailsVO::getStatus() const {
    return m_status;
}
void OAIRfeDetailsVO::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIRfeDetailsVO::is_status_Set() const{
    return m_status_isSet;
}

bool OAIRfeDetailsVO::is_status_Valid() const{
    return m_status_isValid;
}

QDate OAIRfeDetailsVO::getSubmittedDate() const {
    return m_submitted_date;
}
void OAIRfeDetailsVO::setSubmittedDate(const QDate &submitted_date) {
    m_submitted_date = submitted_date;
    m_submitted_date_isSet = true;
}

bool OAIRfeDetailsVO::is_submitted_date_Set() const{
    return m_submitted_date_isSet;
}

bool OAIRfeDetailsVO::is_submitted_date_Valid() const{
    return m_submitted_date_isValid;
}

QList<OAIRfeSuEstimateSimpleVO> OAIRfeDetailsVO::getSupplierEstimates() const {
    return m_supplier_estimates;
}
void OAIRfeDetailsVO::setSupplierEstimates(const QList<OAIRfeSuEstimateSimpleVO> &supplier_estimates) {
    m_supplier_estimates = supplier_estimates;
    m_supplier_estimates_isSet = true;
}

bool OAIRfeDetailsVO::is_supplier_estimates_Set() const{
    return m_supplier_estimates_isSet;
}

bool OAIRfeDetailsVO::is_supplier_estimates_Valid() const{
    return m_supplier_estimates_isValid;
}

QString OAIRfeDetailsVO::getTitle() const {
    return m_title;
}
void OAIRfeDetailsVO::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIRfeDetailsVO::is_title_Set() const{
    return m_title_isSet;
}

bool OAIRfeDetailsVO::is_title_Valid() const{
    return m_title_isValid;
}

bool OAIRfeDetailsVO::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_details_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_estimate_due_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_estimators.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_itemized_tax_and_shipping_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_proposed_order_completion_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reference_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_requestor_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rfe_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rfe_items.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_submitted_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_supplier_estimates.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRfeDetailsVO::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
