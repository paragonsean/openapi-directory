/**
 * Noosh API application
 * Full description of Noosh API
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIOrderApi_H
#define OAI_OAIOrderApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIHTTPStatusVO.h"
#include "OAIOrderDetailVO.h"
#include "OAIOrderDetailWithIndicatorVO.h"
#include "OAIOrderExpandWorkgroupLevelVO.h"
#include "OAIOrderListVO.h"
#include "OAIOrderPO.h"
#include "OAIOrderUpdPersistVO.h"
#include "OAIOrderVO.h"
#include "OAIOrderWorkgroupLevelListVO.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIOrderApi : public QObject {
    Q_OBJECT

public:
    OAIOrderApi(const int timeOut = 0);
    ~OAIOrderApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  workgroup_id QString [required]
    * @param[in]  project_id QString [required]
    * @param[in]  order_id QString [required]
    */
    virtual void getBuyOrder(const QString &workgroup_id, const QString &project_id, const QString &order_id);

    /**
    * @param[in]  workgroup_id QString [required]
    * @param[in]  project_id QString [required]
    */
    virtual void getBuyOrderList(const QString &workgroup_id, const QString &project_id);

    /**
    * @param[in]  workgroup_id QString [required]
    */
    virtual void getBuyOrderListOfWorkgroup(const QString &workgroup_id);

    /**
    * @param[in]  workgroup_id QString [required]
    * @param[in]  order_id QString [required]
    */
    virtual void getBuyOrderOfWorkgroup(const QString &workgroup_id, const QString &order_id);

    /**
    * @param[in]  workgroup_id QString [required]
    * @param[in]  project_id QString [required]
    * @param[in]  order_id QString [required]
    */
    virtual void getOrder(const QString &workgroup_id, const QString &project_id, const QString &order_id);

    /**
    * @param[in]  workgroup_id QString [required]
    * @param[in]  project_id QString [required]
    * @param[in]  order_id QString [required]
    */
    virtual void getSellOrder(const QString &workgroup_id, const QString &project_id, const QString &order_id);

    /**
    * @param[in]  workgroup_id QString [required]
    * @param[in]  project_id QString [required]
    */
    virtual void getSellOrderList(const QString &workgroup_id, const QString &project_id);

    /**
    * @param[in]  workgroup_id QString [required]
    */
    virtual void getSellOrderListOfWorkgroup(const QString &workgroup_id);

    /**
    * @param[in]  workgroup_id QString [required]
    * @param[in]  order_id QString [required]
    */
    virtual void getSellOrderOfWorkgroup(const QString &workgroup_id, const QString &order_id);

    /**
    * @param[in]  workgroup_id QString [required]
    * @param[in]  project_id QString [required]
    * @param[in]  oai_order_po OAIOrderPO [optional]
    */
    virtual void postBuyOrder(const QString &workgroup_id, const QString &project_id, const ::OpenAPI::OptionalParam<OAIOrderPO> &oai_order_po = ::OpenAPI::OptionalParam<OAIOrderPO>());

    /**
    * @param[in]  workgroup_id QString [required]
    * @param[in]  project_id QString [required]
    * @param[in]  order_id QString [required]
    * @param[in]  oai_order_upd_persist_vo OAIOrderUpdPersistVO [optional]
    */
    virtual void putBuyOrder(const QString &workgroup_id, const QString &project_id, const QString &order_id, const ::OpenAPI::OptionalParam<OAIOrderUpdPersistVO> &oai_order_upd_persist_vo = ::OpenAPI::OptionalParam<OAIOrderUpdPersistVO>());

    /**
    * @param[in]  workgroup_id QString [required]
    * @param[in]  project_id QString [required]
    * @param[in]  order_id QString [required]
    * @param[in]  oai_order_upd_persist_vo OAIOrderUpdPersistVO [optional]
    */
    virtual void putSellOrder(const QString &workgroup_id, const QString &project_id, const QString &order_id, const ::OpenAPI::OptionalParam<OAIOrderUpdPersistVO> &oai_order_upd_persist_vo = ::OpenAPI::OptionalParam<OAIOrderUpdPersistVO>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void getBuyOrderCallback(OAIHttpRequestWorker *worker);
    void getBuyOrderListCallback(OAIHttpRequestWorker *worker);
    void getBuyOrderListOfWorkgroupCallback(OAIHttpRequestWorker *worker);
    void getBuyOrderOfWorkgroupCallback(OAIHttpRequestWorker *worker);
    void getOrderCallback(OAIHttpRequestWorker *worker);
    void getSellOrderCallback(OAIHttpRequestWorker *worker);
    void getSellOrderListCallback(OAIHttpRequestWorker *worker);
    void getSellOrderListOfWorkgroupCallback(OAIHttpRequestWorker *worker);
    void getSellOrderOfWorkgroupCallback(OAIHttpRequestWorker *worker);
    void postBuyOrderCallback(OAIHttpRequestWorker *worker);
    void putBuyOrderCallback(OAIHttpRequestWorker *worker);
    void putSellOrderCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void getBuyOrderSignal(OAIOrderDetailVO summary);
    void getBuyOrderListSignal(OAIOrderListVO summary);
    void getBuyOrderListOfWorkgroupSignal(OAIOrderWorkgroupLevelListVO summary);
    void getBuyOrderOfWorkgroupSignal(OAIOrderExpandWorkgroupLevelVO summary);
    void getOrderSignal(OAIOrderDetailWithIndicatorVO summary);
    void getSellOrderSignal(OAIOrderDetailVO summary);
    void getSellOrderListSignal(OAIOrderListVO summary);
    void getSellOrderListOfWorkgroupSignal(OAIOrderWorkgroupLevelListVO summary);
    void getSellOrderOfWorkgroupSignal(OAIOrderExpandWorkgroupLevelVO summary);
    void postBuyOrderSignal(OAIOrderPO summary);
    void putBuyOrderSignal(OAIOrderVO summary);
    void putSellOrderSignal(OAIOrderVO summary);


    void getBuyOrderSignalFull(OAIHttpRequestWorker *worker, OAIOrderDetailVO summary);
    void getBuyOrderListSignalFull(OAIHttpRequestWorker *worker, OAIOrderListVO summary);
    void getBuyOrderListOfWorkgroupSignalFull(OAIHttpRequestWorker *worker, OAIOrderWorkgroupLevelListVO summary);
    void getBuyOrderOfWorkgroupSignalFull(OAIHttpRequestWorker *worker, OAIOrderExpandWorkgroupLevelVO summary);
    void getOrderSignalFull(OAIHttpRequestWorker *worker, OAIOrderDetailWithIndicatorVO summary);
    void getSellOrderSignalFull(OAIHttpRequestWorker *worker, OAIOrderDetailVO summary);
    void getSellOrderListSignalFull(OAIHttpRequestWorker *worker, OAIOrderListVO summary);
    void getSellOrderListOfWorkgroupSignalFull(OAIHttpRequestWorker *worker, OAIOrderWorkgroupLevelListVO summary);
    void getSellOrderOfWorkgroupSignalFull(OAIHttpRequestWorker *worker, OAIOrderExpandWorkgroupLevelVO summary);
    void postBuyOrderSignalFull(OAIHttpRequestWorker *worker, OAIOrderPO summary);
    void putBuyOrderSignalFull(OAIHttpRequestWorker *worker, OAIOrderVO summary);
    void putSellOrderSignalFull(OAIHttpRequestWorker *worker, OAIOrderVO summary);

    Q_DECL_DEPRECATED_X("Use getBuyOrderSignalError() instead")
    void getBuyOrderSignalE(OAIOrderDetailVO summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getBuyOrderSignalError(OAIOrderDetailVO summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getBuyOrderListSignalError() instead")
    void getBuyOrderListSignalE(OAIOrderListVO summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getBuyOrderListSignalError(OAIOrderListVO summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getBuyOrderListOfWorkgroupSignalError() instead")
    void getBuyOrderListOfWorkgroupSignalE(OAIOrderWorkgroupLevelListVO summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getBuyOrderListOfWorkgroupSignalError(OAIOrderWorkgroupLevelListVO summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getBuyOrderOfWorkgroupSignalError() instead")
    void getBuyOrderOfWorkgroupSignalE(OAIOrderExpandWorkgroupLevelVO summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getBuyOrderOfWorkgroupSignalError(OAIOrderExpandWorkgroupLevelVO summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrderSignalError() instead")
    void getOrderSignalE(OAIOrderDetailWithIndicatorVO summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrderSignalError(OAIOrderDetailWithIndicatorVO summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSellOrderSignalError() instead")
    void getSellOrderSignalE(OAIOrderDetailVO summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSellOrderSignalError(OAIOrderDetailVO summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSellOrderListSignalError() instead")
    void getSellOrderListSignalE(OAIOrderListVO summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSellOrderListSignalError(OAIOrderListVO summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSellOrderListOfWorkgroupSignalError() instead")
    void getSellOrderListOfWorkgroupSignalE(OAIOrderWorkgroupLevelListVO summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSellOrderListOfWorkgroupSignalError(OAIOrderWorkgroupLevelListVO summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSellOrderOfWorkgroupSignalError() instead")
    void getSellOrderOfWorkgroupSignalE(OAIOrderExpandWorkgroupLevelVO summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSellOrderOfWorkgroupSignalError(OAIOrderExpandWorkgroupLevelVO summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postBuyOrderSignalError() instead")
    void postBuyOrderSignalE(OAIOrderPO summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postBuyOrderSignalError(OAIOrderPO summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putBuyOrderSignalError() instead")
    void putBuyOrderSignalE(OAIOrderVO summary, QNetworkReply::NetworkError error_type, QString error_str);
    void putBuyOrderSignalError(OAIOrderVO summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putSellOrderSignalError() instead")
    void putSellOrderSignalE(OAIOrderVO summary, QNetworkReply::NetworkError error_type, QString error_str);
    void putSellOrderSignalError(OAIOrderVO summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use getBuyOrderSignalErrorFull() instead")
    void getBuyOrderSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getBuyOrderSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getBuyOrderListSignalErrorFull() instead")
    void getBuyOrderListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getBuyOrderListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getBuyOrderListOfWorkgroupSignalErrorFull() instead")
    void getBuyOrderListOfWorkgroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getBuyOrderListOfWorkgroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getBuyOrderOfWorkgroupSignalErrorFull() instead")
    void getBuyOrderOfWorkgroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getBuyOrderOfWorkgroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrderSignalErrorFull() instead")
    void getOrderSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrderSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSellOrderSignalErrorFull() instead")
    void getSellOrderSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSellOrderSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSellOrderListSignalErrorFull() instead")
    void getSellOrderListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSellOrderListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSellOrderListOfWorkgroupSignalErrorFull() instead")
    void getSellOrderListOfWorkgroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSellOrderListOfWorkgroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSellOrderOfWorkgroupSignalErrorFull() instead")
    void getSellOrderOfWorkgroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSellOrderOfWorkgroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postBuyOrderSignalErrorFull() instead")
    void postBuyOrderSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postBuyOrderSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putBuyOrderSignalErrorFull() instead")
    void putBuyOrderSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void putBuyOrderSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putSellOrderSignalErrorFull() instead")
    void putSellOrderSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void putSellOrderSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
