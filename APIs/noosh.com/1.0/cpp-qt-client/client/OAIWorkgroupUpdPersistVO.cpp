/**
 * Noosh API application
 * Full description of Noosh API
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWorkgroupUpdPersistVO.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWorkgroupUpdPersistVO::OAIWorkgroupUpdPersistVO(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWorkgroupUpdPersistVO::OAIWorkgroupUpdPersistVO() {
    this->initializeModel();
}

OAIWorkgroupUpdPersistVO::~OAIWorkgroupUpdPersistVO() {}

void OAIWorkgroupUpdPersistVO::initializeModel() {

    m_address_line1_isSet = false;
    m_address_line1_isValid = false;

    m_address_line2_isSet = false;
    m_address_line2_isValid = false;

    m_address_line3_isSet = false;
    m_address_line3_isValid = false;

    m_city_isSet = false;
    m_city_isValid = false;

    m_country_isSet = false;
    m_country_isValid = false;

    m_custom_fields_isSet = false;
    m_custom_fields_isValid = false;

    m_decimal_places_isSet = false;
    m_decimal_places_isValid = false;

    m_postal_isSet = false;
    m_postal_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_workgroup_name_isSet = false;
    m_workgroup_name_isValid = false;
}

void OAIWorkgroupUpdPersistVO::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWorkgroupUpdPersistVO::fromJsonObject(QJsonObject json) {

    m_address_line1_isValid = ::OpenAPI::fromJsonValue(m_address_line1, json[QString("address_line1")]);
    m_address_line1_isSet = !json[QString("address_line1")].isNull() && m_address_line1_isValid;

    m_address_line2_isValid = ::OpenAPI::fromJsonValue(m_address_line2, json[QString("address_line2")]);
    m_address_line2_isSet = !json[QString("address_line2")].isNull() && m_address_line2_isValid;

    m_address_line3_isValid = ::OpenAPI::fromJsonValue(m_address_line3, json[QString("address_line3")]);
    m_address_line3_isSet = !json[QString("address_line3")].isNull() && m_address_line3_isValid;

    m_city_isValid = ::OpenAPI::fromJsonValue(m_city, json[QString("city")]);
    m_city_isSet = !json[QString("city")].isNull() && m_city_isValid;

    m_country_isValid = ::OpenAPI::fromJsonValue(m_country, json[QString("country")]);
    m_country_isSet = !json[QString("country")].isNull() && m_country_isValid;

    m_custom_fields_isValid = ::OpenAPI::fromJsonValue(m_custom_fields, json[QString("custom_fields")]);
    m_custom_fields_isSet = !json[QString("custom_fields")].isNull() && m_custom_fields_isValid;

    m_decimal_places_isValid = ::OpenAPI::fromJsonValue(m_decimal_places, json[QString("decimal_places")]);
    m_decimal_places_isSet = !json[QString("decimal_places")].isNull() && m_decimal_places_isValid;

    m_postal_isValid = ::OpenAPI::fromJsonValue(m_postal, json[QString("postal")]);
    m_postal_isSet = !json[QString("postal")].isNull() && m_postal_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_workgroup_name_isValid = ::OpenAPI::fromJsonValue(m_workgroup_name, json[QString("workgroup_name")]);
    m_workgroup_name_isSet = !json[QString("workgroup_name")].isNull() && m_workgroup_name_isValid;
}

QString OAIWorkgroupUpdPersistVO::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWorkgroupUpdPersistVO::asJsonObject() const {
    QJsonObject obj;
    if (m_address_line1_isSet) {
        obj.insert(QString("address_line1"), ::OpenAPI::toJsonValue(m_address_line1));
    }
    if (m_address_line2_isSet) {
        obj.insert(QString("address_line2"), ::OpenAPI::toJsonValue(m_address_line2));
    }
    if (m_address_line3_isSet) {
        obj.insert(QString("address_line3"), ::OpenAPI::toJsonValue(m_address_line3));
    }
    if (m_city_isSet) {
        obj.insert(QString("city"), ::OpenAPI::toJsonValue(m_city));
    }
    if (m_country_isSet) {
        obj.insert(QString("country"), ::OpenAPI::toJsonValue(m_country));
    }
    if (m_custom_fields.size() > 0) {
        obj.insert(QString("custom_fields"), ::OpenAPI::toJsonValue(m_custom_fields));
    }
    if (m_decimal_places_isSet) {
        obj.insert(QString("decimal_places"), ::OpenAPI::toJsonValue(m_decimal_places));
    }
    if (m_postal_isSet) {
        obj.insert(QString("postal"), ::OpenAPI::toJsonValue(m_postal));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_workgroup_name_isSet) {
        obj.insert(QString("workgroup_name"), ::OpenAPI::toJsonValue(m_workgroup_name));
    }
    return obj;
}

QString OAIWorkgroupUpdPersistVO::getAddressLine1() const {
    return m_address_line1;
}
void OAIWorkgroupUpdPersistVO::setAddressLine1(const QString &address_line1) {
    m_address_line1 = address_line1;
    m_address_line1_isSet = true;
}

bool OAIWorkgroupUpdPersistVO::is_address_line1_Set() const{
    return m_address_line1_isSet;
}

bool OAIWorkgroupUpdPersistVO::is_address_line1_Valid() const{
    return m_address_line1_isValid;
}

QString OAIWorkgroupUpdPersistVO::getAddressLine2() const {
    return m_address_line2;
}
void OAIWorkgroupUpdPersistVO::setAddressLine2(const QString &address_line2) {
    m_address_line2 = address_line2;
    m_address_line2_isSet = true;
}

bool OAIWorkgroupUpdPersistVO::is_address_line2_Set() const{
    return m_address_line2_isSet;
}

bool OAIWorkgroupUpdPersistVO::is_address_line2_Valid() const{
    return m_address_line2_isValid;
}

QString OAIWorkgroupUpdPersistVO::getAddressLine3() const {
    return m_address_line3;
}
void OAIWorkgroupUpdPersistVO::setAddressLine3(const QString &address_line3) {
    m_address_line3 = address_line3;
    m_address_line3_isSet = true;
}

bool OAIWorkgroupUpdPersistVO::is_address_line3_Set() const{
    return m_address_line3_isSet;
}

bool OAIWorkgroupUpdPersistVO::is_address_line3_Valid() const{
    return m_address_line3_isValid;
}

QString OAIWorkgroupUpdPersistVO::getCity() const {
    return m_city;
}
void OAIWorkgroupUpdPersistVO::setCity(const QString &city) {
    m_city = city;
    m_city_isSet = true;
}

bool OAIWorkgroupUpdPersistVO::is_city_Set() const{
    return m_city_isSet;
}

bool OAIWorkgroupUpdPersistVO::is_city_Valid() const{
    return m_city_isValid;
}

QString OAIWorkgroupUpdPersistVO::getCountry() const {
    return m_country;
}
void OAIWorkgroupUpdPersistVO::setCountry(const QString &country) {
    m_country = country;
    m_country_isSet = true;
}

bool OAIWorkgroupUpdPersistVO::is_country_Set() const{
    return m_country_isSet;
}

bool OAIWorkgroupUpdPersistVO::is_country_Valid() const{
    return m_country_isValid;
}

QList<OAICustomFieldPersistVO> OAIWorkgroupUpdPersistVO::getCustomFields() const {
    return m_custom_fields;
}
void OAIWorkgroupUpdPersistVO::setCustomFields(const QList<OAICustomFieldPersistVO> &custom_fields) {
    m_custom_fields = custom_fields;
    m_custom_fields_isSet = true;
}

bool OAIWorkgroupUpdPersistVO::is_custom_fields_Set() const{
    return m_custom_fields_isSet;
}

bool OAIWorkgroupUpdPersistVO::is_custom_fields_Valid() const{
    return m_custom_fields_isValid;
}

qint64 OAIWorkgroupUpdPersistVO::getDecimalPlaces() const {
    return m_decimal_places;
}
void OAIWorkgroupUpdPersistVO::setDecimalPlaces(const qint64 &decimal_places) {
    m_decimal_places = decimal_places;
    m_decimal_places_isSet = true;
}

bool OAIWorkgroupUpdPersistVO::is_decimal_places_Set() const{
    return m_decimal_places_isSet;
}

bool OAIWorkgroupUpdPersistVO::is_decimal_places_Valid() const{
    return m_decimal_places_isValid;
}

QString OAIWorkgroupUpdPersistVO::getPostal() const {
    return m_postal;
}
void OAIWorkgroupUpdPersistVO::setPostal(const QString &postal) {
    m_postal = postal;
    m_postal_isSet = true;
}

bool OAIWorkgroupUpdPersistVO::is_postal_Set() const{
    return m_postal_isSet;
}

bool OAIWorkgroupUpdPersistVO::is_postal_Valid() const{
    return m_postal_isValid;
}

QString OAIWorkgroupUpdPersistVO::getState() const {
    return m_state;
}
void OAIWorkgroupUpdPersistVO::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIWorkgroupUpdPersistVO::is_state_Set() const{
    return m_state_isSet;
}

bool OAIWorkgroupUpdPersistVO::is_state_Valid() const{
    return m_state_isValid;
}

QString OAIWorkgroupUpdPersistVO::getWorkgroupName() const {
    return m_workgroup_name;
}
void OAIWorkgroupUpdPersistVO::setWorkgroupName(const QString &workgroup_name) {
    m_workgroup_name = workgroup_name;
    m_workgroup_name_isSet = true;
}

bool OAIWorkgroupUpdPersistVO::is_workgroup_name_Set() const{
    return m_workgroup_name_isSet;
}

bool OAIWorkgroupUpdPersistVO::is_workgroup_name_Valid() const{
    return m_workgroup_name_isValid;
}

bool OAIWorkgroupUpdPersistVO::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_address_line1_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_address_line2_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_address_line3_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_city_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_fields.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_decimal_places_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_postal_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_workgroup_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWorkgroupUpdPersistVO::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
