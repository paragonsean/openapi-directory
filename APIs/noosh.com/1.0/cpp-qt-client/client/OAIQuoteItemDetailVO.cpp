/**
 * Noosh API application
 * Full description of Noosh API
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIQuoteItemDetailVO.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIQuoteItemDetailVO::OAIQuoteItemDetailVO(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIQuoteItemDetailVO::OAIQuoteItemDetailVO() {
    this->initializeModel();
}

OAIQuoteItemDetailVO::~OAIQuoteItemDetailVO() {}

void OAIQuoteItemDetailVO::initializeModel() {

    m_chosen_quantity_isSet = false;
    m_chosen_quantity_isValid = false;

    m_comments_isSet = false;
    m_comments_isValid = false;

    m_completion_date_isSet = false;
    m_completion_date_isValid = false;

    m_custom_fields_isSet = false;
    m_custom_fields_isValid = false;

    m_item_id_isSet = false;
    m_item_id_isValid = false;

    m_item_prices_isSet = false;
    m_item_prices_isValid = false;

    m_item_shipping_total_isSet = false;
    m_item_shipping_total_isValid = false;

    m_item_tax_total_isSet = false;
    m_item_tax_total_isValid = false;

    m_item_total_isSet = false;
    m_item_total_isValid = false;

    m_reason_for_quote_selection_isSet = false;
    m_reason_for_quote_selection_isValid = false;

    m_show_cost_prices_and_markup_isSet = false;
    m_show_cost_prices_and_markup_isValid = false;

    m_spec_isSet = false;
    m_spec_isValid = false;

    m_transactional_item_shipping_total_isSet = false;
    m_transactional_item_shipping_total_isValid = false;

    m_transactional_item_tax_total_isSet = false;
    m_transactional_item_tax_total_isValid = false;

    m_transactional_item_total_isSet = false;
    m_transactional_item_total_isValid = false;

    m_vat_code_isSet = false;
    m_vat_code_isValid = false;

    m_vat_rate_isSet = false;
    m_vat_rate_isValid = false;
}

void OAIQuoteItemDetailVO::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIQuoteItemDetailVO::fromJsonObject(QJsonObject json) {

    m_chosen_quantity_isValid = ::OpenAPI::fromJsonValue(m_chosen_quantity, json[QString("chosen_quantity")]);
    m_chosen_quantity_isSet = !json[QString("chosen_quantity")].isNull() && m_chosen_quantity_isValid;

    m_comments_isValid = ::OpenAPI::fromJsonValue(m_comments, json[QString("comments")]);
    m_comments_isSet = !json[QString("comments")].isNull() && m_comments_isValid;

    m_completion_date_isValid = ::OpenAPI::fromJsonValue(m_completion_date, json[QString("completion_date")]);
    m_completion_date_isSet = !json[QString("completion_date")].isNull() && m_completion_date_isValid;

    m_custom_fields_isValid = ::OpenAPI::fromJsonValue(m_custom_fields, json[QString("custom_fields")]);
    m_custom_fields_isSet = !json[QString("custom_fields")].isNull() && m_custom_fields_isValid;

    m_item_id_isValid = ::OpenAPI::fromJsonValue(m_item_id, json[QString("item_id")]);
    m_item_id_isSet = !json[QString("item_id")].isNull() && m_item_id_isValid;

    m_item_prices_isValid = ::OpenAPI::fromJsonValue(m_item_prices, json[QString("item_prices")]);
    m_item_prices_isSet = !json[QString("item_prices")].isNull() && m_item_prices_isValid;

    m_item_shipping_total_isValid = ::OpenAPI::fromJsonValue(m_item_shipping_total, json[QString("item_shipping_total")]);
    m_item_shipping_total_isSet = !json[QString("item_shipping_total")].isNull() && m_item_shipping_total_isValid;

    m_item_tax_total_isValid = ::OpenAPI::fromJsonValue(m_item_tax_total, json[QString("item_tax_total")]);
    m_item_tax_total_isSet = !json[QString("item_tax_total")].isNull() && m_item_tax_total_isValid;

    m_item_total_isValid = ::OpenAPI::fromJsonValue(m_item_total, json[QString("item_total")]);
    m_item_total_isSet = !json[QString("item_total")].isNull() && m_item_total_isValid;

    m_reason_for_quote_selection_isValid = ::OpenAPI::fromJsonValue(m_reason_for_quote_selection, json[QString("reason_for_quote_selection")]);
    m_reason_for_quote_selection_isSet = !json[QString("reason_for_quote_selection")].isNull() && m_reason_for_quote_selection_isValid;

    m_show_cost_prices_and_markup_isValid = ::OpenAPI::fromJsonValue(m_show_cost_prices_and_markup, json[QString("show_cost_prices_and_markup")]);
    m_show_cost_prices_and_markup_isSet = !json[QString("show_cost_prices_and_markup")].isNull() && m_show_cost_prices_and_markup_isValid;

    m_spec_isValid = ::OpenAPI::fromJsonValue(m_spec, json[QString("spec")]);
    m_spec_isSet = !json[QString("spec")].isNull() && m_spec_isValid;

    m_transactional_item_shipping_total_isValid = ::OpenAPI::fromJsonValue(m_transactional_item_shipping_total, json[QString("transactional_item_shipping_total")]);
    m_transactional_item_shipping_total_isSet = !json[QString("transactional_item_shipping_total")].isNull() && m_transactional_item_shipping_total_isValid;

    m_transactional_item_tax_total_isValid = ::OpenAPI::fromJsonValue(m_transactional_item_tax_total, json[QString("transactional_item_tax_total")]);
    m_transactional_item_tax_total_isSet = !json[QString("transactional_item_tax_total")].isNull() && m_transactional_item_tax_total_isValid;

    m_transactional_item_total_isValid = ::OpenAPI::fromJsonValue(m_transactional_item_total, json[QString("transactional_item_total")]);
    m_transactional_item_total_isSet = !json[QString("transactional_item_total")].isNull() && m_transactional_item_total_isValid;

    m_vat_code_isValid = ::OpenAPI::fromJsonValue(m_vat_code, json[QString("vat_code")]);
    m_vat_code_isSet = !json[QString("vat_code")].isNull() && m_vat_code_isValid;

    m_vat_rate_isValid = ::OpenAPI::fromJsonValue(m_vat_rate, json[QString("vat_rate")]);
    m_vat_rate_isSet = !json[QString("vat_rate")].isNull() && m_vat_rate_isValid;
}

QString OAIQuoteItemDetailVO::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIQuoteItemDetailVO::asJsonObject() const {
    QJsonObject obj;
    if (m_chosen_quantity_isSet) {
        obj.insert(QString("chosen_quantity"), ::OpenAPI::toJsonValue(m_chosen_quantity));
    }
    if (m_comments_isSet) {
        obj.insert(QString("comments"), ::OpenAPI::toJsonValue(m_comments));
    }
    if (m_completion_date_isSet) {
        obj.insert(QString("completion_date"), ::OpenAPI::toJsonValue(m_completion_date));
    }
    if (m_custom_fields.size() > 0) {
        obj.insert(QString("custom_fields"), ::OpenAPI::toJsonValue(m_custom_fields));
    }
    if (m_item_id_isSet) {
        obj.insert(QString("item_id"), ::OpenAPI::toJsonValue(m_item_id));
    }
    if (m_item_prices.size() > 0) {
        obj.insert(QString("item_prices"), ::OpenAPI::toJsonValue(m_item_prices));
    }
    if (m_item_shipping_total_isSet) {
        obj.insert(QString("item_shipping_total"), ::OpenAPI::toJsonValue(m_item_shipping_total));
    }
    if (m_item_tax_total_isSet) {
        obj.insert(QString("item_tax_total"), ::OpenAPI::toJsonValue(m_item_tax_total));
    }
    if (m_item_total_isSet) {
        obj.insert(QString("item_total"), ::OpenAPI::toJsonValue(m_item_total));
    }
    if (m_reason_for_quote_selection_isSet) {
        obj.insert(QString("reason_for_quote_selection"), ::OpenAPI::toJsonValue(m_reason_for_quote_selection));
    }
    if (m_show_cost_prices_and_markup_isSet) {
        obj.insert(QString("show_cost_prices_and_markup"), ::OpenAPI::toJsonValue(m_show_cost_prices_and_markup));
    }
    if (m_spec.isSet()) {
        obj.insert(QString("spec"), ::OpenAPI::toJsonValue(m_spec));
    }
    if (m_transactional_item_shipping_total_isSet) {
        obj.insert(QString("transactional_item_shipping_total"), ::OpenAPI::toJsonValue(m_transactional_item_shipping_total));
    }
    if (m_transactional_item_tax_total_isSet) {
        obj.insert(QString("transactional_item_tax_total"), ::OpenAPI::toJsonValue(m_transactional_item_tax_total));
    }
    if (m_transactional_item_total_isSet) {
        obj.insert(QString("transactional_item_total"), ::OpenAPI::toJsonValue(m_transactional_item_total));
    }
    if (m_vat_code_isSet) {
        obj.insert(QString("vat_code"), ::OpenAPI::toJsonValue(m_vat_code));
    }
    if (m_vat_rate_isSet) {
        obj.insert(QString("vat_rate"), ::OpenAPI::toJsonValue(m_vat_rate));
    }
    return obj;
}

QJsonValue OAIQuoteItemDetailVO::getChosenQuantity() const {
    return m_chosen_quantity;
}
void OAIQuoteItemDetailVO::setChosenQuantity(const QJsonValue &chosen_quantity) {
    m_chosen_quantity = chosen_quantity;
    m_chosen_quantity_isSet = true;
}

bool OAIQuoteItemDetailVO::is_chosen_quantity_Set() const{
    return m_chosen_quantity_isSet;
}

bool OAIQuoteItemDetailVO::is_chosen_quantity_Valid() const{
    return m_chosen_quantity_isValid;
}

QString OAIQuoteItemDetailVO::getComments() const {
    return m_comments;
}
void OAIQuoteItemDetailVO::setComments(const QString &comments) {
    m_comments = comments;
    m_comments_isSet = true;
}

bool OAIQuoteItemDetailVO::is_comments_Set() const{
    return m_comments_isSet;
}

bool OAIQuoteItemDetailVO::is_comments_Valid() const{
    return m_comments_isValid;
}

QDate OAIQuoteItemDetailVO::getCompletionDate() const {
    return m_completion_date;
}
void OAIQuoteItemDetailVO::setCompletionDate(const QDate &completion_date) {
    m_completion_date = completion_date;
    m_completion_date_isSet = true;
}

bool OAIQuoteItemDetailVO::is_completion_date_Set() const{
    return m_completion_date_isSet;
}

bool OAIQuoteItemDetailVO::is_completion_date_Valid() const{
    return m_completion_date_isValid;
}

QList<OAIPropertyPaAndAttVO> OAIQuoteItemDetailVO::getCustomFields() const {
    return m_custom_fields;
}
void OAIQuoteItemDetailVO::setCustomFields(const QList<OAIPropertyPaAndAttVO> &custom_fields) {
    m_custom_fields = custom_fields;
    m_custom_fields_isSet = true;
}

bool OAIQuoteItemDetailVO::is_custom_fields_Set() const{
    return m_custom_fields_isSet;
}

bool OAIQuoteItemDetailVO::is_custom_fields_Valid() const{
    return m_custom_fields_isValid;
}

qint64 OAIQuoteItemDetailVO::getItemId() const {
    return m_item_id;
}
void OAIQuoteItemDetailVO::setItemId(const qint64 &item_id) {
    m_item_id = item_id;
    m_item_id_isSet = true;
}

bool OAIQuoteItemDetailVO::is_item_id_Set() const{
    return m_item_id_isSet;
}

bool OAIQuoteItemDetailVO::is_item_id_Valid() const{
    return m_item_id_isValid;
}

QList<OAIQuotePriceDetailVO> OAIQuoteItemDetailVO::getItemPrices() const {
    return m_item_prices;
}
void OAIQuoteItemDetailVO::setItemPrices(const QList<OAIQuotePriceDetailVO> &item_prices) {
    m_item_prices = item_prices;
    m_item_prices_isSet = true;
}

bool OAIQuoteItemDetailVO::is_item_prices_Set() const{
    return m_item_prices_isSet;
}

bool OAIQuoteItemDetailVO::is_item_prices_Valid() const{
    return m_item_prices_isValid;
}

QJsonValue OAIQuoteItemDetailVO::getItemShippingTotal() const {
    return m_item_shipping_total;
}
void OAIQuoteItemDetailVO::setItemShippingTotal(const QJsonValue &item_shipping_total) {
    m_item_shipping_total = item_shipping_total;
    m_item_shipping_total_isSet = true;
}

bool OAIQuoteItemDetailVO::is_item_shipping_total_Set() const{
    return m_item_shipping_total_isSet;
}

bool OAIQuoteItemDetailVO::is_item_shipping_total_Valid() const{
    return m_item_shipping_total_isValid;
}

QJsonValue OAIQuoteItemDetailVO::getItemTaxTotal() const {
    return m_item_tax_total;
}
void OAIQuoteItemDetailVO::setItemTaxTotal(const QJsonValue &item_tax_total) {
    m_item_tax_total = item_tax_total;
    m_item_tax_total_isSet = true;
}

bool OAIQuoteItemDetailVO::is_item_tax_total_Set() const{
    return m_item_tax_total_isSet;
}

bool OAIQuoteItemDetailVO::is_item_tax_total_Valid() const{
    return m_item_tax_total_isValid;
}

QJsonValue OAIQuoteItemDetailVO::getItemTotal() const {
    return m_item_total;
}
void OAIQuoteItemDetailVO::setItemTotal(const QJsonValue &item_total) {
    m_item_total = item_total;
    m_item_total_isSet = true;
}

bool OAIQuoteItemDetailVO::is_item_total_Set() const{
    return m_item_total_isSet;
}

bool OAIQuoteItemDetailVO::is_item_total_Valid() const{
    return m_item_total_isValid;
}

QString OAIQuoteItemDetailVO::getReasonForQuoteSelection() const {
    return m_reason_for_quote_selection;
}
void OAIQuoteItemDetailVO::setReasonForQuoteSelection(const QString &reason_for_quote_selection) {
    m_reason_for_quote_selection = reason_for_quote_selection;
    m_reason_for_quote_selection_isSet = true;
}

bool OAIQuoteItemDetailVO::is_reason_for_quote_selection_Set() const{
    return m_reason_for_quote_selection_isSet;
}

bool OAIQuoteItemDetailVO::is_reason_for_quote_selection_Valid() const{
    return m_reason_for_quote_selection_isValid;
}

bool OAIQuoteItemDetailVO::isShowCostPricesAndMarkup() const {
    return m_show_cost_prices_and_markup;
}
void OAIQuoteItemDetailVO::setShowCostPricesAndMarkup(const bool &show_cost_prices_and_markup) {
    m_show_cost_prices_and_markup = show_cost_prices_and_markup;
    m_show_cost_prices_and_markup_isSet = true;
}

bool OAIQuoteItemDetailVO::is_show_cost_prices_and_markup_Set() const{
    return m_show_cost_prices_and_markup_isSet;
}

bool OAIQuoteItemDetailVO::is_show_cost_prices_and_markup_Valid() const{
    return m_show_cost_prices_and_markup_isValid;
}

OAISpecBaseVO OAIQuoteItemDetailVO::getSpec() const {
    return m_spec;
}
void OAIQuoteItemDetailVO::setSpec(const OAISpecBaseVO &spec) {
    m_spec = spec;
    m_spec_isSet = true;
}

bool OAIQuoteItemDetailVO::is_spec_Set() const{
    return m_spec_isSet;
}

bool OAIQuoteItemDetailVO::is_spec_Valid() const{
    return m_spec_isValid;
}

QJsonValue OAIQuoteItemDetailVO::getTransactionalItemShippingTotal() const {
    return m_transactional_item_shipping_total;
}
void OAIQuoteItemDetailVO::setTransactionalItemShippingTotal(const QJsonValue &transactional_item_shipping_total) {
    m_transactional_item_shipping_total = transactional_item_shipping_total;
    m_transactional_item_shipping_total_isSet = true;
}

bool OAIQuoteItemDetailVO::is_transactional_item_shipping_total_Set() const{
    return m_transactional_item_shipping_total_isSet;
}

bool OAIQuoteItemDetailVO::is_transactional_item_shipping_total_Valid() const{
    return m_transactional_item_shipping_total_isValid;
}

QJsonValue OAIQuoteItemDetailVO::getTransactionalItemTaxTotal() const {
    return m_transactional_item_tax_total;
}
void OAIQuoteItemDetailVO::setTransactionalItemTaxTotal(const QJsonValue &transactional_item_tax_total) {
    m_transactional_item_tax_total = transactional_item_tax_total;
    m_transactional_item_tax_total_isSet = true;
}

bool OAIQuoteItemDetailVO::is_transactional_item_tax_total_Set() const{
    return m_transactional_item_tax_total_isSet;
}

bool OAIQuoteItemDetailVO::is_transactional_item_tax_total_Valid() const{
    return m_transactional_item_tax_total_isValid;
}

QJsonValue OAIQuoteItemDetailVO::getTransactionalItemTotal() const {
    return m_transactional_item_total;
}
void OAIQuoteItemDetailVO::setTransactionalItemTotal(const QJsonValue &transactional_item_total) {
    m_transactional_item_total = transactional_item_total;
    m_transactional_item_total_isSet = true;
}

bool OAIQuoteItemDetailVO::is_transactional_item_total_Set() const{
    return m_transactional_item_total_isSet;
}

bool OAIQuoteItemDetailVO::is_transactional_item_total_Valid() const{
    return m_transactional_item_total_isValid;
}

QString OAIQuoteItemDetailVO::getVatCode() const {
    return m_vat_code;
}
void OAIQuoteItemDetailVO::setVatCode(const QString &vat_code) {
    m_vat_code = vat_code;
    m_vat_code_isSet = true;
}

bool OAIQuoteItemDetailVO::is_vat_code_Set() const{
    return m_vat_code_isSet;
}

bool OAIQuoteItemDetailVO::is_vat_code_Valid() const{
    return m_vat_code_isValid;
}

QJsonValue OAIQuoteItemDetailVO::getVatRate() const {
    return m_vat_rate;
}
void OAIQuoteItemDetailVO::setVatRate(const QJsonValue &vat_rate) {
    m_vat_rate = vat_rate;
    m_vat_rate_isSet = true;
}

bool OAIQuoteItemDetailVO::is_vat_rate_Set() const{
    return m_vat_rate_isSet;
}

bool OAIQuoteItemDetailVO::is_vat_rate_Valid() const{
    return m_vat_rate_isValid;
}

bool OAIQuoteItemDetailVO::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_chosen_quantity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_comments_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_completion_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_fields.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_item_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_item_prices.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_item_shipping_total_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_item_tax_total_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_item_total_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reason_for_quote_selection_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_show_cost_prices_and_markup_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_spec.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_transactional_item_shipping_total_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transactional_item_tax_total_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transactional_item_total_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vat_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vat_rate_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIQuoteItemDetailVO::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
