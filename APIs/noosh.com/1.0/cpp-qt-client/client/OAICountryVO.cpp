/**
 * Noosh API application
 * Full description of Noosh API
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICountryVO.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICountryVO::OAICountryVO(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICountryVO::OAICountryVO() {
    this->initializeModel();
}

OAICountryVO::~OAICountryVO() {}

void OAICountryVO::initializeModel() {

    m_constant_token_isSet = false;
    m_constant_token_isValid = false;

    m_country_isSet = false;
    m_country_isValid = false;

    m_country_id_isSet = false;
    m_country_id_isValid = false;
}

void OAICountryVO::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICountryVO::fromJsonObject(QJsonObject json) {

    m_constant_token_isValid = ::OpenAPI::fromJsonValue(m_constant_token, json[QString("constant_token")]);
    m_constant_token_isSet = !json[QString("constant_token")].isNull() && m_constant_token_isValid;

    m_country_isValid = ::OpenAPI::fromJsonValue(m_country, json[QString("country")]);
    m_country_isSet = !json[QString("country")].isNull() && m_country_isValid;

    m_country_id_isValid = ::OpenAPI::fromJsonValue(m_country_id, json[QString("country_id")]);
    m_country_id_isSet = !json[QString("country_id")].isNull() && m_country_id_isValid;
}

QString OAICountryVO::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICountryVO::asJsonObject() const {
    QJsonObject obj;
    if (m_constant_token_isSet) {
        obj.insert(QString("constant_token"), ::OpenAPI::toJsonValue(m_constant_token));
    }
    if (m_country_isSet) {
        obj.insert(QString("country"), ::OpenAPI::toJsonValue(m_country));
    }
    if (m_country_id_isSet) {
        obj.insert(QString("country_id"), ::OpenAPI::toJsonValue(m_country_id));
    }
    return obj;
}

QString OAICountryVO::getConstantToken() const {
    return m_constant_token;
}
void OAICountryVO::setConstantToken(const QString &constant_token) {
    m_constant_token = constant_token;
    m_constant_token_isSet = true;
}

bool OAICountryVO::is_constant_token_Set() const{
    return m_constant_token_isSet;
}

bool OAICountryVO::is_constant_token_Valid() const{
    return m_constant_token_isValid;
}

QString OAICountryVO::getCountry() const {
    return m_country;
}
void OAICountryVO::setCountry(const QString &country) {
    m_country = country;
    m_country_isSet = true;
}

bool OAICountryVO::is_country_Set() const{
    return m_country_isSet;
}

bool OAICountryVO::is_country_Valid() const{
    return m_country_isValid;
}

qint64 OAICountryVO::getCountryId() const {
    return m_country_id;
}
void OAICountryVO::setCountryId(const qint64 &country_id) {
    m_country_id = country_id;
    m_country_id_isSet = true;
}

bool OAICountryVO::is_country_id_Set() const{
    return m_country_id_isSet;
}

bool OAICountryVO::is_country_id_Valid() const{
    return m_country_id_isValid;
}

bool OAICountryVO::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_constant_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICountryVO::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
