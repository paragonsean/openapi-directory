/**
 * Noosh API application
 * Full description of Noosh API
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIShipmentLocationPersistVO.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIShipmentLocationPersistVO::OAIShipmentLocationPersistVO(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIShipmentLocationPersistVO::OAIShipmentLocationPersistVO() {
    this->initializeModel();
}

OAIShipmentLocationPersistVO::~OAIShipmentLocationPersistVO() {}

void OAIShipmentLocationPersistVO::initializeModel() {

    m_due_date_isSet = false;
    m_due_date_isValid = false;

    m_qty_received_isSet = false;
    m_qty_received_isValid = false;

    m_qty_requested_isSet = false;
    m_qty_requested_isValid = false;

    m_qty_shipped_isSet = false;
    m_qty_shipped_isValid = false;

    m_received_date_isSet = false;
    m_received_date_isValid = false;

    m_shipped_date_isSet = false;
    m_shipped_date_isValid = false;

    m_shipping_cost_isSet = false;
    m_shipping_cost_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIShipmentLocationPersistVO::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIShipmentLocationPersistVO::fromJsonObject(QJsonObject json) {

    m_due_date_isValid = ::OpenAPI::fromJsonValue(m_due_date, json[QString("due_date")]);
    m_due_date_isSet = !json[QString("due_date")].isNull() && m_due_date_isValid;

    m_qty_received_isValid = ::OpenAPI::fromJsonValue(m_qty_received, json[QString("qty_received")]);
    m_qty_received_isSet = !json[QString("qty_received")].isNull() && m_qty_received_isValid;

    m_qty_requested_isValid = ::OpenAPI::fromJsonValue(m_qty_requested, json[QString("qty_requested")]);
    m_qty_requested_isSet = !json[QString("qty_requested")].isNull() && m_qty_requested_isValid;

    m_qty_shipped_isValid = ::OpenAPI::fromJsonValue(m_qty_shipped, json[QString("qty_shipped")]);
    m_qty_shipped_isSet = !json[QString("qty_shipped")].isNull() && m_qty_shipped_isValid;

    m_received_date_isValid = ::OpenAPI::fromJsonValue(m_received_date, json[QString("received_date")]);
    m_received_date_isSet = !json[QString("received_date")].isNull() && m_received_date_isValid;

    m_shipped_date_isValid = ::OpenAPI::fromJsonValue(m_shipped_date, json[QString("shipped_date")]);
    m_shipped_date_isSet = !json[QString("shipped_date")].isNull() && m_shipped_date_isValid;

    m_shipping_cost_isValid = ::OpenAPI::fromJsonValue(m_shipping_cost, json[QString("shipping_cost")]);
    m_shipping_cost_isSet = !json[QString("shipping_cost")].isNull() && m_shipping_cost_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIShipmentLocationPersistVO::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIShipmentLocationPersistVO::asJsonObject() const {
    QJsonObject obj;
    if (m_due_date_isSet) {
        obj.insert(QString("due_date"), ::OpenAPI::toJsonValue(m_due_date));
    }
    if (m_qty_received_isSet) {
        obj.insert(QString("qty_received"), ::OpenAPI::toJsonValue(m_qty_received));
    }
    if (m_qty_requested_isSet) {
        obj.insert(QString("qty_requested"), ::OpenAPI::toJsonValue(m_qty_requested));
    }
    if (m_qty_shipped_isSet) {
        obj.insert(QString("qty_shipped"), ::OpenAPI::toJsonValue(m_qty_shipped));
    }
    if (m_received_date_isSet) {
        obj.insert(QString("received_date"), ::OpenAPI::toJsonValue(m_received_date));
    }
    if (m_shipped_date_isSet) {
        obj.insert(QString("shipped_date"), ::OpenAPI::toJsonValue(m_shipped_date));
    }
    if (m_shipping_cost_isSet) {
        obj.insert(QString("shipping_cost"), ::OpenAPI::toJsonValue(m_shipping_cost));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QDate OAIShipmentLocationPersistVO::getDueDate() const {
    return m_due_date;
}
void OAIShipmentLocationPersistVO::setDueDate(const QDate &due_date) {
    m_due_date = due_date;
    m_due_date_isSet = true;
}

bool OAIShipmentLocationPersistVO::is_due_date_Set() const{
    return m_due_date_isSet;
}

bool OAIShipmentLocationPersistVO::is_due_date_Valid() const{
    return m_due_date_isValid;
}

qint64 OAIShipmentLocationPersistVO::getQtyReceived() const {
    return m_qty_received;
}
void OAIShipmentLocationPersistVO::setQtyReceived(const qint64 &qty_received) {
    m_qty_received = qty_received;
    m_qty_received_isSet = true;
}

bool OAIShipmentLocationPersistVO::is_qty_received_Set() const{
    return m_qty_received_isSet;
}

bool OAIShipmentLocationPersistVO::is_qty_received_Valid() const{
    return m_qty_received_isValid;
}

qint64 OAIShipmentLocationPersistVO::getQtyRequested() const {
    return m_qty_requested;
}
void OAIShipmentLocationPersistVO::setQtyRequested(const qint64 &qty_requested) {
    m_qty_requested = qty_requested;
    m_qty_requested_isSet = true;
}

bool OAIShipmentLocationPersistVO::is_qty_requested_Set() const{
    return m_qty_requested_isSet;
}

bool OAIShipmentLocationPersistVO::is_qty_requested_Valid() const{
    return m_qty_requested_isValid;
}

qint64 OAIShipmentLocationPersistVO::getQtyShipped() const {
    return m_qty_shipped;
}
void OAIShipmentLocationPersistVO::setQtyShipped(const qint64 &qty_shipped) {
    m_qty_shipped = qty_shipped;
    m_qty_shipped_isSet = true;
}

bool OAIShipmentLocationPersistVO::is_qty_shipped_Set() const{
    return m_qty_shipped_isSet;
}

bool OAIShipmentLocationPersistVO::is_qty_shipped_Valid() const{
    return m_qty_shipped_isValid;
}

QDate OAIShipmentLocationPersistVO::getReceivedDate() const {
    return m_received_date;
}
void OAIShipmentLocationPersistVO::setReceivedDate(const QDate &received_date) {
    m_received_date = received_date;
    m_received_date_isSet = true;
}

bool OAIShipmentLocationPersistVO::is_received_date_Set() const{
    return m_received_date_isSet;
}

bool OAIShipmentLocationPersistVO::is_received_date_Valid() const{
    return m_received_date_isValid;
}

QDate OAIShipmentLocationPersistVO::getShippedDate() const {
    return m_shipped_date;
}
void OAIShipmentLocationPersistVO::setShippedDate(const QDate &shipped_date) {
    m_shipped_date = shipped_date;
    m_shipped_date_isSet = true;
}

bool OAIShipmentLocationPersistVO::is_shipped_date_Set() const{
    return m_shipped_date_isSet;
}

bool OAIShipmentLocationPersistVO::is_shipped_date_Valid() const{
    return m_shipped_date_isValid;
}

QJsonValue OAIShipmentLocationPersistVO::getShippingCost() const {
    return m_shipping_cost;
}
void OAIShipmentLocationPersistVO::setShippingCost(const QJsonValue &shipping_cost) {
    m_shipping_cost = shipping_cost;
    m_shipping_cost_isSet = true;
}

bool OAIShipmentLocationPersistVO::is_shipping_cost_Set() const{
    return m_shipping_cost_isSet;
}

bool OAIShipmentLocationPersistVO::is_shipping_cost_Valid() const{
    return m_shipping_cost_isValid;
}

QString OAIShipmentLocationPersistVO::getType() const {
    return m_type;
}
void OAIShipmentLocationPersistVO::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIShipmentLocationPersistVO::is_type_Set() const{
    return m_type_isSet;
}

bool OAIShipmentLocationPersistVO::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIShipmentLocationPersistVO::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_due_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_qty_received_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_qty_requested_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_qty_shipped_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_received_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shipped_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shipping_cost_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIShipmentLocationPersistVO::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
