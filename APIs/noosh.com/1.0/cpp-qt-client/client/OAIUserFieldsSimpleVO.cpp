/**
 * Noosh API application
 * Full description of Noosh API
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUserFieldsSimpleVO.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUserFieldsSimpleVO::OAIUserFieldsSimpleVO(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUserFieldsSimpleVO::OAIUserFieldsSimpleVO() {
    this->initializeModel();
}

OAIUserFieldsSimpleVO::~OAIUserFieldsSimpleVO() {}

void OAIUserFieldsSimpleVO::initializeModel() {

    m_is_required_isSet = false;
    m_is_required_isValid = false;

    m_label_isSet = false;
    m_label_isValid = false;

    m_ordinal_number_isSet = false;
    m_ordinal_number_isValid = false;

    m_param_name_isSet = false;
    m_param_name_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_user_field_id_isSet = false;
    m_user_field_id_isValid = false;
}

void OAIUserFieldsSimpleVO::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUserFieldsSimpleVO::fromJsonObject(QJsonObject json) {

    m_is_required_isValid = ::OpenAPI::fromJsonValue(m_is_required, json[QString("is_required")]);
    m_is_required_isSet = !json[QString("is_required")].isNull() && m_is_required_isValid;

    m_label_isValid = ::OpenAPI::fromJsonValue(m_label, json[QString("label")]);
    m_label_isSet = !json[QString("label")].isNull() && m_label_isValid;

    m_ordinal_number_isValid = ::OpenAPI::fromJsonValue(m_ordinal_number, json[QString("ordinal_number")]);
    m_ordinal_number_isSet = !json[QString("ordinal_number")].isNull() && m_ordinal_number_isValid;

    m_param_name_isValid = ::OpenAPI::fromJsonValue(m_param_name, json[QString("param_name")]);
    m_param_name_isSet = !json[QString("param_name")].isNull() && m_param_name_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_user_field_id_isValid = ::OpenAPI::fromJsonValue(m_user_field_id, json[QString("user_field_id")]);
    m_user_field_id_isSet = !json[QString("user_field_id")].isNull() && m_user_field_id_isValid;
}

QString OAIUserFieldsSimpleVO::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUserFieldsSimpleVO::asJsonObject() const {
    QJsonObject obj;
    if (m_is_required_isSet) {
        obj.insert(QString("is_required"), ::OpenAPI::toJsonValue(m_is_required));
    }
    if (m_label_isSet) {
        obj.insert(QString("label"), ::OpenAPI::toJsonValue(m_label));
    }
    if (m_ordinal_number_isSet) {
        obj.insert(QString("ordinal_number"), ::OpenAPI::toJsonValue(m_ordinal_number));
    }
    if (m_param_name_isSet) {
        obj.insert(QString("param_name"), ::OpenAPI::toJsonValue(m_param_name));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_user_field_id_isSet) {
        obj.insert(QString("user_field_id"), ::OpenAPI::toJsonValue(m_user_field_id));
    }
    return obj;
}

bool OAIUserFieldsSimpleVO::isIsRequired() const {
    return m_is_required;
}
void OAIUserFieldsSimpleVO::setIsRequired(const bool &is_required) {
    m_is_required = is_required;
    m_is_required_isSet = true;
}

bool OAIUserFieldsSimpleVO::is_is_required_Set() const{
    return m_is_required_isSet;
}

bool OAIUserFieldsSimpleVO::is_is_required_Valid() const{
    return m_is_required_isValid;
}

QString OAIUserFieldsSimpleVO::getLabel() const {
    return m_label;
}
void OAIUserFieldsSimpleVO::setLabel(const QString &label) {
    m_label = label;
    m_label_isSet = true;
}

bool OAIUserFieldsSimpleVO::is_label_Set() const{
    return m_label_isSet;
}

bool OAIUserFieldsSimpleVO::is_label_Valid() const{
    return m_label_isValid;
}

qint64 OAIUserFieldsSimpleVO::getOrdinalNumber() const {
    return m_ordinal_number;
}
void OAIUserFieldsSimpleVO::setOrdinalNumber(const qint64 &ordinal_number) {
    m_ordinal_number = ordinal_number;
    m_ordinal_number_isSet = true;
}

bool OAIUserFieldsSimpleVO::is_ordinal_number_Set() const{
    return m_ordinal_number_isSet;
}

bool OAIUserFieldsSimpleVO::is_ordinal_number_Valid() const{
    return m_ordinal_number_isValid;
}

QString OAIUserFieldsSimpleVO::getParamName() const {
    return m_param_name;
}
void OAIUserFieldsSimpleVO::setParamName(const QString &param_name) {
    m_param_name = param_name;
    m_param_name_isSet = true;
}

bool OAIUserFieldsSimpleVO::is_param_name_Set() const{
    return m_param_name_isSet;
}

bool OAIUserFieldsSimpleVO::is_param_name_Valid() const{
    return m_param_name_isValid;
}

QString OAIUserFieldsSimpleVO::getType() const {
    return m_type;
}
void OAIUserFieldsSimpleVO::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIUserFieldsSimpleVO::is_type_Set() const{
    return m_type_isSet;
}

bool OAIUserFieldsSimpleVO::is_type_Valid() const{
    return m_type_isValid;
}

qint64 OAIUserFieldsSimpleVO::getUserFieldId() const {
    return m_user_field_id;
}
void OAIUserFieldsSimpleVO::setUserFieldId(const qint64 &user_field_id) {
    m_user_field_id = user_field_id;
    m_user_field_id_isSet = true;
}

bool OAIUserFieldsSimpleVO::is_user_field_id_Set() const{
    return m_user_field_id_isSet;
}

bool OAIUserFieldsSimpleVO::is_user_field_id_Valid() const{
    return m_user_field_id_isValid;
}

bool OAIUserFieldsSimpleVO::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_is_required_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_label_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ordinal_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_param_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_field_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUserFieldsSimpleVO::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
