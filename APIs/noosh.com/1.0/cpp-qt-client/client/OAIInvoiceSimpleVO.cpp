/**
 * Noosh API application
 * Full description of Noosh API
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInvoiceSimpleVO.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInvoiceSimpleVO::OAIInvoiceSimpleVO(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInvoiceSimpleVO::OAIInvoiceSimpleVO() {
    this->initializeModel();
}

OAIInvoiceSimpleVO::~OAIInvoiceSimpleVO() {}

void OAIInvoiceSimpleVO::initializeModel() {

    m_comments_isSet = false;
    m_comments_isValid = false;

    m_currency_isSet = false;
    m_currency_isValid = false;

    m_custom_fields_isSet = false;
    m_custom_fields_isValid = false;

    m_grand_total_isSet = false;
    m_grand_total_isValid = false;

    m_invoice_date_isSet = false;
    m_invoice_date_isValid = false;

    m_invoice_due_date_isSet = false;
    m_invoice_due_date_isValid = false;

    m_invoice_id_isSet = false;
    m_invoice_id_isValid = false;

    m_invoice_number_isSet = false;
    m_invoice_number_isValid = false;

    m_invoice_to_isSet = false;
    m_invoice_to_isValid = false;

    m_is_final_isSet = false;
    m_is_final_isValid = false;

    m_is_non_billable_isSet = false;
    m_is_non_billable_isValid = false;

    m_items_isSet = false;
    m_items_isValid = false;

    m_order_reference_isSet = false;
    m_order_reference_isValid = false;

    m_order_title_isSet = false;
    m_order_title_isValid = false;

    m_payment_method_isSet = false;
    m_payment_method_isValid = false;

    m_prepared_by_isSet = false;
    m_prepared_by_isValid = false;

    m_project_number_isSet = false;
    m_project_number_isValid = false;

    m_reference_number_isSet = false;
    m_reference_number_isValid = false;

    m_shipping_isSet = false;
    m_shipping_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_sub_total_isSet = false;
    m_sub_total_isValid = false;

    m_tax_isSet = false;
    m_tax_isValid = false;

    m_transactional_currency_isSet = false;
    m_transactional_currency_isValid = false;

    m_transactional_grand_total_isSet = false;
    m_transactional_grand_total_isValid = false;

    m_transactional_shipping_isSet = false;
    m_transactional_shipping_isValid = false;

    m_transactional_sub_total_isSet = false;
    m_transactional_sub_total_isValid = false;

    m_transactional_tax_isSet = false;
    m_transactional_tax_isValid = false;
}

void OAIInvoiceSimpleVO::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInvoiceSimpleVO::fromJsonObject(QJsonObject json) {

    m_comments_isValid = ::OpenAPI::fromJsonValue(m_comments, json[QString("comments")]);
    m_comments_isSet = !json[QString("comments")].isNull() && m_comments_isValid;

    m_currency_isValid = ::OpenAPI::fromJsonValue(m_currency, json[QString("currency")]);
    m_currency_isSet = !json[QString("currency")].isNull() && m_currency_isValid;

    m_custom_fields_isValid = ::OpenAPI::fromJsonValue(m_custom_fields, json[QString("custom_fields")]);
    m_custom_fields_isSet = !json[QString("custom_fields")].isNull() && m_custom_fields_isValid;

    m_grand_total_isValid = ::OpenAPI::fromJsonValue(m_grand_total, json[QString("grand_total")]);
    m_grand_total_isSet = !json[QString("grand_total")].isNull() && m_grand_total_isValid;

    m_invoice_date_isValid = ::OpenAPI::fromJsonValue(m_invoice_date, json[QString("invoice_date")]);
    m_invoice_date_isSet = !json[QString("invoice_date")].isNull() && m_invoice_date_isValid;

    m_invoice_due_date_isValid = ::OpenAPI::fromJsonValue(m_invoice_due_date, json[QString("invoice_due_date")]);
    m_invoice_due_date_isSet = !json[QString("invoice_due_date")].isNull() && m_invoice_due_date_isValid;

    m_invoice_id_isValid = ::OpenAPI::fromJsonValue(m_invoice_id, json[QString("invoice_id")]);
    m_invoice_id_isSet = !json[QString("invoice_id")].isNull() && m_invoice_id_isValid;

    m_invoice_number_isValid = ::OpenAPI::fromJsonValue(m_invoice_number, json[QString("invoice_number")]);
    m_invoice_number_isSet = !json[QString("invoice_number")].isNull() && m_invoice_number_isValid;

    m_invoice_to_isValid = ::OpenAPI::fromJsonValue(m_invoice_to, json[QString("invoice_to")]);
    m_invoice_to_isSet = !json[QString("invoice_to")].isNull() && m_invoice_to_isValid;

    m_is_final_isValid = ::OpenAPI::fromJsonValue(m_is_final, json[QString("is_final")]);
    m_is_final_isSet = !json[QString("is_final")].isNull() && m_is_final_isValid;

    m_is_non_billable_isValid = ::OpenAPI::fromJsonValue(m_is_non_billable, json[QString("is_nonBillable")]);
    m_is_non_billable_isSet = !json[QString("is_nonBillable")].isNull() && m_is_non_billable_isValid;

    m_items_isValid = ::OpenAPI::fromJsonValue(m_items, json[QString("items")]);
    m_items_isSet = !json[QString("items")].isNull() && m_items_isValid;

    m_order_reference_isValid = ::OpenAPI::fromJsonValue(m_order_reference, json[QString("order_reference")]);
    m_order_reference_isSet = !json[QString("order_reference")].isNull() && m_order_reference_isValid;

    m_order_title_isValid = ::OpenAPI::fromJsonValue(m_order_title, json[QString("order_title")]);
    m_order_title_isSet = !json[QString("order_title")].isNull() && m_order_title_isValid;

    m_payment_method_isValid = ::OpenAPI::fromJsonValue(m_payment_method, json[QString("payment_method")]);
    m_payment_method_isSet = !json[QString("payment_method")].isNull() && m_payment_method_isValid;

    m_prepared_by_isValid = ::OpenAPI::fromJsonValue(m_prepared_by, json[QString("prepared_by")]);
    m_prepared_by_isSet = !json[QString("prepared_by")].isNull() && m_prepared_by_isValid;

    m_project_number_isValid = ::OpenAPI::fromJsonValue(m_project_number, json[QString("project_number")]);
    m_project_number_isSet = !json[QString("project_number")].isNull() && m_project_number_isValid;

    m_reference_number_isValid = ::OpenAPI::fromJsonValue(m_reference_number, json[QString("reference_number")]);
    m_reference_number_isSet = !json[QString("reference_number")].isNull() && m_reference_number_isValid;

    m_shipping_isValid = ::OpenAPI::fromJsonValue(m_shipping, json[QString("shipping")]);
    m_shipping_isSet = !json[QString("shipping")].isNull() && m_shipping_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_sub_total_isValid = ::OpenAPI::fromJsonValue(m_sub_total, json[QString("sub_total")]);
    m_sub_total_isSet = !json[QString("sub_total")].isNull() && m_sub_total_isValid;

    m_tax_isValid = ::OpenAPI::fromJsonValue(m_tax, json[QString("tax")]);
    m_tax_isSet = !json[QString("tax")].isNull() && m_tax_isValid;

    m_transactional_currency_isValid = ::OpenAPI::fromJsonValue(m_transactional_currency, json[QString("transactional_currency")]);
    m_transactional_currency_isSet = !json[QString("transactional_currency")].isNull() && m_transactional_currency_isValid;

    m_transactional_grand_total_isValid = ::OpenAPI::fromJsonValue(m_transactional_grand_total, json[QString("transactional_grand_total")]);
    m_transactional_grand_total_isSet = !json[QString("transactional_grand_total")].isNull() && m_transactional_grand_total_isValid;

    m_transactional_shipping_isValid = ::OpenAPI::fromJsonValue(m_transactional_shipping, json[QString("transactional_shipping")]);
    m_transactional_shipping_isSet = !json[QString("transactional_shipping")].isNull() && m_transactional_shipping_isValid;

    m_transactional_sub_total_isValid = ::OpenAPI::fromJsonValue(m_transactional_sub_total, json[QString("transactional_sub_total")]);
    m_transactional_sub_total_isSet = !json[QString("transactional_sub_total")].isNull() && m_transactional_sub_total_isValid;

    m_transactional_tax_isValid = ::OpenAPI::fromJsonValue(m_transactional_tax, json[QString("transactional_tax")]);
    m_transactional_tax_isSet = !json[QString("transactional_tax")].isNull() && m_transactional_tax_isValid;
}

QString OAIInvoiceSimpleVO::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInvoiceSimpleVO::asJsonObject() const {
    QJsonObject obj;
    if (m_comments_isSet) {
        obj.insert(QString("comments"), ::OpenAPI::toJsonValue(m_comments));
    }
    if (m_currency_isSet) {
        obj.insert(QString("currency"), ::OpenAPI::toJsonValue(m_currency));
    }
    if (m_custom_fields.size() > 0) {
        obj.insert(QString("custom_fields"), ::OpenAPI::toJsonValue(m_custom_fields));
    }
    if (m_grand_total_isSet) {
        obj.insert(QString("grand_total"), ::OpenAPI::toJsonValue(m_grand_total));
    }
    if (m_invoice_date_isSet) {
        obj.insert(QString("invoice_date"), ::OpenAPI::toJsonValue(m_invoice_date));
    }
    if (m_invoice_due_date_isSet) {
        obj.insert(QString("invoice_due_date"), ::OpenAPI::toJsonValue(m_invoice_due_date));
    }
    if (m_invoice_id_isSet) {
        obj.insert(QString("invoice_id"), ::OpenAPI::toJsonValue(m_invoice_id));
    }
    if (m_invoice_number_isSet) {
        obj.insert(QString("invoice_number"), ::OpenAPI::toJsonValue(m_invoice_number));
    }
    if (m_invoice_to_isSet) {
        obj.insert(QString("invoice_to"), ::OpenAPI::toJsonValue(m_invoice_to));
    }
    if (m_is_final_isSet) {
        obj.insert(QString("is_final"), ::OpenAPI::toJsonValue(m_is_final));
    }
    if (m_is_non_billable_isSet) {
        obj.insert(QString("is_nonBillable"), ::OpenAPI::toJsonValue(m_is_non_billable));
    }
    if (m_items.size() > 0) {
        obj.insert(QString("items"), ::OpenAPI::toJsonValue(m_items));
    }
    if (m_order_reference_isSet) {
        obj.insert(QString("order_reference"), ::OpenAPI::toJsonValue(m_order_reference));
    }
    if (m_order_title_isSet) {
        obj.insert(QString("order_title"), ::OpenAPI::toJsonValue(m_order_title));
    }
    if (m_payment_method_isSet) {
        obj.insert(QString("payment_method"), ::OpenAPI::toJsonValue(m_payment_method));
    }
    if (m_prepared_by_isSet) {
        obj.insert(QString("prepared_by"), ::OpenAPI::toJsonValue(m_prepared_by));
    }
    if (m_project_number_isSet) {
        obj.insert(QString("project_number"), ::OpenAPI::toJsonValue(m_project_number));
    }
    if (m_reference_number_isSet) {
        obj.insert(QString("reference_number"), ::OpenAPI::toJsonValue(m_reference_number));
    }
    if (m_shipping_isSet) {
        obj.insert(QString("shipping"), ::OpenAPI::toJsonValue(m_shipping));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_sub_total_isSet) {
        obj.insert(QString("sub_total"), ::OpenAPI::toJsonValue(m_sub_total));
    }
    if (m_tax_isSet) {
        obj.insert(QString("tax"), ::OpenAPI::toJsonValue(m_tax));
    }
    if (m_transactional_currency_isSet) {
        obj.insert(QString("transactional_currency"), ::OpenAPI::toJsonValue(m_transactional_currency));
    }
    if (m_transactional_grand_total_isSet) {
        obj.insert(QString("transactional_grand_total"), ::OpenAPI::toJsonValue(m_transactional_grand_total));
    }
    if (m_transactional_shipping_isSet) {
        obj.insert(QString("transactional_shipping"), ::OpenAPI::toJsonValue(m_transactional_shipping));
    }
    if (m_transactional_sub_total_isSet) {
        obj.insert(QString("transactional_sub_total"), ::OpenAPI::toJsonValue(m_transactional_sub_total));
    }
    if (m_transactional_tax_isSet) {
        obj.insert(QString("transactional_tax"), ::OpenAPI::toJsonValue(m_transactional_tax));
    }
    return obj;
}

QString OAIInvoiceSimpleVO::getComments() const {
    return m_comments;
}
void OAIInvoiceSimpleVO::setComments(const QString &comments) {
    m_comments = comments;
    m_comments_isSet = true;
}

bool OAIInvoiceSimpleVO::is_comments_Set() const{
    return m_comments_isSet;
}

bool OAIInvoiceSimpleVO::is_comments_Valid() const{
    return m_comments_isValid;
}

QString OAIInvoiceSimpleVO::getCurrency() const {
    return m_currency;
}
void OAIInvoiceSimpleVO::setCurrency(const QString &currency) {
    m_currency = currency;
    m_currency_isSet = true;
}

bool OAIInvoiceSimpleVO::is_currency_Set() const{
    return m_currency_isSet;
}

bool OAIInvoiceSimpleVO::is_currency_Valid() const{
    return m_currency_isValid;
}

QList<OAIPropertyPaAndAttVO> OAIInvoiceSimpleVO::getCustomFields() const {
    return m_custom_fields;
}
void OAIInvoiceSimpleVO::setCustomFields(const QList<OAIPropertyPaAndAttVO> &custom_fields) {
    m_custom_fields = custom_fields;
    m_custom_fields_isSet = true;
}

bool OAIInvoiceSimpleVO::is_custom_fields_Set() const{
    return m_custom_fields_isSet;
}

bool OAIInvoiceSimpleVO::is_custom_fields_Valid() const{
    return m_custom_fields_isValid;
}

QJsonValue OAIInvoiceSimpleVO::getGrandTotal() const {
    return m_grand_total;
}
void OAIInvoiceSimpleVO::setGrandTotal(const QJsonValue &grand_total) {
    m_grand_total = grand_total;
    m_grand_total_isSet = true;
}

bool OAIInvoiceSimpleVO::is_grand_total_Set() const{
    return m_grand_total_isSet;
}

bool OAIInvoiceSimpleVO::is_grand_total_Valid() const{
    return m_grand_total_isValid;
}

QDate OAIInvoiceSimpleVO::getInvoiceDate() const {
    return m_invoice_date;
}
void OAIInvoiceSimpleVO::setInvoiceDate(const QDate &invoice_date) {
    m_invoice_date = invoice_date;
    m_invoice_date_isSet = true;
}

bool OAIInvoiceSimpleVO::is_invoice_date_Set() const{
    return m_invoice_date_isSet;
}

bool OAIInvoiceSimpleVO::is_invoice_date_Valid() const{
    return m_invoice_date_isValid;
}

QDate OAIInvoiceSimpleVO::getInvoiceDueDate() const {
    return m_invoice_due_date;
}
void OAIInvoiceSimpleVO::setInvoiceDueDate(const QDate &invoice_due_date) {
    m_invoice_due_date = invoice_due_date;
    m_invoice_due_date_isSet = true;
}

bool OAIInvoiceSimpleVO::is_invoice_due_date_Set() const{
    return m_invoice_due_date_isSet;
}

bool OAIInvoiceSimpleVO::is_invoice_due_date_Valid() const{
    return m_invoice_due_date_isValid;
}

qint64 OAIInvoiceSimpleVO::getInvoiceId() const {
    return m_invoice_id;
}
void OAIInvoiceSimpleVO::setInvoiceId(const qint64 &invoice_id) {
    m_invoice_id = invoice_id;
    m_invoice_id_isSet = true;
}

bool OAIInvoiceSimpleVO::is_invoice_id_Set() const{
    return m_invoice_id_isSet;
}

bool OAIInvoiceSimpleVO::is_invoice_id_Valid() const{
    return m_invoice_id_isValid;
}

QString OAIInvoiceSimpleVO::getInvoiceNumber() const {
    return m_invoice_number;
}
void OAIInvoiceSimpleVO::setInvoiceNumber(const QString &invoice_number) {
    m_invoice_number = invoice_number;
    m_invoice_number_isSet = true;
}

bool OAIInvoiceSimpleVO::is_invoice_number_Set() const{
    return m_invoice_number_isSet;
}

bool OAIInvoiceSimpleVO::is_invoice_number_Valid() const{
    return m_invoice_number_isValid;
}

QString OAIInvoiceSimpleVO::getInvoiceTo() const {
    return m_invoice_to;
}
void OAIInvoiceSimpleVO::setInvoiceTo(const QString &invoice_to) {
    m_invoice_to = invoice_to;
    m_invoice_to_isSet = true;
}

bool OAIInvoiceSimpleVO::is_invoice_to_Set() const{
    return m_invoice_to_isSet;
}

bool OAIInvoiceSimpleVO::is_invoice_to_Valid() const{
    return m_invoice_to_isValid;
}

qint32 OAIInvoiceSimpleVO::getIsFinal() const {
    return m_is_final;
}
void OAIInvoiceSimpleVO::setIsFinal(const qint32 &is_final) {
    m_is_final = is_final;
    m_is_final_isSet = true;
}

bool OAIInvoiceSimpleVO::is_is_final_Set() const{
    return m_is_final_isSet;
}

bool OAIInvoiceSimpleVO::is_is_final_Valid() const{
    return m_is_final_isValid;
}

qint32 OAIInvoiceSimpleVO::getIsNonBillable() const {
    return m_is_non_billable;
}
void OAIInvoiceSimpleVO::setIsNonBillable(const qint32 &is_non_billable) {
    m_is_non_billable = is_non_billable;
    m_is_non_billable_isSet = true;
}

bool OAIInvoiceSimpleVO::is_is_non_billable_Set() const{
    return m_is_non_billable_isSet;
}

bool OAIInvoiceSimpleVO::is_is_non_billable_Valid() const{
    return m_is_non_billable_isValid;
}

QList<OAIInvoiceItemSimpleVO> OAIInvoiceSimpleVO::getItems() const {
    return m_items;
}
void OAIInvoiceSimpleVO::setItems(const QList<OAIInvoiceItemSimpleVO> &items) {
    m_items = items;
    m_items_isSet = true;
}

bool OAIInvoiceSimpleVO::is_items_Set() const{
    return m_items_isSet;
}

bool OAIInvoiceSimpleVO::is_items_Valid() const{
    return m_items_isValid;
}

QString OAIInvoiceSimpleVO::getOrderReference() const {
    return m_order_reference;
}
void OAIInvoiceSimpleVO::setOrderReference(const QString &order_reference) {
    m_order_reference = order_reference;
    m_order_reference_isSet = true;
}

bool OAIInvoiceSimpleVO::is_order_reference_Set() const{
    return m_order_reference_isSet;
}

bool OAIInvoiceSimpleVO::is_order_reference_Valid() const{
    return m_order_reference_isValid;
}

QString OAIInvoiceSimpleVO::getOrderTitle() const {
    return m_order_title;
}
void OAIInvoiceSimpleVO::setOrderTitle(const QString &order_title) {
    m_order_title = order_title;
    m_order_title_isSet = true;
}

bool OAIInvoiceSimpleVO::is_order_title_Set() const{
    return m_order_title_isSet;
}

bool OAIInvoiceSimpleVO::is_order_title_Valid() const{
    return m_order_title_isValid;
}

QString OAIInvoiceSimpleVO::getPaymentMethod() const {
    return m_payment_method;
}
void OAIInvoiceSimpleVO::setPaymentMethod(const QString &payment_method) {
    m_payment_method = payment_method;
    m_payment_method_isSet = true;
}

bool OAIInvoiceSimpleVO::is_payment_method_Set() const{
    return m_payment_method_isSet;
}

bool OAIInvoiceSimpleVO::is_payment_method_Valid() const{
    return m_payment_method_isValid;
}

QString OAIInvoiceSimpleVO::getPreparedBy() const {
    return m_prepared_by;
}
void OAIInvoiceSimpleVO::setPreparedBy(const QString &prepared_by) {
    m_prepared_by = prepared_by;
    m_prepared_by_isSet = true;
}

bool OAIInvoiceSimpleVO::is_prepared_by_Set() const{
    return m_prepared_by_isSet;
}

bool OAIInvoiceSimpleVO::is_prepared_by_Valid() const{
    return m_prepared_by_isValid;
}

qint64 OAIInvoiceSimpleVO::getProjectNumber() const {
    return m_project_number;
}
void OAIInvoiceSimpleVO::setProjectNumber(const qint64 &project_number) {
    m_project_number = project_number;
    m_project_number_isSet = true;
}

bool OAIInvoiceSimpleVO::is_project_number_Set() const{
    return m_project_number_isSet;
}

bool OAIInvoiceSimpleVO::is_project_number_Valid() const{
    return m_project_number_isValid;
}

QString OAIInvoiceSimpleVO::getReferenceNumber() const {
    return m_reference_number;
}
void OAIInvoiceSimpleVO::setReferenceNumber(const QString &reference_number) {
    m_reference_number = reference_number;
    m_reference_number_isSet = true;
}

bool OAIInvoiceSimpleVO::is_reference_number_Set() const{
    return m_reference_number_isSet;
}

bool OAIInvoiceSimpleVO::is_reference_number_Valid() const{
    return m_reference_number_isValid;
}

QJsonValue OAIInvoiceSimpleVO::getShipping() const {
    return m_shipping;
}
void OAIInvoiceSimpleVO::setShipping(const QJsonValue &shipping) {
    m_shipping = shipping;
    m_shipping_isSet = true;
}

bool OAIInvoiceSimpleVO::is_shipping_Set() const{
    return m_shipping_isSet;
}

bool OAIInvoiceSimpleVO::is_shipping_Valid() const{
    return m_shipping_isValid;
}

QString OAIInvoiceSimpleVO::getStatus() const {
    return m_status;
}
void OAIInvoiceSimpleVO::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIInvoiceSimpleVO::is_status_Set() const{
    return m_status_isSet;
}

bool OAIInvoiceSimpleVO::is_status_Valid() const{
    return m_status_isValid;
}

QJsonValue OAIInvoiceSimpleVO::getSubTotal() const {
    return m_sub_total;
}
void OAIInvoiceSimpleVO::setSubTotal(const QJsonValue &sub_total) {
    m_sub_total = sub_total;
    m_sub_total_isSet = true;
}

bool OAIInvoiceSimpleVO::is_sub_total_Set() const{
    return m_sub_total_isSet;
}

bool OAIInvoiceSimpleVO::is_sub_total_Valid() const{
    return m_sub_total_isValid;
}

QJsonValue OAIInvoiceSimpleVO::getTax() const {
    return m_tax;
}
void OAIInvoiceSimpleVO::setTax(const QJsonValue &tax) {
    m_tax = tax;
    m_tax_isSet = true;
}

bool OAIInvoiceSimpleVO::is_tax_Set() const{
    return m_tax_isSet;
}

bool OAIInvoiceSimpleVO::is_tax_Valid() const{
    return m_tax_isValid;
}

QString OAIInvoiceSimpleVO::getTransactionalCurrency() const {
    return m_transactional_currency;
}
void OAIInvoiceSimpleVO::setTransactionalCurrency(const QString &transactional_currency) {
    m_transactional_currency = transactional_currency;
    m_transactional_currency_isSet = true;
}

bool OAIInvoiceSimpleVO::is_transactional_currency_Set() const{
    return m_transactional_currency_isSet;
}

bool OAIInvoiceSimpleVO::is_transactional_currency_Valid() const{
    return m_transactional_currency_isValid;
}

QJsonValue OAIInvoiceSimpleVO::getTransactionalGrandTotal() const {
    return m_transactional_grand_total;
}
void OAIInvoiceSimpleVO::setTransactionalGrandTotal(const QJsonValue &transactional_grand_total) {
    m_transactional_grand_total = transactional_grand_total;
    m_transactional_grand_total_isSet = true;
}

bool OAIInvoiceSimpleVO::is_transactional_grand_total_Set() const{
    return m_transactional_grand_total_isSet;
}

bool OAIInvoiceSimpleVO::is_transactional_grand_total_Valid() const{
    return m_transactional_grand_total_isValid;
}

QJsonValue OAIInvoiceSimpleVO::getTransactionalShipping() const {
    return m_transactional_shipping;
}
void OAIInvoiceSimpleVO::setTransactionalShipping(const QJsonValue &transactional_shipping) {
    m_transactional_shipping = transactional_shipping;
    m_transactional_shipping_isSet = true;
}

bool OAIInvoiceSimpleVO::is_transactional_shipping_Set() const{
    return m_transactional_shipping_isSet;
}

bool OAIInvoiceSimpleVO::is_transactional_shipping_Valid() const{
    return m_transactional_shipping_isValid;
}

QJsonValue OAIInvoiceSimpleVO::getTransactionalSubTotal() const {
    return m_transactional_sub_total;
}
void OAIInvoiceSimpleVO::setTransactionalSubTotal(const QJsonValue &transactional_sub_total) {
    m_transactional_sub_total = transactional_sub_total;
    m_transactional_sub_total_isSet = true;
}

bool OAIInvoiceSimpleVO::is_transactional_sub_total_Set() const{
    return m_transactional_sub_total_isSet;
}

bool OAIInvoiceSimpleVO::is_transactional_sub_total_Valid() const{
    return m_transactional_sub_total_isValid;
}

QJsonValue OAIInvoiceSimpleVO::getTransactionalTax() const {
    return m_transactional_tax;
}
void OAIInvoiceSimpleVO::setTransactionalTax(const QJsonValue &transactional_tax) {
    m_transactional_tax = transactional_tax;
    m_transactional_tax_isSet = true;
}

bool OAIInvoiceSimpleVO::is_transactional_tax_Set() const{
    return m_transactional_tax_isSet;
}

bool OAIInvoiceSimpleVO::is_transactional_tax_Valid() const{
    return m_transactional_tax_isValid;
}

bool OAIInvoiceSimpleVO::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_comments_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_fields.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_grand_total_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_invoice_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_invoice_due_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_invoice_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_invoice_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_invoice_to_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_final_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_non_billable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_items.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_order_reference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_order_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_method_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_prepared_by_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_project_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reference_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shipping_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sub_total_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tax_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transactional_currency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transactional_grand_total_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transactional_shipping_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transactional_sub_total_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transactional_tax_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInvoiceSimpleVO::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
