/**
 * Noosh API application
 * Full description of Noosh API
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIShipmentRequestBaseVO.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIShipmentRequestBaseVO::OAIShipmentRequestBaseVO(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIShipmentRequestBaseVO::OAIShipmentRequestBaseVO() {
    this->initializeModel();
}

OAIShipmentRequestBaseVO::~OAIShipmentRequestBaseVO() {}

void OAIShipmentRequestBaseVO::initializeModel() {

    m_city_isSet = false;
    m_city_isValid = false;

    m_company_name_isSet = false;
    m_company_name_isValid = false;

    m_country_isSet = false;
    m_country_isValid = false;

    m_country_code_isSet = false;
    m_country_code_isValid = false;

    m_custom_fields_isSet = false;
    m_custom_fields_isValid = false;

    m_description_or_title_isSet = false;
    m_description_or_title_isValid = false;

    m_due_date_isSet = false;
    m_due_date_isValid = false;

    m_email_isSet = false;
    m_email_isValid = false;

    m_first_name_isSet = false;
    m_first_name_isValid = false;

    m_is_use_spec_packaging_isSet = false;
    m_is_use_spec_packaging_isValid = false;

    m_last_name_isSet = false;
    m_last_name_isValid = false;

    m_line_1_isSet = false;
    m_line_1_isValid = false;

    m_line_2_isSet = false;
    m_line_2_isValid = false;

    m_line_3_isSet = false;
    m_line_3_isValid = false;

    m_location_id_isSet = false;
    m_location_id_isValid = false;

    m_middle_name_isSet = false;
    m_middle_name_isValid = false;

    m_postal_isSet = false;
    m_postal_isValid = false;

    m_proof_type_isSet = false;
    m_proof_type_isValid = false;

    m_qty_received_isSet = false;
    m_qty_received_isValid = false;

    m_qty_requested_isSet = false;
    m_qty_requested_isValid = false;

    m_qty_shipped_isSet = false;
    m_qty_shipped_isValid = false;

    m_received_comments_isSet = false;
    m_received_comments_isValid = false;

    m_received_date_isSet = false;
    m_received_date_isValid = false;

    m_requested_shipping_carrier_isSet = false;
    m_requested_shipping_carrier_isValid = false;

    m_requested_shipping_method_isSet = false;
    m_requested_shipping_method_isValid = false;

    m_shipped_comments_isSet = false;
    m_shipped_comments_isValid = false;

    m_shipped_date_isSet = false;
    m_shipped_date_isValid = false;

    m_shipped_in_units_isSet = false;
    m_shipped_in_units_isValid = false;

    m_shipped_in_uofm_isSet = false;
    m_shipped_in_uofm_isValid = false;

    m_shipped_shipping_carrier_isSet = false;
    m_shipped_shipping_carrier_isValid = false;

    m_shipped_shipping_method_isSet = false;
    m_shipped_shipping_method_isValid = false;

    m_shipping_cost_isSet = false;
    m_shipping_cost_isValid = false;

    m_shipping_instruction_isSet = false;
    m_shipping_instruction_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_tax_isSet = false;
    m_tax_isValid = false;

    m_tracking_number_isSet = false;
    m_tracking_number_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_weight_isSet = false;
    m_weight_isValid = false;

    m_weight_uofm_isSet = false;
    m_weight_uofm_isValid = false;

    m_work_phone_number_isSet = false;
    m_work_phone_number_isValid = false;

    m_workgroup_name_isSet = false;
    m_workgroup_name_isValid = false;
}

void OAIShipmentRequestBaseVO::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIShipmentRequestBaseVO::fromJsonObject(QJsonObject json) {

    m_city_isValid = ::OpenAPI::fromJsonValue(m_city, json[QString("city")]);
    m_city_isSet = !json[QString("city")].isNull() && m_city_isValid;

    m_company_name_isValid = ::OpenAPI::fromJsonValue(m_company_name, json[QString("company_name")]);
    m_company_name_isSet = !json[QString("company_name")].isNull() && m_company_name_isValid;

    m_country_isValid = ::OpenAPI::fromJsonValue(m_country, json[QString("country")]);
    m_country_isSet = !json[QString("country")].isNull() && m_country_isValid;

    m_country_code_isValid = ::OpenAPI::fromJsonValue(m_country_code, json[QString("country_code")]);
    m_country_code_isSet = !json[QString("country_code")].isNull() && m_country_code_isValid;

    m_custom_fields_isValid = ::OpenAPI::fromJsonValue(m_custom_fields, json[QString("custom_fields")]);
    m_custom_fields_isSet = !json[QString("custom_fields")].isNull() && m_custom_fields_isValid;

    m_description_or_title_isValid = ::OpenAPI::fromJsonValue(m_description_or_title, json[QString("description_or_title")]);
    m_description_or_title_isSet = !json[QString("description_or_title")].isNull() && m_description_or_title_isValid;

    m_due_date_isValid = ::OpenAPI::fromJsonValue(m_due_date, json[QString("due_date")]);
    m_due_date_isSet = !json[QString("due_date")].isNull() && m_due_date_isValid;

    m_email_isValid = ::OpenAPI::fromJsonValue(m_email, json[QString("email")]);
    m_email_isSet = !json[QString("email")].isNull() && m_email_isValid;

    m_first_name_isValid = ::OpenAPI::fromJsonValue(m_first_name, json[QString("first_name")]);
    m_first_name_isSet = !json[QString("first_name")].isNull() && m_first_name_isValid;

    m_is_use_spec_packaging_isValid = ::OpenAPI::fromJsonValue(m_is_use_spec_packaging, json[QString("is_use_spec_packaging")]);
    m_is_use_spec_packaging_isSet = !json[QString("is_use_spec_packaging")].isNull() && m_is_use_spec_packaging_isValid;

    m_last_name_isValid = ::OpenAPI::fromJsonValue(m_last_name, json[QString("last_name")]);
    m_last_name_isSet = !json[QString("last_name")].isNull() && m_last_name_isValid;

    m_line_1_isValid = ::OpenAPI::fromJsonValue(m_line_1, json[QString("line_1")]);
    m_line_1_isSet = !json[QString("line_1")].isNull() && m_line_1_isValid;

    m_line_2_isValid = ::OpenAPI::fromJsonValue(m_line_2, json[QString("line_2")]);
    m_line_2_isSet = !json[QString("line_2")].isNull() && m_line_2_isValid;

    m_line_3_isValid = ::OpenAPI::fromJsonValue(m_line_3, json[QString("line_3")]);
    m_line_3_isSet = !json[QString("line_3")].isNull() && m_line_3_isValid;

    m_location_id_isValid = ::OpenAPI::fromJsonValue(m_location_id, json[QString("location_id")]);
    m_location_id_isSet = !json[QString("location_id")].isNull() && m_location_id_isValid;

    m_middle_name_isValid = ::OpenAPI::fromJsonValue(m_middle_name, json[QString("middle_name")]);
    m_middle_name_isSet = !json[QString("middle_name")].isNull() && m_middle_name_isValid;

    m_postal_isValid = ::OpenAPI::fromJsonValue(m_postal, json[QString("postal")]);
    m_postal_isSet = !json[QString("postal")].isNull() && m_postal_isValid;

    m_proof_type_isValid = ::OpenAPI::fromJsonValue(m_proof_type, json[QString("proof_type")]);
    m_proof_type_isSet = !json[QString("proof_type")].isNull() && m_proof_type_isValid;

    m_qty_received_isValid = ::OpenAPI::fromJsonValue(m_qty_received, json[QString("qty_received")]);
    m_qty_received_isSet = !json[QString("qty_received")].isNull() && m_qty_received_isValid;

    m_qty_requested_isValid = ::OpenAPI::fromJsonValue(m_qty_requested, json[QString("qty_requested")]);
    m_qty_requested_isSet = !json[QString("qty_requested")].isNull() && m_qty_requested_isValid;

    m_qty_shipped_isValid = ::OpenAPI::fromJsonValue(m_qty_shipped, json[QString("qty_shipped")]);
    m_qty_shipped_isSet = !json[QString("qty_shipped")].isNull() && m_qty_shipped_isValid;

    m_received_comments_isValid = ::OpenAPI::fromJsonValue(m_received_comments, json[QString("received_comments")]);
    m_received_comments_isSet = !json[QString("received_comments")].isNull() && m_received_comments_isValid;

    m_received_date_isValid = ::OpenAPI::fromJsonValue(m_received_date, json[QString("received_date")]);
    m_received_date_isSet = !json[QString("received_date")].isNull() && m_received_date_isValid;

    m_requested_shipping_carrier_isValid = ::OpenAPI::fromJsonValue(m_requested_shipping_carrier, json[QString("requested_shipping_carrier")]);
    m_requested_shipping_carrier_isSet = !json[QString("requested_shipping_carrier")].isNull() && m_requested_shipping_carrier_isValid;

    m_requested_shipping_method_isValid = ::OpenAPI::fromJsonValue(m_requested_shipping_method, json[QString("requested_shipping_method")]);
    m_requested_shipping_method_isSet = !json[QString("requested_shipping_method")].isNull() && m_requested_shipping_method_isValid;

    m_shipped_comments_isValid = ::OpenAPI::fromJsonValue(m_shipped_comments, json[QString("shipped_comments")]);
    m_shipped_comments_isSet = !json[QString("shipped_comments")].isNull() && m_shipped_comments_isValid;

    m_shipped_date_isValid = ::OpenAPI::fromJsonValue(m_shipped_date, json[QString("shipped_date")]);
    m_shipped_date_isSet = !json[QString("shipped_date")].isNull() && m_shipped_date_isValid;

    m_shipped_in_units_isValid = ::OpenAPI::fromJsonValue(m_shipped_in_units, json[QString("shipped_in_units")]);
    m_shipped_in_units_isSet = !json[QString("shipped_in_units")].isNull() && m_shipped_in_units_isValid;

    m_shipped_in_uofm_isValid = ::OpenAPI::fromJsonValue(m_shipped_in_uofm, json[QString("shipped_in_uofm")]);
    m_shipped_in_uofm_isSet = !json[QString("shipped_in_uofm")].isNull() && m_shipped_in_uofm_isValid;

    m_shipped_shipping_carrier_isValid = ::OpenAPI::fromJsonValue(m_shipped_shipping_carrier, json[QString("shipped_shipping_carrier")]);
    m_shipped_shipping_carrier_isSet = !json[QString("shipped_shipping_carrier")].isNull() && m_shipped_shipping_carrier_isValid;

    m_shipped_shipping_method_isValid = ::OpenAPI::fromJsonValue(m_shipped_shipping_method, json[QString("shipped_shipping_method")]);
    m_shipped_shipping_method_isSet = !json[QString("shipped_shipping_method")].isNull() && m_shipped_shipping_method_isValid;

    m_shipping_cost_isValid = ::OpenAPI::fromJsonValue(m_shipping_cost, json[QString("shipping_cost")]);
    m_shipping_cost_isSet = !json[QString("shipping_cost")].isNull() && m_shipping_cost_isValid;

    m_shipping_instruction_isValid = ::OpenAPI::fromJsonValue(m_shipping_instruction, json[QString("shipping_instruction")]);
    m_shipping_instruction_isSet = !json[QString("shipping_instruction")].isNull() && m_shipping_instruction_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_tax_isValid = ::OpenAPI::fromJsonValue(m_tax, json[QString("tax")]);
    m_tax_isSet = !json[QString("tax")].isNull() && m_tax_isValid;

    m_tracking_number_isValid = ::OpenAPI::fromJsonValue(m_tracking_number, json[QString("tracking_number")]);
    m_tracking_number_isSet = !json[QString("tracking_number")].isNull() && m_tracking_number_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_weight_isValid = ::OpenAPI::fromJsonValue(m_weight, json[QString("weight")]);
    m_weight_isSet = !json[QString("weight")].isNull() && m_weight_isValid;

    m_weight_uofm_isValid = ::OpenAPI::fromJsonValue(m_weight_uofm, json[QString("weight_uofm")]);
    m_weight_uofm_isSet = !json[QString("weight_uofm")].isNull() && m_weight_uofm_isValid;

    m_work_phone_number_isValid = ::OpenAPI::fromJsonValue(m_work_phone_number, json[QString("work_phone_number")]);
    m_work_phone_number_isSet = !json[QString("work_phone_number")].isNull() && m_work_phone_number_isValid;

    m_workgroup_name_isValid = ::OpenAPI::fromJsonValue(m_workgroup_name, json[QString("workgroup_name")]);
    m_workgroup_name_isSet = !json[QString("workgroup_name")].isNull() && m_workgroup_name_isValid;
}

QString OAIShipmentRequestBaseVO::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIShipmentRequestBaseVO::asJsonObject() const {
    QJsonObject obj;
    if (m_city_isSet) {
        obj.insert(QString("city"), ::OpenAPI::toJsonValue(m_city));
    }
    if (m_company_name_isSet) {
        obj.insert(QString("company_name"), ::OpenAPI::toJsonValue(m_company_name));
    }
    if (m_country_isSet) {
        obj.insert(QString("country"), ::OpenAPI::toJsonValue(m_country));
    }
    if (m_country_code_isSet) {
        obj.insert(QString("country_code"), ::OpenAPI::toJsonValue(m_country_code));
    }
    if (m_custom_fields.size() > 0) {
        obj.insert(QString("custom_fields"), ::OpenAPI::toJsonValue(m_custom_fields));
    }
    if (m_description_or_title_isSet) {
        obj.insert(QString("description_or_title"), ::OpenAPI::toJsonValue(m_description_or_title));
    }
    if (m_due_date_isSet) {
        obj.insert(QString("due_date"), ::OpenAPI::toJsonValue(m_due_date));
    }
    if (m_email_isSet) {
        obj.insert(QString("email"), ::OpenAPI::toJsonValue(m_email));
    }
    if (m_first_name_isSet) {
        obj.insert(QString("first_name"), ::OpenAPI::toJsonValue(m_first_name));
    }
    if (m_is_use_spec_packaging_isSet) {
        obj.insert(QString("is_use_spec_packaging"), ::OpenAPI::toJsonValue(m_is_use_spec_packaging));
    }
    if (m_last_name_isSet) {
        obj.insert(QString("last_name"), ::OpenAPI::toJsonValue(m_last_name));
    }
    if (m_line_1_isSet) {
        obj.insert(QString("line_1"), ::OpenAPI::toJsonValue(m_line_1));
    }
    if (m_line_2_isSet) {
        obj.insert(QString("line_2"), ::OpenAPI::toJsonValue(m_line_2));
    }
    if (m_line_3_isSet) {
        obj.insert(QString("line_3"), ::OpenAPI::toJsonValue(m_line_3));
    }
    if (m_location_id_isSet) {
        obj.insert(QString("location_id"), ::OpenAPI::toJsonValue(m_location_id));
    }
    if (m_middle_name_isSet) {
        obj.insert(QString("middle_name"), ::OpenAPI::toJsonValue(m_middle_name));
    }
    if (m_postal_isSet) {
        obj.insert(QString("postal"), ::OpenAPI::toJsonValue(m_postal));
    }
    if (m_proof_type_isSet) {
        obj.insert(QString("proof_type"), ::OpenAPI::toJsonValue(m_proof_type));
    }
    if (m_qty_received_isSet) {
        obj.insert(QString("qty_received"), ::OpenAPI::toJsonValue(m_qty_received));
    }
    if (m_qty_requested_isSet) {
        obj.insert(QString("qty_requested"), ::OpenAPI::toJsonValue(m_qty_requested));
    }
    if (m_qty_shipped_isSet) {
        obj.insert(QString("qty_shipped"), ::OpenAPI::toJsonValue(m_qty_shipped));
    }
    if (m_received_comments_isSet) {
        obj.insert(QString("received_comments"), ::OpenAPI::toJsonValue(m_received_comments));
    }
    if (m_received_date_isSet) {
        obj.insert(QString("received_date"), ::OpenAPI::toJsonValue(m_received_date));
    }
    if (m_requested_shipping_carrier_isSet) {
        obj.insert(QString("requested_shipping_carrier"), ::OpenAPI::toJsonValue(m_requested_shipping_carrier));
    }
    if (m_requested_shipping_method_isSet) {
        obj.insert(QString("requested_shipping_method"), ::OpenAPI::toJsonValue(m_requested_shipping_method));
    }
    if (m_shipped_comments_isSet) {
        obj.insert(QString("shipped_comments"), ::OpenAPI::toJsonValue(m_shipped_comments));
    }
    if (m_shipped_date_isSet) {
        obj.insert(QString("shipped_date"), ::OpenAPI::toJsonValue(m_shipped_date));
    }
    if (m_shipped_in_units_isSet) {
        obj.insert(QString("shipped_in_units"), ::OpenAPI::toJsonValue(m_shipped_in_units));
    }
    if (m_shipped_in_uofm_isSet) {
        obj.insert(QString("shipped_in_uofm"), ::OpenAPI::toJsonValue(m_shipped_in_uofm));
    }
    if (m_shipped_shipping_carrier_isSet) {
        obj.insert(QString("shipped_shipping_carrier"), ::OpenAPI::toJsonValue(m_shipped_shipping_carrier));
    }
    if (m_shipped_shipping_method_isSet) {
        obj.insert(QString("shipped_shipping_method"), ::OpenAPI::toJsonValue(m_shipped_shipping_method));
    }
    if (m_shipping_cost_isSet) {
        obj.insert(QString("shipping_cost"), ::OpenAPI::toJsonValue(m_shipping_cost));
    }
    if (m_shipping_instruction_isSet) {
        obj.insert(QString("shipping_instruction"), ::OpenAPI::toJsonValue(m_shipping_instruction));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_tax_isSet) {
        obj.insert(QString("tax"), ::OpenAPI::toJsonValue(m_tax));
    }
    if (m_tracking_number_isSet) {
        obj.insert(QString("tracking_number"), ::OpenAPI::toJsonValue(m_tracking_number));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_weight_isSet) {
        obj.insert(QString("weight"), ::OpenAPI::toJsonValue(m_weight));
    }
    if (m_weight_uofm_isSet) {
        obj.insert(QString("weight_uofm"), ::OpenAPI::toJsonValue(m_weight_uofm));
    }
    if (m_work_phone_number_isSet) {
        obj.insert(QString("work_phone_number"), ::OpenAPI::toJsonValue(m_work_phone_number));
    }
    if (m_workgroup_name_isSet) {
        obj.insert(QString("workgroup_name"), ::OpenAPI::toJsonValue(m_workgroup_name));
    }
    return obj;
}

QString OAIShipmentRequestBaseVO::getCity() const {
    return m_city;
}
void OAIShipmentRequestBaseVO::setCity(const QString &city) {
    m_city = city;
    m_city_isSet = true;
}

bool OAIShipmentRequestBaseVO::is_city_Set() const{
    return m_city_isSet;
}

bool OAIShipmentRequestBaseVO::is_city_Valid() const{
    return m_city_isValid;
}

QString OAIShipmentRequestBaseVO::getCompanyName() const {
    return m_company_name;
}
void OAIShipmentRequestBaseVO::setCompanyName(const QString &company_name) {
    m_company_name = company_name;
    m_company_name_isSet = true;
}

bool OAIShipmentRequestBaseVO::is_company_name_Set() const{
    return m_company_name_isSet;
}

bool OAIShipmentRequestBaseVO::is_company_name_Valid() const{
    return m_company_name_isValid;
}

QString OAIShipmentRequestBaseVO::getCountry() const {
    return m_country;
}
void OAIShipmentRequestBaseVO::setCountry(const QString &country) {
    m_country = country;
    m_country_isSet = true;
}

bool OAIShipmentRequestBaseVO::is_country_Set() const{
    return m_country_isSet;
}

bool OAIShipmentRequestBaseVO::is_country_Valid() const{
    return m_country_isValid;
}

QString OAIShipmentRequestBaseVO::getCountryCode() const {
    return m_country_code;
}
void OAIShipmentRequestBaseVO::setCountryCode(const QString &country_code) {
    m_country_code = country_code;
    m_country_code_isSet = true;
}

bool OAIShipmentRequestBaseVO::is_country_code_Set() const{
    return m_country_code_isSet;
}

bool OAIShipmentRequestBaseVO::is_country_code_Valid() const{
    return m_country_code_isValid;
}

QList<OAIPropertyPaAndAttVO> OAIShipmentRequestBaseVO::getCustomFields() const {
    return m_custom_fields;
}
void OAIShipmentRequestBaseVO::setCustomFields(const QList<OAIPropertyPaAndAttVO> &custom_fields) {
    m_custom_fields = custom_fields;
    m_custom_fields_isSet = true;
}

bool OAIShipmentRequestBaseVO::is_custom_fields_Set() const{
    return m_custom_fields_isSet;
}

bool OAIShipmentRequestBaseVO::is_custom_fields_Valid() const{
    return m_custom_fields_isValid;
}

QString OAIShipmentRequestBaseVO::getDescriptionOrTitle() const {
    return m_description_or_title;
}
void OAIShipmentRequestBaseVO::setDescriptionOrTitle(const QString &description_or_title) {
    m_description_or_title = description_or_title;
    m_description_or_title_isSet = true;
}

bool OAIShipmentRequestBaseVO::is_description_or_title_Set() const{
    return m_description_or_title_isSet;
}

bool OAIShipmentRequestBaseVO::is_description_or_title_Valid() const{
    return m_description_or_title_isValid;
}

QDate OAIShipmentRequestBaseVO::getDueDate() const {
    return m_due_date;
}
void OAIShipmentRequestBaseVO::setDueDate(const QDate &due_date) {
    m_due_date = due_date;
    m_due_date_isSet = true;
}

bool OAIShipmentRequestBaseVO::is_due_date_Set() const{
    return m_due_date_isSet;
}

bool OAIShipmentRequestBaseVO::is_due_date_Valid() const{
    return m_due_date_isValid;
}

QString OAIShipmentRequestBaseVO::getEmail() const {
    return m_email;
}
void OAIShipmentRequestBaseVO::setEmail(const QString &email) {
    m_email = email;
    m_email_isSet = true;
}

bool OAIShipmentRequestBaseVO::is_email_Set() const{
    return m_email_isSet;
}

bool OAIShipmentRequestBaseVO::is_email_Valid() const{
    return m_email_isValid;
}

QString OAIShipmentRequestBaseVO::getFirstName() const {
    return m_first_name;
}
void OAIShipmentRequestBaseVO::setFirstName(const QString &first_name) {
    m_first_name = first_name;
    m_first_name_isSet = true;
}

bool OAIShipmentRequestBaseVO::is_first_name_Set() const{
    return m_first_name_isSet;
}

bool OAIShipmentRequestBaseVO::is_first_name_Valid() const{
    return m_first_name_isValid;
}

bool OAIShipmentRequestBaseVO::isIsUseSpecPackaging() const {
    return m_is_use_spec_packaging;
}
void OAIShipmentRequestBaseVO::setIsUseSpecPackaging(const bool &is_use_spec_packaging) {
    m_is_use_spec_packaging = is_use_spec_packaging;
    m_is_use_spec_packaging_isSet = true;
}

bool OAIShipmentRequestBaseVO::is_is_use_spec_packaging_Set() const{
    return m_is_use_spec_packaging_isSet;
}

bool OAIShipmentRequestBaseVO::is_is_use_spec_packaging_Valid() const{
    return m_is_use_spec_packaging_isValid;
}

QString OAIShipmentRequestBaseVO::getLastName() const {
    return m_last_name;
}
void OAIShipmentRequestBaseVO::setLastName(const QString &last_name) {
    m_last_name = last_name;
    m_last_name_isSet = true;
}

bool OAIShipmentRequestBaseVO::is_last_name_Set() const{
    return m_last_name_isSet;
}

bool OAIShipmentRequestBaseVO::is_last_name_Valid() const{
    return m_last_name_isValid;
}

QString OAIShipmentRequestBaseVO::getLine1() const {
    return m_line_1;
}
void OAIShipmentRequestBaseVO::setLine1(const QString &line_1) {
    m_line_1 = line_1;
    m_line_1_isSet = true;
}

bool OAIShipmentRequestBaseVO::is_line_1_Set() const{
    return m_line_1_isSet;
}

bool OAIShipmentRequestBaseVO::is_line_1_Valid() const{
    return m_line_1_isValid;
}

QString OAIShipmentRequestBaseVO::getLine2() const {
    return m_line_2;
}
void OAIShipmentRequestBaseVO::setLine2(const QString &line_2) {
    m_line_2 = line_2;
    m_line_2_isSet = true;
}

bool OAIShipmentRequestBaseVO::is_line_2_Set() const{
    return m_line_2_isSet;
}

bool OAIShipmentRequestBaseVO::is_line_2_Valid() const{
    return m_line_2_isValid;
}

QString OAIShipmentRequestBaseVO::getLine3() const {
    return m_line_3;
}
void OAIShipmentRequestBaseVO::setLine3(const QString &line_3) {
    m_line_3 = line_3;
    m_line_3_isSet = true;
}

bool OAIShipmentRequestBaseVO::is_line_3_Set() const{
    return m_line_3_isSet;
}

bool OAIShipmentRequestBaseVO::is_line_3_Valid() const{
    return m_line_3_isValid;
}

qint64 OAIShipmentRequestBaseVO::getLocationId() const {
    return m_location_id;
}
void OAIShipmentRequestBaseVO::setLocationId(const qint64 &location_id) {
    m_location_id = location_id;
    m_location_id_isSet = true;
}

bool OAIShipmentRequestBaseVO::is_location_id_Set() const{
    return m_location_id_isSet;
}

bool OAIShipmentRequestBaseVO::is_location_id_Valid() const{
    return m_location_id_isValid;
}

QString OAIShipmentRequestBaseVO::getMiddleName() const {
    return m_middle_name;
}
void OAIShipmentRequestBaseVO::setMiddleName(const QString &middle_name) {
    m_middle_name = middle_name;
    m_middle_name_isSet = true;
}

bool OAIShipmentRequestBaseVO::is_middle_name_Set() const{
    return m_middle_name_isSet;
}

bool OAIShipmentRequestBaseVO::is_middle_name_Valid() const{
    return m_middle_name_isValid;
}

QString OAIShipmentRequestBaseVO::getPostal() const {
    return m_postal;
}
void OAIShipmentRequestBaseVO::setPostal(const QString &postal) {
    m_postal = postal;
    m_postal_isSet = true;
}

bool OAIShipmentRequestBaseVO::is_postal_Set() const{
    return m_postal_isSet;
}

bool OAIShipmentRequestBaseVO::is_postal_Valid() const{
    return m_postal_isValid;
}

QString OAIShipmentRequestBaseVO::getProofType() const {
    return m_proof_type;
}
void OAIShipmentRequestBaseVO::setProofType(const QString &proof_type) {
    m_proof_type = proof_type;
    m_proof_type_isSet = true;
}

bool OAIShipmentRequestBaseVO::is_proof_type_Set() const{
    return m_proof_type_isSet;
}

bool OAIShipmentRequestBaseVO::is_proof_type_Valid() const{
    return m_proof_type_isValid;
}

qint64 OAIShipmentRequestBaseVO::getQtyReceived() const {
    return m_qty_received;
}
void OAIShipmentRequestBaseVO::setQtyReceived(const qint64 &qty_received) {
    m_qty_received = qty_received;
    m_qty_received_isSet = true;
}

bool OAIShipmentRequestBaseVO::is_qty_received_Set() const{
    return m_qty_received_isSet;
}

bool OAIShipmentRequestBaseVO::is_qty_received_Valid() const{
    return m_qty_received_isValid;
}

qint64 OAIShipmentRequestBaseVO::getQtyRequested() const {
    return m_qty_requested;
}
void OAIShipmentRequestBaseVO::setQtyRequested(const qint64 &qty_requested) {
    m_qty_requested = qty_requested;
    m_qty_requested_isSet = true;
}

bool OAIShipmentRequestBaseVO::is_qty_requested_Set() const{
    return m_qty_requested_isSet;
}

bool OAIShipmentRequestBaseVO::is_qty_requested_Valid() const{
    return m_qty_requested_isValid;
}

qint64 OAIShipmentRequestBaseVO::getQtyShipped() const {
    return m_qty_shipped;
}
void OAIShipmentRequestBaseVO::setQtyShipped(const qint64 &qty_shipped) {
    m_qty_shipped = qty_shipped;
    m_qty_shipped_isSet = true;
}

bool OAIShipmentRequestBaseVO::is_qty_shipped_Set() const{
    return m_qty_shipped_isSet;
}

bool OAIShipmentRequestBaseVO::is_qty_shipped_Valid() const{
    return m_qty_shipped_isValid;
}

QString OAIShipmentRequestBaseVO::getReceivedComments() const {
    return m_received_comments;
}
void OAIShipmentRequestBaseVO::setReceivedComments(const QString &received_comments) {
    m_received_comments = received_comments;
    m_received_comments_isSet = true;
}

bool OAIShipmentRequestBaseVO::is_received_comments_Set() const{
    return m_received_comments_isSet;
}

bool OAIShipmentRequestBaseVO::is_received_comments_Valid() const{
    return m_received_comments_isValid;
}

QDate OAIShipmentRequestBaseVO::getReceivedDate() const {
    return m_received_date;
}
void OAIShipmentRequestBaseVO::setReceivedDate(const QDate &received_date) {
    m_received_date = received_date;
    m_received_date_isSet = true;
}

bool OAIShipmentRequestBaseVO::is_received_date_Set() const{
    return m_received_date_isSet;
}

bool OAIShipmentRequestBaseVO::is_received_date_Valid() const{
    return m_received_date_isValid;
}

QString OAIShipmentRequestBaseVO::getRequestedShippingCarrier() const {
    return m_requested_shipping_carrier;
}
void OAIShipmentRequestBaseVO::setRequestedShippingCarrier(const QString &requested_shipping_carrier) {
    m_requested_shipping_carrier = requested_shipping_carrier;
    m_requested_shipping_carrier_isSet = true;
}

bool OAIShipmentRequestBaseVO::is_requested_shipping_carrier_Set() const{
    return m_requested_shipping_carrier_isSet;
}

bool OAIShipmentRequestBaseVO::is_requested_shipping_carrier_Valid() const{
    return m_requested_shipping_carrier_isValid;
}

QString OAIShipmentRequestBaseVO::getRequestedShippingMethod() const {
    return m_requested_shipping_method;
}
void OAIShipmentRequestBaseVO::setRequestedShippingMethod(const QString &requested_shipping_method) {
    m_requested_shipping_method = requested_shipping_method;
    m_requested_shipping_method_isSet = true;
}

bool OAIShipmentRequestBaseVO::is_requested_shipping_method_Set() const{
    return m_requested_shipping_method_isSet;
}

bool OAIShipmentRequestBaseVO::is_requested_shipping_method_Valid() const{
    return m_requested_shipping_method_isValid;
}

QString OAIShipmentRequestBaseVO::getShippedComments() const {
    return m_shipped_comments;
}
void OAIShipmentRequestBaseVO::setShippedComments(const QString &shipped_comments) {
    m_shipped_comments = shipped_comments;
    m_shipped_comments_isSet = true;
}

bool OAIShipmentRequestBaseVO::is_shipped_comments_Set() const{
    return m_shipped_comments_isSet;
}

bool OAIShipmentRequestBaseVO::is_shipped_comments_Valid() const{
    return m_shipped_comments_isValid;
}

QDate OAIShipmentRequestBaseVO::getShippedDate() const {
    return m_shipped_date;
}
void OAIShipmentRequestBaseVO::setShippedDate(const QDate &shipped_date) {
    m_shipped_date = shipped_date;
    m_shipped_date_isSet = true;
}

bool OAIShipmentRequestBaseVO::is_shipped_date_Set() const{
    return m_shipped_date_isSet;
}

bool OAIShipmentRequestBaseVO::is_shipped_date_Valid() const{
    return m_shipped_date_isValid;
}

qint64 OAIShipmentRequestBaseVO::getShippedInUnits() const {
    return m_shipped_in_units;
}
void OAIShipmentRequestBaseVO::setShippedInUnits(const qint64 &shipped_in_units) {
    m_shipped_in_units = shipped_in_units;
    m_shipped_in_units_isSet = true;
}

bool OAIShipmentRequestBaseVO::is_shipped_in_units_Set() const{
    return m_shipped_in_units_isSet;
}

bool OAIShipmentRequestBaseVO::is_shipped_in_units_Valid() const{
    return m_shipped_in_units_isValid;
}

QString OAIShipmentRequestBaseVO::getShippedInUofm() const {
    return m_shipped_in_uofm;
}
void OAIShipmentRequestBaseVO::setShippedInUofm(const QString &shipped_in_uofm) {
    m_shipped_in_uofm = shipped_in_uofm;
    m_shipped_in_uofm_isSet = true;
}

bool OAIShipmentRequestBaseVO::is_shipped_in_uofm_Set() const{
    return m_shipped_in_uofm_isSet;
}

bool OAIShipmentRequestBaseVO::is_shipped_in_uofm_Valid() const{
    return m_shipped_in_uofm_isValid;
}

QString OAIShipmentRequestBaseVO::getShippedShippingCarrier() const {
    return m_shipped_shipping_carrier;
}
void OAIShipmentRequestBaseVO::setShippedShippingCarrier(const QString &shipped_shipping_carrier) {
    m_shipped_shipping_carrier = shipped_shipping_carrier;
    m_shipped_shipping_carrier_isSet = true;
}

bool OAIShipmentRequestBaseVO::is_shipped_shipping_carrier_Set() const{
    return m_shipped_shipping_carrier_isSet;
}

bool OAIShipmentRequestBaseVO::is_shipped_shipping_carrier_Valid() const{
    return m_shipped_shipping_carrier_isValid;
}

QString OAIShipmentRequestBaseVO::getShippedShippingMethod() const {
    return m_shipped_shipping_method;
}
void OAIShipmentRequestBaseVO::setShippedShippingMethod(const QString &shipped_shipping_method) {
    m_shipped_shipping_method = shipped_shipping_method;
    m_shipped_shipping_method_isSet = true;
}

bool OAIShipmentRequestBaseVO::is_shipped_shipping_method_Set() const{
    return m_shipped_shipping_method_isSet;
}

bool OAIShipmentRequestBaseVO::is_shipped_shipping_method_Valid() const{
    return m_shipped_shipping_method_isValid;
}

QJsonValue OAIShipmentRequestBaseVO::getShippingCost() const {
    return m_shipping_cost;
}
void OAIShipmentRequestBaseVO::setShippingCost(const QJsonValue &shipping_cost) {
    m_shipping_cost = shipping_cost;
    m_shipping_cost_isSet = true;
}

bool OAIShipmentRequestBaseVO::is_shipping_cost_Set() const{
    return m_shipping_cost_isSet;
}

bool OAIShipmentRequestBaseVO::is_shipping_cost_Valid() const{
    return m_shipping_cost_isValid;
}

QString OAIShipmentRequestBaseVO::getShippingInstruction() const {
    return m_shipping_instruction;
}
void OAIShipmentRequestBaseVO::setShippingInstruction(const QString &shipping_instruction) {
    m_shipping_instruction = shipping_instruction;
    m_shipping_instruction_isSet = true;
}

bool OAIShipmentRequestBaseVO::is_shipping_instruction_Set() const{
    return m_shipping_instruction_isSet;
}

bool OAIShipmentRequestBaseVO::is_shipping_instruction_Valid() const{
    return m_shipping_instruction_isValid;
}

QString OAIShipmentRequestBaseVO::getState() const {
    return m_state;
}
void OAIShipmentRequestBaseVO::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIShipmentRequestBaseVO::is_state_Set() const{
    return m_state_isSet;
}

bool OAIShipmentRequestBaseVO::is_state_Valid() const{
    return m_state_isValid;
}

QJsonValue OAIShipmentRequestBaseVO::getTax() const {
    return m_tax;
}
void OAIShipmentRequestBaseVO::setTax(const QJsonValue &tax) {
    m_tax = tax;
    m_tax_isSet = true;
}

bool OAIShipmentRequestBaseVO::is_tax_Set() const{
    return m_tax_isSet;
}

bool OAIShipmentRequestBaseVO::is_tax_Valid() const{
    return m_tax_isValid;
}

QString OAIShipmentRequestBaseVO::getTrackingNumber() const {
    return m_tracking_number;
}
void OAIShipmentRequestBaseVO::setTrackingNumber(const QString &tracking_number) {
    m_tracking_number = tracking_number;
    m_tracking_number_isSet = true;
}

bool OAIShipmentRequestBaseVO::is_tracking_number_Set() const{
    return m_tracking_number_isSet;
}

bool OAIShipmentRequestBaseVO::is_tracking_number_Valid() const{
    return m_tracking_number_isValid;
}

QString OAIShipmentRequestBaseVO::getType() const {
    return m_type;
}
void OAIShipmentRequestBaseVO::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIShipmentRequestBaseVO::is_type_Set() const{
    return m_type_isSet;
}

bool OAIShipmentRequestBaseVO::is_type_Valid() const{
    return m_type_isValid;
}

QJsonValue OAIShipmentRequestBaseVO::getWeight() const {
    return m_weight;
}
void OAIShipmentRequestBaseVO::setWeight(const QJsonValue &weight) {
    m_weight = weight;
    m_weight_isSet = true;
}

bool OAIShipmentRequestBaseVO::is_weight_Set() const{
    return m_weight_isSet;
}

bool OAIShipmentRequestBaseVO::is_weight_Valid() const{
    return m_weight_isValid;
}

QString OAIShipmentRequestBaseVO::getWeightUofm() const {
    return m_weight_uofm;
}
void OAIShipmentRequestBaseVO::setWeightUofm(const QString &weight_uofm) {
    m_weight_uofm = weight_uofm;
    m_weight_uofm_isSet = true;
}

bool OAIShipmentRequestBaseVO::is_weight_uofm_Set() const{
    return m_weight_uofm_isSet;
}

bool OAIShipmentRequestBaseVO::is_weight_uofm_Valid() const{
    return m_weight_uofm_isValid;
}

QString OAIShipmentRequestBaseVO::getWorkPhoneNumber() const {
    return m_work_phone_number;
}
void OAIShipmentRequestBaseVO::setWorkPhoneNumber(const QString &work_phone_number) {
    m_work_phone_number = work_phone_number;
    m_work_phone_number_isSet = true;
}

bool OAIShipmentRequestBaseVO::is_work_phone_number_Set() const{
    return m_work_phone_number_isSet;
}

bool OAIShipmentRequestBaseVO::is_work_phone_number_Valid() const{
    return m_work_phone_number_isValid;
}

QString OAIShipmentRequestBaseVO::getWorkgroupName() const {
    return m_workgroup_name;
}
void OAIShipmentRequestBaseVO::setWorkgroupName(const QString &workgroup_name) {
    m_workgroup_name = workgroup_name;
    m_workgroup_name_isSet = true;
}

bool OAIShipmentRequestBaseVO::is_workgroup_name_Set() const{
    return m_workgroup_name_isSet;
}

bool OAIShipmentRequestBaseVO::is_workgroup_name_Valid() const{
    return m_workgroup_name_isValid;
}

bool OAIShipmentRequestBaseVO::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_city_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_company_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_fields.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_or_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_due_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_first_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_use_spec_packaging_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_line_1_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_line_2_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_line_3_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_middle_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_postal_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_proof_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_qty_received_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_qty_requested_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_qty_shipped_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_received_comments_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_received_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_requested_shipping_carrier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_requested_shipping_method_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shipped_comments_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shipped_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shipped_in_units_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shipped_in_uofm_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shipped_shipping_carrier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shipped_shipping_method_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shipping_cost_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shipping_instruction_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tax_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tracking_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_weight_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_weight_uofm_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_work_phone_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_workgroup_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIShipmentRequestBaseVO::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
