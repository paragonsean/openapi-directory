/**
 * Noosh API application
 * Full description of Noosh API
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAITaskApi_H
#define OAI_OAITaskApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIHTTPStatusVO.h"
#include "OAITaskCreatedVO.h"
#include "OAITaskExpandVO.h"
#include "OAITaskExpandWorkgroupLevelVO.h"
#include "OAITaskListVO.h"
#include "OAITaskPersistVO.h"
#include "OAITaskPriorityListVO.h"
#include "OAITaskStatusListVO.h"
#include "OAITaskTypeListVO.h"
#include "OAITaskWorkgroupLevelListVO.h"
#include "OAIWgTaskStatusListVO.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAITaskApi : public QObject {
    Q_OBJECT

public:
    OAITaskApi(const int timeOut = 0);
    ~OAITaskApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  workgroup_id QString [required]
    */
    virtual void getCustomTaskTypesOfWg(const QString &workgroup_id);

    /**
    * @param[in]  workgroup_id QString [required]
    */
    virtual void getDefaultTaskStatusList(const QString &workgroup_id);

    /**
    * @param[in]  workgroup_id QString [required]
    * @param[in]  project_id QString [required]
    */
    virtual void getTaskListOfProject(const QString &workgroup_id, const QString &project_id);

    /**
    * @param[in]  workgroup_id QString [required]
    */
    virtual void getTaskListOfWorkgroup(const QString &workgroup_id);

    /**
    * @param[in]  workgroup_id QString [required]
    * @param[in]  project_id QString [required]
    * @param[in]  task_id QString [required]
    */
    virtual void getTaskOfProject(const QString &workgroup_id, const QString &project_id, const QString &task_id);

    /**
    * @param[in]  workgroup_id QString [required]
    * @param[in]  task_id QString [required]
    */
    virtual void getTaskOfWorkgroup(const QString &workgroup_id, const QString &task_id);

    /**
    * @param[in]  workgroup_id QString [required]
    */
    virtual void getTaskTypesOfWorkgroup(const QString &workgroup_id);

    /**
    * @param[in]  workgroup_id QString [required]
    */
    virtual void getWgTaskStatusListOfWorkgroup(const QString &workgroup_id);

    /**
    * @param[in]  workgroup_id QString [required]
    * @param[in]  project_id QString [required]
    * @param[in]  oai_task_persist_vo OAITaskPersistVO [optional]
    */
    virtual void postTaskForProject(const QString &workgroup_id, const QString &project_id, const ::OpenAPI::OptionalParam<OAITaskPersistVO> &oai_task_persist_vo = ::OpenAPI::OptionalParam<OAITaskPersistVO>());

    /**
    * @param[in]  workgroup_id QString [required]
    */
    virtual void taskPriorityList(const QString &workgroup_id);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void getCustomTaskTypesOfWgCallback(OAIHttpRequestWorker *worker);
    void getDefaultTaskStatusListCallback(OAIHttpRequestWorker *worker);
    void getTaskListOfProjectCallback(OAIHttpRequestWorker *worker);
    void getTaskListOfWorkgroupCallback(OAIHttpRequestWorker *worker);
    void getTaskOfProjectCallback(OAIHttpRequestWorker *worker);
    void getTaskOfWorkgroupCallback(OAIHttpRequestWorker *worker);
    void getTaskTypesOfWorkgroupCallback(OAIHttpRequestWorker *worker);
    void getWgTaskStatusListOfWorkgroupCallback(OAIHttpRequestWorker *worker);
    void postTaskForProjectCallback(OAIHttpRequestWorker *worker);
    void taskPriorityListCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void getCustomTaskTypesOfWgSignal(OAITaskTypeListVO summary);
    void getDefaultTaskStatusListSignal(OAITaskStatusListVO summary);
    void getTaskListOfProjectSignal(OAITaskListVO summary);
    void getTaskListOfWorkgroupSignal(OAITaskWorkgroupLevelListVO summary);
    void getTaskOfProjectSignal(OAITaskExpandVO summary);
    void getTaskOfWorkgroupSignal(OAITaskExpandWorkgroupLevelVO summary);
    void getTaskTypesOfWorkgroupSignal(OAITaskTypeListVO summary);
    void getWgTaskStatusListOfWorkgroupSignal(OAIWgTaskStatusListVO summary);
    void postTaskForProjectSignal(OAITaskCreatedVO summary);
    void taskPriorityListSignal(OAITaskPriorityListVO summary);


    void getCustomTaskTypesOfWgSignalFull(OAIHttpRequestWorker *worker, OAITaskTypeListVO summary);
    void getDefaultTaskStatusListSignalFull(OAIHttpRequestWorker *worker, OAITaskStatusListVO summary);
    void getTaskListOfProjectSignalFull(OAIHttpRequestWorker *worker, OAITaskListVO summary);
    void getTaskListOfWorkgroupSignalFull(OAIHttpRequestWorker *worker, OAITaskWorkgroupLevelListVO summary);
    void getTaskOfProjectSignalFull(OAIHttpRequestWorker *worker, OAITaskExpandVO summary);
    void getTaskOfWorkgroupSignalFull(OAIHttpRequestWorker *worker, OAITaskExpandWorkgroupLevelVO summary);
    void getTaskTypesOfWorkgroupSignalFull(OAIHttpRequestWorker *worker, OAITaskTypeListVO summary);
    void getWgTaskStatusListOfWorkgroupSignalFull(OAIHttpRequestWorker *worker, OAIWgTaskStatusListVO summary);
    void postTaskForProjectSignalFull(OAIHttpRequestWorker *worker, OAITaskCreatedVO summary);
    void taskPriorityListSignalFull(OAIHttpRequestWorker *worker, OAITaskPriorityListVO summary);

    Q_DECL_DEPRECATED_X("Use getCustomTaskTypesOfWgSignalError() instead")
    void getCustomTaskTypesOfWgSignalE(OAITaskTypeListVO summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCustomTaskTypesOfWgSignalError(OAITaskTypeListVO summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDefaultTaskStatusListSignalError() instead")
    void getDefaultTaskStatusListSignalE(OAITaskStatusListVO summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDefaultTaskStatusListSignalError(OAITaskStatusListVO summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTaskListOfProjectSignalError() instead")
    void getTaskListOfProjectSignalE(OAITaskListVO summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getTaskListOfProjectSignalError(OAITaskListVO summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTaskListOfWorkgroupSignalError() instead")
    void getTaskListOfWorkgroupSignalE(OAITaskWorkgroupLevelListVO summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getTaskListOfWorkgroupSignalError(OAITaskWorkgroupLevelListVO summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTaskOfProjectSignalError() instead")
    void getTaskOfProjectSignalE(OAITaskExpandVO summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getTaskOfProjectSignalError(OAITaskExpandVO summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTaskOfWorkgroupSignalError() instead")
    void getTaskOfWorkgroupSignalE(OAITaskExpandWorkgroupLevelVO summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getTaskOfWorkgroupSignalError(OAITaskExpandWorkgroupLevelVO summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTaskTypesOfWorkgroupSignalError() instead")
    void getTaskTypesOfWorkgroupSignalE(OAITaskTypeListVO summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getTaskTypesOfWorkgroupSignalError(OAITaskTypeListVO summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getWgTaskStatusListOfWorkgroupSignalError() instead")
    void getWgTaskStatusListOfWorkgroupSignalE(OAIWgTaskStatusListVO summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getWgTaskStatusListOfWorkgroupSignalError(OAIWgTaskStatusListVO summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postTaskForProjectSignalError() instead")
    void postTaskForProjectSignalE(OAITaskCreatedVO summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postTaskForProjectSignalError(OAITaskCreatedVO summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use taskPriorityListSignalError() instead")
    void taskPriorityListSignalE(OAITaskPriorityListVO summary, QNetworkReply::NetworkError error_type, QString error_str);
    void taskPriorityListSignalError(OAITaskPriorityListVO summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use getCustomTaskTypesOfWgSignalErrorFull() instead")
    void getCustomTaskTypesOfWgSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCustomTaskTypesOfWgSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getDefaultTaskStatusListSignalErrorFull() instead")
    void getDefaultTaskStatusListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDefaultTaskStatusListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTaskListOfProjectSignalErrorFull() instead")
    void getTaskListOfProjectSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getTaskListOfProjectSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTaskListOfWorkgroupSignalErrorFull() instead")
    void getTaskListOfWorkgroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getTaskListOfWorkgroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTaskOfProjectSignalErrorFull() instead")
    void getTaskOfProjectSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getTaskOfProjectSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTaskOfWorkgroupSignalErrorFull() instead")
    void getTaskOfWorkgroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getTaskOfWorkgroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTaskTypesOfWorkgroupSignalErrorFull() instead")
    void getTaskTypesOfWorkgroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getTaskTypesOfWorkgroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getWgTaskStatusListOfWorkgroupSignalErrorFull() instead")
    void getWgTaskStatusListOfWorkgroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getWgTaskStatusListOfWorkgroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postTaskForProjectSignalErrorFull() instead")
    void postTaskForProjectSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postTaskForProjectSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use taskPriorityListSignalErrorFull() instead")
    void taskPriorityListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void taskPriorityListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
