/**
 * Noosh API application
 * Full description of Noosh API
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRfeSpecPO.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRfeSpecPO::OAIRfeSpecPO(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRfeSpecPO::OAIRfeSpecPO() {
    this->initializeModel();
}

OAIRfeSpecPO::~OAIRfeSpecPO() {}

void OAIRfeSpecPO::initializeModel() {

    m_quantity_1_isSet = false;
    m_quantity_1_isValid = false;

    m_quantity_2_isSet = false;
    m_quantity_2_isValid = false;

    m_quantity_3_isSet = false;
    m_quantity_3_isValid = false;

    m_quantity_4_isSet = false;
    m_quantity_4_isValid = false;

    m_quantity_5_isSet = false;
    m_quantity_5_isValid = false;

    m_spec_id_isSet = false;
    m_spec_id_isValid = false;
}

void OAIRfeSpecPO::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRfeSpecPO::fromJsonObject(QJsonObject json) {

    m_quantity_1_isValid = ::OpenAPI::fromJsonValue(m_quantity_1, json[QString("quantity_1")]);
    m_quantity_1_isSet = !json[QString("quantity_1")].isNull() && m_quantity_1_isValid;

    m_quantity_2_isValid = ::OpenAPI::fromJsonValue(m_quantity_2, json[QString("quantity_2")]);
    m_quantity_2_isSet = !json[QString("quantity_2")].isNull() && m_quantity_2_isValid;

    m_quantity_3_isValid = ::OpenAPI::fromJsonValue(m_quantity_3, json[QString("quantity_3")]);
    m_quantity_3_isSet = !json[QString("quantity_3")].isNull() && m_quantity_3_isValid;

    m_quantity_4_isValid = ::OpenAPI::fromJsonValue(m_quantity_4, json[QString("quantity_4")]);
    m_quantity_4_isSet = !json[QString("quantity_4")].isNull() && m_quantity_4_isValid;

    m_quantity_5_isValid = ::OpenAPI::fromJsonValue(m_quantity_5, json[QString("quantity_5")]);
    m_quantity_5_isSet = !json[QString("quantity_5")].isNull() && m_quantity_5_isValid;

    m_spec_id_isValid = ::OpenAPI::fromJsonValue(m_spec_id, json[QString("spec_id")]);
    m_spec_id_isSet = !json[QString("spec_id")].isNull() && m_spec_id_isValid;
}

QString OAIRfeSpecPO::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRfeSpecPO::asJsonObject() const {
    QJsonObject obj;
    if (m_quantity_1_isSet) {
        obj.insert(QString("quantity_1"), ::OpenAPI::toJsonValue(m_quantity_1));
    }
    if (m_quantity_2_isSet) {
        obj.insert(QString("quantity_2"), ::OpenAPI::toJsonValue(m_quantity_2));
    }
    if (m_quantity_3_isSet) {
        obj.insert(QString("quantity_3"), ::OpenAPI::toJsonValue(m_quantity_3));
    }
    if (m_quantity_4_isSet) {
        obj.insert(QString("quantity_4"), ::OpenAPI::toJsonValue(m_quantity_4));
    }
    if (m_quantity_5_isSet) {
        obj.insert(QString("quantity_5"), ::OpenAPI::toJsonValue(m_quantity_5));
    }
    if (m_spec_id_isSet) {
        obj.insert(QString("spec_id"), ::OpenAPI::toJsonValue(m_spec_id));
    }
    return obj;
}

qint64 OAIRfeSpecPO::getQuantity1() const {
    return m_quantity_1;
}
void OAIRfeSpecPO::setQuantity1(const qint64 &quantity_1) {
    m_quantity_1 = quantity_1;
    m_quantity_1_isSet = true;
}

bool OAIRfeSpecPO::is_quantity_1_Set() const{
    return m_quantity_1_isSet;
}

bool OAIRfeSpecPO::is_quantity_1_Valid() const{
    return m_quantity_1_isValid;
}

qint64 OAIRfeSpecPO::getQuantity2() const {
    return m_quantity_2;
}
void OAIRfeSpecPO::setQuantity2(const qint64 &quantity_2) {
    m_quantity_2 = quantity_2;
    m_quantity_2_isSet = true;
}

bool OAIRfeSpecPO::is_quantity_2_Set() const{
    return m_quantity_2_isSet;
}

bool OAIRfeSpecPO::is_quantity_2_Valid() const{
    return m_quantity_2_isValid;
}

qint64 OAIRfeSpecPO::getQuantity3() const {
    return m_quantity_3;
}
void OAIRfeSpecPO::setQuantity3(const qint64 &quantity_3) {
    m_quantity_3 = quantity_3;
    m_quantity_3_isSet = true;
}

bool OAIRfeSpecPO::is_quantity_3_Set() const{
    return m_quantity_3_isSet;
}

bool OAIRfeSpecPO::is_quantity_3_Valid() const{
    return m_quantity_3_isValid;
}

qint64 OAIRfeSpecPO::getQuantity4() const {
    return m_quantity_4;
}
void OAIRfeSpecPO::setQuantity4(const qint64 &quantity_4) {
    m_quantity_4 = quantity_4;
    m_quantity_4_isSet = true;
}

bool OAIRfeSpecPO::is_quantity_4_Set() const{
    return m_quantity_4_isSet;
}

bool OAIRfeSpecPO::is_quantity_4_Valid() const{
    return m_quantity_4_isValid;
}

qint64 OAIRfeSpecPO::getQuantity5() const {
    return m_quantity_5;
}
void OAIRfeSpecPO::setQuantity5(const qint64 &quantity_5) {
    m_quantity_5 = quantity_5;
    m_quantity_5_isSet = true;
}

bool OAIRfeSpecPO::is_quantity_5_Set() const{
    return m_quantity_5_isSet;
}

bool OAIRfeSpecPO::is_quantity_5_Valid() const{
    return m_quantity_5_isValid;
}

qint64 OAIRfeSpecPO::getSpecId() const {
    return m_spec_id;
}
void OAIRfeSpecPO::setSpecId(const qint64 &spec_id) {
    m_spec_id = spec_id;
    m_spec_id_isSet = true;
}

bool OAIRfeSpecPO::is_spec_id_Set() const{
    return m_spec_id_isSet;
}

bool OAIRfeSpecPO::is_spec_id_Valid() const{
    return m_spec_id_isValid;
}

bool OAIRfeSpecPO::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_quantity_1_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quantity_2_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quantity_3_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quantity_4_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quantity_5_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_spec_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRfeSpecPO::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
