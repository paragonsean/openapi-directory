/**
 * Noosh API application
 * Full description of Noosh API
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOrderPO.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOrderPO::OAIOrderPO(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOrderPO::OAIOrderPO() {
    this->initializeModel();
}

OAIOrderPO::~OAIOrderPO() {}

void OAIOrderPO::initializeModel() {

    m_buyer_user_id_isSet = false;
    m_buyer_user_id_isValid = false;

    m_comments_isSet = false;
    m_comments_isValid = false;

    m_custom_fields_isSet = false;
    m_custom_fields_isValid = false;

    m_invoice_or_billing_recipient_isSet = false;
    m_invoice_or_billing_recipient_isValid = false;

    m_order_completion_date_isSet = false;
    m_order_completion_date_isValid = false;

    m_order_items_isSet = false;
    m_order_items_isValid = false;

    m_other_selection_reason_isSet = false;
    m_other_selection_reason_isValid = false;

    m_payment_method_id_isSet = false;
    m_payment_method_id_isValid = false;

    m_payment_reference_no_isSet = false;
    m_payment_reference_no_isValid = false;

    m_sell_order_isSet = false;
    m_sell_order_isValid = false;

    m_shipping_isSet = false;
    m_shipping_isValid = false;

    m_supplier_reference_isSet = false;
    m_supplier_reference_isValid = false;

    m_supplier_selection_reason_id_isSet = false;
    m_supplier_selection_reason_id_isValid = false;

    m_supplier_user_id_isSet = false;
    m_supplier_user_id_isValid = false;

    m_tax_isSet = false;
    m_tax_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;
}

void OAIOrderPO::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOrderPO::fromJsonObject(QJsonObject json) {

    m_buyer_user_id_isValid = ::OpenAPI::fromJsonValue(m_buyer_user_id, json[QString("buyer_user_id")]);
    m_buyer_user_id_isSet = !json[QString("buyer_user_id")].isNull() && m_buyer_user_id_isValid;

    m_comments_isValid = ::OpenAPI::fromJsonValue(m_comments, json[QString("comments")]);
    m_comments_isSet = !json[QString("comments")].isNull() && m_comments_isValid;

    m_custom_fields_isValid = ::OpenAPI::fromJsonValue(m_custom_fields, json[QString("custom_fields")]);
    m_custom_fields_isSet = !json[QString("custom_fields")].isNull() && m_custom_fields_isValid;

    m_invoice_or_billing_recipient_isValid = ::OpenAPI::fromJsonValue(m_invoice_or_billing_recipient, json[QString("invoice_or_billing_recipient")]);
    m_invoice_or_billing_recipient_isSet = !json[QString("invoice_or_billing_recipient")].isNull() && m_invoice_or_billing_recipient_isValid;

    m_order_completion_date_isValid = ::OpenAPI::fromJsonValue(m_order_completion_date, json[QString("order_completion_date")]);
    m_order_completion_date_isSet = !json[QString("order_completion_date")].isNull() && m_order_completion_date_isValid;

    m_order_items_isValid = ::OpenAPI::fromJsonValue(m_order_items, json[QString("order_items")]);
    m_order_items_isSet = !json[QString("order_items")].isNull() && m_order_items_isValid;

    m_other_selection_reason_isValid = ::OpenAPI::fromJsonValue(m_other_selection_reason, json[QString("other_selection_reason")]);
    m_other_selection_reason_isSet = !json[QString("other_selection_reason")].isNull() && m_other_selection_reason_isValid;

    m_payment_method_id_isValid = ::OpenAPI::fromJsonValue(m_payment_method_id, json[QString("payment_method_id")]);
    m_payment_method_id_isSet = !json[QString("payment_method_id")].isNull() && m_payment_method_id_isValid;

    m_payment_reference_no_isValid = ::OpenAPI::fromJsonValue(m_payment_reference_no, json[QString("payment_reference_no")]);
    m_payment_reference_no_isSet = !json[QString("payment_reference_no")].isNull() && m_payment_reference_no_isValid;

    m_sell_order_isValid = ::OpenAPI::fromJsonValue(m_sell_order, json[QString("sellOrder")]);
    m_sell_order_isSet = !json[QString("sellOrder")].isNull() && m_sell_order_isValid;

    m_shipping_isValid = ::OpenAPI::fromJsonValue(m_shipping, json[QString("shipping")]);
    m_shipping_isSet = !json[QString("shipping")].isNull() && m_shipping_isValid;

    m_supplier_reference_isValid = ::OpenAPI::fromJsonValue(m_supplier_reference, json[QString("supplier_reference")]);
    m_supplier_reference_isSet = !json[QString("supplier_reference")].isNull() && m_supplier_reference_isValid;

    m_supplier_selection_reason_id_isValid = ::OpenAPI::fromJsonValue(m_supplier_selection_reason_id, json[QString("supplier_selection_reason_id")]);
    m_supplier_selection_reason_id_isSet = !json[QString("supplier_selection_reason_id")].isNull() && m_supplier_selection_reason_id_isValid;

    m_supplier_user_id_isValid = ::OpenAPI::fromJsonValue(m_supplier_user_id, json[QString("supplier_user_id")]);
    m_supplier_user_id_isSet = !json[QString("supplier_user_id")].isNull() && m_supplier_user_id_isValid;

    m_tax_isValid = ::OpenAPI::fromJsonValue(m_tax, json[QString("tax")]);
    m_tax_isSet = !json[QString("tax")].isNull() && m_tax_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;
}

QString OAIOrderPO::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOrderPO::asJsonObject() const {
    QJsonObject obj;
    if (m_buyer_user_id_isSet) {
        obj.insert(QString("buyer_user_id"), ::OpenAPI::toJsonValue(m_buyer_user_id));
    }
    if (m_comments_isSet) {
        obj.insert(QString("comments"), ::OpenAPI::toJsonValue(m_comments));
    }
    if (m_custom_fields.size() > 0) {
        obj.insert(QString("custom_fields"), ::OpenAPI::toJsonValue(m_custom_fields));
    }
    if (m_invoice_or_billing_recipient_isSet) {
        obj.insert(QString("invoice_or_billing_recipient"), ::OpenAPI::toJsonValue(m_invoice_or_billing_recipient));
    }
    if (m_order_completion_date_isSet) {
        obj.insert(QString("order_completion_date"), ::OpenAPI::toJsonValue(m_order_completion_date));
    }
    if (m_order_items.size() > 0) {
        obj.insert(QString("order_items"), ::OpenAPI::toJsonValue(m_order_items));
    }
    if (m_other_selection_reason_isSet) {
        obj.insert(QString("other_selection_reason"), ::OpenAPI::toJsonValue(m_other_selection_reason));
    }
    if (m_payment_method_id_isSet) {
        obj.insert(QString("payment_method_id"), ::OpenAPI::toJsonValue(m_payment_method_id));
    }
    if (m_payment_reference_no_isSet) {
        obj.insert(QString("payment_reference_no"), ::OpenAPI::toJsonValue(m_payment_reference_no));
    }
    if (m_sell_order_isSet) {
        obj.insert(QString("sellOrder"), ::OpenAPI::toJsonValue(m_sell_order));
    }
    if (m_shipping_isSet) {
        obj.insert(QString("shipping"), ::OpenAPI::toJsonValue(m_shipping));
    }
    if (m_supplier_reference_isSet) {
        obj.insert(QString("supplier_reference"), ::OpenAPI::toJsonValue(m_supplier_reference));
    }
    if (m_supplier_selection_reason_id_isSet) {
        obj.insert(QString("supplier_selection_reason_id"), ::OpenAPI::toJsonValue(m_supplier_selection_reason_id));
    }
    if (m_supplier_user_id_isSet) {
        obj.insert(QString("supplier_user_id"), ::OpenAPI::toJsonValue(m_supplier_user_id));
    }
    if (m_tax_isSet) {
        obj.insert(QString("tax"), ::OpenAPI::toJsonValue(m_tax));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    return obj;
}

qint64 OAIOrderPO::getBuyerUserId() const {
    return m_buyer_user_id;
}
void OAIOrderPO::setBuyerUserId(const qint64 &buyer_user_id) {
    m_buyer_user_id = buyer_user_id;
    m_buyer_user_id_isSet = true;
}

bool OAIOrderPO::is_buyer_user_id_Set() const{
    return m_buyer_user_id_isSet;
}

bool OAIOrderPO::is_buyer_user_id_Valid() const{
    return m_buyer_user_id_isValid;
}

QString OAIOrderPO::getComments() const {
    return m_comments;
}
void OAIOrderPO::setComments(const QString &comments) {
    m_comments = comments;
    m_comments_isSet = true;
}

bool OAIOrderPO::is_comments_Set() const{
    return m_comments_isSet;
}

bool OAIOrderPO::is_comments_Valid() const{
    return m_comments_isValid;
}

QList<OAICustomFieldPersistVO> OAIOrderPO::getCustomFields() const {
    return m_custom_fields;
}
void OAIOrderPO::setCustomFields(const QList<OAICustomFieldPersistVO> &custom_fields) {
    m_custom_fields = custom_fields;
    m_custom_fields_isSet = true;
}

bool OAIOrderPO::is_custom_fields_Set() const{
    return m_custom_fields_isSet;
}

bool OAIOrderPO::is_custom_fields_Valid() const{
    return m_custom_fields_isValid;
}

qint64 OAIOrderPO::getInvoiceOrBillingRecipient() const {
    return m_invoice_or_billing_recipient;
}
void OAIOrderPO::setInvoiceOrBillingRecipient(const qint64 &invoice_or_billing_recipient) {
    m_invoice_or_billing_recipient = invoice_or_billing_recipient;
    m_invoice_or_billing_recipient_isSet = true;
}

bool OAIOrderPO::is_invoice_or_billing_recipient_Set() const{
    return m_invoice_or_billing_recipient_isSet;
}

bool OAIOrderPO::is_invoice_or_billing_recipient_Valid() const{
    return m_invoice_or_billing_recipient_isValid;
}

QDate OAIOrderPO::getOrderCompletionDate() const {
    return m_order_completion_date;
}
void OAIOrderPO::setOrderCompletionDate(const QDate &order_completion_date) {
    m_order_completion_date = order_completion_date;
    m_order_completion_date_isSet = true;
}

bool OAIOrderPO::is_order_completion_date_Set() const{
    return m_order_completion_date_isSet;
}

bool OAIOrderPO::is_order_completion_date_Valid() const{
    return m_order_completion_date_isValid;
}

QList<OAIOrderItemPersistVO> OAIOrderPO::getOrderItems() const {
    return m_order_items;
}
void OAIOrderPO::setOrderItems(const QList<OAIOrderItemPersistVO> &order_items) {
    m_order_items = order_items;
    m_order_items_isSet = true;
}

bool OAIOrderPO::is_order_items_Set() const{
    return m_order_items_isSet;
}

bool OAIOrderPO::is_order_items_Valid() const{
    return m_order_items_isValid;
}

QString OAIOrderPO::getOtherSelectionReason() const {
    return m_other_selection_reason;
}
void OAIOrderPO::setOtherSelectionReason(const QString &other_selection_reason) {
    m_other_selection_reason = other_selection_reason;
    m_other_selection_reason_isSet = true;
}

bool OAIOrderPO::is_other_selection_reason_Set() const{
    return m_other_selection_reason_isSet;
}

bool OAIOrderPO::is_other_selection_reason_Valid() const{
    return m_other_selection_reason_isValid;
}

qint64 OAIOrderPO::getPaymentMethodId() const {
    return m_payment_method_id;
}
void OAIOrderPO::setPaymentMethodId(const qint64 &payment_method_id) {
    m_payment_method_id = payment_method_id;
    m_payment_method_id_isSet = true;
}

bool OAIOrderPO::is_payment_method_id_Set() const{
    return m_payment_method_id_isSet;
}

bool OAIOrderPO::is_payment_method_id_Valid() const{
    return m_payment_method_id_isValid;
}

QString OAIOrderPO::getPaymentReferenceNo() const {
    return m_payment_reference_no;
}
void OAIOrderPO::setPaymentReferenceNo(const QString &payment_reference_no) {
    m_payment_reference_no = payment_reference_no;
    m_payment_reference_no_isSet = true;
}

bool OAIOrderPO::is_payment_reference_no_Set() const{
    return m_payment_reference_no_isSet;
}

bool OAIOrderPO::is_payment_reference_no_Valid() const{
    return m_payment_reference_no_isValid;
}

bool OAIOrderPO::isSellOrder() const {
    return m_sell_order;
}
void OAIOrderPO::setSellOrder(const bool &sell_order) {
    m_sell_order = sell_order;
    m_sell_order_isSet = true;
}

bool OAIOrderPO::is_sell_order_Set() const{
    return m_sell_order_isSet;
}

bool OAIOrderPO::is_sell_order_Valid() const{
    return m_sell_order_isValid;
}

QJsonValue OAIOrderPO::getShipping() const {
    return m_shipping;
}
void OAIOrderPO::setShipping(const QJsonValue &shipping) {
    m_shipping = shipping;
    m_shipping_isSet = true;
}

bool OAIOrderPO::is_shipping_Set() const{
    return m_shipping_isSet;
}

bool OAIOrderPO::is_shipping_Valid() const{
    return m_shipping_isValid;
}

QString OAIOrderPO::getSupplierReference() const {
    return m_supplier_reference;
}
void OAIOrderPO::setSupplierReference(const QString &supplier_reference) {
    m_supplier_reference = supplier_reference;
    m_supplier_reference_isSet = true;
}

bool OAIOrderPO::is_supplier_reference_Set() const{
    return m_supplier_reference_isSet;
}

bool OAIOrderPO::is_supplier_reference_Valid() const{
    return m_supplier_reference_isValid;
}

qint64 OAIOrderPO::getSupplierSelectionReasonId() const {
    return m_supplier_selection_reason_id;
}
void OAIOrderPO::setSupplierSelectionReasonId(const qint64 &supplier_selection_reason_id) {
    m_supplier_selection_reason_id = supplier_selection_reason_id;
    m_supplier_selection_reason_id_isSet = true;
}

bool OAIOrderPO::is_supplier_selection_reason_id_Set() const{
    return m_supplier_selection_reason_id_isSet;
}

bool OAIOrderPO::is_supplier_selection_reason_id_Valid() const{
    return m_supplier_selection_reason_id_isValid;
}

qint64 OAIOrderPO::getSupplierUserId() const {
    return m_supplier_user_id;
}
void OAIOrderPO::setSupplierUserId(const qint64 &supplier_user_id) {
    m_supplier_user_id = supplier_user_id;
    m_supplier_user_id_isSet = true;
}

bool OAIOrderPO::is_supplier_user_id_Set() const{
    return m_supplier_user_id_isSet;
}

bool OAIOrderPO::is_supplier_user_id_Valid() const{
    return m_supplier_user_id_isValid;
}

QString OAIOrderPO::getTax() const {
    return m_tax;
}
void OAIOrderPO::setTax(const QString &tax) {
    m_tax = tax;
    m_tax_isSet = true;
}

bool OAIOrderPO::is_tax_Set() const{
    return m_tax_isSet;
}

bool OAIOrderPO::is_tax_Valid() const{
    return m_tax_isValid;
}

QString OAIOrderPO::getTitle() const {
    return m_title;
}
void OAIOrderPO::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIOrderPO::is_title_Set() const{
    return m_title_isSet;
}

bool OAIOrderPO::is_title_Valid() const{
    return m_title_isValid;
}

bool OAIOrderPO::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_buyer_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_comments_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_fields.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_invoice_or_billing_recipient_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_order_completion_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_order_items.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_other_selection_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_method_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_reference_no_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sell_order_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shipping_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_supplier_reference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_supplier_selection_reason_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_supplier_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tax_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOrderPO::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
