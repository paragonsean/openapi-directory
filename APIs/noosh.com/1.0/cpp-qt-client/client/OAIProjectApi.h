/**
 * Noosh API application
 * Full description of Noosh API
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIProjectApi_H
#define OAI_OAIProjectApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIHTTPStatusVO.h"
#include "OAIProjectExpandVO.h"
#include "OAIProjectIdListVO.h"
#include "OAIProjectListVO.h"
#include "OAIProjectPatchPO.h"
#include "OAIProjectPersistVO.h"
#include "OAIProjectVO.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIProjectApi : public QObject {
    Q_OBJECT

public:
    OAIProjectApi(const int timeOut = 0);
    ~OAIProjectApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  workgroup_id QString [required]
    * @param[in]  project_id QString [required]
    * @param[in]  oai_project_id_list_vo OAIProjectIdListVO [optional]
    */
    virtual void attachProject(const QString &workgroup_id, const QString &project_id, const ::OpenAPI::OptionalParam<OAIProjectIdListVO> &oai_project_id_list_vo = ::OpenAPI::OptionalParam<OAIProjectIdListVO>());

    /**
    * @param[in]  workgroup_id QString [required]
    * @param[in]  project_id QString [required]
    */
    virtual void deleteProject(const QString &workgroup_id, const QString &project_id);

    /**
    * @param[in]  workgroup_id QString [required]
    * @param[in]  project_id QString [required]
    */
    virtual void getProject(const QString &workgroup_id, const QString &project_id);

    /**
    * @param[in]  workgroup_id QString [required]
    */
    virtual void getProjectList(const QString &workgroup_id);

    /**
    * @param[in]  workgroup_id QString [required]
    * @param[in]  project_id QString [required]
    * @param[in]  oai_project_patch_po OAIProjectPatchPO [optional]
    */
    virtual void patchProject(const QString &workgroup_id, const QString &project_id, const ::OpenAPI::OptionalParam<OAIProjectPatchPO> &oai_project_patch_po = ::OpenAPI::OptionalParam<OAIProjectPatchPO>());

    /**
    * @param[in]  workgroup_id QString [required]
    * @param[in]  oai_project_persist_vo OAIProjectPersistVO [optional]
    */
    virtual void postProject(const QString &workgroup_id, const ::OpenAPI::OptionalParam<OAIProjectPersistVO> &oai_project_persist_vo = ::OpenAPI::OptionalParam<OAIProjectPersistVO>());

    /**
    * @param[in]  workgroup_id QString [required]
    * @param[in]  project_id QString [required]
    * @param[in]  oai_project_persist_vo OAIProjectPersistVO [optional]
    */
    virtual void putProject(const QString &workgroup_id, const QString &project_id, const ::OpenAPI::OptionalParam<OAIProjectPersistVO> &oai_project_persist_vo = ::OpenAPI::OptionalParam<OAIProjectPersistVO>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void attachProjectCallback(OAIHttpRequestWorker *worker);
    void deleteProjectCallback(OAIHttpRequestWorker *worker);
    void getProjectCallback(OAIHttpRequestWorker *worker);
    void getProjectListCallback(OAIHttpRequestWorker *worker);
    void patchProjectCallback(OAIHttpRequestWorker *worker);
    void postProjectCallback(OAIHttpRequestWorker *worker);
    void putProjectCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void attachProjectSignal(OAIHTTPStatusVO summary);
    void deleteProjectSignal(OAIHTTPStatusVO summary);
    void getProjectSignal(OAIProjectExpandVO summary);
    void getProjectListSignal(OAIProjectListVO summary);
    void patchProjectSignal(OAIHTTPStatusVO summary);
    void postProjectSignal(OAIProjectVO summary);
    void putProjectSignal(OAIHTTPStatusVO summary);


    void attachProjectSignalFull(OAIHttpRequestWorker *worker, OAIHTTPStatusVO summary);
    void deleteProjectSignalFull(OAIHttpRequestWorker *worker, OAIHTTPStatusVO summary);
    void getProjectSignalFull(OAIHttpRequestWorker *worker, OAIProjectExpandVO summary);
    void getProjectListSignalFull(OAIHttpRequestWorker *worker, OAIProjectListVO summary);
    void patchProjectSignalFull(OAIHttpRequestWorker *worker, OAIHTTPStatusVO summary);
    void postProjectSignalFull(OAIHttpRequestWorker *worker, OAIProjectVO summary);
    void putProjectSignalFull(OAIHttpRequestWorker *worker, OAIHTTPStatusVO summary);

    Q_DECL_DEPRECATED_X("Use attachProjectSignalError() instead")
    void attachProjectSignalE(OAIHTTPStatusVO summary, QNetworkReply::NetworkError error_type, QString error_str);
    void attachProjectSignalError(OAIHTTPStatusVO summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteProjectSignalError() instead")
    void deleteProjectSignalE(OAIHTTPStatusVO summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteProjectSignalError(OAIHTTPStatusVO summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getProjectSignalError() instead")
    void getProjectSignalE(OAIProjectExpandVO summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getProjectSignalError(OAIProjectExpandVO summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getProjectListSignalError() instead")
    void getProjectListSignalE(OAIProjectListVO summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getProjectListSignalError(OAIProjectListVO summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use patchProjectSignalError() instead")
    void patchProjectSignalE(OAIHTTPStatusVO summary, QNetworkReply::NetworkError error_type, QString error_str);
    void patchProjectSignalError(OAIHTTPStatusVO summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postProjectSignalError() instead")
    void postProjectSignalE(OAIProjectVO summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postProjectSignalError(OAIProjectVO summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putProjectSignalError() instead")
    void putProjectSignalE(OAIHTTPStatusVO summary, QNetworkReply::NetworkError error_type, QString error_str);
    void putProjectSignalError(OAIHTTPStatusVO summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use attachProjectSignalErrorFull() instead")
    void attachProjectSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void attachProjectSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteProjectSignalErrorFull() instead")
    void deleteProjectSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteProjectSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getProjectSignalErrorFull() instead")
    void getProjectSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getProjectSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getProjectListSignalErrorFull() instead")
    void getProjectListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getProjectListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use patchProjectSignalErrorFull() instead")
    void patchProjectSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void patchProjectSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postProjectSignalErrorFull() instead")
    void postProjectSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postProjectSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putProjectSignalErrorFull() instead")
    void putProjectSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void putProjectSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
