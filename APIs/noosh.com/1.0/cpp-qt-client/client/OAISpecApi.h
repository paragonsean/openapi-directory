/**
 * Noosh API application
 * Full description of Noosh API
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAISpecApi_H
#define OAI_OAISpecApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIHTTPStatusVO.h"
#include "OAIPropertyParamListVO.h"
#include "OAISpecHTTPStatusVO.h"
#include "OAISpecListVO.h"
#include "OAISpecPersistVO.h"
#include "OAISpecTypeFieldsListVO.h"
#include "OAISpecUpdatePersistVO.h"
#include "OAISpecVO.h"
#include "OAIV1X1SpecUpdatingPO.h"
#include "OAIV1x1SpecExpandVO.h"
#include "OAIWgSpecPrdTypeRegPersistVO.h"
#include "OAIWorkgroupAttributeListVO.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAISpecApi : public QObject {
    Q_OBJECT

public:
    OAISpecApi(const int timeOut = 0);
    ~OAISpecApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  workgroup_id QString [required]
    */
    virtual void getProductTypeListOfWorkgroup(const QString &workgroup_id);

    /**
    * @param[in]  workgroup_id QString [required]
    * @param[in]  project_id QString [required]
    * @param[in]  spec_id QString [required]
    */
    virtual void getSpec(const QString &workgroup_id, const QString &project_id, const QString &spec_id);

    /**
    * @param[in]  workgroup_id QString [required]
    * @param[in]  project_id QString [required]
    */
    virtual void getSpecList(const QString &workgroup_id, const QString &project_id);

    /**
    * @param[in]  workgroup_id QString [required]
    */
    virtual void getSpecProductTypeListOfWorkgroup(const QString &workgroup_id);

    /**
    * @param[in]  workgroup_id QString [required]
    * @param[in]  spec_type_id QString [required]
    */
    virtual void getSpecTypeFields(const QString &workgroup_id, const QString &spec_type_id);

    /**
    * @param[in]  workgroup_id QString [required]
    * @param[in]  project_id QString [required]
    * @param[in]  oai_spec_persist_vo OAISpecPersistVO [optional]
    */
    virtual void postSpec(const QString &workgroup_id, const QString &project_id, const ::OpenAPI::OptionalParam<OAISpecPersistVO> &oai_spec_persist_vo = ::OpenAPI::OptionalParam<OAISpecPersistVO>());

    /**
    * @param[in]  workgroup_id QString [required]
    * @param[in]  oaiwg_spec_prd_type_reg_persist_vo OAIWgSpecPrdTypeRegPersistVO [optional]
    */
    virtual void postSpecProductTypeListOfWorkgroup(const QString &workgroup_id, const ::OpenAPI::OptionalParam<OAIWgSpecPrdTypeRegPersistVO> &oaiwg_spec_prd_type_reg_persist_vo = ::OpenAPI::OptionalParam<OAIWgSpecPrdTypeRegPersistVO>());

    /**
    * @param[in]  workgroup_id QString [required]
    * @param[in]  project_id QString [required]
    * @param[in]  spec_id QString [required]
    * @param[in]  oaiv1_x1_spec_updating_po OAIV1X1SpecUpdatingPO [optional]
    */
    virtual void putSpec(const QString &workgroup_id, const QString &project_id, const QString &spec_id, const ::OpenAPI::OptionalParam<OAIV1X1SpecUpdatingPO> &oaiv1_x1_spec_updating_po = ::OpenAPI::OptionalParam<OAIV1X1SpecUpdatingPO>());

    /**
    * @param[in]  workgroup_id QString [required]
    * @param[in]  project_id QString [required]
    * @param[in]  spec_id QString [required]
    */
    virtual void v1WorkgroupsWorkgroupIdProjectsProjectIdSpecsSpecIdGet(const QString &workgroup_id, const QString &project_id, const QString &spec_id);

    /**
    * @param[in]  workgroup_id QString [required]
    * @param[in]  project_id QString [required]
    * @param[in]  spec_id QString [required]
    * @param[in]  oai_spec_update_persist_vo OAISpecUpdatePersistVO [optional]
    */
    virtual void v1WorkgroupsWorkgroupIdProjectsProjectIdSpecsSpecIdPut(const QString &workgroup_id, const QString &project_id, const QString &spec_id, const ::OpenAPI::OptionalParam<OAISpecUpdatePersistVO> &oai_spec_update_persist_vo = ::OpenAPI::OptionalParam<OAISpecUpdatePersistVO>());

    /**
    * @param[in]  workgroup_id QString [required]
    * @param[in]  spec_type_id QString [required]
    */
    virtual void v1WorkgroupsWorkgroupIdSpecTypesSpecTypeIdSpecTypeFieldsGet(const QString &workgroup_id, const QString &spec_type_id);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void getProductTypeListOfWorkgroupCallback(OAIHttpRequestWorker *worker);
    void getSpecCallback(OAIHttpRequestWorker *worker);
    void getSpecListCallback(OAIHttpRequestWorker *worker);
    void getSpecProductTypeListOfWorkgroupCallback(OAIHttpRequestWorker *worker);
    void getSpecTypeFieldsCallback(OAIHttpRequestWorker *worker);
    void postSpecCallback(OAIHttpRequestWorker *worker);
    void postSpecProductTypeListOfWorkgroupCallback(OAIHttpRequestWorker *worker);
    void putSpecCallback(OAIHttpRequestWorker *worker);
    void v1WorkgroupsWorkgroupIdProjectsProjectIdSpecsSpecIdGetCallback(OAIHttpRequestWorker *worker);
    void v1WorkgroupsWorkgroupIdProjectsProjectIdSpecsSpecIdPutCallback(OAIHttpRequestWorker *worker);
    void v1WorkgroupsWorkgroupIdSpecTypesSpecTypeIdSpecTypeFieldsGetCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void getProductTypeListOfWorkgroupSignal(OAIWorkgroupAttributeListVO summary);
    void getSpecSignal(OAIV1x1SpecExpandVO summary);
    void getSpecListSignal(OAISpecListVO summary);
    void getSpecProductTypeListOfWorkgroupSignal(OAIWorkgroupAttributeListVO summary);
    void getSpecTypeFieldsSignal(OAISpecTypeFieldsListVO summary);
    void postSpecSignal(OAISpecVO summary);
    void postSpecProductTypeListOfWorkgroupSignal(OAIWgSpecPrdTypeRegPersistVO summary);
    void putSpecSignal(OAISpecHTTPStatusVO summary);
    void v1WorkgroupsWorkgroupIdProjectsProjectIdSpecsSpecIdGetSignal(OAISpecListVO summary);
    void v1WorkgroupsWorkgroupIdProjectsProjectIdSpecsSpecIdPutSignal(OAISpecHTTPStatusVO summary);
    void v1WorkgroupsWorkgroupIdSpecTypesSpecTypeIdSpecTypeFieldsGetSignal(OAIPropertyParamListVO summary);


    void getProductTypeListOfWorkgroupSignalFull(OAIHttpRequestWorker *worker, OAIWorkgroupAttributeListVO summary);
    void getSpecSignalFull(OAIHttpRequestWorker *worker, OAIV1x1SpecExpandVO summary);
    void getSpecListSignalFull(OAIHttpRequestWorker *worker, OAISpecListVO summary);
    void getSpecProductTypeListOfWorkgroupSignalFull(OAIHttpRequestWorker *worker, OAIWorkgroupAttributeListVO summary);
    void getSpecTypeFieldsSignalFull(OAIHttpRequestWorker *worker, OAISpecTypeFieldsListVO summary);
    void postSpecSignalFull(OAIHttpRequestWorker *worker, OAISpecVO summary);
    void postSpecProductTypeListOfWorkgroupSignalFull(OAIHttpRequestWorker *worker, OAIWgSpecPrdTypeRegPersistVO summary);
    void putSpecSignalFull(OAIHttpRequestWorker *worker, OAISpecHTTPStatusVO summary);
    void v1WorkgroupsWorkgroupIdProjectsProjectIdSpecsSpecIdGetSignalFull(OAIHttpRequestWorker *worker, OAISpecListVO summary);
    void v1WorkgroupsWorkgroupIdProjectsProjectIdSpecsSpecIdPutSignalFull(OAIHttpRequestWorker *worker, OAISpecHTTPStatusVO summary);
    void v1WorkgroupsWorkgroupIdSpecTypesSpecTypeIdSpecTypeFieldsGetSignalFull(OAIHttpRequestWorker *worker, OAIPropertyParamListVO summary);

    Q_DECL_DEPRECATED_X("Use getProductTypeListOfWorkgroupSignalError() instead")
    void getProductTypeListOfWorkgroupSignalE(OAIWorkgroupAttributeListVO summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getProductTypeListOfWorkgroupSignalError(OAIWorkgroupAttributeListVO summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSpecSignalError() instead")
    void getSpecSignalE(OAIV1x1SpecExpandVO summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSpecSignalError(OAIV1x1SpecExpandVO summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSpecListSignalError() instead")
    void getSpecListSignalE(OAISpecListVO summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSpecListSignalError(OAISpecListVO summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSpecProductTypeListOfWorkgroupSignalError() instead")
    void getSpecProductTypeListOfWorkgroupSignalE(OAIWorkgroupAttributeListVO summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSpecProductTypeListOfWorkgroupSignalError(OAIWorkgroupAttributeListVO summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSpecTypeFieldsSignalError() instead")
    void getSpecTypeFieldsSignalE(OAISpecTypeFieldsListVO summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSpecTypeFieldsSignalError(OAISpecTypeFieldsListVO summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postSpecSignalError() instead")
    void postSpecSignalE(OAISpecVO summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postSpecSignalError(OAISpecVO summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postSpecProductTypeListOfWorkgroupSignalError() instead")
    void postSpecProductTypeListOfWorkgroupSignalE(OAIWgSpecPrdTypeRegPersistVO summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postSpecProductTypeListOfWorkgroupSignalError(OAIWgSpecPrdTypeRegPersistVO summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putSpecSignalError() instead")
    void putSpecSignalE(OAISpecHTTPStatusVO summary, QNetworkReply::NetworkError error_type, QString error_str);
    void putSpecSignalError(OAISpecHTTPStatusVO summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v1WorkgroupsWorkgroupIdProjectsProjectIdSpecsSpecIdGetSignalError() instead")
    void v1WorkgroupsWorkgroupIdProjectsProjectIdSpecsSpecIdGetSignalE(OAISpecListVO summary, QNetworkReply::NetworkError error_type, QString error_str);
    void v1WorkgroupsWorkgroupIdProjectsProjectIdSpecsSpecIdGetSignalError(OAISpecListVO summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v1WorkgroupsWorkgroupIdProjectsProjectIdSpecsSpecIdPutSignalError() instead")
    void v1WorkgroupsWorkgroupIdProjectsProjectIdSpecsSpecIdPutSignalE(OAISpecHTTPStatusVO summary, QNetworkReply::NetworkError error_type, QString error_str);
    void v1WorkgroupsWorkgroupIdProjectsProjectIdSpecsSpecIdPutSignalError(OAISpecHTTPStatusVO summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v1WorkgroupsWorkgroupIdSpecTypesSpecTypeIdSpecTypeFieldsGetSignalError() instead")
    void v1WorkgroupsWorkgroupIdSpecTypesSpecTypeIdSpecTypeFieldsGetSignalE(OAIPropertyParamListVO summary, QNetworkReply::NetworkError error_type, QString error_str);
    void v1WorkgroupsWorkgroupIdSpecTypesSpecTypeIdSpecTypeFieldsGetSignalError(OAIPropertyParamListVO summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use getProductTypeListOfWorkgroupSignalErrorFull() instead")
    void getProductTypeListOfWorkgroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getProductTypeListOfWorkgroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSpecSignalErrorFull() instead")
    void getSpecSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSpecSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSpecListSignalErrorFull() instead")
    void getSpecListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSpecListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSpecProductTypeListOfWorkgroupSignalErrorFull() instead")
    void getSpecProductTypeListOfWorkgroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSpecProductTypeListOfWorkgroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSpecTypeFieldsSignalErrorFull() instead")
    void getSpecTypeFieldsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSpecTypeFieldsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postSpecSignalErrorFull() instead")
    void postSpecSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postSpecSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postSpecProductTypeListOfWorkgroupSignalErrorFull() instead")
    void postSpecProductTypeListOfWorkgroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postSpecProductTypeListOfWorkgroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putSpecSignalErrorFull() instead")
    void putSpecSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void putSpecSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v1WorkgroupsWorkgroupIdProjectsProjectIdSpecsSpecIdGetSignalErrorFull() instead")
    void v1WorkgroupsWorkgroupIdProjectsProjectIdSpecsSpecIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void v1WorkgroupsWorkgroupIdProjectsProjectIdSpecsSpecIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v1WorkgroupsWorkgroupIdProjectsProjectIdSpecsSpecIdPutSignalErrorFull() instead")
    void v1WorkgroupsWorkgroupIdProjectsProjectIdSpecsSpecIdPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void v1WorkgroupsWorkgroupIdProjectsProjectIdSpecsSpecIdPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v1WorkgroupsWorkgroupIdSpecTypesSpecTypeIdSpecTypeFieldsGetSignalErrorFull() instead")
    void v1WorkgroupsWorkgroupIdSpecTypesSpecTypeIdSpecTypeFieldsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void v1WorkgroupsWorkgroupIdSpecTypesSpecTypeIdSpecTypeFieldsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
