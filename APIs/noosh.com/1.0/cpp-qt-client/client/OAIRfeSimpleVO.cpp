/**
 * Noosh API application
 * Full description of Noosh API
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRfeSimpleVO.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRfeSimpleVO::OAIRfeSimpleVO(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRfeSimpleVO::OAIRfeSimpleVO() {
    this->initializeModel();
}

OAIRfeSimpleVO::~OAIRfeSimpleVO() {}

void OAIRfeSimpleVO::initializeModel() {

    m_estimate_due_date_isSet = false;
    m_estimate_due_date_isValid = false;

    m_rfe_id_isSet = false;
    m_rfe_id_isValid = false;

    m_rfe_items_isSet = false;
    m_rfe_items_isValid = false;

    m_rfe_title_isSet = false;
    m_rfe_title_isValid = false;

    m_supplier_estimates_isSet = false;
    m_supplier_estimates_isValid = false;
}

void OAIRfeSimpleVO::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRfeSimpleVO::fromJsonObject(QJsonObject json) {

    m_estimate_due_date_isValid = ::OpenAPI::fromJsonValue(m_estimate_due_date, json[QString("estimate_due_date")]);
    m_estimate_due_date_isSet = !json[QString("estimate_due_date")].isNull() && m_estimate_due_date_isValid;

    m_rfe_id_isValid = ::OpenAPI::fromJsonValue(m_rfe_id, json[QString("rfe_id")]);
    m_rfe_id_isSet = !json[QString("rfe_id")].isNull() && m_rfe_id_isValid;

    m_rfe_items_isValid = ::OpenAPI::fromJsonValue(m_rfe_items, json[QString("rfe_items")]);
    m_rfe_items_isSet = !json[QString("rfe_items")].isNull() && m_rfe_items_isValid;

    m_rfe_title_isValid = ::OpenAPI::fromJsonValue(m_rfe_title, json[QString("rfe_title")]);
    m_rfe_title_isSet = !json[QString("rfe_title")].isNull() && m_rfe_title_isValid;

    m_supplier_estimates_isValid = ::OpenAPI::fromJsonValue(m_supplier_estimates, json[QString("supplier_estimates")]);
    m_supplier_estimates_isSet = !json[QString("supplier_estimates")].isNull() && m_supplier_estimates_isValid;
}

QString OAIRfeSimpleVO::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRfeSimpleVO::asJsonObject() const {
    QJsonObject obj;
    if (m_estimate_due_date_isSet) {
        obj.insert(QString("estimate_due_date"), ::OpenAPI::toJsonValue(m_estimate_due_date));
    }
    if (m_rfe_id_isSet) {
        obj.insert(QString("rfe_id"), ::OpenAPI::toJsonValue(m_rfe_id));
    }
    if (m_rfe_items.size() > 0) {
        obj.insert(QString("rfe_items"), ::OpenAPI::toJsonValue(m_rfe_items));
    }
    if (m_rfe_title_isSet) {
        obj.insert(QString("rfe_title"), ::OpenAPI::toJsonValue(m_rfe_title));
    }
    if (m_supplier_estimates.size() > 0) {
        obj.insert(QString("supplier_estimates"), ::OpenAPI::toJsonValue(m_supplier_estimates));
    }
    return obj;
}

QDate OAIRfeSimpleVO::getEstimateDueDate() const {
    return m_estimate_due_date;
}
void OAIRfeSimpleVO::setEstimateDueDate(const QDate &estimate_due_date) {
    m_estimate_due_date = estimate_due_date;
    m_estimate_due_date_isSet = true;
}

bool OAIRfeSimpleVO::is_estimate_due_date_Set() const{
    return m_estimate_due_date_isSet;
}

bool OAIRfeSimpleVO::is_estimate_due_date_Valid() const{
    return m_estimate_due_date_isValid;
}

qint64 OAIRfeSimpleVO::getRfeId() const {
    return m_rfe_id;
}
void OAIRfeSimpleVO::setRfeId(const qint64 &rfe_id) {
    m_rfe_id = rfe_id;
    m_rfe_id_isSet = true;
}

bool OAIRfeSimpleVO::is_rfe_id_Set() const{
    return m_rfe_id_isSet;
}

bool OAIRfeSimpleVO::is_rfe_id_Valid() const{
    return m_rfe_id_isValid;
}

QList<OAIRfeItemSimpleVO> OAIRfeSimpleVO::getRfeItems() const {
    return m_rfe_items;
}
void OAIRfeSimpleVO::setRfeItems(const QList<OAIRfeItemSimpleVO> &rfe_items) {
    m_rfe_items = rfe_items;
    m_rfe_items_isSet = true;
}

bool OAIRfeSimpleVO::is_rfe_items_Set() const{
    return m_rfe_items_isSet;
}

bool OAIRfeSimpleVO::is_rfe_items_Valid() const{
    return m_rfe_items_isValid;
}

QString OAIRfeSimpleVO::getRfeTitle() const {
    return m_rfe_title;
}
void OAIRfeSimpleVO::setRfeTitle(const QString &rfe_title) {
    m_rfe_title = rfe_title;
    m_rfe_title_isSet = true;
}

bool OAIRfeSimpleVO::is_rfe_title_Set() const{
    return m_rfe_title_isSet;
}

bool OAIRfeSimpleVO::is_rfe_title_Valid() const{
    return m_rfe_title_isValid;
}

QList<OAIRfeSuEstimateSimpleVO> OAIRfeSimpleVO::getSupplierEstimates() const {
    return m_supplier_estimates;
}
void OAIRfeSimpleVO::setSupplierEstimates(const QList<OAIRfeSuEstimateSimpleVO> &supplier_estimates) {
    m_supplier_estimates = supplier_estimates;
    m_supplier_estimates_isSet = true;
}

bool OAIRfeSimpleVO::is_supplier_estimates_Set() const{
    return m_supplier_estimates_isSet;
}

bool OAIRfeSimpleVO::is_supplier_estimates_Valid() const{
    return m_supplier_estimates_isValid;
}

bool OAIRfeSimpleVO::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_estimate_due_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rfe_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rfe_items.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_rfe_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_supplier_estimates.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRfeSimpleVO::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
