/**
 * Noosh API application
 * Full description of Noosh API
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRfeBaseVO.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRfeBaseVO::OAIRfeBaseVO(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRfeBaseVO::OAIRfeBaseVO() {
    this->initializeModel();
}

OAIRfeBaseVO::~OAIRfeBaseVO() {}

void OAIRfeBaseVO::initializeModel() {

    m_rfe_due_date_isSet = false;
    m_rfe_due_date_isValid = false;

    m_rfe_id_isSet = false;
    m_rfe_id_isValid = false;

    m_rfe_title_isSet = false;
    m_rfe_title_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIRfeBaseVO::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRfeBaseVO::fromJsonObject(QJsonObject json) {

    m_rfe_due_date_isValid = ::OpenAPI::fromJsonValue(m_rfe_due_date, json[QString("rfe_due_date")]);
    m_rfe_due_date_isSet = !json[QString("rfe_due_date")].isNull() && m_rfe_due_date_isValid;

    m_rfe_id_isValid = ::OpenAPI::fromJsonValue(m_rfe_id, json[QString("rfe_id")]);
    m_rfe_id_isSet = !json[QString("rfe_id")].isNull() && m_rfe_id_isValid;

    m_rfe_title_isValid = ::OpenAPI::fromJsonValue(m_rfe_title, json[QString("rfe_title")]);
    m_rfe_title_isSet = !json[QString("rfe_title")].isNull() && m_rfe_title_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAIRfeBaseVO::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRfeBaseVO::asJsonObject() const {
    QJsonObject obj;
    if (m_rfe_due_date_isSet) {
        obj.insert(QString("rfe_due_date"), ::OpenAPI::toJsonValue(m_rfe_due_date));
    }
    if (m_rfe_id_isSet) {
        obj.insert(QString("rfe_id"), ::OpenAPI::toJsonValue(m_rfe_id));
    }
    if (m_rfe_title_isSet) {
        obj.insert(QString("rfe_title"), ::OpenAPI::toJsonValue(m_rfe_title));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

QDate OAIRfeBaseVO::getRfeDueDate() const {
    return m_rfe_due_date;
}
void OAIRfeBaseVO::setRfeDueDate(const QDate &rfe_due_date) {
    m_rfe_due_date = rfe_due_date;
    m_rfe_due_date_isSet = true;
}

bool OAIRfeBaseVO::is_rfe_due_date_Set() const{
    return m_rfe_due_date_isSet;
}

bool OAIRfeBaseVO::is_rfe_due_date_Valid() const{
    return m_rfe_due_date_isValid;
}

qint64 OAIRfeBaseVO::getRfeId() const {
    return m_rfe_id;
}
void OAIRfeBaseVO::setRfeId(const qint64 &rfe_id) {
    m_rfe_id = rfe_id;
    m_rfe_id_isSet = true;
}

bool OAIRfeBaseVO::is_rfe_id_Set() const{
    return m_rfe_id_isSet;
}

bool OAIRfeBaseVO::is_rfe_id_Valid() const{
    return m_rfe_id_isValid;
}

QString OAIRfeBaseVO::getRfeTitle() const {
    return m_rfe_title;
}
void OAIRfeBaseVO::setRfeTitle(const QString &rfe_title) {
    m_rfe_title = rfe_title;
    m_rfe_title_isSet = true;
}

bool OAIRfeBaseVO::is_rfe_title_Set() const{
    return m_rfe_title_isSet;
}

bool OAIRfeBaseVO::is_rfe_title_Valid() const{
    return m_rfe_title_isValid;
}

QString OAIRfeBaseVO::getStatus() const {
    return m_status;
}
void OAIRfeBaseVO::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIRfeBaseVO::is_status_Set() const{
    return m_status_isSet;
}

bool OAIRfeBaseVO::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIRfeBaseVO::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_rfe_due_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rfe_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rfe_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRfeBaseVO::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
