/**
 * Noosh API application
 * Full description of Noosh API
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBreakoutVO.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBreakoutVO::OAIBreakoutVO(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBreakoutVO::OAIBreakoutVO() {
    this->initializeModel();
}

OAIBreakoutVO::~OAIBreakoutVO() {}

void OAIBreakoutVO::initializeModel() {

    m_breakout_id_isSet = false;
    m_breakout_id_isValid = false;

    m_breakout_name_isSet = false;
    m_breakout_name_isValid = false;

    m_breakout_pre_markup_isSet = false;
    m_breakout_pre_markup_isValid = false;

    m_breakout_price_isSet = false;
    m_breakout_price_isValid = false;

    m_transactional_breakout_pre_markup_isSet = false;
    m_transactional_breakout_pre_markup_isValid = false;

    m_transactional_breakout_price_isSet = false;
    m_transactional_breakout_price_isValid = false;
}

void OAIBreakoutVO::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBreakoutVO::fromJsonObject(QJsonObject json) {

    m_breakout_id_isValid = ::OpenAPI::fromJsonValue(m_breakout_id, json[QString("breakout_id")]);
    m_breakout_id_isSet = !json[QString("breakout_id")].isNull() && m_breakout_id_isValid;

    m_breakout_name_isValid = ::OpenAPI::fromJsonValue(m_breakout_name, json[QString("breakout_name")]);
    m_breakout_name_isSet = !json[QString("breakout_name")].isNull() && m_breakout_name_isValid;

    m_breakout_pre_markup_isValid = ::OpenAPI::fromJsonValue(m_breakout_pre_markup, json[QString("breakout_pre_markup")]);
    m_breakout_pre_markup_isSet = !json[QString("breakout_pre_markup")].isNull() && m_breakout_pre_markup_isValid;

    m_breakout_price_isValid = ::OpenAPI::fromJsonValue(m_breakout_price, json[QString("breakout_price")]);
    m_breakout_price_isSet = !json[QString("breakout_price")].isNull() && m_breakout_price_isValid;

    m_transactional_breakout_pre_markup_isValid = ::OpenAPI::fromJsonValue(m_transactional_breakout_pre_markup, json[QString("transactional_breakout_pre_markup")]);
    m_transactional_breakout_pre_markup_isSet = !json[QString("transactional_breakout_pre_markup")].isNull() && m_transactional_breakout_pre_markup_isValid;

    m_transactional_breakout_price_isValid = ::OpenAPI::fromJsonValue(m_transactional_breakout_price, json[QString("transactional_breakout_price")]);
    m_transactional_breakout_price_isSet = !json[QString("transactional_breakout_price")].isNull() && m_transactional_breakout_price_isValid;
}

QString OAIBreakoutVO::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBreakoutVO::asJsonObject() const {
    QJsonObject obj;
    if (m_breakout_id_isSet) {
        obj.insert(QString("breakout_id"), ::OpenAPI::toJsonValue(m_breakout_id));
    }
    if (m_breakout_name_isSet) {
        obj.insert(QString("breakout_name"), ::OpenAPI::toJsonValue(m_breakout_name));
    }
    if (m_breakout_pre_markup_isSet) {
        obj.insert(QString("breakout_pre_markup"), ::OpenAPI::toJsonValue(m_breakout_pre_markup));
    }
    if (m_breakout_price_isSet) {
        obj.insert(QString("breakout_price"), ::OpenAPI::toJsonValue(m_breakout_price));
    }
    if (m_transactional_breakout_pre_markup_isSet) {
        obj.insert(QString("transactional_breakout_pre_markup"), ::OpenAPI::toJsonValue(m_transactional_breakout_pre_markup));
    }
    if (m_transactional_breakout_price_isSet) {
        obj.insert(QString("transactional_breakout_price"), ::OpenAPI::toJsonValue(m_transactional_breakout_price));
    }
    return obj;
}

qint64 OAIBreakoutVO::getBreakoutId() const {
    return m_breakout_id;
}
void OAIBreakoutVO::setBreakoutId(const qint64 &breakout_id) {
    m_breakout_id = breakout_id;
    m_breakout_id_isSet = true;
}

bool OAIBreakoutVO::is_breakout_id_Set() const{
    return m_breakout_id_isSet;
}

bool OAIBreakoutVO::is_breakout_id_Valid() const{
    return m_breakout_id_isValid;
}

QString OAIBreakoutVO::getBreakoutName() const {
    return m_breakout_name;
}
void OAIBreakoutVO::setBreakoutName(const QString &breakout_name) {
    m_breakout_name = breakout_name;
    m_breakout_name_isSet = true;
}

bool OAIBreakoutVO::is_breakout_name_Set() const{
    return m_breakout_name_isSet;
}

bool OAIBreakoutVO::is_breakout_name_Valid() const{
    return m_breakout_name_isValid;
}

QJsonValue OAIBreakoutVO::getBreakoutPreMarkup() const {
    return m_breakout_pre_markup;
}
void OAIBreakoutVO::setBreakoutPreMarkup(const QJsonValue &breakout_pre_markup) {
    m_breakout_pre_markup = breakout_pre_markup;
    m_breakout_pre_markup_isSet = true;
}

bool OAIBreakoutVO::is_breakout_pre_markup_Set() const{
    return m_breakout_pre_markup_isSet;
}

bool OAIBreakoutVO::is_breakout_pre_markup_Valid() const{
    return m_breakout_pre_markup_isValid;
}

QJsonValue OAIBreakoutVO::getBreakoutPrice() const {
    return m_breakout_price;
}
void OAIBreakoutVO::setBreakoutPrice(const QJsonValue &breakout_price) {
    m_breakout_price = breakout_price;
    m_breakout_price_isSet = true;
}

bool OAIBreakoutVO::is_breakout_price_Set() const{
    return m_breakout_price_isSet;
}

bool OAIBreakoutVO::is_breakout_price_Valid() const{
    return m_breakout_price_isValid;
}

QJsonValue OAIBreakoutVO::getTransactionalBreakoutPreMarkup() const {
    return m_transactional_breakout_pre_markup;
}
void OAIBreakoutVO::setTransactionalBreakoutPreMarkup(const QJsonValue &transactional_breakout_pre_markup) {
    m_transactional_breakout_pre_markup = transactional_breakout_pre_markup;
    m_transactional_breakout_pre_markup_isSet = true;
}

bool OAIBreakoutVO::is_transactional_breakout_pre_markup_Set() const{
    return m_transactional_breakout_pre_markup_isSet;
}

bool OAIBreakoutVO::is_transactional_breakout_pre_markup_Valid() const{
    return m_transactional_breakout_pre_markup_isValid;
}

QJsonValue OAIBreakoutVO::getTransactionalBreakoutPrice() const {
    return m_transactional_breakout_price;
}
void OAIBreakoutVO::setTransactionalBreakoutPrice(const QJsonValue &transactional_breakout_price) {
    m_transactional_breakout_price = transactional_breakout_price;
    m_transactional_breakout_price_isSet = true;
}

bool OAIBreakoutVO::is_transactional_breakout_price_Set() const{
    return m_transactional_breakout_price_isSet;
}

bool OAIBreakoutVO::is_transactional_breakout_price_Valid() const{
    return m_transactional_breakout_price_isValid;
}

bool OAIBreakoutVO::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_breakout_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_breakout_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_breakout_pre_markup_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_breakout_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transactional_breakout_pre_markup_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transactional_breakout_price_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBreakoutVO::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
