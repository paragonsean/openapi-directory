/**
 * Noosh API application
 * Full description of Noosh API
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFileVO.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFileVO::OAIFileVO(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFileVO::OAIFileVO() {
    this->initializeModel();
}

OAIFileVO::~OAIFileVO() {}

void OAIFileVO::initializeModel() {

    m_description_isSet = false;
    m_description_isValid = false;

    m_download_link_isSet = false;
    m_download_link_isValid = false;

    m_file_id_isSet = false;
    m_file_id_isValid = false;

    m_file_name_isSet = false;
    m_file_name_isValid = false;

    m_file_size_isSet = false;
    m_file_size_isValid = false;

    m_file_type_isSet = false;
    m_file_type_isValid = false;

    m_is_remote_isSet = false;
    m_is_remote_isValid = false;

    m_modified_date_isSet = false;
    m_modified_date_isValid = false;

    m_tag_list_isSet = false;
    m_tag_list_isValid = false;

    m_upload_date_isSet = false;
    m_upload_date_isValid = false;

    m_uploaded_by_isSet = false;
    m_uploaded_by_isValid = false;
}

void OAIFileVO::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFileVO::fromJsonObject(QJsonObject json) {

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_download_link_isValid = ::OpenAPI::fromJsonValue(m_download_link, json[QString("download_link")]);
    m_download_link_isSet = !json[QString("download_link")].isNull() && m_download_link_isValid;

    m_file_id_isValid = ::OpenAPI::fromJsonValue(m_file_id, json[QString("file_id")]);
    m_file_id_isSet = !json[QString("file_id")].isNull() && m_file_id_isValid;

    m_file_name_isValid = ::OpenAPI::fromJsonValue(m_file_name, json[QString("file_name")]);
    m_file_name_isSet = !json[QString("file_name")].isNull() && m_file_name_isValid;

    m_file_size_isValid = ::OpenAPI::fromJsonValue(m_file_size, json[QString("file_size")]);
    m_file_size_isSet = !json[QString("file_size")].isNull() && m_file_size_isValid;

    m_file_type_isValid = ::OpenAPI::fromJsonValue(m_file_type, json[QString("file_type")]);
    m_file_type_isSet = !json[QString("file_type")].isNull() && m_file_type_isValid;

    m_is_remote_isValid = ::OpenAPI::fromJsonValue(m_is_remote, json[QString("is_remote")]);
    m_is_remote_isSet = !json[QString("is_remote")].isNull() && m_is_remote_isValid;

    m_modified_date_isValid = ::OpenAPI::fromJsonValue(m_modified_date, json[QString("modified_date")]);
    m_modified_date_isSet = !json[QString("modified_date")].isNull() && m_modified_date_isValid;

    m_tag_list_isValid = ::OpenAPI::fromJsonValue(m_tag_list, json[QString("tagList")]);
    m_tag_list_isSet = !json[QString("tagList")].isNull() && m_tag_list_isValid;

    m_upload_date_isValid = ::OpenAPI::fromJsonValue(m_upload_date, json[QString("upload_date")]);
    m_upload_date_isSet = !json[QString("upload_date")].isNull() && m_upload_date_isValid;

    m_uploaded_by_isValid = ::OpenAPI::fromJsonValue(m_uploaded_by, json[QString("uploaded_by")]);
    m_uploaded_by_isSet = !json[QString("uploaded_by")].isNull() && m_uploaded_by_isValid;
}

QString OAIFileVO::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFileVO::asJsonObject() const {
    QJsonObject obj;
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_download_link_isSet) {
        obj.insert(QString("download_link"), ::OpenAPI::toJsonValue(m_download_link));
    }
    if (m_file_id_isSet) {
        obj.insert(QString("file_id"), ::OpenAPI::toJsonValue(m_file_id));
    }
    if (m_file_name_isSet) {
        obj.insert(QString("file_name"), ::OpenAPI::toJsonValue(m_file_name));
    }
    if (m_file_size_isSet) {
        obj.insert(QString("file_size"), ::OpenAPI::toJsonValue(m_file_size));
    }
    if (m_file_type_isSet) {
        obj.insert(QString("file_type"), ::OpenAPI::toJsonValue(m_file_type));
    }
    if (m_is_remote_isSet) {
        obj.insert(QString("is_remote"), ::OpenAPI::toJsonValue(m_is_remote));
    }
    if (m_modified_date_isSet) {
        obj.insert(QString("modified_date"), ::OpenAPI::toJsonValue(m_modified_date));
    }
    if (m_tag_list.size() > 0) {
        obj.insert(QString("tagList"), ::OpenAPI::toJsonValue(m_tag_list));
    }
    if (m_upload_date_isSet) {
        obj.insert(QString("upload_date"), ::OpenAPI::toJsonValue(m_upload_date));
    }
    if (m_uploaded_by_isSet) {
        obj.insert(QString("uploaded_by"), ::OpenAPI::toJsonValue(m_uploaded_by));
    }
    return obj;
}

QString OAIFileVO::getDescription() const {
    return m_description;
}
void OAIFileVO::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIFileVO::is_description_Set() const{
    return m_description_isSet;
}

bool OAIFileVO::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIFileVO::getDownloadLink() const {
    return m_download_link;
}
void OAIFileVO::setDownloadLink(const QString &download_link) {
    m_download_link = download_link;
    m_download_link_isSet = true;
}

bool OAIFileVO::is_download_link_Set() const{
    return m_download_link_isSet;
}

bool OAIFileVO::is_download_link_Valid() const{
    return m_download_link_isValid;
}

qint64 OAIFileVO::getFileId() const {
    return m_file_id;
}
void OAIFileVO::setFileId(const qint64 &file_id) {
    m_file_id = file_id;
    m_file_id_isSet = true;
}

bool OAIFileVO::is_file_id_Set() const{
    return m_file_id_isSet;
}

bool OAIFileVO::is_file_id_Valid() const{
    return m_file_id_isValid;
}

QString OAIFileVO::getFileName() const {
    return m_file_name;
}
void OAIFileVO::setFileName(const QString &file_name) {
    m_file_name = file_name;
    m_file_name_isSet = true;
}

bool OAIFileVO::is_file_name_Set() const{
    return m_file_name_isSet;
}

bool OAIFileVO::is_file_name_Valid() const{
    return m_file_name_isValid;
}

QJsonValue OAIFileVO::getFileSize() const {
    return m_file_size;
}
void OAIFileVO::setFileSize(const QJsonValue &file_size) {
    m_file_size = file_size;
    m_file_size_isSet = true;
}

bool OAIFileVO::is_file_size_Set() const{
    return m_file_size_isSet;
}

bool OAIFileVO::is_file_size_Valid() const{
    return m_file_size_isValid;
}

QString OAIFileVO::getFileType() const {
    return m_file_type;
}
void OAIFileVO::setFileType(const QString &file_type) {
    m_file_type = file_type;
    m_file_type_isSet = true;
}

bool OAIFileVO::is_file_type_Set() const{
    return m_file_type_isSet;
}

bool OAIFileVO::is_file_type_Valid() const{
    return m_file_type_isValid;
}

bool OAIFileVO::isIsRemote() const {
    return m_is_remote;
}
void OAIFileVO::setIsRemote(const bool &is_remote) {
    m_is_remote = is_remote;
    m_is_remote_isSet = true;
}

bool OAIFileVO::is_is_remote_Set() const{
    return m_is_remote_isSet;
}

bool OAIFileVO::is_is_remote_Valid() const{
    return m_is_remote_isValid;
}

QString OAIFileVO::getModifiedDate() const {
    return m_modified_date;
}
void OAIFileVO::setModifiedDate(const QString &modified_date) {
    m_modified_date = modified_date;
    m_modified_date_isSet = true;
}

bool OAIFileVO::is_modified_date_Set() const{
    return m_modified_date_isSet;
}

bool OAIFileVO::is_modified_date_Valid() const{
    return m_modified_date_isValid;
}

QList<OAITagVO> OAIFileVO::getTagList() const {
    return m_tag_list;
}
void OAIFileVO::setTagList(const QList<OAITagVO> &tag_list) {
    m_tag_list = tag_list;
    m_tag_list_isSet = true;
}

bool OAIFileVO::is_tag_list_Set() const{
    return m_tag_list_isSet;
}

bool OAIFileVO::is_tag_list_Valid() const{
    return m_tag_list_isValid;
}

QString OAIFileVO::getUploadDate() const {
    return m_upload_date;
}
void OAIFileVO::setUploadDate(const QString &upload_date) {
    m_upload_date = upload_date;
    m_upload_date_isSet = true;
}

bool OAIFileVO::is_upload_date_Set() const{
    return m_upload_date_isSet;
}

bool OAIFileVO::is_upload_date_Valid() const{
    return m_upload_date_isValid;
}

QString OAIFileVO::getUploadedBy() const {
    return m_uploaded_by;
}
void OAIFileVO::setUploadedBy(const QString &uploaded_by) {
    m_uploaded_by = uploaded_by;
    m_uploaded_by_isSet = true;
}

bool OAIFileVO::is_uploaded_by_Set() const{
    return m_uploaded_by_isSet;
}

bool OAIFileVO::is_uploaded_by_Valid() const{
    return m_uploaded_by_isValid;
}

bool OAIFileVO::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_download_link_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_file_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_file_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_file_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_file_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_remote_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_modified_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tag_list.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_upload_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uploaded_by_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFileVO::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
