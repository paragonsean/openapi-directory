/**
 * Noosh API application
 * Full description of Noosh API
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITaskPersistVO.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITaskPersistVO::OAITaskPersistVO(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITaskPersistVO::OAITaskPersistVO() {
    this->initializeModel();
}

OAITaskPersistVO::~OAITaskPersistVO() {}

void OAITaskPersistVO::initializeModel() {

    m_actual_duration_isSet = false;
    m_actual_duration_isValid = false;

    m_actual_duration_hour_isSet = false;
    m_actual_duration_hour_isValid = false;

    m_actual_end_date_isSet = false;
    m_actual_end_date_isValid = false;

    m_actual_start_date_isSet = false;
    m_actual_start_date_isValid = false;

    m_assign_to_user_id_isSet = false;
    m_assign_to_user_id_isValid = false;

    m_comments_isSet = false;
    m_comments_isValid = false;

    m_contributors_isSet = false;
    m_contributors_isValid = false;

    m_custom_status_id_isSet = false;
    m_custom_status_id_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_percentage_complete_isSet = false;
    m_percentage_complete_isValid = false;

    m_priority_isSet = false;
    m_priority_isValid = false;

    m_revised_duration_isSet = false;
    m_revised_duration_isValid = false;

    m_revised_duration_hour_isSet = false;
    m_revised_duration_hour_isValid = false;

    m_revised_end_date_isSet = false;
    m_revised_end_date_isValid = false;

    m_revised_start_date_isSet = false;
    m_revised_start_date_isValid = false;

    m_status_id_isSet = false;
    m_status_id_isValid = false;

    m_task_id_isSet = false;
    m_task_id_isValid = false;

    m_task_type_id_isSet = false;
    m_task_type_id_isValid = false;
}

void OAITaskPersistVO::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITaskPersistVO::fromJsonObject(QJsonObject json) {

    m_actual_duration_isValid = ::OpenAPI::fromJsonValue(m_actual_duration, json[QString("actual_duration")]);
    m_actual_duration_isSet = !json[QString("actual_duration")].isNull() && m_actual_duration_isValid;

    m_actual_duration_hour_isValid = ::OpenAPI::fromJsonValue(m_actual_duration_hour, json[QString("actual_duration_hour")]);
    m_actual_duration_hour_isSet = !json[QString("actual_duration_hour")].isNull() && m_actual_duration_hour_isValid;

    m_actual_end_date_isValid = ::OpenAPI::fromJsonValue(m_actual_end_date, json[QString("actual_end_date")]);
    m_actual_end_date_isSet = !json[QString("actual_end_date")].isNull() && m_actual_end_date_isValid;

    m_actual_start_date_isValid = ::OpenAPI::fromJsonValue(m_actual_start_date, json[QString("actual_start_date")]);
    m_actual_start_date_isSet = !json[QString("actual_start_date")].isNull() && m_actual_start_date_isValid;

    m_assign_to_user_id_isValid = ::OpenAPI::fromJsonValue(m_assign_to_user_id, json[QString("assign_to_user_id")]);
    m_assign_to_user_id_isSet = !json[QString("assign_to_user_id")].isNull() && m_assign_to_user_id_isValid;

    m_comments_isValid = ::OpenAPI::fromJsonValue(m_comments, json[QString("comments")]);
    m_comments_isSet = !json[QString("comments")].isNull() && m_comments_isValid;

    m_contributors_isValid = ::OpenAPI::fromJsonValue(m_contributors, json[QString("contributors")]);
    m_contributors_isSet = !json[QString("contributors")].isNull() && m_contributors_isValid;

    m_custom_status_id_isValid = ::OpenAPI::fromJsonValue(m_custom_status_id, json[QString("custom_status_id")]);
    m_custom_status_id_isSet = !json[QString("custom_status_id")].isNull() && m_custom_status_id_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_percentage_complete_isValid = ::OpenAPI::fromJsonValue(m_percentage_complete, json[QString("percentage_complete")]);
    m_percentage_complete_isSet = !json[QString("percentage_complete")].isNull() && m_percentage_complete_isValid;

    m_priority_isValid = ::OpenAPI::fromJsonValue(m_priority, json[QString("priority")]);
    m_priority_isSet = !json[QString("priority")].isNull() && m_priority_isValid;

    m_revised_duration_isValid = ::OpenAPI::fromJsonValue(m_revised_duration, json[QString("revised_duration")]);
    m_revised_duration_isSet = !json[QString("revised_duration")].isNull() && m_revised_duration_isValid;

    m_revised_duration_hour_isValid = ::OpenAPI::fromJsonValue(m_revised_duration_hour, json[QString("revised_duration_hour")]);
    m_revised_duration_hour_isSet = !json[QString("revised_duration_hour")].isNull() && m_revised_duration_hour_isValid;

    m_revised_end_date_isValid = ::OpenAPI::fromJsonValue(m_revised_end_date, json[QString("revised_end_date")]);
    m_revised_end_date_isSet = !json[QString("revised_end_date")].isNull() && m_revised_end_date_isValid;

    m_revised_start_date_isValid = ::OpenAPI::fromJsonValue(m_revised_start_date, json[QString("revised_start_date")]);
    m_revised_start_date_isSet = !json[QString("revised_start_date")].isNull() && m_revised_start_date_isValid;

    m_status_id_isValid = ::OpenAPI::fromJsonValue(m_status_id, json[QString("status_id")]);
    m_status_id_isSet = !json[QString("status_id")].isNull() && m_status_id_isValid;

    m_task_id_isValid = ::OpenAPI::fromJsonValue(m_task_id, json[QString("task_id")]);
    m_task_id_isSet = !json[QString("task_id")].isNull() && m_task_id_isValid;

    m_task_type_id_isValid = ::OpenAPI::fromJsonValue(m_task_type_id, json[QString("task_type_id")]);
    m_task_type_id_isSet = !json[QString("task_type_id")].isNull() && m_task_type_id_isValid;
}

QString OAITaskPersistVO::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITaskPersistVO::asJsonObject() const {
    QJsonObject obj;
    if (m_actual_duration_isSet) {
        obj.insert(QString("actual_duration"), ::OpenAPI::toJsonValue(m_actual_duration));
    }
    if (m_actual_duration_hour_isSet) {
        obj.insert(QString("actual_duration_hour"), ::OpenAPI::toJsonValue(m_actual_duration_hour));
    }
    if (m_actual_end_date_isSet) {
        obj.insert(QString("actual_end_date"), ::OpenAPI::toJsonValue(m_actual_end_date));
    }
    if (m_actual_start_date_isSet) {
        obj.insert(QString("actual_start_date"), ::OpenAPI::toJsonValue(m_actual_start_date));
    }
    if (m_assign_to_user_id_isSet) {
        obj.insert(QString("assign_to_user_id"), ::OpenAPI::toJsonValue(m_assign_to_user_id));
    }
    if (m_comments_isSet) {
        obj.insert(QString("comments"), ::OpenAPI::toJsonValue(m_comments));
    }
    if (m_contributors_isSet) {
        obj.insert(QString("contributors"), ::OpenAPI::toJsonValue(m_contributors));
    }
    if (m_custom_status_id_isSet) {
        obj.insert(QString("custom_status_id"), ::OpenAPI::toJsonValue(m_custom_status_id));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_percentage_complete_isSet) {
        obj.insert(QString("percentage_complete"), ::OpenAPI::toJsonValue(m_percentage_complete));
    }
    if (m_priority_isSet) {
        obj.insert(QString("priority"), ::OpenAPI::toJsonValue(m_priority));
    }
    if (m_revised_duration_isSet) {
        obj.insert(QString("revised_duration"), ::OpenAPI::toJsonValue(m_revised_duration));
    }
    if (m_revised_duration_hour_isSet) {
        obj.insert(QString("revised_duration_hour"), ::OpenAPI::toJsonValue(m_revised_duration_hour));
    }
    if (m_revised_end_date_isSet) {
        obj.insert(QString("revised_end_date"), ::OpenAPI::toJsonValue(m_revised_end_date));
    }
    if (m_revised_start_date_isSet) {
        obj.insert(QString("revised_start_date"), ::OpenAPI::toJsonValue(m_revised_start_date));
    }
    if (m_status_id_isSet) {
        obj.insert(QString("status_id"), ::OpenAPI::toJsonValue(m_status_id));
    }
    if (m_task_id_isSet) {
        obj.insert(QString("task_id"), ::OpenAPI::toJsonValue(m_task_id));
    }
    if (m_task_type_id_isSet) {
        obj.insert(QString("task_type_id"), ::OpenAPI::toJsonValue(m_task_type_id));
    }
    return obj;
}

double OAITaskPersistVO::getActualDuration() const {
    return m_actual_duration;
}
void OAITaskPersistVO::setActualDuration(const double &actual_duration) {
    m_actual_duration = actual_duration;
    m_actual_duration_isSet = true;
}

bool OAITaskPersistVO::is_actual_duration_Set() const{
    return m_actual_duration_isSet;
}

bool OAITaskPersistVO::is_actual_duration_Valid() const{
    return m_actual_duration_isValid;
}

double OAITaskPersistVO::getActualDurationHour() const {
    return m_actual_duration_hour;
}
void OAITaskPersistVO::setActualDurationHour(const double &actual_duration_hour) {
    m_actual_duration_hour = actual_duration_hour;
    m_actual_duration_hour_isSet = true;
}

bool OAITaskPersistVO::is_actual_duration_hour_Set() const{
    return m_actual_duration_hour_isSet;
}

bool OAITaskPersistVO::is_actual_duration_hour_Valid() const{
    return m_actual_duration_hour_isValid;
}

QDate OAITaskPersistVO::getActualEndDate() const {
    return m_actual_end_date;
}
void OAITaskPersistVO::setActualEndDate(const QDate &actual_end_date) {
    m_actual_end_date = actual_end_date;
    m_actual_end_date_isSet = true;
}

bool OAITaskPersistVO::is_actual_end_date_Set() const{
    return m_actual_end_date_isSet;
}

bool OAITaskPersistVO::is_actual_end_date_Valid() const{
    return m_actual_end_date_isValid;
}

QDate OAITaskPersistVO::getActualStartDate() const {
    return m_actual_start_date;
}
void OAITaskPersistVO::setActualStartDate(const QDate &actual_start_date) {
    m_actual_start_date = actual_start_date;
    m_actual_start_date_isSet = true;
}

bool OAITaskPersistVO::is_actual_start_date_Set() const{
    return m_actual_start_date_isSet;
}

bool OAITaskPersistVO::is_actual_start_date_Valid() const{
    return m_actual_start_date_isValid;
}

qint64 OAITaskPersistVO::getAssignToUserId() const {
    return m_assign_to_user_id;
}
void OAITaskPersistVO::setAssignToUserId(const qint64 &assign_to_user_id) {
    m_assign_to_user_id = assign_to_user_id;
    m_assign_to_user_id_isSet = true;
}

bool OAITaskPersistVO::is_assign_to_user_id_Set() const{
    return m_assign_to_user_id_isSet;
}

bool OAITaskPersistVO::is_assign_to_user_id_Valid() const{
    return m_assign_to_user_id_isValid;
}

QString OAITaskPersistVO::getComments() const {
    return m_comments;
}
void OAITaskPersistVO::setComments(const QString &comments) {
    m_comments = comments;
    m_comments_isSet = true;
}

bool OAITaskPersistVO::is_comments_Set() const{
    return m_comments_isSet;
}

bool OAITaskPersistVO::is_comments_Valid() const{
    return m_comments_isValid;
}

QString OAITaskPersistVO::getContributors() const {
    return m_contributors;
}
void OAITaskPersistVO::setContributors(const QString &contributors) {
    m_contributors = contributors;
    m_contributors_isSet = true;
}

bool OAITaskPersistVO::is_contributors_Set() const{
    return m_contributors_isSet;
}

bool OAITaskPersistVO::is_contributors_Valid() const{
    return m_contributors_isValid;
}

qint64 OAITaskPersistVO::getCustomStatusId() const {
    return m_custom_status_id;
}
void OAITaskPersistVO::setCustomStatusId(const qint64 &custom_status_id) {
    m_custom_status_id = custom_status_id;
    m_custom_status_id_isSet = true;
}

bool OAITaskPersistVO::is_custom_status_id_Set() const{
    return m_custom_status_id_isSet;
}

bool OAITaskPersistVO::is_custom_status_id_Valid() const{
    return m_custom_status_id_isValid;
}

QString OAITaskPersistVO::getDescription() const {
    return m_description;
}
void OAITaskPersistVO::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAITaskPersistVO::is_description_Set() const{
    return m_description_isSet;
}

bool OAITaskPersistVO::is_description_Valid() const{
    return m_description_isValid;
}

QString OAITaskPersistVO::getName() const {
    return m_name;
}
void OAITaskPersistVO::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAITaskPersistVO::is_name_Set() const{
    return m_name_isSet;
}

bool OAITaskPersistVO::is_name_Valid() const{
    return m_name_isValid;
}

qint64 OAITaskPersistVO::getPercentageComplete() const {
    return m_percentage_complete;
}
void OAITaskPersistVO::setPercentageComplete(const qint64 &percentage_complete) {
    m_percentage_complete = percentage_complete;
    m_percentage_complete_isSet = true;
}

bool OAITaskPersistVO::is_percentage_complete_Set() const{
    return m_percentage_complete_isSet;
}

bool OAITaskPersistVO::is_percentage_complete_Valid() const{
    return m_percentage_complete_isValid;
}

qint64 OAITaskPersistVO::getPriority() const {
    return m_priority;
}
void OAITaskPersistVO::setPriority(const qint64 &priority) {
    m_priority = priority;
    m_priority_isSet = true;
}

bool OAITaskPersistVO::is_priority_Set() const{
    return m_priority_isSet;
}

bool OAITaskPersistVO::is_priority_Valid() const{
    return m_priority_isValid;
}

double OAITaskPersistVO::getRevisedDuration() const {
    return m_revised_duration;
}
void OAITaskPersistVO::setRevisedDuration(const double &revised_duration) {
    m_revised_duration = revised_duration;
    m_revised_duration_isSet = true;
}

bool OAITaskPersistVO::is_revised_duration_Set() const{
    return m_revised_duration_isSet;
}

bool OAITaskPersistVO::is_revised_duration_Valid() const{
    return m_revised_duration_isValid;
}

double OAITaskPersistVO::getRevisedDurationHour() const {
    return m_revised_duration_hour;
}
void OAITaskPersistVO::setRevisedDurationHour(const double &revised_duration_hour) {
    m_revised_duration_hour = revised_duration_hour;
    m_revised_duration_hour_isSet = true;
}

bool OAITaskPersistVO::is_revised_duration_hour_Set() const{
    return m_revised_duration_hour_isSet;
}

bool OAITaskPersistVO::is_revised_duration_hour_Valid() const{
    return m_revised_duration_hour_isValid;
}

QDate OAITaskPersistVO::getRevisedEndDate() const {
    return m_revised_end_date;
}
void OAITaskPersistVO::setRevisedEndDate(const QDate &revised_end_date) {
    m_revised_end_date = revised_end_date;
    m_revised_end_date_isSet = true;
}

bool OAITaskPersistVO::is_revised_end_date_Set() const{
    return m_revised_end_date_isSet;
}

bool OAITaskPersistVO::is_revised_end_date_Valid() const{
    return m_revised_end_date_isValid;
}

QDate OAITaskPersistVO::getRevisedStartDate() const {
    return m_revised_start_date;
}
void OAITaskPersistVO::setRevisedStartDate(const QDate &revised_start_date) {
    m_revised_start_date = revised_start_date;
    m_revised_start_date_isSet = true;
}

bool OAITaskPersistVO::is_revised_start_date_Set() const{
    return m_revised_start_date_isSet;
}

bool OAITaskPersistVO::is_revised_start_date_Valid() const{
    return m_revised_start_date_isValid;
}

qint64 OAITaskPersistVO::getStatusId() const {
    return m_status_id;
}
void OAITaskPersistVO::setStatusId(const qint64 &status_id) {
    m_status_id = status_id;
    m_status_id_isSet = true;
}

bool OAITaskPersistVO::is_status_id_Set() const{
    return m_status_id_isSet;
}

bool OAITaskPersistVO::is_status_id_Valid() const{
    return m_status_id_isValid;
}

qint64 OAITaskPersistVO::getTaskId() const {
    return m_task_id;
}
void OAITaskPersistVO::setTaskId(const qint64 &task_id) {
    m_task_id = task_id;
    m_task_id_isSet = true;
}

bool OAITaskPersistVO::is_task_id_Set() const{
    return m_task_id_isSet;
}

bool OAITaskPersistVO::is_task_id_Valid() const{
    return m_task_id_isValid;
}

qint64 OAITaskPersistVO::getTaskTypeId() const {
    return m_task_type_id;
}
void OAITaskPersistVO::setTaskTypeId(const qint64 &task_type_id) {
    m_task_type_id = task_type_id;
    m_task_type_id_isSet = true;
}

bool OAITaskPersistVO::is_task_type_id_Set() const{
    return m_task_type_id_isSet;
}

bool OAITaskPersistVO::is_task_type_id_Valid() const{
    return m_task_type_id_isValid;
}

bool OAITaskPersistVO::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_actual_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_actual_duration_hour_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_actual_end_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_actual_start_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_assign_to_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_comments_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_contributors_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_status_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_percentage_complete_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_priority_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_revised_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_revised_duration_hour_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_revised_end_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_revised_start_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_task_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_task_type_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITaskPersistVO::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
