/**
 * Noosh API application
 * Full description of Noosh API
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITeamMemberPO.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITeamMemberPO::OAITeamMemberPO(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITeamMemberPO::OAITeamMemberPO() {
    this->initializeModel();
}

OAITeamMemberPO::~OAITeamMemberPO() {}

void OAITeamMemberPO::initializeModel() {

    m_role_id_isSet = false;
    m_role_id_isValid = false;

    m_team_template_id_isSet = false;
    m_team_template_id_isValid = false;

    m_user_id_isSet = false;
    m_user_id_isValid = false;
}

void OAITeamMemberPO::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITeamMemberPO::fromJsonObject(QJsonObject json) {

    m_role_id_isValid = ::OpenAPI::fromJsonValue(m_role_id, json[QString("role_id")]);
    m_role_id_isSet = !json[QString("role_id")].isNull() && m_role_id_isValid;

    m_team_template_id_isValid = ::OpenAPI::fromJsonValue(m_team_template_id, json[QString("team_template_id")]);
    m_team_template_id_isSet = !json[QString("team_template_id")].isNull() && m_team_template_id_isValid;

    m_user_id_isValid = ::OpenAPI::fromJsonValue(m_user_id, json[QString("user_id")]);
    m_user_id_isSet = !json[QString("user_id")].isNull() && m_user_id_isValid;
}

QString OAITeamMemberPO::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITeamMemberPO::asJsonObject() const {
    QJsonObject obj;
    if (m_role_id_isSet) {
        obj.insert(QString("role_id"), ::OpenAPI::toJsonValue(m_role_id));
    }
    if (m_team_template_id_isSet) {
        obj.insert(QString("team_template_id"), ::OpenAPI::toJsonValue(m_team_template_id));
    }
    if (m_user_id_isSet) {
        obj.insert(QString("user_id"), ::OpenAPI::toJsonValue(m_user_id));
    }
    return obj;
}

qint64 OAITeamMemberPO::getRoleId() const {
    return m_role_id;
}
void OAITeamMemberPO::setRoleId(const qint64 &role_id) {
    m_role_id = role_id;
    m_role_id_isSet = true;
}

bool OAITeamMemberPO::is_role_id_Set() const{
    return m_role_id_isSet;
}

bool OAITeamMemberPO::is_role_id_Valid() const{
    return m_role_id_isValid;
}

qint64 OAITeamMemberPO::getTeamTemplateId() const {
    return m_team_template_id;
}
void OAITeamMemberPO::setTeamTemplateId(const qint64 &team_template_id) {
    m_team_template_id = team_template_id;
    m_team_template_id_isSet = true;
}

bool OAITeamMemberPO::is_team_template_id_Set() const{
    return m_team_template_id_isSet;
}

bool OAITeamMemberPO::is_team_template_id_Valid() const{
    return m_team_template_id_isValid;
}

qint64 OAITeamMemberPO::getUserId() const {
    return m_user_id;
}
void OAITeamMemberPO::setUserId(const qint64 &user_id) {
    m_user_id = user_id;
    m_user_id_isSet = true;
}

bool OAITeamMemberPO::is_user_id_Set() const{
    return m_user_id_isSet;
}

bool OAITeamMemberPO::is_user_id_Valid() const{
    return m_user_id_isValid;
}

bool OAITeamMemberPO::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_role_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_team_template_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITeamMemberPO::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
