/**
 * Noosh API application
 * Full description of Noosh API
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOrderDetailVO.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOrderDetailVO::OAIOrderDetailVO(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOrderDetailVO::OAIOrderDetailVO() {
    this->initializeModel();
}

OAIOrderDetailVO::~OAIOrderDetailVO() {}

void OAIOrderDetailVO::initializeModel() {

    m_accepted_date_isSet = false;
    m_accepted_date_isValid = false;

    m_annulled_date_isSet = false;
    m_annulled_date_isValid = false;

    m_approved_date_isSet = false;
    m_approved_date_isValid = false;

    m_awarded_date_isSet = false;
    m_awarded_date_isValid = false;

    m_budget_type_isSet = false;
    m_budget_type_isValid = false;

    m_buyer_isSet = false;
    m_buyer_isValid = false;

    m_buyer_workgroup_isSet = false;
    m_buyer_workgroup_isValid = false;

    m_change_orders_isSet = false;
    m_change_orders_isValid = false;

    m_classification_isSet = false;
    m_classification_isValid = false;

    m_closed_date_isSet = false;
    m_closed_date_isValid = false;

    m_closing_change_orders_isSet = false;
    m_closing_change_orders_isValid = false;

    m_comments_isSet = false;
    m_comments_isValid = false;

    m_completion_date_isSet = false;
    m_completion_date_isValid = false;

    m_creator_user_id_isSet = false;
    m_creator_user_id_isValid = false;

    m_currency_isSet = false;
    m_currency_isValid = false;

    m_custom_fields_isSet = false;
    m_custom_fields_isValid = false;

    m_grand_total_isSet = false;
    m_grand_total_isValid = false;

    m_grand_total_with_changes_isSet = false;
    m_grand_total_with_changes_isValid = false;

    m_item_count_isSet = false;
    m_item_count_isValid = false;

    m_last_activity_date_isSet = false;
    m_last_activity_date_isValid = false;

    m_last_changed_isSet = false;
    m_last_changed_isValid = false;

    m_last_status_change_isSet = false;
    m_last_status_change_isValid = false;

    m_misc_cost_isSet = false;
    m_misc_cost_isValid = false;

    m_order_id_isSet = false;
    m_order_id_isValid = false;

    m_order_items_isSet = false;
    m_order_items_isValid = false;

    m_order_number_isSet = false;
    m_order_number_isValid = false;

    m_order_title_isSet = false;
    m_order_title_isValid = false;

    m_order_total_isSet = false;
    m_order_total_isValid = false;

    m_overs_percent_isSet = false;
    m_overs_percent_isValid = false;

    m_parent_order_id_isSet = false;
    m_parent_order_id_isValid = false;

    m_payment_reference_isSet = false;
    m_payment_reference_isValid = false;

    m_print_order_ids_isSet = false;
    m_print_order_ids_isValid = false;

    m_quote_id_isSet = false;
    m_quote_id_isValid = false;

    m_shipping_isSet = false;
    m_shipping_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_status_comments_isSet = false;
    m_status_comments_isValid = false;

    m_supplier_isSet = false;
    m_supplier_isValid = false;

    m_supplier_reference_isSet = false;
    m_supplier_reference_isValid = false;

    m_supplier_selection_reason_isSet = false;
    m_supplier_selection_reason_isValid = false;

    m_supplier_workgroup_isSet = false;
    m_supplier_workgroup_isValid = false;

    m_tax_isSet = false;
    m_tax_isValid = false;

    m_transactional_currency_isSet = false;
    m_transactional_currency_isValid = false;

    m_transactional_grand_total_isSet = false;
    m_transactional_grand_total_isValid = false;

    m_transactional_grand_total_with_changes_isSet = false;
    m_transactional_grand_total_with_changes_isValid = false;

    m_transactional_order_total_isSet = false;
    m_transactional_order_total_isValid = false;

    m_transactional_shipping_isSet = false;
    m_transactional_shipping_isValid = false;

    m_transactional_tax_isSet = false;
    m_transactional_tax_isValid = false;

    m_unders_percent_isSet = false;
    m_unders_percent_isValid = false;
}

void OAIOrderDetailVO::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOrderDetailVO::fromJsonObject(QJsonObject json) {

    m_accepted_date_isValid = ::OpenAPI::fromJsonValue(m_accepted_date, json[QString("accepted_date")]);
    m_accepted_date_isSet = !json[QString("accepted_date")].isNull() && m_accepted_date_isValid;

    m_annulled_date_isValid = ::OpenAPI::fromJsonValue(m_annulled_date, json[QString("annulled_date")]);
    m_annulled_date_isSet = !json[QString("annulled_date")].isNull() && m_annulled_date_isValid;

    m_approved_date_isValid = ::OpenAPI::fromJsonValue(m_approved_date, json[QString("approved_date")]);
    m_approved_date_isSet = !json[QString("approved_date")].isNull() && m_approved_date_isValid;

    m_awarded_date_isValid = ::OpenAPI::fromJsonValue(m_awarded_date, json[QString("awarded_date")]);
    m_awarded_date_isSet = !json[QString("awarded_date")].isNull() && m_awarded_date_isValid;

    m_budget_type_isValid = ::OpenAPI::fromJsonValue(m_budget_type, json[QString("budget_type")]);
    m_budget_type_isSet = !json[QString("budget_type")].isNull() && m_budget_type_isValid;

    m_buyer_isValid = ::OpenAPI::fromJsonValue(m_buyer, json[QString("buyer")]);
    m_buyer_isSet = !json[QString("buyer")].isNull() && m_buyer_isValid;

    m_buyer_workgroup_isValid = ::OpenAPI::fromJsonValue(m_buyer_workgroup, json[QString("buyer_workgroup")]);
    m_buyer_workgroup_isSet = !json[QString("buyer_workgroup")].isNull() && m_buyer_workgroup_isValid;

    m_change_orders_isValid = ::OpenAPI::fromJsonValue(m_change_orders, json[QString("change_orders")]);
    m_change_orders_isSet = !json[QString("change_orders")].isNull() && m_change_orders_isValid;

    m_classification_isValid = ::OpenAPI::fromJsonValue(m_classification, json[QString("classification")]);
    m_classification_isSet = !json[QString("classification")].isNull() && m_classification_isValid;

    m_closed_date_isValid = ::OpenAPI::fromJsonValue(m_closed_date, json[QString("closed_date")]);
    m_closed_date_isSet = !json[QString("closed_date")].isNull() && m_closed_date_isValid;

    m_closing_change_orders_isValid = ::OpenAPI::fromJsonValue(m_closing_change_orders, json[QString("closing_change_orders")]);
    m_closing_change_orders_isSet = !json[QString("closing_change_orders")].isNull() && m_closing_change_orders_isValid;

    m_comments_isValid = ::OpenAPI::fromJsonValue(m_comments, json[QString("comments")]);
    m_comments_isSet = !json[QString("comments")].isNull() && m_comments_isValid;

    m_completion_date_isValid = ::OpenAPI::fromJsonValue(m_completion_date, json[QString("completion_date")]);
    m_completion_date_isSet = !json[QString("completion_date")].isNull() && m_completion_date_isValid;

    m_creator_user_id_isValid = ::OpenAPI::fromJsonValue(m_creator_user_id, json[QString("creator_user_id")]);
    m_creator_user_id_isSet = !json[QString("creator_user_id")].isNull() && m_creator_user_id_isValid;

    m_currency_isValid = ::OpenAPI::fromJsonValue(m_currency, json[QString("currency")]);
    m_currency_isSet = !json[QString("currency")].isNull() && m_currency_isValid;

    m_custom_fields_isValid = ::OpenAPI::fromJsonValue(m_custom_fields, json[QString("custom_fields")]);
    m_custom_fields_isSet = !json[QString("custom_fields")].isNull() && m_custom_fields_isValid;

    m_grand_total_isValid = ::OpenAPI::fromJsonValue(m_grand_total, json[QString("grand_total")]);
    m_grand_total_isSet = !json[QString("grand_total")].isNull() && m_grand_total_isValid;

    m_grand_total_with_changes_isValid = ::OpenAPI::fromJsonValue(m_grand_total_with_changes, json[QString("grand_total_with_changes")]);
    m_grand_total_with_changes_isSet = !json[QString("grand_total_with_changes")].isNull() && m_grand_total_with_changes_isValid;

    m_item_count_isValid = ::OpenAPI::fromJsonValue(m_item_count, json[QString("item_count")]);
    m_item_count_isSet = !json[QString("item_count")].isNull() && m_item_count_isValid;

    m_last_activity_date_isValid = ::OpenAPI::fromJsonValue(m_last_activity_date, json[QString("last_activity_date")]);
    m_last_activity_date_isSet = !json[QString("last_activity_date")].isNull() && m_last_activity_date_isValid;

    m_last_changed_isValid = ::OpenAPI::fromJsonValue(m_last_changed, json[QString("last_changed")]);
    m_last_changed_isSet = !json[QString("last_changed")].isNull() && m_last_changed_isValid;

    m_last_status_change_isValid = ::OpenAPI::fromJsonValue(m_last_status_change, json[QString("last_status_change")]);
    m_last_status_change_isSet = !json[QString("last_status_change")].isNull() && m_last_status_change_isValid;

    m_misc_cost_isValid = ::OpenAPI::fromJsonValue(m_misc_cost, json[QString("misc_cost")]);
    m_misc_cost_isSet = !json[QString("misc_cost")].isNull() && m_misc_cost_isValid;

    m_order_id_isValid = ::OpenAPI::fromJsonValue(m_order_id, json[QString("order_id")]);
    m_order_id_isSet = !json[QString("order_id")].isNull() && m_order_id_isValid;

    m_order_items_isValid = ::OpenAPI::fromJsonValue(m_order_items, json[QString("order_items")]);
    m_order_items_isSet = !json[QString("order_items")].isNull() && m_order_items_isValid;

    m_order_number_isValid = ::OpenAPI::fromJsonValue(m_order_number, json[QString("order_number")]);
    m_order_number_isSet = !json[QString("order_number")].isNull() && m_order_number_isValid;

    m_order_title_isValid = ::OpenAPI::fromJsonValue(m_order_title, json[QString("order_title")]);
    m_order_title_isSet = !json[QString("order_title")].isNull() && m_order_title_isValid;

    m_order_total_isValid = ::OpenAPI::fromJsonValue(m_order_total, json[QString("order_total")]);
    m_order_total_isSet = !json[QString("order_total")].isNull() && m_order_total_isValid;

    m_overs_percent_isValid = ::OpenAPI::fromJsonValue(m_overs_percent, json[QString("overs_percent")]);
    m_overs_percent_isSet = !json[QString("overs_percent")].isNull() && m_overs_percent_isValid;

    m_parent_order_id_isValid = ::OpenAPI::fromJsonValue(m_parent_order_id, json[QString("parent_order_id")]);
    m_parent_order_id_isSet = !json[QString("parent_order_id")].isNull() && m_parent_order_id_isValid;

    m_payment_reference_isValid = ::OpenAPI::fromJsonValue(m_payment_reference, json[QString("payment_reference")]);
    m_payment_reference_isSet = !json[QString("payment_reference")].isNull() && m_payment_reference_isValid;

    m_print_order_ids_isValid = ::OpenAPI::fromJsonValue(m_print_order_ids, json[QString("print_order_ids")]);
    m_print_order_ids_isSet = !json[QString("print_order_ids")].isNull() && m_print_order_ids_isValid;

    m_quote_id_isValid = ::OpenAPI::fromJsonValue(m_quote_id, json[QString("quote_id")]);
    m_quote_id_isSet = !json[QString("quote_id")].isNull() && m_quote_id_isValid;

    m_shipping_isValid = ::OpenAPI::fromJsonValue(m_shipping, json[QString("shipping")]);
    m_shipping_isSet = !json[QString("shipping")].isNull() && m_shipping_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_status_comments_isValid = ::OpenAPI::fromJsonValue(m_status_comments, json[QString("status_comments")]);
    m_status_comments_isSet = !json[QString("status_comments")].isNull() && m_status_comments_isValid;

    m_supplier_isValid = ::OpenAPI::fromJsonValue(m_supplier, json[QString("supplier")]);
    m_supplier_isSet = !json[QString("supplier")].isNull() && m_supplier_isValid;

    m_supplier_reference_isValid = ::OpenAPI::fromJsonValue(m_supplier_reference, json[QString("supplier_reference")]);
    m_supplier_reference_isSet = !json[QString("supplier_reference")].isNull() && m_supplier_reference_isValid;

    m_supplier_selection_reason_isValid = ::OpenAPI::fromJsonValue(m_supplier_selection_reason, json[QString("supplier_selection_reason")]);
    m_supplier_selection_reason_isSet = !json[QString("supplier_selection_reason")].isNull() && m_supplier_selection_reason_isValid;

    m_supplier_workgroup_isValid = ::OpenAPI::fromJsonValue(m_supplier_workgroup, json[QString("supplier_workgroup")]);
    m_supplier_workgroup_isSet = !json[QString("supplier_workgroup")].isNull() && m_supplier_workgroup_isValid;

    m_tax_isValid = ::OpenAPI::fromJsonValue(m_tax, json[QString("tax")]);
    m_tax_isSet = !json[QString("tax")].isNull() && m_tax_isValid;

    m_transactional_currency_isValid = ::OpenAPI::fromJsonValue(m_transactional_currency, json[QString("transactional_currency")]);
    m_transactional_currency_isSet = !json[QString("transactional_currency")].isNull() && m_transactional_currency_isValid;

    m_transactional_grand_total_isValid = ::OpenAPI::fromJsonValue(m_transactional_grand_total, json[QString("transactional_grand_total")]);
    m_transactional_grand_total_isSet = !json[QString("transactional_grand_total")].isNull() && m_transactional_grand_total_isValid;

    m_transactional_grand_total_with_changes_isValid = ::OpenAPI::fromJsonValue(m_transactional_grand_total_with_changes, json[QString("transactional_grand_total_with_changes")]);
    m_transactional_grand_total_with_changes_isSet = !json[QString("transactional_grand_total_with_changes")].isNull() && m_transactional_grand_total_with_changes_isValid;

    m_transactional_order_total_isValid = ::OpenAPI::fromJsonValue(m_transactional_order_total, json[QString("transactional_order_total")]);
    m_transactional_order_total_isSet = !json[QString("transactional_order_total")].isNull() && m_transactional_order_total_isValid;

    m_transactional_shipping_isValid = ::OpenAPI::fromJsonValue(m_transactional_shipping, json[QString("transactional_shipping")]);
    m_transactional_shipping_isSet = !json[QString("transactional_shipping")].isNull() && m_transactional_shipping_isValid;

    m_transactional_tax_isValid = ::OpenAPI::fromJsonValue(m_transactional_tax, json[QString("transactional_tax")]);
    m_transactional_tax_isSet = !json[QString("transactional_tax")].isNull() && m_transactional_tax_isValid;

    m_unders_percent_isValid = ::OpenAPI::fromJsonValue(m_unders_percent, json[QString("unders_percent")]);
    m_unders_percent_isSet = !json[QString("unders_percent")].isNull() && m_unders_percent_isValid;
}

QString OAIOrderDetailVO::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOrderDetailVO::asJsonObject() const {
    QJsonObject obj;
    if (m_accepted_date_isSet) {
        obj.insert(QString("accepted_date"), ::OpenAPI::toJsonValue(m_accepted_date));
    }
    if (m_annulled_date_isSet) {
        obj.insert(QString("annulled_date"), ::OpenAPI::toJsonValue(m_annulled_date));
    }
    if (m_approved_date_isSet) {
        obj.insert(QString("approved_date"), ::OpenAPI::toJsonValue(m_approved_date));
    }
    if (m_awarded_date_isSet) {
        obj.insert(QString("awarded_date"), ::OpenAPI::toJsonValue(m_awarded_date));
    }
    if (m_budget_type_isSet) {
        obj.insert(QString("budget_type"), ::OpenAPI::toJsonValue(m_budget_type));
    }
    if (m_buyer.isSet()) {
        obj.insert(QString("buyer"), ::OpenAPI::toJsonValue(m_buyer));
    }
    if (m_buyer_workgroup.isSet()) {
        obj.insert(QString("buyer_workgroup"), ::OpenAPI::toJsonValue(m_buyer_workgroup));
    }
    if (m_change_orders.size() > 0) {
        obj.insert(QString("change_orders"), ::OpenAPI::toJsonValue(m_change_orders));
    }
    if (m_classification_isSet) {
        obj.insert(QString("classification"), ::OpenAPI::toJsonValue(m_classification));
    }
    if (m_closed_date_isSet) {
        obj.insert(QString("closed_date"), ::OpenAPI::toJsonValue(m_closed_date));
    }
    if (m_closing_change_orders.size() > 0) {
        obj.insert(QString("closing_change_orders"), ::OpenAPI::toJsonValue(m_closing_change_orders));
    }
    if (m_comments_isSet) {
        obj.insert(QString("comments"), ::OpenAPI::toJsonValue(m_comments));
    }
    if (m_completion_date_isSet) {
        obj.insert(QString("completion_date"), ::OpenAPI::toJsonValue(m_completion_date));
    }
    if (m_creator_user_id_isSet) {
        obj.insert(QString("creator_user_id"), ::OpenAPI::toJsonValue(m_creator_user_id));
    }
    if (m_currency_isSet) {
        obj.insert(QString("currency"), ::OpenAPI::toJsonValue(m_currency));
    }
    if (m_custom_fields.size() > 0) {
        obj.insert(QString("custom_fields"), ::OpenAPI::toJsonValue(m_custom_fields));
    }
    if (m_grand_total_isSet) {
        obj.insert(QString("grand_total"), ::OpenAPI::toJsonValue(m_grand_total));
    }
    if (m_grand_total_with_changes_isSet) {
        obj.insert(QString("grand_total_with_changes"), ::OpenAPI::toJsonValue(m_grand_total_with_changes));
    }
    if (m_item_count_isSet) {
        obj.insert(QString("item_count"), ::OpenAPI::toJsonValue(m_item_count));
    }
    if (m_last_activity_date_isSet) {
        obj.insert(QString("last_activity_date"), ::OpenAPI::toJsonValue(m_last_activity_date));
    }
    if (m_last_changed_isSet) {
        obj.insert(QString("last_changed"), ::OpenAPI::toJsonValue(m_last_changed));
    }
    if (m_last_status_change_isSet) {
        obj.insert(QString("last_status_change"), ::OpenAPI::toJsonValue(m_last_status_change));
    }
    if (m_misc_cost_isSet) {
        obj.insert(QString("misc_cost"), ::OpenAPI::toJsonValue(m_misc_cost));
    }
    if (m_order_id_isSet) {
        obj.insert(QString("order_id"), ::OpenAPI::toJsonValue(m_order_id));
    }
    if (m_order_items.size() > 0) {
        obj.insert(QString("order_items"), ::OpenAPI::toJsonValue(m_order_items));
    }
    if (m_order_number_isSet) {
        obj.insert(QString("order_number"), ::OpenAPI::toJsonValue(m_order_number));
    }
    if (m_order_title_isSet) {
        obj.insert(QString("order_title"), ::OpenAPI::toJsonValue(m_order_title));
    }
    if (m_order_total_isSet) {
        obj.insert(QString("order_total"), ::OpenAPI::toJsonValue(m_order_total));
    }
    if (m_overs_percent_isSet) {
        obj.insert(QString("overs_percent"), ::OpenAPI::toJsonValue(m_overs_percent));
    }
    if (m_parent_order_id_isSet) {
        obj.insert(QString("parent_order_id"), ::OpenAPI::toJsonValue(m_parent_order_id));
    }
    if (m_payment_reference_isSet) {
        obj.insert(QString("payment_reference"), ::OpenAPI::toJsonValue(m_payment_reference));
    }
    if (m_print_order_ids.size() > 0) {
        obj.insert(QString("print_order_ids"), ::OpenAPI::toJsonValue(m_print_order_ids));
    }
    if (m_quote_id_isSet) {
        obj.insert(QString("quote_id"), ::OpenAPI::toJsonValue(m_quote_id));
    }
    if (m_shipping_isSet) {
        obj.insert(QString("shipping"), ::OpenAPI::toJsonValue(m_shipping));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_status_comments_isSet) {
        obj.insert(QString("status_comments"), ::OpenAPI::toJsonValue(m_status_comments));
    }
    if (m_supplier.isSet()) {
        obj.insert(QString("supplier"), ::OpenAPI::toJsonValue(m_supplier));
    }
    if (m_supplier_reference_isSet) {
        obj.insert(QString("supplier_reference"), ::OpenAPI::toJsonValue(m_supplier_reference));
    }
    if (m_supplier_selection_reason_isSet) {
        obj.insert(QString("supplier_selection_reason"), ::OpenAPI::toJsonValue(m_supplier_selection_reason));
    }
    if (m_supplier_workgroup.isSet()) {
        obj.insert(QString("supplier_workgroup"), ::OpenAPI::toJsonValue(m_supplier_workgroup));
    }
    if (m_tax_isSet) {
        obj.insert(QString("tax"), ::OpenAPI::toJsonValue(m_tax));
    }
    if (m_transactional_currency_isSet) {
        obj.insert(QString("transactional_currency"), ::OpenAPI::toJsonValue(m_transactional_currency));
    }
    if (m_transactional_grand_total_isSet) {
        obj.insert(QString("transactional_grand_total"), ::OpenAPI::toJsonValue(m_transactional_grand_total));
    }
    if (m_transactional_grand_total_with_changes_isSet) {
        obj.insert(QString("transactional_grand_total_with_changes"), ::OpenAPI::toJsonValue(m_transactional_grand_total_with_changes));
    }
    if (m_transactional_order_total_isSet) {
        obj.insert(QString("transactional_order_total"), ::OpenAPI::toJsonValue(m_transactional_order_total));
    }
    if (m_transactional_shipping_isSet) {
        obj.insert(QString("transactional_shipping"), ::OpenAPI::toJsonValue(m_transactional_shipping));
    }
    if (m_transactional_tax_isSet) {
        obj.insert(QString("transactional_tax"), ::OpenAPI::toJsonValue(m_transactional_tax));
    }
    if (m_unders_percent_isSet) {
        obj.insert(QString("unders_percent"), ::OpenAPI::toJsonValue(m_unders_percent));
    }
    return obj;
}

QDate OAIOrderDetailVO::getAcceptedDate() const {
    return m_accepted_date;
}
void OAIOrderDetailVO::setAcceptedDate(const QDate &accepted_date) {
    m_accepted_date = accepted_date;
    m_accepted_date_isSet = true;
}

bool OAIOrderDetailVO::is_accepted_date_Set() const{
    return m_accepted_date_isSet;
}

bool OAIOrderDetailVO::is_accepted_date_Valid() const{
    return m_accepted_date_isValid;
}

QDate OAIOrderDetailVO::getAnnulledDate() const {
    return m_annulled_date;
}
void OAIOrderDetailVO::setAnnulledDate(const QDate &annulled_date) {
    m_annulled_date = annulled_date;
    m_annulled_date_isSet = true;
}

bool OAIOrderDetailVO::is_annulled_date_Set() const{
    return m_annulled_date_isSet;
}

bool OAIOrderDetailVO::is_annulled_date_Valid() const{
    return m_annulled_date_isValid;
}

QDate OAIOrderDetailVO::getApprovedDate() const {
    return m_approved_date;
}
void OAIOrderDetailVO::setApprovedDate(const QDate &approved_date) {
    m_approved_date = approved_date;
    m_approved_date_isSet = true;
}

bool OAIOrderDetailVO::is_approved_date_Set() const{
    return m_approved_date_isSet;
}

bool OAIOrderDetailVO::is_approved_date_Valid() const{
    return m_approved_date_isValid;
}

QDate OAIOrderDetailVO::getAwardedDate() const {
    return m_awarded_date;
}
void OAIOrderDetailVO::setAwardedDate(const QDate &awarded_date) {
    m_awarded_date = awarded_date;
    m_awarded_date_isSet = true;
}

bool OAIOrderDetailVO::is_awarded_date_Set() const{
    return m_awarded_date_isSet;
}

bool OAIOrderDetailVO::is_awarded_date_Valid() const{
    return m_awarded_date_isValid;
}

QString OAIOrderDetailVO::getBudgetType() const {
    return m_budget_type;
}
void OAIOrderDetailVO::setBudgetType(const QString &budget_type) {
    m_budget_type = budget_type;
    m_budget_type_isSet = true;
}

bool OAIOrderDetailVO::is_budget_type_Set() const{
    return m_budget_type_isSet;
}

bool OAIOrderDetailVO::is_budget_type_Valid() const{
    return m_budget_type_isValid;
}

OAIUserVO OAIOrderDetailVO::getBuyer() const {
    return m_buyer;
}
void OAIOrderDetailVO::setBuyer(const OAIUserVO &buyer) {
    m_buyer = buyer;
    m_buyer_isSet = true;
}

bool OAIOrderDetailVO::is_buyer_Set() const{
    return m_buyer_isSet;
}

bool OAIOrderDetailVO::is_buyer_Valid() const{
    return m_buyer_isValid;
}

OAIWorkgroupBaseVO OAIOrderDetailVO::getBuyerWorkgroup() const {
    return m_buyer_workgroup;
}
void OAIOrderDetailVO::setBuyerWorkgroup(const OAIWorkgroupBaseVO &buyer_workgroup) {
    m_buyer_workgroup = buyer_workgroup;
    m_buyer_workgroup_isSet = true;
}

bool OAIOrderDetailVO::is_buyer_workgroup_Set() const{
    return m_buyer_workgroup_isSet;
}

bool OAIOrderDetailVO::is_buyer_workgroup_Valid() const{
    return m_buyer_workgroup_isValid;
}

QList<OAIOrderDetailBaseVO> OAIOrderDetailVO::getChangeOrders() const {
    return m_change_orders;
}
void OAIOrderDetailVO::setChangeOrders(const QList<OAIOrderDetailBaseVO> &change_orders) {
    m_change_orders = change_orders;
    m_change_orders_isSet = true;
}

bool OAIOrderDetailVO::is_change_orders_Set() const{
    return m_change_orders_isSet;
}

bool OAIOrderDetailVO::is_change_orders_Valid() const{
    return m_change_orders_isValid;
}

QString OAIOrderDetailVO::getClassification() const {
    return m_classification;
}
void OAIOrderDetailVO::setClassification(const QString &classification) {
    m_classification = classification;
    m_classification_isSet = true;
}

bool OAIOrderDetailVO::is_classification_Set() const{
    return m_classification_isSet;
}

bool OAIOrderDetailVO::is_classification_Valid() const{
    return m_classification_isValid;
}

QDate OAIOrderDetailVO::getClosedDate() const {
    return m_closed_date;
}
void OAIOrderDetailVO::setClosedDate(const QDate &closed_date) {
    m_closed_date = closed_date;
    m_closed_date_isSet = true;
}

bool OAIOrderDetailVO::is_closed_date_Set() const{
    return m_closed_date_isSet;
}

bool OAIOrderDetailVO::is_closed_date_Valid() const{
    return m_closed_date_isValid;
}

QList<OAIOrderDetailBaseVO> OAIOrderDetailVO::getClosingChangeOrders() const {
    return m_closing_change_orders;
}
void OAIOrderDetailVO::setClosingChangeOrders(const QList<OAIOrderDetailBaseVO> &closing_change_orders) {
    m_closing_change_orders = closing_change_orders;
    m_closing_change_orders_isSet = true;
}

bool OAIOrderDetailVO::is_closing_change_orders_Set() const{
    return m_closing_change_orders_isSet;
}

bool OAIOrderDetailVO::is_closing_change_orders_Valid() const{
    return m_closing_change_orders_isValid;
}

QString OAIOrderDetailVO::getComments() const {
    return m_comments;
}
void OAIOrderDetailVO::setComments(const QString &comments) {
    m_comments = comments;
    m_comments_isSet = true;
}

bool OAIOrderDetailVO::is_comments_Set() const{
    return m_comments_isSet;
}

bool OAIOrderDetailVO::is_comments_Valid() const{
    return m_comments_isValid;
}

QDate OAIOrderDetailVO::getCompletionDate() const {
    return m_completion_date;
}
void OAIOrderDetailVO::setCompletionDate(const QDate &completion_date) {
    m_completion_date = completion_date;
    m_completion_date_isSet = true;
}

bool OAIOrderDetailVO::is_completion_date_Set() const{
    return m_completion_date_isSet;
}

bool OAIOrderDetailVO::is_completion_date_Valid() const{
    return m_completion_date_isValid;
}

qint64 OAIOrderDetailVO::getCreatorUserId() const {
    return m_creator_user_id;
}
void OAIOrderDetailVO::setCreatorUserId(const qint64 &creator_user_id) {
    m_creator_user_id = creator_user_id;
    m_creator_user_id_isSet = true;
}

bool OAIOrderDetailVO::is_creator_user_id_Set() const{
    return m_creator_user_id_isSet;
}

bool OAIOrderDetailVO::is_creator_user_id_Valid() const{
    return m_creator_user_id_isValid;
}

QString OAIOrderDetailVO::getCurrency() const {
    return m_currency;
}
void OAIOrderDetailVO::setCurrency(const QString &currency) {
    m_currency = currency;
    m_currency_isSet = true;
}

bool OAIOrderDetailVO::is_currency_Set() const{
    return m_currency_isSet;
}

bool OAIOrderDetailVO::is_currency_Valid() const{
    return m_currency_isValid;
}

QList<OAIPropertyPaAndAttVO> OAIOrderDetailVO::getCustomFields() const {
    return m_custom_fields;
}
void OAIOrderDetailVO::setCustomFields(const QList<OAIPropertyPaAndAttVO> &custom_fields) {
    m_custom_fields = custom_fields;
    m_custom_fields_isSet = true;
}

bool OAIOrderDetailVO::is_custom_fields_Set() const{
    return m_custom_fields_isSet;
}

bool OAIOrderDetailVO::is_custom_fields_Valid() const{
    return m_custom_fields_isValid;
}

QJsonValue OAIOrderDetailVO::getGrandTotal() const {
    return m_grand_total;
}
void OAIOrderDetailVO::setGrandTotal(const QJsonValue &grand_total) {
    m_grand_total = grand_total;
    m_grand_total_isSet = true;
}

bool OAIOrderDetailVO::is_grand_total_Set() const{
    return m_grand_total_isSet;
}

bool OAIOrderDetailVO::is_grand_total_Valid() const{
    return m_grand_total_isValid;
}

QJsonValue OAIOrderDetailVO::getGrandTotalWithChanges() const {
    return m_grand_total_with_changes;
}
void OAIOrderDetailVO::setGrandTotalWithChanges(const QJsonValue &grand_total_with_changes) {
    m_grand_total_with_changes = grand_total_with_changes;
    m_grand_total_with_changes_isSet = true;
}

bool OAIOrderDetailVO::is_grand_total_with_changes_Set() const{
    return m_grand_total_with_changes_isSet;
}

bool OAIOrderDetailVO::is_grand_total_with_changes_Valid() const{
    return m_grand_total_with_changes_isValid;
}

qint32 OAIOrderDetailVO::getItemCount() const {
    return m_item_count;
}
void OAIOrderDetailVO::setItemCount(const qint32 &item_count) {
    m_item_count = item_count;
    m_item_count_isSet = true;
}

bool OAIOrderDetailVO::is_item_count_Set() const{
    return m_item_count_isSet;
}

bool OAIOrderDetailVO::is_item_count_Valid() const{
    return m_item_count_isValid;
}

QDate OAIOrderDetailVO::getLastActivityDate() const {
    return m_last_activity_date;
}
void OAIOrderDetailVO::setLastActivityDate(const QDate &last_activity_date) {
    m_last_activity_date = last_activity_date;
    m_last_activity_date_isSet = true;
}

bool OAIOrderDetailVO::is_last_activity_date_Set() const{
    return m_last_activity_date_isSet;
}

bool OAIOrderDetailVO::is_last_activity_date_Valid() const{
    return m_last_activity_date_isValid;
}

QDate OAIOrderDetailVO::getLastChanged() const {
    return m_last_changed;
}
void OAIOrderDetailVO::setLastChanged(const QDate &last_changed) {
    m_last_changed = last_changed;
    m_last_changed_isSet = true;
}

bool OAIOrderDetailVO::is_last_changed_Set() const{
    return m_last_changed_isSet;
}

bool OAIOrderDetailVO::is_last_changed_Valid() const{
    return m_last_changed_isValid;
}

QDate OAIOrderDetailVO::getLastStatusChange() const {
    return m_last_status_change;
}
void OAIOrderDetailVO::setLastStatusChange(const QDate &last_status_change) {
    m_last_status_change = last_status_change;
    m_last_status_change_isSet = true;
}

bool OAIOrderDetailVO::is_last_status_change_Set() const{
    return m_last_status_change_isSet;
}

bool OAIOrderDetailVO::is_last_status_change_Valid() const{
    return m_last_status_change_isValid;
}

double OAIOrderDetailVO::getMiscCost() const {
    return m_misc_cost;
}
void OAIOrderDetailVO::setMiscCost(const double &misc_cost) {
    m_misc_cost = misc_cost;
    m_misc_cost_isSet = true;
}

bool OAIOrderDetailVO::is_misc_cost_Set() const{
    return m_misc_cost_isSet;
}

bool OAIOrderDetailVO::is_misc_cost_Valid() const{
    return m_misc_cost_isValid;
}

qint64 OAIOrderDetailVO::getOrderId() const {
    return m_order_id;
}
void OAIOrderDetailVO::setOrderId(const qint64 &order_id) {
    m_order_id = order_id;
    m_order_id_isSet = true;
}

bool OAIOrderDetailVO::is_order_id_Set() const{
    return m_order_id_isSet;
}

bool OAIOrderDetailVO::is_order_id_Valid() const{
    return m_order_id_isValid;
}

QList<OAIOrderItemSimpleVO> OAIOrderDetailVO::getOrderItems() const {
    return m_order_items;
}
void OAIOrderDetailVO::setOrderItems(const QList<OAIOrderItemSimpleVO> &order_items) {
    m_order_items = order_items;
    m_order_items_isSet = true;
}

bool OAIOrderDetailVO::is_order_items_Set() const{
    return m_order_items_isSet;
}

bool OAIOrderDetailVO::is_order_items_Valid() const{
    return m_order_items_isValid;
}

QString OAIOrderDetailVO::getOrderNumber() const {
    return m_order_number;
}
void OAIOrderDetailVO::setOrderNumber(const QString &order_number) {
    m_order_number = order_number;
    m_order_number_isSet = true;
}

bool OAIOrderDetailVO::is_order_number_Set() const{
    return m_order_number_isSet;
}

bool OAIOrderDetailVO::is_order_number_Valid() const{
    return m_order_number_isValid;
}

QString OAIOrderDetailVO::getOrderTitle() const {
    return m_order_title;
}
void OAIOrderDetailVO::setOrderTitle(const QString &order_title) {
    m_order_title = order_title;
    m_order_title_isSet = true;
}

bool OAIOrderDetailVO::is_order_title_Set() const{
    return m_order_title_isSet;
}

bool OAIOrderDetailVO::is_order_title_Valid() const{
    return m_order_title_isValid;
}

QJsonValue OAIOrderDetailVO::getOrderTotal() const {
    return m_order_total;
}
void OAIOrderDetailVO::setOrderTotal(const QJsonValue &order_total) {
    m_order_total = order_total;
    m_order_total_isSet = true;
}

bool OAIOrderDetailVO::is_order_total_Set() const{
    return m_order_total_isSet;
}

bool OAIOrderDetailVO::is_order_total_Valid() const{
    return m_order_total_isValid;
}

double OAIOrderDetailVO::getOversPercent() const {
    return m_overs_percent;
}
void OAIOrderDetailVO::setOversPercent(const double &overs_percent) {
    m_overs_percent = overs_percent;
    m_overs_percent_isSet = true;
}

bool OAIOrderDetailVO::is_overs_percent_Set() const{
    return m_overs_percent_isSet;
}

bool OAIOrderDetailVO::is_overs_percent_Valid() const{
    return m_overs_percent_isValid;
}

qint64 OAIOrderDetailVO::getParentOrderId() const {
    return m_parent_order_id;
}
void OAIOrderDetailVO::setParentOrderId(const qint64 &parent_order_id) {
    m_parent_order_id = parent_order_id;
    m_parent_order_id_isSet = true;
}

bool OAIOrderDetailVO::is_parent_order_id_Set() const{
    return m_parent_order_id_isSet;
}

bool OAIOrderDetailVO::is_parent_order_id_Valid() const{
    return m_parent_order_id_isValid;
}

QString OAIOrderDetailVO::getPaymentReference() const {
    return m_payment_reference;
}
void OAIOrderDetailVO::setPaymentReference(const QString &payment_reference) {
    m_payment_reference = payment_reference;
    m_payment_reference_isSet = true;
}

bool OAIOrderDetailVO::is_payment_reference_Set() const{
    return m_payment_reference_isSet;
}

bool OAIOrderDetailVO::is_payment_reference_Valid() const{
    return m_payment_reference_isValid;
}

QList<qint64> OAIOrderDetailVO::getPrintOrderIds() const {
    return m_print_order_ids;
}
void OAIOrderDetailVO::setPrintOrderIds(const QList<qint64> &print_order_ids) {
    m_print_order_ids = print_order_ids;
    m_print_order_ids_isSet = true;
}

bool OAIOrderDetailVO::is_print_order_ids_Set() const{
    return m_print_order_ids_isSet;
}

bool OAIOrderDetailVO::is_print_order_ids_Valid() const{
    return m_print_order_ids_isValid;
}

qint64 OAIOrderDetailVO::getQuoteId() const {
    return m_quote_id;
}
void OAIOrderDetailVO::setQuoteId(const qint64 &quote_id) {
    m_quote_id = quote_id;
    m_quote_id_isSet = true;
}

bool OAIOrderDetailVO::is_quote_id_Set() const{
    return m_quote_id_isSet;
}

bool OAIOrderDetailVO::is_quote_id_Valid() const{
    return m_quote_id_isValid;
}

QJsonValue OAIOrderDetailVO::getShipping() const {
    return m_shipping;
}
void OAIOrderDetailVO::setShipping(const QJsonValue &shipping) {
    m_shipping = shipping;
    m_shipping_isSet = true;
}

bool OAIOrderDetailVO::is_shipping_Set() const{
    return m_shipping_isSet;
}

bool OAIOrderDetailVO::is_shipping_Valid() const{
    return m_shipping_isValid;
}

QString OAIOrderDetailVO::getStatus() const {
    return m_status;
}
void OAIOrderDetailVO::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIOrderDetailVO::is_status_Set() const{
    return m_status_isSet;
}

bool OAIOrderDetailVO::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIOrderDetailVO::getStatusComments() const {
    return m_status_comments;
}
void OAIOrderDetailVO::setStatusComments(const QString &status_comments) {
    m_status_comments = status_comments;
    m_status_comments_isSet = true;
}

bool OAIOrderDetailVO::is_status_comments_Set() const{
    return m_status_comments_isSet;
}

bool OAIOrderDetailVO::is_status_comments_Valid() const{
    return m_status_comments_isValid;
}

OAIUserVO OAIOrderDetailVO::getSupplier() const {
    return m_supplier;
}
void OAIOrderDetailVO::setSupplier(const OAIUserVO &supplier) {
    m_supplier = supplier;
    m_supplier_isSet = true;
}

bool OAIOrderDetailVO::is_supplier_Set() const{
    return m_supplier_isSet;
}

bool OAIOrderDetailVO::is_supplier_Valid() const{
    return m_supplier_isValid;
}

QString OAIOrderDetailVO::getSupplierReference() const {
    return m_supplier_reference;
}
void OAIOrderDetailVO::setSupplierReference(const QString &supplier_reference) {
    m_supplier_reference = supplier_reference;
    m_supplier_reference_isSet = true;
}

bool OAIOrderDetailVO::is_supplier_reference_Set() const{
    return m_supplier_reference_isSet;
}

bool OAIOrderDetailVO::is_supplier_reference_Valid() const{
    return m_supplier_reference_isValid;
}

QString OAIOrderDetailVO::getSupplierSelectionReason() const {
    return m_supplier_selection_reason;
}
void OAIOrderDetailVO::setSupplierSelectionReason(const QString &supplier_selection_reason) {
    m_supplier_selection_reason = supplier_selection_reason;
    m_supplier_selection_reason_isSet = true;
}

bool OAIOrderDetailVO::is_supplier_selection_reason_Set() const{
    return m_supplier_selection_reason_isSet;
}

bool OAIOrderDetailVO::is_supplier_selection_reason_Valid() const{
    return m_supplier_selection_reason_isValid;
}

OAIWorkgroupBaseVO OAIOrderDetailVO::getSupplierWorkgroup() const {
    return m_supplier_workgroup;
}
void OAIOrderDetailVO::setSupplierWorkgroup(const OAIWorkgroupBaseVO &supplier_workgroup) {
    m_supplier_workgroup = supplier_workgroup;
    m_supplier_workgroup_isSet = true;
}

bool OAIOrderDetailVO::is_supplier_workgroup_Set() const{
    return m_supplier_workgroup_isSet;
}

bool OAIOrderDetailVO::is_supplier_workgroup_Valid() const{
    return m_supplier_workgroup_isValid;
}

QJsonValue OAIOrderDetailVO::getTax() const {
    return m_tax;
}
void OAIOrderDetailVO::setTax(const QJsonValue &tax) {
    m_tax = tax;
    m_tax_isSet = true;
}

bool OAIOrderDetailVO::is_tax_Set() const{
    return m_tax_isSet;
}

bool OAIOrderDetailVO::is_tax_Valid() const{
    return m_tax_isValid;
}

QString OAIOrderDetailVO::getTransactionalCurrency() const {
    return m_transactional_currency;
}
void OAIOrderDetailVO::setTransactionalCurrency(const QString &transactional_currency) {
    m_transactional_currency = transactional_currency;
    m_transactional_currency_isSet = true;
}

bool OAIOrderDetailVO::is_transactional_currency_Set() const{
    return m_transactional_currency_isSet;
}

bool OAIOrderDetailVO::is_transactional_currency_Valid() const{
    return m_transactional_currency_isValid;
}

QJsonValue OAIOrderDetailVO::getTransactionalGrandTotal() const {
    return m_transactional_grand_total;
}
void OAIOrderDetailVO::setTransactionalGrandTotal(const QJsonValue &transactional_grand_total) {
    m_transactional_grand_total = transactional_grand_total;
    m_transactional_grand_total_isSet = true;
}

bool OAIOrderDetailVO::is_transactional_grand_total_Set() const{
    return m_transactional_grand_total_isSet;
}

bool OAIOrderDetailVO::is_transactional_grand_total_Valid() const{
    return m_transactional_grand_total_isValid;
}

QJsonValue OAIOrderDetailVO::getTransactionalGrandTotalWithChanges() const {
    return m_transactional_grand_total_with_changes;
}
void OAIOrderDetailVO::setTransactionalGrandTotalWithChanges(const QJsonValue &transactional_grand_total_with_changes) {
    m_transactional_grand_total_with_changes = transactional_grand_total_with_changes;
    m_transactional_grand_total_with_changes_isSet = true;
}

bool OAIOrderDetailVO::is_transactional_grand_total_with_changes_Set() const{
    return m_transactional_grand_total_with_changes_isSet;
}

bool OAIOrderDetailVO::is_transactional_grand_total_with_changes_Valid() const{
    return m_transactional_grand_total_with_changes_isValid;
}

QJsonValue OAIOrderDetailVO::getTransactionalOrderTotal() const {
    return m_transactional_order_total;
}
void OAIOrderDetailVO::setTransactionalOrderTotal(const QJsonValue &transactional_order_total) {
    m_transactional_order_total = transactional_order_total;
    m_transactional_order_total_isSet = true;
}

bool OAIOrderDetailVO::is_transactional_order_total_Set() const{
    return m_transactional_order_total_isSet;
}

bool OAIOrderDetailVO::is_transactional_order_total_Valid() const{
    return m_transactional_order_total_isValid;
}

QJsonValue OAIOrderDetailVO::getTransactionalShipping() const {
    return m_transactional_shipping;
}
void OAIOrderDetailVO::setTransactionalShipping(const QJsonValue &transactional_shipping) {
    m_transactional_shipping = transactional_shipping;
    m_transactional_shipping_isSet = true;
}

bool OAIOrderDetailVO::is_transactional_shipping_Set() const{
    return m_transactional_shipping_isSet;
}

bool OAIOrderDetailVO::is_transactional_shipping_Valid() const{
    return m_transactional_shipping_isValid;
}

QJsonValue OAIOrderDetailVO::getTransactionalTax() const {
    return m_transactional_tax;
}
void OAIOrderDetailVO::setTransactionalTax(const QJsonValue &transactional_tax) {
    m_transactional_tax = transactional_tax;
    m_transactional_tax_isSet = true;
}

bool OAIOrderDetailVO::is_transactional_tax_Set() const{
    return m_transactional_tax_isSet;
}

bool OAIOrderDetailVO::is_transactional_tax_Valid() const{
    return m_transactional_tax_isValid;
}

double OAIOrderDetailVO::getUndersPercent() const {
    return m_unders_percent;
}
void OAIOrderDetailVO::setUndersPercent(const double &unders_percent) {
    m_unders_percent = unders_percent;
    m_unders_percent_isSet = true;
}

bool OAIOrderDetailVO::is_unders_percent_Set() const{
    return m_unders_percent_isSet;
}

bool OAIOrderDetailVO::is_unders_percent_Valid() const{
    return m_unders_percent_isValid;
}

bool OAIOrderDetailVO::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_accepted_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_annulled_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_approved_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_awarded_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_budget_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_buyer.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_buyer_workgroup.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_change_orders.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_classification_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_closed_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_closing_change_orders.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_comments_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_completion_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_creator_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_fields.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_grand_total_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_grand_total_with_changes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_item_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_activity_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_changed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_status_change_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_misc_cost_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_order_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_order_items.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_order_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_order_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_order_total_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_overs_percent_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent_order_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_reference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_print_order_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_quote_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shipping_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_comments_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_supplier.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_supplier_reference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_supplier_selection_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_supplier_workgroup.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tax_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transactional_currency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transactional_grand_total_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transactional_grand_total_with_changes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transactional_order_total_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transactional_shipping_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transactional_tax_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unders_percent_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOrderDetailVO::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
