/**
 * Noosh API application
 * Full description of Noosh API
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEstimatePO.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEstimatePO::OAIEstimatePO(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEstimatePO::OAIEstimatePO() {
    this->initializeModel();
}

OAIEstimatePO::~OAIEstimatePO() {}

void OAIEstimatePO::initializeModel() {

    m_comments_isSet = false;
    m_comments_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_estimate_items_isSet = false;
    m_estimate_items_isValid = false;

    m_estimate_title_isSet = false;
    m_estimate_title_isValid = false;

    m_expiration_date_isSet = false;
    m_expiration_date_isValid = false;

    m_owner_reference_isSet = false;
    m_owner_reference_isValid = false;

    m_rfe_id_isSet = false;
    m_rfe_id_isValid = false;
}

void OAIEstimatePO::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEstimatePO::fromJsonObject(QJsonObject json) {

    m_comments_isValid = ::OpenAPI::fromJsonValue(m_comments, json[QString("comments")]);
    m_comments_isSet = !json[QString("comments")].isNull() && m_comments_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_estimate_items_isValid = ::OpenAPI::fromJsonValue(m_estimate_items, json[QString("estimate_items")]);
    m_estimate_items_isSet = !json[QString("estimate_items")].isNull() && m_estimate_items_isValid;

    m_estimate_title_isValid = ::OpenAPI::fromJsonValue(m_estimate_title, json[QString("estimate_title")]);
    m_estimate_title_isSet = !json[QString("estimate_title")].isNull() && m_estimate_title_isValid;

    m_expiration_date_isValid = ::OpenAPI::fromJsonValue(m_expiration_date, json[QString("expiration_date")]);
    m_expiration_date_isSet = !json[QString("expiration_date")].isNull() && m_expiration_date_isValid;

    m_owner_reference_isValid = ::OpenAPI::fromJsonValue(m_owner_reference, json[QString("owner_reference")]);
    m_owner_reference_isSet = !json[QString("owner_reference")].isNull() && m_owner_reference_isValid;

    m_rfe_id_isValid = ::OpenAPI::fromJsonValue(m_rfe_id, json[QString("rfe_id")]);
    m_rfe_id_isSet = !json[QString("rfe_id")].isNull() && m_rfe_id_isValid;
}

QString OAIEstimatePO::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEstimatePO::asJsonObject() const {
    QJsonObject obj;
    if (m_comments_isSet) {
        obj.insert(QString("comments"), ::OpenAPI::toJsonValue(m_comments));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_estimate_items.size() > 0) {
        obj.insert(QString("estimate_items"), ::OpenAPI::toJsonValue(m_estimate_items));
    }
    if (m_estimate_title_isSet) {
        obj.insert(QString("estimate_title"), ::OpenAPI::toJsonValue(m_estimate_title));
    }
    if (m_expiration_date_isSet) {
        obj.insert(QString("expiration_date"), ::OpenAPI::toJsonValue(m_expiration_date));
    }
    if (m_owner_reference_isSet) {
        obj.insert(QString("owner_reference"), ::OpenAPI::toJsonValue(m_owner_reference));
    }
    if (m_rfe_id_isSet) {
        obj.insert(QString("rfe_id"), ::OpenAPI::toJsonValue(m_rfe_id));
    }
    return obj;
}

QString OAIEstimatePO::getComments() const {
    return m_comments;
}
void OAIEstimatePO::setComments(const QString &comments) {
    m_comments = comments;
    m_comments_isSet = true;
}

bool OAIEstimatePO::is_comments_Set() const{
    return m_comments_isSet;
}

bool OAIEstimatePO::is_comments_Valid() const{
    return m_comments_isValid;
}

QString OAIEstimatePO::getDescription() const {
    return m_description;
}
void OAIEstimatePO::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIEstimatePO::is_description_Set() const{
    return m_description_isSet;
}

bool OAIEstimatePO::is_description_Valid() const{
    return m_description_isValid;
}

QList<OAIEstimateItemPO> OAIEstimatePO::getEstimateItems() const {
    return m_estimate_items;
}
void OAIEstimatePO::setEstimateItems(const QList<OAIEstimateItemPO> &estimate_items) {
    m_estimate_items = estimate_items;
    m_estimate_items_isSet = true;
}

bool OAIEstimatePO::is_estimate_items_Set() const{
    return m_estimate_items_isSet;
}

bool OAIEstimatePO::is_estimate_items_Valid() const{
    return m_estimate_items_isValid;
}

QString OAIEstimatePO::getEstimateTitle() const {
    return m_estimate_title;
}
void OAIEstimatePO::setEstimateTitle(const QString &estimate_title) {
    m_estimate_title = estimate_title;
    m_estimate_title_isSet = true;
}

bool OAIEstimatePO::is_estimate_title_Set() const{
    return m_estimate_title_isSet;
}

bool OAIEstimatePO::is_estimate_title_Valid() const{
    return m_estimate_title_isValid;
}

QDate OAIEstimatePO::getExpirationDate() const {
    return m_expiration_date;
}
void OAIEstimatePO::setExpirationDate(const QDate &expiration_date) {
    m_expiration_date = expiration_date;
    m_expiration_date_isSet = true;
}

bool OAIEstimatePO::is_expiration_date_Set() const{
    return m_expiration_date_isSet;
}

bool OAIEstimatePO::is_expiration_date_Valid() const{
    return m_expiration_date_isValid;
}

QString OAIEstimatePO::getOwnerReference() const {
    return m_owner_reference;
}
void OAIEstimatePO::setOwnerReference(const QString &owner_reference) {
    m_owner_reference = owner_reference;
    m_owner_reference_isSet = true;
}

bool OAIEstimatePO::is_owner_reference_Set() const{
    return m_owner_reference_isSet;
}

bool OAIEstimatePO::is_owner_reference_Valid() const{
    return m_owner_reference_isValid;
}

qint64 OAIEstimatePO::getRfeId() const {
    return m_rfe_id;
}
void OAIEstimatePO::setRfeId(const qint64 &rfe_id) {
    m_rfe_id = rfe_id;
    m_rfe_id_isSet = true;
}

bool OAIEstimatePO::is_rfe_id_Set() const{
    return m_rfe_id_isSet;
}

bool OAIEstimatePO::is_rfe_id_Valid() const{
    return m_rfe_id_isValid;
}

bool OAIEstimatePO::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_comments_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_estimate_items.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_estimate_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expiration_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_owner_reference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rfe_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEstimatePO::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
