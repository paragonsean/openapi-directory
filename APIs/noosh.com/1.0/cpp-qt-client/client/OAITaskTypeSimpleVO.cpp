/**
 * Noosh API application
 * Full description of Noosh API
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITaskTypeSimpleVO.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITaskTypeSimpleVO::OAITaskTypeSimpleVO(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITaskTypeSimpleVO::OAITaskTypeSimpleVO() {
    this->initializeModel();
}

OAITaskTypeSimpleVO::~OAITaskTypeSimpleVO() {}

void OAITaskTypeSimpleVO::initializeModel() {

    m_task_type_isSet = false;
    m_task_type_isValid = false;

    m_task_type_id_isSet = false;
    m_task_type_id_isValid = false;
}

void OAITaskTypeSimpleVO::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITaskTypeSimpleVO::fromJsonObject(QJsonObject json) {

    m_task_type_isValid = ::OpenAPI::fromJsonValue(m_task_type, json[QString("task_type")]);
    m_task_type_isSet = !json[QString("task_type")].isNull() && m_task_type_isValid;

    m_task_type_id_isValid = ::OpenAPI::fromJsonValue(m_task_type_id, json[QString("task_type_id")]);
    m_task_type_id_isSet = !json[QString("task_type_id")].isNull() && m_task_type_id_isValid;
}

QString OAITaskTypeSimpleVO::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITaskTypeSimpleVO::asJsonObject() const {
    QJsonObject obj;
    if (m_task_type_isSet) {
        obj.insert(QString("task_type"), ::OpenAPI::toJsonValue(m_task_type));
    }
    if (m_task_type_id_isSet) {
        obj.insert(QString("task_type_id"), ::OpenAPI::toJsonValue(m_task_type_id));
    }
    return obj;
}

QString OAITaskTypeSimpleVO::getTaskType() const {
    return m_task_type;
}
void OAITaskTypeSimpleVO::setTaskType(const QString &task_type) {
    m_task_type = task_type;
    m_task_type_isSet = true;
}

bool OAITaskTypeSimpleVO::is_task_type_Set() const{
    return m_task_type_isSet;
}

bool OAITaskTypeSimpleVO::is_task_type_Valid() const{
    return m_task_type_isValid;
}

qint64 OAITaskTypeSimpleVO::getTaskTypeId() const {
    return m_task_type_id;
}
void OAITaskTypeSimpleVO::setTaskTypeId(const qint64 &task_type_id) {
    m_task_type_id = task_type_id;
    m_task_type_id_isSet = true;
}

bool OAITaskTypeSimpleVO::is_task_type_id_Set() const{
    return m_task_type_id_isSet;
}

bool OAITaskTypeSimpleVO::is_task_type_id_Valid() const{
    return m_task_type_id_isValid;
}

bool OAITaskTypeSimpleVO::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_task_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_task_type_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITaskTypeSimpleVO::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
