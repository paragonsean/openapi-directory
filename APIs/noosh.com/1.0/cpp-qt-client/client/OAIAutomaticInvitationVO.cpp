/**
 * Noosh API application
 * Full description of Noosh API
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAutomaticInvitationVO.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAutomaticInvitationVO::OAIAutomaticInvitationVO(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAutomaticInvitationVO::OAIAutomaticInvitationVO() {
    this->initializeModel();
}

OAIAutomaticInvitationVO::~OAIAutomaticInvitationVO() {}

void OAIAutomaticInvitationVO::initializeModel() {

    m_automatic_invitation_type_name_isSet = false;
    m_automatic_invitation_type_name_isValid = false;

    m_team_template_isSet = false;
    m_team_template_isValid = false;
}

void OAIAutomaticInvitationVO::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAutomaticInvitationVO::fromJsonObject(QJsonObject json) {

    m_automatic_invitation_type_name_isValid = ::OpenAPI::fromJsonValue(m_automatic_invitation_type_name, json[QString("automatic_invitation_type_name")]);
    m_automatic_invitation_type_name_isSet = !json[QString("automatic_invitation_type_name")].isNull() && m_automatic_invitation_type_name_isValid;

    m_team_template_isValid = ::OpenAPI::fromJsonValue(m_team_template, json[QString("team_template")]);
    m_team_template_isSet = !json[QString("team_template")].isNull() && m_team_template_isValid;
}

QString OAIAutomaticInvitationVO::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAutomaticInvitationVO::asJsonObject() const {
    QJsonObject obj;
    if (m_automatic_invitation_type_name_isSet) {
        obj.insert(QString("automatic_invitation_type_name"), ::OpenAPI::toJsonValue(m_automatic_invitation_type_name));
    }
    if (m_team_template.isSet()) {
        obj.insert(QString("team_template"), ::OpenAPI::toJsonValue(m_team_template));
    }
    return obj;
}

QString OAIAutomaticInvitationVO::getAutomaticInvitationTypeName() const {
    return m_automatic_invitation_type_name;
}
void OAIAutomaticInvitationVO::setAutomaticInvitationTypeName(const QString &automatic_invitation_type_name) {
    m_automatic_invitation_type_name = automatic_invitation_type_name;
    m_automatic_invitation_type_name_isSet = true;
}

bool OAIAutomaticInvitationVO::is_automatic_invitation_type_name_Set() const{
    return m_automatic_invitation_type_name_isSet;
}

bool OAIAutomaticInvitationVO::is_automatic_invitation_type_name_Valid() const{
    return m_automatic_invitation_type_name_isValid;
}

OAITeamTemplateSimpleVO OAIAutomaticInvitationVO::getTeamTemplate() const {
    return m_team_template;
}
void OAIAutomaticInvitationVO::setTeamTemplate(const OAITeamTemplateSimpleVO &team_template) {
    m_team_template = team_template;
    m_team_template_isSet = true;
}

bool OAIAutomaticInvitationVO::is_team_template_Set() const{
    return m_team_template_isSet;
}

bool OAIAutomaticInvitationVO::is_team_template_Valid() const{
    return m_team_template_isValid;
}

bool OAIAutomaticInvitationVO::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_automatic_invitation_type_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_team_template.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAutomaticInvitationVO::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
