/**
 * Noosh API application
 * Full description of Noosh API
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIV1x1InvitedTeamMemberVO.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIV1x1InvitedTeamMemberVO::OAIV1x1InvitedTeamMemberVO(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIV1x1InvitedTeamMemberVO::OAIV1x1InvitedTeamMemberVO() {
    this->initializeModel();
}

OAIV1x1InvitedTeamMemberVO::~OAIV1x1InvitedTeamMemberVO() {}

void OAIV1x1InvitedTeamMemberVO::initializeModel() {

    m_role_isSet = false;
    m_role_isValid = false;

    m_team_member_id_isSet = false;
    m_team_member_id_isValid = false;

    m_user_isSet = false;
    m_user_isValid = false;

    m_was_invited_before_isSet = false;
    m_was_invited_before_isValid = false;
}

void OAIV1x1InvitedTeamMemberVO::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIV1x1InvitedTeamMemberVO::fromJsonObject(QJsonObject json) {

    m_role_isValid = ::OpenAPI::fromJsonValue(m_role, json[QString("role")]);
    m_role_isSet = !json[QString("role")].isNull() && m_role_isValid;

    m_team_member_id_isValid = ::OpenAPI::fromJsonValue(m_team_member_id, json[QString("team_member_id")]);
    m_team_member_id_isSet = !json[QString("team_member_id")].isNull() && m_team_member_id_isValid;

    m_user_isValid = ::OpenAPI::fromJsonValue(m_user, json[QString("user")]);
    m_user_isSet = !json[QString("user")].isNull() && m_user_isValid;

    m_was_invited_before_isValid = ::OpenAPI::fromJsonValue(m_was_invited_before, json[QString("was_invited_before")]);
    m_was_invited_before_isSet = !json[QString("was_invited_before")].isNull() && m_was_invited_before_isValid;
}

QString OAIV1x1InvitedTeamMemberVO::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIV1x1InvitedTeamMemberVO::asJsonObject() const {
    QJsonObject obj;
    if (m_role.isSet()) {
        obj.insert(QString("role"), ::OpenAPI::toJsonValue(m_role));
    }
    if (m_team_member_id_isSet) {
        obj.insert(QString("team_member_id"), ::OpenAPI::toJsonValue(m_team_member_id));
    }
    if (m_user.isSet()) {
        obj.insert(QString("user"), ::OpenAPI::toJsonValue(m_user));
    }
    if (m_was_invited_before_isSet) {
        obj.insert(QString("was_invited_before"), ::OpenAPI::toJsonValue(m_was_invited_before));
    }
    return obj;
}

OAIRoleSimpleVO OAIV1x1InvitedTeamMemberVO::getRole() const {
    return m_role;
}
void OAIV1x1InvitedTeamMemberVO::setRole(const OAIRoleSimpleVO &role) {
    m_role = role;
    m_role_isSet = true;
}

bool OAIV1x1InvitedTeamMemberVO::is_role_Set() const{
    return m_role_isSet;
}

bool OAIV1x1InvitedTeamMemberVO::is_role_Valid() const{
    return m_role_isValid;
}

qint64 OAIV1x1InvitedTeamMemberVO::getTeamMemberId() const {
    return m_team_member_id;
}
void OAIV1x1InvitedTeamMemberVO::setTeamMemberId(const qint64 &team_member_id) {
    m_team_member_id = team_member_id;
    m_team_member_id_isSet = true;
}

bool OAIV1x1InvitedTeamMemberVO::is_team_member_id_Set() const{
    return m_team_member_id_isSet;
}

bool OAIV1x1InvitedTeamMemberVO::is_team_member_id_Valid() const{
    return m_team_member_id_isValid;
}

OAIUserPersonVO OAIV1x1InvitedTeamMemberVO::getUser() const {
    return m_user;
}
void OAIV1x1InvitedTeamMemberVO::setUser(const OAIUserPersonVO &user) {
    m_user = user;
    m_user_isSet = true;
}

bool OAIV1x1InvitedTeamMemberVO::is_user_Set() const{
    return m_user_isSet;
}

bool OAIV1x1InvitedTeamMemberVO::is_user_Valid() const{
    return m_user_isValid;
}

bool OAIV1x1InvitedTeamMemberVO::isWasInvitedBefore() const {
    return m_was_invited_before;
}
void OAIV1x1InvitedTeamMemberVO::setWasInvitedBefore(const bool &was_invited_before) {
    m_was_invited_before = was_invited_before;
    m_was_invited_before_isSet = true;
}

bool OAIV1x1InvitedTeamMemberVO::is_was_invited_before_Set() const{
    return m_was_invited_before_isSet;
}

bool OAIV1x1InvitedTeamMemberVO::is_was_invited_before_Valid() const{
    return m_was_invited_before_isValid;
}

bool OAIV1x1InvitedTeamMemberVO::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_role.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_team_member_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_was_invited_before_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIV1x1InvitedTeamMemberVO::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
