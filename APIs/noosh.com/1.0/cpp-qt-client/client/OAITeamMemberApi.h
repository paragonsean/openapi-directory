/**
 * Noosh API application
 * Full description of Noosh API
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAITeamMemberApi_H
#define OAI_OAITeamMemberApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIContactUserVO.h"
#include "OAIHTTPStatusVO.h"
#include "OAITeamMemberBaseInfVO.h"
#include "OAITeamMemberListVO.h"
#include "OAITeamMemberPO.h"
#include "OAIV1x1InvitedTeamMemberResultsVO.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAITeamMemberApi : public QObject {
    Q_OBJECT

public:
    OAITeamMemberApi(const int timeOut = 0);
    ~OAITeamMemberApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  workgroup_id QString [required]
    * @param[in]  project_id QString [required]
    * @param[in]  teammember_id QString [required]
    */
    virtual void deleteTeamMemberOfProject(const QString &workgroup_id, const QString &project_id, const QString &teammember_id);

    /**
    * @param[in]  workgroup_id QString [required]
    * @param[in]  project_id QString [required]
    */
    virtual void getTeamMemberListOfClientProject(const QString &workgroup_id, const QString &project_id);

    /**
    * @param[in]  workgroup_id QString [required]
    * @param[in]  project_id QString [required]
    */
    virtual void getTeamMemberListOfProject(const QString &workgroup_id, const QString &project_id);

    /**
    * @param[in]  workgroup_id QString [required]
    * @param[in]  project_id QString [required]
    * @param[in]  oai_team_member_po OAITeamMemberPO [optional]
    */
    virtual void postTeamMemberOfProject(const QString &workgroup_id, const QString &project_id, const ::OpenAPI::OptionalParam<OAITeamMemberPO> &oai_team_member_po = ::OpenAPI::OptionalParam<OAITeamMemberPO>());

    /**
    * @param[in]  workgroup_id QString [required]
    * @param[in]  project_id QString [required]
    * @param[in]  oai_contact_user_vo OAIContactUserVO [optional]
    */
    virtual void v1WorkgroupsWorkgroupIdProjectsProjectIdTeammembersPost(const QString &workgroup_id, const QString &project_id, const ::OpenAPI::OptionalParam<OAIContactUserVO> &oai_contact_user_vo = ::OpenAPI::OptionalParam<OAIContactUserVO>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void deleteTeamMemberOfProjectCallback(OAIHttpRequestWorker *worker);
    void getTeamMemberListOfClientProjectCallback(OAIHttpRequestWorker *worker);
    void getTeamMemberListOfProjectCallback(OAIHttpRequestWorker *worker);
    void postTeamMemberOfProjectCallback(OAIHttpRequestWorker *worker);
    void v1WorkgroupsWorkgroupIdProjectsProjectIdTeammembersPostCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void deleteTeamMemberOfProjectSignal(OAITeamMemberBaseInfVO summary);
    void getTeamMemberListOfClientProjectSignal(OAITeamMemberListVO summary);
    void getTeamMemberListOfProjectSignal(OAITeamMemberListVO summary);
    void postTeamMemberOfProjectSignal(OAIV1x1InvitedTeamMemberResultsVO summary);
    void v1WorkgroupsWorkgroupIdProjectsProjectIdTeammembersPostSignal(OAITeamMemberBaseInfVO summary);


    void deleteTeamMemberOfProjectSignalFull(OAIHttpRequestWorker *worker, OAITeamMemberBaseInfVO summary);
    void getTeamMemberListOfClientProjectSignalFull(OAIHttpRequestWorker *worker, OAITeamMemberListVO summary);
    void getTeamMemberListOfProjectSignalFull(OAIHttpRequestWorker *worker, OAITeamMemberListVO summary);
    void postTeamMemberOfProjectSignalFull(OAIHttpRequestWorker *worker, OAIV1x1InvitedTeamMemberResultsVO summary);
    void v1WorkgroupsWorkgroupIdProjectsProjectIdTeammembersPostSignalFull(OAIHttpRequestWorker *worker, OAITeamMemberBaseInfVO summary);

    Q_DECL_DEPRECATED_X("Use deleteTeamMemberOfProjectSignalError() instead")
    void deleteTeamMemberOfProjectSignalE(OAITeamMemberBaseInfVO summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteTeamMemberOfProjectSignalError(OAITeamMemberBaseInfVO summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTeamMemberListOfClientProjectSignalError() instead")
    void getTeamMemberListOfClientProjectSignalE(OAITeamMemberListVO summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getTeamMemberListOfClientProjectSignalError(OAITeamMemberListVO summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTeamMemberListOfProjectSignalError() instead")
    void getTeamMemberListOfProjectSignalE(OAITeamMemberListVO summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getTeamMemberListOfProjectSignalError(OAITeamMemberListVO summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postTeamMemberOfProjectSignalError() instead")
    void postTeamMemberOfProjectSignalE(OAIV1x1InvitedTeamMemberResultsVO summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postTeamMemberOfProjectSignalError(OAIV1x1InvitedTeamMemberResultsVO summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v1WorkgroupsWorkgroupIdProjectsProjectIdTeammembersPostSignalError() instead")
    void v1WorkgroupsWorkgroupIdProjectsProjectIdTeammembersPostSignalE(OAITeamMemberBaseInfVO summary, QNetworkReply::NetworkError error_type, QString error_str);
    void v1WorkgroupsWorkgroupIdProjectsProjectIdTeammembersPostSignalError(OAITeamMemberBaseInfVO summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use deleteTeamMemberOfProjectSignalErrorFull() instead")
    void deleteTeamMemberOfProjectSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteTeamMemberOfProjectSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTeamMemberListOfClientProjectSignalErrorFull() instead")
    void getTeamMemberListOfClientProjectSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getTeamMemberListOfClientProjectSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTeamMemberListOfProjectSignalErrorFull() instead")
    void getTeamMemberListOfProjectSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getTeamMemberListOfProjectSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postTeamMemberOfProjectSignalErrorFull() instead")
    void postTeamMemberOfProjectSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postTeamMemberOfProjectSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v1WorkgroupsWorkgroupIdProjectsProjectIdTeammembersPostSignalErrorFull() instead")
    void v1WorkgroupsWorkgroupIdProjectsProjectIdTeammembersPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void v1WorkgroupsWorkgroupIdProjectsProjectIdTeammembersPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
