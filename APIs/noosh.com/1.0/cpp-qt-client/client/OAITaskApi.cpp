/**
 * Noosh API application
 * Full description of Noosh API
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITaskApi.h"
#include "OAIServerConfiguration.h"
#include <QJsonArray>
#include <QJsonDocument>

namespace OpenAPI {

OAITaskApi::OAITaskApi(const int timeOut)
    : _timeOut(timeOut),
      _manager(nullptr),
      _isResponseCompressionEnabled(false),
      _isRequestCompressionEnabled(false) {
    initializeServerConfigs();
}

OAITaskApi::~OAITaskApi() {
}

void OAITaskApi::initializeServerConfigs() {
    //Default server
    QList<OAIServerConfiguration> defaultConf = QList<OAIServerConfiguration>();
    //varying endpoint server
    defaultConf.append(OAIServerConfiguration(
    QUrl("http://example.com:80/v1"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    _serverConfigs.insert("getCustomTaskTypesOfWg", defaultConf);
    _serverIndices.insert("getCustomTaskTypesOfWg", 0);
    _serverConfigs.insert("getDefaultTaskStatusList", defaultConf);
    _serverIndices.insert("getDefaultTaskStatusList", 0);
    _serverConfigs.insert("getTaskListOfProject", defaultConf);
    _serverIndices.insert("getTaskListOfProject", 0);
    _serverConfigs.insert("getTaskListOfWorkgroup", defaultConf);
    _serverIndices.insert("getTaskListOfWorkgroup", 0);
    _serverConfigs.insert("getTaskOfProject", defaultConf);
    _serverIndices.insert("getTaskOfProject", 0);
    _serverConfigs.insert("getTaskOfWorkgroup", defaultConf);
    _serverIndices.insert("getTaskOfWorkgroup", 0);
    _serverConfigs.insert("getTaskTypesOfWorkgroup", defaultConf);
    _serverIndices.insert("getTaskTypesOfWorkgroup", 0);
    _serverConfigs.insert("getWgTaskStatusListOfWorkgroup", defaultConf);
    _serverIndices.insert("getWgTaskStatusListOfWorkgroup", 0);
    _serverConfigs.insert("postTaskForProject", defaultConf);
    _serverIndices.insert("postTaskForProject", 0);
    _serverConfigs.insert("taskPriorityList", defaultConf);
    _serverIndices.insert("taskPriorityList", 0);
}

/**
* returns 0 on success and -1, -2 or -3 on failure.
* -1 when the variable does not exist and -2 if the value is not defined in the enum and -3 if the operation or server index is not found
*/
int OAITaskApi::setDefaultServerValue(int serverIndex, const QString &operation, const QString &variable, const QString &value) {
    auto it = _serverConfigs.find(operation);
    if (it != _serverConfigs.end() && serverIndex < it.value().size()) {
      return _serverConfigs[operation][serverIndex].setDefaultValue(variable,value);
    }
    return -3;
}
void OAITaskApi::setServerIndex(const QString &operation, int serverIndex) {
    if (_serverIndices.contains(operation) && serverIndex < _serverConfigs.find(operation).value().size()) {
        _serverIndices[operation] = serverIndex;
    }
}

void OAITaskApi::setApiKey(const QString &apiKeyName, const QString &apiKey) {
    _apiKeys.insert(apiKeyName, apiKey);
}

void OAITaskApi::setBearerToken(const QString &token) {
    _bearerToken = token;
}

void OAITaskApi::setUsername(const QString &username) {
    _username = username;
}

void OAITaskApi::setPassword(const QString &password) {
    _password = password;
}


void OAITaskApi::setTimeOut(const int timeOut) {
    _timeOut = timeOut;
}

void OAITaskApi::setWorkingDirectory(const QString &path) {
    _workingDirectory = path;
}

void OAITaskApi::setNetworkAccessManager(QNetworkAccessManager* manager) {
    _manager = manager;
}

/**
    * Appends a new ServerConfiguration to the config map for a specific operation.
    * @param operation The id to the target operation.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    * returns the index of the new server config on success and -1 if the operation is not found
    */
int OAITaskApi::addServerConfiguration(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    if (_serverConfigs.contains(operation)) {
        _serverConfigs[operation].append(OAIServerConfiguration(
                    url,
                    description,
                    variables));
        return _serverConfigs[operation].size()-1;
    } else {
        return -1;
    }
}

/**
    * Appends a new ServerConfiguration to the config map for a all operations and sets the index to that server.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAITaskApi::setNewServerForAllOperations(const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    for (auto keyIt = _serverIndices.keyBegin(); keyIt != _serverIndices.keyEnd(); keyIt++) {
        setServerIndex(*keyIt, addServerConfiguration(*keyIt, url, description, variables));
    }
}

/**
    * Appends a new ServerConfiguration to the config map for an operations and sets the index to that server.
    * @param URL A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAITaskApi::setNewServer(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    setServerIndex(operation, addServerConfiguration(operation, url, description, variables));
}

void OAITaskApi::addHeaders(const QString &key, const QString &value) {
    _defaultHeaders.insert(key, value);
}

void OAITaskApi::enableRequestCompression() {
    _isRequestCompressionEnabled = true;
}

void OAITaskApi::enableResponseCompression() {
    _isResponseCompressionEnabled = true;
}

void OAITaskApi::abortRequests() {
    Q_EMIT abortRequestsSignal();
}

QString OAITaskApi::getParamStylePrefix(const QString &style) {
    if (style == "matrix") {
        return ";";
    } else if (style == "label") {
        return ".";
    } else if (style == "form") {
        return "&";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "&";
    } else if (style == "pipeDelimited") {
        return "&";
    } else {
        return "none";
    }
}

QString OAITaskApi::getParamStyleSuffix(const QString &style) {
    if (style == "matrix") {
        return "=";
    } else if (style == "label") {
        return "";
    } else if (style == "form") {
        return "=";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "=";
    } else if (style == "pipeDelimited") {
        return "=";
    } else {
        return "none";
    }
}

QString OAITaskApi::getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode) {

    if (style == "matrix") {
        return (isExplode) ? ";" + name + "=" : ",";

    } else if (style == "label") {
        return (isExplode) ? "." : ",";

    } else if (style == "form") {
        return (isExplode) ? "&" + name + "=" : ",";

    } else if (style == "simple") {
        return ",";
    } else if (style == "spaceDelimited") {
        return (isExplode) ? "&" + name + "=" : " ";

    } else if (style == "pipeDelimited") {
        return (isExplode) ? "&" + name + "=" : "|";

    } else if (style == "deepObject") {
        return (isExplode) ? "&" : "none";

    } else {
        return "none";
    }
}

void OAITaskApi::getCustomTaskTypesOfWg(const QString &workgroup_id) {
    QString fullPath = QString(_serverConfigs["getCustomTaskTypesOfWg"][_serverIndices.value("getCustomTaskTypesOfWg")].URL()+"/v1/workgroups/{workgroup_id}/customTaskTypes");
    
    
    {
        QString workgroup_idPathParam("{");
        workgroup_idPathParam.append("workgroup_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "workgroup_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"workgroup_id"+pathSuffix : pathPrefix;
        fullPath.replace(workgroup_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(workgroup_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAITaskApi::getCustomTaskTypesOfWgCallback);
    connect(this, &OAITaskApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAITaskApi::getCustomTaskTypesOfWgCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAITaskTypeListVO output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getCustomTaskTypesOfWgSignal(output);
        Q_EMIT getCustomTaskTypesOfWgSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getCustomTaskTypesOfWgSignalE(output, error_type, error_str);
        Q_EMIT getCustomTaskTypesOfWgSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getCustomTaskTypesOfWgSignalError(output, error_type, error_str);
        Q_EMIT getCustomTaskTypesOfWgSignalErrorFull(worker, error_type, error_str);
    }
}

void OAITaskApi::getDefaultTaskStatusList(const QString &workgroup_id) {
    QString fullPath = QString(_serverConfigs["getDefaultTaskStatusList"][_serverIndices.value("getDefaultTaskStatusList")].URL()+"/v1/workgroups/{workgroup_id}/defaultTaskStatus");
    
    
    {
        QString workgroup_idPathParam("{");
        workgroup_idPathParam.append("workgroup_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "workgroup_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"workgroup_id"+pathSuffix : pathPrefix;
        fullPath.replace(workgroup_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(workgroup_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAITaskApi::getDefaultTaskStatusListCallback);
    connect(this, &OAITaskApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAITaskApi::getDefaultTaskStatusListCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAITaskStatusListVO output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getDefaultTaskStatusListSignal(output);
        Q_EMIT getDefaultTaskStatusListSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getDefaultTaskStatusListSignalE(output, error_type, error_str);
        Q_EMIT getDefaultTaskStatusListSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getDefaultTaskStatusListSignalError(output, error_type, error_str);
        Q_EMIT getDefaultTaskStatusListSignalErrorFull(worker, error_type, error_str);
    }
}

void OAITaskApi::getTaskListOfProject(const QString &workgroup_id, const QString &project_id) {
    QString fullPath = QString(_serverConfigs["getTaskListOfProject"][_serverIndices.value("getTaskListOfProject")].URL()+"/v1/workgroups/{workgroup_id}/projects/{project_id}/tasks");
    
    
    {
        QString workgroup_idPathParam("{");
        workgroup_idPathParam.append("workgroup_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "workgroup_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"workgroup_id"+pathSuffix : pathPrefix;
        fullPath.replace(workgroup_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(workgroup_id)));
    }
    
    {
        QString project_idPathParam("{");
        project_idPathParam.append("project_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "project_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"project_id"+pathSuffix : pathPrefix;
        fullPath.replace(project_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(project_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAITaskApi::getTaskListOfProjectCallback);
    connect(this, &OAITaskApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAITaskApi::getTaskListOfProjectCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAITaskListVO output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getTaskListOfProjectSignal(output);
        Q_EMIT getTaskListOfProjectSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getTaskListOfProjectSignalE(output, error_type, error_str);
        Q_EMIT getTaskListOfProjectSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getTaskListOfProjectSignalError(output, error_type, error_str);
        Q_EMIT getTaskListOfProjectSignalErrorFull(worker, error_type, error_str);
    }
}

void OAITaskApi::getTaskListOfWorkgroup(const QString &workgroup_id) {
    QString fullPath = QString(_serverConfigs["getTaskListOfWorkgroup"][_serverIndices.value("getTaskListOfWorkgroup")].URL()+"/v1/workgroups/{workgroup_id}/tasks");
    
    
    {
        QString workgroup_idPathParam("{");
        workgroup_idPathParam.append("workgroup_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "workgroup_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"workgroup_id"+pathSuffix : pathPrefix;
        fullPath.replace(workgroup_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(workgroup_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAITaskApi::getTaskListOfWorkgroupCallback);
    connect(this, &OAITaskApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAITaskApi::getTaskListOfWorkgroupCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAITaskWorkgroupLevelListVO output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getTaskListOfWorkgroupSignal(output);
        Q_EMIT getTaskListOfWorkgroupSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getTaskListOfWorkgroupSignalE(output, error_type, error_str);
        Q_EMIT getTaskListOfWorkgroupSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getTaskListOfWorkgroupSignalError(output, error_type, error_str);
        Q_EMIT getTaskListOfWorkgroupSignalErrorFull(worker, error_type, error_str);
    }
}

void OAITaskApi::getTaskOfProject(const QString &workgroup_id, const QString &project_id, const QString &task_id) {
    QString fullPath = QString(_serverConfigs["getTaskOfProject"][_serverIndices.value("getTaskOfProject")].URL()+"/v1/workgroups/{workgroup_id}/projects/{project_id}/tasks/{task_id}");
    
    
    {
        QString workgroup_idPathParam("{");
        workgroup_idPathParam.append("workgroup_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "workgroup_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"workgroup_id"+pathSuffix : pathPrefix;
        fullPath.replace(workgroup_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(workgroup_id)));
    }
    
    {
        QString project_idPathParam("{");
        project_idPathParam.append("project_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "project_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"project_id"+pathSuffix : pathPrefix;
        fullPath.replace(project_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(project_id)));
    }
    
    {
        QString task_idPathParam("{");
        task_idPathParam.append("task_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "task_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"task_id"+pathSuffix : pathPrefix;
        fullPath.replace(task_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(task_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAITaskApi::getTaskOfProjectCallback);
    connect(this, &OAITaskApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAITaskApi::getTaskOfProjectCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAITaskExpandVO output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getTaskOfProjectSignal(output);
        Q_EMIT getTaskOfProjectSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getTaskOfProjectSignalE(output, error_type, error_str);
        Q_EMIT getTaskOfProjectSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getTaskOfProjectSignalError(output, error_type, error_str);
        Q_EMIT getTaskOfProjectSignalErrorFull(worker, error_type, error_str);
    }
}

void OAITaskApi::getTaskOfWorkgroup(const QString &workgroup_id, const QString &task_id) {
    QString fullPath = QString(_serverConfigs["getTaskOfWorkgroup"][_serverIndices.value("getTaskOfWorkgroup")].URL()+"/v1/workgroups/{workgroup_id}/tasks/{task_id}");
    
    
    {
        QString workgroup_idPathParam("{");
        workgroup_idPathParam.append("workgroup_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "workgroup_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"workgroup_id"+pathSuffix : pathPrefix;
        fullPath.replace(workgroup_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(workgroup_id)));
    }
    
    {
        QString task_idPathParam("{");
        task_idPathParam.append("task_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "task_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"task_id"+pathSuffix : pathPrefix;
        fullPath.replace(task_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(task_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAITaskApi::getTaskOfWorkgroupCallback);
    connect(this, &OAITaskApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAITaskApi::getTaskOfWorkgroupCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAITaskExpandWorkgroupLevelVO output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getTaskOfWorkgroupSignal(output);
        Q_EMIT getTaskOfWorkgroupSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getTaskOfWorkgroupSignalE(output, error_type, error_str);
        Q_EMIT getTaskOfWorkgroupSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getTaskOfWorkgroupSignalError(output, error_type, error_str);
        Q_EMIT getTaskOfWorkgroupSignalErrorFull(worker, error_type, error_str);
    }
}

void OAITaskApi::getTaskTypesOfWorkgroup(const QString &workgroup_id) {
    QString fullPath = QString(_serverConfigs["getTaskTypesOfWorkgroup"][_serverIndices.value("getTaskTypesOfWorkgroup")].URL()+"/v1/workgroups/{workgroup_id}/taskTypes");
    
    
    {
        QString workgroup_idPathParam("{");
        workgroup_idPathParam.append("workgroup_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "workgroup_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"workgroup_id"+pathSuffix : pathPrefix;
        fullPath.replace(workgroup_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(workgroup_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAITaskApi::getTaskTypesOfWorkgroupCallback);
    connect(this, &OAITaskApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAITaskApi::getTaskTypesOfWorkgroupCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAITaskTypeListVO output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getTaskTypesOfWorkgroupSignal(output);
        Q_EMIT getTaskTypesOfWorkgroupSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getTaskTypesOfWorkgroupSignalE(output, error_type, error_str);
        Q_EMIT getTaskTypesOfWorkgroupSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getTaskTypesOfWorkgroupSignalError(output, error_type, error_str);
        Q_EMIT getTaskTypesOfWorkgroupSignalErrorFull(worker, error_type, error_str);
    }
}

void OAITaskApi::getWgTaskStatusListOfWorkgroup(const QString &workgroup_id) {
    QString fullPath = QString(_serverConfigs["getWgTaskStatusListOfWorkgroup"][_serverIndices.value("getWgTaskStatusListOfWorkgroup")].URL()+"/v1/workgroups/{workgroup_id}/customTaskStatus");
    
    
    {
        QString workgroup_idPathParam("{");
        workgroup_idPathParam.append("workgroup_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "workgroup_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"workgroup_id"+pathSuffix : pathPrefix;
        fullPath.replace(workgroup_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(workgroup_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAITaskApi::getWgTaskStatusListOfWorkgroupCallback);
    connect(this, &OAITaskApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAITaskApi::getWgTaskStatusListOfWorkgroupCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIWgTaskStatusListVO output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getWgTaskStatusListOfWorkgroupSignal(output);
        Q_EMIT getWgTaskStatusListOfWorkgroupSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getWgTaskStatusListOfWorkgroupSignalE(output, error_type, error_str);
        Q_EMIT getWgTaskStatusListOfWorkgroupSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getWgTaskStatusListOfWorkgroupSignalError(output, error_type, error_str);
        Q_EMIT getWgTaskStatusListOfWorkgroupSignalErrorFull(worker, error_type, error_str);
    }
}

void OAITaskApi::postTaskForProject(const QString &workgroup_id, const QString &project_id, const ::OpenAPI::OptionalParam<OAITaskPersistVO> &oai_task_persist_vo) {
    QString fullPath = QString(_serverConfigs["postTaskForProject"][_serverIndices.value("postTaskForProject")].URL()+"/v1/workgroups/{workgroup_id}/projects/{project_id}/tasks");
    
    
    {
        QString workgroup_idPathParam("{");
        workgroup_idPathParam.append("workgroup_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "workgroup_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"workgroup_id"+pathSuffix : pathPrefix;
        fullPath.replace(workgroup_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(workgroup_id)));
    }
    
    {
        QString project_idPathParam("{");
        project_idPathParam.append("project_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "project_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"project_id"+pathSuffix : pathPrefix;
        fullPath.replace(project_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(project_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    if (oai_task_persist_vo.hasValue()){

        
        QByteArray output = oai_task_persist_vo.value().asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAITaskApi::postTaskForProjectCallback);
    connect(this, &OAITaskApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAITaskApi::postTaskForProjectCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAITaskCreatedVO output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT postTaskForProjectSignal(output);
        Q_EMIT postTaskForProjectSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT postTaskForProjectSignalE(output, error_type, error_str);
        Q_EMIT postTaskForProjectSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT postTaskForProjectSignalError(output, error_type, error_str);
        Q_EMIT postTaskForProjectSignalErrorFull(worker, error_type, error_str);
    }
}

void OAITaskApi::taskPriorityList(const QString &workgroup_id) {
    QString fullPath = QString(_serverConfigs["taskPriorityList"][_serverIndices.value("taskPriorityList")].URL()+"/v1/workgroups/{workgroup_id}/defaultTaskPriority");
    
    
    {
        QString workgroup_idPathParam("{");
        workgroup_idPathParam.append("workgroup_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "workgroup_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"workgroup_id"+pathSuffix : pathPrefix;
        fullPath.replace(workgroup_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(workgroup_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAITaskApi::taskPriorityListCallback);
    connect(this, &OAITaskApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAITaskApi::taskPriorityListCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAITaskPriorityListVO output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT taskPriorityListSignal(output);
        Q_EMIT taskPriorityListSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT taskPriorityListSignalE(output, error_type, error_str);
        Q_EMIT taskPriorityListSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT taskPriorityListSignalError(output, error_type, error_str);
        Q_EMIT taskPriorityListSignalErrorFull(worker, error_type, error_str);
    }
}

void OAITaskApi::tokenAvailable(){

    oauthToken token;
    switch (_OauthMethod) {
    case 1: //implicit flow
        token = _implicitFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _implicitFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 2: //authorization flow
        token = _authFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _authFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 3: //client credentials flow
        token = _credentialFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 4: //resource owner password flow
        token = _passwordFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    default:
        qDebug() << "No Oauth method set!";
        break;
    }
}
} // namespace OpenAPI
