/**
 * Noosh API application
 * Full description of Noosh API
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRfqDetailsVO.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRfqDetailsVO::OAIRfqDetailsVO(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRfqDetailsVO::OAIRfqDetailsVO() {
    this->initializeModel();
}

OAIRfqDetailsVO::~OAIRfqDetailsVO() {}

void OAIRfqDetailsVO::initializeModel() {

    m_comments_isSet = false;
    m_comments_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_proposed_completion_date_isSet = false;
    m_proposed_completion_date_isValid = false;

    m_quote_due_date_isSet = false;
    m_quote_due_date_isValid = false;

    m_quotes_isSet = false;
    m_quotes_isValid = false;

    m_received_date_isSet = false;
    m_received_date_isValid = false;

    m_recipient_name_isSet = false;
    m_recipient_name_isValid = false;

    m_requestor_name_isSet = false;
    m_requestor_name_isValid = false;

    m_rfq_id_isSet = false;
    m_rfq_id_isValid = false;

    m_rfq_items_isSet = false;
    m_rfq_items_isValid = false;

    m_rfq_title_isSet = false;
    m_rfq_title_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIRfqDetailsVO::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRfqDetailsVO::fromJsonObject(QJsonObject json) {

    m_comments_isValid = ::OpenAPI::fromJsonValue(m_comments, json[QString("comments")]);
    m_comments_isSet = !json[QString("comments")].isNull() && m_comments_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_proposed_completion_date_isValid = ::OpenAPI::fromJsonValue(m_proposed_completion_date, json[QString("proposed_completion_date")]);
    m_proposed_completion_date_isSet = !json[QString("proposed_completion_date")].isNull() && m_proposed_completion_date_isValid;

    m_quote_due_date_isValid = ::OpenAPI::fromJsonValue(m_quote_due_date, json[QString("quote_due_date")]);
    m_quote_due_date_isSet = !json[QString("quote_due_date")].isNull() && m_quote_due_date_isValid;

    m_quotes_isValid = ::OpenAPI::fromJsonValue(m_quotes, json[QString("quotes")]);
    m_quotes_isSet = !json[QString("quotes")].isNull() && m_quotes_isValid;

    m_received_date_isValid = ::OpenAPI::fromJsonValue(m_received_date, json[QString("received_date")]);
    m_received_date_isSet = !json[QString("received_date")].isNull() && m_received_date_isValid;

    m_recipient_name_isValid = ::OpenAPI::fromJsonValue(m_recipient_name, json[QString("recipient_name")]);
    m_recipient_name_isSet = !json[QString("recipient_name")].isNull() && m_recipient_name_isValid;

    m_requestor_name_isValid = ::OpenAPI::fromJsonValue(m_requestor_name, json[QString("requestor_name")]);
    m_requestor_name_isSet = !json[QString("requestor_name")].isNull() && m_requestor_name_isValid;

    m_rfq_id_isValid = ::OpenAPI::fromJsonValue(m_rfq_id, json[QString("rfq_id")]);
    m_rfq_id_isSet = !json[QString("rfq_id")].isNull() && m_rfq_id_isValid;

    m_rfq_items_isValid = ::OpenAPI::fromJsonValue(m_rfq_items, json[QString("rfq_items")]);
    m_rfq_items_isSet = !json[QString("rfq_items")].isNull() && m_rfq_items_isValid;

    m_rfq_title_isValid = ::OpenAPI::fromJsonValue(m_rfq_title, json[QString("rfq_title")]);
    m_rfq_title_isSet = !json[QString("rfq_title")].isNull() && m_rfq_title_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAIRfqDetailsVO::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRfqDetailsVO::asJsonObject() const {
    QJsonObject obj;
    if (m_comments_isSet) {
        obj.insert(QString("comments"), ::OpenAPI::toJsonValue(m_comments));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_proposed_completion_date_isSet) {
        obj.insert(QString("proposed_completion_date"), ::OpenAPI::toJsonValue(m_proposed_completion_date));
    }
    if (m_quote_due_date_isSet) {
        obj.insert(QString("quote_due_date"), ::OpenAPI::toJsonValue(m_quote_due_date));
    }
    if (m_quotes.size() > 0) {
        obj.insert(QString("quotes"), ::OpenAPI::toJsonValue(m_quotes));
    }
    if (m_received_date_isSet) {
        obj.insert(QString("received_date"), ::OpenAPI::toJsonValue(m_received_date));
    }
    if (m_recipient_name_isSet) {
        obj.insert(QString("recipient_name"), ::OpenAPI::toJsonValue(m_recipient_name));
    }
    if (m_requestor_name_isSet) {
        obj.insert(QString("requestor_name"), ::OpenAPI::toJsonValue(m_requestor_name));
    }
    if (m_rfq_id_isSet) {
        obj.insert(QString("rfq_id"), ::OpenAPI::toJsonValue(m_rfq_id));
    }
    if (m_rfq_items.size() > 0) {
        obj.insert(QString("rfq_items"), ::OpenAPI::toJsonValue(m_rfq_items));
    }
    if (m_rfq_title_isSet) {
        obj.insert(QString("rfq_title"), ::OpenAPI::toJsonValue(m_rfq_title));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

QString OAIRfqDetailsVO::getComments() const {
    return m_comments;
}
void OAIRfqDetailsVO::setComments(const QString &comments) {
    m_comments = comments;
    m_comments_isSet = true;
}

bool OAIRfqDetailsVO::is_comments_Set() const{
    return m_comments_isSet;
}

bool OAIRfqDetailsVO::is_comments_Valid() const{
    return m_comments_isValid;
}

QString OAIRfqDetailsVO::getDescription() const {
    return m_description;
}
void OAIRfqDetailsVO::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIRfqDetailsVO::is_description_Set() const{
    return m_description_isSet;
}

bool OAIRfqDetailsVO::is_description_Valid() const{
    return m_description_isValid;
}

QDate OAIRfqDetailsVO::getProposedCompletionDate() const {
    return m_proposed_completion_date;
}
void OAIRfqDetailsVO::setProposedCompletionDate(const QDate &proposed_completion_date) {
    m_proposed_completion_date = proposed_completion_date;
    m_proposed_completion_date_isSet = true;
}

bool OAIRfqDetailsVO::is_proposed_completion_date_Set() const{
    return m_proposed_completion_date_isSet;
}

bool OAIRfqDetailsVO::is_proposed_completion_date_Valid() const{
    return m_proposed_completion_date_isValid;
}

QDate OAIRfqDetailsVO::getQuoteDueDate() const {
    return m_quote_due_date;
}
void OAIRfqDetailsVO::setQuoteDueDate(const QDate &quote_due_date) {
    m_quote_due_date = quote_due_date;
    m_quote_due_date_isSet = true;
}

bool OAIRfqDetailsVO::is_quote_due_date_Set() const{
    return m_quote_due_date_isSet;
}

bool OAIRfqDetailsVO::is_quote_due_date_Valid() const{
    return m_quote_due_date_isValid;
}

QList<OAIQuoteBaseVO> OAIRfqDetailsVO::getQuotes() const {
    return m_quotes;
}
void OAIRfqDetailsVO::setQuotes(const QList<OAIQuoteBaseVO> &quotes) {
    m_quotes = quotes;
    m_quotes_isSet = true;
}

bool OAIRfqDetailsVO::is_quotes_Set() const{
    return m_quotes_isSet;
}

bool OAIRfqDetailsVO::is_quotes_Valid() const{
    return m_quotes_isValid;
}

QDate OAIRfqDetailsVO::getReceivedDate() const {
    return m_received_date;
}
void OAIRfqDetailsVO::setReceivedDate(const QDate &received_date) {
    m_received_date = received_date;
    m_received_date_isSet = true;
}

bool OAIRfqDetailsVO::is_received_date_Set() const{
    return m_received_date_isSet;
}

bool OAIRfqDetailsVO::is_received_date_Valid() const{
    return m_received_date_isValid;
}

QString OAIRfqDetailsVO::getRecipientName() const {
    return m_recipient_name;
}
void OAIRfqDetailsVO::setRecipientName(const QString &recipient_name) {
    m_recipient_name = recipient_name;
    m_recipient_name_isSet = true;
}

bool OAIRfqDetailsVO::is_recipient_name_Set() const{
    return m_recipient_name_isSet;
}

bool OAIRfqDetailsVO::is_recipient_name_Valid() const{
    return m_recipient_name_isValid;
}

QString OAIRfqDetailsVO::getRequestorName() const {
    return m_requestor_name;
}
void OAIRfqDetailsVO::setRequestorName(const QString &requestor_name) {
    m_requestor_name = requestor_name;
    m_requestor_name_isSet = true;
}

bool OAIRfqDetailsVO::is_requestor_name_Set() const{
    return m_requestor_name_isSet;
}

bool OAIRfqDetailsVO::is_requestor_name_Valid() const{
    return m_requestor_name_isValid;
}

qint64 OAIRfqDetailsVO::getRfqId() const {
    return m_rfq_id;
}
void OAIRfqDetailsVO::setRfqId(const qint64 &rfq_id) {
    m_rfq_id = rfq_id;
    m_rfq_id_isSet = true;
}

bool OAIRfqDetailsVO::is_rfq_id_Set() const{
    return m_rfq_id_isSet;
}

bool OAIRfqDetailsVO::is_rfq_id_Valid() const{
    return m_rfq_id_isValid;
}

QList<OAIRfqItemBaseVO> OAIRfqDetailsVO::getRfqItems() const {
    return m_rfq_items;
}
void OAIRfqDetailsVO::setRfqItems(const QList<OAIRfqItemBaseVO> &rfq_items) {
    m_rfq_items = rfq_items;
    m_rfq_items_isSet = true;
}

bool OAIRfqDetailsVO::is_rfq_items_Set() const{
    return m_rfq_items_isSet;
}

bool OAIRfqDetailsVO::is_rfq_items_Valid() const{
    return m_rfq_items_isValid;
}

QString OAIRfqDetailsVO::getRfqTitle() const {
    return m_rfq_title;
}
void OAIRfqDetailsVO::setRfqTitle(const QString &rfq_title) {
    m_rfq_title = rfq_title;
    m_rfq_title_isSet = true;
}

bool OAIRfqDetailsVO::is_rfq_title_Set() const{
    return m_rfq_title_isSet;
}

bool OAIRfqDetailsVO::is_rfq_title_Valid() const{
    return m_rfq_title_isValid;
}

QString OAIRfqDetailsVO::getStatus() const {
    return m_status;
}
void OAIRfqDetailsVO::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIRfqDetailsVO::is_status_Set() const{
    return m_status_isSet;
}

bool OAIRfqDetailsVO::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIRfqDetailsVO::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_comments_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_proposed_completion_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quote_due_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quotes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_received_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recipient_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_requestor_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rfq_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rfq_items.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_rfq_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRfqDetailsVO::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
