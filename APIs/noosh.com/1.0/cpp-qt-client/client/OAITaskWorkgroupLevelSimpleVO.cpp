/**
 * Noosh API application
 * Full description of Noosh API
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITaskWorkgroupLevelSimpleVO.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITaskWorkgroupLevelSimpleVO::OAITaskWorkgroupLevelSimpleVO(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITaskWorkgroupLevelSimpleVO::OAITaskWorkgroupLevelSimpleVO() {
    this->initializeModel();
}

OAITaskWorkgroupLevelSimpleVO::~OAITaskWorkgroupLevelSimpleVO() {}

void OAITaskWorkgroupLevelSimpleVO::initializeModel() {

    m_actual_end_isSet = false;
    m_actual_end_isValid = false;

    m_actual_hours_isSet = false;
    m_actual_hours_isValid = false;

    m_actual_start_isSet = false;
    m_actual_start_isValid = false;

    m_assign_to_isSet = false;
    m_assign_to_isValid = false;

    m_baseline_duration_isSet = false;
    m_baseline_duration_isValid = false;

    m_baseline_end_date_isSet = false;
    m_baseline_end_date_isValid = false;

    m_baseline_start_date_isSet = false;
    m_baseline_start_date_isValid = false;

    m_current_duration_isSet = false;
    m_current_duration_isValid = false;

    m_is_milestone_isSet = false;
    m_is_milestone_isValid = false;

    m_mod_date_isSet = false;
    m_mod_date_isValid = false;

    m_plan_end_isSet = false;
    m_plan_end_isValid = false;

    m_plan_start_isSet = false;
    m_plan_start_isValid = false;

    m_priority_isSet = false;
    m_priority_isValid = false;

    m_project_isSet = false;
    m_project_isValid = false;

    m_schedule_code_isSet = false;
    m_schedule_code_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_task_id_isSet = false;
    m_task_id_isValid = false;

    m_task_name_isSet = false;
    m_task_name_isValid = false;

    m_task_type_isSet = false;
    m_task_type_isValid = false;
}

void OAITaskWorkgroupLevelSimpleVO::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITaskWorkgroupLevelSimpleVO::fromJsonObject(QJsonObject json) {

    m_actual_end_isValid = ::OpenAPI::fromJsonValue(m_actual_end, json[QString("actual_end")]);
    m_actual_end_isSet = !json[QString("actual_end")].isNull() && m_actual_end_isValid;

    m_actual_hours_isValid = ::OpenAPI::fromJsonValue(m_actual_hours, json[QString("actual_hours")]);
    m_actual_hours_isSet = !json[QString("actual_hours")].isNull() && m_actual_hours_isValid;

    m_actual_start_isValid = ::OpenAPI::fromJsonValue(m_actual_start, json[QString("actual_start")]);
    m_actual_start_isSet = !json[QString("actual_start")].isNull() && m_actual_start_isValid;

    m_assign_to_isValid = ::OpenAPI::fromJsonValue(m_assign_to, json[QString("assign_to")]);
    m_assign_to_isSet = !json[QString("assign_to")].isNull() && m_assign_to_isValid;

    m_baseline_duration_isValid = ::OpenAPI::fromJsonValue(m_baseline_duration, json[QString("baseline_duration")]);
    m_baseline_duration_isSet = !json[QString("baseline_duration")].isNull() && m_baseline_duration_isValid;

    m_baseline_end_date_isValid = ::OpenAPI::fromJsonValue(m_baseline_end_date, json[QString("baseline_end_date")]);
    m_baseline_end_date_isSet = !json[QString("baseline_end_date")].isNull() && m_baseline_end_date_isValid;

    m_baseline_start_date_isValid = ::OpenAPI::fromJsonValue(m_baseline_start_date, json[QString("baseline_start_date")]);
    m_baseline_start_date_isSet = !json[QString("baseline_start_date")].isNull() && m_baseline_start_date_isValid;

    m_current_duration_isValid = ::OpenAPI::fromJsonValue(m_current_duration, json[QString("current_duration")]);
    m_current_duration_isSet = !json[QString("current_duration")].isNull() && m_current_duration_isValid;

    m_is_milestone_isValid = ::OpenAPI::fromJsonValue(m_is_milestone, json[QString("is_milestone")]);
    m_is_milestone_isSet = !json[QString("is_milestone")].isNull() && m_is_milestone_isValid;

    m_mod_date_isValid = ::OpenAPI::fromJsonValue(m_mod_date, json[QString("mod_date")]);
    m_mod_date_isSet = !json[QString("mod_date")].isNull() && m_mod_date_isValid;

    m_plan_end_isValid = ::OpenAPI::fromJsonValue(m_plan_end, json[QString("plan_end")]);
    m_plan_end_isSet = !json[QString("plan_end")].isNull() && m_plan_end_isValid;

    m_plan_start_isValid = ::OpenAPI::fromJsonValue(m_plan_start, json[QString("plan_start")]);
    m_plan_start_isSet = !json[QString("plan_start")].isNull() && m_plan_start_isValid;

    m_priority_isValid = ::OpenAPI::fromJsonValue(m_priority, json[QString("priority")]);
    m_priority_isSet = !json[QString("priority")].isNull() && m_priority_isValid;

    m_project_isValid = ::OpenAPI::fromJsonValue(m_project, json[QString("project")]);
    m_project_isSet = !json[QString("project")].isNull() && m_project_isValid;

    m_schedule_code_isValid = ::OpenAPI::fromJsonValue(m_schedule_code, json[QString("schedule_code")]);
    m_schedule_code_isSet = !json[QString("schedule_code")].isNull() && m_schedule_code_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_task_id_isValid = ::OpenAPI::fromJsonValue(m_task_id, json[QString("task_id")]);
    m_task_id_isSet = !json[QString("task_id")].isNull() && m_task_id_isValid;

    m_task_name_isValid = ::OpenAPI::fromJsonValue(m_task_name, json[QString("task_name")]);
    m_task_name_isSet = !json[QString("task_name")].isNull() && m_task_name_isValid;

    m_task_type_isValid = ::OpenAPI::fromJsonValue(m_task_type, json[QString("task_type")]);
    m_task_type_isSet = !json[QString("task_type")].isNull() && m_task_type_isValid;
}

QString OAITaskWorkgroupLevelSimpleVO::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITaskWorkgroupLevelSimpleVO::asJsonObject() const {
    QJsonObject obj;
    if (m_actual_end_isSet) {
        obj.insert(QString("actual_end"), ::OpenAPI::toJsonValue(m_actual_end));
    }
    if (m_actual_hours_isSet) {
        obj.insert(QString("actual_hours"), ::OpenAPI::toJsonValue(m_actual_hours));
    }
    if (m_actual_start_isSet) {
        obj.insert(QString("actual_start"), ::OpenAPI::toJsonValue(m_actual_start));
    }
    if (m_assign_to.isSet()) {
        obj.insert(QString("assign_to"), ::OpenAPI::toJsonValue(m_assign_to));
    }
    if (m_baseline_duration_isSet) {
        obj.insert(QString("baseline_duration"), ::OpenAPI::toJsonValue(m_baseline_duration));
    }
    if (m_baseline_end_date_isSet) {
        obj.insert(QString("baseline_end_date"), ::OpenAPI::toJsonValue(m_baseline_end_date));
    }
    if (m_baseline_start_date_isSet) {
        obj.insert(QString("baseline_start_date"), ::OpenAPI::toJsonValue(m_baseline_start_date));
    }
    if (m_current_duration_isSet) {
        obj.insert(QString("current_duration"), ::OpenAPI::toJsonValue(m_current_duration));
    }
    if (m_is_milestone_isSet) {
        obj.insert(QString("is_milestone"), ::OpenAPI::toJsonValue(m_is_milestone));
    }
    if (m_mod_date_isSet) {
        obj.insert(QString("mod_date"), ::OpenAPI::toJsonValue(m_mod_date));
    }
    if (m_plan_end_isSet) {
        obj.insert(QString("plan_end"), ::OpenAPI::toJsonValue(m_plan_end));
    }
    if (m_plan_start_isSet) {
        obj.insert(QString("plan_start"), ::OpenAPI::toJsonValue(m_plan_start));
    }
    if (m_priority_isSet) {
        obj.insert(QString("priority"), ::OpenAPI::toJsonValue(m_priority));
    }
    if (m_project.isSet()) {
        obj.insert(QString("project"), ::OpenAPI::toJsonValue(m_project));
    }
    if (m_schedule_code_isSet) {
        obj.insert(QString("schedule_code"), ::OpenAPI::toJsonValue(m_schedule_code));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_task_id_isSet) {
        obj.insert(QString("task_id"), ::OpenAPI::toJsonValue(m_task_id));
    }
    if (m_task_name_isSet) {
        obj.insert(QString("task_name"), ::OpenAPI::toJsonValue(m_task_name));
    }
    if (m_task_type_isSet) {
        obj.insert(QString("task_type"), ::OpenAPI::toJsonValue(m_task_type));
    }
    return obj;
}

QDate OAITaskWorkgroupLevelSimpleVO::getActualEnd() const {
    return m_actual_end;
}
void OAITaskWorkgroupLevelSimpleVO::setActualEnd(const QDate &actual_end) {
    m_actual_end = actual_end;
    m_actual_end_isSet = true;
}

bool OAITaskWorkgroupLevelSimpleVO::is_actual_end_Set() const{
    return m_actual_end_isSet;
}

bool OAITaskWorkgroupLevelSimpleVO::is_actual_end_Valid() const{
    return m_actual_end_isValid;
}

QJsonValue OAITaskWorkgroupLevelSimpleVO::getActualHours() const {
    return m_actual_hours;
}
void OAITaskWorkgroupLevelSimpleVO::setActualHours(const QJsonValue &actual_hours) {
    m_actual_hours = actual_hours;
    m_actual_hours_isSet = true;
}

bool OAITaskWorkgroupLevelSimpleVO::is_actual_hours_Set() const{
    return m_actual_hours_isSet;
}

bool OAITaskWorkgroupLevelSimpleVO::is_actual_hours_Valid() const{
    return m_actual_hours_isValid;
}

QDate OAITaskWorkgroupLevelSimpleVO::getActualStart() const {
    return m_actual_start;
}
void OAITaskWorkgroupLevelSimpleVO::setActualStart(const QDate &actual_start) {
    m_actual_start = actual_start;
    m_actual_start_isSet = true;
}

bool OAITaskWorkgroupLevelSimpleVO::is_actual_start_Set() const{
    return m_actual_start_isSet;
}

bool OAITaskWorkgroupLevelSimpleVO::is_actual_start_Valid() const{
    return m_actual_start_isValid;
}

OAIPersonVO OAITaskWorkgroupLevelSimpleVO::getAssignTo() const {
    return m_assign_to;
}
void OAITaskWorkgroupLevelSimpleVO::setAssignTo(const OAIPersonVO &assign_to) {
    m_assign_to = assign_to;
    m_assign_to_isSet = true;
}

bool OAITaskWorkgroupLevelSimpleVO::is_assign_to_Set() const{
    return m_assign_to_isSet;
}

bool OAITaskWorkgroupLevelSimpleVO::is_assign_to_Valid() const{
    return m_assign_to_isValid;
}

QJsonValue OAITaskWorkgroupLevelSimpleVO::getBaselineDuration() const {
    return m_baseline_duration;
}
void OAITaskWorkgroupLevelSimpleVO::setBaselineDuration(const QJsonValue &baseline_duration) {
    m_baseline_duration = baseline_duration;
    m_baseline_duration_isSet = true;
}

bool OAITaskWorkgroupLevelSimpleVO::is_baseline_duration_Set() const{
    return m_baseline_duration_isSet;
}

bool OAITaskWorkgroupLevelSimpleVO::is_baseline_duration_Valid() const{
    return m_baseline_duration_isValid;
}

QDate OAITaskWorkgroupLevelSimpleVO::getBaselineEndDate() const {
    return m_baseline_end_date;
}
void OAITaskWorkgroupLevelSimpleVO::setBaselineEndDate(const QDate &baseline_end_date) {
    m_baseline_end_date = baseline_end_date;
    m_baseline_end_date_isSet = true;
}

bool OAITaskWorkgroupLevelSimpleVO::is_baseline_end_date_Set() const{
    return m_baseline_end_date_isSet;
}

bool OAITaskWorkgroupLevelSimpleVO::is_baseline_end_date_Valid() const{
    return m_baseline_end_date_isValid;
}

QDate OAITaskWorkgroupLevelSimpleVO::getBaselineStartDate() const {
    return m_baseline_start_date;
}
void OAITaskWorkgroupLevelSimpleVO::setBaselineStartDate(const QDate &baseline_start_date) {
    m_baseline_start_date = baseline_start_date;
    m_baseline_start_date_isSet = true;
}

bool OAITaskWorkgroupLevelSimpleVO::is_baseline_start_date_Set() const{
    return m_baseline_start_date_isSet;
}

bool OAITaskWorkgroupLevelSimpleVO::is_baseline_start_date_Valid() const{
    return m_baseline_start_date_isValid;
}

QJsonValue OAITaskWorkgroupLevelSimpleVO::getCurrentDuration() const {
    return m_current_duration;
}
void OAITaskWorkgroupLevelSimpleVO::setCurrentDuration(const QJsonValue &current_duration) {
    m_current_duration = current_duration;
    m_current_duration_isSet = true;
}

bool OAITaskWorkgroupLevelSimpleVO::is_current_duration_Set() const{
    return m_current_duration_isSet;
}

bool OAITaskWorkgroupLevelSimpleVO::is_current_duration_Valid() const{
    return m_current_duration_isValid;
}

bool OAITaskWorkgroupLevelSimpleVO::isIsMilestone() const {
    return m_is_milestone;
}
void OAITaskWorkgroupLevelSimpleVO::setIsMilestone(const bool &is_milestone) {
    m_is_milestone = is_milestone;
    m_is_milestone_isSet = true;
}

bool OAITaskWorkgroupLevelSimpleVO::is_is_milestone_Set() const{
    return m_is_milestone_isSet;
}

bool OAITaskWorkgroupLevelSimpleVO::is_is_milestone_Valid() const{
    return m_is_milestone_isValid;
}

QDate OAITaskWorkgroupLevelSimpleVO::getModDate() const {
    return m_mod_date;
}
void OAITaskWorkgroupLevelSimpleVO::setModDate(const QDate &mod_date) {
    m_mod_date = mod_date;
    m_mod_date_isSet = true;
}

bool OAITaskWorkgroupLevelSimpleVO::is_mod_date_Set() const{
    return m_mod_date_isSet;
}

bool OAITaskWorkgroupLevelSimpleVO::is_mod_date_Valid() const{
    return m_mod_date_isValid;
}

QDate OAITaskWorkgroupLevelSimpleVO::getPlanEnd() const {
    return m_plan_end;
}
void OAITaskWorkgroupLevelSimpleVO::setPlanEnd(const QDate &plan_end) {
    m_plan_end = plan_end;
    m_plan_end_isSet = true;
}

bool OAITaskWorkgroupLevelSimpleVO::is_plan_end_Set() const{
    return m_plan_end_isSet;
}

bool OAITaskWorkgroupLevelSimpleVO::is_plan_end_Valid() const{
    return m_plan_end_isValid;
}

QDate OAITaskWorkgroupLevelSimpleVO::getPlanStart() const {
    return m_plan_start;
}
void OAITaskWorkgroupLevelSimpleVO::setPlanStart(const QDate &plan_start) {
    m_plan_start = plan_start;
    m_plan_start_isSet = true;
}

bool OAITaskWorkgroupLevelSimpleVO::is_plan_start_Set() const{
    return m_plan_start_isSet;
}

bool OAITaskWorkgroupLevelSimpleVO::is_plan_start_Valid() const{
    return m_plan_start_isValid;
}

QString OAITaskWorkgroupLevelSimpleVO::getPriority() const {
    return m_priority;
}
void OAITaskWorkgroupLevelSimpleVO::setPriority(const QString &priority) {
    m_priority = priority;
    m_priority_isSet = true;
}

bool OAITaskWorkgroupLevelSimpleVO::is_priority_Set() const{
    return m_priority_isSet;
}

bool OAITaskWorkgroupLevelSimpleVO::is_priority_Valid() const{
    return m_priority_isValid;
}

OAIProjectBaseVO OAITaskWorkgroupLevelSimpleVO::getProject() const {
    return m_project;
}
void OAITaskWorkgroupLevelSimpleVO::setProject(const OAIProjectBaseVO &project) {
    m_project = project;
    m_project_isSet = true;
}

bool OAITaskWorkgroupLevelSimpleVO::is_project_Set() const{
    return m_project_isSet;
}

bool OAITaskWorkgroupLevelSimpleVO::is_project_Valid() const{
    return m_project_isValid;
}

QString OAITaskWorkgroupLevelSimpleVO::getScheduleCode() const {
    return m_schedule_code;
}
void OAITaskWorkgroupLevelSimpleVO::setScheduleCode(const QString &schedule_code) {
    m_schedule_code = schedule_code;
    m_schedule_code_isSet = true;
}

bool OAITaskWorkgroupLevelSimpleVO::is_schedule_code_Set() const{
    return m_schedule_code_isSet;
}

bool OAITaskWorkgroupLevelSimpleVO::is_schedule_code_Valid() const{
    return m_schedule_code_isValid;
}

QString OAITaskWorkgroupLevelSimpleVO::getStatus() const {
    return m_status;
}
void OAITaskWorkgroupLevelSimpleVO::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAITaskWorkgroupLevelSimpleVO::is_status_Set() const{
    return m_status_isSet;
}

bool OAITaskWorkgroupLevelSimpleVO::is_status_Valid() const{
    return m_status_isValid;
}

qint64 OAITaskWorkgroupLevelSimpleVO::getTaskId() const {
    return m_task_id;
}
void OAITaskWorkgroupLevelSimpleVO::setTaskId(const qint64 &task_id) {
    m_task_id = task_id;
    m_task_id_isSet = true;
}

bool OAITaskWorkgroupLevelSimpleVO::is_task_id_Set() const{
    return m_task_id_isSet;
}

bool OAITaskWorkgroupLevelSimpleVO::is_task_id_Valid() const{
    return m_task_id_isValid;
}

QString OAITaskWorkgroupLevelSimpleVO::getTaskName() const {
    return m_task_name;
}
void OAITaskWorkgroupLevelSimpleVO::setTaskName(const QString &task_name) {
    m_task_name = task_name;
    m_task_name_isSet = true;
}

bool OAITaskWorkgroupLevelSimpleVO::is_task_name_Set() const{
    return m_task_name_isSet;
}

bool OAITaskWorkgroupLevelSimpleVO::is_task_name_Valid() const{
    return m_task_name_isValid;
}

QString OAITaskWorkgroupLevelSimpleVO::getTaskType() const {
    return m_task_type;
}
void OAITaskWorkgroupLevelSimpleVO::setTaskType(const QString &task_type) {
    m_task_type = task_type;
    m_task_type_isSet = true;
}

bool OAITaskWorkgroupLevelSimpleVO::is_task_type_Set() const{
    return m_task_type_isSet;
}

bool OAITaskWorkgroupLevelSimpleVO::is_task_type_Valid() const{
    return m_task_type_isValid;
}

bool OAITaskWorkgroupLevelSimpleVO::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_actual_end_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_actual_hours_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_actual_start_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_assign_to.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_baseline_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_baseline_end_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_baseline_start_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_current_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_milestone_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mod_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_plan_end_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_plan_start_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_priority_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_project.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_schedule_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_task_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_task_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_task_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITaskWorkgroupLevelSimpleVO::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
