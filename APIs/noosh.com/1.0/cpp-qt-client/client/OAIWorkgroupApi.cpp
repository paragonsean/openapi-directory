/**
 * Noosh API application
 * Full description of Noosh API
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWorkgroupApi.h"
#include "OAIServerConfiguration.h"
#include <QJsonArray>
#include <QJsonDocument>

namespace OpenAPI {

OAIWorkgroupApi::OAIWorkgroupApi(const int timeOut)
    : _timeOut(timeOut),
      _manager(nullptr),
      _isResponseCompressionEnabled(false),
      _isRequestCompressionEnabled(false) {
    initializeServerConfigs();
}

OAIWorkgroupApi::~OAIWorkgroupApi() {
}

void OAIWorkgroupApi::initializeServerConfigs() {
    //Default server
    QList<OAIServerConfiguration> defaultConf = QList<OAIServerConfiguration>();
    //varying endpoint server
    defaultConf.append(OAIServerConfiguration(
    QUrl("http://example.com:80/v1"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    _serverConfigs.insert("getClientWorkgroupList", defaultConf);
    _serverIndices.insert("getClientWorkgroupList", 0);
    _serverConfigs.insert("getSpecificClientWorkgroup", defaultConf);
    _serverIndices.insert("getSpecificClientWorkgroup", 0);
    _serverConfigs.insert("getSupplierWorkgroupDetail", defaultConf);
    _serverIndices.insert("getSupplierWorkgroupDetail", 0);
    _serverConfigs.insert("getSupplierWorkgroupList", defaultConf);
    _serverIndices.insert("getSupplierWorkgroupList", 0);
    _serverConfigs.insert("getWorkgroupDetail", defaultConf);
    _serverIndices.insert("getWorkgroupDetail", 0);
    _serverConfigs.insert("getWorkgroupList", defaultConf);
    _serverIndices.insert("getWorkgroupList", 0);
    _serverConfigs.insert("putWorkgroup", defaultConf);
    _serverIndices.insert("putWorkgroup", 0);
}

/**
* returns 0 on success and -1, -2 or -3 on failure.
* -1 when the variable does not exist and -2 if the value is not defined in the enum and -3 if the operation or server index is not found
*/
int OAIWorkgroupApi::setDefaultServerValue(int serverIndex, const QString &operation, const QString &variable, const QString &value) {
    auto it = _serverConfigs.find(operation);
    if (it != _serverConfigs.end() && serverIndex < it.value().size()) {
      return _serverConfigs[operation][serverIndex].setDefaultValue(variable,value);
    }
    return -3;
}
void OAIWorkgroupApi::setServerIndex(const QString &operation, int serverIndex) {
    if (_serverIndices.contains(operation) && serverIndex < _serverConfigs.find(operation).value().size()) {
        _serverIndices[operation] = serverIndex;
    }
}

void OAIWorkgroupApi::setApiKey(const QString &apiKeyName, const QString &apiKey) {
    _apiKeys.insert(apiKeyName, apiKey);
}

void OAIWorkgroupApi::setBearerToken(const QString &token) {
    _bearerToken = token;
}

void OAIWorkgroupApi::setUsername(const QString &username) {
    _username = username;
}

void OAIWorkgroupApi::setPassword(const QString &password) {
    _password = password;
}


void OAIWorkgroupApi::setTimeOut(const int timeOut) {
    _timeOut = timeOut;
}

void OAIWorkgroupApi::setWorkingDirectory(const QString &path) {
    _workingDirectory = path;
}

void OAIWorkgroupApi::setNetworkAccessManager(QNetworkAccessManager* manager) {
    _manager = manager;
}

/**
    * Appends a new ServerConfiguration to the config map for a specific operation.
    * @param operation The id to the target operation.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    * returns the index of the new server config on success and -1 if the operation is not found
    */
int OAIWorkgroupApi::addServerConfiguration(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    if (_serverConfigs.contains(operation)) {
        _serverConfigs[operation].append(OAIServerConfiguration(
                    url,
                    description,
                    variables));
        return _serverConfigs[operation].size()-1;
    } else {
        return -1;
    }
}

/**
    * Appends a new ServerConfiguration to the config map for a all operations and sets the index to that server.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIWorkgroupApi::setNewServerForAllOperations(const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    for (auto keyIt = _serverIndices.keyBegin(); keyIt != _serverIndices.keyEnd(); keyIt++) {
        setServerIndex(*keyIt, addServerConfiguration(*keyIt, url, description, variables));
    }
}

/**
    * Appends a new ServerConfiguration to the config map for an operations and sets the index to that server.
    * @param URL A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIWorkgroupApi::setNewServer(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    setServerIndex(operation, addServerConfiguration(operation, url, description, variables));
}

void OAIWorkgroupApi::addHeaders(const QString &key, const QString &value) {
    _defaultHeaders.insert(key, value);
}

void OAIWorkgroupApi::enableRequestCompression() {
    _isRequestCompressionEnabled = true;
}

void OAIWorkgroupApi::enableResponseCompression() {
    _isResponseCompressionEnabled = true;
}

void OAIWorkgroupApi::abortRequests() {
    Q_EMIT abortRequestsSignal();
}

QString OAIWorkgroupApi::getParamStylePrefix(const QString &style) {
    if (style == "matrix") {
        return ";";
    } else if (style == "label") {
        return ".";
    } else if (style == "form") {
        return "&";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "&";
    } else if (style == "pipeDelimited") {
        return "&";
    } else {
        return "none";
    }
}

QString OAIWorkgroupApi::getParamStyleSuffix(const QString &style) {
    if (style == "matrix") {
        return "=";
    } else if (style == "label") {
        return "";
    } else if (style == "form") {
        return "=";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "=";
    } else if (style == "pipeDelimited") {
        return "=";
    } else {
        return "none";
    }
}

QString OAIWorkgroupApi::getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode) {

    if (style == "matrix") {
        return (isExplode) ? ";" + name + "=" : ",";

    } else if (style == "label") {
        return (isExplode) ? "." : ",";

    } else if (style == "form") {
        return (isExplode) ? "&" + name + "=" : ",";

    } else if (style == "simple") {
        return ",";
    } else if (style == "spaceDelimited") {
        return (isExplode) ? "&" + name + "=" : " ";

    } else if (style == "pipeDelimited") {
        return (isExplode) ? "&" + name + "=" : "|";

    } else if (style == "deepObject") {
        return (isExplode) ? "&" : "none";

    } else {
        return "none";
    }
}

void OAIWorkgroupApi::getClientWorkgroupList(const QString &workgroup_id) {
    QString fullPath = QString(_serverConfigs["getClientWorkgroupList"][_serverIndices.value("getClientWorkgroupList")].URL()+"/v1/workgroups/{workgroup_id}/clientWorkgroups");
    
    
    {
        QString workgroup_idPathParam("{");
        workgroup_idPathParam.append("workgroup_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "workgroup_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"workgroup_id"+pathSuffix : pathPrefix;
        fullPath.replace(workgroup_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(workgroup_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIWorkgroupApi::getClientWorkgroupListCallback);
    connect(this, &OAIWorkgroupApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIWorkgroupApi::getClientWorkgroupListCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIClientWorkgroupListVO output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getClientWorkgroupListSignal(output);
        Q_EMIT getClientWorkgroupListSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getClientWorkgroupListSignalE(output, error_type, error_str);
        Q_EMIT getClientWorkgroupListSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getClientWorkgroupListSignalError(output, error_type, error_str);
        Q_EMIT getClientWorkgroupListSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIWorkgroupApi::getSpecificClientWorkgroup(const QString &workgroup_id, const QString &client_workgroup_id) {
    QString fullPath = QString(_serverConfigs["getSpecificClientWorkgroup"][_serverIndices.value("getSpecificClientWorkgroup")].URL()+"/v1/workgroups/{workgroup_id}/clientWorkgroups/{client_workgroup_id}");
    
    
    {
        QString workgroup_idPathParam("{");
        workgroup_idPathParam.append("workgroup_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "workgroup_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"workgroup_id"+pathSuffix : pathPrefix;
        fullPath.replace(workgroup_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(workgroup_id)));
    }
    
    {
        QString client_workgroup_idPathParam("{");
        client_workgroup_idPathParam.append("client_workgroup_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "client_workgroup_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"client_workgroup_id"+pathSuffix : pathPrefix;
        fullPath.replace(client_workgroup_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(client_workgroup_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIWorkgroupApi::getSpecificClientWorkgroupCallback);
    connect(this, &OAIWorkgroupApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIWorkgroupApi::getSpecificClientWorkgroupCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIClientWorkgroupExpandVO output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getSpecificClientWorkgroupSignal(output);
        Q_EMIT getSpecificClientWorkgroupSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getSpecificClientWorkgroupSignalE(output, error_type, error_str);
        Q_EMIT getSpecificClientWorkgroupSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getSpecificClientWorkgroupSignalError(output, error_type, error_str);
        Q_EMIT getSpecificClientWorkgroupSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIWorkgroupApi::getSupplierWorkgroupDetail(const QString &workgroup_id, const QString &bu_supplier_workgroup_id) {
    QString fullPath = QString(_serverConfigs["getSupplierWorkgroupDetail"][_serverIndices.value("getSupplierWorkgroupDetail")].URL()+"/v1/workgroups/{workgroup_id}/supplierWorkgroups/{bu_supplier_workgroup_id}");
    
    
    {
        QString workgroup_idPathParam("{");
        workgroup_idPathParam.append("workgroup_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "workgroup_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"workgroup_id"+pathSuffix : pathPrefix;
        fullPath.replace(workgroup_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(workgroup_id)));
    }
    
    {
        QString bu_supplier_workgroup_idPathParam("{");
        bu_supplier_workgroup_idPathParam.append("bu_supplier_workgroup_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "bu_supplier_workgroup_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"bu_supplier_workgroup_id"+pathSuffix : pathPrefix;
        fullPath.replace(bu_supplier_workgroup_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(bu_supplier_workgroup_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIWorkgroupApi::getSupplierWorkgroupDetailCallback);
    connect(this, &OAIWorkgroupApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIWorkgroupApi::getSupplierWorkgroupDetailCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAISupplierWorkgroupExpandVO output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getSupplierWorkgroupDetailSignal(output);
        Q_EMIT getSupplierWorkgroupDetailSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getSupplierWorkgroupDetailSignalE(output, error_type, error_str);
        Q_EMIT getSupplierWorkgroupDetailSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getSupplierWorkgroupDetailSignalError(output, error_type, error_str);
        Q_EMIT getSupplierWorkgroupDetailSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIWorkgroupApi::getSupplierWorkgroupList(const QString &workgroup_id) {
    QString fullPath = QString(_serverConfigs["getSupplierWorkgroupList"][_serverIndices.value("getSupplierWorkgroupList")].URL()+"/v1/workgroups/{workgroup_id}/supplierWorkgroups");
    
    
    {
        QString workgroup_idPathParam("{");
        workgroup_idPathParam.append("workgroup_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "workgroup_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"workgroup_id"+pathSuffix : pathPrefix;
        fullPath.replace(workgroup_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(workgroup_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIWorkgroupApi::getSupplierWorkgroupListCallback);
    connect(this, &OAIWorkgroupApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIWorkgroupApi::getSupplierWorkgroupListCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAISupplierWorkgroupListVO output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getSupplierWorkgroupListSignal(output);
        Q_EMIT getSupplierWorkgroupListSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getSupplierWorkgroupListSignalE(output, error_type, error_str);
        Q_EMIT getSupplierWorkgroupListSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getSupplierWorkgroupListSignalError(output, error_type, error_str);
        Q_EMIT getSupplierWorkgroupListSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIWorkgroupApi::getWorkgroupDetail(const QString &workgroup_id) {
    QString fullPath = QString(_serverConfigs["getWorkgroupDetail"][_serverIndices.value("getWorkgroupDetail")].URL()+"/v1/workgroups/{workgroup_id}/detail");
    
    
    {
        QString workgroup_idPathParam("{");
        workgroup_idPathParam.append("workgroup_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "workgroup_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"workgroup_id"+pathSuffix : pathPrefix;
        fullPath.replace(workgroup_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(workgroup_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIWorkgroupApi::getWorkgroupDetailCallback);
    connect(this, &OAIWorkgroupApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIWorkgroupApi::getWorkgroupDetailCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIWorkgroupExpandVO output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getWorkgroupDetailSignal(output);
        Q_EMIT getWorkgroupDetailSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getWorkgroupDetailSignalE(output, error_type, error_str);
        Q_EMIT getWorkgroupDetailSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getWorkgroupDetailSignalError(output, error_type, error_str);
        Q_EMIT getWorkgroupDetailSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIWorkgroupApi::getWorkgroupList(const ::OpenAPI::OptionalParam<QString> &workgroup_name, const ::OpenAPI::OptionalParam<QList<QString>> &workgroup_types) {
    QString fullPath = QString(_serverConfigs["getWorkgroupList"][_serverIndices.value("getWorkgroupList")].URL()+"/v1/workgroups");
    
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (workgroup_name.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "workgroup_name", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("workgroup_name")).append(querySuffix).append(QUrl::toPercentEncoding(workgroup_name.stringValue()));
    }
    if (workgroup_types.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "workgroup_types", false);
        if (workgroup_types.value().size() > 0) {
            if (QString("csv").indexOf("multi") == 0) {
                for (QString t : workgroup_types.value()) {
                    if (fullPath.indexOf("?") > 0)
                        fullPath.append(queryPrefix);
                    else
                        fullPath.append("?");
                    fullPath.append("workgroup_types=").append(::OpenAPI::toStringValue(t));
                }
            } else if (QString("csv").indexOf("ssv") == 0) {
                if (fullPath.indexOf("?") > 0)
                    fullPath.append("&");
                else
                    fullPath.append("?").append(queryPrefix).append("workgroup_types").append(querySuffix);
                qint32 count = 0;
                for (QString t : workgroup_types.value()) {
                    if (count > 0) {
                        fullPath.append((false)? queryDelimiter : QUrl::toPercentEncoding(queryDelimiter));
                    }
                    fullPath.append(::OpenAPI::toStringValue(t));
                    count++;
                }
            } else if (QString("csv").indexOf("tsv") == 0) {
                if (fullPath.indexOf("?") > 0)
                    fullPath.append("&");
                else
                    fullPath.append("?").append(queryPrefix).append("workgroup_types").append(querySuffix);
                qint32 count = 0;
                for (QString t : workgroup_types.value()) {
                    if (count > 0) {
                        fullPath.append("\t");
                    }
                    fullPath.append(::OpenAPI::toStringValue(t));
                    count++;
                }
            } else if (QString("csv").indexOf("csv") == 0) {
                if (fullPath.indexOf("?") > 0)
                    fullPath.append("&");
                else
                    fullPath.append("?").append(queryPrefix).append("workgroup_types").append(querySuffix);
                qint32 count = 0;
                for (QString t : workgroup_types.value()) {
                    if (count > 0) {
                        fullPath.append(queryDelimiter);
                    }
                    fullPath.append(::OpenAPI::toStringValue(t));
                    count++;
                }
            } else if (QString("csv").indexOf("pipes") == 0) {
                if (fullPath.indexOf("?") > 0)
                    fullPath.append("&");
                else
                    fullPath.append("?").append(queryPrefix).append("workgroup_types").append(querySuffix);
                qint32 count = 0;
                for (QString t : workgroup_types.value()) {
                    if (count > 0) {
                        fullPath.append(queryDelimiter);
                    }
                    fullPath.append(::OpenAPI::toStringValue(t));
                    count++;
                }
            } else if (QString("csv").indexOf("deepObject") == 0) {
                if (fullPath.indexOf("?") > 0)
                    fullPath.append("&");
                else
                    fullPath.append("?").append(queryPrefix).append("workgroup_types").append(querySuffix);
                qint32 count = 0;
                for (QString t : workgroup_types.value()) {
                    if (count > 0) {
                        fullPath.append(queryDelimiter);
                    }
                    fullPath.append(::OpenAPI::toStringValue(t));
                    count++;
                }
            }
        }
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIWorkgroupApi::getWorkgroupListCallback);
    connect(this, &OAIWorkgroupApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIWorkgroupApi::getWorkgroupListCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIWorkgroupListVO output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT getWorkgroupListSignal(output);
        Q_EMIT getWorkgroupListSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT getWorkgroupListSignalE(output, error_type, error_str);
        Q_EMIT getWorkgroupListSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT getWorkgroupListSignalError(output, error_type, error_str);
        Q_EMIT getWorkgroupListSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIWorkgroupApi::putWorkgroup(const QString &workgroup_id, const ::OpenAPI::OptionalParam<OAIWorkgroupUpdPersistVO> &oai_workgroup_upd_persist_vo) {
    QString fullPath = QString(_serverConfigs["putWorkgroup"][_serverIndices.value("putWorkgroup")].URL()+"/v1/workgroups/{workgroup_id}/detail");
    
    
    {
        QString workgroup_idPathParam("{");
        workgroup_idPathParam.append("workgroup_id").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "workgroup_id", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"workgroup_id"+pathSuffix : pathPrefix;
        fullPath.replace(workgroup_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(workgroup_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PUT");

    if (oai_workgroup_upd_persist_vo.hasValue()){

        
        QByteArray output = oai_workgroup_upd_persist_vo.value().asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIWorkgroupApi::putWorkgroupCallback);
    connect(this, &OAIWorkgroupApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIWorkgroupApi::putWorkgroupCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIWorkgroupHTTPStatusVO output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT putWorkgroupSignal(output);
        Q_EMIT putWorkgroupSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT putWorkgroupSignalE(output, error_type, error_str);
        Q_EMIT putWorkgroupSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT putWorkgroupSignalError(output, error_type, error_str);
        Q_EMIT putWorkgroupSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIWorkgroupApi::tokenAvailable(){

    oauthToken token;
    switch (_OauthMethod) {
    case 1: //implicit flow
        token = _implicitFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _implicitFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 2: //authorization flow
        token = _authFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _authFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 3: //client credentials flow
        token = _credentialFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 4: //resource owner password flow
        token = _passwordFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    default:
        qDebug() << "No Oauth method set!";
        break;
    }
}
} // namespace OpenAPI
