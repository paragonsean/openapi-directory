/**
 * Noosh API application
 * Full description of Noosh API
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIWorkgroupApi_H
#define OAI_OAIWorkgroupApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIClientWorkgroupExpandVO.h"
#include "OAIClientWorkgroupListVO.h"
#include "OAIHTTPStatusVO.h"
#include "OAISupplierWorkgroupExpandVO.h"
#include "OAISupplierWorkgroupListVO.h"
#include "OAIWorkgroupExpandVO.h"
#include "OAIWorkgroupHTTPStatusVO.h"
#include "OAIWorkgroupListVO.h"
#include "OAIWorkgroupUpdPersistVO.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIWorkgroupApi : public QObject {
    Q_OBJECT

public:
    OAIWorkgroupApi(const int timeOut = 0);
    ~OAIWorkgroupApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  workgroup_id QString [required]
    */
    virtual void getClientWorkgroupList(const QString &workgroup_id);

    /**
    * @param[in]  workgroup_id QString [required]
    * @param[in]  client_workgroup_id QString [required]
    */
    virtual void getSpecificClientWorkgroup(const QString &workgroup_id, const QString &client_workgroup_id);

    /**
    * @param[in]  workgroup_id QString [required]
    * @param[in]  bu_supplier_workgroup_id QString [required]
    */
    virtual void getSupplierWorkgroupDetail(const QString &workgroup_id, const QString &bu_supplier_workgroup_id);

    /**
    * @param[in]  workgroup_id QString [required]
    */
    virtual void getSupplierWorkgroupList(const QString &workgroup_id);

    /**
    * @param[in]  workgroup_id QString [required]
    */
    virtual void getWorkgroupDetail(const QString &workgroup_id);

    /**
    * @param[in]  workgroup_name QString [optional]
    * @param[in]  workgroup_types QList<QString> [optional]
    */
    virtual void getWorkgroupList(const ::OpenAPI::OptionalParam<QString> &workgroup_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &workgroup_types = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  workgroup_id QString [required]
    * @param[in]  oai_workgroup_upd_persist_vo OAIWorkgroupUpdPersistVO [optional]
    */
    virtual void putWorkgroup(const QString &workgroup_id, const ::OpenAPI::OptionalParam<OAIWorkgroupUpdPersistVO> &oai_workgroup_upd_persist_vo = ::OpenAPI::OptionalParam<OAIWorkgroupUpdPersistVO>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void getClientWorkgroupListCallback(OAIHttpRequestWorker *worker);
    void getSpecificClientWorkgroupCallback(OAIHttpRequestWorker *worker);
    void getSupplierWorkgroupDetailCallback(OAIHttpRequestWorker *worker);
    void getSupplierWorkgroupListCallback(OAIHttpRequestWorker *worker);
    void getWorkgroupDetailCallback(OAIHttpRequestWorker *worker);
    void getWorkgroupListCallback(OAIHttpRequestWorker *worker);
    void putWorkgroupCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void getClientWorkgroupListSignal(OAIClientWorkgroupListVO summary);
    void getSpecificClientWorkgroupSignal(OAIClientWorkgroupExpandVO summary);
    void getSupplierWorkgroupDetailSignal(OAISupplierWorkgroupExpandVO summary);
    void getSupplierWorkgroupListSignal(OAISupplierWorkgroupListVO summary);
    void getWorkgroupDetailSignal(OAIWorkgroupExpandVO summary);
    void getWorkgroupListSignal(OAIWorkgroupListVO summary);
    void putWorkgroupSignal(OAIWorkgroupHTTPStatusVO summary);


    void getClientWorkgroupListSignalFull(OAIHttpRequestWorker *worker, OAIClientWorkgroupListVO summary);
    void getSpecificClientWorkgroupSignalFull(OAIHttpRequestWorker *worker, OAIClientWorkgroupExpandVO summary);
    void getSupplierWorkgroupDetailSignalFull(OAIHttpRequestWorker *worker, OAISupplierWorkgroupExpandVO summary);
    void getSupplierWorkgroupListSignalFull(OAIHttpRequestWorker *worker, OAISupplierWorkgroupListVO summary);
    void getWorkgroupDetailSignalFull(OAIHttpRequestWorker *worker, OAIWorkgroupExpandVO summary);
    void getWorkgroupListSignalFull(OAIHttpRequestWorker *worker, OAIWorkgroupListVO summary);
    void putWorkgroupSignalFull(OAIHttpRequestWorker *worker, OAIWorkgroupHTTPStatusVO summary);

    Q_DECL_DEPRECATED_X("Use getClientWorkgroupListSignalError() instead")
    void getClientWorkgroupListSignalE(OAIClientWorkgroupListVO summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getClientWorkgroupListSignalError(OAIClientWorkgroupListVO summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSpecificClientWorkgroupSignalError() instead")
    void getSpecificClientWorkgroupSignalE(OAIClientWorkgroupExpandVO summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSpecificClientWorkgroupSignalError(OAIClientWorkgroupExpandVO summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSupplierWorkgroupDetailSignalError() instead")
    void getSupplierWorkgroupDetailSignalE(OAISupplierWorkgroupExpandVO summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSupplierWorkgroupDetailSignalError(OAISupplierWorkgroupExpandVO summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSupplierWorkgroupListSignalError() instead")
    void getSupplierWorkgroupListSignalE(OAISupplierWorkgroupListVO summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSupplierWorkgroupListSignalError(OAISupplierWorkgroupListVO summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getWorkgroupDetailSignalError() instead")
    void getWorkgroupDetailSignalE(OAIWorkgroupExpandVO summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getWorkgroupDetailSignalError(OAIWorkgroupExpandVO summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getWorkgroupListSignalError() instead")
    void getWorkgroupListSignalE(OAIWorkgroupListVO summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getWorkgroupListSignalError(OAIWorkgroupListVO summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putWorkgroupSignalError() instead")
    void putWorkgroupSignalE(OAIWorkgroupHTTPStatusVO summary, QNetworkReply::NetworkError error_type, QString error_str);
    void putWorkgroupSignalError(OAIWorkgroupHTTPStatusVO summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use getClientWorkgroupListSignalErrorFull() instead")
    void getClientWorkgroupListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getClientWorkgroupListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSpecificClientWorkgroupSignalErrorFull() instead")
    void getSpecificClientWorkgroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSpecificClientWorkgroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSupplierWorkgroupDetailSignalErrorFull() instead")
    void getSupplierWorkgroupDetailSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSupplierWorkgroupDetailSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSupplierWorkgroupListSignalErrorFull() instead")
    void getSupplierWorkgroupListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSupplierWorkgroupListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getWorkgroupDetailSignalErrorFull() instead")
    void getWorkgroupDetailSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getWorkgroupDetailSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getWorkgroupListSignalErrorFull() instead")
    void getWorkgroupListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getWorkgroupListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putWorkgroupSignalErrorFull() instead")
    void putWorkgroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void putWorkgroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
