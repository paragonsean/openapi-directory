/**
 * Noosh API application
 * Full description of Noosh API
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIShipmentApi_H
#define OAI_OAIShipmentApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIHTTPStatusVO.h"
#include "OAIShipmentExpandVO.h"
#include "OAIShipmentListVO.h"
#include "OAIShipmentLocationPersistVO.h"
#include "OAIShipmentLocationPostPersistVO.h"
#include "OAIShipmentLocationsPOSTResultVO.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIShipmentApi : public QObject {
    Q_OBJECT

public:
    OAIShipmentApi(const int timeOut = 0);
    ~OAIShipmentApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  workgroup_id QString [required]
    * @param[in]  project_id QString [required]
    * @param[in]  shipment_id QString [required]
    */
    virtual void getShipment(const QString &workgroup_id, const QString &project_id, const QString &shipment_id);

    /**
    * @param[in]  workgroup_id QString [required]
    * @param[in]  project_id QString [required]
    */
    virtual void getShipmentList(const QString &workgroup_id, const QString &project_id);

    /**
    * @param[in]  workgroup_id QString [required]
    * @param[in]  project_id QString [required]
    * @param[in]  oai_shipment_location_post_persist_vo OAIShipmentLocationPostPersistVO [optional]
    */
    virtual void postShipment(const QString &workgroup_id, const QString &project_id, const ::OpenAPI::OptionalParam<OAIShipmentLocationPostPersistVO> &oai_shipment_location_post_persist_vo = ::OpenAPI::OptionalParam<OAIShipmentLocationPostPersistVO>());

    /**
    * @param[in]  workgroup_id QString [required]
    * @param[in]  project_id QString [required]
    * @param[in]  shipment_id QString [required]
    * @param[in]  location_id QString [required]
    * @param[in]  oai_shipment_location_persist_vo OAIShipmentLocationPersistVO [optional]
    */
    virtual void putShipmentLocation(const QString &workgroup_id, const QString &project_id, const QString &shipment_id, const QString &location_id, const ::OpenAPI::OptionalParam<OAIShipmentLocationPersistVO> &oai_shipment_location_persist_vo = ::OpenAPI::OptionalParam<OAIShipmentLocationPersistVO>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void getShipmentCallback(OAIHttpRequestWorker *worker);
    void getShipmentListCallback(OAIHttpRequestWorker *worker);
    void postShipmentCallback(OAIHttpRequestWorker *worker);
    void putShipmentLocationCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void getShipmentSignal(OAIShipmentExpandVO summary);
    void getShipmentListSignal(OAIShipmentListVO summary);
    void postShipmentSignal(OAIShipmentLocationsPOSTResultVO summary);
    void putShipmentLocationSignal(OAIHTTPStatusVO summary);


    void getShipmentSignalFull(OAIHttpRequestWorker *worker, OAIShipmentExpandVO summary);
    void getShipmentListSignalFull(OAIHttpRequestWorker *worker, OAIShipmentListVO summary);
    void postShipmentSignalFull(OAIHttpRequestWorker *worker, OAIShipmentLocationsPOSTResultVO summary);
    void putShipmentLocationSignalFull(OAIHttpRequestWorker *worker, OAIHTTPStatusVO summary);

    Q_DECL_DEPRECATED_X("Use getShipmentSignalError() instead")
    void getShipmentSignalE(OAIShipmentExpandVO summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getShipmentSignalError(OAIShipmentExpandVO summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getShipmentListSignalError() instead")
    void getShipmentListSignalE(OAIShipmentListVO summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getShipmentListSignalError(OAIShipmentListVO summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postShipmentSignalError() instead")
    void postShipmentSignalE(OAIShipmentLocationsPOSTResultVO summary, QNetworkReply::NetworkError error_type, QString error_str);
    void postShipmentSignalError(OAIShipmentLocationsPOSTResultVO summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putShipmentLocationSignalError() instead")
    void putShipmentLocationSignalE(OAIHTTPStatusVO summary, QNetworkReply::NetworkError error_type, QString error_str);
    void putShipmentLocationSignalError(OAIHTTPStatusVO summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use getShipmentSignalErrorFull() instead")
    void getShipmentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getShipmentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getShipmentListSignalErrorFull() instead")
    void getShipmentListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getShipmentListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use postShipmentSignalErrorFull() instead")
    void postShipmentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void postShipmentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putShipmentLocationSignalErrorFull() instead")
    void putShipmentLocationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void putShipmentLocationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
