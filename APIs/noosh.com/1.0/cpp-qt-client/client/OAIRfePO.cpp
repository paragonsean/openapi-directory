/**
 * Noosh API application
 * Full description of Noosh API
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRfePO.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRfePO::OAIRfePO(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRfePO::OAIRfePO() {
    this->initializeModel();
}

OAIRfePO::~OAIRfePO() {}

void OAIRfePO::initializeModel() {

    m_description_isSet = false;
    m_description_isValid = false;

    m_details_isSet = false;
    m_details_isValid = false;

    m_estimate_due_date_isSet = false;
    m_estimate_due_date_isValid = false;

    m_proposed_order_completion_date_isSet = false;
    m_proposed_order_completion_date_isValid = false;

    m_rfe_number_isSet = false;
    m_rfe_number_isValid = false;

    m_rfe_title_isSet = false;
    m_rfe_title_isValid = false;

    m_specs_isSet = false;
    m_specs_isValid = false;

    m_supplier_user_ids_isSet = false;
    m_supplier_user_ids_isValid = false;
}

void OAIRfePO::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRfePO::fromJsonObject(QJsonObject json) {

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_details_isValid = ::OpenAPI::fromJsonValue(m_details, json[QString("details")]);
    m_details_isSet = !json[QString("details")].isNull() && m_details_isValid;

    m_estimate_due_date_isValid = ::OpenAPI::fromJsonValue(m_estimate_due_date, json[QString("estimate_due_date")]);
    m_estimate_due_date_isSet = !json[QString("estimate_due_date")].isNull() && m_estimate_due_date_isValid;

    m_proposed_order_completion_date_isValid = ::OpenAPI::fromJsonValue(m_proposed_order_completion_date, json[QString("proposed_order_completion_date")]);
    m_proposed_order_completion_date_isSet = !json[QString("proposed_order_completion_date")].isNull() && m_proposed_order_completion_date_isValid;

    m_rfe_number_isValid = ::OpenAPI::fromJsonValue(m_rfe_number, json[QString("rfe_number")]);
    m_rfe_number_isSet = !json[QString("rfe_number")].isNull() && m_rfe_number_isValid;

    m_rfe_title_isValid = ::OpenAPI::fromJsonValue(m_rfe_title, json[QString("rfe_title")]);
    m_rfe_title_isSet = !json[QString("rfe_title")].isNull() && m_rfe_title_isValid;

    m_specs_isValid = ::OpenAPI::fromJsonValue(m_specs, json[QString("specs")]);
    m_specs_isSet = !json[QString("specs")].isNull() && m_specs_isValid;

    m_supplier_user_ids_isValid = ::OpenAPI::fromJsonValue(m_supplier_user_ids, json[QString("supplier_user_ids")]);
    m_supplier_user_ids_isSet = !json[QString("supplier_user_ids")].isNull() && m_supplier_user_ids_isValid;
}

QString OAIRfePO::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRfePO::asJsonObject() const {
    QJsonObject obj;
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_details_isSet) {
        obj.insert(QString("details"), ::OpenAPI::toJsonValue(m_details));
    }
    if (m_estimate_due_date_isSet) {
        obj.insert(QString("estimate_due_date"), ::OpenAPI::toJsonValue(m_estimate_due_date));
    }
    if (m_proposed_order_completion_date_isSet) {
        obj.insert(QString("proposed_order_completion_date"), ::OpenAPI::toJsonValue(m_proposed_order_completion_date));
    }
    if (m_rfe_number_isSet) {
        obj.insert(QString("rfe_number"), ::OpenAPI::toJsonValue(m_rfe_number));
    }
    if (m_rfe_title_isSet) {
        obj.insert(QString("rfe_title"), ::OpenAPI::toJsonValue(m_rfe_title));
    }
    if (m_specs.size() > 0) {
        obj.insert(QString("specs"), ::OpenAPI::toJsonValue(m_specs));
    }
    if (m_supplier_user_ids.size() > 0) {
        obj.insert(QString("supplier_user_ids"), ::OpenAPI::toJsonValue(m_supplier_user_ids));
    }
    return obj;
}

QString OAIRfePO::getDescription() const {
    return m_description;
}
void OAIRfePO::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIRfePO::is_description_Set() const{
    return m_description_isSet;
}

bool OAIRfePO::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIRfePO::getDetails() const {
    return m_details;
}
void OAIRfePO::setDetails(const QString &details) {
    m_details = details;
    m_details_isSet = true;
}

bool OAIRfePO::is_details_Set() const{
    return m_details_isSet;
}

bool OAIRfePO::is_details_Valid() const{
    return m_details_isValid;
}

QDate OAIRfePO::getEstimateDueDate() const {
    return m_estimate_due_date;
}
void OAIRfePO::setEstimateDueDate(const QDate &estimate_due_date) {
    m_estimate_due_date = estimate_due_date;
    m_estimate_due_date_isSet = true;
}

bool OAIRfePO::is_estimate_due_date_Set() const{
    return m_estimate_due_date_isSet;
}

bool OAIRfePO::is_estimate_due_date_Valid() const{
    return m_estimate_due_date_isValid;
}

QDate OAIRfePO::getProposedOrderCompletionDate() const {
    return m_proposed_order_completion_date;
}
void OAIRfePO::setProposedOrderCompletionDate(const QDate &proposed_order_completion_date) {
    m_proposed_order_completion_date = proposed_order_completion_date;
    m_proposed_order_completion_date_isSet = true;
}

bool OAIRfePO::is_proposed_order_completion_date_Set() const{
    return m_proposed_order_completion_date_isSet;
}

bool OAIRfePO::is_proposed_order_completion_date_Valid() const{
    return m_proposed_order_completion_date_isValid;
}

QString OAIRfePO::getRfeNumber() const {
    return m_rfe_number;
}
void OAIRfePO::setRfeNumber(const QString &rfe_number) {
    m_rfe_number = rfe_number;
    m_rfe_number_isSet = true;
}

bool OAIRfePO::is_rfe_number_Set() const{
    return m_rfe_number_isSet;
}

bool OAIRfePO::is_rfe_number_Valid() const{
    return m_rfe_number_isValid;
}

QString OAIRfePO::getRfeTitle() const {
    return m_rfe_title;
}
void OAIRfePO::setRfeTitle(const QString &rfe_title) {
    m_rfe_title = rfe_title;
    m_rfe_title_isSet = true;
}

bool OAIRfePO::is_rfe_title_Set() const{
    return m_rfe_title_isSet;
}

bool OAIRfePO::is_rfe_title_Valid() const{
    return m_rfe_title_isValid;
}

QList<OAIRfeSpecPO> OAIRfePO::getSpecs() const {
    return m_specs;
}
void OAIRfePO::setSpecs(const QList<OAIRfeSpecPO> &specs) {
    m_specs = specs;
    m_specs_isSet = true;
}

bool OAIRfePO::is_specs_Set() const{
    return m_specs_isSet;
}

bool OAIRfePO::is_specs_Valid() const{
    return m_specs_isValid;
}

QList<qint64> OAIRfePO::getSupplierUserIds() const {
    return m_supplier_user_ids;
}
void OAIRfePO::setSupplierUserIds(const QList<qint64> &supplier_user_ids) {
    m_supplier_user_ids = supplier_user_ids;
    m_supplier_user_ids_isSet = true;
}

bool OAIRfePO::is_supplier_user_ids_Set() const{
    return m_supplier_user_ids_isSet;
}

bool OAIRfePO::is_supplier_user_ids_Valid() const{
    return m_supplier_user_ids_isValid;
}

bool OAIRfePO::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_details_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_estimate_due_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_proposed_order_completion_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rfe_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rfe_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_specs.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_supplier_user_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRfePO::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
