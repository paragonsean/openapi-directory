/**
 * Noosh API application
 * Full description of Noosh API
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIQuoteApi_H
#define OAI_OAIQuoteApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIHTTPStatusVO.h"
#include "OAIObjectStateListVO.h"
#include "OAIQuoteExpandVO.h"
#include "OAIQuoteListVO.h"
#include "OAIQuoteOfWgLevelSimpleVO.h"
#include "OAIQuotePutPersistVO.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIQuoteApi : public QObject {
    Q_OBJECT

public:
    OAIQuoteApi(const int timeOut = 0);
    ~OAIQuoteApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  workgroup_id QString [required]
    * @param[in]  project_id QString [required]
    * @param[in]  quote_id QString [required]
    */
    virtual void getQuote(const QString &workgroup_id, const QString &project_id, const QString &quote_id);

    /**
    * @param[in]  workgroup_id QString [required]
    * @param[in]  project_id QString [required]
    * @param[in]  quote_state_id_use_filtersquote_state_id111111 QString [optional]
    */
    virtual void getQuoteList(const QString &workgroup_id, const QString &project_id, const ::OpenAPI::OptionalParam<QString> &quote_state_id_use_filtersquote_state_id111111 = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  workgroup_id QString [required]
    */
    virtual void getQuoteStateList(const QString &workgroup_id);

    /**
    * @param[in]  workgroup_id QString [required]
    * @param[in]  project_id QString [required]
    * @param[in]  quote_id QString [required]
    * @param[in]  oai_quote_put_persist_vo OAIQuotePutPersistVO [optional]
    */
    virtual void putQuote(const QString &workgroup_id, const QString &project_id, const QString &quote_id, const ::OpenAPI::OptionalParam<OAIQuotePutPersistVO> &oai_quote_put_persist_vo = ::OpenAPI::OptionalParam<OAIQuotePutPersistVO>());

    /**
    * @param[in]  workgroup_id QString [required]
    * @param[in]  quote_state_id_use_filtersquote_state_id111111 QString [optional]
    */
    virtual void v1WorkgroupsWorkgroupIdQuotesGet(const QString &workgroup_id, const ::OpenAPI::OptionalParam<QString> &quote_state_id_use_filtersquote_state_id111111 = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void getQuoteCallback(OAIHttpRequestWorker *worker);
    void getQuoteListCallback(OAIHttpRequestWorker *worker);
    void getQuoteStateListCallback(OAIHttpRequestWorker *worker);
    void putQuoteCallback(OAIHttpRequestWorker *worker);
    void v1WorkgroupsWorkgroupIdQuotesGetCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void getQuoteSignal(OAIQuoteExpandVO summary);
    void getQuoteListSignal(OAIQuoteListVO summary);
    void getQuoteStateListSignal(OAIObjectStateListVO summary);
    void putQuoteSignal(OAIHTTPStatusVO summary);
    void v1WorkgroupsWorkgroupIdQuotesGetSignal(OAIQuoteOfWgLevelSimpleVO summary);


    void getQuoteSignalFull(OAIHttpRequestWorker *worker, OAIQuoteExpandVO summary);
    void getQuoteListSignalFull(OAIHttpRequestWorker *worker, OAIQuoteListVO summary);
    void getQuoteStateListSignalFull(OAIHttpRequestWorker *worker, OAIObjectStateListVO summary);
    void putQuoteSignalFull(OAIHttpRequestWorker *worker, OAIHTTPStatusVO summary);
    void v1WorkgroupsWorkgroupIdQuotesGetSignalFull(OAIHttpRequestWorker *worker, OAIQuoteOfWgLevelSimpleVO summary);

    Q_DECL_DEPRECATED_X("Use getQuoteSignalError() instead")
    void getQuoteSignalE(OAIQuoteExpandVO summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getQuoteSignalError(OAIQuoteExpandVO summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getQuoteListSignalError() instead")
    void getQuoteListSignalE(OAIQuoteListVO summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getQuoteListSignalError(OAIQuoteListVO summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getQuoteStateListSignalError() instead")
    void getQuoteStateListSignalE(OAIObjectStateListVO summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getQuoteStateListSignalError(OAIObjectStateListVO summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putQuoteSignalError() instead")
    void putQuoteSignalE(OAIHTTPStatusVO summary, QNetworkReply::NetworkError error_type, QString error_str);
    void putQuoteSignalError(OAIHTTPStatusVO summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v1WorkgroupsWorkgroupIdQuotesGetSignalError() instead")
    void v1WorkgroupsWorkgroupIdQuotesGetSignalE(OAIQuoteOfWgLevelSimpleVO summary, QNetworkReply::NetworkError error_type, QString error_str);
    void v1WorkgroupsWorkgroupIdQuotesGetSignalError(OAIQuoteOfWgLevelSimpleVO summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use getQuoteSignalErrorFull() instead")
    void getQuoteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getQuoteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getQuoteListSignalErrorFull() instead")
    void getQuoteListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getQuoteListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getQuoteStateListSignalErrorFull() instead")
    void getQuoteStateListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getQuoteStateListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use putQuoteSignalErrorFull() instead")
    void putQuoteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void putQuoteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v1WorkgroupsWorkgroupIdQuotesGetSignalErrorFull() instead")
    void v1WorkgroupsWorkgroupIdQuotesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void v1WorkgroupsWorkgroupIdQuotesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
