# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.role_simple_vo import RoleSimpleVO
from openapi_server.models.user_person_vo import UserPersonVO
from openapi_server import util


class V1x1InvitedTeamMemberVO(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, role: RoleSimpleVO=None, team_member_id: int=None, user: UserPersonVO=None, was_invited_before: bool=None):
        """V1x1InvitedTeamMemberVO - a model defined in OpenAPI

        :param role: The role of this V1x1InvitedTeamMemberVO.
        :param team_member_id: The team_member_id of this V1x1InvitedTeamMemberVO.
        :param user: The user of this V1x1InvitedTeamMemberVO.
        :param was_invited_before: The was_invited_before of this V1x1InvitedTeamMemberVO.
        """
        self.openapi_types = {
            'role': RoleSimpleVO,
            'team_member_id': int,
            'user': UserPersonVO,
            'was_invited_before': bool
        }

        self.attribute_map = {
            'role': 'role',
            'team_member_id': 'team_member_id',
            'user': 'user',
            'was_invited_before': 'was_invited_before'
        }

        self._role = role
        self._team_member_id = team_member_id
        self._user = user
        self._was_invited_before = was_invited_before

    @classmethod
    def from_dict(cls, dikt: dict) -> 'V1x1InvitedTeamMemberVO':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The V1x1InvitedTeamMemberVO of this V1x1InvitedTeamMemberVO.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def role(self):
        """Gets the role of this V1x1InvitedTeamMemberVO.


        :return: The role of this V1x1InvitedTeamMemberVO.
        :rtype: RoleSimpleVO
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this V1x1InvitedTeamMemberVO.


        :param role: The role of this V1x1InvitedTeamMemberVO.
        :type role: RoleSimpleVO
        """

        self._role = role

    @property
    def team_member_id(self):
        """Gets the team_member_id of this V1x1InvitedTeamMemberVO.

        

        :return: The team_member_id of this V1x1InvitedTeamMemberVO.
        :rtype: int
        """
        return self._team_member_id

    @team_member_id.setter
    def team_member_id(self, team_member_id):
        """Sets the team_member_id of this V1x1InvitedTeamMemberVO.

        

        :param team_member_id: The team_member_id of this V1x1InvitedTeamMemberVO.
        :type team_member_id: int
        """

        self._team_member_id = team_member_id

    @property
    def user(self):
        """Gets the user of this V1x1InvitedTeamMemberVO.


        :return: The user of this V1x1InvitedTeamMemberVO.
        :rtype: UserPersonVO
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this V1x1InvitedTeamMemberVO.


        :param user: The user of this V1x1InvitedTeamMemberVO.
        :type user: UserPersonVO
        """

        self._user = user

    @property
    def was_invited_before(self):
        """Gets the was_invited_before of this V1x1InvitedTeamMemberVO.

        

        :return: The was_invited_before of this V1x1InvitedTeamMemberVO.
        :rtype: bool
        """
        return self._was_invited_before

    @was_invited_before.setter
    def was_invited_before(self, was_invited_before):
        """Sets the was_invited_before of this V1x1InvitedTeamMemberVO.

        

        :param was_invited_before: The was_invited_before of this V1x1InvitedTeamMemberVO.
        :type was_invited_before: bool
        """

        self._was_invited_before = was_invited_before
