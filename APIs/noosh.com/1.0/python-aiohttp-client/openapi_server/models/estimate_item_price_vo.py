# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.breakout_vo import BreakoutVO
from openapi_server.models.item_option_vo import ItemOptionVO
from openapi_server import util


class EstimateItemPriceVO(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, add_price: object=None, breakouts: List[BreakoutVO]=None, em_estimate_item_price_id: int=None, item_option: ItemOptionVO=None, price: object=None, shipping: object=None, tax: object=None, total_price: object=None, transactional_add_price: object=None, transactional_price: object=None, transactional_shipping: object=None, transactional_tax: object=None, transactional_total_price: object=None):
        """EstimateItemPriceVO - a model defined in OpenAPI

        :param add_price: The add_price of this EstimateItemPriceVO.
        :param breakouts: The breakouts of this EstimateItemPriceVO.
        :param em_estimate_item_price_id: The em_estimate_item_price_id of this EstimateItemPriceVO.
        :param item_option: The item_option of this EstimateItemPriceVO.
        :param price: The price of this EstimateItemPriceVO.
        :param shipping: The shipping of this EstimateItemPriceVO.
        :param tax: The tax of this EstimateItemPriceVO.
        :param total_price: The total_price of this EstimateItemPriceVO.
        :param transactional_add_price: The transactional_add_price of this EstimateItemPriceVO.
        :param transactional_price: The transactional_price of this EstimateItemPriceVO.
        :param transactional_shipping: The transactional_shipping of this EstimateItemPriceVO.
        :param transactional_tax: The transactional_tax of this EstimateItemPriceVO.
        :param transactional_total_price: The transactional_total_price of this EstimateItemPriceVO.
        """
        self.openapi_types = {
            'add_price': object,
            'breakouts': List[BreakoutVO],
            'em_estimate_item_price_id': int,
            'item_option': ItemOptionVO,
            'price': object,
            'shipping': object,
            'tax': object,
            'total_price': object,
            'transactional_add_price': object,
            'transactional_price': object,
            'transactional_shipping': object,
            'transactional_tax': object,
            'transactional_total_price': object
        }

        self.attribute_map = {
            'add_price': 'add_price',
            'breakouts': 'breakouts',
            'em_estimate_item_price_id': 'em_estimate_item_price_id',
            'item_option': 'item_option',
            'price': 'price',
            'shipping': 'shipping',
            'tax': 'tax',
            'total_price': 'total_price',
            'transactional_add_price': 'transactional_add_price',
            'transactional_price': 'transactional_price',
            'transactional_shipping': 'transactional_shipping',
            'transactional_tax': 'transactional_tax',
            'transactional_total_price': 'transactional_total_price'
        }

        self._add_price = add_price
        self._breakouts = breakouts
        self._em_estimate_item_price_id = em_estimate_item_price_id
        self._item_option = item_option
        self._price = price
        self._shipping = shipping
        self._tax = tax
        self._total_price = total_price
        self._transactional_add_price = transactional_add_price
        self._transactional_price = transactional_price
        self._transactional_shipping = transactional_shipping
        self._transactional_tax = transactional_tax
        self._transactional_total_price = transactional_total_price

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EstimateItemPriceVO':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EstimateItemPriceVO of this EstimateItemPriceVO.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def add_price(self):
        """Gets the add_price of this EstimateItemPriceVO.

        Java type: java.math.BigDecimal

        :return: The add_price of this EstimateItemPriceVO.
        :rtype: object
        """
        return self._add_price

    @add_price.setter
    def add_price(self, add_price):
        """Sets the add_price of this EstimateItemPriceVO.

        Java type: java.math.BigDecimal

        :param add_price: The add_price of this EstimateItemPriceVO.
        :type add_price: object
        """

        self._add_price = add_price

    @property
    def breakouts(self):
        """Gets the breakouts of this EstimateItemPriceVO.

        

        :return: The breakouts of this EstimateItemPriceVO.
        :rtype: List[BreakoutVO]
        """
        return self._breakouts

    @breakouts.setter
    def breakouts(self, breakouts):
        """Sets the breakouts of this EstimateItemPriceVO.

        

        :param breakouts: The breakouts of this EstimateItemPriceVO.
        :type breakouts: List[BreakoutVO]
        """

        self._breakouts = breakouts

    @property
    def em_estimate_item_price_id(self):
        """Gets the em_estimate_item_price_id of this EstimateItemPriceVO.

        

        :return: The em_estimate_item_price_id of this EstimateItemPriceVO.
        :rtype: int
        """
        return self._em_estimate_item_price_id

    @em_estimate_item_price_id.setter
    def em_estimate_item_price_id(self, em_estimate_item_price_id):
        """Sets the em_estimate_item_price_id of this EstimateItemPriceVO.

        

        :param em_estimate_item_price_id: The em_estimate_item_price_id of this EstimateItemPriceVO.
        :type em_estimate_item_price_id: int
        """

        self._em_estimate_item_price_id = em_estimate_item_price_id

    @property
    def item_option(self):
        """Gets the item_option of this EstimateItemPriceVO.


        :return: The item_option of this EstimateItemPriceVO.
        :rtype: ItemOptionVO
        """
        return self._item_option

    @item_option.setter
    def item_option(self, item_option):
        """Sets the item_option of this EstimateItemPriceVO.


        :param item_option: The item_option of this EstimateItemPriceVO.
        :type item_option: ItemOptionVO
        """

        self._item_option = item_option

    @property
    def price(self):
        """Gets the price of this EstimateItemPriceVO.

        Java type: java.math.BigDecimal

        :return: The price of this EstimateItemPriceVO.
        :rtype: object
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this EstimateItemPriceVO.

        Java type: java.math.BigDecimal

        :param price: The price of this EstimateItemPriceVO.
        :type price: object
        """

        self._price = price

    @property
    def shipping(self):
        """Gets the shipping of this EstimateItemPriceVO.

        Java type: java.math.BigDecimal

        :return: The shipping of this EstimateItemPriceVO.
        :rtype: object
        """
        return self._shipping

    @shipping.setter
    def shipping(self, shipping):
        """Sets the shipping of this EstimateItemPriceVO.

        Java type: java.math.BigDecimal

        :param shipping: The shipping of this EstimateItemPriceVO.
        :type shipping: object
        """

        self._shipping = shipping

    @property
    def tax(self):
        """Gets the tax of this EstimateItemPriceVO.

        Java type: java.math.BigDecimal

        :return: The tax of this EstimateItemPriceVO.
        :rtype: object
        """
        return self._tax

    @tax.setter
    def tax(self, tax):
        """Sets the tax of this EstimateItemPriceVO.

        Java type: java.math.BigDecimal

        :param tax: The tax of this EstimateItemPriceVO.
        :type tax: object
        """

        self._tax = tax

    @property
    def total_price(self):
        """Gets the total_price of this EstimateItemPriceVO.

        Java type: java.math.BigDecimal

        :return: The total_price of this EstimateItemPriceVO.
        :rtype: object
        """
        return self._total_price

    @total_price.setter
    def total_price(self, total_price):
        """Sets the total_price of this EstimateItemPriceVO.

        Java type: java.math.BigDecimal

        :param total_price: The total_price of this EstimateItemPriceVO.
        :type total_price: object
        """

        self._total_price = total_price

    @property
    def transactional_add_price(self):
        """Gets the transactional_add_price of this EstimateItemPriceVO.

        Java type: java.math.BigDecimal

        :return: The transactional_add_price of this EstimateItemPriceVO.
        :rtype: object
        """
        return self._transactional_add_price

    @transactional_add_price.setter
    def transactional_add_price(self, transactional_add_price):
        """Sets the transactional_add_price of this EstimateItemPriceVO.

        Java type: java.math.BigDecimal

        :param transactional_add_price: The transactional_add_price of this EstimateItemPriceVO.
        :type transactional_add_price: object
        """

        self._transactional_add_price = transactional_add_price

    @property
    def transactional_price(self):
        """Gets the transactional_price of this EstimateItemPriceVO.

        Java type: java.math.BigDecimal

        :return: The transactional_price of this EstimateItemPriceVO.
        :rtype: object
        """
        return self._transactional_price

    @transactional_price.setter
    def transactional_price(self, transactional_price):
        """Sets the transactional_price of this EstimateItemPriceVO.

        Java type: java.math.BigDecimal

        :param transactional_price: The transactional_price of this EstimateItemPriceVO.
        :type transactional_price: object
        """

        self._transactional_price = transactional_price

    @property
    def transactional_shipping(self):
        """Gets the transactional_shipping of this EstimateItemPriceVO.

        Java type: java.math.BigDecimal

        :return: The transactional_shipping of this EstimateItemPriceVO.
        :rtype: object
        """
        return self._transactional_shipping

    @transactional_shipping.setter
    def transactional_shipping(self, transactional_shipping):
        """Sets the transactional_shipping of this EstimateItemPriceVO.

        Java type: java.math.BigDecimal

        :param transactional_shipping: The transactional_shipping of this EstimateItemPriceVO.
        :type transactional_shipping: object
        """

        self._transactional_shipping = transactional_shipping

    @property
    def transactional_tax(self):
        """Gets the transactional_tax of this EstimateItemPriceVO.

        Java type: java.math.BigDecimal

        :return: The transactional_tax of this EstimateItemPriceVO.
        :rtype: object
        """
        return self._transactional_tax

    @transactional_tax.setter
    def transactional_tax(self, transactional_tax):
        """Sets the transactional_tax of this EstimateItemPriceVO.

        Java type: java.math.BigDecimal

        :param transactional_tax: The transactional_tax of this EstimateItemPriceVO.
        :type transactional_tax: object
        """

        self._transactional_tax = transactional_tax

    @property
    def transactional_total_price(self):
        """Gets the transactional_total_price of this EstimateItemPriceVO.

        Java type: java.math.BigDecimal

        :return: The transactional_total_price of this EstimateItemPriceVO.
        :rtype: object
        """
        return self._transactional_total_price

    @transactional_total_price.setter
    def transactional_total_price(self, transactional_total_price):
        """Sets the transactional_total_price of this EstimateItemPriceVO.

        Java type: java.math.BigDecimal

        :param transactional_total_price: The transactional_total_price of this EstimateItemPriceVO.
        :type transactional_total_price: object
        """

        self._transactional_total_price = transactional_total_price
