# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CountryVO(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, constant_token: str=None, country: str=None, country_id: int=None):
        """CountryVO - a model defined in OpenAPI

        :param constant_token: The constant_token of this CountryVO.
        :param country: The country of this CountryVO.
        :param country_id: The country_id of this CountryVO.
        """
        self.openapi_types = {
            'constant_token': str,
            'country': str,
            'country_id': int
        }

        self.attribute_map = {
            'constant_token': 'constant_token',
            'country': 'country',
            'country_id': 'country_id'
        }

        self._constant_token = constant_token
        self._country = country
        self._country_id = country_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CountryVO':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CountryVO of this CountryVO.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def constant_token(self):
        """Gets the constant_token of this CountryVO.

        

        :return: The constant_token of this CountryVO.
        :rtype: str
        """
        return self._constant_token

    @constant_token.setter
    def constant_token(self, constant_token):
        """Sets the constant_token of this CountryVO.

        

        :param constant_token: The constant_token of this CountryVO.
        :type constant_token: str
        """

        self._constant_token = constant_token

    @property
    def country(self):
        """Gets the country of this CountryVO.

        

        :return: The country of this CountryVO.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this CountryVO.

        

        :param country: The country of this CountryVO.
        :type country: str
        """

        self._country = country

    @property
    def country_id(self):
        """Gets the country_id of this CountryVO.

        

        :return: The country_id of this CountryVO.
        :rtype: int
        """
        return self._country_id

    @country_id.setter
    def country_id(self, country_id):
        """Sets the country_id of this CountryVO.

        

        :param country_id: The country_id of this CountryVO.
        :type country_id: int
        """

        self._country_id = country_id
