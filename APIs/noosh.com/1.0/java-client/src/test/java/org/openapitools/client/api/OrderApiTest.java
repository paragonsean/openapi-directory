/*
 * Noosh API application
 * Full description of Noosh API
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.HTTPStatusVO;
import org.openapitools.client.model.OrderDetailVO;
import org.openapitools.client.model.OrderDetailWithIndicatorVO;
import org.openapitools.client.model.OrderExpandWorkgroupLevelVO;
import org.openapitools.client.model.OrderListVO;
import org.openapitools.client.model.OrderPO;
import org.openapitools.client.model.OrderUpdPersistVO;
import org.openapitools.client.model.OrderVO;
import org.openapitools.client.model.OrderWorkgroupLevelListVO;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for OrderApi
 */
@Disabled
public class OrderApiTest {

    private final OrderApi api = new OrderApi();

    /**
     * Get a specific buy order
     *
     * Get a specific buy order
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getBuyOrderTest() throws ApiException {
        String workgroupId = null;
        String projectId = null;
        String orderId = null;
        OrderDetailVO response = api.getBuyOrder(workgroupId, projectId, orderId);
        // TODO: test validations
    }

    /**
     * List the buy orders
     *
     * List the buy orders
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getBuyOrderListTest() throws ApiException {
        String workgroupId = null;
        String projectId = null;
        OrderListVO response = api.getBuyOrderList(workgroupId, projectId);
        // TODO: test validations
    }

    /**
     * List the buy orders of workgroup
     *
     * List the buy orders of workgroup
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getBuyOrderListOfWorkgroupTest() throws ApiException {
        String workgroupId = null;
        OrderWorkgroupLevelListVO response = api.getBuyOrderListOfWorkgroup(workgroupId);
        // TODO: test validations
    }

    /**
     * Get a specific buy order of workgroup
     *
     * Get a specific buy order of workgroup
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getBuyOrderOfWorkgroupTest() throws ApiException {
        String workgroupId = null;
        String orderId = null;
        OrderExpandWorkgroupLevelVO response = api.getBuyOrderOfWorkgroup(workgroupId, orderId);
        // TODO: test validations
    }

    /**
     * Get a specific buy/sell order
     *
     * Get a specific buy/sell order
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrderTest() throws ApiException {
        String workgroupId = null;
        String projectId = null;
        String orderId = null;
        OrderDetailWithIndicatorVO response = api.getOrder(workgroupId, projectId, orderId);
        // TODO: test validations
    }

    /**
     * Get a specific sell order
     *
     * Get a specific sell order
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSellOrderTest() throws ApiException {
        String workgroupId = null;
        String projectId = null;
        String orderId = null;
        OrderDetailVO response = api.getSellOrder(workgroupId, projectId, orderId);
        // TODO: test validations
    }

    /**
     * List the sell orders
     *
     * List the sell orders
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSellOrderListTest() throws ApiException {
        String workgroupId = null;
        String projectId = null;
        OrderListVO response = api.getSellOrderList(workgroupId, projectId);
        // TODO: test validations
    }

    /**
     * List the sell orders of workgrop
     *
     * List the sell orders of workgrop
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSellOrderListOfWorkgroupTest() throws ApiException {
        String workgroupId = null;
        OrderWorkgroupLevelListVO response = api.getSellOrderListOfWorkgroup(workgroupId);
        // TODO: test validations
    }

    /**
     * Get a specific sell order
     *
     * Get a specific sell order
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSellOrderOfWorkgroupTest() throws ApiException {
        String workgroupId = null;
        String orderId = null;
        OrderExpandWorkgroupLevelVO response = api.getSellOrderOfWorkgroup(workgroupId, orderId);
        // TODO: test validations
    }

    /**
     * Create a quick buy order
     *
     * Create a quick buy order
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postBuyOrderTest() throws ApiException {
        String workgroupId = null;
        String projectId = null;
        OrderPO orderPO = null;
        OrderPO response = api.postBuyOrder(workgroupId, projectId, orderPO);
        // TODO: test validations
    }

    /**
     * Update a specific buy order
     *
     * Update a specific buy order
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putBuyOrderTest() throws ApiException {
        String workgroupId = null;
        String projectId = null;
        String orderId = null;
        OrderUpdPersistVO orderUpdPersistVO = null;
        OrderVO response = api.putBuyOrder(workgroupId, projectId, orderId, orderUpdPersistVO);
        // TODO: test validations
    }

    /**
     * Update / Accept or Reject a specific sell order
     *
     * Update / Accept or Reject a specific sell order
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putSellOrderTest() throws ApiException {
        String workgroupId = null;
        String projectId = null;
        String orderId = null;
        OrderUpdPersistVO orderUpdPersistVO = null;
        OrderVO response = api.putSellOrder(workgroupId, projectId, orderId, orderUpdPersistVO);
        // TODO: test validations
    }

}
