/*
 * Noosh API application
 * Full description of Noosh API
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.HTTPStatusVO;
import org.openapitools.client.model.ProjectExpandVO;
import org.openapitools.client.model.ProjectIdListVO;
import org.openapitools.client.model.ProjectListVO;
import org.openapitools.client.model.ProjectPatchPO;
import org.openapitools.client.model.ProjectPersistVO;
import org.openapitools.client.model.ProjectVO;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ProjectApi
 */
@Disabled
public class ProjectApiTest {

    private final ProjectApi api = new ProjectApi();

    /**
     * Attach children projects to specific Project
     *
     * Attach children projects to specific Project
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void attachProjectTest() throws ApiException {
        String workgroupId = null;
        String projectId = null;
        ProjectIdListVO projectIdListVO = null;
        HTTPStatusVO response = api.attachProject(workgroupId, projectId, projectIdListVO);
        // TODO: test validations
    }

    /**
     * Archieve a specific Project
     *
     * Archieve a specific Project
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteProjectTest() throws ApiException {
        String workgroupId = null;
        String projectId = null;
        HTTPStatusVO response = api.deleteProject(workgroupId, projectId);
        // TODO: test validations
    }

    /**
     * Get a specific Project
     *
     * Get a specific Project
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getProjectTest() throws ApiException {
        String workgroupId = null;
        String projectId = null;
        ProjectExpandVO response = api.getProject(workgroupId, projectId);
        // TODO: test validations
    }

    /**
     * List the projects
     *
     * List the projects
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getProjectListTest() throws ApiException {
        String workgroupId = null;
        ProjectListVO response = api.getProjectList(workgroupId);
        // TODO: test validations
    }

    /**
     * Patch a specific Project
     *
     * Patch a specific Project
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void patchProjectTest() throws ApiException {
        String workgroupId = null;
        String projectId = null;
        ProjectPatchPO projectPatchPO = null;
        HTTPStatusVO response = api.patchProject(workgroupId, projectId, projectPatchPO);
        // TODO: test validations
    }

    /**
     * Create a Project
     *
     * Create a Project
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void postProjectTest() throws ApiException {
        String workgroupId = null;
        ProjectPersistVO projectPersistVO = null;
        ProjectVO response = api.postProject(workgroupId, projectPersistVO);
        // TODO: test validations
    }

    /**
     * Update a specific Project
     *
     * Update a specific Project
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void putProjectTest() throws ApiException {
        String workgroupId = null;
        String projectId = null;
        ProjectPersistVO projectPersistVO = null;
        HTTPStatusVO response = api.putProject(workgroupId, projectId, projectPersistVO);
        // TODO: test validations
    }

}
