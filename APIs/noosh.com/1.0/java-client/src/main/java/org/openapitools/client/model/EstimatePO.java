/*
 * Noosh API application
 * Full description of Noosh API
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.EstimateItemPO;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Java type: com.noosh.domain.nooshapi.persist.po.EstimatePO
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:59:23.742517-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class EstimatePO {
  public static final String SERIALIZED_NAME_COMMENTS = "comments";
  @SerializedName(SERIALIZED_NAME_COMMENTS)
  private String comments;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_ESTIMATE_ITEMS = "estimate_items";
  @SerializedName(SERIALIZED_NAME_ESTIMATE_ITEMS)
  private List<EstimateItemPO> estimateItems = new ArrayList<>();

  public static final String SERIALIZED_NAME_ESTIMATE_TITLE = "estimate_title";
  @SerializedName(SERIALIZED_NAME_ESTIMATE_TITLE)
  private String estimateTitle;

  public static final String SERIALIZED_NAME_EXPIRATION_DATE = "expiration_date";
  @SerializedName(SERIALIZED_NAME_EXPIRATION_DATE)
  private LocalDate expirationDate;

  public static final String SERIALIZED_NAME_OWNER_REFERENCE = "owner_reference";
  @SerializedName(SERIALIZED_NAME_OWNER_REFERENCE)
  private String ownerReference;

  public static final String SERIALIZED_NAME_RFE_ID = "rfe_id";
  @SerializedName(SERIALIZED_NAME_RFE_ID)
  private Long rfeId;

  public EstimatePO() {
  }

  public EstimatePO comments(String comments) {
    this.comments = comments;
    return this;
  }

  /**
   * 
   * @return comments
   */
  @javax.annotation.Nullable
  public String getComments() {
    return comments;
  }

  public void setComments(String comments) {
    this.comments = comments;
  }


  public EstimatePO description(String description) {
    this.description = description;
    return this;
  }

  /**
   * 
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public EstimatePO estimateItems(List<EstimateItemPO> estimateItems) {
    this.estimateItems = estimateItems;
    return this;
  }

  public EstimatePO addEstimateItemsItem(EstimateItemPO estimateItemsItem) {
    if (this.estimateItems == null) {
      this.estimateItems = new ArrayList<>();
    }
    this.estimateItems.add(estimateItemsItem);
    return this;
  }

  /**
   * 
   * @return estimateItems
   */
  @javax.annotation.Nullable
  public List<EstimateItemPO> getEstimateItems() {
    return estimateItems;
  }

  public void setEstimateItems(List<EstimateItemPO> estimateItems) {
    this.estimateItems = estimateItems;
  }


  public EstimatePO estimateTitle(String estimateTitle) {
    this.estimateTitle = estimateTitle;
    return this;
  }

  /**
   * 
   * @return estimateTitle
   */
  @javax.annotation.Nullable
  public String getEstimateTitle() {
    return estimateTitle;
  }

  public void setEstimateTitle(String estimateTitle) {
    this.estimateTitle = estimateTitle;
  }


  public EstimatePO expirationDate(LocalDate expirationDate) {
    this.expirationDate = expirationDate;
    return this;
  }

  /**
   * 
   * @return expirationDate
   */
  @javax.annotation.Nullable
  public LocalDate getExpirationDate() {
    return expirationDate;
  }

  public void setExpirationDate(LocalDate expirationDate) {
    this.expirationDate = expirationDate;
  }


  public EstimatePO ownerReference(String ownerReference) {
    this.ownerReference = ownerReference;
    return this;
  }

  /**
   * 
   * @return ownerReference
   */
  @javax.annotation.Nullable
  public String getOwnerReference() {
    return ownerReference;
  }

  public void setOwnerReference(String ownerReference) {
    this.ownerReference = ownerReference;
  }


  public EstimatePO rfeId(Long rfeId) {
    this.rfeId = rfeId;
    return this;
  }

  /**
   * 
   * @return rfeId
   */
  @javax.annotation.Nullable
  public Long getRfeId() {
    return rfeId;
  }

  public void setRfeId(Long rfeId) {
    this.rfeId = rfeId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EstimatePO estimatePO = (EstimatePO) o;
    return Objects.equals(this.comments, estimatePO.comments) &&
        Objects.equals(this.description, estimatePO.description) &&
        Objects.equals(this.estimateItems, estimatePO.estimateItems) &&
        Objects.equals(this.estimateTitle, estimatePO.estimateTitle) &&
        Objects.equals(this.expirationDate, estimatePO.expirationDate) &&
        Objects.equals(this.ownerReference, estimatePO.ownerReference) &&
        Objects.equals(this.rfeId, estimatePO.rfeId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(comments, description, estimateItems, estimateTitle, expirationDate, ownerReference, rfeId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EstimatePO {\n");
    sb.append("    comments: ").append(toIndentedString(comments)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    estimateItems: ").append(toIndentedString(estimateItems)).append("\n");
    sb.append("    estimateTitle: ").append(toIndentedString(estimateTitle)).append("\n");
    sb.append("    expirationDate: ").append(toIndentedString(expirationDate)).append("\n");
    sb.append("    ownerReference: ").append(toIndentedString(ownerReference)).append("\n");
    sb.append("    rfeId: ").append(toIndentedString(rfeId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("comments");
    openapiFields.add("description");
    openapiFields.add("estimate_items");
    openapiFields.add("estimate_title");
    openapiFields.add("expiration_date");
    openapiFields.add("owner_reference");
    openapiFields.add("rfe_id");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EstimatePO
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EstimatePO.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EstimatePO is not found in the empty JSON string", EstimatePO.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EstimatePO.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EstimatePO` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("comments") != null && !jsonObj.get("comments").isJsonNull()) && !jsonObj.get("comments").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `comments` to be a primitive type in the JSON string but got `%s`", jsonObj.get("comments").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if (jsonObj.get("estimate_items") != null && !jsonObj.get("estimate_items").isJsonNull()) {
        JsonArray jsonArrayestimateItems = jsonObj.getAsJsonArray("estimate_items");
        if (jsonArrayestimateItems != null) {
          // ensure the json data is an array
          if (!jsonObj.get("estimate_items").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `estimate_items` to be an array in the JSON string but got `%s`", jsonObj.get("estimate_items").toString()));
          }

          // validate the optional field `estimate_items` (array)
          for (int i = 0; i < jsonArrayestimateItems.size(); i++) {
            EstimateItemPO.validateJsonElement(jsonArrayestimateItems.get(i));
          };
        }
      }
      if ((jsonObj.get("estimate_title") != null && !jsonObj.get("estimate_title").isJsonNull()) && !jsonObj.get("estimate_title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `estimate_title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("estimate_title").toString()));
      }
      if ((jsonObj.get("owner_reference") != null && !jsonObj.get("owner_reference").isJsonNull()) && !jsonObj.get("owner_reference").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `owner_reference` to be a primitive type in the JSON string but got `%s`", jsonObj.get("owner_reference").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EstimatePO.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EstimatePO' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EstimatePO> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EstimatePO.class));

       return (TypeAdapter<T>) new TypeAdapter<EstimatePO>() {
           @Override
           public void write(JsonWriter out, EstimatePO value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EstimatePO read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of EstimatePO given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EstimatePO
   * @throws IOException if the JSON string is invalid with respect to EstimatePO
   */
  public static EstimatePO fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EstimatePO.class);
  }

  /**
   * Convert an instance of EstimatePO to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

