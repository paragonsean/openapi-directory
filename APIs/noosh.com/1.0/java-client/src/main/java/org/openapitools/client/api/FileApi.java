/*
 * Noosh API application
 * Full description of Noosh API
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.FileResponseVO;
import org.openapitools.client.model.FileTagResponseVO;
import org.openapitools.client.model.HTTPStatusVO;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class FileApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public FileApi() {
        this(Configuration.getDefaultApiClient());
    }

    public FileApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getFile
     * @param workgroupId  (required)
     * @param projectId  (required)
     * @param fileId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful retrieval </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFileCall(String workgroupId, String projectId, String fileId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/1.1/workgroups/{workgroup_id}/projects/{project_id}/files/{file_id}"
            .replace("{" + "workgroup_id" + "}", localVarApiClient.escapeString(workgroupId.toString()))
            .replace("{" + "project_id" + "}", localVarApiClient.escapeString(projectId.toString()))
            .replace("{" + "file_id" + "}", localVarApiClient.escapeString(fileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*",
            "application/json",
            "application/x-json-smile",
            "application/x-yaml",
            "application/xml",
            "text/csv",
            "text/x-yaml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFileValidateBeforeCall(String workgroupId, String projectId, String fileId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workgroupId' is set
        if (workgroupId == null) {
            throw new ApiException("Missing the required parameter 'workgroupId' when calling getFile(Async)");
        }

        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling getFile(Async)");
        }

        // verify the required parameter 'fileId' is set
        if (fileId == null) {
            throw new ApiException("Missing the required parameter 'fileId' when calling getFile(Async)");
        }

        return getFileCall(workgroupId, projectId, fileId, _callback);

    }

    /**
     * Get File from Project.  Works for Regular and Remote Files
     * Get File from Project.  Works for Regular and Remote Files
     * @param workgroupId  (required)
     * @param projectId  (required)
     * @param fileId  (required)
     * @return FileResponseVO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful retrieval </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public FileResponseVO getFile(String workgroupId, String projectId, String fileId) throws ApiException {
        ApiResponse<FileResponseVO> localVarResp = getFileWithHttpInfo(workgroupId, projectId, fileId);
        return localVarResp.getData();
    }

    /**
     * Get File from Project.  Works for Regular and Remote Files
     * Get File from Project.  Works for Regular and Remote Files
     * @param workgroupId  (required)
     * @param projectId  (required)
     * @param fileId  (required)
     * @return ApiResponse&lt;FileResponseVO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful retrieval </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FileResponseVO> getFileWithHttpInfo(String workgroupId, String projectId, String fileId) throws ApiException {
        okhttp3.Call localVarCall = getFileValidateBeforeCall(workgroupId, projectId, fileId, null);
        Type localVarReturnType = new TypeToken<FileResponseVO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get File from Project.  Works for Regular and Remote Files (asynchronously)
     * Get File from Project.  Works for Regular and Remote Files
     * @param workgroupId  (required)
     * @param projectId  (required)
     * @param fileId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful retrieval </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFileAsync(String workgroupId, String projectId, String fileId, final ApiCallback<FileResponseVO> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFileValidateBeforeCall(workgroupId, projectId, fileId, _callback);
        Type localVarReturnType = new TypeToken<FileResponseVO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getFileTags
     * @param workgroupId  (required)
     * @param projectId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful retrieval </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFileTagsCall(String workgroupId, String projectId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/1.1/workgroups/{workgroup_id}/projects/{project_id}/fileTags"
            .replace("{" + "workgroup_id" + "}", localVarApiClient.escapeString(workgroupId.toString()))
            .replace("{" + "project_id" + "}", localVarApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*",
            "application/json",
            "application/x-json-smile",
            "application/x-yaml",
            "application/xml",
            "text/csv",
            "text/x-yaml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFileTagsValidateBeforeCall(String workgroupId, String projectId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workgroupId' is set
        if (workgroupId == null) {
            throw new ApiException("Missing the required parameter 'workgroupId' when calling getFileTags(Async)");
        }

        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling getFileTags(Async)");
        }

        return getFileTagsCall(workgroupId, projectId, _callback);

    }

    /**
     * List Tags from Workgroup and Project.
     * List Tags from Workgroup and Project.
     * @param workgroupId  (required)
     * @param projectId  (required)
     * @return FileTagResponseVO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful retrieval </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public FileTagResponseVO getFileTags(String workgroupId, String projectId) throws ApiException {
        ApiResponse<FileTagResponseVO> localVarResp = getFileTagsWithHttpInfo(workgroupId, projectId);
        return localVarResp.getData();
    }

    /**
     * List Tags from Workgroup and Project.
     * List Tags from Workgroup and Project.
     * @param workgroupId  (required)
     * @param projectId  (required)
     * @return ApiResponse&lt;FileTagResponseVO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful retrieval </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FileTagResponseVO> getFileTagsWithHttpInfo(String workgroupId, String projectId) throws ApiException {
        okhttp3.Call localVarCall = getFileTagsValidateBeforeCall(workgroupId, projectId, null);
        Type localVarReturnType = new TypeToken<FileTagResponseVO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Tags from Workgroup and Project. (asynchronously)
     * List Tags from Workgroup and Project.
     * @param workgroupId  (required)
     * @param projectId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful retrieval </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFileTagsAsync(String workgroupId, String projectId, final ApiCallback<FileTagResponseVO> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFileTagsValidateBeforeCall(workgroupId, projectId, _callback);
        Type localVarReturnType = new TypeToken<FileTagResponseVO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getFiles
     * @param workgroupId  (required)
     * @param projectId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful retrieval </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFilesCall(String workgroupId, String projectId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/1.1/workgroups/{workgroup_id}/projects/{project_id}/files"
            .replace("{" + "workgroup_id" + "}", localVarApiClient.escapeString(workgroupId.toString()))
            .replace("{" + "project_id" + "}", localVarApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*",
            "application/json",
            "application/x-json-smile",
            "application/x-yaml",
            "application/xml",
            "text/csv",
            "text/x-yaml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFilesValidateBeforeCall(String workgroupId, String projectId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workgroupId' is set
        if (workgroupId == null) {
            throw new ApiException("Missing the required parameter 'workgroupId' when calling getFiles(Async)");
        }

        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling getFiles(Async)");
        }

        return getFilesCall(workgroupId, projectId, _callback);

    }

    /**
     * List Files from Project.  Works for Regular and Remote Files
     * List Files from Project.  Works for Regular and Remote Files
     * @param workgroupId  (required)
     * @param projectId  (required)
     * @return FileResponseVO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful retrieval </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public FileResponseVO getFiles(String workgroupId, String projectId) throws ApiException {
        ApiResponse<FileResponseVO> localVarResp = getFilesWithHttpInfo(workgroupId, projectId);
        return localVarResp.getData();
    }

    /**
     * List Files from Project.  Works for Regular and Remote Files
     * List Files from Project.  Works for Regular and Remote Files
     * @param workgroupId  (required)
     * @param projectId  (required)
     * @return ApiResponse&lt;FileResponseVO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful retrieval </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FileResponseVO> getFilesWithHttpInfo(String workgroupId, String projectId) throws ApiException {
        okhttp3.Call localVarCall = getFilesValidateBeforeCall(workgroupId, projectId, null);
        Type localVarReturnType = new TypeToken<FileResponseVO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Files from Project.  Works for Regular and Remote Files (asynchronously)
     * List Files from Project.  Works for Regular and Remote Files
     * @param workgroupId  (required)
     * @param projectId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful retrieval </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFilesAsync(String workgroupId, String projectId, final ApiCallback<FileResponseVO> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFilesValidateBeforeCall(workgroupId, projectId, _callback);
        Type localVarReturnType = new TypeToken<FileResponseVO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for uploadFile
     * @param workgroupId  (required)
     * @param projectId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful retrieval </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call uploadFileCall(String workgroupId, String projectId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/1.1/workgroups/{workgroup_id}/projects/{project_id}/files"
            .replace("{" + "workgroup_id" + "}", localVarApiClient.escapeString(workgroupId.toString()))
            .replace("{" + "project_id" + "}", localVarApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*",
            "application/json",
            "application/x-json-smile",
            "application/x-yaml",
            "application/xml",
            "text/csv",
            "text/x-yaml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call uploadFileValidateBeforeCall(String workgroupId, String projectId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workgroupId' is set
        if (workgroupId == null) {
            throw new ApiException("Missing the required parameter 'workgroupId' when calling uploadFile(Async)");
        }

        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling uploadFile(Async)");
        }

        return uploadFileCall(workgroupId, projectId, _callback);

    }

    /**
     * Upload File to Project.  A multipart/form-data request with a name \&quot;file\&quot;
     * Upload File to Project.  A multipart/form-data request with a name \&quot;file\&quot;
     * @param workgroupId  (required)
     * @param projectId  (required)
     * @return FileResponseVO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful retrieval </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public FileResponseVO uploadFile(String workgroupId, String projectId) throws ApiException {
        ApiResponse<FileResponseVO> localVarResp = uploadFileWithHttpInfo(workgroupId, projectId);
        return localVarResp.getData();
    }

    /**
     * Upload File to Project.  A multipart/form-data request with a name \&quot;file\&quot;
     * Upload File to Project.  A multipart/form-data request with a name \&quot;file\&quot;
     * @param workgroupId  (required)
     * @param projectId  (required)
     * @return ApiResponse&lt;FileResponseVO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful retrieval </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FileResponseVO> uploadFileWithHttpInfo(String workgroupId, String projectId) throws ApiException {
        okhttp3.Call localVarCall = uploadFileValidateBeforeCall(workgroupId, projectId, null);
        Type localVarReturnType = new TypeToken<FileResponseVO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Upload File to Project.  A multipart/form-data request with a name \&quot;file\&quot; (asynchronously)
     * Upload File to Project.  A multipart/form-data request with a name \&quot;file\&quot;
     * @param workgroupId  (required)
     * @param projectId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful retrieval </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call uploadFileAsync(String workgroupId, String projectId, final ApiCallback<FileResponseVO> _callback) throws ApiException {

        okhttp3.Call localVarCall = uploadFileValidateBeforeCall(workgroupId, projectId, _callback);
        Type localVarReturnType = new TypeToken<FileResponseVO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
