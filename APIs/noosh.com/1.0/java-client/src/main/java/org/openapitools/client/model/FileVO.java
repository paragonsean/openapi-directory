/*
 * Noosh API application
 * Full description of Noosh API
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.TagVO;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Java type: com.noosh.nooshapi.vo.file.FileVO
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:59:23.742517-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class FileVO {
  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_DOWNLOAD_LINK = "download_link";
  @SerializedName(SERIALIZED_NAME_DOWNLOAD_LINK)
  private String downloadLink;

  public static final String SERIALIZED_NAME_FILE_ID = "file_id";
  @SerializedName(SERIALIZED_NAME_FILE_ID)
  private Long fileId;

  public static final String SERIALIZED_NAME_FILE_NAME = "file_name";
  @SerializedName(SERIALIZED_NAME_FILE_NAME)
  private String fileName;

  public static final String SERIALIZED_NAME_FILE_SIZE = "file_size";
  @SerializedName(SERIALIZED_NAME_FILE_SIZE)
  private Object fileSize = null;

  public static final String SERIALIZED_NAME_FILE_TYPE = "file_type";
  @SerializedName(SERIALIZED_NAME_FILE_TYPE)
  private String fileType;

  public static final String SERIALIZED_NAME_IS_REMOTE = "is_remote";
  @SerializedName(SERIALIZED_NAME_IS_REMOTE)
  private Boolean isRemote;

  public static final String SERIALIZED_NAME_MODIFIED_DATE = "modified_date";
  @SerializedName(SERIALIZED_NAME_MODIFIED_DATE)
  private String modifiedDate;

  public static final String SERIALIZED_NAME_TAG_LIST = "tagList";
  @SerializedName(SERIALIZED_NAME_TAG_LIST)
  private List<TagVO> tagList = new ArrayList<>();

  public static final String SERIALIZED_NAME_UPLOAD_DATE = "upload_date";
  @SerializedName(SERIALIZED_NAME_UPLOAD_DATE)
  private String uploadDate;

  public static final String SERIALIZED_NAME_UPLOADED_BY = "uploaded_by";
  @SerializedName(SERIALIZED_NAME_UPLOADED_BY)
  private String uploadedBy;

  public FileVO() {
  }

  public FileVO description(String description) {
    this.description = description;
    return this;
  }

  /**
   * 
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public FileVO downloadLink(String downloadLink) {
    this.downloadLink = downloadLink;
    return this;
  }

  /**
   * 
   * @return downloadLink
   */
  @javax.annotation.Nullable
  public String getDownloadLink() {
    return downloadLink;
  }

  public void setDownloadLink(String downloadLink) {
    this.downloadLink = downloadLink;
  }


  public FileVO fileId(Long fileId) {
    this.fileId = fileId;
    return this;
  }

  /**
   * 
   * @return fileId
   */
  @javax.annotation.Nullable
  public Long getFileId() {
    return fileId;
  }

  public void setFileId(Long fileId) {
    this.fileId = fileId;
  }


  public FileVO fileName(String fileName) {
    this.fileName = fileName;
    return this;
  }

  /**
   * 
   * @return fileName
   */
  @javax.annotation.Nullable
  public String getFileName() {
    return fileName;
  }

  public void setFileName(String fileName) {
    this.fileName = fileName;
  }


  public FileVO fileSize(Object fileSize) {
    this.fileSize = fileSize;
    return this;
  }

  /**
   * Java type: java.math.BigDecimal
   * @return fileSize
   */
  @javax.annotation.Nullable
  public Object getFileSize() {
    return fileSize;
  }

  public void setFileSize(Object fileSize) {
    this.fileSize = fileSize;
  }


  public FileVO fileType(String fileType) {
    this.fileType = fileType;
    return this;
  }

  /**
   * 
   * @return fileType
   */
  @javax.annotation.Nullable
  public String getFileType() {
    return fileType;
  }

  public void setFileType(String fileType) {
    this.fileType = fileType;
  }


  public FileVO isRemote(Boolean isRemote) {
    this.isRemote = isRemote;
    return this;
  }

  /**
   * 
   * @return isRemote
   */
  @javax.annotation.Nullable
  public Boolean getIsRemote() {
    return isRemote;
  }

  public void setIsRemote(Boolean isRemote) {
    this.isRemote = isRemote;
  }


  public FileVO modifiedDate(String modifiedDate) {
    this.modifiedDate = modifiedDate;
    return this;
  }

  /**
   * 
   * @return modifiedDate
   */
  @javax.annotation.Nullable
  public String getModifiedDate() {
    return modifiedDate;
  }

  public void setModifiedDate(String modifiedDate) {
    this.modifiedDate = modifiedDate;
  }


  public FileVO tagList(List<TagVO> tagList) {
    this.tagList = tagList;
    return this;
  }

  public FileVO addTagListItem(TagVO tagListItem) {
    if (this.tagList == null) {
      this.tagList = new ArrayList<>();
    }
    this.tagList.add(tagListItem);
    return this;
  }

  /**
   * 
   * @return tagList
   */
  @javax.annotation.Nullable
  public List<TagVO> getTagList() {
    return tagList;
  }

  public void setTagList(List<TagVO> tagList) {
    this.tagList = tagList;
  }


  public FileVO uploadDate(String uploadDate) {
    this.uploadDate = uploadDate;
    return this;
  }

  /**
   * 
   * @return uploadDate
   */
  @javax.annotation.Nullable
  public String getUploadDate() {
    return uploadDate;
  }

  public void setUploadDate(String uploadDate) {
    this.uploadDate = uploadDate;
  }


  public FileVO uploadedBy(String uploadedBy) {
    this.uploadedBy = uploadedBy;
    return this;
  }

  /**
   * 
   * @return uploadedBy
   */
  @javax.annotation.Nullable
  public String getUploadedBy() {
    return uploadedBy;
  }

  public void setUploadedBy(String uploadedBy) {
    this.uploadedBy = uploadedBy;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FileVO fileVO = (FileVO) o;
    return Objects.equals(this.description, fileVO.description) &&
        Objects.equals(this.downloadLink, fileVO.downloadLink) &&
        Objects.equals(this.fileId, fileVO.fileId) &&
        Objects.equals(this.fileName, fileVO.fileName) &&
        Objects.equals(this.fileSize, fileVO.fileSize) &&
        Objects.equals(this.fileType, fileVO.fileType) &&
        Objects.equals(this.isRemote, fileVO.isRemote) &&
        Objects.equals(this.modifiedDate, fileVO.modifiedDate) &&
        Objects.equals(this.tagList, fileVO.tagList) &&
        Objects.equals(this.uploadDate, fileVO.uploadDate) &&
        Objects.equals(this.uploadedBy, fileVO.uploadedBy);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, downloadLink, fileId, fileName, fileSize, fileType, isRemote, modifiedDate, tagList, uploadDate, uploadedBy);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FileVO {\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    downloadLink: ").append(toIndentedString(downloadLink)).append("\n");
    sb.append("    fileId: ").append(toIndentedString(fileId)).append("\n");
    sb.append("    fileName: ").append(toIndentedString(fileName)).append("\n");
    sb.append("    fileSize: ").append(toIndentedString(fileSize)).append("\n");
    sb.append("    fileType: ").append(toIndentedString(fileType)).append("\n");
    sb.append("    isRemote: ").append(toIndentedString(isRemote)).append("\n");
    sb.append("    modifiedDate: ").append(toIndentedString(modifiedDate)).append("\n");
    sb.append("    tagList: ").append(toIndentedString(tagList)).append("\n");
    sb.append("    uploadDate: ").append(toIndentedString(uploadDate)).append("\n");
    sb.append("    uploadedBy: ").append(toIndentedString(uploadedBy)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("description");
    openapiFields.add("download_link");
    openapiFields.add("file_id");
    openapiFields.add("file_name");
    openapiFields.add("file_size");
    openapiFields.add("file_type");
    openapiFields.add("is_remote");
    openapiFields.add("modified_date");
    openapiFields.add("tagList");
    openapiFields.add("upload_date");
    openapiFields.add("uploaded_by");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to FileVO
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!FileVO.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FileVO is not found in the empty JSON string", FileVO.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!FileVO.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `FileVO` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("download_link") != null && !jsonObj.get("download_link").isJsonNull()) && !jsonObj.get("download_link").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `download_link` to be a primitive type in the JSON string but got `%s`", jsonObj.get("download_link").toString()));
      }
      if ((jsonObj.get("file_name") != null && !jsonObj.get("file_name").isJsonNull()) && !jsonObj.get("file_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `file_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("file_name").toString()));
      }
      if ((jsonObj.get("file_type") != null && !jsonObj.get("file_type").isJsonNull()) && !jsonObj.get("file_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `file_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("file_type").toString()));
      }
      if ((jsonObj.get("modified_date") != null && !jsonObj.get("modified_date").isJsonNull()) && !jsonObj.get("modified_date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `modified_date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("modified_date").toString()));
      }
      if (jsonObj.get("tagList") != null && !jsonObj.get("tagList").isJsonNull()) {
        JsonArray jsonArraytagList = jsonObj.getAsJsonArray("tagList");
        if (jsonArraytagList != null) {
          // ensure the json data is an array
          if (!jsonObj.get("tagList").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `tagList` to be an array in the JSON string but got `%s`", jsonObj.get("tagList").toString()));
          }

          // validate the optional field `tagList` (array)
          for (int i = 0; i < jsonArraytagList.size(); i++) {
            TagVO.validateJsonElement(jsonArraytagList.get(i));
          };
        }
      }
      if ((jsonObj.get("upload_date") != null && !jsonObj.get("upload_date").isJsonNull()) && !jsonObj.get("upload_date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `upload_date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("upload_date").toString()));
      }
      if ((jsonObj.get("uploaded_by") != null && !jsonObj.get("uploaded_by").isJsonNull()) && !jsonObj.get("uploaded_by").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uploaded_by` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uploaded_by").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FileVO.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FileVO' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FileVO> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FileVO.class));

       return (TypeAdapter<T>) new TypeAdapter<FileVO>() {
           @Override
           public void write(JsonWriter out, FileVO value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FileVO read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of FileVO given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of FileVO
   * @throws IOException if the JSON string is invalid with respect to FileVO
   */
  public static FileVO fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FileVO.class);
  }

  /**
   * Convert an instance of FileVO to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

