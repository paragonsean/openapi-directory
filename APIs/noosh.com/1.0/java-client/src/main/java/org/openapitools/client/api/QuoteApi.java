/*
 * Noosh API application
 * Full description of Noosh API
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.HTTPStatusVO;
import org.openapitools.client.model.ObjectStateListVO;
import org.openapitools.client.model.QuoteExpandVO;
import org.openapitools.client.model.QuoteListVO;
import org.openapitools.client.model.QuoteOfWgLevelSimpleVO;
import org.openapitools.client.model.QuotePutPersistVO;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class QuoteApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public QuoteApi() {
        this(Configuration.getDefaultApiClient());
    }

    public QuoteApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getQuote
     * @param workgroupId  (required)
     * @param projectId  (required)
     * @param quoteId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful retrieval </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> There are not any result matching your search condition </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getQuoteCall(String workgroupId, String projectId, String quoteId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/workgroups/{workgroup_id}/projects/{project_id}/quotes/{quote_id}"
            .replace("{" + "workgroup_id" + "}", localVarApiClient.escapeString(workgroupId.toString()))
            .replace("{" + "project_id" + "}", localVarApiClient.escapeString(projectId.toString()))
            .replace("{" + "quote_id" + "}", localVarApiClient.escapeString(quoteId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*",
            "application/json",
            "application/x-json-smile",
            "application/x-yaml",
            "application/xml",
            "text/csv",
            "text/x-yaml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getQuoteValidateBeforeCall(String workgroupId, String projectId, String quoteId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workgroupId' is set
        if (workgroupId == null) {
            throw new ApiException("Missing the required parameter 'workgroupId' when calling getQuote(Async)");
        }

        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling getQuote(Async)");
        }

        // verify the required parameter 'quoteId' is set
        if (quoteId == null) {
            throw new ApiException("Missing the required parameter 'quoteId' when calling getQuote(Async)");
        }

        return getQuoteCall(workgroupId, projectId, quoteId, _callback);

    }

    /**
     * Get a specific quote of project
     * Get a specific quote of project
     * @param workgroupId  (required)
     * @param projectId  (required)
     * @param quoteId  (required)
     * @return QuoteExpandVO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful retrieval </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> There are not any result matching your search condition </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public QuoteExpandVO getQuote(String workgroupId, String projectId, String quoteId) throws ApiException {
        ApiResponse<QuoteExpandVO> localVarResp = getQuoteWithHttpInfo(workgroupId, projectId, quoteId);
        return localVarResp.getData();
    }

    /**
     * Get a specific quote of project
     * Get a specific quote of project
     * @param workgroupId  (required)
     * @param projectId  (required)
     * @param quoteId  (required)
     * @return ApiResponse&lt;QuoteExpandVO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful retrieval </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> There are not any result matching your search condition </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<QuoteExpandVO> getQuoteWithHttpInfo(String workgroupId, String projectId, String quoteId) throws ApiException {
        okhttp3.Call localVarCall = getQuoteValidateBeforeCall(workgroupId, projectId, quoteId, null);
        Type localVarReturnType = new TypeToken<QuoteExpandVO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a specific quote of project (asynchronously)
     * Get a specific quote of project
     * @param workgroupId  (required)
     * @param projectId  (required)
     * @param quoteId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful retrieval </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> There are not any result matching your search condition </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getQuoteAsync(String workgroupId, String projectId, String quoteId, final ApiCallback<QuoteExpandVO> _callback) throws ApiException {

        okhttp3.Call localVarCall = getQuoteValidateBeforeCall(workgroupId, projectId, quoteId, _callback);
        Type localVarReturnType = new TypeToken<QuoteExpandVO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getQuoteList
     * @param workgroupId  (required)
     * @param projectId  (required)
     * @param quoteStateIdCommaUseFiltersEqualLeftCurlyBracketDoubleQuoteQuoteStateIdDoubleQuoteColon111111RightCurlyBracket Quote Object State Id, use /workgroups/{workgroup_id}/quoteStates to get correct value (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful retrieval </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> There are not any result matching your search condition </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getQuoteListCall(String workgroupId, String projectId, String quoteStateIdCommaUseFiltersEqualLeftCurlyBracketDoubleQuoteQuoteStateIdDoubleQuoteColon111111RightCurlyBracket, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/workgroups/{workgroup_id}/projects/{project_id}/quotes"
            .replace("{" + "workgroup_id" + "}", localVarApiClient.escapeString(workgroupId.toString()))
            .replace("{" + "project_id" + "}", localVarApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (quoteStateIdCommaUseFiltersEqualLeftCurlyBracketDoubleQuoteQuoteStateIdDoubleQuoteColon111111RightCurlyBracket != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("quote_state_id, use filters&#x3D;{&quot;quote_state_id&quot;:111111}", quoteStateIdCommaUseFiltersEqualLeftCurlyBracketDoubleQuoteQuoteStateIdDoubleQuoteColon111111RightCurlyBracket));
        }

        final String[] localVarAccepts = {
            "*/*",
            "application/json",
            "application/x-json-smile",
            "application/x-yaml",
            "application/xml",
            "text/csv",
            "text/x-yaml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getQuoteListValidateBeforeCall(String workgroupId, String projectId, String quoteStateIdCommaUseFiltersEqualLeftCurlyBracketDoubleQuoteQuoteStateIdDoubleQuoteColon111111RightCurlyBracket, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workgroupId' is set
        if (workgroupId == null) {
            throw new ApiException("Missing the required parameter 'workgroupId' when calling getQuoteList(Async)");
        }

        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling getQuoteList(Async)");
        }

        return getQuoteListCall(workgroupId, projectId, quoteStateIdCommaUseFiltersEqualLeftCurlyBracketDoubleQuoteQuoteStateIdDoubleQuoteColon111111RightCurlyBracket, _callback);

    }

    /**
     * List the quotes
     * List the quotes
     * @param workgroupId  (required)
     * @param projectId  (required)
     * @param quoteStateIdCommaUseFiltersEqualLeftCurlyBracketDoubleQuoteQuoteStateIdDoubleQuoteColon111111RightCurlyBracket Quote Object State Id, use /workgroups/{workgroup_id}/quoteStates to get correct value (optional)
     * @return QuoteListVO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful retrieval </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> There are not any result matching your search condition </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public QuoteListVO getQuoteList(String workgroupId, String projectId, String quoteStateIdCommaUseFiltersEqualLeftCurlyBracketDoubleQuoteQuoteStateIdDoubleQuoteColon111111RightCurlyBracket) throws ApiException {
        ApiResponse<QuoteListVO> localVarResp = getQuoteListWithHttpInfo(workgroupId, projectId, quoteStateIdCommaUseFiltersEqualLeftCurlyBracketDoubleQuoteQuoteStateIdDoubleQuoteColon111111RightCurlyBracket);
        return localVarResp.getData();
    }

    /**
     * List the quotes
     * List the quotes
     * @param workgroupId  (required)
     * @param projectId  (required)
     * @param quoteStateIdCommaUseFiltersEqualLeftCurlyBracketDoubleQuoteQuoteStateIdDoubleQuoteColon111111RightCurlyBracket Quote Object State Id, use /workgroups/{workgroup_id}/quoteStates to get correct value (optional)
     * @return ApiResponse&lt;QuoteListVO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful retrieval </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> There are not any result matching your search condition </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<QuoteListVO> getQuoteListWithHttpInfo(String workgroupId, String projectId, String quoteStateIdCommaUseFiltersEqualLeftCurlyBracketDoubleQuoteQuoteStateIdDoubleQuoteColon111111RightCurlyBracket) throws ApiException {
        okhttp3.Call localVarCall = getQuoteListValidateBeforeCall(workgroupId, projectId, quoteStateIdCommaUseFiltersEqualLeftCurlyBracketDoubleQuoteQuoteStateIdDoubleQuoteColon111111RightCurlyBracket, null);
        Type localVarReturnType = new TypeToken<QuoteListVO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List the quotes (asynchronously)
     * List the quotes
     * @param workgroupId  (required)
     * @param projectId  (required)
     * @param quoteStateIdCommaUseFiltersEqualLeftCurlyBracketDoubleQuoteQuoteStateIdDoubleQuoteColon111111RightCurlyBracket Quote Object State Id, use /workgroups/{workgroup_id}/quoteStates to get correct value (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful retrieval </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> There are not any result matching your search condition </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getQuoteListAsync(String workgroupId, String projectId, String quoteStateIdCommaUseFiltersEqualLeftCurlyBracketDoubleQuoteQuoteStateIdDoubleQuoteColon111111RightCurlyBracket, final ApiCallback<QuoteListVO> _callback) throws ApiException {

        okhttp3.Call localVarCall = getQuoteListValidateBeforeCall(workgroupId, projectId, quoteStateIdCommaUseFiltersEqualLeftCurlyBracketDoubleQuoteQuoteStateIdDoubleQuoteColon111111RightCurlyBracket, _callback);
        Type localVarReturnType = new TypeToken<QuoteListVO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getQuoteStateList
     * @param workgroupId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful retrieval </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> There are not any result matching your search condition </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getQuoteStateListCall(String workgroupId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/workgroups/{workgroup_id}/quoteStates"
            .replace("{" + "workgroup_id" + "}", localVarApiClient.escapeString(workgroupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*",
            "application/json",
            "application/x-json-smile",
            "application/x-yaml",
            "application/xml",
            "text/csv",
            "text/x-yaml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getQuoteStateListValidateBeforeCall(String workgroupId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workgroupId' is set
        if (workgroupId == null) {
            throw new ApiException("Missing the required parameter 'workgroupId' when calling getQuoteStateList(Async)");
        }

        return getQuoteStateListCall(workgroupId, _callback);

    }

    /**
     * List the quote states
     * List the quote states
     * @param workgroupId  (required)
     * @return ObjectStateListVO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful retrieval </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> There are not any result matching your search condition </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ObjectStateListVO getQuoteStateList(String workgroupId) throws ApiException {
        ApiResponse<ObjectStateListVO> localVarResp = getQuoteStateListWithHttpInfo(workgroupId);
        return localVarResp.getData();
    }

    /**
     * List the quote states
     * List the quote states
     * @param workgroupId  (required)
     * @return ApiResponse&lt;ObjectStateListVO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful retrieval </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> There are not any result matching your search condition </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ObjectStateListVO> getQuoteStateListWithHttpInfo(String workgroupId) throws ApiException {
        okhttp3.Call localVarCall = getQuoteStateListValidateBeforeCall(workgroupId, null);
        Type localVarReturnType = new TypeToken<ObjectStateListVO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List the quote states (asynchronously)
     * List the quote states
     * @param workgroupId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful retrieval </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> There are not any result matching your search condition </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getQuoteStateListAsync(String workgroupId, final ApiCallback<ObjectStateListVO> _callback) throws ApiException {

        okhttp3.Call localVarCall = getQuoteStateListValidateBeforeCall(workgroupId, _callback);
        Type localVarReturnType = new TypeToken<ObjectStateListVO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for putQuote
     * @param workgroupId  (required)
     * @param projectId  (required)
     * @param quoteId  (required)
     * @param quotePutPersistVO  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful updated </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Invalid data </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putQuoteCall(String workgroupId, String projectId, String quoteId, QuotePutPersistVO quotePutPersistVO, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = quotePutPersistVO;

        // create path and map variables
        String localVarPath = "/v1/workgroups/{workgroup_id}/projects/{project_id}/quotes/{quote_id}"
            .replace("{" + "workgroup_id" + "}", localVarApiClient.escapeString(workgroupId.toString()))
            .replace("{" + "project_id" + "}", localVarApiClient.escapeString(projectId.toString()))
            .replace("{" + "quote_id" + "}", localVarApiClient.escapeString(quoteId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*",
            "application/json",
            "application/x-json-smile",
            "application/x-yaml",
            "application/xml",
            "text/csv",
            "text/x-yaml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-json-smile",
            "application/x-yaml",
            "application/xml",
            "text/csv",
            "text/x-yaml",
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putQuoteValidateBeforeCall(String workgroupId, String projectId, String quoteId, QuotePutPersistVO quotePutPersistVO, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workgroupId' is set
        if (workgroupId == null) {
            throw new ApiException("Missing the required parameter 'workgroupId' when calling putQuote(Async)");
        }

        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling putQuote(Async)");
        }

        // verify the required parameter 'quoteId' is set
        if (quoteId == null) {
            throw new ApiException("Missing the required parameter 'quoteId' when calling putQuote(Async)");
        }

        return putQuoteCall(workgroupId, projectId, quoteId, quotePutPersistVO, _callback);

    }

    /**
     * Accept / Reject a Quote
     * Accept / Reject a Quote
     * @param workgroupId  (required)
     * @param projectId  (required)
     * @param quoteId  (required)
     * @param quotePutPersistVO  (optional)
     * @return HTTPStatusVO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful updated </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Invalid data </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public HTTPStatusVO putQuote(String workgroupId, String projectId, String quoteId, QuotePutPersistVO quotePutPersistVO) throws ApiException {
        ApiResponse<HTTPStatusVO> localVarResp = putQuoteWithHttpInfo(workgroupId, projectId, quoteId, quotePutPersistVO);
        return localVarResp.getData();
    }

    /**
     * Accept / Reject a Quote
     * Accept / Reject a Quote
     * @param workgroupId  (required)
     * @param projectId  (required)
     * @param quoteId  (required)
     * @param quotePutPersistVO  (optional)
     * @return ApiResponse&lt;HTTPStatusVO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful updated </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Invalid data </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<HTTPStatusVO> putQuoteWithHttpInfo(String workgroupId, String projectId, String quoteId, QuotePutPersistVO quotePutPersistVO) throws ApiException {
        okhttp3.Call localVarCall = putQuoteValidateBeforeCall(workgroupId, projectId, quoteId, quotePutPersistVO, null);
        Type localVarReturnType = new TypeToken<HTTPStatusVO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Accept / Reject a Quote (asynchronously)
     * Accept / Reject a Quote
     * @param workgroupId  (required)
     * @param projectId  (required)
     * @param quoteId  (required)
     * @param quotePutPersistVO  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful updated </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Invalid data </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putQuoteAsync(String workgroupId, String projectId, String quoteId, QuotePutPersistVO quotePutPersistVO, final ApiCallback<HTTPStatusVO> _callback) throws ApiException {

        okhttp3.Call localVarCall = putQuoteValidateBeforeCall(workgroupId, projectId, quoteId, quotePutPersistVO, _callback);
        Type localVarReturnType = new TypeToken<HTTPStatusVO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1WorkgroupsWorkgroupIdQuotesGet
     * @param workgroupId  (required)
     * @param quoteStateIdCommaUseFiltersEqualLeftCurlyBracketDoubleQuoteQuoteStateIdDoubleQuoteColon111111RightCurlyBracket Quote Object State Id, use /workgroups/{workgroup_id}/quoteStates to get correct value (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful retrieval </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> There are not any result matching your search condition </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1WorkgroupsWorkgroupIdQuotesGetCall(String workgroupId, String quoteStateIdCommaUseFiltersEqualLeftCurlyBracketDoubleQuoteQuoteStateIdDoubleQuoteColon111111RightCurlyBracket, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/workgroups/{workgroup_id}/quotes"
            .replace("{" + "workgroup_id" + "}", localVarApiClient.escapeString(workgroupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (quoteStateIdCommaUseFiltersEqualLeftCurlyBracketDoubleQuoteQuoteStateIdDoubleQuoteColon111111RightCurlyBracket != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("quote_state_id, use filters&#x3D;{&quot;quote_state_id&quot;:111111}", quoteStateIdCommaUseFiltersEqualLeftCurlyBracketDoubleQuoteQuoteStateIdDoubleQuoteColon111111RightCurlyBracket));
        }

        final String[] localVarAccepts = {
            "*/*",
            "application/json",
            "application/x-json-smile",
            "application/x-yaml",
            "application/xml",
            "text/csv",
            "text/x-yaml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1WorkgroupsWorkgroupIdQuotesGetValidateBeforeCall(String workgroupId, String quoteStateIdCommaUseFiltersEqualLeftCurlyBracketDoubleQuoteQuoteStateIdDoubleQuoteColon111111RightCurlyBracket, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workgroupId' is set
        if (workgroupId == null) {
            throw new ApiException("Missing the required parameter 'workgroupId' when calling v1WorkgroupsWorkgroupIdQuotesGet(Async)");
        }

        return v1WorkgroupsWorkgroupIdQuotesGetCall(workgroupId, quoteStateIdCommaUseFiltersEqualLeftCurlyBracketDoubleQuoteQuoteStateIdDoubleQuoteColon111111RightCurlyBracket, _callback);

    }

    /**
     * List the quotes of workgroup level
     * List the quotes of workgroup level
     * @param workgroupId  (required)
     * @param quoteStateIdCommaUseFiltersEqualLeftCurlyBracketDoubleQuoteQuoteStateIdDoubleQuoteColon111111RightCurlyBracket Quote Object State Id, use /workgroups/{workgroup_id}/quoteStates to get correct value (optional)
     * @return QuoteOfWgLevelSimpleVO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful retrieval </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> There are not any result matching your search condition </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public QuoteOfWgLevelSimpleVO v1WorkgroupsWorkgroupIdQuotesGet(String workgroupId, String quoteStateIdCommaUseFiltersEqualLeftCurlyBracketDoubleQuoteQuoteStateIdDoubleQuoteColon111111RightCurlyBracket) throws ApiException {
        ApiResponse<QuoteOfWgLevelSimpleVO> localVarResp = v1WorkgroupsWorkgroupIdQuotesGetWithHttpInfo(workgroupId, quoteStateIdCommaUseFiltersEqualLeftCurlyBracketDoubleQuoteQuoteStateIdDoubleQuoteColon111111RightCurlyBracket);
        return localVarResp.getData();
    }

    /**
     * List the quotes of workgroup level
     * List the quotes of workgroup level
     * @param workgroupId  (required)
     * @param quoteStateIdCommaUseFiltersEqualLeftCurlyBracketDoubleQuoteQuoteStateIdDoubleQuoteColon111111RightCurlyBracket Quote Object State Id, use /workgroups/{workgroup_id}/quoteStates to get correct value (optional)
     * @return ApiResponse&lt;QuoteOfWgLevelSimpleVO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful retrieval </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> There are not any result matching your search condition </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<QuoteOfWgLevelSimpleVO> v1WorkgroupsWorkgroupIdQuotesGetWithHttpInfo(String workgroupId, String quoteStateIdCommaUseFiltersEqualLeftCurlyBracketDoubleQuoteQuoteStateIdDoubleQuoteColon111111RightCurlyBracket) throws ApiException {
        okhttp3.Call localVarCall = v1WorkgroupsWorkgroupIdQuotesGetValidateBeforeCall(workgroupId, quoteStateIdCommaUseFiltersEqualLeftCurlyBracketDoubleQuoteQuoteStateIdDoubleQuoteColon111111RightCurlyBracket, null);
        Type localVarReturnType = new TypeToken<QuoteOfWgLevelSimpleVO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List the quotes of workgroup level (asynchronously)
     * List the quotes of workgroup level
     * @param workgroupId  (required)
     * @param quoteStateIdCommaUseFiltersEqualLeftCurlyBracketDoubleQuoteQuoteStateIdDoubleQuoteColon111111RightCurlyBracket Quote Object State Id, use /workgroups/{workgroup_id}/quoteStates to get correct value (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful retrieval </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> There are not any result matching your search condition </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1WorkgroupsWorkgroupIdQuotesGetAsync(String workgroupId, String quoteStateIdCommaUseFiltersEqualLeftCurlyBracketDoubleQuoteQuoteStateIdDoubleQuoteColon111111RightCurlyBracket, final ApiCallback<QuoteOfWgLevelSimpleVO> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1WorkgroupsWorkgroupIdQuotesGetValidateBeforeCall(workgroupId, quoteStateIdCommaUseFiltersEqualLeftCurlyBracketDoubleQuoteQuoteStateIdDoubleQuoteColon111111RightCurlyBracket, _callback);
        Type localVarReturnType = new TypeToken<QuoteOfWgLevelSimpleVO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
