/*
 * Noosh API application
 * Full description of Noosh API
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.HTTPStatusVO;
import org.openapitools.client.model.PropertyParamListVO;
import org.openapitools.client.model.SpecHTTPStatusVO;
import org.openapitools.client.model.SpecListVO;
import org.openapitools.client.model.SpecPersistVO;
import org.openapitools.client.model.SpecTypeFieldsListVO;
import org.openapitools.client.model.SpecUpdatePersistVO;
import org.openapitools.client.model.SpecVO;
import org.openapitools.client.model.V1X1SpecUpdatingPO;
import org.openapitools.client.model.V1x1SpecExpandVO;
import org.openapitools.client.model.WgSpecPrdTypeRegPersistVO;
import org.openapitools.client.model.WorkgroupAttributeListVO;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SpecApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public SpecApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SpecApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getProductTypeListOfWorkgroup
     * @param workgroupId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful retrieval </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> There are not any result matching your search condition </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProductTypeListOfWorkgroupCall(String workgroupId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/workgroups/{workgroup_id}/productTypes"
            .replace("{" + "workgroup_id" + "}", localVarApiClient.escapeString(workgroupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*",
            "application/json",
            "application/x-json-smile",
            "application/x-yaml",
            "application/xml",
            "text/csv",
            "text/x-yaml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getProductTypeListOfWorkgroupValidateBeforeCall(String workgroupId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workgroupId' is set
        if (workgroupId == null) {
            throw new ApiException("Missing the required parameter 'workgroupId' when calling getProductTypeListOfWorkgroup(Async)");
        }

        return getProductTypeListOfWorkgroupCall(workgroupId, _callback);

    }

    /**
     * Get product type of workgroup level
     * Get product type of workgroup level
     * @param workgroupId  (required)
     * @return WorkgroupAttributeListVO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful retrieval </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> There are not any result matching your search condition </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public WorkgroupAttributeListVO getProductTypeListOfWorkgroup(String workgroupId) throws ApiException {
        ApiResponse<WorkgroupAttributeListVO> localVarResp = getProductTypeListOfWorkgroupWithHttpInfo(workgroupId);
        return localVarResp.getData();
    }

    /**
     * Get product type of workgroup level
     * Get product type of workgroup level
     * @param workgroupId  (required)
     * @return ApiResponse&lt;WorkgroupAttributeListVO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful retrieval </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> There are not any result matching your search condition </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WorkgroupAttributeListVO> getProductTypeListOfWorkgroupWithHttpInfo(String workgroupId) throws ApiException {
        okhttp3.Call localVarCall = getProductTypeListOfWorkgroupValidateBeforeCall(workgroupId, null);
        Type localVarReturnType = new TypeToken<WorkgroupAttributeListVO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get product type of workgroup level (asynchronously)
     * Get product type of workgroup level
     * @param workgroupId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful retrieval </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> There are not any result matching your search condition </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getProductTypeListOfWorkgroupAsync(String workgroupId, final ApiCallback<WorkgroupAttributeListVO> _callback) throws ApiException {

        okhttp3.Call localVarCall = getProductTypeListOfWorkgroupValidateBeforeCall(workgroupId, _callback);
        Type localVarReturnType = new TypeToken<WorkgroupAttributeListVO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSpec
     * @param workgroupId  (required)
     * @param projectId  (required)
     * @param specId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful retrieval </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> There are not any result matching your search condition </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSpecCall(String workgroupId, String projectId, String specId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/1.1/workgroups/{workgroup_id}/projects/{project_id}/specs/{spec_id}"
            .replace("{" + "workgroup_id" + "}", localVarApiClient.escapeString(workgroupId.toString()))
            .replace("{" + "project_id" + "}", localVarApiClient.escapeString(projectId.toString()))
            .replace("{" + "spec_id" + "}", localVarApiClient.escapeString(specId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*",
            "application/json",
            "application/x-json-smile",
            "application/x-yaml",
            "application/xml",
            "text/csv",
            "text/x-yaml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSpecValidateBeforeCall(String workgroupId, String projectId, String specId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workgroupId' is set
        if (workgroupId == null) {
            throw new ApiException("Missing the required parameter 'workgroupId' when calling getSpec(Async)");
        }

        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling getSpec(Async)");
        }

        // verify the required parameter 'specId' is set
        if (specId == null) {
            throw new ApiException("Missing the required parameter 'specId' when calling getSpec(Async)");
        }

        return getSpecCall(workgroupId, projectId, specId, _callback);

    }

    /**
     * List a specific spec of project Level
     * List a specific spec of project Level
     * @param workgroupId  (required)
     * @param projectId  (required)
     * @param specId  (required)
     * @return V1x1SpecExpandVO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful retrieval </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> There are not any result matching your search condition </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public V1x1SpecExpandVO getSpec(String workgroupId, String projectId, String specId) throws ApiException {
        ApiResponse<V1x1SpecExpandVO> localVarResp = getSpecWithHttpInfo(workgroupId, projectId, specId);
        return localVarResp.getData();
    }

    /**
     * List a specific spec of project Level
     * List a specific spec of project Level
     * @param workgroupId  (required)
     * @param projectId  (required)
     * @param specId  (required)
     * @return ApiResponse&lt;V1x1SpecExpandVO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful retrieval </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> There are not any result matching your search condition </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<V1x1SpecExpandVO> getSpecWithHttpInfo(String workgroupId, String projectId, String specId) throws ApiException {
        okhttp3.Call localVarCall = getSpecValidateBeforeCall(workgroupId, projectId, specId, null);
        Type localVarReturnType = new TypeToken<V1x1SpecExpandVO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List a specific spec of project Level (asynchronously)
     * List a specific spec of project Level
     * @param workgroupId  (required)
     * @param projectId  (required)
     * @param specId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful retrieval </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> There are not any result matching your search condition </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSpecAsync(String workgroupId, String projectId, String specId, final ApiCallback<V1x1SpecExpandVO> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSpecValidateBeforeCall(workgroupId, projectId, specId, _callback);
        Type localVarReturnType = new TypeToken<V1x1SpecExpandVO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSpecList
     * @param workgroupId  (required)
     * @param projectId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful retrieval </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> There are not any result matching your search condition </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSpecListCall(String workgroupId, String projectId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/workgroups/{workgroup_id}/projects/{project_id}/specs"
            .replace("{" + "workgroup_id" + "}", localVarApiClient.escapeString(workgroupId.toString()))
            .replace("{" + "project_id" + "}", localVarApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*",
            "application/json",
            "application/x-json-smile",
            "application/x-yaml",
            "application/xml",
            "text/csv",
            "text/x-yaml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSpecListValidateBeforeCall(String workgroupId, String projectId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workgroupId' is set
        if (workgroupId == null) {
            throw new ApiException("Missing the required parameter 'workgroupId' when calling getSpecList(Async)");
        }

        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling getSpecList(Async)");
        }

        return getSpecListCall(workgroupId, projectId, _callback);

    }

    /**
     * List specs of project Level
     * List specs of project Level
     * @param workgroupId  (required)
     * @param projectId  (required)
     * @return SpecListVO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful retrieval </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> There are not any result matching your search condition </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public SpecListVO getSpecList(String workgroupId, String projectId) throws ApiException {
        ApiResponse<SpecListVO> localVarResp = getSpecListWithHttpInfo(workgroupId, projectId);
        return localVarResp.getData();
    }

    /**
     * List specs of project Level
     * List specs of project Level
     * @param workgroupId  (required)
     * @param projectId  (required)
     * @return ApiResponse&lt;SpecListVO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful retrieval </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> There are not any result matching your search condition </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SpecListVO> getSpecListWithHttpInfo(String workgroupId, String projectId) throws ApiException {
        okhttp3.Call localVarCall = getSpecListValidateBeforeCall(workgroupId, projectId, null);
        Type localVarReturnType = new TypeToken<SpecListVO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List specs of project Level (asynchronously)
     * List specs of project Level
     * @param workgroupId  (required)
     * @param projectId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful retrieval </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> There are not any result matching your search condition </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSpecListAsync(String workgroupId, String projectId, final ApiCallback<SpecListVO> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSpecListValidateBeforeCall(workgroupId, projectId, _callback);
        Type localVarReturnType = new TypeToken<SpecListVO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSpecProductTypeListOfWorkgroup
     * @param workgroupId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful retrieval </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> There are not any result matching your search condition </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSpecProductTypeListOfWorkgroupCall(String workgroupId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/workgroups/{workgroup_id}/productTypesOfSpecTypes"
            .replace("{" + "workgroup_id" + "}", localVarApiClient.escapeString(workgroupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*",
            "application/json",
            "application/x-json-smile",
            "application/x-yaml",
            "application/xml",
            "text/csv",
            "text/x-yaml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSpecProductTypeListOfWorkgroupValidateBeforeCall(String workgroupId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workgroupId' is set
        if (workgroupId == null) {
            throw new ApiException("Missing the required parameter 'workgroupId' when calling getSpecProductTypeListOfWorkgroup(Async)");
        }

        return getSpecProductTypeListOfWorkgroupCall(workgroupId, _callback);

    }

    /**
     * Get product type of spec level by workgroupId
     * Get product type of spec level by workgroupId
     * @param workgroupId  (required)
     * @return WorkgroupAttributeListVO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful retrieval </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> There are not any result matching your search condition </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public WorkgroupAttributeListVO getSpecProductTypeListOfWorkgroup(String workgroupId) throws ApiException {
        ApiResponse<WorkgroupAttributeListVO> localVarResp = getSpecProductTypeListOfWorkgroupWithHttpInfo(workgroupId);
        return localVarResp.getData();
    }

    /**
     * Get product type of spec level by workgroupId
     * Get product type of spec level by workgroupId
     * @param workgroupId  (required)
     * @return ApiResponse&lt;WorkgroupAttributeListVO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful retrieval </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> There are not any result matching your search condition </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WorkgroupAttributeListVO> getSpecProductTypeListOfWorkgroupWithHttpInfo(String workgroupId) throws ApiException {
        okhttp3.Call localVarCall = getSpecProductTypeListOfWorkgroupValidateBeforeCall(workgroupId, null);
        Type localVarReturnType = new TypeToken<WorkgroupAttributeListVO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get product type of spec level by workgroupId (asynchronously)
     * Get product type of spec level by workgroupId
     * @param workgroupId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful retrieval </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> There are not any result matching your search condition </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSpecProductTypeListOfWorkgroupAsync(String workgroupId, final ApiCallback<WorkgroupAttributeListVO> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSpecProductTypeListOfWorkgroupValidateBeforeCall(workgroupId, _callback);
        Type localVarReturnType = new TypeToken<WorkgroupAttributeListVO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSpecTypeFields
     * @param workgroupId  (required)
     * @param specTypeId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful retrieval </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> There are not any result matching your search condition </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSpecTypeFieldsCall(String workgroupId, String specTypeId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/1.1/workgroups/{workgroup_id}/specTypes/{spec_type_id}/specTypeFields"
            .replace("{" + "workgroup_id" + "}", localVarApiClient.escapeString(workgroupId.toString()))
            .replace("{" + "spec_type_id" + "}", localVarApiClient.escapeString(specTypeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*",
            "application/json",
            "application/x-json-smile",
            "application/x-yaml",
            "application/xml",
            "text/csv",
            "text/x-yaml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSpecTypeFieldsValidateBeforeCall(String workgroupId, String specTypeId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workgroupId' is set
        if (workgroupId == null) {
            throw new ApiException("Missing the required parameter 'workgroupId' when calling getSpecTypeFields(Async)");
        }

        // verify the required parameter 'specTypeId' is set
        if (specTypeId == null) {
            throw new ApiException("Missing the required parameter 'specTypeId' when calling getSpecTypeFields(Async)");
        }

        return getSpecTypeFieldsCall(workgroupId, specTypeId, _callback);

    }

    /**
     * Get Spec Type Fields
     * Get Spec Type Fields
     * @param workgroupId  (required)
     * @param specTypeId  (required)
     * @return SpecTypeFieldsListVO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful retrieval </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> There are not any result matching your search condition </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public SpecTypeFieldsListVO getSpecTypeFields(String workgroupId, String specTypeId) throws ApiException {
        ApiResponse<SpecTypeFieldsListVO> localVarResp = getSpecTypeFieldsWithHttpInfo(workgroupId, specTypeId);
        return localVarResp.getData();
    }

    /**
     * Get Spec Type Fields
     * Get Spec Type Fields
     * @param workgroupId  (required)
     * @param specTypeId  (required)
     * @return ApiResponse&lt;SpecTypeFieldsListVO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful retrieval </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> There are not any result matching your search condition </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SpecTypeFieldsListVO> getSpecTypeFieldsWithHttpInfo(String workgroupId, String specTypeId) throws ApiException {
        okhttp3.Call localVarCall = getSpecTypeFieldsValidateBeforeCall(workgroupId, specTypeId, null);
        Type localVarReturnType = new TypeToken<SpecTypeFieldsListVO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Spec Type Fields (asynchronously)
     * Get Spec Type Fields
     * @param workgroupId  (required)
     * @param specTypeId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful retrieval </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> There are not any result matching your search condition </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSpecTypeFieldsAsync(String workgroupId, String specTypeId, final ApiCallback<SpecTypeFieldsListVO> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSpecTypeFieldsValidateBeforeCall(workgroupId, specTypeId, _callback);
        Type localVarReturnType = new TypeToken<SpecTypeFieldsListVO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postSpec
     * @param workgroupId  (required)
     * @param projectId  (required)
     * @param specPersistVO  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful created </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Invalid data </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postSpecCall(String workgroupId, String projectId, SpecPersistVO specPersistVO, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = specPersistVO;

        // create path and map variables
        String localVarPath = "/v1/workgroups/{workgroup_id}/projects/{project_id}/specs"
            .replace("{" + "workgroup_id" + "}", localVarApiClient.escapeString(workgroupId.toString()))
            .replace("{" + "project_id" + "}", localVarApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*",
            "application/json",
            "application/x-json-smile",
            "application/x-yaml",
            "application/xml",
            "text/csv",
            "text/x-yaml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-json-smile",
            "application/x-yaml",
            "application/xml",
            "text/csv",
            "text/x-yaml",
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postSpecValidateBeforeCall(String workgroupId, String projectId, SpecPersistVO specPersistVO, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workgroupId' is set
        if (workgroupId == null) {
            throw new ApiException("Missing the required parameter 'workgroupId' when calling postSpec(Async)");
        }

        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling postSpec(Async)");
        }

        return postSpecCall(workgroupId, projectId, specPersistVO, _callback);

    }

    /**
     * Create a Spec
     * Create a Spec
     * @param workgroupId  (required)
     * @param projectId  (required)
     * @param specPersistVO  (optional)
     * @return SpecVO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful created </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Invalid data </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public SpecVO postSpec(String workgroupId, String projectId, SpecPersistVO specPersistVO) throws ApiException {
        ApiResponse<SpecVO> localVarResp = postSpecWithHttpInfo(workgroupId, projectId, specPersistVO);
        return localVarResp.getData();
    }

    /**
     * Create a Spec
     * Create a Spec
     * @param workgroupId  (required)
     * @param projectId  (required)
     * @param specPersistVO  (optional)
     * @return ApiResponse&lt;SpecVO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful created </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Invalid data </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SpecVO> postSpecWithHttpInfo(String workgroupId, String projectId, SpecPersistVO specPersistVO) throws ApiException {
        okhttp3.Call localVarCall = postSpecValidateBeforeCall(workgroupId, projectId, specPersistVO, null);
        Type localVarReturnType = new TypeToken<SpecVO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a Spec (asynchronously)
     * Create a Spec
     * @param workgroupId  (required)
     * @param projectId  (required)
     * @param specPersistVO  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful created </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Invalid data </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postSpecAsync(String workgroupId, String projectId, SpecPersistVO specPersistVO, final ApiCallback<SpecVO> _callback) throws ApiException {

        okhttp3.Call localVarCall = postSpecValidateBeforeCall(workgroupId, projectId, specPersistVO, _callback);
        Type localVarReturnType = new TypeToken<SpecVO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postSpecProductTypeListOfWorkgroup
     * @param workgroupId  (required)
     * @param wgSpecPrdTypeRegPersistVO  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful created </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Invalid data </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postSpecProductTypeListOfWorkgroupCall(String workgroupId, WgSpecPrdTypeRegPersistVO wgSpecPrdTypeRegPersistVO, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = wgSpecPrdTypeRegPersistVO;

        // create path and map variables
        String localVarPath = "/v1/workgroups/{workgroup_id}/productTypesOfSpecTypes"
            .replace("{" + "workgroup_id" + "}", localVarApiClient.escapeString(workgroupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*",
            "application/json",
            "application/x-json-smile",
            "application/x-yaml",
            "application/xml",
            "text/csv",
            "text/x-yaml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-json-smile",
            "application/x-yaml",
            "application/xml",
            "text/csv",
            "text/x-yaml",
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postSpecProductTypeListOfWorkgroupValidateBeforeCall(String workgroupId, WgSpecPrdTypeRegPersistVO wgSpecPrdTypeRegPersistVO, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workgroupId' is set
        if (workgroupId == null) {
            throw new ApiException("Missing the required parameter 'workgroupId' when calling postSpecProductTypeListOfWorkgroup(Async)");
        }

        return postSpecProductTypeListOfWorkgroupCall(workgroupId, wgSpecPrdTypeRegPersistVO, _callback);

    }

    /**
     * Register product types for spec types
     * Register product types for spec types
     * @param workgroupId  (required)
     * @param wgSpecPrdTypeRegPersistVO  (optional)
     * @return WgSpecPrdTypeRegPersistVO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful created </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Invalid data </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public WgSpecPrdTypeRegPersistVO postSpecProductTypeListOfWorkgroup(String workgroupId, WgSpecPrdTypeRegPersistVO wgSpecPrdTypeRegPersistVO) throws ApiException {
        ApiResponse<WgSpecPrdTypeRegPersistVO> localVarResp = postSpecProductTypeListOfWorkgroupWithHttpInfo(workgroupId, wgSpecPrdTypeRegPersistVO);
        return localVarResp.getData();
    }

    /**
     * Register product types for spec types
     * Register product types for spec types
     * @param workgroupId  (required)
     * @param wgSpecPrdTypeRegPersistVO  (optional)
     * @return ApiResponse&lt;WgSpecPrdTypeRegPersistVO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful created </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Invalid data </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WgSpecPrdTypeRegPersistVO> postSpecProductTypeListOfWorkgroupWithHttpInfo(String workgroupId, WgSpecPrdTypeRegPersistVO wgSpecPrdTypeRegPersistVO) throws ApiException {
        okhttp3.Call localVarCall = postSpecProductTypeListOfWorkgroupValidateBeforeCall(workgroupId, wgSpecPrdTypeRegPersistVO, null);
        Type localVarReturnType = new TypeToken<WgSpecPrdTypeRegPersistVO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Register product types for spec types (asynchronously)
     * Register product types for spec types
     * @param workgroupId  (required)
     * @param wgSpecPrdTypeRegPersistVO  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful created </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Invalid data </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postSpecProductTypeListOfWorkgroupAsync(String workgroupId, WgSpecPrdTypeRegPersistVO wgSpecPrdTypeRegPersistVO, final ApiCallback<WgSpecPrdTypeRegPersistVO> _callback) throws ApiException {

        okhttp3.Call localVarCall = postSpecProductTypeListOfWorkgroupValidateBeforeCall(workgroupId, wgSpecPrdTypeRegPersistVO, _callback);
        Type localVarReturnType = new TypeToken<WgSpecPrdTypeRegPersistVO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for putSpec
     * @param workgroupId  (required)
     * @param projectId  (required)
     * @param specId  (required)
     * @param v1X1SpecUpdatingPO  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful updated </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> There are not any result matching your search condition </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putSpecCall(String workgroupId, String projectId, String specId, V1X1SpecUpdatingPO v1X1SpecUpdatingPO, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = v1X1SpecUpdatingPO;

        // create path and map variables
        String localVarPath = "/1.1/workgroups/{workgroup_id}/projects/{project_id}/specs/{spec_id}"
            .replace("{" + "workgroup_id" + "}", localVarApiClient.escapeString(workgroupId.toString()))
            .replace("{" + "project_id" + "}", localVarApiClient.escapeString(projectId.toString()))
            .replace("{" + "spec_id" + "}", localVarApiClient.escapeString(specId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*",
            "application/json",
            "application/x-json-smile",
            "application/x-yaml",
            "application/xml",
            "text/csv",
            "text/x-yaml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-json-smile",
            "application/x-yaml",
            "application/xml",
            "text/csv",
            "text/x-yaml",
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call putSpecValidateBeforeCall(String workgroupId, String projectId, String specId, V1X1SpecUpdatingPO v1X1SpecUpdatingPO, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workgroupId' is set
        if (workgroupId == null) {
            throw new ApiException("Missing the required parameter 'workgroupId' when calling putSpec(Async)");
        }

        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling putSpec(Async)");
        }

        // verify the required parameter 'specId' is set
        if (specId == null) {
            throw new ApiException("Missing the required parameter 'specId' when calling putSpec(Async)");
        }

        return putSpecCall(workgroupId, projectId, specId, v1X1SpecUpdatingPO, _callback);

    }

    /**
     * Update a specific Spec
     * Update a specific Spec
     * @param workgroupId  (required)
     * @param projectId  (required)
     * @param specId  (required)
     * @param v1X1SpecUpdatingPO  (optional)
     * @return SpecHTTPStatusVO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful updated </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> There are not any result matching your search condition </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public SpecHTTPStatusVO putSpec(String workgroupId, String projectId, String specId, V1X1SpecUpdatingPO v1X1SpecUpdatingPO) throws ApiException {
        ApiResponse<SpecHTTPStatusVO> localVarResp = putSpecWithHttpInfo(workgroupId, projectId, specId, v1X1SpecUpdatingPO);
        return localVarResp.getData();
    }

    /**
     * Update a specific Spec
     * Update a specific Spec
     * @param workgroupId  (required)
     * @param projectId  (required)
     * @param specId  (required)
     * @param v1X1SpecUpdatingPO  (optional)
     * @return ApiResponse&lt;SpecHTTPStatusVO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful updated </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> There are not any result matching your search condition </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SpecHTTPStatusVO> putSpecWithHttpInfo(String workgroupId, String projectId, String specId, V1X1SpecUpdatingPO v1X1SpecUpdatingPO) throws ApiException {
        okhttp3.Call localVarCall = putSpecValidateBeforeCall(workgroupId, projectId, specId, v1X1SpecUpdatingPO, null);
        Type localVarReturnType = new TypeToken<SpecHTTPStatusVO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a specific Spec (asynchronously)
     * Update a specific Spec
     * @param workgroupId  (required)
     * @param projectId  (required)
     * @param specId  (required)
     * @param v1X1SpecUpdatingPO  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful updated </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> There are not any result matching your search condition </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call putSpecAsync(String workgroupId, String projectId, String specId, V1X1SpecUpdatingPO v1X1SpecUpdatingPO, final ApiCallback<SpecHTTPStatusVO> _callback) throws ApiException {

        okhttp3.Call localVarCall = putSpecValidateBeforeCall(workgroupId, projectId, specId, v1X1SpecUpdatingPO, _callback);
        Type localVarReturnType = new TypeToken<SpecHTTPStatusVO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1WorkgroupsWorkgroupIdProjectsProjectIdSpecsSpecIdGet
     * @param workgroupId  (required)
     * @param projectId  (required)
     * @param specId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful retrieval </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> There are not any result matching your search condition </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1WorkgroupsWorkgroupIdProjectsProjectIdSpecsSpecIdGetCall(String workgroupId, String projectId, String specId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/workgroups/{workgroup_id}/projects/{project_id}/specs/{spec_id}"
            .replace("{" + "workgroup_id" + "}", localVarApiClient.escapeString(workgroupId.toString()))
            .replace("{" + "project_id" + "}", localVarApiClient.escapeString(projectId.toString()))
            .replace("{" + "spec_id" + "}", localVarApiClient.escapeString(specId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*",
            "application/json",
            "application/x-json-smile",
            "application/x-yaml",
            "application/xml",
            "text/csv",
            "text/x-yaml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1WorkgroupsWorkgroupIdProjectsProjectIdSpecsSpecIdGetValidateBeforeCall(String workgroupId, String projectId, String specId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workgroupId' is set
        if (workgroupId == null) {
            throw new ApiException("Missing the required parameter 'workgroupId' when calling v1WorkgroupsWorkgroupIdProjectsProjectIdSpecsSpecIdGet(Async)");
        }

        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling v1WorkgroupsWorkgroupIdProjectsProjectIdSpecsSpecIdGet(Async)");
        }

        // verify the required parameter 'specId' is set
        if (specId == null) {
            throw new ApiException("Missing the required parameter 'specId' when calling v1WorkgroupsWorkgroupIdProjectsProjectIdSpecsSpecIdGet(Async)");
        }

        return v1WorkgroupsWorkgroupIdProjectsProjectIdSpecsSpecIdGetCall(workgroupId, projectId, specId, _callback);

    }

    /**
     * List a specific spec of project Level
     * List a specific spec of project Level
     * @param workgroupId  (required)
     * @param projectId  (required)
     * @param specId  (required)
     * @return SpecListVO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful retrieval </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> There are not any result matching your search condition </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public SpecListVO v1WorkgroupsWorkgroupIdProjectsProjectIdSpecsSpecIdGet(String workgroupId, String projectId, String specId) throws ApiException {
        ApiResponse<SpecListVO> localVarResp = v1WorkgroupsWorkgroupIdProjectsProjectIdSpecsSpecIdGetWithHttpInfo(workgroupId, projectId, specId);
        return localVarResp.getData();
    }

    /**
     * List a specific spec of project Level
     * List a specific spec of project Level
     * @param workgroupId  (required)
     * @param projectId  (required)
     * @param specId  (required)
     * @return ApiResponse&lt;SpecListVO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful retrieval </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> There are not any result matching your search condition </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SpecListVO> v1WorkgroupsWorkgroupIdProjectsProjectIdSpecsSpecIdGetWithHttpInfo(String workgroupId, String projectId, String specId) throws ApiException {
        okhttp3.Call localVarCall = v1WorkgroupsWorkgroupIdProjectsProjectIdSpecsSpecIdGetValidateBeforeCall(workgroupId, projectId, specId, null);
        Type localVarReturnType = new TypeToken<SpecListVO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List a specific spec of project Level (asynchronously)
     * List a specific spec of project Level
     * @param workgroupId  (required)
     * @param projectId  (required)
     * @param specId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful retrieval </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> There are not any result matching your search condition </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1WorkgroupsWorkgroupIdProjectsProjectIdSpecsSpecIdGetAsync(String workgroupId, String projectId, String specId, final ApiCallback<SpecListVO> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1WorkgroupsWorkgroupIdProjectsProjectIdSpecsSpecIdGetValidateBeforeCall(workgroupId, projectId, specId, _callback);
        Type localVarReturnType = new TypeToken<SpecListVO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1WorkgroupsWorkgroupIdProjectsProjectIdSpecsSpecIdPut
     * @param workgroupId  (required)
     * @param projectId  (required)
     * @param specId  (required)
     * @param specUpdatePersistVO  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful updated </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> There are not any result matching your search condition </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1WorkgroupsWorkgroupIdProjectsProjectIdSpecsSpecIdPutCall(String workgroupId, String projectId, String specId, SpecUpdatePersistVO specUpdatePersistVO, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = specUpdatePersistVO;

        // create path and map variables
        String localVarPath = "/v1/workgroups/{workgroup_id}/projects/{project_id}/specs/{spec_id}"
            .replace("{" + "workgroup_id" + "}", localVarApiClient.escapeString(workgroupId.toString()))
            .replace("{" + "project_id" + "}", localVarApiClient.escapeString(projectId.toString()))
            .replace("{" + "spec_id" + "}", localVarApiClient.escapeString(specId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*",
            "application/json",
            "application/x-json-smile",
            "application/x-yaml",
            "application/xml",
            "text/csv",
            "text/x-yaml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-json-smile",
            "application/x-yaml",
            "application/xml",
            "text/csv",
            "text/x-yaml",
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1WorkgroupsWorkgroupIdProjectsProjectIdSpecsSpecIdPutValidateBeforeCall(String workgroupId, String projectId, String specId, SpecUpdatePersistVO specUpdatePersistVO, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workgroupId' is set
        if (workgroupId == null) {
            throw new ApiException("Missing the required parameter 'workgroupId' when calling v1WorkgroupsWorkgroupIdProjectsProjectIdSpecsSpecIdPut(Async)");
        }

        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling v1WorkgroupsWorkgroupIdProjectsProjectIdSpecsSpecIdPut(Async)");
        }

        // verify the required parameter 'specId' is set
        if (specId == null) {
            throw new ApiException("Missing the required parameter 'specId' when calling v1WorkgroupsWorkgroupIdProjectsProjectIdSpecsSpecIdPut(Async)");
        }

        return v1WorkgroupsWorkgroupIdProjectsProjectIdSpecsSpecIdPutCall(workgroupId, projectId, specId, specUpdatePersistVO, _callback);

    }

    /**
     * Update a specific Spec
     * Update a specific Spec
     * @param workgroupId  (required)
     * @param projectId  (required)
     * @param specId  (required)
     * @param specUpdatePersistVO  (optional)
     * @return SpecHTTPStatusVO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful updated </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> There are not any result matching your search condition </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public SpecHTTPStatusVO v1WorkgroupsWorkgroupIdProjectsProjectIdSpecsSpecIdPut(String workgroupId, String projectId, String specId, SpecUpdatePersistVO specUpdatePersistVO) throws ApiException {
        ApiResponse<SpecHTTPStatusVO> localVarResp = v1WorkgroupsWorkgroupIdProjectsProjectIdSpecsSpecIdPutWithHttpInfo(workgroupId, projectId, specId, specUpdatePersistVO);
        return localVarResp.getData();
    }

    /**
     * Update a specific Spec
     * Update a specific Spec
     * @param workgroupId  (required)
     * @param projectId  (required)
     * @param specId  (required)
     * @param specUpdatePersistVO  (optional)
     * @return ApiResponse&lt;SpecHTTPStatusVO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful updated </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> There are not any result matching your search condition </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SpecHTTPStatusVO> v1WorkgroupsWorkgroupIdProjectsProjectIdSpecsSpecIdPutWithHttpInfo(String workgroupId, String projectId, String specId, SpecUpdatePersistVO specUpdatePersistVO) throws ApiException {
        okhttp3.Call localVarCall = v1WorkgroupsWorkgroupIdProjectsProjectIdSpecsSpecIdPutValidateBeforeCall(workgroupId, projectId, specId, specUpdatePersistVO, null);
        Type localVarReturnType = new TypeToken<SpecHTTPStatusVO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a specific Spec (asynchronously)
     * Update a specific Spec
     * @param workgroupId  (required)
     * @param projectId  (required)
     * @param specId  (required)
     * @param specUpdatePersistVO  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful updated </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> There are not any result matching your search condition </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1WorkgroupsWorkgroupIdProjectsProjectIdSpecsSpecIdPutAsync(String workgroupId, String projectId, String specId, SpecUpdatePersistVO specUpdatePersistVO, final ApiCallback<SpecHTTPStatusVO> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1WorkgroupsWorkgroupIdProjectsProjectIdSpecsSpecIdPutValidateBeforeCall(workgroupId, projectId, specId, specUpdatePersistVO, _callback);
        Type localVarReturnType = new TypeToken<SpecHTTPStatusVO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1WorkgroupsWorkgroupIdSpecTypesSpecTypeIdSpecTypeFieldsGet
     * @param workgroupId  (required)
     * @param specTypeId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful retrieval </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> There are not any result matching your search condition </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1WorkgroupsWorkgroupIdSpecTypesSpecTypeIdSpecTypeFieldsGetCall(String workgroupId, String specTypeId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/workgroups/{workgroup_id}/specTypes/{spec_type_id}/specTypeFields"
            .replace("{" + "workgroup_id" + "}", localVarApiClient.escapeString(workgroupId.toString()))
            .replace("{" + "spec_type_id" + "}", localVarApiClient.escapeString(specTypeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*",
            "application/json",
            "application/x-json-smile",
            "application/x-yaml",
            "application/xml",
            "text/csv",
            "text/x-yaml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1WorkgroupsWorkgroupIdSpecTypesSpecTypeIdSpecTypeFieldsGetValidateBeforeCall(String workgroupId, String specTypeId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workgroupId' is set
        if (workgroupId == null) {
            throw new ApiException("Missing the required parameter 'workgroupId' when calling v1WorkgroupsWorkgroupIdSpecTypesSpecTypeIdSpecTypeFieldsGet(Async)");
        }

        // verify the required parameter 'specTypeId' is set
        if (specTypeId == null) {
            throw new ApiException("Missing the required parameter 'specTypeId' when calling v1WorkgroupsWorkgroupIdSpecTypesSpecTypeIdSpecTypeFieldsGet(Async)");
        }

        return v1WorkgroupsWorkgroupIdSpecTypesSpecTypeIdSpecTypeFieldsGetCall(workgroupId, specTypeId, _callback);

    }

    /**
     * Get Spec Type Fields
     * Get Spec Type Fields
     * @param workgroupId  (required)
     * @param specTypeId  (required)
     * @return PropertyParamListVO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful retrieval </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> There are not any result matching your search condition </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public PropertyParamListVO v1WorkgroupsWorkgroupIdSpecTypesSpecTypeIdSpecTypeFieldsGet(String workgroupId, String specTypeId) throws ApiException {
        ApiResponse<PropertyParamListVO> localVarResp = v1WorkgroupsWorkgroupIdSpecTypesSpecTypeIdSpecTypeFieldsGetWithHttpInfo(workgroupId, specTypeId);
        return localVarResp.getData();
    }

    /**
     * Get Spec Type Fields
     * Get Spec Type Fields
     * @param workgroupId  (required)
     * @param specTypeId  (required)
     * @return ApiResponse&lt;PropertyParamListVO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful retrieval </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> There are not any result matching your search condition </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PropertyParamListVO> v1WorkgroupsWorkgroupIdSpecTypesSpecTypeIdSpecTypeFieldsGetWithHttpInfo(String workgroupId, String specTypeId) throws ApiException {
        okhttp3.Call localVarCall = v1WorkgroupsWorkgroupIdSpecTypesSpecTypeIdSpecTypeFieldsGetValidateBeforeCall(workgroupId, specTypeId, null);
        Type localVarReturnType = new TypeToken<PropertyParamListVO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Spec Type Fields (asynchronously)
     * Get Spec Type Fields
     * @param workgroupId  (required)
     * @param specTypeId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful retrieval </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> There are not any result matching your search condition </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1WorkgroupsWorkgroupIdSpecTypesSpecTypeIdSpecTypeFieldsGetAsync(String workgroupId, String specTypeId, final ApiCallback<PropertyParamListVO> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1WorkgroupsWorkgroupIdSpecTypesSpecTypeIdSpecTypeFieldsGetValidateBeforeCall(workgroupId, specTypeId, _callback);
        Type localVarReturnType = new TypeToken<PropertyParamListVO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
