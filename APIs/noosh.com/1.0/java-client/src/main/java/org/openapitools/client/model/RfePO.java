/*
 * Noosh API application
 * Full description of Noosh API
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.RfeSpecPO;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Java type: com.noosh.domain.nooshapi.persist.po.RfePO
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:59:23.742517-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RfePO {
  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_DETAILS = "details";
  @SerializedName(SERIALIZED_NAME_DETAILS)
  private String details;

  public static final String SERIALIZED_NAME_ESTIMATE_DUE_DATE = "estimate_due_date";
  @SerializedName(SERIALIZED_NAME_ESTIMATE_DUE_DATE)
  private LocalDate estimateDueDate;

  public static final String SERIALIZED_NAME_PROPOSED_ORDER_COMPLETION_DATE = "proposed_order_completion_date";
  @SerializedName(SERIALIZED_NAME_PROPOSED_ORDER_COMPLETION_DATE)
  private LocalDate proposedOrderCompletionDate;

  public static final String SERIALIZED_NAME_RFE_NUMBER = "rfe_number";
  @SerializedName(SERIALIZED_NAME_RFE_NUMBER)
  private String rfeNumber;

  public static final String SERIALIZED_NAME_RFE_TITLE = "rfe_title";
  @SerializedName(SERIALIZED_NAME_RFE_TITLE)
  private String rfeTitle;

  public static final String SERIALIZED_NAME_SPECS = "specs";
  @SerializedName(SERIALIZED_NAME_SPECS)
  private List<RfeSpecPO> specs = new ArrayList<>();

  public static final String SERIALIZED_NAME_SUPPLIER_USER_IDS = "supplier_user_ids";
  @SerializedName(SERIALIZED_NAME_SUPPLIER_USER_IDS)
  private List<Long> supplierUserIds = new ArrayList<>();

  public RfePO() {
  }

  public RfePO description(String description) {
    this.description = description;
    return this;
  }

  /**
   * 
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public RfePO details(String details) {
    this.details = details;
    return this;
  }

  /**
   * 
   * @return details
   */
  @javax.annotation.Nullable
  public String getDetails() {
    return details;
  }

  public void setDetails(String details) {
    this.details = details;
  }


  public RfePO estimateDueDate(LocalDate estimateDueDate) {
    this.estimateDueDate = estimateDueDate;
    return this;
  }

  /**
   * 
   * @return estimateDueDate
   */
  @javax.annotation.Nullable
  public LocalDate getEstimateDueDate() {
    return estimateDueDate;
  }

  public void setEstimateDueDate(LocalDate estimateDueDate) {
    this.estimateDueDate = estimateDueDate;
  }


  public RfePO proposedOrderCompletionDate(LocalDate proposedOrderCompletionDate) {
    this.proposedOrderCompletionDate = proposedOrderCompletionDate;
    return this;
  }

  /**
   * 
   * @return proposedOrderCompletionDate
   */
  @javax.annotation.Nullable
  public LocalDate getProposedOrderCompletionDate() {
    return proposedOrderCompletionDate;
  }

  public void setProposedOrderCompletionDate(LocalDate proposedOrderCompletionDate) {
    this.proposedOrderCompletionDate = proposedOrderCompletionDate;
  }


  public RfePO rfeNumber(String rfeNumber) {
    this.rfeNumber = rfeNumber;
    return this;
  }

  /**
   * 
   * @return rfeNumber
   */
  @javax.annotation.Nullable
  public String getRfeNumber() {
    return rfeNumber;
  }

  public void setRfeNumber(String rfeNumber) {
    this.rfeNumber = rfeNumber;
  }


  public RfePO rfeTitle(String rfeTitle) {
    this.rfeTitle = rfeTitle;
    return this;
  }

  /**
   * 
   * @return rfeTitle
   */
  @javax.annotation.Nullable
  public String getRfeTitle() {
    return rfeTitle;
  }

  public void setRfeTitle(String rfeTitle) {
    this.rfeTitle = rfeTitle;
  }


  public RfePO specs(List<RfeSpecPO> specs) {
    this.specs = specs;
    return this;
  }

  public RfePO addSpecsItem(RfeSpecPO specsItem) {
    if (this.specs == null) {
      this.specs = new ArrayList<>();
    }
    this.specs.add(specsItem);
    return this;
  }

  /**
   * 
   * @return specs
   */
  @javax.annotation.Nullable
  public List<RfeSpecPO> getSpecs() {
    return specs;
  }

  public void setSpecs(List<RfeSpecPO> specs) {
    this.specs = specs;
  }


  public RfePO supplierUserIds(List<Long> supplierUserIds) {
    this.supplierUserIds = supplierUserIds;
    return this;
  }

  public RfePO addSupplierUserIdsItem(Long supplierUserIdsItem) {
    if (this.supplierUserIds == null) {
      this.supplierUserIds = new ArrayList<>();
    }
    this.supplierUserIds.add(supplierUserIdsItem);
    return this;
  }

  /**
   * 
   * @return supplierUserIds
   */
  @javax.annotation.Nullable
  public List<Long> getSupplierUserIds() {
    return supplierUserIds;
  }

  public void setSupplierUserIds(List<Long> supplierUserIds) {
    this.supplierUserIds = supplierUserIds;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RfePO rfePO = (RfePO) o;
    return Objects.equals(this.description, rfePO.description) &&
        Objects.equals(this.details, rfePO.details) &&
        Objects.equals(this.estimateDueDate, rfePO.estimateDueDate) &&
        Objects.equals(this.proposedOrderCompletionDate, rfePO.proposedOrderCompletionDate) &&
        Objects.equals(this.rfeNumber, rfePO.rfeNumber) &&
        Objects.equals(this.rfeTitle, rfePO.rfeTitle) &&
        Objects.equals(this.specs, rfePO.specs) &&
        Objects.equals(this.supplierUserIds, rfePO.supplierUserIds);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, details, estimateDueDate, proposedOrderCompletionDate, rfeNumber, rfeTitle, specs, supplierUserIds);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RfePO {\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    details: ").append(toIndentedString(details)).append("\n");
    sb.append("    estimateDueDate: ").append(toIndentedString(estimateDueDate)).append("\n");
    sb.append("    proposedOrderCompletionDate: ").append(toIndentedString(proposedOrderCompletionDate)).append("\n");
    sb.append("    rfeNumber: ").append(toIndentedString(rfeNumber)).append("\n");
    sb.append("    rfeTitle: ").append(toIndentedString(rfeTitle)).append("\n");
    sb.append("    specs: ").append(toIndentedString(specs)).append("\n");
    sb.append("    supplierUserIds: ").append(toIndentedString(supplierUserIds)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("description");
    openapiFields.add("details");
    openapiFields.add("estimate_due_date");
    openapiFields.add("proposed_order_completion_date");
    openapiFields.add("rfe_number");
    openapiFields.add("rfe_title");
    openapiFields.add("specs");
    openapiFields.add("supplier_user_ids");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RfePO
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RfePO.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RfePO is not found in the empty JSON string", RfePO.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RfePO.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RfePO` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("details") != null && !jsonObj.get("details").isJsonNull()) && !jsonObj.get("details").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `details` to be a primitive type in the JSON string but got `%s`", jsonObj.get("details").toString()));
      }
      if ((jsonObj.get("rfe_number") != null && !jsonObj.get("rfe_number").isJsonNull()) && !jsonObj.get("rfe_number").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rfe_number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rfe_number").toString()));
      }
      if ((jsonObj.get("rfe_title") != null && !jsonObj.get("rfe_title").isJsonNull()) && !jsonObj.get("rfe_title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rfe_title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rfe_title").toString()));
      }
      if (jsonObj.get("specs") != null && !jsonObj.get("specs").isJsonNull()) {
        JsonArray jsonArrayspecs = jsonObj.getAsJsonArray("specs");
        if (jsonArrayspecs != null) {
          // ensure the json data is an array
          if (!jsonObj.get("specs").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `specs` to be an array in the JSON string but got `%s`", jsonObj.get("specs").toString()));
          }

          // validate the optional field `specs` (array)
          for (int i = 0; i < jsonArrayspecs.size(); i++) {
            RfeSpecPO.validateJsonElement(jsonArrayspecs.get(i));
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("supplier_user_ids") != null && !jsonObj.get("supplier_user_ids").isJsonNull() && !jsonObj.get("supplier_user_ids").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `supplier_user_ids` to be an array in the JSON string but got `%s`", jsonObj.get("supplier_user_ids").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RfePO.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RfePO' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RfePO> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RfePO.class));

       return (TypeAdapter<T>) new TypeAdapter<RfePO>() {
           @Override
           public void write(JsonWriter out, RfePO value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RfePO read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RfePO given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RfePO
   * @throws IOException if the JSON string is invalid with respect to RfePO
   */
  public static RfePO fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RfePO.class);
  }

  /**
   * Convert an instance of RfePO to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

