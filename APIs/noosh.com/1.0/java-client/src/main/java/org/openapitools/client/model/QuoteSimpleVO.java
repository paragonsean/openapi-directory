/*
 * Noosh API application
 * Full description of Noosh API
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.LocalDate;
import java.util.Arrays;
import org.openapitools.client.model.RfqBaseVO;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Java type: com.noosh.nooshapi.vo.QuoteSimpleVO
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:59:23.742517-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class QuoteSimpleVO {
  public static final String SERIALIZED_NAME_CURRENCY = "currency";
  @SerializedName(SERIALIZED_NAME_CURRENCY)
  private String currency;

  public static final String SERIALIZED_NAME_GRAND_TOTAL = "grand_total";
  @SerializedName(SERIALIZED_NAME_GRAND_TOTAL)
  private Object grandTotal = null;

  public static final String SERIALIZED_NAME_QUOTE_ID = "quote_id";
  @SerializedName(SERIALIZED_NAME_QUOTE_ID)
  private Long quoteId;

  public static final String SERIALIZED_NAME_QUOTE_TITLE = "quote_title";
  @SerializedName(SERIALIZED_NAME_QUOTE_TITLE)
  private String quoteTitle;

  public static final String SERIALIZED_NAME_RFQ = "rfq";
  @SerializedName(SERIALIZED_NAME_RFQ)
  private RfqBaseVO rfq;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_SUBMIT_DATE = "submit_date";
  @SerializedName(SERIALIZED_NAME_SUBMIT_DATE)
  private LocalDate submitDate;

  public static final String SERIALIZED_NAME_TRANSACTIONAL_CURRENCY = "transactional_currency";
  @SerializedName(SERIALIZED_NAME_TRANSACTIONAL_CURRENCY)
  private String transactionalCurrency;

  public static final String SERIALIZED_NAME_TRANSACTIONAL_GRAND_TOTAL = "transactional_grand_total";
  @SerializedName(SERIALIZED_NAME_TRANSACTIONAL_GRAND_TOTAL)
  private Object transactionalGrandTotal = null;

  public QuoteSimpleVO() {
  }

  public QuoteSimpleVO currency(String currency) {
    this.currency = currency;
    return this;
  }

  /**
   * 
   * @return currency
   */
  @javax.annotation.Nullable
  public String getCurrency() {
    return currency;
  }

  public void setCurrency(String currency) {
    this.currency = currency;
  }


  public QuoteSimpleVO grandTotal(Object grandTotal) {
    this.grandTotal = grandTotal;
    return this;
  }

  /**
   * Java type: java.math.BigDecimal
   * @return grandTotal
   */
  @javax.annotation.Nullable
  public Object getGrandTotal() {
    return grandTotal;
  }

  public void setGrandTotal(Object grandTotal) {
    this.grandTotal = grandTotal;
  }


  public QuoteSimpleVO quoteId(Long quoteId) {
    this.quoteId = quoteId;
    return this;
  }

  /**
   * 
   * @return quoteId
   */
  @javax.annotation.Nullable
  public Long getQuoteId() {
    return quoteId;
  }

  public void setQuoteId(Long quoteId) {
    this.quoteId = quoteId;
  }


  public QuoteSimpleVO quoteTitle(String quoteTitle) {
    this.quoteTitle = quoteTitle;
    return this;
  }

  /**
   * 
   * @return quoteTitle
   */
  @javax.annotation.Nullable
  public String getQuoteTitle() {
    return quoteTitle;
  }

  public void setQuoteTitle(String quoteTitle) {
    this.quoteTitle = quoteTitle;
  }


  public QuoteSimpleVO rfq(RfqBaseVO rfq) {
    this.rfq = rfq;
    return this;
  }

  /**
   * Get rfq
   * @return rfq
   */
  @javax.annotation.Nullable
  public RfqBaseVO getRfq() {
    return rfq;
  }

  public void setRfq(RfqBaseVO rfq) {
    this.rfq = rfq;
  }


  public QuoteSimpleVO status(String status) {
    this.status = status;
    return this;
  }

  /**
   * 
   * @return status
   */
  @javax.annotation.Nullable
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }


  public QuoteSimpleVO submitDate(LocalDate submitDate) {
    this.submitDate = submitDate;
    return this;
  }

  /**
   * 
   * @return submitDate
   */
  @javax.annotation.Nullable
  public LocalDate getSubmitDate() {
    return submitDate;
  }

  public void setSubmitDate(LocalDate submitDate) {
    this.submitDate = submitDate;
  }


  public QuoteSimpleVO transactionalCurrency(String transactionalCurrency) {
    this.transactionalCurrency = transactionalCurrency;
    return this;
  }

  /**
   * 
   * @return transactionalCurrency
   */
  @javax.annotation.Nullable
  public String getTransactionalCurrency() {
    return transactionalCurrency;
  }

  public void setTransactionalCurrency(String transactionalCurrency) {
    this.transactionalCurrency = transactionalCurrency;
  }


  public QuoteSimpleVO transactionalGrandTotal(Object transactionalGrandTotal) {
    this.transactionalGrandTotal = transactionalGrandTotal;
    return this;
  }

  /**
   * Java type: java.math.BigDecimal
   * @return transactionalGrandTotal
   */
  @javax.annotation.Nullable
  public Object getTransactionalGrandTotal() {
    return transactionalGrandTotal;
  }

  public void setTransactionalGrandTotal(Object transactionalGrandTotal) {
    this.transactionalGrandTotal = transactionalGrandTotal;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    QuoteSimpleVO quoteSimpleVO = (QuoteSimpleVO) o;
    return Objects.equals(this.currency, quoteSimpleVO.currency) &&
        Objects.equals(this.grandTotal, quoteSimpleVO.grandTotal) &&
        Objects.equals(this.quoteId, quoteSimpleVO.quoteId) &&
        Objects.equals(this.quoteTitle, quoteSimpleVO.quoteTitle) &&
        Objects.equals(this.rfq, quoteSimpleVO.rfq) &&
        Objects.equals(this.status, quoteSimpleVO.status) &&
        Objects.equals(this.submitDate, quoteSimpleVO.submitDate) &&
        Objects.equals(this.transactionalCurrency, quoteSimpleVO.transactionalCurrency) &&
        Objects.equals(this.transactionalGrandTotal, quoteSimpleVO.transactionalGrandTotal);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(currency, grandTotal, quoteId, quoteTitle, rfq, status, submitDate, transactionalCurrency, transactionalGrandTotal);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class QuoteSimpleVO {\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    grandTotal: ").append(toIndentedString(grandTotal)).append("\n");
    sb.append("    quoteId: ").append(toIndentedString(quoteId)).append("\n");
    sb.append("    quoteTitle: ").append(toIndentedString(quoteTitle)).append("\n");
    sb.append("    rfq: ").append(toIndentedString(rfq)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    submitDate: ").append(toIndentedString(submitDate)).append("\n");
    sb.append("    transactionalCurrency: ").append(toIndentedString(transactionalCurrency)).append("\n");
    sb.append("    transactionalGrandTotal: ").append(toIndentedString(transactionalGrandTotal)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("currency");
    openapiFields.add("grand_total");
    openapiFields.add("quote_id");
    openapiFields.add("quote_title");
    openapiFields.add("rfq");
    openapiFields.add("status");
    openapiFields.add("submit_date");
    openapiFields.add("transactional_currency");
    openapiFields.add("transactional_grand_total");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to QuoteSimpleVO
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!QuoteSimpleVO.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in QuoteSimpleVO is not found in the empty JSON string", QuoteSimpleVO.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!QuoteSimpleVO.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `QuoteSimpleVO` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("currency") != null && !jsonObj.get("currency").isJsonNull()) && !jsonObj.get("currency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currency").toString()));
      }
      if ((jsonObj.get("quote_title") != null && !jsonObj.get("quote_title").isJsonNull()) && !jsonObj.get("quote_title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `quote_title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("quote_title").toString()));
      }
      // validate the optional field `rfq`
      if (jsonObj.get("rfq") != null && !jsonObj.get("rfq").isJsonNull()) {
        RfqBaseVO.validateJsonElement(jsonObj.get("rfq"));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      if ((jsonObj.get("transactional_currency") != null && !jsonObj.get("transactional_currency").isJsonNull()) && !jsonObj.get("transactional_currency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transactional_currency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transactional_currency").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!QuoteSimpleVO.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'QuoteSimpleVO' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<QuoteSimpleVO> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(QuoteSimpleVO.class));

       return (TypeAdapter<T>) new TypeAdapter<QuoteSimpleVO>() {
           @Override
           public void write(JsonWriter out, QuoteSimpleVO value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public QuoteSimpleVO read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of QuoteSimpleVO given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of QuoteSimpleVO
   * @throws IOException if the JSON string is invalid with respect to QuoteSimpleVO
   */
  public static QuoteSimpleVO fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, QuoteSimpleVO.class);
  }

  /**
   * Convert an instance of QuoteSimpleVO to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

