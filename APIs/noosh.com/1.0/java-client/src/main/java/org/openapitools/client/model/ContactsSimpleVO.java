/*
 * Noosh API application
 * Full description of Noosh API
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Java type: com.noosh.nooshapi.vo.ContactsSimpleVO
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:59:23.742517-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ContactsSimpleVO {
  public static final String SERIALIZED_NAME_ADDRESS = "address";
  @SerializedName(SERIALIZED_NAME_ADDRESS)
  private String address;

  public static final String SERIALIZED_NAME_COMPANY_NAME = "company_name";
  @SerializedName(SERIALIZED_NAME_COMPANY_NAME)
  private String companyName;

  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private String email;

  public static final String SERIALIZED_NAME_FIRST_NAME = "first_name";
  @SerializedName(SERIALIZED_NAME_FIRST_NAME)
  private String firstName;

  public static final String SERIALIZED_NAME_LAST_NAME = "last_name";
  @SerializedName(SERIALIZED_NAME_LAST_NAME)
  private String lastName;

  public static final String SERIALIZED_NAME_PRIMARY_PHONE = "primary_phone";
  @SerializedName(SERIALIZED_NAME_PRIMARY_PHONE)
  private String primaryPhone;

  public static final String SERIALIZED_NAME_USER_ID = "user_id";
  @SerializedName(SERIALIZED_NAME_USER_ID)
  private Long userId;

  public static final String SERIALIZED_NAME_WORKGROUP_NAME = "workgroup_name";
  @SerializedName(SERIALIZED_NAME_WORKGROUP_NAME)
  private String workgroupName;

  public ContactsSimpleVO() {
  }

  public ContactsSimpleVO address(String address) {
    this.address = address;
    return this;
  }

  /**
   * 
   * @return address
   */
  @javax.annotation.Nullable
  public String getAddress() {
    return address;
  }

  public void setAddress(String address) {
    this.address = address;
  }


  public ContactsSimpleVO companyName(String companyName) {
    this.companyName = companyName;
    return this;
  }

  /**
   * 
   * @return companyName
   */
  @javax.annotation.Nullable
  public String getCompanyName() {
    return companyName;
  }

  public void setCompanyName(String companyName) {
    this.companyName = companyName;
  }


  public ContactsSimpleVO email(String email) {
    this.email = email;
    return this;
  }

  /**
   * 
   * @return email
   */
  @javax.annotation.Nullable
  public String getEmail() {
    return email;
  }

  public void setEmail(String email) {
    this.email = email;
  }


  public ContactsSimpleVO firstName(String firstName) {
    this.firstName = firstName;
    return this;
  }

  /**
   * 
   * @return firstName
   */
  @javax.annotation.Nullable
  public String getFirstName() {
    return firstName;
  }

  public void setFirstName(String firstName) {
    this.firstName = firstName;
  }


  public ContactsSimpleVO lastName(String lastName) {
    this.lastName = lastName;
    return this;
  }

  /**
   * 
   * @return lastName
   */
  @javax.annotation.Nullable
  public String getLastName() {
    return lastName;
  }

  public void setLastName(String lastName) {
    this.lastName = lastName;
  }


  public ContactsSimpleVO primaryPhone(String primaryPhone) {
    this.primaryPhone = primaryPhone;
    return this;
  }

  /**
   * 
   * @return primaryPhone
   */
  @javax.annotation.Nullable
  public String getPrimaryPhone() {
    return primaryPhone;
  }

  public void setPrimaryPhone(String primaryPhone) {
    this.primaryPhone = primaryPhone;
  }


  public ContactsSimpleVO userId(Long userId) {
    this.userId = userId;
    return this;
  }

  /**
   * 
   * @return userId
   */
  @javax.annotation.Nullable
  public Long getUserId() {
    return userId;
  }

  public void setUserId(Long userId) {
    this.userId = userId;
  }


  public ContactsSimpleVO workgroupName(String workgroupName) {
    this.workgroupName = workgroupName;
    return this;
  }

  /**
   * 
   * @return workgroupName
   */
  @javax.annotation.Nullable
  public String getWorkgroupName() {
    return workgroupName;
  }

  public void setWorkgroupName(String workgroupName) {
    this.workgroupName = workgroupName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ContactsSimpleVO contactsSimpleVO = (ContactsSimpleVO) o;
    return Objects.equals(this.address, contactsSimpleVO.address) &&
        Objects.equals(this.companyName, contactsSimpleVO.companyName) &&
        Objects.equals(this.email, contactsSimpleVO.email) &&
        Objects.equals(this.firstName, contactsSimpleVO.firstName) &&
        Objects.equals(this.lastName, contactsSimpleVO.lastName) &&
        Objects.equals(this.primaryPhone, contactsSimpleVO.primaryPhone) &&
        Objects.equals(this.userId, contactsSimpleVO.userId) &&
        Objects.equals(this.workgroupName, contactsSimpleVO.workgroupName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(address, companyName, email, firstName, lastName, primaryPhone, userId, workgroupName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ContactsSimpleVO {\n");
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    companyName: ").append(toIndentedString(companyName)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    firstName: ").append(toIndentedString(firstName)).append("\n");
    sb.append("    lastName: ").append(toIndentedString(lastName)).append("\n");
    sb.append("    primaryPhone: ").append(toIndentedString(primaryPhone)).append("\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("    workgroupName: ").append(toIndentedString(workgroupName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("address");
    openapiFields.add("company_name");
    openapiFields.add("email");
    openapiFields.add("first_name");
    openapiFields.add("last_name");
    openapiFields.add("primary_phone");
    openapiFields.add("user_id");
    openapiFields.add("workgroup_name");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ContactsSimpleVO
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ContactsSimpleVO.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ContactsSimpleVO is not found in the empty JSON string", ContactsSimpleVO.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ContactsSimpleVO.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ContactsSimpleVO` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("address") != null && !jsonObj.get("address").isJsonNull()) && !jsonObj.get("address").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `address` to be a primitive type in the JSON string but got `%s`", jsonObj.get("address").toString()));
      }
      if ((jsonObj.get("company_name") != null && !jsonObj.get("company_name").isJsonNull()) && !jsonObj.get("company_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `company_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("company_name").toString()));
      }
      if ((jsonObj.get("email") != null && !jsonObj.get("email").isJsonNull()) && !jsonObj.get("email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email").toString()));
      }
      if ((jsonObj.get("first_name") != null && !jsonObj.get("first_name").isJsonNull()) && !jsonObj.get("first_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `first_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("first_name").toString()));
      }
      if ((jsonObj.get("last_name") != null && !jsonObj.get("last_name").isJsonNull()) && !jsonObj.get("last_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `last_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("last_name").toString()));
      }
      if ((jsonObj.get("primary_phone") != null && !jsonObj.get("primary_phone").isJsonNull()) && !jsonObj.get("primary_phone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `primary_phone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("primary_phone").toString()));
      }
      if ((jsonObj.get("workgroup_name") != null && !jsonObj.get("workgroup_name").isJsonNull()) && !jsonObj.get("workgroup_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `workgroup_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("workgroup_name").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ContactsSimpleVO.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ContactsSimpleVO' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ContactsSimpleVO> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ContactsSimpleVO.class));

       return (TypeAdapter<T>) new TypeAdapter<ContactsSimpleVO>() {
           @Override
           public void write(JsonWriter out, ContactsSimpleVO value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ContactsSimpleVO read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ContactsSimpleVO given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ContactsSimpleVO
   * @throws IOException if the JSON string is invalid with respect to ContactsSimpleVO
   */
  public static ContactsSimpleVO fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ContactsSimpleVO.class);
  }

  /**
   * Convert an instance of ContactsSimpleVO to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

