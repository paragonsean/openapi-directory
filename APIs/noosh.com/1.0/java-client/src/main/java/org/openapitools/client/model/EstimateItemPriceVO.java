/*
 * Noosh API application
 * Full description of Noosh API
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.BreakoutVO;
import org.openapitools.client.model.ItemOptionVO;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Java type: com.noosh.nooshapi.vo.EstimateItemPriceVO
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:59:23.742517-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class EstimateItemPriceVO {
  public static final String SERIALIZED_NAME_ADD_PRICE = "add_price";
  @SerializedName(SERIALIZED_NAME_ADD_PRICE)
  private Object addPrice = null;

  public static final String SERIALIZED_NAME_BREAKOUTS = "breakouts";
  @SerializedName(SERIALIZED_NAME_BREAKOUTS)
  private List<BreakoutVO> breakouts = new ArrayList<>();

  public static final String SERIALIZED_NAME_EM_ESTIMATE_ITEM_PRICE_ID = "em_estimate_item_price_id";
  @SerializedName(SERIALIZED_NAME_EM_ESTIMATE_ITEM_PRICE_ID)
  private Long emEstimateItemPriceId;

  public static final String SERIALIZED_NAME_ITEM_OPTION = "item_option";
  @SerializedName(SERIALIZED_NAME_ITEM_OPTION)
  private ItemOptionVO itemOption;

  public static final String SERIALIZED_NAME_PRICE = "price";
  @SerializedName(SERIALIZED_NAME_PRICE)
  private Object price = null;

  public static final String SERIALIZED_NAME_SHIPPING = "shipping";
  @SerializedName(SERIALIZED_NAME_SHIPPING)
  private Object shipping = null;

  public static final String SERIALIZED_NAME_TAX = "tax";
  @SerializedName(SERIALIZED_NAME_TAX)
  private Object tax = null;

  public static final String SERIALIZED_NAME_TOTAL_PRICE = "total_price";
  @SerializedName(SERIALIZED_NAME_TOTAL_PRICE)
  private Object totalPrice = null;

  public static final String SERIALIZED_NAME_TRANSACTIONAL_ADD_PRICE = "transactional_add_price";
  @SerializedName(SERIALIZED_NAME_TRANSACTIONAL_ADD_PRICE)
  private Object transactionalAddPrice = null;

  public static final String SERIALIZED_NAME_TRANSACTIONAL_PRICE = "transactional_price";
  @SerializedName(SERIALIZED_NAME_TRANSACTIONAL_PRICE)
  private Object transactionalPrice = null;

  public static final String SERIALIZED_NAME_TRANSACTIONAL_SHIPPING = "transactional_shipping";
  @SerializedName(SERIALIZED_NAME_TRANSACTIONAL_SHIPPING)
  private Object transactionalShipping = null;

  public static final String SERIALIZED_NAME_TRANSACTIONAL_TAX = "transactional_tax";
  @SerializedName(SERIALIZED_NAME_TRANSACTIONAL_TAX)
  private Object transactionalTax = null;

  public static final String SERIALIZED_NAME_TRANSACTIONAL_TOTAL_PRICE = "transactional_total_price";
  @SerializedName(SERIALIZED_NAME_TRANSACTIONAL_TOTAL_PRICE)
  private Object transactionalTotalPrice = null;

  public EstimateItemPriceVO() {
  }

  public EstimateItemPriceVO addPrice(Object addPrice) {
    this.addPrice = addPrice;
    return this;
  }

  /**
   * Java type: java.math.BigDecimal
   * @return addPrice
   */
  @javax.annotation.Nullable
  public Object getAddPrice() {
    return addPrice;
  }

  public void setAddPrice(Object addPrice) {
    this.addPrice = addPrice;
  }


  public EstimateItemPriceVO breakouts(List<BreakoutVO> breakouts) {
    this.breakouts = breakouts;
    return this;
  }

  public EstimateItemPriceVO addBreakoutsItem(BreakoutVO breakoutsItem) {
    if (this.breakouts == null) {
      this.breakouts = new ArrayList<>();
    }
    this.breakouts.add(breakoutsItem);
    return this;
  }

  /**
   * 
   * @return breakouts
   */
  @javax.annotation.Nullable
  public List<BreakoutVO> getBreakouts() {
    return breakouts;
  }

  public void setBreakouts(List<BreakoutVO> breakouts) {
    this.breakouts = breakouts;
  }


  public EstimateItemPriceVO emEstimateItemPriceId(Long emEstimateItemPriceId) {
    this.emEstimateItemPriceId = emEstimateItemPriceId;
    return this;
  }

  /**
   * 
   * @return emEstimateItemPriceId
   */
  @javax.annotation.Nullable
  public Long getEmEstimateItemPriceId() {
    return emEstimateItemPriceId;
  }

  public void setEmEstimateItemPriceId(Long emEstimateItemPriceId) {
    this.emEstimateItemPriceId = emEstimateItemPriceId;
  }


  public EstimateItemPriceVO itemOption(ItemOptionVO itemOption) {
    this.itemOption = itemOption;
    return this;
  }

  /**
   * Get itemOption
   * @return itemOption
   */
  @javax.annotation.Nullable
  public ItemOptionVO getItemOption() {
    return itemOption;
  }

  public void setItemOption(ItemOptionVO itemOption) {
    this.itemOption = itemOption;
  }


  public EstimateItemPriceVO price(Object price) {
    this.price = price;
    return this;
  }

  /**
   * Java type: java.math.BigDecimal
   * @return price
   */
  @javax.annotation.Nullable
  public Object getPrice() {
    return price;
  }

  public void setPrice(Object price) {
    this.price = price;
  }


  public EstimateItemPriceVO shipping(Object shipping) {
    this.shipping = shipping;
    return this;
  }

  /**
   * Java type: java.math.BigDecimal
   * @return shipping
   */
  @javax.annotation.Nullable
  public Object getShipping() {
    return shipping;
  }

  public void setShipping(Object shipping) {
    this.shipping = shipping;
  }


  public EstimateItemPriceVO tax(Object tax) {
    this.tax = tax;
    return this;
  }

  /**
   * Java type: java.math.BigDecimal
   * @return tax
   */
  @javax.annotation.Nullable
  public Object getTax() {
    return tax;
  }

  public void setTax(Object tax) {
    this.tax = tax;
  }


  public EstimateItemPriceVO totalPrice(Object totalPrice) {
    this.totalPrice = totalPrice;
    return this;
  }

  /**
   * Java type: java.math.BigDecimal
   * @return totalPrice
   */
  @javax.annotation.Nullable
  public Object getTotalPrice() {
    return totalPrice;
  }

  public void setTotalPrice(Object totalPrice) {
    this.totalPrice = totalPrice;
  }


  public EstimateItemPriceVO transactionalAddPrice(Object transactionalAddPrice) {
    this.transactionalAddPrice = transactionalAddPrice;
    return this;
  }

  /**
   * Java type: java.math.BigDecimal
   * @return transactionalAddPrice
   */
  @javax.annotation.Nullable
  public Object getTransactionalAddPrice() {
    return transactionalAddPrice;
  }

  public void setTransactionalAddPrice(Object transactionalAddPrice) {
    this.transactionalAddPrice = transactionalAddPrice;
  }


  public EstimateItemPriceVO transactionalPrice(Object transactionalPrice) {
    this.transactionalPrice = transactionalPrice;
    return this;
  }

  /**
   * Java type: java.math.BigDecimal
   * @return transactionalPrice
   */
  @javax.annotation.Nullable
  public Object getTransactionalPrice() {
    return transactionalPrice;
  }

  public void setTransactionalPrice(Object transactionalPrice) {
    this.transactionalPrice = transactionalPrice;
  }


  public EstimateItemPriceVO transactionalShipping(Object transactionalShipping) {
    this.transactionalShipping = transactionalShipping;
    return this;
  }

  /**
   * Java type: java.math.BigDecimal
   * @return transactionalShipping
   */
  @javax.annotation.Nullable
  public Object getTransactionalShipping() {
    return transactionalShipping;
  }

  public void setTransactionalShipping(Object transactionalShipping) {
    this.transactionalShipping = transactionalShipping;
  }


  public EstimateItemPriceVO transactionalTax(Object transactionalTax) {
    this.transactionalTax = transactionalTax;
    return this;
  }

  /**
   * Java type: java.math.BigDecimal
   * @return transactionalTax
   */
  @javax.annotation.Nullable
  public Object getTransactionalTax() {
    return transactionalTax;
  }

  public void setTransactionalTax(Object transactionalTax) {
    this.transactionalTax = transactionalTax;
  }


  public EstimateItemPriceVO transactionalTotalPrice(Object transactionalTotalPrice) {
    this.transactionalTotalPrice = transactionalTotalPrice;
    return this;
  }

  /**
   * Java type: java.math.BigDecimal
   * @return transactionalTotalPrice
   */
  @javax.annotation.Nullable
  public Object getTransactionalTotalPrice() {
    return transactionalTotalPrice;
  }

  public void setTransactionalTotalPrice(Object transactionalTotalPrice) {
    this.transactionalTotalPrice = transactionalTotalPrice;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EstimateItemPriceVO estimateItemPriceVO = (EstimateItemPriceVO) o;
    return Objects.equals(this.addPrice, estimateItemPriceVO.addPrice) &&
        Objects.equals(this.breakouts, estimateItemPriceVO.breakouts) &&
        Objects.equals(this.emEstimateItemPriceId, estimateItemPriceVO.emEstimateItemPriceId) &&
        Objects.equals(this.itemOption, estimateItemPriceVO.itemOption) &&
        Objects.equals(this.price, estimateItemPriceVO.price) &&
        Objects.equals(this.shipping, estimateItemPriceVO.shipping) &&
        Objects.equals(this.tax, estimateItemPriceVO.tax) &&
        Objects.equals(this.totalPrice, estimateItemPriceVO.totalPrice) &&
        Objects.equals(this.transactionalAddPrice, estimateItemPriceVO.transactionalAddPrice) &&
        Objects.equals(this.transactionalPrice, estimateItemPriceVO.transactionalPrice) &&
        Objects.equals(this.transactionalShipping, estimateItemPriceVO.transactionalShipping) &&
        Objects.equals(this.transactionalTax, estimateItemPriceVO.transactionalTax) &&
        Objects.equals(this.transactionalTotalPrice, estimateItemPriceVO.transactionalTotalPrice);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(addPrice, breakouts, emEstimateItemPriceId, itemOption, price, shipping, tax, totalPrice, transactionalAddPrice, transactionalPrice, transactionalShipping, transactionalTax, transactionalTotalPrice);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EstimateItemPriceVO {\n");
    sb.append("    addPrice: ").append(toIndentedString(addPrice)).append("\n");
    sb.append("    breakouts: ").append(toIndentedString(breakouts)).append("\n");
    sb.append("    emEstimateItemPriceId: ").append(toIndentedString(emEstimateItemPriceId)).append("\n");
    sb.append("    itemOption: ").append(toIndentedString(itemOption)).append("\n");
    sb.append("    price: ").append(toIndentedString(price)).append("\n");
    sb.append("    shipping: ").append(toIndentedString(shipping)).append("\n");
    sb.append("    tax: ").append(toIndentedString(tax)).append("\n");
    sb.append("    totalPrice: ").append(toIndentedString(totalPrice)).append("\n");
    sb.append("    transactionalAddPrice: ").append(toIndentedString(transactionalAddPrice)).append("\n");
    sb.append("    transactionalPrice: ").append(toIndentedString(transactionalPrice)).append("\n");
    sb.append("    transactionalShipping: ").append(toIndentedString(transactionalShipping)).append("\n");
    sb.append("    transactionalTax: ").append(toIndentedString(transactionalTax)).append("\n");
    sb.append("    transactionalTotalPrice: ").append(toIndentedString(transactionalTotalPrice)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("add_price");
    openapiFields.add("breakouts");
    openapiFields.add("em_estimate_item_price_id");
    openapiFields.add("item_option");
    openapiFields.add("price");
    openapiFields.add("shipping");
    openapiFields.add("tax");
    openapiFields.add("total_price");
    openapiFields.add("transactional_add_price");
    openapiFields.add("transactional_price");
    openapiFields.add("transactional_shipping");
    openapiFields.add("transactional_tax");
    openapiFields.add("transactional_total_price");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EstimateItemPriceVO
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EstimateItemPriceVO.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EstimateItemPriceVO is not found in the empty JSON string", EstimateItemPriceVO.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EstimateItemPriceVO.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EstimateItemPriceVO` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("breakouts") != null && !jsonObj.get("breakouts").isJsonNull()) {
        JsonArray jsonArraybreakouts = jsonObj.getAsJsonArray("breakouts");
        if (jsonArraybreakouts != null) {
          // ensure the json data is an array
          if (!jsonObj.get("breakouts").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `breakouts` to be an array in the JSON string but got `%s`", jsonObj.get("breakouts").toString()));
          }

          // validate the optional field `breakouts` (array)
          for (int i = 0; i < jsonArraybreakouts.size(); i++) {
            BreakoutVO.validateJsonElement(jsonArraybreakouts.get(i));
          };
        }
      }
      // validate the optional field `item_option`
      if (jsonObj.get("item_option") != null && !jsonObj.get("item_option").isJsonNull()) {
        ItemOptionVO.validateJsonElement(jsonObj.get("item_option"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EstimateItemPriceVO.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EstimateItemPriceVO' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EstimateItemPriceVO> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EstimateItemPriceVO.class));

       return (TypeAdapter<T>) new TypeAdapter<EstimateItemPriceVO>() {
           @Override
           public void write(JsonWriter out, EstimateItemPriceVO value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EstimateItemPriceVO read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of EstimateItemPriceVO given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EstimateItemPriceVO
   * @throws IOException if the JSON string is invalid with respect to EstimateItemPriceVO
   */
  public static EstimateItemPriceVO fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EstimateItemPriceVO.class);
  }

  /**
   * Convert an instance of EstimateItemPriceVO to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

