/*
 * Noosh API application
 * Full description of Noosh API
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.LocalDate;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Java type: com.noosh.nooshapi.vo.RfeBaseVO
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:59:23.742517-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RfeBaseVO {
  public static final String SERIALIZED_NAME_RFE_DUE_DATE = "rfe_due_date";
  @SerializedName(SERIALIZED_NAME_RFE_DUE_DATE)
  private LocalDate rfeDueDate;

  public static final String SERIALIZED_NAME_RFE_ID = "rfe_id";
  @SerializedName(SERIALIZED_NAME_RFE_ID)
  private Long rfeId;

  public static final String SERIALIZED_NAME_RFE_TITLE = "rfe_title";
  @SerializedName(SERIALIZED_NAME_RFE_TITLE)
  private String rfeTitle;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public RfeBaseVO() {
  }

  public RfeBaseVO rfeDueDate(LocalDate rfeDueDate) {
    this.rfeDueDate = rfeDueDate;
    return this;
  }

  /**
   * 
   * @return rfeDueDate
   */
  @javax.annotation.Nullable
  public LocalDate getRfeDueDate() {
    return rfeDueDate;
  }

  public void setRfeDueDate(LocalDate rfeDueDate) {
    this.rfeDueDate = rfeDueDate;
  }


  public RfeBaseVO rfeId(Long rfeId) {
    this.rfeId = rfeId;
    return this;
  }

  /**
   * 
   * @return rfeId
   */
  @javax.annotation.Nullable
  public Long getRfeId() {
    return rfeId;
  }

  public void setRfeId(Long rfeId) {
    this.rfeId = rfeId;
  }


  public RfeBaseVO rfeTitle(String rfeTitle) {
    this.rfeTitle = rfeTitle;
    return this;
  }

  /**
   * 
   * @return rfeTitle
   */
  @javax.annotation.Nullable
  public String getRfeTitle() {
    return rfeTitle;
  }

  public void setRfeTitle(String rfeTitle) {
    this.rfeTitle = rfeTitle;
  }


  public RfeBaseVO status(String status) {
    this.status = status;
    return this;
  }

  /**
   * 
   * @return status
   */
  @javax.annotation.Nullable
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RfeBaseVO rfeBaseVO = (RfeBaseVO) o;
    return Objects.equals(this.rfeDueDate, rfeBaseVO.rfeDueDate) &&
        Objects.equals(this.rfeId, rfeBaseVO.rfeId) &&
        Objects.equals(this.rfeTitle, rfeBaseVO.rfeTitle) &&
        Objects.equals(this.status, rfeBaseVO.status);
  }

  @Override
  public int hashCode() {
    return Objects.hash(rfeDueDate, rfeId, rfeTitle, status);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RfeBaseVO {\n");
    sb.append("    rfeDueDate: ").append(toIndentedString(rfeDueDate)).append("\n");
    sb.append("    rfeId: ").append(toIndentedString(rfeId)).append("\n");
    sb.append("    rfeTitle: ").append(toIndentedString(rfeTitle)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("rfe_due_date");
    openapiFields.add("rfe_id");
    openapiFields.add("rfe_title");
    openapiFields.add("status");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RfeBaseVO
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RfeBaseVO.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RfeBaseVO is not found in the empty JSON string", RfeBaseVO.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RfeBaseVO.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RfeBaseVO` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("rfe_title") != null && !jsonObj.get("rfe_title").isJsonNull()) && !jsonObj.get("rfe_title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rfe_title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rfe_title").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RfeBaseVO.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RfeBaseVO' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RfeBaseVO> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RfeBaseVO.class));

       return (TypeAdapter<T>) new TypeAdapter<RfeBaseVO>() {
           @Override
           public void write(JsonWriter out, RfeBaseVO value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RfeBaseVO read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RfeBaseVO given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RfeBaseVO
   * @throws IOException if the JSON string is invalid with respect to RfeBaseVO
   */
  public static RfeBaseVO fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RfeBaseVO.class);
  }

  /**
   * Convert an instance of RfeBaseVO to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

