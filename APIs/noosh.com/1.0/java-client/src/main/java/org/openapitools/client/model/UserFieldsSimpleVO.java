/*
 * Noosh API application
 * Full description of Noosh API
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Java type: com.noosh.nooshapi.vo.UserFieldsSimpleVO
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:59:23.742517-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UserFieldsSimpleVO {
  public static final String SERIALIZED_NAME_IS_REQUIRED = "is_required";
  @SerializedName(SERIALIZED_NAME_IS_REQUIRED)
  private Boolean isRequired;

  public static final String SERIALIZED_NAME_LABEL = "label";
  @SerializedName(SERIALIZED_NAME_LABEL)
  private String label;

  public static final String SERIALIZED_NAME_ORDINAL_NUMBER = "ordinal_number";
  @SerializedName(SERIALIZED_NAME_ORDINAL_NUMBER)
  private Long ordinalNumber;

  public static final String SERIALIZED_NAME_PARAM_NAME = "param_name";
  @SerializedName(SERIALIZED_NAME_PARAM_NAME)
  private String paramName;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_USER_FIELD_ID = "user_field_id";
  @SerializedName(SERIALIZED_NAME_USER_FIELD_ID)
  private Long userFieldId;

  public UserFieldsSimpleVO() {
  }

  public UserFieldsSimpleVO isRequired(Boolean isRequired) {
    this.isRequired = isRequired;
    return this;
  }

  /**
   * 
   * @return isRequired
   */
  @javax.annotation.Nullable
  public Boolean getIsRequired() {
    return isRequired;
  }

  public void setIsRequired(Boolean isRequired) {
    this.isRequired = isRequired;
  }


  public UserFieldsSimpleVO label(String label) {
    this.label = label;
    return this;
  }

  /**
   * 
   * @return label
   */
  @javax.annotation.Nullable
  public String getLabel() {
    return label;
  }

  public void setLabel(String label) {
    this.label = label;
  }


  public UserFieldsSimpleVO ordinalNumber(Long ordinalNumber) {
    this.ordinalNumber = ordinalNumber;
    return this;
  }

  /**
   * 
   * @return ordinalNumber
   */
  @javax.annotation.Nullable
  public Long getOrdinalNumber() {
    return ordinalNumber;
  }

  public void setOrdinalNumber(Long ordinalNumber) {
    this.ordinalNumber = ordinalNumber;
  }


  public UserFieldsSimpleVO paramName(String paramName) {
    this.paramName = paramName;
    return this;
  }

  /**
   * 
   * @return paramName
   */
  @javax.annotation.Nullable
  public String getParamName() {
    return paramName;
  }

  public void setParamName(String paramName) {
    this.paramName = paramName;
  }


  public UserFieldsSimpleVO type(String type) {
    this.type = type;
    return this;
  }

  /**
   * 
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }


  public UserFieldsSimpleVO userFieldId(Long userFieldId) {
    this.userFieldId = userFieldId;
    return this;
  }

  /**
   * 
   * @return userFieldId
   */
  @javax.annotation.Nullable
  public Long getUserFieldId() {
    return userFieldId;
  }

  public void setUserFieldId(Long userFieldId) {
    this.userFieldId = userFieldId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UserFieldsSimpleVO userFieldsSimpleVO = (UserFieldsSimpleVO) o;
    return Objects.equals(this.isRequired, userFieldsSimpleVO.isRequired) &&
        Objects.equals(this.label, userFieldsSimpleVO.label) &&
        Objects.equals(this.ordinalNumber, userFieldsSimpleVO.ordinalNumber) &&
        Objects.equals(this.paramName, userFieldsSimpleVO.paramName) &&
        Objects.equals(this.type, userFieldsSimpleVO.type) &&
        Objects.equals(this.userFieldId, userFieldsSimpleVO.userFieldId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(isRequired, label, ordinalNumber, paramName, type, userFieldId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UserFieldsSimpleVO {\n");
    sb.append("    isRequired: ").append(toIndentedString(isRequired)).append("\n");
    sb.append("    label: ").append(toIndentedString(label)).append("\n");
    sb.append("    ordinalNumber: ").append(toIndentedString(ordinalNumber)).append("\n");
    sb.append("    paramName: ").append(toIndentedString(paramName)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    userFieldId: ").append(toIndentedString(userFieldId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("is_required");
    openapiFields.add("label");
    openapiFields.add("ordinal_number");
    openapiFields.add("param_name");
    openapiFields.add("type");
    openapiFields.add("user_field_id");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UserFieldsSimpleVO
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UserFieldsSimpleVO.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UserFieldsSimpleVO is not found in the empty JSON string", UserFieldsSimpleVO.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UserFieldsSimpleVO.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UserFieldsSimpleVO` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("label") != null && !jsonObj.get("label").isJsonNull()) && !jsonObj.get("label").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `label` to be a primitive type in the JSON string but got `%s`", jsonObj.get("label").toString()));
      }
      if ((jsonObj.get("param_name") != null && !jsonObj.get("param_name").isJsonNull()) && !jsonObj.get("param_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `param_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("param_name").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UserFieldsSimpleVO.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UserFieldsSimpleVO' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UserFieldsSimpleVO> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UserFieldsSimpleVO.class));

       return (TypeAdapter<T>) new TypeAdapter<UserFieldsSimpleVO>() {
           @Override
           public void write(JsonWriter out, UserFieldsSimpleVO value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UserFieldsSimpleVO read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UserFieldsSimpleVO given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UserFieldsSimpleVO
   * @throws IOException if the JSON string is invalid with respect to UserFieldsSimpleVO
   */
  public static UserFieldsSimpleVO fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UserFieldsSimpleVO.class);
  }

  /**
   * Convert an instance of UserFieldsSimpleVO to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

