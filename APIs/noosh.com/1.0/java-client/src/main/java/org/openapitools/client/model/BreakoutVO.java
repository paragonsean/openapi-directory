/*
 * Noosh API application
 * Full description of Noosh API
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Java type: com.noosh.nooshapi.vo.BreakoutVO
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:59:23.742517-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class BreakoutVO {
  public static final String SERIALIZED_NAME_BREAKOUT_ID = "breakout_id";
  @SerializedName(SERIALIZED_NAME_BREAKOUT_ID)
  private Long breakoutId;

  public static final String SERIALIZED_NAME_BREAKOUT_NAME = "breakout_name";
  @SerializedName(SERIALIZED_NAME_BREAKOUT_NAME)
  private String breakoutName;

  public static final String SERIALIZED_NAME_BREAKOUT_PRE_MARKUP = "breakout_pre_markup";
  @SerializedName(SERIALIZED_NAME_BREAKOUT_PRE_MARKUP)
  private Object breakoutPreMarkup = null;

  public static final String SERIALIZED_NAME_BREAKOUT_PRICE = "breakout_price";
  @SerializedName(SERIALIZED_NAME_BREAKOUT_PRICE)
  private Object breakoutPrice = null;

  public static final String SERIALIZED_NAME_TRANSACTIONAL_BREAKOUT_PRE_MARKUP = "transactional_breakout_pre_markup";
  @SerializedName(SERIALIZED_NAME_TRANSACTIONAL_BREAKOUT_PRE_MARKUP)
  private Object transactionalBreakoutPreMarkup = null;

  public static final String SERIALIZED_NAME_TRANSACTIONAL_BREAKOUT_PRICE = "transactional_breakout_price";
  @SerializedName(SERIALIZED_NAME_TRANSACTIONAL_BREAKOUT_PRICE)
  private Object transactionalBreakoutPrice = null;

  public BreakoutVO() {
  }

  public BreakoutVO breakoutId(Long breakoutId) {
    this.breakoutId = breakoutId;
    return this;
  }

  /**
   * 
   * @return breakoutId
   */
  @javax.annotation.Nullable
  public Long getBreakoutId() {
    return breakoutId;
  }

  public void setBreakoutId(Long breakoutId) {
    this.breakoutId = breakoutId;
  }


  public BreakoutVO breakoutName(String breakoutName) {
    this.breakoutName = breakoutName;
    return this;
  }

  /**
   * 
   * @return breakoutName
   */
  @javax.annotation.Nullable
  public String getBreakoutName() {
    return breakoutName;
  }

  public void setBreakoutName(String breakoutName) {
    this.breakoutName = breakoutName;
  }


  public BreakoutVO breakoutPreMarkup(Object breakoutPreMarkup) {
    this.breakoutPreMarkup = breakoutPreMarkup;
    return this;
  }

  /**
   * Java type: java.math.BigDecimal
   * @return breakoutPreMarkup
   */
  @javax.annotation.Nullable
  public Object getBreakoutPreMarkup() {
    return breakoutPreMarkup;
  }

  public void setBreakoutPreMarkup(Object breakoutPreMarkup) {
    this.breakoutPreMarkup = breakoutPreMarkup;
  }


  public BreakoutVO breakoutPrice(Object breakoutPrice) {
    this.breakoutPrice = breakoutPrice;
    return this;
  }

  /**
   * Java type: java.math.BigDecimal
   * @return breakoutPrice
   */
  @javax.annotation.Nullable
  public Object getBreakoutPrice() {
    return breakoutPrice;
  }

  public void setBreakoutPrice(Object breakoutPrice) {
    this.breakoutPrice = breakoutPrice;
  }


  public BreakoutVO transactionalBreakoutPreMarkup(Object transactionalBreakoutPreMarkup) {
    this.transactionalBreakoutPreMarkup = transactionalBreakoutPreMarkup;
    return this;
  }

  /**
   * Java type: java.math.BigDecimal
   * @return transactionalBreakoutPreMarkup
   */
  @javax.annotation.Nullable
  public Object getTransactionalBreakoutPreMarkup() {
    return transactionalBreakoutPreMarkup;
  }

  public void setTransactionalBreakoutPreMarkup(Object transactionalBreakoutPreMarkup) {
    this.transactionalBreakoutPreMarkup = transactionalBreakoutPreMarkup;
  }


  public BreakoutVO transactionalBreakoutPrice(Object transactionalBreakoutPrice) {
    this.transactionalBreakoutPrice = transactionalBreakoutPrice;
    return this;
  }

  /**
   * Java type: java.math.BigDecimal
   * @return transactionalBreakoutPrice
   */
  @javax.annotation.Nullable
  public Object getTransactionalBreakoutPrice() {
    return transactionalBreakoutPrice;
  }

  public void setTransactionalBreakoutPrice(Object transactionalBreakoutPrice) {
    this.transactionalBreakoutPrice = transactionalBreakoutPrice;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BreakoutVO breakoutVO = (BreakoutVO) o;
    return Objects.equals(this.breakoutId, breakoutVO.breakoutId) &&
        Objects.equals(this.breakoutName, breakoutVO.breakoutName) &&
        Objects.equals(this.breakoutPreMarkup, breakoutVO.breakoutPreMarkup) &&
        Objects.equals(this.breakoutPrice, breakoutVO.breakoutPrice) &&
        Objects.equals(this.transactionalBreakoutPreMarkup, breakoutVO.transactionalBreakoutPreMarkup) &&
        Objects.equals(this.transactionalBreakoutPrice, breakoutVO.transactionalBreakoutPrice);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(breakoutId, breakoutName, breakoutPreMarkup, breakoutPrice, transactionalBreakoutPreMarkup, transactionalBreakoutPrice);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BreakoutVO {\n");
    sb.append("    breakoutId: ").append(toIndentedString(breakoutId)).append("\n");
    sb.append("    breakoutName: ").append(toIndentedString(breakoutName)).append("\n");
    sb.append("    breakoutPreMarkup: ").append(toIndentedString(breakoutPreMarkup)).append("\n");
    sb.append("    breakoutPrice: ").append(toIndentedString(breakoutPrice)).append("\n");
    sb.append("    transactionalBreakoutPreMarkup: ").append(toIndentedString(transactionalBreakoutPreMarkup)).append("\n");
    sb.append("    transactionalBreakoutPrice: ").append(toIndentedString(transactionalBreakoutPrice)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("breakout_id");
    openapiFields.add("breakout_name");
    openapiFields.add("breakout_pre_markup");
    openapiFields.add("breakout_price");
    openapiFields.add("transactional_breakout_pre_markup");
    openapiFields.add("transactional_breakout_price");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BreakoutVO
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!BreakoutVO.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BreakoutVO is not found in the empty JSON string", BreakoutVO.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BreakoutVO.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BreakoutVO` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("breakout_name") != null && !jsonObj.get("breakout_name").isJsonNull()) && !jsonObj.get("breakout_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `breakout_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("breakout_name").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BreakoutVO.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BreakoutVO' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BreakoutVO> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BreakoutVO.class));

       return (TypeAdapter<T>) new TypeAdapter<BreakoutVO>() {
           @Override
           public void write(JsonWriter out, BreakoutVO value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BreakoutVO read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BreakoutVO given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BreakoutVO
   * @throws IOException if the JSON string is invalid with respect to BreakoutVO
   */
  public static BreakoutVO fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BreakoutVO.class);
  }

  /**
   * Convert an instance of BreakoutVO to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

