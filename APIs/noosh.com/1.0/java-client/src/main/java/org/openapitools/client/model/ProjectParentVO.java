/*
 * Noosh API application
 * Full description of Noosh API
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.LocalDate;
import java.util.Arrays;
import org.openapitools.client.model.PersonVO;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Java type: com.noosh.nooshapi.vo.ProjectParentVO
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:59:23.742517-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ProjectParentVO {
  public static final String SERIALIZED_NAME_CLIENT_ACCOUNT = "client_account";
  @SerializedName(SERIALIZED_NAME_CLIENT_ACCOUNT)
  private String clientAccount;

  public static final String SERIALIZED_NAME_CLIENT_USER = "client_user";
  @SerializedName(SERIALIZED_NAME_CLIENT_USER)
  private String clientUser;

  public static final String SERIALIZED_NAME_CLIENT_USER_ID = "client_user_id";
  @SerializedName(SERIALIZED_NAME_CLIENT_USER_ID)
  private Long clientUserId;

  public static final String SERIALIZED_NAME_CLIENT_WORKGROUP_ID = "client_workgroup_id";
  @SerializedName(SERIALIZED_NAME_CLIENT_WORKGROUP_ID)
  private Long clientWorkgroupId;

  public static final String SERIALIZED_NAME_COMMENTS = "comments";
  @SerializedName(SERIALIZED_NAME_COMMENTS)
  private String comments;

  public static final String SERIALIZED_NAME_CREATED_BY = "created_by";
  @SerializedName(SERIALIZED_NAME_CREATED_BY)
  private PersonVO createdBy;

  public static final String SERIALIZED_NAME_PROJECT_CREATE_DATE = "project_create_date";
  @SerializedName(SERIALIZED_NAME_PROJECT_CREATE_DATE)
  private LocalDate projectCreateDate;

  public static final String SERIALIZED_NAME_PROJECT_DESCRIPTION = "project_description";
  @SerializedName(SERIALIZED_NAME_PROJECT_DESCRIPTION)
  private String projectDescription;

  public static final String SERIALIZED_NAME_PROJECT_ID = "project_id";
  @SerializedName(SERIALIZED_NAME_PROJECT_ID)
  private Long projectId;

  public static final String SERIALIZED_NAME_PROJECT_NAME = "project_name";
  @SerializedName(SERIALIZED_NAME_PROJECT_NAME)
  private String projectName;

  public static final String SERIALIZED_NAME_PROJECT_NUMBER = "project_number";
  @SerializedName(SERIALIZED_NAME_PROJECT_NUMBER)
  private String projectNumber;

  public ProjectParentVO() {
  }

  public ProjectParentVO clientAccount(String clientAccount) {
    this.clientAccount = clientAccount;
    return this;
  }

  /**
   * 
   * @return clientAccount
   */
  @javax.annotation.Nullable
  public String getClientAccount() {
    return clientAccount;
  }

  public void setClientAccount(String clientAccount) {
    this.clientAccount = clientAccount;
  }


  public ProjectParentVO clientUser(String clientUser) {
    this.clientUser = clientUser;
    return this;
  }

  /**
   * 
   * @return clientUser
   */
  @javax.annotation.Nullable
  public String getClientUser() {
    return clientUser;
  }

  public void setClientUser(String clientUser) {
    this.clientUser = clientUser;
  }


  public ProjectParentVO clientUserId(Long clientUserId) {
    this.clientUserId = clientUserId;
    return this;
  }

  /**
   * 
   * @return clientUserId
   */
  @javax.annotation.Nullable
  public Long getClientUserId() {
    return clientUserId;
  }

  public void setClientUserId(Long clientUserId) {
    this.clientUserId = clientUserId;
  }


  public ProjectParentVO clientWorkgroupId(Long clientWorkgroupId) {
    this.clientWorkgroupId = clientWorkgroupId;
    return this;
  }

  /**
   * 
   * @return clientWorkgroupId
   */
  @javax.annotation.Nullable
  public Long getClientWorkgroupId() {
    return clientWorkgroupId;
  }

  public void setClientWorkgroupId(Long clientWorkgroupId) {
    this.clientWorkgroupId = clientWorkgroupId;
  }


  public ProjectParentVO comments(String comments) {
    this.comments = comments;
    return this;
  }

  /**
   * 
   * @return comments
   */
  @javax.annotation.Nullable
  public String getComments() {
    return comments;
  }

  public void setComments(String comments) {
    this.comments = comments;
  }


  public ProjectParentVO createdBy(PersonVO createdBy) {
    this.createdBy = createdBy;
    return this;
  }

  /**
   * Get createdBy
   * @return createdBy
   */
  @javax.annotation.Nullable
  public PersonVO getCreatedBy() {
    return createdBy;
  }

  public void setCreatedBy(PersonVO createdBy) {
    this.createdBy = createdBy;
  }


  public ProjectParentVO projectCreateDate(LocalDate projectCreateDate) {
    this.projectCreateDate = projectCreateDate;
    return this;
  }

  /**
   * 
   * @return projectCreateDate
   */
  @javax.annotation.Nullable
  public LocalDate getProjectCreateDate() {
    return projectCreateDate;
  }

  public void setProjectCreateDate(LocalDate projectCreateDate) {
    this.projectCreateDate = projectCreateDate;
  }


  public ProjectParentVO projectDescription(String projectDescription) {
    this.projectDescription = projectDescription;
    return this;
  }

  /**
   * 
   * @return projectDescription
   */
  @javax.annotation.Nullable
  public String getProjectDescription() {
    return projectDescription;
  }

  public void setProjectDescription(String projectDescription) {
    this.projectDescription = projectDescription;
  }


  public ProjectParentVO projectId(Long projectId) {
    this.projectId = projectId;
    return this;
  }

  /**
   * 
   * @return projectId
   */
  @javax.annotation.Nullable
  public Long getProjectId() {
    return projectId;
  }

  public void setProjectId(Long projectId) {
    this.projectId = projectId;
  }


  public ProjectParentVO projectName(String projectName) {
    this.projectName = projectName;
    return this;
  }

  /**
   * 
   * @return projectName
   */
  @javax.annotation.Nullable
  public String getProjectName() {
    return projectName;
  }

  public void setProjectName(String projectName) {
    this.projectName = projectName;
  }


  public ProjectParentVO projectNumber(String projectNumber) {
    this.projectNumber = projectNumber;
    return this;
  }

  /**
   * 
   * @return projectNumber
   */
  @javax.annotation.Nullable
  public String getProjectNumber() {
    return projectNumber;
  }

  public void setProjectNumber(String projectNumber) {
    this.projectNumber = projectNumber;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProjectParentVO projectParentVO = (ProjectParentVO) o;
    return Objects.equals(this.clientAccount, projectParentVO.clientAccount) &&
        Objects.equals(this.clientUser, projectParentVO.clientUser) &&
        Objects.equals(this.clientUserId, projectParentVO.clientUserId) &&
        Objects.equals(this.clientWorkgroupId, projectParentVO.clientWorkgroupId) &&
        Objects.equals(this.comments, projectParentVO.comments) &&
        Objects.equals(this.createdBy, projectParentVO.createdBy) &&
        Objects.equals(this.projectCreateDate, projectParentVO.projectCreateDate) &&
        Objects.equals(this.projectDescription, projectParentVO.projectDescription) &&
        Objects.equals(this.projectId, projectParentVO.projectId) &&
        Objects.equals(this.projectName, projectParentVO.projectName) &&
        Objects.equals(this.projectNumber, projectParentVO.projectNumber);
  }

  @Override
  public int hashCode() {
    return Objects.hash(clientAccount, clientUser, clientUserId, clientWorkgroupId, comments, createdBy, projectCreateDate, projectDescription, projectId, projectName, projectNumber);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProjectParentVO {\n");
    sb.append("    clientAccount: ").append(toIndentedString(clientAccount)).append("\n");
    sb.append("    clientUser: ").append(toIndentedString(clientUser)).append("\n");
    sb.append("    clientUserId: ").append(toIndentedString(clientUserId)).append("\n");
    sb.append("    clientWorkgroupId: ").append(toIndentedString(clientWorkgroupId)).append("\n");
    sb.append("    comments: ").append(toIndentedString(comments)).append("\n");
    sb.append("    createdBy: ").append(toIndentedString(createdBy)).append("\n");
    sb.append("    projectCreateDate: ").append(toIndentedString(projectCreateDate)).append("\n");
    sb.append("    projectDescription: ").append(toIndentedString(projectDescription)).append("\n");
    sb.append("    projectId: ").append(toIndentedString(projectId)).append("\n");
    sb.append("    projectName: ").append(toIndentedString(projectName)).append("\n");
    sb.append("    projectNumber: ").append(toIndentedString(projectNumber)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("client_account");
    openapiFields.add("client_user");
    openapiFields.add("client_user_id");
    openapiFields.add("client_workgroup_id");
    openapiFields.add("comments");
    openapiFields.add("created_by");
    openapiFields.add("project_create_date");
    openapiFields.add("project_description");
    openapiFields.add("project_id");
    openapiFields.add("project_name");
    openapiFields.add("project_number");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ProjectParentVO
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ProjectParentVO.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ProjectParentVO is not found in the empty JSON string", ProjectParentVO.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ProjectParentVO.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ProjectParentVO` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("client_account") != null && !jsonObj.get("client_account").isJsonNull()) && !jsonObj.get("client_account").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `client_account` to be a primitive type in the JSON string but got `%s`", jsonObj.get("client_account").toString()));
      }
      if ((jsonObj.get("client_user") != null && !jsonObj.get("client_user").isJsonNull()) && !jsonObj.get("client_user").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `client_user` to be a primitive type in the JSON string but got `%s`", jsonObj.get("client_user").toString()));
      }
      if ((jsonObj.get("comments") != null && !jsonObj.get("comments").isJsonNull()) && !jsonObj.get("comments").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `comments` to be a primitive type in the JSON string but got `%s`", jsonObj.get("comments").toString()));
      }
      // validate the optional field `created_by`
      if (jsonObj.get("created_by") != null && !jsonObj.get("created_by").isJsonNull()) {
        PersonVO.validateJsonElement(jsonObj.get("created_by"));
      }
      if ((jsonObj.get("project_description") != null && !jsonObj.get("project_description").isJsonNull()) && !jsonObj.get("project_description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `project_description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("project_description").toString()));
      }
      if ((jsonObj.get("project_name") != null && !jsonObj.get("project_name").isJsonNull()) && !jsonObj.get("project_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `project_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("project_name").toString()));
      }
      if ((jsonObj.get("project_number") != null && !jsonObj.get("project_number").isJsonNull()) && !jsonObj.get("project_number").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `project_number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("project_number").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ProjectParentVO.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ProjectParentVO' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ProjectParentVO> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ProjectParentVO.class));

       return (TypeAdapter<T>) new TypeAdapter<ProjectParentVO>() {
           @Override
           public void write(JsonWriter out, ProjectParentVO value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ProjectParentVO read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ProjectParentVO given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ProjectParentVO
   * @throws IOException if the JSON string is invalid with respect to ProjectParentVO
   */
  public static ProjectParentVO fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ProjectParentVO.class);
  }

  /**
   * Convert an instance of ProjectParentVO to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

