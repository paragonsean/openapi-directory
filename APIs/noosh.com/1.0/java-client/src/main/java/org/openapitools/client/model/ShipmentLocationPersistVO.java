/*
 * Noosh API application
 * Full description of Noosh API
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.LocalDate;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Java type: com.noosh.domain.nooshapi.persist.vo.ShipmentLocationPersistVO
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:59:23.742517-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ShipmentLocationPersistVO {
  public static final String SERIALIZED_NAME_DUE_DATE = "due_date";
  @SerializedName(SERIALIZED_NAME_DUE_DATE)
  private LocalDate dueDate;

  public static final String SERIALIZED_NAME_QTY_RECEIVED = "qty_received";
  @SerializedName(SERIALIZED_NAME_QTY_RECEIVED)
  private Long qtyReceived;

  public static final String SERIALIZED_NAME_QTY_REQUESTED = "qty_requested";
  @SerializedName(SERIALIZED_NAME_QTY_REQUESTED)
  private Long qtyRequested;

  public static final String SERIALIZED_NAME_QTY_SHIPPED = "qty_shipped";
  @SerializedName(SERIALIZED_NAME_QTY_SHIPPED)
  private Long qtyShipped;

  public static final String SERIALIZED_NAME_RECEIVED_DATE = "received_date";
  @SerializedName(SERIALIZED_NAME_RECEIVED_DATE)
  private LocalDate receivedDate;

  public static final String SERIALIZED_NAME_SHIPPED_DATE = "shipped_date";
  @SerializedName(SERIALIZED_NAME_SHIPPED_DATE)
  private LocalDate shippedDate;

  public static final String SERIALIZED_NAME_SHIPPING_COST = "shipping_cost";
  @SerializedName(SERIALIZED_NAME_SHIPPING_COST)
  private Object shippingCost = null;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public ShipmentLocationPersistVO() {
  }

  public ShipmentLocationPersistVO dueDate(LocalDate dueDate) {
    this.dueDate = dueDate;
    return this;
  }

  /**
   * 
   * @return dueDate
   */
  @javax.annotation.Nullable
  public LocalDate getDueDate() {
    return dueDate;
  }

  public void setDueDate(LocalDate dueDate) {
    this.dueDate = dueDate;
  }


  public ShipmentLocationPersistVO qtyReceived(Long qtyReceived) {
    this.qtyReceived = qtyReceived;
    return this;
  }

  /**
   * 
   * @return qtyReceived
   */
  @javax.annotation.Nullable
  public Long getQtyReceived() {
    return qtyReceived;
  }

  public void setQtyReceived(Long qtyReceived) {
    this.qtyReceived = qtyReceived;
  }


  public ShipmentLocationPersistVO qtyRequested(Long qtyRequested) {
    this.qtyRequested = qtyRequested;
    return this;
  }

  /**
   * 
   * @return qtyRequested
   */
  @javax.annotation.Nullable
  public Long getQtyRequested() {
    return qtyRequested;
  }

  public void setQtyRequested(Long qtyRequested) {
    this.qtyRequested = qtyRequested;
  }


  public ShipmentLocationPersistVO qtyShipped(Long qtyShipped) {
    this.qtyShipped = qtyShipped;
    return this;
  }

  /**
   * 
   * @return qtyShipped
   */
  @javax.annotation.Nullable
  public Long getQtyShipped() {
    return qtyShipped;
  }

  public void setQtyShipped(Long qtyShipped) {
    this.qtyShipped = qtyShipped;
  }


  public ShipmentLocationPersistVO receivedDate(LocalDate receivedDate) {
    this.receivedDate = receivedDate;
    return this;
  }

  /**
   * 
   * @return receivedDate
   */
  @javax.annotation.Nullable
  public LocalDate getReceivedDate() {
    return receivedDate;
  }

  public void setReceivedDate(LocalDate receivedDate) {
    this.receivedDate = receivedDate;
  }


  public ShipmentLocationPersistVO shippedDate(LocalDate shippedDate) {
    this.shippedDate = shippedDate;
    return this;
  }

  /**
   * 
   * @return shippedDate
   */
  @javax.annotation.Nullable
  public LocalDate getShippedDate() {
    return shippedDate;
  }

  public void setShippedDate(LocalDate shippedDate) {
    this.shippedDate = shippedDate;
  }


  public ShipmentLocationPersistVO shippingCost(Object shippingCost) {
    this.shippingCost = shippingCost;
    return this;
  }

  /**
   * Java type: java.math.BigDecimal
   * @return shippingCost
   */
  @javax.annotation.Nullable
  public Object getShippingCost() {
    return shippingCost;
  }

  public void setShippingCost(Object shippingCost) {
    this.shippingCost = shippingCost;
  }


  public ShipmentLocationPersistVO type(String type) {
    this.type = type;
    return this;
  }

  /**
   * 
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ShipmentLocationPersistVO shipmentLocationPersistVO = (ShipmentLocationPersistVO) o;
    return Objects.equals(this.dueDate, shipmentLocationPersistVO.dueDate) &&
        Objects.equals(this.qtyReceived, shipmentLocationPersistVO.qtyReceived) &&
        Objects.equals(this.qtyRequested, shipmentLocationPersistVO.qtyRequested) &&
        Objects.equals(this.qtyShipped, shipmentLocationPersistVO.qtyShipped) &&
        Objects.equals(this.receivedDate, shipmentLocationPersistVO.receivedDate) &&
        Objects.equals(this.shippedDate, shipmentLocationPersistVO.shippedDate) &&
        Objects.equals(this.shippingCost, shipmentLocationPersistVO.shippingCost) &&
        Objects.equals(this.type, shipmentLocationPersistVO.type);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(dueDate, qtyReceived, qtyRequested, qtyShipped, receivedDate, shippedDate, shippingCost, type);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ShipmentLocationPersistVO {\n");
    sb.append("    dueDate: ").append(toIndentedString(dueDate)).append("\n");
    sb.append("    qtyReceived: ").append(toIndentedString(qtyReceived)).append("\n");
    sb.append("    qtyRequested: ").append(toIndentedString(qtyRequested)).append("\n");
    sb.append("    qtyShipped: ").append(toIndentedString(qtyShipped)).append("\n");
    sb.append("    receivedDate: ").append(toIndentedString(receivedDate)).append("\n");
    sb.append("    shippedDate: ").append(toIndentedString(shippedDate)).append("\n");
    sb.append("    shippingCost: ").append(toIndentedString(shippingCost)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("due_date");
    openapiFields.add("qty_received");
    openapiFields.add("qty_requested");
    openapiFields.add("qty_shipped");
    openapiFields.add("received_date");
    openapiFields.add("shipped_date");
    openapiFields.add("shipping_cost");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ShipmentLocationPersistVO
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ShipmentLocationPersistVO.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ShipmentLocationPersistVO is not found in the empty JSON string", ShipmentLocationPersistVO.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ShipmentLocationPersistVO.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ShipmentLocationPersistVO` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ShipmentLocationPersistVO.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ShipmentLocationPersistVO' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ShipmentLocationPersistVO> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ShipmentLocationPersistVO.class));

       return (TypeAdapter<T>) new TypeAdapter<ShipmentLocationPersistVO>() {
           @Override
           public void write(JsonWriter out, ShipmentLocationPersistVO value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ShipmentLocationPersistVO read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ShipmentLocationPersistVO given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ShipmentLocationPersistVO
   * @throws IOException if the JSON string is invalid with respect to ShipmentLocationPersistVO
   */
  public static ShipmentLocationPersistVO fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ShipmentLocationPersistVO.class);
  }

  /**
   * Convert an instance of ShipmentLocationPersistVO to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

