/*
 * Noosh API application
 * Full description of Noosh API
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.V1x1SpecPamAndAttVO;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Java type: com.noosh.nooshapi.vo.v1x1.V1x1ProperyVO
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:59:23.742517-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class V1x1ProperyVO {
  public static final String SERIALIZED_NAME_PROPERTY_ATTRIBUTES = "property_attributes";
  @SerializedName(SERIALIZED_NAME_PROPERTY_ATTRIBUTES)
  private List<V1x1SpecPamAndAttVO> propertyAttributes = new ArrayList<>();

  public static final String SERIALIZED_NAME_PROPERTY_ID = "property_id";
  @SerializedName(SERIALIZED_NAME_PROPERTY_ID)
  private Long propertyId;

  public static final String SERIALIZED_NAME_PROPERTY_NAME = "property_name";
  @SerializedName(SERIALIZED_NAME_PROPERTY_NAME)
  private String propertyName;

  public V1x1ProperyVO() {
  }

  public V1x1ProperyVO propertyAttributes(List<V1x1SpecPamAndAttVO> propertyAttributes) {
    this.propertyAttributes = propertyAttributes;
    return this;
  }

  public V1x1ProperyVO addPropertyAttributesItem(V1x1SpecPamAndAttVO propertyAttributesItem) {
    if (this.propertyAttributes == null) {
      this.propertyAttributes = new ArrayList<>();
    }
    this.propertyAttributes.add(propertyAttributesItem);
    return this;
  }

  /**
   * 
   * @return propertyAttributes
   */
  @javax.annotation.Nullable
  public List<V1x1SpecPamAndAttVO> getPropertyAttributes() {
    return propertyAttributes;
  }

  public void setPropertyAttributes(List<V1x1SpecPamAndAttVO> propertyAttributes) {
    this.propertyAttributes = propertyAttributes;
  }


  public V1x1ProperyVO propertyId(Long propertyId) {
    this.propertyId = propertyId;
    return this;
  }

  /**
   * 
   * @return propertyId
   */
  @javax.annotation.Nullable
  public Long getPropertyId() {
    return propertyId;
  }

  public void setPropertyId(Long propertyId) {
    this.propertyId = propertyId;
  }


  public V1x1ProperyVO propertyName(String propertyName) {
    this.propertyName = propertyName;
    return this;
  }

  /**
   * 
   * @return propertyName
   */
  @javax.annotation.Nullable
  public String getPropertyName() {
    return propertyName;
  }

  public void setPropertyName(String propertyName) {
    this.propertyName = propertyName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    V1x1ProperyVO v1x1ProperyVO = (V1x1ProperyVO) o;
    return Objects.equals(this.propertyAttributes, v1x1ProperyVO.propertyAttributes) &&
        Objects.equals(this.propertyId, v1x1ProperyVO.propertyId) &&
        Objects.equals(this.propertyName, v1x1ProperyVO.propertyName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(propertyAttributes, propertyId, propertyName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class V1x1ProperyVO {\n");
    sb.append("    propertyAttributes: ").append(toIndentedString(propertyAttributes)).append("\n");
    sb.append("    propertyId: ").append(toIndentedString(propertyId)).append("\n");
    sb.append("    propertyName: ").append(toIndentedString(propertyName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("property_attributes");
    openapiFields.add("property_id");
    openapiFields.add("property_name");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to V1x1ProperyVO
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!V1x1ProperyVO.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in V1x1ProperyVO is not found in the empty JSON string", V1x1ProperyVO.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!V1x1ProperyVO.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `V1x1ProperyVO` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("property_attributes") != null && !jsonObj.get("property_attributes").isJsonNull()) {
        JsonArray jsonArraypropertyAttributes = jsonObj.getAsJsonArray("property_attributes");
        if (jsonArraypropertyAttributes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("property_attributes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `property_attributes` to be an array in the JSON string but got `%s`", jsonObj.get("property_attributes").toString()));
          }

          // validate the optional field `property_attributes` (array)
          for (int i = 0; i < jsonArraypropertyAttributes.size(); i++) {
            V1x1SpecPamAndAttVO.validateJsonElement(jsonArraypropertyAttributes.get(i));
          };
        }
      }
      if ((jsonObj.get("property_name") != null && !jsonObj.get("property_name").isJsonNull()) && !jsonObj.get("property_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `property_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("property_name").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!V1x1ProperyVO.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'V1x1ProperyVO' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<V1x1ProperyVO> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(V1x1ProperyVO.class));

       return (TypeAdapter<T>) new TypeAdapter<V1x1ProperyVO>() {
           @Override
           public void write(JsonWriter out, V1x1ProperyVO value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public V1x1ProperyVO read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of V1x1ProperyVO given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of V1x1ProperyVO
   * @throws IOException if the JSON string is invalid with respect to V1x1ProperyVO
   */
  public static V1x1ProperyVO fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, V1x1ProperyVO.class);
  }

  /**
   * Convert an instance of V1x1ProperyVO to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

