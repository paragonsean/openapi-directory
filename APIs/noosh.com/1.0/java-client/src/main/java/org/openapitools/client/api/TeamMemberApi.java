/*
 * Noosh API application
 * Full description of Noosh API
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ContactUserVO;
import org.openapitools.client.model.HTTPStatusVO;
import org.openapitools.client.model.TeamMemberBaseInfVO;
import org.openapitools.client.model.TeamMemberListVO;
import org.openapitools.client.model.TeamMemberPO;
import org.openapitools.client.model.V1x1InvitedTeamMemberResultsVO;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TeamMemberApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TeamMemberApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TeamMemberApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for deleteTeamMemberOfProject
     * @param workgroupId  (required)
     * @param projectId  (required)
     * @param teammemberId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful retrieval </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> There are not any result matching your search condition </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteTeamMemberOfProjectCall(String workgroupId, String projectId, String teammemberId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/workgroups/{workgroup_id}/projects/{project_id}/teammembers/{teammember_id}"
            .replace("{" + "workgroup_id" + "}", localVarApiClient.escapeString(workgroupId.toString()))
            .replace("{" + "project_id" + "}", localVarApiClient.escapeString(projectId.toString()))
            .replace("{" + "teammember_id" + "}", localVarApiClient.escapeString(teammemberId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*",
            "application/json",
            "application/x-json-smile",
            "application/x-yaml",
            "application/xml",
            "text/csv",
            "text/x-yaml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteTeamMemberOfProjectValidateBeforeCall(String workgroupId, String projectId, String teammemberId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workgroupId' is set
        if (workgroupId == null) {
            throw new ApiException("Missing the required parameter 'workgroupId' when calling deleteTeamMemberOfProject(Async)");
        }

        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling deleteTeamMemberOfProject(Async)");
        }

        // verify the required parameter 'teammemberId' is set
        if (teammemberId == null) {
            throw new ApiException("Missing the required parameter 'teammemberId' when calling deleteTeamMemberOfProject(Async)");
        }

        return deleteTeamMemberOfProjectCall(workgroupId, projectId, teammemberId, _callback);

    }

    /**
     * Delete a team member for the specific project.
     * Delete a team member for the specific project.
     * @param workgroupId  (required)
     * @param projectId  (required)
     * @param teammemberId  (required)
     * @return TeamMemberBaseInfVO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful retrieval </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> There are not any result matching your search condition </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public TeamMemberBaseInfVO deleteTeamMemberOfProject(String workgroupId, String projectId, String teammemberId) throws ApiException {
        ApiResponse<TeamMemberBaseInfVO> localVarResp = deleteTeamMemberOfProjectWithHttpInfo(workgroupId, projectId, teammemberId);
        return localVarResp.getData();
    }

    /**
     * Delete a team member for the specific project.
     * Delete a team member for the specific project.
     * @param workgroupId  (required)
     * @param projectId  (required)
     * @param teammemberId  (required)
     * @return ApiResponse&lt;TeamMemberBaseInfVO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful retrieval </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> There are not any result matching your search condition </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TeamMemberBaseInfVO> deleteTeamMemberOfProjectWithHttpInfo(String workgroupId, String projectId, String teammemberId) throws ApiException {
        okhttp3.Call localVarCall = deleteTeamMemberOfProjectValidateBeforeCall(workgroupId, projectId, teammemberId, null);
        Type localVarReturnType = new TypeToken<TeamMemberBaseInfVO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete a team member for the specific project. (asynchronously)
     * Delete a team member for the specific project.
     * @param workgroupId  (required)
     * @param projectId  (required)
     * @param teammemberId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful retrieval </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> There are not any result matching your search condition </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteTeamMemberOfProjectAsync(String workgroupId, String projectId, String teammemberId, final ApiCallback<TeamMemberBaseInfVO> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteTeamMemberOfProjectValidateBeforeCall(workgroupId, projectId, teammemberId, _callback);
        Type localVarReturnType = new TypeToken<TeamMemberBaseInfVO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getTeamMemberListOfClientProject
     * @param workgroupId  (required)
     * @param projectId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful retrieval </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> There are not any result matching your search condition </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTeamMemberListOfClientProjectCall(String workgroupId, String projectId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/workgroups/{workgroup_id}/projects/{project_id}/teamMembersOfClientProject"
            .replace("{" + "workgroup_id" + "}", localVarApiClient.escapeString(workgroupId.toString()))
            .replace("{" + "project_id" + "}", localVarApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*",
            "application/json",
            "application/x-json-smile",
            "application/x-yaml",
            "application/xml",
            "text/csv",
            "text/x-yaml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTeamMemberListOfClientProjectValidateBeforeCall(String workgroupId, String projectId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workgroupId' is set
        if (workgroupId == null) {
            throw new ApiException("Missing the required parameter 'workgroupId' when calling getTeamMemberListOfClientProject(Async)");
        }

        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling getTeamMemberListOfClientProject(Async)");
        }

        return getTeamMemberListOfClientProjectCall(workgroupId, projectId, _callback);

    }

    /**
     * List team member of client project side.
     * List team member of client project side.
     * @param workgroupId  (required)
     * @param projectId  (required)
     * @return TeamMemberListVO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful retrieval </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> There are not any result matching your search condition </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public TeamMemberListVO getTeamMemberListOfClientProject(String workgroupId, String projectId) throws ApiException {
        ApiResponse<TeamMemberListVO> localVarResp = getTeamMemberListOfClientProjectWithHttpInfo(workgroupId, projectId);
        return localVarResp.getData();
    }

    /**
     * List team member of client project side.
     * List team member of client project side.
     * @param workgroupId  (required)
     * @param projectId  (required)
     * @return ApiResponse&lt;TeamMemberListVO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful retrieval </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> There are not any result matching your search condition </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TeamMemberListVO> getTeamMemberListOfClientProjectWithHttpInfo(String workgroupId, String projectId) throws ApiException {
        okhttp3.Call localVarCall = getTeamMemberListOfClientProjectValidateBeforeCall(workgroupId, projectId, null);
        Type localVarReturnType = new TypeToken<TeamMemberListVO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List team member of client project side. (asynchronously)
     * List team member of client project side.
     * @param workgroupId  (required)
     * @param projectId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful retrieval </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> There are not any result matching your search condition </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTeamMemberListOfClientProjectAsync(String workgroupId, String projectId, final ApiCallback<TeamMemberListVO> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTeamMemberListOfClientProjectValidateBeforeCall(workgroupId, projectId, _callback);
        Type localVarReturnType = new TypeToken<TeamMemberListVO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getTeamMemberListOfProject
     * @param workgroupId  (required)
     * @param projectId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful retrieval </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> There are not any result matching your search condition </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTeamMemberListOfProjectCall(String workgroupId, String projectId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/workgroups/{workgroup_id}/projects/{project_id}/teammembers"
            .replace("{" + "workgroup_id" + "}", localVarApiClient.escapeString(workgroupId.toString()))
            .replace("{" + "project_id" + "}", localVarApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*",
            "application/json",
            "application/x-json-smile",
            "application/x-yaml",
            "application/xml",
            "text/csv",
            "text/x-yaml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTeamMemberListOfProjectValidateBeforeCall(String workgroupId, String projectId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workgroupId' is set
        if (workgroupId == null) {
            throw new ApiException("Missing the required parameter 'workgroupId' when calling getTeamMemberListOfProject(Async)");
        }

        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling getTeamMemberListOfProject(Async)");
        }

        return getTeamMemberListOfProjectCall(workgroupId, projectId, _callback);

    }

    /**
     * List team member of project.
     * List team member of project.
     * @param workgroupId  (required)
     * @param projectId  (required)
     * @return TeamMemberListVO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful retrieval </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> There are not any result matching your search condition </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public TeamMemberListVO getTeamMemberListOfProject(String workgroupId, String projectId) throws ApiException {
        ApiResponse<TeamMemberListVO> localVarResp = getTeamMemberListOfProjectWithHttpInfo(workgroupId, projectId);
        return localVarResp.getData();
    }

    /**
     * List team member of project.
     * List team member of project.
     * @param workgroupId  (required)
     * @param projectId  (required)
     * @return ApiResponse&lt;TeamMemberListVO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful retrieval </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> There are not any result matching your search condition </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TeamMemberListVO> getTeamMemberListOfProjectWithHttpInfo(String workgroupId, String projectId) throws ApiException {
        okhttp3.Call localVarCall = getTeamMemberListOfProjectValidateBeforeCall(workgroupId, projectId, null);
        Type localVarReturnType = new TypeToken<TeamMemberListVO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List team member of project. (asynchronously)
     * List team member of project.
     * @param workgroupId  (required)
     * @param projectId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful retrieval </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> There are not any result matching your search condition </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTeamMemberListOfProjectAsync(String workgroupId, String projectId, final ApiCallback<TeamMemberListVO> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTeamMemberListOfProjectValidateBeforeCall(workgroupId, projectId, _callback);
        Type localVarReturnType = new TypeToken<TeamMemberListVO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postTeamMemberOfProject
     * @param workgroupId  (required)
     * @param projectId  (required)
     * @param teamMemberPO  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful retrieval </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Invalid data </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postTeamMemberOfProjectCall(String workgroupId, String projectId, TeamMemberPO teamMemberPO, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = teamMemberPO;

        // create path and map variables
        String localVarPath = "/1.1/workgroups/{workgroup_id}/projects/{project_id}/teammembers"
            .replace("{" + "workgroup_id" + "}", localVarApiClient.escapeString(workgroupId.toString()))
            .replace("{" + "project_id" + "}", localVarApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*",
            "application/json",
            "application/x-json-smile",
            "application/x-yaml",
            "application/xml",
            "text/csv",
            "text/x-yaml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-json-smile",
            "application/x-yaml",
            "application/xml",
            "text/csv",
            "text/x-yaml",
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postTeamMemberOfProjectValidateBeforeCall(String workgroupId, String projectId, TeamMemberPO teamMemberPO, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workgroupId' is set
        if (workgroupId == null) {
            throw new ApiException("Missing the required parameter 'workgroupId' when calling postTeamMemberOfProject(Async)");
        }

        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling postTeamMemberOfProject(Async)");
        }

        return postTeamMemberOfProjectCall(workgroupId, projectId, teamMemberPO, _callback);

    }

    /**
     * Invite a team member or all the members of team template for the specific project.
     * Invite a team member or all the members of team template for the specific project.
     * @param workgroupId  (required)
     * @param projectId  (required)
     * @param teamMemberPO  (optional)
     * @return V1x1InvitedTeamMemberResultsVO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful retrieval </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Invalid data </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public V1x1InvitedTeamMemberResultsVO postTeamMemberOfProject(String workgroupId, String projectId, TeamMemberPO teamMemberPO) throws ApiException {
        ApiResponse<V1x1InvitedTeamMemberResultsVO> localVarResp = postTeamMemberOfProjectWithHttpInfo(workgroupId, projectId, teamMemberPO);
        return localVarResp.getData();
    }

    /**
     * Invite a team member or all the members of team template for the specific project.
     * Invite a team member or all the members of team template for the specific project.
     * @param workgroupId  (required)
     * @param projectId  (required)
     * @param teamMemberPO  (optional)
     * @return ApiResponse&lt;V1x1InvitedTeamMemberResultsVO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful retrieval </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Invalid data </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<V1x1InvitedTeamMemberResultsVO> postTeamMemberOfProjectWithHttpInfo(String workgroupId, String projectId, TeamMemberPO teamMemberPO) throws ApiException {
        okhttp3.Call localVarCall = postTeamMemberOfProjectValidateBeforeCall(workgroupId, projectId, teamMemberPO, null);
        Type localVarReturnType = new TypeToken<V1x1InvitedTeamMemberResultsVO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Invite a team member or all the members of team template for the specific project. (asynchronously)
     * Invite a team member or all the members of team template for the specific project.
     * @param workgroupId  (required)
     * @param projectId  (required)
     * @param teamMemberPO  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful retrieval </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Invalid data </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postTeamMemberOfProjectAsync(String workgroupId, String projectId, TeamMemberPO teamMemberPO, final ApiCallback<V1x1InvitedTeamMemberResultsVO> _callback) throws ApiException {

        okhttp3.Call localVarCall = postTeamMemberOfProjectValidateBeforeCall(workgroupId, projectId, teamMemberPO, _callback);
        Type localVarReturnType = new TypeToken<V1x1InvitedTeamMemberResultsVO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1WorkgroupsWorkgroupIdProjectsProjectIdTeammembersPost
     * @param workgroupId  (required)
     * @param projectId  (required)
     * @param contactUserVO  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful retrieval </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Invalid data </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1WorkgroupsWorkgroupIdProjectsProjectIdTeammembersPostCall(String workgroupId, String projectId, ContactUserVO contactUserVO, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = contactUserVO;

        // create path and map variables
        String localVarPath = "/v1/workgroups/{workgroup_id}/projects/{project_id}/teammembers"
            .replace("{" + "workgroup_id" + "}", localVarApiClient.escapeString(workgroupId.toString()))
            .replace("{" + "project_id" + "}", localVarApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*",
            "application/json",
            "application/x-json-smile",
            "application/x-yaml",
            "application/xml",
            "text/csv",
            "text/x-yaml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-json-smile",
            "application/x-yaml",
            "application/xml",
            "text/csv",
            "text/x-yaml",
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1WorkgroupsWorkgroupIdProjectsProjectIdTeammembersPostValidateBeforeCall(String workgroupId, String projectId, ContactUserVO contactUserVO, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workgroupId' is set
        if (workgroupId == null) {
            throw new ApiException("Missing the required parameter 'workgroupId' when calling v1WorkgroupsWorkgroupIdProjectsProjectIdTeammembersPost(Async)");
        }

        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling v1WorkgroupsWorkgroupIdProjectsProjectIdTeammembersPost(Async)");
        }

        return v1WorkgroupsWorkgroupIdProjectsProjectIdTeammembersPostCall(workgroupId, projectId, contactUserVO, _callback);

    }

    /**
     * Deprecated, please use 1.1 Version
     * Deprecated, please use 1.1 Version
     * @param workgroupId  (required)
     * @param projectId  (required)
     * @param contactUserVO  (optional)
     * @return TeamMemberBaseInfVO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful retrieval </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Invalid data </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public TeamMemberBaseInfVO v1WorkgroupsWorkgroupIdProjectsProjectIdTeammembersPost(String workgroupId, String projectId, ContactUserVO contactUserVO) throws ApiException {
        ApiResponse<TeamMemberBaseInfVO> localVarResp = v1WorkgroupsWorkgroupIdProjectsProjectIdTeammembersPostWithHttpInfo(workgroupId, projectId, contactUserVO);
        return localVarResp.getData();
    }

    /**
     * Deprecated, please use 1.1 Version
     * Deprecated, please use 1.1 Version
     * @param workgroupId  (required)
     * @param projectId  (required)
     * @param contactUserVO  (optional)
     * @return ApiResponse&lt;TeamMemberBaseInfVO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful retrieval </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Invalid data </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TeamMemberBaseInfVO> v1WorkgroupsWorkgroupIdProjectsProjectIdTeammembersPostWithHttpInfo(String workgroupId, String projectId, ContactUserVO contactUserVO) throws ApiException {
        okhttp3.Call localVarCall = v1WorkgroupsWorkgroupIdProjectsProjectIdTeammembersPostValidateBeforeCall(workgroupId, projectId, contactUserVO, null);
        Type localVarReturnType = new TypeToken<TeamMemberBaseInfVO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Deprecated, please use 1.1 Version (asynchronously)
     * Deprecated, please use 1.1 Version
     * @param workgroupId  (required)
     * @param projectId  (required)
     * @param contactUserVO  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful retrieval </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Invalid data </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1WorkgroupsWorkgroupIdProjectsProjectIdTeammembersPostAsync(String workgroupId, String projectId, ContactUserVO contactUserVO, final ApiCallback<TeamMemberBaseInfVO> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1WorkgroupsWorkgroupIdProjectsProjectIdTeammembersPostValidateBeforeCall(workgroupId, projectId, contactUserVO, _callback);
        Type localVarReturnType = new TypeToken<TeamMemberBaseInfVO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
