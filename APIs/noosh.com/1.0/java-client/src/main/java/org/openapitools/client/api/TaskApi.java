/*
 * Noosh API application
 * Full description of Noosh API
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.HTTPStatusVO;
import org.openapitools.client.model.TaskCreatedVO;
import org.openapitools.client.model.TaskExpandVO;
import org.openapitools.client.model.TaskExpandWorkgroupLevelVO;
import org.openapitools.client.model.TaskListVO;
import org.openapitools.client.model.TaskPersistVO;
import org.openapitools.client.model.TaskPriorityListVO;
import org.openapitools.client.model.TaskStatusListVO;
import org.openapitools.client.model.TaskTypeListVO;
import org.openapitools.client.model.TaskWorkgroupLevelListVO;
import org.openapitools.client.model.WgTaskStatusListVO;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TaskApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TaskApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TaskApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getCustomTaskTypesOfWg
     * @param workgroupId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful retrieval </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> There are not any result matching your search condition </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCustomTaskTypesOfWgCall(String workgroupId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/workgroups/{workgroup_id}/customTaskTypes"
            .replace("{" + "workgroup_id" + "}", localVarApiClient.escapeString(workgroupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*",
            "application/json",
            "application/x-json-smile",
            "application/x-yaml",
            "application/xml",
            "text/csv",
            "text/x-yaml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCustomTaskTypesOfWgValidateBeforeCall(String workgroupId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workgroupId' is set
        if (workgroupId == null) {
            throw new ApiException("Missing the required parameter 'workgroupId' when calling getCustomTaskTypesOfWg(Async)");
        }

        return getCustomTaskTypesOfWgCall(workgroupId, _callback);

    }

    /**
     * Get custom task types of workgroup level
     * Get custom task types of workgroup level
     * @param workgroupId  (required)
     * @return TaskTypeListVO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful retrieval </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> There are not any result matching your search condition </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public TaskTypeListVO getCustomTaskTypesOfWg(String workgroupId) throws ApiException {
        ApiResponse<TaskTypeListVO> localVarResp = getCustomTaskTypesOfWgWithHttpInfo(workgroupId);
        return localVarResp.getData();
    }

    /**
     * Get custom task types of workgroup level
     * Get custom task types of workgroup level
     * @param workgroupId  (required)
     * @return ApiResponse&lt;TaskTypeListVO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful retrieval </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> There are not any result matching your search condition </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TaskTypeListVO> getCustomTaskTypesOfWgWithHttpInfo(String workgroupId) throws ApiException {
        okhttp3.Call localVarCall = getCustomTaskTypesOfWgValidateBeforeCall(workgroupId, null);
        Type localVarReturnType = new TypeToken<TaskTypeListVO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get custom task types of workgroup level (asynchronously)
     * Get custom task types of workgroup level
     * @param workgroupId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful retrieval </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> There are not any result matching your search condition </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCustomTaskTypesOfWgAsync(String workgroupId, final ApiCallback<TaskTypeListVO> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCustomTaskTypesOfWgValidateBeforeCall(workgroupId, _callback);
        Type localVarReturnType = new TypeToken<TaskTypeListVO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDefaultTaskStatusList
     * @param workgroupId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful retrieval </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDefaultTaskStatusListCall(String workgroupId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/workgroups/{workgroup_id}/defaultTaskStatus"
            .replace("{" + "workgroup_id" + "}", localVarApiClient.escapeString(workgroupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*",
            "application/json",
            "application/x-json-smile",
            "application/x-yaml",
            "application/xml",
            "text/csv",
            "text/x-yaml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDefaultTaskStatusListValidateBeforeCall(String workgroupId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workgroupId' is set
        if (workgroupId == null) {
            throw new ApiException("Missing the required parameter 'workgroupId' when calling getDefaultTaskStatusList(Async)");
        }

        return getDefaultTaskStatusListCall(workgroupId, _callback);

    }

    /**
     * Get default task status list
     * Get default task status list
     * @param workgroupId  (required)
     * @return TaskStatusListVO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful retrieval </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public TaskStatusListVO getDefaultTaskStatusList(String workgroupId) throws ApiException {
        ApiResponse<TaskStatusListVO> localVarResp = getDefaultTaskStatusListWithHttpInfo(workgroupId);
        return localVarResp.getData();
    }

    /**
     * Get default task status list
     * Get default task status list
     * @param workgroupId  (required)
     * @return ApiResponse&lt;TaskStatusListVO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful retrieval </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TaskStatusListVO> getDefaultTaskStatusListWithHttpInfo(String workgroupId) throws ApiException {
        okhttp3.Call localVarCall = getDefaultTaskStatusListValidateBeforeCall(workgroupId, null);
        Type localVarReturnType = new TypeToken<TaskStatusListVO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get default task status list (asynchronously)
     * Get default task status list
     * @param workgroupId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful retrieval </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDefaultTaskStatusListAsync(String workgroupId, final ApiCallback<TaskStatusListVO> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDefaultTaskStatusListValidateBeforeCall(workgroupId, _callback);
        Type localVarReturnType = new TypeToken<TaskStatusListVO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getTaskListOfProject
     * @param workgroupId  (required)
     * @param projectId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful retrieval </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> There are not any result matching your search condition </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTaskListOfProjectCall(String workgroupId, String projectId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/workgroups/{workgroup_id}/projects/{project_id}/tasks"
            .replace("{" + "workgroup_id" + "}", localVarApiClient.escapeString(workgroupId.toString()))
            .replace("{" + "project_id" + "}", localVarApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*",
            "application/json",
            "application/x-json-smile",
            "application/x-yaml",
            "application/xml",
            "text/csv",
            "text/x-yaml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTaskListOfProjectValidateBeforeCall(String workgroupId, String projectId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workgroupId' is set
        if (workgroupId == null) {
            throw new ApiException("Missing the required parameter 'workgroupId' when calling getTaskListOfProject(Async)");
        }

        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling getTaskListOfProject(Async)");
        }

        return getTaskListOfProjectCall(workgroupId, projectId, _callback);

    }

    /**
     * Get task list of project level
     * Get task list of project level
     * @param workgroupId  (required)
     * @param projectId  (required)
     * @return TaskListVO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful retrieval </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> There are not any result matching your search condition </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public TaskListVO getTaskListOfProject(String workgroupId, String projectId) throws ApiException {
        ApiResponse<TaskListVO> localVarResp = getTaskListOfProjectWithHttpInfo(workgroupId, projectId);
        return localVarResp.getData();
    }

    /**
     * Get task list of project level
     * Get task list of project level
     * @param workgroupId  (required)
     * @param projectId  (required)
     * @return ApiResponse&lt;TaskListVO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful retrieval </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> There are not any result matching your search condition </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TaskListVO> getTaskListOfProjectWithHttpInfo(String workgroupId, String projectId) throws ApiException {
        okhttp3.Call localVarCall = getTaskListOfProjectValidateBeforeCall(workgroupId, projectId, null);
        Type localVarReturnType = new TypeToken<TaskListVO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get task list of project level (asynchronously)
     * Get task list of project level
     * @param workgroupId  (required)
     * @param projectId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful retrieval </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> There are not any result matching your search condition </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTaskListOfProjectAsync(String workgroupId, String projectId, final ApiCallback<TaskListVO> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTaskListOfProjectValidateBeforeCall(workgroupId, projectId, _callback);
        Type localVarReturnType = new TypeToken<TaskListVO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getTaskListOfWorkgroup
     * @param workgroupId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful retrieval </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> There are not any result matching your search condition </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTaskListOfWorkgroupCall(String workgroupId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/workgroups/{workgroup_id}/tasks"
            .replace("{" + "workgroup_id" + "}", localVarApiClient.escapeString(workgroupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*",
            "application/json",
            "application/x-json-smile",
            "application/x-yaml",
            "application/xml",
            "text/csv",
            "text/x-yaml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTaskListOfWorkgroupValidateBeforeCall(String workgroupId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workgroupId' is set
        if (workgroupId == null) {
            throw new ApiException("Missing the required parameter 'workgroupId' when calling getTaskListOfWorkgroup(Async)");
        }

        return getTaskListOfWorkgroupCall(workgroupId, _callback);

    }

    /**
     * Get task list of workgroup level
     * Get task list of workgroup level
     * @param workgroupId  (required)
     * @return TaskWorkgroupLevelListVO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful retrieval </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> There are not any result matching your search condition </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public TaskWorkgroupLevelListVO getTaskListOfWorkgroup(String workgroupId) throws ApiException {
        ApiResponse<TaskWorkgroupLevelListVO> localVarResp = getTaskListOfWorkgroupWithHttpInfo(workgroupId);
        return localVarResp.getData();
    }

    /**
     * Get task list of workgroup level
     * Get task list of workgroup level
     * @param workgroupId  (required)
     * @return ApiResponse&lt;TaskWorkgroupLevelListVO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful retrieval </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> There are not any result matching your search condition </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TaskWorkgroupLevelListVO> getTaskListOfWorkgroupWithHttpInfo(String workgroupId) throws ApiException {
        okhttp3.Call localVarCall = getTaskListOfWorkgroupValidateBeforeCall(workgroupId, null);
        Type localVarReturnType = new TypeToken<TaskWorkgroupLevelListVO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get task list of workgroup level (asynchronously)
     * Get task list of workgroup level
     * @param workgroupId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful retrieval </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> There are not any result matching your search condition </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTaskListOfWorkgroupAsync(String workgroupId, final ApiCallback<TaskWorkgroupLevelListVO> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTaskListOfWorkgroupValidateBeforeCall(workgroupId, _callback);
        Type localVarReturnType = new TypeToken<TaskWorkgroupLevelListVO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getTaskOfProject
     * @param workgroupId  (required)
     * @param projectId  (required)
     * @param taskId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful retrieval </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> There are not any result matching your search condition </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTaskOfProjectCall(String workgroupId, String projectId, String taskId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/workgroups/{workgroup_id}/projects/{project_id}/tasks/{task_id}"
            .replace("{" + "workgroup_id" + "}", localVarApiClient.escapeString(workgroupId.toString()))
            .replace("{" + "project_id" + "}", localVarApiClient.escapeString(projectId.toString()))
            .replace("{" + "task_id" + "}", localVarApiClient.escapeString(taskId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*",
            "application/json",
            "application/x-json-smile",
            "application/x-yaml",
            "application/xml",
            "text/csv",
            "text/x-yaml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTaskOfProjectValidateBeforeCall(String workgroupId, String projectId, String taskId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workgroupId' is set
        if (workgroupId == null) {
            throw new ApiException("Missing the required parameter 'workgroupId' when calling getTaskOfProject(Async)");
        }

        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling getTaskOfProject(Async)");
        }

        // verify the required parameter 'taskId' is set
        if (taskId == null) {
            throw new ApiException("Missing the required parameter 'taskId' when calling getTaskOfProject(Async)");
        }

        return getTaskOfProjectCall(workgroupId, projectId, taskId, _callback);

    }

    /**
     * Get a sepcific task of project level
     * Get a sepcific task of project level
     * @param workgroupId  (required)
     * @param projectId  (required)
     * @param taskId  (required)
     * @return TaskExpandVO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful retrieval </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> There are not any result matching your search condition </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public TaskExpandVO getTaskOfProject(String workgroupId, String projectId, String taskId) throws ApiException {
        ApiResponse<TaskExpandVO> localVarResp = getTaskOfProjectWithHttpInfo(workgroupId, projectId, taskId);
        return localVarResp.getData();
    }

    /**
     * Get a sepcific task of project level
     * Get a sepcific task of project level
     * @param workgroupId  (required)
     * @param projectId  (required)
     * @param taskId  (required)
     * @return ApiResponse&lt;TaskExpandVO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful retrieval </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> There are not any result matching your search condition </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TaskExpandVO> getTaskOfProjectWithHttpInfo(String workgroupId, String projectId, String taskId) throws ApiException {
        okhttp3.Call localVarCall = getTaskOfProjectValidateBeforeCall(workgroupId, projectId, taskId, null);
        Type localVarReturnType = new TypeToken<TaskExpandVO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a sepcific task of project level (asynchronously)
     * Get a sepcific task of project level
     * @param workgroupId  (required)
     * @param projectId  (required)
     * @param taskId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful retrieval </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> There are not any result matching your search condition </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTaskOfProjectAsync(String workgroupId, String projectId, String taskId, final ApiCallback<TaskExpandVO> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTaskOfProjectValidateBeforeCall(workgroupId, projectId, taskId, _callback);
        Type localVarReturnType = new TypeToken<TaskExpandVO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getTaskOfWorkgroup
     * @param workgroupId  (required)
     * @param taskId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful retrieval </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> There are not any result matching your search condition </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTaskOfWorkgroupCall(String workgroupId, String taskId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/workgroups/{workgroup_id}/tasks/{task_id}"
            .replace("{" + "workgroup_id" + "}", localVarApiClient.escapeString(workgroupId.toString()))
            .replace("{" + "task_id" + "}", localVarApiClient.escapeString(taskId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*",
            "application/json",
            "application/x-json-smile",
            "application/x-yaml",
            "application/xml",
            "text/csv",
            "text/x-yaml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTaskOfWorkgroupValidateBeforeCall(String workgroupId, String taskId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workgroupId' is set
        if (workgroupId == null) {
            throw new ApiException("Missing the required parameter 'workgroupId' when calling getTaskOfWorkgroup(Async)");
        }

        // verify the required parameter 'taskId' is set
        if (taskId == null) {
            throw new ApiException("Missing the required parameter 'taskId' when calling getTaskOfWorkgroup(Async)");
        }

        return getTaskOfWorkgroupCall(workgroupId, taskId, _callback);

    }

    /**
     * Get a sepcific task of workgroup level
     * Get a sepcific task of workgroup level
     * @param workgroupId  (required)
     * @param taskId  (required)
     * @return TaskExpandWorkgroupLevelVO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful retrieval </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> There are not any result matching your search condition </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public TaskExpandWorkgroupLevelVO getTaskOfWorkgroup(String workgroupId, String taskId) throws ApiException {
        ApiResponse<TaskExpandWorkgroupLevelVO> localVarResp = getTaskOfWorkgroupWithHttpInfo(workgroupId, taskId);
        return localVarResp.getData();
    }

    /**
     * Get a sepcific task of workgroup level
     * Get a sepcific task of workgroup level
     * @param workgroupId  (required)
     * @param taskId  (required)
     * @return ApiResponse&lt;TaskExpandWorkgroupLevelVO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful retrieval </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> There are not any result matching your search condition </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TaskExpandWorkgroupLevelVO> getTaskOfWorkgroupWithHttpInfo(String workgroupId, String taskId) throws ApiException {
        okhttp3.Call localVarCall = getTaskOfWorkgroupValidateBeforeCall(workgroupId, taskId, null);
        Type localVarReturnType = new TypeToken<TaskExpandWorkgroupLevelVO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a sepcific task of workgroup level (asynchronously)
     * Get a sepcific task of workgroup level
     * @param workgroupId  (required)
     * @param taskId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful retrieval </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> There are not any result matching your search condition </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTaskOfWorkgroupAsync(String workgroupId, String taskId, final ApiCallback<TaskExpandWorkgroupLevelVO> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTaskOfWorkgroupValidateBeforeCall(workgroupId, taskId, _callback);
        Type localVarReturnType = new TypeToken<TaskExpandWorkgroupLevelVO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getTaskTypesOfWorkgroup
     * @param workgroupId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful retrieval </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> There are not any result matching your search condition </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTaskTypesOfWorkgroupCall(String workgroupId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/workgroups/{workgroup_id}/taskTypes"
            .replace("{" + "workgroup_id" + "}", localVarApiClient.escapeString(workgroupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*",
            "application/json",
            "application/x-json-smile",
            "application/x-yaml",
            "application/xml",
            "text/csv",
            "text/x-yaml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTaskTypesOfWorkgroupValidateBeforeCall(String workgroupId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workgroupId' is set
        if (workgroupId == null) {
            throw new ApiException("Missing the required parameter 'workgroupId' when calling getTaskTypesOfWorkgroup(Async)");
        }

        return getTaskTypesOfWorkgroupCall(workgroupId, _callback);

    }

    /**
     * Get task types of workgroup level
     * Get task types of workgroup level
     * @param workgroupId  (required)
     * @return TaskTypeListVO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful retrieval </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> There are not any result matching your search condition </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public TaskTypeListVO getTaskTypesOfWorkgroup(String workgroupId) throws ApiException {
        ApiResponse<TaskTypeListVO> localVarResp = getTaskTypesOfWorkgroupWithHttpInfo(workgroupId);
        return localVarResp.getData();
    }

    /**
     * Get task types of workgroup level
     * Get task types of workgroup level
     * @param workgroupId  (required)
     * @return ApiResponse&lt;TaskTypeListVO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful retrieval </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> There are not any result matching your search condition </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TaskTypeListVO> getTaskTypesOfWorkgroupWithHttpInfo(String workgroupId) throws ApiException {
        okhttp3.Call localVarCall = getTaskTypesOfWorkgroupValidateBeforeCall(workgroupId, null);
        Type localVarReturnType = new TypeToken<TaskTypeListVO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get task types of workgroup level (asynchronously)
     * Get task types of workgroup level
     * @param workgroupId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful retrieval </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> There are not any result matching your search condition </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTaskTypesOfWorkgroupAsync(String workgroupId, final ApiCallback<TaskTypeListVO> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTaskTypesOfWorkgroupValidateBeforeCall(workgroupId, _callback);
        Type localVarReturnType = new TypeToken<TaskTypeListVO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getWgTaskStatusListOfWorkgroup
     * @param workgroupId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful retrieval </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> There are not any result matching your search condition </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getWgTaskStatusListOfWorkgroupCall(String workgroupId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/workgroups/{workgroup_id}/customTaskStatus"
            .replace("{" + "workgroup_id" + "}", localVarApiClient.escapeString(workgroupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*",
            "application/json",
            "application/x-json-smile",
            "application/x-yaml",
            "application/xml",
            "text/csv",
            "text/x-yaml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getWgTaskStatusListOfWorkgroupValidateBeforeCall(String workgroupId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workgroupId' is set
        if (workgroupId == null) {
            throw new ApiException("Missing the required parameter 'workgroupId' when calling getWgTaskStatusListOfWorkgroup(Async)");
        }

        return getWgTaskStatusListOfWorkgroupCall(workgroupId, _callback);

    }

    /**
     * Get custom task status of workgroup level
     * Get custom task status of workgroup level
     * @param workgroupId  (required)
     * @return WgTaskStatusListVO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful retrieval </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> There are not any result matching your search condition </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public WgTaskStatusListVO getWgTaskStatusListOfWorkgroup(String workgroupId) throws ApiException {
        ApiResponse<WgTaskStatusListVO> localVarResp = getWgTaskStatusListOfWorkgroupWithHttpInfo(workgroupId);
        return localVarResp.getData();
    }

    /**
     * Get custom task status of workgroup level
     * Get custom task status of workgroup level
     * @param workgroupId  (required)
     * @return ApiResponse&lt;WgTaskStatusListVO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful retrieval </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> There are not any result matching your search condition </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WgTaskStatusListVO> getWgTaskStatusListOfWorkgroupWithHttpInfo(String workgroupId) throws ApiException {
        okhttp3.Call localVarCall = getWgTaskStatusListOfWorkgroupValidateBeforeCall(workgroupId, null);
        Type localVarReturnType = new TypeToken<WgTaskStatusListVO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get custom task status of workgroup level (asynchronously)
     * Get custom task status of workgroup level
     * @param workgroupId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful retrieval </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> There are not any result matching your search condition </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getWgTaskStatusListOfWorkgroupAsync(String workgroupId, final ApiCallback<WgTaskStatusListVO> _callback) throws ApiException {

        okhttp3.Call localVarCall = getWgTaskStatusListOfWorkgroupValidateBeforeCall(workgroupId, _callback);
        Type localVarReturnType = new TypeToken<WgTaskStatusListVO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for postTaskForProject
     * @param workgroupId  (required)
     * @param projectId  (required)
     * @param taskPersistVO  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful created </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Invalid data </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postTaskForProjectCall(String workgroupId, String projectId, TaskPersistVO taskPersistVO, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = taskPersistVO;

        // create path and map variables
        String localVarPath = "/v1/workgroups/{workgroup_id}/projects/{project_id}/tasks"
            .replace("{" + "workgroup_id" + "}", localVarApiClient.escapeString(workgroupId.toString()))
            .replace("{" + "project_id" + "}", localVarApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*",
            "application/json",
            "application/x-json-smile",
            "application/x-yaml",
            "application/xml",
            "text/csv",
            "text/x-yaml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-json-smile",
            "application/x-yaml",
            "application/xml",
            "text/csv",
            "text/x-yaml",
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postTaskForProjectValidateBeforeCall(String workgroupId, String projectId, TaskPersistVO taskPersistVO, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workgroupId' is set
        if (workgroupId == null) {
            throw new ApiException("Missing the required parameter 'workgroupId' when calling postTaskForProject(Async)");
        }

        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling postTaskForProject(Async)");
        }

        return postTaskForProjectCall(workgroupId, projectId, taskPersistVO, _callback);

    }

    /**
     * Create a new task
     * Create a new task
     * @param workgroupId  (required)
     * @param projectId  (required)
     * @param taskPersistVO  (optional)
     * @return TaskCreatedVO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful created </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Invalid data </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public TaskCreatedVO postTaskForProject(String workgroupId, String projectId, TaskPersistVO taskPersistVO) throws ApiException {
        ApiResponse<TaskCreatedVO> localVarResp = postTaskForProjectWithHttpInfo(workgroupId, projectId, taskPersistVO);
        return localVarResp.getData();
    }

    /**
     * Create a new task
     * Create a new task
     * @param workgroupId  (required)
     * @param projectId  (required)
     * @param taskPersistVO  (optional)
     * @return ApiResponse&lt;TaskCreatedVO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful created </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Invalid data </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TaskCreatedVO> postTaskForProjectWithHttpInfo(String workgroupId, String projectId, TaskPersistVO taskPersistVO) throws ApiException {
        okhttp3.Call localVarCall = postTaskForProjectValidateBeforeCall(workgroupId, projectId, taskPersistVO, null);
        Type localVarReturnType = new TypeToken<TaskCreatedVO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a new task (asynchronously)
     * Create a new task
     * @param workgroupId  (required)
     * @param projectId  (required)
     * @param taskPersistVO  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful created </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Invalid data </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call postTaskForProjectAsync(String workgroupId, String projectId, TaskPersistVO taskPersistVO, final ApiCallback<TaskCreatedVO> _callback) throws ApiException {

        okhttp3.Call localVarCall = postTaskForProjectValidateBeforeCall(workgroupId, projectId, taskPersistVO, _callback);
        Type localVarReturnType = new TypeToken<TaskCreatedVO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for taskPriorityList
     * @param workgroupId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful retrieval </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call taskPriorityListCall(String workgroupId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/workgroups/{workgroup_id}/defaultTaskPriority"
            .replace("{" + "workgroup_id" + "}", localVarApiClient.escapeString(workgroupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*",
            "application/json",
            "application/x-json-smile",
            "application/x-yaml",
            "application/xml",
            "text/csv",
            "text/x-yaml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call taskPriorityListValidateBeforeCall(String workgroupId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workgroupId' is set
        if (workgroupId == null) {
            throw new ApiException("Missing the required parameter 'workgroupId' when calling taskPriorityList(Async)");
        }

        return taskPriorityListCall(workgroupId, _callback);

    }

    /**
     * Get default task priority list
     * Get default task priority list
     * @param workgroupId  (required)
     * @return TaskPriorityListVO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful retrieval </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public TaskPriorityListVO taskPriorityList(String workgroupId) throws ApiException {
        ApiResponse<TaskPriorityListVO> localVarResp = taskPriorityListWithHttpInfo(workgroupId);
        return localVarResp.getData();
    }

    /**
     * Get default task priority list
     * Get default task priority list
     * @param workgroupId  (required)
     * @return ApiResponse&lt;TaskPriorityListVO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful retrieval </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TaskPriorityListVO> taskPriorityListWithHttpInfo(String workgroupId) throws ApiException {
        okhttp3.Call localVarCall = taskPriorityListValidateBeforeCall(workgroupId, null);
        Type localVarReturnType = new TypeToken<TaskPriorityListVO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get default task priority list (asynchronously)
     * Get default task priority list
     * @param workgroupId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful retrieval </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call taskPriorityListAsync(String workgroupId, final ApiCallback<TaskPriorityListVO> _callback) throws ApiException {

        okhttp3.Call localVarCall = taskPriorityListValidateBeforeCall(workgroupId, _callback);
        Type localVarReturnType = new TypeToken<TaskPriorityListVO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
