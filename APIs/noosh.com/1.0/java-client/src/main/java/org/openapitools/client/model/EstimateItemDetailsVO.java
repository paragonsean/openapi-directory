/*
 * Noosh API application
 * Full description of Noosh API
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.EstimateItemPriceVO;
import org.openapitools.client.model.PropertyPaAndAttVO;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Java type: com.noosh.nooshapi.vo.EstimateItemDetailsVO
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:59:23.742517-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class EstimateItemDetailsVO {
  public static final String SERIALIZED_NAME_COMMENTS = "comments";
  @SerializedName(SERIALIZED_NAME_COMMENTS)
  private String comments;

  public static final String SERIALIZED_NAME_CUSTOM_FIELDS = "custom_fields";
  @SerializedName(SERIALIZED_NAME_CUSTOM_FIELDS)
  private List<PropertyPaAndAttVO> customFields = new ArrayList<>();

  public static final String SERIALIZED_NAME_ESTIMATE_ITEM_ID = "estimate_item_id";
  @SerializedName(SERIALIZED_NAME_ESTIMATE_ITEM_ID)
  private Long estimateItemId;

  public static final String SERIALIZED_NAME_OPTION_PRICES = "option_prices";
  @SerializedName(SERIALIZED_NAME_OPTION_PRICES)
  private List<EstimateItemPriceVO> optionPrices = new ArrayList<>();

  public static final String SERIALIZED_NAME_PC_JOB_ID = "pc_job_id";
  @SerializedName(SERIALIZED_NAME_PC_JOB_ID)
  private Long pcJobId;

  public static final String SERIALIZED_NAME_SPEC_NAME = "spec_name";
  @SerializedName(SERIALIZED_NAME_SPEC_NAME)
  private String specName;

  public static final String SERIALIZED_NAME_SPEC_REFERENCE = "spec_reference";
  @SerializedName(SERIALIZED_NAME_SPEC_REFERENCE)
  private String specReference;

  public static final String SERIALIZED_NAME_SPEC_REFERENCE_ID = "spec_reference_id";
  @SerializedName(SERIALIZED_NAME_SPEC_REFERENCE_ID)
  private Long specReferenceId;

  public EstimateItemDetailsVO() {
  }

  public EstimateItemDetailsVO comments(String comments) {
    this.comments = comments;
    return this;
  }

  /**
   * 
   * @return comments
   */
  @javax.annotation.Nullable
  public String getComments() {
    return comments;
  }

  public void setComments(String comments) {
    this.comments = comments;
  }


  public EstimateItemDetailsVO customFields(List<PropertyPaAndAttVO> customFields) {
    this.customFields = customFields;
    return this;
  }

  public EstimateItemDetailsVO addCustomFieldsItem(PropertyPaAndAttVO customFieldsItem) {
    if (this.customFields == null) {
      this.customFields = new ArrayList<>();
    }
    this.customFields.add(customFieldsItem);
    return this;
  }

  /**
   * 
   * @return customFields
   */
  @javax.annotation.Nullable
  public List<PropertyPaAndAttVO> getCustomFields() {
    return customFields;
  }

  public void setCustomFields(List<PropertyPaAndAttVO> customFields) {
    this.customFields = customFields;
  }


  public EstimateItemDetailsVO estimateItemId(Long estimateItemId) {
    this.estimateItemId = estimateItemId;
    return this;
  }

  /**
   * 
   * @return estimateItemId
   */
  @javax.annotation.Nullable
  public Long getEstimateItemId() {
    return estimateItemId;
  }

  public void setEstimateItemId(Long estimateItemId) {
    this.estimateItemId = estimateItemId;
  }


  public EstimateItemDetailsVO optionPrices(List<EstimateItemPriceVO> optionPrices) {
    this.optionPrices = optionPrices;
    return this;
  }

  public EstimateItemDetailsVO addOptionPricesItem(EstimateItemPriceVO optionPricesItem) {
    if (this.optionPrices == null) {
      this.optionPrices = new ArrayList<>();
    }
    this.optionPrices.add(optionPricesItem);
    return this;
  }

  /**
   * 
   * @return optionPrices
   */
  @javax.annotation.Nullable
  public List<EstimateItemPriceVO> getOptionPrices() {
    return optionPrices;
  }

  public void setOptionPrices(List<EstimateItemPriceVO> optionPrices) {
    this.optionPrices = optionPrices;
  }


  public EstimateItemDetailsVO pcJobId(Long pcJobId) {
    this.pcJobId = pcJobId;
    return this;
  }

  /**
   * 
   * @return pcJobId
   */
  @javax.annotation.Nullable
  public Long getPcJobId() {
    return pcJobId;
  }

  public void setPcJobId(Long pcJobId) {
    this.pcJobId = pcJobId;
  }


  public EstimateItemDetailsVO specName(String specName) {
    this.specName = specName;
    return this;
  }

  /**
   * 
   * @return specName
   */
  @javax.annotation.Nullable
  public String getSpecName() {
    return specName;
  }

  public void setSpecName(String specName) {
    this.specName = specName;
  }


  public EstimateItemDetailsVO specReference(String specReference) {
    this.specReference = specReference;
    return this;
  }

  /**
   * 
   * @return specReference
   */
  @javax.annotation.Nullable
  public String getSpecReference() {
    return specReference;
  }

  public void setSpecReference(String specReference) {
    this.specReference = specReference;
  }


  public EstimateItemDetailsVO specReferenceId(Long specReferenceId) {
    this.specReferenceId = specReferenceId;
    return this;
  }

  /**
   * 
   * @return specReferenceId
   */
  @javax.annotation.Nullable
  public Long getSpecReferenceId() {
    return specReferenceId;
  }

  public void setSpecReferenceId(Long specReferenceId) {
    this.specReferenceId = specReferenceId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EstimateItemDetailsVO estimateItemDetailsVO = (EstimateItemDetailsVO) o;
    return Objects.equals(this.comments, estimateItemDetailsVO.comments) &&
        Objects.equals(this.customFields, estimateItemDetailsVO.customFields) &&
        Objects.equals(this.estimateItemId, estimateItemDetailsVO.estimateItemId) &&
        Objects.equals(this.optionPrices, estimateItemDetailsVO.optionPrices) &&
        Objects.equals(this.pcJobId, estimateItemDetailsVO.pcJobId) &&
        Objects.equals(this.specName, estimateItemDetailsVO.specName) &&
        Objects.equals(this.specReference, estimateItemDetailsVO.specReference) &&
        Objects.equals(this.specReferenceId, estimateItemDetailsVO.specReferenceId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(comments, customFields, estimateItemId, optionPrices, pcJobId, specName, specReference, specReferenceId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EstimateItemDetailsVO {\n");
    sb.append("    comments: ").append(toIndentedString(comments)).append("\n");
    sb.append("    customFields: ").append(toIndentedString(customFields)).append("\n");
    sb.append("    estimateItemId: ").append(toIndentedString(estimateItemId)).append("\n");
    sb.append("    optionPrices: ").append(toIndentedString(optionPrices)).append("\n");
    sb.append("    pcJobId: ").append(toIndentedString(pcJobId)).append("\n");
    sb.append("    specName: ").append(toIndentedString(specName)).append("\n");
    sb.append("    specReference: ").append(toIndentedString(specReference)).append("\n");
    sb.append("    specReferenceId: ").append(toIndentedString(specReferenceId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("comments");
    openapiFields.add("custom_fields");
    openapiFields.add("estimate_item_id");
    openapiFields.add("option_prices");
    openapiFields.add("pc_job_id");
    openapiFields.add("spec_name");
    openapiFields.add("spec_reference");
    openapiFields.add("spec_reference_id");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EstimateItemDetailsVO
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EstimateItemDetailsVO.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EstimateItemDetailsVO is not found in the empty JSON string", EstimateItemDetailsVO.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EstimateItemDetailsVO.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EstimateItemDetailsVO` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("comments") != null && !jsonObj.get("comments").isJsonNull()) && !jsonObj.get("comments").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `comments` to be a primitive type in the JSON string but got `%s`", jsonObj.get("comments").toString()));
      }
      if (jsonObj.get("custom_fields") != null && !jsonObj.get("custom_fields").isJsonNull()) {
        JsonArray jsonArraycustomFields = jsonObj.getAsJsonArray("custom_fields");
        if (jsonArraycustomFields != null) {
          // ensure the json data is an array
          if (!jsonObj.get("custom_fields").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `custom_fields` to be an array in the JSON string but got `%s`", jsonObj.get("custom_fields").toString()));
          }

          // validate the optional field `custom_fields` (array)
          for (int i = 0; i < jsonArraycustomFields.size(); i++) {
            PropertyPaAndAttVO.validateJsonElement(jsonArraycustomFields.get(i));
          };
        }
      }
      if (jsonObj.get("option_prices") != null && !jsonObj.get("option_prices").isJsonNull()) {
        JsonArray jsonArrayoptionPrices = jsonObj.getAsJsonArray("option_prices");
        if (jsonArrayoptionPrices != null) {
          // ensure the json data is an array
          if (!jsonObj.get("option_prices").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `option_prices` to be an array in the JSON string but got `%s`", jsonObj.get("option_prices").toString()));
          }

          // validate the optional field `option_prices` (array)
          for (int i = 0; i < jsonArrayoptionPrices.size(); i++) {
            EstimateItemPriceVO.validateJsonElement(jsonArrayoptionPrices.get(i));
          };
        }
      }
      if ((jsonObj.get("spec_name") != null && !jsonObj.get("spec_name").isJsonNull()) && !jsonObj.get("spec_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `spec_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("spec_name").toString()));
      }
      if ((jsonObj.get("spec_reference") != null && !jsonObj.get("spec_reference").isJsonNull()) && !jsonObj.get("spec_reference").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `spec_reference` to be a primitive type in the JSON string but got `%s`", jsonObj.get("spec_reference").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EstimateItemDetailsVO.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EstimateItemDetailsVO' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EstimateItemDetailsVO> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EstimateItemDetailsVO.class));

       return (TypeAdapter<T>) new TypeAdapter<EstimateItemDetailsVO>() {
           @Override
           public void write(JsonWriter out, EstimateItemDetailsVO value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EstimateItemDetailsVO read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of EstimateItemDetailsVO given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EstimateItemDetailsVO
   * @throws IOException if the JSON string is invalid with respect to EstimateItemDetailsVO
   */
  public static EstimateItemDetailsVO fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EstimateItemDetailsVO.class);
  }

  /**
   * Convert an instance of EstimateItemDetailsVO to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

