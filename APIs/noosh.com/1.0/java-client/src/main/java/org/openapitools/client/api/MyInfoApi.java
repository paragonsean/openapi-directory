/*
 * Noosh API application
 * Full description of Noosh API
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AutomaticInvitationsListVO;
import java.io.File;
import org.openapitools.client.model.HTTPStatusVO;
import org.openapitools.client.model.ProfileImageVO;
import org.openapitools.client.model.TeamTemplateExpandVO;
import org.openapitools.client.model.TeamTemplateListVO;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class MyInfoApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public MyInfoApi() {
        this(Configuration.getDefaultApiClient());
    }

    public MyInfoApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getAutomaticInvitationList
     * @param workgroupId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful retrieval </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAutomaticInvitationListCall(String workgroupId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/workgroups/{workgroup_id}/automaticInvitations"
            .replace("{" + "workgroup_id" + "}", localVarApiClient.escapeString(workgroupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*",
            "application/json",
            "application/x-json-smile",
            "application/x-yaml",
            "application/xml",
            "text/csv",
            "text/x-yaml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAutomaticInvitationListValidateBeforeCall(String workgroupId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workgroupId' is set
        if (workgroupId == null) {
            throw new ApiException("Missing the required parameter 'workgroupId' when calling getAutomaticInvitationList(Async)");
        }

        return getAutomaticInvitationListCall(workgroupId, _callback);

    }

    /**
     * List current user&#39;s automatic invitations info 
     * List current user&#39;s automatic invitations info 
     * @param workgroupId  (required)
     * @return AutomaticInvitationsListVO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful retrieval </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public AutomaticInvitationsListVO getAutomaticInvitationList(String workgroupId) throws ApiException {
        ApiResponse<AutomaticInvitationsListVO> localVarResp = getAutomaticInvitationListWithHttpInfo(workgroupId);
        return localVarResp.getData();
    }

    /**
     * List current user&#39;s automatic invitations info 
     * List current user&#39;s automatic invitations info 
     * @param workgroupId  (required)
     * @return ApiResponse&lt;AutomaticInvitationsListVO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful retrieval </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AutomaticInvitationsListVO> getAutomaticInvitationListWithHttpInfo(String workgroupId) throws ApiException {
        okhttp3.Call localVarCall = getAutomaticInvitationListValidateBeforeCall(workgroupId, null);
        Type localVarReturnType = new TypeToken<AutomaticInvitationsListVO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List current user&#39;s automatic invitations info  (asynchronously)
     * List current user&#39;s automatic invitations info 
     * @param workgroupId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful retrieval </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAutomaticInvitationListAsync(String workgroupId, final ApiCallback<AutomaticInvitationsListVO> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAutomaticInvitationListValidateBeforeCall(workgroupId, _callback);
        Type localVarReturnType = new TypeToken<AutomaticInvitationsListVO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getTeamTemplateDetail
     * @param workgroupId  (required)
     * @param teamTemplateId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful retrieval </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTeamTemplateDetailCall(String workgroupId, String teamTemplateId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/workgroups/{workgroup_id}/teamTemplates/{team_template_id}"
            .replace("{" + "workgroup_id" + "}", localVarApiClient.escapeString(workgroupId.toString()))
            .replace("{" + "team_template_id" + "}", localVarApiClient.escapeString(teamTemplateId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*",
            "application/json",
            "application/x-json-smile",
            "application/x-yaml",
            "application/xml",
            "text/csv",
            "text/x-yaml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTeamTemplateDetailValidateBeforeCall(String workgroupId, String teamTemplateId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workgroupId' is set
        if (workgroupId == null) {
            throw new ApiException("Missing the required parameter 'workgroupId' when calling getTeamTemplateDetail(Async)");
        }

        // verify the required parameter 'teamTemplateId' is set
        if (teamTemplateId == null) {
            throw new ApiException("Missing the required parameter 'teamTemplateId' when calling getTeamTemplateDetail(Async)");
        }

        return getTeamTemplateDetailCall(workgroupId, teamTemplateId, _callback);

    }

    /**
     * Get current user&#39;s team template detal info 
     * Get current user&#39;s team template detal info 
     * @param workgroupId  (required)
     * @param teamTemplateId  (required)
     * @return TeamTemplateExpandVO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful retrieval </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public TeamTemplateExpandVO getTeamTemplateDetail(String workgroupId, String teamTemplateId) throws ApiException {
        ApiResponse<TeamTemplateExpandVO> localVarResp = getTeamTemplateDetailWithHttpInfo(workgroupId, teamTemplateId);
        return localVarResp.getData();
    }

    /**
     * Get current user&#39;s team template detal info 
     * Get current user&#39;s team template detal info 
     * @param workgroupId  (required)
     * @param teamTemplateId  (required)
     * @return ApiResponse&lt;TeamTemplateExpandVO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful retrieval </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TeamTemplateExpandVO> getTeamTemplateDetailWithHttpInfo(String workgroupId, String teamTemplateId) throws ApiException {
        okhttp3.Call localVarCall = getTeamTemplateDetailValidateBeforeCall(workgroupId, teamTemplateId, null);
        Type localVarReturnType = new TypeToken<TeamTemplateExpandVO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get current user&#39;s team template detal info  (asynchronously)
     * Get current user&#39;s team template detal info 
     * @param workgroupId  (required)
     * @param teamTemplateId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful retrieval </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTeamTemplateDetailAsync(String workgroupId, String teamTemplateId, final ApiCallback<TeamTemplateExpandVO> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTeamTemplateDetailValidateBeforeCall(workgroupId, teamTemplateId, _callback);
        Type localVarReturnType = new TypeToken<TeamTemplateExpandVO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getTeamTemplateList
     * @param workgroupId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful retrieval </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTeamTemplateListCall(String workgroupId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/workgroups/{workgroup_id}/teamTemplates"
            .replace("{" + "workgroup_id" + "}", localVarApiClient.escapeString(workgroupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*",
            "application/json",
            "application/x-json-smile",
            "application/x-yaml",
            "application/xml",
            "text/csv",
            "text/x-yaml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTeamTemplateListValidateBeforeCall(String workgroupId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workgroupId' is set
        if (workgroupId == null) {
            throw new ApiException("Missing the required parameter 'workgroupId' when calling getTeamTemplateList(Async)");
        }

        return getTeamTemplateListCall(workgroupId, _callback);

    }

    /**
     * List current user&#39;s team templates info 
     * List current user&#39;s team templates info 
     * @param workgroupId  (required)
     * @return TeamTemplateListVO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful retrieval </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public TeamTemplateListVO getTeamTemplateList(String workgroupId) throws ApiException {
        ApiResponse<TeamTemplateListVO> localVarResp = getTeamTemplateListWithHttpInfo(workgroupId);
        return localVarResp.getData();
    }

    /**
     * List current user&#39;s team templates info 
     * List current user&#39;s team templates info 
     * @param workgroupId  (required)
     * @return ApiResponse&lt;TeamTemplateListVO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful retrieval </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TeamTemplateListVO> getTeamTemplateListWithHttpInfo(String workgroupId) throws ApiException {
        okhttp3.Call localVarCall = getTeamTemplateListValidateBeforeCall(workgroupId, null);
        Type localVarReturnType = new TypeToken<TeamTemplateListVO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List current user&#39;s team templates info  (asynchronously)
     * List current user&#39;s team templates info 
     * @param workgroupId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful retrieval </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTeamTemplateListAsync(String workgroupId, final ApiCallback<TeamTemplateListVO> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTeamTemplateListValidateBeforeCall(workgroupId, _callback);
        Type localVarReturnType = new TypeToken<TeamTemplateListVO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for uploadProfileImage
     * @param workgroupId  (required)
     * @param body  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call uploadProfileImageCall(String workgroupId, File body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v1/workgroups/{workgroup_id}/profileImage"
            .replace("{" + "workgroup_id" + "}", localVarApiClient.escapeString(workgroupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*",
            "application/json",
            "application/x-json-smile",
            "application/x-yaml",
            "application/xml",
            "text/csv",
            "text/x-yaml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/x-json-smile",
            "application/x-yaml",
            "application/xml",
            "text/csv",
            "text/x-yaml",
            "text/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call uploadProfileImageValidateBeforeCall(String workgroupId, File body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workgroupId' is set
        if (workgroupId == null) {
            throw new ApiException("Missing the required parameter 'workgroupId' when calling uploadProfileImage(Async)");
        }

        return uploadProfileImageCall(workgroupId, body, _callback);

    }

    /**
     * Upload Profile Image.  A multipart/form-data request with a name \&quot;file\&quot;
     * Upload Profile Image.  A multipart/form-data request with a name \&quot;file\&quot;
     * @param workgroupId  (required)
     * @param body  (optional)
     * @return ProfileImageVO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ProfileImageVO uploadProfileImage(String workgroupId, File body) throws ApiException {
        ApiResponse<ProfileImageVO> localVarResp = uploadProfileImageWithHttpInfo(workgroupId, body);
        return localVarResp.getData();
    }

    /**
     * Upload Profile Image.  A multipart/form-data request with a name \&quot;file\&quot;
     * Upload Profile Image.  A multipart/form-data request with a name \&quot;file\&quot;
     * @param workgroupId  (required)
     * @param body  (optional)
     * @return ApiResponse&lt;ProfileImageVO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProfileImageVO> uploadProfileImageWithHttpInfo(String workgroupId, File body) throws ApiException {
        okhttp3.Call localVarCall = uploadProfileImageValidateBeforeCall(workgroupId, body, null);
        Type localVarReturnType = new TypeToken<ProfileImageVO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Upload Profile Image.  A multipart/form-data request with a name \&quot;file\&quot; (asynchronously)
     * Upload Profile Image.  A multipart/form-data request with a name \&quot;file\&quot;
     * @param workgroupId  (required)
     * @param body  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call uploadProfileImageAsync(String workgroupId, File body, final ApiCallback<ProfileImageVO> _callback) throws ApiException {

        okhttp3.Call localVarCall = uploadProfileImageValidateBeforeCall(workgroupId, body, _callback);
        Type localVarReturnType = new TypeToken<ProfileImageVO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
