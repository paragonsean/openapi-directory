/**
 * Noosh API application
 * Full description of Noosh API
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import PropertyPaAndAttVO from './PropertyPaAndAttVO';
import QuotePriceDetailVO from './QuotePriceDetailVO';
import SpecBaseVO from './SpecBaseVO';

/**
 * The QuoteItemDetailVO model module.
 * @module model/QuoteItemDetailVO
 * @version 1.0
 */
class QuoteItemDetailVO {
    /**
     * Constructs a new <code>QuoteItemDetailVO</code>.
     * Java type: com.noosh.nooshapi.vo.QuoteItemDetailVO
     * @alias module:model/QuoteItemDetailVO
     */
    constructor() { 
        
        QuoteItemDetailVO.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>QuoteItemDetailVO</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/QuoteItemDetailVO} obj Optional instance to populate.
     * @return {module:model/QuoteItemDetailVO} The populated <code>QuoteItemDetailVO</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new QuoteItemDetailVO();

            if (data.hasOwnProperty('chosen_quantity')) {
                obj['chosen_quantity'] = ApiClient.convertToType(data['chosen_quantity'], Object);
            }
            if (data.hasOwnProperty('comments')) {
                obj['comments'] = ApiClient.convertToType(data['comments'], 'String');
            }
            if (data.hasOwnProperty('completion_date')) {
                obj['completion_date'] = ApiClient.convertToType(data['completion_date'], 'Date');
            }
            if (data.hasOwnProperty('custom_fields')) {
                obj['custom_fields'] = ApiClient.convertToType(data['custom_fields'], [PropertyPaAndAttVO]);
            }
            if (data.hasOwnProperty('item_id')) {
                obj['item_id'] = ApiClient.convertToType(data['item_id'], 'Number');
            }
            if (data.hasOwnProperty('item_prices')) {
                obj['item_prices'] = ApiClient.convertToType(data['item_prices'], [QuotePriceDetailVO]);
            }
            if (data.hasOwnProperty('item_shipping_total')) {
                obj['item_shipping_total'] = ApiClient.convertToType(data['item_shipping_total'], Object);
            }
            if (data.hasOwnProperty('item_tax_total')) {
                obj['item_tax_total'] = ApiClient.convertToType(data['item_tax_total'], Object);
            }
            if (data.hasOwnProperty('item_total')) {
                obj['item_total'] = ApiClient.convertToType(data['item_total'], Object);
            }
            if (data.hasOwnProperty('reason_for_quote_selection')) {
                obj['reason_for_quote_selection'] = ApiClient.convertToType(data['reason_for_quote_selection'], 'String');
            }
            if (data.hasOwnProperty('show_cost_prices_and_markup')) {
                obj['show_cost_prices_and_markup'] = ApiClient.convertToType(data['show_cost_prices_and_markup'], 'Boolean');
            }
            if (data.hasOwnProperty('spec')) {
                obj['spec'] = SpecBaseVO.constructFromObject(data['spec']);
            }
            if (data.hasOwnProperty('transactional_item_shipping_total')) {
                obj['transactional_item_shipping_total'] = ApiClient.convertToType(data['transactional_item_shipping_total'], Object);
            }
            if (data.hasOwnProperty('transactional_item_tax_total')) {
                obj['transactional_item_tax_total'] = ApiClient.convertToType(data['transactional_item_tax_total'], Object);
            }
            if (data.hasOwnProperty('transactional_item_total')) {
                obj['transactional_item_total'] = ApiClient.convertToType(data['transactional_item_total'], Object);
            }
            if (data.hasOwnProperty('vat_code')) {
                obj['vat_code'] = ApiClient.convertToType(data['vat_code'], 'String');
            }
            if (data.hasOwnProperty('vat_rate')) {
                obj['vat_rate'] = ApiClient.convertToType(data['vat_rate'], Object);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>QuoteItemDetailVO</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>QuoteItemDetailVO</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['comments'] && !(typeof data['comments'] === 'string' || data['comments'] instanceof String)) {
            throw new Error("Expected the field `comments` to be a primitive type in the JSON string but got " + data['comments']);
        }
        if (data['custom_fields']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['custom_fields'])) {
                throw new Error("Expected the field `custom_fields` to be an array in the JSON data but got " + data['custom_fields']);
            }
            // validate the optional field `custom_fields` (array)
            for (const item of data['custom_fields']) {
                PropertyPaAndAttVO.validateJSON(item);
            };
        }
        if (data['item_prices']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['item_prices'])) {
                throw new Error("Expected the field `item_prices` to be an array in the JSON data but got " + data['item_prices']);
            }
            // validate the optional field `item_prices` (array)
            for (const item of data['item_prices']) {
                QuotePriceDetailVO.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['reason_for_quote_selection'] && !(typeof data['reason_for_quote_selection'] === 'string' || data['reason_for_quote_selection'] instanceof String)) {
            throw new Error("Expected the field `reason_for_quote_selection` to be a primitive type in the JSON string but got " + data['reason_for_quote_selection']);
        }
        // validate the optional field `spec`
        if (data['spec']) { // data not null
          SpecBaseVO.validateJSON(data['spec']);
        }
        // ensure the json data is a string
        if (data['vat_code'] && !(typeof data['vat_code'] === 'string' || data['vat_code'] instanceof String)) {
            throw new Error("Expected the field `vat_code` to be a primitive type in the JSON string but got " + data['vat_code']);
        }

        return true;
    }


}



/**
 * Java type: java.math.BigDecimal
 * @member {Object} chosen_quantity
 */
QuoteItemDetailVO.prototype['chosen_quantity'] = undefined;

/**
 * 
 * @member {String} comments
 */
QuoteItemDetailVO.prototype['comments'] = undefined;

/**
 * 
 * @member {Date} completion_date
 */
QuoteItemDetailVO.prototype['completion_date'] = undefined;

/**
 * 
 * @member {Array.<module:model/PropertyPaAndAttVO>} custom_fields
 */
QuoteItemDetailVO.prototype['custom_fields'] = undefined;

/**
 * 
 * @member {Number} item_id
 */
QuoteItemDetailVO.prototype['item_id'] = undefined;

/**
 * 
 * @member {Array.<module:model/QuotePriceDetailVO>} item_prices
 */
QuoteItemDetailVO.prototype['item_prices'] = undefined;

/**
 * Java type: java.math.BigDecimal
 * @member {Object} item_shipping_total
 */
QuoteItemDetailVO.prototype['item_shipping_total'] = undefined;

/**
 * Java type: java.math.BigDecimal
 * @member {Object} item_tax_total
 */
QuoteItemDetailVO.prototype['item_tax_total'] = undefined;

/**
 * Java type: java.math.BigDecimal
 * @member {Object} item_total
 */
QuoteItemDetailVO.prototype['item_total'] = undefined;

/**
 * 
 * @member {String} reason_for_quote_selection
 */
QuoteItemDetailVO.prototype['reason_for_quote_selection'] = undefined;

/**
 * 
 * @member {Boolean} show_cost_prices_and_markup
 */
QuoteItemDetailVO.prototype['show_cost_prices_and_markup'] = undefined;

/**
 * @member {module:model/SpecBaseVO} spec
 */
QuoteItemDetailVO.prototype['spec'] = undefined;

/**
 * Java type: java.math.BigDecimal
 * @member {Object} transactional_item_shipping_total
 */
QuoteItemDetailVO.prototype['transactional_item_shipping_total'] = undefined;

/**
 * Java type: java.math.BigDecimal
 * @member {Object} transactional_item_tax_total
 */
QuoteItemDetailVO.prototype['transactional_item_tax_total'] = undefined;

/**
 * Java type: java.math.BigDecimal
 * @member {Object} transactional_item_total
 */
QuoteItemDetailVO.prototype['transactional_item_total'] = undefined;

/**
 * 
 * @member {String} vat_code
 */
QuoteItemDetailVO.prototype['vat_code'] = undefined;

/**
 * Java type: java.math.BigDecimal
 * @member {Object} vat_rate
 */
QuoteItemDetailVO.prototype['vat_rate'] = undefined;






export default QuoteItemDetailVO;

