/**
 * Noosh API application
 * Full description of Noosh API
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import EstimateItemPO from './EstimateItemPO';

/**
 * The EstimatePO model module.
 * @module model/EstimatePO
 * @version 1.0
 */
class EstimatePO {
    /**
     * Constructs a new <code>EstimatePO</code>.
     * Java type: com.noosh.domain.nooshapi.persist.po.EstimatePO
     * @alias module:model/EstimatePO
     */
    constructor() { 
        
        EstimatePO.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>EstimatePO</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/EstimatePO} obj Optional instance to populate.
     * @return {module:model/EstimatePO} The populated <code>EstimatePO</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new EstimatePO();

            if (data.hasOwnProperty('comments')) {
                obj['comments'] = ApiClient.convertToType(data['comments'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('estimate_items')) {
                obj['estimate_items'] = ApiClient.convertToType(data['estimate_items'], [EstimateItemPO]);
            }
            if (data.hasOwnProperty('estimate_title')) {
                obj['estimate_title'] = ApiClient.convertToType(data['estimate_title'], 'String');
            }
            if (data.hasOwnProperty('expiration_date')) {
                obj['expiration_date'] = ApiClient.convertToType(data['expiration_date'], 'Date');
            }
            if (data.hasOwnProperty('owner_reference')) {
                obj['owner_reference'] = ApiClient.convertToType(data['owner_reference'], 'String');
            }
            if (data.hasOwnProperty('rfe_id')) {
                obj['rfe_id'] = ApiClient.convertToType(data['rfe_id'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>EstimatePO</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>EstimatePO</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['comments'] && !(typeof data['comments'] === 'string' || data['comments'] instanceof String)) {
            throw new Error("Expected the field `comments` to be a primitive type in the JSON string but got " + data['comments']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        if (data['estimate_items']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['estimate_items'])) {
                throw new Error("Expected the field `estimate_items` to be an array in the JSON data but got " + data['estimate_items']);
            }
            // validate the optional field `estimate_items` (array)
            for (const item of data['estimate_items']) {
                EstimateItemPO.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['estimate_title'] && !(typeof data['estimate_title'] === 'string' || data['estimate_title'] instanceof String)) {
            throw new Error("Expected the field `estimate_title` to be a primitive type in the JSON string but got " + data['estimate_title']);
        }
        // ensure the json data is a string
        if (data['owner_reference'] && !(typeof data['owner_reference'] === 'string' || data['owner_reference'] instanceof String)) {
            throw new Error("Expected the field `owner_reference` to be a primitive type in the JSON string but got " + data['owner_reference']);
        }

        return true;
    }


}



/**
 * 
 * @member {String} comments
 */
EstimatePO.prototype['comments'] = undefined;

/**
 * 
 * @member {String} description
 */
EstimatePO.prototype['description'] = undefined;

/**
 * 
 * @member {Array.<module:model/EstimateItemPO>} estimate_items
 */
EstimatePO.prototype['estimate_items'] = undefined;

/**
 * 
 * @member {String} estimate_title
 */
EstimatePO.prototype['estimate_title'] = undefined;

/**
 * 
 * @member {Date} expiration_date
 */
EstimatePO.prototype['expiration_date'] = undefined;

/**
 * 
 * @member {String} owner_reference
 */
EstimatePO.prototype['owner_reference'] = undefined;

/**
 * 
 * @member {Number} rfe_id
 */
EstimatePO.prototype['rfe_id'] = undefined;






export default EstimatePO;

