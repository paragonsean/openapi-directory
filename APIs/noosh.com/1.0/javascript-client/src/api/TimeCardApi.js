/**
 * Noosh API application
 * Full description of Noosh API
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import HTTPStatusVO from '../model/HTTPStatusVO';
import TimeCardDetailVO from '../model/TimeCardDetailVO';
import TimeCardListVO from '../model/TimeCardListVO';
import TimeCardReceivedDetailVO from '../model/TimeCardReceivedDetailVO';

/**
* TimeCard service.
* @module api/TimeCardApi
* @version 1.0
*/
export default class TimeCardApi {

    /**
    * Constructs a new TimeCardApi. 
    * @alias module:api/TimeCardApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getMyTimeCard operation.
     * @callback module:api/TimeCardApi~getMyTimeCardCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TimeCardDetailVO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a specific my time cards
     * Get a specific my time cards
     * @param {String} workgroupId 
     * @param {String} timeCardId 
     * @param {module:api/TimeCardApi~getMyTimeCardCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TimeCardDetailVO}
     */
    getMyTimeCard(workgroupId, timeCardId, callback) {
      let postBody = null;
      // verify the required parameter 'workgroupId' is set
      if (workgroupId === undefined || workgroupId === null) {
        throw new Error("Missing the required parameter 'workgroupId' when calling getMyTimeCard");
      }
      // verify the required parameter 'timeCardId' is set
      if (timeCardId === undefined || timeCardId === null) {
        throw new Error("Missing the required parameter 'timeCardId' when calling getMyTimeCard");
      }

      let pathParams = {
        'workgroup_id': workgroupId,
        'timeCard_id': timeCardId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*', 'application/json', 'application/x-json-smile', 'application/x-yaml', 'application/xml', 'text/csv', 'text/x-yaml', 'text/xml'];
      let returnType = TimeCardDetailVO;
      return this.apiClient.callApi(
        '/v1/workgroups/{workgroup_id}/myTimeCards/{timeCard_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getMyTimeCardList operation.
     * @callback module:api/TimeCardApi~getMyTimeCardListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TimeCardListVO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List my time cards
     * List my time cards
     * @param {String} workgroupId 
     * @param {module:api/TimeCardApi~getMyTimeCardListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TimeCardListVO}
     */
    getMyTimeCardList(workgroupId, callback) {
      let postBody = null;
      // verify the required parameter 'workgroupId' is set
      if (workgroupId === undefined || workgroupId === null) {
        throw new Error("Missing the required parameter 'workgroupId' when calling getMyTimeCardList");
      }

      let pathParams = {
        'workgroup_id': workgroupId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*', 'application/json', 'application/x-json-smile', 'application/x-yaml', 'application/xml', 'text/csv', 'text/x-yaml', 'text/xml'];
      let returnType = TimeCardListVO;
      return this.apiClient.callApi(
        '/v1/workgroups/{workgroup_id}/myTimeCards', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getReceivedTimeCard operation.
     * @callback module:api/TimeCardApi~getReceivedTimeCardCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TimeCardReceivedDetailVO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List a specific received time cards
     * List a specific received time cards
     * @param {String} workgroupId 
     * @param {String} timeCardId 
     * @param {module:api/TimeCardApi~getReceivedTimeCardCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TimeCardReceivedDetailVO}
     */
    getReceivedTimeCard(workgroupId, timeCardId, callback) {
      let postBody = null;
      // verify the required parameter 'workgroupId' is set
      if (workgroupId === undefined || workgroupId === null) {
        throw new Error("Missing the required parameter 'workgroupId' when calling getReceivedTimeCard");
      }
      // verify the required parameter 'timeCardId' is set
      if (timeCardId === undefined || timeCardId === null) {
        throw new Error("Missing the required parameter 'timeCardId' when calling getReceivedTimeCard");
      }

      let pathParams = {
        'workgroup_id': workgroupId,
        'timeCard_id': timeCardId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*', 'application/json', 'application/x-json-smile', 'application/x-yaml', 'application/xml', 'text/csv', 'text/x-yaml', 'text/xml'];
      let returnType = TimeCardReceivedDetailVO;
      return this.apiClient.callApi(
        '/v1/workgroups/{workgroup_id}/receivedTimeCards/{timeCard_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getReceivedTimeCardList operation.
     * @callback module:api/TimeCardApi~getReceivedTimeCardListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TimeCardListVO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List received time cards
     * List received time cards
     * @param {String} workgroupId 
     * @param {module:api/TimeCardApi~getReceivedTimeCardListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TimeCardListVO}
     */
    getReceivedTimeCardList(workgroupId, callback) {
      let postBody = null;
      // verify the required parameter 'workgroupId' is set
      if (workgroupId === undefined || workgroupId === null) {
        throw new Error("Missing the required parameter 'workgroupId' when calling getReceivedTimeCardList");
      }

      let pathParams = {
        'workgroup_id': workgroupId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*', 'application/json', 'application/x-json-smile', 'application/x-yaml', 'application/xml', 'text/csv', 'text/x-yaml', 'text/xml'];
      let returnType = TimeCardListVO;
      return this.apiClient.callApi(
        '/v1/workgroups/{workgroup_id}/receivedTimeCards', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
