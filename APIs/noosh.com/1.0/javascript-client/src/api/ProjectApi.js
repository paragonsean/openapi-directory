/**
 * Noosh API application
 * Full description of Noosh API
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import HTTPStatusVO from '../model/HTTPStatusVO';
import ProjectExpandVO from '../model/ProjectExpandVO';
import ProjectIdListVO from '../model/ProjectIdListVO';
import ProjectListVO from '../model/ProjectListVO';
import ProjectPatchPO from '../model/ProjectPatchPO';
import ProjectPersistVO from '../model/ProjectPersistVO';
import ProjectVO from '../model/ProjectVO';

/**
* Project service.
* @module api/ProjectApi
* @version 1.0
*/
export default class ProjectApi {

    /**
    * Constructs a new ProjectApi. 
    * @alias module:api/ProjectApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the attachProject operation.
     * @callback module:api/ProjectApi~attachProjectCallback
     * @param {String} error Error message, if any.
     * @param {module:model/HTTPStatusVO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Attach children projects to specific Project
     * Attach children projects to specific Project
     * @param {String} workgroupId 
     * @param {String} projectId 
     * @param {Object} opts Optional parameters
     * @param {module:model/ProjectIdListVO} [projectIdListVO] 
     * @param {module:api/ProjectApi~attachProjectCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/HTTPStatusVO}
     */
    attachProject(workgroupId, projectId, opts, callback) {
      opts = opts || {};
      let postBody = opts['projectIdListVO'];
      // verify the required parameter 'workgroupId' is set
      if (workgroupId === undefined || workgroupId === null) {
        throw new Error("Missing the required parameter 'workgroupId' when calling attachProject");
      }
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling attachProject");
      }

      let pathParams = {
        'workgroup_id': workgroupId,
        'project_id': projectId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/x-json-smile', 'application/x-yaml', 'application/xml', 'text/csv', 'text/x-yaml', 'text/xml'];
      let accepts = ['*/*', 'application/json', 'application/x-json-smile', 'application/x-yaml', 'application/xml', 'text/csv', 'text/x-yaml', 'text/xml'];
      let returnType = HTTPStatusVO;
      return this.apiClient.callApi(
        '/v1/workgroups/{workgroup_id}/projects/{project_id}/children', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteProject operation.
     * @callback module:api/ProjectApi~deleteProjectCallback
     * @param {String} error Error message, if any.
     * @param {module:model/HTTPStatusVO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Archieve a specific Project
     * Archieve a specific Project
     * @param {String} workgroupId 
     * @param {String} projectId 
     * @param {module:api/ProjectApi~deleteProjectCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/HTTPStatusVO}
     */
    deleteProject(workgroupId, projectId, callback) {
      let postBody = null;
      // verify the required parameter 'workgroupId' is set
      if (workgroupId === undefined || workgroupId === null) {
        throw new Error("Missing the required parameter 'workgroupId' when calling deleteProject");
      }
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling deleteProject");
      }

      let pathParams = {
        'workgroup_id': workgroupId,
        'project_id': projectId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*', 'application/json', 'application/x-json-smile', 'application/x-yaml', 'application/xml', 'text/csv', 'text/x-yaml', 'text/xml'];
      let returnType = HTTPStatusVO;
      return this.apiClient.callApi(
        '/v1/workgroups/{workgroup_id}/projects/{project_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getProject operation.
     * @callback module:api/ProjectApi~getProjectCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProjectExpandVO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a specific Project
     * Get a specific Project
     * @param {String} workgroupId 
     * @param {String} projectId 
     * @param {module:api/ProjectApi~getProjectCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProjectExpandVO}
     */
    getProject(workgroupId, projectId, callback) {
      let postBody = null;
      // verify the required parameter 'workgroupId' is set
      if (workgroupId === undefined || workgroupId === null) {
        throw new Error("Missing the required parameter 'workgroupId' when calling getProject");
      }
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling getProject");
      }

      let pathParams = {
        'workgroup_id': workgroupId,
        'project_id': projectId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*', 'application/json', 'application/x-json-smile', 'application/x-yaml', 'application/xml', 'text/csv', 'text/x-yaml', 'text/xml'];
      let returnType = ProjectExpandVO;
      return this.apiClient.callApi(
        '/v1/workgroups/{workgroup_id}/projects/{project_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getProjectList operation.
     * @callback module:api/ProjectApi~getProjectListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProjectListVO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the projects
     * List the projects
     * @param {String} workgroupId 
     * @param {module:api/ProjectApi~getProjectListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProjectListVO}
     */
    getProjectList(workgroupId, callback) {
      let postBody = null;
      // verify the required parameter 'workgroupId' is set
      if (workgroupId === undefined || workgroupId === null) {
        throw new Error("Missing the required parameter 'workgroupId' when calling getProjectList");
      }

      let pathParams = {
        'workgroup_id': workgroupId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*', 'application/json', 'application/x-json-smile', 'application/x-yaml', 'application/xml', 'text/csv', 'text/x-yaml', 'text/xml'];
      let returnType = ProjectListVO;
      return this.apiClient.callApi(
        '/v1/workgroups/{workgroup_id}/projects', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the patchProject operation.
     * @callback module:api/ProjectApi~patchProjectCallback
     * @param {String} error Error message, if any.
     * @param {module:model/HTTPStatusVO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Patch a specific Project
     * Patch a specific Project
     * @param {String} workgroupId 
     * @param {String} projectId 
     * @param {Object} opts Optional parameters
     * @param {module:model/ProjectPatchPO} [projectPatchPO] 
     * @param {module:api/ProjectApi~patchProjectCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/HTTPStatusVO}
     */
    patchProject(workgroupId, projectId, opts, callback) {
      opts = opts || {};
      let postBody = opts['projectPatchPO'];
      // verify the required parameter 'workgroupId' is set
      if (workgroupId === undefined || workgroupId === null) {
        throw new Error("Missing the required parameter 'workgroupId' when calling patchProject");
      }
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling patchProject");
      }

      let pathParams = {
        'workgroup_id': workgroupId,
        'project_id': projectId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/x-json-smile', 'application/x-yaml', 'application/xml', 'text/csv', 'text/x-yaml', 'text/xml'];
      let accepts = ['*/*', 'application/json', 'application/x-json-smile', 'application/x-yaml', 'application/xml', 'text/csv', 'text/x-yaml', 'text/xml'];
      let returnType = HTTPStatusVO;
      return this.apiClient.callApi(
        '/v1/workgroups/{workgroup_id}/projects/{project_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postProject operation.
     * @callback module:api/ProjectApi~postProjectCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProjectVO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a Project
     * Create a Project
     * @param {String} workgroupId 
     * @param {Object} opts Optional parameters
     * @param {module:model/ProjectPersistVO} [projectPersistVO] 
     * @param {module:api/ProjectApi~postProjectCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProjectVO}
     */
    postProject(workgroupId, opts, callback) {
      opts = opts || {};
      let postBody = opts['projectPersistVO'];
      // verify the required parameter 'workgroupId' is set
      if (workgroupId === undefined || workgroupId === null) {
        throw new Error("Missing the required parameter 'workgroupId' when calling postProject");
      }

      let pathParams = {
        'workgroup_id': workgroupId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/x-json-smile', 'application/x-yaml', 'application/xml', 'text/csv', 'text/x-yaml', 'text/xml'];
      let accepts = ['*/*', 'application/json', 'application/x-json-smile', 'application/x-yaml', 'application/xml', 'text/csv', 'text/x-yaml', 'text/xml'];
      let returnType = ProjectVO;
      return this.apiClient.callApi(
        '/v1/workgroups/{workgroup_id}/projects', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putProject operation.
     * @callback module:api/ProjectApi~putProjectCallback
     * @param {String} error Error message, if any.
     * @param {module:model/HTTPStatusVO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a specific Project
     * Update a specific Project
     * @param {String} workgroupId 
     * @param {String} projectId 
     * @param {Object} opts Optional parameters
     * @param {module:model/ProjectPersistVO} [projectPersistVO] 
     * @param {module:api/ProjectApi~putProjectCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/HTTPStatusVO}
     */
    putProject(workgroupId, projectId, opts, callback) {
      opts = opts || {};
      let postBody = opts['projectPersistVO'];
      // verify the required parameter 'workgroupId' is set
      if (workgroupId === undefined || workgroupId === null) {
        throw new Error("Missing the required parameter 'workgroupId' when calling putProject");
      }
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling putProject");
      }

      let pathParams = {
        'workgroup_id': workgroupId,
        'project_id': projectId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/x-json-smile', 'application/x-yaml', 'application/xml', 'text/csv', 'text/x-yaml', 'text/xml'];
      let accepts = ['*/*', 'application/json', 'application/x-json-smile', 'application/x-yaml', 'application/xml', 'text/csv', 'text/x-yaml', 'text/xml'];
      let returnType = HTTPStatusVO;
      return this.apiClient.callApi(
        '/v1/workgroups/{workgroup_id}/projects/{project_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
