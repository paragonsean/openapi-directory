/**
 * Noosh API application
 * Full description of Noosh API
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import FileResponseVO from '../model/FileResponseVO';
import FileTagResponseVO from '../model/FileTagResponseVO';
import HTTPStatusVO from '../model/HTTPStatusVO';

/**
* File service.
* @module api/FileApi
* @version 1.0
*/
export default class FileApi {

    /**
    * Constructs a new FileApi. 
    * @alias module:api/FileApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getFile operation.
     * @callback module:api/FileApi~getFileCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FileResponseVO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get File from Project.  Works for Regular and Remote Files
     * Get File from Project.  Works for Regular and Remote Files
     * @param {String} workgroupId 
     * @param {String} projectId 
     * @param {String} fileId 
     * @param {module:api/FileApi~getFileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FileResponseVO}
     */
    getFile(workgroupId, projectId, fileId, callback) {
      let postBody = null;
      // verify the required parameter 'workgroupId' is set
      if (workgroupId === undefined || workgroupId === null) {
        throw new Error("Missing the required parameter 'workgroupId' when calling getFile");
      }
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling getFile");
      }
      // verify the required parameter 'fileId' is set
      if (fileId === undefined || fileId === null) {
        throw new Error("Missing the required parameter 'fileId' when calling getFile");
      }

      let pathParams = {
        'workgroup_id': workgroupId,
        'project_id': projectId,
        'file_id': fileId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*', 'application/json', 'application/x-json-smile', 'application/x-yaml', 'application/xml', 'text/csv', 'text/x-yaml', 'text/xml'];
      let returnType = FileResponseVO;
      return this.apiClient.callApi(
        '/1.1/workgroups/{workgroup_id}/projects/{project_id}/files/{file_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getFileTags operation.
     * @callback module:api/FileApi~getFileTagsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FileTagResponseVO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Tags from Workgroup and Project.
     * List Tags from Workgroup and Project.
     * @param {String} workgroupId 
     * @param {String} projectId 
     * @param {module:api/FileApi~getFileTagsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FileTagResponseVO}
     */
    getFileTags(workgroupId, projectId, callback) {
      let postBody = null;
      // verify the required parameter 'workgroupId' is set
      if (workgroupId === undefined || workgroupId === null) {
        throw new Error("Missing the required parameter 'workgroupId' when calling getFileTags");
      }
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling getFileTags");
      }

      let pathParams = {
        'workgroup_id': workgroupId,
        'project_id': projectId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*', 'application/json', 'application/x-json-smile', 'application/x-yaml', 'application/xml', 'text/csv', 'text/x-yaml', 'text/xml'];
      let returnType = FileTagResponseVO;
      return this.apiClient.callApi(
        '/1.1/workgroups/{workgroup_id}/projects/{project_id}/fileTags', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getFiles operation.
     * @callback module:api/FileApi~getFilesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FileResponseVO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Files from Project.  Works for Regular and Remote Files
     * List Files from Project.  Works for Regular and Remote Files
     * @param {String} workgroupId 
     * @param {String} projectId 
     * @param {module:api/FileApi~getFilesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FileResponseVO}
     */
    getFiles(workgroupId, projectId, callback) {
      let postBody = null;
      // verify the required parameter 'workgroupId' is set
      if (workgroupId === undefined || workgroupId === null) {
        throw new Error("Missing the required parameter 'workgroupId' when calling getFiles");
      }
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling getFiles");
      }

      let pathParams = {
        'workgroup_id': workgroupId,
        'project_id': projectId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*', 'application/json', 'application/x-json-smile', 'application/x-yaml', 'application/xml', 'text/csv', 'text/x-yaml', 'text/xml'];
      let returnType = FileResponseVO;
      return this.apiClient.callApi(
        '/1.1/workgroups/{workgroup_id}/projects/{project_id}/files', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uploadFile operation.
     * @callback module:api/FileApi~uploadFileCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FileResponseVO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Upload File to Project.  A multipart/form-data request with a name \"file\"
     * Upload File to Project.  A multipart/form-data request with a name \"file\"
     * @param {String} workgroupId 
     * @param {String} projectId 
     * @param {module:api/FileApi~uploadFileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FileResponseVO}
     */
    uploadFile(workgroupId, projectId, callback) {
      let postBody = null;
      // verify the required parameter 'workgroupId' is set
      if (workgroupId === undefined || workgroupId === null) {
        throw new Error("Missing the required parameter 'workgroupId' when calling uploadFile");
      }
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling uploadFile");
      }

      let pathParams = {
        'workgroup_id': workgroupId,
        'project_id': projectId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['*/*', 'application/json', 'application/x-json-smile', 'application/x-yaml', 'application/xml', 'text/csv', 'text/x-yaml', 'text/xml'];
      let returnType = FileResponseVO;
      return this.apiClient.callApi(
        '/1.1/workgroups/{workgroup_id}/projects/{project_id}/files', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
