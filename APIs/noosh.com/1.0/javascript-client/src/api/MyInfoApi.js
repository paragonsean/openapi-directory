/**
 * Noosh API application
 * Full description of Noosh API
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AutomaticInvitationsListVO from '../model/AutomaticInvitationsListVO';
import HTTPStatusVO from '../model/HTTPStatusVO';
import ProfileImageVO from '../model/ProfileImageVO';
import TeamTemplateExpandVO from '../model/TeamTemplateExpandVO';
import TeamTemplateListVO from '../model/TeamTemplateListVO';

/**
* MyInfo service.
* @module api/MyInfoApi
* @version 1.0
*/
export default class MyInfoApi {

    /**
    * Constructs a new MyInfoApi. 
    * @alias module:api/MyInfoApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getAutomaticInvitationList operation.
     * @callback module:api/MyInfoApi~getAutomaticInvitationListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AutomaticInvitationsListVO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List current user's automatic invitations info 
     * List current user's automatic invitations info 
     * @param {String} workgroupId 
     * @param {module:api/MyInfoApi~getAutomaticInvitationListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AutomaticInvitationsListVO}
     */
    getAutomaticInvitationList(workgroupId, callback) {
      let postBody = null;
      // verify the required parameter 'workgroupId' is set
      if (workgroupId === undefined || workgroupId === null) {
        throw new Error("Missing the required parameter 'workgroupId' when calling getAutomaticInvitationList");
      }

      let pathParams = {
        'workgroup_id': workgroupId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*', 'application/json', 'application/x-json-smile', 'application/x-yaml', 'application/xml', 'text/csv', 'text/x-yaml', 'text/xml'];
      let returnType = AutomaticInvitationsListVO;
      return this.apiClient.callApi(
        '/v1/workgroups/{workgroup_id}/automaticInvitations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTeamTemplateDetail operation.
     * @callback module:api/MyInfoApi~getTeamTemplateDetailCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TeamTemplateExpandVO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get current user's team template detal info 
     * Get current user's team template detal info 
     * @param {String} workgroupId 
     * @param {String} teamTemplateId 
     * @param {module:api/MyInfoApi~getTeamTemplateDetailCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TeamTemplateExpandVO}
     */
    getTeamTemplateDetail(workgroupId, teamTemplateId, callback) {
      let postBody = null;
      // verify the required parameter 'workgroupId' is set
      if (workgroupId === undefined || workgroupId === null) {
        throw new Error("Missing the required parameter 'workgroupId' when calling getTeamTemplateDetail");
      }
      // verify the required parameter 'teamTemplateId' is set
      if (teamTemplateId === undefined || teamTemplateId === null) {
        throw new Error("Missing the required parameter 'teamTemplateId' when calling getTeamTemplateDetail");
      }

      let pathParams = {
        'workgroup_id': workgroupId,
        'team_template_id': teamTemplateId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*', 'application/json', 'application/x-json-smile', 'application/x-yaml', 'application/xml', 'text/csv', 'text/x-yaml', 'text/xml'];
      let returnType = TeamTemplateExpandVO;
      return this.apiClient.callApi(
        '/v1/workgroups/{workgroup_id}/teamTemplates/{team_template_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTeamTemplateList operation.
     * @callback module:api/MyInfoApi~getTeamTemplateListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TeamTemplateListVO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List current user's team templates info 
     * List current user's team templates info 
     * @param {String} workgroupId 
     * @param {module:api/MyInfoApi~getTeamTemplateListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TeamTemplateListVO}
     */
    getTeamTemplateList(workgroupId, callback) {
      let postBody = null;
      // verify the required parameter 'workgroupId' is set
      if (workgroupId === undefined || workgroupId === null) {
        throw new Error("Missing the required parameter 'workgroupId' when calling getTeamTemplateList");
      }

      let pathParams = {
        'workgroup_id': workgroupId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*', 'application/json', 'application/x-json-smile', 'application/x-yaml', 'application/xml', 'text/csv', 'text/x-yaml', 'text/xml'];
      let returnType = TeamTemplateListVO;
      return this.apiClient.callApi(
        '/v1/workgroups/{workgroup_id}/teamTemplates', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uploadProfileImage operation.
     * @callback module:api/MyInfoApi~uploadProfileImageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProfileImageVO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Upload Profile Image.  A multipart/form-data request with a name \"file\"
     * Upload Profile Image.  A multipart/form-data request with a name \"file\"
     * @param {String} workgroupId 
     * @param {Object} opts Optional parameters
     * @param {File} [body] 
     * @param {module:api/MyInfoApi~uploadProfileImageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProfileImageVO}
     */
    uploadProfileImage(workgroupId, opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];
      // verify the required parameter 'workgroupId' is set
      if (workgroupId === undefined || workgroupId === null) {
        throw new Error("Missing the required parameter 'workgroupId' when calling uploadProfileImage");
      }

      let pathParams = {
        'workgroup_id': workgroupId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/x-json-smile', 'application/x-yaml', 'application/xml', 'text/csv', 'text/x-yaml', 'text/xml'];
      let accepts = ['*/*', 'application/json', 'application/x-json-smile', 'application/x-yaml', 'application/xml', 'text/csv', 'text/x-yaml', 'text/xml'];
      let returnType = ProfileImageVO;
      return this.apiClient.callApi(
        '/v1/workgroups/{workgroup_id}/profileImage', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
