/**
 * Noosh API application
 * Full description of Noosh API
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import HTTPStatusVO from '../model/HTTPStatusVO';
import PropertyParamListVO from '../model/PropertyParamListVO';
import SpecHTTPStatusVO from '../model/SpecHTTPStatusVO';
import SpecListVO from '../model/SpecListVO';
import SpecPersistVO from '../model/SpecPersistVO';
import SpecTypeFieldsListVO from '../model/SpecTypeFieldsListVO';
import SpecUpdatePersistVO from '../model/SpecUpdatePersistVO';
import SpecVO from '../model/SpecVO';
import V1X1SpecUpdatingPO from '../model/V1X1SpecUpdatingPO';
import V1x1SpecExpandVO from '../model/V1x1SpecExpandVO';
import WgSpecPrdTypeRegPersistVO from '../model/WgSpecPrdTypeRegPersistVO';
import WorkgroupAttributeListVO from '../model/WorkgroupAttributeListVO';

/**
* Spec service.
* @module api/SpecApi
* @version 1.0
*/
export default class SpecApi {

    /**
    * Constructs a new SpecApi. 
    * @alias module:api/SpecApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getProductTypeListOfWorkgroup operation.
     * @callback module:api/SpecApi~getProductTypeListOfWorkgroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WorkgroupAttributeListVO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get product type of workgroup level
     * Get product type of workgroup level
     * @param {String} workgroupId 
     * @param {module:api/SpecApi~getProductTypeListOfWorkgroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WorkgroupAttributeListVO}
     */
    getProductTypeListOfWorkgroup(workgroupId, callback) {
      let postBody = null;
      // verify the required parameter 'workgroupId' is set
      if (workgroupId === undefined || workgroupId === null) {
        throw new Error("Missing the required parameter 'workgroupId' when calling getProductTypeListOfWorkgroup");
      }

      let pathParams = {
        'workgroup_id': workgroupId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*', 'application/json', 'application/x-json-smile', 'application/x-yaml', 'application/xml', 'text/csv', 'text/x-yaml', 'text/xml'];
      let returnType = WorkgroupAttributeListVO;
      return this.apiClient.callApi(
        '/v1/workgroups/{workgroup_id}/productTypes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSpec operation.
     * @callback module:api/SpecApi~getSpecCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1x1SpecExpandVO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List a specific spec of project Level
     * List a specific spec of project Level
     * @param {String} workgroupId 
     * @param {String} projectId 
     * @param {String} specId 
     * @param {module:api/SpecApi~getSpecCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1x1SpecExpandVO}
     */
    getSpec(workgroupId, projectId, specId, callback) {
      let postBody = null;
      // verify the required parameter 'workgroupId' is set
      if (workgroupId === undefined || workgroupId === null) {
        throw new Error("Missing the required parameter 'workgroupId' when calling getSpec");
      }
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling getSpec");
      }
      // verify the required parameter 'specId' is set
      if (specId === undefined || specId === null) {
        throw new Error("Missing the required parameter 'specId' when calling getSpec");
      }

      let pathParams = {
        'workgroup_id': workgroupId,
        'project_id': projectId,
        'spec_id': specId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*', 'application/json', 'application/x-json-smile', 'application/x-yaml', 'application/xml', 'text/csv', 'text/x-yaml', 'text/xml'];
      let returnType = V1x1SpecExpandVO;
      return this.apiClient.callApi(
        '/1.1/workgroups/{workgroup_id}/projects/{project_id}/specs/{spec_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSpecList operation.
     * @callback module:api/SpecApi~getSpecListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SpecListVO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List specs of project Level
     * List specs of project Level
     * @param {String} workgroupId 
     * @param {String} projectId 
     * @param {module:api/SpecApi~getSpecListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SpecListVO}
     */
    getSpecList(workgroupId, projectId, callback) {
      let postBody = null;
      // verify the required parameter 'workgroupId' is set
      if (workgroupId === undefined || workgroupId === null) {
        throw new Error("Missing the required parameter 'workgroupId' when calling getSpecList");
      }
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling getSpecList");
      }

      let pathParams = {
        'workgroup_id': workgroupId,
        'project_id': projectId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*', 'application/json', 'application/x-json-smile', 'application/x-yaml', 'application/xml', 'text/csv', 'text/x-yaml', 'text/xml'];
      let returnType = SpecListVO;
      return this.apiClient.callApi(
        '/v1/workgroups/{workgroup_id}/projects/{project_id}/specs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSpecProductTypeListOfWorkgroup operation.
     * @callback module:api/SpecApi~getSpecProductTypeListOfWorkgroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WorkgroupAttributeListVO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get product type of spec level by workgroupId
     * Get product type of spec level by workgroupId
     * @param {String} workgroupId 
     * @param {module:api/SpecApi~getSpecProductTypeListOfWorkgroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WorkgroupAttributeListVO}
     */
    getSpecProductTypeListOfWorkgroup(workgroupId, callback) {
      let postBody = null;
      // verify the required parameter 'workgroupId' is set
      if (workgroupId === undefined || workgroupId === null) {
        throw new Error("Missing the required parameter 'workgroupId' when calling getSpecProductTypeListOfWorkgroup");
      }

      let pathParams = {
        'workgroup_id': workgroupId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*', 'application/json', 'application/x-json-smile', 'application/x-yaml', 'application/xml', 'text/csv', 'text/x-yaml', 'text/xml'];
      let returnType = WorkgroupAttributeListVO;
      return this.apiClient.callApi(
        '/v1/workgroups/{workgroup_id}/productTypesOfSpecTypes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSpecTypeFields operation.
     * @callback module:api/SpecApi~getSpecTypeFieldsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SpecTypeFieldsListVO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Spec Type Fields
     * Get Spec Type Fields
     * @param {String} workgroupId 
     * @param {String} specTypeId 
     * @param {module:api/SpecApi~getSpecTypeFieldsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SpecTypeFieldsListVO}
     */
    getSpecTypeFields(workgroupId, specTypeId, callback) {
      let postBody = null;
      // verify the required parameter 'workgroupId' is set
      if (workgroupId === undefined || workgroupId === null) {
        throw new Error("Missing the required parameter 'workgroupId' when calling getSpecTypeFields");
      }
      // verify the required parameter 'specTypeId' is set
      if (specTypeId === undefined || specTypeId === null) {
        throw new Error("Missing the required parameter 'specTypeId' when calling getSpecTypeFields");
      }

      let pathParams = {
        'workgroup_id': workgroupId,
        'spec_type_id': specTypeId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*', 'application/json', 'application/x-json-smile', 'application/x-yaml', 'application/xml', 'text/csv', 'text/x-yaml', 'text/xml'];
      let returnType = SpecTypeFieldsListVO;
      return this.apiClient.callApi(
        '/1.1/workgroups/{workgroup_id}/specTypes/{spec_type_id}/specTypeFields', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postSpec operation.
     * @callback module:api/SpecApi~postSpecCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SpecVO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a Spec
     * Create a Spec
     * @param {String} workgroupId 
     * @param {String} projectId 
     * @param {Object} opts Optional parameters
     * @param {module:model/SpecPersistVO} [specPersistVO] 
     * @param {module:api/SpecApi~postSpecCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SpecVO}
     */
    postSpec(workgroupId, projectId, opts, callback) {
      opts = opts || {};
      let postBody = opts['specPersistVO'];
      // verify the required parameter 'workgroupId' is set
      if (workgroupId === undefined || workgroupId === null) {
        throw new Error("Missing the required parameter 'workgroupId' when calling postSpec");
      }
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling postSpec");
      }

      let pathParams = {
        'workgroup_id': workgroupId,
        'project_id': projectId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/x-json-smile', 'application/x-yaml', 'application/xml', 'text/csv', 'text/x-yaml', 'text/xml'];
      let accepts = ['*/*', 'application/json', 'application/x-json-smile', 'application/x-yaml', 'application/xml', 'text/csv', 'text/x-yaml', 'text/xml'];
      let returnType = SpecVO;
      return this.apiClient.callApi(
        '/v1/workgroups/{workgroup_id}/projects/{project_id}/specs', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postSpecProductTypeListOfWorkgroup operation.
     * @callback module:api/SpecApi~postSpecProductTypeListOfWorkgroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WgSpecPrdTypeRegPersistVO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Register product types for spec types
     * Register product types for spec types
     * @param {String} workgroupId 
     * @param {Object} opts Optional parameters
     * @param {module:model/WgSpecPrdTypeRegPersistVO} [wgSpecPrdTypeRegPersistVO] 
     * @param {module:api/SpecApi~postSpecProductTypeListOfWorkgroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WgSpecPrdTypeRegPersistVO}
     */
    postSpecProductTypeListOfWorkgroup(workgroupId, opts, callback) {
      opts = opts || {};
      let postBody = opts['wgSpecPrdTypeRegPersistVO'];
      // verify the required parameter 'workgroupId' is set
      if (workgroupId === undefined || workgroupId === null) {
        throw new Error("Missing the required parameter 'workgroupId' when calling postSpecProductTypeListOfWorkgroup");
      }

      let pathParams = {
        'workgroup_id': workgroupId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/x-json-smile', 'application/x-yaml', 'application/xml', 'text/csv', 'text/x-yaml', 'text/xml'];
      let accepts = ['*/*', 'application/json', 'application/x-json-smile', 'application/x-yaml', 'application/xml', 'text/csv', 'text/x-yaml', 'text/xml'];
      let returnType = WgSpecPrdTypeRegPersistVO;
      return this.apiClient.callApi(
        '/v1/workgroups/{workgroup_id}/productTypesOfSpecTypes', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putSpec operation.
     * @callback module:api/SpecApi~putSpecCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SpecHTTPStatusVO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a specific Spec
     * Update a specific Spec
     * @param {String} workgroupId 
     * @param {String} projectId 
     * @param {String} specId 
     * @param {Object} opts Optional parameters
     * @param {module:model/V1X1SpecUpdatingPO} [v1X1SpecUpdatingPO] 
     * @param {module:api/SpecApi~putSpecCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SpecHTTPStatusVO}
     */
    putSpec(workgroupId, projectId, specId, opts, callback) {
      opts = opts || {};
      let postBody = opts['v1X1SpecUpdatingPO'];
      // verify the required parameter 'workgroupId' is set
      if (workgroupId === undefined || workgroupId === null) {
        throw new Error("Missing the required parameter 'workgroupId' when calling putSpec");
      }
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling putSpec");
      }
      // verify the required parameter 'specId' is set
      if (specId === undefined || specId === null) {
        throw new Error("Missing the required parameter 'specId' when calling putSpec");
      }

      let pathParams = {
        'workgroup_id': workgroupId,
        'project_id': projectId,
        'spec_id': specId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/x-json-smile', 'application/x-yaml', 'application/xml', 'text/csv', 'text/x-yaml', 'text/xml'];
      let accepts = ['*/*', 'application/json', 'application/x-json-smile', 'application/x-yaml', 'application/xml', 'text/csv', 'text/x-yaml', 'text/xml'];
      let returnType = SpecHTTPStatusVO;
      return this.apiClient.callApi(
        '/1.1/workgroups/{workgroup_id}/projects/{project_id}/specs/{spec_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v1WorkgroupsWorkgroupIdProjectsProjectIdSpecsSpecIdGet operation.
     * @callback module:api/SpecApi~v1WorkgroupsWorkgroupIdProjectsProjectIdSpecsSpecIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SpecListVO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List a specific spec of project Level
     * List a specific spec of project Level
     * @param {String} workgroupId 
     * @param {String} projectId 
     * @param {String} specId 
     * @param {module:api/SpecApi~v1WorkgroupsWorkgroupIdProjectsProjectIdSpecsSpecIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SpecListVO}
     */
    v1WorkgroupsWorkgroupIdProjectsProjectIdSpecsSpecIdGet(workgroupId, projectId, specId, callback) {
      let postBody = null;
      // verify the required parameter 'workgroupId' is set
      if (workgroupId === undefined || workgroupId === null) {
        throw new Error("Missing the required parameter 'workgroupId' when calling v1WorkgroupsWorkgroupIdProjectsProjectIdSpecsSpecIdGet");
      }
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling v1WorkgroupsWorkgroupIdProjectsProjectIdSpecsSpecIdGet");
      }
      // verify the required parameter 'specId' is set
      if (specId === undefined || specId === null) {
        throw new Error("Missing the required parameter 'specId' when calling v1WorkgroupsWorkgroupIdProjectsProjectIdSpecsSpecIdGet");
      }

      let pathParams = {
        'workgroup_id': workgroupId,
        'project_id': projectId,
        'spec_id': specId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*', 'application/json', 'application/x-json-smile', 'application/x-yaml', 'application/xml', 'text/csv', 'text/x-yaml', 'text/xml'];
      let returnType = SpecListVO;
      return this.apiClient.callApi(
        '/v1/workgroups/{workgroup_id}/projects/{project_id}/specs/{spec_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v1WorkgroupsWorkgroupIdProjectsProjectIdSpecsSpecIdPut operation.
     * @callback module:api/SpecApi~v1WorkgroupsWorkgroupIdProjectsProjectIdSpecsSpecIdPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SpecHTTPStatusVO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a specific Spec
     * Update a specific Spec
     * @param {String} workgroupId 
     * @param {String} projectId 
     * @param {String} specId 
     * @param {Object} opts Optional parameters
     * @param {module:model/SpecUpdatePersistVO} [specUpdatePersistVO] 
     * @param {module:api/SpecApi~v1WorkgroupsWorkgroupIdProjectsProjectIdSpecsSpecIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SpecHTTPStatusVO}
     */
    v1WorkgroupsWorkgroupIdProjectsProjectIdSpecsSpecIdPut(workgroupId, projectId, specId, opts, callback) {
      opts = opts || {};
      let postBody = opts['specUpdatePersistVO'];
      // verify the required parameter 'workgroupId' is set
      if (workgroupId === undefined || workgroupId === null) {
        throw new Error("Missing the required parameter 'workgroupId' when calling v1WorkgroupsWorkgroupIdProjectsProjectIdSpecsSpecIdPut");
      }
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling v1WorkgroupsWorkgroupIdProjectsProjectIdSpecsSpecIdPut");
      }
      // verify the required parameter 'specId' is set
      if (specId === undefined || specId === null) {
        throw new Error("Missing the required parameter 'specId' when calling v1WorkgroupsWorkgroupIdProjectsProjectIdSpecsSpecIdPut");
      }

      let pathParams = {
        'workgroup_id': workgroupId,
        'project_id': projectId,
        'spec_id': specId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/x-json-smile', 'application/x-yaml', 'application/xml', 'text/csv', 'text/x-yaml', 'text/xml'];
      let accepts = ['*/*', 'application/json', 'application/x-json-smile', 'application/x-yaml', 'application/xml', 'text/csv', 'text/x-yaml', 'text/xml'];
      let returnType = SpecHTTPStatusVO;
      return this.apiClient.callApi(
        '/v1/workgroups/{workgroup_id}/projects/{project_id}/specs/{spec_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v1WorkgroupsWorkgroupIdSpecTypesSpecTypeIdSpecTypeFieldsGet operation.
     * @callback module:api/SpecApi~v1WorkgroupsWorkgroupIdSpecTypesSpecTypeIdSpecTypeFieldsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PropertyParamListVO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Spec Type Fields
     * Get Spec Type Fields
     * @param {String} workgroupId 
     * @param {String} specTypeId 
     * @param {module:api/SpecApi~v1WorkgroupsWorkgroupIdSpecTypesSpecTypeIdSpecTypeFieldsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PropertyParamListVO}
     */
    v1WorkgroupsWorkgroupIdSpecTypesSpecTypeIdSpecTypeFieldsGet(workgroupId, specTypeId, callback) {
      let postBody = null;
      // verify the required parameter 'workgroupId' is set
      if (workgroupId === undefined || workgroupId === null) {
        throw new Error("Missing the required parameter 'workgroupId' when calling v1WorkgroupsWorkgroupIdSpecTypesSpecTypeIdSpecTypeFieldsGet");
      }
      // verify the required parameter 'specTypeId' is set
      if (specTypeId === undefined || specTypeId === null) {
        throw new Error("Missing the required parameter 'specTypeId' when calling v1WorkgroupsWorkgroupIdSpecTypesSpecTypeIdSpecTypeFieldsGet");
      }

      let pathParams = {
        'workgroup_id': workgroupId,
        'spec_type_id': specTypeId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*', 'application/json', 'application/x-json-smile', 'application/x-yaml', 'application/xml', 'text/csv', 'text/x-yaml', 'text/xml'];
      let returnType = PropertyParamListVO;
      return this.apiClient.callApi(
        '/v1/workgroups/{workgroup_id}/specTypes/{spec_type_id}/specTypeFields', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
