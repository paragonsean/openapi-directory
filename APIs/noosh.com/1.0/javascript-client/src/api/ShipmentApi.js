/**
 * Noosh API application
 * Full description of Noosh API
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import HTTPStatusVO from '../model/HTTPStatusVO';
import ShipmentExpandVO from '../model/ShipmentExpandVO';
import ShipmentListVO from '../model/ShipmentListVO';
import ShipmentLocationPersistVO from '../model/ShipmentLocationPersistVO';
import ShipmentLocationPostPersistVO from '../model/ShipmentLocationPostPersistVO';
import ShipmentLocationsPOSTResultVO from '../model/ShipmentLocationsPOSTResultVO';

/**
* Shipment service.
* @module api/ShipmentApi
* @version 1.0
*/
export default class ShipmentApi {

    /**
    * Constructs a new ShipmentApi. 
    * @alias module:api/ShipmentApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getShipment operation.
     * @callback module:api/ShipmentApi~getShipmentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ShipmentExpandVO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a specific shipment.
     * Get a specific shipment.
     * @param {String} workgroupId 
     * @param {String} projectId 
     * @param {String} shipmentId 
     * @param {module:api/ShipmentApi~getShipmentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ShipmentExpandVO}
     */
    getShipment(workgroupId, projectId, shipmentId, callback) {
      let postBody = null;
      // verify the required parameter 'workgroupId' is set
      if (workgroupId === undefined || workgroupId === null) {
        throw new Error("Missing the required parameter 'workgroupId' when calling getShipment");
      }
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling getShipment");
      }
      // verify the required parameter 'shipmentId' is set
      if (shipmentId === undefined || shipmentId === null) {
        throw new Error("Missing the required parameter 'shipmentId' when calling getShipment");
      }

      let pathParams = {
        'workgroup_id': workgroupId,
        'project_id': projectId,
        'shipment_id': shipmentId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*', 'application/json', 'application/x-json-smile', 'application/x-yaml', 'application/xml', 'text/csv', 'text/x-yaml', 'text/xml'];
      let returnType = ShipmentExpandVO;
      return this.apiClient.callApi(
        '/v1/workgroups/{workgroup_id}/projects/{project_id}/shipments/{shipment_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getShipmentList operation.
     * @callback module:api/ShipmentApi~getShipmentListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ShipmentListVO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List shipments of project
     * List shipments of project
     * @param {String} workgroupId 
     * @param {String} projectId 
     * @param {module:api/ShipmentApi~getShipmentListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ShipmentListVO}
     */
    getShipmentList(workgroupId, projectId, callback) {
      let postBody = null;
      // verify the required parameter 'workgroupId' is set
      if (workgroupId === undefined || workgroupId === null) {
        throw new Error("Missing the required parameter 'workgroupId' when calling getShipmentList");
      }
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling getShipmentList");
      }

      let pathParams = {
        'workgroup_id': workgroupId,
        'project_id': projectId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*', 'application/json', 'application/x-json-smile', 'application/x-yaml', 'application/xml', 'text/csv', 'text/x-yaml', 'text/xml'];
      let returnType = ShipmentListVO;
      return this.apiClient.callApi(
        '/v1/workgroups/{workgroup_id}/projects/{project_id}/shipments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postShipment operation.
     * @callback module:api/ShipmentApi~postShipmentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ShipmentLocationsPOSTResultVO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a shipment
     * Create a shipment
     * @param {String} workgroupId 
     * @param {String} projectId 
     * @param {Object} opts Optional parameters
     * @param {module:model/ShipmentLocationPostPersistVO} [shipmentLocationPostPersistVO] 
     * @param {module:api/ShipmentApi~postShipmentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ShipmentLocationsPOSTResultVO}
     */
    postShipment(workgroupId, projectId, opts, callback) {
      opts = opts || {};
      let postBody = opts['shipmentLocationPostPersistVO'];
      // verify the required parameter 'workgroupId' is set
      if (workgroupId === undefined || workgroupId === null) {
        throw new Error("Missing the required parameter 'workgroupId' when calling postShipment");
      }
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling postShipment");
      }

      let pathParams = {
        'workgroup_id': workgroupId,
        'project_id': projectId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/x-json-smile', 'application/x-yaml', 'application/xml', 'text/csv', 'text/x-yaml', 'text/xml'];
      let accepts = ['*/*', 'application/json', 'application/x-json-smile', 'application/x-yaml', 'application/xml', 'text/csv', 'text/x-yaml', 'text/xml'];
      let returnType = ShipmentLocationsPOSTResultVO;
      return this.apiClient.callApi(
        '/v1/workgroups/{workgroup_id}/projects/{project_id}/shipments', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putShipmentLocation operation.
     * @callback module:api/ShipmentApi~putShipmentLocationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/HTTPStatusVO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a specific shipment location
     * Update a specific shipment location
     * @param {String} workgroupId 
     * @param {String} projectId 
     * @param {String} shipmentId 
     * @param {String} locationId 
     * @param {Object} opts Optional parameters
     * @param {module:model/ShipmentLocationPersistVO} [shipmentLocationPersistVO] 
     * @param {module:api/ShipmentApi~putShipmentLocationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/HTTPStatusVO}
     */
    putShipmentLocation(workgroupId, projectId, shipmentId, locationId, opts, callback) {
      opts = opts || {};
      let postBody = opts['shipmentLocationPersistVO'];
      // verify the required parameter 'workgroupId' is set
      if (workgroupId === undefined || workgroupId === null) {
        throw new Error("Missing the required parameter 'workgroupId' when calling putShipmentLocation");
      }
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling putShipmentLocation");
      }
      // verify the required parameter 'shipmentId' is set
      if (shipmentId === undefined || shipmentId === null) {
        throw new Error("Missing the required parameter 'shipmentId' when calling putShipmentLocation");
      }
      // verify the required parameter 'locationId' is set
      if (locationId === undefined || locationId === null) {
        throw new Error("Missing the required parameter 'locationId' when calling putShipmentLocation");
      }

      let pathParams = {
        'workgroup_id': workgroupId,
        'project_id': projectId,
        'shipment_id': shipmentId,
        'location_id': locationId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/x-json-smile', 'application/x-yaml', 'application/xml', 'text/csv', 'text/x-yaml', 'text/xml'];
      let accepts = ['*/*', 'application/json', 'application/x-json-smile', 'application/x-yaml', 'application/xml', 'text/csv', 'text/x-yaml', 'text/xml'];
      let returnType = HTTPStatusVO;
      return this.apiClient.callApi(
        '/v1/workgroups/{workgroup_id}/projects/{project_id}/shipments/{shipment_id}/locations/{location_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
