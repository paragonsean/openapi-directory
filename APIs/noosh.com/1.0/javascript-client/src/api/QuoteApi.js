/**
 * Noosh API application
 * Full description of Noosh API
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import HTTPStatusVO from '../model/HTTPStatusVO';
import ObjectStateListVO from '../model/ObjectStateListVO';
import QuoteExpandVO from '../model/QuoteExpandVO';
import QuoteListVO from '../model/QuoteListVO';
import QuoteOfWgLevelSimpleVO from '../model/QuoteOfWgLevelSimpleVO';
import QuotePutPersistVO from '../model/QuotePutPersistVO';

/**
* Quote service.
* @module api/QuoteApi
* @version 1.0
*/
export default class QuoteApi {

    /**
    * Constructs a new QuoteApi. 
    * @alias module:api/QuoteApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getQuote operation.
     * @callback module:api/QuoteApi~getQuoteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/QuoteExpandVO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a specific quote of project
     * Get a specific quote of project
     * @param {String} workgroupId 
     * @param {String} projectId 
     * @param {String} quoteId 
     * @param {module:api/QuoteApi~getQuoteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/QuoteExpandVO}
     */
    getQuote(workgroupId, projectId, quoteId, callback) {
      let postBody = null;
      // verify the required parameter 'workgroupId' is set
      if (workgroupId === undefined || workgroupId === null) {
        throw new Error("Missing the required parameter 'workgroupId' when calling getQuote");
      }
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling getQuote");
      }
      // verify the required parameter 'quoteId' is set
      if (quoteId === undefined || quoteId === null) {
        throw new Error("Missing the required parameter 'quoteId' when calling getQuote");
      }

      let pathParams = {
        'workgroup_id': workgroupId,
        'project_id': projectId,
        'quote_id': quoteId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*', 'application/json', 'application/x-json-smile', 'application/x-yaml', 'application/xml', 'text/csv', 'text/x-yaml', 'text/xml'];
      let returnType = QuoteExpandVO;
      return this.apiClient.callApi(
        '/v1/workgroups/{workgroup_id}/projects/{project_id}/quotes/{quote_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getQuoteList operation.
     * @callback module:api/QuoteApi~getQuoteListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/QuoteListVO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the quotes
     * List the quotes
     * @param {String} workgroupId 
     * @param {String} projectId 
     * @param {Object} opts Optional parameters
     * @param {String} [quoteStateIdUseFiltersquoteStateId111111] Quote Object State Id, use /workgroups/{workgroup_id}/quoteStates to get correct value
     * @param {module:api/QuoteApi~getQuoteListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/QuoteListVO}
     */
    getQuoteList(workgroupId, projectId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'workgroupId' is set
      if (workgroupId === undefined || workgroupId === null) {
        throw new Error("Missing the required parameter 'workgroupId' when calling getQuoteList");
      }
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling getQuoteList");
      }

      let pathParams = {
        'workgroup_id': workgroupId,
        'project_id': projectId
      };
      let queryParams = {
        'quote_state_id, use filters&#x3D;{&quot;quote_state_id&quot;:111111}': opts['quoteStateIdUseFiltersquoteStateId111111']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*', 'application/json', 'application/x-json-smile', 'application/x-yaml', 'application/xml', 'text/csv', 'text/x-yaml', 'text/xml'];
      let returnType = QuoteListVO;
      return this.apiClient.callApi(
        '/v1/workgroups/{workgroup_id}/projects/{project_id}/quotes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getQuoteStateList operation.
     * @callback module:api/QuoteApi~getQuoteStateListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ObjectStateListVO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the quote states
     * List the quote states
     * @param {String} workgroupId 
     * @param {module:api/QuoteApi~getQuoteStateListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ObjectStateListVO}
     */
    getQuoteStateList(workgroupId, callback) {
      let postBody = null;
      // verify the required parameter 'workgroupId' is set
      if (workgroupId === undefined || workgroupId === null) {
        throw new Error("Missing the required parameter 'workgroupId' when calling getQuoteStateList");
      }

      let pathParams = {
        'workgroup_id': workgroupId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*', 'application/json', 'application/x-json-smile', 'application/x-yaml', 'application/xml', 'text/csv', 'text/x-yaml', 'text/xml'];
      let returnType = ObjectStateListVO;
      return this.apiClient.callApi(
        '/v1/workgroups/{workgroup_id}/quoteStates', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putQuote operation.
     * @callback module:api/QuoteApi~putQuoteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/HTTPStatusVO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Accept / Reject a Quote
     * Accept / Reject a Quote
     * @param {String} workgroupId 
     * @param {String} projectId 
     * @param {String} quoteId 
     * @param {Object} opts Optional parameters
     * @param {module:model/QuotePutPersistVO} [quotePutPersistVO] 
     * @param {module:api/QuoteApi~putQuoteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/HTTPStatusVO}
     */
    putQuote(workgroupId, projectId, quoteId, opts, callback) {
      opts = opts || {};
      let postBody = opts['quotePutPersistVO'];
      // verify the required parameter 'workgroupId' is set
      if (workgroupId === undefined || workgroupId === null) {
        throw new Error("Missing the required parameter 'workgroupId' when calling putQuote");
      }
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling putQuote");
      }
      // verify the required parameter 'quoteId' is set
      if (quoteId === undefined || quoteId === null) {
        throw new Error("Missing the required parameter 'quoteId' when calling putQuote");
      }

      let pathParams = {
        'workgroup_id': workgroupId,
        'project_id': projectId,
        'quote_id': quoteId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/x-json-smile', 'application/x-yaml', 'application/xml', 'text/csv', 'text/x-yaml', 'text/xml'];
      let accepts = ['*/*', 'application/json', 'application/x-json-smile', 'application/x-yaml', 'application/xml', 'text/csv', 'text/x-yaml', 'text/xml'];
      let returnType = HTTPStatusVO;
      return this.apiClient.callApi(
        '/v1/workgroups/{workgroup_id}/projects/{project_id}/quotes/{quote_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v1WorkgroupsWorkgroupIdQuotesGet operation.
     * @callback module:api/QuoteApi~v1WorkgroupsWorkgroupIdQuotesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/QuoteOfWgLevelSimpleVO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the quotes of workgroup level
     * List the quotes of workgroup level
     * @param {String} workgroupId 
     * @param {Object} opts Optional parameters
     * @param {String} [quoteStateIdUseFiltersquoteStateId111111] Quote Object State Id, use /workgroups/{workgroup_id}/quoteStates to get correct value
     * @param {module:api/QuoteApi~v1WorkgroupsWorkgroupIdQuotesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/QuoteOfWgLevelSimpleVO}
     */
    v1WorkgroupsWorkgroupIdQuotesGet(workgroupId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'workgroupId' is set
      if (workgroupId === undefined || workgroupId === null) {
        throw new Error("Missing the required parameter 'workgroupId' when calling v1WorkgroupsWorkgroupIdQuotesGet");
      }

      let pathParams = {
        'workgroup_id': workgroupId
      };
      let queryParams = {
        'quote_state_id, use filters&#x3D;{&quot;quote_state_id&quot;:111111}': opts['quoteStateIdUseFiltersquoteStateId111111']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*', 'application/json', 'application/x-json-smile', 'application/x-yaml', 'application/xml', 'text/csv', 'text/x-yaml', 'text/xml'];
      let returnType = QuoteOfWgLevelSimpleVO;
      return this.apiClient.callApi(
        '/v1/workgroups/{workgroup_id}/quotes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
