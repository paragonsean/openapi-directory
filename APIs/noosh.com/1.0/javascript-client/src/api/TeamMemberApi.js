/**
 * Noosh API application
 * Full description of Noosh API
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ContactUserVO from '../model/ContactUserVO';
import HTTPStatusVO from '../model/HTTPStatusVO';
import TeamMemberBaseInfVO from '../model/TeamMemberBaseInfVO';
import TeamMemberListVO from '../model/TeamMemberListVO';
import TeamMemberPO from '../model/TeamMemberPO';
import V1x1InvitedTeamMemberResultsVO from '../model/V1x1InvitedTeamMemberResultsVO';

/**
* TeamMember service.
* @module api/TeamMemberApi
* @version 1.0
*/
export default class TeamMemberApi {

    /**
    * Constructs a new TeamMemberApi. 
    * @alias module:api/TeamMemberApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the deleteTeamMemberOfProject operation.
     * @callback module:api/TeamMemberApi~deleteTeamMemberOfProjectCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TeamMemberBaseInfVO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a team member for the specific project.
     * Delete a team member for the specific project.
     * @param {String} workgroupId 
     * @param {String} projectId 
     * @param {String} teammemberId 
     * @param {module:api/TeamMemberApi~deleteTeamMemberOfProjectCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TeamMemberBaseInfVO}
     */
    deleteTeamMemberOfProject(workgroupId, projectId, teammemberId, callback) {
      let postBody = null;
      // verify the required parameter 'workgroupId' is set
      if (workgroupId === undefined || workgroupId === null) {
        throw new Error("Missing the required parameter 'workgroupId' when calling deleteTeamMemberOfProject");
      }
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling deleteTeamMemberOfProject");
      }
      // verify the required parameter 'teammemberId' is set
      if (teammemberId === undefined || teammemberId === null) {
        throw new Error("Missing the required parameter 'teammemberId' when calling deleteTeamMemberOfProject");
      }

      let pathParams = {
        'workgroup_id': workgroupId,
        'project_id': projectId,
        'teammember_id': teammemberId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*', 'application/json', 'application/x-json-smile', 'application/x-yaml', 'application/xml', 'text/csv', 'text/x-yaml', 'text/xml'];
      let returnType = TeamMemberBaseInfVO;
      return this.apiClient.callApi(
        '/v1/workgroups/{workgroup_id}/projects/{project_id}/teammembers/{teammember_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTeamMemberListOfClientProject operation.
     * @callback module:api/TeamMemberApi~getTeamMemberListOfClientProjectCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TeamMemberListVO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List team member of client project side.
     * List team member of client project side.
     * @param {String} workgroupId 
     * @param {String} projectId 
     * @param {module:api/TeamMemberApi~getTeamMemberListOfClientProjectCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TeamMemberListVO}
     */
    getTeamMemberListOfClientProject(workgroupId, projectId, callback) {
      let postBody = null;
      // verify the required parameter 'workgroupId' is set
      if (workgroupId === undefined || workgroupId === null) {
        throw new Error("Missing the required parameter 'workgroupId' when calling getTeamMemberListOfClientProject");
      }
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling getTeamMemberListOfClientProject");
      }

      let pathParams = {
        'workgroup_id': workgroupId,
        'project_id': projectId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*', 'application/json', 'application/x-json-smile', 'application/x-yaml', 'application/xml', 'text/csv', 'text/x-yaml', 'text/xml'];
      let returnType = TeamMemberListVO;
      return this.apiClient.callApi(
        '/v1/workgroups/{workgroup_id}/projects/{project_id}/teamMembersOfClientProject', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTeamMemberListOfProject operation.
     * @callback module:api/TeamMemberApi~getTeamMemberListOfProjectCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TeamMemberListVO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List team member of project.
     * List team member of project.
     * @param {String} workgroupId 
     * @param {String} projectId 
     * @param {module:api/TeamMemberApi~getTeamMemberListOfProjectCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TeamMemberListVO}
     */
    getTeamMemberListOfProject(workgroupId, projectId, callback) {
      let postBody = null;
      // verify the required parameter 'workgroupId' is set
      if (workgroupId === undefined || workgroupId === null) {
        throw new Error("Missing the required parameter 'workgroupId' when calling getTeamMemberListOfProject");
      }
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling getTeamMemberListOfProject");
      }

      let pathParams = {
        'workgroup_id': workgroupId,
        'project_id': projectId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*', 'application/json', 'application/x-json-smile', 'application/x-yaml', 'application/xml', 'text/csv', 'text/x-yaml', 'text/xml'];
      let returnType = TeamMemberListVO;
      return this.apiClient.callApi(
        '/v1/workgroups/{workgroup_id}/projects/{project_id}/teammembers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postTeamMemberOfProject operation.
     * @callback module:api/TeamMemberApi~postTeamMemberOfProjectCallback
     * @param {String} error Error message, if any.
     * @param {module:model/V1x1InvitedTeamMemberResultsVO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Invite a team member or all the members of team template for the specific project.
     * Invite a team member or all the members of team template for the specific project.
     * @param {String} workgroupId 
     * @param {String} projectId 
     * @param {Object} opts Optional parameters
     * @param {module:model/TeamMemberPO} [teamMemberPO] 
     * @param {module:api/TeamMemberApi~postTeamMemberOfProjectCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/V1x1InvitedTeamMemberResultsVO}
     */
    postTeamMemberOfProject(workgroupId, projectId, opts, callback) {
      opts = opts || {};
      let postBody = opts['teamMemberPO'];
      // verify the required parameter 'workgroupId' is set
      if (workgroupId === undefined || workgroupId === null) {
        throw new Error("Missing the required parameter 'workgroupId' when calling postTeamMemberOfProject");
      }
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling postTeamMemberOfProject");
      }

      let pathParams = {
        'workgroup_id': workgroupId,
        'project_id': projectId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/x-json-smile', 'application/x-yaml', 'application/xml', 'text/csv', 'text/x-yaml', 'text/xml'];
      let accepts = ['*/*', 'application/json', 'application/x-json-smile', 'application/x-yaml', 'application/xml', 'text/csv', 'text/x-yaml', 'text/xml'];
      let returnType = V1x1InvitedTeamMemberResultsVO;
      return this.apiClient.callApi(
        '/1.1/workgroups/{workgroup_id}/projects/{project_id}/teammembers', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v1WorkgroupsWorkgroupIdProjectsProjectIdTeammembersPost operation.
     * @callback module:api/TeamMemberApi~v1WorkgroupsWorkgroupIdProjectsProjectIdTeammembersPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TeamMemberBaseInfVO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deprecated, please use 1.1 Version
     * Deprecated, please use 1.1 Version
     * @param {String} workgroupId 
     * @param {String} projectId 
     * @param {Object} opts Optional parameters
     * @param {module:model/ContactUserVO} [contactUserVO] 
     * @param {module:api/TeamMemberApi~v1WorkgroupsWorkgroupIdProjectsProjectIdTeammembersPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TeamMemberBaseInfVO}
     */
    v1WorkgroupsWorkgroupIdProjectsProjectIdTeammembersPost(workgroupId, projectId, opts, callback) {
      opts = opts || {};
      let postBody = opts['contactUserVO'];
      // verify the required parameter 'workgroupId' is set
      if (workgroupId === undefined || workgroupId === null) {
        throw new Error("Missing the required parameter 'workgroupId' when calling v1WorkgroupsWorkgroupIdProjectsProjectIdTeammembersPost");
      }
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling v1WorkgroupsWorkgroupIdProjectsProjectIdTeammembersPost");
      }

      let pathParams = {
        'workgroup_id': workgroupId,
        'project_id': projectId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/x-json-smile', 'application/x-yaml', 'application/xml', 'text/csv', 'text/x-yaml', 'text/xml'];
      let accepts = ['*/*', 'application/json', 'application/x-json-smile', 'application/x-yaml', 'application/xml', 'text/csv', 'text/x-yaml', 'text/xml'];
      let returnType = TeamMemberBaseInfVO;
      return this.apiClient.callApi(
        '/v1/workgroups/{workgroup_id}/projects/{project_id}/teammembers', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
