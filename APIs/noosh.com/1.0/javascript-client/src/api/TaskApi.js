/**
 * Noosh API application
 * Full description of Noosh API
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import HTTPStatusVO from '../model/HTTPStatusVO';
import TaskCreatedVO from '../model/TaskCreatedVO';
import TaskExpandVO from '../model/TaskExpandVO';
import TaskExpandWorkgroupLevelVO from '../model/TaskExpandWorkgroupLevelVO';
import TaskListVO from '../model/TaskListVO';
import TaskPersistVO from '../model/TaskPersistVO';
import TaskPriorityListVO from '../model/TaskPriorityListVO';
import TaskStatusListVO from '../model/TaskStatusListVO';
import TaskTypeListVO from '../model/TaskTypeListVO';
import TaskWorkgroupLevelListVO from '../model/TaskWorkgroupLevelListVO';
import WgTaskStatusListVO from '../model/WgTaskStatusListVO';

/**
* Task service.
* @module api/TaskApi
* @version 1.0
*/
export default class TaskApi {

    /**
    * Constructs a new TaskApi. 
    * @alias module:api/TaskApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getCustomTaskTypesOfWg operation.
     * @callback module:api/TaskApi~getCustomTaskTypesOfWgCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TaskTypeListVO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get custom task types of workgroup level
     * Get custom task types of workgroup level
     * @param {String} workgroupId 
     * @param {module:api/TaskApi~getCustomTaskTypesOfWgCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TaskTypeListVO}
     */
    getCustomTaskTypesOfWg(workgroupId, callback) {
      let postBody = null;
      // verify the required parameter 'workgroupId' is set
      if (workgroupId === undefined || workgroupId === null) {
        throw new Error("Missing the required parameter 'workgroupId' when calling getCustomTaskTypesOfWg");
      }

      let pathParams = {
        'workgroup_id': workgroupId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*', 'application/json', 'application/x-json-smile', 'application/x-yaml', 'application/xml', 'text/csv', 'text/x-yaml', 'text/xml'];
      let returnType = TaskTypeListVO;
      return this.apiClient.callApi(
        '/v1/workgroups/{workgroup_id}/customTaskTypes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getDefaultTaskStatusList operation.
     * @callback module:api/TaskApi~getDefaultTaskStatusListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TaskStatusListVO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get default task status list
     * Get default task status list
     * @param {String} workgroupId 
     * @param {module:api/TaskApi~getDefaultTaskStatusListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TaskStatusListVO}
     */
    getDefaultTaskStatusList(workgroupId, callback) {
      let postBody = null;
      // verify the required parameter 'workgroupId' is set
      if (workgroupId === undefined || workgroupId === null) {
        throw new Error("Missing the required parameter 'workgroupId' when calling getDefaultTaskStatusList");
      }

      let pathParams = {
        'workgroup_id': workgroupId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*', 'application/json', 'application/x-json-smile', 'application/x-yaml', 'application/xml', 'text/csv', 'text/x-yaml', 'text/xml'];
      let returnType = TaskStatusListVO;
      return this.apiClient.callApi(
        '/v1/workgroups/{workgroup_id}/defaultTaskStatus', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTaskListOfProject operation.
     * @callback module:api/TaskApi~getTaskListOfProjectCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TaskListVO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get task list of project level
     * Get task list of project level
     * @param {String} workgroupId 
     * @param {String} projectId 
     * @param {module:api/TaskApi~getTaskListOfProjectCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TaskListVO}
     */
    getTaskListOfProject(workgroupId, projectId, callback) {
      let postBody = null;
      // verify the required parameter 'workgroupId' is set
      if (workgroupId === undefined || workgroupId === null) {
        throw new Error("Missing the required parameter 'workgroupId' when calling getTaskListOfProject");
      }
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling getTaskListOfProject");
      }

      let pathParams = {
        'workgroup_id': workgroupId,
        'project_id': projectId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*', 'application/json', 'application/x-json-smile', 'application/x-yaml', 'application/xml', 'text/csv', 'text/x-yaml', 'text/xml'];
      let returnType = TaskListVO;
      return this.apiClient.callApi(
        '/v1/workgroups/{workgroup_id}/projects/{project_id}/tasks', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTaskListOfWorkgroup operation.
     * @callback module:api/TaskApi~getTaskListOfWorkgroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TaskWorkgroupLevelListVO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get task list of workgroup level
     * Get task list of workgroup level
     * @param {String} workgroupId 
     * @param {module:api/TaskApi~getTaskListOfWorkgroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TaskWorkgroupLevelListVO}
     */
    getTaskListOfWorkgroup(workgroupId, callback) {
      let postBody = null;
      // verify the required parameter 'workgroupId' is set
      if (workgroupId === undefined || workgroupId === null) {
        throw new Error("Missing the required parameter 'workgroupId' when calling getTaskListOfWorkgroup");
      }

      let pathParams = {
        'workgroup_id': workgroupId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*', 'application/json', 'application/x-json-smile', 'application/x-yaml', 'application/xml', 'text/csv', 'text/x-yaml', 'text/xml'];
      let returnType = TaskWorkgroupLevelListVO;
      return this.apiClient.callApi(
        '/v1/workgroups/{workgroup_id}/tasks', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTaskOfProject operation.
     * @callback module:api/TaskApi~getTaskOfProjectCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TaskExpandVO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a sepcific task of project level
     * Get a sepcific task of project level
     * @param {String} workgroupId 
     * @param {String} projectId 
     * @param {String} taskId 
     * @param {module:api/TaskApi~getTaskOfProjectCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TaskExpandVO}
     */
    getTaskOfProject(workgroupId, projectId, taskId, callback) {
      let postBody = null;
      // verify the required parameter 'workgroupId' is set
      if (workgroupId === undefined || workgroupId === null) {
        throw new Error("Missing the required parameter 'workgroupId' when calling getTaskOfProject");
      }
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling getTaskOfProject");
      }
      // verify the required parameter 'taskId' is set
      if (taskId === undefined || taskId === null) {
        throw new Error("Missing the required parameter 'taskId' when calling getTaskOfProject");
      }

      let pathParams = {
        'workgroup_id': workgroupId,
        'project_id': projectId,
        'task_id': taskId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*', 'application/json', 'application/x-json-smile', 'application/x-yaml', 'application/xml', 'text/csv', 'text/x-yaml', 'text/xml'];
      let returnType = TaskExpandVO;
      return this.apiClient.callApi(
        '/v1/workgroups/{workgroup_id}/projects/{project_id}/tasks/{task_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTaskOfWorkgroup operation.
     * @callback module:api/TaskApi~getTaskOfWorkgroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TaskExpandWorkgroupLevelVO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a sepcific task of workgroup level
     * Get a sepcific task of workgroup level
     * @param {String} workgroupId 
     * @param {String} taskId 
     * @param {module:api/TaskApi~getTaskOfWorkgroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TaskExpandWorkgroupLevelVO}
     */
    getTaskOfWorkgroup(workgroupId, taskId, callback) {
      let postBody = null;
      // verify the required parameter 'workgroupId' is set
      if (workgroupId === undefined || workgroupId === null) {
        throw new Error("Missing the required parameter 'workgroupId' when calling getTaskOfWorkgroup");
      }
      // verify the required parameter 'taskId' is set
      if (taskId === undefined || taskId === null) {
        throw new Error("Missing the required parameter 'taskId' when calling getTaskOfWorkgroup");
      }

      let pathParams = {
        'workgroup_id': workgroupId,
        'task_id': taskId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*', 'application/json', 'application/x-json-smile', 'application/x-yaml', 'application/xml', 'text/csv', 'text/x-yaml', 'text/xml'];
      let returnType = TaskExpandWorkgroupLevelVO;
      return this.apiClient.callApi(
        '/v1/workgroups/{workgroup_id}/tasks/{task_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTaskTypesOfWorkgroup operation.
     * @callback module:api/TaskApi~getTaskTypesOfWorkgroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TaskTypeListVO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get task types of workgroup level
     * Get task types of workgroup level
     * @param {String} workgroupId 
     * @param {module:api/TaskApi~getTaskTypesOfWorkgroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TaskTypeListVO}
     */
    getTaskTypesOfWorkgroup(workgroupId, callback) {
      let postBody = null;
      // verify the required parameter 'workgroupId' is set
      if (workgroupId === undefined || workgroupId === null) {
        throw new Error("Missing the required parameter 'workgroupId' when calling getTaskTypesOfWorkgroup");
      }

      let pathParams = {
        'workgroup_id': workgroupId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*', 'application/json', 'application/x-json-smile', 'application/x-yaml', 'application/xml', 'text/csv', 'text/x-yaml', 'text/xml'];
      let returnType = TaskTypeListVO;
      return this.apiClient.callApi(
        '/v1/workgroups/{workgroup_id}/taskTypes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getWgTaskStatusListOfWorkgroup operation.
     * @callback module:api/TaskApi~getWgTaskStatusListOfWorkgroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WgTaskStatusListVO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get custom task status of workgroup level
     * Get custom task status of workgroup level
     * @param {String} workgroupId 
     * @param {module:api/TaskApi~getWgTaskStatusListOfWorkgroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WgTaskStatusListVO}
     */
    getWgTaskStatusListOfWorkgroup(workgroupId, callback) {
      let postBody = null;
      // verify the required parameter 'workgroupId' is set
      if (workgroupId === undefined || workgroupId === null) {
        throw new Error("Missing the required parameter 'workgroupId' when calling getWgTaskStatusListOfWorkgroup");
      }

      let pathParams = {
        'workgroup_id': workgroupId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*', 'application/json', 'application/x-json-smile', 'application/x-yaml', 'application/xml', 'text/csv', 'text/x-yaml', 'text/xml'];
      let returnType = WgTaskStatusListVO;
      return this.apiClient.callApi(
        '/v1/workgroups/{workgroup_id}/customTaskStatus', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postTaskForProject operation.
     * @callback module:api/TaskApi~postTaskForProjectCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TaskCreatedVO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new task
     * Create a new task
     * @param {String} workgroupId 
     * @param {String} projectId 
     * @param {Object} opts Optional parameters
     * @param {module:model/TaskPersistVO} [taskPersistVO] 
     * @param {module:api/TaskApi~postTaskForProjectCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TaskCreatedVO}
     */
    postTaskForProject(workgroupId, projectId, opts, callback) {
      opts = opts || {};
      let postBody = opts['taskPersistVO'];
      // verify the required parameter 'workgroupId' is set
      if (workgroupId === undefined || workgroupId === null) {
        throw new Error("Missing the required parameter 'workgroupId' when calling postTaskForProject");
      }
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling postTaskForProject");
      }

      let pathParams = {
        'workgroup_id': workgroupId,
        'project_id': projectId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/x-json-smile', 'application/x-yaml', 'application/xml', 'text/csv', 'text/x-yaml', 'text/xml'];
      let accepts = ['*/*', 'application/json', 'application/x-json-smile', 'application/x-yaml', 'application/xml', 'text/csv', 'text/x-yaml', 'text/xml'];
      let returnType = TaskCreatedVO;
      return this.apiClient.callApi(
        '/v1/workgroups/{workgroup_id}/projects/{project_id}/tasks', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the taskPriorityList operation.
     * @callback module:api/TaskApi~taskPriorityListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TaskPriorityListVO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get default task priority list
     * Get default task priority list
     * @param {String} workgroupId 
     * @param {module:api/TaskApi~taskPriorityListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TaskPriorityListVO}
     */
    taskPriorityList(workgroupId, callback) {
      let postBody = null;
      // verify the required parameter 'workgroupId' is set
      if (workgroupId === undefined || workgroupId === null) {
        throw new Error("Missing the required parameter 'workgroupId' when calling taskPriorityList");
      }

      let pathParams = {
        'workgroup_id': workgroupId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*', 'application/json', 'application/x-json-smile', 'application/x-yaml', 'application/xml', 'text/csv', 'text/x-yaml', 'text/xml'];
      let returnType = TaskPriorityListVO;
      return this.apiClient.callApi(
        '/v1/workgroups/{workgroup_id}/defaultTaskPriority', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
