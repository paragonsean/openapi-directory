/**
 * Noosh API application
 * Full description of Noosh API
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import HTTPStatusVO from '../model/HTTPStatusVO';
import OrderDetailVO from '../model/OrderDetailVO';
import OrderDetailWithIndicatorVO from '../model/OrderDetailWithIndicatorVO';
import OrderExpandWorkgroupLevelVO from '../model/OrderExpandWorkgroupLevelVO';
import OrderListVO from '../model/OrderListVO';
import OrderPO from '../model/OrderPO';
import OrderUpdPersistVO from '../model/OrderUpdPersistVO';
import OrderVO from '../model/OrderVO';
import OrderWorkgroupLevelListVO from '../model/OrderWorkgroupLevelListVO';

/**
* Order service.
* @module api/OrderApi
* @version 1.0
*/
export default class OrderApi {

    /**
    * Constructs a new OrderApi. 
    * @alias module:api/OrderApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getBuyOrder operation.
     * @callback module:api/OrderApi~getBuyOrderCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrderDetailVO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a specific buy order
     * Get a specific buy order
     * @param {String} workgroupId 
     * @param {String} projectId 
     * @param {String} orderId 
     * @param {module:api/OrderApi~getBuyOrderCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrderDetailVO}
     */
    getBuyOrder(workgroupId, projectId, orderId, callback) {
      let postBody = null;
      // verify the required parameter 'workgroupId' is set
      if (workgroupId === undefined || workgroupId === null) {
        throw new Error("Missing the required parameter 'workgroupId' when calling getBuyOrder");
      }
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling getBuyOrder");
      }
      // verify the required parameter 'orderId' is set
      if (orderId === undefined || orderId === null) {
        throw new Error("Missing the required parameter 'orderId' when calling getBuyOrder");
      }

      let pathParams = {
        'workgroup_id': workgroupId,
        'project_id': projectId,
        'order_id': orderId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*', 'application/json', 'application/x-json-smile', 'application/x-yaml', 'application/xml', 'text/csv', 'text/x-yaml', 'text/xml'];
      let returnType = OrderDetailVO;
      return this.apiClient.callApi(
        '/v1/workgroups/{workgroup_id}/projects/{project_id}/buyOrders/{order_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getBuyOrderList operation.
     * @callback module:api/OrderApi~getBuyOrderListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrderListVO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the buy orders
     * List the buy orders
     * @param {String} workgroupId 
     * @param {String} projectId 
     * @param {module:api/OrderApi~getBuyOrderListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrderListVO}
     */
    getBuyOrderList(workgroupId, projectId, callback) {
      let postBody = null;
      // verify the required parameter 'workgroupId' is set
      if (workgroupId === undefined || workgroupId === null) {
        throw new Error("Missing the required parameter 'workgroupId' when calling getBuyOrderList");
      }
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling getBuyOrderList");
      }

      let pathParams = {
        'workgroup_id': workgroupId,
        'project_id': projectId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*', 'application/json', 'application/x-json-smile', 'application/x-yaml', 'application/xml', 'text/csv', 'text/x-yaml', 'text/xml'];
      let returnType = OrderListVO;
      return this.apiClient.callApi(
        '/v1/workgroups/{workgroup_id}/projects/{project_id}/buyOrders', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getBuyOrderListOfWorkgroup operation.
     * @callback module:api/OrderApi~getBuyOrderListOfWorkgroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrderWorkgroupLevelListVO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the buy orders of workgroup
     * List the buy orders of workgroup
     * @param {String} workgroupId 
     * @param {module:api/OrderApi~getBuyOrderListOfWorkgroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrderWorkgroupLevelListVO}
     */
    getBuyOrderListOfWorkgroup(workgroupId, callback) {
      let postBody = null;
      // verify the required parameter 'workgroupId' is set
      if (workgroupId === undefined || workgroupId === null) {
        throw new Error("Missing the required parameter 'workgroupId' when calling getBuyOrderListOfWorkgroup");
      }

      let pathParams = {
        'workgroup_id': workgroupId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*', 'application/json', 'application/x-json-smile', 'application/x-yaml', 'application/xml', 'text/csv', 'text/x-yaml', 'text/xml'];
      let returnType = OrderWorkgroupLevelListVO;
      return this.apiClient.callApi(
        '/v1/workgroups/{workgroup_id}/buyOrders', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getBuyOrderOfWorkgroup operation.
     * @callback module:api/OrderApi~getBuyOrderOfWorkgroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrderExpandWorkgroupLevelVO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a specific buy order of workgroup
     * Get a specific buy order of workgroup
     * @param {String} workgroupId 
     * @param {String} orderId 
     * @param {module:api/OrderApi~getBuyOrderOfWorkgroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrderExpandWorkgroupLevelVO}
     */
    getBuyOrderOfWorkgroup(workgroupId, orderId, callback) {
      let postBody = null;
      // verify the required parameter 'workgroupId' is set
      if (workgroupId === undefined || workgroupId === null) {
        throw new Error("Missing the required parameter 'workgroupId' when calling getBuyOrderOfWorkgroup");
      }
      // verify the required parameter 'orderId' is set
      if (orderId === undefined || orderId === null) {
        throw new Error("Missing the required parameter 'orderId' when calling getBuyOrderOfWorkgroup");
      }

      let pathParams = {
        'workgroup_id': workgroupId,
        'order_id': orderId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*', 'application/json', 'application/x-json-smile', 'application/x-yaml', 'application/xml', 'text/csv', 'text/x-yaml', 'text/xml'];
      let returnType = OrderExpandWorkgroupLevelVO;
      return this.apiClient.callApi(
        '/v1/workgroups/{workgroup_id}/buyOrders/{order_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getOrder operation.
     * @callback module:api/OrderApi~getOrderCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrderDetailWithIndicatorVO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a specific buy/sell order
     * Get a specific buy/sell order
     * @param {String} workgroupId 
     * @param {String} projectId 
     * @param {String} orderId 
     * @param {module:api/OrderApi~getOrderCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrderDetailWithIndicatorVO}
     */
    getOrder(workgroupId, projectId, orderId, callback) {
      let postBody = null;
      // verify the required parameter 'workgroupId' is set
      if (workgroupId === undefined || workgroupId === null) {
        throw new Error("Missing the required parameter 'workgroupId' when calling getOrder");
      }
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling getOrder");
      }
      // verify the required parameter 'orderId' is set
      if (orderId === undefined || orderId === null) {
        throw new Error("Missing the required parameter 'orderId' when calling getOrder");
      }

      let pathParams = {
        'workgroup_id': workgroupId,
        'project_id': projectId,
        'order_id': orderId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*', 'application/json', 'application/x-json-smile', 'application/x-yaml', 'application/xml', 'text/csv', 'text/x-yaml', 'text/xml'];
      let returnType = OrderDetailWithIndicatorVO;
      return this.apiClient.callApi(
        '/v1/workgroups/{workgroup_id}/projects/{project_id}/orders/{order_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSellOrder operation.
     * @callback module:api/OrderApi~getSellOrderCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrderDetailVO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a specific sell order
     * Get a specific sell order
     * @param {String} workgroupId 
     * @param {String} projectId 
     * @param {String} orderId 
     * @param {module:api/OrderApi~getSellOrderCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrderDetailVO}
     */
    getSellOrder(workgroupId, projectId, orderId, callback) {
      let postBody = null;
      // verify the required parameter 'workgroupId' is set
      if (workgroupId === undefined || workgroupId === null) {
        throw new Error("Missing the required parameter 'workgroupId' when calling getSellOrder");
      }
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling getSellOrder");
      }
      // verify the required parameter 'orderId' is set
      if (orderId === undefined || orderId === null) {
        throw new Error("Missing the required parameter 'orderId' when calling getSellOrder");
      }

      let pathParams = {
        'workgroup_id': workgroupId,
        'project_id': projectId,
        'order_id': orderId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*', 'application/json', 'application/x-json-smile', 'application/x-yaml', 'application/xml', 'text/csv', 'text/x-yaml', 'text/xml'];
      let returnType = OrderDetailVO;
      return this.apiClient.callApi(
        '/v1/workgroups/{workgroup_id}/projects/{project_id}/sellOrders/{order_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSellOrderList operation.
     * @callback module:api/OrderApi~getSellOrderListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrderListVO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the sell orders
     * List the sell orders
     * @param {String} workgroupId 
     * @param {String} projectId 
     * @param {module:api/OrderApi~getSellOrderListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrderListVO}
     */
    getSellOrderList(workgroupId, projectId, callback) {
      let postBody = null;
      // verify the required parameter 'workgroupId' is set
      if (workgroupId === undefined || workgroupId === null) {
        throw new Error("Missing the required parameter 'workgroupId' when calling getSellOrderList");
      }
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling getSellOrderList");
      }

      let pathParams = {
        'workgroup_id': workgroupId,
        'project_id': projectId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*', 'application/json', 'application/x-json-smile', 'application/x-yaml', 'application/xml', 'text/csv', 'text/x-yaml', 'text/xml'];
      let returnType = OrderListVO;
      return this.apiClient.callApi(
        '/v1/workgroups/{workgroup_id}/projects/{project_id}/sellOrders', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSellOrderListOfWorkgroup operation.
     * @callback module:api/OrderApi~getSellOrderListOfWorkgroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrderWorkgroupLevelListVO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the sell orders of workgrop
     * List the sell orders of workgrop
     * @param {String} workgroupId 
     * @param {module:api/OrderApi~getSellOrderListOfWorkgroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrderWorkgroupLevelListVO}
     */
    getSellOrderListOfWorkgroup(workgroupId, callback) {
      let postBody = null;
      // verify the required parameter 'workgroupId' is set
      if (workgroupId === undefined || workgroupId === null) {
        throw new Error("Missing the required parameter 'workgroupId' when calling getSellOrderListOfWorkgroup");
      }

      let pathParams = {
        'workgroup_id': workgroupId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*', 'application/json', 'application/x-json-smile', 'application/x-yaml', 'application/xml', 'text/csv', 'text/x-yaml', 'text/xml'];
      let returnType = OrderWorkgroupLevelListVO;
      return this.apiClient.callApi(
        '/v1/workgroups/{workgroup_id}/sellOrders', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSellOrderOfWorkgroup operation.
     * @callback module:api/OrderApi~getSellOrderOfWorkgroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrderExpandWorkgroupLevelVO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a specific sell order
     * Get a specific sell order
     * @param {String} workgroupId 
     * @param {String} orderId 
     * @param {module:api/OrderApi~getSellOrderOfWorkgroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrderExpandWorkgroupLevelVO}
     */
    getSellOrderOfWorkgroup(workgroupId, orderId, callback) {
      let postBody = null;
      // verify the required parameter 'workgroupId' is set
      if (workgroupId === undefined || workgroupId === null) {
        throw new Error("Missing the required parameter 'workgroupId' when calling getSellOrderOfWorkgroup");
      }
      // verify the required parameter 'orderId' is set
      if (orderId === undefined || orderId === null) {
        throw new Error("Missing the required parameter 'orderId' when calling getSellOrderOfWorkgroup");
      }

      let pathParams = {
        'workgroup_id': workgroupId,
        'order_id': orderId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*', 'application/json', 'application/x-json-smile', 'application/x-yaml', 'application/xml', 'text/csv', 'text/x-yaml', 'text/xml'];
      let returnType = OrderExpandWorkgroupLevelVO;
      return this.apiClient.callApi(
        '/v1/workgroups/{workgroup_id}/sellOrders/{order_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postBuyOrder operation.
     * @callback module:api/OrderApi~postBuyOrderCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrderPO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a quick buy order
     * Create a quick buy order
     * @param {String} workgroupId 
     * @param {String} projectId 
     * @param {Object} opts Optional parameters
     * @param {module:model/OrderPO} [orderPO] 
     * @param {module:api/OrderApi~postBuyOrderCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrderPO}
     */
    postBuyOrder(workgroupId, projectId, opts, callback) {
      opts = opts || {};
      let postBody = opts['orderPO'];
      // verify the required parameter 'workgroupId' is set
      if (workgroupId === undefined || workgroupId === null) {
        throw new Error("Missing the required parameter 'workgroupId' when calling postBuyOrder");
      }
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling postBuyOrder");
      }

      let pathParams = {
        'workgroup_id': workgroupId,
        'project_id': projectId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/x-json-smile', 'application/x-yaml', 'application/xml', 'text/csv', 'text/x-yaml', 'text/xml'];
      let accepts = ['*/*', 'application/json', 'application/x-json-smile', 'application/x-yaml', 'application/xml', 'text/csv', 'text/x-yaml', 'text/xml'];
      let returnType = OrderPO;
      return this.apiClient.callApi(
        '/v1/workgroups/{workgroup_id}/projects/{project_id}/buyOrders', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putBuyOrder operation.
     * @callback module:api/OrderApi~putBuyOrderCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrderVO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a specific buy order
     * Update a specific buy order
     * @param {String} workgroupId 
     * @param {String} projectId 
     * @param {String} orderId 
     * @param {Object} opts Optional parameters
     * @param {module:model/OrderUpdPersistVO} [orderUpdPersistVO] 
     * @param {module:api/OrderApi~putBuyOrderCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrderVO}
     */
    putBuyOrder(workgroupId, projectId, orderId, opts, callback) {
      opts = opts || {};
      let postBody = opts['orderUpdPersistVO'];
      // verify the required parameter 'workgroupId' is set
      if (workgroupId === undefined || workgroupId === null) {
        throw new Error("Missing the required parameter 'workgroupId' when calling putBuyOrder");
      }
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling putBuyOrder");
      }
      // verify the required parameter 'orderId' is set
      if (orderId === undefined || orderId === null) {
        throw new Error("Missing the required parameter 'orderId' when calling putBuyOrder");
      }

      let pathParams = {
        'workgroup_id': workgroupId,
        'project_id': projectId,
        'order_id': orderId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/x-json-smile', 'application/x-yaml', 'application/xml', 'text/csv', 'text/x-yaml', 'text/xml'];
      let accepts = ['*/*', 'application/json', 'application/x-json-smile', 'application/x-yaml', 'application/xml', 'text/csv', 'text/x-yaml', 'text/xml'];
      let returnType = OrderVO;
      return this.apiClient.callApi(
        '/v1/workgroups/{workgroup_id}/projects/{project_id}/buyOrders/{order_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the putSellOrder operation.
     * @callback module:api/OrderApi~putSellOrderCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OrderVO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update / Accept or Reject a specific sell order
     * Update / Accept or Reject a specific sell order
     * @param {String} workgroupId 
     * @param {String} projectId 
     * @param {String} orderId 
     * @param {Object} opts Optional parameters
     * @param {module:model/OrderUpdPersistVO} [orderUpdPersistVO] 
     * @param {module:api/OrderApi~putSellOrderCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OrderVO}
     */
    putSellOrder(workgroupId, projectId, orderId, opts, callback) {
      opts = opts || {};
      let postBody = opts['orderUpdPersistVO'];
      // verify the required parameter 'workgroupId' is set
      if (workgroupId === undefined || workgroupId === null) {
        throw new Error("Missing the required parameter 'workgroupId' when calling putSellOrder");
      }
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling putSellOrder");
      }
      // verify the required parameter 'orderId' is set
      if (orderId === undefined || orderId === null) {
        throw new Error("Missing the required parameter 'orderId' when calling putSellOrder");
      }

      let pathParams = {
        'workgroup_id': workgroupId,
        'project_id': projectId,
        'order_id': orderId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/x-json-smile', 'application/x-yaml', 'application/xml', 'text/csv', 'text/x-yaml', 'text/xml'];
      let accepts = ['*/*', 'application/json', 'application/x-json-smile', 'application/x-yaml', 'application/xml', 'text/csv', 'text/x-yaml', 'text/xml'];
      let returnType = OrderVO;
      return this.apiClient.callApi(
        '/v1/workgroups/{workgroup_id}/projects/{project_id}/sellOrders/{order_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
