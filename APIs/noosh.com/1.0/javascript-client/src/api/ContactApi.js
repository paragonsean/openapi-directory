/**
 * Noosh API application
 * Full description of Noosh API
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ContactsListVO from '../model/ContactsListVO';
import HTTPStatusVO from '../model/HTTPStatusVO';
import UserDetailsExpandVO from '../model/UserDetailsExpandVO';

/**
* Contact service.
* @module api/ContactApi
* @version 1.0
*/
export default class ContactApi {

    /**
    * Constructs a new ContactApi. 
    * @alias module:api/ContactApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getBillingRecipients operation.
     * @callback module:api/ContactApi~getBillingRecipientsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ContactsListVO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Billing Recipients
     * List Billing Recipients
     * @param {String} workgroupId 
     * @param {module:api/ContactApi~getBillingRecipientsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ContactsListVO}
     */
    getBillingRecipients(workgroupId, callback) {
      let postBody = null;
      // verify the required parameter 'workgroupId' is set
      if (workgroupId === undefined || workgroupId === null) {
        throw new Error("Missing the required parameter 'workgroupId' when calling getBillingRecipients");
      }

      let pathParams = {
        'workgroup_id': workgroupId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*', 'application/json', 'application/x-json-smile', 'application/x-yaml', 'application/xml', 'text/csv', 'text/x-yaml', 'text/xml'];
      let returnType = ContactsListVO;
      return this.apiClient.callApi(
        '/v1/workgroups/{workgroup_id}/billingRecipients', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getContactList operation.
     * @callback module:api/ContactApi~getContactListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ContactsListVO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the contacts
     * List the contacts
     * @param {String} workgroupId 
     * @param {module:api/ContactApi~getContactListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ContactsListVO}
     */
    getContactList(workgroupId, callback) {
      let postBody = null;
      // verify the required parameter 'workgroupId' is set
      if (workgroupId === undefined || workgroupId === null) {
        throw new Error("Missing the required parameter 'workgroupId' when calling getContactList");
      }

      let pathParams = {
        'workgroup_id': workgroupId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*', 'application/json', 'application/x-json-smile', 'application/x-yaml', 'application/xml', 'text/csv', 'text/x-yaml', 'text/xml'];
      let returnType = ContactsListVO;
      return this.apiClient.callApi(
        '/v1/workgroups/{workgroup_id}/contacts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getContactUserInfo operation.
     * @callback module:api/ContactApi~getContactUserInfoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserDetailsExpandVO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Contact Info
     * Contact Info
     * @param {String} workgroupId 
     * @param {String} userId 
     * @param {module:api/ContactApi~getContactUserInfoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserDetailsExpandVO}
     */
    getContactUserInfo(workgroupId, userId, callback) {
      let postBody = null;
      // verify the required parameter 'workgroupId' is set
      if (workgroupId === undefined || workgroupId === null) {
        throw new Error("Missing the required parameter 'workgroupId' when calling getContactUserInfo");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling getContactUserInfo");
      }

      let pathParams = {
        'workgroup_id': workgroupId,
        'user_id': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['*/*', 'application/json', 'application/x-json-smile', 'application/x-yaml', 'application/xml', 'text/csv', 'text/x-yaml', 'text/xml'];
      let returnType = UserDetailsExpandVO;
      return this.apiClient.callApi(
        '/v1/workgroups/{workgroup_id}/contacts/{user_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
