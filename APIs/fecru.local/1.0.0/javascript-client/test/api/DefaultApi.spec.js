/**
 * Fisheye Crucible
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.FisheyeCrucible);
  }
}(this, function(expect, FisheyeCrucible) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new FisheyeCrucible.DefaultApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('DefaultApi', function() {
    describe('addAllowedReviewerGroup', function() {
      it('should call addAllowedReviewerGroup successfully', function(done) {
        //uncomment below and update the code to test addAllowedReviewerGroup
        //instance.addAllowedReviewerGroup(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('addAllowedReviewerUser', function() {
      it('should call addAllowedReviewerUser successfully', function(done) {
        //uncomment below and update the code to test addAllowedReviewerUser
        //instance.addAllowedReviewerUser(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('addDefaultReviewerGroup', function() {
      it('should call addDefaultReviewerGroup successfully', function(done) {
        //uncomment below and update the code to test addDefaultReviewerGroup
        //instance.addDefaultReviewerGroup(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('addDefaultReviewerUser', function() {
      it('should call addDefaultReviewerUser successfully', function(done) {
        //uncomment below and update the code to test addDefaultReviewerUser
        //instance.addDefaultReviewerUser(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('addGroupToPermissions', function() {
      it('should call addGroupToPermissions successfully', function(done) {
        //uncomment below and update the code to test addGroupToPermissions
        //instance.addGroupToPermissions(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('addPermissionSchemeAnonymousUsers', function() {
      it('should call addPermissionSchemeAnonymousUsers successfully', function(done) {
        //uncomment below and update the code to test addPermissionSchemeAnonymousUsers
        //instance.addPermissionSchemeAnonymousUsers(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('addPermissionSchemeGroup', function() {
      it('should call addPermissionSchemeGroup successfully', function(done) {
        //uncomment below and update the code to test addPermissionSchemeGroup
        //instance.addPermissionSchemeGroup(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('addPermissionSchemeLoggedUsers', function() {
      it('should call addPermissionSchemeLoggedUsers successfully', function(done) {
        //uncomment below and update the code to test addPermissionSchemeLoggedUsers
        //instance.addPermissionSchemeLoggedUsers(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('addPermissionSchemeReviewRole', function() {
      it('should call addPermissionSchemeReviewRole successfully', function(done) {
        //uncomment below and update the code to test addPermissionSchemeReviewRole
        //instance.addPermissionSchemeReviewRole(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('addPermissionSchemeUser', function() {
      it('should call addPermissionSchemeUser successfully', function(done) {
        //uncomment below and update the code to test addPermissionSchemeUser
        //instance.addPermissionSchemeUser(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('addRepository', function() {
      it('should call addRepository successfully', function(done) {
        //uncomment below and update the code to test addRepository
        //instance.addRepository(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('allowedReviewerGroups', function() {
      it('should call allowedReviewerGroups successfully', function(done) {
        //uncomment below and update the code to test allowedReviewerGroups
        //instance.allowedReviewerGroups(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('allowedReviewerUsers', function() {
      it('should call allowedReviewerUsers successfully', function(done) {
        //uncomment below and update the code to test allowedReviewerUsers
        //instance.allowedReviewerUsers(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('defaultPermissions', function() {
      it('should call defaultPermissions successfully', function(done) {
        //uncomment below and update the code to test defaultPermissions
        //instance.defaultPermissions(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('defaultReviewerGroups', function() {
      it('should call defaultReviewerGroups successfully', function(done) {
        //uncomment below and update the code to test defaultReviewerGroups
        //instance.defaultReviewerGroups(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteAllowedReviewerGroup', function() {
      it('should call deleteAllowedReviewerGroup successfully', function(done) {
        //uncomment below and update the code to test deleteAllowedReviewerGroup
        //instance.deleteAllowedReviewerGroup(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteAllowedReviewerUser', function() {
      it('should call deleteAllowedReviewerUser successfully', function(done) {
        //uncomment below and update the code to test deleteAllowedReviewerUser
        //instance.deleteAllowedReviewerUser(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteDefaultReviewerGroup', function() {
      it('should call deleteDefaultReviewerGroup successfully', function(done) {
        //uncomment below and update the code to test deleteDefaultReviewerGroup
        //instance.deleteDefaultReviewerGroup(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteDefaultReviewerUser', function() {
      it('should call deleteDefaultReviewerUser successfully', function(done) {
        //uncomment below and update the code to test deleteDefaultReviewerUser
        //instance.deleteDefaultReviewerUser(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deletePermissionSchemeAnonymousUsers', function() {
      it('should call deletePermissionSchemeAnonymousUsers successfully', function(done) {
        //uncomment below and update the code to test deletePermissionSchemeAnonymousUsers
        //instance.deletePermissionSchemeAnonymousUsers(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deletePermissionSchemeGroup', function() {
      it('should call deletePermissionSchemeGroup successfully', function(done) {
        //uncomment below and update the code to test deletePermissionSchemeGroup
        //instance.deletePermissionSchemeGroup(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deletePermissionSchemeLoggedUsers', function() {
      it('should call deletePermissionSchemeLoggedUsers successfully', function(done) {
        //uncomment below and update the code to test deletePermissionSchemeLoggedUsers
        //instance.deletePermissionSchemeLoggedUsers(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deletePermissionSchemeRole', function() {
      it('should call deletePermissionSchemeRole successfully', function(done) {
        //uncomment below and update the code to test deletePermissionSchemeRole
        //instance.deletePermissionSchemeRole(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deletePermissionSchemeUser', function() {
      it('should call deletePermissionSchemeUser successfully', function(done) {
        //uncomment below and update the code to test deletePermissionSchemeUser
        //instance.deletePermissionSchemeUser(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteRepository', function() {
      it('should call deleteRepository successfully', function(done) {
        //uncomment below and update the code to test deleteRepository
        //instance.deleteRepository(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('disableRepository', function() {
      it('should call disableRepository successfully', function(done) {
        //uncomment below and update the code to test disableRepository
        //instance.disableRepository(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('doReviewRevisionReindex', function() {
      it('should call doReviewRevisionReindex successfully', function(done) {
        //uncomment below and update the code to test doReviewRevisionReindex
        //instance.doReviewRevisionReindex(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('doShareContent', function() {
      it('should call doShareContent successfully', function(done) {
        //uncomment below and update the code to test doShareContent
        //instance.doShareContent(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('enableRepository', function() {
      it('should call enableRepository successfully', function(done) {
        //uncomment below and update the code to test enableRepository
        //instance.enableRepository(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('fullIncrementalIndex', function() {
      it('should call fullIncrementalIndex successfully', function(done) {
        //uncomment below and update the code to test fullIncrementalIndex
        //instance.fullIncrementalIndex(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getGlobalPref', function() {
      it('should call getGlobalPref successfully', function(done) {
        //uncomment below and update the code to test getGlobalPref
        //instance.getGlobalPref(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getInfo', function() {
      it('should call getInfo successfully', function(done) {
        //uncomment below and update the code to test getInfo
        //instance.getInfo(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getRecent', function() {
      it('should call getRecent successfully', function(done) {
        //uncomment below and update the code to test getRecent
        //instance.getRecent(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getRecentDetailed', function() {
      it('should call getRecentDetailed successfully', function(done) {
        //uncomment below and update the code to test getRecentDetailed
        //instance.getRecentDetailed(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getRecentProjects', function() {
      it('should call getRecentProjects successfully', function(done) {
        //uncomment below and update the code to test getRecentProjects
        //instance.getRecentProjects(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getRecentProjectsDetailed', function() {
      it('should call getRecentProjectsDetailed successfully', function(done) {
        //uncomment below and update the code to test getRecentProjectsDetailed
        //instance.getRecentProjectsDetailed(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getRecentRepositories', function() {
      it('should call getRecentRepositories successfully', function(done) {
        //uncomment below and update the code to test getRecentRepositories
        //instance.getRecentRepositories(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getRecentRepositoriesDetailed', function() {
      it('should call getRecentRepositoriesDetailed successfully', function(done) {
        //uncomment below and update the code to test getRecentRepositoriesDetailed
        //instance.getRecentRepositoriesDetailed(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getRecentReviews', function() {
      it('should call getRecentReviews successfully', function(done) {
        //uncomment below and update the code to test getRecentReviews
        //instance.getRecentReviews(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getRecentReviewsDetailed', function() {
      it('should call getRecentReviewsDetailed successfully', function(done) {
        //uncomment below and update the code to test getRecentReviewsDetailed
        //instance.getRecentReviewsDetailed(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getRecentSnippets', function() {
      it('should call getRecentSnippets successfully', function(done) {
        //uncomment below and update the code to test getRecentSnippets
        //instance.getRecentSnippets(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getRecentSnippetsDetailed', function() {
      it('should call getRecentSnippetsDetailed successfully', function(done) {
        //uncomment below and update the code to test getRecentSnippetsDetailed
        //instance.getRecentSnippetsDetailed(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getRecentUsers', function() {
      it('should call getRecentUsers successfully', function(done) {
        //uncomment below and update the code to test getRecentUsers
        //instance.getRecentUsers(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getRecentUsersDetailed', function() {
      it('should call getRecentUsersDetailed successfully', function(done) {
        //uncomment below and update the code to test getRecentUsersDetailed
        //instance.getRecentUsersDetailed(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getRepoPref', function() {
      it('should call getRepoPref successfully', function(done) {
        //uncomment below and update the code to test getRepoPref
        //instance.getRepoPref(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('incrementalIndex', function() {
      it('should call incrementalIndex successfully', function(done) {
        //uncomment below and update the code to test incrementalIndex
        //instance.incrementalIndex(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listAnonymousUsersPrincipalAssociation', function() {
      it('should call listAnonymousUsersPrincipalAssociation successfully', function(done) {
        //uncomment below and update the code to test listAnonymousUsersPrincipalAssociation
        //instance.listAnonymousUsersPrincipalAssociation(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listDefaultReviewerUsers', function() {
      it('should call listDefaultReviewerUsers successfully', function(done) {
        //uncomment below and update the code to test listDefaultReviewerUsers
        //instance.listDefaultReviewerUsers(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listGroupPrincipalAssociation', function() {
      it('should call listGroupPrincipalAssociation successfully', function(done) {
        //uncomment below and update the code to test listGroupPrincipalAssociation
        //instance.listGroupPrincipalAssociation(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listGroupUsers', function() {
      it('should call listGroupUsers successfully', function(done) {
        //uncomment below and update the code to test listGroupUsers
        //instance.listGroupUsers(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listLoggedUsersPrincipalAssociation', function() {
      it('should call listLoggedUsersPrincipalAssociation successfully', function(done) {
        //uncomment below and update the code to test listLoggedUsersPrincipalAssociation
        //instance.listLoggedUsersPrincipalAssociation(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listProjects', function() {
      it('should call listProjects successfully', function(done) {
        //uncomment below and update the code to test listProjects
        //instance.listProjects(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listRolesPrincipalAssociation', function() {
      it('should call listRolesPrincipalAssociation successfully', function(done) {
        //uncomment below and update the code to test listRolesPrincipalAssociation
        //instance.listRolesPrincipalAssociation(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listUserGroups', function() {
      it('should call listUserGroups successfully', function(done) {
        //uncomment below and update the code to test listUserGroups
        //instance.listUserGroups(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('listUserPrincipalAssociation', function() {
      it('should call listUserPrincipalAssociation successfully', function(done) {
        //uncomment below and update the code to test listUserPrincipalAssociation
        //instance.listUserPrincipalAssociation(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('login', function() {
      it('should call login successfully', function(done) {
        //uncomment below and update the code to test login
        //instance.login(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('moveAllReviews', function() {
      it('should call moveAllReviews successfully', function(done) {
        //uncomment below and update the code to test moveAllReviews
        //instance.moveAllReviews(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('permissions', function() {
      it('should call permissions successfully', function(done) {
        //uncomment below and update the code to test permissions
        //instance.permissions(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('permissionsGroups', function() {
      it('should call permissionsGroups successfully', function(done) {
        //uncomment below and update the code to test permissionsGroups
        //instance.permissionsGroups(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('rebuildSearchIndex', function() {
      it('should call rebuildSearchIndex successfully', function(done) {
        //uncomment below and update the code to test rebuildSearchIndex
        //instance.rebuildSearchIndex(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('reindexChangesetComments', function() {
      it('should call reindexChangesetComments successfully', function(done) {
        //uncomment below and update the code to test reindexChangesetComments
        //instance.reindexChangesetComments(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('reindexChangesetDiscussion', function() {
      it('should call reindexChangesetDiscussion successfully', function(done) {
        //uncomment below and update the code to test reindexChangesetDiscussion
        //instance.reindexChangesetDiscussion(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('reindexReviews', function() {
      it('should call reindexReviews successfully', function(done) {
        //uncomment below and update the code to test reindexReviews
        //instance.reindexReviews(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('reindexSearch', function() {
      it('should call reindexSearch successfully', function(done) {
        //uncomment below and update the code to test reindexSearch
        //instance.reindexSearch(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('removeGroupToPermissions', function() {
      it('should call removeGroupToPermissions successfully', function(done) {
        //uncomment below and update the code to test removeGroupToPermissions
        //instance.removeGroupToPermissions(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('repositoryUpdates', function() {
      it('should call repositoryUpdates successfully', function(done) {
        //uncomment below and update the code to test repositoryUpdates
        //instance.repositoryUpdates(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('restServiceFecruAdminGroupsGet', function() {
      it('should call restServiceFecruAdminGroupsGet successfully', function(done) {
        //uncomment below and update the code to test restServiceFecruAdminGroupsGet
        //instance.restServiceFecruAdminGroupsGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('restServiceFecruAdminGroupsNameDelete', function() {
      it('should call restServiceFecruAdminGroupsNameDelete successfully', function(done) {
        //uncomment below and update the code to test restServiceFecruAdminGroupsNameDelete
        //instance.restServiceFecruAdminGroupsNameDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('restServiceFecruAdminGroupsNameGet', function() {
      it('should call restServiceFecruAdminGroupsNameGet successfully', function(done) {
        //uncomment below and update the code to test restServiceFecruAdminGroupsNameGet
        //instance.restServiceFecruAdminGroupsNameGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('restServiceFecruAdminGroupsNamePut', function() {
      it('should call restServiceFecruAdminGroupsNamePut successfully', function(done) {
        //uncomment below and update the code to test restServiceFecruAdminGroupsNamePut
        //instance.restServiceFecruAdminGroupsNamePut(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('restServiceFecruAdminGroupsNameUsersDelete', function() {
      it('should call restServiceFecruAdminGroupsNameUsersDelete successfully', function(done) {
        //uncomment below and update the code to test restServiceFecruAdminGroupsNameUsersDelete
        //instance.restServiceFecruAdminGroupsNameUsersDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('restServiceFecruAdminGroupsNameUsersPut', function() {
      it('should call restServiceFecruAdminGroupsNameUsersPut successfully', function(done) {
        //uncomment below and update the code to test restServiceFecruAdminGroupsNameUsersPut
        //instance.restServiceFecruAdminGroupsNameUsersPut(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('restServiceFecruAdminGroupsPost', function() {
      it('should call restServiceFecruAdminGroupsPost successfully', function(done) {
        //uncomment below and update the code to test restServiceFecruAdminGroupsPost
        //instance.restServiceFecruAdminGroupsPost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('restServiceFecruAdminPermissionSchemesGet', function() {
      it('should call restServiceFecruAdminPermissionSchemesGet successfully', function(done) {
        //uncomment below and update the code to test restServiceFecruAdminPermissionSchemesGet
        //instance.restServiceFecruAdminPermissionSchemesGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('restServiceFecruAdminPermissionSchemesNameDelete', function() {
      it('should call restServiceFecruAdminPermissionSchemesNameDelete successfully', function(done) {
        //uncomment below and update the code to test restServiceFecruAdminPermissionSchemesNameDelete
        //instance.restServiceFecruAdminPermissionSchemesNameDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('restServiceFecruAdminPermissionSchemesNameGet', function() {
      it('should call restServiceFecruAdminPermissionSchemesNameGet successfully', function(done) {
        //uncomment below and update the code to test restServiceFecruAdminPermissionSchemesNameGet
        //instance.restServiceFecruAdminPermissionSchemesNameGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('restServiceFecruAdminPermissionSchemesNamePut', function() {
      it('should call restServiceFecruAdminPermissionSchemesNamePut successfully', function(done) {
        //uncomment below and update the code to test restServiceFecruAdminPermissionSchemesNamePut
        //instance.restServiceFecruAdminPermissionSchemesNamePut(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('restServiceFecruAdminPermissionSchemesPost', function() {
      it('should call restServiceFecruAdminPermissionSchemesPost successfully', function(done) {
        //uncomment below and update the code to test restServiceFecruAdminPermissionSchemesPost
        //instance.restServiceFecruAdminPermissionSchemesPost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('restServiceFecruAdminProjectsGet', function() {
      it('should call restServiceFecruAdminProjectsGet successfully', function(done) {
        //uncomment below and update the code to test restServiceFecruAdminProjectsGet
        //instance.restServiceFecruAdminProjectsGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('restServiceFecruAdminProjectsKeyDelete', function() {
      it('should call restServiceFecruAdminProjectsKeyDelete successfully', function(done) {
        //uncomment below and update the code to test restServiceFecruAdminProjectsKeyDelete
        //instance.restServiceFecruAdminProjectsKeyDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('restServiceFecruAdminProjectsKeyGet', function() {
      it('should call restServiceFecruAdminProjectsKeyGet successfully', function(done) {
        //uncomment below and update the code to test restServiceFecruAdminProjectsKeyGet
        //instance.restServiceFecruAdminProjectsKeyGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('restServiceFecruAdminProjectsKeyPut', function() {
      it('should call restServiceFecruAdminProjectsKeyPut successfully', function(done) {
        //uncomment below and update the code to test restServiceFecruAdminProjectsKeyPut
        //instance.restServiceFecruAdminProjectsKeyPut(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('restServiceFecruAdminProjectsPost', function() {
      it('should call restServiceFecruAdminProjectsPost successfully', function(done) {
        //uncomment below and update the code to test restServiceFecruAdminProjectsPost
        //instance.restServiceFecruAdminProjectsPost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('restServiceFecruAdminRepositoriesGet', function() {
      it('should call restServiceFecruAdminRepositoriesGet successfully', function(done) {
        //uncomment below and update the code to test restServiceFecruAdminRepositoriesGet
        //instance.restServiceFecruAdminRepositoriesGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('restServiceFecruAdminRepositoriesPost', function() {
      it('should call restServiceFecruAdminRepositoriesPost successfully', function(done) {
        //uncomment below and update the code to test restServiceFecruAdminRepositoriesPost
        //instance.restServiceFecruAdminRepositoriesPost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('restServiceFecruAdminRepositoriesRepositoryDelete', function() {
      it('should call restServiceFecruAdminRepositoriesRepositoryDelete successfully', function(done) {
        //uncomment below and update the code to test restServiceFecruAdminRepositoriesRepositoryDelete
        //instance.restServiceFecruAdminRepositoriesRepositoryDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('restServiceFecruAdminRepositoriesRepositoryGet', function() {
      it('should call restServiceFecruAdminRepositoriesRepositoryGet successfully', function(done) {
        //uncomment below and update the code to test restServiceFecruAdminRepositoriesRepositoryGet
        //instance.restServiceFecruAdminRepositoriesRepositoryGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('restServiceFecruAdminRepositoriesRepositoryPut', function() {
      it('should call restServiceFecruAdminRepositoriesRepositoryPut successfully', function(done) {
        //uncomment below and update the code to test restServiceFecruAdminRepositoriesRepositoryPut
        //instance.restServiceFecruAdminRepositoriesRepositoryPut(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('restServiceFecruAdminRepositoriesRepositoryReindexLinecountPut', function() {
      it('should call restServiceFecruAdminRepositoriesRepositoryReindexLinecountPut successfully', function(done) {
        //uncomment below and update the code to test restServiceFecruAdminRepositoriesRepositoryReindexLinecountPut
        //instance.restServiceFecruAdminRepositoriesRepositoryReindexLinecountPut(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('restServiceFecruAdminRepositoriesRepositoryReindexSourcePut', function() {
      it('should call restServiceFecruAdminRepositoriesRepositoryReindexSourcePut successfully', function(done) {
        //uncomment below and update the code to test restServiceFecruAdminRepositoriesRepositoryReindexSourcePut
        //instance.restServiceFecruAdminRepositoriesRepositoryReindexSourcePut(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('restServiceFecruAdminRepositoriesRepositoryRescanMetadataPut', function() {
      it('should call restServiceFecruAdminRepositoriesRepositoryRescanMetadataPut successfully', function(done) {
        //uncomment below and update the code to test restServiceFecruAdminRepositoriesRepositoryRescanMetadataPut
        //instance.restServiceFecruAdminRepositoriesRepositoryRescanMetadataPut(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('restServiceFecruAdminRepositoriesV1RepositoryGet', function() {
      it('should call restServiceFecruAdminRepositoriesV1RepositoryGet successfully', function(done) {
        //uncomment below and update the code to test restServiceFecruAdminRepositoriesV1RepositoryGet
        //instance.restServiceFecruAdminRepositoriesV1RepositoryGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('restServiceFecruAdminRepositoriesV1RepositoryReindexLinecountPost', function() {
      it('should call restServiceFecruAdminRepositoriesV1RepositoryReindexLinecountPost successfully', function(done) {
        //uncomment below and update the code to test restServiceFecruAdminRepositoriesV1RepositoryReindexLinecountPost
        //instance.restServiceFecruAdminRepositoriesV1RepositoryReindexLinecountPost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('restServiceFecruAdminRepositoriesV1RepositoryReindexSourcePost', function() {
      it('should call restServiceFecruAdminRepositoriesV1RepositoryReindexSourcePost successfully', function(done) {
        //uncomment below and update the code to test restServiceFecruAdminRepositoriesV1RepositoryReindexSourcePost
        //instance.restServiceFecruAdminRepositoriesV1RepositoryReindexSourcePost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('restServiceFecruAdminRepositoriesV1RepositoryRescanMetadataPost', function() {
      it('should call restServiceFecruAdminRepositoriesV1RepositoryRescanMetadataPost successfully', function(done) {
        //uncomment below and update the code to test restServiceFecruAdminRepositoriesV1RepositoryRescanMetadataPost
        //instance.restServiceFecruAdminRepositoriesV1RepositoryRescanMetadataPost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('restServiceFecruAdminUsersGet', function() {
      it('should call restServiceFecruAdminUsersGet successfully', function(done) {
        //uncomment below and update the code to test restServiceFecruAdminUsersGet
        //instance.restServiceFecruAdminUsersGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('restServiceFecruAdminUsersNameDelete', function() {
      it('should call restServiceFecruAdminUsersNameDelete successfully', function(done) {
        //uncomment below and update the code to test restServiceFecruAdminUsersNameDelete
        //instance.restServiceFecruAdminUsersNameDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('restServiceFecruAdminUsersNameGet', function() {
      it('should call restServiceFecruAdminUsersNameGet successfully', function(done) {
        //uncomment below and update the code to test restServiceFecruAdminUsersNameGet
        //instance.restServiceFecruAdminUsersNameGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('restServiceFecruAdminUsersNameGroupsDelete', function() {
      it('should call restServiceFecruAdminUsersNameGroupsDelete successfully', function(done) {
        //uncomment below and update the code to test restServiceFecruAdminUsersNameGroupsDelete
        //instance.restServiceFecruAdminUsersNameGroupsDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('restServiceFecruAdminUsersNameGroupsPut', function() {
      it('should call restServiceFecruAdminUsersNameGroupsPut successfully', function(done) {
        //uncomment below and update the code to test restServiceFecruAdminUsersNameGroupsPut
        //instance.restServiceFecruAdminUsersNameGroupsPut(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('restServiceFecruAdminUsersNamePut', function() {
      it('should call restServiceFecruAdminUsersNamePut successfully', function(done) {
        //uncomment below and update the code to test restServiceFecruAdminUsersNamePut
        //instance.restServiceFecruAdminUsersNamePut(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('restServiceFecruAdminUsersPost', function() {
      it('should call restServiceFecruAdminUsersPost successfully', function(done) {
        //uncomment below and update the code to test restServiceFecruAdminUsersPost
        //instance.restServiceFecruAdminUsersPost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('restServiceFecruIndexingStatusV1StatusRepositoryGet', function() {
      it('should call restServiceFecruIndexingStatusV1StatusRepositoryGet successfully', function(done) {
        //uncomment below and update the code to test restServiceFecruIndexingStatusV1StatusRepositoryGet
        //instance.restServiceFecruIndexingStatusV1StatusRepositoryGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('scan', function() {
      it('should call scan successfully', function(done) {
        //uncomment below and update the code to test scan
        //instance.scan(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('scanCvs', function() {
      it('should call scanCvs successfully', function(done) {
        //uncomment below and update the code to test scanCvs
        //instance.scanCvs(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('setPref', function() {
      it('should call setPref successfully', function(done) {
        //uncomment below and update the code to test setPref
        //instance.setPref(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('start', function() {
      it('should call start successfully', function(done) {
        //uncomment below and update the code to test start
        //instance.start(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('startRepository', function() {
      it('should call startRepository successfully', function(done) {
        //uncomment below and update the code to test startRepository
        //instance.startRepository(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('stop', function() {
      it('should call stop successfully', function(done) {
        //uncomment below and update the code to test stop
        //instance.stop(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('stopRepository', function() {
      it('should call stopRepository successfully', function(done) {
        //uncomment below and update the code to test stopRepository
        //instance.stopRepository(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateDefaultPermissions', function() {
      it('should call updateDefaultPermissions successfully', function(done) {
        //uncomment below and update the code to test updateDefaultPermissions
        //instance.updateDefaultPermissions(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updatePermissions', function() {
      it('should call updatePermissions successfully', function(done) {
        //uncomment below and update the code to test updatePermissions
        //instance.updatePermissions(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('updateRepositoryUpdates', function() {
      it('should call updateRepositoryUpdates successfully', function(done) {
        //uncomment below and update the code to test updateRepositoryUpdates
        //instance.updateRepositoryUpdates(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
