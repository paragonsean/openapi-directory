/**
 * Fisheye Crucible
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";

/**
* Default service.
* @module api/DefaultApi
* @version 1.0.0
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addAllowedReviewerGroup operation.
     * @callback module:api/DefaultApi~addAllowedReviewerGroupCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add group to project's allowed reviewer group list
     * @param {String} key project key
     * @param {module:api/DefaultApi~addAllowedReviewerGroupCallback} callback The callback function, accepting three arguments: error, data, response
     */
    addAllowedReviewerGroup(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling addAllowedReviewerGroup");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest-service-fecru/admin/projects/{key}/allowed-reviewer-groups', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addAllowedReviewerUser operation.
     * @callback module:api/DefaultApi~addAllowedReviewerUserCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add user to project's allowed reviewer users list
     * @param {String} key project key
     * @param {module:api/DefaultApi~addAllowedReviewerUserCallback} callback The callback function, accepting three arguments: error, data, response
     */
    addAllowedReviewerUser(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling addAllowedReviewerUser");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest-service-fecru/admin/projects/{key}/allowed-reviewer-users', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addDefaultReviewerGroup operation.
     * @callback module:api/DefaultApi~addDefaultReviewerGroupCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add group to project's default reviewer group list
     * @param {String} key project key
     * @param {module:api/DefaultApi~addDefaultReviewerGroupCallback} callback The callback function, accepting three arguments: error, data, response
     */
    addDefaultReviewerGroup(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling addDefaultReviewerGroup");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest-service-fecru/admin/projects/{key}/default-reviewer-groups', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addDefaultReviewerUser operation.
     * @callback module:api/DefaultApi~addDefaultReviewerUserCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add user to project's default reviewer users list
     * @param {String} key project key
     * @param {module:api/DefaultApi~addDefaultReviewerUserCallback} callback The callback function, accepting three arguments: error, data, response
     */
    addDefaultReviewerUser(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling addDefaultReviewerUser");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest-service-fecru/admin/projects/{key}/default-reviewer-users', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addGroupToPermissions operation.
     * @callback module:api/DefaultApi~addGroupToPermissionsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Note: use /rest-service-fecru/admin/repository-permissions/ endpoint for full repository permission administration functionality  Adds group to repository allowed groups
     * @param {String} repository the key of the repository
     * @param {module:api/DefaultApi~addGroupToPermissionsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    addGroupToPermissions(repository, callback) {
      let postBody = null;
      // verify the required parameter 'repository' is set
      if (repository === undefined || repository === null) {
        throw new Error("Missing the required parameter 'repository' when calling addGroupToPermissions");
      }

      let pathParams = {
        'repository': repository
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest-service-fecru/admin/repositories/{repository}/permissions/groups', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addPermissionSchemeAnonymousUsers operation.
     * @callback module:api/DefaultApi~addPermissionSchemeAnonymousUsersCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add anonymous-user permission [action name] to given permission scheme  List of available action names:
     * @param {String} name permission scheme name
     * @param {module:api/DefaultApi~addPermissionSchemeAnonymousUsersCallback} callback The callback function, accepting three arguments: error, data, response
     */
    addPermissionSchemeAnonymousUsers(name, callback) {
      let postBody = null;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling addPermissionSchemeAnonymousUsers");
      }

      let pathParams = {
        'name': name
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest-service-fecru/admin/permission-schemes/{name}/anonymous-users', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addPermissionSchemeGroup operation.
     * @callback module:api/DefaultApi~addPermissionSchemeGroupCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add group permission [group name, action name] to given permission scheme  List of available action names:
     * @param {String} name permission scheme name
     * @param {module:api/DefaultApi~addPermissionSchemeGroupCallback} callback The callback function, accepting three arguments: error, data, response
     */
    addPermissionSchemeGroup(name, callback) {
      let postBody = null;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling addPermissionSchemeGroup");
      }

      let pathParams = {
        'name': name
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest-service-fecru/admin/permission-schemes/{name}/groups', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addPermissionSchemeLoggedUsers operation.
     * @callback module:api/DefaultApi~addPermissionSchemeLoggedUsersCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add logged-in-users permission [action name] to given permission scheme  List of available action names:
     * @param {String} name permission scheme name
     * @param {module:api/DefaultApi~addPermissionSchemeLoggedUsersCallback} callback The callback function, accepting three arguments: error, data, response
     */
    addPermissionSchemeLoggedUsers(name, callback) {
      let postBody = null;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling addPermissionSchemeLoggedUsers");
      }

      let pathParams = {
        'name': name
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest-service-fecru/admin/permission-schemes/{name}/logged-in-users', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addPermissionSchemeReviewRole operation.
     * @callback module:api/DefaultApi~addPermissionSchemeReviewRoleCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add review-role permission [role name, action name] to given permission scheme  List of available action names:     List of available role names:
     * @param {String} name permission scheme name
     * @param {module:api/DefaultApi~addPermissionSchemeReviewRoleCallback} callback The callback function, accepting three arguments: error, data, response
     */
    addPermissionSchemeReviewRole(name, callback) {
      let postBody = null;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling addPermissionSchemeReviewRole");
      }

      let pathParams = {
        'name': name
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest-service-fecru/admin/permission-schemes/{name}/review-roles', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addPermissionSchemeUser operation.
     * @callback module:api/DefaultApi~addPermissionSchemeUserCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add user permission [username, action name] to given permission scheme  List of available action names:
     * @param {String} name permission scheme name
     * @param {module:api/DefaultApi~addPermissionSchemeUserCallback} callback The callback function, accepting three arguments: error, data, response
     */
    addPermissionSchemeUser(name, callback) {
      let postBody = null;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling addPermissionSchemeUser");
      }

      let pathParams = {
        'name': name
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest-service-fecru/admin/permission-schemes/{name}/users', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the addRepository operation.
     * @callback module:api/DefaultApi~addRepositoryCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds repository
     * @param {module:api/DefaultApi~addRepositoryCallback} callback The callback function, accepting three arguments: error, data, response
     */
    addRepository(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest-service-fecru/admin/repositories-v1', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the allowedReviewerGroups operation.
     * @callback module:api/DefaultApi~allowedReviewerGroupsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves project's allowed reviewer groups
     * @param {String} key project key
     * @param {module:api/DefaultApi~allowedReviewerGroupsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    allowedReviewerGroups(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling allowedReviewerGroups");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest-service-fecru/admin/projects/{key}/allowed-reviewer-groups', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the allowedReviewerUsers operation.
     * @callback module:api/DefaultApi~allowedReviewerUsersCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves project's allowed reviewer users
     * @param {String} key project key
     * @param {module:api/DefaultApi~allowedReviewerUsersCallback} callback The callback function, accepting three arguments: error, data, response
     */
    allowedReviewerUsers(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling allowedReviewerUsers");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest-service-fecru/admin/projects/{key}/allowed-reviewer-users', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the defaultPermissions operation.
     * @callback module:api/DefaultApi~defaultPermissionsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve default repository permissions properties.
     * @param {module:api/DefaultApi~defaultPermissionsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    defaultPermissions(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest-service-fecru/admin/repositories/~defaults/permissions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the defaultReviewerGroups operation.
     * @callback module:api/DefaultApi~defaultReviewerGroupsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves project's default reviewer groups
     * @param {String} key project key
     * @param {module:api/DefaultApi~defaultReviewerGroupsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    defaultReviewerGroups(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling defaultReviewerGroups");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest-service-fecru/admin/projects/{key}/default-reviewer-groups', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteAllowedReviewerGroup operation.
     * @callback module:api/DefaultApi~deleteAllowedReviewerGroupCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete group from project's allowed reviewer group list
     * @param {String} key project key
     * @param {module:api/DefaultApi~deleteAllowedReviewerGroupCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteAllowedReviewerGroup(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteAllowedReviewerGroup");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest-service-fecru/admin/projects/{key}/allowed-reviewer-groups', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteAllowedReviewerUser operation.
     * @callback module:api/DefaultApi~deleteAllowedReviewerUserCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove user from project's allowed reviewer users list
     * @param {String} key project key
     * @param {module:api/DefaultApi~deleteAllowedReviewerUserCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteAllowedReviewerUser(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteAllowedReviewerUser");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest-service-fecru/admin/projects/{key}/allowed-reviewer-users', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteDefaultReviewerGroup operation.
     * @callback module:api/DefaultApi~deleteDefaultReviewerGroupCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete group from project's default reviewer group list
     * @param {String} key project key
     * @param {module:api/DefaultApi~deleteDefaultReviewerGroupCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteDefaultReviewerGroup(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteDefaultReviewerGroup");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest-service-fecru/admin/projects/{key}/default-reviewer-groups', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteDefaultReviewerUser operation.
     * @callback module:api/DefaultApi~deleteDefaultReviewerUserCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove user from project's default reviewer users list
     * @param {String} key project key
     * @param {module:api/DefaultApi~deleteDefaultReviewerUserCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteDefaultReviewerUser(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling deleteDefaultReviewerUser");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest-service-fecru/admin/projects/{key}/default-reviewer-users', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deletePermissionSchemeAnonymousUsers operation.
     * @callback module:api/DefaultApi~deletePermissionSchemeAnonymousUsersCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes anonymous-user permission [action name] from given permission scheme
     * @param {String} name permission scheme name
     * @param {module:api/DefaultApi~deletePermissionSchemeAnonymousUsersCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deletePermissionSchemeAnonymousUsers(name, callback) {
      let postBody = null;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling deletePermissionSchemeAnonymousUsers");
      }

      let pathParams = {
        'name': name
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest-service-fecru/admin/permission-schemes/{name}/anonymous-users', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deletePermissionSchemeGroup operation.
     * @callback module:api/DefaultApi~deletePermissionSchemeGroupCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes group permission [group name, action name] from given permission scheme
     * @param {String} name permission scheme name
     * @param {module:api/DefaultApi~deletePermissionSchemeGroupCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deletePermissionSchemeGroup(name, callback) {
      let postBody = null;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling deletePermissionSchemeGroup");
      }

      let pathParams = {
        'name': name
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest-service-fecru/admin/permission-schemes/{name}/groups', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deletePermissionSchemeLoggedUsers operation.
     * @callback module:api/DefaultApi~deletePermissionSchemeLoggedUsersCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes logged-in-users permission [action name] from given permission scheme
     * @param {String} name permission scheme name
     * @param {module:api/DefaultApi~deletePermissionSchemeLoggedUsersCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deletePermissionSchemeLoggedUsers(name, callback) {
      let postBody = null;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling deletePermissionSchemeLoggedUsers");
      }

      let pathParams = {
        'name': name
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest-service-fecru/admin/permission-schemes/{name}/logged-in-users', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deletePermissionSchemeRole operation.
     * @callback module:api/DefaultApi~deletePermissionSchemeRoleCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes review-role permission [role name, action name] from given permission scheme
     * @param {String} name permission scheme name
     * @param {module:api/DefaultApi~deletePermissionSchemeRoleCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deletePermissionSchemeRole(name, callback) {
      let postBody = null;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling deletePermissionSchemeRole");
      }

      let pathParams = {
        'name': name
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest-service-fecru/admin/permission-schemes/{name}/review-roles', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deletePermissionSchemeUser operation.
     * @callback module:api/DefaultApi~deletePermissionSchemeUserCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes user permission [username, action name] from given permission scheme
     * @param {String} name permission scheme name
     * @param {module:api/DefaultApi~deletePermissionSchemeUserCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deletePermissionSchemeUser(name, callback) {
      let postBody = null;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling deletePermissionSchemeUser");
      }

      let pathParams = {
        'name': name
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest-service-fecru/admin/permission-schemes/{name}/users', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteRepository operation.
     * @callback module:api/DefaultApi~deleteRepositoryCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes repository.  Warning: you can not undo this operation
     * @param {String} repository the key of the repository to delete
     * @param {module:api/DefaultApi~deleteRepositoryCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteRepository(repository, callback) {
      let postBody = null;
      // verify the required parameter 'repository' is set
      if (repository === undefined || repository === null) {
        throw new Error("Missing the required parameter 'repository' when calling deleteRepository");
      }

      let pathParams = {
        'repository': repository
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest-service-fecru/admin/repositories-v1/{repository}/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the disableRepository operation.
     * @callback module:api/DefaultApi~disableRepositoryCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Disables repository.
     * @param {String} repository the key of the repository to disable
     * @param {module:api/DefaultApi~disableRepositoryCallback} callback The callback function, accepting three arguments: error, data, response
     */
    disableRepository(repository, callback) {
      let postBody = null;
      // verify the required parameter 'repository' is set
      if (repository === undefined || repository === null) {
        throw new Error("Missing the required parameter 'repository' when calling disableRepository");
      }

      let pathParams = {
        'repository': repository
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest-service-fecru/admin/repositories-v1/{repository}/disable', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the doReviewRevisionReindex operation.
     * @callback module:api/DefaultApi~doReviewRevisionReindexCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Re-indexes all the Crucible revision data (which revisions have been reviewed)
     * @param {String} repository the key of the repository to reindex
     * @param {Object} opts Optional parameters
     * @param {Boolean} [synchronous = false)] if true will wait for the indexing to finish before returning
     * @param {module:api/DefaultApi~doReviewRevisionReindexCallback} callback The callback function, accepting three arguments: error, data, response
     */
    doReviewRevisionReindex(repository, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'repository' is set
      if (repository === undefined || repository === null) {
        throw new Error("Missing the required parameter 'repository' when calling doReviewRevisionReindex");
      }

      let pathParams = {
        'repository': repository
      };
      let queryParams = {
        'synchronous': opts['synchronous']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest-service-fecru/admin/repositories-v1/{repository}/reindex-reviews', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the doShareContent operation.
     * @callback module:api/DefaultApi~doShareContentCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {module:api/DefaultApi~doShareContentCallback} callback The callback function, accepting three arguments: error, data, response
     */
    doShareContent(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest-service-fecru/share-content-v1/share', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the enableRepository operation.
     * @callback module:api/DefaultApi~enableRepositoryCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Enables repository.
     * @param {String} repository the key of the repository to enable
     * @param {module:api/DefaultApi~enableRepositoryCallback} callback The callback function, accepting three arguments: error, data, response
     */
    enableRepository(repository, callback) {
      let postBody = null;
      // verify the required parameter 'repository' is set
      if (repository === undefined || repository === null) {
        throw new Error("Missing the required parameter 'repository' when calling enableRepository");
      }

      let pathParams = {
        'repository': repository
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest-service-fecru/admin/repositories-v1/{repository}/enable', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the fullIncrementalIndex operation.
     * @callback module:api/DefaultApi~fullIncrementalIndexCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Runs an full incremental repository index.  For CVS: scans the whole CVS repository for any changes since the last scan.  For other repository types will trigger an incremental index.
     * @param {String} repository the key of the repository to scan
     * @param {module:api/DefaultApi~fullIncrementalIndexCallback} callback The callback function, accepting three arguments: error, data, response
     */
    fullIncrementalIndex(repository, callback) {
      let postBody = null;
      // verify the required parameter 'repository' is set
      if (repository === undefined || repository === null) {
        throw new Error("Missing the required parameter 'repository' when calling fullIncrementalIndex");
      }

      let pathParams = {
        'repository': repository
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest-service-fecru/admin/repositories/{repository}/full-incremental-index', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getGlobalPref operation.
     * @callback module:api/DefaultApi~getGlobalPrefCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Getting user's global preference
     * @param {String} property the property(preference) name
     * @param {module:api/DefaultApi~getGlobalPrefCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getGlobalPref(property, callback) {
      let postBody = null;
      // verify the required parameter 'property' is set
      if (property === undefined || property === null) {
        throw new Error("Missing the required parameter 'property' when calling getGlobalPref");
      }

      let pathParams = {
        'property': property
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest-service-fecru/user-prefs-v1/{property}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getInfo operation.
     * @callback module:api/DefaultApi~getInfoCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Provides general information about the server's configuration.
     * @param {module:api/DefaultApi~getInfoCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getInfo(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest-service-fecru/server-v1', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRecent operation.
     * @callback module:api/DefaultApi~getRecentCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of recently visited items for the currently logged in user.
     * @param {module:api/DefaultApi~getRecentCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getRecent(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest-service-fecru/recently-visited-v1', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRecentDetailed operation.
     * @callback module:api/DefaultApi~getRecentDetailedCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of recently visisted items for the currently logged in user, including the detailed entities.
     * @param {module:api/DefaultApi~getRecentDetailedCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getRecentDetailed(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest-service-fecru/recently-visited-v1/detailed', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRecentProjects operation.
     * @callback module:api/DefaultApi~getRecentProjectsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of recently visited projects for the currently logged in user.
     * @param {module:api/DefaultApi~getRecentProjectsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getRecentProjects(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest-service-fecru/recently-visited-v1/projects', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRecentProjectsDetailed operation.
     * @callback module:api/DefaultApi~getRecentProjectsDetailedCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of recently visited projects for the currently logged in Project, including the detailed entities.
     * @param {module:api/DefaultApi~getRecentProjectsDetailedCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getRecentProjectsDetailed(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest-service-fecru/recently-visited-v1/projects/detailed', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRecentRepositories operation.
     * @callback module:api/DefaultApi~getRecentRepositoriesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of recently visited repositories for the currently logged in user.
     * @param {module:api/DefaultApi~getRecentRepositoriesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getRecentRepositories(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest-service-fecru/recently-visited-v1/repositories', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRecentRepositoriesDetailed operation.
     * @callback module:api/DefaultApi~getRecentRepositoriesDetailedCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of recently visisted repositories for the currently logged in user, including the detailed entities.
     * @param {module:api/DefaultApi~getRecentRepositoriesDetailedCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getRecentRepositoriesDetailed(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest-service-fecru/recently-visited-v1/repositories/detailed', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRecentReviews operation.
     * @callback module:api/DefaultApi~getRecentReviewsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of recently visited reviews for the currently logged in user.
     * @param {module:api/DefaultApi~getRecentReviewsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getRecentReviews(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest-service-fecru/recently-visited-v1/reviews', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRecentReviewsDetailed operation.
     * @callback module:api/DefaultApi~getRecentReviewsDetailedCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of recently visited reviews for the currently logged in user, including the detailed entities.
     * @param {module:api/DefaultApi~getRecentReviewsDetailedCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getRecentReviewsDetailed(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest-service-fecru/recently-visited-v1/reviews/detailed', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRecentSnippets operation.
     * @callback module:api/DefaultApi~getRecentSnippetsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of recently visited snippets for the currently logged in user.
     * @param {module:api/DefaultApi~getRecentSnippetsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getRecentSnippets(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest-service-fecru/recently-visited-v1/snippets', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRecentSnippetsDetailed operation.
     * @callback module:api/DefaultApi~getRecentSnippetsDetailedCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of recently visited snippets for the currently logged in user, including the detailed entities.
     * @param {module:api/DefaultApi~getRecentSnippetsDetailedCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getRecentSnippetsDetailed(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest-service-fecru/recently-visited-v1/snippets/detailed', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRecentUsers operation.
     * @callback module:api/DefaultApi~getRecentUsersCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of recently visited users for the currently logged in user.
     * @param {module:api/DefaultApi~getRecentUsersCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getRecentUsers(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest-service-fecru/recently-visited-v1/users', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRecentUsersDetailed operation.
     * @callback module:api/DefaultApi~getRecentUsersDetailedCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of recently visited users for the currently logged in user, including the detailed entities.
     * @param {module:api/DefaultApi~getRecentUsersDetailedCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getRecentUsersDetailed(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest-service-fecru/recently-visited-v1/users/detailed', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getRepoPref operation.
     * @callback module:api/DefaultApi~getRepoPrefCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Getting user's preference related to a certain repository
     * @param {String} property the property(preference) name
     * @param {String} repository the key of the repository
     * @param {module:api/DefaultApi~getRepoPrefCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getRepoPref(property, repository, callback) {
      let postBody = null;
      // verify the required parameter 'property' is set
      if (property === undefined || property === null) {
        throw new Error("Missing the required parameter 'property' when calling getRepoPref");
      }
      // verify the required parameter 'repository' is set
      if (repository === undefined || repository === null) {
        throw new Error("Missing the required parameter 'repository' when calling getRepoPref");
      }

      let pathParams = {
        'property': property,
        'repository': repository
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest-service-fecru/user-prefs-v1/{repository}/{property}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the incrementalIndex operation.
     * @callback module:api/DefaultApi~incrementalIndexCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Runs an incremental repository index.  This is the same operation as triggered by scheduled indexing.  Can be called using the REST API Token to authorize.
     * @param {String} repository the key of the repository to stop
     * @param {Object} opts Optional parameters
     * @param {Boolean} [wait = false)] if true will wait for the indexing to finish before returning
     * @param {module:api/DefaultApi~incrementalIndexCallback} callback The callback function, accepting three arguments: error, data, response
     */
    incrementalIndex(repository, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'repository' is set
      if (repository === undefined || repository === null) {
        throw new Error("Missing the required parameter 'repository' when calling incrementalIndex");
      }

      let pathParams = {
        'repository': repository
      };
      let queryParams = {
        'wait': opts['wait']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest-service-fecru/admin/repositories/{repository}/incremental-index', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listAnonymousUsersPrincipalAssociation operation.
     * @callback module:api/DefaultApi~listAnonymousUsersPrincipalAssociationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a page of anonymous users permissions [action name] for given permission scheme.
     * @param {String} name permission scheme name
     * @param {Object} opts Optional parameters
     * @param {String} [action] action name
     * @param {module:api/DefaultApi~listAnonymousUsersPrincipalAssociationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    listAnonymousUsersPrincipalAssociation(name, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling listAnonymousUsersPrincipalAssociation");
      }

      let pathParams = {
        'name': name
      };
      let queryParams = {
        'action': opts['action']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest-service-fecru/admin/permission-schemes/{name}/anonymous-users', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listDefaultReviewerUsers operation.
     * @callback module:api/DefaultApi~listDefaultReviewerUsersCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves project's default reviewer users
     * @param {String} key project key
     * @param {module:api/DefaultApi~listDefaultReviewerUsersCallback} callback The callback function, accepting three arguments: error, data, response
     */
    listDefaultReviewerUsers(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling listDefaultReviewerUsers");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest-service-fecru/admin/projects/{key}/default-reviewer-users', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listGroupPrincipalAssociation operation.
     * @callback module:api/DefaultApi~listGroupPrincipalAssociationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a page of group permissions [group name, action name] for given permission scheme.
     * @param {String} name permission scheme name
     * @param {Object} opts Optional parameters
     * @param {String} [name2] group name
     * @param {String} [action] action name
     * @param {module:api/DefaultApi~listGroupPrincipalAssociationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    listGroupPrincipalAssociation(name, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling listGroupPrincipalAssociation");
      }

      let pathParams = {
        'name': name
      };
      let queryParams = {
        'name': opts['name2'],
        'action': opts['action']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest-service-fecru/admin/permission-schemes/{name}/groups', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listGroupUsers operation.
     * @callback module:api/DefaultApi~listGroupUsersCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists group's user names
     * @param {String} name group name
     * @param {module:api/DefaultApi~listGroupUsersCallback} callback The callback function, accepting three arguments: error, data, response
     */
    listGroupUsers(name, callback) {
      let postBody = null;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling listGroupUsers");
      }

      let pathParams = {
        'name': name
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest-service-fecru/admin/groups/{name}/users', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listLoggedUsersPrincipalAssociation operation.
     * @callback module:api/DefaultApi~listLoggedUsersPrincipalAssociationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a page of logged in users permissions [action name] for given permission scheme.
     * @param {String} name permission scheme name
     * @param {Object} opts Optional parameters
     * @param {String} [action] action name
     * @param {module:api/DefaultApi~listLoggedUsersPrincipalAssociationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    listLoggedUsersPrincipalAssociation(name, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling listLoggedUsersPrincipalAssociation");
      }

      let pathParams = {
        'name': name
      };
      let queryParams = {
        'action': opts['action']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest-service-fecru/admin/permission-schemes/{name}/logged-in-users', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listProjects operation.
     * @callback module:api/DefaultApi~listProjectsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a page of projects for given permission scheme.
     * @param {String} name permission scheme name
     * @param {module:api/DefaultApi~listProjectsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    listProjects(name, callback) {
      let postBody = null;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling listProjects");
      }

      let pathParams = {
        'name': name
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest-service-fecru/admin/permission-schemes/{name}/projects', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listRolesPrincipalAssociation operation.
     * @callback module:api/DefaultApi~listRolesPrincipalAssociationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a page of review-roles permissions [role name, action name] for given permission scheme.
     * @param {String} name permission scheme name
     * @param {Object} opts Optional parameters
     * @param {String} [name2] role name
     * @param {String} [action] action name
     * @param {module:api/DefaultApi~listRolesPrincipalAssociationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    listRolesPrincipalAssociation(name, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling listRolesPrincipalAssociation");
      }

      let pathParams = {
        'name': name
      };
      let queryParams = {
        'name': opts['name2'],
        'action': opts['action']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest-service-fecru/admin/permission-schemes/{name}/review-roles', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listUserGroups operation.
     * @callback module:api/DefaultApi~listUserGroupsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists user's group names
     * @param {String} name user name
     * @param {module:api/DefaultApi~listUserGroupsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    listUserGroups(name, callback) {
      let postBody = null;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling listUserGroups");
      }

      let pathParams = {
        'name': name
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest-service-fecru/admin/users/{name}/groups', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listUserPrincipalAssociation operation.
     * @callback module:api/DefaultApi~listUserPrincipalAssociationCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a page of user permissions [username, action name] for given permission scheme.
     * @param {String} name permission scheme name
     * @param {Object} opts Optional parameters
     * @param {String} [name2] permission scheme name
     * @param {String} [action] action name
     * @param {module:api/DefaultApi~listUserPrincipalAssociationCallback} callback The callback function, accepting three arguments: error, data, response
     */
    listUserPrincipalAssociation(name, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling listUserPrincipalAssociation");
      }

      let pathParams = {
        'name': name
      };
      let queryParams = {
        'name': opts['name2'],
        'action': opts['action']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest-service-fecru/admin/permission-schemes/{name}/users', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the login operation.
     * @callback module:api/DefaultApi~loginCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the user authentication token.
     * @param {module:api/DefaultApi~loginCallback} callback The callback function, accepting three arguments: error, data, response
     */
    login(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest-service-fecru/auth/login', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the moveAllReviews operation.
     * @callback module:api/DefaultApi~moveAllReviewsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Move reviews and snippets from source project to destination project
     * @param {String} sourceProjectKey project key of reviews and snippets source project
     * @param {String} destinationProjectKey project key of reviews and snippets destination project
     * @param {module:api/DefaultApi~moveAllReviewsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    moveAllReviews(sourceProjectKey, destinationProjectKey, callback) {
      let postBody = null;
      // verify the required parameter 'sourceProjectKey' is set
      if (sourceProjectKey === undefined || sourceProjectKey === null) {
        throw new Error("Missing the required parameter 'sourceProjectKey' when calling moveAllReviews");
      }
      // verify the required parameter 'destinationProjectKey' is set
      if (destinationProjectKey === undefined || destinationProjectKey === null) {
        throw new Error("Missing the required parameter 'destinationProjectKey' when calling moveAllReviews");
      }

      let pathParams = {
        'sourceProjectKey': sourceProjectKey,
        'destinationProjectKey': destinationProjectKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest-service-fecru/admin/projects/{sourceProjectKey}/move-reviews/{destinationProjectKey}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the permissions operation.
     * @callback module:api/DefaultApi~permissionsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve repository permissions properties.
     * @param {String} repository the key of the repository
     * @param {module:api/DefaultApi~permissionsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    permissions(repository, callback) {
      let postBody = null;
      // verify the required parameter 'repository' is set
      if (repository === undefined || repository === null) {
        throw new Error("Missing the required parameter 'repository' when calling permissions");
      }

      let pathParams = {
        'repository': repository
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest-service-fecru/admin/repositories/{repository}/permissions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the permissionsGroups operation.
     * @callback module:api/DefaultApi~permissionsGroupsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Note: use /rest-service-fecru/admin/repository-permissions/ endpoint for full repository permission administration functionality  Lists groups allowed to access repository.
     * @param {String} repository the key of the repository
     * @param {module:api/DefaultApi~permissionsGroupsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    permissionsGroups(repository, callback) {
      let postBody = null;
      // verify the required parameter 'repository' is set
      if (repository === undefined || repository === null) {
        throw new Error("Missing the required parameter 'repository' when calling permissionsGroups");
      }

      let pathParams = {
        'repository': repository
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest-service-fecru/admin/repositories/{repository}/permissions/groups', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the rebuildSearchIndex operation.
     * @callback module:api/DefaultApi~rebuildSearchIndexCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Rebuilds the search index data for the given repository. This will rebuild the data used to search by path,  commit message and comitter, also used for activity streams and JIRA integration.
     * @param {String} repository the key of the repository to re-index.
     * @param {module:api/DefaultApi~rebuildSearchIndexCallback} callback The callback function, accepting three arguments: error, data, response
     */
    rebuildSearchIndex(repository, callback) {
      let postBody = null;
      // verify the required parameter 'repository' is set
      if (repository === undefined || repository === null) {
        throw new Error("Missing the required parameter 'repository' when calling rebuildSearchIndex");
      }

      let pathParams = {
        'repository': repository
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest-service-fecru/admin/repositories-v1/{repository}/reindex-search', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the reindexChangesetComments operation.
     * @callback module:api/DefaultApi~reindexChangesetCommentsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Rebuilds the changeset discussion index for the specified repository. The index is used to display changeset  discussions in activity streams.
     * @param {String} repository the key of the repository to perform the operation for
     * @param {module:api/DefaultApi~reindexChangesetCommentsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    reindexChangesetComments(repository, callback) {
      let postBody = null;
      // verify the required parameter 'repository' is set
      if (repository === undefined || repository === null) {
        throw new Error("Missing the required parameter 'repository' when calling reindexChangesetComments");
      }

      let pathParams = {
        'repository': repository
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest-service-fecru/admin/repositories-v1/{repository}/reindex-discussions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the reindexChangesetDiscussion operation.
     * @callback module:api/DefaultApi~reindexChangesetDiscussionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Rebuilds the changeset discussion index for the specified repository. The index is used to display changeset  discussions in activity streams.
     * @param {String} repository the key of the repository to perform the operation for
     * @param {module:api/DefaultApi~reindexChangesetDiscussionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    reindexChangesetDiscussion(repository, callback) {
      let postBody = null;
      // verify the required parameter 'repository' is set
      if (repository === undefined || repository === null) {
        throw new Error("Missing the required parameter 'repository' when calling reindexChangesetDiscussion");
      }

      let pathParams = {
        'repository': repository
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest-service-fecru/admin/repositories/{repository}/reindex-changeset-discussion', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the reindexReviews operation.
     * @callback module:api/DefaultApi~reindexReviewsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Re-indexes all the Crucible revision data (which revisions have been reviewed)
     * @param {String} repository the key of the repository to reindex
     * @param {module:api/DefaultApi~reindexReviewsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    reindexReviews(repository, callback) {
      let postBody = null;
      // verify the required parameter 'repository' is set
      if (repository === undefined || repository === null) {
        throw new Error("Missing the required parameter 'repository' when calling reindexReviews");
      }

      let pathParams = {
        'repository': repository
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest-service-fecru/admin/repositories/{repository}/reindex-reviews', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the reindexSearch operation.
     * @callback module:api/DefaultApi~reindexSearchCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Rebuilds the search index data for the given repository. This will rebuild the data used to search by path,  commit message and committer, also used for activity streams and JIRA integration.
     * @param {String} repository the key of the repository to re-index.
     * @param {module:api/DefaultApi~reindexSearchCallback} callback The callback function, accepting three arguments: error, data, response
     */
    reindexSearch(repository, callback) {
      let postBody = null;
      // verify the required parameter 'repository' is set
      if (repository === undefined || repository === null) {
        throw new Error("Missing the required parameter 'repository' when calling reindexSearch");
      }

      let pathParams = {
        'repository': repository
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest-service-fecru/admin/repositories/{repository}/reindex-search', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the removeGroupToPermissions operation.
     * @callback module:api/DefaultApi~removeGroupToPermissionsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete group from repository allowed groups
     * @param {String} repository the key of the repository
     * @param {module:api/DefaultApi~removeGroupToPermissionsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    removeGroupToPermissions(repository, callback) {
      let postBody = null;
      // verify the required parameter 'repository' is set
      if (repository === undefined || repository === null) {
        throw new Error("Missing the required parameter 'repository' when calling removeGroupToPermissions");
      }

      let pathParams = {
        'repository': repository
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest-service-fecru/admin/repositories/{repository}/permissions/groups', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the repositoryUpdates operation.
     * @callback module:api/DefaultApi~repositoryUpdatesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves repository updates properties.
     * @param {String} repository repository key
     * @param {module:api/DefaultApi~repositoryUpdatesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    repositoryUpdates(repository, callback) {
      let postBody = null;
      // verify the required parameter 'repository' is set
      if (repository === undefined || repository === null) {
        throw new Error("Missing the required parameter 'repository' when calling repositoryUpdates");
      }

      let pathParams = {
        'repository': repository
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest-service-fecru/admin/repositories/{repository}/updates', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the restServiceFecruAdminGroupsGet operation.
     * @callback module:api/DefaultApi~restServiceFecruAdminGroupsGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a page of groups.
     * @param {Object} opts Optional parameters
     * @param {String} [prefix] filter groups by name prefix
     * @param {module:api/DefaultApi~restServiceFecruAdminGroupsGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    restServiceFecruAdminGroupsGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'prefix': opts['prefix']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest-service-fecru/admin/groups/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the restServiceFecruAdminGroupsNameDelete operation.
     * @callback module:api/DefaultApi~restServiceFecruAdminGroupsNameDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a group by name
     * @param {String} name group name
     * @param {module:api/DefaultApi~restServiceFecruAdminGroupsNameDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    restServiceFecruAdminGroupsNameDelete(name, callback) {
      let postBody = null;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling restServiceFecruAdminGroupsNameDelete");
      }

      let pathParams = {
        'name': name
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest-service-fecru/admin/groups/{name}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the restServiceFecruAdminGroupsNameGet operation.
     * @callback module:api/DefaultApi~restServiceFecruAdminGroupsNameGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a group by name.
     * @param {String} name group name
     * @param {module:api/DefaultApi~restServiceFecruAdminGroupsNameGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    restServiceFecruAdminGroupsNameGet(name, callback) {
      let postBody = null;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling restServiceFecruAdminGroupsNameGet");
      }

      let pathParams = {
        'name': name
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest-service-fecru/admin/groups/{name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the restServiceFecruAdminGroupsNamePut operation.
     * @callback module:api/DefaultApi~restServiceFecruAdminGroupsNamePutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates an existing group.
     * @param {String} name group name
     * @param {module:api/DefaultApi~restServiceFecruAdminGroupsNamePutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    restServiceFecruAdminGroupsNamePut(name, callback) {
      let postBody = null;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling restServiceFecruAdminGroupsNamePut");
      }

      let pathParams = {
        'name': name
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest-service-fecru/admin/groups/{name}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the restServiceFecruAdminGroupsNameUsersDelete operation.
     * @callback module:api/DefaultApi~restServiceFecruAdminGroupsNameUsersDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes user from group
     * @param {String} name group name
     * @param {module:api/DefaultApi~restServiceFecruAdminGroupsNameUsersDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    restServiceFecruAdminGroupsNameUsersDelete(name, callback) {
      let postBody = null;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling restServiceFecruAdminGroupsNameUsersDelete");
      }

      let pathParams = {
        'name': name
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest-service-fecru/admin/groups/{name}/users', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the restServiceFecruAdminGroupsNameUsersPut operation.
     * @callback module:api/DefaultApi~restServiceFecruAdminGroupsNameUsersPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds user to group
     * @param {String} name group name
     * @param {module:api/DefaultApi~restServiceFecruAdminGroupsNameUsersPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    restServiceFecruAdminGroupsNameUsersPut(name, callback) {
      let postBody = null;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling restServiceFecruAdminGroupsNameUsersPut");
      }

      let pathParams = {
        'name': name
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest-service-fecru/admin/groups/{name}/users', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the restServiceFecruAdminGroupsPost operation.
     * @callback module:api/DefaultApi~restServiceFecruAdminGroupsPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new user group.
     * @param {module:api/DefaultApi~restServiceFecruAdminGroupsPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    restServiceFecruAdminGroupsPost(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest-service-fecru/admin/groups/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the restServiceFecruAdminPermissionSchemesGet operation.
     * @callback module:api/DefaultApi~restServiceFecruAdminPermissionSchemesGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a page of permission schemes.
     * @param {Object} opts Optional parameters
     * @param {String} [name] permission scheme name part filter, case insensitive, optional
     * @param {module:api/DefaultApi~restServiceFecruAdminPermissionSchemesGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    restServiceFecruAdminPermissionSchemesGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'name': opts['name']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest-service-fecru/admin/permission-schemes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the restServiceFecruAdminPermissionSchemesNameDelete operation.
     * @callback module:api/DefaultApi~restServiceFecruAdminPermissionSchemesNameDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a permission scheme by name
     * @param {String} name permission scheme name
     * @param {module:api/DefaultApi~restServiceFecruAdminPermissionSchemesNameDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    restServiceFecruAdminPermissionSchemesNameDelete(name, callback) {
      let postBody = null;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling restServiceFecruAdminPermissionSchemesNameDelete");
      }

      let pathParams = {
        'name': name
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest-service-fecru/admin/permission-schemes/{name}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the restServiceFecruAdminPermissionSchemesNameGet operation.
     * @callback module:api/DefaultApi~restServiceFecruAdminPermissionSchemesNameGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a permission scheme by name
     * @param {String} name permission scheme name
     * @param {module:api/DefaultApi~restServiceFecruAdminPermissionSchemesNameGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    restServiceFecruAdminPermissionSchemesNameGet(name, callback) {
      let postBody = null;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling restServiceFecruAdminPermissionSchemesNameGet");
      }

      let pathParams = {
        'name': name
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest-service-fecru/admin/permission-schemes/{name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the restServiceFecruAdminPermissionSchemesNamePut operation.
     * @callback module:api/DefaultApi~restServiceFecruAdminPermissionSchemesNamePutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates an existing permission scheme.
     * @param {String} name permission scheme name
     * @param {module:api/DefaultApi~restServiceFecruAdminPermissionSchemesNamePutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    restServiceFecruAdminPermissionSchemesNamePut(name, callback) {
      let postBody = null;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling restServiceFecruAdminPermissionSchemesNamePut");
      }

      let pathParams = {
        'name': name
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest-service-fecru/admin/permission-schemes/{name}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the restServiceFecruAdminPermissionSchemesPost operation.
     * @callback module:api/DefaultApi~restServiceFecruAdminPermissionSchemesPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new permission scheme. The new permission scheme is blank or can be created from another existing permission scheme.
     * @param {Object} opts Optional parameters
     * @param {String} [copyFrom] if set, the new permission scheme will be a copy of permissionSchemeName
     * @param {module:api/DefaultApi~restServiceFecruAdminPermissionSchemesPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    restServiceFecruAdminPermissionSchemesPost(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'copyFrom': opts['copyFrom']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest-service-fecru/admin/permission-schemes', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the restServiceFecruAdminProjectsGet operation.
     * @callback module:api/DefaultApi~restServiceFecruAdminProjectsGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a page of projects.
     * @param {Object} opts Optional parameters
     * @param {String} [name] project's name part filter, optional
     * @param {String} [key] project's key part filter, optional
     * @param {String} [defaultRepositoryName] project's default repository key part filter, optional
     * @param {String} [permissionSchemeName] project's permission scheme pare name filter, optional
     * @param {module:api/DefaultApi~restServiceFecruAdminProjectsGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    restServiceFecruAdminProjectsGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'name': opts['name'],
        'key': opts['key'],
        'defaultRepositoryName': opts['defaultRepositoryName'],
        'permissionSchemeName': opts['permissionSchemeName']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest-service-fecru/admin/projects', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the restServiceFecruAdminProjectsKeyDelete operation.
     * @callback module:api/DefaultApi~restServiceFecruAdminProjectsKeyDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a project by key (including all reviews in this project).  Use   to move reviews to another project.
     * @param {String} key project key
     * @param {Object} opts Optional parameters
     * @param {Boolean} [deleteProjectReviews = false)] if true deletes reviews in project
     * @param {module:api/DefaultApi~restServiceFecruAdminProjectsKeyDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    restServiceFecruAdminProjectsKeyDelete(key, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling restServiceFecruAdminProjectsKeyDelete");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
        'deleteProjectReviews': opts['deleteProjectReviews']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest-service-fecru/admin/projects/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the restServiceFecruAdminProjectsKeyGet operation.
     * @callback module:api/DefaultApi~restServiceFecruAdminProjectsKeyGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a project by key.
     * @param {String} key project key
     * @param {module:api/DefaultApi~restServiceFecruAdminProjectsKeyGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    restServiceFecruAdminProjectsKeyGet(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling restServiceFecruAdminProjectsKeyGet");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest-service-fecru/admin/projects/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the restServiceFecruAdminProjectsKeyPut operation.
     * @callback module:api/DefaultApi~restServiceFecruAdminProjectsKeyPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates an existing project.
     * @param {String} key project key
     * @param {module:api/DefaultApi~restServiceFecruAdminProjectsKeyPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    restServiceFecruAdminProjectsKeyPut(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling restServiceFecruAdminProjectsKeyPut");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest-service-fecru/admin/projects/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the restServiceFecruAdminProjectsPost operation.
     * @callback module:api/DefaultApi~restServiceFecruAdminProjectsPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new project.
     * @param {module:api/DefaultApi~restServiceFecruAdminProjectsPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    restServiceFecruAdminProjectsPost(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest-service-fecru/admin/projects', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the restServiceFecruAdminRepositoriesGet operation.
     * @callback module:api/DefaultApi~restServiceFecruAdminRepositoriesGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a page of repositories. Repository properties with default values may not be returned.
     * @param {Object} opts Optional parameters
     * @param {String} [type] filter repositories by repository type: svn, git, hg, cvs, p4, ...
     * @param {Boolean} [enabled] filter repositories by enabled flag
     * @param {Boolean} [started] filter repositories by started flag
     * @param {module:api/DefaultApi~restServiceFecruAdminRepositoriesGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    restServiceFecruAdminRepositoriesGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'type': opts['type'],
        'enabled': opts['enabled'],
        'started': opts['started']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest-service-fecru/admin/repositories', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the restServiceFecruAdminRepositoriesPost operation.
     * @callback module:api/DefaultApi~restServiceFecruAdminRepositoriesPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a repository.
     * @param {module:api/DefaultApi~restServiceFecruAdminRepositoriesPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    restServiceFecruAdminRepositoriesPost(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest-service-fecru/admin/repositories', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the restServiceFecruAdminRepositoriesRepositoryDelete operation.
     * @callback module:api/DefaultApi~restServiceFecruAdminRepositoriesRepositoryDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a repository by key
     * @param {String} repository the key of the repository
     * @param {module:api/DefaultApi~restServiceFecruAdminRepositoriesRepositoryDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    restServiceFecruAdminRepositoriesRepositoryDelete(repository, callback) {
      let postBody = null;
      // verify the required parameter 'repository' is set
      if (repository === undefined || repository === null) {
        throw new Error("Missing the required parameter 'repository' when calling restServiceFecruAdminRepositoriesRepositoryDelete");
      }

      let pathParams = {
        'repository': repository
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest-service-fecru/admin/repositories/{repository}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the restServiceFecruAdminRepositoriesRepositoryGet operation.
     * @callback module:api/DefaultApi~restServiceFecruAdminRepositoriesRepositoryGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a repository by key. Repository properties with default values may not be returned.
     * @param {String} repository the key of the repository
     * @param {module:api/DefaultApi~restServiceFecruAdminRepositoriesRepositoryGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    restServiceFecruAdminRepositoriesRepositoryGet(repository, callback) {
      let postBody = null;
      // verify the required parameter 'repository' is set
      if (repository === undefined || repository === null) {
        throw new Error("Missing the required parameter 'repository' when calling restServiceFecruAdminRepositoriesRepositoryGet");
      }

      let pathParams = {
        'repository': repository
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest-service-fecru/admin/repositories/{repository}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the restServiceFecruAdminRepositoriesRepositoryPut operation.
     * @callback module:api/DefaultApi~restServiceFecruAdminRepositoriesRepositoryPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates an existing repository.
     * @param {String} repository the key of the repository
     * @param {module:api/DefaultApi~restServiceFecruAdminRepositoriesRepositoryPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    restServiceFecruAdminRepositoriesRepositoryPut(repository, callback) {
      let postBody = null;
      // verify the required parameter 'repository' is set
      if (repository === undefined || repository === null) {
        throw new Error("Missing the required parameter 'repository' when calling restServiceFecruAdminRepositoriesRepositoryPut");
      }

      let pathParams = {
        'repository': repository
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest-service-fecru/admin/repositories/{repository}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the restServiceFecruAdminRepositoriesRepositoryReindexLinecountPut operation.
     * @callback module:api/DefaultApi~restServiceFecruAdminRepositoriesRepositoryReindexLinecountPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Re-indexes the linecount data used to generate the LOC graphs. The linecount data will be recalculated in daily  buckets based on the server timezone.
     * @param {String} repository the key of the repository to re-index
     * @param {module:api/DefaultApi~restServiceFecruAdminRepositoriesRepositoryReindexLinecountPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    restServiceFecruAdminRepositoriesRepositoryReindexLinecountPut(repository, callback) {
      let postBody = null;
      // verify the required parameter 'repository' is set
      if (repository === undefined || repository === null) {
        throw new Error("Missing the required parameter 'repository' when calling restServiceFecruAdminRepositoriesRepositoryReindexLinecountPut");
      }

      let pathParams = {
        'repository': repository
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest-service-fecru/admin/repositories/{repository}/reindex-linecount', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the restServiceFecruAdminRepositoriesRepositoryReindexSourcePut operation.
     * @callback module:api/DefaultApi~restServiceFecruAdminRepositoriesRepositoryReindexSourcePutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes the existing cache and re-indexes the repository from scratch.  For large or slow repositories this may take some time, during which some functionality will be unavailable.  This action will also restart the repository.
     * @param {String} repository the key of the repository to reindex
     * @param {Object} opts Optional parameters
     * @param {Boolean} [clone = false)] if true and the repository is a dvcs repository (git or mercurial) it will re-clone the repository before re-indexing
     * @param {module:api/DefaultApi~restServiceFecruAdminRepositoriesRepositoryReindexSourcePutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    restServiceFecruAdminRepositoriesRepositoryReindexSourcePut(repository, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'repository' is set
      if (repository === undefined || repository === null) {
        throw new Error("Missing the required parameter 'repository' when calling restServiceFecruAdminRepositoriesRepositoryReindexSourcePut");
      }

      let pathParams = {
        'repository': repository
      };
      let queryParams = {
        'clone': opts['clone']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest-service-fecru/admin/repositories/{repository}/reindex-source', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the restServiceFecruAdminRepositoriesRepositoryRescanMetadataPut operation.
     * @callback module:api/DefaultApi~restServiceFecruAdminRepositoriesRepositoryRescanMetadataPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Re-scans the repository metadata. Only valid for Perforce and SVN repositories.
     * @param {String} repository the key of the repository to re-scan
     * @param {Object} opts Optional parameters
     * @param {String} [from] the revision number to start at
     * @param {String} [to] the revision number to end at
     * @param {module:api/DefaultApi~restServiceFecruAdminRepositoriesRepositoryRescanMetadataPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    restServiceFecruAdminRepositoriesRepositoryRescanMetadataPut(repository, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'repository' is set
      if (repository === undefined || repository === null) {
        throw new Error("Missing the required parameter 'repository' when calling restServiceFecruAdminRepositoriesRepositoryRescanMetadataPut");
      }

      let pathParams = {
        'repository': repository
      };
      let queryParams = {
        'from': opts['from'],
        'to': opts['to']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest-service-fecru/admin/repositories/{repository}/rescan-metadata', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the restServiceFecruAdminRepositoriesV1RepositoryGet operation.
     * @callback module:api/DefaultApi~restServiceFecruAdminRepositoriesV1RepositoryGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns information about the status of the repository and the current indexing status
     * @param {String} repository the key of the repository
     * @param {module:api/DefaultApi~restServiceFecruAdminRepositoriesV1RepositoryGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    restServiceFecruAdminRepositoriesV1RepositoryGet(repository, callback) {
      let postBody = null;
      // verify the required parameter 'repository' is set
      if (repository === undefined || repository === null) {
        throw new Error("Missing the required parameter 'repository' when calling restServiceFecruAdminRepositoriesV1RepositoryGet");
      }

      let pathParams = {
        'repository': repository
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest-service-fecru/admin/repositories-v1/{repository}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the restServiceFecruAdminRepositoriesV1RepositoryReindexLinecountPost operation.
     * @callback module:api/DefaultApi~restServiceFecruAdminRepositoriesV1RepositoryReindexLinecountPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Re-indexes the linecount data used to generate the LOC graphs. The linecount data will be recalculated in daily  buckets based on the server timezone.
     * @param {String} repository the key of the repository to re-index
     * @param {module:api/DefaultApi~restServiceFecruAdminRepositoriesV1RepositoryReindexLinecountPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    restServiceFecruAdminRepositoriesV1RepositoryReindexLinecountPost(repository, callback) {
      let postBody = null;
      // verify the required parameter 'repository' is set
      if (repository === undefined || repository === null) {
        throw new Error("Missing the required parameter 'repository' when calling restServiceFecruAdminRepositoriesV1RepositoryReindexLinecountPost");
      }

      let pathParams = {
        'repository': repository
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest-service-fecru/admin/repositories-v1/{repository}/reindex-linecount', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the restServiceFecruAdminRepositoriesV1RepositoryReindexSourcePost operation.
     * @callback module:api/DefaultApi~restServiceFecruAdminRepositoriesV1RepositoryReindexSourcePostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes the existing cache and re-indexes the repository from scratch.  For large or slow repositories this may take some time, during which some functionality will be unavailable.  This action will also restart the repository.
     * @param {String} repository the key of the repository to reindex
     * @param {Object} opts Optional parameters
     * @param {Boolean} [clone = false)] if true and the repository is a dvcs repository (git or mercurial) it will re-clone the repository  before re-indexing
     * @param {module:api/DefaultApi~restServiceFecruAdminRepositoriesV1RepositoryReindexSourcePostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    restServiceFecruAdminRepositoriesV1RepositoryReindexSourcePost(repository, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'repository' is set
      if (repository === undefined || repository === null) {
        throw new Error("Missing the required parameter 'repository' when calling restServiceFecruAdminRepositoriesV1RepositoryReindexSourcePost");
      }

      let pathParams = {
        'repository': repository
      };
      let queryParams = {
        'clone': opts['clone']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest-service-fecru/admin/repositories-v1/{repository}/reindex-source', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the restServiceFecruAdminRepositoriesV1RepositoryRescanMetadataPost operation.
     * @callback module:api/DefaultApi~restServiceFecruAdminRepositoriesV1RepositoryRescanMetadataPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Re-scans the repository metadata for SVN and Perforce repositories. Only valid for Perforce and SVN repositories.
     * @param {String} repository the key of the repository to re-scan
     * @param {Object} opts Optional parameters
     * @param {Number} [from] the revision number to start at
     * @param {Number} [to] the revision number to end at
     * @param {module:api/DefaultApi~restServiceFecruAdminRepositoriesV1RepositoryRescanMetadataPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    restServiceFecruAdminRepositoriesV1RepositoryRescanMetadataPost(repository, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'repository' is set
      if (repository === undefined || repository === null) {
        throw new Error("Missing the required parameter 'repository' when calling restServiceFecruAdminRepositoriesV1RepositoryRescanMetadataPost");
      }

      let pathParams = {
        'repository': repository
      };
      let queryParams = {
        'from': opts['from'],
        'to': opts['to']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest-service-fecru/admin/repositories-v1/{repository}/rescan-metadata', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the restServiceFecruAdminUsersGet operation.
     * @callback module:api/DefaultApi~restServiceFecruAdminUsersGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a page of users.
     * @param {module:api/DefaultApi~restServiceFecruAdminUsersGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    restServiceFecruAdminUsersGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest-service-fecru/admin/users/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the restServiceFecruAdminUsersNameDelete operation.
     * @callback module:api/DefaultApi~restServiceFecruAdminUsersNameDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a user by name
     * @param {String} name user name
     * @param {module:api/DefaultApi~restServiceFecruAdminUsersNameDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    restServiceFecruAdminUsersNameDelete(name, callback) {
      let postBody = null;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling restServiceFecruAdminUsersNameDelete");
      }

      let pathParams = {
        'name': name
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest-service-fecru/admin/users/{name}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the restServiceFecruAdminUsersNameGet operation.
     * @callback module:api/DefaultApi~restServiceFecruAdminUsersNameGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a user by name.
     * @param {String} name user name
     * @param {module:api/DefaultApi~restServiceFecruAdminUsersNameGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    restServiceFecruAdminUsersNameGet(name, callback) {
      let postBody = null;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling restServiceFecruAdminUsersNameGet");
      }

      let pathParams = {
        'name': name
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest-service-fecru/admin/users/{name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the restServiceFecruAdminUsersNameGroupsDelete operation.
     * @callback module:api/DefaultApi~restServiceFecruAdminUsersNameGroupsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Removes user from group
     * @param {String} name user name
     * @param {module:api/DefaultApi~restServiceFecruAdminUsersNameGroupsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    restServiceFecruAdminUsersNameGroupsDelete(name, callback) {
      let postBody = null;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling restServiceFecruAdminUsersNameGroupsDelete");
      }

      let pathParams = {
        'name': name
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest-service-fecru/admin/users/{name}/groups', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the restServiceFecruAdminUsersNameGroupsPut operation.
     * @callback module:api/DefaultApi~restServiceFecruAdminUsersNameGroupsPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds user to group
     * @param {String} name user name
     * @param {module:api/DefaultApi~restServiceFecruAdminUsersNameGroupsPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    restServiceFecruAdminUsersNameGroupsPut(name, callback) {
      let postBody = null;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling restServiceFecruAdminUsersNameGroupsPut");
      }

      let pathParams = {
        'name': name
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest-service-fecru/admin/users/{name}/groups', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the restServiceFecruAdminUsersNamePut operation.
     * @callback module:api/DefaultApi~restServiceFecruAdminUsersNamePutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates an existing user.
     * @param {String} name user name
     * @param {module:api/DefaultApi~restServiceFecruAdminUsersNamePutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    restServiceFecruAdminUsersNamePut(name, callback) {
      let postBody = null;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling restServiceFecruAdminUsersNamePut");
      }

      let pathParams = {
        'name': name
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest-service-fecru/admin/users/{name}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the restServiceFecruAdminUsersPost operation.
     * @callback module:api/DefaultApi~restServiceFecruAdminUsersPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new user. Tries to add the user to fisheye-users and crucible-users groups if those exist.
     * @param {module:api/DefaultApi~restServiceFecruAdminUsersPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    restServiceFecruAdminUsersPost(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest-service-fecru/admin/users/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the restServiceFecruIndexingStatusV1StatusRepositoryGet operation.
     * @callback module:api/DefaultApi~restServiceFecruIndexingStatusV1StatusRepositoryGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns indexing status of given repository.
     * @param {String} repository the key of the repository to get status of
     * @param {module:api/DefaultApi~restServiceFecruIndexingStatusV1StatusRepositoryGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    restServiceFecruIndexingStatusV1StatusRepositoryGet(repository, callback) {
      let postBody = null;
      // verify the required parameter 'repository' is set
      if (repository === undefined || repository === null) {
        throw new Error("Missing the required parameter 'repository' when calling restServiceFecruIndexingStatusV1StatusRepositoryGet");
      }

      let pathParams = {
        'repository': repository
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest-service-fecru/indexing-status-v1/status/{repository}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the scan operation.
     * @callback module:api/DefaultApi~scanCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Runs an incremental repository index now.  This is the same operation as triggered by scheduled indexing.  Can be called using the REST Api Token to authorize.
     * @param {String} repository the key of the repository to run scan for
     * @param {Object} opts Optional parameters
     * @param {Boolean} [synchronous = false)] if true will wait for the indexing to finish before returning
     * @param {module:api/DefaultApi~scanCallback} callback The callback function, accepting three arguments: error, data, response
     */
    scan(repository, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'repository' is set
      if (repository === undefined || repository === null) {
        throw new Error("Missing the required parameter 'repository' when calling scan");
      }

      let pathParams = {
        'repository': repository
      };
      let queryParams = {
        'synchronous': opts['synchronous']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest-service-fecru/admin/repositories-v1/{repository}/scan', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the scanCvs operation.
     * @callback module:api/DefaultApi~scanCvsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Scans the whole CVS repository for any changes since the last scan. Only valid for CVS repositories.
     * @param {String} repository the key of the repository to scan
     * @param {module:api/DefaultApi~scanCvsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    scanCvs(repository, callback) {
      let postBody = null;
      // verify the required parameter 'repository' is set
      if (repository === undefined || repository === null) {
        throw new Error("Missing the required parameter 'repository' when calling scanCvs");
      }

      let pathParams = {
        'repository': repository
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest-service-fecru/admin/repositories-v1/{repository}/scan-cvs', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the setPref operation.
     * @callback module:api/DefaultApi~setPrefCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Using POST method to set a user preference.  If repo is not set, the preference will be recognised as a global preference.
     * @param {module:api/DefaultApi~setPrefCallback} callback The callback function, accepting three arguments: error, data, response
     */
    setPref(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest-service-fecru/user-prefs-v1', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the start operation.
     * @callback module:api/DefaultApi~startCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Starts repository. Does not wait for the repository to start before returning.
     * @param {String} repository the key of the repository to start
     * @param {module:api/DefaultApi~startCallback} callback The callback function, accepting three arguments: error, data, response
     */
    start(repository, callback) {
      let postBody = null;
      // verify the required parameter 'repository' is set
      if (repository === undefined || repository === null) {
        throw new Error("Missing the required parameter 'repository' when calling start");
      }

      let pathParams = {
        'repository': repository
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest-service-fecru/admin/repositories/{repository}/start', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the startRepository operation.
     * @callback module:api/DefaultApi~startRepositoryCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Starts the repository.
     * @param {String} repository the key of the repository to start
     * @param {module:api/DefaultApi~startRepositoryCallback} callback The callback function, accepting three arguments: error, data, response
     */
    startRepository(repository, callback) {
      let postBody = null;
      // verify the required parameter 'repository' is set
      if (repository === undefined || repository === null) {
        throw new Error("Missing the required parameter 'repository' when calling startRepository");
      }

      let pathParams = {
        'repository': repository
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest-service-fecru/admin/repositories-v1/{repository}/start', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the stop operation.
     * @callback module:api/DefaultApi~stopCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Stops repository. Does not wait for the repository to stop before returning.
     * @param {String} repository the key of the repository to stop
     * @param {module:api/DefaultApi~stopCallback} callback The callback function, accepting three arguments: error, data, response
     */
    stop(repository, callback) {
      let postBody = null;
      // verify the required parameter 'repository' is set
      if (repository === undefined || repository === null) {
        throw new Error("Missing the required parameter 'repository' when calling stop");
      }

      let pathParams = {
        'repository': repository
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest-service-fecru/admin/repositories/{repository}/stop', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the stopRepository operation.
     * @callback module:api/DefaultApi~stopRepositoryCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Stops the repository. Does not wait for the repository to stop before returning.
     * @param {String} repository the key of the repository to stop
     * @param {module:api/DefaultApi~stopRepositoryCallback} callback The callback function, accepting three arguments: error, data, response
     */
    stopRepository(repository, callback) {
      let postBody = null;
      // verify the required parameter 'repository' is set
      if (repository === undefined || repository === null) {
        throw new Error("Missing the required parameter 'repository' when calling stopRepository");
      }

      let pathParams = {
        'repository': repository
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest-service-fecru/admin/repositories-v1/{repository}/stop', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateDefaultPermissions operation.
     * @callback module:api/DefaultApi~updateDefaultPermissionsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates default repository permissions properties.   Valid permission settings: any combination of allowAnonymous, allowLoggedIn
     * @param {module:api/DefaultApi~updateDefaultPermissionsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateDefaultPermissions(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest-service-fecru/admin/repositories/~defaults/permissions', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updatePermissions operation.
     * @callback module:api/DefaultApi~updatePermissionsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates repository permissions properties.   Valid permission settings: any combination of useDefaults, allowAnonymous, allowLoggedIn.
     * @param {String} repository the key of the repository
     * @param {module:api/DefaultApi~updatePermissionsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updatePermissions(repository, callback) {
      let postBody = null;
      // verify the required parameter 'repository' is set
      if (repository === undefined || repository === null) {
        throw new Error("Missing the required parameter 'repository' when calling updatePermissions");
      }

      let pathParams = {
        'repository': repository
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest-service-fecru/admin/repositories/{repository}/permissions', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateRepositoryUpdates operation.
     * @callback module:api/DefaultApi~updateRepositoryUpdatesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} repository repository key
     * @param {module:api/DefaultApi~updateRepositoryUpdatesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateRepositoryUpdates(repository, callback) {
      let postBody = null;
      // verify the required parameter 'repository' is set
      if (repository === undefined || repository === null) {
        throw new Error("Missing the required parameter 'repository' when calling updateRepositoryUpdates");
      }

      let pathParams = {
        'repository': repository
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/rest-service-fecru/admin/repositories/{repository}/updates', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
