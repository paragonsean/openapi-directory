/*
 * Fisheye Crucible
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Disabled
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    /**
     * Add group to project&#39;s allowed reviewer group list
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addAllowedReviewerGroupTest() throws ApiException {
        String key = null;
        api.addAllowedReviewerGroup(key);
        // TODO: test validations
    }

    /**
     * Add user to project&#39;s allowed reviewer users list
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addAllowedReviewerUserTest() throws ApiException {
        String key = null;
        api.addAllowedReviewerUser(key);
        // TODO: test validations
    }

    /**
     * Add group to project&#39;s default reviewer group list
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addDefaultReviewerGroupTest() throws ApiException {
        String key = null;
        api.addDefaultReviewerGroup(key);
        // TODO: test validations
    }

    /**
     * Add user to project&#39;s default reviewer users list
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addDefaultReviewerUserTest() throws ApiException {
        String key = null;
        api.addDefaultReviewerUser(key);
        // TODO: test validations
    }

    /**
     * Note: use /rest-service-fecru/admin/repository-permissions/ endpoint for full repository permission administration functionality  Adds group to repository allowed groups
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addGroupToPermissionsTest() throws ApiException {
        String repository = null;
        api.addGroupToPermissions(repository);
        // TODO: test validations
    }

    /**
     * Add anonymous-user permission [action name] to given permission scheme  List of available action names:
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addPermissionSchemeAnonymousUsersTest() throws ApiException {
        String name = null;
        api.addPermissionSchemeAnonymousUsers(name);
        // TODO: test validations
    }

    /**
     * Add group permission [group name, action name] to given permission scheme  List of available action names:
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addPermissionSchemeGroupTest() throws ApiException {
        String name = null;
        api.addPermissionSchemeGroup(name);
        // TODO: test validations
    }

    /**
     * Add logged-in-users permission [action name] to given permission scheme  List of available action names:
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addPermissionSchemeLoggedUsersTest() throws ApiException {
        String name = null;
        api.addPermissionSchemeLoggedUsers(name);
        // TODO: test validations
    }

    /**
     * Add review-role permission [role name, action name] to given permission scheme  List of available action names:     List of available role names:
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addPermissionSchemeReviewRoleTest() throws ApiException {
        String name = null;
        api.addPermissionSchemeReviewRole(name);
        // TODO: test validations
    }

    /**
     * Add user permission [username, action name] to given permission scheme  List of available action names:
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addPermissionSchemeUserTest() throws ApiException {
        String name = null;
        api.addPermissionSchemeUser(name);
        // TODO: test validations
    }

    /**
     * Adds repository
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addRepositoryTest() throws ApiException {
        api.addRepository();
        // TODO: test validations
    }

    /**
     * Retrieves project&#39;s allowed reviewer groups
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void allowedReviewerGroupsTest() throws ApiException {
        String key = null;
        api.allowedReviewerGroups(key);
        // TODO: test validations
    }

    /**
     * Retrieves project&#39;s allowed reviewer users
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void allowedReviewerUsersTest() throws ApiException {
        String key = null;
        api.allowedReviewerUsers(key);
        // TODO: test validations
    }

    /**
     * Retrieve default repository permissions properties.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void defaultPermissionsTest() throws ApiException {
        api.defaultPermissions();
        // TODO: test validations
    }

    /**
     * Retrieves project&#39;s default reviewer groups
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void defaultReviewerGroupsTest() throws ApiException {
        String key = null;
        api.defaultReviewerGroups(key);
        // TODO: test validations
    }

    /**
     * Delete group from project&#39;s allowed reviewer group list
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteAllowedReviewerGroupTest() throws ApiException {
        String key = null;
        api.deleteAllowedReviewerGroup(key);
        // TODO: test validations
    }

    /**
     * Remove user from project&#39;s allowed reviewer users list
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteAllowedReviewerUserTest() throws ApiException {
        String key = null;
        api.deleteAllowedReviewerUser(key);
        // TODO: test validations
    }

    /**
     * Delete group from project&#39;s default reviewer group list
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteDefaultReviewerGroupTest() throws ApiException {
        String key = null;
        api.deleteDefaultReviewerGroup(key);
        // TODO: test validations
    }

    /**
     * Remove user from project&#39;s default reviewer users list
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteDefaultReviewerUserTest() throws ApiException {
        String key = null;
        api.deleteDefaultReviewerUser(key);
        // TODO: test validations
    }

    /**
     * Removes anonymous-user permission [action name] from given permission scheme
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deletePermissionSchemeAnonymousUsersTest() throws ApiException {
        String name = null;
        api.deletePermissionSchemeAnonymousUsers(name);
        // TODO: test validations
    }

    /**
     * Removes group permission [group name, action name] from given permission scheme
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deletePermissionSchemeGroupTest() throws ApiException {
        String name = null;
        api.deletePermissionSchemeGroup(name);
        // TODO: test validations
    }

    /**
     * Removes logged-in-users permission [action name] from given permission scheme
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deletePermissionSchemeLoggedUsersTest() throws ApiException {
        String name = null;
        api.deletePermissionSchemeLoggedUsers(name);
        // TODO: test validations
    }

    /**
     * Removes review-role permission [role name, action name] from given permission scheme
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deletePermissionSchemeRoleTest() throws ApiException {
        String name = null;
        api.deletePermissionSchemeRole(name);
        // TODO: test validations
    }

    /**
     * Removes user permission [username, action name] from given permission scheme
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deletePermissionSchemeUserTest() throws ApiException {
        String name = null;
        api.deletePermissionSchemeUser(name);
        // TODO: test validations
    }

    /**
     * Deletes repository.  Warning: you can not undo this operation
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteRepositoryTest() throws ApiException {
        String repository = null;
        api.deleteRepository(repository);
        // TODO: test validations
    }

    /**
     * Disables repository.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void disableRepositoryTest() throws ApiException {
        String repository = null;
        api.disableRepository(repository);
        // TODO: test validations
    }

    /**
     * Re-indexes all the Crucible revision data (which revisions have been reviewed)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void doReviewRevisionReindexTest() throws ApiException {
        String repository = null;
        Boolean synchronous = null;
        api.doReviewRevisionReindex(repository, synchronous);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void doShareContentTest() throws ApiException {
        api.doShareContent();
        // TODO: test validations
    }

    /**
     * Enables repository.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void enableRepositoryTest() throws ApiException {
        String repository = null;
        api.enableRepository(repository);
        // TODO: test validations
    }

    /**
     * Runs an full incremental repository index.  For CVS: scans the whole CVS repository for any changes since the last scan.  For other repository types will trigger an incremental index.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void fullIncrementalIndexTest() throws ApiException {
        String repository = null;
        api.fullIncrementalIndex(repository);
        // TODO: test validations
    }

    /**
     * Getting user&#39;s global preference
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getGlobalPrefTest() throws ApiException {
        String property = null;
        api.getGlobalPref(property);
        // TODO: test validations
    }

    /**
     * Provides general information about the server&#39;s configuration.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getInfoTest() throws ApiException {
        api.getInfo();
        // TODO: test validations
    }

    /**
     * Get a list of recently visited items for the currently logged in user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getRecentTest() throws ApiException {
        api.getRecent();
        // TODO: test validations
    }

    /**
     * Get a list of recently visisted items for the currently logged in user, including the detailed entities.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getRecentDetailedTest() throws ApiException {
        api.getRecentDetailed();
        // TODO: test validations
    }

    /**
     * Get a list of recently visited projects for the currently logged in user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getRecentProjectsTest() throws ApiException {
        api.getRecentProjects();
        // TODO: test validations
    }

    /**
     * Get a list of recently visited projects for the currently logged in Project, including the detailed entities.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getRecentProjectsDetailedTest() throws ApiException {
        api.getRecentProjectsDetailed();
        // TODO: test validations
    }

    /**
     * Get a list of recently visited repositories for the currently logged in user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getRecentRepositoriesTest() throws ApiException {
        api.getRecentRepositories();
        // TODO: test validations
    }

    /**
     * Get a list of recently visisted repositories for the currently logged in user, including the detailed entities.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getRecentRepositoriesDetailedTest() throws ApiException {
        api.getRecentRepositoriesDetailed();
        // TODO: test validations
    }

    /**
     * Get a list of recently visited reviews for the currently logged in user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getRecentReviewsTest() throws ApiException {
        api.getRecentReviews();
        // TODO: test validations
    }

    /**
     * Get a list of recently visited reviews for the currently logged in user, including the detailed entities.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getRecentReviewsDetailedTest() throws ApiException {
        api.getRecentReviewsDetailed();
        // TODO: test validations
    }

    /**
     * Get a list of recently visited snippets for the currently logged in user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getRecentSnippetsTest() throws ApiException {
        api.getRecentSnippets();
        // TODO: test validations
    }

    /**
     * Get a list of recently visited snippets for the currently logged in user, including the detailed entities.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getRecentSnippetsDetailedTest() throws ApiException {
        api.getRecentSnippetsDetailed();
        // TODO: test validations
    }

    /**
     * Get a list of recently visited users for the currently logged in user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getRecentUsersTest() throws ApiException {
        api.getRecentUsers();
        // TODO: test validations
    }

    /**
     * Get a list of recently visited users for the currently logged in user, including the detailed entities.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getRecentUsersDetailedTest() throws ApiException {
        api.getRecentUsersDetailed();
        // TODO: test validations
    }

    /**
     * Getting user&#39;s preference related to a certain repository
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getRepoPrefTest() throws ApiException {
        String property = null;
        String repository = null;
        api.getRepoPref(property, repository);
        // TODO: test validations
    }

    /**
     * Runs an incremental repository index.  This is the same operation as triggered by scheduled indexing.  Can be called using the REST API Token to authorize.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void incrementalIndexTest() throws ApiException {
        String repository = null;
        Boolean wait = null;
        api.incrementalIndex(repository, wait);
        // TODO: test validations
    }

    /**
     * Retrieve a page of anonymous users permissions [action name] for given permission scheme.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listAnonymousUsersPrincipalAssociationTest() throws ApiException {
        String name = null;
        String action = null;
        api.listAnonymousUsersPrincipalAssociation(name, action);
        // TODO: test validations
    }

    /**
     * Retrieves project&#39;s default reviewer users
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listDefaultReviewerUsersTest() throws ApiException {
        String key = null;
        api.listDefaultReviewerUsers(key);
        // TODO: test validations
    }

    /**
     * Retrieve a page of group permissions [group name, action name] for given permission scheme.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listGroupPrincipalAssociationTest() throws ApiException {
        String name = null;
        String name2 = null;
        String action = null;
        api.listGroupPrincipalAssociation(name, name2, action);
        // TODO: test validations
    }

    /**
     * Lists group&#39;s user names
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listGroupUsersTest() throws ApiException {
        String name = null;
        api.listGroupUsers(name);
        // TODO: test validations
    }

    /**
     * Retrieve a page of logged in users permissions [action name] for given permission scheme.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listLoggedUsersPrincipalAssociationTest() throws ApiException {
        String name = null;
        String action = null;
        api.listLoggedUsersPrincipalAssociation(name, action);
        // TODO: test validations
    }

    /**
     * Retrieve a page of projects for given permission scheme.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listProjectsTest() throws ApiException {
        String name = null;
        api.listProjects(name);
        // TODO: test validations
    }

    /**
     * Retrieve a page of review-roles permissions [role name, action name] for given permission scheme.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listRolesPrincipalAssociationTest() throws ApiException {
        String name = null;
        String name2 = null;
        String action = null;
        api.listRolesPrincipalAssociation(name, name2, action);
        // TODO: test validations
    }

    /**
     * Lists user&#39;s group names
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listUserGroupsTest() throws ApiException {
        String name = null;
        api.listUserGroups(name);
        // TODO: test validations
    }

    /**
     * Retrieve a page of user permissions [username, action name] for given permission scheme.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listUserPrincipalAssociationTest() throws ApiException {
        String name = null;
        String name2 = null;
        String action = null;
        api.listUserPrincipalAssociation(name, name2, action);
        // TODO: test validations
    }

    /**
     * Get the user authentication token.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void loginTest() throws ApiException {
        api.login();
        // TODO: test validations
    }

    /**
     * Move reviews and snippets from source project to destination project
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void moveAllReviewsTest() throws ApiException {
        String sourceProjectKey = null;
        String destinationProjectKey = null;
        api.moveAllReviews(sourceProjectKey, destinationProjectKey);
        // TODO: test validations
    }

    /**
     * Retrieve repository permissions properties.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void permissionsTest() throws ApiException {
        String repository = null;
        api.permissions(repository);
        // TODO: test validations
    }

    /**
     * Note: use /rest-service-fecru/admin/repository-permissions/ endpoint for full repository permission administration functionality  Lists groups allowed to access repository.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void permissionsGroupsTest() throws ApiException {
        String repository = null;
        api.permissionsGroups(repository);
        // TODO: test validations
    }

    /**
     * Rebuilds the search index data for the given repository. This will rebuild the data used to search by path,  commit message and comitter, also used for activity streams and JIRA integration.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void rebuildSearchIndexTest() throws ApiException {
        String repository = null;
        api.rebuildSearchIndex(repository);
        // TODO: test validations
    }

    /**
     * Rebuilds the changeset discussion index for the specified repository. The index is used to display changeset  discussions in activity streams.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void reindexChangesetCommentsTest() throws ApiException {
        String repository = null;
        api.reindexChangesetComments(repository);
        // TODO: test validations
    }

    /**
     * Rebuilds the changeset discussion index for the specified repository. The index is used to display changeset  discussions in activity streams.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void reindexChangesetDiscussionTest() throws ApiException {
        String repository = null;
        api.reindexChangesetDiscussion(repository);
        // TODO: test validations
    }

    /**
     * Re-indexes all the Crucible revision data (which revisions have been reviewed)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void reindexReviewsTest() throws ApiException {
        String repository = null;
        api.reindexReviews(repository);
        // TODO: test validations
    }

    /**
     * Rebuilds the search index data for the given repository. This will rebuild the data used to search by path,  commit message and committer, also used for activity streams and JIRA integration.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void reindexSearchTest() throws ApiException {
        String repository = null;
        api.reindexSearch(repository);
        // TODO: test validations
    }

    /**
     * Delete group from repository allowed groups
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void removeGroupToPermissionsTest() throws ApiException {
        String repository = null;
        api.removeGroupToPermissions(repository);
        // TODO: test validations
    }

    /**
     * Retrieves repository updates properties.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void repositoryUpdatesTest() throws ApiException {
        String repository = null;
        api.repositoryUpdates(repository);
        // TODO: test validations
    }

    /**
     * Retrieve a page of groups.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void restServiceFecruAdminGroupsGetTest() throws ApiException {
        String prefix = null;
        api.restServiceFecruAdminGroupsGet(prefix);
        // TODO: test validations
    }

    /**
     * Deletes a group by name
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void restServiceFecruAdminGroupsNameDeleteTest() throws ApiException {
        String name = null;
        api.restServiceFecruAdminGroupsNameDelete(name);
        // TODO: test validations
    }

    /**
     * Retrieve a group by name.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void restServiceFecruAdminGroupsNameGetTest() throws ApiException {
        String name = null;
        api.restServiceFecruAdminGroupsNameGet(name);
        // TODO: test validations
    }

    /**
     * Updates an existing group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void restServiceFecruAdminGroupsNamePutTest() throws ApiException {
        String name = null;
        api.restServiceFecruAdminGroupsNamePut(name);
        // TODO: test validations
    }

    /**
     * Removes user from group
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void restServiceFecruAdminGroupsNameUsersDeleteTest() throws ApiException {
        String name = null;
        api.restServiceFecruAdminGroupsNameUsersDelete(name);
        // TODO: test validations
    }

    /**
     * Adds user to group
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void restServiceFecruAdminGroupsNameUsersPutTest() throws ApiException {
        String name = null;
        api.restServiceFecruAdminGroupsNameUsersPut(name);
        // TODO: test validations
    }

    /**
     * Creates a new user group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void restServiceFecruAdminGroupsPostTest() throws ApiException {
        api.restServiceFecruAdminGroupsPost();
        // TODO: test validations
    }

    /**
     * Retrieve a page of permission schemes.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void restServiceFecruAdminPermissionSchemesGetTest() throws ApiException {
        String name = null;
        api.restServiceFecruAdminPermissionSchemesGet(name);
        // TODO: test validations
    }

    /**
     * Deletes a permission scheme by name
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void restServiceFecruAdminPermissionSchemesNameDeleteTest() throws ApiException {
        String name = null;
        api.restServiceFecruAdminPermissionSchemesNameDelete(name);
        // TODO: test validations
    }

    /**
     * Retrieve a permission scheme by name
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void restServiceFecruAdminPermissionSchemesNameGetTest() throws ApiException {
        String name = null;
        api.restServiceFecruAdminPermissionSchemesNameGet(name);
        // TODO: test validations
    }

    /**
     * Updates an existing permission scheme.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void restServiceFecruAdminPermissionSchemesNamePutTest() throws ApiException {
        String name = null;
        api.restServiceFecruAdminPermissionSchemesNamePut(name);
        // TODO: test validations
    }

    /**
     * Creates a new permission scheme. The new permission scheme is blank or can be created from another existing permission scheme.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void restServiceFecruAdminPermissionSchemesPostTest() throws ApiException {
        String copyFrom = null;
        api.restServiceFecruAdminPermissionSchemesPost(copyFrom);
        // TODO: test validations
    }

    /**
     * Retrieve a page of projects.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void restServiceFecruAdminProjectsGetTest() throws ApiException {
        String name = null;
        String key = null;
        String defaultRepositoryName = null;
        String permissionSchemeName = null;
        api.restServiceFecruAdminProjectsGet(name, key, defaultRepositoryName, permissionSchemeName);
        // TODO: test validations
    }

    /**
     * Deletes a project by key (including all reviews in this project).  Use   to move reviews to another project.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void restServiceFecruAdminProjectsKeyDeleteTest() throws ApiException {
        String key = null;
        Boolean deleteProjectReviews = null;
        api.restServiceFecruAdminProjectsKeyDelete(key, deleteProjectReviews);
        // TODO: test validations
    }

    /**
     * Retrieve a project by key.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void restServiceFecruAdminProjectsKeyGetTest() throws ApiException {
        String key = null;
        api.restServiceFecruAdminProjectsKeyGet(key);
        // TODO: test validations
    }

    /**
     * Updates an existing project.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void restServiceFecruAdminProjectsKeyPutTest() throws ApiException {
        String key = null;
        api.restServiceFecruAdminProjectsKeyPut(key);
        // TODO: test validations
    }

    /**
     * Creates a new project.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void restServiceFecruAdminProjectsPostTest() throws ApiException {
        api.restServiceFecruAdminProjectsPost();
        // TODO: test validations
    }

    /**
     * Retrieve a page of repositories. Repository properties with default values may not be returned.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void restServiceFecruAdminRepositoriesGetTest() throws ApiException {
        String type = null;
        Boolean enabled = null;
        Boolean started = null;
        api.restServiceFecruAdminRepositoriesGet(type, enabled, started);
        // TODO: test validations
    }

    /**
     * Creates a repository.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void restServiceFecruAdminRepositoriesPostTest() throws ApiException {
        api.restServiceFecruAdminRepositoriesPost();
        // TODO: test validations
    }

    /**
     * Deletes a repository by key
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void restServiceFecruAdminRepositoriesRepositoryDeleteTest() throws ApiException {
        String repository = null;
        api.restServiceFecruAdminRepositoriesRepositoryDelete(repository);
        // TODO: test validations
    }

    /**
     * Retrieve a repository by key. Repository properties with default values may not be returned.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void restServiceFecruAdminRepositoriesRepositoryGetTest() throws ApiException {
        String repository = null;
        api.restServiceFecruAdminRepositoriesRepositoryGet(repository);
        // TODO: test validations
    }

    /**
     * Updates an existing repository.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void restServiceFecruAdminRepositoriesRepositoryPutTest() throws ApiException {
        String repository = null;
        api.restServiceFecruAdminRepositoriesRepositoryPut(repository);
        // TODO: test validations
    }

    /**
     * Re-indexes the linecount data used to generate the LOC graphs. The linecount data will be recalculated in daily  buckets based on the server timezone.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void restServiceFecruAdminRepositoriesRepositoryReindexLinecountPutTest() throws ApiException {
        String repository = null;
        api.restServiceFecruAdminRepositoriesRepositoryReindexLinecountPut(repository);
        // TODO: test validations
    }

    /**
     * Deletes the existing cache and re-indexes the repository from scratch.  For large or slow repositories this may take some time, during which some functionality will be unavailable.  This action will also restart the repository.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void restServiceFecruAdminRepositoriesRepositoryReindexSourcePutTest() throws ApiException {
        String repository = null;
        Boolean clone = null;
        api.restServiceFecruAdminRepositoriesRepositoryReindexSourcePut(repository, clone);
        // TODO: test validations
    }

    /**
     * Re-scans the repository metadata. Only valid for Perforce and SVN repositories.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void restServiceFecruAdminRepositoriesRepositoryRescanMetadataPutTest() throws ApiException {
        String repository = null;
        String from = null;
        String to = null;
        api.restServiceFecruAdminRepositoriesRepositoryRescanMetadataPut(repository, from, to);
        // TODO: test validations
    }

    /**
     * Returns information about the status of the repository and the current indexing status
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void restServiceFecruAdminRepositoriesV1RepositoryGetTest() throws ApiException {
        String repository = null;
        api.restServiceFecruAdminRepositoriesV1RepositoryGet(repository);
        // TODO: test validations
    }

    /**
     * Re-indexes the linecount data used to generate the LOC graphs. The linecount data will be recalculated in daily  buckets based on the server timezone.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void restServiceFecruAdminRepositoriesV1RepositoryReindexLinecountPostTest() throws ApiException {
        String repository = null;
        api.restServiceFecruAdminRepositoriesV1RepositoryReindexLinecountPost(repository);
        // TODO: test validations
    }

    /**
     * Deletes the existing cache and re-indexes the repository from scratch.  For large or slow repositories this may take some time, during which some functionality will be unavailable.  This action will also restart the repository.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void restServiceFecruAdminRepositoriesV1RepositoryReindexSourcePostTest() throws ApiException {
        String repository = null;
        Boolean clone = null;
        api.restServiceFecruAdminRepositoriesV1RepositoryReindexSourcePost(repository, clone);
        // TODO: test validations
    }

    /**
     * Re-scans the repository metadata for SVN and Perforce repositories. Only valid for Perforce and SVN repositories.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void restServiceFecruAdminRepositoriesV1RepositoryRescanMetadataPostTest() throws ApiException {
        String repository = null;
        Long from = null;
        Long to = null;
        api.restServiceFecruAdminRepositoriesV1RepositoryRescanMetadataPost(repository, from, to);
        // TODO: test validations
    }

    /**
     * Retrieve a page of users.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void restServiceFecruAdminUsersGetTest() throws ApiException {
        api.restServiceFecruAdminUsersGet();
        // TODO: test validations
    }

    /**
     * Deletes a user by name
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void restServiceFecruAdminUsersNameDeleteTest() throws ApiException {
        String name = null;
        api.restServiceFecruAdminUsersNameDelete(name);
        // TODO: test validations
    }

    /**
     * Retrieve a user by name.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void restServiceFecruAdminUsersNameGetTest() throws ApiException {
        String name = null;
        api.restServiceFecruAdminUsersNameGet(name);
        // TODO: test validations
    }

    /**
     * Removes user from group
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void restServiceFecruAdminUsersNameGroupsDeleteTest() throws ApiException {
        String name = null;
        api.restServiceFecruAdminUsersNameGroupsDelete(name);
        // TODO: test validations
    }

    /**
     * Adds user to group
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void restServiceFecruAdminUsersNameGroupsPutTest() throws ApiException {
        String name = null;
        api.restServiceFecruAdminUsersNameGroupsPut(name);
        // TODO: test validations
    }

    /**
     * Updates an existing user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void restServiceFecruAdminUsersNamePutTest() throws ApiException {
        String name = null;
        api.restServiceFecruAdminUsersNamePut(name);
        // TODO: test validations
    }

    /**
     * Creates a new user. Tries to add the user to fisheye-users and crucible-users groups if those exist.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void restServiceFecruAdminUsersPostTest() throws ApiException {
        api.restServiceFecruAdminUsersPost();
        // TODO: test validations
    }

    /**
     * Returns indexing status of given repository.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void restServiceFecruIndexingStatusV1StatusRepositoryGetTest() throws ApiException {
        String repository = null;
        api.restServiceFecruIndexingStatusV1StatusRepositoryGet(repository);
        // TODO: test validations
    }

    /**
     * Runs an incremental repository index now.  This is the same operation as triggered by scheduled indexing.  Can be called using the REST Api Token to authorize.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void scanTest() throws ApiException {
        String repository = null;
        Boolean synchronous = null;
        api.scan(repository, synchronous);
        // TODO: test validations
    }

    /**
     * Scans the whole CVS repository for any changes since the last scan. Only valid for CVS repositories.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void scanCvsTest() throws ApiException {
        String repository = null;
        api.scanCvs(repository);
        // TODO: test validations
    }

    /**
     * Using POST method to set a user preference.  If repo is not set, the preference will be recognised as a global preference.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void setPrefTest() throws ApiException {
        api.setPref();
        // TODO: test validations
    }

    /**
     * Starts repository. Does not wait for the repository to start before returning.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void startTest() throws ApiException {
        String repository = null;
        api.start(repository);
        // TODO: test validations
    }

    /**
     * Starts the repository.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void startRepositoryTest() throws ApiException {
        String repository = null;
        api.startRepository(repository);
        // TODO: test validations
    }

    /**
     * Stops repository. Does not wait for the repository to stop before returning.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stopTest() throws ApiException {
        String repository = null;
        api.stop(repository);
        // TODO: test validations
    }

    /**
     * Stops the repository. Does not wait for the repository to stop before returning.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void stopRepositoryTest() throws ApiException {
        String repository = null;
        api.stopRepository(repository);
        // TODO: test validations
    }

    /**
     * Updates default repository permissions properties.   Valid permission settings: any combination of allowAnonymous, allowLoggedIn
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateDefaultPermissionsTest() throws ApiException {
        api.updateDefaultPermissions();
        // TODO: test validations
    }

    /**
     * Updates repository permissions properties.   Valid permission settings: any combination of useDefaults, allowAnonymous, allowLoggedIn.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updatePermissionsTest() throws ApiException {
        String repository = null;
        api.updatePermissions(repository);
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateRepositoryUpdatesTest() throws ApiException {
        String repository = null;
        api.updateRepositoryUpdates(repository);
        // TODO: test validations
    }

}
