/**
 * Fisheye Crucible
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDefaultApi_H
#define OAI_OAIDefaultApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDefaultApi : public QObject {
    Q_OBJECT

public:
    OAIDefaultApi(const int timeOut = 0);
    ~OAIDefaultApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  key QString [required]
    */
    virtual void addAllowedReviewerGroup(const QString &key);

    /**
    * @param[in]  key QString [required]
    */
    virtual void addAllowedReviewerUser(const QString &key);

    /**
    * @param[in]  key QString [required]
    */
    virtual void addDefaultReviewerGroup(const QString &key);

    /**
    * @param[in]  key QString [required]
    */
    virtual void addDefaultReviewerUser(const QString &key);

    /**
    * @param[in]  repository QString [required]
    */
    virtual void addGroupToPermissions(const QString &repository);

    /**
    * @param[in]  name QString [required]
    */
    virtual void addPermissionSchemeAnonymousUsers(const QString &name);

    /**
    * @param[in]  name QString [required]
    */
    virtual void addPermissionSchemeGroup(const QString &name);

    /**
    * @param[in]  name QString [required]
    */
    virtual void addPermissionSchemeLoggedUsers(const QString &name);

    /**
    * @param[in]  name QString [required]
    */
    virtual void addPermissionSchemeReviewRole(const QString &name);

    /**
    * @param[in]  name QString [required]
    */
    virtual void addPermissionSchemeUser(const QString &name);


    virtual void addRepository();

    /**
    * @param[in]  key QString [required]
    */
    virtual void allowedReviewerGroups(const QString &key);

    /**
    * @param[in]  key QString [required]
    */
    virtual void allowedReviewerUsers(const QString &key);


    virtual void defaultPermissions();

    /**
    * @param[in]  key QString [required]
    */
    virtual void defaultReviewerGroups(const QString &key);

    /**
    * @param[in]  key QString [required]
    */
    virtual void deleteAllowedReviewerGroup(const QString &key);

    /**
    * @param[in]  key QString [required]
    */
    virtual void deleteAllowedReviewerUser(const QString &key);

    /**
    * @param[in]  key QString [required]
    */
    virtual void deleteDefaultReviewerGroup(const QString &key);

    /**
    * @param[in]  key QString [required]
    */
    virtual void deleteDefaultReviewerUser(const QString &key);

    /**
    * @param[in]  name QString [required]
    */
    virtual void deletePermissionSchemeAnonymousUsers(const QString &name);

    /**
    * @param[in]  name QString [required]
    */
    virtual void deletePermissionSchemeGroup(const QString &name);

    /**
    * @param[in]  name QString [required]
    */
    virtual void deletePermissionSchemeLoggedUsers(const QString &name);

    /**
    * @param[in]  name QString [required]
    */
    virtual void deletePermissionSchemeRole(const QString &name);

    /**
    * @param[in]  name QString [required]
    */
    virtual void deletePermissionSchemeUser(const QString &name);

    /**
    * @param[in]  repository QString [required]
    */
    virtual void deleteRepository(const QString &repository);

    /**
    * @param[in]  repository QString [required]
    */
    virtual void disableRepository(const QString &repository);

    /**
    * @param[in]  repository QString [required]
    * @param[in]  synchronous bool [optional]
    */
    virtual void doReviewRevisionReindex(const QString &repository, const ::OpenAPI::OptionalParam<bool> &synchronous = ::OpenAPI::OptionalParam<bool>());


    virtual void doShareContent();

    /**
    * @param[in]  repository QString [required]
    */
    virtual void enableRepository(const QString &repository);

    /**
    * @param[in]  repository QString [required]
    */
    virtual void fullIncrementalIndex(const QString &repository);

    /**
    * @param[in]  property QString [required]
    */
    virtual void getGlobalPref(const QString &property);


    virtual void getInfo();


    virtual void getRecent();


    virtual void getRecentDetailed();


    virtual void getRecentProjects();


    virtual void getRecentProjectsDetailed();


    virtual void getRecentRepositories();


    virtual void getRecentRepositoriesDetailed();


    virtual void getRecentReviews();


    virtual void getRecentReviewsDetailed();


    virtual void getRecentSnippets();


    virtual void getRecentSnippetsDetailed();


    virtual void getRecentUsers();


    virtual void getRecentUsersDetailed();

    /**
    * @param[in]  property QString [required]
    * @param[in]  repository QString [required]
    */
    virtual void getRepoPref(const QString &property, const QString &repository);

    /**
    * @param[in]  repository QString [required]
    * @param[in]  wait bool [optional]
    */
    virtual void incrementalIndex(const QString &repository, const ::OpenAPI::OptionalParam<bool> &wait = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  name QString [required]
    * @param[in]  action QString [optional]
    */
    virtual void listAnonymousUsersPrincipalAssociation(const QString &name, const ::OpenAPI::OptionalParam<QString> &action = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  key QString [required]
    */
    virtual void listDefaultReviewerUsers(const QString &key);

    /**
    * @param[in]  name QString [required]
    * @param[in]  name2 QString [optional]
    * @param[in]  action QString [optional]
    */
    virtual void listGroupPrincipalAssociation(const QString &name, const ::OpenAPI::OptionalParam<QString> &name2 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &action = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  name QString [required]
    */
    virtual void listGroupUsers(const QString &name);

    /**
    * @param[in]  name QString [required]
    * @param[in]  action QString [optional]
    */
    virtual void listLoggedUsersPrincipalAssociation(const QString &name, const ::OpenAPI::OptionalParam<QString> &action = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  name QString [required]
    */
    virtual void listProjects(const QString &name);

    /**
    * @param[in]  name QString [required]
    * @param[in]  name2 QString [optional]
    * @param[in]  action QString [optional]
    */
    virtual void listRolesPrincipalAssociation(const QString &name, const ::OpenAPI::OptionalParam<QString> &name2 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &action = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  name QString [required]
    */
    virtual void listUserGroups(const QString &name);

    /**
    * @param[in]  name QString [required]
    * @param[in]  name2 QString [optional]
    * @param[in]  action QString [optional]
    */
    virtual void listUserPrincipalAssociation(const QString &name, const ::OpenAPI::OptionalParam<QString> &name2 = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &action = ::OpenAPI::OptionalParam<QString>());


    virtual void login();

    /**
    * @param[in]  source_project_key QString [required]
    * @param[in]  destination_project_key QString [required]
    */
    virtual void moveAllReviews(const QString &source_project_key, const QString &destination_project_key);

    /**
    * @param[in]  repository QString [required]
    */
    virtual void permissions(const QString &repository);

    /**
    * @param[in]  repository QString [required]
    */
    virtual void permissionsGroups(const QString &repository);

    /**
    * @param[in]  repository QString [required]
    */
    virtual void rebuildSearchIndex(const QString &repository);

    /**
    * @param[in]  repository QString [required]
    */
    virtual void reindexChangesetComments(const QString &repository);

    /**
    * @param[in]  repository QString [required]
    */
    virtual void reindexChangesetDiscussion(const QString &repository);

    /**
    * @param[in]  repository QString [required]
    */
    virtual void reindexReviews(const QString &repository);

    /**
    * @param[in]  repository QString [required]
    */
    virtual void reindexSearch(const QString &repository);

    /**
    * @param[in]  repository QString [required]
    */
    virtual void removeGroupToPermissions(const QString &repository);

    /**
    * @param[in]  repository QString [required]
    */
    virtual void repositoryUpdates(const QString &repository);

    /**
    * @param[in]  prefix QString [optional]
    */
    virtual void restServiceFecruAdminGroupsGet(const ::OpenAPI::OptionalParam<QString> &prefix = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  name QString [required]
    */
    virtual void restServiceFecruAdminGroupsNameDelete(const QString &name);

    /**
    * @param[in]  name QString [required]
    */
    virtual void restServiceFecruAdminGroupsNameGet(const QString &name);

    /**
    * @param[in]  name QString [required]
    */
    virtual void restServiceFecruAdminGroupsNamePut(const QString &name);

    /**
    * @param[in]  name QString [required]
    */
    virtual void restServiceFecruAdminGroupsNameUsersDelete(const QString &name);

    /**
    * @param[in]  name QString [required]
    */
    virtual void restServiceFecruAdminGroupsNameUsersPut(const QString &name);


    virtual void restServiceFecruAdminGroupsPost();

    /**
    * @param[in]  name QString [optional]
    */
    virtual void restServiceFecruAdminPermissionSchemesGet(const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  name QString [required]
    */
    virtual void restServiceFecruAdminPermissionSchemesNameDelete(const QString &name);

    /**
    * @param[in]  name QString [required]
    */
    virtual void restServiceFecruAdminPermissionSchemesNameGet(const QString &name);

    /**
    * @param[in]  name QString [required]
    */
    virtual void restServiceFecruAdminPermissionSchemesNamePut(const QString &name);

    /**
    * @param[in]  copy_from QString [optional]
    */
    virtual void restServiceFecruAdminPermissionSchemesPost(const ::OpenAPI::OptionalParam<QString> &copy_from = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  name QString [optional]
    * @param[in]  key QString [optional]
    * @param[in]  default_repository_name QString [optional]
    * @param[in]  permission_scheme_name QString [optional]
    */
    virtual void restServiceFecruAdminProjectsGet(const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &default_repository_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &permission_scheme_name = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  key QString [required]
    * @param[in]  delete_project_reviews bool [optional]
    */
    virtual void restServiceFecruAdminProjectsKeyDelete(const QString &key, const ::OpenAPI::OptionalParam<bool> &delete_project_reviews = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  key QString [required]
    */
    virtual void restServiceFecruAdminProjectsKeyGet(const QString &key);

    /**
    * @param[in]  key QString [required]
    */
    virtual void restServiceFecruAdminProjectsKeyPut(const QString &key);


    virtual void restServiceFecruAdminProjectsPost();

    /**
    * @param[in]  type QString [optional]
    * @param[in]  enabled bool [optional]
    * @param[in]  started bool [optional]
    */
    virtual void restServiceFecruAdminRepositoriesGet(const ::OpenAPI::OptionalParam<QString> &type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &enabled = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &started = ::OpenAPI::OptionalParam<bool>());


    virtual void restServiceFecruAdminRepositoriesPost();

    /**
    * @param[in]  repository QString [required]
    */
    virtual void restServiceFecruAdminRepositoriesRepositoryDelete(const QString &repository);

    /**
    * @param[in]  repository QString [required]
    */
    virtual void restServiceFecruAdminRepositoriesRepositoryGet(const QString &repository);

    /**
    * @param[in]  repository QString [required]
    */
    virtual void restServiceFecruAdminRepositoriesRepositoryPut(const QString &repository);

    /**
    * @param[in]  repository QString [required]
    */
    virtual void restServiceFecruAdminRepositoriesRepositoryReindexLinecountPut(const QString &repository);

    /**
    * @param[in]  repository QString [required]
    * @param[in]  clone bool [optional]
    */
    virtual void restServiceFecruAdminRepositoriesRepositoryReindexSourcePut(const QString &repository, const ::OpenAPI::OptionalParam<bool> &clone = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  repository QString [required]
    * @param[in]  from QString [optional]
    * @param[in]  to QString [optional]
    */
    virtual void restServiceFecruAdminRepositoriesRepositoryRescanMetadataPut(const QString &repository, const ::OpenAPI::OptionalParam<QString> &from = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &to = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  repository QString [required]
    */
    virtual void restServiceFecruAdminRepositoriesV1RepositoryGet(const QString &repository);

    /**
    * @param[in]  repository QString [required]
    */
    virtual void restServiceFecruAdminRepositoriesV1RepositoryReindexLinecountPost(const QString &repository);

    /**
    * @param[in]  repository QString [required]
    * @param[in]  clone bool [optional]
    */
    virtual void restServiceFecruAdminRepositoriesV1RepositoryReindexSourcePost(const QString &repository, const ::OpenAPI::OptionalParam<bool> &clone = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  repository QString [required]
    * @param[in]  from qint64 [optional]
    * @param[in]  to qint64 [optional]
    */
    virtual void restServiceFecruAdminRepositoriesV1RepositoryRescanMetadataPost(const QString &repository, const ::OpenAPI::OptionalParam<qint64> &from = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<qint64> &to = ::OpenAPI::OptionalParam<qint64>());


    virtual void restServiceFecruAdminUsersGet();

    /**
    * @param[in]  name QString [required]
    */
    virtual void restServiceFecruAdminUsersNameDelete(const QString &name);

    /**
    * @param[in]  name QString [required]
    */
    virtual void restServiceFecruAdminUsersNameGet(const QString &name);

    /**
    * @param[in]  name QString [required]
    */
    virtual void restServiceFecruAdminUsersNameGroupsDelete(const QString &name);

    /**
    * @param[in]  name QString [required]
    */
    virtual void restServiceFecruAdminUsersNameGroupsPut(const QString &name);

    /**
    * @param[in]  name QString [required]
    */
    virtual void restServiceFecruAdminUsersNamePut(const QString &name);


    virtual void restServiceFecruAdminUsersPost();

    /**
    * @param[in]  repository QString [required]
    */
    virtual void restServiceFecruIndexingStatusV1StatusRepositoryGet(const QString &repository);

    /**
    * @param[in]  repository QString [required]
    * @param[in]  synchronous bool [optional]
    */
    virtual void scan(const QString &repository, const ::OpenAPI::OptionalParam<bool> &synchronous = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  repository QString [required]
    */
    virtual void scanCvs(const QString &repository);


    virtual void setPref();

    /**
    * @param[in]  repository QString [required]
    */
    virtual void start(const QString &repository);

    /**
    * @param[in]  repository QString [required]
    */
    virtual void startRepository(const QString &repository);

    /**
    * @param[in]  repository QString [required]
    */
    virtual void stop(const QString &repository);

    /**
    * @param[in]  repository QString [required]
    */
    virtual void stopRepository(const QString &repository);


    virtual void updateDefaultPermissions();

    /**
    * @param[in]  repository QString [required]
    */
    virtual void updatePermissions(const QString &repository);

    /**
    * @param[in]  repository QString [required]
    */
    virtual void updateRepositoryUpdates(const QString &repository);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void addAllowedReviewerGroupCallback(OAIHttpRequestWorker *worker);
    void addAllowedReviewerUserCallback(OAIHttpRequestWorker *worker);
    void addDefaultReviewerGroupCallback(OAIHttpRequestWorker *worker);
    void addDefaultReviewerUserCallback(OAIHttpRequestWorker *worker);
    void addGroupToPermissionsCallback(OAIHttpRequestWorker *worker);
    void addPermissionSchemeAnonymousUsersCallback(OAIHttpRequestWorker *worker);
    void addPermissionSchemeGroupCallback(OAIHttpRequestWorker *worker);
    void addPermissionSchemeLoggedUsersCallback(OAIHttpRequestWorker *worker);
    void addPermissionSchemeReviewRoleCallback(OAIHttpRequestWorker *worker);
    void addPermissionSchemeUserCallback(OAIHttpRequestWorker *worker);
    void addRepositoryCallback(OAIHttpRequestWorker *worker);
    void allowedReviewerGroupsCallback(OAIHttpRequestWorker *worker);
    void allowedReviewerUsersCallback(OAIHttpRequestWorker *worker);
    void defaultPermissionsCallback(OAIHttpRequestWorker *worker);
    void defaultReviewerGroupsCallback(OAIHttpRequestWorker *worker);
    void deleteAllowedReviewerGroupCallback(OAIHttpRequestWorker *worker);
    void deleteAllowedReviewerUserCallback(OAIHttpRequestWorker *worker);
    void deleteDefaultReviewerGroupCallback(OAIHttpRequestWorker *worker);
    void deleteDefaultReviewerUserCallback(OAIHttpRequestWorker *worker);
    void deletePermissionSchemeAnonymousUsersCallback(OAIHttpRequestWorker *worker);
    void deletePermissionSchemeGroupCallback(OAIHttpRequestWorker *worker);
    void deletePermissionSchemeLoggedUsersCallback(OAIHttpRequestWorker *worker);
    void deletePermissionSchemeRoleCallback(OAIHttpRequestWorker *worker);
    void deletePermissionSchemeUserCallback(OAIHttpRequestWorker *worker);
    void deleteRepositoryCallback(OAIHttpRequestWorker *worker);
    void disableRepositoryCallback(OAIHttpRequestWorker *worker);
    void doReviewRevisionReindexCallback(OAIHttpRequestWorker *worker);
    void doShareContentCallback(OAIHttpRequestWorker *worker);
    void enableRepositoryCallback(OAIHttpRequestWorker *worker);
    void fullIncrementalIndexCallback(OAIHttpRequestWorker *worker);
    void getGlobalPrefCallback(OAIHttpRequestWorker *worker);
    void getInfoCallback(OAIHttpRequestWorker *worker);
    void getRecentCallback(OAIHttpRequestWorker *worker);
    void getRecentDetailedCallback(OAIHttpRequestWorker *worker);
    void getRecentProjectsCallback(OAIHttpRequestWorker *worker);
    void getRecentProjectsDetailedCallback(OAIHttpRequestWorker *worker);
    void getRecentRepositoriesCallback(OAIHttpRequestWorker *worker);
    void getRecentRepositoriesDetailedCallback(OAIHttpRequestWorker *worker);
    void getRecentReviewsCallback(OAIHttpRequestWorker *worker);
    void getRecentReviewsDetailedCallback(OAIHttpRequestWorker *worker);
    void getRecentSnippetsCallback(OAIHttpRequestWorker *worker);
    void getRecentSnippetsDetailedCallback(OAIHttpRequestWorker *worker);
    void getRecentUsersCallback(OAIHttpRequestWorker *worker);
    void getRecentUsersDetailedCallback(OAIHttpRequestWorker *worker);
    void getRepoPrefCallback(OAIHttpRequestWorker *worker);
    void incrementalIndexCallback(OAIHttpRequestWorker *worker);
    void listAnonymousUsersPrincipalAssociationCallback(OAIHttpRequestWorker *worker);
    void listDefaultReviewerUsersCallback(OAIHttpRequestWorker *worker);
    void listGroupPrincipalAssociationCallback(OAIHttpRequestWorker *worker);
    void listGroupUsersCallback(OAIHttpRequestWorker *worker);
    void listLoggedUsersPrincipalAssociationCallback(OAIHttpRequestWorker *worker);
    void listProjectsCallback(OAIHttpRequestWorker *worker);
    void listRolesPrincipalAssociationCallback(OAIHttpRequestWorker *worker);
    void listUserGroupsCallback(OAIHttpRequestWorker *worker);
    void listUserPrincipalAssociationCallback(OAIHttpRequestWorker *worker);
    void loginCallback(OAIHttpRequestWorker *worker);
    void moveAllReviewsCallback(OAIHttpRequestWorker *worker);
    void permissionsCallback(OAIHttpRequestWorker *worker);
    void permissionsGroupsCallback(OAIHttpRequestWorker *worker);
    void rebuildSearchIndexCallback(OAIHttpRequestWorker *worker);
    void reindexChangesetCommentsCallback(OAIHttpRequestWorker *worker);
    void reindexChangesetDiscussionCallback(OAIHttpRequestWorker *worker);
    void reindexReviewsCallback(OAIHttpRequestWorker *worker);
    void reindexSearchCallback(OAIHttpRequestWorker *worker);
    void removeGroupToPermissionsCallback(OAIHttpRequestWorker *worker);
    void repositoryUpdatesCallback(OAIHttpRequestWorker *worker);
    void restServiceFecruAdminGroupsGetCallback(OAIHttpRequestWorker *worker);
    void restServiceFecruAdminGroupsNameDeleteCallback(OAIHttpRequestWorker *worker);
    void restServiceFecruAdminGroupsNameGetCallback(OAIHttpRequestWorker *worker);
    void restServiceFecruAdminGroupsNamePutCallback(OAIHttpRequestWorker *worker);
    void restServiceFecruAdminGroupsNameUsersDeleteCallback(OAIHttpRequestWorker *worker);
    void restServiceFecruAdminGroupsNameUsersPutCallback(OAIHttpRequestWorker *worker);
    void restServiceFecruAdminGroupsPostCallback(OAIHttpRequestWorker *worker);
    void restServiceFecruAdminPermissionSchemesGetCallback(OAIHttpRequestWorker *worker);
    void restServiceFecruAdminPermissionSchemesNameDeleteCallback(OAIHttpRequestWorker *worker);
    void restServiceFecruAdminPermissionSchemesNameGetCallback(OAIHttpRequestWorker *worker);
    void restServiceFecruAdminPermissionSchemesNamePutCallback(OAIHttpRequestWorker *worker);
    void restServiceFecruAdminPermissionSchemesPostCallback(OAIHttpRequestWorker *worker);
    void restServiceFecruAdminProjectsGetCallback(OAIHttpRequestWorker *worker);
    void restServiceFecruAdminProjectsKeyDeleteCallback(OAIHttpRequestWorker *worker);
    void restServiceFecruAdminProjectsKeyGetCallback(OAIHttpRequestWorker *worker);
    void restServiceFecruAdminProjectsKeyPutCallback(OAIHttpRequestWorker *worker);
    void restServiceFecruAdminProjectsPostCallback(OAIHttpRequestWorker *worker);
    void restServiceFecruAdminRepositoriesGetCallback(OAIHttpRequestWorker *worker);
    void restServiceFecruAdminRepositoriesPostCallback(OAIHttpRequestWorker *worker);
    void restServiceFecruAdminRepositoriesRepositoryDeleteCallback(OAIHttpRequestWorker *worker);
    void restServiceFecruAdminRepositoriesRepositoryGetCallback(OAIHttpRequestWorker *worker);
    void restServiceFecruAdminRepositoriesRepositoryPutCallback(OAIHttpRequestWorker *worker);
    void restServiceFecruAdminRepositoriesRepositoryReindexLinecountPutCallback(OAIHttpRequestWorker *worker);
    void restServiceFecruAdminRepositoriesRepositoryReindexSourcePutCallback(OAIHttpRequestWorker *worker);
    void restServiceFecruAdminRepositoriesRepositoryRescanMetadataPutCallback(OAIHttpRequestWorker *worker);
    void restServiceFecruAdminRepositoriesV1RepositoryGetCallback(OAIHttpRequestWorker *worker);
    void restServiceFecruAdminRepositoriesV1RepositoryReindexLinecountPostCallback(OAIHttpRequestWorker *worker);
    void restServiceFecruAdminRepositoriesV1RepositoryReindexSourcePostCallback(OAIHttpRequestWorker *worker);
    void restServiceFecruAdminRepositoriesV1RepositoryRescanMetadataPostCallback(OAIHttpRequestWorker *worker);
    void restServiceFecruAdminUsersGetCallback(OAIHttpRequestWorker *worker);
    void restServiceFecruAdminUsersNameDeleteCallback(OAIHttpRequestWorker *worker);
    void restServiceFecruAdminUsersNameGetCallback(OAIHttpRequestWorker *worker);
    void restServiceFecruAdminUsersNameGroupsDeleteCallback(OAIHttpRequestWorker *worker);
    void restServiceFecruAdminUsersNameGroupsPutCallback(OAIHttpRequestWorker *worker);
    void restServiceFecruAdminUsersNamePutCallback(OAIHttpRequestWorker *worker);
    void restServiceFecruAdminUsersPostCallback(OAIHttpRequestWorker *worker);
    void restServiceFecruIndexingStatusV1StatusRepositoryGetCallback(OAIHttpRequestWorker *worker);
    void scanCallback(OAIHttpRequestWorker *worker);
    void scanCvsCallback(OAIHttpRequestWorker *worker);
    void setPrefCallback(OAIHttpRequestWorker *worker);
    void startCallback(OAIHttpRequestWorker *worker);
    void startRepositoryCallback(OAIHttpRequestWorker *worker);
    void stopCallback(OAIHttpRequestWorker *worker);
    void stopRepositoryCallback(OAIHttpRequestWorker *worker);
    void updateDefaultPermissionsCallback(OAIHttpRequestWorker *worker);
    void updatePermissionsCallback(OAIHttpRequestWorker *worker);
    void updateRepositoryUpdatesCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void addAllowedReviewerGroupSignal();
    void addAllowedReviewerUserSignal();
    void addDefaultReviewerGroupSignal();
    void addDefaultReviewerUserSignal();
    void addGroupToPermissionsSignal();
    void addPermissionSchemeAnonymousUsersSignal();
    void addPermissionSchemeGroupSignal();
    void addPermissionSchemeLoggedUsersSignal();
    void addPermissionSchemeReviewRoleSignal();
    void addPermissionSchemeUserSignal();
    void addRepositorySignal();
    void allowedReviewerGroupsSignal();
    void allowedReviewerUsersSignal();
    void defaultPermissionsSignal();
    void defaultReviewerGroupsSignal();
    void deleteAllowedReviewerGroupSignal();
    void deleteAllowedReviewerUserSignal();
    void deleteDefaultReviewerGroupSignal();
    void deleteDefaultReviewerUserSignal();
    void deletePermissionSchemeAnonymousUsersSignal();
    void deletePermissionSchemeGroupSignal();
    void deletePermissionSchemeLoggedUsersSignal();
    void deletePermissionSchemeRoleSignal();
    void deletePermissionSchemeUserSignal();
    void deleteRepositorySignal();
    void disableRepositorySignal();
    void doReviewRevisionReindexSignal();
    void doShareContentSignal();
    void enableRepositorySignal();
    void fullIncrementalIndexSignal();
    void getGlobalPrefSignal();
    void getInfoSignal();
    void getRecentSignal();
    void getRecentDetailedSignal();
    void getRecentProjectsSignal();
    void getRecentProjectsDetailedSignal();
    void getRecentRepositoriesSignal();
    void getRecentRepositoriesDetailedSignal();
    void getRecentReviewsSignal();
    void getRecentReviewsDetailedSignal();
    void getRecentSnippetsSignal();
    void getRecentSnippetsDetailedSignal();
    void getRecentUsersSignal();
    void getRecentUsersDetailedSignal();
    void getRepoPrefSignal();
    void incrementalIndexSignal();
    void listAnonymousUsersPrincipalAssociationSignal();
    void listDefaultReviewerUsersSignal();
    void listGroupPrincipalAssociationSignal();
    void listGroupUsersSignal();
    void listLoggedUsersPrincipalAssociationSignal();
    void listProjectsSignal();
    void listRolesPrincipalAssociationSignal();
    void listUserGroupsSignal();
    void listUserPrincipalAssociationSignal();
    void loginSignal();
    void moveAllReviewsSignal();
    void permissionsSignal();
    void permissionsGroupsSignal();
    void rebuildSearchIndexSignal();
    void reindexChangesetCommentsSignal();
    void reindexChangesetDiscussionSignal();
    void reindexReviewsSignal();
    void reindexSearchSignal();
    void removeGroupToPermissionsSignal();
    void repositoryUpdatesSignal();
    void restServiceFecruAdminGroupsGetSignal();
    void restServiceFecruAdminGroupsNameDeleteSignal();
    void restServiceFecruAdminGroupsNameGetSignal();
    void restServiceFecruAdminGroupsNamePutSignal();
    void restServiceFecruAdminGroupsNameUsersDeleteSignal();
    void restServiceFecruAdminGroupsNameUsersPutSignal();
    void restServiceFecruAdminGroupsPostSignal();
    void restServiceFecruAdminPermissionSchemesGetSignal();
    void restServiceFecruAdminPermissionSchemesNameDeleteSignal();
    void restServiceFecruAdminPermissionSchemesNameGetSignal();
    void restServiceFecruAdminPermissionSchemesNamePutSignal();
    void restServiceFecruAdminPermissionSchemesPostSignal();
    void restServiceFecruAdminProjectsGetSignal();
    void restServiceFecruAdminProjectsKeyDeleteSignal();
    void restServiceFecruAdminProjectsKeyGetSignal();
    void restServiceFecruAdminProjectsKeyPutSignal();
    void restServiceFecruAdminProjectsPostSignal();
    void restServiceFecruAdminRepositoriesGetSignal();
    void restServiceFecruAdminRepositoriesPostSignal();
    void restServiceFecruAdminRepositoriesRepositoryDeleteSignal();
    void restServiceFecruAdminRepositoriesRepositoryGetSignal();
    void restServiceFecruAdminRepositoriesRepositoryPutSignal();
    void restServiceFecruAdminRepositoriesRepositoryReindexLinecountPutSignal();
    void restServiceFecruAdminRepositoriesRepositoryReindexSourcePutSignal();
    void restServiceFecruAdminRepositoriesRepositoryRescanMetadataPutSignal();
    void restServiceFecruAdminRepositoriesV1RepositoryGetSignal();
    void restServiceFecruAdminRepositoriesV1RepositoryReindexLinecountPostSignal();
    void restServiceFecruAdminRepositoriesV1RepositoryReindexSourcePostSignal();
    void restServiceFecruAdminRepositoriesV1RepositoryRescanMetadataPostSignal();
    void restServiceFecruAdminUsersGetSignal();
    void restServiceFecruAdminUsersNameDeleteSignal();
    void restServiceFecruAdminUsersNameGetSignal();
    void restServiceFecruAdminUsersNameGroupsDeleteSignal();
    void restServiceFecruAdminUsersNameGroupsPutSignal();
    void restServiceFecruAdminUsersNamePutSignal();
    void restServiceFecruAdminUsersPostSignal();
    void restServiceFecruIndexingStatusV1StatusRepositoryGetSignal();
    void scanSignal();
    void scanCvsSignal();
    void setPrefSignal();
    void startSignal();
    void startRepositorySignal();
    void stopSignal();
    void stopRepositorySignal();
    void updateDefaultPermissionsSignal();
    void updatePermissionsSignal();
    void updateRepositoryUpdatesSignal();


    void addAllowedReviewerGroupSignalFull(OAIHttpRequestWorker *worker);
    void addAllowedReviewerUserSignalFull(OAIHttpRequestWorker *worker);
    void addDefaultReviewerGroupSignalFull(OAIHttpRequestWorker *worker);
    void addDefaultReviewerUserSignalFull(OAIHttpRequestWorker *worker);
    void addGroupToPermissionsSignalFull(OAIHttpRequestWorker *worker);
    void addPermissionSchemeAnonymousUsersSignalFull(OAIHttpRequestWorker *worker);
    void addPermissionSchemeGroupSignalFull(OAIHttpRequestWorker *worker);
    void addPermissionSchemeLoggedUsersSignalFull(OAIHttpRequestWorker *worker);
    void addPermissionSchemeReviewRoleSignalFull(OAIHttpRequestWorker *worker);
    void addPermissionSchemeUserSignalFull(OAIHttpRequestWorker *worker);
    void addRepositorySignalFull(OAIHttpRequestWorker *worker);
    void allowedReviewerGroupsSignalFull(OAIHttpRequestWorker *worker);
    void allowedReviewerUsersSignalFull(OAIHttpRequestWorker *worker);
    void defaultPermissionsSignalFull(OAIHttpRequestWorker *worker);
    void defaultReviewerGroupsSignalFull(OAIHttpRequestWorker *worker);
    void deleteAllowedReviewerGroupSignalFull(OAIHttpRequestWorker *worker);
    void deleteAllowedReviewerUserSignalFull(OAIHttpRequestWorker *worker);
    void deleteDefaultReviewerGroupSignalFull(OAIHttpRequestWorker *worker);
    void deleteDefaultReviewerUserSignalFull(OAIHttpRequestWorker *worker);
    void deletePermissionSchemeAnonymousUsersSignalFull(OAIHttpRequestWorker *worker);
    void deletePermissionSchemeGroupSignalFull(OAIHttpRequestWorker *worker);
    void deletePermissionSchemeLoggedUsersSignalFull(OAIHttpRequestWorker *worker);
    void deletePermissionSchemeRoleSignalFull(OAIHttpRequestWorker *worker);
    void deletePermissionSchemeUserSignalFull(OAIHttpRequestWorker *worker);
    void deleteRepositorySignalFull(OAIHttpRequestWorker *worker);
    void disableRepositorySignalFull(OAIHttpRequestWorker *worker);
    void doReviewRevisionReindexSignalFull(OAIHttpRequestWorker *worker);
    void doShareContentSignalFull(OAIHttpRequestWorker *worker);
    void enableRepositorySignalFull(OAIHttpRequestWorker *worker);
    void fullIncrementalIndexSignalFull(OAIHttpRequestWorker *worker);
    void getGlobalPrefSignalFull(OAIHttpRequestWorker *worker);
    void getInfoSignalFull(OAIHttpRequestWorker *worker);
    void getRecentSignalFull(OAIHttpRequestWorker *worker);
    void getRecentDetailedSignalFull(OAIHttpRequestWorker *worker);
    void getRecentProjectsSignalFull(OAIHttpRequestWorker *worker);
    void getRecentProjectsDetailedSignalFull(OAIHttpRequestWorker *worker);
    void getRecentRepositoriesSignalFull(OAIHttpRequestWorker *worker);
    void getRecentRepositoriesDetailedSignalFull(OAIHttpRequestWorker *worker);
    void getRecentReviewsSignalFull(OAIHttpRequestWorker *worker);
    void getRecentReviewsDetailedSignalFull(OAIHttpRequestWorker *worker);
    void getRecentSnippetsSignalFull(OAIHttpRequestWorker *worker);
    void getRecentSnippetsDetailedSignalFull(OAIHttpRequestWorker *worker);
    void getRecentUsersSignalFull(OAIHttpRequestWorker *worker);
    void getRecentUsersDetailedSignalFull(OAIHttpRequestWorker *worker);
    void getRepoPrefSignalFull(OAIHttpRequestWorker *worker);
    void incrementalIndexSignalFull(OAIHttpRequestWorker *worker);
    void listAnonymousUsersPrincipalAssociationSignalFull(OAIHttpRequestWorker *worker);
    void listDefaultReviewerUsersSignalFull(OAIHttpRequestWorker *worker);
    void listGroupPrincipalAssociationSignalFull(OAIHttpRequestWorker *worker);
    void listGroupUsersSignalFull(OAIHttpRequestWorker *worker);
    void listLoggedUsersPrincipalAssociationSignalFull(OAIHttpRequestWorker *worker);
    void listProjectsSignalFull(OAIHttpRequestWorker *worker);
    void listRolesPrincipalAssociationSignalFull(OAIHttpRequestWorker *worker);
    void listUserGroupsSignalFull(OAIHttpRequestWorker *worker);
    void listUserPrincipalAssociationSignalFull(OAIHttpRequestWorker *worker);
    void loginSignalFull(OAIHttpRequestWorker *worker);
    void moveAllReviewsSignalFull(OAIHttpRequestWorker *worker);
    void permissionsSignalFull(OAIHttpRequestWorker *worker);
    void permissionsGroupsSignalFull(OAIHttpRequestWorker *worker);
    void rebuildSearchIndexSignalFull(OAIHttpRequestWorker *worker);
    void reindexChangesetCommentsSignalFull(OAIHttpRequestWorker *worker);
    void reindexChangesetDiscussionSignalFull(OAIHttpRequestWorker *worker);
    void reindexReviewsSignalFull(OAIHttpRequestWorker *worker);
    void reindexSearchSignalFull(OAIHttpRequestWorker *worker);
    void removeGroupToPermissionsSignalFull(OAIHttpRequestWorker *worker);
    void repositoryUpdatesSignalFull(OAIHttpRequestWorker *worker);
    void restServiceFecruAdminGroupsGetSignalFull(OAIHttpRequestWorker *worker);
    void restServiceFecruAdminGroupsNameDeleteSignalFull(OAIHttpRequestWorker *worker);
    void restServiceFecruAdminGroupsNameGetSignalFull(OAIHttpRequestWorker *worker);
    void restServiceFecruAdminGroupsNamePutSignalFull(OAIHttpRequestWorker *worker);
    void restServiceFecruAdminGroupsNameUsersDeleteSignalFull(OAIHttpRequestWorker *worker);
    void restServiceFecruAdminGroupsNameUsersPutSignalFull(OAIHttpRequestWorker *worker);
    void restServiceFecruAdminGroupsPostSignalFull(OAIHttpRequestWorker *worker);
    void restServiceFecruAdminPermissionSchemesGetSignalFull(OAIHttpRequestWorker *worker);
    void restServiceFecruAdminPermissionSchemesNameDeleteSignalFull(OAIHttpRequestWorker *worker);
    void restServiceFecruAdminPermissionSchemesNameGetSignalFull(OAIHttpRequestWorker *worker);
    void restServiceFecruAdminPermissionSchemesNamePutSignalFull(OAIHttpRequestWorker *worker);
    void restServiceFecruAdminPermissionSchemesPostSignalFull(OAIHttpRequestWorker *worker);
    void restServiceFecruAdminProjectsGetSignalFull(OAIHttpRequestWorker *worker);
    void restServiceFecruAdminProjectsKeyDeleteSignalFull(OAIHttpRequestWorker *worker);
    void restServiceFecruAdminProjectsKeyGetSignalFull(OAIHttpRequestWorker *worker);
    void restServiceFecruAdminProjectsKeyPutSignalFull(OAIHttpRequestWorker *worker);
    void restServiceFecruAdminProjectsPostSignalFull(OAIHttpRequestWorker *worker);
    void restServiceFecruAdminRepositoriesGetSignalFull(OAIHttpRequestWorker *worker);
    void restServiceFecruAdminRepositoriesPostSignalFull(OAIHttpRequestWorker *worker);
    void restServiceFecruAdminRepositoriesRepositoryDeleteSignalFull(OAIHttpRequestWorker *worker);
    void restServiceFecruAdminRepositoriesRepositoryGetSignalFull(OAIHttpRequestWorker *worker);
    void restServiceFecruAdminRepositoriesRepositoryPutSignalFull(OAIHttpRequestWorker *worker);
    void restServiceFecruAdminRepositoriesRepositoryReindexLinecountPutSignalFull(OAIHttpRequestWorker *worker);
    void restServiceFecruAdminRepositoriesRepositoryReindexSourcePutSignalFull(OAIHttpRequestWorker *worker);
    void restServiceFecruAdminRepositoriesRepositoryRescanMetadataPutSignalFull(OAIHttpRequestWorker *worker);
    void restServiceFecruAdminRepositoriesV1RepositoryGetSignalFull(OAIHttpRequestWorker *worker);
    void restServiceFecruAdminRepositoriesV1RepositoryReindexLinecountPostSignalFull(OAIHttpRequestWorker *worker);
    void restServiceFecruAdminRepositoriesV1RepositoryReindexSourcePostSignalFull(OAIHttpRequestWorker *worker);
    void restServiceFecruAdminRepositoriesV1RepositoryRescanMetadataPostSignalFull(OAIHttpRequestWorker *worker);
    void restServiceFecruAdminUsersGetSignalFull(OAIHttpRequestWorker *worker);
    void restServiceFecruAdminUsersNameDeleteSignalFull(OAIHttpRequestWorker *worker);
    void restServiceFecruAdminUsersNameGetSignalFull(OAIHttpRequestWorker *worker);
    void restServiceFecruAdminUsersNameGroupsDeleteSignalFull(OAIHttpRequestWorker *worker);
    void restServiceFecruAdminUsersNameGroupsPutSignalFull(OAIHttpRequestWorker *worker);
    void restServiceFecruAdminUsersNamePutSignalFull(OAIHttpRequestWorker *worker);
    void restServiceFecruAdminUsersPostSignalFull(OAIHttpRequestWorker *worker);
    void restServiceFecruIndexingStatusV1StatusRepositoryGetSignalFull(OAIHttpRequestWorker *worker);
    void scanSignalFull(OAIHttpRequestWorker *worker);
    void scanCvsSignalFull(OAIHttpRequestWorker *worker);
    void setPrefSignalFull(OAIHttpRequestWorker *worker);
    void startSignalFull(OAIHttpRequestWorker *worker);
    void startRepositorySignalFull(OAIHttpRequestWorker *worker);
    void stopSignalFull(OAIHttpRequestWorker *worker);
    void stopRepositorySignalFull(OAIHttpRequestWorker *worker);
    void updateDefaultPermissionsSignalFull(OAIHttpRequestWorker *worker);
    void updatePermissionsSignalFull(OAIHttpRequestWorker *worker);
    void updateRepositoryUpdatesSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use addAllowedReviewerGroupSignalError() instead")
    void addAllowedReviewerGroupSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void addAllowedReviewerGroupSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addAllowedReviewerUserSignalError() instead")
    void addAllowedReviewerUserSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void addAllowedReviewerUserSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addDefaultReviewerGroupSignalError() instead")
    void addDefaultReviewerGroupSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void addDefaultReviewerGroupSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addDefaultReviewerUserSignalError() instead")
    void addDefaultReviewerUserSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void addDefaultReviewerUserSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addGroupToPermissionsSignalError() instead")
    void addGroupToPermissionsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void addGroupToPermissionsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addPermissionSchemeAnonymousUsersSignalError() instead")
    void addPermissionSchemeAnonymousUsersSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void addPermissionSchemeAnonymousUsersSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addPermissionSchemeGroupSignalError() instead")
    void addPermissionSchemeGroupSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void addPermissionSchemeGroupSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addPermissionSchemeLoggedUsersSignalError() instead")
    void addPermissionSchemeLoggedUsersSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void addPermissionSchemeLoggedUsersSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addPermissionSchemeReviewRoleSignalError() instead")
    void addPermissionSchemeReviewRoleSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void addPermissionSchemeReviewRoleSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addPermissionSchemeUserSignalError() instead")
    void addPermissionSchemeUserSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void addPermissionSchemeUserSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addRepositorySignalError() instead")
    void addRepositorySignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void addRepositorySignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use allowedReviewerGroupsSignalError() instead")
    void allowedReviewerGroupsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void allowedReviewerGroupsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use allowedReviewerUsersSignalError() instead")
    void allowedReviewerUsersSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void allowedReviewerUsersSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use defaultPermissionsSignalError() instead")
    void defaultPermissionsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void defaultPermissionsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use defaultReviewerGroupsSignalError() instead")
    void defaultReviewerGroupsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void defaultReviewerGroupsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteAllowedReviewerGroupSignalError() instead")
    void deleteAllowedReviewerGroupSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteAllowedReviewerGroupSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteAllowedReviewerUserSignalError() instead")
    void deleteAllowedReviewerUserSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteAllowedReviewerUserSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteDefaultReviewerGroupSignalError() instead")
    void deleteDefaultReviewerGroupSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteDefaultReviewerGroupSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteDefaultReviewerUserSignalError() instead")
    void deleteDefaultReviewerUserSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteDefaultReviewerUserSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deletePermissionSchemeAnonymousUsersSignalError() instead")
    void deletePermissionSchemeAnonymousUsersSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deletePermissionSchemeAnonymousUsersSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deletePermissionSchemeGroupSignalError() instead")
    void deletePermissionSchemeGroupSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deletePermissionSchemeGroupSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deletePermissionSchemeLoggedUsersSignalError() instead")
    void deletePermissionSchemeLoggedUsersSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deletePermissionSchemeLoggedUsersSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deletePermissionSchemeRoleSignalError() instead")
    void deletePermissionSchemeRoleSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deletePermissionSchemeRoleSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deletePermissionSchemeUserSignalError() instead")
    void deletePermissionSchemeUserSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deletePermissionSchemeUserSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteRepositorySignalError() instead")
    void deleteRepositorySignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteRepositorySignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use disableRepositorySignalError() instead")
    void disableRepositorySignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void disableRepositorySignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use doReviewRevisionReindexSignalError() instead")
    void doReviewRevisionReindexSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void doReviewRevisionReindexSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use doShareContentSignalError() instead")
    void doShareContentSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void doShareContentSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enableRepositorySignalError() instead")
    void enableRepositorySignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void enableRepositorySignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fullIncrementalIndexSignalError() instead")
    void fullIncrementalIndexSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void fullIncrementalIndexSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getGlobalPrefSignalError() instead")
    void getGlobalPrefSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getGlobalPrefSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getInfoSignalError() instead")
    void getInfoSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getInfoSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRecentSignalError() instead")
    void getRecentSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getRecentSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRecentDetailedSignalError() instead")
    void getRecentDetailedSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getRecentDetailedSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRecentProjectsSignalError() instead")
    void getRecentProjectsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getRecentProjectsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRecentProjectsDetailedSignalError() instead")
    void getRecentProjectsDetailedSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getRecentProjectsDetailedSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRecentRepositoriesSignalError() instead")
    void getRecentRepositoriesSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getRecentRepositoriesSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRecentRepositoriesDetailedSignalError() instead")
    void getRecentRepositoriesDetailedSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getRecentRepositoriesDetailedSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRecentReviewsSignalError() instead")
    void getRecentReviewsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getRecentReviewsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRecentReviewsDetailedSignalError() instead")
    void getRecentReviewsDetailedSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getRecentReviewsDetailedSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRecentSnippetsSignalError() instead")
    void getRecentSnippetsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getRecentSnippetsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRecentSnippetsDetailedSignalError() instead")
    void getRecentSnippetsDetailedSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getRecentSnippetsDetailedSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRecentUsersSignalError() instead")
    void getRecentUsersSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getRecentUsersSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRecentUsersDetailedSignalError() instead")
    void getRecentUsersDetailedSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getRecentUsersDetailedSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRepoPrefSignalError() instead")
    void getRepoPrefSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getRepoPrefSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use incrementalIndexSignalError() instead")
    void incrementalIndexSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void incrementalIndexSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listAnonymousUsersPrincipalAssociationSignalError() instead")
    void listAnonymousUsersPrincipalAssociationSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void listAnonymousUsersPrincipalAssociationSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listDefaultReviewerUsersSignalError() instead")
    void listDefaultReviewerUsersSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void listDefaultReviewerUsersSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listGroupPrincipalAssociationSignalError() instead")
    void listGroupPrincipalAssociationSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void listGroupPrincipalAssociationSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listGroupUsersSignalError() instead")
    void listGroupUsersSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void listGroupUsersSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listLoggedUsersPrincipalAssociationSignalError() instead")
    void listLoggedUsersPrincipalAssociationSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void listLoggedUsersPrincipalAssociationSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listProjectsSignalError() instead")
    void listProjectsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void listProjectsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listRolesPrincipalAssociationSignalError() instead")
    void listRolesPrincipalAssociationSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void listRolesPrincipalAssociationSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listUserGroupsSignalError() instead")
    void listUserGroupsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void listUserGroupsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listUserPrincipalAssociationSignalError() instead")
    void listUserPrincipalAssociationSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void listUserPrincipalAssociationSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use loginSignalError() instead")
    void loginSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void loginSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use moveAllReviewsSignalError() instead")
    void moveAllReviewsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void moveAllReviewsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use permissionsSignalError() instead")
    void permissionsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void permissionsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use permissionsGroupsSignalError() instead")
    void permissionsGroupsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void permissionsGroupsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use rebuildSearchIndexSignalError() instead")
    void rebuildSearchIndexSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void rebuildSearchIndexSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reindexChangesetCommentsSignalError() instead")
    void reindexChangesetCommentsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void reindexChangesetCommentsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reindexChangesetDiscussionSignalError() instead")
    void reindexChangesetDiscussionSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void reindexChangesetDiscussionSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reindexReviewsSignalError() instead")
    void reindexReviewsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void reindexReviewsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reindexSearchSignalError() instead")
    void reindexSearchSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void reindexSearchSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeGroupToPermissionsSignalError() instead")
    void removeGroupToPermissionsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void removeGroupToPermissionsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoryUpdatesSignalError() instead")
    void repositoryUpdatesSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void repositoryUpdatesSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use restServiceFecruAdminGroupsGetSignalError() instead")
    void restServiceFecruAdminGroupsGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void restServiceFecruAdminGroupsGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use restServiceFecruAdminGroupsNameDeleteSignalError() instead")
    void restServiceFecruAdminGroupsNameDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void restServiceFecruAdminGroupsNameDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use restServiceFecruAdminGroupsNameGetSignalError() instead")
    void restServiceFecruAdminGroupsNameGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void restServiceFecruAdminGroupsNameGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use restServiceFecruAdminGroupsNamePutSignalError() instead")
    void restServiceFecruAdminGroupsNamePutSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void restServiceFecruAdminGroupsNamePutSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use restServiceFecruAdminGroupsNameUsersDeleteSignalError() instead")
    void restServiceFecruAdminGroupsNameUsersDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void restServiceFecruAdminGroupsNameUsersDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use restServiceFecruAdminGroupsNameUsersPutSignalError() instead")
    void restServiceFecruAdminGroupsNameUsersPutSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void restServiceFecruAdminGroupsNameUsersPutSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use restServiceFecruAdminGroupsPostSignalError() instead")
    void restServiceFecruAdminGroupsPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void restServiceFecruAdminGroupsPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use restServiceFecruAdminPermissionSchemesGetSignalError() instead")
    void restServiceFecruAdminPermissionSchemesGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void restServiceFecruAdminPermissionSchemesGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use restServiceFecruAdminPermissionSchemesNameDeleteSignalError() instead")
    void restServiceFecruAdminPermissionSchemesNameDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void restServiceFecruAdminPermissionSchemesNameDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use restServiceFecruAdminPermissionSchemesNameGetSignalError() instead")
    void restServiceFecruAdminPermissionSchemesNameGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void restServiceFecruAdminPermissionSchemesNameGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use restServiceFecruAdminPermissionSchemesNamePutSignalError() instead")
    void restServiceFecruAdminPermissionSchemesNamePutSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void restServiceFecruAdminPermissionSchemesNamePutSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use restServiceFecruAdminPermissionSchemesPostSignalError() instead")
    void restServiceFecruAdminPermissionSchemesPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void restServiceFecruAdminPermissionSchemesPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use restServiceFecruAdminProjectsGetSignalError() instead")
    void restServiceFecruAdminProjectsGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void restServiceFecruAdminProjectsGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use restServiceFecruAdminProjectsKeyDeleteSignalError() instead")
    void restServiceFecruAdminProjectsKeyDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void restServiceFecruAdminProjectsKeyDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use restServiceFecruAdminProjectsKeyGetSignalError() instead")
    void restServiceFecruAdminProjectsKeyGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void restServiceFecruAdminProjectsKeyGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use restServiceFecruAdminProjectsKeyPutSignalError() instead")
    void restServiceFecruAdminProjectsKeyPutSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void restServiceFecruAdminProjectsKeyPutSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use restServiceFecruAdminProjectsPostSignalError() instead")
    void restServiceFecruAdminProjectsPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void restServiceFecruAdminProjectsPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use restServiceFecruAdminRepositoriesGetSignalError() instead")
    void restServiceFecruAdminRepositoriesGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void restServiceFecruAdminRepositoriesGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use restServiceFecruAdminRepositoriesPostSignalError() instead")
    void restServiceFecruAdminRepositoriesPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void restServiceFecruAdminRepositoriesPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use restServiceFecruAdminRepositoriesRepositoryDeleteSignalError() instead")
    void restServiceFecruAdminRepositoriesRepositoryDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void restServiceFecruAdminRepositoriesRepositoryDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use restServiceFecruAdminRepositoriesRepositoryGetSignalError() instead")
    void restServiceFecruAdminRepositoriesRepositoryGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void restServiceFecruAdminRepositoriesRepositoryGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use restServiceFecruAdminRepositoriesRepositoryPutSignalError() instead")
    void restServiceFecruAdminRepositoriesRepositoryPutSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void restServiceFecruAdminRepositoriesRepositoryPutSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use restServiceFecruAdminRepositoriesRepositoryReindexLinecountPutSignalError() instead")
    void restServiceFecruAdminRepositoriesRepositoryReindexLinecountPutSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void restServiceFecruAdminRepositoriesRepositoryReindexLinecountPutSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use restServiceFecruAdminRepositoriesRepositoryReindexSourcePutSignalError() instead")
    void restServiceFecruAdminRepositoriesRepositoryReindexSourcePutSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void restServiceFecruAdminRepositoriesRepositoryReindexSourcePutSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use restServiceFecruAdminRepositoriesRepositoryRescanMetadataPutSignalError() instead")
    void restServiceFecruAdminRepositoriesRepositoryRescanMetadataPutSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void restServiceFecruAdminRepositoriesRepositoryRescanMetadataPutSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use restServiceFecruAdminRepositoriesV1RepositoryGetSignalError() instead")
    void restServiceFecruAdminRepositoriesV1RepositoryGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void restServiceFecruAdminRepositoriesV1RepositoryGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use restServiceFecruAdminRepositoriesV1RepositoryReindexLinecountPostSignalError() instead")
    void restServiceFecruAdminRepositoriesV1RepositoryReindexLinecountPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void restServiceFecruAdminRepositoriesV1RepositoryReindexLinecountPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use restServiceFecruAdminRepositoriesV1RepositoryReindexSourcePostSignalError() instead")
    void restServiceFecruAdminRepositoriesV1RepositoryReindexSourcePostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void restServiceFecruAdminRepositoriesV1RepositoryReindexSourcePostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use restServiceFecruAdminRepositoriesV1RepositoryRescanMetadataPostSignalError() instead")
    void restServiceFecruAdminRepositoriesV1RepositoryRescanMetadataPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void restServiceFecruAdminRepositoriesV1RepositoryRescanMetadataPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use restServiceFecruAdminUsersGetSignalError() instead")
    void restServiceFecruAdminUsersGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void restServiceFecruAdminUsersGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use restServiceFecruAdminUsersNameDeleteSignalError() instead")
    void restServiceFecruAdminUsersNameDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void restServiceFecruAdminUsersNameDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use restServiceFecruAdminUsersNameGetSignalError() instead")
    void restServiceFecruAdminUsersNameGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void restServiceFecruAdminUsersNameGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use restServiceFecruAdminUsersNameGroupsDeleteSignalError() instead")
    void restServiceFecruAdminUsersNameGroupsDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void restServiceFecruAdminUsersNameGroupsDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use restServiceFecruAdminUsersNameGroupsPutSignalError() instead")
    void restServiceFecruAdminUsersNameGroupsPutSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void restServiceFecruAdminUsersNameGroupsPutSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use restServiceFecruAdminUsersNamePutSignalError() instead")
    void restServiceFecruAdminUsersNamePutSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void restServiceFecruAdminUsersNamePutSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use restServiceFecruAdminUsersPostSignalError() instead")
    void restServiceFecruAdminUsersPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void restServiceFecruAdminUsersPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use restServiceFecruIndexingStatusV1StatusRepositoryGetSignalError() instead")
    void restServiceFecruIndexingStatusV1StatusRepositoryGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void restServiceFecruIndexingStatusV1StatusRepositoryGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use scanSignalError() instead")
    void scanSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void scanSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use scanCvsSignalError() instead")
    void scanCvsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void scanCvsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setPrefSignalError() instead")
    void setPrefSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void setPrefSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use startSignalError() instead")
    void startSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void startSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use startRepositorySignalError() instead")
    void startRepositorySignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void startRepositorySignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use stopSignalError() instead")
    void stopSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void stopSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use stopRepositorySignalError() instead")
    void stopRepositorySignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void stopRepositorySignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateDefaultPermissionsSignalError() instead")
    void updateDefaultPermissionsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void updateDefaultPermissionsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updatePermissionsSignalError() instead")
    void updatePermissionsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void updatePermissionsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateRepositoryUpdatesSignalError() instead")
    void updateRepositoryUpdatesSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void updateRepositoryUpdatesSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use addAllowedReviewerGroupSignalErrorFull() instead")
    void addAllowedReviewerGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addAllowedReviewerGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addAllowedReviewerUserSignalErrorFull() instead")
    void addAllowedReviewerUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addAllowedReviewerUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addDefaultReviewerGroupSignalErrorFull() instead")
    void addDefaultReviewerGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addDefaultReviewerGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addDefaultReviewerUserSignalErrorFull() instead")
    void addDefaultReviewerUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addDefaultReviewerUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addGroupToPermissionsSignalErrorFull() instead")
    void addGroupToPermissionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addGroupToPermissionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addPermissionSchemeAnonymousUsersSignalErrorFull() instead")
    void addPermissionSchemeAnonymousUsersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addPermissionSchemeAnonymousUsersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addPermissionSchemeGroupSignalErrorFull() instead")
    void addPermissionSchemeGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addPermissionSchemeGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addPermissionSchemeLoggedUsersSignalErrorFull() instead")
    void addPermissionSchemeLoggedUsersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addPermissionSchemeLoggedUsersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addPermissionSchemeReviewRoleSignalErrorFull() instead")
    void addPermissionSchemeReviewRoleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addPermissionSchemeReviewRoleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addPermissionSchemeUserSignalErrorFull() instead")
    void addPermissionSchemeUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addPermissionSchemeUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use addRepositorySignalErrorFull() instead")
    void addRepositorySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addRepositorySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use allowedReviewerGroupsSignalErrorFull() instead")
    void allowedReviewerGroupsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void allowedReviewerGroupsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use allowedReviewerUsersSignalErrorFull() instead")
    void allowedReviewerUsersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void allowedReviewerUsersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use defaultPermissionsSignalErrorFull() instead")
    void defaultPermissionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void defaultPermissionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use defaultReviewerGroupsSignalErrorFull() instead")
    void defaultReviewerGroupsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void defaultReviewerGroupsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteAllowedReviewerGroupSignalErrorFull() instead")
    void deleteAllowedReviewerGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteAllowedReviewerGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteAllowedReviewerUserSignalErrorFull() instead")
    void deleteAllowedReviewerUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteAllowedReviewerUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteDefaultReviewerGroupSignalErrorFull() instead")
    void deleteDefaultReviewerGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteDefaultReviewerGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteDefaultReviewerUserSignalErrorFull() instead")
    void deleteDefaultReviewerUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteDefaultReviewerUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deletePermissionSchemeAnonymousUsersSignalErrorFull() instead")
    void deletePermissionSchemeAnonymousUsersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deletePermissionSchemeAnonymousUsersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deletePermissionSchemeGroupSignalErrorFull() instead")
    void deletePermissionSchemeGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deletePermissionSchemeGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deletePermissionSchemeLoggedUsersSignalErrorFull() instead")
    void deletePermissionSchemeLoggedUsersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deletePermissionSchemeLoggedUsersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deletePermissionSchemeRoleSignalErrorFull() instead")
    void deletePermissionSchemeRoleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deletePermissionSchemeRoleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deletePermissionSchemeUserSignalErrorFull() instead")
    void deletePermissionSchemeUserSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deletePermissionSchemeUserSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteRepositorySignalErrorFull() instead")
    void deleteRepositorySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteRepositorySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use disableRepositorySignalErrorFull() instead")
    void disableRepositorySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void disableRepositorySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use doReviewRevisionReindexSignalErrorFull() instead")
    void doReviewRevisionReindexSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void doReviewRevisionReindexSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use doShareContentSignalErrorFull() instead")
    void doShareContentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void doShareContentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use enableRepositorySignalErrorFull() instead")
    void enableRepositorySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void enableRepositorySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fullIncrementalIndexSignalErrorFull() instead")
    void fullIncrementalIndexSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void fullIncrementalIndexSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getGlobalPrefSignalErrorFull() instead")
    void getGlobalPrefSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getGlobalPrefSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getInfoSignalErrorFull() instead")
    void getInfoSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getInfoSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRecentSignalErrorFull() instead")
    void getRecentSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getRecentSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRecentDetailedSignalErrorFull() instead")
    void getRecentDetailedSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getRecentDetailedSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRecentProjectsSignalErrorFull() instead")
    void getRecentProjectsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getRecentProjectsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRecentProjectsDetailedSignalErrorFull() instead")
    void getRecentProjectsDetailedSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getRecentProjectsDetailedSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRecentRepositoriesSignalErrorFull() instead")
    void getRecentRepositoriesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getRecentRepositoriesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRecentRepositoriesDetailedSignalErrorFull() instead")
    void getRecentRepositoriesDetailedSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getRecentRepositoriesDetailedSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRecentReviewsSignalErrorFull() instead")
    void getRecentReviewsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getRecentReviewsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRecentReviewsDetailedSignalErrorFull() instead")
    void getRecentReviewsDetailedSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getRecentReviewsDetailedSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRecentSnippetsSignalErrorFull() instead")
    void getRecentSnippetsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getRecentSnippetsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRecentSnippetsDetailedSignalErrorFull() instead")
    void getRecentSnippetsDetailedSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getRecentSnippetsDetailedSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRecentUsersSignalErrorFull() instead")
    void getRecentUsersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getRecentUsersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRecentUsersDetailedSignalErrorFull() instead")
    void getRecentUsersDetailedSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getRecentUsersDetailedSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRepoPrefSignalErrorFull() instead")
    void getRepoPrefSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getRepoPrefSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use incrementalIndexSignalErrorFull() instead")
    void incrementalIndexSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void incrementalIndexSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listAnonymousUsersPrincipalAssociationSignalErrorFull() instead")
    void listAnonymousUsersPrincipalAssociationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listAnonymousUsersPrincipalAssociationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listDefaultReviewerUsersSignalErrorFull() instead")
    void listDefaultReviewerUsersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listDefaultReviewerUsersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listGroupPrincipalAssociationSignalErrorFull() instead")
    void listGroupPrincipalAssociationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listGroupPrincipalAssociationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listGroupUsersSignalErrorFull() instead")
    void listGroupUsersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listGroupUsersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listLoggedUsersPrincipalAssociationSignalErrorFull() instead")
    void listLoggedUsersPrincipalAssociationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listLoggedUsersPrincipalAssociationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listProjectsSignalErrorFull() instead")
    void listProjectsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listProjectsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listRolesPrincipalAssociationSignalErrorFull() instead")
    void listRolesPrincipalAssociationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listRolesPrincipalAssociationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listUserGroupsSignalErrorFull() instead")
    void listUserGroupsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listUserGroupsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listUserPrincipalAssociationSignalErrorFull() instead")
    void listUserPrincipalAssociationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listUserPrincipalAssociationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use loginSignalErrorFull() instead")
    void loginSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void loginSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use moveAllReviewsSignalErrorFull() instead")
    void moveAllReviewsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void moveAllReviewsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use permissionsSignalErrorFull() instead")
    void permissionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void permissionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use permissionsGroupsSignalErrorFull() instead")
    void permissionsGroupsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void permissionsGroupsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use rebuildSearchIndexSignalErrorFull() instead")
    void rebuildSearchIndexSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void rebuildSearchIndexSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reindexChangesetCommentsSignalErrorFull() instead")
    void reindexChangesetCommentsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void reindexChangesetCommentsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reindexChangesetDiscussionSignalErrorFull() instead")
    void reindexChangesetDiscussionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void reindexChangesetDiscussionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reindexReviewsSignalErrorFull() instead")
    void reindexReviewsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void reindexReviewsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reindexSearchSignalErrorFull() instead")
    void reindexSearchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void reindexSearchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use removeGroupToPermissionsSignalErrorFull() instead")
    void removeGroupToPermissionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void removeGroupToPermissionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use repositoryUpdatesSignalErrorFull() instead")
    void repositoryUpdatesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void repositoryUpdatesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use restServiceFecruAdminGroupsGetSignalErrorFull() instead")
    void restServiceFecruAdminGroupsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void restServiceFecruAdminGroupsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use restServiceFecruAdminGroupsNameDeleteSignalErrorFull() instead")
    void restServiceFecruAdminGroupsNameDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void restServiceFecruAdminGroupsNameDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use restServiceFecruAdminGroupsNameGetSignalErrorFull() instead")
    void restServiceFecruAdminGroupsNameGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void restServiceFecruAdminGroupsNameGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use restServiceFecruAdminGroupsNamePutSignalErrorFull() instead")
    void restServiceFecruAdminGroupsNamePutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void restServiceFecruAdminGroupsNamePutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use restServiceFecruAdminGroupsNameUsersDeleteSignalErrorFull() instead")
    void restServiceFecruAdminGroupsNameUsersDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void restServiceFecruAdminGroupsNameUsersDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use restServiceFecruAdminGroupsNameUsersPutSignalErrorFull() instead")
    void restServiceFecruAdminGroupsNameUsersPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void restServiceFecruAdminGroupsNameUsersPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use restServiceFecruAdminGroupsPostSignalErrorFull() instead")
    void restServiceFecruAdminGroupsPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void restServiceFecruAdminGroupsPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use restServiceFecruAdminPermissionSchemesGetSignalErrorFull() instead")
    void restServiceFecruAdminPermissionSchemesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void restServiceFecruAdminPermissionSchemesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use restServiceFecruAdminPermissionSchemesNameDeleteSignalErrorFull() instead")
    void restServiceFecruAdminPermissionSchemesNameDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void restServiceFecruAdminPermissionSchemesNameDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use restServiceFecruAdminPermissionSchemesNameGetSignalErrorFull() instead")
    void restServiceFecruAdminPermissionSchemesNameGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void restServiceFecruAdminPermissionSchemesNameGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use restServiceFecruAdminPermissionSchemesNamePutSignalErrorFull() instead")
    void restServiceFecruAdminPermissionSchemesNamePutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void restServiceFecruAdminPermissionSchemesNamePutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use restServiceFecruAdminPermissionSchemesPostSignalErrorFull() instead")
    void restServiceFecruAdminPermissionSchemesPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void restServiceFecruAdminPermissionSchemesPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use restServiceFecruAdminProjectsGetSignalErrorFull() instead")
    void restServiceFecruAdminProjectsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void restServiceFecruAdminProjectsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use restServiceFecruAdminProjectsKeyDeleteSignalErrorFull() instead")
    void restServiceFecruAdminProjectsKeyDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void restServiceFecruAdminProjectsKeyDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use restServiceFecruAdminProjectsKeyGetSignalErrorFull() instead")
    void restServiceFecruAdminProjectsKeyGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void restServiceFecruAdminProjectsKeyGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use restServiceFecruAdminProjectsKeyPutSignalErrorFull() instead")
    void restServiceFecruAdminProjectsKeyPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void restServiceFecruAdminProjectsKeyPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use restServiceFecruAdminProjectsPostSignalErrorFull() instead")
    void restServiceFecruAdminProjectsPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void restServiceFecruAdminProjectsPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use restServiceFecruAdminRepositoriesGetSignalErrorFull() instead")
    void restServiceFecruAdminRepositoriesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void restServiceFecruAdminRepositoriesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use restServiceFecruAdminRepositoriesPostSignalErrorFull() instead")
    void restServiceFecruAdminRepositoriesPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void restServiceFecruAdminRepositoriesPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use restServiceFecruAdminRepositoriesRepositoryDeleteSignalErrorFull() instead")
    void restServiceFecruAdminRepositoriesRepositoryDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void restServiceFecruAdminRepositoriesRepositoryDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use restServiceFecruAdminRepositoriesRepositoryGetSignalErrorFull() instead")
    void restServiceFecruAdminRepositoriesRepositoryGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void restServiceFecruAdminRepositoriesRepositoryGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use restServiceFecruAdminRepositoriesRepositoryPutSignalErrorFull() instead")
    void restServiceFecruAdminRepositoriesRepositoryPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void restServiceFecruAdminRepositoriesRepositoryPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use restServiceFecruAdminRepositoriesRepositoryReindexLinecountPutSignalErrorFull() instead")
    void restServiceFecruAdminRepositoriesRepositoryReindexLinecountPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void restServiceFecruAdminRepositoriesRepositoryReindexLinecountPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use restServiceFecruAdminRepositoriesRepositoryReindexSourcePutSignalErrorFull() instead")
    void restServiceFecruAdminRepositoriesRepositoryReindexSourcePutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void restServiceFecruAdminRepositoriesRepositoryReindexSourcePutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use restServiceFecruAdminRepositoriesRepositoryRescanMetadataPutSignalErrorFull() instead")
    void restServiceFecruAdminRepositoriesRepositoryRescanMetadataPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void restServiceFecruAdminRepositoriesRepositoryRescanMetadataPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use restServiceFecruAdminRepositoriesV1RepositoryGetSignalErrorFull() instead")
    void restServiceFecruAdminRepositoriesV1RepositoryGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void restServiceFecruAdminRepositoriesV1RepositoryGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use restServiceFecruAdminRepositoriesV1RepositoryReindexLinecountPostSignalErrorFull() instead")
    void restServiceFecruAdminRepositoriesV1RepositoryReindexLinecountPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void restServiceFecruAdminRepositoriesV1RepositoryReindexLinecountPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use restServiceFecruAdminRepositoriesV1RepositoryReindexSourcePostSignalErrorFull() instead")
    void restServiceFecruAdminRepositoriesV1RepositoryReindexSourcePostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void restServiceFecruAdminRepositoriesV1RepositoryReindexSourcePostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use restServiceFecruAdminRepositoriesV1RepositoryRescanMetadataPostSignalErrorFull() instead")
    void restServiceFecruAdminRepositoriesV1RepositoryRescanMetadataPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void restServiceFecruAdminRepositoriesV1RepositoryRescanMetadataPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use restServiceFecruAdminUsersGetSignalErrorFull() instead")
    void restServiceFecruAdminUsersGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void restServiceFecruAdminUsersGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use restServiceFecruAdminUsersNameDeleteSignalErrorFull() instead")
    void restServiceFecruAdminUsersNameDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void restServiceFecruAdminUsersNameDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use restServiceFecruAdminUsersNameGetSignalErrorFull() instead")
    void restServiceFecruAdminUsersNameGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void restServiceFecruAdminUsersNameGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use restServiceFecruAdminUsersNameGroupsDeleteSignalErrorFull() instead")
    void restServiceFecruAdminUsersNameGroupsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void restServiceFecruAdminUsersNameGroupsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use restServiceFecruAdminUsersNameGroupsPutSignalErrorFull() instead")
    void restServiceFecruAdminUsersNameGroupsPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void restServiceFecruAdminUsersNameGroupsPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use restServiceFecruAdminUsersNamePutSignalErrorFull() instead")
    void restServiceFecruAdminUsersNamePutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void restServiceFecruAdminUsersNamePutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use restServiceFecruAdminUsersPostSignalErrorFull() instead")
    void restServiceFecruAdminUsersPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void restServiceFecruAdminUsersPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use restServiceFecruIndexingStatusV1StatusRepositoryGetSignalErrorFull() instead")
    void restServiceFecruIndexingStatusV1StatusRepositoryGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void restServiceFecruIndexingStatusV1StatusRepositoryGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use scanSignalErrorFull() instead")
    void scanSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void scanSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use scanCvsSignalErrorFull() instead")
    void scanCvsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void scanCvsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use setPrefSignalErrorFull() instead")
    void setPrefSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void setPrefSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use startSignalErrorFull() instead")
    void startSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void startSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use startRepositorySignalErrorFull() instead")
    void startRepositorySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void startRepositorySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use stopSignalErrorFull() instead")
    void stopSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void stopSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use stopRepositorySignalErrorFull() instead")
    void stopRepositorySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void stopRepositorySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateDefaultPermissionsSignalErrorFull() instead")
    void updateDefaultPermissionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateDefaultPermissionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updatePermissionsSignalErrorFull() instead")
    void updatePermissionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updatePermissionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateRepositoryUpdatesSignalErrorFull() instead")
    void updateRepositoryUpdatesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateRepositoryUpdatesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
