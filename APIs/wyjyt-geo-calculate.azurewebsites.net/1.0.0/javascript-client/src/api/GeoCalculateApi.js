/**
 * Wyjyt - Geo Calculate
 * Widget API to calculate Geo Coordinates, Geo Fences and Sun, Moon, Sky, Eclipse information.  See https://wyjyt.com
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import GeoConvertRequest from '../model/GeoConvertRequest';
import GeoConvertResponse from '../model/GeoConvertResponse';
import GeoDistanceRequest from '../model/GeoDistanceRequest';
import GeoDistanceResponse from '../model/GeoDistanceResponse';
import GeoFenceRequest from '../model/GeoFenceRequest';
import GeoFenceResponse from '../model/GeoFenceResponse';
import GeoSkyRequest from '../model/GeoSkyRequest';
import GeoSkyResponse from '../model/GeoSkyResponse';
import WyjytErrorResponse from '../model/WyjytErrorResponse';

/**
* GeoCalculate service.
* @module api/GeoCalculateApi
* @version 1.0.0
*/
export default class GeoCalculateApi {

    /**
    * Constructs a new GeoCalculateApi. 
    * @alias module:api/GeoCalculateApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the convert operation.
     * @callback module:api/GeoCalculateApi~convertCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GeoConvertResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Convert the list of geo coordinates to a standard format - (latlon | utm | mgrs | ecef | epsg3857 | georef | cartesian)
     * Convert the list of geo coordinates to a standard format - (latlon | utm | mgrs | ecef | epsg3857 | georef | cartesian)
     * @param {module:model/GeoConvertRequest} geoConvertRequest 
     * @param {module:api/GeoCalculateApi~convertCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GeoConvertResponse}
     */
    convert(geoConvertRequest, callback) {
      let postBody = geoConvertRequest;
      // verify the required parameter 'geoConvertRequest' is set
      if (geoConvertRequest === undefined || geoConvertRequest === null) {
        throw new Error("Missing the required parameter 'geoConvertRequest' when calling convert");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GeoConvertResponse;
      return this.apiClient.callApi(
        '/Convert', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the distance operation.
     * @callback module:api/GeoCalculateApi~distanceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GeoDistanceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Calculate the distance between two geo coordinates.
     * Calculate the distance between two geo coordinates.
     * @param {module:model/GeoDistanceRequest} geoDistanceRequest 
     * @param {module:api/GeoCalculateApi~distanceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GeoDistanceResponse}
     */
    distance(geoDistanceRequest, callback) {
      let postBody = geoDistanceRequest;
      // verify the required parameter 'geoDistanceRequest' is set
      if (geoDistanceRequest === undefined || geoDistanceRequest === null) {
        throw new Error("Missing the required parameter 'geoDistanceRequest' when calling distance");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GeoDistanceResponse;
      return this.apiClient.callApi(
        '/Distance', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the fence operation.
     * @callback module:api/GeoCalculateApi~fenceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GeoFenceResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Check if a list of coordinates are inside of a fence of coordinates.
     * Check if a list of coordinates are inside of a fence of coordinates.
     * @param {module:model/GeoFenceRequest} geoFenceRequest 
     * @param {module:api/GeoCalculateApi~fenceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GeoFenceResponse}
     */
    fence(geoFenceRequest, callback) {
      let postBody = geoFenceRequest;
      // verify the required parameter 'geoFenceRequest' is set
      if (geoFenceRequest === undefined || geoFenceRequest === null) {
        throw new Error("Missing the required parameter 'geoFenceRequest' when calling fence");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GeoFenceResponse;
      return this.apiClient.callApi(
        '/Fence', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sky operation.
     * @callback module:api/GeoCalculateApi~skyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GeoSkyResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Calculate sun, moon, eclipse and sky information for the date and location.
     * Calculate sun, moon, eclipse and sky information for the date and location.
     * @param {module:model/GeoSkyRequest} geoSkyRequest 
     * @param {module:api/GeoCalculateApi~skyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GeoSkyResponse}
     */
    sky(geoSkyRequest, callback) {
      let postBody = geoSkyRequest;
      // verify the required parameter 'geoSkyRequest' is set
      if (geoSkyRequest === undefined || geoSkyRequest === null) {
        throw new Error("Missing the required parameter 'geoSkyRequest' when calling sky");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GeoSkyResponse;
      return this.apiClient.callApi(
        '/Sky', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
