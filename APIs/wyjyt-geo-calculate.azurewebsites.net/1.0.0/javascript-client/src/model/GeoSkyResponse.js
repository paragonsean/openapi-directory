/**
 * Wyjyt - Geo Calculate
 * Widget API to calculate Geo Coordinates, Geo Fences and Sun, Moon, Sky, Eclipse information.  See https://wyjyt.com
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GeoEventDto from './GeoEventDto';
import GeoMoonDto from './GeoMoonDto';
import GeoSunDto from './GeoSunDto';

/**
 * The GeoSkyResponse model module.
 * @module model/GeoSkyResponse
 * @version 1.0.0
 */
class GeoSkyResponse {
    /**
     * Constructs a new <code>GeoSkyResponse</code>.
     * @alias module:model/GeoSkyResponse
     */
    constructor() { 
        
        GeoSkyResponse.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GeoSkyResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GeoSkyResponse} obj Optional instance to populate.
     * @return {module:model/GeoSkyResponse} The populated <code>GeoSkyResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GeoSkyResponse();

            if (data.hasOwnProperty('event')) {
                obj['event'] = GeoEventDto.constructFromObject(data['event']);
            }
            if (data.hasOwnProperty('moon')) {
                obj['moon'] = GeoMoonDto.constructFromObject(data['moon']);
            }
            if (data.hasOwnProperty('sun')) {
                obj['sun'] = GeoSunDto.constructFromObject(data['sun']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GeoSkyResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GeoSkyResponse</code>.
     */
    static validateJSON(data) {
        // validate the optional field `event`
        if (data['event']) { // data not null
          GeoEventDto.validateJSON(data['event']);
        }
        // validate the optional field `moon`
        if (data['moon']) { // data not null
          GeoMoonDto.validateJSON(data['moon']);
        }
        // validate the optional field `sun`
        if (data['sun']) { // data not null
          GeoSunDto.validateJSON(data['sun']);
        }

        return true;
    }


}



/**
 * @member {module:model/GeoEventDto} event
 */
GeoSkyResponse.prototype['event'] = undefined;

/**
 * @member {module:model/GeoMoonDto} moon
 */
GeoSkyResponse.prototype['moon'] = undefined;

/**
 * @member {module:model/GeoSunDto} sun
 */
GeoSkyResponse.prototype['sun'] = undefined;






export default GeoSkyResponse;

