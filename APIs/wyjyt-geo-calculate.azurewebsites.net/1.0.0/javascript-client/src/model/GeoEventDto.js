/**
 * Wyjyt - Geo Calculate
 * Widget API to calculate Geo Coordinates, Geo Fences and Sun, Moon, Sky, Eclipse information.  See https://wyjyt.com
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The GeoEventDto model module.
 * @module model/GeoEventDto
 * @version 1.0.0
 */
class GeoEventDto {
    /**
     * Constructs a new <code>GeoEventDto</code>.
     * Celestial event information.
     * @alias module:model/GeoEventDto
     */
    constructor() { 
        
        GeoEventDto.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GeoEventDto</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GeoEventDto} obj Optional instance to populate.
     * @return {module:model/GeoEventDto} The populated <code>GeoEventDto</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GeoEventDto();

            if (data.hasOwnProperty('fall')) {
                obj['fall'] = ApiClient.convertToType(data['fall'], 'Date');
            }
            if (data.hasOwnProperty('lastApogee')) {
                obj['lastApogee'] = ApiClient.convertToType(data['lastApogee'], 'Date');
            }
            if (data.hasOwnProperty('lastPerigee')) {
                obj['lastPerigee'] = ApiClient.convertToType(data['lastPerigee'], 'Date');
            }
            if (data.hasOwnProperty('nextApogee')) {
                obj['nextApogee'] = ApiClient.convertToType(data['nextApogee'], 'Date');
            }
            if (data.hasOwnProperty('nextPerigee')) {
                obj['nextPerigee'] = ApiClient.convertToType(data['nextPerigee'], 'Date');
            }
            if (data.hasOwnProperty('spring')) {
                obj['spring'] = ApiClient.convertToType(data['spring'], 'Date');
            }
            if (data.hasOwnProperty('summer')) {
                obj['summer'] = ApiClient.convertToType(data['summer'], 'Date');
            }
            if (data.hasOwnProperty('winter')) {
                obj['winter'] = ApiClient.convertToType(data['winter'], 'Date');
            }
            if (data.hasOwnProperty('zodiacSign')) {
                obj['zodiacSign'] = ApiClient.convertToType(data['zodiacSign'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GeoEventDto</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GeoEventDto</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['zodiacSign'] && !(typeof data['zodiacSign'] === 'string' || data['zodiacSign'] instanceof String)) {
            throw new Error("Expected the field `zodiacSign` to be a primitive type in the JSON string but got " + data['zodiacSign']);
        }

        return true;
    }


}



/**
 * @member {Date} fall
 */
GeoEventDto.prototype['fall'] = undefined;

/**
 * @member {Date} lastApogee
 */
GeoEventDto.prototype['lastApogee'] = undefined;

/**
 * @member {Date} lastPerigee
 */
GeoEventDto.prototype['lastPerigee'] = undefined;

/**
 * @member {Date} nextApogee
 */
GeoEventDto.prototype['nextApogee'] = undefined;

/**
 * @member {Date} nextPerigee
 */
GeoEventDto.prototype['nextPerigee'] = undefined;

/**
 * @member {Date} spring
 */
GeoEventDto.prototype['spring'] = undefined;

/**
 * @member {Date} summer
 */
GeoEventDto.prototype['summer'] = undefined;

/**
 * @member {Date} winter
 */
GeoEventDto.prototype['winter'] = undefined;

/**
 * @member {String} zodiacSign
 */
GeoEventDto.prototype['zodiacSign'] = undefined;






export default GeoEventDto;

