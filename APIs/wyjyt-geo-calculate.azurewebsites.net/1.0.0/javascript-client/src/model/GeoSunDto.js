/**
 * Wyjyt - Geo Calculate
 * Widget API to calculate Geo Coordinates, Geo Fences and Sun, Moon, Sky, Eclipse information.  See https://wyjyt.com
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import SolarEclipseDetails from './SolarEclipseDetails';

/**
 * The GeoSunDto model module.
 * @module model/GeoSunDto
 * @version 1.0.0
 */
class GeoSunDto {
    /**
     * Constructs a new <code>GeoSunDto</code>.
     * Solar information.
     * @alias module:model/GeoSunDto
     */
    constructor() { 
        
        GeoSunDto.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GeoSunDto</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GeoSunDto} obj Optional instance to populate.
     * @return {module:model/GeoSunDto} The populated <code>GeoSunDto</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GeoSunDto();

            if (data.hasOwnProperty('altitude')) {
                obj['altitude'] = ApiClient.convertToType(data['altitude'], 'Number');
            }
            if (data.hasOwnProperty('azimuth')) {
                obj['azimuth'] = ApiClient.convertToType(data['azimuth'], 'Number');
            }
            if (data.hasOwnProperty('dawn')) {
                obj['dawn'] = ApiClient.convertToType(data['dawn'], 'Date');
            }
            if (data.hasOwnProperty('declination')) {
                obj['declination'] = ApiClient.convertToType(data['declination'], 'Number');
            }
            if (data.hasOwnProperty('dusk')) {
                obj['dusk'] = ApiClient.convertToType(data['dusk'], 'Date');
            }
            if (data.hasOwnProperty('isUp')) {
                obj['isUp'] = ApiClient.convertToType(data['isUp'], 'Boolean');
            }
            if (data.hasOwnProperty('lastEclipse')) {
                obj['lastEclipse'] = SolarEclipseDetails.constructFromObject(data['lastEclipse']);
            }
            if (data.hasOwnProperty('nextEclipse')) {
                obj['nextEclipse'] = SolarEclipseDetails.constructFromObject(data['nextEclipse']);
            }
            if (data.hasOwnProperty('noon')) {
                obj['noon'] = ApiClient.convertToType(data['noon'], 'Date');
            }
            if (data.hasOwnProperty('rightAscension')) {
                obj['rightAscension'] = ApiClient.convertToType(data['rightAscension'], 'Number');
            }
            if (data.hasOwnProperty('rise')) {
                obj['rise'] = ApiClient.convertToType(data['rise'], 'Date');
            }
            if (data.hasOwnProperty('set')) {
                obj['set'] = ApiClient.convertToType(data['set'], 'Date');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GeoSunDto</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GeoSunDto</code>.
     */
    static validateJSON(data) {
        // validate the optional field `lastEclipse`
        if (data['lastEclipse']) { // data not null
          SolarEclipseDetails.validateJSON(data['lastEclipse']);
        }
        // validate the optional field `nextEclipse`
        if (data['nextEclipse']) { // data not null
          SolarEclipseDetails.validateJSON(data['nextEclipse']);
        }

        return true;
    }


}



/**
 * @member {Number} altitude
 */
GeoSunDto.prototype['altitude'] = undefined;

/**
 * @member {Number} azimuth
 */
GeoSunDto.prototype['azimuth'] = undefined;

/**
 * @member {Date} dawn
 */
GeoSunDto.prototype['dawn'] = undefined;

/**
 * @member {Number} declination
 */
GeoSunDto.prototype['declination'] = undefined;

/**
 * @member {Date} dusk
 */
GeoSunDto.prototype['dusk'] = undefined;

/**
 * @member {Boolean} isUp
 */
GeoSunDto.prototype['isUp'] = undefined;

/**
 * @member {module:model/SolarEclipseDetails} lastEclipse
 */
GeoSunDto.prototype['lastEclipse'] = undefined;

/**
 * @member {module:model/SolarEclipseDetails} nextEclipse
 */
GeoSunDto.prototype['nextEclipse'] = undefined;

/**
 * @member {Date} noon
 */
GeoSunDto.prototype['noon'] = undefined;

/**
 * @member {Number} rightAscension
 */
GeoSunDto.prototype['rightAscension'] = undefined;

/**
 * @member {Date} rise
 */
GeoSunDto.prototype['rise'] = undefined;

/**
 * @member {Date} set
 */
GeoSunDto.prototype['set'] = undefined;






export default GeoSunDto;

