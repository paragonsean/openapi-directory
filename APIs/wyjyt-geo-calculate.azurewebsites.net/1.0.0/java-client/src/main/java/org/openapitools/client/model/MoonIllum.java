/*
 * Wyjyt - Geo Calculate
 * Widget API to calculate Geo Coordinates, Geo Fences and Sun, Moon, Sky, Eclipse information.  See https://wyjyt.com
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * MoonIllum
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:59:15.403526-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class MoonIllum {
  public static final String SERIALIZED_NAME_ANGLE = "angle";
  @SerializedName(SERIALIZED_NAME_ANGLE)
  private Double angle;

  public static final String SERIALIZED_NAME_FRACTION = "fraction";
  @SerializedName(SERIALIZED_NAME_FRACTION)
  private Double fraction;

  public static final String SERIALIZED_NAME_PHASE = "phase";
  @SerializedName(SERIALIZED_NAME_PHASE)
  private Double phase;

  public static final String SERIALIZED_NAME_PHASE_NAME = "phaseName";
  @SerializedName(SERIALIZED_NAME_PHASE_NAME)
  private String phaseName;

  /**
   * Gets or Sets phaseNameEnum
   */
  @JsonAdapter(PhaseNameEnumEnum.Adapter.class)
  public enum PhaseNameEnumEnum {
    NUMBER_0(0),
    
    NUMBER_1(1),
    
    NUMBER_2(2),
    
    NUMBER_3(3),
    
    NUMBER_4(4),
    
    NUMBER_5(5),
    
    NUMBER_6(6),
    
    NUMBER_7(7);

    private Integer value;

    PhaseNameEnumEnum(Integer value) {
      this.value = value;
    }

    public Integer getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PhaseNameEnumEnum fromValue(Integer value) {
      for (PhaseNameEnumEnum b : PhaseNameEnumEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PhaseNameEnumEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PhaseNameEnumEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PhaseNameEnumEnum read(final JsonReader jsonReader) throws IOException {
        Integer value =  jsonReader.nextInt();
        return PhaseNameEnumEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      Integer value = jsonElement.getAsInt();
      PhaseNameEnumEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PHASE_NAME_ENUM = "phaseNameEnum";
  @SerializedName(SERIALIZED_NAME_PHASE_NAME_ENUM)
  private PhaseNameEnumEnum phaseNameEnum = PhaseNameEnumEnum.NUMBER_0;

  public MoonIllum() {
  }

  public MoonIllum angle(Double angle) {
    this.angle = angle;
    return this;
  }

  /**
   * Get angle
   * @return angle
   */
  @javax.annotation.Nullable
  public Double getAngle() {
    return angle;
  }

  public void setAngle(Double angle) {
    this.angle = angle;
  }


  public MoonIllum fraction(Double fraction) {
    this.fraction = fraction;
    return this;
  }

  /**
   * Get fraction
   * @return fraction
   */
  @javax.annotation.Nullable
  public Double getFraction() {
    return fraction;
  }

  public void setFraction(Double fraction) {
    this.fraction = fraction;
  }


  public MoonIllum phase(Double phase) {
    this.phase = phase;
    return this;
  }

  /**
   * Get phase
   * @return phase
   */
  @javax.annotation.Nullable
  public Double getPhase() {
    return phase;
  }

  public void setPhase(Double phase) {
    this.phase = phase;
  }


  public MoonIllum phaseName(String phaseName) {
    this.phaseName = phaseName;
    return this;
  }

  /**
   * Get phaseName
   * @return phaseName
   */
  @javax.annotation.Nullable
  public String getPhaseName() {
    return phaseName;
  }

  public void setPhaseName(String phaseName) {
    this.phaseName = phaseName;
  }


  public MoonIllum phaseNameEnum(PhaseNameEnumEnum phaseNameEnum) {
    this.phaseNameEnum = phaseNameEnum;
    return this;
  }

  /**
   * Get phaseNameEnum
   * @return phaseNameEnum
   */
  @javax.annotation.Nullable
  public PhaseNameEnumEnum getPhaseNameEnum() {
    return phaseNameEnum;
  }

  public void setPhaseNameEnum(PhaseNameEnumEnum phaseNameEnum) {
    this.phaseNameEnum = phaseNameEnum;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MoonIllum moonIllum = (MoonIllum) o;
    return Objects.equals(this.angle, moonIllum.angle) &&
        Objects.equals(this.fraction, moonIllum.fraction) &&
        Objects.equals(this.phase, moonIllum.phase) &&
        Objects.equals(this.phaseName, moonIllum.phaseName) &&
        Objects.equals(this.phaseNameEnum, moonIllum.phaseNameEnum);
  }

  @Override
  public int hashCode() {
    return Objects.hash(angle, fraction, phase, phaseName, phaseNameEnum);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MoonIllum {\n");
    sb.append("    angle: ").append(toIndentedString(angle)).append("\n");
    sb.append("    fraction: ").append(toIndentedString(fraction)).append("\n");
    sb.append("    phase: ").append(toIndentedString(phase)).append("\n");
    sb.append("    phaseName: ").append(toIndentedString(phaseName)).append("\n");
    sb.append("    phaseNameEnum: ").append(toIndentedString(phaseNameEnum)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("angle");
    openapiFields.add("fraction");
    openapiFields.add("phase");
    openapiFields.add("phaseName");
    openapiFields.add("phaseNameEnum");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MoonIllum
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MoonIllum.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MoonIllum is not found in the empty JSON string", MoonIllum.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MoonIllum.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MoonIllum` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("phaseName") != null && !jsonObj.get("phaseName").isJsonNull()) && !jsonObj.get("phaseName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `phaseName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("phaseName").toString()));
      }
      // validate the optional field `phaseNameEnum`
      if (jsonObj.get("phaseNameEnum") != null && !jsonObj.get("phaseNameEnum").isJsonNull()) {
        PhaseNameEnumEnum.validateJsonElement(jsonObj.get("phaseNameEnum"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MoonIllum.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MoonIllum' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MoonIllum> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MoonIllum.class));

       return (TypeAdapter<T>) new TypeAdapter<MoonIllum>() {
           @Override
           public void write(JsonWriter out, MoonIllum value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MoonIllum read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MoonIllum given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MoonIllum
   * @throws IOException if the JSON string is invalid with respect to MoonIllum
   */
  public static MoonIllum fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MoonIllum.class);
  }

  /**
   * Convert an instance of MoonIllum to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

