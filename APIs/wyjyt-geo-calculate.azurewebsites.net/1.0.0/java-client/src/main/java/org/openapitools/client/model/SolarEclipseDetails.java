/*
 * Wyjyt - Geo Calculate
 * Widget API to calculate Geo Coordinates, Geo Fences and Sun, Moon, Sky, Eclipse information.  See https://wyjyt.com
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * SolarEclipseDetails
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:59:15.403526-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SolarEclipseDetails {
  public static final String SERIALIZED_NAME_AOR_T_DURATION = "aorTDuration";
  @SerializedName(SERIALIZED_NAME_AOR_T_DURATION)
  private String aorTDuration;

  public static final String SERIALIZED_NAME_AOR_T_ECLIPSE_BEGIN = "aorTEclipseBegin";
  @SerializedName(SERIALIZED_NAME_AOR_T_ECLIPSE_BEGIN)
  private OffsetDateTime aorTEclipseBegin;

  public static final String SERIALIZED_NAME_AOR_T_ECLIPSE_END = "aorTEclipseEnd";
  @SerializedName(SERIALIZED_NAME_AOR_T_ECLIPSE_END)
  private OffsetDateTime aorTEclipseEnd;

  public static final String SERIALIZED_NAME_DATE = "date";
  @SerializedName(SERIALIZED_NAME_DATE)
  private OffsetDateTime date;

  public static final String SERIALIZED_NAME_HAS_ECLIPSE_DATA = "hasEclipseData";
  @SerializedName(SERIALIZED_NAME_HAS_ECLIPSE_DATA)
  private Boolean hasEclipseData;

  public static final String SERIALIZED_NAME_MAXIMUM_ECLIPSE = "maximumEclipse";
  @SerializedName(SERIALIZED_NAME_MAXIMUM_ECLIPSE)
  private OffsetDateTime maximumEclipse;

  public static final String SERIALIZED_NAME_PARTIAL_ECLISPE_BEGIN = "partialEclispeBegin";
  @SerializedName(SERIALIZED_NAME_PARTIAL_ECLISPE_BEGIN)
  private OffsetDateTime partialEclispeBegin;

  public static final String SERIALIZED_NAME_PARTIAL_ECLISPE_END = "partialEclispeEnd";
  @SerializedName(SERIALIZED_NAME_PARTIAL_ECLISPE_END)
  private OffsetDateTime partialEclispeEnd;

  /**
   * Gets or Sets type
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    NUMBER_0(0),
    
    NUMBER_1(1),
    
    NUMBER_2(2);

    private Integer value;

    TypeEnum(Integer value) {
      this.value = value;
    }

    public Integer getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(Integer value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        Integer value =  jsonReader.nextInt();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      Integer value = jsonElement.getAsInt();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type = TypeEnum.NUMBER_0;

  public SolarEclipseDetails() {
  }

  public SolarEclipseDetails aorTDuration(String aorTDuration) {
    this.aorTDuration = aorTDuration;
    return this;
  }

  /**
   * Get aorTDuration
   * @return aorTDuration
   */
  @javax.annotation.Nullable
  public String getAorTDuration() {
    return aorTDuration;
  }

  public void setAorTDuration(String aorTDuration) {
    this.aorTDuration = aorTDuration;
  }


  public SolarEclipseDetails aorTEclipseBegin(OffsetDateTime aorTEclipseBegin) {
    this.aorTEclipseBegin = aorTEclipseBegin;
    return this;
  }

  /**
   * Get aorTEclipseBegin
   * @return aorTEclipseBegin
   */
  @javax.annotation.Nullable
  public OffsetDateTime getAorTEclipseBegin() {
    return aorTEclipseBegin;
  }

  public void setAorTEclipseBegin(OffsetDateTime aorTEclipseBegin) {
    this.aorTEclipseBegin = aorTEclipseBegin;
  }


  public SolarEclipseDetails aorTEclipseEnd(OffsetDateTime aorTEclipseEnd) {
    this.aorTEclipseEnd = aorTEclipseEnd;
    return this;
  }

  /**
   * Get aorTEclipseEnd
   * @return aorTEclipseEnd
   */
  @javax.annotation.Nullable
  public OffsetDateTime getAorTEclipseEnd() {
    return aorTEclipseEnd;
  }

  public void setAorTEclipseEnd(OffsetDateTime aorTEclipseEnd) {
    this.aorTEclipseEnd = aorTEclipseEnd;
  }


  public SolarEclipseDetails date(OffsetDateTime date) {
    this.date = date;
    return this;
  }

  /**
   * Get date
   * @return date
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDate() {
    return date;
  }

  public void setDate(OffsetDateTime date) {
    this.date = date;
  }


  public SolarEclipseDetails hasEclipseData(Boolean hasEclipseData) {
    this.hasEclipseData = hasEclipseData;
    return this;
  }

  /**
   * Get hasEclipseData
   * @return hasEclipseData
   */
  @javax.annotation.Nullable
  public Boolean getHasEclipseData() {
    return hasEclipseData;
  }

  public void setHasEclipseData(Boolean hasEclipseData) {
    this.hasEclipseData = hasEclipseData;
  }


  public SolarEclipseDetails maximumEclipse(OffsetDateTime maximumEclipse) {
    this.maximumEclipse = maximumEclipse;
    return this;
  }

  /**
   * Get maximumEclipse
   * @return maximumEclipse
   */
  @javax.annotation.Nullable
  public OffsetDateTime getMaximumEclipse() {
    return maximumEclipse;
  }

  public void setMaximumEclipse(OffsetDateTime maximumEclipse) {
    this.maximumEclipse = maximumEclipse;
  }


  public SolarEclipseDetails partialEclispeBegin(OffsetDateTime partialEclispeBegin) {
    this.partialEclispeBegin = partialEclispeBegin;
    return this;
  }

  /**
   * Get partialEclispeBegin
   * @return partialEclispeBegin
   */
  @javax.annotation.Nullable
  public OffsetDateTime getPartialEclispeBegin() {
    return partialEclispeBegin;
  }

  public void setPartialEclispeBegin(OffsetDateTime partialEclispeBegin) {
    this.partialEclispeBegin = partialEclispeBegin;
  }


  public SolarEclipseDetails partialEclispeEnd(OffsetDateTime partialEclispeEnd) {
    this.partialEclispeEnd = partialEclispeEnd;
    return this;
  }

  /**
   * Get partialEclispeEnd
   * @return partialEclispeEnd
   */
  @javax.annotation.Nullable
  public OffsetDateTime getPartialEclispeEnd() {
    return partialEclispeEnd;
  }

  public void setPartialEclispeEnd(OffsetDateTime partialEclispeEnd) {
    this.partialEclispeEnd = partialEclispeEnd;
  }


  public SolarEclipseDetails type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nullable
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SolarEclipseDetails solarEclipseDetails = (SolarEclipseDetails) o;
    return Objects.equals(this.aorTDuration, solarEclipseDetails.aorTDuration) &&
        Objects.equals(this.aorTEclipseBegin, solarEclipseDetails.aorTEclipseBegin) &&
        Objects.equals(this.aorTEclipseEnd, solarEclipseDetails.aorTEclipseEnd) &&
        Objects.equals(this.date, solarEclipseDetails.date) &&
        Objects.equals(this.hasEclipseData, solarEclipseDetails.hasEclipseData) &&
        Objects.equals(this.maximumEclipse, solarEclipseDetails.maximumEclipse) &&
        Objects.equals(this.partialEclispeBegin, solarEclipseDetails.partialEclispeBegin) &&
        Objects.equals(this.partialEclispeEnd, solarEclipseDetails.partialEclispeEnd) &&
        Objects.equals(this.type, solarEclipseDetails.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(aorTDuration, aorTEclipseBegin, aorTEclipseEnd, date, hasEclipseData, maximumEclipse, partialEclispeBegin, partialEclispeEnd, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SolarEclipseDetails {\n");
    sb.append("    aorTDuration: ").append(toIndentedString(aorTDuration)).append("\n");
    sb.append("    aorTEclipseBegin: ").append(toIndentedString(aorTEclipseBegin)).append("\n");
    sb.append("    aorTEclipseEnd: ").append(toIndentedString(aorTEclipseEnd)).append("\n");
    sb.append("    date: ").append(toIndentedString(date)).append("\n");
    sb.append("    hasEclipseData: ").append(toIndentedString(hasEclipseData)).append("\n");
    sb.append("    maximumEclipse: ").append(toIndentedString(maximumEclipse)).append("\n");
    sb.append("    partialEclispeBegin: ").append(toIndentedString(partialEclispeBegin)).append("\n");
    sb.append("    partialEclispeEnd: ").append(toIndentedString(partialEclispeEnd)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("aorTDuration");
    openapiFields.add("aorTEclipseBegin");
    openapiFields.add("aorTEclipseEnd");
    openapiFields.add("date");
    openapiFields.add("hasEclipseData");
    openapiFields.add("maximumEclipse");
    openapiFields.add("partialEclispeBegin");
    openapiFields.add("partialEclispeEnd");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SolarEclipseDetails
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SolarEclipseDetails.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SolarEclipseDetails is not found in the empty JSON string", SolarEclipseDetails.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SolarEclipseDetails.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SolarEclipseDetails` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("aorTDuration") != null && !jsonObj.get("aorTDuration").isJsonNull()) && !jsonObj.get("aorTDuration").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `aorTDuration` to be a primitive type in the JSON string but got `%s`", jsonObj.get("aorTDuration").toString()));
      }
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        TypeEnum.validateJsonElement(jsonObj.get("type"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SolarEclipseDetails.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SolarEclipseDetails' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SolarEclipseDetails> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SolarEclipseDetails.class));

       return (TypeAdapter<T>) new TypeAdapter<SolarEclipseDetails>() {
           @Override
           public void write(JsonWriter out, SolarEclipseDetails value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SolarEclipseDetails read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SolarEclipseDetails given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SolarEclipseDetails
   * @throws IOException if the JSON string is invalid with respect to SolarEclipseDetails
   */
  public static SolarEclipseDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SolarEclipseDetails.class);
  }

  /**
   * Convert an instance of SolarEclipseDetails to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

