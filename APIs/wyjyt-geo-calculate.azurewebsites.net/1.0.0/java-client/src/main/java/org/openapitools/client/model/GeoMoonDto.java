/*
 * Wyjyt - Geo Calculate
 * Widget API to calculate Geo Coordinates, Geo Fences and Sun, Moon, Sky, Eclipse information.  See https://wyjyt.com
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.LunarEclipseDetails;
import org.openapitools.client.model.MoonIllum;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Lunar information.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:59:15.403526-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GeoMoonDto {
  public static final String SERIALIZED_NAME_ALTITUDE = "altitude";
  @SerializedName(SERIALIZED_NAME_ALTITUDE)
  private Double altitude;

  public static final String SERIALIZED_NAME_AZIMUTH = "azimuth";
  @SerializedName(SERIALIZED_NAME_AZIMUTH)
  private Double azimuth;

  public static final String SERIALIZED_NAME_BEARING = "bearing";
  @SerializedName(SERIALIZED_NAME_BEARING)
  private Double bearing;

  public static final String SERIALIZED_NAME_DECLINATION = "declination";
  @SerializedName(SERIALIZED_NAME_DECLINATION)
  private Double declination;

  public static final String SERIALIZED_NAME_DISTANCE = "distance";
  @SerializedName(SERIALIZED_NAME_DISTANCE)
  private Double distance;

  public static final String SERIALIZED_NAME_ILLUMINATION = "illumination";
  @SerializedName(SERIALIZED_NAME_ILLUMINATION)
  private MoonIllum illumination;

  public static final String SERIALIZED_NAME_IS_UP = "isUp";
  @SerializedName(SERIALIZED_NAME_IS_UP)
  private Boolean isUp;

  public static final String SERIALIZED_NAME_LAST_ECLIPSE = "lastEclipse";
  @SerializedName(SERIALIZED_NAME_LAST_ECLIPSE)
  private LunarEclipseDetails lastEclipse;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_NEXT_ECLIPSE = "nextEclipse";
  @SerializedName(SERIALIZED_NAME_NEXT_ECLIPSE)
  private LunarEclipseDetails nextEclipse;

  public static final String SERIALIZED_NAME_RIGHT_ASCENSION = "rightAscension";
  @SerializedName(SERIALIZED_NAME_RIGHT_ASCENSION)
  private Double rightAscension;

  public static final String SERIALIZED_NAME_RISE = "rise";
  @SerializedName(SERIALIZED_NAME_RISE)
  private OffsetDateTime rise;

  public static final String SERIALIZED_NAME_SET = "set";
  @SerializedName(SERIALIZED_NAME_SET)
  private OffsetDateTime set;

  public static final String SERIALIZED_NAME_SIGN = "sign";
  @SerializedName(SERIALIZED_NAME_SIGN)
  private String sign;

  public GeoMoonDto() {
  }

  public GeoMoonDto altitude(Double altitude) {
    this.altitude = altitude;
    return this;
  }

  /**
   * Get altitude
   * @return altitude
   */
  @javax.annotation.Nullable
  public Double getAltitude() {
    return altitude;
  }

  public void setAltitude(Double altitude) {
    this.altitude = altitude;
  }


  public GeoMoonDto azimuth(Double azimuth) {
    this.azimuth = azimuth;
    return this;
  }

  /**
   * Get azimuth
   * @return azimuth
   */
  @javax.annotation.Nullable
  public Double getAzimuth() {
    return azimuth;
  }

  public void setAzimuth(Double azimuth) {
    this.azimuth = azimuth;
  }


  public GeoMoonDto bearing(Double bearing) {
    this.bearing = bearing;
    return this;
  }

  /**
   * Get bearing
   * @return bearing
   */
  @javax.annotation.Nullable
  public Double getBearing() {
    return bearing;
  }

  public void setBearing(Double bearing) {
    this.bearing = bearing;
  }


  public GeoMoonDto declination(Double declination) {
    this.declination = declination;
    return this;
  }

  /**
   * Get declination
   * @return declination
   */
  @javax.annotation.Nullable
  public Double getDeclination() {
    return declination;
  }

  public void setDeclination(Double declination) {
    this.declination = declination;
  }


  public GeoMoonDto distance(Double distance) {
    this.distance = distance;
    return this;
  }

  /**
   * Get distance
   * @return distance
   */
  @javax.annotation.Nullable
  public Double getDistance() {
    return distance;
  }

  public void setDistance(Double distance) {
    this.distance = distance;
  }


  public GeoMoonDto illumination(MoonIllum illumination) {
    this.illumination = illumination;
    return this;
  }

  /**
   * Get illumination
   * @return illumination
   */
  @javax.annotation.Nullable
  public MoonIllum getIllumination() {
    return illumination;
  }

  public void setIllumination(MoonIllum illumination) {
    this.illumination = illumination;
  }


  public GeoMoonDto isUp(Boolean isUp) {
    this.isUp = isUp;
    return this;
  }

  /**
   * Get isUp
   * @return isUp
   */
  @javax.annotation.Nullable
  public Boolean getIsUp() {
    return isUp;
  }

  public void setIsUp(Boolean isUp) {
    this.isUp = isUp;
  }


  public GeoMoonDto lastEclipse(LunarEclipseDetails lastEclipse) {
    this.lastEclipse = lastEclipse;
    return this;
  }

  /**
   * Get lastEclipse
   * @return lastEclipse
   */
  @javax.annotation.Nullable
  public LunarEclipseDetails getLastEclipse() {
    return lastEclipse;
  }

  public void setLastEclipse(LunarEclipseDetails lastEclipse) {
    this.lastEclipse = lastEclipse;
  }


  public GeoMoonDto name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public GeoMoonDto nextEclipse(LunarEclipseDetails nextEclipse) {
    this.nextEclipse = nextEclipse;
    return this;
  }

  /**
   * Get nextEclipse
   * @return nextEclipse
   */
  @javax.annotation.Nullable
  public LunarEclipseDetails getNextEclipse() {
    return nextEclipse;
  }

  public void setNextEclipse(LunarEclipseDetails nextEclipse) {
    this.nextEclipse = nextEclipse;
  }


  public GeoMoonDto rightAscension(Double rightAscension) {
    this.rightAscension = rightAscension;
    return this;
  }

  /**
   * Get rightAscension
   * @return rightAscension
   */
  @javax.annotation.Nullable
  public Double getRightAscension() {
    return rightAscension;
  }

  public void setRightAscension(Double rightAscension) {
    this.rightAscension = rightAscension;
  }


  public GeoMoonDto rise(OffsetDateTime rise) {
    this.rise = rise;
    return this;
  }

  /**
   * Get rise
   * @return rise
   */
  @javax.annotation.Nullable
  public OffsetDateTime getRise() {
    return rise;
  }

  public void setRise(OffsetDateTime rise) {
    this.rise = rise;
  }


  public GeoMoonDto set(OffsetDateTime set) {
    this.set = set;
    return this;
  }

  /**
   * Get set
   * @return set
   */
  @javax.annotation.Nullable
  public OffsetDateTime getSet() {
    return set;
  }

  public void setSet(OffsetDateTime set) {
    this.set = set;
  }


  public GeoMoonDto sign(String sign) {
    this.sign = sign;
    return this;
  }

  /**
   * Get sign
   * @return sign
   */
  @javax.annotation.Nullable
  public String getSign() {
    return sign;
  }

  public void setSign(String sign) {
    this.sign = sign;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GeoMoonDto geoMoonDto = (GeoMoonDto) o;
    return Objects.equals(this.altitude, geoMoonDto.altitude) &&
        Objects.equals(this.azimuth, geoMoonDto.azimuth) &&
        Objects.equals(this.bearing, geoMoonDto.bearing) &&
        Objects.equals(this.declination, geoMoonDto.declination) &&
        Objects.equals(this.distance, geoMoonDto.distance) &&
        Objects.equals(this.illumination, geoMoonDto.illumination) &&
        Objects.equals(this.isUp, geoMoonDto.isUp) &&
        Objects.equals(this.lastEclipse, geoMoonDto.lastEclipse) &&
        Objects.equals(this.name, geoMoonDto.name) &&
        Objects.equals(this.nextEclipse, geoMoonDto.nextEclipse) &&
        Objects.equals(this.rightAscension, geoMoonDto.rightAscension) &&
        Objects.equals(this.rise, geoMoonDto.rise) &&
        Objects.equals(this.set, geoMoonDto.set) &&
        Objects.equals(this.sign, geoMoonDto.sign);
  }

  @Override
  public int hashCode() {
    return Objects.hash(altitude, azimuth, bearing, declination, distance, illumination, isUp, lastEclipse, name, nextEclipse, rightAscension, rise, set, sign);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GeoMoonDto {\n");
    sb.append("    altitude: ").append(toIndentedString(altitude)).append("\n");
    sb.append("    azimuth: ").append(toIndentedString(azimuth)).append("\n");
    sb.append("    bearing: ").append(toIndentedString(bearing)).append("\n");
    sb.append("    declination: ").append(toIndentedString(declination)).append("\n");
    sb.append("    distance: ").append(toIndentedString(distance)).append("\n");
    sb.append("    illumination: ").append(toIndentedString(illumination)).append("\n");
    sb.append("    isUp: ").append(toIndentedString(isUp)).append("\n");
    sb.append("    lastEclipse: ").append(toIndentedString(lastEclipse)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    nextEclipse: ").append(toIndentedString(nextEclipse)).append("\n");
    sb.append("    rightAscension: ").append(toIndentedString(rightAscension)).append("\n");
    sb.append("    rise: ").append(toIndentedString(rise)).append("\n");
    sb.append("    set: ").append(toIndentedString(set)).append("\n");
    sb.append("    sign: ").append(toIndentedString(sign)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("altitude");
    openapiFields.add("azimuth");
    openapiFields.add("bearing");
    openapiFields.add("declination");
    openapiFields.add("distance");
    openapiFields.add("illumination");
    openapiFields.add("isUp");
    openapiFields.add("lastEclipse");
    openapiFields.add("name");
    openapiFields.add("nextEclipse");
    openapiFields.add("rightAscension");
    openapiFields.add("rise");
    openapiFields.add("set");
    openapiFields.add("sign");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GeoMoonDto
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GeoMoonDto.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GeoMoonDto is not found in the empty JSON string", GeoMoonDto.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GeoMoonDto.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GeoMoonDto` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `illumination`
      if (jsonObj.get("illumination") != null && !jsonObj.get("illumination").isJsonNull()) {
        MoonIllum.validateJsonElement(jsonObj.get("illumination"));
      }
      // validate the optional field `lastEclipse`
      if (jsonObj.get("lastEclipse") != null && !jsonObj.get("lastEclipse").isJsonNull()) {
        LunarEclipseDetails.validateJsonElement(jsonObj.get("lastEclipse"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the optional field `nextEclipse`
      if (jsonObj.get("nextEclipse") != null && !jsonObj.get("nextEclipse").isJsonNull()) {
        LunarEclipseDetails.validateJsonElement(jsonObj.get("nextEclipse"));
      }
      if ((jsonObj.get("sign") != null && !jsonObj.get("sign").isJsonNull()) && !jsonObj.get("sign").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sign` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sign").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GeoMoonDto.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GeoMoonDto' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GeoMoonDto> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GeoMoonDto.class));

       return (TypeAdapter<T>) new TypeAdapter<GeoMoonDto>() {
           @Override
           public void write(JsonWriter out, GeoMoonDto value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GeoMoonDto read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GeoMoonDto given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GeoMoonDto
   * @throws IOException if the JSON string is invalid with respect to GeoMoonDto
   */
  public static GeoMoonDto fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GeoMoonDto.class);
  }

  /**
   * Convert an instance of GeoMoonDto to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

