/*
 * Wyjyt - Geo Calculate
 * Widget API to calculate Geo Coordinates, Geo Fences and Sun, Moon, Sky, Eclipse information.  See https://wyjyt.com
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.GeoConvertRequest;
import org.openapitools.client.model.GeoConvertResponse;
import org.openapitools.client.model.GeoDistanceRequest;
import org.openapitools.client.model.GeoDistanceResponse;
import org.openapitools.client.model.GeoFenceRequest;
import org.openapitools.client.model.GeoFenceResponse;
import org.openapitools.client.model.GeoSkyRequest;
import org.openapitools.client.model.GeoSkyResponse;
import org.openapitools.client.model.WyjytErrorResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class GeoCalculateApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public GeoCalculateApi() {
        this(Configuration.getDefaultApiClient());
    }

    public GeoCalculateApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for convert
     * @param geoConvertRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call convertCall(GeoConvertRequest geoConvertRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = geoConvertRequest;

        // create path and map variables
        String localVarPath = "/Convert";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call convertValidateBeforeCall(GeoConvertRequest geoConvertRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'geoConvertRequest' is set
        if (geoConvertRequest == null) {
            throw new ApiException("Missing the required parameter 'geoConvertRequest' when calling convert(Async)");
        }

        return convertCall(geoConvertRequest, _callback);

    }

    /**
     * Convert the list of geo coordinates to a standard format - (latlon | utm | mgrs | ecef | epsg3857 | georef | cartesian)
     * Convert the list of geo coordinates to a standard format - (latlon | utm | mgrs | ecef | epsg3857 | georef | cartesian)
     * @param geoConvertRequest  (required)
     * @return GeoConvertResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public GeoConvertResponse convert(GeoConvertRequest geoConvertRequest) throws ApiException {
        ApiResponse<GeoConvertResponse> localVarResp = convertWithHttpInfo(geoConvertRequest);
        return localVarResp.getData();
    }

    /**
     * Convert the list of geo coordinates to a standard format - (latlon | utm | mgrs | ecef | epsg3857 | georef | cartesian)
     * Convert the list of geo coordinates to a standard format - (latlon | utm | mgrs | ecef | epsg3857 | georef | cartesian)
     * @param geoConvertRequest  (required)
     * @return ApiResponse&lt;GeoConvertResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GeoConvertResponse> convertWithHttpInfo(GeoConvertRequest geoConvertRequest) throws ApiException {
        okhttp3.Call localVarCall = convertValidateBeforeCall(geoConvertRequest, null);
        Type localVarReturnType = new TypeToken<GeoConvertResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Convert the list of geo coordinates to a standard format - (latlon | utm | mgrs | ecef | epsg3857 | georef | cartesian) (asynchronously)
     * Convert the list of geo coordinates to a standard format - (latlon | utm | mgrs | ecef | epsg3857 | georef | cartesian)
     * @param geoConvertRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call convertAsync(GeoConvertRequest geoConvertRequest, final ApiCallback<GeoConvertResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = convertValidateBeforeCall(geoConvertRequest, _callback);
        Type localVarReturnType = new TypeToken<GeoConvertResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for distance
     * @param geoDistanceRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call distanceCall(GeoDistanceRequest geoDistanceRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = geoDistanceRequest;

        // create path and map variables
        String localVarPath = "/Distance";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call distanceValidateBeforeCall(GeoDistanceRequest geoDistanceRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'geoDistanceRequest' is set
        if (geoDistanceRequest == null) {
            throw new ApiException("Missing the required parameter 'geoDistanceRequest' when calling distance(Async)");
        }

        return distanceCall(geoDistanceRequest, _callback);

    }

    /**
     * Calculate the distance between two geo coordinates.
     * Calculate the distance between two geo coordinates.
     * @param geoDistanceRequest  (required)
     * @return GeoDistanceResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public GeoDistanceResponse distance(GeoDistanceRequest geoDistanceRequest) throws ApiException {
        ApiResponse<GeoDistanceResponse> localVarResp = distanceWithHttpInfo(geoDistanceRequest);
        return localVarResp.getData();
    }

    /**
     * Calculate the distance between two geo coordinates.
     * Calculate the distance between two geo coordinates.
     * @param geoDistanceRequest  (required)
     * @return ApiResponse&lt;GeoDistanceResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GeoDistanceResponse> distanceWithHttpInfo(GeoDistanceRequest geoDistanceRequest) throws ApiException {
        okhttp3.Call localVarCall = distanceValidateBeforeCall(geoDistanceRequest, null);
        Type localVarReturnType = new TypeToken<GeoDistanceResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Calculate the distance between two geo coordinates. (asynchronously)
     * Calculate the distance between two geo coordinates.
     * @param geoDistanceRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call distanceAsync(GeoDistanceRequest geoDistanceRequest, final ApiCallback<GeoDistanceResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = distanceValidateBeforeCall(geoDistanceRequest, _callback);
        Type localVarReturnType = new TypeToken<GeoDistanceResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fence
     * @param geoFenceRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fenceCall(GeoFenceRequest geoFenceRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = geoFenceRequest;

        // create path and map variables
        String localVarPath = "/Fence";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fenceValidateBeforeCall(GeoFenceRequest geoFenceRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'geoFenceRequest' is set
        if (geoFenceRequest == null) {
            throw new ApiException("Missing the required parameter 'geoFenceRequest' when calling fence(Async)");
        }

        return fenceCall(geoFenceRequest, _callback);

    }

    /**
     * Check if a list of coordinates are inside of a fence of coordinates.
     * Check if a list of coordinates are inside of a fence of coordinates.
     * @param geoFenceRequest  (required)
     * @return GeoFenceResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public GeoFenceResponse fence(GeoFenceRequest geoFenceRequest) throws ApiException {
        ApiResponse<GeoFenceResponse> localVarResp = fenceWithHttpInfo(geoFenceRequest);
        return localVarResp.getData();
    }

    /**
     * Check if a list of coordinates are inside of a fence of coordinates.
     * Check if a list of coordinates are inside of a fence of coordinates.
     * @param geoFenceRequest  (required)
     * @return ApiResponse&lt;GeoFenceResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GeoFenceResponse> fenceWithHttpInfo(GeoFenceRequest geoFenceRequest) throws ApiException {
        okhttp3.Call localVarCall = fenceValidateBeforeCall(geoFenceRequest, null);
        Type localVarReturnType = new TypeToken<GeoFenceResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Check if a list of coordinates are inside of a fence of coordinates. (asynchronously)
     * Check if a list of coordinates are inside of a fence of coordinates.
     * @param geoFenceRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fenceAsync(GeoFenceRequest geoFenceRequest, final ApiCallback<GeoFenceResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = fenceValidateBeforeCall(geoFenceRequest, _callback);
        Type localVarReturnType = new TypeToken<GeoFenceResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sky
     * @param geoSkyRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call skyCall(GeoSkyRequest geoSkyRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = geoSkyRequest;

        // create path and map variables
        String localVarPath = "/Sky";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call skyValidateBeforeCall(GeoSkyRequest geoSkyRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'geoSkyRequest' is set
        if (geoSkyRequest == null) {
            throw new ApiException("Missing the required parameter 'geoSkyRequest' when calling sky(Async)");
        }

        return skyCall(geoSkyRequest, _callback);

    }

    /**
     * Calculate sun, moon, eclipse and sky information for the date and location.
     * Calculate sun, moon, eclipse and sky information for the date and location.
     * @param geoSkyRequest  (required)
     * @return GeoSkyResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public GeoSkyResponse sky(GeoSkyRequest geoSkyRequest) throws ApiException {
        ApiResponse<GeoSkyResponse> localVarResp = skyWithHttpInfo(geoSkyRequest);
        return localVarResp.getData();
    }

    /**
     * Calculate sun, moon, eclipse and sky information for the date and location.
     * Calculate sun, moon, eclipse and sky information for the date and location.
     * @param geoSkyRequest  (required)
     * @return ApiResponse&lt;GeoSkyResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GeoSkyResponse> skyWithHttpInfo(GeoSkyRequest geoSkyRequest) throws ApiException {
        okhttp3.Call localVarCall = skyValidateBeforeCall(geoSkyRequest, null);
        Type localVarReturnType = new TypeToken<GeoSkyResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Calculate sun, moon, eclipse and sky information for the date and location. (asynchronously)
     * Calculate sun, moon, eclipse and sky information for the date and location.
     * @param geoSkyRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call skyAsync(GeoSkyRequest geoSkyRequest, final ApiCallback<GeoSkyResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = skyValidateBeforeCall(geoSkyRequest, _callback);
        Type localVarReturnType = new TypeToken<GeoSkyResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
