/*
 * Wyjyt - Geo Calculate
 * Widget API to calculate Geo Coordinates, Geo Fences and Sun, Moon, Sky, Eclipse information.  See https://wyjyt.com
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * LunarEclipseDetails
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:59:15.403526-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class LunarEclipseDetails {
  public static final String SERIALIZED_NAME_DATE = "date";
  @SerializedName(SERIALIZED_NAME_DATE)
  private OffsetDateTime date;

  public static final String SERIALIZED_NAME_HAS_ECLIPSE_DATA = "hasEclipseData";
  @SerializedName(SERIALIZED_NAME_HAS_ECLIPSE_DATA)
  private Boolean hasEclipseData;

  public static final String SERIALIZED_NAME_MID_ECLIPSE = "midEclipse";
  @SerializedName(SERIALIZED_NAME_MID_ECLIPSE)
  private OffsetDateTime midEclipse;

  public static final String SERIALIZED_NAME_PARTIAL_ECLISPE_BEGIN = "partialEclispeBegin";
  @SerializedName(SERIALIZED_NAME_PARTIAL_ECLISPE_BEGIN)
  private OffsetDateTime partialEclispeBegin;

  public static final String SERIALIZED_NAME_PARTIAL_ECLISPE_END = "partialEclispeEnd";
  @SerializedName(SERIALIZED_NAME_PARTIAL_ECLISPE_END)
  private OffsetDateTime partialEclispeEnd;

  public static final String SERIALIZED_NAME_PENUMBRAL_ECLIPSE_BEGIN = "penumbralEclipseBegin";
  @SerializedName(SERIALIZED_NAME_PENUMBRAL_ECLIPSE_BEGIN)
  private OffsetDateTime penumbralEclipseBegin;

  public static final String SERIALIZED_NAME_PENUMBRAL_ECLISPE_END = "penumbralEclispeEnd";
  @SerializedName(SERIALIZED_NAME_PENUMBRAL_ECLISPE_END)
  private OffsetDateTime penumbralEclispeEnd;

  public static final String SERIALIZED_NAME_TOTAL_ECLIPSE_BEGIN = "totalEclipseBegin";
  @SerializedName(SERIALIZED_NAME_TOTAL_ECLIPSE_BEGIN)
  private OffsetDateTime totalEclipseBegin;

  public static final String SERIALIZED_NAME_TOTAL_ECLIPSE_END = "totalEclipseEnd";
  @SerializedName(SERIALIZED_NAME_TOTAL_ECLIPSE_END)
  private OffsetDateTime totalEclipseEnd;

  /**
   * Gets or Sets type
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    NUMBER_0(0),
    
    NUMBER_1(1),
    
    NUMBER_2(2);

    private Integer value;

    TypeEnum(Integer value) {
      this.value = value;
    }

    public Integer getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(Integer value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        Integer value =  jsonReader.nextInt();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      Integer value = jsonElement.getAsInt();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type = TypeEnum.NUMBER_0;

  public LunarEclipseDetails() {
  }

  public LunarEclipseDetails date(OffsetDateTime date) {
    this.date = date;
    return this;
  }

  /**
   * Get date
   * @return date
   */
  @javax.annotation.Nullable
  public OffsetDateTime getDate() {
    return date;
  }

  public void setDate(OffsetDateTime date) {
    this.date = date;
  }


  public LunarEclipseDetails hasEclipseData(Boolean hasEclipseData) {
    this.hasEclipseData = hasEclipseData;
    return this;
  }

  /**
   * Get hasEclipseData
   * @return hasEclipseData
   */
  @javax.annotation.Nullable
  public Boolean getHasEclipseData() {
    return hasEclipseData;
  }

  public void setHasEclipseData(Boolean hasEclipseData) {
    this.hasEclipseData = hasEclipseData;
  }


  public LunarEclipseDetails midEclipse(OffsetDateTime midEclipse) {
    this.midEclipse = midEclipse;
    return this;
  }

  /**
   * Get midEclipse
   * @return midEclipse
   */
  @javax.annotation.Nullable
  public OffsetDateTime getMidEclipse() {
    return midEclipse;
  }

  public void setMidEclipse(OffsetDateTime midEclipse) {
    this.midEclipse = midEclipse;
  }


  public LunarEclipseDetails partialEclispeBegin(OffsetDateTime partialEclispeBegin) {
    this.partialEclispeBegin = partialEclispeBegin;
    return this;
  }

  /**
   * Get partialEclispeBegin
   * @return partialEclispeBegin
   */
  @javax.annotation.Nullable
  public OffsetDateTime getPartialEclispeBegin() {
    return partialEclispeBegin;
  }

  public void setPartialEclispeBegin(OffsetDateTime partialEclispeBegin) {
    this.partialEclispeBegin = partialEclispeBegin;
  }


  public LunarEclipseDetails partialEclispeEnd(OffsetDateTime partialEclispeEnd) {
    this.partialEclispeEnd = partialEclispeEnd;
    return this;
  }

  /**
   * Get partialEclispeEnd
   * @return partialEclispeEnd
   */
  @javax.annotation.Nullable
  public OffsetDateTime getPartialEclispeEnd() {
    return partialEclispeEnd;
  }

  public void setPartialEclispeEnd(OffsetDateTime partialEclispeEnd) {
    this.partialEclispeEnd = partialEclispeEnd;
  }


  public LunarEclipseDetails penumbralEclipseBegin(OffsetDateTime penumbralEclipseBegin) {
    this.penumbralEclipseBegin = penumbralEclipseBegin;
    return this;
  }

  /**
   * Get penumbralEclipseBegin
   * @return penumbralEclipseBegin
   */
  @javax.annotation.Nullable
  public OffsetDateTime getPenumbralEclipseBegin() {
    return penumbralEclipseBegin;
  }

  public void setPenumbralEclipseBegin(OffsetDateTime penumbralEclipseBegin) {
    this.penumbralEclipseBegin = penumbralEclipseBegin;
  }


  public LunarEclipseDetails penumbralEclispeEnd(OffsetDateTime penumbralEclispeEnd) {
    this.penumbralEclispeEnd = penumbralEclispeEnd;
    return this;
  }

  /**
   * Get penumbralEclispeEnd
   * @return penumbralEclispeEnd
   */
  @javax.annotation.Nullable
  public OffsetDateTime getPenumbralEclispeEnd() {
    return penumbralEclispeEnd;
  }

  public void setPenumbralEclispeEnd(OffsetDateTime penumbralEclispeEnd) {
    this.penumbralEclispeEnd = penumbralEclispeEnd;
  }


  public LunarEclipseDetails totalEclipseBegin(OffsetDateTime totalEclipseBegin) {
    this.totalEclipseBegin = totalEclipseBegin;
    return this;
  }

  /**
   * Get totalEclipseBegin
   * @return totalEclipseBegin
   */
  @javax.annotation.Nullable
  public OffsetDateTime getTotalEclipseBegin() {
    return totalEclipseBegin;
  }

  public void setTotalEclipseBegin(OffsetDateTime totalEclipseBegin) {
    this.totalEclipseBegin = totalEclipseBegin;
  }


  public LunarEclipseDetails totalEclipseEnd(OffsetDateTime totalEclipseEnd) {
    this.totalEclipseEnd = totalEclipseEnd;
    return this;
  }

  /**
   * Get totalEclipseEnd
   * @return totalEclipseEnd
   */
  @javax.annotation.Nullable
  public OffsetDateTime getTotalEclipseEnd() {
    return totalEclipseEnd;
  }

  public void setTotalEclipseEnd(OffsetDateTime totalEclipseEnd) {
    this.totalEclipseEnd = totalEclipseEnd;
  }


  public LunarEclipseDetails type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nullable
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LunarEclipseDetails lunarEclipseDetails = (LunarEclipseDetails) o;
    return Objects.equals(this.date, lunarEclipseDetails.date) &&
        Objects.equals(this.hasEclipseData, lunarEclipseDetails.hasEclipseData) &&
        Objects.equals(this.midEclipse, lunarEclipseDetails.midEclipse) &&
        Objects.equals(this.partialEclispeBegin, lunarEclipseDetails.partialEclispeBegin) &&
        Objects.equals(this.partialEclispeEnd, lunarEclipseDetails.partialEclispeEnd) &&
        Objects.equals(this.penumbralEclipseBegin, lunarEclipseDetails.penumbralEclipseBegin) &&
        Objects.equals(this.penumbralEclispeEnd, lunarEclipseDetails.penumbralEclispeEnd) &&
        Objects.equals(this.totalEclipseBegin, lunarEclipseDetails.totalEclipseBegin) &&
        Objects.equals(this.totalEclipseEnd, lunarEclipseDetails.totalEclipseEnd) &&
        Objects.equals(this.type, lunarEclipseDetails.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(date, hasEclipseData, midEclipse, partialEclispeBegin, partialEclispeEnd, penumbralEclipseBegin, penumbralEclispeEnd, totalEclipseBegin, totalEclipseEnd, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LunarEclipseDetails {\n");
    sb.append("    date: ").append(toIndentedString(date)).append("\n");
    sb.append("    hasEclipseData: ").append(toIndentedString(hasEclipseData)).append("\n");
    sb.append("    midEclipse: ").append(toIndentedString(midEclipse)).append("\n");
    sb.append("    partialEclispeBegin: ").append(toIndentedString(partialEclispeBegin)).append("\n");
    sb.append("    partialEclispeEnd: ").append(toIndentedString(partialEclispeEnd)).append("\n");
    sb.append("    penumbralEclipseBegin: ").append(toIndentedString(penumbralEclipseBegin)).append("\n");
    sb.append("    penumbralEclispeEnd: ").append(toIndentedString(penumbralEclispeEnd)).append("\n");
    sb.append("    totalEclipseBegin: ").append(toIndentedString(totalEclipseBegin)).append("\n");
    sb.append("    totalEclipseEnd: ").append(toIndentedString(totalEclipseEnd)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("date");
    openapiFields.add("hasEclipseData");
    openapiFields.add("midEclipse");
    openapiFields.add("partialEclispeBegin");
    openapiFields.add("partialEclispeEnd");
    openapiFields.add("penumbralEclipseBegin");
    openapiFields.add("penumbralEclispeEnd");
    openapiFields.add("totalEclipseBegin");
    openapiFields.add("totalEclipseEnd");
    openapiFields.add("type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to LunarEclipseDetails
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LunarEclipseDetails.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LunarEclipseDetails is not found in the empty JSON string", LunarEclipseDetails.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LunarEclipseDetails.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LunarEclipseDetails` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        TypeEnum.validateJsonElement(jsonObj.get("type"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LunarEclipseDetails.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LunarEclipseDetails' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LunarEclipseDetails> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LunarEclipseDetails.class));

       return (TypeAdapter<T>) new TypeAdapter<LunarEclipseDetails>() {
           @Override
           public void write(JsonWriter out, LunarEclipseDetails value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LunarEclipseDetails read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of LunarEclipseDetails given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of LunarEclipseDetails
   * @throws IOException if the JSON string is invalid with respect to LunarEclipseDetails
   */
  public static LunarEclipseDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LunarEclipseDetails.class);
  }

  /**
   * Convert an instance of LunarEclipseDetails to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

