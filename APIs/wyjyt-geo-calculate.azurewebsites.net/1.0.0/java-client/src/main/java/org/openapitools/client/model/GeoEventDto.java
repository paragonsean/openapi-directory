/*
 * Wyjyt - Geo Calculate
 * Widget API to calculate Geo Coordinates, Geo Fences and Sun, Moon, Sky, Eclipse information.  See https://wyjyt.com
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Celestial event information.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:59:15.403526-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GeoEventDto {
  public static final String SERIALIZED_NAME_FALL = "fall";
  @SerializedName(SERIALIZED_NAME_FALL)
  private OffsetDateTime fall;

  public static final String SERIALIZED_NAME_LAST_APOGEE = "lastApogee";
  @SerializedName(SERIALIZED_NAME_LAST_APOGEE)
  private OffsetDateTime lastApogee;

  public static final String SERIALIZED_NAME_LAST_PERIGEE = "lastPerigee";
  @SerializedName(SERIALIZED_NAME_LAST_PERIGEE)
  private OffsetDateTime lastPerigee;

  public static final String SERIALIZED_NAME_NEXT_APOGEE = "nextApogee";
  @SerializedName(SERIALIZED_NAME_NEXT_APOGEE)
  private OffsetDateTime nextApogee;

  public static final String SERIALIZED_NAME_NEXT_PERIGEE = "nextPerigee";
  @SerializedName(SERIALIZED_NAME_NEXT_PERIGEE)
  private OffsetDateTime nextPerigee;

  public static final String SERIALIZED_NAME_SPRING = "spring";
  @SerializedName(SERIALIZED_NAME_SPRING)
  private OffsetDateTime spring;

  public static final String SERIALIZED_NAME_SUMMER = "summer";
  @SerializedName(SERIALIZED_NAME_SUMMER)
  private OffsetDateTime summer;

  public static final String SERIALIZED_NAME_WINTER = "winter";
  @SerializedName(SERIALIZED_NAME_WINTER)
  private OffsetDateTime winter;

  public static final String SERIALIZED_NAME_ZODIAC_SIGN = "zodiacSign";
  @SerializedName(SERIALIZED_NAME_ZODIAC_SIGN)
  private String zodiacSign;

  public GeoEventDto() {
  }

  public GeoEventDto fall(OffsetDateTime fall) {
    this.fall = fall;
    return this;
  }

  /**
   * Get fall
   * @return fall
   */
  @javax.annotation.Nullable
  public OffsetDateTime getFall() {
    return fall;
  }

  public void setFall(OffsetDateTime fall) {
    this.fall = fall;
  }


  public GeoEventDto lastApogee(OffsetDateTime lastApogee) {
    this.lastApogee = lastApogee;
    return this;
  }

  /**
   * Get lastApogee
   * @return lastApogee
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastApogee() {
    return lastApogee;
  }

  public void setLastApogee(OffsetDateTime lastApogee) {
    this.lastApogee = lastApogee;
  }


  public GeoEventDto lastPerigee(OffsetDateTime lastPerigee) {
    this.lastPerigee = lastPerigee;
    return this;
  }

  /**
   * Get lastPerigee
   * @return lastPerigee
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastPerigee() {
    return lastPerigee;
  }

  public void setLastPerigee(OffsetDateTime lastPerigee) {
    this.lastPerigee = lastPerigee;
  }


  public GeoEventDto nextApogee(OffsetDateTime nextApogee) {
    this.nextApogee = nextApogee;
    return this;
  }

  /**
   * Get nextApogee
   * @return nextApogee
   */
  @javax.annotation.Nullable
  public OffsetDateTime getNextApogee() {
    return nextApogee;
  }

  public void setNextApogee(OffsetDateTime nextApogee) {
    this.nextApogee = nextApogee;
  }


  public GeoEventDto nextPerigee(OffsetDateTime nextPerigee) {
    this.nextPerigee = nextPerigee;
    return this;
  }

  /**
   * Get nextPerigee
   * @return nextPerigee
   */
  @javax.annotation.Nullable
  public OffsetDateTime getNextPerigee() {
    return nextPerigee;
  }

  public void setNextPerigee(OffsetDateTime nextPerigee) {
    this.nextPerigee = nextPerigee;
  }


  public GeoEventDto spring(OffsetDateTime spring) {
    this.spring = spring;
    return this;
  }

  /**
   * Get spring
   * @return spring
   */
  @javax.annotation.Nullable
  public OffsetDateTime getSpring() {
    return spring;
  }

  public void setSpring(OffsetDateTime spring) {
    this.spring = spring;
  }


  public GeoEventDto summer(OffsetDateTime summer) {
    this.summer = summer;
    return this;
  }

  /**
   * Get summer
   * @return summer
   */
  @javax.annotation.Nullable
  public OffsetDateTime getSummer() {
    return summer;
  }

  public void setSummer(OffsetDateTime summer) {
    this.summer = summer;
  }


  public GeoEventDto winter(OffsetDateTime winter) {
    this.winter = winter;
    return this;
  }

  /**
   * Get winter
   * @return winter
   */
  @javax.annotation.Nullable
  public OffsetDateTime getWinter() {
    return winter;
  }

  public void setWinter(OffsetDateTime winter) {
    this.winter = winter;
  }


  public GeoEventDto zodiacSign(String zodiacSign) {
    this.zodiacSign = zodiacSign;
    return this;
  }

  /**
   * Get zodiacSign
   * @return zodiacSign
   */
  @javax.annotation.Nullable
  public String getZodiacSign() {
    return zodiacSign;
  }

  public void setZodiacSign(String zodiacSign) {
    this.zodiacSign = zodiacSign;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GeoEventDto geoEventDto = (GeoEventDto) o;
    return Objects.equals(this.fall, geoEventDto.fall) &&
        Objects.equals(this.lastApogee, geoEventDto.lastApogee) &&
        Objects.equals(this.lastPerigee, geoEventDto.lastPerigee) &&
        Objects.equals(this.nextApogee, geoEventDto.nextApogee) &&
        Objects.equals(this.nextPerigee, geoEventDto.nextPerigee) &&
        Objects.equals(this.spring, geoEventDto.spring) &&
        Objects.equals(this.summer, geoEventDto.summer) &&
        Objects.equals(this.winter, geoEventDto.winter) &&
        Objects.equals(this.zodiacSign, geoEventDto.zodiacSign);
  }

  @Override
  public int hashCode() {
    return Objects.hash(fall, lastApogee, lastPerigee, nextApogee, nextPerigee, spring, summer, winter, zodiacSign);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GeoEventDto {\n");
    sb.append("    fall: ").append(toIndentedString(fall)).append("\n");
    sb.append("    lastApogee: ").append(toIndentedString(lastApogee)).append("\n");
    sb.append("    lastPerigee: ").append(toIndentedString(lastPerigee)).append("\n");
    sb.append("    nextApogee: ").append(toIndentedString(nextApogee)).append("\n");
    sb.append("    nextPerigee: ").append(toIndentedString(nextPerigee)).append("\n");
    sb.append("    spring: ").append(toIndentedString(spring)).append("\n");
    sb.append("    summer: ").append(toIndentedString(summer)).append("\n");
    sb.append("    winter: ").append(toIndentedString(winter)).append("\n");
    sb.append("    zodiacSign: ").append(toIndentedString(zodiacSign)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("fall");
    openapiFields.add("lastApogee");
    openapiFields.add("lastPerigee");
    openapiFields.add("nextApogee");
    openapiFields.add("nextPerigee");
    openapiFields.add("spring");
    openapiFields.add("summer");
    openapiFields.add("winter");
    openapiFields.add("zodiacSign");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GeoEventDto
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GeoEventDto.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GeoEventDto is not found in the empty JSON string", GeoEventDto.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GeoEventDto.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GeoEventDto` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("zodiacSign") != null && !jsonObj.get("zodiacSign").isJsonNull()) && !jsonObj.get("zodiacSign").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `zodiacSign` to be a primitive type in the JSON string but got `%s`", jsonObj.get("zodiacSign").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GeoEventDto.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GeoEventDto' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GeoEventDto> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GeoEventDto.class));

       return (TypeAdapter<T>) new TypeAdapter<GeoEventDto>() {
           @Override
           public void write(JsonWriter out, GeoEventDto value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GeoEventDto read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GeoEventDto given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GeoEventDto
   * @throws IOException if the JSON string is invalid with respect to GeoEventDto
   */
  public static GeoEventDto fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GeoEventDto.class);
  }

  /**
   * Convert an instance of GeoEventDto to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

