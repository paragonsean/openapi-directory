/*
 * Wyjyt - Geo Calculate
 * Widget API to calculate Geo Coordinates, Geo Fences and Sun, Moon, Sky, Eclipse information.  See https://wyjyt.com
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GeoFenceRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:59:15.403526-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GeoFenceRequest {
  public static final String SERIALIZED_NAME_CHECK_COORDINATES = "checkCoordinates";
  @SerializedName(SERIALIZED_NAME_CHECK_COORDINATES)
  private List<String> checkCoordinates = new ArrayList<>();

  public static final String SERIALIZED_NAME_FENCE_COORDINATES = "fenceCoordinates";
  @SerializedName(SERIALIZED_NAME_FENCE_COORDINATES)
  private List<String> fenceCoordinates = new ArrayList<>();

  public GeoFenceRequest() {
  }

  public GeoFenceRequest checkCoordinates(List<String> checkCoordinates) {
    this.checkCoordinates = checkCoordinates;
    return this;
  }

  public GeoFenceRequest addCheckCoordinatesItem(String checkCoordinatesItem) {
    if (this.checkCoordinates == null) {
      this.checkCoordinates = new ArrayList<>();
    }
    this.checkCoordinates.add(checkCoordinatesItem);
    return this;
  }

  /**
   * Array of coordinates to check if in the fence.    Accepted standards: (latlon | utm | mgrs | ecef | epsg3857 | georef | cartesian)
   * @return checkCoordinates
   */
  @javax.annotation.Nullable
  public List<String> getCheckCoordinates() {
    return checkCoordinates;
  }

  public void setCheckCoordinates(List<String> checkCoordinates) {
    this.checkCoordinates = checkCoordinates;
  }


  public GeoFenceRequest fenceCoordinates(List<String> fenceCoordinates) {
    this.fenceCoordinates = fenceCoordinates;
    return this;
  }

  public GeoFenceRequest addFenceCoordinatesItem(String fenceCoordinatesItem) {
    if (this.fenceCoordinates == null) {
      this.fenceCoordinates = new ArrayList<>();
    }
    this.fenceCoordinates.add(fenceCoordinatesItem);
    return this;
  }

  /**
   * Array of coordinates that define the fence.  First and last should be the same for polygons.    Accepted standards: (latlon | utm | mgrs | ecef | epsg3857 | georef | cartesian)
   * @return fenceCoordinates
   */
  @javax.annotation.Nullable
  public List<String> getFenceCoordinates() {
    return fenceCoordinates;
  }

  public void setFenceCoordinates(List<String> fenceCoordinates) {
    this.fenceCoordinates = fenceCoordinates;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GeoFenceRequest geoFenceRequest = (GeoFenceRequest) o;
    return Objects.equals(this.checkCoordinates, geoFenceRequest.checkCoordinates) &&
        Objects.equals(this.fenceCoordinates, geoFenceRequest.fenceCoordinates);
  }

  @Override
  public int hashCode() {
    return Objects.hash(checkCoordinates, fenceCoordinates);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GeoFenceRequest {\n");
    sb.append("    checkCoordinates: ").append(toIndentedString(checkCoordinates)).append("\n");
    sb.append("    fenceCoordinates: ").append(toIndentedString(fenceCoordinates)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("checkCoordinates");
    openapiFields.add("fenceCoordinates");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GeoFenceRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GeoFenceRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GeoFenceRequest is not found in the empty JSON string", GeoFenceRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GeoFenceRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GeoFenceRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("checkCoordinates") != null && !jsonObj.get("checkCoordinates").isJsonNull() && !jsonObj.get("checkCoordinates").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `checkCoordinates` to be an array in the JSON string but got `%s`", jsonObj.get("checkCoordinates").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("fenceCoordinates") != null && !jsonObj.get("fenceCoordinates").isJsonNull() && !jsonObj.get("fenceCoordinates").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `fenceCoordinates` to be an array in the JSON string but got `%s`", jsonObj.get("fenceCoordinates").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GeoFenceRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GeoFenceRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GeoFenceRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GeoFenceRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<GeoFenceRequest>() {
           @Override
           public void write(JsonWriter out, GeoFenceRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GeoFenceRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GeoFenceRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GeoFenceRequest
   * @throws IOException if the JSON string is invalid with respect to GeoFenceRequest
   */
  public static GeoFenceRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GeoFenceRequest.class);
  }

  /**
   * Convert an instance of GeoFenceRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

