/*
 * Wyjyt - Geo Calculate
 * Widget API to calculate Geo Coordinates, Geo Fences and Sun, Moon, Sky, Eclipse information.  See https://wyjyt.com
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GeoDistanceRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:59:15.403526-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GeoDistanceRequest {
  public static final String SERIALIZED_NAME_COORDINATE1 = "coordinate1";
  @SerializedName(SERIALIZED_NAME_COORDINATE1)
  private String coordinate1;

  public static final String SERIALIZED_NAME_COORDINATE2 = "coordinate2";
  @SerializedName(SERIALIZED_NAME_COORDINATE2)
  private String coordinate2;

  public static final String SERIALIZED_NAME_USE_ELLIPSE = "useEllipse";
  @SerializedName(SERIALIZED_NAME_USE_ELLIPSE)
  private Boolean useEllipse;

  public GeoDistanceRequest() {
  }

  public GeoDistanceRequest coordinate1(String coordinate1) {
    this.coordinate1 = coordinate1;
    return this;
  }

  /**
   * Geo Coordinate 1 to calculate from.    Standards are (latlon | utm | mgrs | ecef | epsg3857 | georef | cartesian)
   * @return coordinate1
   */
  @javax.annotation.Nullable
  public String getCoordinate1() {
    return coordinate1;
  }

  public void setCoordinate1(String coordinate1) {
    this.coordinate1 = coordinate1;
  }


  public GeoDistanceRequest coordinate2(String coordinate2) {
    this.coordinate2 = coordinate2;
    return this;
  }

  /**
   * Geo Coordinate 2 to calculate to.    Standards are (latlon | utm | mgrs | ecef | epsg3857 | georef | cartesian)
   * @return coordinate2
   */
  @javax.annotation.Nullable
  public String getCoordinate2() {
    return coordinate2;
  }

  public void setCoordinate2(String coordinate2) {
    this.coordinate2 = coordinate2;
  }


  public GeoDistanceRequest useEllipse(Boolean useEllipse) {
    this.useEllipse = useEllipse;
    return this;
  }

  /**
   * Flag to use ellipsoid calculation.    Default is false, spherical.
   * @return useEllipse
   */
  @javax.annotation.Nullable
  public Boolean getUseEllipse() {
    return useEllipse;
  }

  public void setUseEllipse(Boolean useEllipse) {
    this.useEllipse = useEllipse;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GeoDistanceRequest geoDistanceRequest = (GeoDistanceRequest) o;
    return Objects.equals(this.coordinate1, geoDistanceRequest.coordinate1) &&
        Objects.equals(this.coordinate2, geoDistanceRequest.coordinate2) &&
        Objects.equals(this.useEllipse, geoDistanceRequest.useEllipse);
  }

  @Override
  public int hashCode() {
    return Objects.hash(coordinate1, coordinate2, useEllipse);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GeoDistanceRequest {\n");
    sb.append("    coordinate1: ").append(toIndentedString(coordinate1)).append("\n");
    sb.append("    coordinate2: ").append(toIndentedString(coordinate2)).append("\n");
    sb.append("    useEllipse: ").append(toIndentedString(useEllipse)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("coordinate1");
    openapiFields.add("coordinate2");
    openapiFields.add("useEllipse");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GeoDistanceRequest
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GeoDistanceRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GeoDistanceRequest is not found in the empty JSON string", GeoDistanceRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GeoDistanceRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GeoDistanceRequest` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("coordinate1") != null && !jsonObj.get("coordinate1").isJsonNull()) && !jsonObj.get("coordinate1").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `coordinate1` to be a primitive type in the JSON string but got `%s`", jsonObj.get("coordinate1").toString()));
      }
      if ((jsonObj.get("coordinate2") != null && !jsonObj.get("coordinate2").isJsonNull()) && !jsonObj.get("coordinate2").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `coordinate2` to be a primitive type in the JSON string but got `%s`", jsonObj.get("coordinate2").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GeoDistanceRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GeoDistanceRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GeoDistanceRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GeoDistanceRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<GeoDistanceRequest>() {
           @Override
           public void write(JsonWriter out, GeoDistanceRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GeoDistanceRequest read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GeoDistanceRequest given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GeoDistanceRequest
   * @throws IOException if the JSON string is invalid with respect to GeoDistanceRequest
   */
  public static GeoDistanceRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GeoDistanceRequest.class);
  }

  /**
   * Convert an instance of GeoDistanceRequest to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

