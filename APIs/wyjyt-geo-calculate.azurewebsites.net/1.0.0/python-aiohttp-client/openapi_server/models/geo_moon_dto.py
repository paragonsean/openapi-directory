# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.lunar_eclipse_details import LunarEclipseDetails
from openapi_server.models.moon_illum import MoonIllum
from openapi_server import util


class GeoMoonDto(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, altitude: float=None, azimuth: float=None, bearing: float=None, declination: float=None, distance: float=None, illumination: MoonIllum=None, is_up: bool=None, last_eclipse: LunarEclipseDetails=None, name: str=None, next_eclipse: LunarEclipseDetails=None, right_ascension: float=None, rise: datetime=None, set: datetime=None, sign: str=None):
        """GeoMoonDto - a model defined in OpenAPI

        :param altitude: The altitude of this GeoMoonDto.
        :param azimuth: The azimuth of this GeoMoonDto.
        :param bearing: The bearing of this GeoMoonDto.
        :param declination: The declination of this GeoMoonDto.
        :param distance: The distance of this GeoMoonDto.
        :param illumination: The illumination of this GeoMoonDto.
        :param is_up: The is_up of this GeoMoonDto.
        :param last_eclipse: The last_eclipse of this GeoMoonDto.
        :param name: The name of this GeoMoonDto.
        :param next_eclipse: The next_eclipse of this GeoMoonDto.
        :param right_ascension: The right_ascension of this GeoMoonDto.
        :param rise: The rise of this GeoMoonDto.
        :param set: The set of this GeoMoonDto.
        :param sign: The sign of this GeoMoonDto.
        """
        self.openapi_types = {
            'altitude': float,
            'azimuth': float,
            'bearing': float,
            'declination': float,
            'distance': float,
            'illumination': MoonIllum,
            'is_up': bool,
            'last_eclipse': LunarEclipseDetails,
            'name': str,
            'next_eclipse': LunarEclipseDetails,
            'right_ascension': float,
            'rise': datetime,
            'set': datetime,
            'sign': str
        }

        self.attribute_map = {
            'altitude': 'altitude',
            'azimuth': 'azimuth',
            'bearing': 'bearing',
            'declination': 'declination',
            'distance': 'distance',
            'illumination': 'illumination',
            'is_up': 'isUp',
            'last_eclipse': 'lastEclipse',
            'name': 'name',
            'next_eclipse': 'nextEclipse',
            'right_ascension': 'rightAscension',
            'rise': 'rise',
            'set': 'set',
            'sign': 'sign'
        }

        self._altitude = altitude
        self._azimuth = azimuth
        self._bearing = bearing
        self._declination = declination
        self._distance = distance
        self._illumination = illumination
        self._is_up = is_up
        self._last_eclipse = last_eclipse
        self._name = name
        self._next_eclipse = next_eclipse
        self._right_ascension = right_ascension
        self._rise = rise
        self._set = set
        self._sign = sign

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GeoMoonDto':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The geoMoonDto of this GeoMoonDto.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def altitude(self):
        """Gets the altitude of this GeoMoonDto.


        :return: The altitude of this GeoMoonDto.
        :rtype: float
        """
        return self._altitude

    @altitude.setter
    def altitude(self, altitude):
        """Sets the altitude of this GeoMoonDto.


        :param altitude: The altitude of this GeoMoonDto.
        :type altitude: float
        """

        self._altitude = altitude

    @property
    def azimuth(self):
        """Gets the azimuth of this GeoMoonDto.


        :return: The azimuth of this GeoMoonDto.
        :rtype: float
        """
        return self._azimuth

    @azimuth.setter
    def azimuth(self, azimuth):
        """Sets the azimuth of this GeoMoonDto.


        :param azimuth: The azimuth of this GeoMoonDto.
        :type azimuth: float
        """

        self._azimuth = azimuth

    @property
    def bearing(self):
        """Gets the bearing of this GeoMoonDto.


        :return: The bearing of this GeoMoonDto.
        :rtype: float
        """
        return self._bearing

    @bearing.setter
    def bearing(self, bearing):
        """Sets the bearing of this GeoMoonDto.


        :param bearing: The bearing of this GeoMoonDto.
        :type bearing: float
        """

        self._bearing = bearing

    @property
    def declination(self):
        """Gets the declination of this GeoMoonDto.


        :return: The declination of this GeoMoonDto.
        :rtype: float
        """
        return self._declination

    @declination.setter
    def declination(self, declination):
        """Sets the declination of this GeoMoonDto.


        :param declination: The declination of this GeoMoonDto.
        :type declination: float
        """

        self._declination = declination

    @property
    def distance(self):
        """Gets the distance of this GeoMoonDto.


        :return: The distance of this GeoMoonDto.
        :rtype: float
        """
        return self._distance

    @distance.setter
    def distance(self, distance):
        """Sets the distance of this GeoMoonDto.


        :param distance: The distance of this GeoMoonDto.
        :type distance: float
        """

        self._distance = distance

    @property
    def illumination(self):
        """Gets the illumination of this GeoMoonDto.


        :return: The illumination of this GeoMoonDto.
        :rtype: MoonIllum
        """
        return self._illumination

    @illumination.setter
    def illumination(self, illumination):
        """Sets the illumination of this GeoMoonDto.


        :param illumination: The illumination of this GeoMoonDto.
        :type illumination: MoonIllum
        """

        self._illumination = illumination

    @property
    def is_up(self):
        """Gets the is_up of this GeoMoonDto.


        :return: The is_up of this GeoMoonDto.
        :rtype: bool
        """
        return self._is_up

    @is_up.setter
    def is_up(self, is_up):
        """Sets the is_up of this GeoMoonDto.


        :param is_up: The is_up of this GeoMoonDto.
        :type is_up: bool
        """

        self._is_up = is_up

    @property
    def last_eclipse(self):
        """Gets the last_eclipse of this GeoMoonDto.


        :return: The last_eclipse of this GeoMoonDto.
        :rtype: LunarEclipseDetails
        """
        return self._last_eclipse

    @last_eclipse.setter
    def last_eclipse(self, last_eclipse):
        """Sets the last_eclipse of this GeoMoonDto.


        :param last_eclipse: The last_eclipse of this GeoMoonDto.
        :type last_eclipse: LunarEclipseDetails
        """

        self._last_eclipse = last_eclipse

    @property
    def name(self):
        """Gets the name of this GeoMoonDto.


        :return: The name of this GeoMoonDto.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this GeoMoonDto.


        :param name: The name of this GeoMoonDto.
        :type name: str
        """

        self._name = name

    @property
    def next_eclipse(self):
        """Gets the next_eclipse of this GeoMoonDto.


        :return: The next_eclipse of this GeoMoonDto.
        :rtype: LunarEclipseDetails
        """
        return self._next_eclipse

    @next_eclipse.setter
    def next_eclipse(self, next_eclipse):
        """Sets the next_eclipse of this GeoMoonDto.


        :param next_eclipse: The next_eclipse of this GeoMoonDto.
        :type next_eclipse: LunarEclipseDetails
        """

        self._next_eclipse = next_eclipse

    @property
    def right_ascension(self):
        """Gets the right_ascension of this GeoMoonDto.


        :return: The right_ascension of this GeoMoonDto.
        :rtype: float
        """
        return self._right_ascension

    @right_ascension.setter
    def right_ascension(self, right_ascension):
        """Sets the right_ascension of this GeoMoonDto.


        :param right_ascension: The right_ascension of this GeoMoonDto.
        :type right_ascension: float
        """

        self._right_ascension = right_ascension

    @property
    def rise(self):
        """Gets the rise of this GeoMoonDto.


        :return: The rise of this GeoMoonDto.
        :rtype: datetime
        """
        return self._rise

    @rise.setter
    def rise(self, rise):
        """Sets the rise of this GeoMoonDto.


        :param rise: The rise of this GeoMoonDto.
        :type rise: datetime
        """

        self._rise = rise

    @property
    def set(self):
        """Gets the set of this GeoMoonDto.


        :return: The set of this GeoMoonDto.
        :rtype: datetime
        """
        return self._set

    @set.setter
    def set(self, set):
        """Sets the set of this GeoMoonDto.


        :param set: The set of this GeoMoonDto.
        :type set: datetime
        """

        self._set = set

    @property
    def sign(self):
        """Gets the sign of this GeoMoonDto.


        :return: The sign of this GeoMoonDto.
        :rtype: str
        """
        return self._sign

    @sign.setter
    def sign(self, sign):
        """Sets the sign of this GeoMoonDto.


        :param sign: The sign of this GeoMoonDto.
        :type sign: str
        """

        self._sign = sign
