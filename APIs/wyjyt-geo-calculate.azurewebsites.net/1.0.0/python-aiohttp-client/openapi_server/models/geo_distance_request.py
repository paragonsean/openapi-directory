# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GeoDistanceRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, coordinate1: str=None, coordinate2: str=None, use_ellipse: bool=None):
        """GeoDistanceRequest - a model defined in OpenAPI

        :param coordinate1: The coordinate1 of this GeoDistanceRequest.
        :param coordinate2: The coordinate2 of this GeoDistanceRequest.
        :param use_ellipse: The use_ellipse of this GeoDistanceRequest.
        """
        self.openapi_types = {
            'coordinate1': str,
            'coordinate2': str,
            'use_ellipse': bool
        }

        self.attribute_map = {
            'coordinate1': 'coordinate1',
            'coordinate2': 'coordinate2',
            'use_ellipse': 'useEllipse'
        }

        self._coordinate1 = coordinate1
        self._coordinate2 = coordinate2
        self._use_ellipse = use_ellipse

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GeoDistanceRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The geoDistanceRequest of this GeoDistanceRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def coordinate1(self):
        """Gets the coordinate1 of this GeoDistanceRequest.

        Geo Coordinate 1 to calculate from.    Standards are (latlon | utm | mgrs | ecef | epsg3857 | georef | cartesian)

        :return: The coordinate1 of this GeoDistanceRequest.
        :rtype: str
        """
        return self._coordinate1

    @coordinate1.setter
    def coordinate1(self, coordinate1):
        """Sets the coordinate1 of this GeoDistanceRequest.

        Geo Coordinate 1 to calculate from.    Standards are (latlon | utm | mgrs | ecef | epsg3857 | georef | cartesian)

        :param coordinate1: The coordinate1 of this GeoDistanceRequest.
        :type coordinate1: str
        """

        self._coordinate1 = coordinate1

    @property
    def coordinate2(self):
        """Gets the coordinate2 of this GeoDistanceRequest.

        Geo Coordinate 2 to calculate to.    Standards are (latlon | utm | mgrs | ecef | epsg3857 | georef | cartesian)

        :return: The coordinate2 of this GeoDistanceRequest.
        :rtype: str
        """
        return self._coordinate2

    @coordinate2.setter
    def coordinate2(self, coordinate2):
        """Sets the coordinate2 of this GeoDistanceRequest.

        Geo Coordinate 2 to calculate to.    Standards are (latlon | utm | mgrs | ecef | epsg3857 | georef | cartesian)

        :param coordinate2: The coordinate2 of this GeoDistanceRequest.
        :type coordinate2: str
        """

        self._coordinate2 = coordinate2

    @property
    def use_ellipse(self):
        """Gets the use_ellipse of this GeoDistanceRequest.

        Flag to use ellipsoid calculation.    Default is false, spherical.

        :return: The use_ellipse of this GeoDistanceRequest.
        :rtype: bool
        """
        return self._use_ellipse

    @use_ellipse.setter
    def use_ellipse(self, use_ellipse):
        """Sets the use_ellipse of this GeoDistanceRequest.

        Flag to use ellipsoid calculation.    Default is false, spherical.

        :param use_ellipse: The use_ellipse of this GeoDistanceRequest.
        :type use_ellipse: bool
        """

        self._use_ellipse = use_ellipse
