# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GeoEventDto(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, fall: datetime=None, last_apogee: datetime=None, last_perigee: datetime=None, next_apogee: datetime=None, next_perigee: datetime=None, spring: datetime=None, summer: datetime=None, winter: datetime=None, zodiac_sign: str=None):
        """GeoEventDto - a model defined in OpenAPI

        :param fall: The fall of this GeoEventDto.
        :param last_apogee: The last_apogee of this GeoEventDto.
        :param last_perigee: The last_perigee of this GeoEventDto.
        :param next_apogee: The next_apogee of this GeoEventDto.
        :param next_perigee: The next_perigee of this GeoEventDto.
        :param spring: The spring of this GeoEventDto.
        :param summer: The summer of this GeoEventDto.
        :param winter: The winter of this GeoEventDto.
        :param zodiac_sign: The zodiac_sign of this GeoEventDto.
        """
        self.openapi_types = {
            'fall': datetime,
            'last_apogee': datetime,
            'last_perigee': datetime,
            'next_apogee': datetime,
            'next_perigee': datetime,
            'spring': datetime,
            'summer': datetime,
            'winter': datetime,
            'zodiac_sign': str
        }

        self.attribute_map = {
            'fall': 'fall',
            'last_apogee': 'lastApogee',
            'last_perigee': 'lastPerigee',
            'next_apogee': 'nextApogee',
            'next_perigee': 'nextPerigee',
            'spring': 'spring',
            'summer': 'summer',
            'winter': 'winter',
            'zodiac_sign': 'zodiacSign'
        }

        self._fall = fall
        self._last_apogee = last_apogee
        self._last_perigee = last_perigee
        self._next_apogee = next_apogee
        self._next_perigee = next_perigee
        self._spring = spring
        self._summer = summer
        self._winter = winter
        self._zodiac_sign = zodiac_sign

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GeoEventDto':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The geoEventDto of this GeoEventDto.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def fall(self):
        """Gets the fall of this GeoEventDto.


        :return: The fall of this GeoEventDto.
        :rtype: datetime
        """
        return self._fall

    @fall.setter
    def fall(self, fall):
        """Sets the fall of this GeoEventDto.


        :param fall: The fall of this GeoEventDto.
        :type fall: datetime
        """

        self._fall = fall

    @property
    def last_apogee(self):
        """Gets the last_apogee of this GeoEventDto.


        :return: The last_apogee of this GeoEventDto.
        :rtype: datetime
        """
        return self._last_apogee

    @last_apogee.setter
    def last_apogee(self, last_apogee):
        """Sets the last_apogee of this GeoEventDto.


        :param last_apogee: The last_apogee of this GeoEventDto.
        :type last_apogee: datetime
        """

        self._last_apogee = last_apogee

    @property
    def last_perigee(self):
        """Gets the last_perigee of this GeoEventDto.


        :return: The last_perigee of this GeoEventDto.
        :rtype: datetime
        """
        return self._last_perigee

    @last_perigee.setter
    def last_perigee(self, last_perigee):
        """Sets the last_perigee of this GeoEventDto.


        :param last_perigee: The last_perigee of this GeoEventDto.
        :type last_perigee: datetime
        """

        self._last_perigee = last_perigee

    @property
    def next_apogee(self):
        """Gets the next_apogee of this GeoEventDto.


        :return: The next_apogee of this GeoEventDto.
        :rtype: datetime
        """
        return self._next_apogee

    @next_apogee.setter
    def next_apogee(self, next_apogee):
        """Sets the next_apogee of this GeoEventDto.


        :param next_apogee: The next_apogee of this GeoEventDto.
        :type next_apogee: datetime
        """

        self._next_apogee = next_apogee

    @property
    def next_perigee(self):
        """Gets the next_perigee of this GeoEventDto.


        :return: The next_perigee of this GeoEventDto.
        :rtype: datetime
        """
        return self._next_perigee

    @next_perigee.setter
    def next_perigee(self, next_perigee):
        """Sets the next_perigee of this GeoEventDto.


        :param next_perigee: The next_perigee of this GeoEventDto.
        :type next_perigee: datetime
        """

        self._next_perigee = next_perigee

    @property
    def spring(self):
        """Gets the spring of this GeoEventDto.


        :return: The spring of this GeoEventDto.
        :rtype: datetime
        """
        return self._spring

    @spring.setter
    def spring(self, spring):
        """Sets the spring of this GeoEventDto.


        :param spring: The spring of this GeoEventDto.
        :type spring: datetime
        """

        self._spring = spring

    @property
    def summer(self):
        """Gets the summer of this GeoEventDto.


        :return: The summer of this GeoEventDto.
        :rtype: datetime
        """
        return self._summer

    @summer.setter
    def summer(self, summer):
        """Sets the summer of this GeoEventDto.


        :param summer: The summer of this GeoEventDto.
        :type summer: datetime
        """

        self._summer = summer

    @property
    def winter(self):
        """Gets the winter of this GeoEventDto.


        :return: The winter of this GeoEventDto.
        :rtype: datetime
        """
        return self._winter

    @winter.setter
    def winter(self, winter):
        """Sets the winter of this GeoEventDto.


        :param winter: The winter of this GeoEventDto.
        :type winter: datetime
        """

        self._winter = winter

    @property
    def zodiac_sign(self):
        """Gets the zodiac_sign of this GeoEventDto.


        :return: The zodiac_sign of this GeoEventDto.
        :rtype: str
        """
        return self._zodiac_sign

    @zodiac_sign.setter
    def zodiac_sign(self, zodiac_sign):
        """Sets the zodiac_sign of this GeoEventDto.


        :param zodiac_sign: The zodiac_sign of this GeoEventDto.
        :type zodiac_sign: str
        """

        self._zodiac_sign = zodiac_sign
