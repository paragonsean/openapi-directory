# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class MoonIllum(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, angle: float=None, fraction: float=None, phase: float=None, phase_name: str=None, phase_name_enum: int=0):
        """MoonIllum - a model defined in OpenAPI

        :param angle: The angle of this MoonIllum.
        :param fraction: The fraction of this MoonIllum.
        :param phase: The phase of this MoonIllum.
        :param phase_name: The phase_name of this MoonIllum.
        :param phase_name_enum: The phase_name_enum of this MoonIllum.
        """
        self.openapi_types = {
            'angle': float,
            'fraction': float,
            'phase': float,
            'phase_name': str,
            'phase_name_enum': int
        }

        self.attribute_map = {
            'angle': 'angle',
            'fraction': 'fraction',
            'phase': 'phase',
            'phase_name': 'phaseName',
            'phase_name_enum': 'phaseNameEnum'
        }

        self._angle = angle
        self._fraction = fraction
        self._phase = phase
        self._phase_name = phase_name
        self._phase_name_enum = phase_name_enum

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MoonIllum':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The moonIllum of this MoonIllum.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def angle(self):
        """Gets the angle of this MoonIllum.


        :return: The angle of this MoonIllum.
        :rtype: float
        """
        return self._angle

    @angle.setter
    def angle(self, angle):
        """Sets the angle of this MoonIllum.


        :param angle: The angle of this MoonIllum.
        :type angle: float
        """

        self._angle = angle

    @property
    def fraction(self):
        """Gets the fraction of this MoonIllum.


        :return: The fraction of this MoonIllum.
        :rtype: float
        """
        return self._fraction

    @fraction.setter
    def fraction(self, fraction):
        """Sets the fraction of this MoonIllum.


        :param fraction: The fraction of this MoonIllum.
        :type fraction: float
        """

        self._fraction = fraction

    @property
    def phase(self):
        """Gets the phase of this MoonIllum.


        :return: The phase of this MoonIllum.
        :rtype: float
        """
        return self._phase

    @phase.setter
    def phase(self, phase):
        """Sets the phase of this MoonIllum.


        :param phase: The phase of this MoonIllum.
        :type phase: float
        """

        self._phase = phase

    @property
    def phase_name(self):
        """Gets the phase_name of this MoonIllum.


        :return: The phase_name of this MoonIllum.
        :rtype: str
        """
        return self._phase_name

    @phase_name.setter
    def phase_name(self, phase_name):
        """Sets the phase_name of this MoonIllum.


        :param phase_name: The phase_name of this MoonIllum.
        :type phase_name: str
        """

        self._phase_name = phase_name

    @property
    def phase_name_enum(self):
        """Gets the phase_name_enum of this MoonIllum.


        :return: The phase_name_enum of this MoonIllum.
        :rtype: int
        """
        return self._phase_name_enum

    @phase_name_enum.setter
    def phase_name_enum(self, phase_name_enum):
        """Sets the phase_name_enum of this MoonIllum.


        :param phase_name_enum: The phase_name_enum of this MoonIllum.
        :type phase_name_enum: int
        """
        allowed_values = [0, 1, 2, 3, 4, 5, 6, 7]  # noqa: E501
        if phase_name_enum not in allowed_values:
            raise ValueError(
                "Invalid value for `phase_name_enum` ({0}), must be one of {1}"
                .format(phase_name_enum, allowed_values)
            )

        self._phase_name_enum = phase_name_enum
