# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GeoFenceRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, check_coordinates: List[str]=None, fence_coordinates: List[str]=None):
        """GeoFenceRequest - a model defined in OpenAPI

        :param check_coordinates: The check_coordinates of this GeoFenceRequest.
        :param fence_coordinates: The fence_coordinates of this GeoFenceRequest.
        """
        self.openapi_types = {
            'check_coordinates': List[str],
            'fence_coordinates': List[str]
        }

        self.attribute_map = {
            'check_coordinates': 'checkCoordinates',
            'fence_coordinates': 'fenceCoordinates'
        }

        self._check_coordinates = check_coordinates
        self._fence_coordinates = fence_coordinates

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GeoFenceRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The geoFenceRequest of this GeoFenceRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def check_coordinates(self):
        """Gets the check_coordinates of this GeoFenceRequest.

        Array of coordinates to check if in the fence.    Accepted standards: (latlon | utm | mgrs | ecef | epsg3857 | georef | cartesian)

        :return: The check_coordinates of this GeoFenceRequest.
        :rtype: List[str]
        """
        return self._check_coordinates

    @check_coordinates.setter
    def check_coordinates(self, check_coordinates):
        """Sets the check_coordinates of this GeoFenceRequest.

        Array of coordinates to check if in the fence.    Accepted standards: (latlon | utm | mgrs | ecef | epsg3857 | georef | cartesian)

        :param check_coordinates: The check_coordinates of this GeoFenceRequest.
        :type check_coordinates: List[str]
        """

        self._check_coordinates = check_coordinates

    @property
    def fence_coordinates(self):
        """Gets the fence_coordinates of this GeoFenceRequest.

        Array of coordinates that define the fence.  First and last should be the same for polygons.    Accepted standards: (latlon | utm | mgrs | ecef | epsg3857 | georef | cartesian)

        :return: The fence_coordinates of this GeoFenceRequest.
        :rtype: List[str]
        """
        return self._fence_coordinates

    @fence_coordinates.setter
    def fence_coordinates(self, fence_coordinates):
        """Sets the fence_coordinates of this GeoFenceRequest.

        Array of coordinates that define the fence.  First and last should be the same for polygons.    Accepted standards: (latlon | utm | mgrs | ecef | epsg3857 | georef | cartesian)

        :param fence_coordinates: The fence_coordinates of this GeoFenceRequest.
        :type fence_coordinates: List[str]
        """

        self._fence_coordinates = fence_coordinates
