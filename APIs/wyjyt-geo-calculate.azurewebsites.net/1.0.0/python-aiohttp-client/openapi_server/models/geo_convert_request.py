# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GeoConvertRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, coordinates: str=None, format: str=None, system: str=None):
        """GeoConvertRequest - a model defined in OpenAPI

        :param coordinates: The coordinates of this GeoConvertRequest.
        :param format: The format of this GeoConvertRequest.
        :param system: The system of this GeoConvertRequest.
        """
        self.openapi_types = {
            'coordinates': str,
            'format': str,
            'system': str
        }

        self.attribute_map = {
            'coordinates': 'coordinates',
            'format': 'format',
            'system': 'system'
        }

        self._coordinates = coordinates
        self._format = format
        self._system = system

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GeoConvertRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The geoConvertRequest of this GeoConvertRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def coordinates(self):
        """Gets the coordinates of this GeoConvertRequest.

        Comma-separated list of Geo Coordinates to convert. See accepted Systems below.

        :return: The coordinates of this GeoConvertRequest.
        :rtype: str
        """
        return self._coordinates

    @coordinates.setter
    def coordinates(self, coordinates):
        """Sets the coordinates of this GeoConvertRequest.

        Comma-separated list of Geo Coordinates to convert. See accepted Systems below.

        :param coordinates: The coordinates of this GeoConvertRequest.
        :type coordinates: str
        """

        self._coordinates = coordinates

    @property
    def format(self):
        """Gets the format of this GeoConvertRequest.

        Output format:  (decimal, degree, minutes, seconds.)  Default is decimal.

        :return: The format of this GeoConvertRequest.
        :rtype: str
        """
        return self._format

    @format.setter
    def format(self, format):
        """Sets the format of this GeoConvertRequest.

        Output format:  (decimal, degree, minutes, seconds.)  Default is decimal.

        :param format: The format of this GeoConvertRequest.
        :type format: str
        """

        self._format = format

    @property
    def system(self):
        """Gets the system of this GeoConvertRequest.

        Output standard coordinate system:  (latlon | utm | mgrs | ecef | epsg3857 | georef | cartesian).    Default is latlon.

        :return: The system of this GeoConvertRequest.
        :rtype: str
        """
        return self._system

    @system.setter
    def system(self, system):
        """Sets the system of this GeoConvertRequest.

        Output standard coordinate system:  (latlon | utm | mgrs | ecef | epsg3857 | georef | cartesian).    Default is latlon.

        :param system: The system of this GeoConvertRequest.
        :type system: str
        """

        self._system = system
