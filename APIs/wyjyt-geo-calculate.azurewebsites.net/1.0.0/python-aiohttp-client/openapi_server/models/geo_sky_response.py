# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.geo_event_dto import GeoEventDto
from openapi_server.models.geo_moon_dto import GeoMoonDto
from openapi_server.models.geo_sun_dto import GeoSunDto
from openapi_server import util


class GeoSkyResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, event: GeoEventDto=None, moon: GeoMoonDto=None, sun: GeoSunDto=None):
        """GeoSkyResponse - a model defined in OpenAPI

        :param event: The event of this GeoSkyResponse.
        :param moon: The moon of this GeoSkyResponse.
        :param sun: The sun of this GeoSkyResponse.
        """
        self.openapi_types = {
            'event': GeoEventDto,
            'moon': GeoMoonDto,
            'sun': GeoSunDto
        }

        self.attribute_map = {
            'event': 'event',
            'moon': 'moon',
            'sun': 'sun'
        }

        self._event = event
        self._moon = moon
        self._sun = sun

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GeoSkyResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The geoSkyResponse of this GeoSkyResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def event(self):
        """Gets the event of this GeoSkyResponse.


        :return: The event of this GeoSkyResponse.
        :rtype: GeoEventDto
        """
        return self._event

    @event.setter
    def event(self, event):
        """Sets the event of this GeoSkyResponse.


        :param event: The event of this GeoSkyResponse.
        :type event: GeoEventDto
        """

        self._event = event

    @property
    def moon(self):
        """Gets the moon of this GeoSkyResponse.


        :return: The moon of this GeoSkyResponse.
        :rtype: GeoMoonDto
        """
        return self._moon

    @moon.setter
    def moon(self, moon):
        """Sets the moon of this GeoSkyResponse.


        :param moon: The moon of this GeoSkyResponse.
        :type moon: GeoMoonDto
        """

        self._moon = moon

    @property
    def sun(self):
        """Gets the sun of this GeoSkyResponse.


        :return: The sun of this GeoSkyResponse.
        :rtype: GeoSunDto
        """
        return self._sun

    @sun.setter
    def sun(self, sun):
        """Sets the sun of this GeoSkyResponse.


        :param sun: The sun of this GeoSkyResponse.
        :type sun: GeoSunDto
        """

        self._sun = sun
