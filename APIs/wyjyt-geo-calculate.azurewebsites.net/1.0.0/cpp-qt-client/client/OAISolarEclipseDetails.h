/**
 * Wyjyt - Geo Calculate
 * Widget API to calculate Geo Coordinates, Geo Fences and Sun, Moon, Sky, Eclipse information.  See https://wyjyt.com
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAISolarEclipseDetails.h
 *
 * 
 */

#ifndef OAISolarEclipseDetails_H
#define OAISolarEclipseDetails_H

#include <QJsonObject>

#include <QDateTime>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAISolarEclipseDetails : public OAIObject {
public:
    OAISolarEclipseDetails();
    OAISolarEclipseDetails(QString json);
    ~OAISolarEclipseDetails() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getAorTDuration() const;
    void setAorTDuration(const QString &aor_t_duration);
    bool is_aor_t_duration_Set() const;
    bool is_aor_t_duration_Valid() const;

    QDateTime getAorTEclipseBegin() const;
    void setAorTEclipseBegin(const QDateTime &aor_t_eclipse_begin);
    bool is_aor_t_eclipse_begin_Set() const;
    bool is_aor_t_eclipse_begin_Valid() const;

    QDateTime getAorTEclipseEnd() const;
    void setAorTEclipseEnd(const QDateTime &aor_t_eclipse_end);
    bool is_aor_t_eclipse_end_Set() const;
    bool is_aor_t_eclipse_end_Valid() const;

    QDateTime getDate() const;
    void setDate(const QDateTime &date);
    bool is_date_Set() const;
    bool is_date_Valid() const;

    bool isHasEclipseData() const;
    void setHasEclipseData(const bool &has_eclipse_data);
    bool is_has_eclipse_data_Set() const;
    bool is_has_eclipse_data_Valid() const;

    QDateTime getMaximumEclipse() const;
    void setMaximumEclipse(const QDateTime &maximum_eclipse);
    bool is_maximum_eclipse_Set() const;
    bool is_maximum_eclipse_Valid() const;

    QDateTime getPartialEclispeBegin() const;
    void setPartialEclispeBegin(const QDateTime &partial_eclispe_begin);
    bool is_partial_eclispe_begin_Set() const;
    bool is_partial_eclispe_begin_Valid() const;

    QDateTime getPartialEclispeEnd() const;
    void setPartialEclispeEnd(const QDateTime &partial_eclispe_end);
    bool is_partial_eclispe_end_Set() const;
    bool is_partial_eclispe_end_Valid() const;

    qint32 getType() const;
    void setType(const qint32 &type);
    bool is_type_Set() const;
    bool is_type_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_aor_t_duration;
    bool m_aor_t_duration_isSet;
    bool m_aor_t_duration_isValid;

    QDateTime m_aor_t_eclipse_begin;
    bool m_aor_t_eclipse_begin_isSet;
    bool m_aor_t_eclipse_begin_isValid;

    QDateTime m_aor_t_eclipse_end;
    bool m_aor_t_eclipse_end_isSet;
    bool m_aor_t_eclipse_end_isValid;

    QDateTime m_date;
    bool m_date_isSet;
    bool m_date_isValid;

    bool m_has_eclipse_data;
    bool m_has_eclipse_data_isSet;
    bool m_has_eclipse_data_isValid;

    QDateTime m_maximum_eclipse;
    bool m_maximum_eclipse_isSet;
    bool m_maximum_eclipse_isValid;

    QDateTime m_partial_eclispe_begin;
    bool m_partial_eclispe_begin_isSet;
    bool m_partial_eclispe_begin_isValid;

    QDateTime m_partial_eclispe_end;
    bool m_partial_eclispe_end_isSet;
    bool m_partial_eclispe_end_isValid;

    qint32 m_type;
    bool m_type_isSet;
    bool m_type_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAISolarEclipseDetails)

#endif // OAISolarEclipseDetails_H
