/**
 * Wyjyt - Geo Calculate
 * Widget API to calculate Geo Coordinates, Geo Fences and Sun, Moon, Sky, Eclipse information.  See https://wyjyt.com
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGeoEventDto.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGeoEventDto::OAIGeoEventDto(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGeoEventDto::OAIGeoEventDto() {
    this->initializeModel();
}

OAIGeoEventDto::~OAIGeoEventDto() {}

void OAIGeoEventDto::initializeModel() {

    m_fall_isSet = false;
    m_fall_isValid = false;

    m_last_apogee_isSet = false;
    m_last_apogee_isValid = false;

    m_last_perigee_isSet = false;
    m_last_perigee_isValid = false;

    m_next_apogee_isSet = false;
    m_next_apogee_isValid = false;

    m_next_perigee_isSet = false;
    m_next_perigee_isValid = false;

    m_spring_isSet = false;
    m_spring_isValid = false;

    m_summer_isSet = false;
    m_summer_isValid = false;

    m_winter_isSet = false;
    m_winter_isValid = false;

    m_zodiac_sign_isSet = false;
    m_zodiac_sign_isValid = false;
}

void OAIGeoEventDto::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGeoEventDto::fromJsonObject(QJsonObject json) {

    m_fall_isValid = ::OpenAPI::fromJsonValue(m_fall, json[QString("fall")]);
    m_fall_isSet = !json[QString("fall")].isNull() && m_fall_isValid;

    m_last_apogee_isValid = ::OpenAPI::fromJsonValue(m_last_apogee, json[QString("lastApogee")]);
    m_last_apogee_isSet = !json[QString("lastApogee")].isNull() && m_last_apogee_isValid;

    m_last_perigee_isValid = ::OpenAPI::fromJsonValue(m_last_perigee, json[QString("lastPerigee")]);
    m_last_perigee_isSet = !json[QString("lastPerigee")].isNull() && m_last_perigee_isValid;

    m_next_apogee_isValid = ::OpenAPI::fromJsonValue(m_next_apogee, json[QString("nextApogee")]);
    m_next_apogee_isSet = !json[QString("nextApogee")].isNull() && m_next_apogee_isValid;

    m_next_perigee_isValid = ::OpenAPI::fromJsonValue(m_next_perigee, json[QString("nextPerigee")]);
    m_next_perigee_isSet = !json[QString("nextPerigee")].isNull() && m_next_perigee_isValid;

    m_spring_isValid = ::OpenAPI::fromJsonValue(m_spring, json[QString("spring")]);
    m_spring_isSet = !json[QString("spring")].isNull() && m_spring_isValid;

    m_summer_isValid = ::OpenAPI::fromJsonValue(m_summer, json[QString("summer")]);
    m_summer_isSet = !json[QString("summer")].isNull() && m_summer_isValid;

    m_winter_isValid = ::OpenAPI::fromJsonValue(m_winter, json[QString("winter")]);
    m_winter_isSet = !json[QString("winter")].isNull() && m_winter_isValid;

    m_zodiac_sign_isValid = ::OpenAPI::fromJsonValue(m_zodiac_sign, json[QString("zodiacSign")]);
    m_zodiac_sign_isSet = !json[QString("zodiacSign")].isNull() && m_zodiac_sign_isValid;
}

QString OAIGeoEventDto::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGeoEventDto::asJsonObject() const {
    QJsonObject obj;
    if (m_fall_isSet) {
        obj.insert(QString("fall"), ::OpenAPI::toJsonValue(m_fall));
    }
    if (m_last_apogee_isSet) {
        obj.insert(QString("lastApogee"), ::OpenAPI::toJsonValue(m_last_apogee));
    }
    if (m_last_perigee_isSet) {
        obj.insert(QString("lastPerigee"), ::OpenAPI::toJsonValue(m_last_perigee));
    }
    if (m_next_apogee_isSet) {
        obj.insert(QString("nextApogee"), ::OpenAPI::toJsonValue(m_next_apogee));
    }
    if (m_next_perigee_isSet) {
        obj.insert(QString("nextPerigee"), ::OpenAPI::toJsonValue(m_next_perigee));
    }
    if (m_spring_isSet) {
        obj.insert(QString("spring"), ::OpenAPI::toJsonValue(m_spring));
    }
    if (m_summer_isSet) {
        obj.insert(QString("summer"), ::OpenAPI::toJsonValue(m_summer));
    }
    if (m_winter_isSet) {
        obj.insert(QString("winter"), ::OpenAPI::toJsonValue(m_winter));
    }
    if (m_zodiac_sign_isSet) {
        obj.insert(QString("zodiacSign"), ::OpenAPI::toJsonValue(m_zodiac_sign));
    }
    return obj;
}

QDateTime OAIGeoEventDto::getFall() const {
    return m_fall;
}
void OAIGeoEventDto::setFall(const QDateTime &fall) {
    m_fall = fall;
    m_fall_isSet = true;
}

bool OAIGeoEventDto::is_fall_Set() const{
    return m_fall_isSet;
}

bool OAIGeoEventDto::is_fall_Valid() const{
    return m_fall_isValid;
}

QDateTime OAIGeoEventDto::getLastApogee() const {
    return m_last_apogee;
}
void OAIGeoEventDto::setLastApogee(const QDateTime &last_apogee) {
    m_last_apogee = last_apogee;
    m_last_apogee_isSet = true;
}

bool OAIGeoEventDto::is_last_apogee_Set() const{
    return m_last_apogee_isSet;
}

bool OAIGeoEventDto::is_last_apogee_Valid() const{
    return m_last_apogee_isValid;
}

QDateTime OAIGeoEventDto::getLastPerigee() const {
    return m_last_perigee;
}
void OAIGeoEventDto::setLastPerigee(const QDateTime &last_perigee) {
    m_last_perigee = last_perigee;
    m_last_perigee_isSet = true;
}

bool OAIGeoEventDto::is_last_perigee_Set() const{
    return m_last_perigee_isSet;
}

bool OAIGeoEventDto::is_last_perigee_Valid() const{
    return m_last_perigee_isValid;
}

QDateTime OAIGeoEventDto::getNextApogee() const {
    return m_next_apogee;
}
void OAIGeoEventDto::setNextApogee(const QDateTime &next_apogee) {
    m_next_apogee = next_apogee;
    m_next_apogee_isSet = true;
}

bool OAIGeoEventDto::is_next_apogee_Set() const{
    return m_next_apogee_isSet;
}

bool OAIGeoEventDto::is_next_apogee_Valid() const{
    return m_next_apogee_isValid;
}

QDateTime OAIGeoEventDto::getNextPerigee() const {
    return m_next_perigee;
}
void OAIGeoEventDto::setNextPerigee(const QDateTime &next_perigee) {
    m_next_perigee = next_perigee;
    m_next_perigee_isSet = true;
}

bool OAIGeoEventDto::is_next_perigee_Set() const{
    return m_next_perigee_isSet;
}

bool OAIGeoEventDto::is_next_perigee_Valid() const{
    return m_next_perigee_isValid;
}

QDateTime OAIGeoEventDto::getSpring() const {
    return m_spring;
}
void OAIGeoEventDto::setSpring(const QDateTime &spring) {
    m_spring = spring;
    m_spring_isSet = true;
}

bool OAIGeoEventDto::is_spring_Set() const{
    return m_spring_isSet;
}

bool OAIGeoEventDto::is_spring_Valid() const{
    return m_spring_isValid;
}

QDateTime OAIGeoEventDto::getSummer() const {
    return m_summer;
}
void OAIGeoEventDto::setSummer(const QDateTime &summer) {
    m_summer = summer;
    m_summer_isSet = true;
}

bool OAIGeoEventDto::is_summer_Set() const{
    return m_summer_isSet;
}

bool OAIGeoEventDto::is_summer_Valid() const{
    return m_summer_isValid;
}

QDateTime OAIGeoEventDto::getWinter() const {
    return m_winter;
}
void OAIGeoEventDto::setWinter(const QDateTime &winter) {
    m_winter = winter;
    m_winter_isSet = true;
}

bool OAIGeoEventDto::is_winter_Set() const{
    return m_winter_isSet;
}

bool OAIGeoEventDto::is_winter_Valid() const{
    return m_winter_isValid;
}

QString OAIGeoEventDto::getZodiacSign() const {
    return m_zodiac_sign;
}
void OAIGeoEventDto::setZodiacSign(const QString &zodiac_sign) {
    m_zodiac_sign = zodiac_sign;
    m_zodiac_sign_isSet = true;
}

bool OAIGeoEventDto::is_zodiac_sign_Set() const{
    return m_zodiac_sign_isSet;
}

bool OAIGeoEventDto::is_zodiac_sign_Valid() const{
    return m_zodiac_sign_isValid;
}

bool OAIGeoEventDto::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_fall_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_apogee_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_perigee_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_apogee_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_perigee_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_spring_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_summer_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_winter_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_zodiac_sign_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGeoEventDto::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
