/**
 * Wyjyt - Geo Calculate
 * Widget API to calculate Geo Coordinates, Geo Fences and Sun, Moon, Sky, Eclipse information.  See https://wyjyt.com
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIGeoEventDto.h
 *
 * Celestial event information.
 */

#ifndef OAIGeoEventDto_H
#define OAIGeoEventDto_H

#include <QJsonObject>

#include <QDateTime>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIGeoEventDto : public OAIObject {
public:
    OAIGeoEventDto();
    OAIGeoEventDto(QString json);
    ~OAIGeoEventDto() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QDateTime getFall() const;
    void setFall(const QDateTime &fall);
    bool is_fall_Set() const;
    bool is_fall_Valid() const;

    QDateTime getLastApogee() const;
    void setLastApogee(const QDateTime &last_apogee);
    bool is_last_apogee_Set() const;
    bool is_last_apogee_Valid() const;

    QDateTime getLastPerigee() const;
    void setLastPerigee(const QDateTime &last_perigee);
    bool is_last_perigee_Set() const;
    bool is_last_perigee_Valid() const;

    QDateTime getNextApogee() const;
    void setNextApogee(const QDateTime &next_apogee);
    bool is_next_apogee_Set() const;
    bool is_next_apogee_Valid() const;

    QDateTime getNextPerigee() const;
    void setNextPerigee(const QDateTime &next_perigee);
    bool is_next_perigee_Set() const;
    bool is_next_perigee_Valid() const;

    QDateTime getSpring() const;
    void setSpring(const QDateTime &spring);
    bool is_spring_Set() const;
    bool is_spring_Valid() const;

    QDateTime getSummer() const;
    void setSummer(const QDateTime &summer);
    bool is_summer_Set() const;
    bool is_summer_Valid() const;

    QDateTime getWinter() const;
    void setWinter(const QDateTime &winter);
    bool is_winter_Set() const;
    bool is_winter_Valid() const;

    QString getZodiacSign() const;
    void setZodiacSign(const QString &zodiac_sign);
    bool is_zodiac_sign_Set() const;
    bool is_zodiac_sign_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QDateTime m_fall;
    bool m_fall_isSet;
    bool m_fall_isValid;

    QDateTime m_last_apogee;
    bool m_last_apogee_isSet;
    bool m_last_apogee_isValid;

    QDateTime m_last_perigee;
    bool m_last_perigee_isSet;
    bool m_last_perigee_isValid;

    QDateTime m_next_apogee;
    bool m_next_apogee_isSet;
    bool m_next_apogee_isValid;

    QDateTime m_next_perigee;
    bool m_next_perigee_isSet;
    bool m_next_perigee_isValid;

    QDateTime m_spring;
    bool m_spring_isSet;
    bool m_spring_isValid;

    QDateTime m_summer;
    bool m_summer_isSet;
    bool m_summer_isValid;

    QDateTime m_winter;
    bool m_winter_isSet;
    bool m_winter_isValid;

    QString m_zodiac_sign;
    bool m_zodiac_sign_isSet;
    bool m_zodiac_sign_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIGeoEventDto)

#endif // OAIGeoEventDto_H
