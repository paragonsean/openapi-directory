/**
 * Wyjyt - Geo Calculate
 * Widget API to calculate Geo Coordinates, Geo Fences and Sun, Moon, Sky, Eclipse information.  See https://wyjyt.com
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILunarEclipseDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILunarEclipseDetails::OAILunarEclipseDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILunarEclipseDetails::OAILunarEclipseDetails() {
    this->initializeModel();
}

OAILunarEclipseDetails::~OAILunarEclipseDetails() {}

void OAILunarEclipseDetails::initializeModel() {

    m_date_isSet = false;
    m_date_isValid = false;

    m_has_eclipse_data_isSet = false;
    m_has_eclipse_data_isValid = false;

    m_mid_eclipse_isSet = false;
    m_mid_eclipse_isValid = false;

    m_partial_eclispe_begin_isSet = false;
    m_partial_eclispe_begin_isValid = false;

    m_partial_eclispe_end_isSet = false;
    m_partial_eclispe_end_isValid = false;

    m_penumbral_eclipse_begin_isSet = false;
    m_penumbral_eclipse_begin_isValid = false;

    m_penumbral_eclispe_end_isSet = false;
    m_penumbral_eclispe_end_isValid = false;

    m_total_eclipse_begin_isSet = false;
    m_total_eclipse_begin_isValid = false;

    m_total_eclipse_end_isSet = false;
    m_total_eclipse_end_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAILunarEclipseDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILunarEclipseDetails::fromJsonObject(QJsonObject json) {

    m_date_isValid = ::OpenAPI::fromJsonValue(m_date, json[QString("date")]);
    m_date_isSet = !json[QString("date")].isNull() && m_date_isValid;

    m_has_eclipse_data_isValid = ::OpenAPI::fromJsonValue(m_has_eclipse_data, json[QString("hasEclipseData")]);
    m_has_eclipse_data_isSet = !json[QString("hasEclipseData")].isNull() && m_has_eclipse_data_isValid;

    m_mid_eclipse_isValid = ::OpenAPI::fromJsonValue(m_mid_eclipse, json[QString("midEclipse")]);
    m_mid_eclipse_isSet = !json[QString("midEclipse")].isNull() && m_mid_eclipse_isValid;

    m_partial_eclispe_begin_isValid = ::OpenAPI::fromJsonValue(m_partial_eclispe_begin, json[QString("partialEclispeBegin")]);
    m_partial_eclispe_begin_isSet = !json[QString("partialEclispeBegin")].isNull() && m_partial_eclispe_begin_isValid;

    m_partial_eclispe_end_isValid = ::OpenAPI::fromJsonValue(m_partial_eclispe_end, json[QString("partialEclispeEnd")]);
    m_partial_eclispe_end_isSet = !json[QString("partialEclispeEnd")].isNull() && m_partial_eclispe_end_isValid;

    m_penumbral_eclipse_begin_isValid = ::OpenAPI::fromJsonValue(m_penumbral_eclipse_begin, json[QString("penumbralEclipseBegin")]);
    m_penumbral_eclipse_begin_isSet = !json[QString("penumbralEclipseBegin")].isNull() && m_penumbral_eclipse_begin_isValid;

    m_penumbral_eclispe_end_isValid = ::OpenAPI::fromJsonValue(m_penumbral_eclispe_end, json[QString("penumbralEclispeEnd")]);
    m_penumbral_eclispe_end_isSet = !json[QString("penumbralEclispeEnd")].isNull() && m_penumbral_eclispe_end_isValid;

    m_total_eclipse_begin_isValid = ::OpenAPI::fromJsonValue(m_total_eclipse_begin, json[QString("totalEclipseBegin")]);
    m_total_eclipse_begin_isSet = !json[QString("totalEclipseBegin")].isNull() && m_total_eclipse_begin_isValid;

    m_total_eclipse_end_isValid = ::OpenAPI::fromJsonValue(m_total_eclipse_end, json[QString("totalEclipseEnd")]);
    m_total_eclipse_end_isSet = !json[QString("totalEclipseEnd")].isNull() && m_total_eclipse_end_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAILunarEclipseDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILunarEclipseDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_date_isSet) {
        obj.insert(QString("date"), ::OpenAPI::toJsonValue(m_date));
    }
    if (m_has_eclipse_data_isSet) {
        obj.insert(QString("hasEclipseData"), ::OpenAPI::toJsonValue(m_has_eclipse_data));
    }
    if (m_mid_eclipse_isSet) {
        obj.insert(QString("midEclipse"), ::OpenAPI::toJsonValue(m_mid_eclipse));
    }
    if (m_partial_eclispe_begin_isSet) {
        obj.insert(QString("partialEclispeBegin"), ::OpenAPI::toJsonValue(m_partial_eclispe_begin));
    }
    if (m_partial_eclispe_end_isSet) {
        obj.insert(QString("partialEclispeEnd"), ::OpenAPI::toJsonValue(m_partial_eclispe_end));
    }
    if (m_penumbral_eclipse_begin_isSet) {
        obj.insert(QString("penumbralEclipseBegin"), ::OpenAPI::toJsonValue(m_penumbral_eclipse_begin));
    }
    if (m_penumbral_eclispe_end_isSet) {
        obj.insert(QString("penumbralEclispeEnd"), ::OpenAPI::toJsonValue(m_penumbral_eclispe_end));
    }
    if (m_total_eclipse_begin_isSet) {
        obj.insert(QString("totalEclipseBegin"), ::OpenAPI::toJsonValue(m_total_eclipse_begin));
    }
    if (m_total_eclipse_end_isSet) {
        obj.insert(QString("totalEclipseEnd"), ::OpenAPI::toJsonValue(m_total_eclipse_end));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QDateTime OAILunarEclipseDetails::getDate() const {
    return m_date;
}
void OAILunarEclipseDetails::setDate(const QDateTime &date) {
    m_date = date;
    m_date_isSet = true;
}

bool OAILunarEclipseDetails::is_date_Set() const{
    return m_date_isSet;
}

bool OAILunarEclipseDetails::is_date_Valid() const{
    return m_date_isValid;
}

bool OAILunarEclipseDetails::isHasEclipseData() const {
    return m_has_eclipse_data;
}
void OAILunarEclipseDetails::setHasEclipseData(const bool &has_eclipse_data) {
    m_has_eclipse_data = has_eclipse_data;
    m_has_eclipse_data_isSet = true;
}

bool OAILunarEclipseDetails::is_has_eclipse_data_Set() const{
    return m_has_eclipse_data_isSet;
}

bool OAILunarEclipseDetails::is_has_eclipse_data_Valid() const{
    return m_has_eclipse_data_isValid;
}

QDateTime OAILunarEclipseDetails::getMidEclipse() const {
    return m_mid_eclipse;
}
void OAILunarEclipseDetails::setMidEclipse(const QDateTime &mid_eclipse) {
    m_mid_eclipse = mid_eclipse;
    m_mid_eclipse_isSet = true;
}

bool OAILunarEclipseDetails::is_mid_eclipse_Set() const{
    return m_mid_eclipse_isSet;
}

bool OAILunarEclipseDetails::is_mid_eclipse_Valid() const{
    return m_mid_eclipse_isValid;
}

QDateTime OAILunarEclipseDetails::getPartialEclispeBegin() const {
    return m_partial_eclispe_begin;
}
void OAILunarEclipseDetails::setPartialEclispeBegin(const QDateTime &partial_eclispe_begin) {
    m_partial_eclispe_begin = partial_eclispe_begin;
    m_partial_eclispe_begin_isSet = true;
}

bool OAILunarEclipseDetails::is_partial_eclispe_begin_Set() const{
    return m_partial_eclispe_begin_isSet;
}

bool OAILunarEclipseDetails::is_partial_eclispe_begin_Valid() const{
    return m_partial_eclispe_begin_isValid;
}

QDateTime OAILunarEclipseDetails::getPartialEclispeEnd() const {
    return m_partial_eclispe_end;
}
void OAILunarEclipseDetails::setPartialEclispeEnd(const QDateTime &partial_eclispe_end) {
    m_partial_eclispe_end = partial_eclispe_end;
    m_partial_eclispe_end_isSet = true;
}

bool OAILunarEclipseDetails::is_partial_eclispe_end_Set() const{
    return m_partial_eclispe_end_isSet;
}

bool OAILunarEclipseDetails::is_partial_eclispe_end_Valid() const{
    return m_partial_eclispe_end_isValid;
}

QDateTime OAILunarEclipseDetails::getPenumbralEclipseBegin() const {
    return m_penumbral_eclipse_begin;
}
void OAILunarEclipseDetails::setPenumbralEclipseBegin(const QDateTime &penumbral_eclipse_begin) {
    m_penumbral_eclipse_begin = penumbral_eclipse_begin;
    m_penumbral_eclipse_begin_isSet = true;
}

bool OAILunarEclipseDetails::is_penumbral_eclipse_begin_Set() const{
    return m_penumbral_eclipse_begin_isSet;
}

bool OAILunarEclipseDetails::is_penumbral_eclipse_begin_Valid() const{
    return m_penumbral_eclipse_begin_isValid;
}

QDateTime OAILunarEclipseDetails::getPenumbralEclispeEnd() const {
    return m_penumbral_eclispe_end;
}
void OAILunarEclipseDetails::setPenumbralEclispeEnd(const QDateTime &penumbral_eclispe_end) {
    m_penumbral_eclispe_end = penumbral_eclispe_end;
    m_penumbral_eclispe_end_isSet = true;
}

bool OAILunarEclipseDetails::is_penumbral_eclispe_end_Set() const{
    return m_penumbral_eclispe_end_isSet;
}

bool OAILunarEclipseDetails::is_penumbral_eclispe_end_Valid() const{
    return m_penumbral_eclispe_end_isValid;
}

QDateTime OAILunarEclipseDetails::getTotalEclipseBegin() const {
    return m_total_eclipse_begin;
}
void OAILunarEclipseDetails::setTotalEclipseBegin(const QDateTime &total_eclipse_begin) {
    m_total_eclipse_begin = total_eclipse_begin;
    m_total_eclipse_begin_isSet = true;
}

bool OAILunarEclipseDetails::is_total_eclipse_begin_Set() const{
    return m_total_eclipse_begin_isSet;
}

bool OAILunarEclipseDetails::is_total_eclipse_begin_Valid() const{
    return m_total_eclipse_begin_isValid;
}

QDateTime OAILunarEclipseDetails::getTotalEclipseEnd() const {
    return m_total_eclipse_end;
}
void OAILunarEclipseDetails::setTotalEclipseEnd(const QDateTime &total_eclipse_end) {
    m_total_eclipse_end = total_eclipse_end;
    m_total_eclipse_end_isSet = true;
}

bool OAILunarEclipseDetails::is_total_eclipse_end_Set() const{
    return m_total_eclipse_end_isSet;
}

bool OAILunarEclipseDetails::is_total_eclipse_end_Valid() const{
    return m_total_eclipse_end_isValid;
}

qint32 OAILunarEclipseDetails::getType() const {
    return m_type;
}
void OAILunarEclipseDetails::setType(const qint32 &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAILunarEclipseDetails::is_type_Set() const{
    return m_type_isSet;
}

bool OAILunarEclipseDetails::is_type_Valid() const{
    return m_type_isValid;
}

bool OAILunarEclipseDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_eclipse_data_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mid_eclipse_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_partial_eclispe_begin_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_partial_eclispe_end_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_penumbral_eclipse_begin_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_penumbral_eclispe_end_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_eclipse_begin_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_eclipse_end_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILunarEclipseDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
