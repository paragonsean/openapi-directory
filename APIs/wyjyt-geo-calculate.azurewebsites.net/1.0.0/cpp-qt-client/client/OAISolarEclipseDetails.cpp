/**
 * Wyjyt - Geo Calculate
 * Widget API to calculate Geo Coordinates, Geo Fences and Sun, Moon, Sky, Eclipse information.  See https://wyjyt.com
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISolarEclipseDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISolarEclipseDetails::OAISolarEclipseDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISolarEclipseDetails::OAISolarEclipseDetails() {
    this->initializeModel();
}

OAISolarEclipseDetails::~OAISolarEclipseDetails() {}

void OAISolarEclipseDetails::initializeModel() {

    m_aor_t_duration_isSet = false;
    m_aor_t_duration_isValid = false;

    m_aor_t_eclipse_begin_isSet = false;
    m_aor_t_eclipse_begin_isValid = false;

    m_aor_t_eclipse_end_isSet = false;
    m_aor_t_eclipse_end_isValid = false;

    m_date_isSet = false;
    m_date_isValid = false;

    m_has_eclipse_data_isSet = false;
    m_has_eclipse_data_isValid = false;

    m_maximum_eclipse_isSet = false;
    m_maximum_eclipse_isValid = false;

    m_partial_eclispe_begin_isSet = false;
    m_partial_eclispe_begin_isValid = false;

    m_partial_eclispe_end_isSet = false;
    m_partial_eclispe_end_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAISolarEclipseDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISolarEclipseDetails::fromJsonObject(QJsonObject json) {

    m_aor_t_duration_isValid = ::OpenAPI::fromJsonValue(m_aor_t_duration, json[QString("aorTDuration")]);
    m_aor_t_duration_isSet = !json[QString("aorTDuration")].isNull() && m_aor_t_duration_isValid;

    m_aor_t_eclipse_begin_isValid = ::OpenAPI::fromJsonValue(m_aor_t_eclipse_begin, json[QString("aorTEclipseBegin")]);
    m_aor_t_eclipse_begin_isSet = !json[QString("aorTEclipseBegin")].isNull() && m_aor_t_eclipse_begin_isValid;

    m_aor_t_eclipse_end_isValid = ::OpenAPI::fromJsonValue(m_aor_t_eclipse_end, json[QString("aorTEclipseEnd")]);
    m_aor_t_eclipse_end_isSet = !json[QString("aorTEclipseEnd")].isNull() && m_aor_t_eclipse_end_isValid;

    m_date_isValid = ::OpenAPI::fromJsonValue(m_date, json[QString("date")]);
    m_date_isSet = !json[QString("date")].isNull() && m_date_isValid;

    m_has_eclipse_data_isValid = ::OpenAPI::fromJsonValue(m_has_eclipse_data, json[QString("hasEclipseData")]);
    m_has_eclipse_data_isSet = !json[QString("hasEclipseData")].isNull() && m_has_eclipse_data_isValid;

    m_maximum_eclipse_isValid = ::OpenAPI::fromJsonValue(m_maximum_eclipse, json[QString("maximumEclipse")]);
    m_maximum_eclipse_isSet = !json[QString("maximumEclipse")].isNull() && m_maximum_eclipse_isValid;

    m_partial_eclispe_begin_isValid = ::OpenAPI::fromJsonValue(m_partial_eclispe_begin, json[QString("partialEclispeBegin")]);
    m_partial_eclispe_begin_isSet = !json[QString("partialEclispeBegin")].isNull() && m_partial_eclispe_begin_isValid;

    m_partial_eclispe_end_isValid = ::OpenAPI::fromJsonValue(m_partial_eclispe_end, json[QString("partialEclispeEnd")]);
    m_partial_eclispe_end_isSet = !json[QString("partialEclispeEnd")].isNull() && m_partial_eclispe_end_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAISolarEclipseDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISolarEclipseDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_aor_t_duration_isSet) {
        obj.insert(QString("aorTDuration"), ::OpenAPI::toJsonValue(m_aor_t_duration));
    }
    if (m_aor_t_eclipse_begin_isSet) {
        obj.insert(QString("aorTEclipseBegin"), ::OpenAPI::toJsonValue(m_aor_t_eclipse_begin));
    }
    if (m_aor_t_eclipse_end_isSet) {
        obj.insert(QString("aorTEclipseEnd"), ::OpenAPI::toJsonValue(m_aor_t_eclipse_end));
    }
    if (m_date_isSet) {
        obj.insert(QString("date"), ::OpenAPI::toJsonValue(m_date));
    }
    if (m_has_eclipse_data_isSet) {
        obj.insert(QString("hasEclipseData"), ::OpenAPI::toJsonValue(m_has_eclipse_data));
    }
    if (m_maximum_eclipse_isSet) {
        obj.insert(QString("maximumEclipse"), ::OpenAPI::toJsonValue(m_maximum_eclipse));
    }
    if (m_partial_eclispe_begin_isSet) {
        obj.insert(QString("partialEclispeBegin"), ::OpenAPI::toJsonValue(m_partial_eclispe_begin));
    }
    if (m_partial_eclispe_end_isSet) {
        obj.insert(QString("partialEclispeEnd"), ::OpenAPI::toJsonValue(m_partial_eclispe_end));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAISolarEclipseDetails::getAorTDuration() const {
    return m_aor_t_duration;
}
void OAISolarEclipseDetails::setAorTDuration(const QString &aor_t_duration) {
    m_aor_t_duration = aor_t_duration;
    m_aor_t_duration_isSet = true;
}

bool OAISolarEclipseDetails::is_aor_t_duration_Set() const{
    return m_aor_t_duration_isSet;
}

bool OAISolarEclipseDetails::is_aor_t_duration_Valid() const{
    return m_aor_t_duration_isValid;
}

QDateTime OAISolarEclipseDetails::getAorTEclipseBegin() const {
    return m_aor_t_eclipse_begin;
}
void OAISolarEclipseDetails::setAorTEclipseBegin(const QDateTime &aor_t_eclipse_begin) {
    m_aor_t_eclipse_begin = aor_t_eclipse_begin;
    m_aor_t_eclipse_begin_isSet = true;
}

bool OAISolarEclipseDetails::is_aor_t_eclipse_begin_Set() const{
    return m_aor_t_eclipse_begin_isSet;
}

bool OAISolarEclipseDetails::is_aor_t_eclipse_begin_Valid() const{
    return m_aor_t_eclipse_begin_isValid;
}

QDateTime OAISolarEclipseDetails::getAorTEclipseEnd() const {
    return m_aor_t_eclipse_end;
}
void OAISolarEclipseDetails::setAorTEclipseEnd(const QDateTime &aor_t_eclipse_end) {
    m_aor_t_eclipse_end = aor_t_eclipse_end;
    m_aor_t_eclipse_end_isSet = true;
}

bool OAISolarEclipseDetails::is_aor_t_eclipse_end_Set() const{
    return m_aor_t_eclipse_end_isSet;
}

bool OAISolarEclipseDetails::is_aor_t_eclipse_end_Valid() const{
    return m_aor_t_eclipse_end_isValid;
}

QDateTime OAISolarEclipseDetails::getDate() const {
    return m_date;
}
void OAISolarEclipseDetails::setDate(const QDateTime &date) {
    m_date = date;
    m_date_isSet = true;
}

bool OAISolarEclipseDetails::is_date_Set() const{
    return m_date_isSet;
}

bool OAISolarEclipseDetails::is_date_Valid() const{
    return m_date_isValid;
}

bool OAISolarEclipseDetails::isHasEclipseData() const {
    return m_has_eclipse_data;
}
void OAISolarEclipseDetails::setHasEclipseData(const bool &has_eclipse_data) {
    m_has_eclipse_data = has_eclipse_data;
    m_has_eclipse_data_isSet = true;
}

bool OAISolarEclipseDetails::is_has_eclipse_data_Set() const{
    return m_has_eclipse_data_isSet;
}

bool OAISolarEclipseDetails::is_has_eclipse_data_Valid() const{
    return m_has_eclipse_data_isValid;
}

QDateTime OAISolarEclipseDetails::getMaximumEclipse() const {
    return m_maximum_eclipse;
}
void OAISolarEclipseDetails::setMaximumEclipse(const QDateTime &maximum_eclipse) {
    m_maximum_eclipse = maximum_eclipse;
    m_maximum_eclipse_isSet = true;
}

bool OAISolarEclipseDetails::is_maximum_eclipse_Set() const{
    return m_maximum_eclipse_isSet;
}

bool OAISolarEclipseDetails::is_maximum_eclipse_Valid() const{
    return m_maximum_eclipse_isValid;
}

QDateTime OAISolarEclipseDetails::getPartialEclispeBegin() const {
    return m_partial_eclispe_begin;
}
void OAISolarEclipseDetails::setPartialEclispeBegin(const QDateTime &partial_eclispe_begin) {
    m_partial_eclispe_begin = partial_eclispe_begin;
    m_partial_eclispe_begin_isSet = true;
}

bool OAISolarEclipseDetails::is_partial_eclispe_begin_Set() const{
    return m_partial_eclispe_begin_isSet;
}

bool OAISolarEclipseDetails::is_partial_eclispe_begin_Valid() const{
    return m_partial_eclispe_begin_isValid;
}

QDateTime OAISolarEclipseDetails::getPartialEclispeEnd() const {
    return m_partial_eclispe_end;
}
void OAISolarEclipseDetails::setPartialEclispeEnd(const QDateTime &partial_eclispe_end) {
    m_partial_eclispe_end = partial_eclispe_end;
    m_partial_eclispe_end_isSet = true;
}

bool OAISolarEclipseDetails::is_partial_eclispe_end_Set() const{
    return m_partial_eclispe_end_isSet;
}

bool OAISolarEclipseDetails::is_partial_eclispe_end_Valid() const{
    return m_partial_eclispe_end_isValid;
}

qint32 OAISolarEclipseDetails::getType() const {
    return m_type;
}
void OAISolarEclipseDetails::setType(const qint32 &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAISolarEclipseDetails::is_type_Set() const{
    return m_type_isSet;
}

bool OAISolarEclipseDetails::is_type_Valid() const{
    return m_type_isValid;
}

bool OAISolarEclipseDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_aor_t_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_aor_t_eclipse_begin_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_aor_t_eclipse_end_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_eclipse_data_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_maximum_eclipse_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_partial_eclispe_begin_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_partial_eclispe_end_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISolarEclipseDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
