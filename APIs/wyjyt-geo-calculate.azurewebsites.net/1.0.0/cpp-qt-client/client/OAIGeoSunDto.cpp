/**
 * Wyjyt - Geo Calculate
 * Widget API to calculate Geo Coordinates, Geo Fences and Sun, Moon, Sky, Eclipse information.  See https://wyjyt.com
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGeoSunDto.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGeoSunDto::OAIGeoSunDto(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGeoSunDto::OAIGeoSunDto() {
    this->initializeModel();
}

OAIGeoSunDto::~OAIGeoSunDto() {}

void OAIGeoSunDto::initializeModel() {

    m_altitude_isSet = false;
    m_altitude_isValid = false;

    m_azimuth_isSet = false;
    m_azimuth_isValid = false;

    m_dawn_isSet = false;
    m_dawn_isValid = false;

    m_declination_isSet = false;
    m_declination_isValid = false;

    m_dusk_isSet = false;
    m_dusk_isValid = false;

    m_is_up_isSet = false;
    m_is_up_isValid = false;

    m_last_eclipse_isSet = false;
    m_last_eclipse_isValid = false;

    m_next_eclipse_isSet = false;
    m_next_eclipse_isValid = false;

    m_noon_isSet = false;
    m_noon_isValid = false;

    m_right_ascension_isSet = false;
    m_right_ascension_isValid = false;

    m_rise_isSet = false;
    m_rise_isValid = false;

    m_r_set_isSet = false;
    m_r_set_isValid = false;
}

void OAIGeoSunDto::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGeoSunDto::fromJsonObject(QJsonObject json) {

    m_altitude_isValid = ::OpenAPI::fromJsonValue(m_altitude, json[QString("altitude")]);
    m_altitude_isSet = !json[QString("altitude")].isNull() && m_altitude_isValid;

    m_azimuth_isValid = ::OpenAPI::fromJsonValue(m_azimuth, json[QString("azimuth")]);
    m_azimuth_isSet = !json[QString("azimuth")].isNull() && m_azimuth_isValid;

    m_dawn_isValid = ::OpenAPI::fromJsonValue(m_dawn, json[QString("dawn")]);
    m_dawn_isSet = !json[QString("dawn")].isNull() && m_dawn_isValid;

    m_declination_isValid = ::OpenAPI::fromJsonValue(m_declination, json[QString("declination")]);
    m_declination_isSet = !json[QString("declination")].isNull() && m_declination_isValid;

    m_dusk_isValid = ::OpenAPI::fromJsonValue(m_dusk, json[QString("dusk")]);
    m_dusk_isSet = !json[QString("dusk")].isNull() && m_dusk_isValid;

    m_is_up_isValid = ::OpenAPI::fromJsonValue(m_is_up, json[QString("isUp")]);
    m_is_up_isSet = !json[QString("isUp")].isNull() && m_is_up_isValid;

    m_last_eclipse_isValid = ::OpenAPI::fromJsonValue(m_last_eclipse, json[QString("lastEclipse")]);
    m_last_eclipse_isSet = !json[QString("lastEclipse")].isNull() && m_last_eclipse_isValid;

    m_next_eclipse_isValid = ::OpenAPI::fromJsonValue(m_next_eclipse, json[QString("nextEclipse")]);
    m_next_eclipse_isSet = !json[QString("nextEclipse")].isNull() && m_next_eclipse_isValid;

    m_noon_isValid = ::OpenAPI::fromJsonValue(m_noon, json[QString("noon")]);
    m_noon_isSet = !json[QString("noon")].isNull() && m_noon_isValid;

    m_right_ascension_isValid = ::OpenAPI::fromJsonValue(m_right_ascension, json[QString("rightAscension")]);
    m_right_ascension_isSet = !json[QString("rightAscension")].isNull() && m_right_ascension_isValid;

    m_rise_isValid = ::OpenAPI::fromJsonValue(m_rise, json[QString("rise")]);
    m_rise_isSet = !json[QString("rise")].isNull() && m_rise_isValid;

    m_r_set_isValid = ::OpenAPI::fromJsonValue(m_r_set, json[QString("set")]);
    m_r_set_isSet = !json[QString("set")].isNull() && m_r_set_isValid;
}

QString OAIGeoSunDto::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGeoSunDto::asJsonObject() const {
    QJsonObject obj;
    if (m_altitude_isSet) {
        obj.insert(QString("altitude"), ::OpenAPI::toJsonValue(m_altitude));
    }
    if (m_azimuth_isSet) {
        obj.insert(QString("azimuth"), ::OpenAPI::toJsonValue(m_azimuth));
    }
    if (m_dawn_isSet) {
        obj.insert(QString("dawn"), ::OpenAPI::toJsonValue(m_dawn));
    }
    if (m_declination_isSet) {
        obj.insert(QString("declination"), ::OpenAPI::toJsonValue(m_declination));
    }
    if (m_dusk_isSet) {
        obj.insert(QString("dusk"), ::OpenAPI::toJsonValue(m_dusk));
    }
    if (m_is_up_isSet) {
        obj.insert(QString("isUp"), ::OpenAPI::toJsonValue(m_is_up));
    }
    if (m_last_eclipse.isSet()) {
        obj.insert(QString("lastEclipse"), ::OpenAPI::toJsonValue(m_last_eclipse));
    }
    if (m_next_eclipse.isSet()) {
        obj.insert(QString("nextEclipse"), ::OpenAPI::toJsonValue(m_next_eclipse));
    }
    if (m_noon_isSet) {
        obj.insert(QString("noon"), ::OpenAPI::toJsonValue(m_noon));
    }
    if (m_right_ascension_isSet) {
        obj.insert(QString("rightAscension"), ::OpenAPI::toJsonValue(m_right_ascension));
    }
    if (m_rise_isSet) {
        obj.insert(QString("rise"), ::OpenAPI::toJsonValue(m_rise));
    }
    if (m_r_set_isSet) {
        obj.insert(QString("set"), ::OpenAPI::toJsonValue(m_r_set));
    }
    return obj;
}

double OAIGeoSunDto::getAltitude() const {
    return m_altitude;
}
void OAIGeoSunDto::setAltitude(const double &altitude) {
    m_altitude = altitude;
    m_altitude_isSet = true;
}

bool OAIGeoSunDto::is_altitude_Set() const{
    return m_altitude_isSet;
}

bool OAIGeoSunDto::is_altitude_Valid() const{
    return m_altitude_isValid;
}

double OAIGeoSunDto::getAzimuth() const {
    return m_azimuth;
}
void OAIGeoSunDto::setAzimuth(const double &azimuth) {
    m_azimuth = azimuth;
    m_azimuth_isSet = true;
}

bool OAIGeoSunDto::is_azimuth_Set() const{
    return m_azimuth_isSet;
}

bool OAIGeoSunDto::is_azimuth_Valid() const{
    return m_azimuth_isValid;
}

QDateTime OAIGeoSunDto::getDawn() const {
    return m_dawn;
}
void OAIGeoSunDto::setDawn(const QDateTime &dawn) {
    m_dawn = dawn;
    m_dawn_isSet = true;
}

bool OAIGeoSunDto::is_dawn_Set() const{
    return m_dawn_isSet;
}

bool OAIGeoSunDto::is_dawn_Valid() const{
    return m_dawn_isValid;
}

double OAIGeoSunDto::getDeclination() const {
    return m_declination;
}
void OAIGeoSunDto::setDeclination(const double &declination) {
    m_declination = declination;
    m_declination_isSet = true;
}

bool OAIGeoSunDto::is_declination_Set() const{
    return m_declination_isSet;
}

bool OAIGeoSunDto::is_declination_Valid() const{
    return m_declination_isValid;
}

QDateTime OAIGeoSunDto::getDusk() const {
    return m_dusk;
}
void OAIGeoSunDto::setDusk(const QDateTime &dusk) {
    m_dusk = dusk;
    m_dusk_isSet = true;
}

bool OAIGeoSunDto::is_dusk_Set() const{
    return m_dusk_isSet;
}

bool OAIGeoSunDto::is_dusk_Valid() const{
    return m_dusk_isValid;
}

bool OAIGeoSunDto::isIsUp() const {
    return m_is_up;
}
void OAIGeoSunDto::setIsUp(const bool &is_up) {
    m_is_up = is_up;
    m_is_up_isSet = true;
}

bool OAIGeoSunDto::is_is_up_Set() const{
    return m_is_up_isSet;
}

bool OAIGeoSunDto::is_is_up_Valid() const{
    return m_is_up_isValid;
}

OAISolarEclipseDetails OAIGeoSunDto::getLastEclipse() const {
    return m_last_eclipse;
}
void OAIGeoSunDto::setLastEclipse(const OAISolarEclipseDetails &last_eclipse) {
    m_last_eclipse = last_eclipse;
    m_last_eclipse_isSet = true;
}

bool OAIGeoSunDto::is_last_eclipse_Set() const{
    return m_last_eclipse_isSet;
}

bool OAIGeoSunDto::is_last_eclipse_Valid() const{
    return m_last_eclipse_isValid;
}

OAISolarEclipseDetails OAIGeoSunDto::getNextEclipse() const {
    return m_next_eclipse;
}
void OAIGeoSunDto::setNextEclipse(const OAISolarEclipseDetails &next_eclipse) {
    m_next_eclipse = next_eclipse;
    m_next_eclipse_isSet = true;
}

bool OAIGeoSunDto::is_next_eclipse_Set() const{
    return m_next_eclipse_isSet;
}

bool OAIGeoSunDto::is_next_eclipse_Valid() const{
    return m_next_eclipse_isValid;
}

QDateTime OAIGeoSunDto::getNoon() const {
    return m_noon;
}
void OAIGeoSunDto::setNoon(const QDateTime &noon) {
    m_noon = noon;
    m_noon_isSet = true;
}

bool OAIGeoSunDto::is_noon_Set() const{
    return m_noon_isSet;
}

bool OAIGeoSunDto::is_noon_Valid() const{
    return m_noon_isValid;
}

double OAIGeoSunDto::getRightAscension() const {
    return m_right_ascension;
}
void OAIGeoSunDto::setRightAscension(const double &right_ascension) {
    m_right_ascension = right_ascension;
    m_right_ascension_isSet = true;
}

bool OAIGeoSunDto::is_right_ascension_Set() const{
    return m_right_ascension_isSet;
}

bool OAIGeoSunDto::is_right_ascension_Valid() const{
    return m_right_ascension_isValid;
}

QDateTime OAIGeoSunDto::getRise() const {
    return m_rise;
}
void OAIGeoSunDto::setRise(const QDateTime &rise) {
    m_rise = rise;
    m_rise_isSet = true;
}

bool OAIGeoSunDto::is_rise_Set() const{
    return m_rise_isSet;
}

bool OAIGeoSunDto::is_rise_Valid() const{
    return m_rise_isValid;
}

QDateTime OAIGeoSunDto::getRSet() const {
    return m_r_set;
}
void OAIGeoSunDto::setRSet(const QDateTime &r_set) {
    m_r_set = r_set;
    m_r_set_isSet = true;
}

bool OAIGeoSunDto::is_r_set_Set() const{
    return m_r_set_isSet;
}

bool OAIGeoSunDto::is_r_set_Valid() const{
    return m_r_set_isValid;
}

bool OAIGeoSunDto::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_altitude_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_azimuth_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dawn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_declination_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dusk_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_up_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_eclipse.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_eclipse.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_noon_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_right_ascension_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rise_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_set_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGeoSunDto::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
