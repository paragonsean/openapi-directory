/**
 * Wyjyt - Geo Calculate
 * Widget API to calculate Geo Coordinates, Geo Fences and Sun, Moon, Sky, Eclipse information.  See https://wyjyt.com
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGeoSkyResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGeoSkyResponse::OAIGeoSkyResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGeoSkyResponse::OAIGeoSkyResponse() {
    this->initializeModel();
}

OAIGeoSkyResponse::~OAIGeoSkyResponse() {}

void OAIGeoSkyResponse::initializeModel() {

    m_event_isSet = false;
    m_event_isValid = false;

    m_moon_isSet = false;
    m_moon_isValid = false;

    m_sun_isSet = false;
    m_sun_isValid = false;
}

void OAIGeoSkyResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGeoSkyResponse::fromJsonObject(QJsonObject json) {

    m_event_isValid = ::OpenAPI::fromJsonValue(m_event, json[QString("event")]);
    m_event_isSet = !json[QString("event")].isNull() && m_event_isValid;

    m_moon_isValid = ::OpenAPI::fromJsonValue(m_moon, json[QString("moon")]);
    m_moon_isSet = !json[QString("moon")].isNull() && m_moon_isValid;

    m_sun_isValid = ::OpenAPI::fromJsonValue(m_sun, json[QString("sun")]);
    m_sun_isSet = !json[QString("sun")].isNull() && m_sun_isValid;
}

QString OAIGeoSkyResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGeoSkyResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_event.isSet()) {
        obj.insert(QString("event"), ::OpenAPI::toJsonValue(m_event));
    }
    if (m_moon.isSet()) {
        obj.insert(QString("moon"), ::OpenAPI::toJsonValue(m_moon));
    }
    if (m_sun.isSet()) {
        obj.insert(QString("sun"), ::OpenAPI::toJsonValue(m_sun));
    }
    return obj;
}

OAIGeoEventDto OAIGeoSkyResponse::getEvent() const {
    return m_event;
}
void OAIGeoSkyResponse::setEvent(const OAIGeoEventDto &event) {
    m_event = event;
    m_event_isSet = true;
}

bool OAIGeoSkyResponse::is_event_Set() const{
    return m_event_isSet;
}

bool OAIGeoSkyResponse::is_event_Valid() const{
    return m_event_isValid;
}

OAIGeoMoonDto OAIGeoSkyResponse::getMoon() const {
    return m_moon;
}
void OAIGeoSkyResponse::setMoon(const OAIGeoMoonDto &moon) {
    m_moon = moon;
    m_moon_isSet = true;
}

bool OAIGeoSkyResponse::is_moon_Set() const{
    return m_moon_isSet;
}

bool OAIGeoSkyResponse::is_moon_Valid() const{
    return m_moon_isValid;
}

OAIGeoSunDto OAIGeoSkyResponse::getSun() const {
    return m_sun;
}
void OAIGeoSkyResponse::setSun(const OAIGeoSunDto &sun) {
    m_sun = sun;
    m_sun_isSet = true;
}

bool OAIGeoSkyResponse::is_sun_Set() const{
    return m_sun_isSet;
}

bool OAIGeoSkyResponse::is_sun_Valid() const{
    return m_sun_isValid;
}

bool OAIGeoSkyResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_event.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_moon.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sun.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGeoSkyResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
