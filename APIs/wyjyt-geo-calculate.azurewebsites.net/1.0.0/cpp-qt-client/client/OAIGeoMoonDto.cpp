/**
 * Wyjyt - Geo Calculate
 * Widget API to calculate Geo Coordinates, Geo Fences and Sun, Moon, Sky, Eclipse information.  See https://wyjyt.com
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGeoMoonDto.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGeoMoonDto::OAIGeoMoonDto(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGeoMoonDto::OAIGeoMoonDto() {
    this->initializeModel();
}

OAIGeoMoonDto::~OAIGeoMoonDto() {}

void OAIGeoMoonDto::initializeModel() {

    m_altitude_isSet = false;
    m_altitude_isValid = false;

    m_azimuth_isSet = false;
    m_azimuth_isValid = false;

    m_bearing_isSet = false;
    m_bearing_isValid = false;

    m_declination_isSet = false;
    m_declination_isValid = false;

    m_distance_isSet = false;
    m_distance_isValid = false;

    m_illumination_isSet = false;
    m_illumination_isValid = false;

    m_is_up_isSet = false;
    m_is_up_isValid = false;

    m_last_eclipse_isSet = false;
    m_last_eclipse_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_next_eclipse_isSet = false;
    m_next_eclipse_isValid = false;

    m_right_ascension_isSet = false;
    m_right_ascension_isValid = false;

    m_rise_isSet = false;
    m_rise_isValid = false;

    m_r_set_isSet = false;
    m_r_set_isValid = false;

    m_sign_isSet = false;
    m_sign_isValid = false;
}

void OAIGeoMoonDto::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGeoMoonDto::fromJsonObject(QJsonObject json) {

    m_altitude_isValid = ::OpenAPI::fromJsonValue(m_altitude, json[QString("altitude")]);
    m_altitude_isSet = !json[QString("altitude")].isNull() && m_altitude_isValid;

    m_azimuth_isValid = ::OpenAPI::fromJsonValue(m_azimuth, json[QString("azimuth")]);
    m_azimuth_isSet = !json[QString("azimuth")].isNull() && m_azimuth_isValid;

    m_bearing_isValid = ::OpenAPI::fromJsonValue(m_bearing, json[QString("bearing")]);
    m_bearing_isSet = !json[QString("bearing")].isNull() && m_bearing_isValid;

    m_declination_isValid = ::OpenAPI::fromJsonValue(m_declination, json[QString("declination")]);
    m_declination_isSet = !json[QString("declination")].isNull() && m_declination_isValid;

    m_distance_isValid = ::OpenAPI::fromJsonValue(m_distance, json[QString("distance")]);
    m_distance_isSet = !json[QString("distance")].isNull() && m_distance_isValid;

    m_illumination_isValid = ::OpenAPI::fromJsonValue(m_illumination, json[QString("illumination")]);
    m_illumination_isSet = !json[QString("illumination")].isNull() && m_illumination_isValid;

    m_is_up_isValid = ::OpenAPI::fromJsonValue(m_is_up, json[QString("isUp")]);
    m_is_up_isSet = !json[QString("isUp")].isNull() && m_is_up_isValid;

    m_last_eclipse_isValid = ::OpenAPI::fromJsonValue(m_last_eclipse, json[QString("lastEclipse")]);
    m_last_eclipse_isSet = !json[QString("lastEclipse")].isNull() && m_last_eclipse_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_next_eclipse_isValid = ::OpenAPI::fromJsonValue(m_next_eclipse, json[QString("nextEclipse")]);
    m_next_eclipse_isSet = !json[QString("nextEclipse")].isNull() && m_next_eclipse_isValid;

    m_right_ascension_isValid = ::OpenAPI::fromJsonValue(m_right_ascension, json[QString("rightAscension")]);
    m_right_ascension_isSet = !json[QString("rightAscension")].isNull() && m_right_ascension_isValid;

    m_rise_isValid = ::OpenAPI::fromJsonValue(m_rise, json[QString("rise")]);
    m_rise_isSet = !json[QString("rise")].isNull() && m_rise_isValid;

    m_r_set_isValid = ::OpenAPI::fromJsonValue(m_r_set, json[QString("set")]);
    m_r_set_isSet = !json[QString("set")].isNull() && m_r_set_isValid;

    m_sign_isValid = ::OpenAPI::fromJsonValue(m_sign, json[QString("sign")]);
    m_sign_isSet = !json[QString("sign")].isNull() && m_sign_isValid;
}

QString OAIGeoMoonDto::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGeoMoonDto::asJsonObject() const {
    QJsonObject obj;
    if (m_altitude_isSet) {
        obj.insert(QString("altitude"), ::OpenAPI::toJsonValue(m_altitude));
    }
    if (m_azimuth_isSet) {
        obj.insert(QString("azimuth"), ::OpenAPI::toJsonValue(m_azimuth));
    }
    if (m_bearing_isSet) {
        obj.insert(QString("bearing"), ::OpenAPI::toJsonValue(m_bearing));
    }
    if (m_declination_isSet) {
        obj.insert(QString("declination"), ::OpenAPI::toJsonValue(m_declination));
    }
    if (m_distance_isSet) {
        obj.insert(QString("distance"), ::OpenAPI::toJsonValue(m_distance));
    }
    if (m_illumination.isSet()) {
        obj.insert(QString("illumination"), ::OpenAPI::toJsonValue(m_illumination));
    }
    if (m_is_up_isSet) {
        obj.insert(QString("isUp"), ::OpenAPI::toJsonValue(m_is_up));
    }
    if (m_last_eclipse.isSet()) {
        obj.insert(QString("lastEclipse"), ::OpenAPI::toJsonValue(m_last_eclipse));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_next_eclipse.isSet()) {
        obj.insert(QString("nextEclipse"), ::OpenAPI::toJsonValue(m_next_eclipse));
    }
    if (m_right_ascension_isSet) {
        obj.insert(QString("rightAscension"), ::OpenAPI::toJsonValue(m_right_ascension));
    }
    if (m_rise_isSet) {
        obj.insert(QString("rise"), ::OpenAPI::toJsonValue(m_rise));
    }
    if (m_r_set_isSet) {
        obj.insert(QString("set"), ::OpenAPI::toJsonValue(m_r_set));
    }
    if (m_sign_isSet) {
        obj.insert(QString("sign"), ::OpenAPI::toJsonValue(m_sign));
    }
    return obj;
}

double OAIGeoMoonDto::getAltitude() const {
    return m_altitude;
}
void OAIGeoMoonDto::setAltitude(const double &altitude) {
    m_altitude = altitude;
    m_altitude_isSet = true;
}

bool OAIGeoMoonDto::is_altitude_Set() const{
    return m_altitude_isSet;
}

bool OAIGeoMoonDto::is_altitude_Valid() const{
    return m_altitude_isValid;
}

double OAIGeoMoonDto::getAzimuth() const {
    return m_azimuth;
}
void OAIGeoMoonDto::setAzimuth(const double &azimuth) {
    m_azimuth = azimuth;
    m_azimuth_isSet = true;
}

bool OAIGeoMoonDto::is_azimuth_Set() const{
    return m_azimuth_isSet;
}

bool OAIGeoMoonDto::is_azimuth_Valid() const{
    return m_azimuth_isValid;
}

double OAIGeoMoonDto::getBearing() const {
    return m_bearing;
}
void OAIGeoMoonDto::setBearing(const double &bearing) {
    m_bearing = bearing;
    m_bearing_isSet = true;
}

bool OAIGeoMoonDto::is_bearing_Set() const{
    return m_bearing_isSet;
}

bool OAIGeoMoonDto::is_bearing_Valid() const{
    return m_bearing_isValid;
}

double OAIGeoMoonDto::getDeclination() const {
    return m_declination;
}
void OAIGeoMoonDto::setDeclination(const double &declination) {
    m_declination = declination;
    m_declination_isSet = true;
}

bool OAIGeoMoonDto::is_declination_Set() const{
    return m_declination_isSet;
}

bool OAIGeoMoonDto::is_declination_Valid() const{
    return m_declination_isValid;
}

double OAIGeoMoonDto::getDistance() const {
    return m_distance;
}
void OAIGeoMoonDto::setDistance(const double &distance) {
    m_distance = distance;
    m_distance_isSet = true;
}

bool OAIGeoMoonDto::is_distance_Set() const{
    return m_distance_isSet;
}

bool OAIGeoMoonDto::is_distance_Valid() const{
    return m_distance_isValid;
}

OAIMoonIllum OAIGeoMoonDto::getIllumination() const {
    return m_illumination;
}
void OAIGeoMoonDto::setIllumination(const OAIMoonIllum &illumination) {
    m_illumination = illumination;
    m_illumination_isSet = true;
}

bool OAIGeoMoonDto::is_illumination_Set() const{
    return m_illumination_isSet;
}

bool OAIGeoMoonDto::is_illumination_Valid() const{
    return m_illumination_isValid;
}

bool OAIGeoMoonDto::isIsUp() const {
    return m_is_up;
}
void OAIGeoMoonDto::setIsUp(const bool &is_up) {
    m_is_up = is_up;
    m_is_up_isSet = true;
}

bool OAIGeoMoonDto::is_is_up_Set() const{
    return m_is_up_isSet;
}

bool OAIGeoMoonDto::is_is_up_Valid() const{
    return m_is_up_isValid;
}

OAILunarEclipseDetails OAIGeoMoonDto::getLastEclipse() const {
    return m_last_eclipse;
}
void OAIGeoMoonDto::setLastEclipse(const OAILunarEclipseDetails &last_eclipse) {
    m_last_eclipse = last_eclipse;
    m_last_eclipse_isSet = true;
}

bool OAIGeoMoonDto::is_last_eclipse_Set() const{
    return m_last_eclipse_isSet;
}

bool OAIGeoMoonDto::is_last_eclipse_Valid() const{
    return m_last_eclipse_isValid;
}

QString OAIGeoMoonDto::getName() const {
    return m_name;
}
void OAIGeoMoonDto::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIGeoMoonDto::is_name_Set() const{
    return m_name_isSet;
}

bool OAIGeoMoonDto::is_name_Valid() const{
    return m_name_isValid;
}

OAILunarEclipseDetails OAIGeoMoonDto::getNextEclipse() const {
    return m_next_eclipse;
}
void OAIGeoMoonDto::setNextEclipse(const OAILunarEclipseDetails &next_eclipse) {
    m_next_eclipse = next_eclipse;
    m_next_eclipse_isSet = true;
}

bool OAIGeoMoonDto::is_next_eclipse_Set() const{
    return m_next_eclipse_isSet;
}

bool OAIGeoMoonDto::is_next_eclipse_Valid() const{
    return m_next_eclipse_isValid;
}

double OAIGeoMoonDto::getRightAscension() const {
    return m_right_ascension;
}
void OAIGeoMoonDto::setRightAscension(const double &right_ascension) {
    m_right_ascension = right_ascension;
    m_right_ascension_isSet = true;
}

bool OAIGeoMoonDto::is_right_ascension_Set() const{
    return m_right_ascension_isSet;
}

bool OAIGeoMoonDto::is_right_ascension_Valid() const{
    return m_right_ascension_isValid;
}

QDateTime OAIGeoMoonDto::getRise() const {
    return m_rise;
}
void OAIGeoMoonDto::setRise(const QDateTime &rise) {
    m_rise = rise;
    m_rise_isSet = true;
}

bool OAIGeoMoonDto::is_rise_Set() const{
    return m_rise_isSet;
}

bool OAIGeoMoonDto::is_rise_Valid() const{
    return m_rise_isValid;
}

QDateTime OAIGeoMoonDto::getRSet() const {
    return m_r_set;
}
void OAIGeoMoonDto::setRSet(const QDateTime &r_set) {
    m_r_set = r_set;
    m_r_set_isSet = true;
}

bool OAIGeoMoonDto::is_r_set_Set() const{
    return m_r_set_isSet;
}

bool OAIGeoMoonDto::is_r_set_Valid() const{
    return m_r_set_isValid;
}

QString OAIGeoMoonDto::getSign() const {
    return m_sign;
}
void OAIGeoMoonDto::setSign(const QString &sign) {
    m_sign = sign;
    m_sign_isSet = true;
}

bool OAIGeoMoonDto::is_sign_Set() const{
    return m_sign_isSet;
}

bool OAIGeoMoonDto::is_sign_Valid() const{
    return m_sign_isValid;
}

bool OAIGeoMoonDto::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_altitude_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_azimuth_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bearing_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_declination_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_distance_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_illumination.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_up_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_eclipse.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_eclipse.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_right_ascension_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rise_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_set_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sign_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGeoMoonDto::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
