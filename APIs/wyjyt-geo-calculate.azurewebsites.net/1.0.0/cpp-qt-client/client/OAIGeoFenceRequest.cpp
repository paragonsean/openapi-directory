/**
 * Wyjyt - Geo Calculate
 * Widget API to calculate Geo Coordinates, Geo Fences and Sun, Moon, Sky, Eclipse information.  See https://wyjyt.com
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGeoFenceRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGeoFenceRequest::OAIGeoFenceRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGeoFenceRequest::OAIGeoFenceRequest() {
    this->initializeModel();
}

OAIGeoFenceRequest::~OAIGeoFenceRequest() {}

void OAIGeoFenceRequest::initializeModel() {

    m_check_coordinates_isSet = false;
    m_check_coordinates_isValid = false;

    m_fence_coordinates_isSet = false;
    m_fence_coordinates_isValid = false;
}

void OAIGeoFenceRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGeoFenceRequest::fromJsonObject(QJsonObject json) {

    m_check_coordinates_isValid = ::OpenAPI::fromJsonValue(m_check_coordinates, json[QString("checkCoordinates")]);
    m_check_coordinates_isSet = !json[QString("checkCoordinates")].isNull() && m_check_coordinates_isValid;

    m_fence_coordinates_isValid = ::OpenAPI::fromJsonValue(m_fence_coordinates, json[QString("fenceCoordinates")]);
    m_fence_coordinates_isSet = !json[QString("fenceCoordinates")].isNull() && m_fence_coordinates_isValid;
}

QString OAIGeoFenceRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGeoFenceRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_check_coordinates.size() > 0) {
        obj.insert(QString("checkCoordinates"), ::OpenAPI::toJsonValue(m_check_coordinates));
    }
    if (m_fence_coordinates.size() > 0) {
        obj.insert(QString("fenceCoordinates"), ::OpenAPI::toJsonValue(m_fence_coordinates));
    }
    return obj;
}

QList<QString> OAIGeoFenceRequest::getCheckCoordinates() const {
    return m_check_coordinates;
}
void OAIGeoFenceRequest::setCheckCoordinates(const QList<QString> &check_coordinates) {
    m_check_coordinates = check_coordinates;
    m_check_coordinates_isSet = true;
}

bool OAIGeoFenceRequest::is_check_coordinates_Set() const{
    return m_check_coordinates_isSet;
}

bool OAIGeoFenceRequest::is_check_coordinates_Valid() const{
    return m_check_coordinates_isValid;
}

QList<QString> OAIGeoFenceRequest::getFenceCoordinates() const {
    return m_fence_coordinates;
}
void OAIGeoFenceRequest::setFenceCoordinates(const QList<QString> &fence_coordinates) {
    m_fence_coordinates = fence_coordinates;
    m_fence_coordinates_isSet = true;
}

bool OAIGeoFenceRequest::is_fence_coordinates_Set() const{
    return m_fence_coordinates_isSet;
}

bool OAIGeoFenceRequest::is_fence_coordinates_Valid() const{
    return m_fence_coordinates_isValid;
}

bool OAIGeoFenceRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_check_coordinates.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_fence_coordinates.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGeoFenceRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
