/**
 * Wyjyt - Geo Calculate
 * Widget API to calculate Geo Coordinates, Geo Fences and Sun, Moon, Sky, Eclipse information.  See https://wyjyt.com
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGeoSkyRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGeoSkyRequest::OAIGeoSkyRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGeoSkyRequest::OAIGeoSkyRequest() {
    this->initializeModel();
}

OAIGeoSkyRequest::~OAIGeoSkyRequest() {}

void OAIGeoSkyRequest::initializeModel() {

    m_coordinate_isSet = false;
    m_coordinate_isValid = false;

    m_date_isSet = false;
    m_date_isValid = false;
}

void OAIGeoSkyRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGeoSkyRequest::fromJsonObject(QJsonObject json) {

    m_coordinate_isValid = ::OpenAPI::fromJsonValue(m_coordinate, json[QString("coordinate")]);
    m_coordinate_isSet = !json[QString("coordinate")].isNull() && m_coordinate_isValid;

    m_date_isValid = ::OpenAPI::fromJsonValue(m_date, json[QString("date")]);
    m_date_isSet = !json[QString("date")].isNull() && m_date_isValid;
}

QString OAIGeoSkyRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGeoSkyRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_coordinate_isSet) {
        obj.insert(QString("coordinate"), ::OpenAPI::toJsonValue(m_coordinate));
    }
    if (m_date_isSet) {
        obj.insert(QString("date"), ::OpenAPI::toJsonValue(m_date));
    }
    return obj;
}

QString OAIGeoSkyRequest::getCoordinate() const {
    return m_coordinate;
}
void OAIGeoSkyRequest::setCoordinate(const QString &coordinate) {
    m_coordinate = coordinate;
    m_coordinate_isSet = true;
}

bool OAIGeoSkyRequest::is_coordinate_Set() const{
    return m_coordinate_isSet;
}

bool OAIGeoSkyRequest::is_coordinate_Valid() const{
    return m_coordinate_isValid;
}

QDateTime OAIGeoSkyRequest::getDate() const {
    return m_date;
}
void OAIGeoSkyRequest::setDate(const QDateTime &date) {
    m_date = date;
    m_date_isSet = true;
}

bool OAIGeoSkyRequest::is_date_Set() const{
    return m_date_isSet;
}

bool OAIGeoSkyRequest::is_date_Valid() const{
    return m_date_isValid;
}

bool OAIGeoSkyRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_coordinate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGeoSkyRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
