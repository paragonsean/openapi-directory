/**
 * Wyjyt - Geo Calculate
 * Widget API to calculate Geo Coordinates, Geo Fences and Sun, Moon, Sky, Eclipse information.  See https://wyjyt.com
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIGeoCalculateApi_H
#define OAI_OAIGeoCalculateApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIGeoConvertRequest.h"
#include "OAIGeoConvertResponse.h"
#include "OAIGeoDistanceRequest.h"
#include "OAIGeoDistanceResponse.h"
#include "OAIGeoFenceRequest.h"
#include "OAIGeoFenceResponse.h"
#include "OAIGeoSkyRequest.h"
#include "OAIGeoSkyResponse.h"
#include "OAIWyjytErrorResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIGeoCalculateApi : public QObject {
    Q_OBJECT

public:
    OAIGeoCalculateApi(const int timeOut = 0);
    ~OAIGeoCalculateApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  oai_geo_convert_request OAIGeoConvertRequest [required]
    */
    virtual void convert(const OAIGeoConvertRequest &oai_geo_convert_request);

    /**
    * @param[in]  oai_geo_distance_request OAIGeoDistanceRequest [required]
    */
    virtual void distance(const OAIGeoDistanceRequest &oai_geo_distance_request);

    /**
    * @param[in]  oai_geo_fence_request OAIGeoFenceRequest [required]
    */
    virtual void fence(const OAIGeoFenceRequest &oai_geo_fence_request);

    /**
    * @param[in]  oai_geo_sky_request OAIGeoSkyRequest [required]
    */
    virtual void sky(const OAIGeoSkyRequest &oai_geo_sky_request);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void convertCallback(OAIHttpRequestWorker *worker);
    void distanceCallback(OAIHttpRequestWorker *worker);
    void fenceCallback(OAIHttpRequestWorker *worker);
    void skyCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void convertSignal(OAIGeoConvertResponse summary);
    void distanceSignal(OAIGeoDistanceResponse summary);
    void fenceSignal(OAIGeoFenceResponse summary);
    void skySignal(OAIGeoSkyResponse summary);


    void convertSignalFull(OAIHttpRequestWorker *worker, OAIGeoConvertResponse summary);
    void distanceSignalFull(OAIHttpRequestWorker *worker, OAIGeoDistanceResponse summary);
    void fenceSignalFull(OAIHttpRequestWorker *worker, OAIGeoFenceResponse summary);
    void skySignalFull(OAIHttpRequestWorker *worker, OAIGeoSkyResponse summary);

    Q_DECL_DEPRECATED_X("Use convertSignalError() instead")
    void convertSignalE(OAIGeoConvertResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void convertSignalError(OAIGeoConvertResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use distanceSignalError() instead")
    void distanceSignalE(OAIGeoDistanceResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void distanceSignalError(OAIGeoDistanceResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fenceSignalError() instead")
    void fenceSignalE(OAIGeoFenceResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void fenceSignalError(OAIGeoFenceResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use skySignalError() instead")
    void skySignalE(OAIGeoSkyResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void skySignalError(OAIGeoSkyResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use convertSignalErrorFull() instead")
    void convertSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void convertSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use distanceSignalErrorFull() instead")
    void distanceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void distanceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fenceSignalErrorFull() instead")
    void fenceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void fenceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use skySignalErrorFull() instead")
    void skySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void skySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
