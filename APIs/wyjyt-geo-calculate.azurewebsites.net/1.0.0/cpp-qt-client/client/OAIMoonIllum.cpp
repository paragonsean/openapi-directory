/**
 * Wyjyt - Geo Calculate
 * Widget API to calculate Geo Coordinates, Geo Fences and Sun, Moon, Sky, Eclipse information.  See https://wyjyt.com
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMoonIllum.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMoonIllum::OAIMoonIllum(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMoonIllum::OAIMoonIllum() {
    this->initializeModel();
}

OAIMoonIllum::~OAIMoonIllum() {}

void OAIMoonIllum::initializeModel() {

    m_angle_isSet = false;
    m_angle_isValid = false;

    m_fraction_isSet = false;
    m_fraction_isValid = false;

    m_phase_isSet = false;
    m_phase_isValid = false;

    m_phase_name_isSet = false;
    m_phase_name_isValid = false;

    m_phase_name_enum_isSet = false;
    m_phase_name_enum_isValid = false;
}

void OAIMoonIllum::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMoonIllum::fromJsonObject(QJsonObject json) {

    m_angle_isValid = ::OpenAPI::fromJsonValue(m_angle, json[QString("angle")]);
    m_angle_isSet = !json[QString("angle")].isNull() && m_angle_isValid;

    m_fraction_isValid = ::OpenAPI::fromJsonValue(m_fraction, json[QString("fraction")]);
    m_fraction_isSet = !json[QString("fraction")].isNull() && m_fraction_isValid;

    m_phase_isValid = ::OpenAPI::fromJsonValue(m_phase, json[QString("phase")]);
    m_phase_isSet = !json[QString("phase")].isNull() && m_phase_isValid;

    m_phase_name_isValid = ::OpenAPI::fromJsonValue(m_phase_name, json[QString("phaseName")]);
    m_phase_name_isSet = !json[QString("phaseName")].isNull() && m_phase_name_isValid;

    m_phase_name_enum_isValid = ::OpenAPI::fromJsonValue(m_phase_name_enum, json[QString("phaseNameEnum")]);
    m_phase_name_enum_isSet = !json[QString("phaseNameEnum")].isNull() && m_phase_name_enum_isValid;
}

QString OAIMoonIllum::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMoonIllum::asJsonObject() const {
    QJsonObject obj;
    if (m_angle_isSet) {
        obj.insert(QString("angle"), ::OpenAPI::toJsonValue(m_angle));
    }
    if (m_fraction_isSet) {
        obj.insert(QString("fraction"), ::OpenAPI::toJsonValue(m_fraction));
    }
    if (m_phase_isSet) {
        obj.insert(QString("phase"), ::OpenAPI::toJsonValue(m_phase));
    }
    if (m_phase_name_isSet) {
        obj.insert(QString("phaseName"), ::OpenAPI::toJsonValue(m_phase_name));
    }
    if (m_phase_name_enum_isSet) {
        obj.insert(QString("phaseNameEnum"), ::OpenAPI::toJsonValue(m_phase_name_enum));
    }
    return obj;
}

double OAIMoonIllum::getAngle() const {
    return m_angle;
}
void OAIMoonIllum::setAngle(const double &angle) {
    m_angle = angle;
    m_angle_isSet = true;
}

bool OAIMoonIllum::is_angle_Set() const{
    return m_angle_isSet;
}

bool OAIMoonIllum::is_angle_Valid() const{
    return m_angle_isValid;
}

double OAIMoonIllum::getFraction() const {
    return m_fraction;
}
void OAIMoonIllum::setFraction(const double &fraction) {
    m_fraction = fraction;
    m_fraction_isSet = true;
}

bool OAIMoonIllum::is_fraction_Set() const{
    return m_fraction_isSet;
}

bool OAIMoonIllum::is_fraction_Valid() const{
    return m_fraction_isValid;
}

double OAIMoonIllum::getPhase() const {
    return m_phase;
}
void OAIMoonIllum::setPhase(const double &phase) {
    m_phase = phase;
    m_phase_isSet = true;
}

bool OAIMoonIllum::is_phase_Set() const{
    return m_phase_isSet;
}

bool OAIMoonIllum::is_phase_Valid() const{
    return m_phase_isValid;
}

QString OAIMoonIllum::getPhaseName() const {
    return m_phase_name;
}
void OAIMoonIllum::setPhaseName(const QString &phase_name) {
    m_phase_name = phase_name;
    m_phase_name_isSet = true;
}

bool OAIMoonIllum::is_phase_name_Set() const{
    return m_phase_name_isSet;
}

bool OAIMoonIllum::is_phase_name_Valid() const{
    return m_phase_name_isValid;
}

qint32 OAIMoonIllum::getPhaseNameEnum() const {
    return m_phase_name_enum;
}
void OAIMoonIllum::setPhaseNameEnum(const qint32 &phase_name_enum) {
    m_phase_name_enum = phase_name_enum;
    m_phase_name_enum_isSet = true;
}

bool OAIMoonIllum::is_phase_name_enum_Set() const{
    return m_phase_name_enum_isSet;
}

bool OAIMoonIllum::is_phase_name_enum_Valid() const{
    return m_phase_name_enum_isValid;
}

bool OAIMoonIllum::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_angle_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fraction_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_phase_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_phase_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_phase_name_enum_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMoonIllum::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
