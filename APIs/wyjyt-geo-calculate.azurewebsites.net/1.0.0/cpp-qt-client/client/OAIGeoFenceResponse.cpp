/**
 * Wyjyt - Geo Calculate
 * Widget API to calculate Geo Coordinates, Geo Fences and Sun, Moon, Sky, Eclipse information.  See https://wyjyt.com
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGeoFenceResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGeoFenceResponse::OAIGeoFenceResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGeoFenceResponse::OAIGeoFenceResponse() {
    this->initializeModel();
}

OAIGeoFenceResponse::~OAIGeoFenceResponse() {}

void OAIGeoFenceResponse::initializeModel() {

    m_distances_isSet = false;
    m_distances_isValid = false;

    m_insides_isSet = false;
    m_insides_isValid = false;
}

void OAIGeoFenceResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGeoFenceResponse::fromJsonObject(QJsonObject json) {

    m_distances_isValid = ::OpenAPI::fromJsonValue(m_distances, json[QString("distances")]);
    m_distances_isSet = !json[QString("distances")].isNull() && m_distances_isValid;

    m_insides_isValid = ::OpenAPI::fromJsonValue(m_insides, json[QString("insides")]);
    m_insides_isSet = !json[QString("insides")].isNull() && m_insides_isValid;
}

QString OAIGeoFenceResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGeoFenceResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_distances.size() > 0) {
        obj.insert(QString("distances"), ::OpenAPI::toJsonValue(m_distances));
    }
    if (m_insides.size() > 0) {
        obj.insert(QString("insides"), ::OpenAPI::toJsonValue(m_insides));
    }
    return obj;
}

QList<double> OAIGeoFenceResponse::getDistances() const {
    return m_distances;
}
void OAIGeoFenceResponse::setDistances(const QList<double> &distances) {
    m_distances = distances;
    m_distances_isSet = true;
}

bool OAIGeoFenceResponse::is_distances_Set() const{
    return m_distances_isSet;
}

bool OAIGeoFenceResponse::is_distances_Valid() const{
    return m_distances_isValid;
}

QList<bool> OAIGeoFenceResponse::getInsides() const {
    return m_insides;
}
void OAIGeoFenceResponse::setInsides(const QList<bool> &insides) {
    m_insides = insides;
    m_insides_isSet = true;
}

bool OAIGeoFenceResponse::is_insides_Set() const{
    return m_insides_isSet;
}

bool OAIGeoFenceResponse::is_insides_Valid() const{
    return m_insides_isValid;
}

bool OAIGeoFenceResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_distances.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_insides.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGeoFenceResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
