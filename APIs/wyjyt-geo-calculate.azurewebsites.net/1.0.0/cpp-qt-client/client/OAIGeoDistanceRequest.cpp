/**
 * Wyjyt - Geo Calculate
 * Widget API to calculate Geo Coordinates, Geo Fences and Sun, Moon, Sky, Eclipse information.  See https://wyjyt.com
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGeoDistanceRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGeoDistanceRequest::OAIGeoDistanceRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGeoDistanceRequest::OAIGeoDistanceRequest() {
    this->initializeModel();
}

OAIGeoDistanceRequest::~OAIGeoDistanceRequest() {}

void OAIGeoDistanceRequest::initializeModel() {

    m_coordinate1_isSet = false;
    m_coordinate1_isValid = false;

    m_coordinate2_isSet = false;
    m_coordinate2_isValid = false;

    m_use_ellipse_isSet = false;
    m_use_ellipse_isValid = false;
}

void OAIGeoDistanceRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGeoDistanceRequest::fromJsonObject(QJsonObject json) {

    m_coordinate1_isValid = ::OpenAPI::fromJsonValue(m_coordinate1, json[QString("coordinate1")]);
    m_coordinate1_isSet = !json[QString("coordinate1")].isNull() && m_coordinate1_isValid;

    m_coordinate2_isValid = ::OpenAPI::fromJsonValue(m_coordinate2, json[QString("coordinate2")]);
    m_coordinate2_isSet = !json[QString("coordinate2")].isNull() && m_coordinate2_isValid;

    m_use_ellipse_isValid = ::OpenAPI::fromJsonValue(m_use_ellipse, json[QString("useEllipse")]);
    m_use_ellipse_isSet = !json[QString("useEllipse")].isNull() && m_use_ellipse_isValid;
}

QString OAIGeoDistanceRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGeoDistanceRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_coordinate1_isSet) {
        obj.insert(QString("coordinate1"), ::OpenAPI::toJsonValue(m_coordinate1));
    }
    if (m_coordinate2_isSet) {
        obj.insert(QString("coordinate2"), ::OpenAPI::toJsonValue(m_coordinate2));
    }
    if (m_use_ellipse_isSet) {
        obj.insert(QString("useEllipse"), ::OpenAPI::toJsonValue(m_use_ellipse));
    }
    return obj;
}

QString OAIGeoDistanceRequest::getCoordinate1() const {
    return m_coordinate1;
}
void OAIGeoDistanceRequest::setCoordinate1(const QString &coordinate1) {
    m_coordinate1 = coordinate1;
    m_coordinate1_isSet = true;
}

bool OAIGeoDistanceRequest::is_coordinate1_Set() const{
    return m_coordinate1_isSet;
}

bool OAIGeoDistanceRequest::is_coordinate1_Valid() const{
    return m_coordinate1_isValid;
}

QString OAIGeoDistanceRequest::getCoordinate2() const {
    return m_coordinate2;
}
void OAIGeoDistanceRequest::setCoordinate2(const QString &coordinate2) {
    m_coordinate2 = coordinate2;
    m_coordinate2_isSet = true;
}

bool OAIGeoDistanceRequest::is_coordinate2_Set() const{
    return m_coordinate2_isSet;
}

bool OAIGeoDistanceRequest::is_coordinate2_Valid() const{
    return m_coordinate2_isValid;
}

bool OAIGeoDistanceRequest::isUseEllipse() const {
    return m_use_ellipse;
}
void OAIGeoDistanceRequest::setUseEllipse(const bool &use_ellipse) {
    m_use_ellipse = use_ellipse;
    m_use_ellipse_isSet = true;
}

bool OAIGeoDistanceRequest::is_use_ellipse_Set() const{
    return m_use_ellipse_isSet;
}

bool OAIGeoDistanceRequest::is_use_ellipse_Valid() const{
    return m_use_ellipse_isValid;
}

bool OAIGeoDistanceRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_coordinate1_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_coordinate2_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_use_ellipse_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGeoDistanceRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
