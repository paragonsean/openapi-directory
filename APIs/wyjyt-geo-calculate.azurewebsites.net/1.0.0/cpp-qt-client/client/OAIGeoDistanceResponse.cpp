/**
 * Wyjyt - Geo Calculate
 * Widget API to calculate Geo Coordinates, Geo Fences and Sun, Moon, Sky, Eclipse information.  See https://wyjyt.com
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGeoDistanceResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGeoDistanceResponse::OAIGeoDistanceResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGeoDistanceResponse::OAIGeoDistanceResponse() {
    this->initializeModel();
}

OAIGeoDistanceResponse::~OAIGeoDistanceResponse() {}

void OAIGeoDistanceResponse::initializeModel() {

    m_bearing_isSet = false;
    m_bearing_isValid = false;

    m_meters_isSet = false;
    m_meters_isValid = false;
}

void OAIGeoDistanceResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGeoDistanceResponse::fromJsonObject(QJsonObject json) {

    m_bearing_isValid = ::OpenAPI::fromJsonValue(m_bearing, json[QString("bearing")]);
    m_bearing_isSet = !json[QString("bearing")].isNull() && m_bearing_isValid;

    m_meters_isValid = ::OpenAPI::fromJsonValue(m_meters, json[QString("meters")]);
    m_meters_isSet = !json[QString("meters")].isNull() && m_meters_isValid;
}

QString OAIGeoDistanceResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGeoDistanceResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_bearing_isSet) {
        obj.insert(QString("bearing"), ::OpenAPI::toJsonValue(m_bearing));
    }
    if (m_meters_isSet) {
        obj.insert(QString("meters"), ::OpenAPI::toJsonValue(m_meters));
    }
    return obj;
}

double OAIGeoDistanceResponse::getBearing() const {
    return m_bearing;
}
void OAIGeoDistanceResponse::setBearing(const double &bearing) {
    m_bearing = bearing;
    m_bearing_isSet = true;
}

bool OAIGeoDistanceResponse::is_bearing_Set() const{
    return m_bearing_isSet;
}

bool OAIGeoDistanceResponse::is_bearing_Valid() const{
    return m_bearing_isValid;
}

double OAIGeoDistanceResponse::getMeters() const {
    return m_meters;
}
void OAIGeoDistanceResponse::setMeters(const double &meters) {
    m_meters = meters;
    m_meters_isSet = true;
}

bool OAIGeoDistanceResponse::is_meters_Set() const{
    return m_meters_isSet;
}

bool OAIGeoDistanceResponse::is_meters_Valid() const{
    return m_meters_isValid;
}

bool OAIGeoDistanceResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bearing_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_meters_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGeoDistanceResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
