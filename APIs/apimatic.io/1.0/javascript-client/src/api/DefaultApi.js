/**
 * APIMATIC API Transformer
 * Transform API Descriptions from/to various formats
 *
 * The version of the OpenAPI document: 1.0
 * Contact: transform@apimatic.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";

/**
* Default service.
* @module api/DefaultApi
* @version 1.0
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the convertAPI operation.
     * @callback module:api/DefaultApi~convertAPICallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Transform API Descriptions from/to various formats
     * Transform API Descriptions from/to various formats e.g., Swagger, API Blueprint, RAML, WADL, Google Discovery, I/O Docs.  ### INPUTS * API Blueprint * Swagger 1.0 - 1.2 * Swagger 2.0 JSON * Swagger 2.0 YAML * WADL - W3C 2009 * Google Discovery * RAML 0.8 * I/O Docs - Mashery * HAR 1.2 * Postman Collection 1.0 - 2.0 * APIMATIC Format * Mashape  ### OUTPUTS * API Blueprint * Swagger 1.2 * Swagger 2.0 JSON * Swagger 2.0 YAML * WADL - W3C 2009 * RAML 0.8 - 1.0 * APIMATIC Format
     * @param {module:model/String} format 
     * @param {Object} opts Optional parameters
     * @param {String} [url] 
     * @param {module:api/DefaultApi~convertAPICallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    convertAPI(format, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling convertAPI");
      }

      let pathParams = {
      };
      let queryParams = {
        'format': format
      };
      let headerParams = {
      };
      let formParams = {
        'url': opts['url']
      };

      let authNames = [];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json', 'application/x-yaml'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/transform', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
