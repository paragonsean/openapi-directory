/**
 * GoToTraining
 * The GoToTraining API enables developers to use the stable and robust GoToTraining functionality as the basis for online trainings in a proprietary learning management system. The GoToTraining APIs provide the ability to access the scheduling, registration, management, and reporting functions of GoToTraining from external applications. With the ability to tightly integrate GoToTraining into your learning infrastructure, you can offer your learners a seamless user experience and provide them with a market leading virtual classroom environment.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: developer-support@logmein.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRecording.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRecording::OAIRecording(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRecording::OAIRecording() {
    this->initializeModel();
}

OAIRecording::~OAIRecording() {}

void OAIRecording::initializeModel() {

    m_description_isSet = false;
    m_description_isValid = false;

    m_download_url_isSet = false;
    m_download_url_isValid = false;

    m_end_date_isSet = false;
    m_end_date_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_recording_id_isSet = false;
    m_recording_id_isValid = false;

    m_registration_url_isSet = false;
    m_registration_url_isValid = false;

    m_start_date_isSet = false;
    m_start_date_isValid = false;
}

void OAIRecording::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRecording::fromJsonObject(QJsonObject json) {

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_download_url_isValid = ::OpenAPI::fromJsonValue(m_download_url, json[QString("downloadUrl")]);
    m_download_url_isSet = !json[QString("downloadUrl")].isNull() && m_download_url_isValid;

    m_end_date_isValid = ::OpenAPI::fromJsonValue(m_end_date, json[QString("endDate")]);
    m_end_date_isSet = !json[QString("endDate")].isNull() && m_end_date_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_recording_id_isValid = ::OpenAPI::fromJsonValue(m_recording_id, json[QString("recordingId")]);
    m_recording_id_isSet = !json[QString("recordingId")].isNull() && m_recording_id_isValid;

    m_registration_url_isValid = ::OpenAPI::fromJsonValue(m_registration_url, json[QString("registrationUrl")]);
    m_registration_url_isSet = !json[QString("registrationUrl")].isNull() && m_registration_url_isValid;

    m_start_date_isValid = ::OpenAPI::fromJsonValue(m_start_date, json[QString("startDate")]);
    m_start_date_isSet = !json[QString("startDate")].isNull() && m_start_date_isValid;
}

QString OAIRecording::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRecording::asJsonObject() const {
    QJsonObject obj;
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_download_url_isSet) {
        obj.insert(QString("downloadUrl"), ::OpenAPI::toJsonValue(m_download_url));
    }
    if (m_end_date_isSet) {
        obj.insert(QString("endDate"), ::OpenAPI::toJsonValue(m_end_date));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_recording_id_isSet) {
        obj.insert(QString("recordingId"), ::OpenAPI::toJsonValue(m_recording_id));
    }
    if (m_registration_url_isSet) {
        obj.insert(QString("registrationUrl"), ::OpenAPI::toJsonValue(m_registration_url));
    }
    if (m_start_date_isSet) {
        obj.insert(QString("startDate"), ::OpenAPI::toJsonValue(m_start_date));
    }
    return obj;
}

QString OAIRecording::getDescription() const {
    return m_description;
}
void OAIRecording::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIRecording::is_description_Set() const{
    return m_description_isSet;
}

bool OAIRecording::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIRecording::getDownloadUrl() const {
    return m_download_url;
}
void OAIRecording::setDownloadUrl(const QString &download_url) {
    m_download_url = download_url;
    m_download_url_isSet = true;
}

bool OAIRecording::is_download_url_Set() const{
    return m_download_url_isSet;
}

bool OAIRecording::is_download_url_Valid() const{
    return m_download_url_isValid;
}

QDateTime OAIRecording::getEndDate() const {
    return m_end_date;
}
void OAIRecording::setEndDate(const QDateTime &end_date) {
    m_end_date = end_date;
    m_end_date_isSet = true;
}

bool OAIRecording::is_end_date_Set() const{
    return m_end_date_isSet;
}

bool OAIRecording::is_end_date_Valid() const{
    return m_end_date_isValid;
}

QString OAIRecording::getName() const {
    return m_name;
}
void OAIRecording::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIRecording::is_name_Set() const{
    return m_name_isSet;
}

bool OAIRecording::is_name_Valid() const{
    return m_name_isValid;
}

qint64 OAIRecording::getRecordingId() const {
    return m_recording_id;
}
void OAIRecording::setRecordingId(const qint64 &recording_id) {
    m_recording_id = recording_id;
    m_recording_id_isSet = true;
}

bool OAIRecording::is_recording_id_Set() const{
    return m_recording_id_isSet;
}

bool OAIRecording::is_recording_id_Valid() const{
    return m_recording_id_isValid;
}

QString OAIRecording::getRegistrationUrl() const {
    return m_registration_url;
}
void OAIRecording::setRegistrationUrl(const QString &registration_url) {
    m_registration_url = registration_url;
    m_registration_url_isSet = true;
}

bool OAIRecording::is_registration_url_Set() const{
    return m_registration_url_isSet;
}

bool OAIRecording::is_registration_url_Valid() const{
    return m_registration_url_isValid;
}

QDateTime OAIRecording::getStartDate() const {
    return m_start_date;
}
void OAIRecording::setStartDate(const QDateTime &start_date) {
    m_start_date = start_date;
    m_start_date_isSet = true;
}

bool OAIRecording::is_start_date_Set() const{
    return m_start_date_isSet;
}

bool OAIRecording::is_start_date_Valid() const{
    return m_start_date_isValid;
}

bool OAIRecording::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_download_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recording_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_registration_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_date_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRecording::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_end_date_isValid && m_name_isValid && m_recording_id_isValid && m_start_date_isValid && true;
}

} // namespace OpenAPI
