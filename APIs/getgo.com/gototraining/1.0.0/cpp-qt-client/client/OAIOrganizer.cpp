/**
 * GoToTraining
 * The GoToTraining API enables developers to use the stable and robust GoToTraining functionality as the basis for online trainings in a proprietary learning management system. The GoToTraining APIs provide the ability to access the scheduling, registration, management, and reporting functions of GoToTraining from external applications. With the ability to tightly integrate GoToTraining into your learning infrastructure, you can offer your learners a seamless user experience and provide them with a market leading virtual classroom environment.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: developer-support@logmein.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOrganizer.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOrganizer::OAIOrganizer(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOrganizer::OAIOrganizer() {
    this->initializeModel();
}

OAIOrganizer::~OAIOrganizer() {}

void OAIOrganizer::initializeModel() {

    m_email_isSet = false;
    m_email_isValid = false;

    m_given_name_isSet = false;
    m_given_name_isValid = false;

    m_organizer_key_isSet = false;
    m_organizer_key_isValid = false;

    m_surname_isSet = false;
    m_surname_isValid = false;
}

void OAIOrganizer::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOrganizer::fromJsonObject(QJsonObject json) {

    m_email_isValid = ::OpenAPI::fromJsonValue(m_email, json[QString("email")]);
    m_email_isSet = !json[QString("email")].isNull() && m_email_isValid;

    m_given_name_isValid = ::OpenAPI::fromJsonValue(m_given_name, json[QString("givenName")]);
    m_given_name_isSet = !json[QString("givenName")].isNull() && m_given_name_isValid;

    m_organizer_key_isValid = ::OpenAPI::fromJsonValue(m_organizer_key, json[QString("organizerKey")]);
    m_organizer_key_isSet = !json[QString("organizerKey")].isNull() && m_organizer_key_isValid;

    m_surname_isValid = ::OpenAPI::fromJsonValue(m_surname, json[QString("surname")]);
    m_surname_isSet = !json[QString("surname")].isNull() && m_surname_isValid;
}

QString OAIOrganizer::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOrganizer::asJsonObject() const {
    QJsonObject obj;
    if (m_email_isSet) {
        obj.insert(QString("email"), ::OpenAPI::toJsonValue(m_email));
    }
    if (m_given_name_isSet) {
        obj.insert(QString("givenName"), ::OpenAPI::toJsonValue(m_given_name));
    }
    if (m_organizer_key_isSet) {
        obj.insert(QString("organizerKey"), ::OpenAPI::toJsonValue(m_organizer_key));
    }
    if (m_surname_isSet) {
        obj.insert(QString("surname"), ::OpenAPI::toJsonValue(m_surname));
    }
    return obj;
}

QString OAIOrganizer::getEmail() const {
    return m_email;
}
void OAIOrganizer::setEmail(const QString &email) {
    m_email = email;
    m_email_isSet = true;
}

bool OAIOrganizer::is_email_Set() const{
    return m_email_isSet;
}

bool OAIOrganizer::is_email_Valid() const{
    return m_email_isValid;
}

QString OAIOrganizer::getGivenName() const {
    return m_given_name;
}
void OAIOrganizer::setGivenName(const QString &given_name) {
    m_given_name = given_name;
    m_given_name_isSet = true;
}

bool OAIOrganizer::is_given_name_Set() const{
    return m_given_name_isSet;
}

bool OAIOrganizer::is_given_name_Valid() const{
    return m_given_name_isValid;
}

QString OAIOrganizer::getOrganizerKey() const {
    return m_organizer_key;
}
void OAIOrganizer::setOrganizerKey(const QString &organizer_key) {
    m_organizer_key = organizer_key;
    m_organizer_key_isSet = true;
}

bool OAIOrganizer::is_organizer_key_Set() const{
    return m_organizer_key_isSet;
}

bool OAIOrganizer::is_organizer_key_Valid() const{
    return m_organizer_key_isValid;
}

QString OAIOrganizer::getSurname() const {
    return m_surname;
}
void OAIOrganizer::setSurname(const QString &surname) {
    m_surname = surname;
    m_surname_isSet = true;
}

bool OAIOrganizer::is_surname_Set() const{
    return m_surname_isSet;
}

bool OAIOrganizer::is_surname_Valid() const{
    return m_surname_isValid;
}

bool OAIOrganizer::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_given_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_organizer_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_surname_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOrganizer::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_email_isValid && m_given_name_isValid && m_organizer_key_isValid && m_surname_isValid && true;
}

} // namespace OpenAPI
