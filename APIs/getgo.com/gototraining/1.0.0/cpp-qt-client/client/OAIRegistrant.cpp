/**
 * GoToTraining
 * The GoToTraining API enables developers to use the stable and robust GoToTraining functionality as the basis for online trainings in a proprietary learning management system. The GoToTraining APIs provide the ability to access the scheduling, registration, management, and reporting functions of GoToTraining from external applications. With the ability to tightly integrate GoToTraining into your learning infrastructure, you can offer your learners a seamless user experience and provide them with a market leading virtual classroom environment.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: developer-support@logmein.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRegistrant.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRegistrant::OAIRegistrant(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRegistrant::OAIRegistrant() {
    this->initializeModel();
}

OAIRegistrant::~OAIRegistrant() {}

void OAIRegistrant::initializeModel() {

    m_confirmation_url_isSet = false;
    m_confirmation_url_isValid = false;

    m_email_isSet = false;
    m_email_isValid = false;

    m_given_name_isSet = false;
    m_given_name_isValid = false;

    m_join_url_isSet = false;
    m_join_url_isValid = false;

    m_registrant_key_isSet = false;
    m_registrant_key_isValid = false;

    m_registration_date_isSet = false;
    m_registration_date_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_surname_isSet = false;
    m_surname_isValid = false;
}

void OAIRegistrant::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRegistrant::fromJsonObject(QJsonObject json) {

    m_confirmation_url_isValid = ::OpenAPI::fromJsonValue(m_confirmation_url, json[QString("confirmationUrl")]);
    m_confirmation_url_isSet = !json[QString("confirmationUrl")].isNull() && m_confirmation_url_isValid;

    m_email_isValid = ::OpenAPI::fromJsonValue(m_email, json[QString("email")]);
    m_email_isSet = !json[QString("email")].isNull() && m_email_isValid;

    m_given_name_isValid = ::OpenAPI::fromJsonValue(m_given_name, json[QString("givenName")]);
    m_given_name_isSet = !json[QString("givenName")].isNull() && m_given_name_isValid;

    m_join_url_isValid = ::OpenAPI::fromJsonValue(m_join_url, json[QString("joinUrl")]);
    m_join_url_isSet = !json[QString("joinUrl")].isNull() && m_join_url_isValid;

    m_registrant_key_isValid = ::OpenAPI::fromJsonValue(m_registrant_key, json[QString("registrantKey")]);
    m_registrant_key_isSet = !json[QString("registrantKey")].isNull() && m_registrant_key_isValid;

    m_registration_date_isValid = ::OpenAPI::fromJsonValue(m_registration_date, json[QString("registrationDate")]);
    m_registration_date_isSet = !json[QString("registrationDate")].isNull() && m_registration_date_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_surname_isValid = ::OpenAPI::fromJsonValue(m_surname, json[QString("surname")]);
    m_surname_isSet = !json[QString("surname")].isNull() && m_surname_isValid;
}

QString OAIRegistrant::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRegistrant::asJsonObject() const {
    QJsonObject obj;
    if (m_confirmation_url_isSet) {
        obj.insert(QString("confirmationUrl"), ::OpenAPI::toJsonValue(m_confirmation_url));
    }
    if (m_email_isSet) {
        obj.insert(QString("email"), ::OpenAPI::toJsonValue(m_email));
    }
    if (m_given_name_isSet) {
        obj.insert(QString("givenName"), ::OpenAPI::toJsonValue(m_given_name));
    }
    if (m_join_url_isSet) {
        obj.insert(QString("joinUrl"), ::OpenAPI::toJsonValue(m_join_url));
    }
    if (m_registrant_key_isSet) {
        obj.insert(QString("registrantKey"), ::OpenAPI::toJsonValue(m_registrant_key));
    }
    if (m_registration_date_isSet) {
        obj.insert(QString("registrationDate"), ::OpenAPI::toJsonValue(m_registration_date));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_surname_isSet) {
        obj.insert(QString("surname"), ::OpenAPI::toJsonValue(m_surname));
    }
    return obj;
}

QString OAIRegistrant::getConfirmationUrl() const {
    return m_confirmation_url;
}
void OAIRegistrant::setConfirmationUrl(const QString &confirmation_url) {
    m_confirmation_url = confirmation_url;
    m_confirmation_url_isSet = true;
}

bool OAIRegistrant::is_confirmation_url_Set() const{
    return m_confirmation_url_isSet;
}

bool OAIRegistrant::is_confirmation_url_Valid() const{
    return m_confirmation_url_isValid;
}

QString OAIRegistrant::getEmail() const {
    return m_email;
}
void OAIRegistrant::setEmail(const QString &email) {
    m_email = email;
    m_email_isSet = true;
}

bool OAIRegistrant::is_email_Set() const{
    return m_email_isSet;
}

bool OAIRegistrant::is_email_Valid() const{
    return m_email_isValid;
}

QString OAIRegistrant::getGivenName() const {
    return m_given_name;
}
void OAIRegistrant::setGivenName(const QString &given_name) {
    m_given_name = given_name;
    m_given_name_isSet = true;
}

bool OAIRegistrant::is_given_name_Set() const{
    return m_given_name_isSet;
}

bool OAIRegistrant::is_given_name_Valid() const{
    return m_given_name_isValid;
}

QString OAIRegistrant::getJoinUrl() const {
    return m_join_url;
}
void OAIRegistrant::setJoinUrl(const QString &join_url) {
    m_join_url = join_url;
    m_join_url_isSet = true;
}

bool OAIRegistrant::is_join_url_Set() const{
    return m_join_url_isSet;
}

bool OAIRegistrant::is_join_url_Valid() const{
    return m_join_url_isValid;
}

QString OAIRegistrant::getRegistrantKey() const {
    return m_registrant_key;
}
void OAIRegistrant::setRegistrantKey(const QString &registrant_key) {
    m_registrant_key = registrant_key;
    m_registrant_key_isSet = true;
}

bool OAIRegistrant::is_registrant_key_Set() const{
    return m_registrant_key_isSet;
}

bool OAIRegistrant::is_registrant_key_Valid() const{
    return m_registrant_key_isValid;
}

QDateTime OAIRegistrant::getRegistrationDate() const {
    return m_registration_date;
}
void OAIRegistrant::setRegistrationDate(const QDateTime &registration_date) {
    m_registration_date = registration_date;
    m_registration_date_isSet = true;
}

bool OAIRegistrant::is_registration_date_Set() const{
    return m_registration_date_isSet;
}

bool OAIRegistrant::is_registration_date_Valid() const{
    return m_registration_date_isValid;
}

QString OAIRegistrant::getStatus() const {
    return m_status;
}
void OAIRegistrant::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIRegistrant::is_status_Set() const{
    return m_status_isSet;
}

bool OAIRegistrant::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIRegistrant::getSurname() const {
    return m_surname;
}
void OAIRegistrant::setSurname(const QString &surname) {
    m_surname = surname;
    m_surname_isSet = true;
}

bool OAIRegistrant::is_surname_Set() const{
    return m_surname_isSet;
}

bool OAIRegistrant::is_surname_Valid() const{
    return m_surname_isValid;
}

bool OAIRegistrant::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_confirmation_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_given_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_join_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_registrant_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_registration_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_surname_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRegistrant::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_confirmation_url_isValid && m_email_isValid && m_given_name_isValid && m_join_url_isValid && m_registrant_key_isValid && m_registration_date_isValid && m_status_isValid && m_surname_isValid && true;
}

} // namespace OpenAPI
