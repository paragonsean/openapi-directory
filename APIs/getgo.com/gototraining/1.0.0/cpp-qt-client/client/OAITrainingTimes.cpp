/**
 * GoToTraining
 * The GoToTraining API enables developers to use the stable and robust GoToTraining functionality as the basis for online trainings in a proprietary learning management system. The GoToTraining APIs provide the ability to access the scheduling, registration, management, and reporting functions of GoToTraining from external applications. With the ability to tightly integrate GoToTraining into your learning infrastructure, you can offer your learners a seamless user experience and provide them with a market leading virtual classroom environment.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: developer-support@logmein.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITrainingTimes.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITrainingTimes::OAITrainingTimes(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITrainingTimes::OAITrainingTimes() {
    this->initializeModel();
}

OAITrainingTimes::~OAITrainingTimes() {}

void OAITrainingTimes::initializeModel() {

    m_notify_registrants_isSet = false;
    m_notify_registrants_isValid = false;

    m_notify_trainers_isSet = false;
    m_notify_trainers_isValid = false;

    m_time_zone_isSet = false;
    m_time_zone_isValid = false;

    m_times_isSet = false;
    m_times_isValid = false;
}

void OAITrainingTimes::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITrainingTimes::fromJsonObject(QJsonObject json) {

    m_notify_registrants_isValid = ::OpenAPI::fromJsonValue(m_notify_registrants, json[QString("notifyRegistrants")]);
    m_notify_registrants_isSet = !json[QString("notifyRegistrants")].isNull() && m_notify_registrants_isValid;

    m_notify_trainers_isValid = ::OpenAPI::fromJsonValue(m_notify_trainers, json[QString("notifyTrainers")]);
    m_notify_trainers_isSet = !json[QString("notifyTrainers")].isNull() && m_notify_trainers_isValid;

    m_time_zone_isValid = ::OpenAPI::fromJsonValue(m_time_zone, json[QString("timeZone")]);
    m_time_zone_isSet = !json[QString("timeZone")].isNull() && m_time_zone_isValid;

    m_times_isValid = ::OpenAPI::fromJsonValue(m_times, json[QString("times")]);
    m_times_isSet = !json[QString("times")].isNull() && m_times_isValid;
}

QString OAITrainingTimes::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITrainingTimes::asJsonObject() const {
    QJsonObject obj;
    if (m_notify_registrants_isSet) {
        obj.insert(QString("notifyRegistrants"), ::OpenAPI::toJsonValue(m_notify_registrants));
    }
    if (m_notify_trainers_isSet) {
        obj.insert(QString("notifyTrainers"), ::OpenAPI::toJsonValue(m_notify_trainers));
    }
    if (m_time_zone_isSet) {
        obj.insert(QString("timeZone"), ::OpenAPI::toJsonValue(m_time_zone));
    }
    if (m_times.size() > 0) {
        obj.insert(QString("times"), ::OpenAPI::toJsonValue(m_times));
    }
    return obj;
}

bool OAITrainingTimes::isNotifyRegistrants() const {
    return m_notify_registrants;
}
void OAITrainingTimes::setNotifyRegistrants(const bool &notify_registrants) {
    m_notify_registrants = notify_registrants;
    m_notify_registrants_isSet = true;
}

bool OAITrainingTimes::is_notify_registrants_Set() const{
    return m_notify_registrants_isSet;
}

bool OAITrainingTimes::is_notify_registrants_Valid() const{
    return m_notify_registrants_isValid;
}

bool OAITrainingTimes::isNotifyTrainers() const {
    return m_notify_trainers;
}
void OAITrainingTimes::setNotifyTrainers(const bool &notify_trainers) {
    m_notify_trainers = notify_trainers;
    m_notify_trainers_isSet = true;
}

bool OAITrainingTimes::is_notify_trainers_Set() const{
    return m_notify_trainers_isSet;
}

bool OAITrainingTimes::is_notify_trainers_Valid() const{
    return m_notify_trainers_isValid;
}

QString OAITrainingTimes::getTimeZone() const {
    return m_time_zone;
}
void OAITrainingTimes::setTimeZone(const QString &time_zone) {
    m_time_zone = time_zone;
    m_time_zone_isSet = true;
}

bool OAITrainingTimes::is_time_zone_Set() const{
    return m_time_zone_isSet;
}

bool OAITrainingTimes::is_time_zone_Valid() const{
    return m_time_zone_isValid;
}

QList<OAIDateTimeRange> OAITrainingTimes::getTimes() const {
    return m_times;
}
void OAITrainingTimes::setTimes(const QList<OAIDateTimeRange> &times) {
    m_times = times;
    m_times_isSet = true;
}

bool OAITrainingTimes::is_times_Set() const{
    return m_times_isSet;
}

bool OAITrainingTimes::is_times_Valid() const{
    return m_times_isValid;
}

bool OAITrainingTimes::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_notify_registrants_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_notify_trainers_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_zone_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_times.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITrainingTimes::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_time_zone_isValid && m_times_isValid && true;
}

} // namespace OpenAPI
