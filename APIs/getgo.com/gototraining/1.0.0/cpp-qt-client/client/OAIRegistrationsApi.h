/**
 * GoToTraining
 * The GoToTraining API enables developers to use the stable and robust GoToTraining functionality as the basis for online trainings in a proprietary learning management system. The GoToTraining APIs provide the ability to access the scheduling, registration, management, and reporting functions of GoToTraining from external applications. With the ability to tightly integrate GoToTraining into your learning infrastructure, you can offer your learners a seamless user experience and provide them with a market leading virtual classroom environment.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: developer-support@logmein.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIRegistrationsApi_H
#define OAI_OAIRegistrationsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIRegistrant.h"
#include "OAIRegistrantCreated.h"
#include "OAIRegistrantReqCreate.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIRegistrationsApi : public QObject {
    Q_OBJECT

public:
    OAIRegistrationsApi(const int timeOut = 0);
    ~OAIRegistrationsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  organizer_key qint64 [required]
    * @param[in]  training_key qint64 [required]
    * @param[in]  registrant_key qint64 [required]
    */
    virtual void cancelRegistration(const QString &authorization, const qint64 &organizer_key, const qint64 &training_key, const qint64 &registrant_key);

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  organizer_key qint64 [required]
    * @param[in]  training_key qint64 [required]
    * @param[in]  registrant_key qint64 [required]
    */
    virtual void getRegistrant(const QString &authorization, const qint64 &organizer_key, const qint64 &training_key, const qint64 &registrant_key);

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  organizer_key qint64 [required]
    * @param[in]  training_key qint64 [required]
    */
    virtual void getRegistrants(const QString &authorization, const qint64 &organizer_key, const qint64 &training_key);

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  organizer_key qint64 [required]
    * @param[in]  training_key qint64 [required]
    * @param[in]  body OAIRegistrantReqCreate [required]
    */
    virtual void registerForTraining(const QString &authorization, const qint64 &organizer_key, const qint64 &training_key, const OAIRegistrantReqCreate &body);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void cancelRegistrationCallback(OAIHttpRequestWorker *worker);
    void getRegistrantCallback(OAIHttpRequestWorker *worker);
    void getRegistrantsCallback(OAIHttpRequestWorker *worker);
    void registerForTrainingCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void cancelRegistrationSignal();
    void getRegistrantSignal(OAIRegistrant summary);
    void getRegistrantsSignal(QList<OAIRegistrant> summary);
    void registerForTrainingSignal(OAIRegistrantCreated summary);


    void cancelRegistrationSignalFull(OAIHttpRequestWorker *worker);
    void getRegistrantSignalFull(OAIHttpRequestWorker *worker, OAIRegistrant summary);
    void getRegistrantsSignalFull(OAIHttpRequestWorker *worker, QList<OAIRegistrant> summary);
    void registerForTrainingSignalFull(OAIHttpRequestWorker *worker, OAIRegistrantCreated summary);

    Q_DECL_DEPRECATED_X("Use cancelRegistrationSignalError() instead")
    void cancelRegistrationSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void cancelRegistrationSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRegistrantSignalError() instead")
    void getRegistrantSignalE(OAIRegistrant summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getRegistrantSignalError(OAIRegistrant summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRegistrantsSignalError() instead")
    void getRegistrantsSignalE(QList<OAIRegistrant> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getRegistrantsSignalError(QList<OAIRegistrant> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use registerForTrainingSignalError() instead")
    void registerForTrainingSignalE(OAIRegistrantCreated summary, QNetworkReply::NetworkError error_type, QString error_str);
    void registerForTrainingSignalError(OAIRegistrantCreated summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use cancelRegistrationSignalErrorFull() instead")
    void cancelRegistrationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cancelRegistrationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRegistrantSignalErrorFull() instead")
    void getRegistrantSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getRegistrantSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getRegistrantsSignalErrorFull() instead")
    void getRegistrantsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getRegistrantsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use registerForTrainingSignalErrorFull() instead")
    void registerForTrainingSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void registerForTrainingSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
