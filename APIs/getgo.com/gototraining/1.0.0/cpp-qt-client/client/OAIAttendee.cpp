/**
 * GoToTraining
 * The GoToTraining API enables developers to use the stable and robust GoToTraining functionality as the basis for online trainings in a proprietary learning management system. The GoToTraining APIs provide the ability to access the scheduling, registration, management, and reporting functions of GoToTraining from external applications. With the ability to tightly integrate GoToTraining into your learning infrastructure, you can offer your learners a seamless user experience and provide them with a market leading virtual classroom environment.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: developer-support@logmein.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAttendee.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAttendee::OAIAttendee(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAttendee::OAIAttendee() {
    this->initializeModel();
}

OAIAttendee::~OAIAttendee() {}

void OAIAttendee::initializeModel() {

    m_email_isSet = false;
    m_email_isValid = false;

    m_given_name_isSet = false;
    m_given_name_isValid = false;

    m_in_session_times_isSet = false;
    m_in_session_times_isValid = false;

    m_surname_isSet = false;
    m_surname_isValid = false;

    m_time_in_session_isSet = false;
    m_time_in_session_isValid = false;
}

void OAIAttendee::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAttendee::fromJsonObject(QJsonObject json) {

    m_email_isValid = ::OpenAPI::fromJsonValue(m_email, json[QString("email")]);
    m_email_isSet = !json[QString("email")].isNull() && m_email_isValid;

    m_given_name_isValid = ::OpenAPI::fromJsonValue(m_given_name, json[QString("givenName")]);
    m_given_name_isSet = !json[QString("givenName")].isNull() && m_given_name_isValid;

    m_in_session_times_isValid = ::OpenAPI::fromJsonValue(m_in_session_times, json[QString("inSessionTimes")]);
    m_in_session_times_isSet = !json[QString("inSessionTimes")].isNull() && m_in_session_times_isValid;

    m_surname_isValid = ::OpenAPI::fromJsonValue(m_surname, json[QString("surname")]);
    m_surname_isSet = !json[QString("surname")].isNull() && m_surname_isValid;

    m_time_in_session_isValid = ::OpenAPI::fromJsonValue(m_time_in_session, json[QString("timeInSession")]);
    m_time_in_session_isSet = !json[QString("timeInSession")].isNull() && m_time_in_session_isValid;
}

QString OAIAttendee::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAttendee::asJsonObject() const {
    QJsonObject obj;
    if (m_email_isSet) {
        obj.insert(QString("email"), ::OpenAPI::toJsonValue(m_email));
    }
    if (m_given_name_isSet) {
        obj.insert(QString("givenName"), ::OpenAPI::toJsonValue(m_given_name));
    }
    if (m_in_session_times.size() > 0) {
        obj.insert(QString("inSessionTimes"), ::OpenAPI::toJsonValue(m_in_session_times));
    }
    if (m_surname_isSet) {
        obj.insert(QString("surname"), ::OpenAPI::toJsonValue(m_surname));
    }
    if (m_time_in_session_isSet) {
        obj.insert(QString("timeInSession"), ::OpenAPI::toJsonValue(m_time_in_session));
    }
    return obj;
}

QString OAIAttendee::getEmail() const {
    return m_email;
}
void OAIAttendee::setEmail(const QString &email) {
    m_email = email;
    m_email_isSet = true;
}

bool OAIAttendee::is_email_Set() const{
    return m_email_isSet;
}

bool OAIAttendee::is_email_Valid() const{
    return m_email_isValid;
}

QString OAIAttendee::getGivenName() const {
    return m_given_name;
}
void OAIAttendee::setGivenName(const QString &given_name) {
    m_given_name = given_name;
    m_given_name_isSet = true;
}

bool OAIAttendee::is_given_name_Set() const{
    return m_given_name_isSet;
}

bool OAIAttendee::is_given_name_Valid() const{
    return m_given_name_isValid;
}

QList<OAIAttendance> OAIAttendee::getInSessionTimes() const {
    return m_in_session_times;
}
void OAIAttendee::setInSessionTimes(const QList<OAIAttendance> &in_session_times) {
    m_in_session_times = in_session_times;
    m_in_session_times_isSet = true;
}

bool OAIAttendee::is_in_session_times_Set() const{
    return m_in_session_times_isSet;
}

bool OAIAttendee::is_in_session_times_Valid() const{
    return m_in_session_times_isValid;
}

QString OAIAttendee::getSurname() const {
    return m_surname;
}
void OAIAttendee::setSurname(const QString &surname) {
    m_surname = surname;
    m_surname_isSet = true;
}

bool OAIAttendee::is_surname_Set() const{
    return m_surname_isSet;
}

bool OAIAttendee::is_surname_Valid() const{
    return m_surname_isValid;
}

qint32 OAIAttendee::getTimeInSession() const {
    return m_time_in_session;
}
void OAIAttendee::setTimeInSession(const qint32 &time_in_session) {
    m_time_in_session = time_in_session;
    m_time_in_session_isSet = true;
}

bool OAIAttendee::is_time_in_session_Set() const{
    return m_time_in_session_isSet;
}

bool OAIAttendee::is_time_in_session_Valid() const{
    return m_time_in_session_isValid;
}

bool OAIAttendee::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_given_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_in_session_times.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_surname_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_in_session_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAttendee::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_email_isValid && m_given_name_isValid && m_in_session_times_isValid && m_surname_isValid && m_time_in_session_isValid && true;
}

} // namespace OpenAPI
