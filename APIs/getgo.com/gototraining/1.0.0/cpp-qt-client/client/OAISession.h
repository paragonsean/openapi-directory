/**
 * GoToTraining
 * The GoToTraining API enables developers to use the stable and robust GoToTraining functionality as the basis for online trainings in a proprietary learning management system. The GoToTraining APIs provide the ability to access the scheduling, registration, management, and reporting functions of GoToTraining from external applications. With the ability to tightly integrate GoToTraining into your learning infrastructure, you can offer your learners a seamless user experience and provide them with a market leading virtual classroom environment.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: developer-support@logmein.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAISession.h
 *
 * Describes a completed training session.
 */

#ifndef OAISession_H
#define OAISession_H

#include <QJsonObject>

#include "OAIOrganizer.h"
#include <QDateTime>
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIOrganizer;

class OAISession : public OAIObject {
public:
    OAISession();
    OAISession(QString json);
    ~OAISession() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getAttendanceCount() const;
    void setAttendanceCount(const qint32 &attendance_count);
    bool is_attendance_count_Set() const;
    bool is_attendance_count_Valid() const;

    qint32 getDuration() const;
    void setDuration(const qint32 &duration);
    bool is_duration_Set() const;
    bool is_duration_Valid() const;

    QList<OAIOrganizer> getOrganizers() const;
    void setOrganizers(const QList<OAIOrganizer> &organizers);
    bool is_organizers_Set() const;
    bool is_organizers_Valid() const;

    QDateTime getSessionEndTime() const;
    void setSessionEndTime(const QDateTime &session_end_time);
    bool is_session_end_time_Set() const;
    bool is_session_end_time_Valid() const;

    QString getSessionKey() const;
    void setSessionKey(const QString &session_key);
    bool is_session_key_Set() const;
    bool is_session_key_Valid() const;

    QDateTime getSessionStartTime() const;
    void setSessionStartTime(const QDateTime &session_start_time);
    bool is_session_start_time_Set() const;
    bool is_session_start_time_Valid() const;

    QString getTrainingName() const;
    void setTrainingName(const QString &training_name);
    bool is_training_name_Set() const;
    bool is_training_name_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_attendance_count;
    bool m_attendance_count_isSet;
    bool m_attendance_count_isValid;

    qint32 m_duration;
    bool m_duration_isSet;
    bool m_duration_isValid;

    QList<OAIOrganizer> m_organizers;
    bool m_organizers_isSet;
    bool m_organizers_isValid;

    QDateTime m_session_end_time;
    bool m_session_end_time_isSet;
    bool m_session_end_time_isValid;

    QString m_session_key;
    bool m_session_key_isSet;
    bool m_session_key_isValid;

    QDateTime m_session_start_time;
    bool m_session_start_time_isSet;
    bool m_session_start_time_isValid;

    QString m_training_name;
    bool m_training_name_isSet;
    bool m_training_name_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAISession)

#endif // OAISession_H
