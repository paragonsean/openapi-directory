/**
 * GoToTraining
 * The GoToTraining API enables developers to use the stable and robust GoToTraining functionality as the basis for online trainings in a proprietary learning management system. The GoToTraining APIs provide the ability to access the scheduling, registration, management, and reporting functions of GoToTraining from external applications. With the ability to tightly integrate GoToTraining into your learning infrastructure, you can offer your learners a seamless user experience and provide them with a market leading virtual classroom environment.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: developer-support@logmein.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAITrainingsApi_H
#define OAI_OAITrainingsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIHostUrl.h"
#include "OAINotifiedParties.h"
#include "OAIOrganizer.h"
#include "OAIRegistrationSettings.h"
#include "OAITraining.h"
#include "OAITrainingNameDescription.h"
#include "OAITrainingOrganizers.h"
#include "OAITrainingReqCreate.h"
#include "OAITrainingTimes.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAITrainingsApi : public QObject {
    Q_OBJECT

public:
    OAITrainingsApi(const int timeOut = 0);
    ~OAITrainingsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  organizer_key qint64 [required]
    * @param[in]  training_key qint64 [required]
    */
    virtual void cancelTraining(const QString &authorization, const qint64 &organizer_key, const qint64 &training_key);

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  organizer_key qint64 [required]
    */
    virtual void getAllTrainings(const QString &authorization, const qint64 &organizer_key);

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  organizer_key qint64 [required]
    * @param[in]  training_key qint64 [required]
    */
    virtual void getManageTrainingURL(const QString &authorization, const qint64 &organizer_key, const qint64 &training_key);

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  organizer_key qint64 [required]
    * @param[in]  training_key qint64 [required]
    */
    virtual void getOrganisersForTraining(const QString &authorization, const qint64 &organizer_key, const qint64 &training_key);

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  organizer_key qint64 [required]
    * @param[in]  training_key qint64 [required]
    */
    virtual void getStartUrl(const QString &authorization, const qint64 &organizer_key, const qint64 &training_key);

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  organizer_key qint64 [required]
    * @param[in]  training_key qint64 [required]
    */
    virtual void getTraining(const QString &authorization, const qint64 &organizer_key, const qint64 &training_key);

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  organizer_key qint64 [required]
    * @param[in]  body OAITrainingReqCreate [required]
    */
    virtual void scheduleTraining(const QString &authorization, const qint64 &organizer_key, const OAITrainingReqCreate &body);

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  training_key qint64 [required]
    */
    virtual void startTraining(const QString &authorization, const qint64 &training_key);

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  organizer_key qint64 [required]
    * @param[in]  training_key qint64 [required]
    * @param[in]  body OAITrainingOrganizers [required]
    */
    virtual void updateOrganisersForTraining(const QString &authorization, const qint64 &organizer_key, const qint64 &training_key, const OAITrainingOrganizers &body);

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  organizer_key qint64 [required]
    * @param[in]  training_key qint64 [required]
    * @param[in]  body OAIRegistrationSettings [required]
    */
    virtual void updateRegistrationSettingsForTraining(const QString &authorization, const qint64 &organizer_key, const qint64 &training_key, const OAIRegistrationSettings &body);

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  organizer_key qint64 [required]
    * @param[in]  training_key qint64 [required]
    * @param[in]  body OAITrainingNameDescription [required]
    */
    virtual void updateTrainingNameDescription(const QString &authorization, const qint64 &organizer_key, const qint64 &training_key, const OAITrainingNameDescription &body);

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  organizer_key qint64 [required]
    * @param[in]  training_key qint64 [required]
    * @param[in]  body OAITrainingTimes [required]
    */
    virtual void updateTrainingTimes(const QString &authorization, const qint64 &organizer_key, const qint64 &training_key, const OAITrainingTimes &body);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void cancelTrainingCallback(OAIHttpRequestWorker *worker);
    void getAllTrainingsCallback(OAIHttpRequestWorker *worker);
    void getManageTrainingURLCallback(OAIHttpRequestWorker *worker);
    void getOrganisersForTrainingCallback(OAIHttpRequestWorker *worker);
    void getStartUrlCallback(OAIHttpRequestWorker *worker);
    void getTrainingCallback(OAIHttpRequestWorker *worker);
    void scheduleTrainingCallback(OAIHttpRequestWorker *worker);
    void startTrainingCallback(OAIHttpRequestWorker *worker);
    void updateOrganisersForTrainingCallback(OAIHttpRequestWorker *worker);
    void updateRegistrationSettingsForTrainingCallback(OAIHttpRequestWorker *worker);
    void updateTrainingNameDescriptionCallback(OAIHttpRequestWorker *worker);
    void updateTrainingTimesCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void cancelTrainingSignal();
    void getAllTrainingsSignal(QList<OAITraining> summary);
    void getManageTrainingURLSignal(QString summary);
    void getOrganisersForTrainingSignal(QList<OAIOrganizer> summary);
    void getStartUrlSignal(QString summary);
    void getTrainingSignal(OAITraining summary);
    void scheduleTrainingSignal(QString summary);
    void startTrainingSignal(OAIHostUrl summary);
    void updateOrganisersForTrainingSignal();
    void updateRegistrationSettingsForTrainingSignal();
    void updateTrainingNameDescriptionSignal();
    void updateTrainingTimesSignal(OAINotifiedParties summary);


    void cancelTrainingSignalFull(OAIHttpRequestWorker *worker);
    void getAllTrainingsSignalFull(OAIHttpRequestWorker *worker, QList<OAITraining> summary);
    void getManageTrainingURLSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void getOrganisersForTrainingSignalFull(OAIHttpRequestWorker *worker, QList<OAIOrganizer> summary);
    void getStartUrlSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void getTrainingSignalFull(OAIHttpRequestWorker *worker, OAITraining summary);
    void scheduleTrainingSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void startTrainingSignalFull(OAIHttpRequestWorker *worker, OAIHostUrl summary);
    void updateOrganisersForTrainingSignalFull(OAIHttpRequestWorker *worker);
    void updateRegistrationSettingsForTrainingSignalFull(OAIHttpRequestWorker *worker);
    void updateTrainingNameDescriptionSignalFull(OAIHttpRequestWorker *worker);
    void updateTrainingTimesSignalFull(OAIHttpRequestWorker *worker, OAINotifiedParties summary);

    Q_DECL_DEPRECATED_X("Use cancelTrainingSignalError() instead")
    void cancelTrainingSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void cancelTrainingSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAllTrainingsSignalError() instead")
    void getAllTrainingsSignalE(QList<OAITraining> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAllTrainingsSignalError(QList<OAITraining> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getManageTrainingURLSignalError() instead")
    void getManageTrainingURLSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getManageTrainingURLSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganisersForTrainingSignalError() instead")
    void getOrganisersForTrainingSignalE(QList<OAIOrganizer> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganisersForTrainingSignalError(QList<OAIOrganizer> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getStartUrlSignalError() instead")
    void getStartUrlSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getStartUrlSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTrainingSignalError() instead")
    void getTrainingSignalE(OAITraining summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getTrainingSignalError(OAITraining summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use scheduleTrainingSignalError() instead")
    void scheduleTrainingSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void scheduleTrainingSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use startTrainingSignalError() instead")
    void startTrainingSignalE(OAIHostUrl summary, QNetworkReply::NetworkError error_type, QString error_str);
    void startTrainingSignalError(OAIHostUrl summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateOrganisersForTrainingSignalError() instead")
    void updateOrganisersForTrainingSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void updateOrganisersForTrainingSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateRegistrationSettingsForTrainingSignalError() instead")
    void updateRegistrationSettingsForTrainingSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void updateRegistrationSettingsForTrainingSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateTrainingNameDescriptionSignalError() instead")
    void updateTrainingNameDescriptionSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void updateTrainingNameDescriptionSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateTrainingTimesSignalError() instead")
    void updateTrainingTimesSignalE(OAINotifiedParties summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateTrainingTimesSignalError(OAINotifiedParties summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use cancelTrainingSignalErrorFull() instead")
    void cancelTrainingSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cancelTrainingSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getAllTrainingsSignalErrorFull() instead")
    void getAllTrainingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAllTrainingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getManageTrainingURLSignalErrorFull() instead")
    void getManageTrainingURLSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getManageTrainingURLSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getOrganisersForTrainingSignalErrorFull() instead")
    void getOrganisersForTrainingSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getOrganisersForTrainingSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getStartUrlSignalErrorFull() instead")
    void getStartUrlSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getStartUrlSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTrainingSignalErrorFull() instead")
    void getTrainingSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getTrainingSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use scheduleTrainingSignalErrorFull() instead")
    void scheduleTrainingSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void scheduleTrainingSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use startTrainingSignalErrorFull() instead")
    void startTrainingSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void startTrainingSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateOrganisersForTrainingSignalErrorFull() instead")
    void updateOrganisersForTrainingSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateOrganisersForTrainingSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateRegistrationSettingsForTrainingSignalErrorFull() instead")
    void updateRegistrationSettingsForTrainingSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateRegistrationSettingsForTrainingSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateTrainingNameDescriptionSignalErrorFull() instead")
    void updateTrainingNameDescriptionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateTrainingNameDescriptionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateTrainingTimesSignalErrorFull() instead")
    void updateTrainingTimesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateTrainingTimesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
