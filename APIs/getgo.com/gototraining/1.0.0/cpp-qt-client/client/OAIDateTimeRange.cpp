/**
 * GoToTraining
 * The GoToTraining API enables developers to use the stable and robust GoToTraining functionality as the basis for online trainings in a proprietary learning management system. The GoToTraining APIs provide the ability to access the scheduling, registration, management, and reporting functions of GoToTraining from external applications. With the ability to tightly integrate GoToTraining into your learning infrastructure, you can offer your learners a seamless user experience and provide them with a market leading virtual classroom environment.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: developer-support@logmein.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDateTimeRange.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDateTimeRange::OAIDateTimeRange(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDateTimeRange::OAIDateTimeRange() {
    this->initializeModel();
}

OAIDateTimeRange::~OAIDateTimeRange() {}

void OAIDateTimeRange::initializeModel() {

    m_end_date_isSet = false;
    m_end_date_isValid = false;

    m_start_date_isSet = false;
    m_start_date_isValid = false;
}

void OAIDateTimeRange::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDateTimeRange::fromJsonObject(QJsonObject json) {

    m_end_date_isValid = ::OpenAPI::fromJsonValue(m_end_date, json[QString("endDate")]);
    m_end_date_isSet = !json[QString("endDate")].isNull() && m_end_date_isValid;

    m_start_date_isValid = ::OpenAPI::fromJsonValue(m_start_date, json[QString("startDate")]);
    m_start_date_isSet = !json[QString("startDate")].isNull() && m_start_date_isValid;
}

QString OAIDateTimeRange::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDateTimeRange::asJsonObject() const {
    QJsonObject obj;
    if (m_end_date_isSet) {
        obj.insert(QString("endDate"), ::OpenAPI::toJsonValue(m_end_date));
    }
    if (m_start_date_isSet) {
        obj.insert(QString("startDate"), ::OpenAPI::toJsonValue(m_start_date));
    }
    return obj;
}

QDateTime OAIDateTimeRange::getEndDate() const {
    return m_end_date;
}
void OAIDateTimeRange::setEndDate(const QDateTime &end_date) {
    m_end_date = end_date;
    m_end_date_isSet = true;
}

bool OAIDateTimeRange::is_end_date_Set() const{
    return m_end_date_isSet;
}

bool OAIDateTimeRange::is_end_date_Valid() const{
    return m_end_date_isValid;
}

QDateTime OAIDateTimeRange::getStartDate() const {
    return m_start_date;
}
void OAIDateTimeRange::setStartDate(const QDateTime &start_date) {
    m_start_date = start_date;
    m_start_date_isSet = true;
}

bool OAIDateTimeRange::is_start_date_Set() const{
    return m_start_date_isSet;
}

bool OAIDateTimeRange::is_start_date_Valid() const{
    return m_start_date_isValid;
}

bool OAIDateTimeRange::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_end_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_date_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDateTimeRange::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_end_date_isValid && m_start_date_isValid && true;
}

} // namespace OpenAPI
