/**
 * GoToTraining
 * The GoToTraining API enables developers to use the stable and robust GoToTraining functionality as the basis for online trainings in a proprietary learning management system. The GoToTraining APIs provide the ability to access the scheduling, registration, management, and reporting functions of GoToTraining from external applications. With the ability to tightly integrate GoToTraining into your learning infrastructure, you can offer your learners a seamless user experience and provide them with a market leading virtual classroom environment.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: developer-support@logmein.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITrainingReqCreate.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITrainingReqCreate::OAITrainingReqCreate(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITrainingReqCreate::OAITrainingReqCreate() {
    this->initializeModel();
}

OAITrainingReqCreate::~OAITrainingReqCreate() {}

void OAITrainingReqCreate::initializeModel() {

    m_description_isSet = false;
    m_description_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_organizers_isSet = false;
    m_organizers_isValid = false;

    m_registration_settings_isSet = false;
    m_registration_settings_isValid = false;

    m_time_zone_isSet = false;
    m_time_zone_isValid = false;

    m_times_isSet = false;
    m_times_isValid = false;
}

void OAITrainingReqCreate::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITrainingReqCreate::fromJsonObject(QJsonObject json) {

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_organizers_isValid = ::OpenAPI::fromJsonValue(m_organizers, json[QString("organizers")]);
    m_organizers_isSet = !json[QString("organizers")].isNull() && m_organizers_isValid;

    m_registration_settings_isValid = ::OpenAPI::fromJsonValue(m_registration_settings, json[QString("registrationSettings")]);
    m_registration_settings_isSet = !json[QString("registrationSettings")].isNull() && m_registration_settings_isValid;

    m_time_zone_isValid = ::OpenAPI::fromJsonValue(m_time_zone, json[QString("timeZone")]);
    m_time_zone_isSet = !json[QString("timeZone")].isNull() && m_time_zone_isValid;

    m_times_isValid = ::OpenAPI::fromJsonValue(m_times, json[QString("times")]);
    m_times_isSet = !json[QString("times")].isNull() && m_times_isValid;
}

QString OAITrainingReqCreate::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITrainingReqCreate::asJsonObject() const {
    QJsonObject obj;
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_organizers.size() > 0) {
        obj.insert(QString("organizers"), ::OpenAPI::toJsonValue(m_organizers));
    }
    if (m_registration_settings.isSet()) {
        obj.insert(QString("registrationSettings"), ::OpenAPI::toJsonValue(m_registration_settings));
    }
    if (m_time_zone_isSet) {
        obj.insert(QString("timeZone"), ::OpenAPI::toJsonValue(m_time_zone));
    }
    if (m_times.size() > 0) {
        obj.insert(QString("times"), ::OpenAPI::toJsonValue(m_times));
    }
    return obj;
}

QString OAITrainingReqCreate::getDescription() const {
    return m_description;
}
void OAITrainingReqCreate::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAITrainingReqCreate::is_description_Set() const{
    return m_description_isSet;
}

bool OAITrainingReqCreate::is_description_Valid() const{
    return m_description_isValid;
}

QString OAITrainingReqCreate::getName() const {
    return m_name;
}
void OAITrainingReqCreate::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAITrainingReqCreate::is_name_Set() const{
    return m_name_isSet;
}

bool OAITrainingReqCreate::is_name_Valid() const{
    return m_name_isValid;
}

QList<qint64> OAITrainingReqCreate::getOrganizers() const {
    return m_organizers;
}
void OAITrainingReqCreate::setOrganizers(const QList<qint64> &organizers) {
    m_organizers = organizers;
    m_organizers_isSet = true;
}

bool OAITrainingReqCreate::is_organizers_Set() const{
    return m_organizers_isSet;
}

bool OAITrainingReqCreate::is_organizers_Valid() const{
    return m_organizers_isValid;
}

OAIRegistrationSettings OAITrainingReqCreate::getRegistrationSettings() const {
    return m_registration_settings;
}
void OAITrainingReqCreate::setRegistrationSettings(const OAIRegistrationSettings &registration_settings) {
    m_registration_settings = registration_settings;
    m_registration_settings_isSet = true;
}

bool OAITrainingReqCreate::is_registration_settings_Set() const{
    return m_registration_settings_isSet;
}

bool OAITrainingReqCreate::is_registration_settings_Valid() const{
    return m_registration_settings_isValid;
}

QString OAITrainingReqCreate::getTimeZone() const {
    return m_time_zone;
}
void OAITrainingReqCreate::setTimeZone(const QString &time_zone) {
    m_time_zone = time_zone;
    m_time_zone_isSet = true;
}

bool OAITrainingReqCreate::is_time_zone_Set() const{
    return m_time_zone_isSet;
}

bool OAITrainingReqCreate::is_time_zone_Valid() const{
    return m_time_zone_isValid;
}

QList<OAIDateTimeRange> OAITrainingReqCreate::getTimes() const {
    return m_times;
}
void OAITrainingReqCreate::setTimes(const QList<OAIDateTimeRange> &times) {
    m_times = times;
    m_times_isSet = true;
}

bool OAITrainingReqCreate::is_times_Set() const{
    return m_times_isSet;
}

bool OAITrainingReqCreate::is_times_Valid() const{
    return m_times_isValid;
}

bool OAITrainingReqCreate::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_organizers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_registration_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_zone_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_times.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITrainingReqCreate::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_isValid && m_time_zone_isValid && m_times_isValid && true;
}

} // namespace OpenAPI
