/**
 * GoToTraining
 * The GoToTraining API enables developers to use the stable and robust GoToTraining functionality as the basis for online trainings in a proprietary learning management system. The GoToTraining APIs provide the ability to access the scheduling, registration, management, and reporting functions of GoToTraining from external applications. With the ability to tightly integrate GoToTraining into your learning infrastructure, you can offer your learners a seamless user experience and provide them with a market leading virtual classroom environment.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: developer-support@logmein.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRecordingsListForTraining.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRecordingsListForTraining::OAIRecordingsListForTraining(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRecordingsListForTraining::OAIRecordingsListForTraining() {
    this->initializeModel();
}

OAIRecordingsListForTraining::~OAIRecordingsListForTraining() {}

void OAIRecordingsListForTraining::initializeModel() {

    m_recording_list_isSet = false;
    m_recording_list_isValid = false;

    m_training_key_isSet = false;
    m_training_key_isValid = false;
}

void OAIRecordingsListForTraining::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRecordingsListForTraining::fromJsonObject(QJsonObject json) {

    m_recording_list_isValid = ::OpenAPI::fromJsonValue(m_recording_list, json[QString("recordingList")]);
    m_recording_list_isSet = !json[QString("recordingList")].isNull() && m_recording_list_isValid;

    m_training_key_isValid = ::OpenAPI::fromJsonValue(m_training_key, json[QString("trainingKey")]);
    m_training_key_isSet = !json[QString("trainingKey")].isNull() && m_training_key_isValid;
}

QString OAIRecordingsListForTraining::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRecordingsListForTraining::asJsonObject() const {
    QJsonObject obj;
    if (m_recording_list.size() > 0) {
        obj.insert(QString("recordingList"), ::OpenAPI::toJsonValue(m_recording_list));
    }
    if (m_training_key_isSet) {
        obj.insert(QString("trainingKey"), ::OpenAPI::toJsonValue(m_training_key));
    }
    return obj;
}

QList<OAIRecording> OAIRecordingsListForTraining::getRecordingList() const {
    return m_recording_list;
}
void OAIRecordingsListForTraining::setRecordingList(const QList<OAIRecording> &recording_list) {
    m_recording_list = recording_list;
    m_recording_list_isSet = true;
}

bool OAIRecordingsListForTraining::is_recording_list_Set() const{
    return m_recording_list_isSet;
}

bool OAIRecordingsListForTraining::is_recording_list_Valid() const{
    return m_recording_list_isValid;
}

qint64 OAIRecordingsListForTraining::getTrainingKey() const {
    return m_training_key;
}
void OAIRecordingsListForTraining::setTrainingKey(const qint64 &training_key) {
    m_training_key = training_key;
    m_training_key_isSet = true;
}

bool OAIRecordingsListForTraining::is_training_key_Set() const{
    return m_training_key_isSet;
}

bool OAIRecordingsListForTraining::is_training_key_Valid() const{
    return m_training_key_isValid;
}

bool OAIRecordingsListForTraining::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_recording_list.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_training_key_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRecordingsListForTraining::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_recording_list_isValid && m_training_key_isValid && true;
}

} // namespace OpenAPI
