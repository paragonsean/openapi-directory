/**
 * GoToTraining
 * The GoToTraining API enables developers to use the stable and robust GoToTraining functionality as the basis for online trainings in a proprietary learning management system. The GoToTraining APIs provide the ability to access the scheduling, registration, management, and reporting functions of GoToTraining from external applications. With the ability to tightly integrate GoToTraining into your learning infrastructure, you can offer your learners a seamless user experience and provide them with a market leading virtual classroom environment.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: developer-support@logmein.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIReportsApi_H
#define OAI_OAIReportsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAttendee.h"
#include "OAIDateTimeRange.h"
#include "OAISession.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIReportsApi : public QObject {
    Q_OBJECT

public:
    OAIReportsApi(const int timeOut = 0);
    ~OAIReportsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  organizer_key qint64 [required]
    * @param[in]  session_key qint64 [required]
    */
    virtual void getAttendanceDetails(const QString &authorization, const qint64 &organizer_key, const qint64 &session_key);

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  organizer_key qint64 [required]
    * @param[in]  body OAIDateTimeRange [required]
    */
    virtual void getSessionDetailsForDateRange(const QString &authorization, const qint64 &organizer_key, const OAIDateTimeRange &body);

    /**
    * @param[in]  authorization QString [required]
    * @param[in]  organizer_key qint64 [required]
    * @param[in]  training_key qint64 [required]
    */
    virtual void getSessionDetailsForTraining(const QString &authorization, const qint64 &organizer_key, const qint64 &training_key);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void getAttendanceDetailsCallback(OAIHttpRequestWorker *worker);
    void getSessionDetailsForDateRangeCallback(OAIHttpRequestWorker *worker);
    void getSessionDetailsForTrainingCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void getAttendanceDetailsSignal(QList<OAIAttendee> summary);
    void getSessionDetailsForDateRangeSignal(QList<OAISession> summary);
    void getSessionDetailsForTrainingSignal(QList<OAISession> summary);


    void getAttendanceDetailsSignalFull(OAIHttpRequestWorker *worker, QList<OAIAttendee> summary);
    void getSessionDetailsForDateRangeSignalFull(OAIHttpRequestWorker *worker, QList<OAISession> summary);
    void getSessionDetailsForTrainingSignalFull(OAIHttpRequestWorker *worker, QList<OAISession> summary);

    Q_DECL_DEPRECATED_X("Use getAttendanceDetailsSignalError() instead")
    void getAttendanceDetailsSignalE(QList<OAIAttendee> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getAttendanceDetailsSignalError(QList<OAIAttendee> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSessionDetailsForDateRangeSignalError() instead")
    void getSessionDetailsForDateRangeSignalE(QList<OAISession> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSessionDetailsForDateRangeSignalError(QList<OAISession> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSessionDetailsForTrainingSignalError() instead")
    void getSessionDetailsForTrainingSignalE(QList<OAISession> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSessionDetailsForTrainingSignalError(QList<OAISession> summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use getAttendanceDetailsSignalErrorFull() instead")
    void getAttendanceDetailsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getAttendanceDetailsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSessionDetailsForDateRangeSignalErrorFull() instead")
    void getSessionDetailsForDateRangeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSessionDetailsForDateRangeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSessionDetailsForTrainingSignalErrorFull() instead")
    void getSessionDetailsForTrainingSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSessionDetailsForTrainingSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
