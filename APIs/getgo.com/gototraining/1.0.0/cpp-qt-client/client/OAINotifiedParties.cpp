/**
 * GoToTraining
 * The GoToTraining API enables developers to use the stable and robust GoToTraining functionality as the basis for online trainings in a proprietary learning management system. The GoToTraining APIs provide the ability to access the scheduling, registration, management, and reporting functions of GoToTraining from external applications. With the ability to tightly integrate GoToTraining into your learning infrastructure, you can offer your learners a seamless user experience and provide them with a market leading virtual classroom environment.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: developer-support@logmein.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINotifiedParties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINotifiedParties::OAINotifiedParties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINotifiedParties::OAINotifiedParties() {
    this->initializeModel();
}

OAINotifiedParties::~OAINotifiedParties() {}

void OAINotifiedParties::initializeModel() {

    m_notified_registrants_isSet = false;
    m_notified_registrants_isValid = false;

    m_notified_trainers_isSet = false;
    m_notified_trainers_isValid = false;
}

void OAINotifiedParties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINotifiedParties::fromJsonObject(QJsonObject json) {

    m_notified_registrants_isValid = ::OpenAPI::fromJsonValue(m_notified_registrants, json[QString("notifiedRegistrants")]);
    m_notified_registrants_isSet = !json[QString("notifiedRegistrants")].isNull() && m_notified_registrants_isValid;

    m_notified_trainers_isValid = ::OpenAPI::fromJsonValue(m_notified_trainers, json[QString("notifiedTrainers")]);
    m_notified_trainers_isSet = !json[QString("notifiedTrainers")].isNull() && m_notified_trainers_isValid;
}

QString OAINotifiedParties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINotifiedParties::asJsonObject() const {
    QJsonObject obj;
    if (m_notified_registrants_isSet) {
        obj.insert(QString("notifiedRegistrants"), ::OpenAPI::toJsonValue(m_notified_registrants));
    }
    if (m_notified_trainers_isSet) {
        obj.insert(QString("notifiedTrainers"), ::OpenAPI::toJsonValue(m_notified_trainers));
    }
    return obj;
}

qint32 OAINotifiedParties::getNotifiedRegistrants() const {
    return m_notified_registrants;
}
void OAINotifiedParties::setNotifiedRegistrants(const qint32 &notified_registrants) {
    m_notified_registrants = notified_registrants;
    m_notified_registrants_isSet = true;
}

bool OAINotifiedParties::is_notified_registrants_Set() const{
    return m_notified_registrants_isSet;
}

bool OAINotifiedParties::is_notified_registrants_Valid() const{
    return m_notified_registrants_isValid;
}

qint32 OAINotifiedParties::getNotifiedTrainers() const {
    return m_notified_trainers;
}
void OAINotifiedParties::setNotifiedTrainers(const qint32 &notified_trainers) {
    m_notified_trainers = notified_trainers;
    m_notified_trainers_isSet = true;
}

bool OAINotifiedParties::is_notified_trainers_Set() const{
    return m_notified_trainers_isSet;
}

bool OAINotifiedParties::is_notified_trainers_Valid() const{
    return m_notified_trainers_isValid;
}

bool OAINotifiedParties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_notified_registrants_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_notified_trainers_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINotifiedParties::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_notified_registrants_isValid && m_notified_trainers_isValid && true;
}

} // namespace OpenAPI
