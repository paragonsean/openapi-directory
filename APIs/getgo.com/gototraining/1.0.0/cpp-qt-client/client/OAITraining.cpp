/**
 * GoToTraining
 * The GoToTraining API enables developers to use the stable and robust GoToTraining functionality as the basis for online trainings in a proprietary learning management system. The GoToTraining APIs provide the ability to access the scheduling, registration, management, and reporting functions of GoToTraining from external applications. With the ability to tightly integrate GoToTraining into your learning infrastructure, you can offer your learners a seamless user experience and provide them with a market leading virtual classroom environment.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: developer-support@logmein.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITraining.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITraining::OAITraining(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITraining::OAITraining() {
    this->initializeModel();
}

OAITraining::~OAITraining() {}

void OAITraining::initializeModel() {

    m_description_isSet = false;
    m_description_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_organizers_isSet = false;
    m_organizers_isValid = false;

    m_registration_settings_isSet = false;
    m_registration_settings_isValid = false;

    m_time_zone_isSet = false;
    m_time_zone_isValid = false;

    m_times_isSet = false;
    m_times_isValid = false;

    m_training_id_isSet = false;
    m_training_id_isValid = false;

    m_training_key_isSet = false;
    m_training_key_isValid = false;
}

void OAITraining::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITraining::fromJsonObject(QJsonObject json) {

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_organizers_isValid = ::OpenAPI::fromJsonValue(m_organizers, json[QString("organizers")]);
    m_organizers_isSet = !json[QString("organizers")].isNull() && m_organizers_isValid;

    m_registration_settings_isValid = ::OpenAPI::fromJsonValue(m_registration_settings, json[QString("registrationSettings")]);
    m_registration_settings_isSet = !json[QString("registrationSettings")].isNull() && m_registration_settings_isValid;

    m_time_zone_isValid = ::OpenAPI::fromJsonValue(m_time_zone, json[QString("timeZone")]);
    m_time_zone_isSet = !json[QString("timeZone")].isNull() && m_time_zone_isValid;

    m_times_isValid = ::OpenAPI::fromJsonValue(m_times, json[QString("times")]);
    m_times_isSet = !json[QString("times")].isNull() && m_times_isValid;

    m_training_id_isValid = ::OpenAPI::fromJsonValue(m_training_id, json[QString("trainingId")]);
    m_training_id_isSet = !json[QString("trainingId")].isNull() && m_training_id_isValid;

    m_training_key_isValid = ::OpenAPI::fromJsonValue(m_training_key, json[QString("trainingKey")]);
    m_training_key_isSet = !json[QString("trainingKey")].isNull() && m_training_key_isValid;
}

QString OAITraining::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITraining::asJsonObject() const {
    QJsonObject obj;
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_organizers.size() > 0) {
        obj.insert(QString("organizers"), ::OpenAPI::toJsonValue(m_organizers));
    }
    if (m_registration_settings.isSet()) {
        obj.insert(QString("registrationSettings"), ::OpenAPI::toJsonValue(m_registration_settings));
    }
    if (m_time_zone_isSet) {
        obj.insert(QString("timeZone"), ::OpenAPI::toJsonValue(m_time_zone));
    }
    if (m_times.size() > 0) {
        obj.insert(QString("times"), ::OpenAPI::toJsonValue(m_times));
    }
    if (m_training_id_isSet) {
        obj.insert(QString("trainingId"), ::OpenAPI::toJsonValue(m_training_id));
    }
    if (m_training_key_isSet) {
        obj.insert(QString("trainingKey"), ::OpenAPI::toJsonValue(m_training_key));
    }
    return obj;
}

QString OAITraining::getDescription() const {
    return m_description;
}
void OAITraining::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAITraining::is_description_Set() const{
    return m_description_isSet;
}

bool OAITraining::is_description_Valid() const{
    return m_description_isValid;
}

QString OAITraining::getName() const {
    return m_name;
}
void OAITraining::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAITraining::is_name_Set() const{
    return m_name_isSet;
}

bool OAITraining::is_name_Valid() const{
    return m_name_isValid;
}

QList<OAIOrganizer> OAITraining::getOrganizers() const {
    return m_organizers;
}
void OAITraining::setOrganizers(const QList<OAIOrganizer> &organizers) {
    m_organizers = organizers;
    m_organizers_isSet = true;
}

bool OAITraining::is_organizers_Set() const{
    return m_organizers_isSet;
}

bool OAITraining::is_organizers_Valid() const{
    return m_organizers_isValid;
}

OAIRegistrationSettings OAITraining::getRegistrationSettings() const {
    return m_registration_settings;
}
void OAITraining::setRegistrationSettings(const OAIRegistrationSettings &registration_settings) {
    m_registration_settings = registration_settings;
    m_registration_settings_isSet = true;
}

bool OAITraining::is_registration_settings_Set() const{
    return m_registration_settings_isSet;
}

bool OAITraining::is_registration_settings_Valid() const{
    return m_registration_settings_isValid;
}

QString OAITraining::getTimeZone() const {
    return m_time_zone;
}
void OAITraining::setTimeZone(const QString &time_zone) {
    m_time_zone = time_zone;
    m_time_zone_isSet = true;
}

bool OAITraining::is_time_zone_Set() const{
    return m_time_zone_isSet;
}

bool OAITraining::is_time_zone_Valid() const{
    return m_time_zone_isValid;
}

QList<OAIDateTimeRange> OAITraining::getTimes() const {
    return m_times;
}
void OAITraining::setTimes(const QList<OAIDateTimeRange> &times) {
    m_times = times;
    m_times_isSet = true;
}

bool OAITraining::is_times_Set() const{
    return m_times_isSet;
}

bool OAITraining::is_times_Valid() const{
    return m_times_isValid;
}

QString OAITraining::getTrainingId() const {
    return m_training_id;
}
void OAITraining::setTrainingId(const QString &training_id) {
    m_training_id = training_id;
    m_training_id_isSet = true;
}

bool OAITraining::is_training_id_Set() const{
    return m_training_id_isSet;
}

bool OAITraining::is_training_id_Valid() const{
    return m_training_id_isValid;
}

QString OAITraining::getTrainingKey() const {
    return m_training_key;
}
void OAITraining::setTrainingKey(const QString &training_key) {
    m_training_key = training_key;
    m_training_key_isSet = true;
}

bool OAITraining::is_training_key_Set() const{
    return m_training_key_isSet;
}

bool OAITraining::is_training_key_Valid() const{
    return m_training_key_isValid;
}

bool OAITraining::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_organizers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_registration_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_zone_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_times.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_training_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_training_key_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITraining::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_description_isValid && m_name_isValid && m_organizers_isValid && m_registration_settings_isValid && m_time_zone_isValid && m_times_isValid && m_training_id_isValid && m_training_key_isValid && true;
}

} // namespace OpenAPI
