/**
 * GoToTraining
 * The GoToTraining API enables developers to use the stable and robust GoToTraining functionality as the basis for online trainings in a proprietary learning management system. The GoToTraining APIs provide the ability to access the scheduling, registration, management, and reporting functions of GoToTraining from external applications. With the ability to tightly integrate GoToTraining into your learning infrastructure, you can offer your learners a seamless user experience and provide them with a market leading virtual classroom environment.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: developer-support@logmein.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAttendance.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAttendance::OAIAttendance(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAttendance::OAIAttendance() {
    this->initializeModel();
}

OAIAttendance::~OAIAttendance() {}

void OAIAttendance::initializeModel() {

    m_join_time_isSet = false;
    m_join_time_isValid = false;

    m_leave_time_isSet = false;
    m_leave_time_isValid = false;

    m_time_in_part_of_session_isSet = false;
    m_time_in_part_of_session_isValid = false;
}

void OAIAttendance::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAttendance::fromJsonObject(QJsonObject json) {

    m_join_time_isValid = ::OpenAPI::fromJsonValue(m_join_time, json[QString("joinTime")]);
    m_join_time_isSet = !json[QString("joinTime")].isNull() && m_join_time_isValid;

    m_leave_time_isValid = ::OpenAPI::fromJsonValue(m_leave_time, json[QString("leaveTime")]);
    m_leave_time_isSet = !json[QString("leaveTime")].isNull() && m_leave_time_isValid;

    m_time_in_part_of_session_isValid = ::OpenAPI::fromJsonValue(m_time_in_part_of_session, json[QString("timeInPartOfSession")]);
    m_time_in_part_of_session_isSet = !json[QString("timeInPartOfSession")].isNull() && m_time_in_part_of_session_isValid;
}

QString OAIAttendance::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAttendance::asJsonObject() const {
    QJsonObject obj;
    if (m_join_time_isSet) {
        obj.insert(QString("joinTime"), ::OpenAPI::toJsonValue(m_join_time));
    }
    if (m_leave_time_isSet) {
        obj.insert(QString("leaveTime"), ::OpenAPI::toJsonValue(m_leave_time));
    }
    if (m_time_in_part_of_session_isSet) {
        obj.insert(QString("timeInPartOfSession"), ::OpenAPI::toJsonValue(m_time_in_part_of_session));
    }
    return obj;
}

QDateTime OAIAttendance::getJoinTime() const {
    return m_join_time;
}
void OAIAttendance::setJoinTime(const QDateTime &join_time) {
    m_join_time = join_time;
    m_join_time_isSet = true;
}

bool OAIAttendance::is_join_time_Set() const{
    return m_join_time_isSet;
}

bool OAIAttendance::is_join_time_Valid() const{
    return m_join_time_isValid;
}

QDateTime OAIAttendance::getLeaveTime() const {
    return m_leave_time;
}
void OAIAttendance::setLeaveTime(const QDateTime &leave_time) {
    m_leave_time = leave_time;
    m_leave_time_isSet = true;
}

bool OAIAttendance::is_leave_time_Set() const{
    return m_leave_time_isSet;
}

bool OAIAttendance::is_leave_time_Valid() const{
    return m_leave_time_isValid;
}

qint32 OAIAttendance::getTimeInPartOfSession() const {
    return m_time_in_part_of_session;
}
void OAIAttendance::setTimeInPartOfSession(const qint32 &time_in_part_of_session) {
    m_time_in_part_of_session = time_in_part_of_session;
    m_time_in_part_of_session_isSet = true;
}

bool OAIAttendance::is_time_in_part_of_session_Set() const{
    return m_time_in_part_of_session_isSet;
}

bool OAIAttendance::is_time_in_part_of_session_Valid() const{
    return m_time_in_part_of_session_isValid;
}

bool OAIAttendance::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_join_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_leave_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_in_part_of_session_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAttendance::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_join_time_isValid && m_leave_time_isValid && m_time_in_part_of_session_isValid && true;
}

} // namespace OpenAPI
