/**
 * GoToTraining
 * The GoToTraining API enables developers to use the stable and robust GoToTraining functionality as the basis for online trainings in a proprietary learning management system. The GoToTraining APIs provide the ability to access the scheduling, registration, management, and reporting functions of GoToTraining from external applications. With the ability to tightly integrate GoToTraining into your learning infrastructure, you can offer your learners a seamless user experience and provide them with a market leading virtual classroom environment.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: developer-support@logmein.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISession.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISession::OAISession(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISession::OAISession() {
    this->initializeModel();
}

OAISession::~OAISession() {}

void OAISession::initializeModel() {

    m_attendance_count_isSet = false;
    m_attendance_count_isValid = false;

    m_duration_isSet = false;
    m_duration_isValid = false;

    m_organizers_isSet = false;
    m_organizers_isValid = false;

    m_session_end_time_isSet = false;
    m_session_end_time_isValid = false;

    m_session_key_isSet = false;
    m_session_key_isValid = false;

    m_session_start_time_isSet = false;
    m_session_start_time_isValid = false;

    m_training_name_isSet = false;
    m_training_name_isValid = false;
}

void OAISession::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISession::fromJsonObject(QJsonObject json) {

    m_attendance_count_isValid = ::OpenAPI::fromJsonValue(m_attendance_count, json[QString("attendanceCount")]);
    m_attendance_count_isSet = !json[QString("attendanceCount")].isNull() && m_attendance_count_isValid;

    m_duration_isValid = ::OpenAPI::fromJsonValue(m_duration, json[QString("duration")]);
    m_duration_isSet = !json[QString("duration")].isNull() && m_duration_isValid;

    m_organizers_isValid = ::OpenAPI::fromJsonValue(m_organizers, json[QString("organizers")]);
    m_organizers_isSet = !json[QString("organizers")].isNull() && m_organizers_isValid;

    m_session_end_time_isValid = ::OpenAPI::fromJsonValue(m_session_end_time, json[QString("sessionEndTime")]);
    m_session_end_time_isSet = !json[QString("sessionEndTime")].isNull() && m_session_end_time_isValid;

    m_session_key_isValid = ::OpenAPI::fromJsonValue(m_session_key, json[QString("sessionKey")]);
    m_session_key_isSet = !json[QString("sessionKey")].isNull() && m_session_key_isValid;

    m_session_start_time_isValid = ::OpenAPI::fromJsonValue(m_session_start_time, json[QString("sessionStartTime")]);
    m_session_start_time_isSet = !json[QString("sessionStartTime")].isNull() && m_session_start_time_isValid;

    m_training_name_isValid = ::OpenAPI::fromJsonValue(m_training_name, json[QString("trainingName")]);
    m_training_name_isSet = !json[QString("trainingName")].isNull() && m_training_name_isValid;
}

QString OAISession::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISession::asJsonObject() const {
    QJsonObject obj;
    if (m_attendance_count_isSet) {
        obj.insert(QString("attendanceCount"), ::OpenAPI::toJsonValue(m_attendance_count));
    }
    if (m_duration_isSet) {
        obj.insert(QString("duration"), ::OpenAPI::toJsonValue(m_duration));
    }
    if (m_organizers.size() > 0) {
        obj.insert(QString("organizers"), ::OpenAPI::toJsonValue(m_organizers));
    }
    if (m_session_end_time_isSet) {
        obj.insert(QString("sessionEndTime"), ::OpenAPI::toJsonValue(m_session_end_time));
    }
    if (m_session_key_isSet) {
        obj.insert(QString("sessionKey"), ::OpenAPI::toJsonValue(m_session_key));
    }
    if (m_session_start_time_isSet) {
        obj.insert(QString("sessionStartTime"), ::OpenAPI::toJsonValue(m_session_start_time));
    }
    if (m_training_name_isSet) {
        obj.insert(QString("trainingName"), ::OpenAPI::toJsonValue(m_training_name));
    }
    return obj;
}

qint32 OAISession::getAttendanceCount() const {
    return m_attendance_count;
}
void OAISession::setAttendanceCount(const qint32 &attendance_count) {
    m_attendance_count = attendance_count;
    m_attendance_count_isSet = true;
}

bool OAISession::is_attendance_count_Set() const{
    return m_attendance_count_isSet;
}

bool OAISession::is_attendance_count_Valid() const{
    return m_attendance_count_isValid;
}

qint32 OAISession::getDuration() const {
    return m_duration;
}
void OAISession::setDuration(const qint32 &duration) {
    m_duration = duration;
    m_duration_isSet = true;
}

bool OAISession::is_duration_Set() const{
    return m_duration_isSet;
}

bool OAISession::is_duration_Valid() const{
    return m_duration_isValid;
}

QList<OAIOrganizer> OAISession::getOrganizers() const {
    return m_organizers;
}
void OAISession::setOrganizers(const QList<OAIOrganizer> &organizers) {
    m_organizers = organizers;
    m_organizers_isSet = true;
}

bool OAISession::is_organizers_Set() const{
    return m_organizers_isSet;
}

bool OAISession::is_organizers_Valid() const{
    return m_organizers_isValid;
}

QDateTime OAISession::getSessionEndTime() const {
    return m_session_end_time;
}
void OAISession::setSessionEndTime(const QDateTime &session_end_time) {
    m_session_end_time = session_end_time;
    m_session_end_time_isSet = true;
}

bool OAISession::is_session_end_time_Set() const{
    return m_session_end_time_isSet;
}

bool OAISession::is_session_end_time_Valid() const{
    return m_session_end_time_isValid;
}

QString OAISession::getSessionKey() const {
    return m_session_key;
}
void OAISession::setSessionKey(const QString &session_key) {
    m_session_key = session_key;
    m_session_key_isSet = true;
}

bool OAISession::is_session_key_Set() const{
    return m_session_key_isSet;
}

bool OAISession::is_session_key_Valid() const{
    return m_session_key_isValid;
}

QDateTime OAISession::getSessionStartTime() const {
    return m_session_start_time;
}
void OAISession::setSessionStartTime(const QDateTime &session_start_time) {
    m_session_start_time = session_start_time;
    m_session_start_time_isSet = true;
}

bool OAISession::is_session_start_time_Set() const{
    return m_session_start_time_isSet;
}

bool OAISession::is_session_start_time_Valid() const{
    return m_session_start_time_isValid;
}

QString OAISession::getTrainingName() const {
    return m_training_name;
}
void OAISession::setTrainingName(const QString &training_name) {
    m_training_name = training_name;
    m_training_name_isSet = true;
}

bool OAISession::is_training_name_Set() const{
    return m_training_name_isSet;
}

bool OAISession::is_training_name_Valid() const{
    return m_training_name_isValid;
}

bool OAISession::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_attendance_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_organizers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_session_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_session_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_session_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_training_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISession::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_attendance_count_isValid && m_duration_isValid && m_organizers_isValid && m_session_end_time_isValid && m_session_key_isValid && m_session_start_time_isValid && m_training_name_isValid && true;
}

} // namespace OpenAPI
