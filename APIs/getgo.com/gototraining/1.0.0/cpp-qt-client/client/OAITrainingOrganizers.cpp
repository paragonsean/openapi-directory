/**
 * GoToTraining
 * The GoToTraining API enables developers to use the stable and robust GoToTraining functionality as the basis for online trainings in a proprietary learning management system. The GoToTraining APIs provide the ability to access the scheduling, registration, management, and reporting functions of GoToTraining from external applications. With the ability to tightly integrate GoToTraining into your learning infrastructure, you can offer your learners a seamless user experience and provide them with a market leading virtual classroom environment.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: developer-support@logmein.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITrainingOrganizers.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITrainingOrganizers::OAITrainingOrganizers(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITrainingOrganizers::OAITrainingOrganizers() {
    this->initializeModel();
}

OAITrainingOrganizers::~OAITrainingOrganizers() {}

void OAITrainingOrganizers::initializeModel() {

    m_notify_organizers_isSet = false;
    m_notify_organizers_isValid = false;

    m_organizers_isSet = false;
    m_organizers_isValid = false;
}

void OAITrainingOrganizers::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITrainingOrganizers::fromJsonObject(QJsonObject json) {

    m_notify_organizers_isValid = ::OpenAPI::fromJsonValue(m_notify_organizers, json[QString("notifyOrganizers")]);
    m_notify_organizers_isSet = !json[QString("notifyOrganizers")].isNull() && m_notify_organizers_isValid;

    m_organizers_isValid = ::OpenAPI::fromJsonValue(m_organizers, json[QString("organizers")]);
    m_organizers_isSet = !json[QString("organizers")].isNull() && m_organizers_isValid;
}

QString OAITrainingOrganizers::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITrainingOrganizers::asJsonObject() const {
    QJsonObject obj;
    if (m_notify_organizers_isSet) {
        obj.insert(QString("notifyOrganizers"), ::OpenAPI::toJsonValue(m_notify_organizers));
    }
    if (m_organizers.size() > 0) {
        obj.insert(QString("organizers"), ::OpenAPI::toJsonValue(m_organizers));
    }
    return obj;
}

bool OAITrainingOrganizers::isNotifyOrganizers() const {
    return m_notify_organizers;
}
void OAITrainingOrganizers::setNotifyOrganizers(const bool &notify_organizers) {
    m_notify_organizers = notify_organizers;
    m_notify_organizers_isSet = true;
}

bool OAITrainingOrganizers::is_notify_organizers_Set() const{
    return m_notify_organizers_isSet;
}

bool OAITrainingOrganizers::is_notify_organizers_Valid() const{
    return m_notify_organizers_isValid;
}

QList<qint64> OAITrainingOrganizers::getOrganizers() const {
    return m_organizers;
}
void OAITrainingOrganizers::setOrganizers(const QList<qint64> &organizers) {
    m_organizers = organizers;
    m_organizers_isSet = true;
}

bool OAITrainingOrganizers::is_organizers_Set() const{
    return m_organizers_isSet;
}

bool OAITrainingOrganizers::is_organizers_Valid() const{
    return m_organizers_isValid;
}

bool OAITrainingOrganizers::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_notify_organizers_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_organizers.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITrainingOrganizers::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_organizers_isValid && true;
}

} // namespace OpenAPI
