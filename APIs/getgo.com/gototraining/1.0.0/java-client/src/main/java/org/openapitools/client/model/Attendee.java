/*
 * GoToTraining
 * The GoToTraining API enables developers to use the stable and robust GoToTraining functionality as the basis for online trainings in a proprietary learning management system. The GoToTraining APIs provide the ability to access the scheduling, registration, management, and reporting functions of GoToTraining from external applications. With the ability to tightly integrate GoToTraining into your learning infrastructure, you can offer your learners a seamless user experience and provide them with a market leading virtual classroom environment.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: developer-support@logmein.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Attendance;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Describes the attendee of a training session.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:42:30.352769-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Attendee {
  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private String email;

  public static final String SERIALIZED_NAME_GIVEN_NAME = "givenName";
  @SerializedName(SERIALIZED_NAME_GIVEN_NAME)
  private String givenName;

  public static final String SERIALIZED_NAME_IN_SESSION_TIMES = "inSessionTimes";
  @SerializedName(SERIALIZED_NAME_IN_SESSION_TIMES)
  private List<Attendance> inSessionTimes = new ArrayList<>();

  public static final String SERIALIZED_NAME_SURNAME = "surname";
  @SerializedName(SERIALIZED_NAME_SURNAME)
  private String surname;

  public static final String SERIALIZED_NAME_TIME_IN_SESSION = "timeInSession";
  @SerializedName(SERIALIZED_NAME_TIME_IN_SESSION)
  private Integer timeInSession;

  public Attendee() {
  }

  public Attendee email(String email) {
    this.email = email;
    return this;
  }

  /**
   * The attendee&#39;s email address
   * @return email
   */
  @javax.annotation.Nonnull
  public String getEmail() {
    return email;
  }

  public void setEmail(String email) {
    this.email = email;
  }


  public Attendee givenName(String givenName) {
    this.givenName = givenName;
    return this;
  }

  /**
   * The attendee&#39;s first name
   * @return givenName
   */
  @javax.annotation.Nonnull
  public String getGivenName() {
    return givenName;
  }

  public void setGivenName(String givenName) {
    this.givenName = givenName;
  }


  public Attendee inSessionTimes(List<Attendance> inSessionTimes) {
    this.inSessionTimes = inSessionTimes;
    return this;
  }

  public Attendee addInSessionTimesItem(Attendance inSessionTimesItem) {
    if (this.inSessionTimes == null) {
      this.inSessionTimes = new ArrayList<>();
    }
    this.inSessionTimes.add(inSessionTimesItem);
    return this;
  }

  /**
   * List of the parts of the training session the attendee joined
   * @return inSessionTimes
   */
  @javax.annotation.Nonnull
  public List<Attendance> getInSessionTimes() {
    return inSessionTimes;
  }

  public void setInSessionTimes(List<Attendance> inSessionTimes) {
    this.inSessionTimes = inSessionTimes;
  }


  public Attendee surname(String surname) {
    this.surname = surname;
    return this;
  }

  /**
   * The attendee&#39;s surname
   * @return surname
   */
  @javax.annotation.Nonnull
  public String getSurname() {
    return surname;
  }

  public void setSurname(String surname) {
    this.surname = surname;
  }


  public Attendee timeInSession(Integer timeInSession) {
    this.timeInSession = timeInSession;
    return this;
  }

  /**
   * The total time in minutes spent at all the parts of the training session the attendee joined
   * @return timeInSession
   */
  @javax.annotation.Nonnull
  public Integer getTimeInSession() {
    return timeInSession;
  }

  public void setTimeInSession(Integer timeInSession) {
    this.timeInSession = timeInSession;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Attendee attendee = (Attendee) o;
    return Objects.equals(this.email, attendee.email) &&
        Objects.equals(this.givenName, attendee.givenName) &&
        Objects.equals(this.inSessionTimes, attendee.inSessionTimes) &&
        Objects.equals(this.surname, attendee.surname) &&
        Objects.equals(this.timeInSession, attendee.timeInSession);
  }

  @Override
  public int hashCode() {
    return Objects.hash(email, givenName, inSessionTimes, surname, timeInSession);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Attendee {\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    givenName: ").append(toIndentedString(givenName)).append("\n");
    sb.append("    inSessionTimes: ").append(toIndentedString(inSessionTimes)).append("\n");
    sb.append("    surname: ").append(toIndentedString(surname)).append("\n");
    sb.append("    timeInSession: ").append(toIndentedString(timeInSession)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("email");
    openapiFields.add("givenName");
    openapiFields.add("inSessionTimes");
    openapiFields.add("surname");
    openapiFields.add("timeInSession");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("email");
    openapiRequiredFields.add("givenName");
    openapiRequiredFields.add("inSessionTimes");
    openapiRequiredFields.add("surname");
    openapiRequiredFields.add("timeInSession");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Attendee
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Attendee.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Attendee is not found in the empty JSON string", Attendee.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Attendee.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Attendee` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Attendee.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email").toString()));
      }
      if (!jsonObj.get("givenName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `givenName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("givenName").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("inSessionTimes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `inSessionTimes` to be an array in the JSON string but got `%s`", jsonObj.get("inSessionTimes").toString()));
      }

      JsonArray jsonArrayinSessionTimes = jsonObj.getAsJsonArray("inSessionTimes");
      // validate the required field `inSessionTimes` (array)
      for (int i = 0; i < jsonArrayinSessionTimes.size(); i++) {
        Attendance.validateJsonElement(jsonArrayinSessionTimes.get(i));
      };
      if (!jsonObj.get("surname").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `surname` to be a primitive type in the JSON string but got `%s`", jsonObj.get("surname").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Attendee.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Attendee' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Attendee> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Attendee.class));

       return (TypeAdapter<T>) new TypeAdapter<Attendee>() {
           @Override
           public void write(JsonWriter out, Attendee value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Attendee read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Attendee given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Attendee
   * @throws IOException if the JSON string is invalid with respect to Attendee
   */
  public static Attendee fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Attendee.class);
  }

  /**
   * Convert an instance of Attendee to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

