/*
 * GoToTraining
 * The GoToTraining API enables developers to use the stable and robust GoToTraining functionality as the basis for online trainings in a proprietary learning management system. The GoToTraining APIs provide the ability to access the scheduling, registration, management, and reporting functions of GoToTraining from external applications. With the ability to tightly integrate GoToTraining into your learning infrastructure, you can offer your learners a seamless user experience and provide them with a market leading virtual classroom environment.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: developer-support@logmein.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Number of parties notified of a change to a training session times
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:42:30.352769-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class NotifiedParties {
  public static final String SERIALIZED_NAME_NOTIFIED_REGISTRANTS = "notifiedRegistrants";
  @SerializedName(SERIALIZED_NAME_NOTIFIED_REGISTRANTS)
  private Integer notifiedRegistrants;

  public static final String SERIALIZED_NAME_NOTIFIED_TRAINERS = "notifiedTrainers";
  @SerializedName(SERIALIZED_NAME_NOTIFIED_TRAINERS)
  private Integer notifiedTrainers;

  public NotifiedParties() {
  }

  public NotifiedParties notifiedRegistrants(Integer notifiedRegistrants) {
    this.notifiedRegistrants = notifiedRegistrants;
    return this;
  }

  /**
   * Number of registrants notified of changes to a training
   * @return notifiedRegistrants
   */
  @javax.annotation.Nonnull
  public Integer getNotifiedRegistrants() {
    return notifiedRegistrants;
  }

  public void setNotifiedRegistrants(Integer notifiedRegistrants) {
    this.notifiedRegistrants = notifiedRegistrants;
  }


  public NotifiedParties notifiedTrainers(Integer notifiedTrainers) {
    this.notifiedTrainers = notifiedTrainers;
    return this;
  }

  /**
   * Number of trainers notified of changes to a training
   * @return notifiedTrainers
   */
  @javax.annotation.Nonnull
  public Integer getNotifiedTrainers() {
    return notifiedTrainers;
  }

  public void setNotifiedTrainers(Integer notifiedTrainers) {
    this.notifiedTrainers = notifiedTrainers;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NotifiedParties notifiedParties = (NotifiedParties) o;
    return Objects.equals(this.notifiedRegistrants, notifiedParties.notifiedRegistrants) &&
        Objects.equals(this.notifiedTrainers, notifiedParties.notifiedTrainers);
  }

  @Override
  public int hashCode() {
    return Objects.hash(notifiedRegistrants, notifiedTrainers);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NotifiedParties {\n");
    sb.append("    notifiedRegistrants: ").append(toIndentedString(notifiedRegistrants)).append("\n");
    sb.append("    notifiedTrainers: ").append(toIndentedString(notifiedTrainers)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("notifiedRegistrants");
    openapiFields.add("notifiedTrainers");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("notifiedRegistrants");
    openapiRequiredFields.add("notifiedTrainers");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to NotifiedParties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!NotifiedParties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in NotifiedParties is not found in the empty JSON string", NotifiedParties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!NotifiedParties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `NotifiedParties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : NotifiedParties.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!NotifiedParties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'NotifiedParties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<NotifiedParties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(NotifiedParties.class));

       return (TypeAdapter<T>) new TypeAdapter<NotifiedParties>() {
           @Override
           public void write(JsonWriter out, NotifiedParties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public NotifiedParties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of NotifiedParties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of NotifiedParties
   * @throws IOException if the JSON string is invalid with respect to NotifiedParties
   */
  public static NotifiedParties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, NotifiedParties.class);
  }

  /**
   * Convert an instance of NotifiedParties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

