/*
 * GoToTraining
 * The GoToTraining API enables developers to use the stable and robust GoToTraining functionality as the basis for online trainings in a proprietary learning management system. The GoToTraining APIs provide the ability to access the scheduling, registration, management, and reporting functions of GoToTraining from external applications. With the ability to tightly integrate GoToTraining into your learning infrastructure, you can offer your learners a seamless user experience and provide them with a market leading virtual classroom environment.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: developer-support@logmein.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Describes a training registrant.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:42:30.352769-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Registrant {
  public static final String SERIALIZED_NAME_CONFIRMATION_URL = "confirmationUrl";
  @SerializedName(SERIALIZED_NAME_CONFIRMATION_URL)
  private String confirmationUrl;

  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private String email;

  public static final String SERIALIZED_NAME_GIVEN_NAME = "givenName";
  @SerializedName(SERIALIZED_NAME_GIVEN_NAME)
  private String givenName;

  public static final String SERIALIZED_NAME_JOIN_URL = "joinUrl";
  @SerializedName(SERIALIZED_NAME_JOIN_URL)
  private String joinUrl;

  public static final String SERIALIZED_NAME_REGISTRANT_KEY = "registrantKey";
  @SerializedName(SERIALIZED_NAME_REGISTRANT_KEY)
  private String registrantKey;

  public static final String SERIALIZED_NAME_REGISTRATION_DATE = "registrationDate";
  @SerializedName(SERIALIZED_NAME_REGISTRATION_DATE)
  private OffsetDateTime registrationDate;

  /**
   * The registrant&#39;s status
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    WAITING("WAITING"),
    
    APPROVED("APPROVED"),
    
    DENIED("DENIED");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public static final String SERIALIZED_NAME_SURNAME = "surname";
  @SerializedName(SERIALIZED_NAME_SURNAME)
  private String surname;

  public Registrant() {
  }

  public Registrant confirmationUrl(String confirmationUrl) {
    this.confirmationUrl = confirmationUrl;
    return this;
  }

  /**
   * The URL where the confirmation for the registration can be found
   * @return confirmationUrl
   */
  @javax.annotation.Nonnull
  public String getConfirmationUrl() {
    return confirmationUrl;
  }

  public void setConfirmationUrl(String confirmationUrl) {
    this.confirmationUrl = confirmationUrl;
  }


  public Registrant email(String email) {
    this.email = email;
    return this;
  }

  /**
   * The registrant&#39;s email address
   * @return email
   */
  @javax.annotation.Nonnull
  public String getEmail() {
    return email;
  }

  public void setEmail(String email) {
    this.email = email;
  }


  public Registrant givenName(String givenName) {
    this.givenName = givenName;
    return this;
  }

  /**
   * The registrant&#39;s first name
   * @return givenName
   */
  @javax.annotation.Nonnull
  public String getGivenName() {
    return givenName;
  }

  public void setGivenName(String givenName) {
    this.givenName = givenName;
  }


  public Registrant joinUrl(String joinUrl) {
    this.joinUrl = joinUrl;
    return this;
  }

  /**
   * The URL the registrant will use to join the training
   * @return joinUrl
   */
  @javax.annotation.Nonnull
  public String getJoinUrl() {
    return joinUrl;
  }

  public void setJoinUrl(String joinUrl) {
    this.joinUrl = joinUrl;
  }


  public Registrant registrantKey(String registrantKey) {
    this.registrantKey = registrantKey;
    return this;
  }

  /**
   * The registrant&#39;s key
   * @return registrantKey
   */
  @javax.annotation.Nonnull
  public String getRegistrantKey() {
    return registrantKey;
  }

  public void setRegistrantKey(String registrantKey) {
    this.registrantKey = registrantKey;
  }


  public Registrant registrationDate(OffsetDateTime registrationDate) {
    this.registrationDate = registrationDate;
    return this;
  }

  /**
   * The date and time the registration took place
   * @return registrationDate
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getRegistrationDate() {
    return registrationDate;
  }

  public void setRegistrationDate(OffsetDateTime registrationDate) {
    this.registrationDate = registrationDate;
  }


  public Registrant status(StatusEnum status) {
    this.status = status;
    return this;
  }

  /**
   * The registrant&#39;s status
   * @return status
   */
  @javax.annotation.Nonnull
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }


  public Registrant surname(String surname) {
    this.surname = surname;
    return this;
  }

  /**
   * The registrant&#39;s surname
   * @return surname
   */
  @javax.annotation.Nonnull
  public String getSurname() {
    return surname;
  }

  public void setSurname(String surname) {
    this.surname = surname;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Registrant registrant = (Registrant) o;
    return Objects.equals(this.confirmationUrl, registrant.confirmationUrl) &&
        Objects.equals(this.email, registrant.email) &&
        Objects.equals(this.givenName, registrant.givenName) &&
        Objects.equals(this.joinUrl, registrant.joinUrl) &&
        Objects.equals(this.registrantKey, registrant.registrantKey) &&
        Objects.equals(this.registrationDate, registrant.registrationDate) &&
        Objects.equals(this.status, registrant.status) &&
        Objects.equals(this.surname, registrant.surname);
  }

  @Override
  public int hashCode() {
    return Objects.hash(confirmationUrl, email, givenName, joinUrl, registrantKey, registrationDate, status, surname);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Registrant {\n");
    sb.append("    confirmationUrl: ").append(toIndentedString(confirmationUrl)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    givenName: ").append(toIndentedString(givenName)).append("\n");
    sb.append("    joinUrl: ").append(toIndentedString(joinUrl)).append("\n");
    sb.append("    registrantKey: ").append(toIndentedString(registrantKey)).append("\n");
    sb.append("    registrationDate: ").append(toIndentedString(registrationDate)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    surname: ").append(toIndentedString(surname)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("confirmationUrl");
    openapiFields.add("email");
    openapiFields.add("givenName");
    openapiFields.add("joinUrl");
    openapiFields.add("registrantKey");
    openapiFields.add("registrationDate");
    openapiFields.add("status");
    openapiFields.add("surname");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("confirmationUrl");
    openapiRequiredFields.add("email");
    openapiRequiredFields.add("givenName");
    openapiRequiredFields.add("joinUrl");
    openapiRequiredFields.add("registrantKey");
    openapiRequiredFields.add("registrationDate");
    openapiRequiredFields.add("status");
    openapiRequiredFields.add("surname");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Registrant
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Registrant.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Registrant is not found in the empty JSON string", Registrant.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Registrant.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Registrant` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Registrant.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("confirmationUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `confirmationUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("confirmationUrl").toString()));
      }
      if (!jsonObj.get("email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email").toString()));
      }
      if (!jsonObj.get("givenName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `givenName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("givenName").toString()));
      }
      if (!jsonObj.get("joinUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `joinUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("joinUrl").toString()));
      }
      if (!jsonObj.get("registrantKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `registrantKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("registrantKey").toString()));
      }
      if (!jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // validate the required field `status`
      StatusEnum.validateJsonElement(jsonObj.get("status"));
      if (!jsonObj.get("surname").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `surname` to be a primitive type in the JSON string but got `%s`", jsonObj.get("surname").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Registrant.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Registrant' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Registrant> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Registrant.class));

       return (TypeAdapter<T>) new TypeAdapter<Registrant>() {
           @Override
           public void write(JsonWriter out, Registrant value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Registrant read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Registrant given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Registrant
   * @throws IOException if the JSON string is invalid with respect to Registrant
   */
  public static Registrant fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Registrant.class);
  }

  /**
   * Convert an instance of Registrant to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

