/*
 * GoToTraining
 * The GoToTraining API enables developers to use the stable and robust GoToTraining functionality as the basis for online trainings in a proprietary learning management system. The GoToTraining APIs provide the ability to access the scheduling, registration, management, and reporting functions of GoToTraining from external applications. With the ability to tightly integrate GoToTraining into your learning infrastructure, you can offer your learners a seamless user experience and provide them with a market leading virtual classroom environment.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: developer-support@logmein.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Describes a newly created training registrant
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:42:30.352769-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RegistrantCreated {
  public static final String SERIALIZED_NAME_CONFIRMATION_URL = "confirmationUrl";
  @SerializedName(SERIALIZED_NAME_CONFIRMATION_URL)
  private String confirmationUrl;

  public static final String SERIALIZED_NAME_JOIN_URL = "joinUrl";
  @SerializedName(SERIALIZED_NAME_JOIN_URL)
  private String joinUrl;

  public static final String SERIALIZED_NAME_REGISTRANT_KEY = "registrantKey";
  @SerializedName(SERIALIZED_NAME_REGISTRANT_KEY)
  private String registrantKey;

  public RegistrantCreated() {
  }

  public RegistrantCreated confirmationUrl(String confirmationUrl) {
    this.confirmationUrl = confirmationUrl;
    return this;
  }

  /**
   * The URL where confirmation for the registration can be found
   * @return confirmationUrl
   */
  @javax.annotation.Nonnull
  public String getConfirmationUrl() {
    return confirmationUrl;
  }

  public void setConfirmationUrl(String confirmationUrl) {
    this.confirmationUrl = confirmationUrl;
  }


  public RegistrantCreated joinUrl(String joinUrl) {
    this.joinUrl = joinUrl;
    return this;
  }

  /**
   * The URL the registrant will use to join the training
   * @return joinUrl
   */
  @javax.annotation.Nonnull
  public String getJoinUrl() {
    return joinUrl;
  }

  public void setJoinUrl(String joinUrl) {
    this.joinUrl = joinUrl;
  }


  public RegistrantCreated registrantKey(String registrantKey) {
    this.registrantKey = registrantKey;
    return this;
  }

  /**
   * The registrant&#39;s key
   * @return registrantKey
   */
  @javax.annotation.Nonnull
  public String getRegistrantKey() {
    return registrantKey;
  }

  public void setRegistrantKey(String registrantKey) {
    this.registrantKey = registrantKey;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RegistrantCreated registrantCreated = (RegistrantCreated) o;
    return Objects.equals(this.confirmationUrl, registrantCreated.confirmationUrl) &&
        Objects.equals(this.joinUrl, registrantCreated.joinUrl) &&
        Objects.equals(this.registrantKey, registrantCreated.registrantKey);
  }

  @Override
  public int hashCode() {
    return Objects.hash(confirmationUrl, joinUrl, registrantKey);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RegistrantCreated {\n");
    sb.append("    confirmationUrl: ").append(toIndentedString(confirmationUrl)).append("\n");
    sb.append("    joinUrl: ").append(toIndentedString(joinUrl)).append("\n");
    sb.append("    registrantKey: ").append(toIndentedString(registrantKey)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("confirmationUrl");
    openapiFields.add("joinUrl");
    openapiFields.add("registrantKey");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("confirmationUrl");
    openapiRequiredFields.add("joinUrl");
    openapiRequiredFields.add("registrantKey");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RegistrantCreated
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RegistrantCreated.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RegistrantCreated is not found in the empty JSON string", RegistrantCreated.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RegistrantCreated.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RegistrantCreated` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : RegistrantCreated.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("confirmationUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `confirmationUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("confirmationUrl").toString()));
      }
      if (!jsonObj.get("joinUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `joinUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("joinUrl").toString()));
      }
      if (!jsonObj.get("registrantKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `registrantKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("registrantKey").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RegistrantCreated.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RegistrantCreated' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RegistrantCreated> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RegistrantCreated.class));

       return (TypeAdapter<T>) new TypeAdapter<RegistrantCreated>() {
           @Override
           public void write(JsonWriter out, RegistrantCreated value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RegistrantCreated read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RegistrantCreated given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RegistrantCreated
   * @throws IOException if the JSON string is invalid with respect to RegistrantCreated
   */
  public static RegistrantCreated fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RegistrantCreated.class);
  }

  /**
   * Convert an instance of RegistrantCreated to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

